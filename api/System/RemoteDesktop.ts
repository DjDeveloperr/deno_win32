/// Auto-generated by Deno Win32: Windows.Win32.System.RemoteDesktop.Apis

import * as util from "../../util.ts";

// Enums
export type AE_POSITION_FLAGS = number;
export type AAAuthSchemes = number;
export type AAAccountingDataType = number;
export type SESSION_TIMEOUT_ACTION_TYPE = number;
export type PolicyAttributeType = number;
export type AATrustClassID = number;
export type WTS_CONNECTSTATE_CLASS = number;
export type WTS_INFO_CLASS = number;
export type WTS_CONFIG_CLASS = number;
export type WTS_CONFIG_SOURCE = number;
export type WTS_VIRTUAL_CLASS = number;
export type WTS_TYPE_CLASS = number;
export type WTSSBX_MACHINE_DRAIN = number;
export type WTSSBX_MACHINE_SESSION_MODE = number;
export type WTSSBX_ADDRESS_FAMILY = number;
export type WTSSBX_MACHINE_STATE = number;
export type WTSSBX_SESSION_STATE = number;
export type WTSSBX_NOTIFICATION_TYPE = number;
export type TSSD_AddrV46Type = number;
export type TSSB_NOTIFICATION_TYPE = number;
export type TARGET_STATE = number;
export type TARGET_CHANGE_TYPE = number;
export type TARGET_TYPE = number;
export type TARGET_PATCH_STATE = number;
export type CLIENT_MESSAGE_TYPE = number;
export type CONNECTION_CHANGE_NOTIFICATION = number;
export type RD_FARM_TYPE = number;
export type PLUGIN_TYPE = number;
export type TSSESSION_STATE = number;
export type TARGET_OWNER = number;
export type VM_NOTIFY_STATUS = number;
export type VM_HOST_NOTIFY_STATUS = number;
export type RDV_TASK_STATUS = number;
export type TS_SB_SORT_BY = number;
export type TSPUB_PLUGIN_PD_RESOLUTION_TYPE = number;
export type TSPUB_PLUGIN_PD_ASSIGNMENT_TYPE = number;
export type WRdsGraphicsChannelType = number;
export type RIP_INFO_TYPE = number;
export type WTS_RCM_SERVICE_STATE = number;
export type WTS_RCM_DRAIN_STATE = number;
export type WTS_LOGON_ERROR_REDIRECTOR_RESPONSE = number;
export type WTS_CERT_TYPE = number;
export type WRDS_CONNECTION_SETTING_LEVEL = number;
export type WRDS_LISTENER_SETTING_LEVEL = number;
export type WRDS_SETTING_TYPE = number;
export type WRDS_SETTING_STATUS = number;
export type WRDS_SETTING_LEVEL = number;
export type PasswordEncodingType = number;
export type RemoteActionType = number;
export type SnapshotEncodingType = number;
export type SnapshotFormatType = number;
export type KeyCombinationType = number;
export type MESSAGEBOX_STYLE = number;

// Constants
export const WTS_DOMAIN_LENGTH = 255;
export const WTS_USERNAME_LENGTH = 255;
export const WTS_PASSWORD_LENGTH = 255;
export const WTS_DIRECTORY_LENGTH = 256;
export const WTS_INITIALPROGRAM_LENGTH = 256;
export const WTS_PROTOCOL_NAME_LENGTH = 8;
export const WTS_DRIVER_NAME_LENGTH = 8;
export const WTS_DEVICE_NAME_LENGTH = 19;
export const WTS_IMEFILENAME_LENGTH = 32;
export const WTS_CLIENTNAME_LENGTH = 20;
export const WTS_CLIENTADDRESS_LENGTH = 30;
export const WTS_CLIENT_PRODUCT_ID_LENGTH = 32;
export const WTS_MAX_PROTOCOL_CACHE = 4;
export const WTS_MAX_CACHE_RESERVED = 20;
export const WTS_MAX_RESERVED = 100;
export const WTS_MAX_COUNTERS = 100;
export const WTS_MAX_DISPLAY_IOCTL_DATA = 256;
export const WTS_PERF_DISABLE_NOTHING = 0;
export const WTS_PERF_DISABLE_WALLPAPER = 1;
export const WTS_PERF_DISABLE_FULLWINDOWDRAG = 2;
export const WTS_PERF_DISABLE_MENUANIMATIONS = 4;
export const WTS_PERF_DISABLE_THEMING = 8;
export const WTS_PERF_ENABLE_ENHANCED_GRAPHICS = 16;
export const WTS_PERF_DISABLE_CURSOR_SHADOW = 32;
export const WTS_PERF_DISABLE_CURSORSETTINGS = 64;
export const WTS_PERF_ENABLE_FONT_SMOOTHING = 128;
export const WTS_PERF_ENABLE_DESKTOP_COMPOSITION = 256;
export const WTS_VALUE_TYPE_ULONG = 1;
export const WTS_VALUE_TYPE_STRING = 2;
export const WTS_VALUE_TYPE_BINARY = 3;
export const WTS_VALUE_TYPE_GUID = 4;
export const WTS_KEY_EXCHANGE_ALG_RSA = 1;
export const WTS_KEY_EXCHANGE_ALG_DH = 2;
export const WTS_LICENSE_PROTOCOL_VERSION = 65536;
export const WTS_LICENSE_PREAMBLE_VERSION = 3;
export const WRDS_DOMAIN_LENGTH = 255;
export const WRDS_USERNAME_LENGTH = 255;
export const WRDS_PASSWORD_LENGTH = 255;
export const WRDS_DIRECTORY_LENGTH = 256;
export const WRDS_INITIALPROGRAM_LENGTH = 256;
export const WRDS_PROTOCOL_NAME_LENGTH = 8;
export const WRDS_DRIVER_NAME_LENGTH = 8;
export const WRDS_DEVICE_NAME_LENGTH = 19;
export const WRDS_IMEFILENAME_LENGTH = 32;
export const WRDS_CLIENTNAME_LENGTH = 20;
export const WRDS_CLIENTADDRESS_LENGTH = 30;
export const WRDS_CLIENT_PRODUCT_ID_LENGTH = 32;
export const WRDS_MAX_PROTOCOL_CACHE = 4;
export const WRDS_MAX_CACHE_RESERVED = 20;
export const WRDS_MAX_RESERVED = 100;
export const WRDS_MAX_COUNTERS = 100;
export const WRDS_MAX_DISPLAY_IOCTL_DATA = 256;
export const WRDS_PERF_DISABLE_NOTHING = 0;
export const WRDS_PERF_DISABLE_WALLPAPER = 1;
export const WRDS_PERF_DISABLE_FULLWINDOWDRAG = 2;
export const WRDS_PERF_DISABLE_MENUANIMATIONS = 4;
export const WRDS_PERF_DISABLE_THEMING = 8;
export const WRDS_PERF_ENABLE_ENHANCED_GRAPHICS = 16;
export const WRDS_PERF_DISABLE_CURSOR_SHADOW = 32;
export const WRDS_PERF_DISABLE_CURSORSETTINGS = 64;
export const WRDS_PERF_ENABLE_FONT_SMOOTHING = 128;
export const WRDS_PERF_ENABLE_DESKTOP_COMPOSITION = 256;
export const WRDS_VALUE_TYPE_ULONG = 1;
export const WRDS_VALUE_TYPE_STRING = 2;
export const WRDS_VALUE_TYPE_BINARY = 3;
export const WRDS_VALUE_TYPE_GUID = 4;
export const WRDS_KEY_EXCHANGE_ALG_RSA = 1;
export const WRDS_KEY_EXCHANGE_ALG_DH = 2;
export const WRDS_LICENSE_PROTOCOL_VERSION = 65536;
export const WRDS_LICENSE_PREAMBLE_VERSION = 3;
export const SINGLE_SESSION = 1;
export const FORCE_REJOIN = 2;
export const FORCE_REJOIN_IN_CLUSTERMODE = 3;
export const RESERVED_FOR_LEGACY = 4;
export const KEEP_EXISTING_SESSIONS = 8;
export const CHANNEL_EVENT_INITIALIZED = 0;
export const CHANNEL_EVENT_CONNECTED = 1;
export const CHANNEL_EVENT_V1_CONNECTED = 2;
export const CHANNEL_EVENT_DISCONNECTED = 3;
export const CHANNEL_EVENT_TERMINATED = 4;
export const CHANNEL_EVENT_DATA_RECEIVED = 10;
export const CHANNEL_EVENT_WRITE_COMPLETE = 11;
export const CHANNEL_EVENT_WRITE_CANCELLED = 12;
export const CHANNEL_RC_OK = 0;
export const CHANNEL_RC_ALREADY_INITIALIZED = 1;
export const CHANNEL_RC_NOT_INITIALIZED = 2;
export const CHANNEL_RC_ALREADY_CONNECTED = 3;
export const CHANNEL_RC_NOT_CONNECTED = 4;
export const CHANNEL_RC_TOO_MANY_CHANNELS = 5;
export const CHANNEL_RC_BAD_CHANNEL = 6;
export const CHANNEL_RC_BAD_CHANNEL_HANDLE = 7;
export const CHANNEL_RC_NO_BUFFER = 8;
export const CHANNEL_RC_BAD_INIT_HANDLE = 9;
export const CHANNEL_RC_NOT_OPEN = 10;
export const CHANNEL_RC_BAD_PROC = 11;
export const CHANNEL_RC_NO_MEMORY = 12;
export const CHANNEL_RC_UNKNOWN_CHANNEL_NAME = 13;
export const CHANNEL_RC_ALREADY_OPEN = 14;
export const CHANNEL_RC_NOT_IN_VIRTUALCHANNELENTRY = 15;
export const CHANNEL_RC_NULL_DATA = 16;
export const CHANNEL_RC_ZERO_LENGTH = 17;
export const CHANNEL_RC_INVALID_INSTANCE = 18;
export const CHANNEL_RC_UNSUPPORTED_VERSION = 19;
export const CHANNEL_RC_INITIALIZATION_ERROR = 20;
export const VIRTUAL_CHANNEL_VERSION_WIN2000 = 1;
export const CHANNEL_CHUNK_LENGTH = 1600;
export const CHANNEL_BUFFER_SIZE = 65535;
export const CHANNEL_FLAG_FIRST = 1;
export const CHANNEL_FLAG_LAST = 2;
export const CHANNEL_FLAG_MIDDLE = 0;
export const CHANNEL_FLAG_FAIL = 256;
export const CHANNEL_OPTION_INITIALIZED = 2147483648;
export const CHANNEL_OPTION_ENCRYPT_RDP = 1073741824;
export const CHANNEL_OPTION_ENCRYPT_SC = 536870912;
export const CHANNEL_OPTION_ENCRYPT_CS = 268435456;
export const CHANNEL_OPTION_PRI_HIGH = 134217728;
export const CHANNEL_OPTION_PRI_MED = 67108864;
export const CHANNEL_OPTION_PRI_LOW = 33554432;
export const CHANNEL_OPTION_COMPRESS_RDP = 8388608;
export const CHANNEL_OPTION_COMPRESS = 4194304;
export const CHANNEL_OPTION_SHOW_PROTOCOL = 2097152;
export const CHANNEL_OPTION_REMOTE_CONTROL_PERSISTENT = 1048576;
export const CHANNEL_MAX_COUNT = 30;
export const CHANNEL_NAME_LEN = 7;
export const MAX_POLICY_ATTRIBUTES = 20;
export const WTS_CURRENT_SESSION = 4294967295;
export const USERNAME_LENGTH = 20;
export const CLIENTNAME_LENGTH = 20;
export const CLIENTADDRESS_LENGTH = 30;
export const WTS_WSD_LOGOFF = 1;
export const WTS_WSD_SHUTDOWN = 2;
export const WTS_WSD_REBOOT = 4;
export const WTS_WSD_POWEROFF = 8;
export const WTS_WSD_FASTREBOOT = 16;
export const MAX_ELAPSED_TIME_LENGTH = 15;
export const MAX_DATE_TIME_LENGTH = 56;
export const WINSTATIONNAME_LENGTH = 32;
export const DOMAIN_LENGTH = 17;
export const WTS_DRIVE_LENGTH = 3;
export const WTS_LISTENER_NAME_LENGTH = 32;
export const WTS_COMMENT_LENGTH = 60;
export const WTS_LISTENER_CREATE = 1;
export const WTS_LISTENER_UPDATE = 16;
export const WTS_SECURITY_QUERY_INFORMATION = 1;
export const WTS_SECURITY_SET_INFORMATION = 2;
export const WTS_SECURITY_RESET = 4;
export const WTS_SECURITY_VIRTUAL_CHANNELS = 8;
export const WTS_SECURITY_REMOTE_CONTROL = 16;
export const WTS_SECURITY_LOGON = 32;
export const WTS_SECURITY_LOGOFF = 64;
export const WTS_SECURITY_MESSAGE = 128;
export const WTS_SECURITY_CONNECT = 256;
export const WTS_SECURITY_DISCONNECT = 512;
export const WTS_SECURITY_GUEST_ACCESS = 32;
export const WTS_PROTOCOL_TYPE_CONSOLE = 0;
export const WTS_PROTOCOL_TYPE_ICA = 1;
export const WTS_PROTOCOL_TYPE_RDP = 2;
export const WTS_SESSIONSTATE_UNKNOWN = 4294967295;
export const WTS_SESSIONSTATE_LOCK = 0;
export const WTS_SESSIONSTATE_UNLOCK = 1;
export const PRODUCTINFO_COMPANYNAME_LENGTH = 256;
export const PRODUCTINFO_PRODUCTID_LENGTH = 4;
export const VALIDATIONINFORMATION_LICENSE_LENGTH = 16384;
export const VALIDATIONINFORMATION_HARDWAREID_LENGTH = 20;
export const WTS_EVENT_NONE = 0;
export const WTS_EVENT_CREATE = 1;
export const WTS_EVENT_DELETE = 2;
export const WTS_EVENT_RENAME = 4;
export const WTS_EVENT_CONNECT = 8;
export const WTS_EVENT_DISCONNECT = 16;
export const WTS_EVENT_LOGON = 32;
export const WTS_EVENT_LOGOFF = 64;
export const WTS_EVENT_STATECHANGE = 128;
export const WTS_EVENT_LICENSE = 256;
export const WTS_EVENT_ALL = 2147483647;
export const WTS_EVENT_FLUSH = 2147483648;
export const REMOTECONTROL_KBDSHIFT_HOTKEY = 1;
export const REMOTECONTROL_KBDCTRL_HOTKEY = 2;
export const REMOTECONTROL_KBDALT_HOTKEY = 4;
export const WTS_CHANNEL_OPTION_DYNAMIC = 1;
export const WTS_CHANNEL_OPTION_DYNAMIC_PRI_LOW = 0;
export const WTS_CHANNEL_OPTION_DYNAMIC_PRI_MED = 2;
export const WTS_CHANNEL_OPTION_DYNAMIC_PRI_HIGH = 4;
export const WTS_CHANNEL_OPTION_DYNAMIC_PRI_REAL = 6;
export const WTS_CHANNEL_OPTION_DYNAMIC_NO_COMPRESS = 8;
export const NOTIFY_FOR_ALL_SESSIONS = 1;
export const NOTIFY_FOR_THIS_SESSION = 0;
export const WTS_PROCESS_INFO_LEVEL_0 = 0;
export const WTS_PROCESS_INFO_LEVEL_1 = 1;
export const PLUGIN_CAPABILITY_EXTERNAL_REDIRECTION = 1;
export const MaxFQDN_Len = 256;
export const MaxNetBiosName_Len = 16;
export const MaxNumOfExposed_IPs = 12;
export const MaxUserName_Len = 104;
export const MaxDomainName_Len = 256;
export const MaxFarm_Len = 256;
export const MaxAppName_Len = 256;
export const WKS_FLAG_CLEAR_CREDS_ON_LAST_RESOURCE = 1;
export const WKS_FLAG_PASSWORD_ENCRYPTED = 2;
export const WKS_FLAG_CREDS_AUTHENTICATED = 4;
export const SB_SYNCH_CONFLICT_MAX_WRITE_ATTEMPTS = 100;
export const ACQUIRE_TARGET_LOCK_TIMEOUT = 300000;
export const RENDER_HINT_CLEAR = 0;
export const RENDER_HINT_VIDEO = 1;
export const RENDER_HINT_MAPPEDWINDOW = 2;
export const WTS_PROPERTY_DEFAULT_CONFIG = `DefaultConfig`;
export const TS_VC_LISTENER_STATIC_CHANNEL = 1;
export const WRdsGraphicsChannels_LossyChannelMaxMessageSize = 988;
export const RFX_RDP_MSG_PREFIX = 0;
export const RFX_GFX_MSG_PREFIX = 48;
export const RFX_GFX_MSG_PREFIX_MASK = 48;
export const RFX_GFX_MAX_SUPPORTED_MONITORS = 16;
export const RFX_CLIENT_ID_LENGTH = 32;
export const DISPID_METHOD_REMOTEDESKTOPCLIENT_CONNECT = 701;
export const DISPID_METHOD_REMOTEDESKTOPCLIENT_DISCONNECT = 702;
export const DISPID_METHOD_REMOTEDESKTOPCLIENT_RECONNECT = 703;
export const DISPID_METHOD_REMOTEDESKTOPCLIENT_DELETE_SAVED_CREDENTIALS = 704;
export const DISPID_METHOD_REMOTEDESKTOPCLIENT_UPDATE_SESSION_DISPLAYSETTINGS = 705;
export const DISPID_METHOD_REMOTEDESKTOPCLIENT_ATTACH_EVENT = 706;
export const DISPID_METHOD_REMOTEDESKTOPCLIENT_DETACH_EVENT = 707;
export const DISPID_PROP_REMOTEDESKTOPCLIENT_SETTINGS = 710;
export const DISPID_PROP_REMOTEDESKTOPCLIENT_ACTIONS = 711;
export const DISPID_PROP_REMOTEDESKTOPCLIENT_TOUCH_POINTER = 712;
export const DISPID_METHOD_REMOTEDESKTOPCLIENT_SET_RDPPROPERTY = 720;
export const DISPID_METHOD_REMOTEDESKTOPCLIENT_GET_RDPPROPERTY = 721;
export const DISPID_METHOD_REMOTEDESKTOPCLIENT_APPLY_SETTINGS = 722;
export const DISPID_METHOD_REMOTEDESKTOPCLIENT_RETRIEVE_SETTINGS = 723;
export const DISPID_METHOD_REMOTEDESKTOPCLIENT_SUSPEND_SCREEN_UPDATES = 730;
export const DISPID_METHOD_REMOTEDESKTOPCLIENT_RESUME_SCREEN_UPDATES = 731;
export const DISPID_METHOD_REMOTEDESKTOPCLIENT_EXECUTE_REMOTE_ACTION = 732;
export const DISPID_METHOD_REMOTEDESKTOPCLIENT_GET_SNAPSHOT = 733;
export const DISPID_PROP_REMOTEDESKTOPCLIENT_TOUCHPOINTER_ENABLED = 740;
export const DISPID_PROP_REMOTEDESKTOPCLIENT_TOUCHPOINTER_EVENTSENABLED = 741;
export const DISPID_PROP_REMOTEDESKTOPCLIENT_TOUCHPOINTER_POINTERSPEED = 742;
export const DISPID_AX_CONNECTING = 750;
export const DISPID_AX_CONNECTED = 751;
export const DISPID_AX_LOGINCOMPLETED = 752;
export const DISPID_AX_DISCONNECTED = 753;
export const DISPID_AX_STATUSCHANGED = 754;
export const DISPID_AX_AUTORECONNECTING = 755;
export const DISPID_AX_AUTORECONNECTED = 756;
export const DISPID_AX_DIALOGDISPLAYING = 757;
export const DISPID_AX_DIALOGDISMISSED = 758;
export const DISPID_AX_NETWORKSTATUSCHANGED = 759;
export const DISPID_AX_ADMINMESSAGERECEIVED = 760;
export const DISPID_AX_KEYCOMBINATIONPRESSED = 761;
export const DISPID_AX_REMOTEDESKTOPSIZECHANGED = 762;
export const DISPID_AX_TOUCHPOINTERCURSORMOVED = 800;
export const POSITION_INVALID = 0;
export const POSITION_DISCONTINUOUS = 1;
export const POSITION_CONTINUOUS = 2;
export const POSITION_QPC_ERROR = 4;
export const AA_AUTH_MIN = 0;
export const AA_AUTH_BASIC = 1;
export const AA_AUTH_NTLM = 2;
export const AA_AUTH_SC = 3;
export const AA_AUTH_LOGGEDONCREDENTIALS = 4;
export const AA_AUTH_NEGOTIATE = 5;
export const AA_AUTH_ANY = 6;
export const AA_AUTH_COOKIE = 7;
export const AA_AUTH_DIGEST = 8;
export const AA_AUTH_ORGID = 9;
export const AA_AUTH_CONID = 10;
export const AA_AUTH_SSPI_NTLM = 11;
export const AA_AUTH_MAX = 12;
export const AA_MAIN_SESSION_CREATION = 0;
export const AA_SUB_SESSION_CREATION = 1;
export const AA_SUB_SESSION_CLOSED = 2;
export const AA_MAIN_SESSION_CLOSED = 3;
export const SESSION_TIMEOUT_ACTION_DISCONNECT = 0;
export const SESSION_TIMEOUT_ACTION_SILENT_REAUTH = 1;
export const EnableAllRedirections = 0;
export const DisableAllRedirections = 1;
export const DriveRedirectionDisabled = 2;
export const PrinterRedirectionDisabled = 3;
export const PortRedirectionDisabled = 4;
export const ClipboardRedirectionDisabled = 5;
export const PnpRedirectionDisabled = 6;
export const AllowOnlySDRServers = 7;
export const AA_UNTRUSTED = 0;
export const AA_TRUSTEDUSER_UNTRUSTEDCLIENT = 1;
export const AA_TRUSTEDUSER_TRUSTEDCLIENT = 2;
export const WTSActive = 0;
export const WTSConnected = 1;
export const WTSConnectQuery = 2;
export const WTSShadow = 3;
export const WTSDisconnected = 4;
export const WTSIdle = 5;
export const WTSListen = 6;
export const WTSReset = 7;
export const WTSDown = 8;
export const WTSInit = 9;
export const WTSInitialProgram = 0;
export const WTSApplicationName = 1;
export const WTSWorkingDirectory = 2;
export const WTSOEMId = 3;
export const WTSSessionId = 4;
export const WTSUserName = 5;
export const WTSWinStationName = 6;
export const WTSDomainName = 7;
export const WTSConnectState = 8;
export const WTSClientBuildNumber = 9;
export const WTSClientName = 10;
export const WTSClientDirectory = 11;
export const WTSClientProductId = 12;
export const WTSClientHardwareId = 13;
export const WTSClientAddress = 14;
export const WTSClientDisplay = 15;
export const WTSClientProtocolType = 16;
export const WTSIdleTime = 17;
export const WTSLogonTime = 18;
export const WTSIncomingBytes = 19;
export const WTSOutgoingBytes = 20;
export const WTSIncomingFrames = 21;
export const WTSOutgoingFrames = 22;
export const WTSClientInfo = 23;
export const WTSSessionInfo = 24;
export const WTSSessionInfoEx = 25;
export const WTSConfigInfo = 26;
export const WTSValidationInfo = 27;
export const WTSSessionAddressV4 = 28;
export const WTSIsRemoteSession = 29;
export const WTSUserConfigInitialProgram = 0;
export const WTSUserConfigWorkingDirectory = 1;
export const WTSUserConfigfInheritInitialProgram = 2;
export const WTSUserConfigfAllowLogonTerminalServer = 3;
export const WTSUserConfigTimeoutSettingsConnections = 4;
export const WTSUserConfigTimeoutSettingsDisconnections = 5;
export const WTSUserConfigTimeoutSettingsIdle = 6;
export const WTSUserConfigfDeviceClientDrives = 7;
export const WTSUserConfigfDeviceClientPrinters = 8;
export const WTSUserConfigfDeviceClientDefaultPrinter = 9;
export const WTSUserConfigBrokenTimeoutSettings = 10;
export const WTSUserConfigReconnectSettings = 11;
export const WTSUserConfigModemCallbackSettings = 12;
export const WTSUserConfigModemCallbackPhoneNumber = 13;
export const WTSUserConfigShadowingSettings = 14;
export const WTSUserConfigTerminalServerProfilePath = 15;
export const WTSUserConfigTerminalServerHomeDir = 16;
export const WTSUserConfigTerminalServerHomeDirDrive = 17;
export const WTSUserConfigfTerminalServerRemoteHomeDir = 18;
export const WTSUserConfigUser = 19;
export const WTSUserConfigSourceSAM = 0;
export const WTSVirtualClientData = 0;
export const WTSVirtualFileHandle = 1;
export const WTSTypeProcessInfoLevel0 = 0;
export const WTSTypeProcessInfoLevel1 = 1;
export const WTSTypeSessionInfoLevel1 = 2;
export const WTSSBX_MACHINE_DRAIN_UNSPEC = 0;
export const WTSSBX_MACHINE_DRAIN_OFF = 1;
export const WTSSBX_MACHINE_DRAIN_ON = 2;
export const WTSSBX_MACHINE_SESSION_MODE_UNSPEC = 0;
export const WTSSBX_MACHINE_SESSION_MODE_SINGLE = 1;
export const WTSSBX_MACHINE_SESSION_MODE_MULTIPLE = 2;
export const WTSSBX_ADDRESS_FAMILY_AF_UNSPEC = 0;
export const WTSSBX_ADDRESS_FAMILY_AF_INET = 1;
export const WTSSBX_ADDRESS_FAMILY_AF_INET6 = 2;
export const WTSSBX_ADDRESS_FAMILY_AF_IPX = 3;
export const WTSSBX_ADDRESS_FAMILY_AF_NETBIOS = 4;
export const WTSSBX_MACHINE_STATE_UNSPEC = 0;
export const WTSSBX_MACHINE_STATE_READY = 1;
export const WTSSBX_MACHINE_STATE_SYNCHRONIZING = 2;
export const WTSSBX_SESSION_STATE_UNSPEC = 0;
export const WTSSBX_SESSION_STATE_ACTIVE = 1;
export const WTSSBX_SESSION_STATE_DISCONNECTED = 2;
export const WTSSBX_NOTIFICATION_REMOVED = 1;
export const WTSSBX_NOTIFICATION_CHANGED = 2;
export const WTSSBX_NOTIFICATION_ADDED = 4;
export const WTSSBX_NOTIFICATION_RESYNC = 8;
export const TSSD_ADDR_UNDEFINED = 0;
export const TSSD_ADDR_IPv4 = 4;
export const TSSD_ADDR_IPv6 = 6;
export const TSSB_NOTIFY_INVALID = 0;
export const TSSB_NOTIFY_TARGET_CHANGE = 1;
export const TSSB_NOTIFY_SESSION_CHANGE = 2;
export const TSSB_NOTIFY_CONNECTION_REQUEST_CHANGE = 4;
export const TARGET_UNKNOWN = 1;
export const TARGET_INITIALIZING = 2;
export const TARGET_RUNNING = 3;
export const TARGET_DOWN = 4;
export const TARGET_HIBERNATED = 5;
export const TARGET_CHECKED_OUT = 6;
export const TARGET_STOPPED = 7;
export const TARGET_INVALID = 8;
export const TARGET_STARTING = 9;
export const TARGET_STOPPING = 10;
export const TARGET_MAXSTATE = 11;
export const TARGET_CHANGE_UNSPEC = 1;
export const TARGET_EXTERNALIP_CHANGED = 2;
export const TARGET_INTERNALIP_CHANGED = 4;
export const TARGET_JOINED = 8;
export const TARGET_REMOVED = 16;
export const TARGET_STATE_CHANGED = 32;
export const TARGET_IDLE = 64;
export const TARGET_PENDING = 128;
export const TARGET_INUSE = 256;
export const TARGET_PATCH_STATE_CHANGED = 512;
export const TARGET_FARM_MEMBERSHIP_CHANGED = 1024;
export const UNKNOWN = 0;
export const FARM = 1;
export const NONFARM = 2;
export const TARGET_PATCH_UNKNOWN = 0;
export const TARGET_PATCH_NOT_STARTED = 1;
export const TARGET_PATCH_IN_PROGRESS = 2;
export const TARGET_PATCH_COMPLETED = 3;
export const TARGET_PATCH_FAILED = 4;
export const CLIENT_MESSAGE_CONNECTION_INVALID = 0;
export const CLIENT_MESSAGE_CONNECTION_STATUS = 1;
export const CLIENT_MESSAGE_CONNECTION_ERROR = 2;
export const CONNECTION_REQUEST_INVALID = 0;
export const CONNECTION_REQUEST_PENDING = 1;
export const CONNECTION_REQUEST_FAILED = 2;
export const CONNECTION_REQUEST_TIMEDOUT = 3;
export const CONNECTION_REQUEST_SUCCEEDED = 4;
export const CONNECTION_REQUEST_CANCELLED = 5;
export const CONNECTION_REQUEST_LB_COMPLETED = 6;
export const CONNECTION_REQUEST_QUERY_PL_COMPLETED = 7;
export const CONNECTION_REQUEST_ORCH_COMPLETED = 8;
export const RD_FARM_RDSH = 0;
export const RD_FARM_TEMP_VM = 1;
export const RD_FARM_MANUAL_PERSONAL_VM = 2;
export const RD_FARM_AUTO_PERSONAL_VM = 3;
export const RD_FARM_MANUAL_PERSONAL_RDSH = 4;
export const RD_FARM_AUTO_PERSONAL_RDSH = 5;
export const RD_FARM_TYPE_UNKNOWN = `-1`;
export const UNKNOWN_PLUGIN = 0;
export const POLICY_PLUGIN = 1;
export const RESOURCE_PLUGIN = 2;
export const LOAD_BALANCING_PLUGIN = 4;
export const PLACEMENT_PLUGIN = 8;
export const ORCHESTRATION_PLUGIN = 16;
export const PROVISIONING_PLUGIN = 32;
export const TASK_PLUGIN = 64;
export const STATE_INVALID = `-1`;
export const STATE_ACTIVE = 0;
export const STATE_CONNECTED = 1;
export const STATE_CONNECTQUERY = 2;
export const STATE_SHADOW = 3;
export const STATE_DISCONNECTED = 4;
export const STATE_IDLE = 5;
export const STATE_LISTEN = 6;
export const STATE_RESET = 7;
export const STATE_DOWN = 8;
export const STATE_INIT = 9;
export const STATE_MAX = 10;
export const OWNER_UNKNOWN = 0;
export const OWNER_MS_TS_PLUGIN = 1;
export const OWNER_MS_VM_PLUGIN = 2;
export const VM_NOTIFY_STATUS_PENDING = 0;
export const VM_NOTIFY_STATUS_IN_PROGRESS = 1;
export const VM_NOTIFY_STATUS_COMPLETE = 2;
export const VM_NOTIFY_STATUS_FAILED = 3;
export const VM_NOTIFY_STATUS_CANCELED = 4;
export const VM_HOST_STATUS_INIT_PENDING = 0;
export const VM_HOST_STATUS_INIT_IN_PROGRESS = 1;
export const VM_HOST_STATUS_INIT_COMPLETE = 2;
export const VM_HOST_STATUS_INIT_FAILED = 3;
export const RDV_TASK_STATUS_UNKNOWN = 0;
export const RDV_TASK_STATUS_SEARCHING = 1;
export const RDV_TASK_STATUS_DOWNLOADING = 2;
export const RDV_TASK_STATUS_APPLYING = 3;
export const RDV_TASK_STATUS_REBOOTING = 4;
export const RDV_TASK_STATUS_REBOOTED = 5;
export const RDV_TASK_STATUS_SUCCESS = 6;
export const RDV_TASK_STATUS_FAILED = 7;
export const RDV_TASK_STATUS_TIMEOUT = 8;
export const TS_SB_SORT_BY_NONE = 0;
export const TS_SB_SORT_BY_NAME = 1;
export const TS_SB_SORT_BY_PROP = 2;
export const TSPUB_PLUGIN_PD_QUERY_OR_CREATE = 0;
export const TSPUB_PLUGIN_PD_QUERY_EXISTING = 1;
export const TSPUB_PLUGIN_PD_ASSIGNMENT_NEW = 0;
export const TSPUB_PLUGIN_PD_ASSIGNMENT_EXISTING = 1;
export const WRdsGraphicsChannelType_GuaranteedDelivery = 0;
export const WRdsGraphicsChannelType_BestEffortDelivery = 1;
export const SLE_ERROR = 1;
export const SLE_MINORERROR = 2;
export const SLE_WARNING = 3;
export const WTS_SERVICE_NONE = 0;
export const WTS_SERVICE_START = 1;
export const WTS_SERVICE_STOP = 2;
export const WTS_DRAIN_STATE_NONE = 0;
export const WTS_DRAIN_IN_DRAIN = 1;
export const WTS_DRAIN_NOT_IN_DRAIN = 2;
export const WTS_LOGON_ERR_INVALID = 0;
export const WTS_LOGON_ERR_NOT_HANDLED = 1;
export const WTS_LOGON_ERR_HANDLED_SHOW = 2;
export const WTS_LOGON_ERR_HANDLED_DONT_SHOW = 3;
export const WTS_LOGON_ERR_HANDLED_DONT_SHOW_START_OVER = 4;
export const WTS_CERT_TYPE_INVALID = 0;
export const WTS_CERT_TYPE_PROPRIETORY = 1;
export const WTS_CERT_TYPE_X509 = 2;
export const WRDS_CONNECTION_SETTING_LEVEL_INVALID = 0;
export const WRDS_CONNECTION_SETTING_LEVEL_1 = 1;
export const WRDS_LISTENER_SETTING_LEVEL_INVALID = 0;
export const WRDS_LISTENER_SETTING_LEVEL_1 = 1;
export const WRDS_SETTING_TYPE_INVALID = 0;
export const WRDS_SETTING_TYPE_MACHINE = 1;
export const WRDS_SETTING_TYPE_USER = 2;
export const WRDS_SETTING_TYPE_SAM = 3;
export const WRDS_SETTING_STATUS_NOTAPPLICABLE = `-1`;
export const WRDS_SETTING_STATUS_DISABLED = 0;
export const WRDS_SETTING_STATUS_ENABLED = 1;
export const WRDS_SETTING_STATUS_NOTCONFIGURED = 2;
export const WRDS_SETTING_LEVEL_INVALID = 0;
export const WRDS_SETTING_LEVEL_1 = 1;
export const PasswordEncodingUTF8 = 0;
export const PasswordEncodingUTF16LE = 1;
export const PasswordEncodingUTF16BE = 2;
export const RemoteActionCharms = 0;
export const RemoteActionAppbar = 1;
export const RemoteActionSnap = 2;
export const RemoteActionStartScreen = 3;
export const RemoteActionAppSwitch = 4;
export const SnapshotEncodingDataUri = 0;
export const SnapshotFormatPng = 0;
export const SnapshotFormatJpeg = 1;
export const SnapshotFormatBmp = 2;
export const KeyCombinationHome = 0;
export const KeyCombinationLeft = 1;
export const KeyCombinationUp = 2;
export const KeyCombinationRight = 3;
export const KeyCombinationDown = 4;
export const KeyCombinationScroll = 5;
export const MB_ABORTRETRYIGNORE = 2;
export const MB_CANCELTRYCONTINUE = 6;
export const MB_HELP = 16384;
export const MB_OK = 0;
export const MB_OKCANCEL = 1;
export const MB_RETRYCANCEL = 5;
export const MB_YESNO = 4;
export const MB_YESNOCANCEL = 3;
export const MB_ICONHAND = 16;
export const MB_ICONQUESTION = 32;
export const MB_ICONEXCLAMATION = 48;
export const MB_ICONASTERISK = 64;
export const MB_USERICON = 128;
export const MB_ICONWARNING = 48;
export const MB_ICONERROR = 16;
export const MB_ICONINFORMATION = 64;
export const MB_ICONSTOP = 16;
export const MB_DEFBUTTON1 = 0;
export const MB_DEFBUTTON2 = 256;
export const MB_DEFBUTTON3 = 512;
export const MB_DEFBUTTON4 = 768;
export const MB_APPLMODAL = 0;
export const MB_SYSTEMMODAL = 4096;
export const MB_TASKMODAL = 8192;
export const MB_NOFOCUS = 32768;
export const MB_SETFOREGROUND = 65536;
export const MB_DEFAULT_DESKTOP_ONLY = 131072;
export const MB_TOPMOST = 262144;
export const MB_RIGHT = 524288;
export const MB_RTLREADING = 1048576;
export const MB_SERVICE_NOTIFICATION = 2097152;
export const MB_SERVICE_NOTIFICATION_NT3X = 262144;
export const MB_TYPEMASK = 15;
export const MB_ICONMASK = 240;
export const MB_DEFMASK = 3840;
export const MB_MODEMASK = 12288;
export const MB_MISCMASK = 49152;

// Structs

/**
 * Windows.Win32.System.RemoteDesktop.AE_CURRENT_POSITION (size: 40)
 */
export interface AE_CURRENT_POSITION {
  /** u64 */
  u64DevicePosition: bigint | number;
  /** u64 */
  u64StreamPosition: bigint | number;
  /** u64 */
  u64PaddingFrames: bigint | number;
  /** i64 */
  hnsQPCPosition: bigint | number;
  /** f32 */
  f32FramesPerSecond: number;
  /** Windows.Win32.System.RemoteDesktop.AE_POSITION_FLAGS */
  Flag: AE_POSITION_FLAGS;
}

export const sizeofAE_CURRENT_POSITION = 40;

export function allocAE_CURRENT_POSITION(data?: Partial<AE_CURRENT_POSITION>): Uint8Array {
  const buf = new Uint8Array(sizeofAE_CURRENT_POSITION);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.u64DevicePosition !== undefined) view.setBigUint64(0, BigInt(data.u64DevicePosition), true);
  // 0x08: u64
  if (data?.u64StreamPosition !== undefined) view.setBigUint64(8, BigInt(data.u64StreamPosition), true);
  // 0x10: u64
  if (data?.u64PaddingFrames !== undefined) view.setBigUint64(16, BigInt(data.u64PaddingFrames), true);
  // 0x18: i64
  if (data?.hnsQPCPosition !== undefined) view.setBigInt64(24, BigInt(data.hnsQPCPosition), true);
  // 0x20: f32
  if (data?.f32FramesPerSecond !== undefined) view.setFloat32(32, Number(data.f32FramesPerSecond), true);
  // 0x24: i32
  if (data?.Flag !== undefined) view.setInt32(36, Number(data.Flag), true);
  return buf;
}

export class AE_CURRENT_POSITIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get u64DevicePosition(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get u64StreamPosition(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get u64PaddingFrames(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: i64
  get hnsQPCPosition(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: f32
  get f32FramesPerSecond(): number {
    return this.view.getFloat32(32, true);
  }

  // 0x24: i32
  get Flag(): number {
    return this.view.getInt32(36, true);
  }

  // 0x00: u64
  set u64DevicePosition(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set u64StreamPosition(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set u64PaddingFrames(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: i64
  set hnsQPCPosition(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: f32
  set f32FramesPerSecond(value: number) {
    this.view.setFloat32(32, value, true);
  }

  // 0x24: i32
  set Flag(value: number) {
    this.view.setInt32(36, value, true);
  }
}

export type HwtsVirtualChannelHandle = bigint | number;

export type BSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.System.RemoteDesktop.AAAccountingData (size: 80)
 */
export interface AAAccountingData {
  /** Windows.Win32.Foundation.BSTR */
  userName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BSTR */
  clientName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.RemoteDesktop.AAAuthSchemes */
  authType: AAAuthSchemes;
  /** Windows.Win32.Foundation.BSTR */
  resourceName: Uint8Array | Deno.PointerValue;
  /** i32 */
  portNumber: number;
  /** Windows.Win32.Foundation.BSTR */
  protocolName: Uint8Array | Deno.PointerValue;
  /** i32 */
  numberOfBytesReceived: number;
  /** i32 */
  numberOfBytesTransfered: number;
  /** Windows.Win32.Foundation.BSTR */
  reasonForDisconnect: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  mainSessionId: Uint8Array | Deno.PointerValue;
  /** i32 */
  subSessionId: number;
}

export const sizeofAAAccountingData = 80;

export function allocAAAccountingData(data?: Partial<AAAccountingData>): Uint8Array {
  const buf = new Uint8Array(sizeofAAAccountingData);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.userName !== undefined) view.setBigUint64(0, data.userName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.userName))), true);
  // 0x08: pointer
  if (data?.clientName !== undefined) view.setBigUint64(8, data.clientName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.clientName))), true);
  // 0x10: i32
  if (data?.authType !== undefined) view.setInt32(16, Number(data.authType), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.resourceName !== undefined) view.setBigUint64(24, data.resourceName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.resourceName))), true);
  // 0x20: i32
  if (data?.portNumber !== undefined) view.setInt32(32, Number(data.portNumber), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.protocolName !== undefined) view.setBigUint64(40, data.protocolName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.protocolName))), true);
  // 0x30: i32
  if (data?.numberOfBytesReceived !== undefined) view.setInt32(48, Number(data.numberOfBytesReceived), true);
  // 0x34: i32
  if (data?.numberOfBytesTransfered !== undefined) view.setInt32(52, Number(data.numberOfBytesTransfered), true);
  // 0x38: pointer
  if (data?.reasonForDisconnect !== undefined) view.setBigUint64(56, data.reasonForDisconnect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.reasonForDisconnect))), true);
  // 0x40: pointer
  if (data?.mainSessionId !== undefined) view.setBigUint64(64, data.mainSessionId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.mainSessionId))), true);
  // 0x48: i32
  if (data?.subSessionId !== undefined) view.setInt32(72, Number(data.subSessionId), true);
  // 0x4c: pad4
  return buf;
}

export class AAAccountingDataView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get userName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get clientName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get authType(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get resourceName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get portNumber(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get protocolName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: i32
  get numberOfBytesReceived(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: i32
  get numberOfBytesTransfered(): number {
    return this.view.getInt32(52, true);
  }

  // 0x38: pointer
  get reasonForDisconnect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get mainSessionId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: i32
  get subSessionId(): number {
    return this.view.getInt32(72, true);
  }

  // 0x4c: pad4

  // 0x00: pointer
  set userName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set clientName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set authType(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set resourceName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: i32
  set portNumber(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set protocolName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: i32
  set numberOfBytesReceived(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: i32
  set numberOfBytesTransfered(value: number) {
    this.view.setInt32(52, value, true);
  }

  // 0x38: pointer
  set reasonForDisconnect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set mainSessionId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: i32
  set subSessionId(value: number) {
    this.view.setInt32(72, value, true);
  }

  // 0x4c: pad4
}

export type PWSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.System.RemoteDesktop.WTS_SERVER_INFOW (size: 8)
 */
export interface WTS_SERVER_INFOW {
  /** Windows.Win32.Foundation.PWSTR */
  pServerName: string | null | Uint8Array | Uint16Array;
}

export const sizeofWTS_SERVER_INFOW = 8;

export function allocWTS_SERVER_INFOW(data?: Partial<WTS_SERVER_INFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofWTS_SERVER_INFOW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pServerName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pServerName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  return buf;
}

export class WTS_SERVER_INFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pServerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pServerName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }
}

export type PSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.System.RemoteDesktop.WTS_SERVER_INFOA (size: 8)
 */
export interface WTS_SERVER_INFOA {
  /** Windows.Win32.Foundation.PSTR */
  pServerName: string | null | Uint8Array;
}

export const sizeofWTS_SERVER_INFOA = 8;

export function allocWTS_SERVER_INFOA(data?: Partial<WTS_SERVER_INFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofWTS_SERVER_INFOA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pServerName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pServerName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  return buf;
}

export class WTS_SERVER_INFOAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pServerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pServerName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTS_SESSION_INFOW (size: 24)
 */
export interface WTS_SESSION_INFOW {
  /** u32 */
  SessionId: number;
  /** Windows.Win32.Foundation.PWSTR */
  pWinStationName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.System.RemoteDesktop.WTS_CONNECTSTATE_CLASS */
  State: WTS_CONNECTSTATE_CLASS;
}

export const sizeofWTS_SESSION_INFOW = 24;

export function allocWTS_SESSION_INFOW(data?: Partial<WTS_SESSION_INFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofWTS_SESSION_INFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SessionId !== undefined) view.setUint32(0, Number(data.SessionId), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pWinStationName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pWinStationName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: i32
  if (data?.State !== undefined) view.setInt32(16, Number(data.State), true);
  // 0x14: pad4
  return buf;
}

export class WTS_SESSION_INFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SessionId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pWinStationName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get State(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set SessionId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pWinStationName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: i32
  set State(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.System.RemoteDesktop.WTS_SESSION_INFOA (size: 24)
 */
export interface WTS_SESSION_INFOA {
  /** u32 */
  SessionId: number;
  /** Windows.Win32.Foundation.PSTR */
  pWinStationName: string | null | Uint8Array;
  /** Windows.Win32.System.RemoteDesktop.WTS_CONNECTSTATE_CLASS */
  State: WTS_CONNECTSTATE_CLASS;
}

export const sizeofWTS_SESSION_INFOA = 24;

export function allocWTS_SESSION_INFOA(data?: Partial<WTS_SESSION_INFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofWTS_SESSION_INFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SessionId !== undefined) view.setUint32(0, Number(data.SessionId), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pWinStationName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pWinStationName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: i32
  if (data?.State !== undefined) view.setInt32(16, Number(data.State), true);
  // 0x14: pad4
  return buf;
}

export class WTS_SESSION_INFOAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SessionId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pWinStationName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get State(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set SessionId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pWinStationName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: i32
  set State(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.System.RemoteDesktop.WTS_SESSION_INFO_1W (size: 56)
 */
export interface WTS_SESSION_INFO_1W {
  /** u32 */
  ExecEnvId: number;
  /** Windows.Win32.System.RemoteDesktop.WTS_CONNECTSTATE_CLASS */
  State: WTS_CONNECTSTATE_CLASS;
  /** u32 */
  SessionId: number;
  /** Windows.Win32.Foundation.PWSTR */
  pSessionName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pHostName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pUserName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDomainName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pFarmName: string | null | Uint8Array | Uint16Array;
}

export const sizeofWTS_SESSION_INFO_1W = 56;

export function allocWTS_SESSION_INFO_1W(data?: Partial<WTS_SESSION_INFO_1W>): Uint8Array {
  const buf = new Uint8Array(sizeofWTS_SESSION_INFO_1W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ExecEnvId !== undefined) view.setUint32(0, Number(data.ExecEnvId), true);
  // 0x04: i32
  if (data?.State !== undefined) view.setInt32(4, Number(data.State), true);
  // 0x08: u32
  if (data?.SessionId !== undefined) view.setUint32(8, Number(data.SessionId), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pSessionName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pSessionName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pHostName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pHostName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pUserName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pUserName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pDomainName !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pDomainName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.pFarmName !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pFarmName);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  return buf;
}

export class WTS_SESSION_INFO_1WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ExecEnvId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get State(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get SessionId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get pSessionName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pHostName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pUserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pDomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get pFarmName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set ExecEnvId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set State(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set SessionId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set pSessionName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pHostName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pUserName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pDomainName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set pFarmName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTS_SESSION_INFO_1A (size: 56)
 */
export interface WTS_SESSION_INFO_1A {
  /** u32 */
  ExecEnvId: number;
  /** Windows.Win32.System.RemoteDesktop.WTS_CONNECTSTATE_CLASS */
  State: WTS_CONNECTSTATE_CLASS;
  /** u32 */
  SessionId: number;
  /** Windows.Win32.Foundation.PSTR */
  pSessionName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pHostName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pUserName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pDomainName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pFarmName: string | null | Uint8Array;
}

export const sizeofWTS_SESSION_INFO_1A = 56;

export function allocWTS_SESSION_INFO_1A(data?: Partial<WTS_SESSION_INFO_1A>): Uint8Array {
  const buf = new Uint8Array(sizeofWTS_SESSION_INFO_1A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ExecEnvId !== undefined) view.setUint32(0, Number(data.ExecEnvId), true);
  // 0x04: i32
  if (data?.State !== undefined) view.setInt32(4, Number(data.State), true);
  // 0x08: u32
  if (data?.SessionId !== undefined) view.setUint32(8, Number(data.SessionId), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pSessionName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pSessionName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pHostName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pHostName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pUserName !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pUserName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pDomainName !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.pDomainName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.pFarmName !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.pFarmName);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  return buf;
}

export class WTS_SESSION_INFO_1AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ExecEnvId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get State(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get SessionId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get pSessionName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pHostName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pUserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pDomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get pFarmName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set ExecEnvId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set State(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set SessionId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set pSessionName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pHostName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pUserName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pDomainName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set pFarmName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }
}

export type PSID = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.System.RemoteDesktop.WTS_PROCESS_INFOW (size: 24)
 */
export interface WTS_PROCESS_INFOW {
  /** u32 */
  SessionId: number;
  /** u32 */
  ProcessId: number;
  /** Windows.Win32.Foundation.PWSTR */
  pProcessName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PSID */
  pUserSid: Uint8Array | Deno.PointerValue;
}

export const sizeofWTS_PROCESS_INFOW = 24;

export function allocWTS_PROCESS_INFOW(data?: Partial<WTS_PROCESS_INFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofWTS_PROCESS_INFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SessionId !== undefined) view.setUint32(0, Number(data.SessionId), true);
  // 0x04: u32
  if (data?.ProcessId !== undefined) view.setUint32(4, Number(data.ProcessId), true);
  // 0x08: buffer
  if (data?.pProcessName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pProcessName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.pUserSid !== undefined) view.setBigUint64(16, data.pUserSid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pUserSid))), true);
  return buf;
}

export class WTS_PROCESS_INFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SessionId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ProcessId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get pProcessName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pUserSid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set SessionId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ProcessId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set pProcessName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set pUserSid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTS_PROCESS_INFOA (size: 24)
 */
export interface WTS_PROCESS_INFOA {
  /** u32 */
  SessionId: number;
  /** u32 */
  ProcessId: number;
  /** Windows.Win32.Foundation.PSTR */
  pProcessName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSID */
  pUserSid: Uint8Array | Deno.PointerValue;
}

export const sizeofWTS_PROCESS_INFOA = 24;

export function allocWTS_PROCESS_INFOA(data?: Partial<WTS_PROCESS_INFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofWTS_PROCESS_INFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SessionId !== undefined) view.setUint32(0, Number(data.SessionId), true);
  // 0x04: u32
  if (data?.ProcessId !== undefined) view.setUint32(4, Number(data.ProcessId), true);
  // 0x08: buffer
  if (data?.pProcessName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pProcessName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.pUserSid !== undefined) view.setBigUint64(16, data.pUserSid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pUserSid))), true);
  return buf;
}

export class WTS_PROCESS_INFOAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SessionId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ProcessId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get pProcessName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pUserSid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set SessionId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ProcessId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set pProcessName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set pUserSid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTSCONFIGINFOW (size: 64)
 */
export interface WTSCONFIGINFOW {
  /** u32 */
  version: number;
  /** u32 */
  fConnectClientDrivesAtLogon: number;
  /** u32 */
  fConnectPrinterAtLogon: number;
  /** u32 */
  fDisablePrinterRedirection: number;
  /** u32 */
  fDisableDefaultMainClientPrinter: number;
  /** u32 */
  ShadowSettings: number;
  /** array */
  LogonUserName: Deno.PointerValue;
  /** array */
  LogonDomain: Deno.PointerValue;
  /** array */
  WorkDirectory: Deno.PointerValue;
  /** array */
  InitialProgram: Deno.PointerValue;
  /** array */
  ApplicationName: Deno.PointerValue;
}

export const sizeofWTSCONFIGINFOW = 64;

export function allocWTSCONFIGINFOW(data?: Partial<WTSCONFIGINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofWTSCONFIGINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.version !== undefined) view.setUint32(0, Number(data.version), true);
  // 0x04: u32
  if (data?.fConnectClientDrivesAtLogon !== undefined) view.setUint32(4, Number(data.fConnectClientDrivesAtLogon), true);
  // 0x08: u32
  if (data?.fConnectPrinterAtLogon !== undefined) view.setUint32(8, Number(data.fConnectPrinterAtLogon), true);
  // 0x0c: u32
  if (data?.fDisablePrinterRedirection !== undefined) view.setUint32(12, Number(data.fDisablePrinterRedirection), true);
  // 0x10: u32
  if (data?.fDisableDefaultMainClientPrinter !== undefined) view.setUint32(16, Number(data.fDisableDefaultMainClientPrinter), true);
  // 0x14: u32
  if (data?.ShadowSettings !== undefined) view.setUint32(20, Number(data.ShadowSettings), true);
  // 0x18: pointer
  if (data?.LogonUserName !== undefined) view.setBigUint64(24, data.LogonUserName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonUserName))), true);
  // 0x20: pointer
  if (data?.LogonDomain !== undefined) view.setBigUint64(32, data.LogonDomain === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonDomain))), true);
  // 0x28: pointer
  if (data?.WorkDirectory !== undefined) view.setBigUint64(40, data.WorkDirectory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WorkDirectory))), true);
  // 0x30: pointer
  if (data?.InitialProgram !== undefined) view.setBigUint64(48, data.InitialProgram === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InitialProgram))), true);
  // 0x38: pointer
  if (data?.ApplicationName !== undefined) view.setBigUint64(56, data.ApplicationName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ApplicationName))), true);
  return buf;
}

export class WTSCONFIGINFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get fConnectClientDrivesAtLogon(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get fConnectPrinterAtLogon(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get fDisablePrinterRedirection(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get fDisableDefaultMainClientPrinter(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ShadowSettings(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get LogonUserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get LogonDomain(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get WorkDirectory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get InitialProgram(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get ApplicationName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set fConnectClientDrivesAtLogon(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set fConnectPrinterAtLogon(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set fDisablePrinterRedirection(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set fDisableDefaultMainClientPrinter(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ShadowSettings(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set LogonUserName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set LogonDomain(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set WorkDirectory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set InitialProgram(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set ApplicationName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTSCONFIGINFOA (size: 64)
 */
export interface WTSCONFIGINFOA {
  /** u32 */
  version: number;
  /** u32 */
  fConnectClientDrivesAtLogon: number;
  /** u32 */
  fConnectPrinterAtLogon: number;
  /** u32 */
  fDisablePrinterRedirection: number;
  /** u32 */
  fDisableDefaultMainClientPrinter: number;
  /** u32 */
  ShadowSettings: number;
  /** array */
  LogonUserName: Deno.PointerValue;
  /** array */
  LogonDomain: Deno.PointerValue;
  /** array */
  WorkDirectory: Deno.PointerValue;
  /** array */
  InitialProgram: Deno.PointerValue;
  /** array */
  ApplicationName: Deno.PointerValue;
}

export const sizeofWTSCONFIGINFOA = 64;

export function allocWTSCONFIGINFOA(data?: Partial<WTSCONFIGINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofWTSCONFIGINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.version !== undefined) view.setUint32(0, Number(data.version), true);
  // 0x04: u32
  if (data?.fConnectClientDrivesAtLogon !== undefined) view.setUint32(4, Number(data.fConnectClientDrivesAtLogon), true);
  // 0x08: u32
  if (data?.fConnectPrinterAtLogon !== undefined) view.setUint32(8, Number(data.fConnectPrinterAtLogon), true);
  // 0x0c: u32
  if (data?.fDisablePrinterRedirection !== undefined) view.setUint32(12, Number(data.fDisablePrinterRedirection), true);
  // 0x10: u32
  if (data?.fDisableDefaultMainClientPrinter !== undefined) view.setUint32(16, Number(data.fDisableDefaultMainClientPrinter), true);
  // 0x14: u32
  if (data?.ShadowSettings !== undefined) view.setUint32(20, Number(data.ShadowSettings), true);
  // 0x18: pointer
  if (data?.LogonUserName !== undefined) view.setBigUint64(24, data.LogonUserName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonUserName))), true);
  // 0x20: pointer
  if (data?.LogonDomain !== undefined) view.setBigUint64(32, data.LogonDomain === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonDomain))), true);
  // 0x28: pointer
  if (data?.WorkDirectory !== undefined) view.setBigUint64(40, data.WorkDirectory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WorkDirectory))), true);
  // 0x30: pointer
  if (data?.InitialProgram !== undefined) view.setBigUint64(48, data.InitialProgram === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InitialProgram))), true);
  // 0x38: pointer
  if (data?.ApplicationName !== undefined) view.setBigUint64(56, data.ApplicationName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ApplicationName))), true);
  return buf;
}

export class WTSCONFIGINFOAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get fConnectClientDrivesAtLogon(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get fConnectPrinterAtLogon(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get fDisablePrinterRedirection(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get fDisableDefaultMainClientPrinter(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ShadowSettings(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get LogonUserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get LogonDomain(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get WorkDirectory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get InitialProgram(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get ApplicationName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set fConnectClientDrivesAtLogon(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set fConnectPrinterAtLogon(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set fDisablePrinterRedirection(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set fDisableDefaultMainClientPrinter(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ShadowSettings(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set LogonUserName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set LogonDomain(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set WorkDirectory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set InitialProgram(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set ApplicationName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: bigint | number;
  /** u64 */
  Region: bigint | number;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get Region(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set Alignment(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set Region(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null | Uint8Array | Uint16Array;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class _u_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwValue(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pwszName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwValue(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pwszName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.Foundation.LARGE_INTEGER (size: 24)
 */
export interface LARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue;
  /** i64 */
  QuadPart: bigint | number;
}

export const sizeofLARGE_INTEGER = 24;

export function allocLARGE_INTEGER(data?: Partial<LARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofLARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.u))), true);
  // 0x10: i64
  if (data?.QuadPart !== undefined) view.setBigInt64(16, BigInt(data.QuadPart), true);
  return buf;
}

export class LARGE_INTEGERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get u(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i64
  get QuadPart(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set u(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i64
  set QuadPart(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTSINFOW (size: 96)
 */
export interface WTSINFOW {
  /** Windows.Win32.System.RemoteDesktop.WTS_CONNECTSTATE_CLASS */
  State: WTS_CONNECTSTATE_CLASS;
  /** u32 */
  SessionId: number;
  /** u32 */
  IncomingBytes: number;
  /** u32 */
  OutgoingBytes: number;
  /** u32 */
  IncomingFrames: number;
  /** u32 */
  OutgoingFrames: number;
  /** u32 */
  IncomingCompressedBytes: number;
  /** u32 */
  OutgoingCompressedBytes: number;
  /** array */
  WinStationName: Deno.PointerValue;
  /** array */
  Domain: Deno.PointerValue;
  /** array */
  UserName: Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ConnectTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  DisconnectTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LastInputTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LogonTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  CurrentTime: Uint8Array | Deno.PointerValue;
}

export const sizeofWTSINFOW = 96;

export function allocWTSINFOW(data?: Partial<WTSINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofWTSINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.State !== undefined) view.setInt32(0, Number(data.State), true);
  // 0x04: u32
  if (data?.SessionId !== undefined) view.setUint32(4, Number(data.SessionId), true);
  // 0x08: u32
  if (data?.IncomingBytes !== undefined) view.setUint32(8, Number(data.IncomingBytes), true);
  // 0x0c: u32
  if (data?.OutgoingBytes !== undefined) view.setUint32(12, Number(data.OutgoingBytes), true);
  // 0x10: u32
  if (data?.IncomingFrames !== undefined) view.setUint32(16, Number(data.IncomingFrames), true);
  // 0x14: u32
  if (data?.OutgoingFrames !== undefined) view.setUint32(20, Number(data.OutgoingFrames), true);
  // 0x18: u32
  if (data?.IncomingCompressedBytes !== undefined) view.setUint32(24, Number(data.IncomingCompressedBytes), true);
  // 0x1c: u32
  if (data?.OutgoingCompressedBytes !== undefined) view.setUint32(28, Number(data.OutgoingCompressedBytes), true);
  // 0x20: pointer
  if (data?.WinStationName !== undefined) view.setBigUint64(32, data.WinStationName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WinStationName))), true);
  // 0x28: pointer
  if (data?.Domain !== undefined) view.setBigUint64(40, data.Domain === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Domain))), true);
  // 0x30: pointer
  if (data?.UserName !== undefined) view.setBigUint64(48, data.UserName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserName))), true);
  // 0x38: pointer
  if (data?.ConnectTime !== undefined) view.setBigUint64(56, data.ConnectTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ConnectTime))), true);
  // 0x40: pointer
  if (data?.DisconnectTime !== undefined) view.setBigUint64(64, data.DisconnectTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DisconnectTime))), true);
  // 0x48: pointer
  if (data?.LastInputTime !== undefined) view.setBigUint64(72, data.LastInputTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LastInputTime))), true);
  // 0x50: pointer
  if (data?.LogonTime !== undefined) view.setBigUint64(80, data.LogonTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonTime))), true);
  // 0x58: pointer
  if (data?.CurrentTime !== undefined) view.setBigUint64(88, data.CurrentTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CurrentTime))), true);
  return buf;
}

export class WTSINFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get State(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get SessionId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get IncomingBytes(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get OutgoingBytes(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get IncomingFrames(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get OutgoingFrames(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get IncomingCompressedBytes(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get OutgoingCompressedBytes(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get WinStationName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get Domain(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get UserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get ConnectTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get DisconnectTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get LastInputTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get LogonTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get CurrentTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set State(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set SessionId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set IncomingBytes(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set OutgoingBytes(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set IncomingFrames(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set OutgoingFrames(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set IncomingCompressedBytes(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set OutgoingCompressedBytes(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set WinStationName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set Domain(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set UserName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set ConnectTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set DisconnectTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set LastInputTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set LogonTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set CurrentTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTSINFOA (size: 96)
 */
export interface WTSINFOA {
  /** Windows.Win32.System.RemoteDesktop.WTS_CONNECTSTATE_CLASS */
  State: WTS_CONNECTSTATE_CLASS;
  /** u32 */
  SessionId: number;
  /** u32 */
  IncomingBytes: number;
  /** u32 */
  OutgoingBytes: number;
  /** u32 */
  IncomingFrames: number;
  /** u32 */
  OutgoingFrames: number;
  /** u32 */
  IncomingCompressedBytes: number;
  /** u32 */
  OutgoingCompressedBy: number;
  /** array */
  WinStationName: Deno.PointerValue;
  /** array */
  Domain: Deno.PointerValue;
  /** array */
  UserName: Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ConnectTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  DisconnectTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LastInputTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LogonTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  CurrentTime: Uint8Array | Deno.PointerValue;
}

export const sizeofWTSINFOA = 96;

export function allocWTSINFOA(data?: Partial<WTSINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofWTSINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.State !== undefined) view.setInt32(0, Number(data.State), true);
  // 0x04: u32
  if (data?.SessionId !== undefined) view.setUint32(4, Number(data.SessionId), true);
  // 0x08: u32
  if (data?.IncomingBytes !== undefined) view.setUint32(8, Number(data.IncomingBytes), true);
  // 0x0c: u32
  if (data?.OutgoingBytes !== undefined) view.setUint32(12, Number(data.OutgoingBytes), true);
  // 0x10: u32
  if (data?.IncomingFrames !== undefined) view.setUint32(16, Number(data.IncomingFrames), true);
  // 0x14: u32
  if (data?.OutgoingFrames !== undefined) view.setUint32(20, Number(data.OutgoingFrames), true);
  // 0x18: u32
  if (data?.IncomingCompressedBytes !== undefined) view.setUint32(24, Number(data.IncomingCompressedBytes), true);
  // 0x1c: u32
  if (data?.OutgoingCompressedBy !== undefined) view.setUint32(28, Number(data.OutgoingCompressedBy), true);
  // 0x20: pointer
  if (data?.WinStationName !== undefined) view.setBigUint64(32, data.WinStationName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WinStationName))), true);
  // 0x28: pointer
  if (data?.Domain !== undefined) view.setBigUint64(40, data.Domain === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Domain))), true);
  // 0x30: pointer
  if (data?.UserName !== undefined) view.setBigUint64(48, data.UserName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserName))), true);
  // 0x38: pointer
  if (data?.ConnectTime !== undefined) view.setBigUint64(56, data.ConnectTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ConnectTime))), true);
  // 0x40: pointer
  if (data?.DisconnectTime !== undefined) view.setBigUint64(64, data.DisconnectTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DisconnectTime))), true);
  // 0x48: pointer
  if (data?.LastInputTime !== undefined) view.setBigUint64(72, data.LastInputTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LastInputTime))), true);
  // 0x50: pointer
  if (data?.LogonTime !== undefined) view.setBigUint64(80, data.LogonTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonTime))), true);
  // 0x58: pointer
  if (data?.CurrentTime !== undefined) view.setBigUint64(88, data.CurrentTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CurrentTime))), true);
  return buf;
}

export class WTSINFOAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get State(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get SessionId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get IncomingBytes(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get OutgoingBytes(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get IncomingFrames(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get OutgoingFrames(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get IncomingCompressedBytes(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get OutgoingCompressedBy(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get WinStationName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get Domain(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get UserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get ConnectTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get DisconnectTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get LastInputTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get LogonTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get CurrentTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set State(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set SessionId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set IncomingBytes(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set OutgoingBytes(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set IncomingFrames(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set OutgoingFrames(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set IncomingCompressedBytes(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set OutgoingCompressedBy(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set WinStationName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set Domain(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set UserName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set ConnectTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set DisconnectTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set LastInputTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set LogonTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set CurrentTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTSINFOEX_LEVEL1_W (size: 104)
 */
export interface WTSINFOEX_LEVEL1_W {
  /** u32 */
  SessionId: number;
  /** Windows.Win32.System.RemoteDesktop.WTS_CONNECTSTATE_CLASS */
  SessionState: WTS_CONNECTSTATE_CLASS;
  /** i32 */
  SessionFlags: number;
  /** array */
  WinStationName: Deno.PointerValue;
  /** array */
  UserName: Deno.PointerValue;
  /** array */
  DomainName: Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LogonTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ConnectTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  DisconnectTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LastInputTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  CurrentTime: Uint8Array | Deno.PointerValue;
  /** u32 */
  IncomingBytes: number;
  /** u32 */
  OutgoingBytes: number;
  /** u32 */
  IncomingFrames: number;
  /** u32 */
  OutgoingFrames: number;
  /** u32 */
  IncomingCompressedBytes: number;
  /** u32 */
  OutgoingCompressedBytes: number;
}

export const sizeofWTSINFOEX_LEVEL1_W = 104;

export function allocWTSINFOEX_LEVEL1_W(data?: Partial<WTSINFOEX_LEVEL1_W>): Uint8Array {
  const buf = new Uint8Array(sizeofWTSINFOEX_LEVEL1_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SessionId !== undefined) view.setUint32(0, Number(data.SessionId), true);
  // 0x04: i32
  if (data?.SessionState !== undefined) view.setInt32(4, Number(data.SessionState), true);
  // 0x08: i32
  if (data?.SessionFlags !== undefined) view.setInt32(8, Number(data.SessionFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.WinStationName !== undefined) view.setBigUint64(16, data.WinStationName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WinStationName))), true);
  // 0x18: pointer
  if (data?.UserName !== undefined) view.setBigUint64(24, data.UserName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserName))), true);
  // 0x20: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(32, data.DomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DomainName))), true);
  // 0x28: pointer
  if (data?.LogonTime !== undefined) view.setBigUint64(40, data.LogonTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonTime))), true);
  // 0x30: pointer
  if (data?.ConnectTime !== undefined) view.setBigUint64(48, data.ConnectTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ConnectTime))), true);
  // 0x38: pointer
  if (data?.DisconnectTime !== undefined) view.setBigUint64(56, data.DisconnectTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DisconnectTime))), true);
  // 0x40: pointer
  if (data?.LastInputTime !== undefined) view.setBigUint64(64, data.LastInputTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LastInputTime))), true);
  // 0x48: pointer
  if (data?.CurrentTime !== undefined) view.setBigUint64(72, data.CurrentTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CurrentTime))), true);
  // 0x50: u32
  if (data?.IncomingBytes !== undefined) view.setUint32(80, Number(data.IncomingBytes), true);
  // 0x54: u32
  if (data?.OutgoingBytes !== undefined) view.setUint32(84, Number(data.OutgoingBytes), true);
  // 0x58: u32
  if (data?.IncomingFrames !== undefined) view.setUint32(88, Number(data.IncomingFrames), true);
  // 0x5c: u32
  if (data?.OutgoingFrames !== undefined) view.setUint32(92, Number(data.OutgoingFrames), true);
  // 0x60: u32
  if (data?.IncomingCompressedBytes !== undefined) view.setUint32(96, Number(data.IncomingCompressedBytes), true);
  // 0x64: u32
  if (data?.OutgoingCompressedBytes !== undefined) view.setUint32(100, Number(data.OutgoingCompressedBytes), true);
  return buf;
}

export class WTSINFOEX_LEVEL1_WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SessionId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get SessionState(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get SessionFlags(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get WinStationName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get UserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get DomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get LogonTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get ConnectTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get DisconnectTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get LastInputTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get CurrentTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: u32
  get IncomingBytes(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get OutgoingBytes(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get IncomingFrames(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get OutgoingFrames(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: u32
  get IncomingCompressedBytes(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u32
  get OutgoingCompressedBytes(): number {
    return this.view.getUint32(100, true);
  }

  // 0x00: u32
  set SessionId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set SessionState(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set SessionFlags(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set WinStationName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set UserName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set LogonTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set ConnectTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set DisconnectTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set LastInputTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set CurrentTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: u32
  set IncomingBytes(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set OutgoingBytes(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set IncomingFrames(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set OutgoingFrames(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: u32
  set IncomingCompressedBytes(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u32
  set OutgoingCompressedBytes(value: number) {
    this.view.setUint32(100, value, true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTSINFOEX_LEVEL1_A (size: 104)
 */
export interface WTSINFOEX_LEVEL1_A {
  /** u32 */
  SessionId: number;
  /** Windows.Win32.System.RemoteDesktop.WTS_CONNECTSTATE_CLASS */
  SessionState: WTS_CONNECTSTATE_CLASS;
  /** i32 */
  SessionFlags: number;
  /** array */
  WinStationName: Deno.PointerValue;
  /** array */
  UserName: Deno.PointerValue;
  /** array */
  DomainName: Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LogonTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ConnectTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  DisconnectTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LastInputTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  CurrentTime: Uint8Array | Deno.PointerValue;
  /** u32 */
  IncomingBytes: number;
  /** u32 */
  OutgoingBytes: number;
  /** u32 */
  IncomingFrames: number;
  /** u32 */
  OutgoingFrames: number;
  /** u32 */
  IncomingCompressedBytes: number;
  /** u32 */
  OutgoingCompressedBytes: number;
}

export const sizeofWTSINFOEX_LEVEL1_A = 104;

export function allocWTSINFOEX_LEVEL1_A(data?: Partial<WTSINFOEX_LEVEL1_A>): Uint8Array {
  const buf = new Uint8Array(sizeofWTSINFOEX_LEVEL1_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SessionId !== undefined) view.setUint32(0, Number(data.SessionId), true);
  // 0x04: i32
  if (data?.SessionState !== undefined) view.setInt32(4, Number(data.SessionState), true);
  // 0x08: i32
  if (data?.SessionFlags !== undefined) view.setInt32(8, Number(data.SessionFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.WinStationName !== undefined) view.setBigUint64(16, data.WinStationName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WinStationName))), true);
  // 0x18: pointer
  if (data?.UserName !== undefined) view.setBigUint64(24, data.UserName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserName))), true);
  // 0x20: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(32, data.DomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DomainName))), true);
  // 0x28: pointer
  if (data?.LogonTime !== undefined) view.setBigUint64(40, data.LogonTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonTime))), true);
  // 0x30: pointer
  if (data?.ConnectTime !== undefined) view.setBigUint64(48, data.ConnectTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ConnectTime))), true);
  // 0x38: pointer
  if (data?.DisconnectTime !== undefined) view.setBigUint64(56, data.DisconnectTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DisconnectTime))), true);
  // 0x40: pointer
  if (data?.LastInputTime !== undefined) view.setBigUint64(64, data.LastInputTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LastInputTime))), true);
  // 0x48: pointer
  if (data?.CurrentTime !== undefined) view.setBigUint64(72, data.CurrentTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CurrentTime))), true);
  // 0x50: u32
  if (data?.IncomingBytes !== undefined) view.setUint32(80, Number(data.IncomingBytes), true);
  // 0x54: u32
  if (data?.OutgoingBytes !== undefined) view.setUint32(84, Number(data.OutgoingBytes), true);
  // 0x58: u32
  if (data?.IncomingFrames !== undefined) view.setUint32(88, Number(data.IncomingFrames), true);
  // 0x5c: u32
  if (data?.OutgoingFrames !== undefined) view.setUint32(92, Number(data.OutgoingFrames), true);
  // 0x60: u32
  if (data?.IncomingCompressedBytes !== undefined) view.setUint32(96, Number(data.IncomingCompressedBytes), true);
  // 0x64: u32
  if (data?.OutgoingCompressedBytes !== undefined) view.setUint32(100, Number(data.OutgoingCompressedBytes), true);
  return buf;
}

export class WTSINFOEX_LEVEL1_AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SessionId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get SessionState(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get SessionFlags(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get WinStationName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get UserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get DomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get LogonTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get ConnectTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get DisconnectTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get LastInputTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get CurrentTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: u32
  get IncomingBytes(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get OutgoingBytes(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get IncomingFrames(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get OutgoingFrames(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: u32
  get IncomingCompressedBytes(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u32
  get OutgoingCompressedBytes(): number {
    return this.view.getUint32(100, true);
  }

  // 0x00: u32
  set SessionId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set SessionState(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set SessionFlags(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set WinStationName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set UserName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set LogonTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set ConnectTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set DisconnectTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set LastInputTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set CurrentTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: u32
  set IncomingBytes(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set OutgoingBytes(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set IncomingFrames(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set OutgoingFrames(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: u32
  set IncomingCompressedBytes(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u32
  set OutgoingCompressedBytes(value: number) {
    this.view.setUint32(100, value, true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTSINFOEX_LEVEL_W (size: 8)
 */
export interface WTSINFOEX_LEVEL_W {
  /** Windows.Win32.System.RemoteDesktop.WTSINFOEX_LEVEL1_W */
  WTSInfoExLevel1: Uint8Array | Deno.PointerValue;
}

export const sizeofWTSINFOEX_LEVEL_W = 8;

export function allocWTSINFOEX_LEVEL_W(data?: Partial<WTSINFOEX_LEVEL_W>): Uint8Array {
  const buf = new Uint8Array(sizeofWTSINFOEX_LEVEL_W);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.WTSInfoExLevel1 !== undefined) view.setBigUint64(0, data.WTSInfoExLevel1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WTSInfoExLevel1))), true);
  return buf;
}

export class WTSINFOEX_LEVEL_WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get WTSInfoExLevel1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set WTSInfoExLevel1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTSINFOEX_LEVEL_A (size: 8)
 */
export interface WTSINFOEX_LEVEL_A {
  /** Windows.Win32.System.RemoteDesktop.WTSINFOEX_LEVEL1_A */
  WTSInfoExLevel1: Uint8Array | Deno.PointerValue;
}

export const sizeofWTSINFOEX_LEVEL_A = 8;

export function allocWTSINFOEX_LEVEL_A(data?: Partial<WTSINFOEX_LEVEL_A>): Uint8Array {
  const buf = new Uint8Array(sizeofWTSINFOEX_LEVEL_A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.WTSInfoExLevel1 !== undefined) view.setBigUint64(0, data.WTSInfoExLevel1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WTSInfoExLevel1))), true);
  return buf;
}

export class WTSINFOEX_LEVEL_AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get WTSInfoExLevel1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set WTSInfoExLevel1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTSINFOEXW (size: 16)
 */
export interface WTSINFOEXW {
  /** u32 */
  Level: number;
  /** Windows.Win32.System.RemoteDesktop.WTSINFOEX_LEVEL_W */
  Data: Uint8Array | Deno.PointerValue;
}

export const sizeofWTSINFOEXW = 16;

export function allocWTSINFOEXW(data?: Partial<WTSINFOEXW>): Uint8Array {
  const buf = new Uint8Array(sizeofWTSINFOEXW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Level !== undefined) view.setUint32(0, Number(data.Level), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Data !== undefined) view.setBigUint64(8, data.Data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Data))), true);
  return buf;
}

export class WTSINFOEXWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Level(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Level(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTSINFOEXA (size: 16)
 */
export interface WTSINFOEXA {
  /** u32 */
  Level: number;
  /** Windows.Win32.System.RemoteDesktop.WTSINFOEX_LEVEL_A */
  Data: Uint8Array | Deno.PointerValue;
}

export const sizeofWTSINFOEXA = 16;

export function allocWTSINFOEXA(data?: Partial<WTSINFOEXA>): Uint8Array {
  const buf = new Uint8Array(sizeofWTSINFOEXA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Level !== undefined) view.setUint32(0, Number(data.Level), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Data !== undefined) view.setBigUint64(8, data.Data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Data))), true);
  return buf;
}

export class WTSINFOEXAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Level(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Level(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTSCLIENTW (size: 96)
 */
export interface WTSCLIENTW {
  /** array */
  ClientName: Deno.PointerValue;
  /** array */
  Domain: Deno.PointerValue;
  /** array */
  UserName: Deno.PointerValue;
  /** array */
  WorkDirectory: Deno.PointerValue;
  /** array */
  InitialProgram: Deno.PointerValue;
  /** u8 */
  EncryptionLevel: number;
  /** u32 */
  ClientAddressFamily: number;
  /** array */
  ClientAddress: Deno.PointerValue;
  /** u16 */
  HRes: number;
  /** u16 */
  VRes: number;
  /** u16 */
  ColorDepth: number;
  /** array */
  ClientDirectory: Deno.PointerValue;
  /** u32 */
  ClientBuildNumber: number;
  /** u32 */
  ClientHardwareId: number;
  /** u16 */
  ClientProductId: number;
  /** u16 */
  OutBufCountHost: number;
  /** u16 */
  OutBufCountClient: number;
  /** u16 */
  OutBufLength: number;
  /** array */
  DeviceId: Deno.PointerValue;
}

export const sizeofWTSCLIENTW = 96;

export function allocWTSCLIENTW(data?: Partial<WTSCLIENTW>): Uint8Array {
  const buf = new Uint8Array(sizeofWTSCLIENTW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ClientName !== undefined) view.setBigUint64(0, data.ClientName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientName))), true);
  // 0x08: pointer
  if (data?.Domain !== undefined) view.setBigUint64(8, data.Domain === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Domain))), true);
  // 0x10: pointer
  if (data?.UserName !== undefined) view.setBigUint64(16, data.UserName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserName))), true);
  // 0x18: pointer
  if (data?.WorkDirectory !== undefined) view.setBigUint64(24, data.WorkDirectory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WorkDirectory))), true);
  // 0x20: pointer
  if (data?.InitialProgram !== undefined) view.setBigUint64(32, data.InitialProgram === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InitialProgram))), true);
  // 0x28: u8
  if (data?.EncryptionLevel !== undefined) view.setUint8(40, Number(data.EncryptionLevel));
  // 0x29: u32
  if (data?.ClientAddressFamily !== undefined) view.setUint32(41, Number(data.ClientAddressFamily), true);
  // 0x2d: pad3
  // 0x30: pointer
  if (data?.ClientAddress !== undefined) view.setBigUint64(48, data.ClientAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientAddress))), true);
  // 0x38: u16
  if (data?.HRes !== undefined) view.setUint16(56, Number(data.HRes), true);
  // 0x3a: u16
  if (data?.VRes !== undefined) view.setUint16(58, Number(data.VRes), true);
  // 0x3c: u16
  if (data?.ColorDepth !== undefined) view.setUint16(60, Number(data.ColorDepth), true);
  // 0x3e: pad2
  // 0x40: pointer
  if (data?.ClientDirectory !== undefined) view.setBigUint64(64, data.ClientDirectory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientDirectory))), true);
  // 0x48: u32
  if (data?.ClientBuildNumber !== undefined) view.setUint32(72, Number(data.ClientBuildNumber), true);
  // 0x4c: u32
  if (data?.ClientHardwareId !== undefined) view.setUint32(76, Number(data.ClientHardwareId), true);
  // 0x50: u16
  if (data?.ClientProductId !== undefined) view.setUint16(80, Number(data.ClientProductId), true);
  // 0x52: u16
  if (data?.OutBufCountHost !== undefined) view.setUint16(82, Number(data.OutBufCountHost), true);
  // 0x54: u16
  if (data?.OutBufCountClient !== undefined) view.setUint16(84, Number(data.OutBufCountClient), true);
  // 0x56: u16
  if (data?.OutBufLength !== undefined) view.setUint16(86, Number(data.OutBufLength), true);
  // 0x58: pointer
  if (data?.DeviceId !== undefined) view.setBigUint64(88, data.DeviceId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeviceId))), true);
  return buf;
}

export class WTSCLIENTWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ClientName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Domain(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get UserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get WorkDirectory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get InitialProgram(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u8
  get EncryptionLevel(): number {
    return this.view.getUint8(40);
  }

  // 0x29: u32
  get ClientAddressFamily(): number {
    return this.view.getUint32(41, true);
  }

  // 0x2d: pad3

  // 0x30: pointer
  get ClientAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u16
  get HRes(): number {
    return this.view.getUint16(56, true);
  }

  // 0x3a: u16
  get VRes(): number {
    return this.view.getUint16(58, true);
  }

  // 0x3c: u16
  get ColorDepth(): number {
    return this.view.getUint16(60, true);
  }

  // 0x3e: pad2

  // 0x40: pointer
  get ClientDirectory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get ClientBuildNumber(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get ClientHardwareId(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u16
  get ClientProductId(): number {
    return this.view.getUint16(80, true);
  }

  // 0x52: u16
  get OutBufCountHost(): number {
    return this.view.getUint16(82, true);
  }

  // 0x54: u16
  get OutBufCountClient(): number {
    return this.view.getUint16(84, true);
  }

  // 0x56: u16
  get OutBufLength(): number {
    return this.view.getUint16(86, true);
  }

  // 0x58: pointer
  get DeviceId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ClientName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Domain(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set UserName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set WorkDirectory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set InitialProgram(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u8
  set EncryptionLevel(value: number) {
    this.view.setUint8(40, value);
  }

  // 0x29: u32
  set ClientAddressFamily(value: number) {
    this.view.setUint32(41, value, true);
  }

  // 0x2d: pad3

  // 0x30: pointer
  set ClientAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u16
  set HRes(value: number) {
    this.view.setUint16(56, value, true);
  }

  // 0x3a: u16
  set VRes(value: number) {
    this.view.setUint16(58, value, true);
  }

  // 0x3c: u16
  set ColorDepth(value: number) {
    this.view.setUint16(60, value, true);
  }

  // 0x3e: pad2

  // 0x40: pointer
  set ClientDirectory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: u32
  set ClientBuildNumber(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set ClientHardwareId(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u16
  set ClientProductId(value: number) {
    this.view.setUint16(80, value, true);
  }

  // 0x52: u16
  set OutBufCountHost(value: number) {
    this.view.setUint16(82, value, true);
  }

  // 0x54: u16
  set OutBufCountClient(value: number) {
    this.view.setUint16(84, value, true);
  }

  // 0x56: u16
  set OutBufLength(value: number) {
    this.view.setUint16(86, value, true);
  }

  // 0x58: pointer
  set DeviceId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTSCLIENTA (size: 96)
 */
export interface WTSCLIENTA {
  /** array */
  ClientName: Deno.PointerValue;
  /** array */
  Domain: Deno.PointerValue;
  /** array */
  UserName: Deno.PointerValue;
  /** array */
  WorkDirectory: Deno.PointerValue;
  /** array */
  InitialProgram: Deno.PointerValue;
  /** u8 */
  EncryptionLevel: number;
  /** u32 */
  ClientAddressFamily: number;
  /** array */
  ClientAddress: Deno.PointerValue;
  /** u16 */
  HRes: number;
  /** u16 */
  VRes: number;
  /** u16 */
  ColorDepth: number;
  /** array */
  ClientDirectory: Deno.PointerValue;
  /** u32 */
  ClientBuildNumber: number;
  /** u32 */
  ClientHardwareId: number;
  /** u16 */
  ClientProductId: number;
  /** u16 */
  OutBufCountHost: number;
  /** u16 */
  OutBufCountClient: number;
  /** u16 */
  OutBufLength: number;
  /** array */
  DeviceId: Deno.PointerValue;
}

export const sizeofWTSCLIENTA = 96;

export function allocWTSCLIENTA(data?: Partial<WTSCLIENTA>): Uint8Array {
  const buf = new Uint8Array(sizeofWTSCLIENTA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ClientName !== undefined) view.setBigUint64(0, data.ClientName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientName))), true);
  // 0x08: pointer
  if (data?.Domain !== undefined) view.setBigUint64(8, data.Domain === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Domain))), true);
  // 0x10: pointer
  if (data?.UserName !== undefined) view.setBigUint64(16, data.UserName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserName))), true);
  // 0x18: pointer
  if (data?.WorkDirectory !== undefined) view.setBigUint64(24, data.WorkDirectory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WorkDirectory))), true);
  // 0x20: pointer
  if (data?.InitialProgram !== undefined) view.setBigUint64(32, data.InitialProgram === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InitialProgram))), true);
  // 0x28: u8
  if (data?.EncryptionLevel !== undefined) view.setUint8(40, Number(data.EncryptionLevel));
  // 0x29: u32
  if (data?.ClientAddressFamily !== undefined) view.setUint32(41, Number(data.ClientAddressFamily), true);
  // 0x2d: pad3
  // 0x30: pointer
  if (data?.ClientAddress !== undefined) view.setBigUint64(48, data.ClientAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientAddress))), true);
  // 0x38: u16
  if (data?.HRes !== undefined) view.setUint16(56, Number(data.HRes), true);
  // 0x3a: u16
  if (data?.VRes !== undefined) view.setUint16(58, Number(data.VRes), true);
  // 0x3c: u16
  if (data?.ColorDepth !== undefined) view.setUint16(60, Number(data.ColorDepth), true);
  // 0x3e: pad2
  // 0x40: pointer
  if (data?.ClientDirectory !== undefined) view.setBigUint64(64, data.ClientDirectory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientDirectory))), true);
  // 0x48: u32
  if (data?.ClientBuildNumber !== undefined) view.setUint32(72, Number(data.ClientBuildNumber), true);
  // 0x4c: u32
  if (data?.ClientHardwareId !== undefined) view.setUint32(76, Number(data.ClientHardwareId), true);
  // 0x50: u16
  if (data?.ClientProductId !== undefined) view.setUint16(80, Number(data.ClientProductId), true);
  // 0x52: u16
  if (data?.OutBufCountHost !== undefined) view.setUint16(82, Number(data.OutBufCountHost), true);
  // 0x54: u16
  if (data?.OutBufCountClient !== undefined) view.setUint16(84, Number(data.OutBufCountClient), true);
  // 0x56: u16
  if (data?.OutBufLength !== undefined) view.setUint16(86, Number(data.OutBufLength), true);
  // 0x58: pointer
  if (data?.DeviceId !== undefined) view.setBigUint64(88, data.DeviceId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeviceId))), true);
  return buf;
}

export class WTSCLIENTAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ClientName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Domain(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get UserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get WorkDirectory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get InitialProgram(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u8
  get EncryptionLevel(): number {
    return this.view.getUint8(40);
  }

  // 0x29: u32
  get ClientAddressFamily(): number {
    return this.view.getUint32(41, true);
  }

  // 0x2d: pad3

  // 0x30: pointer
  get ClientAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u16
  get HRes(): number {
    return this.view.getUint16(56, true);
  }

  // 0x3a: u16
  get VRes(): number {
    return this.view.getUint16(58, true);
  }

  // 0x3c: u16
  get ColorDepth(): number {
    return this.view.getUint16(60, true);
  }

  // 0x3e: pad2

  // 0x40: pointer
  get ClientDirectory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get ClientBuildNumber(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get ClientHardwareId(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u16
  get ClientProductId(): number {
    return this.view.getUint16(80, true);
  }

  // 0x52: u16
  get OutBufCountHost(): number {
    return this.view.getUint16(82, true);
  }

  // 0x54: u16
  get OutBufCountClient(): number {
    return this.view.getUint16(84, true);
  }

  // 0x56: u16
  get OutBufLength(): number {
    return this.view.getUint16(86, true);
  }

  // 0x58: pointer
  get DeviceId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ClientName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Domain(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set UserName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set WorkDirectory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set InitialProgram(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u8
  set EncryptionLevel(value: number) {
    this.view.setUint8(40, value);
  }

  // 0x29: u32
  set ClientAddressFamily(value: number) {
    this.view.setUint32(41, value, true);
  }

  // 0x2d: pad3

  // 0x30: pointer
  set ClientAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u16
  set HRes(value: number) {
    this.view.setUint16(56, value, true);
  }

  // 0x3a: u16
  set VRes(value: number) {
    this.view.setUint16(58, value, true);
  }

  // 0x3c: u16
  set ColorDepth(value: number) {
    this.view.setUint16(60, value, true);
  }

  // 0x3e: pad2

  // 0x40: pointer
  set ClientDirectory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: u32
  set ClientBuildNumber(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set ClientHardwareId(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u16
  set ClientProductId(value: number) {
    this.view.setUint16(80, value, true);
  }

  // 0x52: u16
  set OutBufCountHost(value: number) {
    this.view.setUint16(82, value, true);
  }

  // 0x54: u16
  set OutBufCountClient(value: number) {
    this.view.setUint16(84, value, true);
  }

  // 0x56: u16
  set OutBufLength(value: number) {
    this.view.setUint16(86, value, true);
  }

  // 0x58: pointer
  set DeviceId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.PRODUCT_INFOA (size: 16)
 */
export interface PRODUCT_INFOA {
  /** array */
  CompanyName: Deno.PointerValue;
  /** array */
  ProductID: Deno.PointerValue;
}

export const sizeofPRODUCT_INFOA = 16;

export function allocPRODUCT_INFOA(data?: Partial<PRODUCT_INFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofPRODUCT_INFOA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CompanyName !== undefined) view.setBigUint64(0, data.CompanyName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CompanyName))), true);
  // 0x08: pointer
  if (data?.ProductID !== undefined) view.setBigUint64(8, data.ProductID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProductID))), true);
  return buf;
}

export class PRODUCT_INFOAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CompanyName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ProductID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set CompanyName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ProductID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.PRODUCT_INFOW (size: 16)
 */
export interface PRODUCT_INFOW {
  /** array */
  CompanyName: Deno.PointerValue;
  /** array */
  ProductID: Deno.PointerValue;
}

export const sizeofPRODUCT_INFOW = 16;

export function allocPRODUCT_INFOW(data?: Partial<PRODUCT_INFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofPRODUCT_INFOW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CompanyName !== undefined) view.setBigUint64(0, data.CompanyName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CompanyName))), true);
  // 0x08: pointer
  if (data?.ProductID !== undefined) view.setBigUint64(8, data.ProductID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProductID))), true);
  return buf;
}

export class PRODUCT_INFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CompanyName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ProductID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set CompanyName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ProductID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTS_VALIDATION_INFORMATIONA (size: 40)
 */
export interface WTS_VALIDATION_INFORMATIONA {
  /** Windows.Win32.System.RemoteDesktop.PRODUCT_INFOA */
  ProductInfo: Uint8Array | Deno.PointerValue;
  /** array */
  License: Deno.PointerValue;
  /** u32 */
  LicenseLength: number;
  /** array */
  HardwareID: Deno.PointerValue;
  /** u32 */
  HardwareIDLength: number;
}

export const sizeofWTS_VALIDATION_INFORMATIONA = 40;

export function allocWTS_VALIDATION_INFORMATIONA(data?: Partial<WTS_VALIDATION_INFORMATIONA>): Uint8Array {
  const buf = new Uint8Array(sizeofWTS_VALIDATION_INFORMATIONA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ProductInfo !== undefined) view.setBigUint64(0, data.ProductInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProductInfo))), true);
  // 0x08: pointer
  if (data?.License !== undefined) view.setBigUint64(8, data.License === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.License))), true);
  // 0x10: u32
  if (data?.LicenseLength !== undefined) view.setUint32(16, Number(data.LicenseLength), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.HardwareID !== undefined) view.setBigUint64(24, data.HardwareID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HardwareID))), true);
  // 0x20: u32
  if (data?.HardwareIDLength !== undefined) view.setUint32(32, Number(data.HardwareIDLength), true);
  // 0x24: pad4
  return buf;
}

export class WTS_VALIDATION_INFORMATIONAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ProductInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get License(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get LicenseLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get HardwareID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get HardwareIDLength(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: pointer
  set ProductInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set License(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set LicenseLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set HardwareID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set HardwareIDLength(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.System.RemoteDesktop.WTS_VALIDATION_INFORMATIONW (size: 40)
 */
export interface WTS_VALIDATION_INFORMATIONW {
  /** Windows.Win32.System.RemoteDesktop.PRODUCT_INFOW */
  ProductInfo: Uint8Array | Deno.PointerValue;
  /** array */
  License: Deno.PointerValue;
  /** u32 */
  LicenseLength: number;
  /** array */
  HardwareID: Deno.PointerValue;
  /** u32 */
  HardwareIDLength: number;
}

export const sizeofWTS_VALIDATION_INFORMATIONW = 40;

export function allocWTS_VALIDATION_INFORMATIONW(data?: Partial<WTS_VALIDATION_INFORMATIONW>): Uint8Array {
  const buf = new Uint8Array(sizeofWTS_VALIDATION_INFORMATIONW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ProductInfo !== undefined) view.setBigUint64(0, data.ProductInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProductInfo))), true);
  // 0x08: pointer
  if (data?.License !== undefined) view.setBigUint64(8, data.License === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.License))), true);
  // 0x10: u32
  if (data?.LicenseLength !== undefined) view.setUint32(16, Number(data.LicenseLength), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.HardwareID !== undefined) view.setBigUint64(24, data.HardwareID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HardwareID))), true);
  // 0x20: u32
  if (data?.HardwareIDLength !== undefined) view.setUint32(32, Number(data.HardwareIDLength), true);
  // 0x24: pad4
  return buf;
}

export class WTS_VALIDATION_INFORMATIONWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ProductInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get License(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get LicenseLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get HardwareID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get HardwareIDLength(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: pointer
  set ProductInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set License(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set LicenseLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set HardwareID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set HardwareIDLength(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.System.RemoteDesktop.WTS_CLIENT_ADDRESS (size: 16)
 */
export interface WTS_CLIENT_ADDRESS {
  /** u32 */
  AddressFamily: number;
  /** array */
  Address: Deno.PointerValue;
}

export const sizeofWTS_CLIENT_ADDRESS = 16;

export function allocWTS_CLIENT_ADDRESS(data?: Partial<WTS_CLIENT_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofWTS_CLIENT_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AddressFamily !== undefined) view.setUint32(0, Number(data.AddressFamily), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Address !== undefined) view.setBigUint64(8, data.Address === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Address))), true);
  return buf;
}

export class WTS_CLIENT_ADDRESSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get AddressFamily(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set AddressFamily(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Address(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTS_CLIENT_DISPLAY (size: 16)
 */
export interface WTS_CLIENT_DISPLAY {
  /** u32 */
  HorizontalResolution: number;
  /** u32 */
  VerticalResolution: number;
  /** u32 */
  ColorDepth: number;
}

export const sizeofWTS_CLIENT_DISPLAY = 16;

export function allocWTS_CLIENT_DISPLAY(data?: Partial<WTS_CLIENT_DISPLAY>): Uint8Array {
  const buf = new Uint8Array(sizeofWTS_CLIENT_DISPLAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.HorizontalResolution !== undefined) view.setUint32(0, Number(data.HorizontalResolution), true);
  // 0x04: u32
  if (data?.VerticalResolution !== undefined) view.setUint32(4, Number(data.VerticalResolution), true);
  // 0x08: u32
  if (data?.ColorDepth !== undefined) view.setUint32(8, Number(data.ColorDepth), true);
  // 0x0c: pad4
  return buf;
}

export class WTS_CLIENT_DISPLAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get HorizontalResolution(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get VerticalResolution(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ColorDepth(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set HorizontalResolution(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set VerticalResolution(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ColorDepth(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.RemoteDesktop.WTSUSERCONFIGA (size: 96)
 */
export interface WTSUSERCONFIGA {
  /** u32 */
  Source: number;
  /** u32 */
  InheritInitialProgram: number;
  /** u32 */
  AllowLogonTerminalServer: number;
  /** u32 */
  TimeoutSettingsConnections: number;
  /** u32 */
  TimeoutSettingsDisconnections: number;
  /** u32 */
  TimeoutSettingsIdle: number;
  /** u32 */
  DeviceClientDrives: number;
  /** u32 */
  DeviceClientPrinters: number;
  /** u32 */
  ClientDefaultPrinter: number;
  /** u32 */
  BrokenTimeoutSettings: number;
  /** u32 */
  ReconnectSettings: number;
  /** u32 */
  ShadowingSettings: number;
  /** u32 */
  TerminalServerRemoteHomeDir: number;
  /** array */
  InitialProgram: Deno.PointerValue;
  /** array */
  WorkDirectory: Deno.PointerValue;
  /** array */
  TerminalServerProfilePath: Deno.PointerValue;
  /** array */
  TerminalServerHomeDir: Deno.PointerValue;
  /** array */
  TerminalServerHomeDirDrive: Deno.PointerValue;
}

export const sizeofWTSUSERCONFIGA = 96;

export function allocWTSUSERCONFIGA(data?: Partial<WTSUSERCONFIGA>): Uint8Array {
  const buf = new Uint8Array(sizeofWTSUSERCONFIGA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Source !== undefined) view.setUint32(0, Number(data.Source), true);
  // 0x04: u32
  if (data?.InheritInitialProgram !== undefined) view.setUint32(4, Number(data.InheritInitialProgram), true);
  // 0x08: u32
  if (data?.AllowLogonTerminalServer !== undefined) view.setUint32(8, Number(data.AllowLogonTerminalServer), true);
  // 0x0c: u32
  if (data?.TimeoutSettingsConnections !== undefined) view.setUint32(12, Number(data.TimeoutSettingsConnections), true);
  // 0x10: u32
  if (data?.TimeoutSettingsDisconnections !== undefined) view.setUint32(16, Number(data.TimeoutSettingsDisconnections), true);
  // 0x14: u32
  if (data?.TimeoutSettingsIdle !== undefined) view.setUint32(20, Number(data.TimeoutSettingsIdle), true);
  // 0x18: u32
  if (data?.DeviceClientDrives !== undefined) view.setUint32(24, Number(data.DeviceClientDrives), true);
  // 0x1c: u32
  if (data?.DeviceClientPrinters !== undefined) view.setUint32(28, Number(data.DeviceClientPrinters), true);
  // 0x20: u32
  if (data?.ClientDefaultPrinter !== undefined) view.setUint32(32, Number(data.ClientDefaultPrinter), true);
  // 0x24: u32
  if (data?.BrokenTimeoutSettings !== undefined) view.setUint32(36, Number(data.BrokenTimeoutSettings), true);
  // 0x28: u32
  if (data?.ReconnectSettings !== undefined) view.setUint32(40, Number(data.ReconnectSettings), true);
  // 0x2c: u32
  if (data?.ShadowingSettings !== undefined) view.setUint32(44, Number(data.ShadowingSettings), true);
  // 0x30: u32
  if (data?.TerminalServerRemoteHomeDir !== undefined) view.setUint32(48, Number(data.TerminalServerRemoteHomeDir), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.InitialProgram !== undefined) view.setBigUint64(56, data.InitialProgram === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InitialProgram))), true);
  // 0x40: pointer
  if (data?.WorkDirectory !== undefined) view.setBigUint64(64, data.WorkDirectory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WorkDirectory))), true);
  // 0x48: pointer
  if (data?.TerminalServerProfilePath !== undefined) view.setBigUint64(72, data.TerminalServerProfilePath === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TerminalServerProfilePath))), true);
  // 0x50: pointer
  if (data?.TerminalServerHomeDir !== undefined) view.setBigUint64(80, data.TerminalServerHomeDir === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TerminalServerHomeDir))), true);
  // 0x58: pointer
  if (data?.TerminalServerHomeDirDrive !== undefined) view.setBigUint64(88, data.TerminalServerHomeDirDrive === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TerminalServerHomeDirDrive))), true);
  return buf;
}

export class WTSUSERCONFIGAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Source(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get InheritInitialProgram(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get AllowLogonTerminalServer(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get TimeoutSettingsConnections(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get TimeoutSettingsDisconnections(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get TimeoutSettingsIdle(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get DeviceClientDrives(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get DeviceClientPrinters(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get ClientDefaultPrinter(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get BrokenTimeoutSettings(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get ReconnectSettings(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get ShadowingSettings(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get TerminalServerRemoteHomeDir(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get InitialProgram(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get WorkDirectory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get TerminalServerProfilePath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get TerminalServerHomeDir(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get TerminalServerHomeDirDrive(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Source(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set InheritInitialProgram(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set AllowLogonTerminalServer(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set TimeoutSettingsConnections(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set TimeoutSettingsDisconnections(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set TimeoutSettingsIdle(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set DeviceClientDrives(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set DeviceClientPrinters(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set ClientDefaultPrinter(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set BrokenTimeoutSettings(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set ReconnectSettings(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set ShadowingSettings(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set TerminalServerRemoteHomeDir(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set InitialProgram(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set WorkDirectory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set TerminalServerProfilePath(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set TerminalServerHomeDir(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set TerminalServerHomeDirDrive(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTSUSERCONFIGW (size: 96)
 */
export interface WTSUSERCONFIGW {
  /** u32 */
  Source: number;
  /** u32 */
  InheritInitialProgram: number;
  /** u32 */
  AllowLogonTerminalServer: number;
  /** u32 */
  TimeoutSettingsConnections: number;
  /** u32 */
  TimeoutSettingsDisconnections: number;
  /** u32 */
  TimeoutSettingsIdle: number;
  /** u32 */
  DeviceClientDrives: number;
  /** u32 */
  DeviceClientPrinters: number;
  /** u32 */
  ClientDefaultPrinter: number;
  /** u32 */
  BrokenTimeoutSettings: number;
  /** u32 */
  ReconnectSettings: number;
  /** u32 */
  ShadowingSettings: number;
  /** u32 */
  TerminalServerRemoteHomeDir: number;
  /** array */
  InitialProgram: Deno.PointerValue;
  /** array */
  WorkDirectory: Deno.PointerValue;
  /** array */
  TerminalServerProfilePath: Deno.PointerValue;
  /** array */
  TerminalServerHomeDir: Deno.PointerValue;
  /** array */
  TerminalServerHomeDirDrive: Deno.PointerValue;
}

export const sizeofWTSUSERCONFIGW = 96;

export function allocWTSUSERCONFIGW(data?: Partial<WTSUSERCONFIGW>): Uint8Array {
  const buf = new Uint8Array(sizeofWTSUSERCONFIGW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Source !== undefined) view.setUint32(0, Number(data.Source), true);
  // 0x04: u32
  if (data?.InheritInitialProgram !== undefined) view.setUint32(4, Number(data.InheritInitialProgram), true);
  // 0x08: u32
  if (data?.AllowLogonTerminalServer !== undefined) view.setUint32(8, Number(data.AllowLogonTerminalServer), true);
  // 0x0c: u32
  if (data?.TimeoutSettingsConnections !== undefined) view.setUint32(12, Number(data.TimeoutSettingsConnections), true);
  // 0x10: u32
  if (data?.TimeoutSettingsDisconnections !== undefined) view.setUint32(16, Number(data.TimeoutSettingsDisconnections), true);
  // 0x14: u32
  if (data?.TimeoutSettingsIdle !== undefined) view.setUint32(20, Number(data.TimeoutSettingsIdle), true);
  // 0x18: u32
  if (data?.DeviceClientDrives !== undefined) view.setUint32(24, Number(data.DeviceClientDrives), true);
  // 0x1c: u32
  if (data?.DeviceClientPrinters !== undefined) view.setUint32(28, Number(data.DeviceClientPrinters), true);
  // 0x20: u32
  if (data?.ClientDefaultPrinter !== undefined) view.setUint32(32, Number(data.ClientDefaultPrinter), true);
  // 0x24: u32
  if (data?.BrokenTimeoutSettings !== undefined) view.setUint32(36, Number(data.BrokenTimeoutSettings), true);
  // 0x28: u32
  if (data?.ReconnectSettings !== undefined) view.setUint32(40, Number(data.ReconnectSettings), true);
  // 0x2c: u32
  if (data?.ShadowingSettings !== undefined) view.setUint32(44, Number(data.ShadowingSettings), true);
  // 0x30: u32
  if (data?.TerminalServerRemoteHomeDir !== undefined) view.setUint32(48, Number(data.TerminalServerRemoteHomeDir), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.InitialProgram !== undefined) view.setBigUint64(56, data.InitialProgram === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InitialProgram))), true);
  // 0x40: pointer
  if (data?.WorkDirectory !== undefined) view.setBigUint64(64, data.WorkDirectory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WorkDirectory))), true);
  // 0x48: pointer
  if (data?.TerminalServerProfilePath !== undefined) view.setBigUint64(72, data.TerminalServerProfilePath === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TerminalServerProfilePath))), true);
  // 0x50: pointer
  if (data?.TerminalServerHomeDir !== undefined) view.setBigUint64(80, data.TerminalServerHomeDir === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TerminalServerHomeDir))), true);
  // 0x58: pointer
  if (data?.TerminalServerHomeDirDrive !== undefined) view.setBigUint64(88, data.TerminalServerHomeDirDrive === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TerminalServerHomeDirDrive))), true);
  return buf;
}

export class WTSUSERCONFIGWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Source(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get InheritInitialProgram(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get AllowLogonTerminalServer(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get TimeoutSettingsConnections(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get TimeoutSettingsDisconnections(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get TimeoutSettingsIdle(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get DeviceClientDrives(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get DeviceClientPrinters(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get ClientDefaultPrinter(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get BrokenTimeoutSettings(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get ReconnectSettings(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get ShadowingSettings(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get TerminalServerRemoteHomeDir(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get InitialProgram(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get WorkDirectory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get TerminalServerProfilePath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get TerminalServerHomeDir(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get TerminalServerHomeDirDrive(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Source(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set InheritInitialProgram(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set AllowLogonTerminalServer(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set TimeoutSettingsConnections(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set TimeoutSettingsDisconnections(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set TimeoutSettingsIdle(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set DeviceClientDrives(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set DeviceClientPrinters(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set ClientDefaultPrinter(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set BrokenTimeoutSettings(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set ReconnectSettings(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set ShadowingSettings(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set TerminalServerRemoteHomeDir(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set InitialProgram(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set WorkDirectory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set TerminalServerProfilePath(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set TerminalServerHomeDir(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set TerminalServerHomeDirDrive(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTS_SESSION_ADDRESS (size: 16)
 */
export interface WTS_SESSION_ADDRESS {
  /** u32 */
  AddressFamily: number;
  /** array */
  Address: Deno.PointerValue;
}

export const sizeofWTS_SESSION_ADDRESS = 16;

export function allocWTS_SESSION_ADDRESS(data?: Partial<WTS_SESSION_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofWTS_SESSION_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AddressFamily !== undefined) view.setUint32(0, Number(data.AddressFamily), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Address !== undefined) view.setBigUint64(8, data.Address === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Address))), true);
  return buf;
}

export class WTS_SESSION_ADDRESSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get AddressFamily(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set AddressFamily(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Address(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTS_PROCESS_INFO_EXW (size: 64)
 */
export interface WTS_PROCESS_INFO_EXW {
  /** u32 */
  SessionId: number;
  /** u32 */
  ProcessId: number;
  /** Windows.Win32.Foundation.PWSTR */
  pProcessName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PSID */
  pUserSid: Uint8Array | Deno.PointerValue;
  /** u32 */
  NumberOfThreads: number;
  /** u32 */
  HandleCount: number;
  /** u32 */
  PagefileUsage: number;
  /** u32 */
  PeakPagefileUsage: number;
  /** u32 */
  WorkingSetSize: number;
  /** u32 */
  PeakWorkingSetSize: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  UserTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  KernelTime: Uint8Array | Deno.PointerValue;
}

export const sizeofWTS_PROCESS_INFO_EXW = 64;

export function allocWTS_PROCESS_INFO_EXW(data?: Partial<WTS_PROCESS_INFO_EXW>): Uint8Array {
  const buf = new Uint8Array(sizeofWTS_PROCESS_INFO_EXW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SessionId !== undefined) view.setUint32(0, Number(data.SessionId), true);
  // 0x04: u32
  if (data?.ProcessId !== undefined) view.setUint32(4, Number(data.ProcessId), true);
  // 0x08: buffer
  if (data?.pProcessName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pProcessName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.pUserSid !== undefined) view.setBigUint64(16, data.pUserSid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pUserSid))), true);
  // 0x18: u32
  if (data?.NumberOfThreads !== undefined) view.setUint32(24, Number(data.NumberOfThreads), true);
  // 0x1c: u32
  if (data?.HandleCount !== undefined) view.setUint32(28, Number(data.HandleCount), true);
  // 0x20: u32
  if (data?.PagefileUsage !== undefined) view.setUint32(32, Number(data.PagefileUsage), true);
  // 0x24: u32
  if (data?.PeakPagefileUsage !== undefined) view.setUint32(36, Number(data.PeakPagefileUsage), true);
  // 0x28: u32
  if (data?.WorkingSetSize !== undefined) view.setUint32(40, Number(data.WorkingSetSize), true);
  // 0x2c: u32
  if (data?.PeakWorkingSetSize !== undefined) view.setUint32(44, Number(data.PeakWorkingSetSize), true);
  // 0x30: pointer
  if (data?.UserTime !== undefined) view.setBigUint64(48, data.UserTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserTime))), true);
  // 0x38: pointer
  if (data?.KernelTime !== undefined) view.setBigUint64(56, data.KernelTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.KernelTime))), true);
  return buf;
}

export class WTS_PROCESS_INFO_EXWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SessionId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ProcessId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get pProcessName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pUserSid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get NumberOfThreads(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get HandleCount(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get PagefileUsage(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get PeakPagefileUsage(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get WorkingSetSize(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get PeakWorkingSetSize(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: pointer
  get UserTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get KernelTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set SessionId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ProcessId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set pProcessName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set pUserSid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set NumberOfThreads(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set HandleCount(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set PagefileUsage(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set PeakPagefileUsage(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set WorkingSetSize(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set PeakWorkingSetSize(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: pointer
  set UserTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set KernelTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTS_PROCESS_INFO_EXA (size: 64)
 */
export interface WTS_PROCESS_INFO_EXA {
  /** u32 */
  SessionId: number;
  /** u32 */
  ProcessId: number;
  /** Windows.Win32.Foundation.PSTR */
  pProcessName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSID */
  pUserSid: Uint8Array | Deno.PointerValue;
  /** u32 */
  NumberOfThreads: number;
  /** u32 */
  HandleCount: number;
  /** u32 */
  PagefileUsage: number;
  /** u32 */
  PeakPagefileUsage: number;
  /** u32 */
  WorkingSetSize: number;
  /** u32 */
  PeakWorkingSetSize: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  UserTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  KernelTime: Uint8Array | Deno.PointerValue;
}

export const sizeofWTS_PROCESS_INFO_EXA = 64;

export function allocWTS_PROCESS_INFO_EXA(data?: Partial<WTS_PROCESS_INFO_EXA>): Uint8Array {
  const buf = new Uint8Array(sizeofWTS_PROCESS_INFO_EXA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SessionId !== undefined) view.setUint32(0, Number(data.SessionId), true);
  // 0x04: u32
  if (data?.ProcessId !== undefined) view.setUint32(4, Number(data.ProcessId), true);
  // 0x08: buffer
  if (data?.pProcessName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pProcessName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.pUserSid !== undefined) view.setBigUint64(16, data.pUserSid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pUserSid))), true);
  // 0x18: u32
  if (data?.NumberOfThreads !== undefined) view.setUint32(24, Number(data.NumberOfThreads), true);
  // 0x1c: u32
  if (data?.HandleCount !== undefined) view.setUint32(28, Number(data.HandleCount), true);
  // 0x20: u32
  if (data?.PagefileUsage !== undefined) view.setUint32(32, Number(data.PagefileUsage), true);
  // 0x24: u32
  if (data?.PeakPagefileUsage !== undefined) view.setUint32(36, Number(data.PeakPagefileUsage), true);
  // 0x28: u32
  if (data?.WorkingSetSize !== undefined) view.setUint32(40, Number(data.WorkingSetSize), true);
  // 0x2c: u32
  if (data?.PeakWorkingSetSize !== undefined) view.setUint32(44, Number(data.PeakWorkingSetSize), true);
  // 0x30: pointer
  if (data?.UserTime !== undefined) view.setBigUint64(48, data.UserTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserTime))), true);
  // 0x38: pointer
  if (data?.KernelTime !== undefined) view.setBigUint64(56, data.KernelTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.KernelTime))), true);
  return buf;
}

export class WTS_PROCESS_INFO_EXAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SessionId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ProcessId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get pProcessName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pUserSid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get NumberOfThreads(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get HandleCount(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get PagefileUsage(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get PeakPagefileUsage(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get WorkingSetSize(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get PeakWorkingSetSize(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: pointer
  get UserTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get KernelTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set SessionId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ProcessId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set pProcessName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set pUserSid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set NumberOfThreads(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set HandleCount(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set PagefileUsage(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set PeakPagefileUsage(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set WorkingSetSize(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set PeakWorkingSetSize(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: pointer
  set UserTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set KernelTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTSLISTENERCONFIGW (size: 144)
 */
export interface WTSLISTENERCONFIGW {
  /** u32 */
  version: number;
  /** u32 */
  fEnableListener: number;
  /** u32 */
  MaxConnectionCount: number;
  /** u32 */
  fPromptForPassword: number;
  /** u32 */
  fInheritColorDepth: number;
  /** u32 */
  ColorDepth: number;
  /** u32 */
  fInheritBrokenTimeoutSettings: number;
  /** u32 */
  BrokenTimeoutSettings: number;
  /** u32 */
  fDisablePrinterRedirection: number;
  /** u32 */
  fDisableDriveRedirection: number;
  /** u32 */
  fDisableComPortRedirection: number;
  /** u32 */
  fDisableLPTPortRedirection: number;
  /** u32 */
  fDisableClipboardRedirection: number;
  /** u32 */
  fDisableAudioRedirection: number;
  /** u32 */
  fDisablePNPRedirection: number;
  /** u32 */
  fDisableDefaultMainClientPrinter: number;
  /** u32 */
  LanAdapter: number;
  /** u32 */
  PortNumber: number;
  /** u32 */
  fInheritShadowSettings: number;
  /** u32 */
  ShadowSettings: number;
  /** u32 */
  TimeoutSettingsConnection: number;
  /** u32 */
  TimeoutSettingsDisconnection: number;
  /** u32 */
  TimeoutSettingsIdle: number;
  /** u32 */
  SecurityLayer: number;
  /** u32 */
  MinEncryptionLevel: number;
  /** u32 */
  UserAuthentication: number;
  /** array */
  Comment: Deno.PointerValue;
  /** array */
  LogonUserName: Deno.PointerValue;
  /** array */
  LogonDomain: Deno.PointerValue;
  /** array */
  WorkDirectory: Deno.PointerValue;
  /** array */
  InitialProgram: Deno.PointerValue;
}

export const sizeofWTSLISTENERCONFIGW = 144;

export function allocWTSLISTENERCONFIGW(data?: Partial<WTSLISTENERCONFIGW>): Uint8Array {
  const buf = new Uint8Array(sizeofWTSLISTENERCONFIGW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.version !== undefined) view.setUint32(0, Number(data.version), true);
  // 0x04: u32
  if (data?.fEnableListener !== undefined) view.setUint32(4, Number(data.fEnableListener), true);
  // 0x08: u32
  if (data?.MaxConnectionCount !== undefined) view.setUint32(8, Number(data.MaxConnectionCount), true);
  // 0x0c: u32
  if (data?.fPromptForPassword !== undefined) view.setUint32(12, Number(data.fPromptForPassword), true);
  // 0x10: u32
  if (data?.fInheritColorDepth !== undefined) view.setUint32(16, Number(data.fInheritColorDepth), true);
  // 0x14: u32
  if (data?.ColorDepth !== undefined) view.setUint32(20, Number(data.ColorDepth), true);
  // 0x18: u32
  if (data?.fInheritBrokenTimeoutSettings !== undefined) view.setUint32(24, Number(data.fInheritBrokenTimeoutSettings), true);
  // 0x1c: u32
  if (data?.BrokenTimeoutSettings !== undefined) view.setUint32(28, Number(data.BrokenTimeoutSettings), true);
  // 0x20: u32
  if (data?.fDisablePrinterRedirection !== undefined) view.setUint32(32, Number(data.fDisablePrinterRedirection), true);
  // 0x24: u32
  if (data?.fDisableDriveRedirection !== undefined) view.setUint32(36, Number(data.fDisableDriveRedirection), true);
  // 0x28: u32
  if (data?.fDisableComPortRedirection !== undefined) view.setUint32(40, Number(data.fDisableComPortRedirection), true);
  // 0x2c: u32
  if (data?.fDisableLPTPortRedirection !== undefined) view.setUint32(44, Number(data.fDisableLPTPortRedirection), true);
  // 0x30: u32
  if (data?.fDisableClipboardRedirection !== undefined) view.setUint32(48, Number(data.fDisableClipboardRedirection), true);
  // 0x34: u32
  if (data?.fDisableAudioRedirection !== undefined) view.setUint32(52, Number(data.fDisableAudioRedirection), true);
  // 0x38: u32
  if (data?.fDisablePNPRedirection !== undefined) view.setUint32(56, Number(data.fDisablePNPRedirection), true);
  // 0x3c: u32
  if (data?.fDisableDefaultMainClientPrinter !== undefined) view.setUint32(60, Number(data.fDisableDefaultMainClientPrinter), true);
  // 0x40: u32
  if (data?.LanAdapter !== undefined) view.setUint32(64, Number(data.LanAdapter), true);
  // 0x44: u32
  if (data?.PortNumber !== undefined) view.setUint32(68, Number(data.PortNumber), true);
  // 0x48: u32
  if (data?.fInheritShadowSettings !== undefined) view.setUint32(72, Number(data.fInheritShadowSettings), true);
  // 0x4c: u32
  if (data?.ShadowSettings !== undefined) view.setUint32(76, Number(data.ShadowSettings), true);
  // 0x50: u32
  if (data?.TimeoutSettingsConnection !== undefined) view.setUint32(80, Number(data.TimeoutSettingsConnection), true);
  // 0x54: u32
  if (data?.TimeoutSettingsDisconnection !== undefined) view.setUint32(84, Number(data.TimeoutSettingsDisconnection), true);
  // 0x58: u32
  if (data?.TimeoutSettingsIdle !== undefined) view.setUint32(88, Number(data.TimeoutSettingsIdle), true);
  // 0x5c: u32
  if (data?.SecurityLayer !== undefined) view.setUint32(92, Number(data.SecurityLayer), true);
  // 0x60: u32
  if (data?.MinEncryptionLevel !== undefined) view.setUint32(96, Number(data.MinEncryptionLevel), true);
  // 0x64: u32
  if (data?.UserAuthentication !== undefined) view.setUint32(100, Number(data.UserAuthentication), true);
  // 0x68: pointer
  if (data?.Comment !== undefined) view.setBigUint64(104, data.Comment === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Comment))), true);
  // 0x70: pointer
  if (data?.LogonUserName !== undefined) view.setBigUint64(112, data.LogonUserName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonUserName))), true);
  // 0x78: pointer
  if (data?.LogonDomain !== undefined) view.setBigUint64(120, data.LogonDomain === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonDomain))), true);
  // 0x80: pointer
  if (data?.WorkDirectory !== undefined) view.setBigUint64(128, data.WorkDirectory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WorkDirectory))), true);
  // 0x88: pointer
  if (data?.InitialProgram !== undefined) view.setBigUint64(136, data.InitialProgram === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InitialProgram))), true);
  return buf;
}

export class WTSLISTENERCONFIGWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get fEnableListener(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get MaxConnectionCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get fPromptForPassword(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get fInheritColorDepth(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ColorDepth(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get fInheritBrokenTimeoutSettings(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get BrokenTimeoutSettings(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get fDisablePrinterRedirection(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get fDisableDriveRedirection(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get fDisableComPortRedirection(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get fDisableLPTPortRedirection(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get fDisableClipboardRedirection(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get fDisableAudioRedirection(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get fDisablePNPRedirection(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get fDisableDefaultMainClientPrinter(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get LanAdapter(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get PortNumber(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get fInheritShadowSettings(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get ShadowSettings(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get TimeoutSettingsConnection(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get TimeoutSettingsDisconnection(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get TimeoutSettingsIdle(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get SecurityLayer(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: u32
  get MinEncryptionLevel(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u32
  get UserAuthentication(): number {
    return this.view.getUint32(100, true);
  }

  // 0x68: pointer
  get Comment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get LogonUserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get LogonDomain(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: pointer
  get WorkDirectory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x88: pointer
  get InitialProgram(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(136, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set fEnableListener(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set MaxConnectionCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set fPromptForPassword(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set fInheritColorDepth(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ColorDepth(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set fInheritBrokenTimeoutSettings(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set BrokenTimeoutSettings(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set fDisablePrinterRedirection(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set fDisableDriveRedirection(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set fDisableComPortRedirection(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set fDisableLPTPortRedirection(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set fDisableClipboardRedirection(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set fDisableAudioRedirection(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set fDisablePNPRedirection(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set fDisableDefaultMainClientPrinter(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set LanAdapter(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set PortNumber(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set fInheritShadowSettings(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set ShadowSettings(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set TimeoutSettingsConnection(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set TimeoutSettingsDisconnection(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set TimeoutSettingsIdle(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set SecurityLayer(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: u32
  set MinEncryptionLevel(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u32
  set UserAuthentication(value: number) {
    this.view.setUint32(100, value, true);
  }

  // 0x68: pointer
  set Comment(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set LogonUserName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set LogonDomain(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: pointer
  set WorkDirectory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x88: pointer
  set InitialProgram(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(136, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTSLISTENERCONFIGA (size: 144)
 */
export interface WTSLISTENERCONFIGA {
  /** u32 */
  version: number;
  /** u32 */
  fEnableListener: number;
  /** u32 */
  MaxConnectionCount: number;
  /** u32 */
  fPromptForPassword: number;
  /** u32 */
  fInheritColorDepth: number;
  /** u32 */
  ColorDepth: number;
  /** u32 */
  fInheritBrokenTimeoutSettings: number;
  /** u32 */
  BrokenTimeoutSettings: number;
  /** u32 */
  fDisablePrinterRedirection: number;
  /** u32 */
  fDisableDriveRedirection: number;
  /** u32 */
  fDisableComPortRedirection: number;
  /** u32 */
  fDisableLPTPortRedirection: number;
  /** u32 */
  fDisableClipboardRedirection: number;
  /** u32 */
  fDisableAudioRedirection: number;
  /** u32 */
  fDisablePNPRedirection: number;
  /** u32 */
  fDisableDefaultMainClientPrinter: number;
  /** u32 */
  LanAdapter: number;
  /** u32 */
  PortNumber: number;
  /** u32 */
  fInheritShadowSettings: number;
  /** u32 */
  ShadowSettings: number;
  /** u32 */
  TimeoutSettingsConnection: number;
  /** u32 */
  TimeoutSettingsDisconnection: number;
  /** u32 */
  TimeoutSettingsIdle: number;
  /** u32 */
  SecurityLayer: number;
  /** u32 */
  MinEncryptionLevel: number;
  /** u32 */
  UserAuthentication: number;
  /** array */
  Comment: Deno.PointerValue;
  /** array */
  LogonUserName: Deno.PointerValue;
  /** array */
  LogonDomain: Deno.PointerValue;
  /** array */
  WorkDirectory: Deno.PointerValue;
  /** array */
  InitialProgram: Deno.PointerValue;
}

export const sizeofWTSLISTENERCONFIGA = 144;

export function allocWTSLISTENERCONFIGA(data?: Partial<WTSLISTENERCONFIGA>): Uint8Array {
  const buf = new Uint8Array(sizeofWTSLISTENERCONFIGA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.version !== undefined) view.setUint32(0, Number(data.version), true);
  // 0x04: u32
  if (data?.fEnableListener !== undefined) view.setUint32(4, Number(data.fEnableListener), true);
  // 0x08: u32
  if (data?.MaxConnectionCount !== undefined) view.setUint32(8, Number(data.MaxConnectionCount), true);
  // 0x0c: u32
  if (data?.fPromptForPassword !== undefined) view.setUint32(12, Number(data.fPromptForPassword), true);
  // 0x10: u32
  if (data?.fInheritColorDepth !== undefined) view.setUint32(16, Number(data.fInheritColorDepth), true);
  // 0x14: u32
  if (data?.ColorDepth !== undefined) view.setUint32(20, Number(data.ColorDepth), true);
  // 0x18: u32
  if (data?.fInheritBrokenTimeoutSettings !== undefined) view.setUint32(24, Number(data.fInheritBrokenTimeoutSettings), true);
  // 0x1c: u32
  if (data?.BrokenTimeoutSettings !== undefined) view.setUint32(28, Number(data.BrokenTimeoutSettings), true);
  // 0x20: u32
  if (data?.fDisablePrinterRedirection !== undefined) view.setUint32(32, Number(data.fDisablePrinterRedirection), true);
  // 0x24: u32
  if (data?.fDisableDriveRedirection !== undefined) view.setUint32(36, Number(data.fDisableDriveRedirection), true);
  // 0x28: u32
  if (data?.fDisableComPortRedirection !== undefined) view.setUint32(40, Number(data.fDisableComPortRedirection), true);
  // 0x2c: u32
  if (data?.fDisableLPTPortRedirection !== undefined) view.setUint32(44, Number(data.fDisableLPTPortRedirection), true);
  // 0x30: u32
  if (data?.fDisableClipboardRedirection !== undefined) view.setUint32(48, Number(data.fDisableClipboardRedirection), true);
  // 0x34: u32
  if (data?.fDisableAudioRedirection !== undefined) view.setUint32(52, Number(data.fDisableAudioRedirection), true);
  // 0x38: u32
  if (data?.fDisablePNPRedirection !== undefined) view.setUint32(56, Number(data.fDisablePNPRedirection), true);
  // 0x3c: u32
  if (data?.fDisableDefaultMainClientPrinter !== undefined) view.setUint32(60, Number(data.fDisableDefaultMainClientPrinter), true);
  // 0x40: u32
  if (data?.LanAdapter !== undefined) view.setUint32(64, Number(data.LanAdapter), true);
  // 0x44: u32
  if (data?.PortNumber !== undefined) view.setUint32(68, Number(data.PortNumber), true);
  // 0x48: u32
  if (data?.fInheritShadowSettings !== undefined) view.setUint32(72, Number(data.fInheritShadowSettings), true);
  // 0x4c: u32
  if (data?.ShadowSettings !== undefined) view.setUint32(76, Number(data.ShadowSettings), true);
  // 0x50: u32
  if (data?.TimeoutSettingsConnection !== undefined) view.setUint32(80, Number(data.TimeoutSettingsConnection), true);
  // 0x54: u32
  if (data?.TimeoutSettingsDisconnection !== undefined) view.setUint32(84, Number(data.TimeoutSettingsDisconnection), true);
  // 0x58: u32
  if (data?.TimeoutSettingsIdle !== undefined) view.setUint32(88, Number(data.TimeoutSettingsIdle), true);
  // 0x5c: u32
  if (data?.SecurityLayer !== undefined) view.setUint32(92, Number(data.SecurityLayer), true);
  // 0x60: u32
  if (data?.MinEncryptionLevel !== undefined) view.setUint32(96, Number(data.MinEncryptionLevel), true);
  // 0x64: u32
  if (data?.UserAuthentication !== undefined) view.setUint32(100, Number(data.UserAuthentication), true);
  // 0x68: pointer
  if (data?.Comment !== undefined) view.setBigUint64(104, data.Comment === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Comment))), true);
  // 0x70: pointer
  if (data?.LogonUserName !== undefined) view.setBigUint64(112, data.LogonUserName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonUserName))), true);
  // 0x78: pointer
  if (data?.LogonDomain !== undefined) view.setBigUint64(120, data.LogonDomain === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonDomain))), true);
  // 0x80: pointer
  if (data?.WorkDirectory !== undefined) view.setBigUint64(128, data.WorkDirectory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WorkDirectory))), true);
  // 0x88: pointer
  if (data?.InitialProgram !== undefined) view.setBigUint64(136, data.InitialProgram === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InitialProgram))), true);
  return buf;
}

export class WTSLISTENERCONFIGAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get fEnableListener(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get MaxConnectionCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get fPromptForPassword(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get fInheritColorDepth(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ColorDepth(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get fInheritBrokenTimeoutSettings(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get BrokenTimeoutSettings(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get fDisablePrinterRedirection(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get fDisableDriveRedirection(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get fDisableComPortRedirection(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get fDisableLPTPortRedirection(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get fDisableClipboardRedirection(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get fDisableAudioRedirection(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get fDisablePNPRedirection(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get fDisableDefaultMainClientPrinter(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get LanAdapter(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get PortNumber(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get fInheritShadowSettings(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get ShadowSettings(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get TimeoutSettingsConnection(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get TimeoutSettingsDisconnection(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get TimeoutSettingsIdle(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get SecurityLayer(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: u32
  get MinEncryptionLevel(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u32
  get UserAuthentication(): number {
    return this.view.getUint32(100, true);
  }

  // 0x68: pointer
  get Comment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get LogonUserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get LogonDomain(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: pointer
  get WorkDirectory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x88: pointer
  get InitialProgram(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(136, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set fEnableListener(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set MaxConnectionCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set fPromptForPassword(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set fInheritColorDepth(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ColorDepth(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set fInheritBrokenTimeoutSettings(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set BrokenTimeoutSettings(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set fDisablePrinterRedirection(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set fDisableDriveRedirection(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set fDisableComPortRedirection(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set fDisableLPTPortRedirection(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set fDisableClipboardRedirection(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set fDisableAudioRedirection(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set fDisablePNPRedirection(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set fDisableDefaultMainClientPrinter(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set LanAdapter(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set PortNumber(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set fInheritShadowSettings(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set ShadowSettings(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set TimeoutSettingsConnection(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set TimeoutSettingsDisconnection(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set TimeoutSettingsIdle(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set SecurityLayer(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: u32
  set MinEncryptionLevel(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u32
  set UserAuthentication(value: number) {
    this.view.setUint32(100, value, true);
  }

  // 0x68: pointer
  set Comment(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set LogonUserName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set LogonDomain(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: pointer
  set WorkDirectory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x88: pointer
  set InitialProgram(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(136, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTSSBX_IP_ADDRESS (size: 24)
 */
export interface WTSSBX_IP_ADDRESS {
  /** Windows.Win32.System.RemoteDesktop.WTSSBX_ADDRESS_FAMILY */
  AddressFamily: WTSSBX_ADDRESS_FAMILY;
  /** array */
  Address: Deno.PointerValue;
  /** u16 */
  PortNumber: number;
  /** u32 */
  dwScope: number;
}

export const sizeofWTSSBX_IP_ADDRESS = 24;

export function allocWTSSBX_IP_ADDRESS(data?: Partial<WTSSBX_IP_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofWTSSBX_IP_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.AddressFamily !== undefined) view.setInt32(0, Number(data.AddressFamily), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Address !== undefined) view.setBigUint64(8, data.Address === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Address))), true);
  // 0x10: u16
  if (data?.PortNumber !== undefined) view.setUint16(16, Number(data.PortNumber), true);
  // 0x12: u32
  if (data?.dwScope !== undefined) view.setUint32(18, Number(data.dwScope), true);
  // 0x16: pad2
  return buf;
}

export class WTSSBX_IP_ADDRESSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get AddressFamily(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u16
  get PortNumber(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: u32
  get dwScope(): number {
    return this.view.getUint32(18, true);
  }

  // 0x16: pad2

  // 0x00: i32
  set AddressFamily(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Address(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u16
  set PortNumber(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: u32
  set dwScope(value: number) {
    this.view.setUint32(18, value, true);
  }

  // 0x16: pad2
}

/**
 * Windows.Win32.System.RemoteDesktop.WTSSBX_MACHINE_CONNECT_INFO (size: 32)
 */
export interface WTSSBX_MACHINE_CONNECT_INFO {
  /** array */
  wczMachineFQDN: Deno.PointerValue;
  /** array */
  wczMachineNetBiosName: Deno.PointerValue;
  /** u32 */
  dwNumOfIPAddr: number;
  /** array */
  IPaddr: Deno.PointerValue;
}

export const sizeofWTSSBX_MACHINE_CONNECT_INFO = 32;

export function allocWTSSBX_MACHINE_CONNECT_INFO(data?: Partial<WTSSBX_MACHINE_CONNECT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWTSSBX_MACHINE_CONNECT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wczMachineFQDN !== undefined) view.setBigUint64(0, data.wczMachineFQDN === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wczMachineFQDN))), true);
  // 0x08: pointer
  if (data?.wczMachineNetBiosName !== undefined) view.setBigUint64(8, data.wczMachineNetBiosName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wczMachineNetBiosName))), true);
  // 0x10: u32
  if (data?.dwNumOfIPAddr !== undefined) view.setUint32(16, Number(data.dwNumOfIPAddr), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.IPaddr !== undefined) view.setBigUint64(24, data.IPaddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IPaddr))), true);
  return buf;
}

export class WTSSBX_MACHINE_CONNECT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get wczMachineFQDN(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get wczMachineNetBiosName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwNumOfIPAddr(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get IPaddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set wczMachineFQDN(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set wczMachineNetBiosName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwNumOfIPAddr(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set IPaddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTSSBX_MACHINE_INFO (size: 48)
 */
export interface WTSSBX_MACHINE_INFO {
  /** Windows.Win32.System.RemoteDesktop.WTSSBX_MACHINE_CONNECT_INFO */
  ClientConnectInfo: Uint8Array | Deno.PointerValue;
  /** array */
  wczFarmName: Deno.PointerValue;
  /** Windows.Win32.System.RemoteDesktop.WTSSBX_IP_ADDRESS */
  InternalIPAddress: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwMaxSessionsLimit: number;
  /** u32 */
  ServerWeight: number;
  /** Windows.Win32.System.RemoteDesktop.WTSSBX_MACHINE_SESSION_MODE */
  SingleSessionMode: WTSSBX_MACHINE_SESSION_MODE;
  /** Windows.Win32.System.RemoteDesktop.WTSSBX_MACHINE_DRAIN */
  InDrain: WTSSBX_MACHINE_DRAIN;
  /** Windows.Win32.System.RemoteDesktop.WTSSBX_MACHINE_STATE */
  MachineState: WTSSBX_MACHINE_STATE;
}

export const sizeofWTSSBX_MACHINE_INFO = 48;

export function allocWTSSBX_MACHINE_INFO(data?: Partial<WTSSBX_MACHINE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWTSSBX_MACHINE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ClientConnectInfo !== undefined) view.setBigUint64(0, data.ClientConnectInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientConnectInfo))), true);
  // 0x08: pointer
  if (data?.wczFarmName !== undefined) view.setBigUint64(8, data.wczFarmName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wczFarmName))), true);
  // 0x10: pointer
  if (data?.InternalIPAddress !== undefined) view.setBigUint64(16, data.InternalIPAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InternalIPAddress))), true);
  // 0x18: u32
  if (data?.dwMaxSessionsLimit !== undefined) view.setUint32(24, Number(data.dwMaxSessionsLimit), true);
  // 0x1c: u32
  if (data?.ServerWeight !== undefined) view.setUint32(28, Number(data.ServerWeight), true);
  // 0x20: i32
  if (data?.SingleSessionMode !== undefined) view.setInt32(32, Number(data.SingleSessionMode), true);
  // 0x24: i32
  if (data?.InDrain !== undefined) view.setInt32(36, Number(data.InDrain), true);
  // 0x28: i32
  if (data?.MachineState !== undefined) view.setInt32(40, Number(data.MachineState), true);
  // 0x2c: pad4
  return buf;
}

export class WTSSBX_MACHINE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ClientConnectInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get wczFarmName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get InternalIPAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwMaxSessionsLimit(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get ServerWeight(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: i32
  get SingleSessionMode(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get InDrain(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: i32
  get MachineState(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: pad4

  // 0x00: pointer
  set ClientConnectInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set wczFarmName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set InternalIPAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwMaxSessionsLimit(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set ServerWeight(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: i32
  set SingleSessionMode(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set InDrain(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: i32
  set MachineState(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Foundation.FILETIME (size: 8)
 */
export interface FILETIME {
  /** u32 */
  dwLowDateTime: number;
  /** u32 */
  dwHighDateTime: number;
}

export const sizeofFILETIME = 8;

export function allocFILETIME(data?: Partial<FILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofFILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowDateTime !== undefined) view.setUint32(0, Number(data.dwLowDateTime), true);
  // 0x04: u32
  if (data?.dwHighDateTime !== undefined) view.setUint32(4, Number(data.dwHighDateTime), true);
  return buf;
}

export class FILETIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLowDateTime(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwHighDateTime(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwLowDateTime(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwHighDateTime(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTSSBX_SESSION_INFO (size: 56)
 */
export interface WTSSBX_SESSION_INFO {
  /** array */
  wszUserName: Deno.PointerValue;
  /** array */
  wszDomainName: Deno.PointerValue;
  /** array */
  ApplicationType: Deno.PointerValue;
  /** u32 */
  dwSessionId: number;
  /** Windows.Win32.Foundation.FILETIME */
  CreateTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.FILETIME */
  DisconnectTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.RemoteDesktop.WTSSBX_SESSION_STATE */
  SessionState: WTSSBX_SESSION_STATE;
}

export const sizeofWTSSBX_SESSION_INFO = 56;

export function allocWTSSBX_SESSION_INFO(data?: Partial<WTSSBX_SESSION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWTSSBX_SESSION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wszUserName !== undefined) view.setBigUint64(0, data.wszUserName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wszUserName))), true);
  // 0x08: pointer
  if (data?.wszDomainName !== undefined) view.setBigUint64(8, data.wszDomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wszDomainName))), true);
  // 0x10: pointer
  if (data?.ApplicationType !== undefined) view.setBigUint64(16, data.ApplicationType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ApplicationType))), true);
  // 0x18: u32
  if (data?.dwSessionId !== undefined) view.setUint32(24, Number(data.dwSessionId), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.CreateTime !== undefined) view.setBigUint64(32, data.CreateTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreateTime))), true);
  // 0x28: pointer
  if (data?.DisconnectTime !== undefined) view.setBigUint64(40, data.DisconnectTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DisconnectTime))), true);
  // 0x30: i32
  if (data?.SessionState !== undefined) view.setInt32(48, Number(data.SessionState), true);
  // 0x34: pad4
  return buf;
}

export class WTSSBX_SESSION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get wszUserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get wszDomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ApplicationType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwSessionId(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get CreateTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get DisconnectTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: i32
  get SessionState(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: pad4

  // 0x00: pointer
  set wszUserName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set wszDomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ApplicationType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwSessionId(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set CreateTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set DisconnectTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: i32
  set SessionState(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.System.RemoteDesktop.CHANNEL_DEF (size: 16)
 */
export interface CHANNEL_DEF {
  /** array */
  name: Deno.PointerValue;
  /** u32 */
  options: number;
}

export const sizeofCHANNEL_DEF = 16;

export function allocCHANNEL_DEF(data?: Partial<CHANNEL_DEF>): Uint8Array {
  const buf = new Uint8Array(sizeofCHANNEL_DEF);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.name !== undefined) view.setBigUint64(0, data.name === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.name))), true);
  // 0x08: u32
  if (data?.options !== undefined) view.setUint32(8, Number(data.options), true);
  // 0x0c: pad4
  return buf;
}

export class CHANNEL_DEFView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get options(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set name(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set options(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.RemoteDesktop.CHANNEL_PDU_HEADER (size: 8)
 */
export interface CHANNEL_PDU_HEADER {
  /** u32 */
  length: number;
  /** u32 */
  flags: number;
}

export const sizeofCHANNEL_PDU_HEADER = 8;

export function allocCHANNEL_PDU_HEADER(data?: Partial<CHANNEL_PDU_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofCHANNEL_PDU_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.length !== undefined) view.setUint32(0, Number(data.length), true);
  // 0x04: u32
  if (data?.flags !== undefined) view.setUint32(4, Number(data.flags), true);
  return buf;
}

export class CHANNEL_PDU_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get length(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set length(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set flags(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.CHANNEL_ENTRY_POINTS (size: 40)
 */
export interface CHANNEL_ENTRY_POINTS {
  /** u32 */
  cbSize: number;
  /** u32 */
  protocolVersion: number;
  /** Windows.Win32.System.RemoteDesktop.PVIRTUALCHANNELINIT */
  pVirtualChannelInit: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.RemoteDesktop.PVIRTUALCHANNELOPEN */
  pVirtualChannelOpen: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.RemoteDesktop.PVIRTUALCHANNELCLOSE */
  pVirtualChannelClose: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.RemoteDesktop.PVIRTUALCHANNELWRITE */
  pVirtualChannelWrite: Uint8Array | Deno.PointerValue;
}

export const sizeofCHANNEL_ENTRY_POINTS = 40;

export function allocCHANNEL_ENTRY_POINTS(data?: Partial<CHANNEL_ENTRY_POINTS>): Uint8Array {
  const buf = new Uint8Array(sizeofCHANNEL_ENTRY_POINTS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.protocolVersion !== undefined) view.setUint32(4, Number(data.protocolVersion), true);
  // 0x08: pointer
  if (data?.pVirtualChannelInit !== undefined) view.setBigUint64(8, data.pVirtualChannelInit === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pVirtualChannelInit))), true);
  // 0x10: pointer
  if (data?.pVirtualChannelOpen !== undefined) view.setBigUint64(16, data.pVirtualChannelOpen === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pVirtualChannelOpen))), true);
  // 0x18: pointer
  if (data?.pVirtualChannelClose !== undefined) view.setBigUint64(24, data.pVirtualChannelClose === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pVirtualChannelClose))), true);
  // 0x20: pointer
  if (data?.pVirtualChannelWrite !== undefined) view.setBigUint64(32, data.pVirtualChannelWrite === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pVirtualChannelWrite))), true);
  return buf;
}

export class CHANNEL_ENTRY_POINTSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get protocolVersion(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pVirtualChannelInit(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pVirtualChannelOpen(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get pVirtualChannelClose(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get pVirtualChannelWrite(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set protocolVersion(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pVirtualChannelInit(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set pVirtualChannelOpen(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set pVirtualChannelClose(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set pVirtualChannelWrite(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.CLIENT_DISPLAY (size: 16)
 */
export interface CLIENT_DISPLAY {
  /** u32 */
  HorizontalResolution: number;
  /** u32 */
  VerticalResolution: number;
  /** u32 */
  ColorDepth: number;
}

export const sizeofCLIENT_DISPLAY = 16;

export function allocCLIENT_DISPLAY(data?: Partial<CLIENT_DISPLAY>): Uint8Array {
  const buf = new Uint8Array(sizeofCLIENT_DISPLAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.HorizontalResolution !== undefined) view.setUint32(0, Number(data.HorizontalResolution), true);
  // 0x04: u32
  if (data?.VerticalResolution !== undefined) view.setUint32(4, Number(data.VerticalResolution), true);
  // 0x08: u32
  if (data?.ColorDepth !== undefined) view.setUint32(8, Number(data.ColorDepth), true);
  // 0x0c: pad4
  return buf;
}

export class CLIENT_DISPLAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get HorizontalResolution(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get VerticalResolution(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ColorDepth(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set HorizontalResolution(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set VerticalResolution(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ColorDepth(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.RemoteDesktop.TSSD_ConnectionPoint (size: 24)
 */
export interface TSSD_ConnectionPoint {
  /** array */
  ServerAddressB: Deno.PointerValue;
  /** Windows.Win32.System.RemoteDesktop.TSSD_AddrV46Type */
  AddressType: TSSD_AddrV46Type;
  /** u16 */
  PortNumber: number;
  /** u32 */
  AddressScope: number;
}

export const sizeofTSSD_ConnectionPoint = 24;

export function allocTSSD_ConnectionPoint(data?: Partial<TSSD_ConnectionPoint>): Uint8Array {
  const buf = new Uint8Array(sizeofTSSD_ConnectionPoint);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ServerAddressB !== undefined) view.setBigUint64(0, data.ServerAddressB === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ServerAddressB))), true);
  // 0x08: i32
  if (data?.AddressType !== undefined) view.setInt32(8, Number(data.AddressType), true);
  // 0x0c: u16
  if (data?.PortNumber !== undefined) view.setUint16(12, Number(data.PortNumber), true);
  // 0x0e: u32
  if (data?.AddressScope !== undefined) view.setUint32(14, Number(data.AddressScope), true);
  // 0x12: pad6
  return buf;
}

export class TSSD_ConnectionPointView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ServerAddressB(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get AddressType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u16
  get PortNumber(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u32
  get AddressScope(): number {
    return this.view.getUint32(14, true);
  }

  // 0x12: pad6

  // 0x00: pointer
  set ServerAddressB(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set AddressType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u16
  set PortNumber(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u32
  set AddressScope(value: number) {
    this.view.setUint32(14, value, true);
  }

  // 0x12: pad6
}

/**
 * Windows.Win32.System.RemoteDesktop.VM_NOTIFY_ENTRY (size: 16)
 */
export interface VM_NOTIFY_ENTRY {
  /** array */
  VmName: Deno.PointerValue;
  /** array */
  VmHost: Deno.PointerValue;
}

export const sizeofVM_NOTIFY_ENTRY = 16;

export function allocVM_NOTIFY_ENTRY(data?: Partial<VM_NOTIFY_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofVM_NOTIFY_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.VmName !== undefined) view.setBigUint64(0, data.VmName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.VmName))), true);
  // 0x08: pointer
  if (data?.VmHost !== undefined) view.setBigUint64(8, data.VmHost === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.VmHost))), true);
  return buf;
}

export class VM_NOTIFY_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get VmName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get VmHost(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set VmName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set VmHost(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.VM_PATCH_INFO (size: 16)
 */
export interface VM_PATCH_INFO {
  /** u32 */
  dwNumEntries: number;
  /** ptr */
  pVmNames: Deno.PointerValue | Uint8Array;
}

export const sizeofVM_PATCH_INFO = 16;

export function allocVM_PATCH_INFO(data?: Partial<VM_PATCH_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofVM_PATCH_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(0, Number(data.dwNumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pVmNames !== undefined) view.setBigUint64(8, data.pVmNames === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pVmNames))), true);
  return buf;
}

export class VM_PATCH_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pVmNames(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pVmNames(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.VM_NOTIFY_INFO (size: 16)
 */
export interface VM_NOTIFY_INFO {
  /** u32 */
  dwNumEntries: number;
  /** ptr */
  ppVmEntries: Deno.PointerValue | Uint8Array;
}

export const sizeofVM_NOTIFY_INFO = 16;

export function allocVM_NOTIFY_INFO(data?: Partial<VM_NOTIFY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofVM_NOTIFY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(0, Number(data.dwNumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ppVmEntries !== undefined) view.setBigUint64(8, data.ppVmEntries === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ppVmEntries))), true);
  return buf;
}

export class VM_NOTIFY_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ppVmEntries(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ppVmEntries(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.pluginResource (size: 80)
 */
export interface pluginResource {
  /** array */
  alias: Deno.PointerValue;
  /** array */
  name: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  resourceFileContents: string | null | Uint8Array | Uint16Array;
  /** array */
  fileExtension: Deno.PointerValue;
  /** array */
  resourcePluginType: Deno.PointerValue;
  /** u8 */
  isDiscoverable: number;
  /** i32 */
  resourceType: number;
  /** u32 */
  pceIconSize: number;
  /** ptr */
  iconContents: Deno.PointerValue | Uint8Array;
  /** u32 */
  pcePluginBlobSize: number;
  /** ptr */
  blobContents: Deno.PointerValue | Uint8Array;
}

export const sizeofPluginResource = 80;

export function allocPluginResource(data?: Partial<pluginResource>): Uint8Array {
  const buf = new Uint8Array(sizeofPluginResource);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.alias !== undefined) view.setBigUint64(0, data.alias === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.alias))), true);
  // 0x08: pointer
  if (data?.name !== undefined) view.setBigUint64(8, data.name === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.name))), true);
  // 0x10: buffer
  if (data?.resourceFileContents !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.resourceFileContents);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: pointer
  if (data?.fileExtension !== undefined) view.setBigUint64(24, data.fileExtension === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fileExtension))), true);
  // 0x20: pointer
  if (data?.resourcePluginType !== undefined) view.setBigUint64(32, data.resourcePluginType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.resourcePluginType))), true);
  // 0x28: u8
  if (data?.isDiscoverable !== undefined) view.setUint8(40, Number(data.isDiscoverable));
  // 0x29: i32
  if (data?.resourceType !== undefined) view.setInt32(41, Number(data.resourceType), true);
  // 0x2d: u32
  if (data?.pceIconSize !== undefined) view.setUint32(45, Number(data.pceIconSize), true);
  // 0x31: pad7
  // 0x38: pointer
  if (data?.iconContents !== undefined) view.setBigUint64(56, data.iconContents === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.iconContents))), true);
  // 0x40: u32
  if (data?.pcePluginBlobSize !== undefined) view.setUint32(64, Number(data.pcePluginBlobSize), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.blobContents !== undefined) view.setBigUint64(72, data.blobContents === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.blobContents))), true);
  return buf;
}

export class pluginResourceView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get alias(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get resourceFileContents(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get fileExtension(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get resourcePluginType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u8
  get isDiscoverable(): number {
    return this.view.getUint8(40);
  }

  // 0x29: i32
  get resourceType(): number {
    return this.view.getInt32(41, true);
  }

  // 0x2d: u32
  get pceIconSize(): number {
    return this.view.getUint32(45, true);
  }

  // 0x31: pad7

  // 0x38: pointer
  get iconContents(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get pcePluginBlobSize(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  get blobContents(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set alias(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set name(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set resourceFileContents(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: pointer
  set fileExtension(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set resourcePluginType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u8
  set isDiscoverable(value: number) {
    this.view.setUint8(40, value);
  }

  // 0x29: i32
  set resourceType(value: number) {
    this.view.setInt32(41, value, true);
  }

  // 0x2d: u32
  set pceIconSize(value: number) {
    this.view.setUint32(45, value, true);
  }

  // 0x31: pad7

  // 0x38: pointer
  set iconContents(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set pcePluginBlobSize(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  set blobContents(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.pluginResource2FileAssociation (size: 24)
 */
export interface pluginResource2FileAssociation {
  /** array */
  extName: Deno.PointerValue;
  /** u8 */
  primaryHandler: number;
  /** u32 */
  pceIconSize: number;
  /** ptr */
  iconContents: Deno.PointerValue | Uint8Array;
}

export const sizeofPluginResource2FileAssociation = 24;

export function allocPluginResource2FileAssociation(data?: Partial<pluginResource2FileAssociation>): Uint8Array {
  const buf = new Uint8Array(sizeofPluginResource2FileAssociation);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.extName !== undefined) view.setBigUint64(0, data.extName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.extName))), true);
  // 0x08: u8
  if (data?.primaryHandler !== undefined) view.setUint8(8, Number(data.primaryHandler));
  // 0x09: u32
  if (data?.pceIconSize !== undefined) view.setUint32(9, Number(data.pceIconSize), true);
  // 0x0d: pad3
  // 0x10: pointer
  if (data?.iconContents !== undefined) view.setBigUint64(16, data.iconContents === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.iconContents))), true);
  return buf;
}

export class pluginResource2FileAssociationView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get extName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get primaryHandler(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u32
  get pceIconSize(): number {
    return this.view.getUint32(9, true);
  }

  // 0x0d: pad3

  // 0x10: pointer
  get iconContents(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set extName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set primaryHandler(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u32
  set pceIconSize(value: number) {
    this.view.setUint32(9, value, true);
  }

  // 0x0d: pad3

  // 0x10: pointer
  set iconContents(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.pluginResource2 (size: 48)
 */
export interface pluginResource2 {
  /** Windows.Win32.System.RemoteDesktop.pluginResource */
  resourceV1: Uint8Array | Deno.PointerValue;
  /** u32 */
  pceFileAssocListSize: number;
  /** ptr */
  fileAssocList: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  securityDescriptor: string | null | Uint8Array | Uint16Array;
  /** u32 */
  pceFolderListSize: number;
  /** ptr */
  folderList: Deno.PointerValue | Uint8Array;
}

export const sizeofPluginResource2 = 48;

export function allocPluginResource2(data?: Partial<pluginResource2>): Uint8Array {
  const buf = new Uint8Array(sizeofPluginResource2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.resourceV1 !== undefined) view.setBigUint64(0, data.resourceV1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.resourceV1))), true);
  // 0x08: u32
  if (data?.pceFileAssocListSize !== undefined) view.setUint32(8, Number(data.pceFileAssocListSize), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.fileAssocList !== undefined) view.setBigUint64(16, data.fileAssocList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fileAssocList))), true);
  // 0x18: buffer
  if (data?.securityDescriptor !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.securityDescriptor);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: u32
  if (data?.pceFolderListSize !== undefined) view.setUint32(32, Number(data.pceFolderListSize), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.folderList !== undefined) view.setBigUint64(40, data.folderList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.folderList))), true);
  return buf;
}

export class pluginResource2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get resourceV1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get pceFileAssocListSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get fileAssocList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get securityDescriptor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get pceFolderListSize(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get folderList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set resourceV1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set pceFileAssocListSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set fileAssocList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: buffer
  set securityDescriptor(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: u32
  set pceFolderListSize(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set folderList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.BITMAP_RENDERER_STATISTICS (size: 8)
 */
export interface BITMAP_RENDERER_STATISTICS {
  /** u32 */
  dwFramesDelivered: number;
  /** u32 */
  dwFramesDropped: number;
}

export const sizeofBITMAP_RENDERER_STATISTICS = 8;

export function allocBITMAP_RENDERER_STATISTICS(data?: Partial<BITMAP_RENDERER_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofBITMAP_RENDERER_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFramesDelivered !== undefined) view.setUint32(0, Number(data.dwFramesDelivered), true);
  // 0x04: u32
  if (data?.dwFramesDropped !== undefined) view.setUint32(4, Number(data.dwFramesDropped), true);
  return buf;
}

export class BITMAP_RENDERER_STATISTICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFramesDelivered(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFramesDropped(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwFramesDelivered(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFramesDropped(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.RFX_GFX_RECT (size: 16)
 */
export interface RFX_GFX_RECT {
  /** i32 */
  left: number;
  /** i32 */
  top: number;
  /** i32 */
  right: number;
  /** i32 */
  bottom: number;
}

export const sizeofRFX_GFX_RECT = 16;

export function allocRFX_GFX_RECT(data?: Partial<RFX_GFX_RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofRFX_GFX_RECT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.left !== undefined) view.setInt32(0, Number(data.left), true);
  // 0x04: i32
  if (data?.top !== undefined) view.setInt32(4, Number(data.top), true);
  // 0x08: i32
  if (data?.right !== undefined) view.setInt32(8, Number(data.right), true);
  // 0x0c: i32
  if (data?.bottom !== undefined) view.setInt32(12, Number(data.bottom), true);
  return buf;
}

export class RFX_GFX_RECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get left(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get top(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get right(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get bottom(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: i32
  set left(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set top(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set right(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set bottom(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.RFX_GFX_MSG_HEADER (size: 8)
 */
export interface RFX_GFX_MSG_HEADER {
  /** u16 */
  uMSGType: number;
  /** u16 */
  cbSize: number;
}

export const sizeofRFX_GFX_MSG_HEADER = 8;

export function allocRFX_GFX_MSG_HEADER(data?: Partial<RFX_GFX_MSG_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofRFX_GFX_MSG_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.uMSGType !== undefined) view.setUint16(0, Number(data.uMSGType), true);
  // 0x02: u16
  if (data?.cbSize !== undefined) view.setUint16(2, Number(data.cbSize), true);
  // 0x04: pad4
  return buf;
}

export class RFX_GFX_MSG_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get uMSGType(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get cbSize(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u16
  set uMSGType(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set cbSize(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

export type BOOL = number;

/**
 * Windows.Win32.System.RemoteDesktop.RFX_GFX_MONITOR_INFO (size: 32)
 */
export interface RFX_GFX_MONITOR_INFO {
  /** i32 */
  left: number;
  /** i32 */
  top: number;
  /** i32 */
  right: number;
  /** i32 */
  bottom: number;
  /** u32 */
  physicalWidth: number;
  /** u32 */
  physicalHeight: number;
  /** u32 */
  orientation: number;
  /** Windows.Win32.Foundation.BOOL */
  primary: boolean;
}

export const sizeofRFX_GFX_MONITOR_INFO = 32;

export function allocRFX_GFX_MONITOR_INFO(data?: Partial<RFX_GFX_MONITOR_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRFX_GFX_MONITOR_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.left !== undefined) view.setInt32(0, Number(data.left), true);
  // 0x04: i32
  if (data?.top !== undefined) view.setInt32(4, Number(data.top), true);
  // 0x08: i32
  if (data?.right !== undefined) view.setInt32(8, Number(data.right), true);
  // 0x0c: i32
  if (data?.bottom !== undefined) view.setInt32(12, Number(data.bottom), true);
  // 0x10: u32
  if (data?.physicalWidth !== undefined) view.setUint32(16, Number(data.physicalWidth), true);
  // 0x14: u32
  if (data?.physicalHeight !== undefined) view.setUint32(20, Number(data.physicalHeight), true);
  // 0x18: u32
  if (data?.orientation !== undefined) view.setUint32(24, Number(data.orientation), true);
  // 0x1c: i32
  if (data?.primary !== undefined) view.setInt32(28, Number(data.primary), true);
  return buf;
}

export class RFX_GFX_MONITOR_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get left(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get top(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get right(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get bottom(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get physicalWidth(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get physicalHeight(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get orientation(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: i32
  get primary(): number {
    return this.view.getInt32(28, true);
  }

  // 0x00: i32
  set left(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set top(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set right(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set bottom(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set physicalWidth(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set physicalHeight(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set orientation(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: i32
  set primary(value: number) {
    this.view.setInt32(28, value, true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.RFX_GFX_MSG_CLIENT_DESKTOP_INFO_REQUEST (size: 8)
 */
export interface RFX_GFX_MSG_CLIENT_DESKTOP_INFO_REQUEST {
  /** Windows.Win32.System.RemoteDesktop.RFX_GFX_MSG_HEADER */
  channelHdr: Uint8Array | Deno.PointerValue;
}

export const sizeofRFX_GFX_MSG_CLIENT_DESKTOP_INFO_REQUEST = 8;

export function allocRFX_GFX_MSG_CLIENT_DESKTOP_INFO_REQUEST(data?: Partial<RFX_GFX_MSG_CLIENT_DESKTOP_INFO_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofRFX_GFX_MSG_CLIENT_DESKTOP_INFO_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.channelHdr !== undefined) view.setBigUint64(0, data.channelHdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.channelHdr))), true);
  return buf;
}

export class RFX_GFX_MSG_CLIENT_DESKTOP_INFO_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get channelHdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set channelHdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.RFX_GFX_MSG_CLIENT_DESKTOP_INFO_RESPONSE (size: 32)
 */
export interface RFX_GFX_MSG_CLIENT_DESKTOP_INFO_RESPONSE {
  /** Windows.Win32.System.RemoteDesktop.RFX_GFX_MSG_HEADER */
  channelHdr: Uint8Array | Deno.PointerValue;
  /** u32 */
  reserved: number;
  /** u32 */
  monitorCount: number;
  /** array */
  MonitorData: Deno.PointerValue;
  /** array */
  clientUniqueId: Deno.PointerValue;
}

export const sizeofRFX_GFX_MSG_CLIENT_DESKTOP_INFO_RESPONSE = 32;

export function allocRFX_GFX_MSG_CLIENT_DESKTOP_INFO_RESPONSE(data?: Partial<RFX_GFX_MSG_CLIENT_DESKTOP_INFO_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofRFX_GFX_MSG_CLIENT_DESKTOP_INFO_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.channelHdr !== undefined) view.setBigUint64(0, data.channelHdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.channelHdr))), true);
  // 0x08: u32
  if (data?.reserved !== undefined) view.setUint32(8, Number(data.reserved), true);
  // 0x0c: u32
  if (data?.monitorCount !== undefined) view.setUint32(12, Number(data.monitorCount), true);
  // 0x10: pointer
  if (data?.MonitorData !== undefined) view.setBigUint64(16, data.MonitorData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MonitorData))), true);
  // 0x18: pointer
  if (data?.clientUniqueId !== undefined) view.setBigUint64(24, data.clientUniqueId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.clientUniqueId))), true);
  return buf;
}

export class RFX_GFX_MSG_CLIENT_DESKTOP_INFO_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get channelHdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get reserved(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get monitorCount(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get MonitorData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get clientUniqueId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set channelHdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set reserved(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set monitorCount(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set MonitorData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set clientUniqueId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.RFX_GFX_MSG_DESKTOP_CONFIG_CHANGE_NOTIFY (size: 24)
 */
export interface RFX_GFX_MSG_DESKTOP_CONFIG_CHANGE_NOTIFY {
  /** Windows.Win32.System.RemoteDesktop.RFX_GFX_MSG_HEADER */
  channelHdr: Uint8Array | Deno.PointerValue;
  /** u32 */
  ulWidth: number;
  /** u32 */
  ulHeight: number;
  /** u32 */
  ulBpp: number;
  /** u32 */
  Reserved: number;
}

export const sizeofRFX_GFX_MSG_DESKTOP_CONFIG_CHANGE_NOTIFY = 24;

export function allocRFX_GFX_MSG_DESKTOP_CONFIG_CHANGE_NOTIFY(data?: Partial<RFX_GFX_MSG_DESKTOP_CONFIG_CHANGE_NOTIFY>): Uint8Array {
  const buf = new Uint8Array(sizeofRFX_GFX_MSG_DESKTOP_CONFIG_CHANGE_NOTIFY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.channelHdr !== undefined) view.setBigUint64(0, data.channelHdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.channelHdr))), true);
  // 0x08: u32
  if (data?.ulWidth !== undefined) view.setUint32(8, Number(data.ulWidth), true);
  // 0x0c: u32
  if (data?.ulHeight !== undefined) view.setUint32(12, Number(data.ulHeight), true);
  // 0x10: u32
  if (data?.ulBpp !== undefined) view.setUint32(16, Number(data.ulBpp), true);
  // 0x14: u32
  if (data?.Reserved !== undefined) view.setUint32(20, Number(data.Reserved), true);
  return buf;
}

export class RFX_GFX_MSG_DESKTOP_CONFIG_CHANGE_NOTIFYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get channelHdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ulWidth(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ulHeight(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ulBpp(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Reserved(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: pointer
  set channelHdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ulWidth(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ulHeight(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ulBpp(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Reserved(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.RFX_GFX_MSG_DESKTOP_CONFIG_CHANGE_CONFIRM (size: 8)
 */
export interface RFX_GFX_MSG_DESKTOP_CONFIG_CHANGE_CONFIRM {
  /** Windows.Win32.System.RemoteDesktop.RFX_GFX_MSG_HEADER */
  channelHdr: Uint8Array | Deno.PointerValue;
}

export const sizeofRFX_GFX_MSG_DESKTOP_CONFIG_CHANGE_CONFIRM = 8;

export function allocRFX_GFX_MSG_DESKTOP_CONFIG_CHANGE_CONFIRM(data?: Partial<RFX_GFX_MSG_DESKTOP_CONFIG_CHANGE_CONFIRM>): Uint8Array {
  const buf = new Uint8Array(sizeofRFX_GFX_MSG_DESKTOP_CONFIG_CHANGE_CONFIRM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.channelHdr !== undefined) view.setBigUint64(0, data.channelHdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.channelHdr))), true);
  return buf;
}

export class RFX_GFX_MSG_DESKTOP_CONFIG_CHANGE_CONFIRMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get channelHdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set channelHdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.RFX_GFX_MSG_DESKTOP_INPUT_RESET (size: 16)
 */
export interface RFX_GFX_MSG_DESKTOP_INPUT_RESET {
  /** Windows.Win32.System.RemoteDesktop.RFX_GFX_MSG_HEADER */
  channelHdr: Uint8Array | Deno.PointerValue;
  /** u32 */
  ulWidth: number;
  /** u32 */
  ulHeight: number;
}

export const sizeofRFX_GFX_MSG_DESKTOP_INPUT_RESET = 16;

export function allocRFX_GFX_MSG_DESKTOP_INPUT_RESET(data?: Partial<RFX_GFX_MSG_DESKTOP_INPUT_RESET>): Uint8Array {
  const buf = new Uint8Array(sizeofRFX_GFX_MSG_DESKTOP_INPUT_RESET);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.channelHdr !== undefined) view.setBigUint64(0, data.channelHdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.channelHdr))), true);
  // 0x08: u32
  if (data?.ulWidth !== undefined) view.setUint32(8, Number(data.ulWidth), true);
  // 0x0c: u32
  if (data?.ulHeight !== undefined) view.setUint32(12, Number(data.ulHeight), true);
  return buf;
}

export class RFX_GFX_MSG_DESKTOP_INPUT_RESETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get channelHdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ulWidth(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ulHeight(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set channelHdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ulWidth(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ulHeight(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.RFX_GFX_MSG_DISCONNECT_NOTIFY (size: 16)
 */
export interface RFX_GFX_MSG_DISCONNECT_NOTIFY {
  /** Windows.Win32.System.RemoteDesktop.RFX_GFX_MSG_HEADER */
  channelHdr: Uint8Array | Deno.PointerValue;
  /** u32 */
  DisconnectReason: number;
}

export const sizeofRFX_GFX_MSG_DISCONNECT_NOTIFY = 16;

export function allocRFX_GFX_MSG_DISCONNECT_NOTIFY(data?: Partial<RFX_GFX_MSG_DISCONNECT_NOTIFY>): Uint8Array {
  const buf = new Uint8Array(sizeofRFX_GFX_MSG_DISCONNECT_NOTIFY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.channelHdr !== undefined) view.setBigUint64(0, data.channelHdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.channelHdr))), true);
  // 0x08: u32
  if (data?.DisconnectReason !== undefined) view.setUint32(8, Number(data.DisconnectReason), true);
  // 0x0c: pad4
  return buf;
}

export class RFX_GFX_MSG_DISCONNECT_NOTIFYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get channelHdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get DisconnectReason(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set channelHdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set DisconnectReason(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.RemoteDesktop.RFX_GFX_MSG_DESKTOP_RESEND_REQUEST (size: 16)
 */
export interface RFX_GFX_MSG_DESKTOP_RESEND_REQUEST {
  /** Windows.Win32.System.RemoteDesktop.RFX_GFX_MSG_HEADER */
  channelHdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.RemoteDesktop.RFX_GFX_RECT */
  RedrawRect: Uint8Array | Deno.PointerValue;
}

export const sizeofRFX_GFX_MSG_DESKTOP_RESEND_REQUEST = 16;

export function allocRFX_GFX_MSG_DESKTOP_RESEND_REQUEST(data?: Partial<RFX_GFX_MSG_DESKTOP_RESEND_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofRFX_GFX_MSG_DESKTOP_RESEND_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.channelHdr !== undefined) view.setBigUint64(0, data.channelHdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.channelHdr))), true);
  // 0x08: pointer
  if (data?.RedrawRect !== undefined) view.setBigUint64(8, data.RedrawRect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RedrawRect))), true);
  return buf;
}

export class RFX_GFX_MSG_DESKTOP_RESEND_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get channelHdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get RedrawRect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set channelHdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set RedrawRect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.RFX_GFX_MSG_RDP_DATA (size: 16)
 */
export interface RFX_GFX_MSG_RDP_DATA {
  /** Windows.Win32.System.RemoteDesktop.RFX_GFX_MSG_HEADER */
  channelHdr: Uint8Array | Deno.PointerValue;
  /** array */
  rdpData: Deno.PointerValue;
}

export const sizeofRFX_GFX_MSG_RDP_DATA = 16;

export function allocRFX_GFX_MSG_RDP_DATA(data?: Partial<RFX_GFX_MSG_RDP_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofRFX_GFX_MSG_RDP_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.channelHdr !== undefined) view.setBigUint64(0, data.channelHdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.channelHdr))), true);
  // 0x08: pointer
  if (data?.rdpData !== undefined) view.setBigUint64(8, data.rdpData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rdpData))), true);
  return buf;
}

export class RFX_GFX_MSG_RDP_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get channelHdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get rdpData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set channelHdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set rdpData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type NTSTATUS = number;

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD (size: 48)
 */
export interface EXCEPTION_RECORD {
  /** Windows.Win32.Foundation.NTSTATUS */
  ExceptionCode: Uint8Array | Deno.PointerValue;
  /** u32 */
  ExceptionFlags: number;
  /** ptr */
  ExceptionRecord: Deno.PointerValue | Uint8Array;
  /** ptr */
  ExceptionAddress: Deno.PointerValue | Uint8Array;
  /** u32 */
  NumberParameters: number;
  /** array */
  ExceptionInformation: Deno.PointerValue;
}

export const sizeofEXCEPTION_RECORD = 48;

export function allocEXCEPTION_RECORD(data?: Partial<EXCEPTION_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionCode !== undefined) view.setBigUint64(0, data.ExceptionCode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExceptionCode))), true);
  // 0x08: u32
  if (data?.ExceptionFlags !== undefined) view.setUint32(8, Number(data.ExceptionFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(16, data.ExceptionRecord === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExceptionRecord))), true);
  // 0x18: pointer
  if (data?.ExceptionAddress !== undefined) view.setBigUint64(24, data.ExceptionAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExceptionAddress))), true);
  // 0x20: u32
  if (data?.NumberParameters !== undefined) view.setUint32(32, Number(data.NumberParameters), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ExceptionInformation !== undefined) view.setBigUint64(40, data.ExceptionInformation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExceptionInformation))), true);
  return buf;
}

export class EXCEPTION_RECORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ExceptionCode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ExceptionFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ExceptionRecord(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ExceptionAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get NumberParameters(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get ExceptionInformation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ExceptionCode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ExceptionFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ExceptionRecord(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ExceptionAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set NumberParameters(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set ExceptionInformation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_DEBUG_INFO (size: 16)
 */
export interface EXCEPTION_DEBUG_INFO {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD */
  ExceptionRecord: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwFirstChance: number;
}

export const sizeofEXCEPTION_DEBUG_INFO = 16;

export function allocEXCEPTION_DEBUG_INFO(data?: Partial<EXCEPTION_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(0, data.ExceptionRecord === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExceptionRecord))), true);
  // 0x08: u32
  if (data?.dwFirstChance !== undefined) view.setUint32(8, Number(data.dwFirstChance), true);
  // 0x0c: pad4
  return buf;
}

export class EXCEPTION_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ExceptionRecord(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwFirstChance(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set ExceptionRecord(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwFirstChance(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

export type HANDLE = bigint | number;

/**
 * Windows.Win32.System.Diagnostics.Debug.CREATE_THREAD_DEBUG_INFO (size: 24)
 */
export interface CREATE_THREAD_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpThreadLocalBase: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */
  lpStartAddress: Uint8Array | Deno.PointerValue;
}

export const sizeofCREATE_THREAD_DEBUG_INFO = 24;

export function allocCREATE_THREAD_DEBUG_INFO(data?: Partial<CREATE_THREAD_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_THREAD_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hThread !== undefined) view.setBigUint64(0, data.hThread === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hThread))), true);
  // 0x08: pointer
  if (data?.lpThreadLocalBase !== undefined) view.setBigUint64(8, data.lpThreadLocalBase === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpThreadLocalBase))), true);
  // 0x10: pointer
  if (data?.lpStartAddress !== undefined) view.setBigUint64(16, data.lpStartAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpStartAddress))), true);
  return buf;
}

export class CREATE_THREAD_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hThread(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpThreadLocalBase(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpStartAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hThread(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpThreadLocalBase(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpStartAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.CREATE_PROCESS_DEBUG_INFO (size: 72)
 */
export interface CREATE_PROCESS_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HANDLE */
  hProcess: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpBaseOfImage: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwDebugInfoFileOffset: number;
  /** u32 */
  nDebugInfoSize: number;
  /** ptr */
  lpThreadLocalBase: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */
  lpStartAddress: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpImageName: Deno.PointerValue | Uint8Array;
  /** u16 */
  fUnicode: number;
}

export const sizeofCREATE_PROCESS_DEBUG_INFO = 72;

export function allocCREATE_PROCESS_DEBUG_INFO(data?: Partial<CREATE_PROCESS_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_PROCESS_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hFile))), true);
  // 0x08: pointer
  if (data?.hProcess !== undefined) view.setBigUint64(8, data.hProcess === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hProcess))), true);
  // 0x10: pointer
  if (data?.hThread !== undefined) view.setBigUint64(16, data.hThread === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hThread))), true);
  // 0x18: pointer
  if (data?.lpBaseOfImage !== undefined) view.setBigUint64(24, data.lpBaseOfImage === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpBaseOfImage))), true);
  // 0x20: u32
  if (data?.dwDebugInfoFileOffset !== undefined) view.setUint32(32, Number(data.dwDebugInfoFileOffset), true);
  // 0x24: u32
  if (data?.nDebugInfoSize !== undefined) view.setUint32(36, Number(data.nDebugInfoSize), true);
  // 0x28: pointer
  if (data?.lpThreadLocalBase !== undefined) view.setBigUint64(40, data.lpThreadLocalBase === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpThreadLocalBase))), true);
  // 0x30: pointer
  if (data?.lpStartAddress !== undefined) view.setBigUint64(48, data.lpStartAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpStartAddress))), true);
  // 0x38: pointer
  if (data?.lpImageName !== undefined) view.setBigUint64(56, data.lpImageName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpImageName))), true);
  // 0x40: u16
  if (data?.fUnicode !== undefined) view.setUint16(64, Number(data.fUnicode), true);
  // 0x42: pad6
  return buf;
}

export class CREATE_PROCESS_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get hProcess(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hThread(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get lpBaseOfImage(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwDebugInfoFileOffset(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get nDebugInfoSize(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get lpThreadLocalBase(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get lpStartAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get lpImageName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u16
  get fUnicode(): number {
    return this.view.getUint16(64, true);
  }

  // 0x42: pad6

  // 0x00: pointer
  set hFile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set hProcess(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hThread(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set lpBaseOfImage(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwDebugInfoFileOffset(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set nDebugInfoSize(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set lpThreadLocalBase(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set lpStartAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set lpImageName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u16
  set fUnicode(value: number) {
    this.view.setUint16(64, value, true);
  }

  // 0x42: pad6
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXIT_THREAD_DEBUG_INFO (size: 8)
 */
export interface EXIT_THREAD_DEBUG_INFO {
  /** u32 */
  dwExitCode: number;
}

export const sizeofEXIT_THREAD_DEBUG_INFO = 8;

export function allocEXIT_THREAD_DEBUG_INFO(data?: Partial<EXIT_THREAD_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXIT_THREAD_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExitCode !== undefined) view.setUint32(0, Number(data.dwExitCode), true);
  // 0x04: pad4
  return buf;
}

export class EXIT_THREAD_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwExitCode(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set dwExitCode(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXIT_PROCESS_DEBUG_INFO (size: 8)
 */
export interface EXIT_PROCESS_DEBUG_INFO {
  /** u32 */
  dwExitCode: number;
}

export const sizeofEXIT_PROCESS_DEBUG_INFO = 8;

export function allocEXIT_PROCESS_DEBUG_INFO(data?: Partial<EXIT_PROCESS_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXIT_PROCESS_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExitCode !== undefined) view.setUint32(0, Number(data.dwExitCode), true);
  // 0x04: pad4
  return buf;
}

export class EXIT_PROCESS_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwExitCode(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set dwExitCode(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.LOAD_DLL_DEBUG_INFO (size: 40)
 */
export interface LOAD_DLL_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwDebugInfoFileOffset: number;
  /** u32 */
  nDebugInfoSize: number;
  /** ptr */
  lpImageName: Deno.PointerValue | Uint8Array;
  /** u16 */
  fUnicode: number;
}

export const sizeofLOAD_DLL_DEBUG_INFO = 40;

export function allocLOAD_DLL_DEBUG_INFO(data?: Partial<LOAD_DLL_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofLOAD_DLL_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hFile))), true);
  // 0x08: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(8, data.lpBaseOfDll === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpBaseOfDll))), true);
  // 0x10: u32
  if (data?.dwDebugInfoFileOffset !== undefined) view.setUint32(16, Number(data.dwDebugInfoFileOffset), true);
  // 0x14: u32
  if (data?.nDebugInfoSize !== undefined) view.setUint32(20, Number(data.nDebugInfoSize), true);
  // 0x18: pointer
  if (data?.lpImageName !== undefined) view.setBigUint64(24, data.lpImageName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpImageName))), true);
  // 0x20: u16
  if (data?.fUnicode !== undefined) view.setUint16(32, Number(data.fUnicode), true);
  // 0x22: pad6
  return buf;
}

export class LOAD_DLL_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpBaseOfDll(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwDebugInfoFileOffset(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get nDebugInfoSize(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get lpImageName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u16
  get fUnicode(): number {
    return this.view.getUint16(32, true);
  }

  // 0x22: pad6

  // 0x00: pointer
  set hFile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpBaseOfDll(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwDebugInfoFileOffset(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set nDebugInfoSize(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set lpImageName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u16
  set fUnicode(value: number) {
    this.view.setUint16(32, value, true);
  }

  // 0x22: pad6
}

/**
 * Windows.Win32.System.Diagnostics.Debug.UNLOAD_DLL_DEBUG_INFO (size: 8)
 */
export interface UNLOAD_DLL_DEBUG_INFO {
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array;
}

export const sizeofUNLOAD_DLL_DEBUG_INFO = 8;

export function allocUNLOAD_DLL_DEBUG_INFO(data?: Partial<UNLOAD_DLL_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofUNLOAD_DLL_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(0, data.lpBaseOfDll === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpBaseOfDll))), true);
  return buf;
}

export class UNLOAD_DLL_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpBaseOfDll(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpBaseOfDll(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.OUTPUT_DEBUG_STRING_INFO (size: 16)
 */
export interface OUTPUT_DEBUG_STRING_INFO {
  /** Windows.Win32.Foundation.PSTR */
  lpDebugStringData: string | null | Uint8Array;
  /** u16 */
  fUnicode: number;
  /** u16 */
  nDebugStringLength: number;
}

export const sizeofOUTPUT_DEBUG_STRING_INFO = 16;

export function allocOUTPUT_DEBUG_STRING_INFO(data?: Partial<OUTPUT_DEBUG_STRING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofOUTPUT_DEBUG_STRING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpDebugStringData !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpDebugStringData);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: u16
  if (data?.fUnicode !== undefined) view.setUint16(8, Number(data.fUnicode), true);
  // 0x0a: u16
  if (data?.nDebugStringLength !== undefined) view.setUint16(10, Number(data.nDebugStringLength), true);
  // 0x0c: pad4
  return buf;
}

export class OUTPUT_DEBUG_STRING_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get lpDebugStringData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u16
  get fUnicode(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get nDebugStringLength(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: pad4

  // 0x00: buffer
  set lpDebugStringData(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: u16
  set fUnicode(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set nDebugStringLength(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.RIP_INFO (size: 8)
 */
export interface RIP_INFO {
  /** u32 */
  dwError: number;
  /** Windows.Win32.System.Diagnostics.Debug.RIP_INFO_TYPE */
  dwType: RIP_INFO_TYPE;
}

export const sizeofRIP_INFO = 8;

export function allocRIP_INFO(data?: Partial<RIP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRIP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwError !== undefined) view.setUint32(0, Number(data.dwError), true);
  // 0x04: u32
  if (data?.dwType !== undefined) view.setUint32(4, Number(data.dwType), true);
  return buf;
}

export class RIP_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwError(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwError(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwType(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * _u_e__Union (size: 72)
 */
export interface _u_e__Union {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_DEBUG_INFO */
  Exception: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.CREATE_THREAD_DEBUG_INFO */
  CreateThread: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.CREATE_PROCESS_DEBUG_INFO */
  CreateProcessInfo: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.EXIT_THREAD_DEBUG_INFO */
  ExitThread: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.EXIT_PROCESS_DEBUG_INFO */
  ExitProcess: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.LOAD_DLL_DEBUG_INFO */
  LoadDll: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.UNLOAD_DLL_DEBUG_INFO */
  UnloadDll: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.OUTPUT_DEBUG_STRING_INFO */
  DebugString: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.RIP_INFO */
  RipInfo: Uint8Array | Deno.PointerValue;
}

export const sizeof_u_e__Union = 72;

export function alloc_u_e__Union(data?: Partial<_u_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Exception !== undefined) view.setBigUint64(0, data.Exception === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Exception))), true);
  // 0x08: pointer
  if (data?.CreateThread !== undefined) view.setBigUint64(8, data.CreateThread === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreateThread))), true);
  // 0x10: pointer
  if (data?.CreateProcessInfo !== undefined) view.setBigUint64(16, data.CreateProcessInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreateProcessInfo))), true);
  // 0x18: pointer
  if (data?.ExitThread !== undefined) view.setBigUint64(24, data.ExitThread === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExitThread))), true);
  // 0x20: pointer
  if (data?.ExitProcess !== undefined) view.setBigUint64(32, data.ExitProcess === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExitProcess))), true);
  // 0x28: pointer
  if (data?.LoadDll !== undefined) view.setBigUint64(40, data.LoadDll === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LoadDll))), true);
  // 0x30: pointer
  if (data?.UnloadDll !== undefined) view.setBigUint64(48, data.UnloadDll === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UnloadDll))), true);
  // 0x38: pointer
  if (data?.DebugString !== undefined) view.setBigUint64(56, data.DebugString === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DebugString))), true);
  // 0x40: pointer
  if (data?.RipInfo !== undefined) view.setBigUint64(64, data.RipInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RipInfo))), true);
  return buf;
}

export class _u_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Exception(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get CreateThread(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get CreateProcessInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ExitThread(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ExitProcess(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get LoadDll(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get UnloadDll(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get DebugString(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get RipInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Exception(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set CreateThread(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set CreateProcessInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ExitThread(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set ExitProcess(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set LoadDll(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set UnloadDll(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set DebugString(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set RipInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTS_SOCKADDR (size: 16)
 */
export interface WTS_SOCKADDR {
  /** u16 */
  sin_family: number;
  /** _u_e__Union */
  u: Uint8Array | Deno.PointerValue;
}

export const sizeofWTS_SOCKADDR = 16;

export function allocWTS_SOCKADDR(data?: Partial<WTS_SOCKADDR>): Uint8Array {
  const buf = new Uint8Array(sizeofWTS_SOCKADDR);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.sin_family !== undefined) view.setUint16(0, Number(data.sin_family), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.u))), true);
  return buf;
}

export class WTS_SOCKADDRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get sin_family(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get u(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set sin_family(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set u(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTS_SMALL_RECT (size: 8)
 */
export interface WTS_SMALL_RECT {
  /** i16 */
  Left: number;
  /** i16 */
  Top: number;
  /** i16 */
  Right: number;
  /** i16 */
  Bottom: number;
}

export const sizeofWTS_SMALL_RECT = 8;

export function allocWTS_SMALL_RECT(data?: Partial<WTS_SMALL_RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofWTS_SMALL_RECT);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.Left !== undefined) view.setInt16(0, Number(data.Left), true);
  // 0x02: i16
  if (data?.Top !== undefined) view.setInt16(2, Number(data.Top), true);
  // 0x04: i16
  if (data?.Right !== undefined) view.setInt16(4, Number(data.Right), true);
  // 0x06: i16
  if (data?.Bottom !== undefined) view.setInt16(6, Number(data.Bottom), true);
  return buf;
}

export class WTS_SMALL_RECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i16
  get Left(): number {
    return this.view.getInt16(0, true);
  }

  // 0x02: i16
  get Top(): number {
    return this.view.getInt16(2, true);
  }

  // 0x04: i16
  get Right(): number {
    return this.view.getInt16(4, true);
  }

  // 0x06: i16
  get Bottom(): number {
    return this.view.getInt16(6, true);
  }

  // 0x00: i16
  set Left(value: number) {
    this.view.setInt16(0, value, true);
  }

  // 0x02: i16
  set Top(value: number) {
    this.view.setInt16(2, value, true);
  }

  // 0x04: i16
  set Right(value: number) {
    this.view.setInt16(4, value, true);
  }

  // 0x06: i16
  set Bottom(value: number) {
    this.view.setInt16(6, value, true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTS_SERVICE_STATE (size: 8)
 */
export interface WTS_SERVICE_STATE {
  /** Windows.Win32.System.RemoteDesktop.WTS_RCM_SERVICE_STATE */
  RcmServiceState: WTS_RCM_SERVICE_STATE;
  /** Windows.Win32.System.RemoteDesktop.WTS_RCM_DRAIN_STATE */
  RcmDrainState: WTS_RCM_DRAIN_STATE;
}

export const sizeofWTS_SERVICE_STATE = 8;

export function allocWTS_SERVICE_STATE(data?: Partial<WTS_SERVICE_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofWTS_SERVICE_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.RcmServiceState !== undefined) view.setInt32(0, Number(data.RcmServiceState), true);
  // 0x04: i32
  if (data?.RcmDrainState !== undefined) view.setInt32(4, Number(data.RcmDrainState), true);
  return buf;
}

export class WTS_SERVICE_STATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get RcmServiceState(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get RcmDrainState(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set RcmServiceState(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set RcmDrainState(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTS_SESSION_ID (size: 16)
 */
export interface WTS_SESSION_ID {
  /** System.Guid */
  SessionUniqueGuid: Uint8Array | Deno.PointerValue;
  /** u32 */
  SessionId: number;
}

export const sizeofWTS_SESSION_ID = 16;

export function allocWTS_SESSION_ID(data?: Partial<WTS_SESSION_ID>): Uint8Array {
  const buf = new Uint8Array(sizeofWTS_SESSION_ID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SessionUniqueGuid !== undefined) view.setBigUint64(0, data.SessionUniqueGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SessionUniqueGuid))), true);
  // 0x08: u32
  if (data?.SessionId !== undefined) view.setUint32(8, Number(data.SessionId), true);
  // 0x0c: pad4
  return buf;
}

export class WTS_SESSION_IDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get SessionUniqueGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get SessionId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set SessionUniqueGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set SessionId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.RemoteDesktop.WTS_USER_CREDENTIAL (size: 24)
 */
export interface WTS_USER_CREDENTIAL {
  /** array */
  UserName: Deno.PointerValue;
  /** array */
  Password: Deno.PointerValue;
  /** array */
  Domain: Deno.PointerValue;
}

export const sizeofWTS_USER_CREDENTIAL = 24;

export function allocWTS_USER_CREDENTIAL(data?: Partial<WTS_USER_CREDENTIAL>): Uint8Array {
  const buf = new Uint8Array(sizeofWTS_USER_CREDENTIAL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.UserName !== undefined) view.setBigUint64(0, data.UserName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserName))), true);
  // 0x08: pointer
  if (data?.Password !== undefined) view.setBigUint64(8, data.Password === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Password))), true);
  // 0x10: pointer
  if (data?.Domain !== undefined) view.setBigUint64(16, data.Domain === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Domain))), true);
  return buf;
}

export class WTS_USER_CREDENTIALView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get UserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Password(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Domain(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set UserName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Password(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Domain(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTS_SYSTEMTIME (size: 16)
 */
export interface WTS_SYSTEMTIME {
  /** u16 */
  wYear: number;
  /** u16 */
  wMonth: number;
  /** u16 */
  wDayOfWeek: number;
  /** u16 */
  wDay: number;
  /** u16 */
  wHour: number;
  /** u16 */
  wMinute: number;
  /** u16 */
  wSecond: number;
  /** u16 */
  wMilliseconds: number;
}

export const sizeofWTS_SYSTEMTIME = 16;

export function allocWTS_SYSTEMTIME(data?: Partial<WTS_SYSTEMTIME>): Uint8Array {
  const buf = new Uint8Array(sizeofWTS_SYSTEMTIME);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wYear !== undefined) view.setUint16(0, Number(data.wYear), true);
  // 0x02: u16
  if (data?.wMonth !== undefined) view.setUint16(2, Number(data.wMonth), true);
  // 0x04: u16
  if (data?.wDayOfWeek !== undefined) view.setUint16(4, Number(data.wDayOfWeek), true);
  // 0x06: u16
  if (data?.wDay !== undefined) view.setUint16(6, Number(data.wDay), true);
  // 0x08: u16
  if (data?.wHour !== undefined) view.setUint16(8, Number(data.wHour), true);
  // 0x0a: u16
  if (data?.wMinute !== undefined) view.setUint16(10, Number(data.wMinute), true);
  // 0x0c: u16
  if (data?.wSecond !== undefined) view.setUint16(12, Number(data.wSecond), true);
  // 0x0e: u16
  if (data?.wMilliseconds !== undefined) view.setUint16(14, Number(data.wMilliseconds), true);
  return buf;
}

export class WTS_SYSTEMTIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get wYear(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get wMonth(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get wDayOfWeek(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get wDay(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u16
  get wHour(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get wMinute(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u16
  get wSecond(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get wMilliseconds(): number {
    return this.view.getUint16(14, true);
  }

  // 0x00: u16
  set wYear(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set wMonth(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set wDayOfWeek(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set wDay(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u16
  set wHour(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set wMinute(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u16
  set wSecond(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set wMilliseconds(value: number) {
    this.view.setUint16(14, value, true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTS_TIME_ZONE_INFORMATION (size: 56)
 */
export interface WTS_TIME_ZONE_INFORMATION {
  /** i32 */
  Bias: number;
  /** array */
  StandardName: Deno.PointerValue;
  /** Windows.Win32.System.RemoteDesktop.WTS_SYSTEMTIME */
  StandardDate: Uint8Array | Deno.PointerValue;
  /** i32 */
  StandardBias: number;
  /** array */
  DaylightName: Deno.PointerValue;
  /** Windows.Win32.System.RemoteDesktop.WTS_SYSTEMTIME */
  DaylightDate: Uint8Array | Deno.PointerValue;
  /** i32 */
  DaylightBias: number;
}

export const sizeofWTS_TIME_ZONE_INFORMATION = 56;

export function allocWTS_TIME_ZONE_INFORMATION(data?: Partial<WTS_TIME_ZONE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofWTS_TIME_ZONE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Bias !== undefined) view.setInt32(0, Number(data.Bias), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.StandardName !== undefined) view.setBigUint64(8, data.StandardName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.StandardName))), true);
  // 0x10: pointer
  if (data?.StandardDate !== undefined) view.setBigUint64(16, data.StandardDate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.StandardDate))), true);
  // 0x18: i32
  if (data?.StandardBias !== undefined) view.setInt32(24, Number(data.StandardBias), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.DaylightName !== undefined) view.setBigUint64(32, data.DaylightName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DaylightName))), true);
  // 0x28: pointer
  if (data?.DaylightDate !== undefined) view.setBigUint64(40, data.DaylightDate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DaylightDate))), true);
  // 0x30: i32
  if (data?.DaylightBias !== undefined) view.setInt32(48, Number(data.DaylightBias), true);
  // 0x34: pad4
  return buf;
}

export class WTS_TIME_ZONE_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Bias(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get StandardName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get StandardDate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get StandardBias(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get DaylightName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get DaylightDate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: i32
  get DaylightBias(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: pad4

  // 0x00: i32
  set Bias(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set StandardName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set StandardDate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set StandardBias(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set DaylightName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set DaylightDate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: i32
  set DaylightBias(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.System.RemoteDesktop.WRDS_DYNAMIC_TIME_ZONE_INFORMATION (size: 72)
 */
export interface WRDS_DYNAMIC_TIME_ZONE_INFORMATION {
  /** i32 */
  Bias: number;
  /** array */
  StandardName: Deno.PointerValue;
  /** Windows.Win32.System.RemoteDesktop.WTS_SYSTEMTIME */
  StandardDate: Uint8Array | Deno.PointerValue;
  /** i32 */
  StandardBias: number;
  /** array */
  DaylightName: Deno.PointerValue;
  /** Windows.Win32.System.RemoteDesktop.WTS_SYSTEMTIME */
  DaylightDate: Uint8Array | Deno.PointerValue;
  /** i32 */
  DaylightBias: number;
  /** array */
  TimeZoneKeyName: Deno.PointerValue;
  /** u16 */
  DynamicDaylightTimeDisabled: number;
}

export const sizeofWRDS_DYNAMIC_TIME_ZONE_INFORMATION = 72;

export function allocWRDS_DYNAMIC_TIME_ZONE_INFORMATION(data?: Partial<WRDS_DYNAMIC_TIME_ZONE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofWRDS_DYNAMIC_TIME_ZONE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Bias !== undefined) view.setInt32(0, Number(data.Bias), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.StandardName !== undefined) view.setBigUint64(8, data.StandardName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.StandardName))), true);
  // 0x10: pointer
  if (data?.StandardDate !== undefined) view.setBigUint64(16, data.StandardDate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.StandardDate))), true);
  // 0x18: i32
  if (data?.StandardBias !== undefined) view.setInt32(24, Number(data.StandardBias), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.DaylightName !== undefined) view.setBigUint64(32, data.DaylightName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DaylightName))), true);
  // 0x28: pointer
  if (data?.DaylightDate !== undefined) view.setBigUint64(40, data.DaylightDate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DaylightDate))), true);
  // 0x30: i32
  if (data?.DaylightBias !== undefined) view.setInt32(48, Number(data.DaylightBias), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.TimeZoneKeyName !== undefined) view.setBigUint64(56, data.TimeZoneKeyName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TimeZoneKeyName))), true);
  // 0x40: u16
  if (data?.DynamicDaylightTimeDisabled !== undefined) view.setUint16(64, Number(data.DynamicDaylightTimeDisabled), true);
  // 0x42: pad6
  return buf;
}

export class WRDS_DYNAMIC_TIME_ZONE_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Bias(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get StandardName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get StandardDate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get StandardBias(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get DaylightName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get DaylightDate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: i32
  get DaylightBias(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get TimeZoneKeyName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u16
  get DynamicDaylightTimeDisabled(): number {
    return this.view.getUint16(64, true);
  }

  // 0x42: pad6

  // 0x00: i32
  set Bias(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set StandardName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set StandardDate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set StandardBias(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set DaylightName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set DaylightDate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: i32
  set DaylightBias(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set TimeZoneKeyName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u16
  set DynamicDaylightTimeDisabled(value: number) {
    this.view.setUint16(64, value, true);
  }

  // 0x42: pad6
}

export type BOOLEAN = number;

/**
 * Windows.Win32.System.RemoteDesktop.WTS_CLIENT_DATA (size: 352)
 */
export interface WTS_CLIENT_DATA {
  /** Windows.Win32.Foundation.BOOLEAN */
  fDisableCtrlAltDel: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fDoubleClickDetect: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fEnableWindowsKey: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fHideTitleBar: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  fInheritAutoLogon: boolean;
  /** Windows.Win32.Foundation.BOOLEAN */
  fPromptForPassword: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fUsingSavedCreds: Uint8Array | Deno.PointerValue;
  /** array */
  Domain: Deno.PointerValue;
  /** array */
  UserName: Deno.PointerValue;
  /** array */
  Password: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fPasswordIsScPin: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  fInheritInitialProgram: boolean;
  /** array */
  WorkDirectory: Deno.PointerValue;
  /** array */
  InitialProgram: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fMaximizeShell: Uint8Array | Deno.PointerValue;
  /** u8 */
  EncryptionLevel: number;
  /** u32 */
  PerformanceFlags: number;
  /** array */
  ProtocolName: Deno.PointerValue;
  /** u16 */
  ProtocolType: number;
  /** Windows.Win32.Foundation.BOOL */
  fInheritColorDepth: boolean;
  /** u16 */
  HRes: number;
  /** u16 */
  VRes: number;
  /** u16 */
  ColorDepth: number;
  /** array */
  DisplayDriverName: Deno.PointerValue;
  /** array */
  DisplayDeviceName: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fMouse: Uint8Array | Deno.PointerValue;
  /** u32 */
  KeyboardLayout: number;
  /** u32 */
  KeyboardType: number;
  /** u32 */
  KeyboardSubType: number;
  /** u32 */
  KeyboardFunctionKey: number;
  /** array */
  imeFileName: Deno.PointerValue;
  /** u32 */
  ActiveInputLocale: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  fNoAudioPlayback: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fRemoteConsoleAudio: Uint8Array | Deno.PointerValue;
  /** array */
  AudioDriverName: Deno.PointerValue;
  /** Windows.Win32.System.RemoteDesktop.WTS_TIME_ZONE_INFORMATION */
  ClientTimeZone: Uint8Array | Deno.PointerValue;
  /** array */
  ClientName: Deno.PointerValue;
  /** u32 */
  SerialNumber: number;
  /** u32 */
  ClientAddressFamily: number;
  /** array */
  ClientAddress: Deno.PointerValue;
  /** Windows.Win32.System.RemoteDesktop.WTS_SOCKADDR */
  ClientSockAddress: Uint8Array | Deno.PointerValue;
  /** array */
  ClientDirectory: Deno.PointerValue;
  /** u32 */
  ClientBuildNumber: number;
  /** u16 */
  ClientProductId: number;
  /** u16 */
  OutBufCountHost: number;
  /** u16 */
  OutBufCountClient: number;
  /** u16 */
  OutBufLength: number;
  /** u32 */
  ClientSessionId: number;
  /** array */
  ClientDigProductId: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fDisableCpm: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fDisableCdm: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fDisableCcm: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fDisableLPT: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fDisableClip: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fDisablePNP: Uint8Array | Deno.PointerValue;
}

export const sizeofWTS_CLIENT_DATA = 352;

export function allocWTS_CLIENT_DATA(data?: Partial<WTS_CLIENT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWTS_CLIENT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fDisableCtrlAltDel !== undefined) view.setBigUint64(0, data.fDisableCtrlAltDel === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fDisableCtrlAltDel))), true);
  // 0x08: pointer
  if (data?.fDoubleClickDetect !== undefined) view.setBigUint64(8, data.fDoubleClickDetect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fDoubleClickDetect))), true);
  // 0x10: pointer
  if (data?.fEnableWindowsKey !== undefined) view.setBigUint64(16, data.fEnableWindowsKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fEnableWindowsKey))), true);
  // 0x18: pointer
  if (data?.fHideTitleBar !== undefined) view.setBigUint64(24, data.fHideTitleBar === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fHideTitleBar))), true);
  // 0x20: i32
  if (data?.fInheritAutoLogon !== undefined) view.setInt32(32, Number(data.fInheritAutoLogon), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.fPromptForPassword !== undefined) view.setBigUint64(40, data.fPromptForPassword === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fPromptForPassword))), true);
  // 0x30: pointer
  if (data?.fUsingSavedCreds !== undefined) view.setBigUint64(48, data.fUsingSavedCreds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fUsingSavedCreds))), true);
  // 0x38: pointer
  if (data?.Domain !== undefined) view.setBigUint64(56, data.Domain === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Domain))), true);
  // 0x40: pointer
  if (data?.UserName !== undefined) view.setBigUint64(64, data.UserName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserName))), true);
  // 0x48: pointer
  if (data?.Password !== undefined) view.setBigUint64(72, data.Password === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Password))), true);
  // 0x50: pointer
  if (data?.fPasswordIsScPin !== undefined) view.setBigUint64(80, data.fPasswordIsScPin === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fPasswordIsScPin))), true);
  // 0x58: i32
  if (data?.fInheritInitialProgram !== undefined) view.setInt32(88, Number(data.fInheritInitialProgram), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.WorkDirectory !== undefined) view.setBigUint64(96, data.WorkDirectory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WorkDirectory))), true);
  // 0x68: pointer
  if (data?.InitialProgram !== undefined) view.setBigUint64(104, data.InitialProgram === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InitialProgram))), true);
  // 0x70: pointer
  if (data?.fMaximizeShell !== undefined) view.setBigUint64(112, data.fMaximizeShell === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fMaximizeShell))), true);
  // 0x78: u8
  if (data?.EncryptionLevel !== undefined) view.setUint8(120, Number(data.EncryptionLevel));
  // 0x79: u32
  if (data?.PerformanceFlags !== undefined) view.setUint32(121, Number(data.PerformanceFlags), true);
  // 0x7d: pad3
  // 0x80: pointer
  if (data?.ProtocolName !== undefined) view.setBigUint64(128, data.ProtocolName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProtocolName))), true);
  // 0x88: u16
  if (data?.ProtocolType !== undefined) view.setUint16(136, Number(data.ProtocolType), true);
  // 0x8a: i32
  if (data?.fInheritColorDepth !== undefined) view.setInt32(138, Number(data.fInheritColorDepth), true);
  // 0x8e: u16
  if (data?.HRes !== undefined) view.setUint16(142, Number(data.HRes), true);
  // 0x90: u16
  if (data?.VRes !== undefined) view.setUint16(144, Number(data.VRes), true);
  // 0x92: u16
  if (data?.ColorDepth !== undefined) view.setUint16(146, Number(data.ColorDepth), true);
  // 0x94: pad4
  // 0x98: pointer
  if (data?.DisplayDriverName !== undefined) view.setBigUint64(152, data.DisplayDriverName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DisplayDriverName))), true);
  // 0xa0: pointer
  if (data?.DisplayDeviceName !== undefined) view.setBigUint64(160, data.DisplayDeviceName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DisplayDeviceName))), true);
  // 0xa8: pointer
  if (data?.fMouse !== undefined) view.setBigUint64(168, data.fMouse === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fMouse))), true);
  // 0xb0: u32
  if (data?.KeyboardLayout !== undefined) view.setUint32(176, Number(data.KeyboardLayout), true);
  // 0xb4: u32
  if (data?.KeyboardType !== undefined) view.setUint32(180, Number(data.KeyboardType), true);
  // 0xb8: u32
  if (data?.KeyboardSubType !== undefined) view.setUint32(184, Number(data.KeyboardSubType), true);
  // 0xbc: u32
  if (data?.KeyboardFunctionKey !== undefined) view.setUint32(188, Number(data.KeyboardFunctionKey), true);
  // 0xc0: pointer
  if (data?.imeFileName !== undefined) view.setBigUint64(192, data.imeFileName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.imeFileName))), true);
  // 0xc8: u32
  if (data?.ActiveInputLocale !== undefined) view.setUint32(200, Number(data.ActiveInputLocale), true);
  // 0xcc: pad4
  // 0xd0: pointer
  if (data?.fNoAudioPlayback !== undefined) view.setBigUint64(208, data.fNoAudioPlayback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fNoAudioPlayback))), true);
  // 0xd8: pointer
  if (data?.fRemoteConsoleAudio !== undefined) view.setBigUint64(216, data.fRemoteConsoleAudio === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fRemoteConsoleAudio))), true);
  // 0xe0: pointer
  if (data?.AudioDriverName !== undefined) view.setBigUint64(224, data.AudioDriverName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AudioDriverName))), true);
  // 0xe8: pointer
  if (data?.ClientTimeZone !== undefined) view.setBigUint64(232, data.ClientTimeZone === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientTimeZone))), true);
  // 0xf0: pointer
  if (data?.ClientName !== undefined) view.setBigUint64(240, data.ClientName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientName))), true);
  // 0xf8: u32
  if (data?.SerialNumber !== undefined) view.setUint32(248, Number(data.SerialNumber), true);
  // 0xfc: u32
  if (data?.ClientAddressFamily !== undefined) view.setUint32(252, Number(data.ClientAddressFamily), true);
  // 0x100: pointer
  if (data?.ClientAddress !== undefined) view.setBigUint64(256, data.ClientAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientAddress))), true);
  // 0x108: pointer
  if (data?.ClientSockAddress !== undefined) view.setBigUint64(264, data.ClientSockAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientSockAddress))), true);
  // 0x110: pointer
  if (data?.ClientDirectory !== undefined) view.setBigUint64(272, data.ClientDirectory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientDirectory))), true);
  // 0x118: u32
  if (data?.ClientBuildNumber !== undefined) view.setUint32(280, Number(data.ClientBuildNumber), true);
  // 0x11c: u16
  if (data?.ClientProductId !== undefined) view.setUint16(284, Number(data.ClientProductId), true);
  // 0x11e: u16
  if (data?.OutBufCountHost !== undefined) view.setUint16(286, Number(data.OutBufCountHost), true);
  // 0x120: u16
  if (data?.OutBufCountClient !== undefined) view.setUint16(288, Number(data.OutBufCountClient), true);
  // 0x122: u16
  if (data?.OutBufLength !== undefined) view.setUint16(290, Number(data.OutBufLength), true);
  // 0x124: u32
  if (data?.ClientSessionId !== undefined) view.setUint32(292, Number(data.ClientSessionId), true);
  // 0x128: pointer
  if (data?.ClientDigProductId !== undefined) view.setBigUint64(296, data.ClientDigProductId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientDigProductId))), true);
  // 0x130: pointer
  if (data?.fDisableCpm !== undefined) view.setBigUint64(304, data.fDisableCpm === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fDisableCpm))), true);
  // 0x138: pointer
  if (data?.fDisableCdm !== undefined) view.setBigUint64(312, data.fDisableCdm === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fDisableCdm))), true);
  // 0x140: pointer
  if (data?.fDisableCcm !== undefined) view.setBigUint64(320, data.fDisableCcm === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fDisableCcm))), true);
  // 0x148: pointer
  if (data?.fDisableLPT !== undefined) view.setBigUint64(328, data.fDisableLPT === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fDisableLPT))), true);
  // 0x150: pointer
  if (data?.fDisableClip !== undefined) view.setBigUint64(336, data.fDisableClip === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fDisableClip))), true);
  // 0x158: pointer
  if (data?.fDisablePNP !== undefined) view.setBigUint64(344, data.fDisablePNP === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fDisablePNP))), true);
  return buf;
}

export class WTS_CLIENT_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get fDisableCtrlAltDel(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get fDoubleClickDetect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get fEnableWindowsKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get fHideTitleBar(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get fInheritAutoLogon(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get fPromptForPassword(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get fUsingSavedCreds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get Domain(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get UserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get Password(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get fPasswordIsScPin(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: i32
  get fInheritInitialProgram(): number {
    return this.view.getInt32(88, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  get WorkDirectory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get InitialProgram(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get fMaximizeShell(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: u8
  get EncryptionLevel(): number {
    return this.view.getUint8(120);
  }

  // 0x79: u32
  get PerformanceFlags(): number {
    return this.view.getUint32(121, true);
  }

  // 0x7d: pad3

  // 0x80: pointer
  get ProtocolName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x88: u16
  get ProtocolType(): number {
    return this.view.getUint16(136, true);
  }

  // 0x8a: i32
  get fInheritColorDepth(): number {
    return this.view.getInt32(138, true);
  }

  // 0x8e: u16
  get HRes(): number {
    return this.view.getUint16(142, true);
  }

  // 0x90: u16
  get VRes(): number {
    return this.view.getUint16(144, true);
  }

  // 0x92: u16
  get ColorDepth(): number {
    return this.view.getUint16(146, true);
  }

  // 0x94: pad4

  // 0x98: pointer
  get DisplayDriverName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(152, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa0: pointer
  get DisplayDeviceName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(160, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa8: pointer
  get fMouse(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(168, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xb0: u32
  get KeyboardLayout(): number {
    return this.view.getUint32(176, true);
  }

  // 0xb4: u32
  get KeyboardType(): number {
    return this.view.getUint32(180, true);
  }

  // 0xb8: u32
  get KeyboardSubType(): number {
    return this.view.getUint32(184, true);
  }

  // 0xbc: u32
  get KeyboardFunctionKey(): number {
    return this.view.getUint32(188, true);
  }

  // 0xc0: pointer
  get imeFileName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(192, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xc8: u32
  get ActiveInputLocale(): number {
    return this.view.getUint32(200, true);
  }

  // 0xcc: pad4

  // 0xd0: pointer
  get fNoAudioPlayback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(208, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xd8: pointer
  get fRemoteConsoleAudio(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(216, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xe0: pointer
  get AudioDriverName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(224, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xe8: pointer
  get ClientTimeZone(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(232, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xf0: pointer
  get ClientName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(240, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xf8: u32
  get SerialNumber(): number {
    return this.view.getUint32(248, true);
  }

  // 0xfc: u32
  get ClientAddressFamily(): number {
    return this.view.getUint32(252, true);
  }

  // 0x100: pointer
  get ClientAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(256, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x108: pointer
  get ClientSockAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(264, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x110: pointer
  get ClientDirectory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(272, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x118: u32
  get ClientBuildNumber(): number {
    return this.view.getUint32(280, true);
  }

  // 0x11c: u16
  get ClientProductId(): number {
    return this.view.getUint16(284, true);
  }

  // 0x11e: u16
  get OutBufCountHost(): number {
    return this.view.getUint16(286, true);
  }

  // 0x120: u16
  get OutBufCountClient(): number {
    return this.view.getUint16(288, true);
  }

  // 0x122: u16
  get OutBufLength(): number {
    return this.view.getUint16(290, true);
  }

  // 0x124: u32
  get ClientSessionId(): number {
    return this.view.getUint32(292, true);
  }

  // 0x128: pointer
  get ClientDigProductId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(296, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x130: pointer
  get fDisableCpm(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(304, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x138: pointer
  get fDisableCdm(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(312, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x140: pointer
  get fDisableCcm(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(320, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x148: pointer
  get fDisableLPT(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(328, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x150: pointer
  get fDisableClip(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(336, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x158: pointer
  get fDisablePNP(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(344, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set fDisableCtrlAltDel(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set fDoubleClickDetect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set fEnableWindowsKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set fHideTitleBar(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: i32
  set fInheritAutoLogon(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set fPromptForPassword(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set fUsingSavedCreds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set Domain(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set UserName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set Password(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set fPasswordIsScPin(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: i32
  set fInheritInitialProgram(value: number) {
    this.view.setInt32(88, value, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  set WorkDirectory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: pointer
  set InitialProgram(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set fMaximizeShell(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: u8
  set EncryptionLevel(value: number) {
    this.view.setUint8(120, value);
  }

  // 0x79: u32
  set PerformanceFlags(value: number) {
    this.view.setUint32(121, value, true);
  }

  // 0x7d: pad3

  // 0x80: pointer
  set ProtocolName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x88: u16
  set ProtocolType(value: number) {
    this.view.setUint16(136, value, true);
  }

  // 0x8a: i32
  set fInheritColorDepth(value: number) {
    this.view.setInt32(138, value, true);
  }

  // 0x8e: u16
  set HRes(value: number) {
    this.view.setUint16(142, value, true);
  }

  // 0x90: u16
  set VRes(value: number) {
    this.view.setUint16(144, value, true);
  }

  // 0x92: u16
  set ColorDepth(value: number) {
    this.view.setUint16(146, value, true);
  }

  // 0x94: pad4

  // 0x98: pointer
  set DisplayDriverName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(152, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa0: pointer
  set DisplayDeviceName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(160, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa8: pointer
  set fMouse(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(168, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xb0: u32
  set KeyboardLayout(value: number) {
    this.view.setUint32(176, value, true);
  }

  // 0xb4: u32
  set KeyboardType(value: number) {
    this.view.setUint32(180, value, true);
  }

  // 0xb8: u32
  set KeyboardSubType(value: number) {
    this.view.setUint32(184, value, true);
  }

  // 0xbc: u32
  set KeyboardFunctionKey(value: number) {
    this.view.setUint32(188, value, true);
  }

  // 0xc0: pointer
  set imeFileName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(192, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xc8: u32
  set ActiveInputLocale(value: number) {
    this.view.setUint32(200, value, true);
  }

  // 0xcc: pad4

  // 0xd0: pointer
  set fNoAudioPlayback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(208, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xd8: pointer
  set fRemoteConsoleAudio(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(216, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xe0: pointer
  set AudioDriverName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(224, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xe8: pointer
  set ClientTimeZone(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(232, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xf0: pointer
  set ClientName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(240, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xf8: u32
  set SerialNumber(value: number) {
    this.view.setUint32(248, value, true);
  }

  // 0xfc: u32
  set ClientAddressFamily(value: number) {
    this.view.setUint32(252, value, true);
  }

  // 0x100: pointer
  set ClientAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(256, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x108: pointer
  set ClientSockAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(264, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x110: pointer
  set ClientDirectory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(272, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x118: u32
  set ClientBuildNumber(value: number) {
    this.view.setUint32(280, value, true);
  }

  // 0x11c: u16
  set ClientProductId(value: number) {
    this.view.setUint16(284, value, true);
  }

  // 0x11e: u16
  set OutBufCountHost(value: number) {
    this.view.setUint16(286, value, true);
  }

  // 0x120: u16
  set OutBufCountClient(value: number) {
    this.view.setUint16(288, value, true);
  }

  // 0x122: u16
  set OutBufLength(value: number) {
    this.view.setUint16(290, value, true);
  }

  // 0x124: u32
  set ClientSessionId(value: number) {
    this.view.setUint32(292, value, true);
  }

  // 0x128: pointer
  set ClientDigProductId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(296, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x130: pointer
  set fDisableCpm(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(304, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x138: pointer
  set fDisableCdm(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(312, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x140: pointer
  set fDisableCcm(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(320, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x148: pointer
  set fDisableLPT(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(328, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x150: pointer
  set fDisableClip(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(336, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x158: pointer
  set fDisablePNP(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(344, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTS_USER_DATA (size: 24)
 */
export interface WTS_USER_DATA {
  /** array */
  WorkDirectory: Deno.PointerValue;
  /** array */
  InitialProgram: Deno.PointerValue;
  /** Windows.Win32.System.RemoteDesktop.WTS_TIME_ZONE_INFORMATION */
  UserTimeZone: Uint8Array | Deno.PointerValue;
}

export const sizeofWTS_USER_DATA = 24;

export function allocWTS_USER_DATA(data?: Partial<WTS_USER_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWTS_USER_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.WorkDirectory !== undefined) view.setBigUint64(0, data.WorkDirectory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WorkDirectory))), true);
  // 0x08: pointer
  if (data?.InitialProgram !== undefined) view.setBigUint64(8, data.InitialProgram === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InitialProgram))), true);
  // 0x10: pointer
  if (data?.UserTimeZone !== undefined) view.setBigUint64(16, data.UserTimeZone === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserTimeZone))), true);
  return buf;
}

export class WTS_USER_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get WorkDirectory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get InitialProgram(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get UserTimeZone(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set WorkDirectory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set InitialProgram(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set UserTimeZone(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTS_POLICY_DATA (size: 72)
 */
export interface WTS_POLICY_DATA {
  /** Windows.Win32.Foundation.BOOLEAN */
  fDisableEncryption: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fDisableAutoReconnect: Uint8Array | Deno.PointerValue;
  /** u32 */
  ColorDepth: number;
  /** u8 */
  MinEncryptionLevel: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  fDisableCpm: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fDisableCdm: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fDisableCcm: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fDisableLPT: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fDisableClip: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fDisablePNPRedir: Uint8Array | Deno.PointerValue;
}

export const sizeofWTS_POLICY_DATA = 72;

export function allocWTS_POLICY_DATA(data?: Partial<WTS_POLICY_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWTS_POLICY_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fDisableEncryption !== undefined) view.setBigUint64(0, data.fDisableEncryption === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fDisableEncryption))), true);
  // 0x08: pointer
  if (data?.fDisableAutoReconnect !== undefined) view.setBigUint64(8, data.fDisableAutoReconnect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fDisableAutoReconnect))), true);
  // 0x10: u32
  if (data?.ColorDepth !== undefined) view.setUint32(16, Number(data.ColorDepth), true);
  // 0x14: u8
  if (data?.MinEncryptionLevel !== undefined) view.setUint8(20, Number(data.MinEncryptionLevel));
  // 0x15: pad3
  // 0x18: pointer
  if (data?.fDisableCpm !== undefined) view.setBigUint64(24, data.fDisableCpm === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fDisableCpm))), true);
  // 0x20: pointer
  if (data?.fDisableCdm !== undefined) view.setBigUint64(32, data.fDisableCdm === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fDisableCdm))), true);
  // 0x28: pointer
  if (data?.fDisableCcm !== undefined) view.setBigUint64(40, data.fDisableCcm === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fDisableCcm))), true);
  // 0x30: pointer
  if (data?.fDisableLPT !== undefined) view.setBigUint64(48, data.fDisableLPT === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fDisableLPT))), true);
  // 0x38: pointer
  if (data?.fDisableClip !== undefined) view.setBigUint64(56, data.fDisableClip === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fDisableClip))), true);
  // 0x40: pointer
  if (data?.fDisablePNPRedir !== undefined) view.setBigUint64(64, data.fDisablePNPRedir === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fDisablePNPRedir))), true);
  return buf;
}

export class WTS_POLICY_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get fDisableEncryption(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get fDisableAutoReconnect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get ColorDepth(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u8
  get MinEncryptionLevel(): number {
    return this.view.getUint8(20);
  }

  // 0x15: pad3

  // 0x18: pointer
  get fDisableCpm(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get fDisableCdm(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get fDisableCcm(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get fDisableLPT(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get fDisableClip(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get fDisablePNPRedir(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set fDisableEncryption(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set fDisableAutoReconnect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set ColorDepth(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u8
  set MinEncryptionLevel(value: number) {
    this.view.setUint8(20, value);
  }

  // 0x15: pad3

  // 0x18: pointer
  set fDisableCpm(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set fDisableCdm(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set fDisableCcm(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set fDisableLPT(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set fDisableClip(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set fDisablePNPRedir(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTS_PROTOCOL_CACHE (size: 8)
 */
export interface WTS_PROTOCOL_CACHE {
  /** u32 */
  CacheReads: number;
  /** u32 */
  CacheHits: number;
}

export const sizeofWTS_PROTOCOL_CACHE = 8;

export function allocWTS_PROTOCOL_CACHE(data?: Partial<WTS_PROTOCOL_CACHE>): Uint8Array {
  const buf = new Uint8Array(sizeofWTS_PROTOCOL_CACHE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CacheReads !== undefined) view.setUint32(0, Number(data.CacheReads), true);
  // 0x04: u32
  if (data?.CacheHits !== undefined) view.setUint32(4, Number(data.CacheHits), true);
  return buf;
}

export class WTS_PROTOCOL_CACHEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get CacheReads(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get CacheHits(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set CacheReads(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set CacheHits(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTS_CACHE_STATS_UN (size: 24)
 */
export interface WTS_CACHE_STATS_UN {
  /** array */
  ProtocolCache: Deno.PointerValue;
  /** u32 */
  TShareCacheStats: number;
  /** array */
  Reserved: Deno.PointerValue;
}

export const sizeofWTS_CACHE_STATS_UN = 24;

export function allocWTS_CACHE_STATS_UN(data?: Partial<WTS_CACHE_STATS_UN>): Uint8Array {
  const buf = new Uint8Array(sizeofWTS_CACHE_STATS_UN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ProtocolCache !== undefined) view.setBigUint64(0, data.ProtocolCache === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProtocolCache))), true);
  // 0x08: u32
  if (data?.TShareCacheStats !== undefined) view.setUint32(8, Number(data.TShareCacheStats), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(16, data.Reserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved))), true);
  return buf;
}

export class WTS_CACHE_STATS_UNView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ProtocolCache(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get TShareCacheStats(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Reserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ProtocolCache(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set TShareCacheStats(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTS_CACHE_STATS (size: 24)
 */
export interface WTS_CACHE_STATS {
  /** u32 */
  Specific: number;
  /** Windows.Win32.System.RemoteDesktop.WTS_CACHE_STATS_UN */
  Data: Uint8Array | Deno.PointerValue;
  /** u16 */
  ProtocolType: number;
  /** u16 */
  Length: number;
}

export const sizeofWTS_CACHE_STATS = 24;

export function allocWTS_CACHE_STATS(data?: Partial<WTS_CACHE_STATS>): Uint8Array {
  const buf = new Uint8Array(sizeofWTS_CACHE_STATS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Specific !== undefined) view.setUint32(0, Number(data.Specific), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Data !== undefined) view.setBigUint64(8, data.Data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Data))), true);
  // 0x10: u16
  if (data?.ProtocolType !== undefined) view.setUint16(16, Number(data.ProtocolType), true);
  // 0x12: u16
  if (data?.Length !== undefined) view.setUint16(18, Number(data.Length), true);
  // 0x14: pad4
  return buf;
}

export class WTS_CACHE_STATSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Specific(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u16
  get ProtocolType(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: u16
  get Length(): number {
    return this.view.getUint16(18, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set Specific(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u16
  set ProtocolType(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: u16
  set Length(value: number) {
    this.view.setUint16(18, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.System.RemoteDesktop.WTS_PROTOCOL_COUNTERS (size: 72)
 */
export interface WTS_PROTOCOL_COUNTERS {
  /** u32 */
  WdBytes: number;
  /** u32 */
  WdFrames: number;
  /** u32 */
  WaitForOutBuf: number;
  /** u32 */
  Frames: number;
  /** u32 */
  Bytes: number;
  /** u32 */
  CompressedBytes: number;
  /** u32 */
  CompressFlushes: number;
  /** u32 */
  Errors: number;
  /** u32 */
  Timeouts: number;
  /** u32 */
  AsyncFramingError: number;
  /** u32 */
  AsyncOverrunError: number;
  /** u32 */
  AsyncOverflowError: number;
  /** u32 */
  AsyncParityError: number;
  /** u32 */
  TdErrors: number;
  /** u16 */
  ProtocolType: number;
  /** u16 */
  Length: number;
  /** u16 */
  Specific: number;
  /** array */
  Reserved: Deno.PointerValue;
}

export const sizeofWTS_PROTOCOL_COUNTERS = 72;

export function allocWTS_PROTOCOL_COUNTERS(data?: Partial<WTS_PROTOCOL_COUNTERS>): Uint8Array {
  const buf = new Uint8Array(sizeofWTS_PROTOCOL_COUNTERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.WdBytes !== undefined) view.setUint32(0, Number(data.WdBytes), true);
  // 0x04: u32
  if (data?.WdFrames !== undefined) view.setUint32(4, Number(data.WdFrames), true);
  // 0x08: u32
  if (data?.WaitForOutBuf !== undefined) view.setUint32(8, Number(data.WaitForOutBuf), true);
  // 0x0c: u32
  if (data?.Frames !== undefined) view.setUint32(12, Number(data.Frames), true);
  // 0x10: u32
  if (data?.Bytes !== undefined) view.setUint32(16, Number(data.Bytes), true);
  // 0x14: u32
  if (data?.CompressedBytes !== undefined) view.setUint32(20, Number(data.CompressedBytes), true);
  // 0x18: u32
  if (data?.CompressFlushes !== undefined) view.setUint32(24, Number(data.CompressFlushes), true);
  // 0x1c: u32
  if (data?.Errors !== undefined) view.setUint32(28, Number(data.Errors), true);
  // 0x20: u32
  if (data?.Timeouts !== undefined) view.setUint32(32, Number(data.Timeouts), true);
  // 0x24: u32
  if (data?.AsyncFramingError !== undefined) view.setUint32(36, Number(data.AsyncFramingError), true);
  // 0x28: u32
  if (data?.AsyncOverrunError !== undefined) view.setUint32(40, Number(data.AsyncOverrunError), true);
  // 0x2c: u32
  if (data?.AsyncOverflowError !== undefined) view.setUint32(44, Number(data.AsyncOverflowError), true);
  // 0x30: u32
  if (data?.AsyncParityError !== undefined) view.setUint32(48, Number(data.AsyncParityError), true);
  // 0x34: u32
  if (data?.TdErrors !== undefined) view.setUint32(52, Number(data.TdErrors), true);
  // 0x38: u16
  if (data?.ProtocolType !== undefined) view.setUint16(56, Number(data.ProtocolType), true);
  // 0x3a: u16
  if (data?.Length !== undefined) view.setUint16(58, Number(data.Length), true);
  // 0x3c: u16
  if (data?.Specific !== undefined) view.setUint16(60, Number(data.Specific), true);
  // 0x3e: pad2
  // 0x40: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(64, data.Reserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved))), true);
  return buf;
}

export class WTS_PROTOCOL_COUNTERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get WdBytes(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get WdFrames(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get WaitForOutBuf(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Frames(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Bytes(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get CompressedBytes(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get CompressFlushes(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get Errors(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get Timeouts(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get AsyncFramingError(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get AsyncOverrunError(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get AsyncOverflowError(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get AsyncParityError(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get TdErrors(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u16
  get ProtocolType(): number {
    return this.view.getUint16(56, true);
  }

  // 0x3a: u16
  get Length(): number {
    return this.view.getUint16(58, true);
  }

  // 0x3c: u16
  get Specific(): number {
    return this.view.getUint16(60, true);
  }

  // 0x3e: pad2

  // 0x40: pointer
  get Reserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set WdBytes(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set WdFrames(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set WaitForOutBuf(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Frames(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Bytes(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set CompressedBytes(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set CompressFlushes(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set Errors(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set Timeouts(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set AsyncFramingError(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set AsyncOverrunError(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set AsyncOverflowError(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set AsyncParityError(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set TdErrors(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u16
  set ProtocolType(value: number) {
    this.view.setUint16(56, value, true);
  }

  // 0x3a: u16
  set Length(value: number) {
    this.view.setUint16(58, value, true);
  }

  // 0x3c: u16
  set Specific(value: number) {
    this.view.setUint16(60, value, true);
  }

  // 0x3e: pad2

  // 0x40: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTS_PROTOCOL_STATUS (size: 40)
 */
export interface WTS_PROTOCOL_STATUS {
  /** Windows.Win32.System.RemoteDesktop.WTS_PROTOCOL_COUNTERS */
  Output: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.RemoteDesktop.WTS_PROTOCOL_COUNTERS */
  Input: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.RemoteDesktop.WTS_CACHE_STATS */
  Cache: Uint8Array | Deno.PointerValue;
  /** u32 */
  AsyncSignal: number;
  /** u32 */
  AsyncSignalMask: number;
  /** array */
  Counters: Deno.PointerValue;
}

export const sizeofWTS_PROTOCOL_STATUS = 40;

export function allocWTS_PROTOCOL_STATUS(data?: Partial<WTS_PROTOCOL_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofWTS_PROTOCOL_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Output))), true);
  // 0x08: pointer
  if (data?.Input !== undefined) view.setBigUint64(8, data.Input === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Input))), true);
  // 0x10: pointer
  if (data?.Cache !== undefined) view.setBigUint64(16, data.Cache === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Cache))), true);
  // 0x18: u32
  if (data?.AsyncSignal !== undefined) view.setUint32(24, Number(data.AsyncSignal), true);
  // 0x1c: u32
  if (data?.AsyncSignalMask !== undefined) view.setUint32(28, Number(data.AsyncSignalMask), true);
  // 0x20: pointer
  if (data?.Counters !== undefined) view.setBigUint64(32, data.Counters === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Counters))), true);
  return buf;
}

export class WTS_PROTOCOL_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Output(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Input(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Cache(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get AsyncSignal(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get AsyncSignalMask(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get Counters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Output(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Input(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Cache(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set AsyncSignal(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set AsyncSignalMask(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set Counters(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTS_DISPLAY_IOCTL (size: 16)
 */
export interface WTS_DISPLAY_IOCTL {
  /** array */
  pDisplayIOCtlData: Deno.PointerValue;
  /** u32 */
  cbDisplayIOCtlData: number;
}

export const sizeofWTS_DISPLAY_IOCTL = 16;

export function allocWTS_DISPLAY_IOCTL(data?: Partial<WTS_DISPLAY_IOCTL>): Uint8Array {
  const buf = new Uint8Array(sizeofWTS_DISPLAY_IOCTL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pDisplayIOCtlData !== undefined) view.setBigUint64(0, data.pDisplayIOCtlData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pDisplayIOCtlData))), true);
  // 0x08: u32
  if (data?.cbDisplayIOCtlData !== undefined) view.setUint32(8, Number(data.cbDisplayIOCtlData), true);
  // 0x0c: pad4
  return buf;
}

export class WTS_DISPLAY_IOCTLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pDisplayIOCtlData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get cbDisplayIOCtlData(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set pDisplayIOCtlData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set cbDisplayIOCtlData(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.RemoteDesktop.WTS_PROPERTY_VALUE (size: 16)
 */
export interface WTS_PROPERTY_VALUE {
  /** u16 */
  Type: number;
  /** _u_e__Union */
  u: Uint8Array | Deno.PointerValue;
}

export const sizeofWTS_PROPERTY_VALUE = 16;

export function allocWTS_PROPERTY_VALUE(data?: Partial<WTS_PROPERTY_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofWTS_PROPERTY_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Type !== undefined) view.setUint16(0, Number(data.Type), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.u))), true);
  return buf;
}

export class WTS_PROPERTY_VALUEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Type(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get u(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set Type(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set u(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTS_LICENSE_CAPABILITIES (size: 32)
 */
export interface WTS_LICENSE_CAPABILITIES {
  /** u32 */
  KeyExchangeAlg: number;
  /** u32 */
  ProtocolVer: number;
  /** Windows.Win32.Foundation.BOOL */
  fAuthenticateServer: boolean;
  /** Windows.Win32.System.RemoteDesktop.WTS_CERT_TYPE */
  CertType: WTS_CERT_TYPE;
  /** u32 */
  cbClientName: number;
  /** array */
  rgbClientName: Deno.PointerValue;
}

export const sizeofWTS_LICENSE_CAPABILITIES = 32;

export function allocWTS_LICENSE_CAPABILITIES(data?: Partial<WTS_LICENSE_CAPABILITIES>): Uint8Array {
  const buf = new Uint8Array(sizeofWTS_LICENSE_CAPABILITIES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.KeyExchangeAlg !== undefined) view.setUint32(0, Number(data.KeyExchangeAlg), true);
  // 0x04: u32
  if (data?.ProtocolVer !== undefined) view.setUint32(4, Number(data.ProtocolVer), true);
  // 0x08: i32
  if (data?.fAuthenticateServer !== undefined) view.setInt32(8, Number(data.fAuthenticateServer), true);
  // 0x0c: i32
  if (data?.CertType !== undefined) view.setInt32(12, Number(data.CertType), true);
  // 0x10: u32
  if (data?.cbClientName !== undefined) view.setUint32(16, Number(data.cbClientName), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.rgbClientName !== undefined) view.setBigUint64(24, data.rgbClientName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgbClientName))), true);
  return buf;
}

export class WTS_LICENSE_CAPABILITIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get KeyExchangeAlg(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ProtocolVer(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get fAuthenticateServer(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get CertType(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get cbClientName(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get rgbClientName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set KeyExchangeAlg(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ProtocolVer(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set fAuthenticateServer(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set CertType(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set cbClientName(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set rgbClientName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WRDS_LISTENER_SETTINGS_1 (size: 16)
 */
export interface WRDS_LISTENER_SETTINGS_1 {
  /** u32 */
  MaxProtocolListenerConnectionCount: number;
  /** u32 */
  SecurityDescriptorSize: number;
  /** ptr */
  pSecurityDescriptor: Deno.PointerValue | Uint8Array;
}

export const sizeofWRDS_LISTENER_SETTINGS_1 = 16;

export function allocWRDS_LISTENER_SETTINGS_1(data?: Partial<WRDS_LISTENER_SETTINGS_1>): Uint8Array {
  const buf = new Uint8Array(sizeofWRDS_LISTENER_SETTINGS_1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MaxProtocolListenerConnectionCount !== undefined) view.setUint32(0, Number(data.MaxProtocolListenerConnectionCount), true);
  // 0x04: u32
  if (data?.SecurityDescriptorSize !== undefined) view.setUint32(4, Number(data.SecurityDescriptorSize), true);
  // 0x08: pointer
  if (data?.pSecurityDescriptor !== undefined) view.setBigUint64(8, data.pSecurityDescriptor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pSecurityDescriptor))), true);
  return buf;
}

export class WRDS_LISTENER_SETTINGS_1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MaxProtocolListenerConnectionCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SecurityDescriptorSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pSecurityDescriptor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set MaxProtocolListenerConnectionCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SecurityDescriptorSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pSecurityDescriptor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WRDS_LISTENER_SETTING (size: 8)
 */
export interface WRDS_LISTENER_SETTING {
  /** Windows.Win32.System.RemoteDesktop.WRDS_LISTENER_SETTINGS_1 */
  WRdsListenerSettings1: Uint8Array | Deno.PointerValue;
}

export const sizeofWRDS_LISTENER_SETTING = 8;

export function allocWRDS_LISTENER_SETTING(data?: Partial<WRDS_LISTENER_SETTING>): Uint8Array {
  const buf = new Uint8Array(sizeofWRDS_LISTENER_SETTING);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.WRdsListenerSettings1 !== undefined) view.setBigUint64(0, data.WRdsListenerSettings1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WRdsListenerSettings1))), true);
  return buf;
}

export class WRDS_LISTENER_SETTINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get WRdsListenerSettings1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set WRdsListenerSettings1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WRDS_LISTENER_SETTINGS (size: 16)
 */
export interface WRDS_LISTENER_SETTINGS {
  /** Windows.Win32.System.RemoteDesktop.WRDS_LISTENER_SETTING_LEVEL */
  WRdsListenerSettingLevel: WRDS_LISTENER_SETTING_LEVEL;
  /** Windows.Win32.System.RemoteDesktop.WRDS_LISTENER_SETTING */
  WRdsListenerSetting: Uint8Array | Deno.PointerValue;
}

export const sizeofWRDS_LISTENER_SETTINGS = 16;

export function allocWRDS_LISTENER_SETTINGS(data?: Partial<WRDS_LISTENER_SETTINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofWRDS_LISTENER_SETTINGS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.WRdsListenerSettingLevel !== undefined) view.setInt32(0, Number(data.WRdsListenerSettingLevel), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.WRdsListenerSetting !== undefined) view.setBigUint64(8, data.WRdsListenerSetting === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WRdsListenerSetting))), true);
  return buf;
}

export class WRDS_LISTENER_SETTINGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get WRdsListenerSettingLevel(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get WRdsListenerSetting(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set WRdsListenerSettingLevel(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set WRdsListenerSetting(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WRDS_CONNECTION_SETTINGS_1 (size: 416)
 */
export interface WRDS_CONNECTION_SETTINGS_1 {
  /** Windows.Win32.Foundation.BOOLEAN */
  fInheritInitialProgram: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fInheritColorDepth: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fHideTitleBar: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fInheritAutoLogon: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fMaximizeShell: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fDisablePNP: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fPasswordIsScPin: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fPromptForPassword: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fDisableCpm: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fDisableCdm: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fDisableCcm: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fDisableLPT: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fDisableClip: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fResetBroken: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fDisableEncryption: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fDisableAutoReconnect: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fDisableCtrlAltDel: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fDoubleClickDetect: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fEnableWindowsKey: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fUsingSavedCreds: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fMouse: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fNoAudioPlayback: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  fRemoteConsoleAudio: Uint8Array | Deno.PointerValue;
  /** u8 */
  EncryptionLevel: number;
  /** u16 */
  ColorDepth: number;
  /** u16 */
  ProtocolType: number;
  /** u16 */
  HRes: number;
  /** u16 */
  VRes: number;
  /** u16 */
  ClientProductId: number;
  /** u16 */
  OutBufCountHost: number;
  /** u16 */
  OutBufCountClient: number;
  /** u16 */
  OutBufLength: number;
  /** u32 */
  KeyboardLayout: number;
  /** u32 */
  MaxConnectionTime: number;
  /** u32 */
  MaxDisconnectionTime: number;
  /** u32 */
  MaxIdleTime: number;
  /** u32 */
  PerformanceFlags: number;
  /** u32 */
  KeyboardType: number;
  /** u32 */
  KeyboardSubType: number;
  /** u32 */
  KeyboardFunctionKey: number;
  /** u32 */
  ActiveInputLocale: number;
  /** u32 */
  SerialNumber: number;
  /** u32 */
  ClientAddressFamily: number;
  /** u32 */
  ClientBuildNumber: number;
  /** u32 */
  ClientSessionId: number;
  /** array */
  WorkDirectory: Deno.PointerValue;
  /** array */
  InitialProgram: Deno.PointerValue;
  /** array */
  UserName: Deno.PointerValue;
  /** array */
  Domain: Deno.PointerValue;
  /** array */
  Password: Deno.PointerValue;
  /** array */
  ProtocolName: Deno.PointerValue;
  /** array */
  DisplayDriverName: Deno.PointerValue;
  /** array */
  DisplayDeviceName: Deno.PointerValue;
  /** array */
  imeFileName: Deno.PointerValue;
  /** array */
  AudioDriverName: Deno.PointerValue;
  /** array */
  ClientName: Deno.PointerValue;
  /** array */
  ClientAddress: Deno.PointerValue;
  /** array */
  ClientDirectory: Deno.PointerValue;
  /** array */
  ClientDigProductId: Deno.PointerValue;
  /** Windows.Win32.System.RemoteDesktop.WTS_SOCKADDR */
  ClientSockAddress: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.RemoteDesktop.WTS_TIME_ZONE_INFORMATION */
  ClientTimeZone: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.RemoteDesktop.WRDS_LISTENER_SETTINGS */
  WRdsListenerSettings: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  EventLogActivityId: Uint8Array | Deno.PointerValue;
  /** u32 */
  ContextSize: number;
  /** ptr */
  ContextData: Deno.PointerValue | Uint8Array;
}

export const sizeofWRDS_CONNECTION_SETTINGS_1 = 416;

export function allocWRDS_CONNECTION_SETTINGS_1(data?: Partial<WRDS_CONNECTION_SETTINGS_1>): Uint8Array {
  const buf = new Uint8Array(sizeofWRDS_CONNECTION_SETTINGS_1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fInheritInitialProgram !== undefined) view.setBigUint64(0, data.fInheritInitialProgram === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fInheritInitialProgram))), true);
  // 0x08: pointer
  if (data?.fInheritColorDepth !== undefined) view.setBigUint64(8, data.fInheritColorDepth === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fInheritColorDepth))), true);
  // 0x10: pointer
  if (data?.fHideTitleBar !== undefined) view.setBigUint64(16, data.fHideTitleBar === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fHideTitleBar))), true);
  // 0x18: pointer
  if (data?.fInheritAutoLogon !== undefined) view.setBigUint64(24, data.fInheritAutoLogon === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fInheritAutoLogon))), true);
  // 0x20: pointer
  if (data?.fMaximizeShell !== undefined) view.setBigUint64(32, data.fMaximizeShell === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fMaximizeShell))), true);
  // 0x28: pointer
  if (data?.fDisablePNP !== undefined) view.setBigUint64(40, data.fDisablePNP === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fDisablePNP))), true);
  // 0x30: pointer
  if (data?.fPasswordIsScPin !== undefined) view.setBigUint64(48, data.fPasswordIsScPin === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fPasswordIsScPin))), true);
  // 0x38: pointer
  if (data?.fPromptForPassword !== undefined) view.setBigUint64(56, data.fPromptForPassword === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fPromptForPassword))), true);
  // 0x40: pointer
  if (data?.fDisableCpm !== undefined) view.setBigUint64(64, data.fDisableCpm === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fDisableCpm))), true);
  // 0x48: pointer
  if (data?.fDisableCdm !== undefined) view.setBigUint64(72, data.fDisableCdm === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fDisableCdm))), true);
  // 0x50: pointer
  if (data?.fDisableCcm !== undefined) view.setBigUint64(80, data.fDisableCcm === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fDisableCcm))), true);
  // 0x58: pointer
  if (data?.fDisableLPT !== undefined) view.setBigUint64(88, data.fDisableLPT === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fDisableLPT))), true);
  // 0x60: pointer
  if (data?.fDisableClip !== undefined) view.setBigUint64(96, data.fDisableClip === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fDisableClip))), true);
  // 0x68: pointer
  if (data?.fResetBroken !== undefined) view.setBigUint64(104, data.fResetBroken === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fResetBroken))), true);
  // 0x70: pointer
  if (data?.fDisableEncryption !== undefined) view.setBigUint64(112, data.fDisableEncryption === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fDisableEncryption))), true);
  // 0x78: pointer
  if (data?.fDisableAutoReconnect !== undefined) view.setBigUint64(120, data.fDisableAutoReconnect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fDisableAutoReconnect))), true);
  // 0x80: pointer
  if (data?.fDisableCtrlAltDel !== undefined) view.setBigUint64(128, data.fDisableCtrlAltDel === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fDisableCtrlAltDel))), true);
  // 0x88: pointer
  if (data?.fDoubleClickDetect !== undefined) view.setBigUint64(136, data.fDoubleClickDetect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fDoubleClickDetect))), true);
  // 0x90: pointer
  if (data?.fEnableWindowsKey !== undefined) view.setBigUint64(144, data.fEnableWindowsKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fEnableWindowsKey))), true);
  // 0x98: pointer
  if (data?.fUsingSavedCreds !== undefined) view.setBigUint64(152, data.fUsingSavedCreds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fUsingSavedCreds))), true);
  // 0xa0: pointer
  if (data?.fMouse !== undefined) view.setBigUint64(160, data.fMouse === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fMouse))), true);
  // 0xa8: pointer
  if (data?.fNoAudioPlayback !== undefined) view.setBigUint64(168, data.fNoAudioPlayback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fNoAudioPlayback))), true);
  // 0xb0: pointer
  if (data?.fRemoteConsoleAudio !== undefined) view.setBigUint64(176, data.fRemoteConsoleAudio === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fRemoteConsoleAudio))), true);
  // 0xb8: u8
  if (data?.EncryptionLevel !== undefined) view.setUint8(184, Number(data.EncryptionLevel));
  // 0xb9: u16
  if (data?.ColorDepth !== undefined) view.setUint16(185, Number(data.ColorDepth), true);
  // 0xbb: u16
  if (data?.ProtocolType !== undefined) view.setUint16(187, Number(data.ProtocolType), true);
  // 0xbd: u16
  if (data?.HRes !== undefined) view.setUint16(189, Number(data.HRes), true);
  // 0xbf: u16
  if (data?.VRes !== undefined) view.setUint16(191, Number(data.VRes), true);
  // 0xc1: u16
  if (data?.ClientProductId !== undefined) view.setUint16(193, Number(data.ClientProductId), true);
  // 0xc3: u16
  if (data?.OutBufCountHost !== undefined) view.setUint16(195, Number(data.OutBufCountHost), true);
  // 0xc5: u16
  if (data?.OutBufCountClient !== undefined) view.setUint16(197, Number(data.OutBufCountClient), true);
  // 0xc7: u16
  if (data?.OutBufLength !== undefined) view.setUint16(199, Number(data.OutBufLength), true);
  // 0xc9: u32
  if (data?.KeyboardLayout !== undefined) view.setUint32(201, Number(data.KeyboardLayout), true);
  // 0xcd: u32
  if (data?.MaxConnectionTime !== undefined) view.setUint32(205, Number(data.MaxConnectionTime), true);
  // 0xd1: u32
  if (data?.MaxDisconnectionTime !== undefined) view.setUint32(209, Number(data.MaxDisconnectionTime), true);
  // 0xd5: u32
  if (data?.MaxIdleTime !== undefined) view.setUint32(213, Number(data.MaxIdleTime), true);
  // 0xd9: u32
  if (data?.PerformanceFlags !== undefined) view.setUint32(217, Number(data.PerformanceFlags), true);
  // 0xdd: u32
  if (data?.KeyboardType !== undefined) view.setUint32(221, Number(data.KeyboardType), true);
  // 0xe1: u32
  if (data?.KeyboardSubType !== undefined) view.setUint32(225, Number(data.KeyboardSubType), true);
  // 0xe5: u32
  if (data?.KeyboardFunctionKey !== undefined) view.setUint32(229, Number(data.KeyboardFunctionKey), true);
  // 0xe9: u32
  if (data?.ActiveInputLocale !== undefined) view.setUint32(233, Number(data.ActiveInputLocale), true);
  // 0xed: u32
  if (data?.SerialNumber !== undefined) view.setUint32(237, Number(data.SerialNumber), true);
  // 0xf1: u32
  if (data?.ClientAddressFamily !== undefined) view.setUint32(241, Number(data.ClientAddressFamily), true);
  // 0xf5: u32
  if (data?.ClientBuildNumber !== undefined) view.setUint32(245, Number(data.ClientBuildNumber), true);
  // 0xf9: u32
  if (data?.ClientSessionId !== undefined) view.setUint32(249, Number(data.ClientSessionId), true);
  // 0xfd: pad3
  // 0x100: pointer
  if (data?.WorkDirectory !== undefined) view.setBigUint64(256, data.WorkDirectory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WorkDirectory))), true);
  // 0x108: pointer
  if (data?.InitialProgram !== undefined) view.setBigUint64(264, data.InitialProgram === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InitialProgram))), true);
  // 0x110: pointer
  if (data?.UserName !== undefined) view.setBigUint64(272, data.UserName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserName))), true);
  // 0x118: pointer
  if (data?.Domain !== undefined) view.setBigUint64(280, data.Domain === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Domain))), true);
  // 0x120: pointer
  if (data?.Password !== undefined) view.setBigUint64(288, data.Password === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Password))), true);
  // 0x128: pointer
  if (data?.ProtocolName !== undefined) view.setBigUint64(296, data.ProtocolName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProtocolName))), true);
  // 0x130: pointer
  if (data?.DisplayDriverName !== undefined) view.setBigUint64(304, data.DisplayDriverName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DisplayDriverName))), true);
  // 0x138: pointer
  if (data?.DisplayDeviceName !== undefined) view.setBigUint64(312, data.DisplayDeviceName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DisplayDeviceName))), true);
  // 0x140: pointer
  if (data?.imeFileName !== undefined) view.setBigUint64(320, data.imeFileName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.imeFileName))), true);
  // 0x148: pointer
  if (data?.AudioDriverName !== undefined) view.setBigUint64(328, data.AudioDriverName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AudioDriverName))), true);
  // 0x150: pointer
  if (data?.ClientName !== undefined) view.setBigUint64(336, data.ClientName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientName))), true);
  // 0x158: pointer
  if (data?.ClientAddress !== undefined) view.setBigUint64(344, data.ClientAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientAddress))), true);
  // 0x160: pointer
  if (data?.ClientDirectory !== undefined) view.setBigUint64(352, data.ClientDirectory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientDirectory))), true);
  // 0x168: pointer
  if (data?.ClientDigProductId !== undefined) view.setBigUint64(360, data.ClientDigProductId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientDigProductId))), true);
  // 0x170: pointer
  if (data?.ClientSockAddress !== undefined) view.setBigUint64(368, data.ClientSockAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientSockAddress))), true);
  // 0x178: pointer
  if (data?.ClientTimeZone !== undefined) view.setBigUint64(376, data.ClientTimeZone === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientTimeZone))), true);
  // 0x180: pointer
  if (data?.WRdsListenerSettings !== undefined) view.setBigUint64(384, data.WRdsListenerSettings === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WRdsListenerSettings))), true);
  // 0x188: pointer
  if (data?.EventLogActivityId !== undefined) view.setBigUint64(392, data.EventLogActivityId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EventLogActivityId))), true);
  // 0x190: u32
  if (data?.ContextSize !== undefined) view.setUint32(400, Number(data.ContextSize), true);
  // 0x194: pad4
  // 0x198: pointer
  if (data?.ContextData !== undefined) view.setBigUint64(408, data.ContextData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ContextData))), true);
  return buf;
}

export class WRDS_CONNECTION_SETTINGS_1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get fInheritInitialProgram(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get fInheritColorDepth(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get fHideTitleBar(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get fInheritAutoLogon(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get fMaximizeShell(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get fDisablePNP(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get fPasswordIsScPin(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get fPromptForPassword(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get fDisableCpm(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get fDisableCdm(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get fDisableCcm(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get fDisableLPT(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get fDisableClip(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get fResetBroken(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get fDisableEncryption(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get fDisableAutoReconnect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: pointer
  get fDisableCtrlAltDel(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x88: pointer
  get fDoubleClickDetect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(136, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x90: pointer
  get fEnableWindowsKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(144, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x98: pointer
  get fUsingSavedCreds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(152, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa0: pointer
  get fMouse(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(160, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa8: pointer
  get fNoAudioPlayback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(168, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xb0: pointer
  get fRemoteConsoleAudio(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(176, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xb8: u8
  get EncryptionLevel(): number {
    return this.view.getUint8(184);
  }

  // 0xb9: u16
  get ColorDepth(): number {
    return this.view.getUint16(185, true);
  }

  // 0xbb: u16
  get ProtocolType(): number {
    return this.view.getUint16(187, true);
  }

  // 0xbd: u16
  get HRes(): number {
    return this.view.getUint16(189, true);
  }

  // 0xbf: u16
  get VRes(): number {
    return this.view.getUint16(191, true);
  }

  // 0xc1: u16
  get ClientProductId(): number {
    return this.view.getUint16(193, true);
  }

  // 0xc3: u16
  get OutBufCountHost(): number {
    return this.view.getUint16(195, true);
  }

  // 0xc5: u16
  get OutBufCountClient(): number {
    return this.view.getUint16(197, true);
  }

  // 0xc7: u16
  get OutBufLength(): number {
    return this.view.getUint16(199, true);
  }

  // 0xc9: u32
  get KeyboardLayout(): number {
    return this.view.getUint32(201, true);
  }

  // 0xcd: u32
  get MaxConnectionTime(): number {
    return this.view.getUint32(205, true);
  }

  // 0xd1: u32
  get MaxDisconnectionTime(): number {
    return this.view.getUint32(209, true);
  }

  // 0xd5: u32
  get MaxIdleTime(): number {
    return this.view.getUint32(213, true);
  }

  // 0xd9: u32
  get PerformanceFlags(): number {
    return this.view.getUint32(217, true);
  }

  // 0xdd: u32
  get KeyboardType(): number {
    return this.view.getUint32(221, true);
  }

  // 0xe1: u32
  get KeyboardSubType(): number {
    return this.view.getUint32(225, true);
  }

  // 0xe5: u32
  get KeyboardFunctionKey(): number {
    return this.view.getUint32(229, true);
  }

  // 0xe9: u32
  get ActiveInputLocale(): number {
    return this.view.getUint32(233, true);
  }

  // 0xed: u32
  get SerialNumber(): number {
    return this.view.getUint32(237, true);
  }

  // 0xf1: u32
  get ClientAddressFamily(): number {
    return this.view.getUint32(241, true);
  }

  // 0xf5: u32
  get ClientBuildNumber(): number {
    return this.view.getUint32(245, true);
  }

  // 0xf9: u32
  get ClientSessionId(): number {
    return this.view.getUint32(249, true);
  }

  // 0xfd: pad3

  // 0x100: pointer
  get WorkDirectory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(256, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x108: pointer
  get InitialProgram(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(264, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x110: pointer
  get UserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(272, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x118: pointer
  get Domain(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(280, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x120: pointer
  get Password(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(288, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x128: pointer
  get ProtocolName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(296, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x130: pointer
  get DisplayDriverName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(304, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x138: pointer
  get DisplayDeviceName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(312, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x140: pointer
  get imeFileName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(320, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x148: pointer
  get AudioDriverName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(328, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x150: pointer
  get ClientName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(336, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x158: pointer
  get ClientAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(344, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x160: pointer
  get ClientDirectory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(352, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x168: pointer
  get ClientDigProductId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(360, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x170: pointer
  get ClientSockAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(368, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x178: pointer
  get ClientTimeZone(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(376, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x180: pointer
  get WRdsListenerSettings(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(384, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x188: pointer
  get EventLogActivityId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(392, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x190: u32
  get ContextSize(): number {
    return this.view.getUint32(400, true);
  }

  // 0x194: pad4

  // 0x198: pointer
  get ContextData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(408, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set fInheritInitialProgram(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set fInheritColorDepth(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set fHideTitleBar(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set fInheritAutoLogon(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set fMaximizeShell(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set fDisablePNP(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set fPasswordIsScPin(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set fPromptForPassword(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set fDisableCpm(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set fDisableCdm(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set fDisableCcm(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set fDisableLPT(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set fDisableClip(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: pointer
  set fResetBroken(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set fDisableEncryption(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set fDisableAutoReconnect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: pointer
  set fDisableCtrlAltDel(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x88: pointer
  set fDoubleClickDetect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(136, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x90: pointer
  set fEnableWindowsKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(144, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x98: pointer
  set fUsingSavedCreds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(152, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa0: pointer
  set fMouse(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(160, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa8: pointer
  set fNoAudioPlayback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(168, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xb0: pointer
  set fRemoteConsoleAudio(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(176, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xb8: u8
  set EncryptionLevel(value: number) {
    this.view.setUint8(184, value);
  }

  // 0xb9: u16
  set ColorDepth(value: number) {
    this.view.setUint16(185, value, true);
  }

  // 0xbb: u16
  set ProtocolType(value: number) {
    this.view.setUint16(187, value, true);
  }

  // 0xbd: u16
  set HRes(value: number) {
    this.view.setUint16(189, value, true);
  }

  // 0xbf: u16
  set VRes(value: number) {
    this.view.setUint16(191, value, true);
  }

  // 0xc1: u16
  set ClientProductId(value: number) {
    this.view.setUint16(193, value, true);
  }

  // 0xc3: u16
  set OutBufCountHost(value: number) {
    this.view.setUint16(195, value, true);
  }

  // 0xc5: u16
  set OutBufCountClient(value: number) {
    this.view.setUint16(197, value, true);
  }

  // 0xc7: u16
  set OutBufLength(value: number) {
    this.view.setUint16(199, value, true);
  }

  // 0xc9: u32
  set KeyboardLayout(value: number) {
    this.view.setUint32(201, value, true);
  }

  // 0xcd: u32
  set MaxConnectionTime(value: number) {
    this.view.setUint32(205, value, true);
  }

  // 0xd1: u32
  set MaxDisconnectionTime(value: number) {
    this.view.setUint32(209, value, true);
  }

  // 0xd5: u32
  set MaxIdleTime(value: number) {
    this.view.setUint32(213, value, true);
  }

  // 0xd9: u32
  set PerformanceFlags(value: number) {
    this.view.setUint32(217, value, true);
  }

  // 0xdd: u32
  set KeyboardType(value: number) {
    this.view.setUint32(221, value, true);
  }

  // 0xe1: u32
  set KeyboardSubType(value: number) {
    this.view.setUint32(225, value, true);
  }

  // 0xe5: u32
  set KeyboardFunctionKey(value: number) {
    this.view.setUint32(229, value, true);
  }

  // 0xe9: u32
  set ActiveInputLocale(value: number) {
    this.view.setUint32(233, value, true);
  }

  // 0xed: u32
  set SerialNumber(value: number) {
    this.view.setUint32(237, value, true);
  }

  // 0xf1: u32
  set ClientAddressFamily(value: number) {
    this.view.setUint32(241, value, true);
  }

  // 0xf5: u32
  set ClientBuildNumber(value: number) {
    this.view.setUint32(245, value, true);
  }

  // 0xf9: u32
  set ClientSessionId(value: number) {
    this.view.setUint32(249, value, true);
  }

  // 0xfd: pad3

  // 0x100: pointer
  set WorkDirectory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(256, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x108: pointer
  set InitialProgram(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(264, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x110: pointer
  set UserName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(272, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x118: pointer
  set Domain(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(280, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x120: pointer
  set Password(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(288, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x128: pointer
  set ProtocolName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(296, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x130: pointer
  set DisplayDriverName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(304, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x138: pointer
  set DisplayDeviceName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(312, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x140: pointer
  set imeFileName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(320, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x148: pointer
  set AudioDriverName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(328, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x150: pointer
  set ClientName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(336, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x158: pointer
  set ClientAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(344, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x160: pointer
  set ClientDirectory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(352, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x168: pointer
  set ClientDigProductId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(360, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x170: pointer
  set ClientSockAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(368, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x178: pointer
  set ClientTimeZone(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(376, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x180: pointer
  set WRdsListenerSettings(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(384, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x188: pointer
  set EventLogActivityId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(392, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x190: u32
  set ContextSize(value: number) {
    this.view.setUint32(400, value, true);
  }

  // 0x194: pad4

  // 0x198: pointer
  set ContextData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(408, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WRDS_SETTINGS_1 (size: 136)
 */
export interface WRDS_SETTINGS_1 {
  /** Windows.Win32.System.RemoteDesktop.WRDS_SETTING_STATUS */
  WRdsDisableClipStatus: WRDS_SETTING_STATUS;
  /** u32 */
  WRdsDisableClipValue: number;
  /** Windows.Win32.System.RemoteDesktop.WRDS_SETTING_STATUS */
  WRdsDisableLPTStatus: WRDS_SETTING_STATUS;
  /** u32 */
  WRdsDisableLPTValue: number;
  /** Windows.Win32.System.RemoteDesktop.WRDS_SETTING_STATUS */
  WRdsDisableCcmStatus: WRDS_SETTING_STATUS;
  /** u32 */
  WRdsDisableCcmValue: number;
  /** Windows.Win32.System.RemoteDesktop.WRDS_SETTING_STATUS */
  WRdsDisableCdmStatus: WRDS_SETTING_STATUS;
  /** u32 */
  WRdsDisableCdmValue: number;
  /** Windows.Win32.System.RemoteDesktop.WRDS_SETTING_STATUS */
  WRdsDisableCpmStatus: WRDS_SETTING_STATUS;
  /** u32 */
  WRdsDisableCpmValue: number;
  /** Windows.Win32.System.RemoteDesktop.WRDS_SETTING_STATUS */
  WRdsDisablePnpStatus: WRDS_SETTING_STATUS;
  /** u32 */
  WRdsDisablePnpValue: number;
  /** Windows.Win32.System.RemoteDesktop.WRDS_SETTING_STATUS */
  WRdsEncryptionLevelStatus: WRDS_SETTING_STATUS;
  /** u32 */
  WRdsEncryptionValue: number;
  /** Windows.Win32.System.RemoteDesktop.WRDS_SETTING_STATUS */
  WRdsColorDepthStatus: WRDS_SETTING_STATUS;
  /** u32 */
  WRdsColorDepthValue: number;
  /** Windows.Win32.System.RemoteDesktop.WRDS_SETTING_STATUS */
  WRdsDisableAutoReconnecetStatus: WRDS_SETTING_STATUS;
  /** u32 */
  WRdsDisableAutoReconnecetValue: number;
  /** Windows.Win32.System.RemoteDesktop.WRDS_SETTING_STATUS */
  WRdsDisableEncryptionStatus: WRDS_SETTING_STATUS;
  /** u32 */
  WRdsDisableEncryptionValue: number;
  /** Windows.Win32.System.RemoteDesktop.WRDS_SETTING_STATUS */
  WRdsResetBrokenStatus: WRDS_SETTING_STATUS;
  /** u32 */
  WRdsResetBrokenValue: number;
  /** Windows.Win32.System.RemoteDesktop.WRDS_SETTING_STATUS */
  WRdsMaxIdleTimeStatus: WRDS_SETTING_STATUS;
  /** u32 */
  WRdsMaxIdleTimeValue: number;
  /** Windows.Win32.System.RemoteDesktop.WRDS_SETTING_STATUS */
  WRdsMaxDisconnectTimeStatus: WRDS_SETTING_STATUS;
  /** u32 */
  WRdsMaxDisconnectTimeValue: number;
  /** Windows.Win32.System.RemoteDesktop.WRDS_SETTING_STATUS */
  WRdsMaxConnectTimeStatus: WRDS_SETTING_STATUS;
  /** u32 */
  WRdsMaxConnectTimeValue: number;
  /** Windows.Win32.System.RemoteDesktop.WRDS_SETTING_STATUS */
  WRdsKeepAliveStatus: WRDS_SETTING_STATUS;
  /** Windows.Win32.Foundation.BOOLEAN */
  WRdsKeepAliveStartValue: Uint8Array | Deno.PointerValue;
  /** u32 */
  WRdsKeepAliveIntervalValue: number;
}

export const sizeofWRDS_SETTINGS_1 = 136;

export function allocWRDS_SETTINGS_1(data?: Partial<WRDS_SETTINGS_1>): Uint8Array {
  const buf = new Uint8Array(sizeofWRDS_SETTINGS_1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.WRdsDisableClipStatus !== undefined) view.setInt32(0, Number(data.WRdsDisableClipStatus), true);
  // 0x04: u32
  if (data?.WRdsDisableClipValue !== undefined) view.setUint32(4, Number(data.WRdsDisableClipValue), true);
  // 0x08: i32
  if (data?.WRdsDisableLPTStatus !== undefined) view.setInt32(8, Number(data.WRdsDisableLPTStatus), true);
  // 0x0c: u32
  if (data?.WRdsDisableLPTValue !== undefined) view.setUint32(12, Number(data.WRdsDisableLPTValue), true);
  // 0x10: i32
  if (data?.WRdsDisableCcmStatus !== undefined) view.setInt32(16, Number(data.WRdsDisableCcmStatus), true);
  // 0x14: u32
  if (data?.WRdsDisableCcmValue !== undefined) view.setUint32(20, Number(data.WRdsDisableCcmValue), true);
  // 0x18: i32
  if (data?.WRdsDisableCdmStatus !== undefined) view.setInt32(24, Number(data.WRdsDisableCdmStatus), true);
  // 0x1c: u32
  if (data?.WRdsDisableCdmValue !== undefined) view.setUint32(28, Number(data.WRdsDisableCdmValue), true);
  // 0x20: i32
  if (data?.WRdsDisableCpmStatus !== undefined) view.setInt32(32, Number(data.WRdsDisableCpmStatus), true);
  // 0x24: u32
  if (data?.WRdsDisableCpmValue !== undefined) view.setUint32(36, Number(data.WRdsDisableCpmValue), true);
  // 0x28: i32
  if (data?.WRdsDisablePnpStatus !== undefined) view.setInt32(40, Number(data.WRdsDisablePnpStatus), true);
  // 0x2c: u32
  if (data?.WRdsDisablePnpValue !== undefined) view.setUint32(44, Number(data.WRdsDisablePnpValue), true);
  // 0x30: i32
  if (data?.WRdsEncryptionLevelStatus !== undefined) view.setInt32(48, Number(data.WRdsEncryptionLevelStatus), true);
  // 0x34: u32
  if (data?.WRdsEncryptionValue !== undefined) view.setUint32(52, Number(data.WRdsEncryptionValue), true);
  // 0x38: i32
  if (data?.WRdsColorDepthStatus !== undefined) view.setInt32(56, Number(data.WRdsColorDepthStatus), true);
  // 0x3c: u32
  if (data?.WRdsColorDepthValue !== undefined) view.setUint32(60, Number(data.WRdsColorDepthValue), true);
  // 0x40: i32
  if (data?.WRdsDisableAutoReconnecetStatus !== undefined) view.setInt32(64, Number(data.WRdsDisableAutoReconnecetStatus), true);
  // 0x44: u32
  if (data?.WRdsDisableAutoReconnecetValue !== undefined) view.setUint32(68, Number(data.WRdsDisableAutoReconnecetValue), true);
  // 0x48: i32
  if (data?.WRdsDisableEncryptionStatus !== undefined) view.setInt32(72, Number(data.WRdsDisableEncryptionStatus), true);
  // 0x4c: u32
  if (data?.WRdsDisableEncryptionValue !== undefined) view.setUint32(76, Number(data.WRdsDisableEncryptionValue), true);
  // 0x50: i32
  if (data?.WRdsResetBrokenStatus !== undefined) view.setInt32(80, Number(data.WRdsResetBrokenStatus), true);
  // 0x54: u32
  if (data?.WRdsResetBrokenValue !== undefined) view.setUint32(84, Number(data.WRdsResetBrokenValue), true);
  // 0x58: i32
  if (data?.WRdsMaxIdleTimeStatus !== undefined) view.setInt32(88, Number(data.WRdsMaxIdleTimeStatus), true);
  // 0x5c: u32
  if (data?.WRdsMaxIdleTimeValue !== undefined) view.setUint32(92, Number(data.WRdsMaxIdleTimeValue), true);
  // 0x60: i32
  if (data?.WRdsMaxDisconnectTimeStatus !== undefined) view.setInt32(96, Number(data.WRdsMaxDisconnectTimeStatus), true);
  // 0x64: u32
  if (data?.WRdsMaxDisconnectTimeValue !== undefined) view.setUint32(100, Number(data.WRdsMaxDisconnectTimeValue), true);
  // 0x68: i32
  if (data?.WRdsMaxConnectTimeStatus !== undefined) view.setInt32(104, Number(data.WRdsMaxConnectTimeStatus), true);
  // 0x6c: u32
  if (data?.WRdsMaxConnectTimeValue !== undefined) view.setUint32(108, Number(data.WRdsMaxConnectTimeValue), true);
  // 0x70: i32
  if (data?.WRdsKeepAliveStatus !== undefined) view.setInt32(112, Number(data.WRdsKeepAliveStatus), true);
  // 0x74: pad4
  // 0x78: pointer
  if (data?.WRdsKeepAliveStartValue !== undefined) view.setBigUint64(120, data.WRdsKeepAliveStartValue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WRdsKeepAliveStartValue))), true);
  // 0x80: u32
  if (data?.WRdsKeepAliveIntervalValue !== undefined) view.setUint32(128, Number(data.WRdsKeepAliveIntervalValue), true);
  // 0x84: pad4
  return buf;
}

export class WRDS_SETTINGS_1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get WRdsDisableClipStatus(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get WRdsDisableClipValue(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get WRdsDisableLPTStatus(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get WRdsDisableLPTValue(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: i32
  get WRdsDisableCcmStatus(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u32
  get WRdsDisableCcmValue(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: i32
  get WRdsDisableCdmStatus(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: u32
  get WRdsDisableCdmValue(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: i32
  get WRdsDisableCpmStatus(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: u32
  get WRdsDisableCpmValue(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: i32
  get WRdsDisablePnpStatus(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: u32
  get WRdsDisablePnpValue(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: i32
  get WRdsEncryptionLevelStatus(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: u32
  get WRdsEncryptionValue(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: i32
  get WRdsColorDepthStatus(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: u32
  get WRdsColorDepthValue(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: i32
  get WRdsDisableAutoReconnecetStatus(): number {
    return this.view.getInt32(64, true);
  }

  // 0x44: u32
  get WRdsDisableAutoReconnecetValue(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: i32
  get WRdsDisableEncryptionStatus(): number {
    return this.view.getInt32(72, true);
  }

  // 0x4c: u32
  get WRdsDisableEncryptionValue(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: i32
  get WRdsResetBrokenStatus(): number {
    return this.view.getInt32(80, true);
  }

  // 0x54: u32
  get WRdsResetBrokenValue(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: i32
  get WRdsMaxIdleTimeStatus(): number {
    return this.view.getInt32(88, true);
  }

  // 0x5c: u32
  get WRdsMaxIdleTimeValue(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: i32
  get WRdsMaxDisconnectTimeStatus(): number {
    return this.view.getInt32(96, true);
  }

  // 0x64: u32
  get WRdsMaxDisconnectTimeValue(): number {
    return this.view.getUint32(100, true);
  }

  // 0x68: i32
  get WRdsMaxConnectTimeStatus(): number {
    return this.view.getInt32(104, true);
  }

  // 0x6c: u32
  get WRdsMaxConnectTimeValue(): number {
    return this.view.getUint32(108, true);
  }

  // 0x70: i32
  get WRdsKeepAliveStatus(): number {
    return this.view.getInt32(112, true);
  }

  // 0x74: pad4

  // 0x78: pointer
  get WRdsKeepAliveStartValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: u32
  get WRdsKeepAliveIntervalValue(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: pad4

  // 0x00: i32
  set WRdsDisableClipStatus(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set WRdsDisableClipValue(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set WRdsDisableLPTStatus(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set WRdsDisableLPTValue(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: i32
  set WRdsDisableCcmStatus(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u32
  set WRdsDisableCcmValue(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: i32
  set WRdsDisableCdmStatus(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: u32
  set WRdsDisableCdmValue(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: i32
  set WRdsDisableCpmStatus(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: u32
  set WRdsDisableCpmValue(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: i32
  set WRdsDisablePnpStatus(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: u32
  set WRdsDisablePnpValue(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: i32
  set WRdsEncryptionLevelStatus(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: u32
  set WRdsEncryptionValue(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: i32
  set WRdsColorDepthStatus(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: u32
  set WRdsColorDepthValue(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: i32
  set WRdsDisableAutoReconnecetStatus(value: number) {
    this.view.setInt32(64, value, true);
  }

  // 0x44: u32
  set WRdsDisableAutoReconnecetValue(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: i32
  set WRdsDisableEncryptionStatus(value: number) {
    this.view.setInt32(72, value, true);
  }

  // 0x4c: u32
  set WRdsDisableEncryptionValue(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: i32
  set WRdsResetBrokenStatus(value: number) {
    this.view.setInt32(80, value, true);
  }

  // 0x54: u32
  set WRdsResetBrokenValue(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: i32
  set WRdsMaxIdleTimeStatus(value: number) {
    this.view.setInt32(88, value, true);
  }

  // 0x5c: u32
  set WRdsMaxIdleTimeValue(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: i32
  set WRdsMaxDisconnectTimeStatus(value: number) {
    this.view.setInt32(96, value, true);
  }

  // 0x64: u32
  set WRdsMaxDisconnectTimeValue(value: number) {
    this.view.setUint32(100, value, true);
  }

  // 0x68: i32
  set WRdsMaxConnectTimeStatus(value: number) {
    this.view.setInt32(104, value, true);
  }

  // 0x6c: u32
  set WRdsMaxConnectTimeValue(value: number) {
    this.view.setUint32(108, value, true);
  }

  // 0x70: i32
  set WRdsKeepAliveStatus(value: number) {
    this.view.setInt32(112, value, true);
  }

  // 0x74: pad4

  // 0x78: pointer
  set WRdsKeepAliveStartValue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: u32
  set WRdsKeepAliveIntervalValue(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: pad4
}

/**
 * Windows.Win32.System.RemoteDesktop.WRDS_CONNECTION_SETTING (size: 8)
 */
export interface WRDS_CONNECTION_SETTING {
  /** Windows.Win32.System.RemoteDesktop.WRDS_CONNECTION_SETTINGS_1 */
  WRdsConnectionSettings1: Uint8Array | Deno.PointerValue;
}

export const sizeofWRDS_CONNECTION_SETTING = 8;

export function allocWRDS_CONNECTION_SETTING(data?: Partial<WRDS_CONNECTION_SETTING>): Uint8Array {
  const buf = new Uint8Array(sizeofWRDS_CONNECTION_SETTING);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.WRdsConnectionSettings1 !== undefined) view.setBigUint64(0, data.WRdsConnectionSettings1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WRdsConnectionSettings1))), true);
  return buf;
}

export class WRDS_CONNECTION_SETTINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get WRdsConnectionSettings1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set WRdsConnectionSettings1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WRDS_CONNECTION_SETTINGS (size: 16)
 */
export interface WRDS_CONNECTION_SETTINGS {
  /** Windows.Win32.System.RemoteDesktop.WRDS_CONNECTION_SETTING_LEVEL */
  WRdsConnectionSettingLevel: WRDS_CONNECTION_SETTING_LEVEL;
  /** Windows.Win32.System.RemoteDesktop.WRDS_CONNECTION_SETTING */
  WRdsConnectionSetting: Uint8Array | Deno.PointerValue;
}

export const sizeofWRDS_CONNECTION_SETTINGS = 16;

export function allocWRDS_CONNECTION_SETTINGS(data?: Partial<WRDS_CONNECTION_SETTINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofWRDS_CONNECTION_SETTINGS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.WRdsConnectionSettingLevel !== undefined) view.setInt32(0, Number(data.WRdsConnectionSettingLevel), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.WRdsConnectionSetting !== undefined) view.setBigUint64(8, data.WRdsConnectionSetting === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WRdsConnectionSetting))), true);
  return buf;
}

export class WRDS_CONNECTION_SETTINGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get WRdsConnectionSettingLevel(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get WRdsConnectionSetting(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set WRdsConnectionSettingLevel(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set WRdsConnectionSetting(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WRDS_SETTING (size: 8)
 */
export interface WRDS_SETTING {
  /** Windows.Win32.System.RemoteDesktop.WRDS_SETTINGS_1 */
  WRdsSettings1: Uint8Array | Deno.PointerValue;
}

export const sizeofWRDS_SETTING = 8;

export function allocWRDS_SETTING(data?: Partial<WRDS_SETTING>): Uint8Array {
  const buf = new Uint8Array(sizeofWRDS_SETTING);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.WRdsSettings1 !== undefined) view.setBigUint64(0, data.WRdsSettings1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WRdsSettings1))), true);
  return buf;
}

export class WRDS_SETTINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get WRdsSettings1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set WRdsSettings1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WRDS_SETTINGS (size: 16)
 */
export interface WRDS_SETTINGS {
  /** Windows.Win32.System.RemoteDesktop.WRDS_SETTING_TYPE */
  WRdsSettingType: WRDS_SETTING_TYPE;
  /** Windows.Win32.System.RemoteDesktop.WRDS_SETTING_LEVEL */
  WRdsSettingLevel: WRDS_SETTING_LEVEL;
  /** Windows.Win32.System.RemoteDesktop.WRDS_SETTING */
  WRdsSetting: Uint8Array | Deno.PointerValue;
}

export const sizeofWRDS_SETTINGS = 16;

export function allocWRDS_SETTINGS(data?: Partial<WRDS_SETTINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofWRDS_SETTINGS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.WRdsSettingType !== undefined) view.setInt32(0, Number(data.WRdsSettingType), true);
  // 0x04: i32
  if (data?.WRdsSettingLevel !== undefined) view.setInt32(4, Number(data.WRdsSettingLevel), true);
  // 0x08: pointer
  if (data?.WRdsSetting !== undefined) view.setBigUint64(8, data.WRdsSetting === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WRdsSetting))), true);
  return buf;
}

export class WRDS_SETTINGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get WRdsSettingType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get WRdsSettingLevel(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get WRdsSetting(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set WRdsSettingType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set WRdsSettingLevel(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set WRdsSetting(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteDesktop.WTSSESSION_NOTIFICATION (size: 8)
 */
export interface WTSSESSION_NOTIFICATION {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwSessionId: number;
}

export const sizeofWTSSESSION_NOTIFICATION = 8;

export function allocWTSSESSION_NOTIFICATION(data?: Partial<WTSSESSION_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofWTSSESSION_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwSessionId !== undefined) view.setUint32(4, Number(data.dwSessionId), true);
  return buf;
}

export class WTSSESSION_NOTIFICATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwSessionId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwSessionId(value: number) {
    this.view.setUint32(4, value, true);
  }
}

export type HWND = bigint | number;

export type PSECURITY_DESCRIPTOR = Deno.PointerValue | Uint8Array;

export type HRESULT = number;

// Native Libraries

try {
  var libWTSAPI32_dll = Deno.dlopen("WTSAPI32.dll", {
    WTSStopRemoteControlSession: {
      parameters: ["u32"],
      result: "i32",
      optional: true,
    },
    WTSStartRemoteControlSessionW: {
      parameters: ["buffer", "u32", "u8", "u16"],
      result: "i32",
      optional: true,
    },
    WTSStartRemoteControlSessionA: {
      parameters: ["buffer", "u32", "u8", "u16"],
      result: "i32",
      optional: true,
    },
    WTSConnectSessionA: {
      parameters: ["u32", "u32", "buffer", "i32"],
      result: "i32",
      optional: true,
    },
    WTSConnectSessionW: {
      parameters: ["u32", "u32", "buffer", "i32"],
      result: "i32",
      optional: true,
    },
    WTSEnumerateServersW: {
      parameters: ["buffer", "u32", "u32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    WTSEnumerateServersA: {
      parameters: ["buffer", "u32", "u32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    WTSOpenServerW: {
      parameters: ["buffer"],
      result: "pointer",
      optional: true,
    },
    WTSOpenServerA: {
      parameters: ["buffer"],
      result: "pointer",
      optional: true,
    },
    WTSOpenServerExW: {
      parameters: ["buffer"],
      result: "pointer",
      optional: true,
    },
    WTSOpenServerExA: {
      parameters: ["buffer"],
      result: "pointer",
      optional: true,
    },
    WTSCloseServer: {
      parameters: ["pointer"],
      result: "void",
      optional: true,
    },
    WTSEnumerateSessionsW: {
      parameters: ["pointer", "u32", "u32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    WTSEnumerateSessionsA: {
      parameters: ["pointer", "u32", "u32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    WTSEnumerateSessionsExW: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    WTSEnumerateSessionsExA: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    WTSEnumerateProcessesW: {
      parameters: ["pointer", "u32", "u32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    WTSEnumerateProcessesA: {
      parameters: ["pointer", "u32", "u32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    WTSTerminateProcess: {
      parameters: ["pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    WTSQuerySessionInformationW: {
      parameters: ["pointer", "u32", "i32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    WTSQuerySessionInformationA: {
      parameters: ["pointer", "u32", "i32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    WTSQueryUserConfigW: {
      parameters: ["buffer", "buffer", "i32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    WTSQueryUserConfigA: {
      parameters: ["buffer", "buffer", "i32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    WTSSetUserConfigW: {
      parameters: ["buffer", "buffer", "i32", "buffer", "u32"],
      result: "i32",
      optional: true,
    },
    WTSSetUserConfigA: {
      parameters: ["buffer", "buffer", "i32", "buffer", "u32"],
      result: "i32",
      optional: true,
    },
    WTSSendMessageW: {
      parameters: ["pointer", "u32", "buffer", "u32", "buffer", "u32", "u32", "u32", "pointer", "i32"],
      result: "i32",
      optional: true,
    },
    WTSSendMessageA: {
      parameters: ["pointer", "u32", "buffer", "u32", "buffer", "u32", "u32", "u32", "pointer", "i32"],
      result: "i32",
      optional: true,
    },
    WTSDisconnectSession: {
      parameters: ["pointer", "u32", "i32"],
      result: "i32",
      optional: true,
    },
    WTSLogoffSession: {
      parameters: ["pointer", "u32", "i32"],
      result: "i32",
      optional: true,
    },
    WTSShutdownSystem: {
      parameters: ["pointer", "u32"],
      result: "i32",
      optional: true,
    },
    WTSWaitSystemEvent: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    WTSVirtualChannelOpen: {
      parameters: ["pointer", "u32", "buffer"],
      result: "pointer",
      optional: true,
    },
    WTSVirtualChannelOpenEx: {
      parameters: ["u32", "buffer", "u32"],
      result: "pointer",
      optional: true,
    },
    WTSVirtualChannelClose: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    WTSVirtualChannelRead: {
      parameters: ["pointer", "u32", "buffer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    WTSVirtualChannelWrite: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    WTSVirtualChannelPurgeInput: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    WTSVirtualChannelPurgeOutput: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    WTSVirtualChannelQuery: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    WTSFreeMemory: {
      parameters: ["pointer"],
      result: "void",
      optional: true,
    },
    WTSRegisterSessionNotification: {
      parameters: ["pointer", "u32"],
      result: "i32",
      optional: true,
    },
    WTSUnRegisterSessionNotification: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    WTSRegisterSessionNotificationEx: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    WTSUnRegisterSessionNotificationEx: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    WTSQueryUserToken: {
      parameters: ["u32", "pointer"],
      result: "i32",
      optional: true,
    },
    WTSFreeMemoryExW: {
      parameters: ["i32", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    WTSFreeMemoryExA: {
      parameters: ["i32", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    WTSEnumerateProcessesExW: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    WTSEnumerateProcessesExA: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    WTSEnumerateListenersW: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    WTSEnumerateListenersA: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    WTSQueryListenerConfigW: {
      parameters: ["pointer", "pointer", "u32", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    WTSQueryListenerConfigA: {
      parameters: ["pointer", "pointer", "u32", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    WTSCreateListenerW: {
      parameters: ["pointer", "pointer", "u32", "buffer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    WTSCreateListenerA: {
      parameters: ["pointer", "pointer", "u32", "buffer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    WTSSetListenerSecurityW: {
      parameters: ["pointer", "pointer", "u32", "buffer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    WTSSetListenerSecurityA: {
      parameters: ["pointer", "pointer", "u32", "buffer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    WTSGetListenerSecurityW: {
      parameters: ["pointer", "pointer", "u32", "buffer", "u32", "pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    WTSGetListenerSecurityA: {
      parameters: ["pointer", "pointer", "u32", "buffer", "u32", "pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    WTSEnableChildSessions: {
      parameters: ["i32"],
      result: "i32",
      optional: true,
    },
    WTSIsChildSessionsEnabled: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    WTSGetChildSessionId: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    WTSSetRenderHint: {
      parameters: ["pointer", "pointer", "u32", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libKERNEL32_dll = Deno.dlopen("KERNEL32.dll", {
    ProcessIdToSessionId: {
      parameters: ["u32", "pointer"],
      result: "i32",
      optional: true,
    },
    WTSGetActiveConsoleSessionId: {
      parameters: [],
      result: "u32",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function WTSStopRemoteControlSession(
  LogonId: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSStopRemoteControlSession!(LogonId));
}

export function WTSStartRemoteControlSessionW(
  pTargetServerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  TargetLogonId: number /* u32 */,
  HotkeyVk: number /* u8 */,
  HotkeyModifiers: number /* u16 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSStartRemoteControlSessionW!(util.pwstrToFfi(pTargetServerName), TargetLogonId, HotkeyVk, HotkeyModifiers));
}

export function WTSStartRemoteControlSessionA(
  pTargetServerName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  TargetLogonId: number /* u32 */,
  HotkeyVk: number /* u8 */,
  HotkeyModifiers: number /* u16 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSStartRemoteControlSessionA!(util.pstrToFfi(pTargetServerName), TargetLogonId, HotkeyVk, HotkeyModifiers));
}

export function WTSConnectSessionA(
  LogonId: number /* u32 */,
  TargetLogonId: number /* u32 */,
  pPassword: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  bWait: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSConnectSessionA!(LogonId, TargetLogonId, util.pstrToFfi(pPassword), util.boolToFfi(bWait)));
}

export function WTSConnectSessionW(
  LogonId: number /* u32 */,
  TargetLogonId: number /* u32 */,
  pPassword: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  bWait: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSConnectSessionW!(LogonId, TargetLogonId, util.pwstrToFfi(pPassword), util.boolToFfi(bWait)));
}

export function WTSEnumerateServersW(
  pDomainName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Reserved: number /* u32 */,
  Version: number /* u32 */,
  ppServerInfo: Deno.PointerValue | Uint8Array /* ptr */,
  pCount: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSEnumerateServersW!(util.pwstrToFfi(pDomainName), Reserved, Version, util.toPointer(ppServerInfo), util.toPointer(pCount)));
}

export function WTSEnumerateServersA(
  pDomainName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Reserved: number /* u32 */,
  Version: number /* u32 */,
  ppServerInfo: Deno.PointerValue | Uint8Array /* ptr */,
  pCount: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSEnumerateServersA!(util.pstrToFfi(pDomainName), Reserved, Version, util.toPointer(ppServerInfo), util.toPointer(pCount)));
}

export function WTSOpenServerW(
  pServerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libWTSAPI32_dll.WTSOpenServerW!(util.pwstrToFfi(pServerName));
}

export function WTSOpenServerA(
  pServerName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libWTSAPI32_dll.WTSOpenServerA!(util.pstrToFfi(pServerName));
}

export function WTSOpenServerExW(
  pServerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libWTSAPI32_dll.WTSOpenServerExW!(util.pwstrToFfi(pServerName));
}

export function WTSOpenServerExA(
  pServerName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libWTSAPI32_dll.WTSOpenServerExA!(util.pstrToFfi(pServerName));
}

export function WTSCloseServer(
  hServer: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): void /* void */ {
  return libWTSAPI32_dll.WTSCloseServer!(util.toPointer(hServer));
}

export function WTSEnumerateSessionsW(
  hServer: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Reserved: number /* u32 */,
  Version: number /* u32 */,
  ppSessionInfo: Deno.PointerValue | Uint8Array /* ptr */,
  pCount: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSEnumerateSessionsW!(util.toPointer(hServer), Reserved, Version, util.toPointer(ppSessionInfo), util.toPointer(pCount)));
}

export function WTSEnumerateSessionsA(
  hServer: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Reserved: number /* u32 */,
  Version: number /* u32 */,
  ppSessionInfo: Deno.PointerValue | Uint8Array /* ptr */,
  pCount: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSEnumerateSessionsA!(util.toPointer(hServer), Reserved, Version, util.toPointer(ppSessionInfo), util.toPointer(pCount)));
}

export function WTSEnumerateSessionsExW(
  hServer: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pLevel: Deno.PointerValue | Uint8Array /* ptr */,
  Filter: number /* u32 */,
  ppSessionInfo: Deno.PointerValue | Uint8Array /* ptr */,
  pCount: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSEnumerateSessionsExW!(util.toPointer(hServer), util.toPointer(pLevel), Filter, util.toPointer(ppSessionInfo), util.toPointer(pCount)));
}

export function WTSEnumerateSessionsExA(
  hServer: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pLevel: Deno.PointerValue | Uint8Array /* ptr */,
  Filter: number /* u32 */,
  ppSessionInfo: Deno.PointerValue | Uint8Array /* ptr */,
  pCount: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSEnumerateSessionsExA!(util.toPointer(hServer), util.toPointer(pLevel), Filter, util.toPointer(ppSessionInfo), util.toPointer(pCount)));
}

export function WTSEnumerateProcessesW(
  hServer: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Reserved: number /* u32 */,
  Version: number /* u32 */,
  ppProcessInfo: Deno.PointerValue | Uint8Array /* ptr */,
  pCount: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSEnumerateProcessesW!(util.toPointer(hServer), Reserved, Version, util.toPointer(ppProcessInfo), util.toPointer(pCount)));
}

export function WTSEnumerateProcessesA(
  hServer: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Reserved: number /* u32 */,
  Version: number /* u32 */,
  ppProcessInfo: Deno.PointerValue | Uint8Array /* ptr */,
  pCount: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSEnumerateProcessesA!(util.toPointer(hServer), Reserved, Version, util.toPointer(ppProcessInfo), util.toPointer(pCount)));
}

export function WTSTerminateProcess(
  hServer: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  ProcessId: number /* u32 */,
  ExitCode: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSTerminateProcess!(util.toPointer(hServer), ProcessId, ExitCode));
}

export function WTSQuerySessionInformationW(
  hServer: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  SessionId: number /* u32 */,
  WTSInfoClass: WTS_INFO_CLASS /* Windows.Win32.System.RemoteDesktop.WTS_INFO_CLASS */,
  ppBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  pBytesReturned: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSQuerySessionInformationW!(util.toPointer(hServer), SessionId, WTSInfoClass, util.toPointer(ppBuffer), util.toPointer(pBytesReturned)));
}

export function WTSQuerySessionInformationA(
  hServer: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  SessionId: number /* u32 */,
  WTSInfoClass: WTS_INFO_CLASS /* Windows.Win32.System.RemoteDesktop.WTS_INFO_CLASS */,
  ppBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  pBytesReturned: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSQuerySessionInformationA!(util.toPointer(hServer), SessionId, WTSInfoClass, util.toPointer(ppBuffer), util.toPointer(pBytesReturned)));
}

export function WTSQueryUserConfigW(
  pServerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pUserName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  WTSConfigClass: WTS_CONFIG_CLASS /* Windows.Win32.System.RemoteDesktop.WTS_CONFIG_CLASS */,
  ppBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  pBytesReturned: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSQueryUserConfigW!(util.pwstrToFfi(pServerName), util.pwstrToFfi(pUserName), WTSConfigClass, util.toPointer(ppBuffer), util.toPointer(pBytesReturned)));
}

export function WTSQueryUserConfigA(
  pServerName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pUserName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  WTSConfigClass: WTS_CONFIG_CLASS /* Windows.Win32.System.RemoteDesktop.WTS_CONFIG_CLASS */,
  ppBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  pBytesReturned: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSQueryUserConfigA!(util.pstrToFfi(pServerName), util.pstrToFfi(pUserName), WTSConfigClass, util.toPointer(ppBuffer), util.toPointer(pBytesReturned)));
}

export function WTSSetUserConfigW(
  pServerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pUserName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  WTSConfigClass: WTS_CONFIG_CLASS /* Windows.Win32.System.RemoteDesktop.WTS_CONFIG_CLASS */,
  pBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  DataLength: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSSetUserConfigW!(util.pwstrToFfi(pServerName), util.pwstrToFfi(pUserName), WTSConfigClass, util.pwstrToFfi(pBuffer), DataLength));
}

export function WTSSetUserConfigA(
  pServerName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pUserName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  WTSConfigClass: WTS_CONFIG_CLASS /* Windows.Win32.System.RemoteDesktop.WTS_CONFIG_CLASS */,
  pBuffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  DataLength: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSSetUserConfigA!(util.pstrToFfi(pServerName), util.pstrToFfi(pUserName), WTSConfigClass, util.pstrToFfi(pBuffer), DataLength));
}

export function WTSSendMessageW(
  hServer: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  SessionId: number /* u32 */,
  pTitle: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  TitleLength: number /* u32 */,
  pMessage: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  MessageLength: number /* u32 */,
  Style: MESSAGEBOX_STYLE /* Windows.Win32.UI.WindowsAndMessaging.MESSAGEBOX_STYLE */,
  Timeout: number /* u32 */,
  pResponse: Deno.PointerValue | Uint8Array /* ptr */,
  bWait: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSSendMessageW!(util.toPointer(hServer), SessionId, util.pwstrToFfi(pTitle), TitleLength, util.pwstrToFfi(pMessage), MessageLength, Style, Timeout, util.toPointer(pResponse), util.boolToFfi(bWait)));
}

export function WTSSendMessageA(
  hServer: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  SessionId: number /* u32 */,
  pTitle: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  TitleLength: number /* u32 */,
  pMessage: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  MessageLength: number /* u32 */,
  Style: MESSAGEBOX_STYLE /* Windows.Win32.UI.WindowsAndMessaging.MESSAGEBOX_STYLE */,
  Timeout: number /* u32 */,
  pResponse: Deno.PointerValue | Uint8Array /* ptr */,
  bWait: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSSendMessageA!(util.toPointer(hServer), SessionId, util.pstrToFfi(pTitle), TitleLength, util.pstrToFfi(pMessage), MessageLength, Style, Timeout, util.toPointer(pResponse), util.boolToFfi(bWait)));
}

export function WTSDisconnectSession(
  hServer: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  SessionId: number /* u32 */,
  bWait: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSDisconnectSession!(util.toPointer(hServer), SessionId, util.boolToFfi(bWait)));
}

export function WTSLogoffSession(
  hServer: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  SessionId: number /* u32 */,
  bWait: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSLogoffSession!(util.toPointer(hServer), SessionId, util.boolToFfi(bWait)));
}

export function WTSShutdownSystem(
  hServer: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  ShutdownFlag: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSShutdownSystem!(util.toPointer(hServer), ShutdownFlag));
}

export function WTSWaitSystemEvent(
  hServer: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  EventMask: number /* u32 */,
  pEventFlags: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSWaitSystemEvent!(util.toPointer(hServer), EventMask, util.toPointer(pEventFlags)));
}

export function WTSVirtualChannelOpen(
  hServer: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  SessionId: number /* u32 */,
  pVirtualName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue /* Windows.Win32.System.RemoteDesktop.HwtsVirtualChannelHandle */ {
  return libWTSAPI32_dll.WTSVirtualChannelOpen!(util.toPointer(hServer), SessionId, util.pstrToFfi(pVirtualName));
}

export function WTSVirtualChannelOpenEx(
  SessionId: number /* u32 */,
  pVirtualName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  flags: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.System.RemoteDesktop.HwtsVirtualChannelHandle */ {
  return libWTSAPI32_dll.WTSVirtualChannelOpenEx!(SessionId, util.pstrToFfi(pVirtualName), flags);
}

export function WTSVirtualChannelClose(
  hChannelHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSVirtualChannelClose!(util.toPointer(hChannelHandle)));
}

export function WTSVirtualChannelRead(
  hChannelHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  TimeOut: number /* u32 */,
  Buffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  BufferSize: number /* u32 */,
  pBytesRead: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSVirtualChannelRead!(util.toPointer(hChannelHandle), TimeOut, util.pstrToFfi(Buffer), BufferSize, util.toPointer(pBytesRead)));
}

export function WTSVirtualChannelWrite(
  hChannelHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Buffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Length: number /* u32 */,
  pBytesWritten: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSVirtualChannelWrite!(util.toPointer(hChannelHandle), util.pstrToFfi(Buffer), Length, util.toPointer(pBytesWritten)));
}

export function WTSVirtualChannelPurgeInput(
  hChannelHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSVirtualChannelPurgeInput!(util.toPointer(hChannelHandle)));
}

export function WTSVirtualChannelPurgeOutput(
  hChannelHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSVirtualChannelPurgeOutput!(util.toPointer(hChannelHandle)));
}

export function WTSVirtualChannelQuery(
  hChannelHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  param1: WTS_VIRTUAL_CLASS /* Windows.Win32.System.RemoteDesktop.WTS_VIRTUAL_CLASS */,
  ppBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  pBytesReturned: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSVirtualChannelQuery!(util.toPointer(hChannelHandle), param1, util.toPointer(ppBuffer), util.toPointer(pBytesReturned)));
}

export function WTSFreeMemory(
  pMemory: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libWTSAPI32_dll.WTSFreeMemory!(util.toPointer(pMemory));
}

export function WTSRegisterSessionNotification(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  dwFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSRegisterSessionNotification!((hWnd), dwFlags));
}

export function WTSUnRegisterSessionNotification(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSUnRegisterSessionNotification!((hWnd)));
}

export function WTSRegisterSessionNotificationEx(
  hServer: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  dwFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSRegisterSessionNotificationEx!(util.toPointer(hServer), (hWnd), dwFlags));
}

export function WTSUnRegisterSessionNotificationEx(
  hServer: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSUnRegisterSessionNotificationEx!(util.toPointer(hServer), (hWnd)));
}

export function WTSQueryUserToken(
  SessionId: number /* u32 */,
  phToken: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSQueryUserToken!(SessionId, util.toPointer(phToken)));
}

export function WTSFreeMemoryExW(
  WTSTypeClass: WTS_TYPE_CLASS /* Windows.Win32.System.RemoteDesktop.WTS_TYPE_CLASS */,
  pMemory: Deno.PointerValue | Uint8Array /* ptr */,
  NumberOfEntries: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSFreeMemoryExW!(WTSTypeClass, util.toPointer(pMemory), NumberOfEntries));
}

export function WTSFreeMemoryExA(
  WTSTypeClass: WTS_TYPE_CLASS /* Windows.Win32.System.RemoteDesktop.WTS_TYPE_CLASS */,
  pMemory: Deno.PointerValue | Uint8Array /* ptr */,
  NumberOfEntries: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSFreeMemoryExA!(WTSTypeClass, util.toPointer(pMemory), NumberOfEntries));
}

export function WTSEnumerateProcessesExW(
  hServer: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pLevel: Deno.PointerValue | Uint8Array /* ptr */,
  SessionId: number /* u32 */,
  ppProcessInfo: Deno.PointerValue | Uint8Array /* ptr */,
  pCount: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSEnumerateProcessesExW!(util.toPointer(hServer), util.toPointer(pLevel), SessionId, util.toPointer(ppProcessInfo), util.toPointer(pCount)));
}

export function WTSEnumerateProcessesExA(
  hServer: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pLevel: Deno.PointerValue | Uint8Array /* ptr */,
  SessionId: number /* u32 */,
  ppProcessInfo: Deno.PointerValue | Uint8Array /* ptr */,
  pCount: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSEnumerateProcessesExA!(util.toPointer(hServer), util.toPointer(pLevel), SessionId, util.toPointer(ppProcessInfo), util.toPointer(pCount)));
}

export function WTSEnumerateListenersW(
  hServer: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
  Reserved: number /* u32 */,
  pListeners: Deno.PointerValue | Uint8Array /* ptr */,
  pCount: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSEnumerateListenersW!(util.toPointer(hServer), util.toPointer(pReserved), Reserved, util.toPointer(pListeners), util.toPointer(pCount)));
}

export function WTSEnumerateListenersA(
  hServer: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
  Reserved: number /* u32 */,
  pListeners: Deno.PointerValue | Uint8Array /* ptr */,
  pCount: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSEnumerateListenersA!(util.toPointer(hServer), util.toPointer(pReserved), Reserved, util.toPointer(pListeners), util.toPointer(pCount)));
}

export function WTSQueryListenerConfigW(
  hServer: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
  Reserved: number /* u32 */,
  pListenerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSQueryListenerConfigW!(util.toPointer(hServer), util.toPointer(pReserved), Reserved, util.pwstrToFfi(pListenerName), util.toPointer(pBuffer)));
}

export function WTSQueryListenerConfigA(
  hServer: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
  Reserved: number /* u32 */,
  pListenerName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSQueryListenerConfigA!(util.toPointer(hServer), util.toPointer(pReserved), Reserved, util.pstrToFfi(pListenerName), util.toPointer(pBuffer)));
}

export function WTSCreateListenerW(
  hServer: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
  Reserved: number /* u32 */,
  pListenerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  flag: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSCreateListenerW!(util.toPointer(hServer), util.toPointer(pReserved), Reserved, util.pwstrToFfi(pListenerName), util.toPointer(pBuffer), flag));
}

export function WTSCreateListenerA(
  hServer: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
  Reserved: number /* u32 */,
  pListenerName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  flag: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSCreateListenerA!(util.toPointer(hServer), util.toPointer(pReserved), Reserved, util.pstrToFfi(pListenerName), util.toPointer(pBuffer), flag));
}

export function WTSSetListenerSecurityW(
  hServer: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
  Reserved: number /* u32 */,
  pListenerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SecurityInformation: number /* u32 */,
  pSecurityDescriptor: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSSetListenerSecurityW!(util.toPointer(hServer), util.toPointer(pReserved), Reserved, util.pwstrToFfi(pListenerName), SecurityInformation, util.toPointer(pSecurityDescriptor)));
}

export function WTSSetListenerSecurityA(
  hServer: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
  Reserved: number /* u32 */,
  pListenerName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  SecurityInformation: number /* u32 */,
  pSecurityDescriptor: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSSetListenerSecurityA!(util.toPointer(hServer), util.toPointer(pReserved), Reserved, util.pstrToFfi(pListenerName), SecurityInformation, util.toPointer(pSecurityDescriptor)));
}

export function WTSGetListenerSecurityW(
  hServer: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
  Reserved: number /* u32 */,
  pListenerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SecurityInformation: number /* u32 */,
  pSecurityDescriptor: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  nLength: number /* u32 */,
  lpnLengthNeeded: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSGetListenerSecurityW!(util.toPointer(hServer), util.toPointer(pReserved), Reserved, util.pwstrToFfi(pListenerName), SecurityInformation, util.toPointer(pSecurityDescriptor), nLength, util.toPointer(lpnLengthNeeded)));
}

export function WTSGetListenerSecurityA(
  hServer: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
  Reserved: number /* u32 */,
  pListenerName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  SecurityInformation: number /* u32 */,
  pSecurityDescriptor: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  nLength: number /* u32 */,
  lpnLengthNeeded: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSGetListenerSecurityA!(util.toPointer(hServer), util.toPointer(pReserved), Reserved, util.pstrToFfi(pListenerName), SecurityInformation, util.toPointer(pSecurityDescriptor), nLength, util.toPointer(lpnLengthNeeded)));
}

export function WTSEnableChildSessions(
  bEnable: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSEnableChildSessions!(util.boolToFfi(bEnable)));
}

export function WTSIsChildSessionsEnabled(
  pbEnabled: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSIsChildSessionsEnabled!(util.toPointer(pbEnabled)));
}

export function WTSGetChildSessionId(
  pSessionId: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWTSAPI32_dll.WTSGetChildSessionId!(util.toPointer(pSessionId)));
}

export function WTSSetRenderHint(
  pRenderHintID: Deno.PointerValue | Uint8Array /* ptr */,
  hwndOwner: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  renderHintType: number /* u32 */,
  cbHintDataLength: number /* u32 */,
  pHintData: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libWTSAPI32_dll.WTSSetRenderHint!(util.toPointer(pRenderHintID), (hwndOwner), renderHintType, cbHintDataLength, util.toPointer(pHintData));
}

export function ProcessIdToSessionId(
  dwProcessId: number /* u32 */,
  pSessionId: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.ProcessIdToSessionId!(dwProcessId, util.toPointer(pSessionId)));
}

export function WTSGetActiveConsoleSessionId(): number /* u32 */ {
  return libKERNEL32_dll.WTSGetActiveConsoleSessionId!();
}

