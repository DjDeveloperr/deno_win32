/// Auto-generated by Deno Win32: Windows.Win32.System.SideShow.Apis

import * as util from "../../util.ts";

// Enums
export type SIDESHOW_SCREEN_TYPE = number;
export type SIDESHOW_COLOR_TYPE = number;
export type SCF_EVENT_IDS = number;
export type SCF_BUTTON_IDS = number;

// Constants
export const CONTENT_ID_GLANCE = 0;
export const SIDESHOW_EVENTID_APPLICATION_ENTER = 4294901760;
export const SIDESHOW_EVENTID_APPLICATION_EXIT = 4294901761;
export const CONTENT_ID_HOME = 1;
export const VERSION_1_WINDOWS_7 = 0;
export const SIDESHOW_SCREEN_TYPE_BITMAP = 0;
export const SIDESHOW_SCREEN_TYPE_TEXT = 1;
export const SIDESHOW_COLOR_TYPE_COLOR = 0;
export const SIDESHOW_COLOR_TYPE_GREYSCALE = 1;
export const SIDESHOW_COLOR_TYPE_BLACK_AND_WHITE = 2;
export const SCF_EVENT_NAVIGATION = 1;
export const SCF_EVENT_MENUACTION = 2;
export const SCF_EVENT_CONTEXTMENU = 3;
export const SCF_BUTTON_MENU = 1;
export const SCF_BUTTON_SELECT = 2;
export const SCF_BUTTON_UP = 3;
export const SCF_BUTTON_DOWN = 4;
export const SCF_BUTTON_LEFT = 5;
export const SCF_BUTTON_RIGHT = 6;
export const SCF_BUTTON_PLAY = 7;
export const SCF_BUTTON_PAUSE = 8;
export const SCF_BUTTON_FASTFORWARD = 9;
export const SCF_BUTTON_REWIND = 10;
export const SCF_BUTTON_STOP = 11;
export const SCF_BUTTON_BACK = 65280;

// Structs

/**
 * Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY (size: 16)
 */
export interface PROPERTYKEY {
  /** System.Guid */
  fmtid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  pid: number;
}

export const sizeofPROPERTYKEY = 16;

export function allocPROPERTYKEY(data?: Partial<PROPERTYKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPERTYKEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fmtid !== undefined) view.setBigUint64(0, data.fmtid === null ? 0n : BigInt(util.toPointer(data.fmtid)), true);
  // 0x08: u32
  if (data?.pid !== undefined) view.setUint32(8, Number(data.pid), true);
  // 0x0c: pad4
  return buf;
}

export class PROPERTYKEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get fmtid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get pid(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set fmtid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set pid(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.SideShow.SCF_EVENT_HEADER (size: 8)
 */
export interface SCF_EVENT_HEADER {
  /** u32 */
  PreviousPage: number;
  /** u32 */
  TargetPage: number;
}

export const sizeofSCF_EVENT_HEADER = 8;

export function allocSCF_EVENT_HEADER(data?: Partial<SCF_EVENT_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofSCF_EVENT_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PreviousPage !== undefined) view.setUint32(0, Number(data.PreviousPage), true);
  // 0x04: u32
  if (data?.TargetPage !== undefined) view.setUint32(4, Number(data.TargetPage), true);
  return buf;
}

export class SCF_EVENT_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get PreviousPage(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get TargetPage(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set PreviousPage(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set TargetPage(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.SideShow.SCF_NAVIGATION_EVENT (size: 16)
 */
export interface SCF_NAVIGATION_EVENT {
  /** u32 */
  PreviousPage: number;
  /** u32 */
  TargetPage: number;
  /** u32 */
  Button: number;
}

export const sizeofSCF_NAVIGATION_EVENT = 16;

export function allocSCF_NAVIGATION_EVENT(data?: Partial<SCF_NAVIGATION_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofSCF_NAVIGATION_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PreviousPage !== undefined) view.setUint32(0, Number(data.PreviousPage), true);
  // 0x04: u32
  if (data?.TargetPage !== undefined) view.setUint32(4, Number(data.TargetPage), true);
  // 0x08: u32
  if (data?.Button !== undefined) view.setUint32(8, Number(data.Button), true);
  // 0x0c: pad4
  return buf;
}

export class SCF_NAVIGATION_EVENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get PreviousPage(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get TargetPage(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Button(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set PreviousPage(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set TargetPage(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Button(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.SideShow.SCF_MENUACTION_EVENT (size: 16)
 */
export interface SCF_MENUACTION_EVENT {
  /** u32 */
  PreviousPage: number;
  /** u32 */
  TargetPage: number;
  /** u32 */
  Button: number;
  /** u32 */
  ItemId: number;
}

export const sizeofSCF_MENUACTION_EVENT = 16;

export function allocSCF_MENUACTION_EVENT(data?: Partial<SCF_MENUACTION_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofSCF_MENUACTION_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PreviousPage !== undefined) view.setUint32(0, Number(data.PreviousPage), true);
  // 0x04: u32
  if (data?.TargetPage !== undefined) view.setUint32(4, Number(data.TargetPage), true);
  // 0x08: u32
  if (data?.Button !== undefined) view.setUint32(8, Number(data.Button), true);
  // 0x0c: u32
  if (data?.ItemId !== undefined) view.setUint32(12, Number(data.ItemId), true);
  return buf;
}

export class SCF_MENUACTION_EVENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get PreviousPage(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get TargetPage(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Button(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ItemId(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set PreviousPage(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set TargetPage(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Button(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ItemId(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.System.SideShow.SCF_CONTEXTMENU_EVENT (size: 24)
 */
export interface SCF_CONTEXTMENU_EVENT {
  /** u32 */
  PreviousPage: number;
  /** u32 */
  TargetPage: number;
  /** u32 */
  PreviousItemId: number;
  /** u32 */
  MenuPage: number;
  /** u32 */
  MenuItemId: number;
}

export const sizeofSCF_CONTEXTMENU_EVENT = 24;

export function allocSCF_CONTEXTMENU_EVENT(data?: Partial<SCF_CONTEXTMENU_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofSCF_CONTEXTMENU_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PreviousPage !== undefined) view.setUint32(0, Number(data.PreviousPage), true);
  // 0x04: u32
  if (data?.TargetPage !== undefined) view.setUint32(4, Number(data.TargetPage), true);
  // 0x08: u32
  if (data?.PreviousItemId !== undefined) view.setUint32(8, Number(data.PreviousItemId), true);
  // 0x0c: u32
  if (data?.MenuPage !== undefined) view.setUint32(12, Number(data.MenuPage), true);
  // 0x10: u32
  if (data?.MenuItemId !== undefined) view.setUint32(16, Number(data.MenuItemId), true);
  // 0x14: pad4
  return buf;
}

export class SCF_CONTEXTMENU_EVENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get PreviousPage(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get TargetPage(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get PreviousItemId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get MenuPage(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get MenuItemId(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set PreviousPage(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set TargetPage(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set PreviousItemId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set MenuPage(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set MenuItemId(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.System.SideShow.CONTENT_MISSING_EVENT_DATA (size: 32)
 */
export interface CONTENT_MISSING_EVENT_DATA {
  /** u32 */
  cbContentMissingEventData: number;
  /** System.Guid */
  ApplicationId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  EndpointId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ContentId: number;
}

export const sizeofCONTENT_MISSING_EVENT_DATA = 32;

export function allocCONTENT_MISSING_EVENT_DATA(data?: Partial<CONTENT_MISSING_EVENT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofCONTENT_MISSING_EVENT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbContentMissingEventData !== undefined) view.setUint32(0, Number(data.cbContentMissingEventData), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ApplicationId !== undefined) view.setBigUint64(8, data.ApplicationId === null ? 0n : BigInt(util.toPointer(data.ApplicationId)), true);
  // 0x10: pointer
  if (data?.EndpointId !== undefined) view.setBigUint64(16, data.EndpointId === null ? 0n : BigInt(util.toPointer(data.EndpointId)), true);
  // 0x18: u32
  if (data?.ContentId !== undefined) view.setUint32(24, Number(data.ContentId), true);
  // 0x1c: pad4
  return buf;
}

export class CONTENT_MISSING_EVENT_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbContentMissingEventData(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ApplicationId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get EndpointId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get ContentId(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set cbContentMissingEventData(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ApplicationId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set EndpointId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set ContentId(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.System.SideShow.APPLICATION_EVENT_DATA (size: 40)
 */
export interface APPLICATION_EVENT_DATA {
  /** u32 */
  cbApplicationEventData: number;
  /** System.Guid */
  ApplicationId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  EndpointId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwEventId: number;
  /** u32 */
  cbEventData: number;
  /** array */
  bEventData: Deno.PointerValue | null;
}

export const sizeofAPPLICATION_EVENT_DATA = 40;

export function allocAPPLICATION_EVENT_DATA(data?: Partial<APPLICATION_EVENT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofAPPLICATION_EVENT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbApplicationEventData !== undefined) view.setUint32(0, Number(data.cbApplicationEventData), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ApplicationId !== undefined) view.setBigUint64(8, data.ApplicationId === null ? 0n : BigInt(util.toPointer(data.ApplicationId)), true);
  // 0x10: pointer
  if (data?.EndpointId !== undefined) view.setBigUint64(16, data.EndpointId === null ? 0n : BigInt(util.toPointer(data.EndpointId)), true);
  // 0x18: u32
  if (data?.dwEventId !== undefined) view.setUint32(24, Number(data.dwEventId), true);
  // 0x1c: u32
  if (data?.cbEventData !== undefined) view.setUint32(28, Number(data.cbEventData), true);
  // 0x20: pointer
  if (data?.bEventData !== undefined) view.setBigUint64(32, data.bEventData === null ? 0n : BigInt(util.toPointer(data.bEventData)), true);
  return buf;
}

export class APPLICATION_EVENT_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbApplicationEventData(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ApplicationId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get EndpointId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwEventId(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get cbEventData(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get bEventData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbApplicationEventData(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ApplicationId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set EndpointId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set dwEventId(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set cbEventData(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set bEventData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.SideShow.DEVICE_USER_CHANGE_EVENT_DATA (size: 16)
 */
export interface DEVICE_USER_CHANGE_EVENT_DATA {
  /** u32 */
  cbDeviceUserChangeEventData: number;
  /** char */
  wszUser: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDEVICE_USER_CHANGE_EVENT_DATA = 16;

export function allocDEVICE_USER_CHANGE_EVENT_DATA(data?: Partial<DEVICE_USER_CHANGE_EVENT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_USER_CHANGE_EVENT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbDeviceUserChangeEventData !== undefined) view.setUint32(0, Number(data.cbDeviceUserChangeEventData), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.wszUser !== undefined) view.setBigUint64(8, data.wszUser === null ? 0n : BigInt(util.toPointer(data.wszUser)), true);
  return buf;
}

export class DEVICE_USER_CHANGE_EVENT_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbDeviceUserChangeEventData(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get wszUser(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbDeviceUserChangeEventData(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set wszUser(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.SideShow.NEW_EVENT_DATA_AVAILABLE (size: 8)
 */
export interface NEW_EVENT_DATA_AVAILABLE {
  /** u32 */
  cbNewEventDataAvailable: number;
  /** u32 */
  dwVersion: number;
}

export const sizeofNEW_EVENT_DATA_AVAILABLE = 8;

export function allocNEW_EVENT_DATA_AVAILABLE(data?: Partial<NEW_EVENT_DATA_AVAILABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofNEW_EVENT_DATA_AVAILABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbNewEventDataAvailable !== undefined) view.setUint32(0, Number(data.cbNewEventDataAvailable), true);
  // 0x04: u32
  if (data?.dwVersion !== undefined) view.setUint32(4, Number(data.dwVersion), true);
  return buf;
}

export class NEW_EVENT_DATA_AVAILABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbNewEventDataAvailable(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwVersion(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set cbNewEventDataAvailable(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwVersion(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.SideShow.EVENT_DATA_HEADER (size: 24)
 */
export interface EVENT_DATA_HEADER {
  /** u32 */
  cbEventDataHeader: number;
  /** System.Guid */
  guidEventType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwVersion: number;
  /** u32 */
  cbEventDataSid: number;
}

export const sizeofEVENT_DATA_HEADER = 24;

export function allocEVENT_DATA_HEADER(data?: Partial<EVENT_DATA_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofEVENT_DATA_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbEventDataHeader !== undefined) view.setUint32(0, Number(data.cbEventDataHeader), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.guidEventType !== undefined) view.setBigUint64(8, data.guidEventType === null ? 0n : BigInt(util.toPointer(data.guidEventType)), true);
  // 0x10: u32
  if (data?.dwVersion !== undefined) view.setUint32(16, Number(data.dwVersion), true);
  // 0x14: u32
  if (data?.cbEventDataSid !== undefined) view.setUint32(20, Number(data.cbEventDataSid), true);
  return buf;
}

export class EVENT_DATA_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbEventDataHeader(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get guidEventType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwVersion(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get cbEventDataSid(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set cbEventDataHeader(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set guidEventType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwVersion(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set cbEventDataSid(value: number) {
    this.view.setUint32(20, value, true);
  }
}

// Native Libraries

// Symbols

