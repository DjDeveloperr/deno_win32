/// Auto-generated by Deno Win32: Windows.Win32.System.Threading.Apis

import * as util from "../../util.ts";

// Enums
export type THREAD_CREATION_FLAGS = number;
export type THREAD_PRIORITY = number;
export type WORKER_THREAD_FLAGS = number;
export type CREATE_EVENT = number;
export type CREATE_PROCESS_LOGON_FLAGS = number;
export type PROCESS_AFFINITY_AUTO_UPDATE_FLAGS = number;
export type PROCESS_DEP_FLAGS = number;
export type PROCESS_NAME_FORMAT = number;
export type PROCESSOR_FEATURE_ID = number;
export type GET_GUI_RESOURCES_FLAGS = number;
export type STARTUPINFOW_FLAGS = number;
export type MEMORY_PRIORITY = number;
export type PROCESS_PROTECTION_LEVEL = number;
export type POWER_REQUEST_CONTEXT_FLAGS = number;
export type THREAD_ACCESS_RIGHTS = number;
export type PROCESS_CREATION_FLAGS = number;
export type PROCESS_ACCESS_RIGHTS = number;
export type QUEUE_USER_APC_FLAGS = number;
export type THREAD_INFORMATION_CLASS = number;
export type PROCESS_INFORMATION_CLASS = number;
export type MACHINE_ATTRIBUTES = number;
export type PROCESS_MEMORY_EXHAUSTION_TYPE = number;
export type PROCESS_MITIGATION_POLICY = number;
export type RTL_UMS_THREAD_INFO_CLASS = number;
export type TP_CALLBACK_PRIORITY = number;
export type RIP_INFO_TYPE = number;
export type PROCESSINFOCLASS = number;
export type THREADINFOCLASS = number;
export type TOKEN_ACCESS_MASK = number;

// Constants
export const THREAD_CREATE_RUN_IMMEDIATELY = 0;
export const THREAD_CREATE_SUSPENDED = 4;
export const STACK_SIZE_PARAM_IS_A_RESERVATION = 65536;
export const THREAD_MODE_BACKGROUND_BEGIN = 65536;
export const THREAD_MODE_BACKGROUND_END = 131072;
export const THREAD_PRIORITY_ABOVE_NORMAL = 1;
export const THREAD_PRIORITY_BELOW_NORMAL = "-1";
export const THREAD_PRIORITY_HIGHEST = 2;
export const THREAD_PRIORITY_IDLE = "-15";
export const THREAD_PRIORITY_MIN = "-2";
export const THREAD_PRIORITY_LOWEST = "-2";
export const THREAD_PRIORITY_NORMAL = 0;
export const THREAD_PRIORITY_TIME_CRITICAL = 15;
export const WT_EXECUTEDEFAULT = 0;
export const WT_EXECUTEINIOTHREAD = 1;
export const WT_EXECUTEINPERSISTENTTHREAD = 128;
export const WT_EXECUTEINWAITTHREAD = 4;
export const WT_EXECUTELONGFUNCTION = 16;
export const WT_EXECUTEONLYONCE = 8;
export const WT_TRANSFER_IMPERSONATION = 256;
export const WT_EXECUTEINTIMERTHREAD = 32;
export const CREATE_EVENT_INITIAL_SET = 2;
export const CREATE_EVENT_MANUAL_RESET = 1;
export const LOGON_WITH_PROFILE = 1;
export const LOGON_NETCREDENTIALS_ONLY = 2;
export const PROCESS_AFFINITY_DISABLE_AUTO_UPDATE = 0;
export const PROCESS_AFFINITY_ENABLE_AUTO_UPDATE = 1;
export const PROCESS_DEP_ENABLE = 1;
export const PROCESS_DEP_DISABLE_ATL_THUNK_EMULATION = 2;
export const PROCESS_DEP_NONE = 0;
export const PROCESS_NAME_WIN32 = 0;
export const PROCESS_NAME_NATIVE = 1;
export const PF_ARM_64BIT_LOADSTORE_ATOMIC = 25;
export const PF_ARM_DIVIDE_INSTRUCTION_AVAILABLE = 24;
export const PF_ARM_EXTERNAL_CACHE_AVAILABLE = 26;
export const PF_ARM_FMAC_INSTRUCTIONS_AVAILABLE = 27;
export const PF_ARM_VFP_32_REGISTERS_AVAILABLE = 18;
export const PF_3DNOW_INSTRUCTIONS_AVAILABLE = 7;
export const PF_CHANNELS_ENABLED = 16;
export const PF_COMPARE_EXCHANGE_DOUBLE = 2;
export const PF_COMPARE_EXCHANGE128 = 14;
export const PF_COMPARE64_EXCHANGE128 = 15;
export const PF_FASTFAIL_AVAILABLE = 23;
export const PF_FLOATING_POINT_EMULATED = 1;
export const PF_FLOATING_POINT_PRECISION_ERRATA = 0;
export const PF_MMX_INSTRUCTIONS_AVAILABLE = 3;
export const PF_NX_ENABLED = 12;
export const PF_PAE_ENABLED = 9;
export const PF_RDTSC_INSTRUCTION_AVAILABLE = 8;
export const PF_RDWRFSGSBASE_AVAILABLE = 22;
export const PF_SECOND_LEVEL_ADDRESS_TRANSLATION = 20;
export const PF_SSE3_INSTRUCTIONS_AVAILABLE = 13;
export const PF_VIRT_FIRMWARE_ENABLED = 21;
export const PF_XMMI_INSTRUCTIONS_AVAILABLE = 6;
export const PF_XMMI64_INSTRUCTIONS_AVAILABLE = 10;
export const PF_XSAVE_ENABLED = 17;
export const PF_ARM_V8_INSTRUCTIONS_AVAILABLE = 29;
export const PF_ARM_V8_CRYPTO_INSTRUCTIONS_AVAILABLE = 30;
export const PF_ARM_V8_CRC32_INSTRUCTIONS_AVAILABLE = 31;
export const PF_ARM_V81_ATOMIC_INSTRUCTIONS_AVAILABLE = 34;
export const GR_GDIOBJECTS = 0;
export const GR_GDIOBJECTS_PEAK = 2;
export const GR_USEROBJECTS = 1;
export const GR_USEROBJECTS_PEAK = 4;
export const STARTF_FORCEONFEEDBACK = 64;
export const STARTF_FORCEOFFFEEDBACK = 128;
export const STARTF_PREVENTPINNING = 8192;
export const STARTF_RUNFULLSCREEN = 32;
export const STARTF_TITLEISAPPID = 4096;
export const STARTF_TITLEISLINKNAME = 2048;
export const STARTF_UNTRUSTEDSOURCE = 32768;
export const STARTF_USECOUNTCHARS = 8;
export const STARTF_USEFILLATTRIBUTE = 16;
export const STARTF_USEHOTKEY = 512;
export const STARTF_USEPOSITION = 4;
export const STARTF_USESHOWWINDOW = 1;
export const STARTF_USESIZE = 2;
export const STARTF_USESTDHANDLES = 256;
export const MEMORY_PRIORITY_VERY_LOW = 1;
export const MEMORY_PRIORITY_LOW = 2;
export const MEMORY_PRIORITY_MEDIUM = 3;
export const MEMORY_PRIORITY_BELOW_NORMAL = 4;
export const MEMORY_PRIORITY_NORMAL = 5;
export const PROTECTION_LEVEL_WINTCB_LIGHT = 0;
export const PROTECTION_LEVEL_WINDOWS = 1;
export const PROTECTION_LEVEL_WINDOWS_LIGHT = 2;
export const PROTECTION_LEVEL_ANTIMALWARE_LIGHT = 3;
export const PROTECTION_LEVEL_LSA_LIGHT = 4;
export const PROTECTION_LEVEL_WINTCB = 5;
export const PROTECTION_LEVEL_CODEGEN_LIGHT = 6;
export const PROTECTION_LEVEL_AUTHENTICODE = 7;
export const PROTECTION_LEVEL_PPL_APP = 8;
export const PROTECTION_LEVEL_NONE = 4294967294;
export const POWER_REQUEST_CONTEXT_DETAILED_STRING = 2;
export const POWER_REQUEST_CONTEXT_SIMPLE_STRING = 1;
export const THREAD_TERMINATE = 1;
export const THREAD_SUSPEND_RESUME = 2;
export const THREAD_GET_CONTEXT = 8;
export const THREAD_SET_CONTEXT = 16;
export const THREAD_SET_INFORMATION = 32;
export const THREAD_QUERY_INFORMATION = 64;
export const THREAD_SET_THREAD_TOKEN = 128;
export const THREAD_IMPERSONATE = 256;
export const THREAD_DIRECT_IMPERSONATION = 512;
export const THREAD_SET_LIMITED_INFORMATION = 1024;
export const THREAD_QUERY_LIMITED_INFORMATION = 2048;
export const THREAD_RESUME = 4096;
export const THREAD_ALL_ACCESS = 2097151;
export const THREAD_DELETE = 65536;
export const THREAD_READ_CONTROL = 131072;
export const THREAD_WRITE_DAC = 262144;
export const THREAD_WRITE_OWNER = 524288;
export const THREAD_SYNCHRONIZE = 1048576;
export const THREAD_STANDARD_RIGHTS_REQUIRED = 983040;
export const WAIT_OBJECT_0 = 0;
export const WAIT_ABANDONED = 128;
export const WAIT_ABANDONED_0 = 128;
export const WAIT_IO_COMPLETION = 192;
export const PRIVATE_NAMESPACE_FLAG_DESTROY = 1;
export const PROC_THREAD_ATTRIBUTE_REPLACE_VALUE = 1;
export const THREAD_POWER_THROTTLING_CURRENT_VERSION = 1;
export const THREAD_POWER_THROTTLING_EXECUTION_SPEED = 1;
export const THREAD_POWER_THROTTLING_VALID_FLAGS = 1;
export const PME_CURRENT_VERSION = 1;
export const PME_FAILFAST_ON_COMMIT_FAIL_DISABLE = 0;
export const PME_FAILFAST_ON_COMMIT_FAIL_ENABLE = 1;
export const PROCESS_POWER_THROTTLING_CURRENT_VERSION = 1;
export const PROCESS_POWER_THROTTLING_EXECUTION_SPEED = 1;
export const PROCESS_POWER_THROTTLING_IGNORE_TIMER_RESOLUTION = 4;
export const PROCESS_LEAP_SECOND_INFO_FLAG_ENABLE_SIXTY_SECOND = 1;
export const PROCESS_LEAP_SECOND_INFO_VALID_FLAGS = 1;
export const INIT_ONCE_CHECK_ONLY = 1;
export const INIT_ONCE_ASYNC = 2;
export const INIT_ONCE_INIT_FAILED = 4;
export const INIT_ONCE_CTX_RESERVED_BITS = 2;
export const CONDITION_VARIABLE_LOCKMODE_SHARED = 1;
export const MUTEX_MODIFY_STATE = 1;
export const CREATE_MUTEX_INITIAL_OWNER = 1;
export const CREATE_WAITABLE_TIMER_MANUAL_RESET = 1;
export const CREATE_WAITABLE_TIMER_HIGH_RESOLUTION = 2;
export const SYNCHRONIZATION_BARRIER_FLAGS_SPIN_ONLY = 1;
export const SYNCHRONIZATION_BARRIER_FLAGS_BLOCK_ONLY = 2;
export const SYNCHRONIZATION_BARRIER_FLAGS_NO_DELETE = 4;
export const DEBUG_PROCESS = 1;
export const DEBUG_ONLY_THIS_PROCESS = 2;
export const CREATE_SUSPENDED = 4;
export const DETACHED_PROCESS = 8;
export const CREATE_NEW_CONSOLE = 16;
export const NORMAL_PRIORITY_CLASS = 32;
export const IDLE_PRIORITY_CLASS = 64;
export const HIGH_PRIORITY_CLASS = 128;
export const REALTIME_PRIORITY_CLASS = 256;
export const CREATE_NEW_PROCESS_GROUP = 512;
export const CREATE_UNICODE_ENVIRONMENT = 1024;
export const CREATE_SEPARATE_WOW_VDM = 2048;
export const CREATE_SHARED_WOW_VDM = 4096;
export const CREATE_FORCEDOS = 8192;
export const BELOW_NORMAL_PRIORITY_CLASS = 16384;
export const ABOVE_NORMAL_PRIORITY_CLASS = 32768;
export const INHERIT_PARENT_AFFINITY = 65536;
export const INHERIT_CALLER_PRIORITY = 131072;
export const CREATE_PROTECTED_PROCESS = 262144;
export const EXTENDED_STARTUPINFO_PRESENT = 524288;
export const PROCESS_MODE_BACKGROUND_BEGIN = 1048576;
export const PROCESS_MODE_BACKGROUND_END = 2097152;
export const CREATE_SECURE_PROCESS = 4194304;
export const CREATE_BREAKAWAY_FROM_JOB = 16777216;
export const CREATE_PRESERVE_CODE_AUTHZ_LEVEL = 33554432;
export const CREATE_DEFAULT_ERROR_MODE = 67108864;
export const CREATE_NO_WINDOW = 134217728;
export const PROFILE_USER = 268435456;
export const PROFILE_KERNEL = 536870912;
export const PROFILE_SERVER = 1073741824;
export const CREATE_IGNORE_SYSTEM_DEFAULT = 2147483648;
export const PROCESS_TERMINATE = 1;
export const PROCESS_CREATE_THREAD = 2;
export const PROCESS_SET_SESSIONID = 4;
export const PROCESS_VM_OPERATION = 8;
export const PROCESS_VM_READ = 16;
export const PROCESS_VM_WRITE = 32;
export const PROCESS_DUP_HANDLE = 64;
export const PROCESS_CREATE_PROCESS = 128;
export const PROCESS_SET_QUOTA = 256;
export const PROCESS_SET_INFORMATION = 512;
export const PROCESS_QUERY_INFORMATION = 1024;
export const PROCESS_SUSPEND_RESUME = 2048;
export const PROCESS_QUERY_LIMITED_INFORMATION = 4096;
export const PROCESS_SET_LIMITED_INFORMATION = 8192;
export const PROCESS_ALL_ACCESS = 2097151;
export const PROCESS_DELETE = 65536;
export const PROCESS_READ_CONTROL = 131072;
export const PROCESS_WRITE_DAC = 262144;
export const PROCESS_WRITE_OWNER = 524288;
export const PROCESS_SYNCHRONIZE = 1048576;
export const PROCESS_STANDARD_RIGHTS_REQUIRED = 983040;
export const QUEUE_USER_APC_FLAGS_NONE = 0;
export const QUEUE_USER_APC_FLAGS_SPECIAL_USER_APC = 1;
export const ThreadMemoryPriority = 0;
export const ThreadAbsoluteCpuPriority = 1;
export const ThreadDynamicCodePolicy = 2;
export const ThreadPowerThrottling = 3;
export const ThreadInformationClassMax = 4;
export const ProcessMemoryPriority = 0;
export const ProcessMemoryExhaustionInfo = 1;
export const ProcessAppMemoryInfo = 2;
export const ProcessInPrivateInfo = 3;
export const ProcessPowerThrottling = 4;
export const ProcessReservedValue1 = 5;
export const ProcessTelemetryCoverageInfo = 6;
export const ProcessProtectionLevelInfo = 7;
export const ProcessLeapSecondInfo = 8;
export const ProcessMachineTypeInfo = 9;
export const ProcessInformationClassMax = 10;
export const UserEnabled = 1;
export const KernelEnabled = 2;
export const Wow64Container = 4;
export const PMETypeFailFastOnCommitFailure = 0;
export const PMETypeMax = 1;
export const ProcessDEPPolicy = 0;
export const ProcessASLRPolicy = 1;
export const ProcessDynamicCodePolicy = 2;
export const ProcessStrictHandleCheckPolicy = 3;
export const ProcessSystemCallDisablePolicy = 4;
export const ProcessMitigationOptionsMask = 5;
export const ProcessExtensionPointDisablePolicy = 6;
export const ProcessControlFlowGuardPolicy = 7;
export const ProcessSignaturePolicy = 8;
export const ProcessFontDisablePolicy = 9;
export const ProcessImageLoadPolicy = 10;
export const ProcessSystemCallFilterPolicy = 11;
export const ProcessPayloadRestrictionPolicy = 12;
export const ProcessChildProcessPolicy = 13;
export const ProcessSideChannelIsolationPolicy = 14;
export const ProcessUserShadowStackPolicy = 15;
export const ProcessRedirectionTrustPolicy = 16;
export const MaxProcessMitigationPolicy = 17;
export const UmsThreadInvalidInfoClass = 0;
export const UmsThreadUserContext = 1;
export const UmsThreadPriority = 2;
export const UmsThreadAffinity = 3;
export const UmsThreadTeb = 4;
export const UmsThreadIsSuspended = 5;
export const UmsThreadIsTerminated = 6;
export const UmsThreadMaxInfoClass = 7;
export const TP_CALLBACK_PRIORITY_HIGH = 0;
export const TP_CALLBACK_PRIORITY_NORMAL = 1;
export const TP_CALLBACK_PRIORITY_LOW = 2;
export const TP_CALLBACK_PRIORITY_INVALID = 3;
export const TP_CALLBACK_PRIORITY_COUNT = 3;
export const SLE_ERROR = 1;
export const SLE_MINORERROR = 2;
export const SLE_WARNING = 3;
export const ProcessBasicInformation = 0;
export const ProcessDebugPort = 7;
export const ProcessWow64Information = 26;
export const ProcessImageFileName = 27;
export const ProcessBreakOnTermination = 29;
export const ThreadIsIoPending = 16;
export const ThreadNameInformation = 38;
export const TOKEN_DELETE = 65536;
export const TOKEN_READ_CONTROL = 131072;
export const TOKEN_WRITE_DAC = 262144;
export const TOKEN_WRITE_OWNER = 524288;
export const TOKEN_ACCESS_SYSTEM_SECURITY = 16777216;
export const TOKEN_ASSIGN_PRIMARY = 1;
export const TOKEN_DUPLICATE = 2;
export const TOKEN_IMPERSONATE = 4;
export const TOKEN_QUERY = 8;
export const TOKEN_QUERY_SOURCE = 16;
export const TOKEN_ADJUST_PRIVILEGES = 32;
export const TOKEN_ADJUST_GROUPS = 64;
export const TOKEN_ADJUST_DEFAULT = 128;
export const TOKEN_ADJUST_SESSIONID = 256;
export const TOKEN_ALL_ACCESS = 983295;

// Structs

export type TimerQueueHandle = Deno.PointerValue;

export type PTP_POOL = Deno.PointerValue;

export type NamespaceHandle = Deno.PointerValue;

export type BoundaryDescriptorHandle = Deno.PointerValue;

export type LPPROC_THREAD_ATTRIBUTE_LIST = Deno.PointerValue | Uint8Array | null;

export type HINSTANCE = Deno.PointerValue;

/**
 * _Detailed_e__Struct (size: 24)
 */
export interface _Detailed_e__Struct {
  /** Windows.Win32.Foundation.HINSTANCE */
  LocalizedReasonModule: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  LocalizedReasonId: number;
  /** u32 */
  ReasonStringCount: number;
  /** ptr */
  ReasonStrings: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_Detailed_e__Struct = 24;

export function alloc_Detailed_e__Struct(data?: Partial<_Detailed_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Detailed_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LocalizedReasonModule !== undefined) view.setBigUint64(0, data.LocalizedReasonModule === null ? 0n : BigInt(util.toPointer(data.LocalizedReasonModule)), true);
  // 0x08: u32
  if (data?.LocalizedReasonId !== undefined) view.setUint32(8, Number(data.LocalizedReasonId), true);
  // 0x0c: u32
  if (data?.ReasonStringCount !== undefined) view.setUint32(12, Number(data.ReasonStringCount), true);
  // 0x10: pointer
  if (data?.ReasonStrings !== undefined) view.setBigUint64(16, data.ReasonStrings === null ? 0n : BigInt(util.toPointer(data.ReasonStrings)), true);
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * _Reason_e__Union (size: 16)
 */
export interface _Reason_e__Union {
  /** _Detailed_e__Struct */
  Detailed: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  SimpleReasonString: string | null;
}

export const sizeof_Reason_e__Union = 16;

export function alloc_Reason_e__Union(data?: Partial<_Reason_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Reason_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Detailed !== undefined) view.setBigUint64(0, data.Detailed === null ? 0n : BigInt(util.toPointer(data.Detailed)), true);
  // 0x08: buffer
  if (data?.SimpleReasonString !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.SimpleReasonString);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.System.Threading.REASON_CONTEXT (size: 16)
 */
export interface REASON_CONTEXT {
  /** u32 */
  Version: number;
  /** Windows.Win32.System.Threading.POWER_REQUEST_CONTEXT_FLAGS */
  Flags: POWER_REQUEST_CONTEXT_FLAGS;
  /** _Reason_e__Union */
  Reason: Uint8Array | Deno.PointerValue | null;
}

export const sizeofREASON_CONTEXT = 16;

export function allocREASON_CONTEXT(data?: Partial<REASON_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofREASON_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.Reason !== undefined) view.setBigUint64(8, data.Reason === null ? 0n : BigInt(util.toPointer(data.Reason)), true);
  return buf;
}

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.System.Threading.PROCESS_INFORMATION (size: 24)
 */
export interface PROCESS_INFORMATION {
  /** Windows.Win32.Foundation.HANDLE */
  hProcess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwProcessId: number;
  /** u32 */
  dwThreadId: number;
}

export const sizeofPROCESS_INFORMATION = 24;

export function allocPROCESS_INFORMATION(data?: Partial<PROCESS_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hProcess !== undefined) view.setBigUint64(0, data.hProcess === null ? 0n : BigInt(util.toPointer(data.hProcess)), true);
  // 0x08: pointer
  if (data?.hThread !== undefined) view.setBigUint64(8, data.hThread === null ? 0n : BigInt(util.toPointer(data.hThread)), true);
  // 0x10: u32
  if (data?.dwProcessId !== undefined) view.setUint32(16, Number(data.dwProcessId), true);
  // 0x14: u32
  if (data?.dwThreadId !== undefined) view.setUint32(20, Number(data.dwThreadId), true);
  return buf;
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.System.Threading.STARTUPINFOA (size: 104)
 */
export interface STARTUPINFOA {
  /** u32 */
  cb: number;
  /** Windows.Win32.Foundation.PSTR */
  lpReserved: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpDesktop: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpTitle: string | null;
  /** u32 */
  dwX: number;
  /** u32 */
  dwY: number;
  /** u32 */
  dwXSize: number;
  /** u32 */
  dwYSize: number;
  /** u32 */
  dwXCountChars: number;
  /** u32 */
  dwYCountChars: number;
  /** u32 */
  dwFillAttribute: number;
  /** Windows.Win32.System.Threading.STARTUPINFOW_FLAGS */
  dwFlags: STARTUPINFOW_FLAGS;
  /** u16 */
  wShowWindow: number;
  /** u16 */
  cbReserved2: number;
  /** ptr */
  lpReserved2: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.HANDLE */
  hStdInput: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hStdOutput: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hStdError: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSTARTUPINFOA = 104;

export function allocSTARTUPINFOA(data?: Partial<STARTUPINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofSTARTUPINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cb !== undefined) view.setUint32(0, Number(data.cb), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpReserved !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpReserved);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.lpDesktop !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpDesktop);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpTitle !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpTitle);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.dwX !== undefined) view.setUint32(32, Number(data.dwX), true);
  // 0x24: u32
  if (data?.dwY !== undefined) view.setUint32(36, Number(data.dwY), true);
  // 0x28: u32
  if (data?.dwXSize !== undefined) view.setUint32(40, Number(data.dwXSize), true);
  // 0x2c: u32
  if (data?.dwYSize !== undefined) view.setUint32(44, Number(data.dwYSize), true);
  // 0x30: u32
  if (data?.dwXCountChars !== undefined) view.setUint32(48, Number(data.dwXCountChars), true);
  // 0x34: u32
  if (data?.dwYCountChars !== undefined) view.setUint32(52, Number(data.dwYCountChars), true);
  // 0x38: u32
  if (data?.dwFillAttribute !== undefined) view.setUint32(56, Number(data.dwFillAttribute), true);
  // 0x3c: u32
  if (data?.dwFlags !== undefined) view.setUint32(60, Number(data.dwFlags), true);
  // 0x40: u16
  if (data?.wShowWindow !== undefined) view.setUint16(64, Number(data.wShowWindow), true);
  // 0x42: u16
  if (data?.cbReserved2 !== undefined) view.setUint16(66, Number(data.cbReserved2), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.lpReserved2 !== undefined) view.setBigUint64(72, data.lpReserved2 === null ? 0n : BigInt(util.toPointer(data.lpReserved2)), true);
  // 0x50: pointer
  if (data?.hStdInput !== undefined) view.setBigUint64(80, data.hStdInput === null ? 0n : BigInt(util.toPointer(data.hStdInput)), true);
  // 0x58: pointer
  if (data?.hStdOutput !== undefined) view.setBigUint64(88, data.hStdOutput === null ? 0n : BigInt(util.toPointer(data.hStdOutput)), true);
  // 0x60: pointer
  if (data?.hStdError !== undefined) view.setBigUint64(96, data.hStdError === null ? 0n : BigInt(util.toPointer(data.hStdError)), true);
  return buf;
}

/**
 * Windows.Win32.System.Threading.STARTUPINFOW (size: 104)
 */
export interface STARTUPINFOW {
  /** u32 */
  cb: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpReserved: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpDesktop: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpTitle: string | null;
  /** u32 */
  dwX: number;
  /** u32 */
  dwY: number;
  /** u32 */
  dwXSize: number;
  /** u32 */
  dwYSize: number;
  /** u32 */
  dwXCountChars: number;
  /** u32 */
  dwYCountChars: number;
  /** u32 */
  dwFillAttribute: number;
  /** Windows.Win32.System.Threading.STARTUPINFOW_FLAGS */
  dwFlags: STARTUPINFOW_FLAGS;
  /** u16 */
  wShowWindow: number;
  /** u16 */
  cbReserved2: number;
  /** ptr */
  lpReserved2: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.HANDLE */
  hStdInput: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hStdOutput: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hStdError: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSTARTUPINFOW = 104;

export function allocSTARTUPINFOW(data?: Partial<STARTUPINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofSTARTUPINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cb !== undefined) view.setUint32(0, Number(data.cb), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpReserved !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpReserved);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.lpDesktop !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpDesktop);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpTitle !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpTitle);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.dwX !== undefined) view.setUint32(32, Number(data.dwX), true);
  // 0x24: u32
  if (data?.dwY !== undefined) view.setUint32(36, Number(data.dwY), true);
  // 0x28: u32
  if (data?.dwXSize !== undefined) view.setUint32(40, Number(data.dwXSize), true);
  // 0x2c: u32
  if (data?.dwYSize !== undefined) view.setUint32(44, Number(data.dwYSize), true);
  // 0x30: u32
  if (data?.dwXCountChars !== undefined) view.setUint32(48, Number(data.dwXCountChars), true);
  // 0x34: u32
  if (data?.dwYCountChars !== undefined) view.setUint32(52, Number(data.dwYCountChars), true);
  // 0x38: u32
  if (data?.dwFillAttribute !== undefined) view.setUint32(56, Number(data.dwFillAttribute), true);
  // 0x3c: u32
  if (data?.dwFlags !== undefined) view.setUint32(60, Number(data.dwFlags), true);
  // 0x40: u16
  if (data?.wShowWindow !== undefined) view.setUint16(64, Number(data.wShowWindow), true);
  // 0x42: u16
  if (data?.cbReserved2 !== undefined) view.setUint16(66, Number(data.cbReserved2), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.lpReserved2 !== undefined) view.setBigUint64(72, data.lpReserved2 === null ? 0n : BigInt(util.toPointer(data.lpReserved2)), true);
  // 0x50: pointer
  if (data?.hStdInput !== undefined) view.setBigUint64(80, data.hStdInput === null ? 0n : BigInt(util.toPointer(data.hStdInput)), true);
  // 0x58: pointer
  if (data?.hStdOutput !== undefined) view.setBigUint64(88, data.hStdOutput === null ? 0n : BigInt(util.toPointer(data.hStdOutput)), true);
  // 0x60: pointer
  if (data?.hStdError !== undefined) view.setBigUint64(96, data.hStdError === null ? 0n : BigInt(util.toPointer(data.hStdError)), true);
  return buf;
}

/**
 * Windows.Win32.System.Threading.MEMORY_PRIORITY_INFORMATION (size: 8)
 */
export interface MEMORY_PRIORITY_INFORMATION {
  /** Windows.Win32.System.Threading.MEMORY_PRIORITY */
  MemoryPriority: MEMORY_PRIORITY;
}

export const sizeofMEMORY_PRIORITY_INFORMATION = 8;

export function allocMEMORY_PRIORITY_INFORMATION(data?: Partial<MEMORY_PRIORITY_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofMEMORY_PRIORITY_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MemoryPriority !== undefined) view.setUint32(0, Number(data.MemoryPriority), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Threading.THREAD_POWER_THROTTLING_STATE (size: 16)
 */
export interface THREAD_POWER_THROTTLING_STATE {
  /** u32 */
  Version: number;
  /** u32 */
  ControlMask: number;
  /** u32 */
  StateMask: number;
}

export const sizeofTHREAD_POWER_THROTTLING_STATE = 16;

export function allocTHREAD_POWER_THROTTLING_STATE(data?: Partial<THREAD_POWER_THROTTLING_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofTHREAD_POWER_THROTTLING_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.ControlMask !== undefined) view.setUint32(4, Number(data.ControlMask), true);
  // 0x08: u32
  if (data?.StateMask !== undefined) view.setUint32(8, Number(data.StateMask), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Threading.APP_MEMORY_INFORMATION (size: 32)
 */
export interface APP_MEMORY_INFORMATION {
  /** u64 */
  AvailableCommit: Deno.PointerValue;
  /** u64 */
  PrivateCommitUsage: Deno.PointerValue;
  /** u64 */
  PeakPrivateCommitUsage: Deno.PointerValue;
  /** u64 */
  TotalCommitUsage: Deno.PointerValue;
}

export const sizeofAPP_MEMORY_INFORMATION = 32;

export function allocAPP_MEMORY_INFORMATION(data?: Partial<APP_MEMORY_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofAPP_MEMORY_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.AvailableCommit !== undefined) view.setBigUint64(0, BigInt(data.AvailableCommit), true);
  // 0x08: u64
  if (data?.PrivateCommitUsage !== undefined) view.setBigUint64(8, BigInt(data.PrivateCommitUsage), true);
  // 0x10: u64
  if (data?.PeakPrivateCommitUsage !== undefined) view.setBigUint64(16, BigInt(data.PeakPrivateCommitUsage), true);
  // 0x18: u64
  if (data?.TotalCommitUsage !== undefined) view.setBigUint64(24, BigInt(data.TotalCommitUsage), true);
  return buf;
}

/**
 * Windows.Win32.System.Threading.PROCESS_MACHINE_INFORMATION (size: 8)
 */
export interface PROCESS_MACHINE_INFORMATION {
  /** u16 */
  ProcessMachine: number;
  /** u16 */
  Res0: number;
  /** Windows.Win32.System.Threading.MACHINE_ATTRIBUTES */
  MachineAttributes: MACHINE_ATTRIBUTES;
}

export const sizeofPROCESS_MACHINE_INFORMATION = 8;

export function allocPROCESS_MACHINE_INFORMATION(data?: Partial<PROCESS_MACHINE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_MACHINE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ProcessMachine !== undefined) view.setUint16(0, Number(data.ProcessMachine), true);
  // 0x02: u16
  if (data?.Res0 !== undefined) view.setUint16(2, Number(data.Res0), true);
  // 0x04: u32
  if (data?.MachineAttributes !== undefined) view.setUint32(4, Number(data.MachineAttributes), true);
  return buf;
}

/**
 * Windows.Win32.System.Threading.PROCESS_MEMORY_EXHAUSTION_INFO (size: 16)
 */
export interface PROCESS_MEMORY_EXHAUSTION_INFO {
  /** u16 */
  Version: number;
  /** u16 */
  Reserved: number;
  /** Windows.Win32.System.Threading.PROCESS_MEMORY_EXHAUSTION_TYPE */
  Type: PROCESS_MEMORY_EXHAUSTION_TYPE;
  /** usize */
  Value: Deno.PointerValue;
}

export const sizeofPROCESS_MEMORY_EXHAUSTION_INFO = 16;

export function allocPROCESS_MEMORY_EXHAUSTION_INFO(data?: Partial<PROCESS_MEMORY_EXHAUSTION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_MEMORY_EXHAUSTION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Version !== undefined) view.setUint16(0, Number(data.Version), true);
  // 0x02: u16
  if (data?.Reserved !== undefined) view.setUint16(2, Number(data.Reserved), true);
  // 0x04: i32
  if (data?.Type !== undefined) view.setInt32(4, Number(data.Type), true);
  // 0x08: usize
  if (data?.Value !== undefined) view.setBigUint64(8, BigInt(data.Value), true);
  return buf;
}

/**
 * Windows.Win32.System.Threading.PROCESS_POWER_THROTTLING_STATE (size: 16)
 */
export interface PROCESS_POWER_THROTTLING_STATE {
  /** u32 */
  Version: number;
  /** u32 */
  ControlMask: number;
  /** u32 */
  StateMask: number;
}

export const sizeofPROCESS_POWER_THROTTLING_STATE = 16;

export function allocPROCESS_POWER_THROTTLING_STATE(data?: Partial<PROCESS_POWER_THROTTLING_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_POWER_THROTTLING_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.ControlMask !== undefined) view.setUint32(4, Number(data.ControlMask), true);
  // 0x08: u32
  if (data?.StateMask !== undefined) view.setUint32(8, Number(data.StateMask), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Threading.PROCESS_PROTECTION_LEVEL_INFORMATION (size: 8)
 */
export interface PROCESS_PROTECTION_LEVEL_INFORMATION {
  /** Windows.Win32.System.Threading.PROCESS_PROTECTION_LEVEL */
  ProtectionLevel: PROCESS_PROTECTION_LEVEL;
}

export const sizeofPROCESS_PROTECTION_LEVEL_INFORMATION = 8;

export function allocPROCESS_PROTECTION_LEVEL_INFORMATION(data?: Partial<PROCESS_PROTECTION_LEVEL_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_PROTECTION_LEVEL_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ProtectionLevel !== undefined) view.setUint32(0, Number(data.ProtectionLevel), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Threading.PROCESS_LEAP_SECOND_INFO (size: 8)
 */
export interface PROCESS_LEAP_SECOND_INFO {
  /** u32 */
  Flags: number;
  /** u32 */
  Reserved: number;
}

export const sizeofPROCESS_LEAP_SECOND_INFO = 8;

export function allocPROCESS_LEAP_SECOND_INFO(data?: Partial<PROCESS_LEAP_SECOND_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_LEAP_SECOND_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.System.Threading.PROCESS_DYNAMIC_EH_CONTINUATION_TARGET (size: 16)
 */
export interface PROCESS_DYNAMIC_EH_CONTINUATION_TARGET {
  /** usize */
  TargetAddress: Deno.PointerValue;
  /** usize */
  Flags: Deno.PointerValue;
}

export const sizeofPROCESS_DYNAMIC_EH_CONTINUATION_TARGET = 16;

export function allocPROCESS_DYNAMIC_EH_CONTINUATION_TARGET(data?: Partial<PROCESS_DYNAMIC_EH_CONTINUATION_TARGET>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_DYNAMIC_EH_CONTINUATION_TARGET);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.TargetAddress !== undefined) view.setBigUint64(0, BigInt(data.TargetAddress), true);
  // 0x08: usize
  if (data?.Flags !== undefined) view.setBigUint64(8, BigInt(data.Flags), true);
  return buf;
}

/**
 * Windows.Win32.System.Threading.PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION (size: 16)
 */
export interface PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION {
  /** u16 */
  NumberOfTargets: number;
  /** u16 */
  Reserved: number;
  /** u32 */
  Reserved2: number;
  /** ptr */
  Targets: Deno.PointerValue | Uint8Array | null;
}

export const sizeofPROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION = 16;

export function allocPROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION(data?: Partial<PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.NumberOfTargets !== undefined) view.setUint16(0, Number(data.NumberOfTargets), true);
  // 0x02: u16
  if (data?.Reserved !== undefined) view.setUint16(2, Number(data.Reserved), true);
  // 0x04: u32
  if (data?.Reserved2 !== undefined) view.setUint32(4, Number(data.Reserved2), true);
  // 0x08: pointer
  if (data?.Targets !== undefined) view.setBigUint64(8, data.Targets === null ? 0n : BigInt(util.toPointer(data.Targets)), true);
  return buf;
}

/**
 * Windows.Win32.System.Threading.PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE (size: 24)
 */
export interface PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE {
  /** usize */
  BaseAddress: Deno.PointerValue;
  /** usize */
  Size: Deno.PointerValue;
  /** u32 */
  Flags: number;
}

export const sizeofPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE = 24;

export function allocPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE(data?: Partial<PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.BaseAddress !== undefined) view.setBigUint64(0, BigInt(data.BaseAddress), true);
  // 0x08: usize
  if (data?.Size !== undefined) view.setBigUint64(8, BigInt(data.Size), true);
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.System.Threading.PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION (size: 16)
 */
export interface PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION {
  /** u16 */
  NumberOfRanges: number;
  /** u16 */
  Reserved: number;
  /** u32 */
  Reserved2: number;
  /** ptr */
  Ranges: Deno.PointerValue | Uint8Array | null;
}

export const sizeofPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION = 16;

export function allocPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION(data?: Partial<PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.NumberOfRanges !== undefined) view.setUint16(0, Number(data.NumberOfRanges), true);
  // 0x02: u16
  if (data?.Reserved !== undefined) view.setUint16(2, Number(data.Reserved), true);
  // 0x04: u32
  if (data?.Reserved2 !== undefined) view.setUint32(4, Number(data.Reserved2), true);
  // 0x08: pointer
  if (data?.Ranges !== undefined) view.setBigUint64(8, data.Ranges === null ? 0n : BigInt(util.toPointer(data.Ranges)), true);
  return buf;
}

/**
 * Windows.Win32.System.Threading.IO_COUNTERS (size: 48)
 */
export interface IO_COUNTERS {
  /** u64 */
  ReadOperationCount: Deno.PointerValue;
  /** u64 */
  WriteOperationCount: Deno.PointerValue;
  /** u64 */
  OtherOperationCount: Deno.PointerValue;
  /** u64 */
  ReadTransferCount: Deno.PointerValue;
  /** u64 */
  WriteTransferCount: Deno.PointerValue;
  /** u64 */
  OtherTransferCount: Deno.PointerValue;
}

export const sizeofIO_COUNTERS = 48;

export function allocIO_COUNTERS(data?: Partial<IO_COUNTERS>): Uint8Array {
  const buf = new Uint8Array(sizeofIO_COUNTERS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.ReadOperationCount !== undefined) view.setBigUint64(0, BigInt(data.ReadOperationCount), true);
  // 0x08: u64
  if (data?.WriteOperationCount !== undefined) view.setBigUint64(8, BigInt(data.WriteOperationCount), true);
  // 0x10: u64
  if (data?.OtherOperationCount !== undefined) view.setBigUint64(16, BigInt(data.OtherOperationCount), true);
  // 0x18: u64
  if (data?.ReadTransferCount !== undefined) view.setBigUint64(24, BigInt(data.ReadTransferCount), true);
  // 0x20: u64
  if (data?.WriteTransferCount !== undefined) view.setBigUint64(32, BigInt(data.WriteTransferCount), true);
  // 0x28: u64
  if (data?.OtherTransferCount !== undefined) view.setBigUint64(40, BigInt(data.OtherTransferCount), true);
  return buf;
}

/**
 * Windows.Win32.System.Threading.RTL_RUN_ONCE (size: 8)
 */
export interface RTL_RUN_ONCE {
  /** ptr */
  Ptr: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRTL_RUN_ONCE = 8;

export function allocRTL_RUN_ONCE(data?: Partial<RTL_RUN_ONCE>): Uint8Array {
  const buf = new Uint8Array(sizeofRTL_RUN_ONCE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Ptr !== undefined) view.setBigUint64(0, data.Ptr === null ? 0n : BigInt(util.toPointer(data.Ptr)), true);
  return buf;
}

/**
 * Windows.Win32.System.Threading.RTL_BARRIER (size: 24)
 */
export interface RTL_BARRIER {
  /** u32 */
  Reserved1: number;
  /** u32 */
  Reserved2: number;
  /** array */
  Reserved3: Deno.PointerValue | null;
  /** u32 */
  Reserved4: number;
  /** u32 */
  Reserved5: number;
}

export const sizeofRTL_BARRIER = 24;

export function allocRTL_BARRIER(data?: Partial<RTL_BARRIER>): Uint8Array {
  const buf = new Uint8Array(sizeofRTL_BARRIER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Reserved1 !== undefined) view.setUint32(0, Number(data.Reserved1), true);
  // 0x04: u32
  if (data?.Reserved2 !== undefined) view.setUint32(4, Number(data.Reserved2), true);
  // 0x08: pointer
  if (data?.Reserved3 !== undefined) view.setBigUint64(8, data.Reserved3 === null ? 0n : BigInt(util.toPointer(data.Reserved3)), true);
  // 0x10: u32
  if (data?.Reserved4 !== undefined) view.setUint32(16, Number(data.Reserved4), true);
  // 0x14: u32
  if (data?.Reserved5 !== undefined) view.setUint32(20, Number(data.Reserved5), true);
  return buf;
}

/**
 * Windows.Win32.System.Kernel.LIST_ENTRY (size: 16)
 */
export interface LIST_ENTRY {
  /** ptr */
  Flink: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Blink: Deno.PointerValue | Uint8Array | null;
}

export const sizeofLIST_ENTRY = 16;

export function allocLIST_ENTRY(data?: Partial<LIST_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofLIST_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Flink !== undefined) view.setBigUint64(0, data.Flink === null ? 0n : BigInt(util.toPointer(data.Flink)), true);
  // 0x08: pointer
  if (data?.Blink !== undefined) view.setBigUint64(8, data.Blink === null ? 0n : BigInt(util.toPointer(data.Blink)), true);
  return buf;
}

/**
 * Windows.Win32.System.Threading.RTL_CRITICAL_SECTION_DEBUG (size: 40)
 */
export interface RTL_CRITICAL_SECTION_DEBUG {
  /** u16 */
  Type: number;
  /** u16 */
  CreatorBackTraceIndex: number;
  /** ptr */
  CriticalSection: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Kernel.LIST_ENTRY */
  ProcessLocksList: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  EntryCount: number;
  /** u32 */
  ContentionCount: number;
  /** u32 */
  Flags: number;
  /** u16 */
  CreatorBackTraceIndexHigh: number;
  /** u16 */
  SpareWORD: number;
}

export const sizeofRTL_CRITICAL_SECTION_DEBUG = 40;

export function allocRTL_CRITICAL_SECTION_DEBUG(data?: Partial<RTL_CRITICAL_SECTION_DEBUG>): Uint8Array {
  const buf = new Uint8Array(sizeofRTL_CRITICAL_SECTION_DEBUG);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Type !== undefined) view.setUint16(0, Number(data.Type), true);
  // 0x02: u16
  if (data?.CreatorBackTraceIndex !== undefined) view.setUint16(2, Number(data.CreatorBackTraceIndex), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.CriticalSection !== undefined) view.setBigUint64(8, data.CriticalSection === null ? 0n : BigInt(util.toPointer(data.CriticalSection)), true);
  // 0x10: pointer
  if (data?.ProcessLocksList !== undefined) view.setBigUint64(16, data.ProcessLocksList === null ? 0n : BigInt(util.toPointer(data.ProcessLocksList)), true);
  // 0x18: u32
  if (data?.EntryCount !== undefined) view.setUint32(24, Number(data.EntryCount), true);
  // 0x1c: u32
  if (data?.ContentionCount !== undefined) view.setUint32(28, Number(data.ContentionCount), true);
  // 0x20: u32
  if (data?.Flags !== undefined) view.setUint32(32, Number(data.Flags), true);
  // 0x24: u16
  if (data?.CreatorBackTraceIndexHigh !== undefined) view.setUint16(36, Number(data.CreatorBackTraceIndexHigh), true);
  // 0x26: u16
  if (data?.SpareWORD !== undefined) view.setUint16(38, Number(data.SpareWORD), true);
  return buf;
}

/**
 * Windows.Win32.System.Threading.RTL_CRITICAL_SECTION (size: 40)
 */
export interface RTL_CRITICAL_SECTION {
  /** ptr */
  DebugInfo: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  LockCount: number;
  /** i32 */
  RecursionCount: number;
  /** Windows.Win32.Foundation.HANDLE */
  OwningThread: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  LockSemaphore: Uint8Array | Deno.PointerValue | null;
  /** usize */
  SpinCount: Deno.PointerValue;
}

export const sizeofRTL_CRITICAL_SECTION = 40;

export function allocRTL_CRITICAL_SECTION(data?: Partial<RTL_CRITICAL_SECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofRTL_CRITICAL_SECTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DebugInfo !== undefined) view.setBigUint64(0, data.DebugInfo === null ? 0n : BigInt(util.toPointer(data.DebugInfo)), true);
  // 0x08: i32
  if (data?.LockCount !== undefined) view.setInt32(8, Number(data.LockCount), true);
  // 0x0c: i32
  if (data?.RecursionCount !== undefined) view.setInt32(12, Number(data.RecursionCount), true);
  // 0x10: pointer
  if (data?.OwningThread !== undefined) view.setBigUint64(16, data.OwningThread === null ? 0n : BigInt(util.toPointer(data.OwningThread)), true);
  // 0x18: pointer
  if (data?.LockSemaphore !== undefined) view.setBigUint64(24, data.LockSemaphore === null ? 0n : BigInt(util.toPointer(data.LockSemaphore)), true);
  // 0x20: usize
  if (data?.SpinCount !== undefined) view.setBigUint64(32, BigInt(data.SpinCount), true);
  return buf;
}

/**
 * Windows.Win32.System.Threading.RTL_SRWLOCK (size: 8)
 */
export interface RTL_SRWLOCK {
  /** ptr */
  Ptr: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRTL_SRWLOCK = 8;

export function allocRTL_SRWLOCK(data?: Partial<RTL_SRWLOCK>): Uint8Array {
  const buf = new Uint8Array(sizeofRTL_SRWLOCK);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Ptr !== undefined) view.setBigUint64(0, data.Ptr === null ? 0n : BigInt(util.toPointer(data.Ptr)), true);
  return buf;
}

/**
 * Windows.Win32.System.Threading.RTL_CONDITION_VARIABLE (size: 8)
 */
export interface RTL_CONDITION_VARIABLE {
  /** ptr */
  Ptr: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRTL_CONDITION_VARIABLE = 8;

export function allocRTL_CONDITION_VARIABLE(data?: Partial<RTL_CONDITION_VARIABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofRTL_CONDITION_VARIABLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Ptr !== undefined) view.setBigUint64(0, data.Ptr === null ? 0n : BigInt(util.toPointer(data.Ptr)), true);
  return buf;
}

/**
 * Windows.Win32.System.Threading.TP_POOL_STACK_INFORMATION (size: 16)
 */
export interface TP_POOL_STACK_INFORMATION {
  /** usize */
  StackReserve: Deno.PointerValue;
  /** usize */
  StackCommit: Deno.PointerValue;
}

export const sizeofTP_POOL_STACK_INFORMATION = 16;

export function allocTP_POOL_STACK_INFORMATION(data?: Partial<TP_POOL_STACK_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofTP_POOL_STACK_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.StackReserve !== undefined) view.setBigUint64(0, BigInt(data.StackReserve), true);
  // 0x08: usize
  if (data?.StackCommit !== undefined) view.setBigUint64(8, BigInt(data.StackCommit), true);
  return buf;
}

export type NTSTATUS = number;

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD (size: 48)
 */
export interface EXCEPTION_RECORD {
  /** Windows.Win32.Foundation.NTSTATUS */
  ExceptionCode: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ExceptionFlags: number;
  /** ptr */
  ExceptionRecord: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ExceptionAddress: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumberParameters: number;
  /** array */
  ExceptionInformation: Deno.PointerValue | null;
}

export const sizeofEXCEPTION_RECORD = 48;

export function allocEXCEPTION_RECORD(data?: Partial<EXCEPTION_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionCode !== undefined) view.setBigUint64(0, data.ExceptionCode === null ? 0n : BigInt(util.toPointer(data.ExceptionCode)), true);
  // 0x08: u32
  if (data?.ExceptionFlags !== undefined) view.setUint32(8, Number(data.ExceptionFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(16, data.ExceptionRecord === null ? 0n : BigInt(util.toPointer(data.ExceptionRecord)), true);
  // 0x18: pointer
  if (data?.ExceptionAddress !== undefined) view.setBigUint64(24, data.ExceptionAddress === null ? 0n : BigInt(util.toPointer(data.ExceptionAddress)), true);
  // 0x20: u32
  if (data?.NumberParameters !== undefined) view.setUint32(32, Number(data.NumberParameters), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ExceptionInformation !== undefined) view.setBigUint64(40, data.ExceptionInformation === null ? 0n : BigInt(util.toPointer(data.ExceptionInformation)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_DEBUG_INFO (size: 16)
 */
export interface EXCEPTION_DEBUG_INFO {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD */
  ExceptionRecord: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFirstChance: number;
}

export const sizeofEXCEPTION_DEBUG_INFO = 16;

export function allocEXCEPTION_DEBUG_INFO(data?: Partial<EXCEPTION_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(0, data.ExceptionRecord === null ? 0n : BigInt(util.toPointer(data.ExceptionRecord)), true);
  // 0x08: u32
  if (data?.dwFirstChance !== undefined) view.setUint32(8, Number(data.dwFirstChance), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.CREATE_THREAD_DEBUG_INFO (size: 24)
 */
export interface CREATE_THREAD_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpThreadLocalBase: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */
  lpStartAddress: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCREATE_THREAD_DEBUG_INFO = 24;

export function allocCREATE_THREAD_DEBUG_INFO(data?: Partial<CREATE_THREAD_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_THREAD_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hThread !== undefined) view.setBigUint64(0, data.hThread === null ? 0n : BigInt(util.toPointer(data.hThread)), true);
  // 0x08: pointer
  if (data?.lpThreadLocalBase !== undefined) view.setBigUint64(8, data.lpThreadLocalBase === null ? 0n : BigInt(util.toPointer(data.lpThreadLocalBase)), true);
  // 0x10: pointer
  if (data?.lpStartAddress !== undefined) view.setBigUint64(16, data.lpStartAddress === null ? 0n : BigInt(util.toPointer(data.lpStartAddress)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.CREATE_PROCESS_DEBUG_INFO (size: 72)
 */
export interface CREATE_PROCESS_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hProcess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpBaseOfImage: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwDebugInfoFileOffset: number;
  /** u32 */
  nDebugInfoSize: number;
  /** ptr */
  lpThreadLocalBase: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */
  lpStartAddress: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpImageName: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  fUnicode: number;
}

export const sizeofCREATE_PROCESS_DEBUG_INFO = 72;

export function allocCREATE_PROCESS_DEBUG_INFO(data?: Partial<CREATE_PROCESS_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_PROCESS_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(util.toPointer(data.hFile)), true);
  // 0x08: pointer
  if (data?.hProcess !== undefined) view.setBigUint64(8, data.hProcess === null ? 0n : BigInt(util.toPointer(data.hProcess)), true);
  // 0x10: pointer
  if (data?.hThread !== undefined) view.setBigUint64(16, data.hThread === null ? 0n : BigInt(util.toPointer(data.hThread)), true);
  // 0x18: pointer
  if (data?.lpBaseOfImage !== undefined) view.setBigUint64(24, data.lpBaseOfImage === null ? 0n : BigInt(util.toPointer(data.lpBaseOfImage)), true);
  // 0x20: u32
  if (data?.dwDebugInfoFileOffset !== undefined) view.setUint32(32, Number(data.dwDebugInfoFileOffset), true);
  // 0x24: u32
  if (data?.nDebugInfoSize !== undefined) view.setUint32(36, Number(data.nDebugInfoSize), true);
  // 0x28: pointer
  if (data?.lpThreadLocalBase !== undefined) view.setBigUint64(40, data.lpThreadLocalBase === null ? 0n : BigInt(util.toPointer(data.lpThreadLocalBase)), true);
  // 0x30: pointer
  if (data?.lpStartAddress !== undefined) view.setBigUint64(48, data.lpStartAddress === null ? 0n : BigInt(util.toPointer(data.lpStartAddress)), true);
  // 0x38: pointer
  if (data?.lpImageName !== undefined) view.setBigUint64(56, data.lpImageName === null ? 0n : BigInt(util.toPointer(data.lpImageName)), true);
  // 0x40: u16
  if (data?.fUnicode !== undefined) view.setUint16(64, Number(data.fUnicode), true);
  // 0x42: pad6
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXIT_THREAD_DEBUG_INFO (size: 8)
 */
export interface EXIT_THREAD_DEBUG_INFO {
  /** u32 */
  dwExitCode: number;
}

export const sizeofEXIT_THREAD_DEBUG_INFO = 8;

export function allocEXIT_THREAD_DEBUG_INFO(data?: Partial<EXIT_THREAD_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXIT_THREAD_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExitCode !== undefined) view.setUint32(0, Number(data.dwExitCode), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXIT_PROCESS_DEBUG_INFO (size: 8)
 */
export interface EXIT_PROCESS_DEBUG_INFO {
  /** u32 */
  dwExitCode: number;
}

export const sizeofEXIT_PROCESS_DEBUG_INFO = 8;

export function allocEXIT_PROCESS_DEBUG_INFO(data?: Partial<EXIT_PROCESS_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXIT_PROCESS_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExitCode !== undefined) view.setUint32(0, Number(data.dwExitCode), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.LOAD_DLL_DEBUG_INFO (size: 40)
 */
export interface LOAD_DLL_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwDebugInfoFileOffset: number;
  /** u32 */
  nDebugInfoSize: number;
  /** ptr */
  lpImageName: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  fUnicode: number;
}

export const sizeofLOAD_DLL_DEBUG_INFO = 40;

export function allocLOAD_DLL_DEBUG_INFO(data?: Partial<LOAD_DLL_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofLOAD_DLL_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(util.toPointer(data.hFile)), true);
  // 0x08: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(8, data.lpBaseOfDll === null ? 0n : BigInt(util.toPointer(data.lpBaseOfDll)), true);
  // 0x10: u32
  if (data?.dwDebugInfoFileOffset !== undefined) view.setUint32(16, Number(data.dwDebugInfoFileOffset), true);
  // 0x14: u32
  if (data?.nDebugInfoSize !== undefined) view.setUint32(20, Number(data.nDebugInfoSize), true);
  // 0x18: pointer
  if (data?.lpImageName !== undefined) view.setBigUint64(24, data.lpImageName === null ? 0n : BigInt(util.toPointer(data.lpImageName)), true);
  // 0x20: u16
  if (data?.fUnicode !== undefined) view.setUint16(32, Number(data.fUnicode), true);
  // 0x22: pad6
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.UNLOAD_DLL_DEBUG_INFO (size: 8)
 */
export interface UNLOAD_DLL_DEBUG_INFO {
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array | null;
}

export const sizeofUNLOAD_DLL_DEBUG_INFO = 8;

export function allocUNLOAD_DLL_DEBUG_INFO(data?: Partial<UNLOAD_DLL_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofUNLOAD_DLL_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(0, data.lpBaseOfDll === null ? 0n : BigInt(util.toPointer(data.lpBaseOfDll)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.OUTPUT_DEBUG_STRING_INFO (size: 16)
 */
export interface OUTPUT_DEBUG_STRING_INFO {
  /** Windows.Win32.Foundation.PSTR */
  lpDebugStringData: string | null;
  /** u16 */
  fUnicode: number;
  /** u16 */
  nDebugStringLength: number;
}

export const sizeofOUTPUT_DEBUG_STRING_INFO = 16;

export function allocOUTPUT_DEBUG_STRING_INFO(data?: Partial<OUTPUT_DEBUG_STRING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofOUTPUT_DEBUG_STRING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpDebugStringData !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpDebugStringData);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u16
  if (data?.fUnicode !== undefined) view.setUint16(8, Number(data.fUnicode), true);
  // 0x0a: u16
  if (data?.nDebugStringLength !== undefined) view.setUint16(10, Number(data.nDebugStringLength), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.RIP_INFO (size: 8)
 */
export interface RIP_INFO {
  /** u32 */
  dwError: number;
  /** Windows.Win32.System.Diagnostics.Debug.RIP_INFO_TYPE */
  dwType: RIP_INFO_TYPE;
}

export const sizeofRIP_INFO = 8;

export function allocRIP_INFO(data?: Partial<RIP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRIP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwError !== undefined) view.setUint32(0, Number(data.dwError), true);
  // 0x04: u32
  if (data?.dwType !== undefined) view.setUint32(4, Number(data.dwType), true);
  return buf;
}

/**
 * _u_e__Union (size: 72)
 */
export interface _u_e__Union {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_DEBUG_INFO */
  Exception: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.CREATE_THREAD_DEBUG_INFO */
  CreateThread: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.CREATE_PROCESS_DEBUG_INFO */
  CreateProcessInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.EXIT_THREAD_DEBUG_INFO */
  ExitThread: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.EXIT_PROCESS_DEBUG_INFO */
  ExitProcess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.LOAD_DLL_DEBUG_INFO */
  LoadDll: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.UNLOAD_DLL_DEBUG_INFO */
  UnloadDll: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.OUTPUT_DEBUG_STRING_INFO */
  DebugString: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.RIP_INFO */
  RipInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_u_e__Union = 72;

export function alloc_u_e__Union(data?: Partial<_u_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Exception !== undefined) view.setBigUint64(0, data.Exception === null ? 0n : BigInt(util.toPointer(data.Exception)), true);
  // 0x08: pointer
  if (data?.CreateThread !== undefined) view.setBigUint64(8, data.CreateThread === null ? 0n : BigInt(util.toPointer(data.CreateThread)), true);
  // 0x10: pointer
  if (data?.CreateProcessInfo !== undefined) view.setBigUint64(16, data.CreateProcessInfo === null ? 0n : BigInt(util.toPointer(data.CreateProcessInfo)), true);
  // 0x18: pointer
  if (data?.ExitThread !== undefined) view.setBigUint64(24, data.ExitThread === null ? 0n : BigInt(util.toPointer(data.ExitThread)), true);
  // 0x20: pointer
  if (data?.ExitProcess !== undefined) view.setBigUint64(32, data.ExitProcess === null ? 0n : BigInt(util.toPointer(data.ExitProcess)), true);
  // 0x28: pointer
  if (data?.LoadDll !== undefined) view.setBigUint64(40, data.LoadDll === null ? 0n : BigInt(util.toPointer(data.LoadDll)), true);
  // 0x30: pointer
  if (data?.UnloadDll !== undefined) view.setBigUint64(48, data.UnloadDll === null ? 0n : BigInt(util.toPointer(data.UnloadDll)), true);
  // 0x38: pointer
  if (data?.DebugString !== undefined) view.setBigUint64(56, data.DebugString === null ? 0n : BigInt(util.toPointer(data.DebugString)), true);
  // 0x40: pointer
  if (data?.RipInfo !== undefined) view.setBigUint64(64, data.RipInfo === null ? 0n : BigInt(util.toPointer(data.RipInfo)), true);
  return buf;
}

/**
 * Windows.Win32.System.Threading.TP_CALLBACK_ENVIRON_V3 (size: 72)
 */
export interface TP_CALLBACK_ENVIRON_V3 {
  /** u32 */
  Version: number;
  /** Windows.Win32.System.Threading.PTP_POOL */
  Pool: Uint8Array | Deno.PointerValue | null;
  /** isize */
  CleanupGroup: Deno.PointerValue;
  /** Windows.Win32.System.Threading.PTP_CLEANUP_GROUP_CANCEL_CALLBACK */
  CleanupGroupCancelCallback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  RaceDll: Deno.PointerValue | Uint8Array | null;
  /** isize */
  ActivationContext: Deno.PointerValue;
  /** Windows.Win32.System.Threading.PTP_SIMPLE_CALLBACK */
  FinalizationCallback: Uint8Array | Deno.PointerValue | null;
  /** _u_e__Union */
  u: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Threading.TP_CALLBACK_PRIORITY */
  CallbackPriority: TP_CALLBACK_PRIORITY;
  /** u32 */
  Size: number;
}

export const sizeofTP_CALLBACK_ENVIRON_V3 = 72;

export function allocTP_CALLBACK_ENVIRON_V3(data?: Partial<TP_CALLBACK_ENVIRON_V3>): Uint8Array {
  const buf = new Uint8Array(sizeofTP_CALLBACK_ENVIRON_V3);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Pool !== undefined) view.setBigUint64(8, data.Pool === null ? 0n : BigInt(util.toPointer(data.Pool)), true);
  // 0x10: isize
  if (data?.CleanupGroup !== undefined) view.setBigInt64(16, BigInt(data.CleanupGroup), true);
  // 0x18: pointer
  if (data?.CleanupGroupCancelCallback !== undefined) view.setBigUint64(24, data.CleanupGroupCancelCallback === null ? 0n : BigInt(util.toPointer(data.CleanupGroupCancelCallback)), true);
  // 0x20: pointer
  if (data?.RaceDll !== undefined) view.setBigUint64(32, data.RaceDll === null ? 0n : BigInt(util.toPointer(data.RaceDll)), true);
  // 0x28: isize
  if (data?.ActivationContext !== undefined) view.setBigInt64(40, BigInt(data.ActivationContext), true);
  // 0x30: pointer
  if (data?.FinalizationCallback !== undefined) view.setBigUint64(48, data.FinalizationCallback === null ? 0n : BigInt(util.toPointer(data.FinalizationCallback)), true);
  // 0x38: pointer
  if (data?.u !== undefined) view.setBigUint64(56, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  // 0x40: i32
  if (data?.CallbackPriority !== undefined) view.setInt32(64, Number(data.CallbackPriority), true);
  // 0x44: u32
  if (data?.Size !== undefined) view.setUint32(68, Number(data.Size), true);
  return buf;
}

/**
 * Windows.Win32.System.Threading.UMS_SCHEDULER_STARTUP_INFO (size: 32)
 */
export interface UMS_SCHEDULER_STARTUP_INFO {
  /** u32 */
  UmsVersion: number;
  /** ptr */
  CompletionList: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Threading.PRTL_UMS_SCHEDULER_ENTRY_POINT */
  SchedulerProc: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  SchedulerParam: Deno.PointerValue | Uint8Array | null;
}

export const sizeofUMS_SCHEDULER_STARTUP_INFO = 32;

export function allocUMS_SCHEDULER_STARTUP_INFO(data?: Partial<UMS_SCHEDULER_STARTUP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofUMS_SCHEDULER_STARTUP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UmsVersion !== undefined) view.setUint32(0, Number(data.UmsVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.CompletionList !== undefined) view.setBigUint64(8, data.CompletionList === null ? 0n : BigInt(util.toPointer(data.CompletionList)), true);
  // 0x10: pointer
  if (data?.SchedulerProc !== undefined) view.setBigUint64(16, data.SchedulerProc === null ? 0n : BigInt(util.toPointer(data.SchedulerProc)), true);
  // 0x18: pointer
  if (data?.SchedulerParam !== undefined) view.setBigUint64(24, data.SchedulerParam === null ? 0n : BigInt(util.toPointer(data.SchedulerParam)), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.System.Threading.UMS_SYSTEM_THREAD_INFORMATION (size: 16)
 */
export interface UMS_SYSTEM_THREAD_INFORMATION {
  /** u32 */
  UmsVersion: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUMS_SYSTEM_THREAD_INFORMATION = 16;

export function allocUMS_SYSTEM_THREAD_INFORMATION(data?: Partial<UMS_SYSTEM_THREAD_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofUMS_SYSTEM_THREAD_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UmsVersion !== undefined) view.setUint32(0, Number(data.UmsVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.Threading.STARTUPINFOEXA (size: 16)
 */
export interface STARTUPINFOEXA {
  /** Windows.Win32.System.Threading.STARTUPINFOA */
  StartupInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Threading.LPPROC_THREAD_ATTRIBUTE_LIST */
  lpAttributeList: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSTARTUPINFOEXA = 16;

export function allocSTARTUPINFOEXA(data?: Partial<STARTUPINFOEXA>): Uint8Array {
  const buf = new Uint8Array(sizeofSTARTUPINFOEXA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.StartupInfo !== undefined) view.setBigUint64(0, data.StartupInfo === null ? 0n : BigInt(util.toPointer(data.StartupInfo)), true);
  // 0x08: pointer
  if (data?.lpAttributeList !== undefined) view.setBigUint64(8, data.lpAttributeList === null ? 0n : BigInt(util.toPointer(data.lpAttributeList)), true);
  return buf;
}

/**
 * Windows.Win32.System.Threading.STARTUPINFOEXW (size: 16)
 */
export interface STARTUPINFOEXW {
  /** Windows.Win32.System.Threading.STARTUPINFOW */
  StartupInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Threading.LPPROC_THREAD_ATTRIBUTE_LIST */
  lpAttributeList: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSTARTUPINFOEXW = 16;

export function allocSTARTUPINFOEXW(data?: Partial<STARTUPINFOEXW>): Uint8Array {
  const buf = new Uint8Array(sizeofSTARTUPINFOEXW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.StartupInfo !== undefined) view.setBigUint64(0, data.StartupInfo === null ? 0n : BigInt(util.toPointer(data.StartupInfo)), true);
  // 0x08: pointer
  if (data?.lpAttributeList !== undefined) view.setBigUint64(8, data.lpAttributeList === null ? 0n : BigInt(util.toPointer(data.lpAttributeList)), true);
  return buf;
}

/**
 * Windows.Win32.System.Threading.PEB_LDR_DATA (size: 24)
 */
export interface PEB_LDR_DATA {
  /** array */
  Reserved1: Deno.PointerValue | null;
  /** array */
  Reserved2: Deno.PointerValue | null;
  /** Windows.Win32.System.Kernel.LIST_ENTRY */
  InMemoryOrderModuleList: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPEB_LDR_DATA = 24;

export function allocPEB_LDR_DATA(data?: Partial<PEB_LDR_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofPEB_LDR_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(0, data.Reserved1 === null ? 0n : BigInt(util.toPointer(data.Reserved1)), true);
  // 0x08: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(8, data.Reserved2 === null ? 0n : BigInt(util.toPointer(data.Reserved2)), true);
  // 0x10: pointer
  if (data?.InMemoryOrderModuleList !== undefined) view.setBigUint64(16, data.InMemoryOrderModuleList === null ? 0n : BigInt(util.toPointer(data.InMemoryOrderModuleList)), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.UNICODE_STRING (size: 16)
 */
export interface UNICODE_STRING {
  /** u16 */
  Length: number;
  /** u16 */
  MaximumLength: number;
  /** Windows.Win32.Foundation.PWSTR */
  Buffer: string | null;
}

export const sizeofUNICODE_STRING = 16;

export function allocUNICODE_STRING(data?: Partial<UNICODE_STRING>): Uint8Array {
  const buf = new Uint8Array(sizeofUNICODE_STRING);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Length !== undefined) view.setUint16(0, Number(data.Length), true);
  // 0x02: u16
  if (data?.MaximumLength !== undefined) view.setUint16(2, Number(data.MaximumLength), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.Buffer !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Buffer);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.System.Threading.RTL_USER_PROCESS_PARAMETERS (size: 32)
 */
export interface RTL_USER_PROCESS_PARAMETERS {
  /** array */
  Reserved1: Deno.PointerValue | null;
  /** array */
  Reserved2: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ImagePathName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  CommandLine: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRTL_USER_PROCESS_PARAMETERS = 32;

export function allocRTL_USER_PROCESS_PARAMETERS(data?: Partial<RTL_USER_PROCESS_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofRTL_USER_PROCESS_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(0, data.Reserved1 === null ? 0n : BigInt(util.toPointer(data.Reserved1)), true);
  // 0x08: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(8, data.Reserved2 === null ? 0n : BigInt(util.toPointer(data.Reserved2)), true);
  // 0x10: pointer
  if (data?.ImagePathName !== undefined) view.setBigUint64(16, data.ImagePathName === null ? 0n : BigInt(util.toPointer(data.ImagePathName)), true);
  // 0x18: pointer
  if (data?.CommandLine !== undefined) view.setBigUint64(24, data.CommandLine === null ? 0n : BigInt(util.toPointer(data.CommandLine)), true);
  return buf;
}

/**
 * Windows.Win32.System.Threading.PEB (size: 144)
 */
export interface PEB {
  /** array */
  Reserved1: Deno.PointerValue | null;
  /** u8 */
  BeingDebugged: number;
  /** array */
  Reserved2: Deno.PointerValue | null;
  /** array */
  Reserved3: Deno.PointerValue | null;
  /** ptr */
  Ldr: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ProcessParameters: Deno.PointerValue | Uint8Array | null;
  /** array */
  Reserved4: Deno.PointerValue | null;
  /** ptr */
  AtlThunkSListPtr: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Reserved5: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Reserved6: number;
  /** ptr */
  Reserved7: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Reserved8: number;
  /** u32 */
  AtlThunkSListPtr32: number;
  /** array */
  Reserved9: Deno.PointerValue | null;
  /** array */
  Reserved10: Deno.PointerValue | null;
  /** Windows.Win32.System.Threading.PPS_POST_PROCESS_INIT_ROUTINE */
  PostProcessInitRoutine: Uint8Array | Deno.PointerValue | null;
  /** array */
  Reserved11: Deno.PointerValue | null;
  /** array */
  Reserved12: Deno.PointerValue | null;
  /** u32 */
  SessionId: number;
}

export const sizeofPEB = 144;

export function allocPEB(data?: Partial<PEB>): Uint8Array {
  const buf = new Uint8Array(sizeofPEB);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(0, data.Reserved1 === null ? 0n : BigInt(util.toPointer(data.Reserved1)), true);
  // 0x08: u8
  if (data?.BeingDebugged !== undefined) view.setUint8(8, Number(data.BeingDebugged));
  // 0x09: pad7
  // 0x10: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(16, data.Reserved2 === null ? 0n : BigInt(util.toPointer(data.Reserved2)), true);
  // 0x18: pointer
  if (data?.Reserved3 !== undefined) view.setBigUint64(24, data.Reserved3 === null ? 0n : BigInt(util.toPointer(data.Reserved3)), true);
  // 0x20: pointer
  if (data?.Ldr !== undefined) view.setBigUint64(32, data.Ldr === null ? 0n : BigInt(util.toPointer(data.Ldr)), true);
  // 0x28: pointer
  if (data?.ProcessParameters !== undefined) view.setBigUint64(40, data.ProcessParameters === null ? 0n : BigInt(util.toPointer(data.ProcessParameters)), true);
  // 0x30: pointer
  if (data?.Reserved4 !== undefined) view.setBigUint64(48, data.Reserved4 === null ? 0n : BigInt(util.toPointer(data.Reserved4)), true);
  // 0x38: pointer
  if (data?.AtlThunkSListPtr !== undefined) view.setBigUint64(56, data.AtlThunkSListPtr === null ? 0n : BigInt(util.toPointer(data.AtlThunkSListPtr)), true);
  // 0x40: pointer
  if (data?.Reserved5 !== undefined) view.setBigUint64(64, data.Reserved5 === null ? 0n : BigInt(util.toPointer(data.Reserved5)), true);
  // 0x48: u32
  if (data?.Reserved6 !== undefined) view.setUint32(72, Number(data.Reserved6), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.Reserved7 !== undefined) view.setBigUint64(80, data.Reserved7 === null ? 0n : BigInt(util.toPointer(data.Reserved7)), true);
  // 0x58: u32
  if (data?.Reserved8 !== undefined) view.setUint32(88, Number(data.Reserved8), true);
  // 0x5c: u32
  if (data?.AtlThunkSListPtr32 !== undefined) view.setUint32(92, Number(data.AtlThunkSListPtr32), true);
  // 0x60: pointer
  if (data?.Reserved9 !== undefined) view.setBigUint64(96, data.Reserved9 === null ? 0n : BigInt(util.toPointer(data.Reserved9)), true);
  // 0x68: pointer
  if (data?.Reserved10 !== undefined) view.setBigUint64(104, data.Reserved10 === null ? 0n : BigInt(util.toPointer(data.Reserved10)), true);
  // 0x70: pointer
  if (data?.PostProcessInitRoutine !== undefined) view.setBigUint64(112, data.PostProcessInitRoutine === null ? 0n : BigInt(util.toPointer(data.PostProcessInitRoutine)), true);
  // 0x78: pointer
  if (data?.Reserved11 !== undefined) view.setBigUint64(120, data.Reserved11 === null ? 0n : BigInt(util.toPointer(data.Reserved11)), true);
  // 0x80: pointer
  if (data?.Reserved12 !== undefined) view.setBigUint64(128, data.Reserved12 === null ? 0n : BigInt(util.toPointer(data.Reserved12)), true);
  // 0x88: u32
  if (data?.SessionId !== undefined) view.setUint32(136, Number(data.SessionId), true);
  // 0x8c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Threading.PROCESS_BASIC_INFORMATION (size: 40)
 */
export interface PROCESS_BASIC_INFORMATION {
  /** ptr */
  Reserved1: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  PebBaseAddress: Deno.PointerValue | Uint8Array | null;
  /** array */
  Reserved2: Deno.PointerValue | null;
  /** usize */
  UniqueProcessId: Deno.PointerValue;
  /** ptr */
  Reserved3: Deno.PointerValue | Uint8Array | null;
}

export const sizeofPROCESS_BASIC_INFORMATION = 40;

export function allocPROCESS_BASIC_INFORMATION(data?: Partial<PROCESS_BASIC_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_BASIC_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(0, data.Reserved1 === null ? 0n : BigInt(util.toPointer(data.Reserved1)), true);
  // 0x08: pointer
  if (data?.PebBaseAddress !== undefined) view.setBigUint64(8, data.PebBaseAddress === null ? 0n : BigInt(util.toPointer(data.PebBaseAddress)), true);
  // 0x10: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(16, data.Reserved2 === null ? 0n : BigInt(util.toPointer(data.Reserved2)), true);
  // 0x18: usize
  if (data?.UniqueProcessId !== undefined) view.setBigUint64(24, BigInt(data.UniqueProcessId), true);
  // 0x20: pointer
  if (data?.Reserved3 !== undefined) view.setBigUint64(32, data.Reserved3 === null ? 0n : BigInt(util.toPointer(data.Reserved3)), true);
  return buf;
}

export type BOOL = number;

export type BOOLEAN = number;

export type HRESULT = number;

export type PSID = Deno.PointerValue;

// Native Libraries

try {
  var libKERNEL32 = Deno.dlopen("KERNEL32", {
    GetProcessWorkingSetSize: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetProcessWorkingSetSize: {
      parameters: ["pointer", "usize", "usize"],
      result: "i32",
    },
    FlsAlloc: {
      parameters: ["pointer"],
      result: "u32",
    },
    FlsGetValue: {
      parameters: ["u32"],
      result: "pointer",
    },
    FlsSetValue: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    FlsFree: {
      parameters: ["u32"],
      result: "i32",
    },
    IsThreadAFiber: {
      parameters: [],
      result: "i32",
    },
    InitializeSRWLock: {
      parameters: ["pointer"],
      result: "void",
    },
    ReleaseSRWLockExclusive: {
      parameters: ["pointer"],
      result: "void",
    },
    ReleaseSRWLockShared: {
      parameters: ["pointer"],
      result: "void",
    },
    AcquireSRWLockExclusive: {
      parameters: ["pointer"],
      result: "void",
    },
    AcquireSRWLockShared: {
      parameters: ["pointer"],
      result: "void",
    },
    TryAcquireSRWLockExclusive: {
      parameters: ["pointer"],
      result: "pointer",
    },
    TryAcquireSRWLockShared: {
      parameters: ["pointer"],
      result: "pointer",
    },
    InitializeCriticalSection: {
      parameters: ["pointer"],
      result: "void",
    },
    EnterCriticalSection: {
      parameters: ["pointer"],
      result: "void",
    },
    LeaveCriticalSection: {
      parameters: ["pointer"],
      result: "void",
    },
    InitializeCriticalSectionAndSpinCount: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    InitializeCriticalSectionEx: {
      parameters: ["pointer", "u32", "u32"],
      result: "i32",
    },
    SetCriticalSectionSpinCount: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    TryEnterCriticalSection: {
      parameters: ["pointer"],
      result: "i32",
    },
    DeleteCriticalSection: {
      parameters: ["pointer"],
      result: "void",
    },
    InitOnceInitialize: {
      parameters: ["pointer"],
      result: "void",
    },
    InitOnceExecuteOnce: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    InitOnceBeginInitialize: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    InitOnceComplete: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    InitializeConditionVariable: {
      parameters: ["pointer"],
      result: "void",
    },
    WakeConditionVariable: {
      parameters: ["pointer"],
      result: "void",
    },
    WakeAllConditionVariable: {
      parameters: ["pointer"],
      result: "void",
    },
    SleepConditionVariableCS: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    SleepConditionVariableSRW: {
      parameters: ["pointer", "pointer", "u32", "u32"],
      result: "i32",
    },
    SetEvent: {
      parameters: ["pointer"],
      result: "i32",
    },
    ResetEvent: {
      parameters: ["pointer"],
      result: "i32",
    },
    ReleaseSemaphore: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    ReleaseMutex: {
      parameters: ["pointer"],
      result: "i32",
    },
    WaitForSingleObject: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    SleepEx: {
      parameters: ["u32", "i32"],
      result: "u32",
    },
    WaitForSingleObjectEx: {
      parameters: ["pointer", "u32", "i32"],
      result: "u32",
    },
    WaitForMultipleObjectsEx: {
      parameters: ["u32", "pointer", "i32", "u32", "i32"],
      result: "u32",
    },
    CreateMutexA: {
      parameters: ["pointer", "i32", "buffer"],
      result: "pointer",
    },
    CreateMutexW: {
      parameters: ["pointer", "i32", "buffer"],
      result: "pointer",
    },
    OpenMutexW: {
      parameters: ["u32", "i32", "buffer"],
      result: "pointer",
    },
    CreateEventA: {
      parameters: ["pointer", "i32", "i32", "buffer"],
      result: "pointer",
    },
    CreateEventW: {
      parameters: ["pointer", "i32", "i32", "buffer"],
      result: "pointer",
    },
    OpenEventA: {
      parameters: ["u32", "i32", "buffer"],
      result: "pointer",
    },
    OpenEventW: {
      parameters: ["u32", "i32", "buffer"],
      result: "pointer",
    },
    OpenSemaphoreW: {
      parameters: ["u32", "i32", "buffer"],
      result: "pointer",
    },
    OpenWaitableTimerW: {
      parameters: ["u32", "i32", "buffer"],
      result: "pointer",
    },
    SetWaitableTimerEx: {
      parameters: ["pointer", "pointer", "i32", "pointer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    SetWaitableTimer: {
      parameters: ["pointer", "pointer", "i32", "pointer", "pointer", "i32"],
      result: "i32",
    },
    CancelWaitableTimer: {
      parameters: ["pointer"],
      result: "i32",
    },
    CreateMutexExA: {
      parameters: ["pointer", "buffer", "u32", "u32"],
      result: "pointer",
    },
    CreateMutexExW: {
      parameters: ["pointer", "buffer", "u32", "u32"],
      result: "pointer",
    },
    CreateEventExA: {
      parameters: ["pointer", "buffer", "u32", "u32"],
      result: "pointer",
    },
    CreateEventExW: {
      parameters: ["pointer", "buffer", "u32", "u32"],
      result: "pointer",
    },
    CreateSemaphoreExW: {
      parameters: ["pointer", "i32", "i32", "buffer", "u32", "u32"],
      result: "pointer",
    },
    CreateWaitableTimerExW: {
      parameters: ["pointer", "buffer", "u32", "u32"],
      result: "pointer",
    },
    EnterSynchronizationBarrier: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    InitializeSynchronizationBarrier: {
      parameters: ["pointer", "i32", "i32"],
      result: "i32",
    },
    DeleteSynchronizationBarrier: {
      parameters: ["pointer"],
      result: "i32",
    },
    Sleep: {
      parameters: ["u32"],
      result: "void",
    },
    WaitForMultipleObjects: {
      parameters: ["u32", "pointer", "i32", "u32"],
      result: "u32",
    },
    CreateSemaphoreW: {
      parameters: ["pointer", "i32", "i32", "buffer"],
      result: "pointer",
    },
    CreateWaitableTimerW: {
      parameters: ["pointer", "i32", "buffer"],
      result: "pointer",
    },
    InitializeSListHead: {
      parameters: ["pointer"],
      result: "void",
    },
    InterlockedPopEntrySList: {
      parameters: ["pointer"],
      result: "pointer",
    },
    InterlockedPushEntrySList: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    InterlockedPushListSListEx: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "pointer",
    },
    InterlockedFlushSList: {
      parameters: ["pointer"],
      result: "pointer",
    },
    QueryDepthSList: {
      parameters: ["pointer"],
      result: "u16",
    },
    QueueUserAPC: {
      parameters: ["pointer", "pointer", "usize"],
      result: "u32",
    },
    QueueUserAPC2: {
      parameters: ["pointer", "pointer", "usize", "i32"],
      result: "i32",
    },
    GetProcessTimes: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetCurrentProcess: {
      parameters: [],
      result: "pointer",
    },
    GetCurrentProcessId: {
      parameters: [],
      result: "u32",
    },
    ExitProcess: {
      parameters: ["u32"],
      result: "void",
    },
    TerminateProcess: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    GetExitCodeProcess: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SwitchToThread: {
      parameters: [],
      result: "i32",
    },
    CreateThread: {
      parameters: ["pointer", "usize", "pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    CreateRemoteThread: {
      parameters: ["pointer", "pointer", "usize", "pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    GetCurrentThread: {
      parameters: [],
      result: "pointer",
    },
    GetCurrentThreadId: {
      parameters: [],
      result: "u32",
    },
    OpenThread: {
      parameters: ["u32", "i32", "u32"],
      result: "pointer",
    },
    SetThreadPriority: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    SetThreadPriorityBoost: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    GetThreadPriorityBoost: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetThreadPriority: {
      parameters: ["pointer"],
      result: "i32",
    },
    ExitThread: {
      parameters: ["u32"],
      result: "void",
    },
    TerminateThread: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    GetExitCodeThread: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SuspendThread: {
      parameters: ["pointer"],
      result: "u32",
    },
    ResumeThread: {
      parameters: ["pointer"],
      result: "u32",
    },
    TlsAlloc: {
      parameters: [],
      result: "u32",
    },
    TlsGetValue: {
      parameters: ["u32"],
      result: "pointer",
    },
    TlsSetValue: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    TlsFree: {
      parameters: ["u32"],
      result: "i32",
    },
    CreateProcessA: {
      parameters: ["buffer", "buffer", "pointer", "pointer", "i32", "u32", "pointer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    CreateProcessW: {
      parameters: ["buffer", "buffer", "pointer", "pointer", "i32", "u32", "pointer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    SetProcessShutdownParameters: {
      parameters: ["u32", "u32"],
      result: "i32",
    },
    GetProcessVersion: {
      parameters: ["u32"],
      result: "u32",
    },
    GetStartupInfoW: {
      parameters: ["pointer"],
      result: "void",
    },
    SetPriorityClass: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    GetPriorityClass: {
      parameters: ["pointer"],
      result: "u32",
    },
    SetThreadStackGuarantee: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetProcessId: {
      parameters: ["pointer"],
      result: "u32",
    },
    GetThreadId: {
      parameters: ["pointer"],
      result: "u32",
    },
    FlushProcessWriteBuffers: {
      parameters: [],
      result: "void",
    },
    GetProcessIdOfThread: {
      parameters: ["pointer"],
      result: "u32",
    },
    InitializeProcThreadAttributeList: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "i32",
    },
    DeleteProcThreadAttributeList: {
      parameters: ["pointer"],
      result: "void",
    },
    UpdateProcThreadAttribute: {
      parameters: ["pointer", "u32", "usize", "pointer", "usize", "pointer", "pointer"],
      result: "i32",
    },
    SetProcessDynamicEHContinuationTargets: {
      parameters: ["pointer", "u16", "pointer"],
      result: "i32",
    },
    SetProcessDynamicEnforcedCetCompatibleRanges: {
      parameters: ["pointer", "u16", "pointer"],
      result: "i32",
    },
    SetProcessAffinityUpdateMode: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    QueryProcessAffinityUpdateMode: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    CreateRemoteThreadEx: {
      parameters: ["pointer", "pointer", "usize", "pointer", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    GetCurrentThreadStackLimits: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    GetProcessMitigationPolicy: {
      parameters: ["pointer", "i32", "pointer", "usize"],
      result: "i32",
    },
    SetProcessMitigationPolicy: {
      parameters: ["i32", "pointer", "usize"],
      result: "i32",
    },
    GetThreadTimes: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    OpenProcess: {
      parameters: ["u32", "i32", "u32"],
      result: "pointer",
    },
    IsProcessorFeaturePresent: {
      parameters: ["u32"],
      result: "i32",
    },
    GetProcessHandleCount: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetCurrentProcessorNumber: {
      parameters: [],
      result: "u32",
    },
    SetThreadIdealProcessorEx: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetThreadIdealProcessorEx: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetCurrentProcessorNumberEx: {
      parameters: ["pointer"],
      result: "void",
    },
    GetProcessPriorityBoost: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetProcessPriorityBoost: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    GetThreadIOPendingFlag: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetSystemTimes: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetThreadInformation: {
      parameters: ["pointer", "i32", "pointer", "u32"],
      result: "i32",
    },
    SetThreadInformation: {
      parameters: ["pointer", "i32", "pointer", "u32"],
      result: "i32",
    },
    IsProcessCritical: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetProtectedPolicy: {
      parameters: ["pointer", "usize", "pointer"],
      result: "i32",
    },
    QueryProtectedPolicy: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetThreadIdealProcessor: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    SetProcessInformation: {
      parameters: ["pointer", "i32", "pointer", "u32"],
      result: "i32",
    },
    GetProcessInformation: {
      parameters: ["pointer", "i32", "pointer", "u32"],
      result: "i32",
    },
    GetProcessDefaultCpuSets: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    SetProcessDefaultCpuSets: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    GetThreadSelectedCpuSets: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    SetThreadSelectedCpuSets: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    GetProcessShutdownParameters: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetProcessDefaultCpuSetMasks: {
      parameters: ["pointer", "pointer", "u16", "pointer"],
      result: "i32",
    },
    SetProcessDefaultCpuSetMasks: {
      parameters: ["pointer", "pointer", "u16"],
      result: "i32",
    },
    GetThreadSelectedCpuSetMasks: {
      parameters: ["pointer", "pointer", "u16", "pointer"],
      result: "i32",
    },
    SetThreadSelectedCpuSetMasks: {
      parameters: ["pointer", "pointer", "u16"],
      result: "i32",
    },
    GetMachineTypeAttributes: {
      parameters: ["u16", "pointer"],
      result: "pointer",
    },
    SetThreadDescription: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    GetThreadDescription: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    QueueUserWorkItem: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    UnregisterWaitEx: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    CreateTimerQueue: {
      parameters: [],
      result: "pointer",
    },
    CreateTimerQueueTimer: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32", "u32", "u32"],
      result: "i32",
    },
    ChangeTimerQueueTimer: {
      parameters: ["pointer", "pointer", "u32", "u32"],
      result: "i32",
    },
    DeleteTimerQueueTimer: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    DeleteTimerQueue: {
      parameters: ["pointer"],
      result: "i32",
    },
    DeleteTimerQueueEx: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    CreateThreadpool: {
      parameters: ["pointer"],
      result: "pointer",
    },
    SetThreadpoolThreadMaximum: {
      parameters: ["pointer", "u32"],
      result: "void",
    },
    SetThreadpoolThreadMinimum: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    SetThreadpoolStackInformation: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    QueryThreadpoolStackInformation: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    CloseThreadpool: {
      parameters: ["pointer"],
      result: "void",
    },
    CreateThreadpoolCleanupGroup: {
      parameters: [],
      result: "isize",
    },
    CloseThreadpoolCleanupGroupMembers: {
      parameters: ["isize", "i32", "pointer"],
      result: "void",
    },
    CloseThreadpoolCleanupGroup: {
      parameters: ["isize"],
      result: "void",
    },
    SetEventWhenCallbackReturns: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    ReleaseSemaphoreWhenCallbackReturns: {
      parameters: ["pointer", "pointer", "u32"],
      result: "void",
    },
    ReleaseMutexWhenCallbackReturns: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    LeaveCriticalSectionWhenCallbackReturns: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    FreeLibraryWhenCallbackReturns: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    CallbackMayRunLong: {
      parameters: ["pointer"],
      result: "i32",
    },
    DisassociateCurrentThreadFromCallback: {
      parameters: ["pointer"],
      result: "void",
    },
    TrySubmitThreadpoolCallback: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    CreateThreadpoolWork: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SubmitThreadpoolWork: {
      parameters: ["pointer"],
      result: "void",
    },
    WaitForThreadpoolWorkCallbacks: {
      parameters: ["pointer", "i32"],
      result: "void",
    },
    CloseThreadpoolWork: {
      parameters: ["pointer"],
      result: "void",
    },
    CreateThreadpoolTimer: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SetThreadpoolTimer: {
      parameters: ["pointer", "pointer", "u32", "u32"],
      result: "void",
    },
    IsThreadpoolTimerSet: {
      parameters: ["pointer"],
      result: "i32",
    },
    WaitForThreadpoolTimerCallbacks: {
      parameters: ["pointer", "i32"],
      result: "void",
    },
    CloseThreadpoolTimer: {
      parameters: ["pointer"],
      result: "void",
    },
    CreateThreadpoolWait: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SetThreadpoolWait: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    WaitForThreadpoolWaitCallbacks: {
      parameters: ["pointer", "i32"],
      result: "void",
    },
    CloseThreadpoolWait: {
      parameters: ["pointer"],
      result: "void",
    },
    CreateThreadpoolIo: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    StartThreadpoolIo: {
      parameters: ["pointer"],
      result: "void",
    },
    CancelThreadpoolIo: {
      parameters: ["pointer"],
      result: "void",
    },
    WaitForThreadpoolIoCallbacks: {
      parameters: ["pointer", "i32"],
      result: "void",
    },
    CloseThreadpoolIo: {
      parameters: ["pointer"],
      result: "void",
    },
    SetThreadpoolTimerEx: {
      parameters: ["pointer", "pointer", "u32", "u32"],
      result: "i32",
    },
    SetThreadpoolWaitEx: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    IsWow64Process: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    IsWow64Process2: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    Wow64SuspendThread: {
      parameters: ["pointer"],
      result: "u32",
    },
    CreatePrivateNamespaceW: {
      parameters: ["pointer", "pointer", "buffer"],
      result: "pointer",
    },
    OpenPrivateNamespaceW: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    ClosePrivateNamespace: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    CreateBoundaryDescriptorW: {
      parameters: ["buffer", "u32"],
      result: "pointer",
    },
    AddSIDToBoundaryDescriptor: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    DeleteBoundaryDescriptor: {
      parameters: ["pointer"],
      result: "void",
    },
    GetNumaHighestNodeNumber: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetNumaNodeProcessorMaskEx: {
      parameters: ["u16", "pointer"],
      result: "i32",
    },
    GetNumaNodeProcessorMask2: {
      parameters: ["u16", "pointer", "u16", "pointer"],
      result: "i32",
    },
    GetNumaProximityNodeEx: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    GetProcessGroupAffinity: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetThreadGroupAffinity: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetThreadGroupAffinity: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetProcessAffinityMask: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetProcessAffinityMask: {
      parameters: ["pointer", "usize"],
      result: "i32",
    },
    GetProcessIoCounters: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SwitchToFiber: {
      parameters: ["pointer"],
      result: "void",
    },
    DeleteFiber: {
      parameters: ["pointer"],
      result: "void",
    },
    ConvertFiberToThread: {
      parameters: [],
      result: "i32",
    },
    CreateFiberEx: {
      parameters: ["usize", "usize", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    ConvertThreadToFiberEx: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    CreateFiber: {
      parameters: ["usize", "pointer", "pointer"],
      result: "pointer",
    },
    ConvertThreadToFiber: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CreateUmsCompletionList: {
      parameters: ["pointer"],
      result: "i32",
    },
    DequeueUmsCompletionListItems: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    GetUmsCompletionListEvent: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ExecuteUmsThread: {
      parameters: ["pointer"],
      result: "i32",
    },
    UmsThreadYield: {
      parameters: ["pointer"],
      result: "i32",
    },
    DeleteUmsCompletionList: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetCurrentUmsThread: {
      parameters: [],
      result: "pointer",
    },
    GetNextUmsListItem: {
      parameters: ["pointer"],
      result: "pointer",
    },
    QueryUmsThreadInformation: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    SetUmsThreadInformation: {
      parameters: ["pointer", "i32", "pointer", "u32"],
      result: "i32",
    },
    DeleteUmsThreadContext: {
      parameters: ["pointer"],
      result: "i32",
    },
    CreateUmsThreadContext: {
      parameters: ["pointer"],
      result: "i32",
    },
    EnterUmsSchedulingMode: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetUmsSystemThreadInformation: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetThreadAffinityMask: {
      parameters: ["pointer", "usize"],
      result: "usize",
    },
    SetProcessDEPPolicy: {
      parameters: ["u32"],
      result: "i32",
    },
    GetProcessDEPPolicy: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    PulseEvent: {
      parameters: ["pointer"],
      result: "i32",
    },
    WinExec: {
      parameters: ["buffer", "u32"],
      result: "u32",
    },
    CreateSemaphoreA: {
      parameters: ["pointer", "i32", "i32", "buffer"],
      result: "pointer",
    },
    CreateSemaphoreExA: {
      parameters: ["pointer", "i32", "i32", "buffer", "u32", "u32"],
      result: "pointer",
    },
    QueryFullProcessImageNameA: {
      parameters: ["pointer", "u32", "buffer", "pointer"],
      result: "i32",
    },
    QueryFullProcessImageNameW: {
      parameters: ["pointer", "u32", "buffer", "pointer"],
      result: "i32",
    },
    GetStartupInfoA: {
      parameters: ["pointer"],
      result: "void",
    },
    RegisterWaitForSingleObject: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32", "u32"],
      result: "i32",
    },
    UnregisterWait: {
      parameters: ["pointer"],
      result: "i32",
    },
    SetTimerQueueTimer: {
      parameters: ["pointer", "pointer", "pointer", "u32", "u32", "i32"],
      result: "pointer",
    },
    CreatePrivateNamespaceA: {
      parameters: ["pointer", "pointer", "buffer"],
      result: "pointer",
    },
    OpenPrivateNamespaceA: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    CreateBoundaryDescriptorA: {
      parameters: ["buffer", "u32"],
      result: "pointer",
    },
    AddIntegrityLabelToBoundaryDescriptor: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetActiveProcessorGroupCount: {
      parameters: [],
      result: "u16",
    },
    GetMaximumProcessorGroupCount: {
      parameters: [],
      result: "u16",
    },
    GetActiveProcessorCount: {
      parameters: ["u16"],
      result: "u32",
    },
    GetMaximumProcessorCount: {
      parameters: ["u16"],
      result: "u32",
    },
    GetNumaProcessorNode: {
      parameters: ["u8", "pointer"],
      result: "i32",
    },
    GetNumaNodeNumberFromHandle: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetNumaProcessorNodeEx: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetNumaNodeProcessorMask: {
      parameters: ["u8", "pointer"],
      result: "i32",
    },
    GetNumaAvailableMemoryNode: {
      parameters: ["u8", "pointer"],
      result: "i32",
    },
    GetNumaAvailableMemoryNodeEx: {
      parameters: ["u16", "pointer"],
      result: "i32",
    },
    GetNumaProximityNode: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libvertdll = Deno.dlopen("vertdll", {
    WaitOnAddress: {
      parameters: ["pointer", "pointer", "usize", "u32"],
      result: "i32",
    },
    WakeByAddressSingle: {
      parameters: ["pointer"],
      result: "void",
    },
    WakeByAddressAll: {
      parameters: ["pointer"],
      result: "void",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libADVAPI32 = Deno.dlopen("ADVAPI32", {
    CreateProcessAsUserW: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "pointer", "i32", "u32", "pointer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    SetThreadToken: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    OpenProcessToken: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    OpenThreadToken: {
      parameters: ["pointer", "u32", "i32", "pointer"],
      result: "i32",
    },
    CreateProcessAsUserA: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "pointer", "i32", "u32", "pointer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    CreateProcessWithLogonW: {
      parameters: ["buffer", "buffer", "buffer", "u32", "buffer", "buffer", "u32", "pointer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    CreateProcessWithTokenW: {
      parameters: ["pointer", "u32", "buffer", "buffer", "u32", "pointer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_wow64_l1_1_1 = Deno.dlopen("api-ms-win-core-wow64-l1-1-1", {
    Wow64SetThreadDefaultGuestMachine: {
      parameters: ["u16"],
      result: "u16",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libUSER32 = Deno.dlopen("USER32", {
    AttachThreadInput: {
      parameters: ["u32", "u32", "i32"],
      result: "i32",
    },
    WaitForInputIdle: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    GetGuiResources: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    IsImmersiveProcess: {
      parameters: ["pointer"],
      result: "i32",
    },
    SetProcessRestrictionExemption: {
      parameters: ["i32"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libntdll = Deno.dlopen("ntdll", {
    NtQueryInformationProcess: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    NtQueryInformationThread: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    NtSetInformationThread: {
      parameters: ["pointer", "i32", "pointer", "u32"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function GetProcessWorkingSetSize(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpMinimumWorkingSetSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpMaximumWorkingSetSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetProcessWorkingSetSize(util.toPointer(hProcess), util.toPointer(lpMinimumWorkingSetSize), util.toPointer(lpMaximumWorkingSetSize)));
}

export function SetProcessWorkingSetSize(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwMinimumWorkingSetSize: Deno.PointerValue /* usize */,
  dwMaximumWorkingSetSize: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetProcessWorkingSetSize(util.toPointer(hProcess), dwMinimumWorkingSetSize, dwMaximumWorkingSetSize));
}

export function FlsAlloc(
  lpCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.PFLS_CALLBACK_FUNCTION */,
): number /* u32 */ {
  return libKERNEL32.FlsAlloc(util.toPointer(lpCallback));
}

export function FlsGetValue(
  dwFlsIndex: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32.FlsGetValue(dwFlsIndex));
}

export function FlsSetValue(
  dwFlsIndex: number /* u32 */,
  lpFlsData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.FlsSetValue(dwFlsIndex, util.toPointer(lpFlsData)));
}

export function FlsFree(
  dwFlsIndex: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.FlsFree(dwFlsIndex));
}

export function IsThreadAFiber(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.IsThreadAFiber());
}

export function InitializeSRWLock(
  SRWLock: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32.InitializeSRWLock(util.toPointer(SRWLock));
}

export function ReleaseSRWLockExclusive(
  SRWLock: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32.ReleaseSRWLockExclusive(util.toPointer(SRWLock));
}

export function ReleaseSRWLockShared(
  SRWLock: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32.ReleaseSRWLockShared(util.toPointer(SRWLock));
}

export function AcquireSRWLockExclusive(
  SRWLock: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32.AcquireSRWLockExclusive(util.toPointer(SRWLock));
}

export function AcquireSRWLockShared(
  SRWLock: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32.AcquireSRWLockShared(util.toPointer(SRWLock));
}

export function TryAcquireSRWLockExclusive(
  SRWLock: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libKERNEL32.TryAcquireSRWLockExclusive(util.toPointer(SRWLock)));
}

export function TryAcquireSRWLockShared(
  SRWLock: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libKERNEL32.TryAcquireSRWLockShared(util.toPointer(SRWLock)));
}

export function InitializeCriticalSection(
  lpCriticalSection: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32.InitializeCriticalSection(util.toPointer(lpCriticalSection));
}

export function EnterCriticalSection(
  lpCriticalSection: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32.EnterCriticalSection(util.toPointer(lpCriticalSection));
}

export function LeaveCriticalSection(
  lpCriticalSection: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32.LeaveCriticalSection(util.toPointer(lpCriticalSection));
}

export function InitializeCriticalSectionAndSpinCount(
  lpCriticalSection: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSpinCount: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.InitializeCriticalSectionAndSpinCount(util.toPointer(lpCriticalSection), dwSpinCount));
}

export function InitializeCriticalSectionEx(
  lpCriticalSection: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSpinCount: number /* u32 */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.InitializeCriticalSectionEx(util.toPointer(lpCriticalSection), dwSpinCount, Flags));
}

export function SetCriticalSectionSpinCount(
  lpCriticalSection: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSpinCount: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32.SetCriticalSectionSpinCount(util.toPointer(lpCriticalSection), dwSpinCount);
}

export function TryEnterCriticalSection(
  lpCriticalSection: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.TryEnterCriticalSection(util.toPointer(lpCriticalSection)));
}

export function DeleteCriticalSection(
  lpCriticalSection: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32.DeleteCriticalSection(util.toPointer(lpCriticalSection));
}

export function InitOnceInitialize(
  InitOnce: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32.InitOnceInitialize(util.toPointer(InitOnce));
}

export function InitOnceExecuteOnce(
  InitOnce: Deno.PointerValue | Uint8Array | null /* ptr */,
  InitFn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.PINIT_ONCE_FN */,
  Parameter: Deno.PointerValue | Uint8Array | null /* ptr */,
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.InitOnceExecuteOnce(util.toPointer(InitOnce), util.toPointer(InitFn), util.toPointer(Parameter), util.toPointer(Context)));
}

export function InitOnceBeginInitialize(
  lpInitOnce: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  fPending: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.InitOnceBeginInitialize(util.toPointer(lpInitOnce), dwFlags, util.toPointer(fPending), util.toPointer(lpContext)));
}

export function InitOnceComplete(
  lpInitOnce: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  lpContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.InitOnceComplete(util.toPointer(lpInitOnce), dwFlags, util.toPointer(lpContext)));
}

export function InitializeConditionVariable(
  ConditionVariable: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32.InitializeConditionVariable(util.toPointer(ConditionVariable));
}

export function WakeConditionVariable(
  ConditionVariable: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32.WakeConditionVariable(util.toPointer(ConditionVariable));
}

export function WakeAllConditionVariable(
  ConditionVariable: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32.WakeAllConditionVariable(util.toPointer(ConditionVariable));
}

export function SleepConditionVariableCS(
  ConditionVariable: Deno.PointerValue | Uint8Array | null /* ptr */,
  CriticalSection: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwMilliseconds: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SleepConditionVariableCS(util.toPointer(ConditionVariable), util.toPointer(CriticalSection), dwMilliseconds));
}

export function SleepConditionVariableSRW(
  ConditionVariable: Deno.PointerValue | Uint8Array | null /* ptr */,
  SRWLock: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwMilliseconds: number /* u32 */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SleepConditionVariableSRW(util.toPointer(ConditionVariable), util.toPointer(SRWLock), dwMilliseconds, Flags));
}

export function SetEvent(
  hEvent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetEvent(util.toPointer(hEvent)));
}

export function ResetEvent(
  hEvent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.ResetEvent(util.toPointer(hEvent)));
}

export function ReleaseSemaphore(
  hSemaphore: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lReleaseCount: number /* i32 */,
  lpPreviousCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.ReleaseSemaphore(util.toPointer(hSemaphore), lReleaseCount, util.toPointer(lpPreviousCount)));
}

export function ReleaseMutex(
  hMutex: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.ReleaseMutex(util.toPointer(hMutex)));
}

export function WaitForSingleObject(
  hHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwMilliseconds: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32.WaitForSingleObject(util.toPointer(hHandle), dwMilliseconds);
}

export function SleepEx(
  dwMilliseconds: number /* u32 */,
  bAlertable: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libKERNEL32.SleepEx(dwMilliseconds, util.boolToFfi(bAlertable));
}

export function WaitForSingleObjectEx(
  hHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwMilliseconds: number /* u32 */,
  bAlertable: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libKERNEL32.WaitForSingleObjectEx(util.toPointer(hHandle), dwMilliseconds, util.boolToFfi(bAlertable));
}

export function WaitForMultipleObjectsEx(
  nCount: number /* u32 */,
  lpHandles: Deno.PointerValue | Uint8Array | null /* ptr */,
  bWaitAll: boolean /* Windows.Win32.Foundation.BOOL */,
  dwMilliseconds: number /* u32 */,
  bAlertable: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libKERNEL32.WaitForMultipleObjectsEx(nCount, util.toPointer(lpHandles), util.boolToFfi(bWaitAll), dwMilliseconds, util.boolToFfi(bAlertable));
}

export function CreateMutexA(
  lpMutexAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  bInitialOwner: boolean /* Windows.Win32.Foundation.BOOL */,
  lpName: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32.CreateMutexA(util.toPointer(lpMutexAttributes), util.boolToFfi(bInitialOwner), util.pstrToFfi(lpName)));
}

export function CreateMutexW(
  lpMutexAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  bInitialOwner: boolean /* Windows.Win32.Foundation.BOOL */,
  lpName: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32.CreateMutexW(util.toPointer(lpMutexAttributes), util.boolToFfi(bInitialOwner), util.pwstrToFfi(lpName)));
}

export function OpenMutexW(
  dwDesiredAccess: number /* u32 */,
  bInheritHandle: boolean /* Windows.Win32.Foundation.BOOL */,
  lpName: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32.OpenMutexW(dwDesiredAccess, util.boolToFfi(bInheritHandle), util.pwstrToFfi(lpName)));
}

export function CreateEventA(
  lpEventAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  bManualReset: boolean /* Windows.Win32.Foundation.BOOL */,
  bInitialState: boolean /* Windows.Win32.Foundation.BOOL */,
  lpName: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32.CreateEventA(util.toPointer(lpEventAttributes), util.boolToFfi(bManualReset), util.boolToFfi(bInitialState), util.pstrToFfi(lpName)));
}

export function CreateEventW(
  lpEventAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  bManualReset: boolean /* Windows.Win32.Foundation.BOOL */,
  bInitialState: boolean /* Windows.Win32.Foundation.BOOL */,
  lpName: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32.CreateEventW(util.toPointer(lpEventAttributes), util.boolToFfi(bManualReset), util.boolToFfi(bInitialState), util.pwstrToFfi(lpName)));
}

export function OpenEventA(
  dwDesiredAccess: number /* u32 */,
  bInheritHandle: boolean /* Windows.Win32.Foundation.BOOL */,
  lpName: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32.OpenEventA(dwDesiredAccess, util.boolToFfi(bInheritHandle), util.pstrToFfi(lpName)));
}

export function OpenEventW(
  dwDesiredAccess: number /* u32 */,
  bInheritHandle: boolean /* Windows.Win32.Foundation.BOOL */,
  lpName: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32.OpenEventW(dwDesiredAccess, util.boolToFfi(bInheritHandle), util.pwstrToFfi(lpName)));
}

export function OpenSemaphoreW(
  dwDesiredAccess: number /* u32 */,
  bInheritHandle: boolean /* Windows.Win32.Foundation.BOOL */,
  lpName: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32.OpenSemaphoreW(dwDesiredAccess, util.boolToFfi(bInheritHandle), util.pwstrToFfi(lpName)));
}

export function OpenWaitableTimerW(
  dwDesiredAccess: number /* u32 */,
  bInheritHandle: boolean /* Windows.Win32.Foundation.BOOL */,
  lpTimerName: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32.OpenWaitableTimerW(dwDesiredAccess, util.boolToFfi(bInheritHandle), util.pwstrToFfi(lpTimerName)));
}

export function SetWaitableTimerEx(
  hTimer: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpDueTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  lPeriod: number /* i32 */,
  pfnCompletionRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.PTIMERAPCROUTINE */,
  lpArgToCompletionRoutine: Deno.PointerValue | Uint8Array | null /* ptr */,
  WakeContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  TolerableDelay: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetWaitableTimerEx(util.toPointer(hTimer), util.toPointer(lpDueTime), lPeriod, util.toPointer(pfnCompletionRoutine), util.toPointer(lpArgToCompletionRoutine), util.toPointer(WakeContext), TolerableDelay));
}

export function SetWaitableTimer(
  hTimer: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpDueTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  lPeriod: number /* i32 */,
  pfnCompletionRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.PTIMERAPCROUTINE */,
  lpArgToCompletionRoutine: Deno.PointerValue | Uint8Array | null /* ptr */,
  fResume: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetWaitableTimer(util.toPointer(hTimer), util.toPointer(lpDueTime), lPeriod, util.toPointer(pfnCompletionRoutine), util.toPointer(lpArgToCompletionRoutine), util.boolToFfi(fResume)));
}

export function CancelWaitableTimer(
  hTimer: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.CancelWaitableTimer(util.toPointer(hTimer)));
}

export function CreateMutexExA(
  lpMutexAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpName: string | null /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
  dwDesiredAccess: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32.CreateMutexExA(util.toPointer(lpMutexAttributes), util.pstrToFfi(lpName), dwFlags, dwDesiredAccess));
}

export function CreateMutexExW(
  lpMutexAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  dwDesiredAccess: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32.CreateMutexExW(util.toPointer(lpMutexAttributes), util.pwstrToFfi(lpName), dwFlags, dwDesiredAccess));
}

export function CreateEventExA(
  lpEventAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpName: string | null /* Windows.Win32.Foundation.PSTR */,
  dwFlags: CREATE_EVENT /* Windows.Win32.System.Threading.CREATE_EVENT */,
  dwDesiredAccess: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32.CreateEventExA(util.toPointer(lpEventAttributes), util.pstrToFfi(lpName), dwFlags, dwDesiredAccess));
}

export function CreateEventExW(
  lpEventAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: CREATE_EVENT /* Windows.Win32.System.Threading.CREATE_EVENT */,
  dwDesiredAccess: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32.CreateEventExW(util.toPointer(lpEventAttributes), util.pwstrToFfi(lpName), dwFlags, dwDesiredAccess));
}

export function CreateSemaphoreExW(
  lpSemaphoreAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lInitialCount: number /* i32 */,
  lMaximumCount: number /* i32 */,
  lpName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  dwDesiredAccess: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32.CreateSemaphoreExW(util.toPointer(lpSemaphoreAttributes), lInitialCount, lMaximumCount, util.pwstrToFfi(lpName), dwFlags, dwDesiredAccess));
}

export function CreateWaitableTimerExW(
  lpTimerAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpTimerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  dwDesiredAccess: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32.CreateWaitableTimerExW(util.toPointer(lpTimerAttributes), util.pwstrToFfi(lpTimerName), dwFlags, dwDesiredAccess));
}

export function EnterSynchronizationBarrier(
  lpBarrier: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.EnterSynchronizationBarrier(util.toPointer(lpBarrier), dwFlags));
}

export function InitializeSynchronizationBarrier(
  lpBarrier: Deno.PointerValue | Uint8Array | null /* ptr */,
  lTotalThreads: number /* i32 */,
  lSpinCount: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.InitializeSynchronizationBarrier(util.toPointer(lpBarrier), lTotalThreads, lSpinCount));
}

export function DeleteSynchronizationBarrier(
  lpBarrier: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.DeleteSynchronizationBarrier(util.toPointer(lpBarrier)));
}

export function Sleep(
  dwMilliseconds: number /* u32 */,
): void /* void */ {
  return libKERNEL32.Sleep(dwMilliseconds);
}

export function WaitOnAddress(
  Address: Deno.PointerValue | Uint8Array | null /* ptr */,
  CompareAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  AddressSize: Deno.PointerValue /* usize */,
  dwMilliseconds: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libvertdll.WaitOnAddress(util.toPointer(Address), util.toPointer(CompareAddress), AddressSize, dwMilliseconds));
}

export function WakeByAddressSingle(
  Address: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libvertdll.WakeByAddressSingle(util.toPointer(Address));
}

export function WakeByAddressAll(
  Address: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libvertdll.WakeByAddressAll(util.toPointer(Address));
}

export function WaitForMultipleObjects(
  nCount: number /* u32 */,
  lpHandles: Deno.PointerValue | Uint8Array | null /* ptr */,
  bWaitAll: boolean /* Windows.Win32.Foundation.BOOL */,
  dwMilliseconds: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32.WaitForMultipleObjects(nCount, util.toPointer(lpHandles), util.boolToFfi(bWaitAll), dwMilliseconds);
}

export function CreateSemaphoreW(
  lpSemaphoreAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lInitialCount: number /* i32 */,
  lMaximumCount: number /* i32 */,
  lpName: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32.CreateSemaphoreW(util.toPointer(lpSemaphoreAttributes), lInitialCount, lMaximumCount, util.pwstrToFfi(lpName)));
}

export function CreateWaitableTimerW(
  lpTimerAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  bManualReset: boolean /* Windows.Win32.Foundation.BOOL */,
  lpTimerName: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32.CreateWaitableTimerW(util.toPointer(lpTimerAttributes), util.boolToFfi(bManualReset), util.pwstrToFfi(lpTimerName)));
}

export function InitializeSListHead(
  ListHead: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32.InitializeSListHead(util.toPointer(ListHead));
}

export function InterlockedPopEntrySList(
  ListHead: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32.InterlockedPopEntrySList(util.toPointer(ListHead)));
}

export function InterlockedPushEntrySList(
  ListHead: Deno.PointerValue | Uint8Array | null /* ptr */,
  ListEntry: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32.InterlockedPushEntrySList(util.toPointer(ListHead), util.toPointer(ListEntry)));
}

export function InterlockedPushListSListEx(
  ListHead: Deno.PointerValue | Uint8Array | null /* ptr */,
  List: Deno.PointerValue | Uint8Array | null /* ptr */,
  ListEnd: Deno.PointerValue | Uint8Array | null /* ptr */,
  Count: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32.InterlockedPushListSListEx(util.toPointer(ListHead), util.toPointer(List), util.toPointer(ListEnd), Count));
}

export function InterlockedFlushSList(
  ListHead: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32.InterlockedFlushSList(util.toPointer(ListHead)));
}

export function QueryDepthSList(
  ListHead: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u16 */ {
  return libKERNEL32.QueryDepthSList(util.toPointer(ListHead));
}

export function QueueUserAPC(
  pfnAPC: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PAPCFUNC */,
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwData: Deno.PointerValue /* usize */,
): number /* u32 */ {
  return libKERNEL32.QueueUserAPC(util.toPointer(pfnAPC), util.toPointer(hThread), dwData);
}

export function QueueUserAPC2(
  ApcRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PAPCFUNC */,
  Thread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Data: Deno.PointerValue /* usize */,
  Flags: QUEUE_USER_APC_FLAGS /* Windows.Win32.System.Threading.QUEUE_USER_APC_FLAGS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.QueueUserAPC2(util.toPointer(ApcRoutine), util.toPointer(Thread), Data, Flags));
}

export function GetProcessTimes(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpCreationTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpExitTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpKernelTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpUserTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetProcessTimes(util.toPointer(hProcess), util.toPointer(lpCreationTime), util.toPointer(lpExitTime), util.toPointer(lpKernelTime), util.toPointer(lpUserTime)));
}

export function GetCurrentProcess(): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32.GetCurrentProcess());
}

export function GetCurrentProcessId(): number /* u32 */ {
  return libKERNEL32.GetCurrentProcessId();
}

export function ExitProcess(
  uExitCode: number /* u32 */,
): void /* void */ {
  return libKERNEL32.ExitProcess(uExitCode);
}

export function TerminateProcess(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  uExitCode: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.TerminateProcess(util.toPointer(hProcess), uExitCode));
}

export function GetExitCodeProcess(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpExitCode: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetExitCodeProcess(util.toPointer(hProcess), util.toPointer(lpExitCode)));
}

export function SwitchToThread(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SwitchToThread());
}

export function CreateThread(
  lpThreadAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwStackSize: Deno.PointerValue /* usize */,
  lpStartAddress: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */,
  lpParameter: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwCreationFlags: THREAD_CREATION_FLAGS /* Windows.Win32.System.Threading.THREAD_CREATION_FLAGS */,
  lpThreadId: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32.CreateThread(util.toPointer(lpThreadAttributes), dwStackSize, util.toPointer(lpStartAddress), util.toPointer(lpParameter), dwCreationFlags, util.toPointer(lpThreadId)));
}

export function CreateRemoteThread(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpThreadAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwStackSize: Deno.PointerValue /* usize */,
  lpStartAddress: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */,
  lpParameter: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwCreationFlags: number /* u32 */,
  lpThreadId: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32.CreateRemoteThread(util.toPointer(hProcess), util.toPointer(lpThreadAttributes), dwStackSize, util.toPointer(lpStartAddress), util.toPointer(lpParameter), dwCreationFlags, util.toPointer(lpThreadId)));
}

export function GetCurrentThread(): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32.GetCurrentThread());
}

export function GetCurrentThreadId(): number /* u32 */ {
  return libKERNEL32.GetCurrentThreadId();
}

export function OpenThread(
  dwDesiredAccess: THREAD_ACCESS_RIGHTS /* Windows.Win32.System.Threading.THREAD_ACCESS_RIGHTS */,
  bInheritHandle: boolean /* Windows.Win32.Foundation.BOOL */,
  dwThreadId: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32.OpenThread(dwDesiredAccess, util.boolToFfi(bInheritHandle), dwThreadId));
}

export function SetThreadPriority(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  nPriority: THREAD_PRIORITY /* Windows.Win32.System.Threading.THREAD_PRIORITY */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetThreadPriority(util.toPointer(hThread), nPriority));
}

export function SetThreadPriorityBoost(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  bDisablePriorityBoost: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetThreadPriorityBoost(util.toPointer(hThread), util.boolToFfi(bDisablePriorityBoost)));
}

export function GetThreadPriorityBoost(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pDisablePriorityBoost: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetThreadPriorityBoost(util.toPointer(hThread), util.toPointer(pDisablePriorityBoost)));
}

export function GetThreadPriority(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* i32 */ {
  return libKERNEL32.GetThreadPriority(util.toPointer(hThread));
}

export function ExitThread(
  dwExitCode: number /* u32 */,
): void /* void */ {
  return libKERNEL32.ExitThread(dwExitCode);
}

export function TerminateThread(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwExitCode: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.TerminateThread(util.toPointer(hThread), dwExitCode));
}

export function GetExitCodeThread(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpExitCode: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetExitCodeThread(util.toPointer(hThread), util.toPointer(lpExitCode)));
}

export function SuspendThread(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libKERNEL32.SuspendThread(util.toPointer(hThread));
}

export function ResumeThread(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libKERNEL32.ResumeThread(util.toPointer(hThread));
}

export function TlsAlloc(): number /* u32 */ {
  return libKERNEL32.TlsAlloc();
}

export function TlsGetValue(
  dwTlsIndex: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32.TlsGetValue(dwTlsIndex));
}

export function TlsSetValue(
  dwTlsIndex: number /* u32 */,
  lpTlsValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.TlsSetValue(dwTlsIndex, util.toPointer(lpTlsValue)));
}

export function TlsFree(
  dwTlsIndex: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.TlsFree(dwTlsIndex));
}

export function CreateProcessA(
  lpApplicationName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpCommandLine: string | null /* Windows.Win32.Foundation.PSTR */,
  lpProcessAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpThreadAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  bInheritHandles: boolean /* Windows.Win32.Foundation.BOOL */,
  dwCreationFlags: PROCESS_CREATION_FLAGS /* Windows.Win32.System.Threading.PROCESS_CREATION_FLAGS */,
  lpEnvironment: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCurrentDirectory: string | null /* Windows.Win32.Foundation.PSTR */,
  lpStartupInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpProcessInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.CreateProcessA(util.pstrToFfi(lpApplicationName), util.pstrToFfi(lpCommandLine), util.toPointer(lpProcessAttributes), util.toPointer(lpThreadAttributes), util.boolToFfi(bInheritHandles), dwCreationFlags, util.toPointer(lpEnvironment), util.pstrToFfi(lpCurrentDirectory), util.toPointer(lpStartupInfo), util.toPointer(lpProcessInformation)));
}

export function CreateProcessW(
  lpApplicationName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpCommandLine: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpProcessAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpThreadAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  bInheritHandles: boolean /* Windows.Win32.Foundation.BOOL */,
  dwCreationFlags: PROCESS_CREATION_FLAGS /* Windows.Win32.System.Threading.PROCESS_CREATION_FLAGS */,
  lpEnvironment: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCurrentDirectory: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpStartupInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpProcessInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.CreateProcessW(util.pwstrToFfi(lpApplicationName), util.pwstrToFfi(lpCommandLine), util.toPointer(lpProcessAttributes), util.toPointer(lpThreadAttributes), util.boolToFfi(bInheritHandles), dwCreationFlags, util.toPointer(lpEnvironment), util.pwstrToFfi(lpCurrentDirectory), util.toPointer(lpStartupInfo), util.toPointer(lpProcessInformation)));
}

export function SetProcessShutdownParameters(
  dwLevel: number /* u32 */,
  dwFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetProcessShutdownParameters(dwLevel, dwFlags));
}

export function GetProcessVersion(
  ProcessId: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32.GetProcessVersion(ProcessId);
}

export function GetStartupInfoW(
  lpStartupInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32.GetStartupInfoW(util.toPointer(lpStartupInfo));
}

export function CreateProcessAsUserW(
  hToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpApplicationName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpCommandLine: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpProcessAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpThreadAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  bInheritHandles: boolean /* Windows.Win32.Foundation.BOOL */,
  dwCreationFlags: number /* u32 */,
  lpEnvironment: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCurrentDirectory: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpStartupInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpProcessInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32.CreateProcessAsUserW(util.toPointer(hToken), util.pwstrToFfi(lpApplicationName), util.pwstrToFfi(lpCommandLine), util.toPointer(lpProcessAttributes), util.toPointer(lpThreadAttributes), util.boolToFfi(bInheritHandles), dwCreationFlags, util.toPointer(lpEnvironment), util.pwstrToFfi(lpCurrentDirectory), util.toPointer(lpStartupInfo), util.toPointer(lpProcessInformation)));
}

export function SetThreadToken(
  Thread: Deno.PointerValue | Uint8Array | null /* ptr */,
  Token: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32.SetThreadToken(util.toPointer(Thread), util.toPointer(Token)));
}

export function OpenProcessToken(
  ProcessHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  DesiredAccess: TOKEN_ACCESS_MASK /* Windows.Win32.Security.TOKEN_ACCESS_MASK */,
  TokenHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32.OpenProcessToken(util.toPointer(ProcessHandle), DesiredAccess, util.toPointer(TokenHandle)));
}

export function OpenThreadToken(
  ThreadHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  DesiredAccess: TOKEN_ACCESS_MASK /* Windows.Win32.Security.TOKEN_ACCESS_MASK */,
  OpenAsSelf: boolean /* Windows.Win32.Foundation.BOOL */,
  TokenHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32.OpenThreadToken(util.toPointer(ThreadHandle), DesiredAccess, util.boolToFfi(OpenAsSelf), util.toPointer(TokenHandle)));
}

export function SetPriorityClass(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwPriorityClass: PROCESS_CREATION_FLAGS /* Windows.Win32.System.Threading.PROCESS_CREATION_FLAGS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetPriorityClass(util.toPointer(hProcess), dwPriorityClass));
}

export function GetPriorityClass(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libKERNEL32.GetPriorityClass(util.toPointer(hProcess));
}

export function SetThreadStackGuarantee(
  StackSizeInBytes: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetThreadStackGuarantee(util.toPointer(StackSizeInBytes)));
}

export function GetProcessId(
  Process: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libKERNEL32.GetProcessId(util.toPointer(Process));
}

export function GetThreadId(
  Thread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libKERNEL32.GetThreadId(util.toPointer(Thread));
}

export function FlushProcessWriteBuffers(): void /* void */ {
  return libKERNEL32.FlushProcessWriteBuffers();
}

export function GetProcessIdOfThread(
  Thread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libKERNEL32.GetProcessIdOfThread(util.toPointer(Thread));
}

export function InitializeProcThreadAttributeList(
  lpAttributeList: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.LPPROC_THREAD_ATTRIBUTE_LIST */,
  dwAttributeCount: number /* u32 */,
  dwFlags: number /* u32 */,
  lpSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.InitializeProcThreadAttributeList(util.toPointer(lpAttributeList), dwAttributeCount, dwFlags, util.toPointer(lpSize)));
}

export function DeleteProcThreadAttributeList(
  lpAttributeList: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.LPPROC_THREAD_ATTRIBUTE_LIST */,
): void /* void */ {
  return libKERNEL32.DeleteProcThreadAttributeList(util.toPointer(lpAttributeList));
}

export function UpdateProcThreadAttribute(
  lpAttributeList: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.LPPROC_THREAD_ATTRIBUTE_LIST */,
  dwFlags: number /* u32 */,
  Attribute: Deno.PointerValue /* usize */,
  lpValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbSize: Deno.PointerValue /* usize */,
  lpPreviousValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpReturnSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.UpdateProcThreadAttribute(util.toPointer(lpAttributeList), dwFlags, Attribute, util.toPointer(lpValue), cbSize, util.toPointer(lpPreviousValue), util.toPointer(lpReturnSize)));
}

export function SetProcessDynamicEHContinuationTargets(
  Process: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  NumberOfTargets: number /* u16 */,
  Targets: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetProcessDynamicEHContinuationTargets(util.toPointer(Process), NumberOfTargets, util.toPointer(Targets)));
}

export function SetProcessDynamicEnforcedCetCompatibleRanges(
  Process: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  NumberOfRanges: number /* u16 */,
  Ranges: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetProcessDynamicEnforcedCetCompatibleRanges(util.toPointer(Process), NumberOfRanges, util.toPointer(Ranges)));
}

export function SetProcessAffinityUpdateMode(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwFlags: PROCESS_AFFINITY_AUTO_UPDATE_FLAGS /* Windows.Win32.System.Threading.PROCESS_AFFINITY_AUTO_UPDATE_FLAGS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetProcessAffinityUpdateMode(util.toPointer(hProcess), dwFlags));
}

export function QueryProcessAffinityUpdateMode(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpdwFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.QueryProcessAffinityUpdateMode(util.toPointer(hProcess), util.toPointer(lpdwFlags)));
}

export function CreateRemoteThreadEx(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpThreadAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwStackSize: Deno.PointerValue /* usize */,
  lpStartAddress: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */,
  lpParameter: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwCreationFlags: number /* u32 */,
  lpAttributeList: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.LPPROC_THREAD_ATTRIBUTE_LIST */,
  lpThreadId: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32.CreateRemoteThreadEx(util.toPointer(hProcess), util.toPointer(lpThreadAttributes), dwStackSize, util.toPointer(lpStartAddress), util.toPointer(lpParameter), dwCreationFlags, util.toPointer(lpAttributeList), util.toPointer(lpThreadId)));
}

export function GetCurrentThreadStackLimits(
  LowLimit: Deno.PointerValue | Uint8Array | null /* ptr */,
  HighLimit: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32.GetCurrentThreadStackLimits(util.toPointer(LowLimit), util.toPointer(HighLimit));
}

export function GetProcessMitigationPolicy(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  MitigationPolicy: PROCESS_MITIGATION_POLICY /* Windows.Win32.System.Threading.PROCESS_MITIGATION_POLICY */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwLength: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetProcessMitigationPolicy(util.toPointer(hProcess), MitigationPolicy, util.toPointer(lpBuffer), dwLength));
}

export function SetProcessMitigationPolicy(
  MitigationPolicy: PROCESS_MITIGATION_POLICY /* Windows.Win32.System.Threading.PROCESS_MITIGATION_POLICY */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwLength: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetProcessMitigationPolicy(MitigationPolicy, util.toPointer(lpBuffer), dwLength));
}

export function GetThreadTimes(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpCreationTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpExitTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpKernelTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpUserTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetThreadTimes(util.toPointer(hThread), util.toPointer(lpCreationTime), util.toPointer(lpExitTime), util.toPointer(lpKernelTime), util.toPointer(lpUserTime)));
}

export function OpenProcess(
  dwDesiredAccess: PROCESS_ACCESS_RIGHTS /* Windows.Win32.System.Threading.PROCESS_ACCESS_RIGHTS */,
  bInheritHandle: boolean /* Windows.Win32.Foundation.BOOL */,
  dwProcessId: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32.OpenProcess(dwDesiredAccess, util.boolToFfi(bInheritHandle), dwProcessId));
}

export function IsProcessorFeaturePresent(
  ProcessorFeature: PROCESSOR_FEATURE_ID /* Windows.Win32.System.Threading.PROCESSOR_FEATURE_ID */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.IsProcessorFeaturePresent(ProcessorFeature));
}

export function GetProcessHandleCount(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pdwHandleCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetProcessHandleCount(util.toPointer(hProcess), util.toPointer(pdwHandleCount)));
}

export function GetCurrentProcessorNumber(): number /* u32 */ {
  return libKERNEL32.GetCurrentProcessorNumber();
}

export function SetThreadIdealProcessorEx(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpIdealProcessor: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpPreviousIdealProcessor: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetThreadIdealProcessorEx(util.toPointer(hThread), util.toPointer(lpIdealProcessor), util.toPointer(lpPreviousIdealProcessor)));
}

export function GetThreadIdealProcessorEx(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpIdealProcessor: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetThreadIdealProcessorEx(util.toPointer(hThread), util.toPointer(lpIdealProcessor)));
}

export function GetCurrentProcessorNumberEx(
  ProcNumber: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32.GetCurrentProcessorNumberEx(util.toPointer(ProcNumber));
}

export function GetProcessPriorityBoost(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pDisablePriorityBoost: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetProcessPriorityBoost(util.toPointer(hProcess), util.toPointer(pDisablePriorityBoost)));
}

export function SetProcessPriorityBoost(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  bDisablePriorityBoost: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetProcessPriorityBoost(util.toPointer(hProcess), util.boolToFfi(bDisablePriorityBoost)));
}

export function GetThreadIOPendingFlag(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpIOIsPending: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetThreadIOPendingFlag(util.toPointer(hThread), util.toPointer(lpIOIsPending)));
}

export function GetSystemTimes(
  lpIdleTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpKernelTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpUserTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetSystemTimes(util.toPointer(lpIdleTime), util.toPointer(lpKernelTime), util.toPointer(lpUserTime)));
}

export function GetThreadInformation(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ThreadInformationClass: THREAD_INFORMATION_CLASS /* Windows.Win32.System.Threading.THREAD_INFORMATION_CLASS */,
  ThreadInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  ThreadInformationSize: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetThreadInformation(util.toPointer(hThread), ThreadInformationClass, util.toPointer(ThreadInformation), ThreadInformationSize));
}

export function SetThreadInformation(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ThreadInformationClass: THREAD_INFORMATION_CLASS /* Windows.Win32.System.Threading.THREAD_INFORMATION_CLASS */,
  ThreadInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  ThreadInformationSize: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetThreadInformation(util.toPointer(hThread), ThreadInformationClass, util.toPointer(ThreadInformation), ThreadInformationSize));
}

export function IsProcessCritical(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Critical: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.IsProcessCritical(util.toPointer(hProcess), util.toPointer(Critical)));
}

export function SetProtectedPolicy(
  PolicyGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  PolicyValue: Deno.PointerValue /* usize */,
  OldPolicyValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetProtectedPolicy(util.toPointer(PolicyGuid), PolicyValue, util.toPointer(OldPolicyValue)));
}

export function QueryProtectedPolicy(
  PolicyGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  PolicyValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.QueryProtectedPolicy(util.toPointer(PolicyGuid), util.toPointer(PolicyValue)));
}

export function SetThreadIdealProcessor(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwIdealProcessor: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32.SetThreadIdealProcessor(util.toPointer(hThread), dwIdealProcessor);
}

export function SetProcessInformation(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ProcessInformationClass: PROCESS_INFORMATION_CLASS /* Windows.Win32.System.Threading.PROCESS_INFORMATION_CLASS */,
  ProcessInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  ProcessInformationSize: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetProcessInformation(util.toPointer(hProcess), ProcessInformationClass, util.toPointer(ProcessInformation), ProcessInformationSize));
}

export function GetProcessInformation(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ProcessInformationClass: PROCESS_INFORMATION_CLASS /* Windows.Win32.System.Threading.PROCESS_INFORMATION_CLASS */,
  ProcessInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  ProcessInformationSize: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetProcessInformation(util.toPointer(hProcess), ProcessInformationClass, util.toPointer(ProcessInformation), ProcessInformationSize));
}

export function GetProcessDefaultCpuSets(
  Process: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  CpuSetIds: Deno.PointerValue | Uint8Array | null /* ptr */,
  CpuSetIdCount: number /* u32 */,
  RequiredIdCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetProcessDefaultCpuSets(util.toPointer(Process), util.toPointer(CpuSetIds), CpuSetIdCount, util.toPointer(RequiredIdCount)));
}

export function SetProcessDefaultCpuSets(
  Process: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  CpuSetIds: Deno.PointerValue | Uint8Array | null /* ptr */,
  CpuSetIdCount: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetProcessDefaultCpuSets(util.toPointer(Process), util.toPointer(CpuSetIds), CpuSetIdCount));
}

export function GetThreadSelectedCpuSets(
  Thread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  CpuSetIds: Deno.PointerValue | Uint8Array | null /* ptr */,
  CpuSetIdCount: number /* u32 */,
  RequiredIdCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetThreadSelectedCpuSets(util.toPointer(Thread), util.toPointer(CpuSetIds), CpuSetIdCount, util.toPointer(RequiredIdCount)));
}

export function SetThreadSelectedCpuSets(
  Thread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  CpuSetIds: Deno.PointerValue | Uint8Array | null /* ptr */,
  CpuSetIdCount: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetThreadSelectedCpuSets(util.toPointer(Thread), util.toPointer(CpuSetIds), CpuSetIdCount));
}

export function CreateProcessAsUserA(
  hToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpApplicationName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpCommandLine: string | null /* Windows.Win32.Foundation.PSTR */,
  lpProcessAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpThreadAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  bInheritHandles: boolean /* Windows.Win32.Foundation.BOOL */,
  dwCreationFlags: number /* u32 */,
  lpEnvironment: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCurrentDirectory: string | null /* Windows.Win32.Foundation.PSTR */,
  lpStartupInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpProcessInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32.CreateProcessAsUserA(util.toPointer(hToken), util.pstrToFfi(lpApplicationName), util.pstrToFfi(lpCommandLine), util.toPointer(lpProcessAttributes), util.toPointer(lpThreadAttributes), util.boolToFfi(bInheritHandles), dwCreationFlags, util.toPointer(lpEnvironment), util.pstrToFfi(lpCurrentDirectory), util.toPointer(lpStartupInfo), util.toPointer(lpProcessInformation)));
}

export function GetProcessShutdownParameters(
  lpdwLevel: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetProcessShutdownParameters(util.toPointer(lpdwLevel), util.toPointer(lpdwFlags)));
}

export function GetProcessDefaultCpuSetMasks(
  Process: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  CpuSetMasks: Deno.PointerValue | Uint8Array | null /* ptr */,
  CpuSetMaskCount: number /* u16 */,
  RequiredMaskCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetProcessDefaultCpuSetMasks(util.toPointer(Process), util.toPointer(CpuSetMasks), CpuSetMaskCount, util.toPointer(RequiredMaskCount)));
}

export function SetProcessDefaultCpuSetMasks(
  Process: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  CpuSetMasks: Deno.PointerValue | Uint8Array | null /* ptr */,
  CpuSetMaskCount: number /* u16 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetProcessDefaultCpuSetMasks(util.toPointer(Process), util.toPointer(CpuSetMasks), CpuSetMaskCount));
}

export function GetThreadSelectedCpuSetMasks(
  Thread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  CpuSetMasks: Deno.PointerValue | Uint8Array | null /* ptr */,
  CpuSetMaskCount: number /* u16 */,
  RequiredMaskCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetThreadSelectedCpuSetMasks(util.toPointer(Thread), util.toPointer(CpuSetMasks), CpuSetMaskCount, util.toPointer(RequiredMaskCount)));
}

export function SetThreadSelectedCpuSetMasks(
  Thread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  CpuSetMasks: Deno.PointerValue | Uint8Array | null /* ptr */,
  CpuSetMaskCount: number /* u16 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetThreadSelectedCpuSetMasks(util.toPointer(Thread), util.toPointer(CpuSetMasks), CpuSetMaskCount));
}

export function GetMachineTypeAttributes(
  Machine: number /* u16 */,
  MachineTypeAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libKERNEL32.GetMachineTypeAttributes(Machine, util.toPointer(MachineTypeAttributes)));
}

export function SetThreadDescription(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpThreadDescription: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libKERNEL32.SetThreadDescription(util.toPointer(hThread), util.pwstrToFfi(lpThreadDescription)));
}

export function GetThreadDescription(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ppszThreadDescription: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libKERNEL32.GetThreadDescription(util.toPointer(hThread), util.toPointer(ppszThreadDescription)));
}

export function QueueUserWorkItem(
  Function: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */,
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: WORKER_THREAD_FLAGS /* Windows.Win32.System.Threading.WORKER_THREAD_FLAGS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.QueueUserWorkItem(util.toPointer(Function), util.toPointer(Context), Flags));
}

export function UnregisterWaitEx(
  WaitHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  CompletionEvent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.UnregisterWaitEx(util.toPointer(WaitHandle), util.toPointer(CompletionEvent)));
}

export function CreateTimerQueue(): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32.CreateTimerQueue());
}

export function CreateTimerQueueTimer(
  phNewTimer: Deno.PointerValue | Uint8Array | null /* ptr */,
  TimerQueue: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.WAITORTIMERCALLBACK */,
  Parameter: Deno.PointerValue | Uint8Array | null /* ptr */,
  DueTime: number /* u32 */,
  Period: number /* u32 */,
  Flags: WORKER_THREAD_FLAGS /* Windows.Win32.System.Threading.WORKER_THREAD_FLAGS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.CreateTimerQueueTimer(util.toPointer(phNewTimer), util.toPointer(TimerQueue), util.toPointer(Callback), util.toPointer(Parameter), DueTime, Period, Flags));
}

export function ChangeTimerQueueTimer(
  TimerQueue: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Timer: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  DueTime: number /* u32 */,
  Period: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.ChangeTimerQueueTimer(util.toPointer(TimerQueue), util.toPointer(Timer), DueTime, Period));
}

export function DeleteTimerQueueTimer(
  TimerQueue: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Timer: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  CompletionEvent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.DeleteTimerQueueTimer(util.toPointer(TimerQueue), util.toPointer(Timer), util.toPointer(CompletionEvent)));
}

export function DeleteTimerQueue(
  TimerQueue: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.DeleteTimerQueue(util.toPointer(TimerQueue)));
}

export function DeleteTimerQueueEx(
  TimerQueue: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  CompletionEvent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.DeleteTimerQueueEx(util.toPointer(TimerQueue), util.toPointer(CompletionEvent)));
}

export function CreateThreadpool(
  reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.System.Threading.PTP_POOL */ {
  return util.pointerFromFfi(libKERNEL32.CreateThreadpool(util.toPointer(reserved)));
}

export function SetThreadpoolThreadMaximum(
  ptpp: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.PTP_POOL */,
  cthrdMost: number /* u32 */,
): void /* void */ {
  return libKERNEL32.SetThreadpoolThreadMaximum(util.toPointer(ptpp), cthrdMost);
}

export function SetThreadpoolThreadMinimum(
  ptpp: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.PTP_POOL */,
  cthrdMic: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetThreadpoolThreadMinimum(util.toPointer(ptpp), cthrdMic));
}

export function SetThreadpoolStackInformation(
  ptpp: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.PTP_POOL */,
  ptpsi: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetThreadpoolStackInformation(util.toPointer(ptpp), util.toPointer(ptpsi)));
}

export function QueryThreadpoolStackInformation(
  ptpp: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.PTP_POOL */,
  ptpsi: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.QueryThreadpoolStackInformation(util.toPointer(ptpp), util.toPointer(ptpsi)));
}

export function CloseThreadpool(
  ptpp: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.PTP_POOL */,
): void /* void */ {
  return libKERNEL32.CloseThreadpool(util.toPointer(ptpp));
}

export function CreateThreadpoolCleanupGroup(): Deno.PointerValue /* isize */ {
  return libKERNEL32.CreateThreadpoolCleanupGroup();
}

export function CloseThreadpoolCleanupGroupMembers(
  ptpcg: Deno.PointerValue /* isize */,
  fCancelPendingCallbacks: boolean /* Windows.Win32.Foundation.BOOL */,
  pvCleanupContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32.CloseThreadpoolCleanupGroupMembers(ptpcg, util.boolToFfi(fCancelPendingCallbacks), util.toPointer(pvCleanupContext));
}

export function CloseThreadpoolCleanupGroup(
  ptpcg: Deno.PointerValue /* isize */,
): void /* void */ {
  return libKERNEL32.CloseThreadpoolCleanupGroup(ptpcg);
}

export function SetEventWhenCallbackReturns(
  pci: Deno.PointerValue | Uint8Array | null /* ptr */,
  evt: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): void /* void */ {
  return libKERNEL32.SetEventWhenCallbackReturns(util.toPointer(pci), util.toPointer(evt));
}

export function ReleaseSemaphoreWhenCallbackReturns(
  pci: Deno.PointerValue | Uint8Array | null /* ptr */,
  sem: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  crel: number /* u32 */,
): void /* void */ {
  return libKERNEL32.ReleaseSemaphoreWhenCallbackReturns(util.toPointer(pci), util.toPointer(sem), crel);
}

export function ReleaseMutexWhenCallbackReturns(
  pci: Deno.PointerValue | Uint8Array | null /* ptr */,
  mut: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): void /* void */ {
  return libKERNEL32.ReleaseMutexWhenCallbackReturns(util.toPointer(pci), util.toPointer(mut));
}

export function LeaveCriticalSectionWhenCallbackReturns(
  pci: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcs: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32.LeaveCriticalSectionWhenCallbackReturns(util.toPointer(pci), util.toPointer(pcs));
}

export function FreeLibraryWhenCallbackReturns(
  pci: Deno.PointerValue | Uint8Array | null /* ptr */,
  mod: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
): void /* void */ {
  return libKERNEL32.FreeLibraryWhenCallbackReturns(util.toPointer(pci), util.toPointer(mod));
}

export function CallbackMayRunLong(
  pci: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.CallbackMayRunLong(util.toPointer(pci)));
}

export function DisassociateCurrentThreadFromCallback(
  pci: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32.DisassociateCurrentThreadFromCallback(util.toPointer(pci));
}

export function TrySubmitThreadpoolCallback(
  pfns: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.PTP_SIMPLE_CALLBACK */,
  pv: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbe: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.TrySubmitThreadpoolCallback(util.toPointer(pfns), util.toPointer(pv), util.toPointer(pcbe)));
}

export function CreateThreadpoolWork(
  pfnwk: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.PTP_WORK_CALLBACK */,
  pv: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbe: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32.CreateThreadpoolWork(util.toPointer(pfnwk), util.toPointer(pv), util.toPointer(pcbe)));
}

export function SubmitThreadpoolWork(
  pwk: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32.SubmitThreadpoolWork(util.toPointer(pwk));
}

export function WaitForThreadpoolWorkCallbacks(
  pwk: Deno.PointerValue | Uint8Array | null /* ptr */,
  fCancelPendingCallbacks: boolean /* Windows.Win32.Foundation.BOOL */,
): void /* void */ {
  return libKERNEL32.WaitForThreadpoolWorkCallbacks(util.toPointer(pwk), util.boolToFfi(fCancelPendingCallbacks));
}

export function CloseThreadpoolWork(
  pwk: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32.CloseThreadpoolWork(util.toPointer(pwk));
}

export function CreateThreadpoolTimer(
  pfnti: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.PTP_TIMER_CALLBACK */,
  pv: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbe: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32.CreateThreadpoolTimer(util.toPointer(pfnti), util.toPointer(pv), util.toPointer(pcbe)));
}

export function SetThreadpoolTimer(
  pti: Deno.PointerValue | Uint8Array | null /* ptr */,
  pftDueTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  msPeriod: number /* u32 */,
  msWindowLength: number /* u32 */,
): void /* void */ {
  return libKERNEL32.SetThreadpoolTimer(util.toPointer(pti), util.toPointer(pftDueTime), msPeriod, msWindowLength);
}

export function IsThreadpoolTimerSet(
  pti: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.IsThreadpoolTimerSet(util.toPointer(pti)));
}

export function WaitForThreadpoolTimerCallbacks(
  pti: Deno.PointerValue | Uint8Array | null /* ptr */,
  fCancelPendingCallbacks: boolean /* Windows.Win32.Foundation.BOOL */,
): void /* void */ {
  return libKERNEL32.WaitForThreadpoolTimerCallbacks(util.toPointer(pti), util.boolToFfi(fCancelPendingCallbacks));
}

export function CloseThreadpoolTimer(
  pti: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32.CloseThreadpoolTimer(util.toPointer(pti));
}

export function CreateThreadpoolWait(
  pfnwa: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.PTP_WAIT_CALLBACK */,
  pv: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbe: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32.CreateThreadpoolWait(util.toPointer(pfnwa), util.toPointer(pv), util.toPointer(pcbe)));
}

export function SetThreadpoolWait(
  pwa: Deno.PointerValue | Uint8Array | null /* ptr */,
  h: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pftTimeout: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32.SetThreadpoolWait(util.toPointer(pwa), util.toPointer(h), util.toPointer(pftTimeout));
}

export function WaitForThreadpoolWaitCallbacks(
  pwa: Deno.PointerValue | Uint8Array | null /* ptr */,
  fCancelPendingCallbacks: boolean /* Windows.Win32.Foundation.BOOL */,
): void /* void */ {
  return libKERNEL32.WaitForThreadpoolWaitCallbacks(util.toPointer(pwa), util.boolToFfi(fCancelPendingCallbacks));
}

export function CloseThreadpoolWait(
  pwa: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32.CloseThreadpoolWait(util.toPointer(pwa));
}

export function CreateThreadpoolIo(
  fl: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pfnio: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.PTP_WIN32_IO_CALLBACK */,
  pv: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbe: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32.CreateThreadpoolIo(util.toPointer(fl), util.toPointer(pfnio), util.toPointer(pv), util.toPointer(pcbe)));
}

export function StartThreadpoolIo(
  pio: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32.StartThreadpoolIo(util.toPointer(pio));
}

export function CancelThreadpoolIo(
  pio: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32.CancelThreadpoolIo(util.toPointer(pio));
}

export function WaitForThreadpoolIoCallbacks(
  pio: Deno.PointerValue | Uint8Array | null /* ptr */,
  fCancelPendingCallbacks: boolean /* Windows.Win32.Foundation.BOOL */,
): void /* void */ {
  return libKERNEL32.WaitForThreadpoolIoCallbacks(util.toPointer(pio), util.boolToFfi(fCancelPendingCallbacks));
}

export function CloseThreadpoolIo(
  pio: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32.CloseThreadpoolIo(util.toPointer(pio));
}

export function SetThreadpoolTimerEx(
  pti: Deno.PointerValue | Uint8Array | null /* ptr */,
  pftDueTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  msPeriod: number /* u32 */,
  msWindowLength: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetThreadpoolTimerEx(util.toPointer(pti), util.toPointer(pftDueTime), msPeriod, msWindowLength));
}

export function SetThreadpoolWaitEx(
  pwa: Deno.PointerValue | Uint8Array | null /* ptr */,
  h: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pftTimeout: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetThreadpoolWaitEx(util.toPointer(pwa), util.toPointer(h), util.toPointer(pftTimeout), util.toPointer(Reserved)));
}

export function IsWow64Process(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Wow64Process: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.IsWow64Process(util.toPointer(hProcess), util.toPointer(Wow64Process)));
}

export function Wow64SetThreadDefaultGuestMachine(
  Machine: number /* u16 */,
): number /* u16 */ {
  return libapi_ms_win_core_wow64_l1_1_1.Wow64SetThreadDefaultGuestMachine(Machine);
}

export function IsWow64Process2(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pProcessMachine: Deno.PointerValue | Uint8Array | null /* ptr */,
  pNativeMachine: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.IsWow64Process2(util.toPointer(hProcess), util.toPointer(pProcessMachine), util.toPointer(pNativeMachine)));
}

export function Wow64SuspendThread(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libKERNEL32.Wow64SuspendThread(util.toPointer(hThread));
}

export function CreatePrivateNamespaceW(
  lpPrivateNamespaceAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpBoundaryDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpAliasPrefix: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.System.Threading.NamespaceHandle */ {
  return util.pointerFromFfi(libKERNEL32.CreatePrivateNamespaceW(util.toPointer(lpPrivateNamespaceAttributes), util.toPointer(lpBoundaryDescriptor), util.pwstrToFfi(lpAliasPrefix)));
}

export function OpenPrivateNamespaceW(
  lpBoundaryDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpAliasPrefix: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.System.Threading.NamespaceHandle */ {
  return util.pointerFromFfi(libKERNEL32.OpenPrivateNamespaceW(util.toPointer(lpBoundaryDescriptor), util.pwstrToFfi(lpAliasPrefix)));
}

export function ClosePrivateNamespace(
  Handle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.NamespaceHandle */,
  Flags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libKERNEL32.ClosePrivateNamespace(util.toPointer(Handle), Flags));
}

export function CreateBoundaryDescriptorW(
  Name: string | null /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.System.Threading.BoundaryDescriptorHandle */ {
  return util.pointerFromFfi(libKERNEL32.CreateBoundaryDescriptorW(util.pwstrToFfi(Name), Flags));
}

export function AddSIDToBoundaryDescriptor(
  BoundaryDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  RequiredSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.AddSIDToBoundaryDescriptor(util.toPointer(BoundaryDescriptor), util.toPointer(RequiredSid)));
}

export function DeleteBoundaryDescriptor(
  BoundaryDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.BoundaryDescriptorHandle */,
): void /* void */ {
  return libKERNEL32.DeleteBoundaryDescriptor(util.toPointer(BoundaryDescriptor));
}

export function GetNumaHighestNodeNumber(
  HighestNodeNumber: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetNumaHighestNodeNumber(util.toPointer(HighestNodeNumber)));
}

export function GetNumaNodeProcessorMaskEx(
  Node: number /* u16 */,
  ProcessorMask: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetNumaNodeProcessorMaskEx(Node, util.toPointer(ProcessorMask)));
}

export function GetNumaNodeProcessorMask2(
  NodeNumber: number /* u16 */,
  ProcessorMasks: Deno.PointerValue | Uint8Array | null /* ptr */,
  ProcessorMaskCount: number /* u16 */,
  RequiredMaskCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetNumaNodeProcessorMask2(NodeNumber, util.toPointer(ProcessorMasks), ProcessorMaskCount, util.toPointer(RequiredMaskCount)));
}

export function GetNumaProximityNodeEx(
  ProximityId: number /* u32 */,
  NodeNumber: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetNumaProximityNodeEx(ProximityId, util.toPointer(NodeNumber)));
}

export function GetProcessGroupAffinity(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  GroupCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  GroupArray: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetProcessGroupAffinity(util.toPointer(hProcess), util.toPointer(GroupCount), util.toPointer(GroupArray)));
}

export function GetThreadGroupAffinity(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  GroupAffinity: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetThreadGroupAffinity(util.toPointer(hThread), util.toPointer(GroupAffinity)));
}

export function SetThreadGroupAffinity(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  GroupAffinity: Deno.PointerValue | Uint8Array | null /* ptr */,
  PreviousGroupAffinity: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetThreadGroupAffinity(util.toPointer(hThread), util.toPointer(GroupAffinity), util.toPointer(PreviousGroupAffinity)));
}

export function AttachThreadInput(
  idAttach: number /* u32 */,
  idAttachTo: number /* u32 */,
  fAttach: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32.AttachThreadInput(idAttach, idAttachTo, util.boolToFfi(fAttach)));
}

export function WaitForInputIdle(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwMilliseconds: number /* u32 */,
): number /* u32 */ {
  return libUSER32.WaitForInputIdle(util.toPointer(hProcess), dwMilliseconds);
}

export function GetGuiResources(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  uiFlags: GET_GUI_RESOURCES_FLAGS /* Windows.Win32.System.Threading.GET_GUI_RESOURCES_FLAGS */,
): number /* u32 */ {
  return libUSER32.GetGuiResources(util.toPointer(hProcess), uiFlags);
}

export function IsImmersiveProcess(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32.IsImmersiveProcess(util.toPointer(hProcess)));
}

export function SetProcessRestrictionExemption(
  fEnableExemption: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32.SetProcessRestrictionExemption(util.boolToFfi(fEnableExemption)));
}

export function GetProcessAffinityMask(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpProcessAffinityMask: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpSystemAffinityMask: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetProcessAffinityMask(util.toPointer(hProcess), util.toPointer(lpProcessAffinityMask), util.toPointer(lpSystemAffinityMask)));
}

export function SetProcessAffinityMask(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwProcessAffinityMask: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetProcessAffinityMask(util.toPointer(hProcess), dwProcessAffinityMask));
}

export function GetProcessIoCounters(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpIoCounters: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetProcessIoCounters(util.toPointer(hProcess), util.toPointer(lpIoCounters)));
}

export function SwitchToFiber(
  lpFiber: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32.SwitchToFiber(util.toPointer(lpFiber));
}

export function DeleteFiber(
  lpFiber: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32.DeleteFiber(util.toPointer(lpFiber));
}

export function ConvertFiberToThread(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.ConvertFiberToThread());
}

export function CreateFiberEx(
  dwStackCommitSize: Deno.PointerValue /* usize */,
  dwStackReserveSize: Deno.PointerValue /* usize */,
  dwFlags: number /* u32 */,
  lpStartAddress: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.LPFIBER_START_ROUTINE */,
  lpParameter: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32.CreateFiberEx(dwStackCommitSize, dwStackReserveSize, dwFlags, util.toPointer(lpStartAddress), util.toPointer(lpParameter)));
}

export function ConvertThreadToFiberEx(
  lpParameter: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32.ConvertThreadToFiberEx(util.toPointer(lpParameter), dwFlags));
}

export function CreateFiber(
  dwStackSize: Deno.PointerValue /* usize */,
  lpStartAddress: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.LPFIBER_START_ROUTINE */,
  lpParameter: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32.CreateFiber(dwStackSize, util.toPointer(lpStartAddress), util.toPointer(lpParameter)));
}

export function ConvertThreadToFiber(
  lpParameter: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32.ConvertThreadToFiber(util.toPointer(lpParameter)));
}

export function CreateUmsCompletionList(
  UmsCompletionList: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.CreateUmsCompletionList(util.toPointer(UmsCompletionList)));
}

export function DequeueUmsCompletionListItems(
  UmsCompletionList: Deno.PointerValue | Uint8Array | null /* ptr */,
  WaitTimeOut: number /* u32 */,
  UmsThreadList: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.DequeueUmsCompletionListItems(util.toPointer(UmsCompletionList), WaitTimeOut, util.toPointer(UmsThreadList)));
}

export function GetUmsCompletionListEvent(
  UmsCompletionList: Deno.PointerValue | Uint8Array | null /* ptr */,
  UmsCompletionEvent: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetUmsCompletionListEvent(util.toPointer(UmsCompletionList), util.toPointer(UmsCompletionEvent)));
}

export function ExecuteUmsThread(
  UmsThread: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.ExecuteUmsThread(util.toPointer(UmsThread)));
}

export function UmsThreadYield(
  SchedulerParam: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.UmsThreadYield(util.toPointer(SchedulerParam)));
}

export function DeleteUmsCompletionList(
  UmsCompletionList: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.DeleteUmsCompletionList(util.toPointer(UmsCompletionList)));
}

export function GetCurrentUmsThread(): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32.GetCurrentUmsThread());
}

export function GetNextUmsListItem(
  UmsContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32.GetNextUmsListItem(util.toPointer(UmsContext)));
}

export function QueryUmsThreadInformation(
  UmsThread: Deno.PointerValue | Uint8Array | null /* ptr */,
  UmsThreadInfoClass: RTL_UMS_THREAD_INFO_CLASS /* Windows.Win32.System.Threading.RTL_UMS_THREAD_INFO_CLASS */,
  UmsThreadInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  UmsThreadInformationLength: number /* u32 */,
  ReturnLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.QueryUmsThreadInformation(util.toPointer(UmsThread), UmsThreadInfoClass, util.toPointer(UmsThreadInformation), UmsThreadInformationLength, util.toPointer(ReturnLength)));
}

export function SetUmsThreadInformation(
  UmsThread: Deno.PointerValue | Uint8Array | null /* ptr */,
  UmsThreadInfoClass: RTL_UMS_THREAD_INFO_CLASS /* Windows.Win32.System.Threading.RTL_UMS_THREAD_INFO_CLASS */,
  UmsThreadInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  UmsThreadInformationLength: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetUmsThreadInformation(util.toPointer(UmsThread), UmsThreadInfoClass, util.toPointer(UmsThreadInformation), UmsThreadInformationLength));
}

export function DeleteUmsThreadContext(
  UmsThread: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.DeleteUmsThreadContext(util.toPointer(UmsThread)));
}

export function CreateUmsThreadContext(
  lpUmsThread: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.CreateUmsThreadContext(util.toPointer(lpUmsThread)));
}

export function EnterUmsSchedulingMode(
  SchedulerStartupInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.EnterUmsSchedulingMode(util.toPointer(SchedulerStartupInfo)));
}

export function GetUmsSystemThreadInformation(
  ThreadHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  SystemThreadInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetUmsSystemThreadInformation(util.toPointer(ThreadHandle), util.toPointer(SystemThreadInfo)));
}

export function SetThreadAffinityMask(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwThreadAffinityMask: Deno.PointerValue /* usize */,
): Deno.PointerValue /* usize */ {
  return libKERNEL32.SetThreadAffinityMask(util.toPointer(hThread), dwThreadAffinityMask);
}

export function SetProcessDEPPolicy(
  dwFlags: PROCESS_DEP_FLAGS /* Windows.Win32.System.Threading.PROCESS_DEP_FLAGS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetProcessDEPPolicy(dwFlags));
}

export function GetProcessDEPPolicy(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpPermanent: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetProcessDEPPolicy(util.toPointer(hProcess), util.toPointer(lpFlags), util.toPointer(lpPermanent)));
}

export function PulseEvent(
  hEvent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.PulseEvent(util.toPointer(hEvent)));
}

export function WinExec(
  lpCmdLine: string | null /* Windows.Win32.Foundation.PSTR */,
  uCmdShow: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32.WinExec(util.pstrToFfi(lpCmdLine), uCmdShow);
}

export function CreateSemaphoreA(
  lpSemaphoreAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lInitialCount: number /* i32 */,
  lMaximumCount: number /* i32 */,
  lpName: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32.CreateSemaphoreA(util.toPointer(lpSemaphoreAttributes), lInitialCount, lMaximumCount, util.pstrToFfi(lpName)));
}

export function CreateSemaphoreExA(
  lpSemaphoreAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lInitialCount: number /* i32 */,
  lMaximumCount: number /* i32 */,
  lpName: string | null /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
  dwDesiredAccess: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32.CreateSemaphoreExA(util.toPointer(lpSemaphoreAttributes), lInitialCount, lMaximumCount, util.pstrToFfi(lpName), dwFlags, dwDesiredAccess));
}

export function QueryFullProcessImageNameA(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwFlags: PROCESS_NAME_FORMAT /* Windows.Win32.System.Threading.PROCESS_NAME_FORMAT */,
  lpExeName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpdwSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.QueryFullProcessImageNameA(util.toPointer(hProcess), dwFlags, util.pstrToFfi(lpExeName), util.toPointer(lpdwSize)));
}

export function QueryFullProcessImageNameW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwFlags: PROCESS_NAME_FORMAT /* Windows.Win32.System.Threading.PROCESS_NAME_FORMAT */,
  lpExeName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpdwSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.QueryFullProcessImageNameW(util.toPointer(hProcess), dwFlags, util.pwstrToFfi(lpExeName), util.toPointer(lpdwSize)));
}

export function GetStartupInfoA(
  lpStartupInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32.GetStartupInfoA(util.toPointer(lpStartupInfo));
}

export function CreateProcessWithLogonW(
  lpUsername: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpDomain: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpPassword: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwLogonFlags: CREATE_PROCESS_LOGON_FLAGS /* Windows.Win32.System.Threading.CREATE_PROCESS_LOGON_FLAGS */,
  lpApplicationName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpCommandLine: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwCreationFlags: number /* u32 */,
  lpEnvironment: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCurrentDirectory: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpStartupInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpProcessInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32.CreateProcessWithLogonW(util.pwstrToFfi(lpUsername), util.pwstrToFfi(lpDomain), util.pwstrToFfi(lpPassword), dwLogonFlags, util.pwstrToFfi(lpApplicationName), util.pwstrToFfi(lpCommandLine), dwCreationFlags, util.toPointer(lpEnvironment), util.pwstrToFfi(lpCurrentDirectory), util.toPointer(lpStartupInfo), util.toPointer(lpProcessInformation)));
}

export function CreateProcessWithTokenW(
  hToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwLogonFlags: CREATE_PROCESS_LOGON_FLAGS /* Windows.Win32.System.Threading.CREATE_PROCESS_LOGON_FLAGS */,
  lpApplicationName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpCommandLine: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwCreationFlags: number /* u32 */,
  lpEnvironment: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCurrentDirectory: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpStartupInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpProcessInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32.CreateProcessWithTokenW(util.toPointer(hToken), dwLogonFlags, util.pwstrToFfi(lpApplicationName), util.pwstrToFfi(lpCommandLine), dwCreationFlags, util.toPointer(lpEnvironment), util.pwstrToFfi(lpCurrentDirectory), util.toPointer(lpStartupInfo), util.toPointer(lpProcessInformation)));
}

export function RegisterWaitForSingleObject(
  phNewWaitObject: Deno.PointerValue | Uint8Array | null /* ptr */,
  hObject: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.WAITORTIMERCALLBACK */,
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwMilliseconds: number /* u32 */,
  dwFlags: WORKER_THREAD_FLAGS /* Windows.Win32.System.Threading.WORKER_THREAD_FLAGS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.RegisterWaitForSingleObject(util.toPointer(phNewWaitObject), util.toPointer(hObject), util.toPointer(Callback), util.toPointer(Context), dwMilliseconds, dwFlags));
}

export function UnregisterWait(
  WaitHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.UnregisterWait(util.toPointer(WaitHandle)));
}

export function SetTimerQueueTimer(
  TimerQueue: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.WAITORTIMERCALLBACK */,
  Parameter: Deno.PointerValue | Uint8Array | null /* ptr */,
  DueTime: number /* u32 */,
  Period: number /* u32 */,
  PreferIo: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32.SetTimerQueueTimer(util.toPointer(TimerQueue), util.toPointer(Callback), util.toPointer(Parameter), DueTime, Period, util.boolToFfi(PreferIo)));
}

export function CreatePrivateNamespaceA(
  lpPrivateNamespaceAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpBoundaryDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpAliasPrefix: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.System.Threading.NamespaceHandle */ {
  return util.pointerFromFfi(libKERNEL32.CreatePrivateNamespaceA(util.toPointer(lpPrivateNamespaceAttributes), util.toPointer(lpBoundaryDescriptor), util.pstrToFfi(lpAliasPrefix)));
}

export function OpenPrivateNamespaceA(
  lpBoundaryDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpAliasPrefix: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.System.Threading.NamespaceHandle */ {
  return util.pointerFromFfi(libKERNEL32.OpenPrivateNamespaceA(util.toPointer(lpBoundaryDescriptor), util.pstrToFfi(lpAliasPrefix)));
}

export function CreateBoundaryDescriptorA(
  Name: string | null /* Windows.Win32.Foundation.PSTR */,
  Flags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.System.Threading.BoundaryDescriptorHandle */ {
  return util.pointerFromFfi(libKERNEL32.CreateBoundaryDescriptorA(util.pstrToFfi(Name), Flags));
}

export function AddIntegrityLabelToBoundaryDescriptor(
  BoundaryDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  IntegrityLabel: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.AddIntegrityLabelToBoundaryDescriptor(util.toPointer(BoundaryDescriptor), util.toPointer(IntegrityLabel)));
}

export function GetActiveProcessorGroupCount(): number /* u16 */ {
  return libKERNEL32.GetActiveProcessorGroupCount();
}

export function GetMaximumProcessorGroupCount(): number /* u16 */ {
  return libKERNEL32.GetMaximumProcessorGroupCount();
}

export function GetActiveProcessorCount(
  GroupNumber: number /* u16 */,
): number /* u32 */ {
  return libKERNEL32.GetActiveProcessorCount(GroupNumber);
}

export function GetMaximumProcessorCount(
  GroupNumber: number /* u16 */,
): number /* u32 */ {
  return libKERNEL32.GetMaximumProcessorCount(GroupNumber);
}

export function GetNumaProcessorNode(
  Processor: number /* u8 */,
  NodeNumber: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetNumaProcessorNode(Processor, util.toPointer(NodeNumber)));
}

export function GetNumaNodeNumberFromHandle(
  hFile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  NodeNumber: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetNumaNodeNumberFromHandle(util.toPointer(hFile), util.toPointer(NodeNumber)));
}

export function GetNumaProcessorNodeEx(
  Processor: Deno.PointerValue | Uint8Array | null /* ptr */,
  NodeNumber: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetNumaProcessorNodeEx(util.toPointer(Processor), util.toPointer(NodeNumber)));
}

export function GetNumaNodeProcessorMask(
  Node: number /* u8 */,
  ProcessorMask: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetNumaNodeProcessorMask(Node, util.toPointer(ProcessorMask)));
}

export function GetNumaAvailableMemoryNode(
  Node: number /* u8 */,
  AvailableBytes: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetNumaAvailableMemoryNode(Node, util.toPointer(AvailableBytes)));
}

export function GetNumaAvailableMemoryNodeEx(
  Node: number /* u16 */,
  AvailableBytes: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetNumaAvailableMemoryNodeEx(Node, util.toPointer(AvailableBytes)));
}

export function GetNumaProximityNode(
  ProximityId: number /* u32 */,
  NodeNumber: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetNumaProximityNode(ProximityId, util.toPointer(NodeNumber)));
}

export function NtQueryInformationProcess(
  ProcessHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ProcessInformationClass: PROCESSINFOCLASS /* Windows.Win32.System.Threading.PROCESSINFOCLASS */,
  ProcessInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  ProcessInformationLength: number /* u32 */,
  ReturnLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libntdll.NtQueryInformationProcess(util.toPointer(ProcessHandle), ProcessInformationClass, util.toPointer(ProcessInformation), ProcessInformationLength, util.toPointer(ReturnLength)));
}

export function NtQueryInformationThread(
  ThreadHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ThreadInformationClass: THREADINFOCLASS /* Windows.Win32.System.Threading.THREADINFOCLASS */,
  ThreadInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  ThreadInformationLength: number /* u32 */,
  ReturnLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libntdll.NtQueryInformationThread(util.toPointer(ThreadHandle), ThreadInformationClass, util.toPointer(ThreadInformation), ThreadInformationLength, util.toPointer(ReturnLength)));
}

export function NtSetInformationThread(
  ThreadHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ThreadInformationClass: THREADINFOCLASS /* Windows.Win32.System.Threading.THREADINFOCLASS */,
  ThreadInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  ThreadInformationLength: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libntdll.NtSetInformationThread(util.toPointer(ThreadHandle), ThreadInformationClass, util.toPointer(ThreadInformation), ThreadInformationLength));
}

