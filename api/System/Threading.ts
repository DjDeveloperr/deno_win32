/// Auto-generated by Deno Win32: Windows.Win32.System.Threading.Apis

import * as util from "../../util.ts";

// Enums
export type THREAD_CREATION_FLAGS = number;
export type THREAD_PRIORITY = number;
export type WORKER_THREAD_FLAGS = number;
export type CREATE_EVENT = number;
export type CREATE_PROCESS_LOGON_FLAGS = number;
export type PROCESS_AFFINITY_AUTO_UPDATE_FLAGS = number;
export type PROCESS_DEP_FLAGS = number;
export type PROCESS_NAME_FORMAT = number;
export type PROCESSOR_FEATURE_ID = number;
export type GET_GUI_RESOURCES_FLAGS = number;
export type STARTUPINFOW_FLAGS = number;
export type MEMORY_PRIORITY = number;
export type PROCESS_PROTECTION_LEVEL = number;
export type POWER_REQUEST_CONTEXT_FLAGS = number;
export type THREAD_ACCESS_RIGHTS = number;
export type SYNCHRONIZATION_ACCESS_RIGHTS = number;
export type PROCESS_CREATION_FLAGS = number;
export type PROCESS_ACCESS_RIGHTS = number;
export type QUEUE_USER_APC_FLAGS = number;
export type THREAD_INFORMATION_CLASS = number;
export type PROCESS_INFORMATION_CLASS = number;
export type MACHINE_ATTRIBUTES = number;
export type IMAGE_FILE_MACHINE = number;
export type PROCESS_MEMORY_EXHAUSTION_TYPE = number;
export type AVRT_PRIORITY = number;
export type PROCESS_MITIGATION_POLICY = number;
export type RTL_UMS_THREAD_INFO_CLASS = number;
export type TP_CALLBACK_PRIORITY = number;
export type RIP_INFO_TYPE = number;
export type PROC_THREAD_ATTRIBUTE_NUM = number;
export type PROCESSINFOCLASS = number;
export type THREADINFOCLASS = number;
export type WIN32_ERROR = number;
export type TOKEN_ACCESS_MASK = number;

// Constants
export const THREAD_CREATE_RUN_IMMEDIATELY = 0;
export const THREAD_CREATE_SUSPENDED = 4;
export const STACK_SIZE_PARAM_IS_A_RESERVATION = 65536;
export const THREAD_MODE_BACKGROUND_BEGIN = 65536;
export const THREAD_MODE_BACKGROUND_END = 131072;
export const THREAD_PRIORITY_ABOVE_NORMAL = 1;
export const THREAD_PRIORITY_BELOW_NORMAL = `-1`;
export const THREAD_PRIORITY_HIGHEST = 2;
export const THREAD_PRIORITY_IDLE = `-15`;
export const THREAD_PRIORITY_MIN = `-2`;
export const THREAD_PRIORITY_LOWEST = `-2`;
export const THREAD_PRIORITY_NORMAL = 0;
export const THREAD_PRIORITY_TIME_CRITICAL = 15;
export const WT_EXECUTEDEFAULT = 0;
export const WT_EXECUTEINIOTHREAD = 1;
export const WT_EXECUTEINPERSISTENTTHREAD = 128;
export const WT_EXECUTEINWAITTHREAD = 4;
export const WT_EXECUTELONGFUNCTION = 16;
export const WT_EXECUTEONLYONCE = 8;
export const WT_TRANSFER_IMPERSONATION = 256;
export const WT_EXECUTEINTIMERTHREAD = 32;
export const CREATE_EVENT_INITIAL_SET = 2;
export const CREATE_EVENT_MANUAL_RESET = 1;
export const LOGON_WITH_PROFILE = 1;
export const LOGON_NETCREDENTIALS_ONLY = 2;
export const PROCESS_AFFINITY_DISABLE_AUTO_UPDATE = 0;
export const PROCESS_AFFINITY_ENABLE_AUTO_UPDATE = 1;
export const PROCESS_DEP_ENABLE = 1;
export const PROCESS_DEP_DISABLE_ATL_THUNK_EMULATION = 2;
export const PROCESS_DEP_NONE = 0;
export const PROCESS_NAME_WIN32 = 0;
export const PROCESS_NAME_NATIVE = 1;
export const PF_ARM_64BIT_LOADSTORE_ATOMIC = 25;
export const PF_ARM_DIVIDE_INSTRUCTION_AVAILABLE = 24;
export const PF_ARM_EXTERNAL_CACHE_AVAILABLE = 26;
export const PF_ARM_FMAC_INSTRUCTIONS_AVAILABLE = 27;
export const PF_ARM_VFP_32_REGISTERS_AVAILABLE = 18;
export const PF_3DNOW_INSTRUCTIONS_AVAILABLE = 7;
export const PF_CHANNELS_ENABLED = 16;
export const PF_COMPARE_EXCHANGE_DOUBLE = 2;
export const PF_COMPARE_EXCHANGE128 = 14;
export const PF_COMPARE64_EXCHANGE128 = 15;
export const PF_FASTFAIL_AVAILABLE = 23;
export const PF_FLOATING_POINT_EMULATED = 1;
export const PF_FLOATING_POINT_PRECISION_ERRATA = 0;
export const PF_MMX_INSTRUCTIONS_AVAILABLE = 3;
export const PF_NX_ENABLED = 12;
export const PF_PAE_ENABLED = 9;
export const PF_RDTSC_INSTRUCTION_AVAILABLE = 8;
export const PF_RDWRFSGSBASE_AVAILABLE = 22;
export const PF_SECOND_LEVEL_ADDRESS_TRANSLATION = 20;
export const PF_SSE3_INSTRUCTIONS_AVAILABLE = 13;
export const PF_VIRT_FIRMWARE_ENABLED = 21;
export const PF_XMMI_INSTRUCTIONS_AVAILABLE = 6;
export const PF_XMMI64_INSTRUCTIONS_AVAILABLE = 10;
export const PF_XSAVE_ENABLED = 17;
export const PF_ARM_V8_INSTRUCTIONS_AVAILABLE = 29;
export const PF_ARM_V8_CRYPTO_INSTRUCTIONS_AVAILABLE = 30;
export const PF_ARM_V8_CRC32_INSTRUCTIONS_AVAILABLE = 31;
export const PF_ARM_V81_ATOMIC_INSTRUCTIONS_AVAILABLE = 34;
export const GR_GDIOBJECTS = 0;
export const GR_GDIOBJECTS_PEAK = 2;
export const GR_USEROBJECTS = 1;
export const GR_USEROBJECTS_PEAK = 4;
export const STARTF_FORCEONFEEDBACK = 64;
export const STARTF_FORCEOFFFEEDBACK = 128;
export const STARTF_PREVENTPINNING = 8192;
export const STARTF_RUNFULLSCREEN = 32;
export const STARTF_TITLEISAPPID = 4096;
export const STARTF_TITLEISLINKNAME = 2048;
export const STARTF_UNTRUSTEDSOURCE = 32768;
export const STARTF_USECOUNTCHARS = 8;
export const STARTF_USEFILLATTRIBUTE = 16;
export const STARTF_USEHOTKEY = 512;
export const STARTF_USEPOSITION = 4;
export const STARTF_USESHOWWINDOW = 1;
export const STARTF_USESIZE = 2;
export const STARTF_USESTDHANDLES = 256;
export const MEMORY_PRIORITY_VERY_LOW = 1;
export const MEMORY_PRIORITY_LOW = 2;
export const MEMORY_PRIORITY_MEDIUM = 3;
export const MEMORY_PRIORITY_BELOW_NORMAL = 4;
export const MEMORY_PRIORITY_NORMAL = 5;
export const PROTECTION_LEVEL_WINTCB_LIGHT = 0;
export const PROTECTION_LEVEL_WINDOWS = 1;
export const PROTECTION_LEVEL_WINDOWS_LIGHT = 2;
export const PROTECTION_LEVEL_ANTIMALWARE_LIGHT = 3;
export const PROTECTION_LEVEL_LSA_LIGHT = 4;
export const PROTECTION_LEVEL_WINTCB = 5;
export const PROTECTION_LEVEL_CODEGEN_LIGHT = 6;
export const PROTECTION_LEVEL_AUTHENTICODE = 7;
export const PROTECTION_LEVEL_PPL_APP = 8;
export const PROTECTION_LEVEL_NONE = 4294967294;
export const POWER_REQUEST_CONTEXT_DETAILED_STRING = 2;
export const POWER_REQUEST_CONTEXT_SIMPLE_STRING = 1;
export const THREAD_TERMINATE = 1;
export const THREAD_SUSPEND_RESUME = 2;
export const THREAD_GET_CONTEXT = 8;
export const THREAD_SET_CONTEXT = 16;
export const THREAD_SET_INFORMATION = 32;
export const THREAD_QUERY_INFORMATION = 64;
export const THREAD_SET_THREAD_TOKEN = 128;
export const THREAD_IMPERSONATE = 256;
export const THREAD_DIRECT_IMPERSONATION = 512;
export const THREAD_SET_LIMITED_INFORMATION = 1024;
export const THREAD_QUERY_LIMITED_INFORMATION = 2048;
export const THREAD_RESUME = 4096;
export const THREAD_ALL_ACCESS = 2097151;
export const THREAD_DELETE = 65536;
export const THREAD_READ_CONTROL = 131072;
export const THREAD_WRITE_DAC = 262144;
export const THREAD_WRITE_OWNER = 524288;
export const THREAD_SYNCHRONIZE = 1048576;
export const THREAD_STANDARD_RIGHTS_REQUIRED = 983040;
export const EVENT_ALL_ACCESS = 2031619;
export const EVENT_MODIFY_STATE = 2;
export const MUTEX_ALL_ACCESS = 2031617;
export const MUTEX_MODIFY_STATE = 1;
export const SEMAPHORE_ALL_ACCESS = 2031619;
export const SEMAPHORE_MODIFY_STATE = 2;
export const TIMER_ALL_ACCESS = 2031619;
export const TIMER_MODIFY_STATE = 2;
export const TIMER_QUERY_STATE = 1;
export const SYNCHRONIZATION_DELETE = 65536;
export const SYNCHRONIZATION_READ_CONTROL = 131072;
export const SYNCHRONIZATION_WRITE_DAC = 262144;
export const SYNCHRONIZATION_WRITE_OWNER = 524288;
export const SYNCHRONIZATION_SYNCHRONIZE = 1048576;
export const PRIVATE_NAMESPACE_FLAG_DESTROY = 1;
export const PROC_THREAD_ATTRIBUTE_REPLACE_VALUE = 1;
export const THREAD_POWER_THROTTLING_CURRENT_VERSION = 1;
export const THREAD_POWER_THROTTLING_EXECUTION_SPEED = 1;
export const THREAD_POWER_THROTTLING_VALID_FLAGS = 1;
export const PME_CURRENT_VERSION = 1;
export const PME_FAILFAST_ON_COMMIT_FAIL_DISABLE = 0;
export const PME_FAILFAST_ON_COMMIT_FAIL_ENABLE = 1;
export const PROCESS_POWER_THROTTLING_CURRENT_VERSION = 1;
export const PROCESS_POWER_THROTTLING_EXECUTION_SPEED = 1;
export const PROCESS_POWER_THROTTLING_IGNORE_TIMER_RESOLUTION = 4;
export const PROCESS_LEAP_SECOND_INFO_FLAG_ENABLE_SIXTY_SECOND = 1;
export const PROCESS_LEAP_SECOND_INFO_VALID_FLAGS = 1;
export const INIT_ONCE_CHECK_ONLY = 1;
export const INIT_ONCE_ASYNC = 2;
export const INIT_ONCE_INIT_FAILED = 4;
export const INIT_ONCE_CTX_RESERVED_BITS = 2;
export const CONDITION_VARIABLE_LOCKMODE_SHARED = 1;
export const CREATE_MUTEX_INITIAL_OWNER = 1;
export const CREATE_WAITABLE_TIMER_MANUAL_RESET = 1;
export const CREATE_WAITABLE_TIMER_HIGH_RESOLUTION = 2;
export const SYNCHRONIZATION_BARRIER_FLAGS_SPIN_ONLY = 1;
export const SYNCHRONIZATION_BARRIER_FLAGS_BLOCK_ONLY = 2;
export const SYNCHRONIZATION_BARRIER_FLAGS_NO_DELETE = 4;
export const PROC_THREAD_ATTRIBUTE_PARENT_PROCESS = 131072;
export const PROC_THREAD_ATTRIBUTE_HANDLE_LIST = 131074;
export const PROC_THREAD_ATTRIBUTE_GROUP_AFFINITY = 196611;
export const PROC_THREAD_ATTRIBUTE_PREFERRED_NODE = 131076;
export const PROC_THREAD_ATTRIBUTE_IDEAL_PROCESSOR = 196613;
export const PROC_THREAD_ATTRIBUTE_UMS_THREAD = 196614;
export const PROC_THREAD_ATTRIBUTE_MITIGATION_POLICY = 131079;
export const PROC_THREAD_ATTRIBUTE_SECURITY_CAPABILITIES = 131081;
export const PROC_THREAD_ATTRIBUTE_PROTECTION_LEVEL = 131083;
export const PROC_THREAD_ATTRIBUTE_PSEUDOCONSOLE = 131094;
export const PROC_THREAD_ATTRIBUTE_MACHINE_TYPE = 131097;
export const PROC_THREAD_ATTRIBUTE_ENABLE_OPTIONAL_XSTATE_FEATURES = 196635;
export const PROC_THREAD_ATTRIBUTE_WIN32K_FILTER = 131088;
export const PROC_THREAD_ATTRIBUTE_JOB_LIST = 131085;
export const PROC_THREAD_ATTRIBUTE_CHILD_PROCESS_POLICY = 131086;
export const PROC_THREAD_ATTRIBUTE_ALL_APPLICATION_PACKAGES_POLICY = 131087;
export const PROC_THREAD_ATTRIBUTE_DESKTOP_APP_POLICY = 131090;
export const PROC_THREAD_ATTRIBUTE_MITIGATION_AUDIT_POLICY = 131096;
export const PROC_THREAD_ATTRIBUTE_COMPONENT_FILTER = 131098;
export const DEBUG_PROCESS = 1;
export const DEBUG_ONLY_THIS_PROCESS = 2;
export const CREATE_SUSPENDED = 4;
export const DETACHED_PROCESS = 8;
export const CREATE_NEW_CONSOLE = 16;
export const NORMAL_PRIORITY_CLASS = 32;
export const IDLE_PRIORITY_CLASS = 64;
export const HIGH_PRIORITY_CLASS = 128;
export const REALTIME_PRIORITY_CLASS = 256;
export const CREATE_NEW_PROCESS_GROUP = 512;
export const CREATE_UNICODE_ENVIRONMENT = 1024;
export const CREATE_SEPARATE_WOW_VDM = 2048;
export const CREATE_SHARED_WOW_VDM = 4096;
export const CREATE_FORCEDOS = 8192;
export const BELOW_NORMAL_PRIORITY_CLASS = 16384;
export const ABOVE_NORMAL_PRIORITY_CLASS = 32768;
export const INHERIT_PARENT_AFFINITY = 65536;
export const INHERIT_CALLER_PRIORITY = 131072;
export const CREATE_PROTECTED_PROCESS = 262144;
export const EXTENDED_STARTUPINFO_PRESENT = 524288;
export const PROCESS_MODE_BACKGROUND_BEGIN = 1048576;
export const PROCESS_MODE_BACKGROUND_END = 2097152;
export const CREATE_SECURE_PROCESS = 4194304;
export const CREATE_BREAKAWAY_FROM_JOB = 16777216;
export const CREATE_PRESERVE_CODE_AUTHZ_LEVEL = 33554432;
export const CREATE_DEFAULT_ERROR_MODE = 67108864;
export const CREATE_NO_WINDOW = 134217728;
export const PROFILE_USER = 268435456;
export const PROFILE_KERNEL = 536870912;
export const PROFILE_SERVER = 1073741824;
export const CREATE_IGNORE_SYSTEM_DEFAULT = 2147483648;
export const PROCESS_TERMINATE = 1;
export const PROCESS_CREATE_THREAD = 2;
export const PROCESS_SET_SESSIONID = 4;
export const PROCESS_VM_OPERATION = 8;
export const PROCESS_VM_READ = 16;
export const PROCESS_VM_WRITE = 32;
export const PROCESS_DUP_HANDLE = 64;
export const PROCESS_CREATE_PROCESS = 128;
export const PROCESS_SET_QUOTA = 256;
export const PROCESS_SET_INFORMATION = 512;
export const PROCESS_QUERY_INFORMATION = 1024;
export const PROCESS_SUSPEND_RESUME = 2048;
export const PROCESS_QUERY_LIMITED_INFORMATION = 4096;
export const PROCESS_SET_LIMITED_INFORMATION = 8192;
export const PROCESS_ALL_ACCESS = 2097151;
export const PROCESS_DELETE = 65536;
export const PROCESS_READ_CONTROL = 131072;
export const PROCESS_WRITE_DAC = 262144;
export const PROCESS_WRITE_OWNER = 524288;
export const PROCESS_SYNCHRONIZE = 1048576;
export const PROCESS_STANDARD_RIGHTS_REQUIRED = 983040;
export const QUEUE_USER_APC_FLAGS_NONE = 0;
export const QUEUE_USER_APC_FLAGS_SPECIAL_USER_APC = 1;
export const ThreadMemoryPriority = 0;
export const ThreadAbsoluteCpuPriority = 1;
export const ThreadDynamicCodePolicy = 2;
export const ThreadPowerThrottling = 3;
export const ThreadInformationClassMax = 4;
export const ProcessMemoryPriority = 0;
export const ProcessMemoryExhaustionInfo = 1;
export const ProcessAppMemoryInfo = 2;
export const ProcessInPrivateInfo = 3;
export const ProcessPowerThrottling = 4;
export const ProcessReservedValue1 = 5;
export const ProcessTelemetryCoverageInfo = 6;
export const ProcessProtectionLevelInfo = 7;
export const ProcessLeapSecondInfo = 8;
export const ProcessMachineTypeInfo = 9;
export const ProcessInformationClassMax = 10;
export const UserEnabled = 1;
export const KernelEnabled = 2;
export const Wow64Container = 4;
export const IMAGE_FILE_MACHINE_AXP64 = 644;
export const IMAGE_FILE_MACHINE_I386 = 332;
export const IMAGE_FILE_MACHINE_IA64 = 512;
export const IMAGE_FILE_MACHINE_AMD64 = 34404;
export const IMAGE_FILE_MACHINE_UNKNOWN = 0;
export const IMAGE_FILE_MACHINE_TARGET_HOST = 1;
export const IMAGE_FILE_MACHINE_R3000 = 354;
export const IMAGE_FILE_MACHINE_R4000 = 358;
export const IMAGE_FILE_MACHINE_R10000 = 360;
export const IMAGE_FILE_MACHINE_WCEMIPSV2 = 361;
export const IMAGE_FILE_MACHINE_ALPHA = 388;
export const IMAGE_FILE_MACHINE_SH3 = 418;
export const IMAGE_FILE_MACHINE_SH3DSP = 419;
export const IMAGE_FILE_MACHINE_SH3E = 420;
export const IMAGE_FILE_MACHINE_SH4 = 422;
export const IMAGE_FILE_MACHINE_SH5 = 424;
export const IMAGE_FILE_MACHINE_ARM = 448;
export const IMAGE_FILE_MACHINE_THUMB = 450;
export const IMAGE_FILE_MACHINE_ARMNT = 452;
export const IMAGE_FILE_MACHINE_AM33 = 467;
export const IMAGE_FILE_MACHINE_POWERPC = 496;
export const IMAGE_FILE_MACHINE_POWERPCFP = 497;
export const IMAGE_FILE_MACHINE_MIPS16 = 614;
export const IMAGE_FILE_MACHINE_ALPHA64 = 644;
export const IMAGE_FILE_MACHINE_MIPSFPU = 870;
export const IMAGE_FILE_MACHINE_MIPSFPU16 = 1126;
export const IMAGE_FILE_MACHINE_TRICORE = 1312;
export const IMAGE_FILE_MACHINE_CEF = 3311;
export const IMAGE_FILE_MACHINE_EBC = 3772;
export const IMAGE_FILE_MACHINE_M32R = 36929;
export const IMAGE_FILE_MACHINE_ARM64 = 43620;
export const IMAGE_FILE_MACHINE_CEE = 49390;
export const PMETypeFailFastOnCommitFailure = 0;
export const PMETypeMax = 1;
export const AVRT_PRIORITY_VERYLOW = `-2`;
export const AVRT_PRIORITY_LOW = `-1`;
export const AVRT_PRIORITY_NORMAL = 0;
export const AVRT_PRIORITY_HIGH = 1;
export const AVRT_PRIORITY_CRITICAL = 2;
export const ProcessDEPPolicy = 0;
export const ProcessASLRPolicy = 1;
export const ProcessDynamicCodePolicy = 2;
export const ProcessStrictHandleCheckPolicy = 3;
export const ProcessSystemCallDisablePolicy = 4;
export const ProcessMitigationOptionsMask = 5;
export const ProcessExtensionPointDisablePolicy = 6;
export const ProcessControlFlowGuardPolicy = 7;
export const ProcessSignaturePolicy = 8;
export const ProcessFontDisablePolicy = 9;
export const ProcessImageLoadPolicy = 10;
export const ProcessSystemCallFilterPolicy = 11;
export const ProcessPayloadRestrictionPolicy = 12;
export const ProcessChildProcessPolicy = 13;
export const ProcessSideChannelIsolationPolicy = 14;
export const ProcessUserShadowStackPolicy = 15;
export const ProcessRedirectionTrustPolicy = 16;
export const MaxProcessMitigationPolicy = 17;
export const UmsThreadInvalidInfoClass = 0;
export const UmsThreadUserContext = 1;
export const UmsThreadPriority = 2;
export const UmsThreadAffinity = 3;
export const UmsThreadTeb = 4;
export const UmsThreadIsSuspended = 5;
export const UmsThreadIsTerminated = 6;
export const UmsThreadMaxInfoClass = 7;
export const TP_CALLBACK_PRIORITY_HIGH = 0;
export const TP_CALLBACK_PRIORITY_NORMAL = 1;
export const TP_CALLBACK_PRIORITY_LOW = 2;
export const TP_CALLBACK_PRIORITY_INVALID = 3;
export const TP_CALLBACK_PRIORITY_COUNT = 3;
export const SLE_ERROR = 1;
export const SLE_MINORERROR = 2;
export const SLE_WARNING = 3;
export const ProcThreadAttributeParentProcess = 0;
export const ProcThreadAttributeHandleList = 2;
export const ProcThreadAttributeGroupAffinity = 3;
export const ProcThreadAttributePreferredNode = 4;
export const ProcThreadAttributeIdealProcessor = 5;
export const ProcThreadAttributeUmsThread = 6;
export const ProcThreadAttributeMitigationPolicy = 7;
export const ProcThreadAttributeSecurityCapabilities = 9;
export const ProcThreadAttributeProtectionLevel = 11;
export const ProcThreadAttributeJobList = 13;
export const ProcThreadAttributeChildProcessPolicy = 14;
export const ProcThreadAttributeAllApplicationPackagesPolicy = 15;
export const ProcThreadAttributeWin32kFilter = 16;
export const ProcThreadAttributeSafeOpenPromptOriginClaim = 17;
export const ProcThreadAttributeDesktopAppPolicy = 18;
export const ProcThreadAttributePseudoConsole = 22;
export const ProcThreadAttributeMitigationAuditPolicy = 24;
export const ProcThreadAttributeMachineType = 25;
export const ProcThreadAttributeComponentFilter = 26;
export const ProcThreadAttributeEnableOptionalXStateFeatures = 27;
export const ProcessBasicInformation = 0;
export const ProcessDebugPort = 7;
export const ProcessWow64Information = 26;
export const ProcessImageFileName = 27;
export const ProcessBreakOnTermination = 29;
export const ThreadIsIoPending = 16;
export const ThreadNameInformation = 38;
export const NO_ERROR = 0;
export const WAIT_OBJECT_0 = 0;
export const WAIT_ABANDONED = 128;
export const WAIT_ABANDONED_0 = 128;
export const WAIT_IO_COMPLETION = 192;
export const WAIT_TIMEOUT = 258;
export const WAIT_FAILED = 4294967295;
export const ERROR_SUCCESS = 0;
export const ERROR_INVALID_FUNCTION = 1;
export const ERROR_FILE_NOT_FOUND = 2;
export const ERROR_PATH_NOT_FOUND = 3;
export const ERROR_TOO_MANY_OPEN_FILES = 4;
export const ERROR_ACCESS_DENIED = 5;
export const ERROR_INVALID_HANDLE = 6;
export const ERROR_ARENA_TRASHED = 7;
export const ERROR_NOT_ENOUGH_MEMORY = 8;
export const ERROR_INVALID_BLOCK = 9;
export const ERROR_BAD_ENVIRONMENT = 10;
export const ERROR_BAD_FORMAT = 11;
export const ERROR_INVALID_ACCESS = 12;
export const ERROR_INVALID_DATA = 13;
export const ERROR_OUTOFMEMORY = 14;
export const ERROR_INVALID_DRIVE = 15;
export const ERROR_CURRENT_DIRECTORY = 16;
export const ERROR_NOT_SAME_DEVICE = 17;
export const ERROR_NO_MORE_FILES = 18;
export const ERROR_WRITE_PROTECT = 19;
export const ERROR_BAD_UNIT = 20;
export const ERROR_NOT_READY = 21;
export const ERROR_BAD_COMMAND = 22;
export const ERROR_CRC = 23;
export const ERROR_BAD_LENGTH = 24;
export const ERROR_SEEK = 25;
export const ERROR_NOT_DOS_DISK = 26;
export const ERROR_SECTOR_NOT_FOUND = 27;
export const ERROR_OUT_OF_PAPER = 28;
export const ERROR_WRITE_FAULT = 29;
export const ERROR_READ_FAULT = 30;
export const ERROR_GEN_FAILURE = 31;
export const ERROR_SHARING_VIOLATION = 32;
export const ERROR_LOCK_VIOLATION = 33;
export const ERROR_WRONG_DISK = 34;
export const ERROR_SHARING_BUFFER_EXCEEDED = 36;
export const ERROR_HANDLE_EOF = 38;
export const ERROR_HANDLE_DISK_FULL = 39;
export const ERROR_NOT_SUPPORTED = 50;
export const ERROR_REM_NOT_LIST = 51;
export const ERROR_DUP_NAME = 52;
export const ERROR_BAD_NETPATH = 53;
export const ERROR_NETWORK_BUSY = 54;
export const ERROR_DEV_NOT_EXIST = 55;
export const ERROR_TOO_MANY_CMDS = 56;
export const ERROR_ADAP_HDW_ERR = 57;
export const ERROR_BAD_NET_RESP = 58;
export const ERROR_UNEXP_NET_ERR = 59;
export const ERROR_BAD_REM_ADAP = 60;
export const ERROR_PRINTQ_FULL = 61;
export const ERROR_NO_SPOOL_SPACE = 62;
export const ERROR_PRINT_CANCELLED = 63;
export const ERROR_NETNAME_DELETED = 64;
export const ERROR_NETWORK_ACCESS_DENIED = 65;
export const ERROR_BAD_DEV_TYPE = 66;
export const ERROR_BAD_NET_NAME = 67;
export const ERROR_TOO_MANY_NAMES = 68;
export const ERROR_TOO_MANY_SESS = 69;
export const ERROR_SHARING_PAUSED = 70;
export const ERROR_REQ_NOT_ACCEP = 71;
export const ERROR_REDIR_PAUSED = 72;
export const ERROR_FILE_EXISTS = 80;
export const ERROR_CANNOT_MAKE = 82;
export const ERROR_FAIL_I24 = 83;
export const ERROR_OUT_OF_STRUCTURES = 84;
export const ERROR_ALREADY_ASSIGNED = 85;
export const ERROR_INVALID_PASSWORD = 86;
export const ERROR_INVALID_PARAMETER = 87;
export const ERROR_NET_WRITE_FAULT = 88;
export const ERROR_NO_PROC_SLOTS = 89;
export const ERROR_TOO_MANY_SEMAPHORES = 100;
export const ERROR_EXCL_SEM_ALREADY_OWNED = 101;
export const ERROR_SEM_IS_SET = 102;
export const ERROR_TOO_MANY_SEM_REQUESTS = 103;
export const ERROR_INVALID_AT_INTERRUPT_TIME = 104;
export const ERROR_SEM_OWNER_DIED = 105;
export const ERROR_SEM_USER_LIMIT = 106;
export const ERROR_DISK_CHANGE = 107;
export const ERROR_DRIVE_LOCKED = 108;
export const ERROR_BROKEN_PIPE = 109;
export const ERROR_OPEN_FAILED = 110;
export const ERROR_BUFFER_OVERFLOW = 111;
export const ERROR_DISK_FULL = 112;
export const ERROR_NO_MORE_SEARCH_HANDLES = 113;
export const ERROR_INVALID_TARGET_HANDLE = 114;
export const ERROR_INVALID_CATEGORY = 117;
export const ERROR_INVALID_VERIFY_SWITCH = 118;
export const ERROR_BAD_DRIVER_LEVEL = 119;
export const ERROR_CALL_NOT_IMPLEMENTED = 120;
export const ERROR_SEM_TIMEOUT = 121;
export const ERROR_INSUFFICIENT_BUFFER = 122;
export const ERROR_INVALID_NAME = 123;
export const ERROR_INVALID_LEVEL = 124;
export const ERROR_NO_VOLUME_LABEL = 125;
export const ERROR_MOD_NOT_FOUND = 126;
export const ERROR_PROC_NOT_FOUND = 127;
export const ERROR_WAIT_NO_CHILDREN = 128;
export const ERROR_CHILD_NOT_COMPLETE = 129;
export const ERROR_DIRECT_ACCESS_HANDLE = 130;
export const ERROR_NEGATIVE_SEEK = 131;
export const ERROR_SEEK_ON_DEVICE = 132;
export const ERROR_IS_JOIN_TARGET = 133;
export const ERROR_IS_JOINED = 134;
export const ERROR_IS_SUBSTED = 135;
export const ERROR_NOT_JOINED = 136;
export const ERROR_NOT_SUBSTED = 137;
export const ERROR_JOIN_TO_JOIN = 138;
export const ERROR_SUBST_TO_SUBST = 139;
export const ERROR_JOIN_TO_SUBST = 140;
export const ERROR_SUBST_TO_JOIN = 141;
export const ERROR_BUSY_DRIVE = 142;
export const ERROR_SAME_DRIVE = 143;
export const ERROR_DIR_NOT_ROOT = 144;
export const ERROR_DIR_NOT_EMPTY = 145;
export const ERROR_IS_SUBST_PATH = 146;
export const ERROR_IS_JOIN_PATH = 147;
export const ERROR_PATH_BUSY = 148;
export const ERROR_IS_SUBST_TARGET = 149;
export const ERROR_SYSTEM_TRACE = 150;
export const ERROR_INVALID_EVENT_COUNT = 151;
export const ERROR_TOO_MANY_MUXWAITERS = 152;
export const ERROR_INVALID_LIST_FORMAT = 153;
export const ERROR_LABEL_TOO_LONG = 154;
export const ERROR_TOO_MANY_TCBS = 155;
export const ERROR_SIGNAL_REFUSED = 156;
export const ERROR_DISCARDED = 157;
export const ERROR_NOT_LOCKED = 158;
export const ERROR_BAD_THREADID_ADDR = 159;
export const ERROR_BAD_ARGUMENTS = 160;
export const ERROR_BAD_PATHNAME = 161;
export const ERROR_SIGNAL_PENDING = 162;
export const ERROR_MAX_THRDS_REACHED = 164;
export const ERROR_LOCK_FAILED = 167;
export const ERROR_BUSY = 170;
export const ERROR_DEVICE_SUPPORT_IN_PROGRESS = 171;
export const ERROR_CANCEL_VIOLATION = 173;
export const ERROR_ATOMIC_LOCKS_NOT_SUPPORTED = 174;
export const ERROR_INVALID_SEGMENT_NUMBER = 180;
export const ERROR_INVALID_ORDINAL = 182;
export const ERROR_ALREADY_EXISTS = 183;
export const ERROR_INVALID_FLAG_NUMBER = 186;
export const ERROR_SEM_NOT_FOUND = 187;
export const ERROR_INVALID_STARTING_CODESEG = 188;
export const ERROR_INVALID_STACKSEG = 189;
export const ERROR_INVALID_MODULETYPE = 190;
export const ERROR_INVALID_EXE_SIGNATURE = 191;
export const ERROR_EXE_MARKED_INVALID = 192;
export const ERROR_BAD_EXE_FORMAT = 193;
export const ERROR_ITERATED_DATA_EXCEEDS_64k = 194;
export const ERROR_INVALID_MINALLOCSIZE = 195;
export const ERROR_DYNLINK_FROM_INVALID_RING = 196;
export const ERROR_IOPL_NOT_ENABLED = 197;
export const ERROR_INVALID_SEGDPL = 198;
export const ERROR_AUTODATASEG_EXCEEDS_64k = 199;
export const ERROR_RING2SEG_MUST_BE_MOVABLE = 200;
export const ERROR_RELOC_CHAIN_XEEDS_SEGLIM = 201;
export const ERROR_INFLOOP_IN_RELOC_CHAIN = 202;
export const ERROR_ENVVAR_NOT_FOUND = 203;
export const ERROR_NO_SIGNAL_SENT = 205;
export const ERROR_FILENAME_EXCED_RANGE = 206;
export const ERROR_RING2_STACK_IN_USE = 207;
export const ERROR_META_EXPANSION_TOO_LONG = 208;
export const ERROR_INVALID_SIGNAL_NUMBER = 209;
export const ERROR_THREAD_1_INACTIVE = 210;
export const ERROR_LOCKED = 212;
export const ERROR_TOO_MANY_MODULES = 214;
export const ERROR_NESTING_NOT_ALLOWED = 215;
export const ERROR_EXE_MACHINE_TYPE_MISMATCH = 216;
export const ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY = 217;
export const ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY = 218;
export const ERROR_FILE_CHECKED_OUT = 220;
export const ERROR_CHECKOUT_REQUIRED = 221;
export const ERROR_BAD_FILE_TYPE = 222;
export const ERROR_FILE_TOO_LARGE = 223;
export const ERROR_FORMS_AUTH_REQUIRED = 224;
export const ERROR_VIRUS_INFECTED = 225;
export const ERROR_VIRUS_DELETED = 226;
export const ERROR_PIPE_LOCAL = 229;
export const ERROR_BAD_PIPE = 230;
export const ERROR_PIPE_BUSY = 231;
export const ERROR_NO_DATA = 232;
export const ERROR_PIPE_NOT_CONNECTED = 233;
export const ERROR_MORE_DATA = 234;
export const ERROR_NO_WORK_DONE = 235;
export const ERROR_VC_DISCONNECTED = 240;
export const ERROR_INVALID_EA_NAME = 254;
export const ERROR_EA_LIST_INCONSISTENT = 255;
export const ERROR_NO_MORE_ITEMS = 259;
export const ERROR_CANNOT_COPY = 266;
export const ERROR_DIRECTORY = 267;
export const ERROR_EAS_DIDNT_FIT = 275;
export const ERROR_EA_FILE_CORRUPT = 276;
export const ERROR_EA_TABLE_FULL = 277;
export const ERROR_INVALID_EA_HANDLE = 278;
export const ERROR_EAS_NOT_SUPPORTED = 282;
export const ERROR_NOT_OWNER = 288;
export const ERROR_TOO_MANY_POSTS = 298;
export const ERROR_PARTIAL_COPY = 299;
export const ERROR_OPLOCK_NOT_GRANTED = 300;
export const ERROR_INVALID_OPLOCK_PROTOCOL = 301;
export const ERROR_DISK_TOO_FRAGMENTED = 302;
export const ERROR_DELETE_PENDING = 303;
export const ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING = 304;
export const ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME = 305;
export const ERROR_SECURITY_STREAM_IS_INCONSISTENT = 306;
export const ERROR_INVALID_LOCK_RANGE = 307;
export const ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT = 308;
export const ERROR_NOTIFICATION_GUID_ALREADY_DEFINED = 309;
export const ERROR_INVALID_EXCEPTION_HANDLER = 310;
export const ERROR_DUPLICATE_PRIVILEGES = 311;
export const ERROR_NO_RANGES_PROCESSED = 312;
export const ERROR_NOT_ALLOWED_ON_SYSTEM_FILE = 313;
export const ERROR_DISK_RESOURCES_EXHAUSTED = 314;
export const ERROR_INVALID_TOKEN = 315;
export const ERROR_DEVICE_FEATURE_NOT_SUPPORTED = 316;
export const ERROR_MR_MID_NOT_FOUND = 317;
export const ERROR_SCOPE_NOT_FOUND = 318;
export const ERROR_UNDEFINED_SCOPE = 319;
export const ERROR_INVALID_CAP = 320;
export const ERROR_DEVICE_UNREACHABLE = 321;
export const ERROR_DEVICE_NO_RESOURCES = 322;
export const ERROR_DATA_CHECKSUM_ERROR = 323;
export const ERROR_INTERMIXED_KERNEL_EA_OPERATION = 324;
export const ERROR_FILE_LEVEL_TRIM_NOT_SUPPORTED = 326;
export const ERROR_OFFSET_ALIGNMENT_VIOLATION = 327;
export const ERROR_INVALID_FIELD_IN_PARAMETER_LIST = 328;
export const ERROR_OPERATION_IN_PROGRESS = 329;
export const ERROR_BAD_DEVICE_PATH = 330;
export const ERROR_TOO_MANY_DESCRIPTORS = 331;
export const ERROR_SCRUB_DATA_DISABLED = 332;
export const ERROR_NOT_REDUNDANT_STORAGE = 333;
export const ERROR_RESIDENT_FILE_NOT_SUPPORTED = 334;
export const ERROR_COMPRESSED_FILE_NOT_SUPPORTED = 335;
export const ERROR_DIRECTORY_NOT_SUPPORTED = 336;
export const ERROR_NOT_READ_FROM_COPY = 337;
export const ERROR_FT_WRITE_FAILURE = 338;
export const ERROR_FT_DI_SCAN_REQUIRED = 339;
export const ERROR_INVALID_KERNEL_INFO_VERSION = 340;
export const ERROR_INVALID_PEP_INFO_VERSION = 341;
export const ERROR_OBJECT_NOT_EXTERNALLY_BACKED = 342;
export const ERROR_EXTERNAL_BACKING_PROVIDER_UNKNOWN = 343;
export const ERROR_COMPRESSION_NOT_BENEFICIAL = 344;
export const ERROR_STORAGE_TOPOLOGY_ID_MISMATCH = 345;
export const ERROR_BLOCKED_BY_PARENTAL_CONTROLS = 346;
export const ERROR_BLOCK_TOO_MANY_REFERENCES = 347;
export const ERROR_MARKED_TO_DISALLOW_WRITES = 348;
export const ERROR_ENCLAVE_FAILURE = 349;
export const ERROR_FAIL_NOACTION_REBOOT = 350;
export const ERROR_FAIL_SHUTDOWN = 351;
export const ERROR_FAIL_RESTART = 352;
export const ERROR_MAX_SESSIONS_REACHED = 353;
export const ERROR_NETWORK_ACCESS_DENIED_EDP = 354;
export const ERROR_DEVICE_HINT_NAME_BUFFER_TOO_SMALL = 355;
export const ERROR_EDP_POLICY_DENIES_OPERATION = 356;
export const ERROR_EDP_DPL_POLICY_CANT_BE_SATISFIED = 357;
export const ERROR_CLOUD_FILE_SYNC_ROOT_METADATA_CORRUPT = 358;
export const ERROR_DEVICE_IN_MAINTENANCE = 359;
export const ERROR_NOT_SUPPORTED_ON_DAX = 360;
export const ERROR_DAX_MAPPING_EXISTS = 361;
export const ERROR_CLOUD_FILE_PROVIDER_NOT_RUNNING = 362;
export const ERROR_CLOUD_FILE_METADATA_CORRUPT = 363;
export const ERROR_CLOUD_FILE_METADATA_TOO_LARGE = 364;
export const ERROR_CLOUD_FILE_PROPERTY_BLOB_TOO_LARGE = 365;
export const ERROR_CLOUD_FILE_PROPERTY_BLOB_CHECKSUM_MISMATCH = 366;
export const ERROR_CHILD_PROCESS_BLOCKED = 367;
export const ERROR_STORAGE_LOST_DATA_PERSISTENCE = 368;
export const ERROR_FILE_SYSTEM_VIRTUALIZATION_UNAVAILABLE = 369;
export const ERROR_FILE_SYSTEM_VIRTUALIZATION_METADATA_CORRUPT = 370;
export const ERROR_FILE_SYSTEM_VIRTUALIZATION_BUSY = 371;
export const ERROR_FILE_SYSTEM_VIRTUALIZATION_PROVIDER_UNKNOWN = 372;
export const ERROR_GDI_HANDLE_LEAK = 373;
export const ERROR_CLOUD_FILE_TOO_MANY_PROPERTY_BLOBS = 374;
export const ERROR_CLOUD_FILE_PROPERTY_VERSION_NOT_SUPPORTED = 375;
export const ERROR_NOT_A_CLOUD_FILE = 376;
export const ERROR_CLOUD_FILE_NOT_IN_SYNC = 377;
export const ERROR_CLOUD_FILE_ALREADY_CONNECTED = 378;
export const ERROR_CLOUD_FILE_NOT_SUPPORTED = 379;
export const ERROR_CLOUD_FILE_INVALID_REQUEST = 380;
export const ERROR_CLOUD_FILE_READ_ONLY_VOLUME = 381;
export const ERROR_CLOUD_FILE_CONNECTED_PROVIDER_ONLY = 382;
export const ERROR_CLOUD_FILE_VALIDATION_FAILED = 383;
export const ERROR_SMB1_NOT_AVAILABLE = 384;
export const ERROR_FILE_SYSTEM_VIRTUALIZATION_INVALID_OPERATION = 385;
export const ERROR_CLOUD_FILE_AUTHENTICATION_FAILED = 386;
export const ERROR_CLOUD_FILE_INSUFFICIENT_RESOURCES = 387;
export const ERROR_CLOUD_FILE_NETWORK_UNAVAILABLE = 388;
export const ERROR_CLOUD_FILE_UNSUCCESSFUL = 389;
export const ERROR_CLOUD_FILE_NOT_UNDER_SYNC_ROOT = 390;
export const ERROR_CLOUD_FILE_IN_USE = 391;
export const ERROR_CLOUD_FILE_PINNED = 392;
export const ERROR_CLOUD_FILE_REQUEST_ABORTED = 393;
export const ERROR_CLOUD_FILE_PROPERTY_CORRUPT = 394;
export const ERROR_CLOUD_FILE_ACCESS_DENIED = 395;
export const ERROR_CLOUD_FILE_INCOMPATIBLE_HARDLINKS = 396;
export const ERROR_CLOUD_FILE_PROPERTY_LOCK_CONFLICT = 397;
export const ERROR_CLOUD_FILE_REQUEST_CANCELED = 398;
export const ERROR_EXTERNAL_SYSKEY_NOT_SUPPORTED = 399;
export const ERROR_THREAD_MODE_ALREADY_BACKGROUND = 400;
export const ERROR_THREAD_MODE_NOT_BACKGROUND = 401;
export const ERROR_PROCESS_MODE_ALREADY_BACKGROUND = 402;
export const ERROR_PROCESS_MODE_NOT_BACKGROUND = 403;
export const ERROR_CLOUD_FILE_PROVIDER_TERMINATED = 404;
export const ERROR_NOT_A_CLOUD_SYNC_ROOT = 405;
export const ERROR_FILE_PROTECTED_UNDER_DPL = 406;
export const ERROR_VOLUME_NOT_CLUSTER_ALIGNED = 407;
export const ERROR_NO_PHYSICALLY_ALIGNED_FREE_SPACE_FOUND = 408;
export const ERROR_APPX_FILE_NOT_ENCRYPTED = 409;
export const ERROR_RWRAW_ENCRYPTED_FILE_NOT_ENCRYPTED = 410;
export const ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILEOFFSET = 411;
export const ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILERANGE = 412;
export const ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_PARAMETER = 413;
export const ERROR_LINUX_SUBSYSTEM_NOT_PRESENT = 414;
export const ERROR_FT_READ_FAILURE = 415;
export const ERROR_STORAGE_RESERVE_ID_INVALID = 416;
export const ERROR_STORAGE_RESERVE_DOES_NOT_EXIST = 417;
export const ERROR_STORAGE_RESERVE_ALREADY_EXISTS = 418;
export const ERROR_STORAGE_RESERVE_NOT_EMPTY = 419;
export const ERROR_NOT_A_DAX_VOLUME = 420;
export const ERROR_NOT_DAX_MAPPABLE = 421;
export const ERROR_TIME_SENSITIVE_THREAD = 422;
export const ERROR_DPL_NOT_SUPPORTED_FOR_USER = 423;
export const ERROR_CASE_DIFFERING_NAMES_IN_DIR = 424;
export const ERROR_FILE_NOT_SUPPORTED = 425;
export const ERROR_CLOUD_FILE_REQUEST_TIMEOUT = 426;
export const ERROR_NO_TASK_QUEUE = 427;
export const ERROR_SRC_SRV_DLL_LOAD_FAILED = 428;
export const ERROR_NOT_SUPPORTED_WITH_BTT = 429;
export const ERROR_ENCRYPTION_DISABLED = 430;
export const ERROR_ENCRYPTING_METADATA_DISALLOWED = 431;
export const ERROR_CANT_CLEAR_ENCRYPTION_FLAG = 432;
export const ERROR_NO_SUCH_DEVICE = 433;
export const ERROR_CLOUD_FILE_DEHYDRATION_DISALLOWED = 434;
export const ERROR_FILE_SNAP_IN_PROGRESS = 435;
export const ERROR_FILE_SNAP_USER_SECTION_NOT_SUPPORTED = 436;
export const ERROR_FILE_SNAP_MODIFY_NOT_SUPPORTED = 437;
export const ERROR_FILE_SNAP_IO_NOT_COORDINATED = 438;
export const ERROR_FILE_SNAP_UNEXPECTED_ERROR = 439;
export const ERROR_FILE_SNAP_INVALID_PARAMETER = 440;
export const ERROR_UNSATISFIED_DEPENDENCIES = 441;
export const ERROR_CASE_SENSITIVE_PATH = 442;
export const ERROR_UNEXPECTED_NTCACHEMANAGER_ERROR = 443;
export const ERROR_LINUX_SUBSYSTEM_UPDATE_REQUIRED = 444;
export const ERROR_DLP_POLICY_WARNS_AGAINST_OPERATION = 445;
export const ERROR_DLP_POLICY_DENIES_OPERATION = 446;
export const ERROR_SECURITY_DENIES_OPERATION = 447;
export const ERROR_UNTRUSTED_MOUNT_POINT = 448;
export const ERROR_DLP_POLICY_SILENTLY_FAIL = 449;
export const ERROR_CAPAUTHZ_NOT_DEVUNLOCKED = 450;
export const ERROR_CAPAUTHZ_CHANGE_TYPE = 451;
export const ERROR_CAPAUTHZ_NOT_PROVISIONED = 452;
export const ERROR_CAPAUTHZ_NOT_AUTHORIZED = 453;
export const ERROR_CAPAUTHZ_NO_POLICY = 454;
export const ERROR_CAPAUTHZ_DB_CORRUPTED = 455;
export const ERROR_CAPAUTHZ_SCCD_INVALID_CATALOG = 456;
export const ERROR_CAPAUTHZ_SCCD_NO_AUTH_ENTITY = 457;
export const ERROR_CAPAUTHZ_SCCD_PARSE_ERROR = 458;
export const ERROR_CAPAUTHZ_SCCD_DEV_MODE_REQUIRED = 459;
export const ERROR_CAPAUTHZ_SCCD_NO_CAPABILITY_MATCH = 460;
export const ERROR_CIMFS_IMAGE_CORRUPT = 470;
export const ERROR_CIMFS_IMAGE_VERSION_NOT_SUPPORTED = 471;
export const ERROR_STORAGE_STACK_ACCESS_DENIED = 472;
export const ERROR_INSUFFICIENT_VIRTUAL_ADDR_RESOURCES = 473;
export const ERROR_INDEX_OUT_OF_BOUNDS = 474;
export const ERROR_PNP_QUERY_REMOVE_DEVICE_TIMEOUT = 480;
export const ERROR_PNP_QUERY_REMOVE_RELATED_DEVICE_TIMEOUT = 481;
export const ERROR_PNP_QUERY_REMOVE_UNRELATED_DEVICE_TIMEOUT = 482;
export const ERROR_DEVICE_HARDWARE_ERROR = 483;
export const ERROR_INVALID_ADDRESS = 487;
export const ERROR_HAS_SYSTEM_CRITICAL_FILES = 488;
export const ERROR_ENCRYPTED_FILE_NOT_SUPPORTED = 489;
export const ERROR_SPARSE_FILE_NOT_SUPPORTED = 490;
export const ERROR_PAGEFILE_NOT_SUPPORTED = 491;
export const ERROR_VOLUME_NOT_SUPPORTED = 492;
export const ERROR_NOT_SUPPORTED_WITH_BYPASSIO = 493;
export const ERROR_NO_BYPASSIO_DRIVER_SUPPORT = 494;
export const ERROR_NOT_SUPPORTED_WITH_ENCRYPTION = 495;
export const ERROR_NOT_SUPPORTED_WITH_COMPRESSION = 496;
export const ERROR_NOT_SUPPORTED_WITH_REPLICATION = 497;
export const ERROR_NOT_SUPPORTED_WITH_DEDUPLICATION = 498;
export const ERROR_NOT_SUPPORTED_WITH_AUDITING = 499;
export const ERROR_USER_PROFILE_LOAD = 500;
export const ERROR_SESSION_KEY_TOO_SHORT = 501;
export const ERROR_ACCESS_DENIED_APPDATA = 502;
export const ERROR_NOT_SUPPORTED_WITH_MONITORING = 503;
export const ERROR_NOT_SUPPORTED_WITH_SNAPSHOT = 504;
export const ERROR_NOT_SUPPORTED_WITH_VIRTUALIZATION = 505;
export const ERROR_BYPASSIO_FLT_NOT_SUPPORTED = 506;
export const ERROR_DEVICE_RESET_REQUIRED = 507;
export const ERROR_VOLUME_WRITE_ACCESS_DENIED = 508;
export const ERROR_ARITHMETIC_OVERFLOW = 534;
export const ERROR_PIPE_CONNECTED = 535;
export const ERROR_PIPE_LISTENING = 536;
export const ERROR_VERIFIER_STOP = 537;
export const ERROR_ABIOS_ERROR = 538;
export const ERROR_WX86_WARNING = 539;
export const ERROR_WX86_ERROR = 540;
export const ERROR_TIMER_NOT_CANCELED = 541;
export const ERROR_UNWIND = 542;
export const ERROR_BAD_STACK = 543;
export const ERROR_INVALID_UNWIND_TARGET = 544;
export const ERROR_INVALID_PORT_ATTRIBUTES = 545;
export const ERROR_PORT_MESSAGE_TOO_LONG = 546;
export const ERROR_INVALID_QUOTA_LOWER = 547;
export const ERROR_DEVICE_ALREADY_ATTACHED = 548;
export const ERROR_INSTRUCTION_MISALIGNMENT = 549;
export const ERROR_PROFILING_NOT_STARTED = 550;
export const ERROR_PROFILING_NOT_STOPPED = 551;
export const ERROR_COULD_NOT_INTERPRET = 552;
export const ERROR_PROFILING_AT_LIMIT = 553;
export const ERROR_CANT_WAIT = 554;
export const ERROR_CANT_TERMINATE_SELF = 555;
export const ERROR_UNEXPECTED_MM_CREATE_ERR = 556;
export const ERROR_UNEXPECTED_MM_MAP_ERROR = 557;
export const ERROR_UNEXPECTED_MM_EXTEND_ERR = 558;
export const ERROR_BAD_FUNCTION_TABLE = 559;
export const ERROR_NO_GUID_TRANSLATION = 560;
export const ERROR_INVALID_LDT_SIZE = 561;
export const ERROR_INVALID_LDT_OFFSET = 563;
export const ERROR_INVALID_LDT_DESCRIPTOR = 564;
export const ERROR_TOO_MANY_THREADS = 565;
export const ERROR_THREAD_NOT_IN_PROCESS = 566;
export const ERROR_PAGEFILE_QUOTA_EXCEEDED = 567;
export const ERROR_LOGON_SERVER_CONFLICT = 568;
export const ERROR_SYNCHRONIZATION_REQUIRED = 569;
export const ERROR_NET_OPEN_FAILED = 570;
export const ERROR_IO_PRIVILEGE_FAILED = 571;
export const ERROR_CONTROL_C_EXIT = 572;
export const ERROR_MISSING_SYSTEMFILE = 573;
export const ERROR_UNHANDLED_EXCEPTION = 574;
export const ERROR_APP_INIT_FAILURE = 575;
export const ERROR_PAGEFILE_CREATE_FAILED = 576;
export const ERROR_INVALID_IMAGE_HASH = 577;
export const ERROR_NO_PAGEFILE = 578;
export const ERROR_ILLEGAL_FLOAT_CONTEXT = 579;
export const ERROR_NO_EVENT_PAIR = 580;
export const ERROR_DOMAIN_CTRLR_CONFIG_ERROR = 581;
export const ERROR_ILLEGAL_CHARACTER = 582;
export const ERROR_UNDEFINED_CHARACTER = 583;
export const ERROR_FLOPPY_VOLUME = 584;
export const ERROR_BIOS_FAILED_TO_CONNECT_INTERRUPT = 585;
export const ERROR_BACKUP_CONTROLLER = 586;
export const ERROR_MUTANT_LIMIT_EXCEEDED = 587;
export const ERROR_FS_DRIVER_REQUIRED = 588;
export const ERROR_CANNOT_LOAD_REGISTRY_FILE = 589;
export const ERROR_DEBUG_ATTACH_FAILED = 590;
export const ERROR_SYSTEM_PROCESS_TERMINATED = 591;
export const ERROR_DATA_NOT_ACCEPTED = 592;
export const ERROR_VDM_HARD_ERROR = 593;
export const ERROR_DRIVER_CANCEL_TIMEOUT = 594;
export const ERROR_REPLY_MESSAGE_MISMATCH = 595;
export const ERROR_LOST_WRITEBEHIND_DATA = 596;
export const ERROR_CLIENT_SERVER_PARAMETERS_INVALID = 597;
export const ERROR_NOT_TINY_STREAM = 598;
export const ERROR_STACK_OVERFLOW_READ = 599;
export const ERROR_CONVERT_TO_LARGE = 600;
export const ERROR_FOUND_OUT_OF_SCOPE = 601;
export const ERROR_ALLOCATE_BUCKET = 602;
export const ERROR_MARSHALL_OVERFLOW = 603;
export const ERROR_INVALID_VARIANT = 604;
export const ERROR_BAD_COMPRESSION_BUFFER = 605;
export const ERROR_AUDIT_FAILED = 606;
export const ERROR_TIMER_RESOLUTION_NOT_SET = 607;
export const ERROR_INSUFFICIENT_LOGON_INFO = 608;
export const ERROR_BAD_DLL_ENTRYPOINT = 609;
export const ERROR_BAD_SERVICE_ENTRYPOINT = 610;
export const ERROR_IP_ADDRESS_CONFLICT1 = 611;
export const ERROR_IP_ADDRESS_CONFLICT2 = 612;
export const ERROR_REGISTRY_QUOTA_LIMIT = 613;
export const ERROR_NO_CALLBACK_ACTIVE = 614;
export const ERROR_PWD_TOO_SHORT = 615;
export const ERROR_PWD_TOO_RECENT = 616;
export const ERROR_PWD_HISTORY_CONFLICT = 617;
export const ERROR_UNSUPPORTED_COMPRESSION = 618;
export const ERROR_INVALID_HW_PROFILE = 619;
export const ERROR_INVALID_PLUGPLAY_DEVICE_PATH = 620;
export const ERROR_QUOTA_LIST_INCONSISTENT = 621;
export const ERROR_EVALUATION_EXPIRATION = 622;
export const ERROR_ILLEGAL_DLL_RELOCATION = 623;
export const ERROR_DLL_INIT_FAILED_LOGOFF = 624;
export const ERROR_VALIDATE_CONTINUE = 625;
export const ERROR_NO_MORE_MATCHES = 626;
export const ERROR_RANGE_LIST_CONFLICT = 627;
export const ERROR_SERVER_SID_MISMATCH = 628;
export const ERROR_CANT_ENABLE_DENY_ONLY = 629;
export const ERROR_FLOAT_MULTIPLE_FAULTS = 630;
export const ERROR_FLOAT_MULTIPLE_TRAPS = 631;
export const ERROR_NOINTERFACE = 632;
export const ERROR_DRIVER_FAILED_SLEEP = 633;
export const ERROR_CORRUPT_SYSTEM_FILE = 634;
export const ERROR_COMMITMENT_MINIMUM = 635;
export const ERROR_PNP_RESTART_ENUMERATION = 636;
export const ERROR_SYSTEM_IMAGE_BAD_SIGNATURE = 637;
export const ERROR_PNP_REBOOT_REQUIRED = 638;
export const ERROR_INSUFFICIENT_POWER = 639;
export const ERROR_MULTIPLE_FAULT_VIOLATION = 640;
export const ERROR_SYSTEM_SHUTDOWN = 641;
export const ERROR_PORT_NOT_SET = 642;
export const ERROR_DS_VERSION_CHECK_FAILURE = 643;
export const ERROR_RANGE_NOT_FOUND = 644;
export const ERROR_NOT_SAFE_MODE_DRIVER = 646;
export const ERROR_FAILED_DRIVER_ENTRY = 647;
export const ERROR_DEVICE_ENUMERATION_ERROR = 648;
export const ERROR_MOUNT_POINT_NOT_RESOLVED = 649;
export const ERROR_INVALID_DEVICE_OBJECT_PARAMETER = 650;
export const ERROR_MCA_OCCURED = 651;
export const ERROR_DRIVER_DATABASE_ERROR = 652;
export const ERROR_SYSTEM_HIVE_TOO_LARGE = 653;
export const ERROR_DRIVER_FAILED_PRIOR_UNLOAD = 654;
export const ERROR_VOLSNAP_PREPARE_HIBERNATE = 655;
export const ERROR_HIBERNATION_FAILURE = 656;
export const ERROR_PWD_TOO_LONG = 657;
export const ERROR_FILE_SYSTEM_LIMITATION = 665;
export const ERROR_ASSERTION_FAILURE = 668;
export const ERROR_ACPI_ERROR = 669;
export const ERROR_WOW_ASSERTION = 670;
export const ERROR_PNP_BAD_MPS_TABLE = 671;
export const ERROR_PNP_TRANSLATION_FAILED = 672;
export const ERROR_PNP_IRQ_TRANSLATION_FAILED = 673;
export const ERROR_PNP_INVALID_ID = 674;
export const ERROR_WAKE_SYSTEM_DEBUGGER = 675;
export const ERROR_HANDLES_CLOSED = 676;
export const ERROR_EXTRANEOUS_INFORMATION = 677;
export const ERROR_RXACT_COMMIT_NECESSARY = 678;
export const ERROR_MEDIA_CHECK = 679;
export const ERROR_GUID_SUBSTITUTION_MADE = 680;
export const ERROR_STOPPED_ON_SYMLINK = 681;
export const ERROR_LONGJUMP = 682;
export const ERROR_PLUGPLAY_QUERY_VETOED = 683;
export const ERROR_UNWIND_CONSOLIDATE = 684;
export const ERROR_REGISTRY_HIVE_RECOVERED = 685;
export const ERROR_DLL_MIGHT_BE_INSECURE = 686;
export const ERROR_DLL_MIGHT_BE_INCOMPATIBLE = 687;
export const ERROR_DBG_EXCEPTION_NOT_HANDLED = 688;
export const ERROR_DBG_REPLY_LATER = 689;
export const ERROR_DBG_UNABLE_TO_PROVIDE_HANDLE = 690;
export const ERROR_DBG_TERMINATE_THREAD = 691;
export const ERROR_DBG_TERMINATE_PROCESS = 692;
export const ERROR_DBG_CONTROL_C = 693;
export const ERROR_DBG_PRINTEXCEPTION_C = 694;
export const ERROR_DBG_RIPEXCEPTION = 695;
export const ERROR_DBG_CONTROL_BREAK = 696;
export const ERROR_DBG_COMMAND_EXCEPTION = 697;
export const ERROR_OBJECT_NAME_EXISTS = 698;
export const ERROR_THREAD_WAS_SUSPENDED = 699;
export const ERROR_IMAGE_NOT_AT_BASE = 700;
export const ERROR_RXACT_STATE_CREATED = 701;
export const ERROR_SEGMENT_NOTIFICATION = 702;
export const ERROR_BAD_CURRENT_DIRECTORY = 703;
export const ERROR_FT_READ_RECOVERY_FROM_BACKUP = 704;
export const ERROR_FT_WRITE_RECOVERY = 705;
export const ERROR_IMAGE_MACHINE_TYPE_MISMATCH = 706;
export const ERROR_RECEIVE_PARTIAL = 707;
export const ERROR_RECEIVE_EXPEDITED = 708;
export const ERROR_RECEIVE_PARTIAL_EXPEDITED = 709;
export const ERROR_EVENT_DONE = 710;
export const ERROR_EVENT_PENDING = 711;
export const ERROR_CHECKING_FILE_SYSTEM = 712;
export const ERROR_FATAL_APP_EXIT = 713;
export const ERROR_PREDEFINED_HANDLE = 714;
export const ERROR_WAS_UNLOCKED = 715;
export const ERROR_SERVICE_NOTIFICATION = 716;
export const ERROR_WAS_LOCKED = 717;
export const ERROR_LOG_HARD_ERROR = 718;
export const ERROR_ALREADY_WIN32 = 719;
export const ERROR_IMAGE_MACHINE_TYPE_MISMATCH_EXE = 720;
export const ERROR_NO_YIELD_PERFORMED = 721;
export const ERROR_TIMER_RESUME_IGNORED = 722;
export const ERROR_ARBITRATION_UNHANDLED = 723;
export const ERROR_CARDBUS_NOT_SUPPORTED = 724;
export const ERROR_MP_PROCESSOR_MISMATCH = 725;
export const ERROR_HIBERNATED = 726;
export const ERROR_RESUME_HIBERNATION = 727;
export const ERROR_FIRMWARE_UPDATED = 728;
export const ERROR_DRIVERS_LEAKING_LOCKED_PAGES = 729;
export const ERROR_WAKE_SYSTEM = 730;
export const ERROR_WAIT_1 = 731;
export const ERROR_WAIT_2 = 732;
export const ERROR_WAIT_3 = 733;
export const ERROR_WAIT_63 = 734;
export const ERROR_ABANDONED_WAIT_0 = 735;
export const ERROR_ABANDONED_WAIT_63 = 736;
export const ERROR_USER_APC = 737;
export const ERROR_KERNEL_APC = 738;
export const ERROR_ALERTED = 739;
export const ERROR_ELEVATION_REQUIRED = 740;
export const ERROR_REPARSE = 741;
export const ERROR_OPLOCK_BREAK_IN_PROGRESS = 742;
export const ERROR_VOLUME_MOUNTED = 743;
export const ERROR_RXACT_COMMITTED = 744;
export const ERROR_NOTIFY_CLEANUP = 745;
export const ERROR_PRIMARY_TRANSPORT_CONNECT_FAILED = 746;
export const ERROR_PAGE_FAULT_TRANSITION = 747;
export const ERROR_PAGE_FAULT_DEMAND_ZERO = 748;
export const ERROR_PAGE_FAULT_COPY_ON_WRITE = 749;
export const ERROR_PAGE_FAULT_GUARD_PAGE = 750;
export const ERROR_PAGE_FAULT_PAGING_FILE = 751;
export const ERROR_CACHE_PAGE_LOCKED = 752;
export const ERROR_CRASH_DUMP = 753;
export const ERROR_BUFFER_ALL_ZEROS = 754;
export const ERROR_REPARSE_OBJECT = 755;
export const ERROR_RESOURCE_REQUIREMENTS_CHANGED = 756;
export const ERROR_TRANSLATION_COMPLETE = 757;
export const ERROR_NOTHING_TO_TERMINATE = 758;
export const ERROR_PROCESS_NOT_IN_JOB = 759;
export const ERROR_PROCESS_IN_JOB = 760;
export const ERROR_VOLSNAP_HIBERNATE_READY = 761;
export const ERROR_FSFILTER_OP_COMPLETED_SUCCESSFULLY = 762;
export const ERROR_INTERRUPT_VECTOR_ALREADY_CONNECTED = 763;
export const ERROR_INTERRUPT_STILL_CONNECTED = 764;
export const ERROR_WAIT_FOR_OPLOCK = 765;
export const ERROR_DBG_EXCEPTION_HANDLED = 766;
export const ERROR_DBG_CONTINUE = 767;
export const ERROR_CALLBACK_POP_STACK = 768;
export const ERROR_COMPRESSION_DISABLED = 769;
export const ERROR_CANTFETCHBACKWARDS = 770;
export const ERROR_CANTSCROLLBACKWARDS = 771;
export const ERROR_ROWSNOTRELEASED = 772;
export const ERROR_BAD_ACCESSOR_FLAGS = 773;
export const ERROR_ERRORS_ENCOUNTERED = 774;
export const ERROR_NOT_CAPABLE = 775;
export const ERROR_REQUEST_OUT_OF_SEQUENCE = 776;
export const ERROR_VERSION_PARSE_ERROR = 777;
export const ERROR_BADSTARTPOSITION = 778;
export const ERROR_MEMORY_HARDWARE = 779;
export const ERROR_DISK_REPAIR_DISABLED = 780;
export const ERROR_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE = 781;
export const ERROR_SYSTEM_POWERSTATE_TRANSITION = 782;
export const ERROR_SYSTEM_POWERSTATE_COMPLEX_TRANSITION = 783;
export const ERROR_MCA_EXCEPTION = 784;
export const ERROR_ACCESS_AUDIT_BY_POLICY = 785;
export const ERROR_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY = 786;
export const ERROR_ABANDON_HIBERFILE = 787;
export const ERROR_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED = 788;
export const ERROR_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR = 789;
export const ERROR_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR = 790;
export const ERROR_BAD_MCFG_TABLE = 791;
export const ERROR_DISK_REPAIR_REDIRECTED = 792;
export const ERROR_DISK_REPAIR_UNSUCCESSFUL = 793;
export const ERROR_CORRUPT_LOG_OVERFULL = 794;
export const ERROR_CORRUPT_LOG_CORRUPTED = 795;
export const ERROR_CORRUPT_LOG_UNAVAILABLE = 796;
export const ERROR_CORRUPT_LOG_DELETED_FULL = 797;
export const ERROR_CORRUPT_LOG_CLEARED = 798;
export const ERROR_ORPHAN_NAME_EXHAUSTED = 799;
export const ERROR_OPLOCK_SWITCHED_TO_NEW_HANDLE = 800;
export const ERROR_CANNOT_GRANT_REQUESTED_OPLOCK = 801;
export const ERROR_CANNOT_BREAK_OPLOCK = 802;
export const ERROR_OPLOCK_HANDLE_CLOSED = 803;
export const ERROR_NO_ACE_CONDITION = 804;
export const ERROR_INVALID_ACE_CONDITION = 805;
export const ERROR_FILE_HANDLE_REVOKED = 806;
export const ERROR_IMAGE_AT_DIFFERENT_BASE = 807;
export const ERROR_ENCRYPTED_IO_NOT_POSSIBLE = 808;
export const ERROR_FILE_METADATA_OPTIMIZATION_IN_PROGRESS = 809;
export const ERROR_QUOTA_ACTIVITY = 810;
export const ERROR_HANDLE_REVOKED = 811;
export const ERROR_CALLBACK_INVOKE_INLINE = 812;
export const ERROR_CPU_SET_INVALID = 813;
export const ERROR_ENCLAVE_NOT_TERMINATED = 814;
export const ERROR_ENCLAVE_VIOLATION = 815;
export const ERROR_SERVER_TRANSPORT_CONFLICT = 816;
export const ERROR_CERTIFICATE_VALIDATION_PREFERENCE_CONFLICT = 817;
export const ERROR_FT_READ_FROM_COPY_FAILURE = 818;
export const ERROR_SECTION_DIRECT_MAP_ONLY = 819;
export const ERROR_EA_ACCESS_DENIED = 994;
export const ERROR_OPERATION_ABORTED = 995;
export const ERROR_IO_INCOMPLETE = 996;
export const ERROR_IO_PENDING = 997;
export const ERROR_NOACCESS = 998;
export const ERROR_SWAPERROR = 999;
export const ERROR_STACK_OVERFLOW = 1001;
export const ERROR_INVALID_MESSAGE = 1002;
export const ERROR_CAN_NOT_COMPLETE = 1003;
export const ERROR_INVALID_FLAGS = 1004;
export const ERROR_UNRECOGNIZED_VOLUME = 1005;
export const ERROR_FILE_INVALID = 1006;
export const ERROR_FULLSCREEN_MODE = 1007;
export const ERROR_NO_TOKEN = 1008;
export const ERROR_BADDB = 1009;
export const ERROR_BADKEY = 1010;
export const ERROR_CANTOPEN = 1011;
export const ERROR_CANTREAD = 1012;
export const ERROR_CANTWRITE = 1013;
export const ERROR_REGISTRY_RECOVERED = 1014;
export const ERROR_REGISTRY_CORRUPT = 1015;
export const ERROR_REGISTRY_IO_FAILED = 1016;
export const ERROR_NOT_REGISTRY_FILE = 1017;
export const ERROR_KEY_DELETED = 1018;
export const ERROR_NO_LOG_SPACE = 1019;
export const ERROR_KEY_HAS_CHILDREN = 1020;
export const ERROR_CHILD_MUST_BE_VOLATILE = 1021;
export const ERROR_NOTIFY_ENUM_DIR = 1022;
export const ERROR_DEPENDENT_SERVICES_RUNNING = 1051;
export const ERROR_INVALID_SERVICE_CONTROL = 1052;
export const ERROR_SERVICE_REQUEST_TIMEOUT = 1053;
export const ERROR_SERVICE_NO_THREAD = 1054;
export const ERROR_SERVICE_DATABASE_LOCKED = 1055;
export const ERROR_SERVICE_ALREADY_RUNNING = 1056;
export const ERROR_INVALID_SERVICE_ACCOUNT = 1057;
export const ERROR_SERVICE_DISABLED = 1058;
export const ERROR_CIRCULAR_DEPENDENCY = 1059;
export const ERROR_SERVICE_DOES_NOT_EXIST = 1060;
export const ERROR_SERVICE_CANNOT_ACCEPT_CTRL = 1061;
export const ERROR_SERVICE_NOT_ACTIVE = 1062;
export const ERROR_FAILED_SERVICE_CONTROLLER_CONNECT = 1063;
export const ERROR_EXCEPTION_IN_SERVICE = 1064;
export const ERROR_DATABASE_DOES_NOT_EXIST = 1065;
export const ERROR_SERVICE_SPECIFIC_ERROR = 1066;
export const ERROR_PROCESS_ABORTED = 1067;
export const ERROR_SERVICE_DEPENDENCY_FAIL = 1068;
export const ERROR_SERVICE_LOGON_FAILED = 1069;
export const ERROR_SERVICE_START_HANG = 1070;
export const ERROR_INVALID_SERVICE_LOCK = 1071;
export const ERROR_SERVICE_MARKED_FOR_DELETE = 1072;
export const ERROR_SERVICE_EXISTS = 1073;
export const ERROR_ALREADY_RUNNING_LKG = 1074;
export const ERROR_SERVICE_DEPENDENCY_DELETED = 1075;
export const ERROR_BOOT_ALREADY_ACCEPTED = 1076;
export const ERROR_SERVICE_NEVER_STARTED = 1077;
export const ERROR_DUPLICATE_SERVICE_NAME = 1078;
export const ERROR_DIFFERENT_SERVICE_ACCOUNT = 1079;
export const ERROR_CANNOT_DETECT_DRIVER_FAILURE = 1080;
export const ERROR_CANNOT_DETECT_PROCESS_ABORT = 1081;
export const ERROR_NO_RECOVERY_PROGRAM = 1082;
export const ERROR_SERVICE_NOT_IN_EXE = 1083;
export const ERROR_NOT_SAFEBOOT_SERVICE = 1084;
export const ERROR_END_OF_MEDIA = 1100;
export const ERROR_FILEMARK_DETECTED = 1101;
export const ERROR_BEGINNING_OF_MEDIA = 1102;
export const ERROR_SETMARK_DETECTED = 1103;
export const ERROR_NO_DATA_DETECTED = 1104;
export const ERROR_PARTITION_FAILURE = 1105;
export const ERROR_INVALID_BLOCK_LENGTH = 1106;
export const ERROR_DEVICE_NOT_PARTITIONED = 1107;
export const ERROR_UNABLE_TO_LOCK_MEDIA = 1108;
export const ERROR_UNABLE_TO_UNLOAD_MEDIA = 1109;
export const ERROR_MEDIA_CHANGED = 1110;
export const ERROR_BUS_RESET = 1111;
export const ERROR_NO_MEDIA_IN_DRIVE = 1112;
export const ERROR_NO_UNICODE_TRANSLATION = 1113;
export const ERROR_DLL_INIT_FAILED = 1114;
export const ERROR_SHUTDOWN_IN_PROGRESS = 1115;
export const ERROR_NO_SHUTDOWN_IN_PROGRESS = 1116;
export const ERROR_IO_DEVICE = 1117;
export const ERROR_SERIAL_NO_DEVICE = 1118;
export const ERROR_IRQ_BUSY = 1119;
export const ERROR_MORE_WRITES = 1120;
export const ERROR_COUNTER_TIMEOUT = 1121;
export const ERROR_FLOPPY_ID_MARK_NOT_FOUND = 1122;
export const ERROR_FLOPPY_WRONG_CYLINDER = 1123;
export const ERROR_FLOPPY_UNKNOWN_ERROR = 1124;
export const ERROR_FLOPPY_BAD_REGISTERS = 1125;
export const ERROR_DISK_RECALIBRATE_FAILED = 1126;
export const ERROR_DISK_OPERATION_FAILED = 1127;
export const ERROR_DISK_RESET_FAILED = 1128;
export const ERROR_EOM_OVERFLOW = 1129;
export const ERROR_NOT_ENOUGH_SERVER_MEMORY = 1130;
export const ERROR_POSSIBLE_DEADLOCK = 1131;
export const ERROR_MAPPED_ALIGNMENT = 1132;
export const ERROR_SET_POWER_STATE_VETOED = 1140;
export const ERROR_SET_POWER_STATE_FAILED = 1141;
export const ERROR_TOO_MANY_LINKS = 1142;
export const ERROR_OLD_WIN_VERSION = 1150;
export const ERROR_APP_WRONG_OS = 1151;
export const ERROR_SINGLE_INSTANCE_APP = 1152;
export const ERROR_RMODE_APP = 1153;
export const ERROR_INVALID_DLL = 1154;
export const ERROR_NO_ASSOCIATION = 1155;
export const ERROR_DDE_FAIL = 1156;
export const ERROR_DLL_NOT_FOUND = 1157;
export const ERROR_NO_MORE_USER_HANDLES = 1158;
export const ERROR_MESSAGE_SYNC_ONLY = 1159;
export const ERROR_SOURCE_ELEMENT_EMPTY = 1160;
export const ERROR_DESTINATION_ELEMENT_FULL = 1161;
export const ERROR_ILLEGAL_ELEMENT_ADDRESS = 1162;
export const ERROR_MAGAZINE_NOT_PRESENT = 1163;
export const ERROR_DEVICE_REINITIALIZATION_NEEDED = 1164;
export const ERROR_DEVICE_REQUIRES_CLEANING = 1165;
export const ERROR_DEVICE_DOOR_OPEN = 1166;
export const ERROR_DEVICE_NOT_CONNECTED = 1167;
export const ERROR_NOT_FOUND = 1168;
export const ERROR_NO_MATCH = 1169;
export const ERROR_SET_NOT_FOUND = 1170;
export const ERROR_POINT_NOT_FOUND = 1171;
export const ERROR_NO_TRACKING_SERVICE = 1172;
export const ERROR_NO_VOLUME_ID = 1173;
export const ERROR_UNABLE_TO_REMOVE_REPLACED = 1175;
export const ERROR_UNABLE_TO_MOVE_REPLACEMENT = 1176;
export const ERROR_UNABLE_TO_MOVE_REPLACEMENT_2 = 1177;
export const ERROR_JOURNAL_DELETE_IN_PROGRESS = 1178;
export const ERROR_JOURNAL_NOT_ACTIVE = 1179;
export const ERROR_POTENTIAL_FILE_FOUND = 1180;
export const ERROR_JOURNAL_ENTRY_DELETED = 1181;
export const ERROR_PARTITION_TERMINATING = 1184;
export const ERROR_SHUTDOWN_IS_SCHEDULED = 1190;
export const ERROR_SHUTDOWN_USERS_LOGGED_ON = 1191;
export const ERROR_SHUTDOWN_DISKS_NOT_IN_MAINTENANCE_MODE = 1192;
export const ERROR_BAD_DEVICE = 1200;
export const ERROR_CONNECTION_UNAVAIL = 1201;
export const ERROR_DEVICE_ALREADY_REMEMBERED = 1202;
export const ERROR_NO_NET_OR_BAD_PATH = 1203;
export const ERROR_BAD_PROVIDER = 1204;
export const ERROR_CANNOT_OPEN_PROFILE = 1205;
export const ERROR_BAD_PROFILE = 1206;
export const ERROR_NOT_CONTAINER = 1207;
export const ERROR_EXTENDED_ERROR = 1208;
export const ERROR_INVALID_GROUPNAME = 1209;
export const ERROR_INVALID_COMPUTERNAME = 1210;
export const ERROR_INVALID_EVENTNAME = 1211;
export const ERROR_INVALID_DOMAINNAME = 1212;
export const ERROR_INVALID_SERVICENAME = 1213;
export const ERROR_INVALID_NETNAME = 1214;
export const ERROR_INVALID_SHARENAME = 1215;
export const ERROR_INVALID_PASSWORDNAME = 1216;
export const ERROR_INVALID_MESSAGENAME = 1217;
export const ERROR_INVALID_MESSAGEDEST = 1218;
export const ERROR_SESSION_CREDENTIAL_CONFLICT = 1219;
export const ERROR_REMOTE_SESSION_LIMIT_EXCEEDED = 1220;
export const ERROR_DUP_DOMAINNAME = 1221;
export const ERROR_NO_NETWORK = 1222;
export const ERROR_CANCELLED = 1223;
export const ERROR_USER_MAPPED_FILE = 1224;
export const ERROR_CONNECTION_REFUSED = 1225;
export const ERROR_GRACEFUL_DISCONNECT = 1226;
export const ERROR_ADDRESS_ALREADY_ASSOCIATED = 1227;
export const ERROR_ADDRESS_NOT_ASSOCIATED = 1228;
export const ERROR_CONNECTION_INVALID = 1229;
export const ERROR_CONNECTION_ACTIVE = 1230;
export const ERROR_NETWORK_UNREACHABLE = 1231;
export const ERROR_HOST_UNREACHABLE = 1232;
export const ERROR_PROTOCOL_UNREACHABLE = 1233;
export const ERROR_PORT_UNREACHABLE = 1234;
export const ERROR_REQUEST_ABORTED = 1235;
export const ERROR_CONNECTION_ABORTED = 1236;
export const ERROR_RETRY = 1237;
export const ERROR_CONNECTION_COUNT_LIMIT = 1238;
export const ERROR_LOGIN_TIME_RESTRICTION = 1239;
export const ERROR_LOGIN_WKSTA_RESTRICTION = 1240;
export const ERROR_INCORRECT_ADDRESS = 1241;
export const ERROR_ALREADY_REGISTERED = 1242;
export const ERROR_SERVICE_NOT_FOUND = 1243;
export const ERROR_NOT_AUTHENTICATED = 1244;
export const ERROR_NOT_LOGGED_ON = 1245;
export const ERROR_CONTINUE = 1246;
export const ERROR_ALREADY_INITIALIZED = 1247;
export const ERROR_NO_MORE_DEVICES = 1248;
export const ERROR_NO_SUCH_SITE = 1249;
export const ERROR_DOMAIN_CONTROLLER_EXISTS = 1250;
export const ERROR_ONLY_IF_CONNECTED = 1251;
export const ERROR_OVERRIDE_NOCHANGES = 1252;
export const ERROR_BAD_USER_PROFILE = 1253;
export const ERROR_NOT_SUPPORTED_ON_SBS = 1254;
export const ERROR_SERVER_SHUTDOWN_IN_PROGRESS = 1255;
export const ERROR_HOST_DOWN = 1256;
export const ERROR_NON_ACCOUNT_SID = 1257;
export const ERROR_NON_DOMAIN_SID = 1258;
export const ERROR_APPHELP_BLOCK = 1259;
export const ERROR_ACCESS_DISABLED_BY_POLICY = 1260;
export const ERROR_REG_NAT_CONSUMPTION = 1261;
export const ERROR_CSCSHARE_OFFLINE = 1262;
export const ERROR_PKINIT_FAILURE = 1263;
export const ERROR_SMARTCARD_SUBSYSTEM_FAILURE = 1264;
export const ERROR_DOWNGRADE_DETECTED = 1265;
export const ERROR_MACHINE_LOCKED = 1271;
export const ERROR_SMB_GUEST_LOGON_BLOCKED = 1272;
export const ERROR_CALLBACK_SUPPLIED_INVALID_DATA = 1273;
export const ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED = 1274;
export const ERROR_DRIVER_BLOCKED = 1275;
export const ERROR_INVALID_IMPORT_OF_NON_DLL = 1276;
export const ERROR_ACCESS_DISABLED_WEBBLADE = 1277;
export const ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER = 1278;
export const ERROR_RECOVERY_FAILURE = 1279;
export const ERROR_ALREADY_FIBER = 1280;
export const ERROR_ALREADY_THREAD = 1281;
export const ERROR_STACK_BUFFER_OVERRUN = 1282;
export const ERROR_PARAMETER_QUOTA_EXCEEDED = 1283;
export const ERROR_DEBUGGER_INACTIVE = 1284;
export const ERROR_DELAY_LOAD_FAILED = 1285;
export const ERROR_VDM_DISALLOWED = 1286;
export const ERROR_UNIDENTIFIED_ERROR = 1287;
export const ERROR_INVALID_CRUNTIME_PARAMETER = 1288;
export const ERROR_BEYOND_VDL = 1289;
export const ERROR_INCOMPATIBLE_SERVICE_SID_TYPE = 1290;
export const ERROR_DRIVER_PROCESS_TERMINATED = 1291;
export const ERROR_IMPLEMENTATION_LIMIT = 1292;
export const ERROR_PROCESS_IS_PROTECTED = 1293;
export const ERROR_SERVICE_NOTIFY_CLIENT_LAGGING = 1294;
export const ERROR_DISK_QUOTA_EXCEEDED = 1295;
export const ERROR_CONTENT_BLOCKED = 1296;
export const ERROR_INCOMPATIBLE_SERVICE_PRIVILEGE = 1297;
export const ERROR_APP_HANG = 1298;
export const ERROR_INVALID_LABEL = 1299;
export const ERROR_NOT_ALL_ASSIGNED = 1300;
export const ERROR_SOME_NOT_MAPPED = 1301;
export const ERROR_NO_QUOTAS_FOR_ACCOUNT = 1302;
export const ERROR_LOCAL_USER_SESSION_KEY = 1303;
export const ERROR_NULL_LM_PASSWORD = 1304;
export const ERROR_UNKNOWN_REVISION = 1305;
export const ERROR_REVISION_MISMATCH = 1306;
export const ERROR_INVALID_OWNER = 1307;
export const ERROR_INVALID_PRIMARY_GROUP = 1308;
export const ERROR_NO_IMPERSONATION_TOKEN = 1309;
export const ERROR_CANT_DISABLE_MANDATORY = 1310;
export const ERROR_NO_LOGON_SERVERS = 1311;
export const ERROR_NO_SUCH_LOGON_SESSION = 1312;
export const ERROR_NO_SUCH_PRIVILEGE = 1313;
export const ERROR_PRIVILEGE_NOT_HELD = 1314;
export const ERROR_INVALID_ACCOUNT_NAME = 1315;
export const ERROR_USER_EXISTS = 1316;
export const ERROR_NO_SUCH_USER = 1317;
export const ERROR_GROUP_EXISTS = 1318;
export const ERROR_NO_SUCH_GROUP = 1319;
export const ERROR_MEMBER_IN_GROUP = 1320;
export const ERROR_MEMBER_NOT_IN_GROUP = 1321;
export const ERROR_LAST_ADMIN = 1322;
export const ERROR_WRONG_PASSWORD = 1323;
export const ERROR_ILL_FORMED_PASSWORD = 1324;
export const ERROR_PASSWORD_RESTRICTION = 1325;
export const ERROR_LOGON_FAILURE = 1326;
export const ERROR_ACCOUNT_RESTRICTION = 1327;
export const ERROR_INVALID_LOGON_HOURS = 1328;
export const ERROR_INVALID_WORKSTATION = 1329;
export const ERROR_PASSWORD_EXPIRED = 1330;
export const ERROR_ACCOUNT_DISABLED = 1331;
export const ERROR_NONE_MAPPED = 1332;
export const ERROR_TOO_MANY_LUIDS_REQUESTED = 1333;
export const ERROR_LUIDS_EXHAUSTED = 1334;
export const ERROR_INVALID_SUB_AUTHORITY = 1335;
export const ERROR_INVALID_ACL = 1336;
export const ERROR_INVALID_SID = 1337;
export const ERROR_INVALID_SECURITY_DESCR = 1338;
export const ERROR_BAD_INHERITANCE_ACL = 1340;
export const ERROR_SERVER_DISABLED = 1341;
export const ERROR_SERVER_NOT_DISABLED = 1342;
export const ERROR_INVALID_ID_AUTHORITY = 1343;
export const ERROR_ALLOTTED_SPACE_EXCEEDED = 1344;
export const ERROR_INVALID_GROUP_ATTRIBUTES = 1345;
export const ERROR_BAD_IMPERSONATION_LEVEL = 1346;
export const ERROR_CANT_OPEN_ANONYMOUS = 1347;
export const ERROR_BAD_VALIDATION_CLASS = 1348;
export const ERROR_BAD_TOKEN_TYPE = 1349;
export const ERROR_NO_SECURITY_ON_OBJECT = 1350;
export const ERROR_CANT_ACCESS_DOMAIN_INFO = 1351;
export const ERROR_INVALID_SERVER_STATE = 1352;
export const ERROR_INVALID_DOMAIN_STATE = 1353;
export const ERROR_INVALID_DOMAIN_ROLE = 1354;
export const ERROR_NO_SUCH_DOMAIN = 1355;
export const ERROR_DOMAIN_EXISTS = 1356;
export const ERROR_DOMAIN_LIMIT_EXCEEDED = 1357;
export const ERROR_INTERNAL_DB_CORRUPTION = 1358;
export const ERROR_INTERNAL_ERROR = 1359;
export const ERROR_GENERIC_NOT_MAPPED = 1360;
export const ERROR_BAD_DESCRIPTOR_FORMAT = 1361;
export const ERROR_NOT_LOGON_PROCESS = 1362;
export const ERROR_LOGON_SESSION_EXISTS = 1363;
export const ERROR_NO_SUCH_PACKAGE = 1364;
export const ERROR_BAD_LOGON_SESSION_STATE = 1365;
export const ERROR_LOGON_SESSION_COLLISION = 1366;
export const ERROR_INVALID_LOGON_TYPE = 1367;
export const ERROR_CANNOT_IMPERSONATE = 1368;
export const ERROR_RXACT_INVALID_STATE = 1369;
export const ERROR_RXACT_COMMIT_FAILURE = 1370;
export const ERROR_SPECIAL_ACCOUNT = 1371;
export const ERROR_SPECIAL_GROUP = 1372;
export const ERROR_SPECIAL_USER = 1373;
export const ERROR_MEMBERS_PRIMARY_GROUP = 1374;
export const ERROR_TOKEN_ALREADY_IN_USE = 1375;
export const ERROR_NO_SUCH_ALIAS = 1376;
export const ERROR_MEMBER_NOT_IN_ALIAS = 1377;
export const ERROR_MEMBER_IN_ALIAS = 1378;
export const ERROR_ALIAS_EXISTS = 1379;
export const ERROR_LOGON_NOT_GRANTED = 1380;
export const ERROR_TOO_MANY_SECRETS = 1381;
export const ERROR_SECRET_TOO_LONG = 1382;
export const ERROR_INTERNAL_DB_ERROR = 1383;
export const ERROR_TOO_MANY_CONTEXT_IDS = 1384;
export const ERROR_LOGON_TYPE_NOT_GRANTED = 1385;
export const ERROR_NT_CROSS_ENCRYPTION_REQUIRED = 1386;
export const ERROR_NO_SUCH_MEMBER = 1387;
export const ERROR_INVALID_MEMBER = 1388;
export const ERROR_TOO_MANY_SIDS = 1389;
export const ERROR_LM_CROSS_ENCRYPTION_REQUIRED = 1390;
export const ERROR_NO_INHERITANCE = 1391;
export const ERROR_FILE_CORRUPT = 1392;
export const ERROR_DISK_CORRUPT = 1393;
export const ERROR_NO_USER_SESSION_KEY = 1394;
export const ERROR_LICENSE_QUOTA_EXCEEDED = 1395;
export const ERROR_WRONG_TARGET_NAME = 1396;
export const ERROR_MUTUAL_AUTH_FAILED = 1397;
export const ERROR_TIME_SKEW = 1398;
export const ERROR_CURRENT_DOMAIN_NOT_ALLOWED = 1399;
export const ERROR_INVALID_WINDOW_HANDLE = 1400;
export const ERROR_INVALID_MENU_HANDLE = 1401;
export const ERROR_INVALID_CURSOR_HANDLE = 1402;
export const ERROR_INVALID_ACCEL_HANDLE = 1403;
export const ERROR_INVALID_HOOK_HANDLE = 1404;
export const ERROR_INVALID_DWP_HANDLE = 1405;
export const ERROR_TLW_WITH_WSCHILD = 1406;
export const ERROR_CANNOT_FIND_WND_CLASS = 1407;
export const ERROR_WINDOW_OF_OTHER_THREAD = 1408;
export const ERROR_HOTKEY_ALREADY_REGISTERED = 1409;
export const ERROR_CLASS_ALREADY_EXISTS = 1410;
export const ERROR_CLASS_DOES_NOT_EXIST = 1411;
export const ERROR_CLASS_HAS_WINDOWS = 1412;
export const ERROR_INVALID_INDEX = 1413;
export const ERROR_INVALID_ICON_HANDLE = 1414;
export const ERROR_PRIVATE_DIALOG_INDEX = 1415;
export const ERROR_LISTBOX_ID_NOT_FOUND = 1416;
export const ERROR_NO_WILDCARD_CHARACTERS = 1417;
export const ERROR_CLIPBOARD_NOT_OPEN = 1418;
export const ERROR_HOTKEY_NOT_REGISTERED = 1419;
export const ERROR_WINDOW_NOT_DIALOG = 1420;
export const ERROR_CONTROL_ID_NOT_FOUND = 1421;
export const ERROR_INVALID_COMBOBOX_MESSAGE = 1422;
export const ERROR_WINDOW_NOT_COMBOBOX = 1423;
export const ERROR_INVALID_EDIT_HEIGHT = 1424;
export const ERROR_DC_NOT_FOUND = 1425;
export const ERROR_INVALID_HOOK_FILTER = 1426;
export const ERROR_INVALID_FILTER_PROC = 1427;
export const ERROR_HOOK_NEEDS_HMOD = 1428;
export const ERROR_GLOBAL_ONLY_HOOK = 1429;
export const ERROR_JOURNAL_HOOK_SET = 1430;
export const ERROR_HOOK_NOT_INSTALLED = 1431;
export const ERROR_INVALID_LB_MESSAGE = 1432;
export const ERROR_SETCOUNT_ON_BAD_LB = 1433;
export const ERROR_LB_WITHOUT_TABSTOPS = 1434;
export const ERROR_DESTROY_OBJECT_OF_OTHER_THREAD = 1435;
export const ERROR_CHILD_WINDOW_MENU = 1436;
export const ERROR_NO_SYSTEM_MENU = 1437;
export const ERROR_INVALID_MSGBOX_STYLE = 1438;
export const ERROR_INVALID_SPI_VALUE = 1439;
export const ERROR_SCREEN_ALREADY_LOCKED = 1440;
export const ERROR_HWNDS_HAVE_DIFF_PARENT = 1441;
export const ERROR_NOT_CHILD_WINDOW = 1442;
export const ERROR_INVALID_GW_COMMAND = 1443;
export const ERROR_INVALID_THREAD_ID = 1444;
export const ERROR_NON_MDICHILD_WINDOW = 1445;
export const ERROR_POPUP_ALREADY_ACTIVE = 1446;
export const ERROR_NO_SCROLLBARS = 1447;
export const ERROR_INVALID_SCROLLBAR_RANGE = 1448;
export const ERROR_INVALID_SHOWWIN_COMMAND = 1449;
export const ERROR_NO_SYSTEM_RESOURCES = 1450;
export const ERROR_NONPAGED_SYSTEM_RESOURCES = 1451;
export const ERROR_PAGED_SYSTEM_RESOURCES = 1452;
export const ERROR_WORKING_SET_QUOTA = 1453;
export const ERROR_PAGEFILE_QUOTA = 1454;
export const ERROR_COMMITMENT_LIMIT = 1455;
export const ERROR_MENU_ITEM_NOT_FOUND = 1456;
export const ERROR_INVALID_KEYBOARD_HANDLE = 1457;
export const ERROR_HOOK_TYPE_NOT_ALLOWED = 1458;
export const ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION = 1459;
export const ERROR_TIMEOUT = 1460;
export const ERROR_INVALID_MONITOR_HANDLE = 1461;
export const ERROR_INCORRECT_SIZE = 1462;
export const ERROR_SYMLINK_CLASS_DISABLED = 1463;
export const ERROR_SYMLINK_NOT_SUPPORTED = 1464;
export const ERROR_XML_PARSE_ERROR = 1465;
export const ERROR_XMLDSIG_ERROR = 1466;
export const ERROR_RESTART_APPLICATION = 1467;
export const ERROR_WRONG_COMPARTMENT = 1468;
export const ERROR_AUTHIP_FAILURE = 1469;
export const ERROR_NO_NVRAM_RESOURCES = 1470;
export const ERROR_NOT_GUI_PROCESS = 1471;
export const ERROR_EVENTLOG_FILE_CORRUPT = 1500;
export const ERROR_EVENTLOG_CANT_START = 1501;
export const ERROR_LOG_FILE_FULL = 1502;
export const ERROR_EVENTLOG_FILE_CHANGED = 1503;
export const ERROR_CONTAINER_ASSIGNED = 1504;
export const ERROR_JOB_NO_CONTAINER = 1505;
export const ERROR_INVALID_TASK_NAME = 1550;
export const ERROR_INVALID_TASK_INDEX = 1551;
export const ERROR_THREAD_ALREADY_IN_TASK = 1552;
export const ERROR_INSTALL_SERVICE_FAILURE = 1601;
export const ERROR_INSTALL_USEREXIT = 1602;
export const ERROR_INSTALL_FAILURE = 1603;
export const ERROR_INSTALL_SUSPEND = 1604;
export const ERROR_UNKNOWN_PRODUCT = 1605;
export const ERROR_UNKNOWN_FEATURE = 1606;
export const ERROR_UNKNOWN_COMPONENT = 1607;
export const ERROR_UNKNOWN_PROPERTY = 1608;
export const ERROR_INVALID_HANDLE_STATE = 1609;
export const ERROR_BAD_CONFIGURATION = 1610;
export const ERROR_INDEX_ABSENT = 1611;
export const ERROR_INSTALL_SOURCE_ABSENT = 1612;
export const ERROR_INSTALL_PACKAGE_VERSION = 1613;
export const ERROR_PRODUCT_UNINSTALLED = 1614;
export const ERROR_BAD_QUERY_SYNTAX = 1615;
export const ERROR_INVALID_FIELD = 1616;
export const ERROR_DEVICE_REMOVED = 1617;
export const ERROR_INSTALL_ALREADY_RUNNING = 1618;
export const ERROR_INSTALL_PACKAGE_OPEN_FAILED = 1619;
export const ERROR_INSTALL_PACKAGE_INVALID = 1620;
export const ERROR_INSTALL_UI_FAILURE = 1621;
export const ERROR_INSTALL_LOG_FAILURE = 1622;
export const ERROR_INSTALL_LANGUAGE_UNSUPPORTED = 1623;
export const ERROR_INSTALL_TRANSFORM_FAILURE = 1624;
export const ERROR_INSTALL_PACKAGE_REJECTED = 1625;
export const ERROR_FUNCTION_NOT_CALLED = 1626;
export const ERROR_FUNCTION_FAILED = 1627;
export const ERROR_INVALID_TABLE = 1628;
export const ERROR_DATATYPE_MISMATCH = 1629;
export const ERROR_UNSUPPORTED_TYPE = 1630;
export const ERROR_CREATE_FAILED = 1631;
export const ERROR_INSTALL_TEMP_UNWRITABLE = 1632;
export const ERROR_INSTALL_PLATFORM_UNSUPPORTED = 1633;
export const ERROR_INSTALL_NOTUSED = 1634;
export const ERROR_PATCH_PACKAGE_OPEN_FAILED = 1635;
export const ERROR_PATCH_PACKAGE_INVALID = 1636;
export const ERROR_PATCH_PACKAGE_UNSUPPORTED = 1637;
export const ERROR_PRODUCT_VERSION = 1638;
export const ERROR_INVALID_COMMAND_LINE = 1639;
export const ERROR_INSTALL_REMOTE_DISALLOWED = 1640;
export const ERROR_SUCCESS_REBOOT_INITIATED = 1641;
export const ERROR_PATCH_TARGET_NOT_FOUND = 1642;
export const ERROR_PATCH_PACKAGE_REJECTED = 1643;
export const ERROR_INSTALL_TRANSFORM_REJECTED = 1644;
export const ERROR_INSTALL_REMOTE_PROHIBITED = 1645;
export const ERROR_PATCH_REMOVAL_UNSUPPORTED = 1646;
export const ERROR_UNKNOWN_PATCH = 1647;
export const ERROR_PATCH_NO_SEQUENCE = 1648;
export const ERROR_PATCH_REMOVAL_DISALLOWED = 1649;
export const ERROR_INVALID_PATCH_XML = 1650;
export const ERROR_PATCH_MANAGED_ADVERTISED_PRODUCT = 1651;
export const ERROR_INSTALL_SERVICE_SAFEBOOT = 1652;
export const ERROR_FAIL_FAST_EXCEPTION = 1653;
export const ERROR_INSTALL_REJECTED = 1654;
export const ERROR_DYNAMIC_CODE_BLOCKED = 1655;
export const ERROR_NOT_SAME_OBJECT = 1656;
export const ERROR_STRICT_CFG_VIOLATION = 1657;
export const ERROR_SET_CONTEXT_DENIED = 1660;
export const ERROR_CROSS_PARTITION_VIOLATION = 1661;
export const ERROR_RETURN_ADDRESS_HIJACK_ATTEMPT = 1662;
export const ERROR_INVALID_USER_BUFFER = 1784;
export const ERROR_UNRECOGNIZED_MEDIA = 1785;
export const ERROR_NO_TRUST_LSA_SECRET = 1786;
export const ERROR_NO_TRUST_SAM_ACCOUNT = 1787;
export const ERROR_TRUSTED_DOMAIN_FAILURE = 1788;
export const ERROR_TRUSTED_RELATIONSHIP_FAILURE = 1789;
export const ERROR_TRUST_FAILURE = 1790;
export const ERROR_NETLOGON_NOT_STARTED = 1792;
export const ERROR_ACCOUNT_EXPIRED = 1793;
export const ERROR_REDIRECTOR_HAS_OPEN_HANDLES = 1794;
export const ERROR_PRINTER_DRIVER_ALREADY_INSTALLED = 1795;
export const ERROR_UNKNOWN_PORT = 1796;
export const ERROR_UNKNOWN_PRINTER_DRIVER = 1797;
export const ERROR_UNKNOWN_PRINTPROCESSOR = 1798;
export const ERROR_INVALID_SEPARATOR_FILE = 1799;
export const ERROR_INVALID_PRIORITY = 1800;
export const ERROR_INVALID_PRINTER_NAME = 1801;
export const ERROR_PRINTER_ALREADY_EXISTS = 1802;
export const ERROR_INVALID_PRINTER_COMMAND = 1803;
export const ERROR_INVALID_DATATYPE = 1804;
export const ERROR_INVALID_ENVIRONMENT = 1805;
export const ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT = 1807;
export const ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT = 1808;
export const ERROR_NOLOGON_SERVER_TRUST_ACCOUNT = 1809;
export const ERROR_DOMAIN_TRUST_INCONSISTENT = 1810;
export const ERROR_SERVER_HAS_OPEN_HANDLES = 1811;
export const ERROR_RESOURCE_DATA_NOT_FOUND = 1812;
export const ERROR_RESOURCE_TYPE_NOT_FOUND = 1813;
export const ERROR_RESOURCE_NAME_NOT_FOUND = 1814;
export const ERROR_RESOURCE_LANG_NOT_FOUND = 1815;
export const ERROR_NOT_ENOUGH_QUOTA = 1816;
export const ERROR_INVALID_TIME = 1901;
export const ERROR_INVALID_FORM_NAME = 1902;
export const ERROR_INVALID_FORM_SIZE = 1903;
export const ERROR_ALREADY_WAITING = 1904;
export const ERROR_PRINTER_DELETED = 1905;
export const ERROR_INVALID_PRINTER_STATE = 1906;
export const ERROR_PASSWORD_MUST_CHANGE = 1907;
export const ERROR_DOMAIN_CONTROLLER_NOT_FOUND = 1908;
export const ERROR_ACCOUNT_LOCKED_OUT = 1909;
export const ERROR_NO_SITENAME = 1919;
export const ERROR_CANT_ACCESS_FILE = 1920;
export const ERROR_CANT_RESOLVE_FILENAME = 1921;
export const ERROR_KM_DRIVER_BLOCKED = 1930;
export const ERROR_CONTEXT_EXPIRED = 1931;
export const ERROR_PER_USER_TRUST_QUOTA_EXCEEDED = 1932;
export const ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED = 1933;
export const ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED = 1934;
export const ERROR_AUTHENTICATION_FIREWALL_FAILED = 1935;
export const ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED = 1936;
export const ERROR_NTLM_BLOCKED = 1937;
export const ERROR_PASSWORD_CHANGE_REQUIRED = 1938;
export const ERROR_LOST_MODE_LOGON_RESTRICTION = 1939;
export const ERROR_INVALID_PIXEL_FORMAT = 2000;
export const ERROR_BAD_DRIVER = 2001;
export const ERROR_INVALID_WINDOW_STYLE = 2002;
export const ERROR_METAFILE_NOT_SUPPORTED = 2003;
export const ERROR_TRANSFORM_NOT_SUPPORTED = 2004;
export const ERROR_CLIPPING_NOT_SUPPORTED = 2005;
export const ERROR_INVALID_CMM = 2010;
export const ERROR_INVALID_PROFILE = 2011;
export const ERROR_TAG_NOT_FOUND = 2012;
export const ERROR_TAG_NOT_PRESENT = 2013;
export const ERROR_DUPLICATE_TAG = 2014;
export const ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE = 2015;
export const ERROR_PROFILE_NOT_FOUND = 2016;
export const ERROR_INVALID_COLORSPACE = 2017;
export const ERROR_ICM_NOT_ENABLED = 2018;
export const ERROR_DELETING_ICM_XFORM = 2019;
export const ERROR_INVALID_TRANSFORM = 2020;
export const ERROR_COLORSPACE_MISMATCH = 2021;
export const ERROR_INVALID_COLORINDEX = 2022;
export const ERROR_PROFILE_DOES_NOT_MATCH_DEVICE = 2023;
export const ERROR_CONNECTED_OTHER_PASSWORD = 2108;
export const ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT = 2109;
export const ERROR_BAD_USERNAME = 2202;
export const ERROR_NOT_CONNECTED = 2250;
export const ERROR_OPEN_FILES = 2401;
export const ERROR_ACTIVE_CONNECTIONS = 2402;
export const ERROR_DEVICE_IN_USE = 2404;
export const ERROR_UNKNOWN_PRINT_MONITOR = 3000;
export const ERROR_PRINTER_DRIVER_IN_USE = 3001;
export const ERROR_SPOOL_FILE_NOT_FOUND = 3002;
export const ERROR_SPL_NO_STARTDOC = 3003;
export const ERROR_SPL_NO_ADDJOB = 3004;
export const ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED = 3005;
export const ERROR_PRINT_MONITOR_ALREADY_INSTALLED = 3006;
export const ERROR_INVALID_PRINT_MONITOR = 3007;
export const ERROR_PRINT_MONITOR_IN_USE = 3008;
export const ERROR_PRINTER_HAS_JOBS_QUEUED = 3009;
export const ERROR_SUCCESS_REBOOT_REQUIRED = 3010;
export const ERROR_SUCCESS_RESTART_REQUIRED = 3011;
export const ERROR_PRINTER_NOT_FOUND = 3012;
export const ERROR_PRINTER_DRIVER_WARNED = 3013;
export const ERROR_PRINTER_DRIVER_BLOCKED = 3014;
export const ERROR_PRINTER_DRIVER_PACKAGE_IN_USE = 3015;
export const ERROR_CORE_DRIVER_PACKAGE_NOT_FOUND = 3016;
export const ERROR_FAIL_REBOOT_REQUIRED = 3017;
export const ERROR_FAIL_REBOOT_INITIATED = 3018;
export const ERROR_PRINTER_DRIVER_DOWNLOAD_NEEDED = 3019;
export const ERROR_PRINT_JOB_RESTART_REQUIRED = 3020;
export const ERROR_INVALID_PRINTER_DRIVER_MANIFEST = 3021;
export const ERROR_PRINTER_NOT_SHAREABLE = 3022;
export const ERROR_REQUEST_PAUSED = 3050;
export const ERROR_APPEXEC_CONDITION_NOT_SATISFIED = 3060;
export const ERROR_APPEXEC_HANDLE_INVALIDATED = 3061;
export const ERROR_APPEXEC_INVALID_HOST_GENERATION = 3062;
export const ERROR_APPEXEC_UNEXPECTED_PROCESS_REGISTRATION = 3063;
export const ERROR_APPEXEC_INVALID_HOST_STATE = 3064;
export const ERROR_APPEXEC_NO_DONOR = 3065;
export const ERROR_APPEXEC_HOST_ID_MISMATCH = 3066;
export const ERROR_APPEXEC_UNKNOWN_USER = 3067;
export const ERROR_APPEXEC_APP_COMPAT_BLOCK = 3068;
export const ERROR_APPEXEC_CALLER_WAIT_TIMEOUT = 3069;
export const ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_TERMINATION = 3070;
export const ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_LICENSING = 3071;
export const ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_RESOURCES = 3072;
export const ERROR_VRF_VOLATILE_CFG_AND_IO_ENABLED = 3080;
export const ERROR_VRF_VOLATILE_NOT_STOPPABLE = 3081;
export const ERROR_VRF_VOLATILE_SAFE_MODE = 3082;
export const ERROR_VRF_VOLATILE_NOT_RUNNABLE_SYSTEM = 3083;
export const ERROR_VRF_VOLATILE_NOT_SUPPORTED_RULECLASS = 3084;
export const ERROR_VRF_VOLATILE_PROTECTED_DRIVER = 3085;
export const ERROR_VRF_VOLATILE_NMI_REGISTERED = 3086;
export const ERROR_VRF_VOLATILE_SETTINGS_CONFLICT = 3087;
export const ERROR_DIF_IOCALLBACK_NOT_REPLACED = 3190;
export const ERROR_DIF_LIVEDUMP_LIMIT_EXCEEDED = 3191;
export const ERROR_DIF_VOLATILE_SECTION_NOT_LOCKED = 3192;
export const ERROR_DIF_VOLATILE_DRIVER_HOTPATCHED = 3193;
export const ERROR_DIF_VOLATILE_INVALID_INFO = 3194;
export const ERROR_DIF_VOLATILE_DRIVER_IS_NOT_RUNNING = 3195;
export const ERROR_DIF_VOLATILE_PLUGIN_IS_NOT_RUNNING = 3196;
export const ERROR_DIF_VOLATILE_PLUGIN_CHANGE_NOT_ALLOWED = 3197;
export const ERROR_DIF_VOLATILE_NOT_ALLOWED = 3198;
export const ERROR_DIF_BINDING_API_NOT_FOUND = 3199;
export const ERROR_IO_REISSUE_AS_CACHED = 3950;
export const ERROR_WINS_INTERNAL = 4000;
export const ERROR_CAN_NOT_DEL_LOCAL_WINS = 4001;
export const ERROR_STATIC_INIT = 4002;
export const ERROR_INC_BACKUP = 4003;
export const ERROR_FULL_BACKUP = 4004;
export const ERROR_REC_NON_EXISTENT = 4005;
export const ERROR_RPL_NOT_ALLOWED = 4006;
export const ERROR_DHCP_ADDRESS_CONFLICT = 4100;
export const ERROR_WMI_GUID_NOT_FOUND = 4200;
export const ERROR_WMI_INSTANCE_NOT_FOUND = 4201;
export const ERROR_WMI_ITEMID_NOT_FOUND = 4202;
export const ERROR_WMI_TRY_AGAIN = 4203;
export const ERROR_WMI_DP_NOT_FOUND = 4204;
export const ERROR_WMI_UNRESOLVED_INSTANCE_REF = 4205;
export const ERROR_WMI_ALREADY_ENABLED = 4206;
export const ERROR_WMI_GUID_DISCONNECTED = 4207;
export const ERROR_WMI_SERVER_UNAVAILABLE = 4208;
export const ERROR_WMI_DP_FAILED = 4209;
export const ERROR_WMI_INVALID_MOF = 4210;
export const ERROR_WMI_INVALID_REGINFO = 4211;
export const ERROR_WMI_ALREADY_DISABLED = 4212;
export const ERROR_WMI_READ_ONLY = 4213;
export const ERROR_WMI_SET_FAILURE = 4214;
export const ERROR_NOT_APPCONTAINER = 4250;
export const ERROR_APPCONTAINER_REQUIRED = 4251;
export const ERROR_NOT_SUPPORTED_IN_APPCONTAINER = 4252;
export const ERROR_INVALID_PACKAGE_SID_LENGTH = 4253;
export const ERROR_INVALID_MEDIA = 4300;
export const ERROR_INVALID_LIBRARY = 4301;
export const ERROR_INVALID_MEDIA_POOL = 4302;
export const ERROR_DRIVE_MEDIA_MISMATCH = 4303;
export const ERROR_MEDIA_OFFLINE = 4304;
export const ERROR_LIBRARY_OFFLINE = 4305;
export const ERROR_EMPTY = 4306;
export const ERROR_NOT_EMPTY = 4307;
export const ERROR_MEDIA_UNAVAILABLE = 4308;
export const ERROR_RESOURCE_DISABLED = 4309;
export const ERROR_INVALID_CLEANER = 4310;
export const ERROR_UNABLE_TO_CLEAN = 4311;
export const ERROR_OBJECT_NOT_FOUND = 4312;
export const ERROR_DATABASE_FAILURE = 4313;
export const ERROR_DATABASE_FULL = 4314;
export const ERROR_MEDIA_INCOMPATIBLE = 4315;
export const ERROR_RESOURCE_NOT_PRESENT = 4316;
export const ERROR_INVALID_OPERATION = 4317;
export const ERROR_MEDIA_NOT_AVAILABLE = 4318;
export const ERROR_DEVICE_NOT_AVAILABLE = 4319;
export const ERROR_REQUEST_REFUSED = 4320;
export const ERROR_INVALID_DRIVE_OBJECT = 4321;
export const ERROR_LIBRARY_FULL = 4322;
export const ERROR_MEDIUM_NOT_ACCESSIBLE = 4323;
export const ERROR_UNABLE_TO_LOAD_MEDIUM = 4324;
export const ERROR_UNABLE_TO_INVENTORY_DRIVE = 4325;
export const ERROR_UNABLE_TO_INVENTORY_SLOT = 4326;
export const ERROR_UNABLE_TO_INVENTORY_TRANSPORT = 4327;
export const ERROR_TRANSPORT_FULL = 4328;
export const ERROR_CONTROLLING_IEPORT = 4329;
export const ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA = 4330;
export const ERROR_CLEANER_SLOT_SET = 4331;
export const ERROR_CLEANER_SLOT_NOT_SET = 4332;
export const ERROR_CLEANER_CARTRIDGE_SPENT = 4333;
export const ERROR_UNEXPECTED_OMID = 4334;
export const ERROR_CANT_DELETE_LAST_ITEM = 4335;
export const ERROR_MESSAGE_EXCEEDS_MAX_SIZE = 4336;
export const ERROR_VOLUME_CONTAINS_SYS_FILES = 4337;
export const ERROR_INDIGENOUS_TYPE = 4338;
export const ERROR_NO_SUPPORTING_DRIVES = 4339;
export const ERROR_CLEANER_CARTRIDGE_INSTALLED = 4340;
export const ERROR_IEPORT_FULL = 4341;
export const ERROR_FILE_OFFLINE = 4350;
export const ERROR_REMOTE_STORAGE_NOT_ACTIVE = 4351;
export const ERROR_REMOTE_STORAGE_MEDIA_ERROR = 4352;
export const ERROR_NOT_A_REPARSE_POINT = 4390;
export const ERROR_REPARSE_ATTRIBUTE_CONFLICT = 4391;
export const ERROR_INVALID_REPARSE_DATA = 4392;
export const ERROR_REPARSE_TAG_INVALID = 4393;
export const ERROR_REPARSE_TAG_MISMATCH = 4394;
export const ERROR_REPARSE_POINT_ENCOUNTERED = 4395;
export const ERROR_APP_DATA_NOT_FOUND = 4400;
export const ERROR_APP_DATA_EXPIRED = 4401;
export const ERROR_APP_DATA_CORRUPT = 4402;
export const ERROR_APP_DATA_LIMIT_EXCEEDED = 4403;
export const ERROR_APP_DATA_REBOOT_REQUIRED = 4404;
export const ERROR_SECUREBOOT_ROLLBACK_DETECTED = 4420;
export const ERROR_SECUREBOOT_POLICY_VIOLATION = 4421;
export const ERROR_SECUREBOOT_INVALID_POLICY = 4422;
export const ERROR_SECUREBOOT_POLICY_PUBLISHER_NOT_FOUND = 4423;
export const ERROR_SECUREBOOT_POLICY_NOT_SIGNED = 4424;
export const ERROR_SECUREBOOT_NOT_ENABLED = 4425;
export const ERROR_SECUREBOOT_FILE_REPLACED = 4426;
export const ERROR_SECUREBOOT_POLICY_NOT_AUTHORIZED = 4427;
export const ERROR_SECUREBOOT_POLICY_UNKNOWN = 4428;
export const ERROR_SECUREBOOT_POLICY_MISSING_ANTIROLLBACKVERSION = 4429;
export const ERROR_SECUREBOOT_PLATFORM_ID_MISMATCH = 4430;
export const ERROR_SECUREBOOT_POLICY_ROLLBACK_DETECTED = 4431;
export const ERROR_SECUREBOOT_POLICY_UPGRADE_MISMATCH = 4432;
export const ERROR_SECUREBOOT_REQUIRED_POLICY_FILE_MISSING = 4433;
export const ERROR_SECUREBOOT_NOT_BASE_POLICY = 4434;
export const ERROR_SECUREBOOT_NOT_SUPPLEMENTAL_POLICY = 4435;
export const ERROR_OFFLOAD_READ_FLT_NOT_SUPPORTED = 4440;
export const ERROR_OFFLOAD_WRITE_FLT_NOT_SUPPORTED = 4441;
export const ERROR_OFFLOAD_READ_FILE_NOT_SUPPORTED = 4442;
export const ERROR_OFFLOAD_WRITE_FILE_NOT_SUPPORTED = 4443;
export const ERROR_ALREADY_HAS_STREAM_ID = 4444;
export const ERROR_SMR_GARBAGE_COLLECTION_REQUIRED = 4445;
export const ERROR_WOF_WIM_HEADER_CORRUPT = 4446;
export const ERROR_WOF_WIM_RESOURCE_TABLE_CORRUPT = 4447;
export const ERROR_WOF_FILE_RESOURCE_TABLE_CORRUPT = 4448;
export const ERROR_OBJECT_IS_IMMUTABLE = 4449;
export const ERROR_VOLUME_NOT_SIS_ENABLED = 4500;
export const ERROR_SYSTEM_INTEGRITY_ROLLBACK_DETECTED = 4550;
export const ERROR_SYSTEM_INTEGRITY_POLICY_VIOLATION = 4551;
export const ERROR_SYSTEM_INTEGRITY_INVALID_POLICY = 4552;
export const ERROR_SYSTEM_INTEGRITY_POLICY_NOT_SIGNED = 4553;
export const ERROR_SYSTEM_INTEGRITY_TOO_MANY_POLICIES = 4554;
export const ERROR_SYSTEM_INTEGRITY_SUPPLEMENTAL_POLICY_NOT_AUTHORIZED = 4555;
export const ERROR_SYSTEM_INTEGRITY_REPUTATION_MALICIOUS = 4556;
export const ERROR_SYSTEM_INTEGRITY_REPUTATION_PUA = 4557;
export const ERROR_SYSTEM_INTEGRITY_REPUTATION_DANGEROUS_EXT = 4558;
export const ERROR_SYSTEM_INTEGRITY_REPUTATION_OFFLINE = 4559;
export const ERROR_VSM_NOT_INITIALIZED = 4560;
export const ERROR_VSM_DMA_PROTECTION_NOT_IN_USE = 4561;
export const ERROR_PLATFORM_MANIFEST_NOT_AUTHORIZED = 4570;
export const ERROR_PLATFORM_MANIFEST_INVALID = 4571;
export const ERROR_PLATFORM_MANIFEST_FILE_NOT_AUTHORIZED = 4572;
export const ERROR_PLATFORM_MANIFEST_CATALOG_NOT_AUTHORIZED = 4573;
export const ERROR_PLATFORM_MANIFEST_BINARY_ID_NOT_FOUND = 4574;
export const ERROR_PLATFORM_MANIFEST_NOT_ACTIVE = 4575;
export const ERROR_PLATFORM_MANIFEST_NOT_SIGNED = 4576;
export const ERROR_DEPENDENT_RESOURCE_EXISTS = 5001;
export const ERROR_DEPENDENCY_NOT_FOUND = 5002;
export const ERROR_DEPENDENCY_ALREADY_EXISTS = 5003;
export const ERROR_RESOURCE_NOT_ONLINE = 5004;
export const ERROR_HOST_NODE_NOT_AVAILABLE = 5005;
export const ERROR_RESOURCE_NOT_AVAILABLE = 5006;
export const ERROR_RESOURCE_NOT_FOUND = 5007;
export const ERROR_SHUTDOWN_CLUSTER = 5008;
export const ERROR_CANT_EVICT_ACTIVE_NODE = 5009;
export const ERROR_OBJECT_ALREADY_EXISTS = 5010;
export const ERROR_OBJECT_IN_LIST = 5011;
export const ERROR_GROUP_NOT_AVAILABLE = 5012;
export const ERROR_GROUP_NOT_FOUND = 5013;
export const ERROR_GROUP_NOT_ONLINE = 5014;
export const ERROR_HOST_NODE_NOT_RESOURCE_OWNER = 5015;
export const ERROR_HOST_NODE_NOT_GROUP_OWNER = 5016;
export const ERROR_RESMON_CREATE_FAILED = 5017;
export const ERROR_RESMON_ONLINE_FAILED = 5018;
export const ERROR_RESOURCE_ONLINE = 5019;
export const ERROR_QUORUM_RESOURCE = 5020;
export const ERROR_NOT_QUORUM_CAPABLE = 5021;
export const ERROR_CLUSTER_SHUTTING_DOWN = 5022;
export const ERROR_INVALID_STATE = 5023;
export const ERROR_RESOURCE_PROPERTIES_STORED = 5024;
export const ERROR_NOT_QUORUM_CLASS = 5025;
export const ERROR_CORE_RESOURCE = 5026;
export const ERROR_QUORUM_RESOURCE_ONLINE_FAILED = 5027;
export const ERROR_QUORUMLOG_OPEN_FAILED = 5028;
export const ERROR_CLUSTERLOG_CORRUPT = 5029;
export const ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE = 5030;
export const ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE = 5031;
export const ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND = 5032;
export const ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE = 5033;
export const ERROR_QUORUM_OWNER_ALIVE = 5034;
export const ERROR_NETWORK_NOT_AVAILABLE = 5035;
export const ERROR_NODE_NOT_AVAILABLE = 5036;
export const ERROR_ALL_NODES_NOT_AVAILABLE = 5037;
export const ERROR_RESOURCE_FAILED = 5038;
export const ERROR_CLUSTER_INVALID_NODE = 5039;
export const ERROR_CLUSTER_NODE_EXISTS = 5040;
export const ERROR_CLUSTER_JOIN_IN_PROGRESS = 5041;
export const ERROR_CLUSTER_NODE_NOT_FOUND = 5042;
export const ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND = 5043;
export const ERROR_CLUSTER_NETWORK_EXISTS = 5044;
export const ERROR_CLUSTER_NETWORK_NOT_FOUND = 5045;
export const ERROR_CLUSTER_NETINTERFACE_EXISTS = 5046;
export const ERROR_CLUSTER_NETINTERFACE_NOT_FOUND = 5047;
export const ERROR_CLUSTER_INVALID_REQUEST = 5048;
export const ERROR_CLUSTER_INVALID_NETWORK_PROVIDER = 5049;
export const ERROR_CLUSTER_NODE_DOWN = 5050;
export const ERROR_CLUSTER_NODE_UNREACHABLE = 5051;
export const ERROR_CLUSTER_NODE_NOT_MEMBER = 5052;
export const ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS = 5053;
export const ERROR_CLUSTER_INVALID_NETWORK = 5054;
export const ERROR_CLUSTER_NODE_UP = 5056;
export const ERROR_CLUSTER_IPADDR_IN_USE = 5057;
export const ERROR_CLUSTER_NODE_NOT_PAUSED = 5058;
export const ERROR_CLUSTER_NO_SECURITY_CONTEXT = 5059;
export const ERROR_CLUSTER_NETWORK_NOT_INTERNAL = 5060;
export const ERROR_CLUSTER_NODE_ALREADY_UP = 5061;
export const ERROR_CLUSTER_NODE_ALREADY_DOWN = 5062;
export const ERROR_CLUSTER_NETWORK_ALREADY_ONLINE = 5063;
export const ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE = 5064;
export const ERROR_CLUSTER_NODE_ALREADY_MEMBER = 5065;
export const ERROR_CLUSTER_LAST_INTERNAL_NETWORK = 5066;
export const ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS = 5067;
export const ERROR_INVALID_OPERATION_ON_QUORUM = 5068;
export const ERROR_DEPENDENCY_NOT_ALLOWED = 5069;
export const ERROR_CLUSTER_NODE_PAUSED = 5070;
export const ERROR_NODE_CANT_HOST_RESOURCE = 5071;
export const ERROR_CLUSTER_NODE_NOT_READY = 5072;
export const ERROR_CLUSTER_NODE_SHUTTING_DOWN = 5073;
export const ERROR_CLUSTER_JOIN_ABORTED = 5074;
export const ERROR_CLUSTER_INCOMPATIBLE_VERSIONS = 5075;
export const ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED = 5076;
export const ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED = 5077;
export const ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND = 5078;
export const ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED = 5079;
export const ERROR_CLUSTER_RESNAME_NOT_FOUND = 5080;
export const ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED = 5081;
export const ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST = 5082;
export const ERROR_CLUSTER_DATABASE_SEQMISMATCH = 5083;
export const ERROR_RESMON_INVALID_STATE = 5084;
export const ERROR_CLUSTER_GUM_NOT_LOCKER = 5085;
export const ERROR_QUORUM_DISK_NOT_FOUND = 5086;
export const ERROR_DATABASE_BACKUP_CORRUPT = 5087;
export const ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT = 5088;
export const ERROR_RESOURCE_PROPERTY_UNCHANGEABLE = 5089;
export const ERROR_NO_ADMIN_ACCESS_POINT = 5090;
export const ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE = 5890;
export const ERROR_CLUSTER_QUORUMLOG_NOT_FOUND = 5891;
export const ERROR_CLUSTER_MEMBERSHIP_HALT = 5892;
export const ERROR_CLUSTER_INSTANCE_ID_MISMATCH = 5893;
export const ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP = 5894;
export const ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH = 5895;
export const ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP = 5896;
export const ERROR_CLUSTER_PARAMETER_MISMATCH = 5897;
export const ERROR_NODE_CANNOT_BE_CLUSTERED = 5898;
export const ERROR_CLUSTER_WRONG_OS_VERSION = 5899;
export const ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME = 5900;
export const ERROR_CLUSCFG_ALREADY_COMMITTED = 5901;
export const ERROR_CLUSCFG_ROLLBACK_FAILED = 5902;
export const ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT = 5903;
export const ERROR_CLUSTER_OLD_VERSION = 5904;
export const ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME = 5905;
export const ERROR_CLUSTER_NO_NET_ADAPTERS = 5906;
export const ERROR_CLUSTER_POISONED = 5907;
export const ERROR_CLUSTER_GROUP_MOVING = 5908;
export const ERROR_CLUSTER_RESOURCE_TYPE_BUSY = 5909;
export const ERROR_RESOURCE_CALL_TIMED_OUT = 5910;
export const ERROR_INVALID_CLUSTER_IPV6_ADDRESS = 5911;
export const ERROR_CLUSTER_INTERNAL_INVALID_FUNCTION = 5912;
export const ERROR_CLUSTER_PARAMETER_OUT_OF_BOUNDS = 5913;
export const ERROR_CLUSTER_PARTIAL_SEND = 5914;
export const ERROR_CLUSTER_REGISTRY_INVALID_FUNCTION = 5915;
export const ERROR_CLUSTER_INVALID_STRING_TERMINATION = 5916;
export const ERROR_CLUSTER_INVALID_STRING_FORMAT = 5917;
export const ERROR_CLUSTER_DATABASE_TRANSACTION_IN_PROGRESS = 5918;
export const ERROR_CLUSTER_DATABASE_TRANSACTION_NOT_IN_PROGRESS = 5919;
export const ERROR_CLUSTER_NULL_DATA = 5920;
export const ERROR_CLUSTER_PARTIAL_READ = 5921;
export const ERROR_CLUSTER_PARTIAL_WRITE = 5922;
export const ERROR_CLUSTER_CANT_DESERIALIZE_DATA = 5923;
export const ERROR_DEPENDENT_RESOURCE_PROPERTY_CONFLICT = 5924;
export const ERROR_CLUSTER_NO_QUORUM = 5925;
export const ERROR_CLUSTER_INVALID_IPV6_NETWORK = 5926;
export const ERROR_CLUSTER_INVALID_IPV6_TUNNEL_NETWORK = 5927;
export const ERROR_QUORUM_NOT_ALLOWED_IN_THIS_GROUP = 5928;
export const ERROR_DEPENDENCY_TREE_TOO_COMPLEX = 5929;
export const ERROR_EXCEPTION_IN_RESOURCE_CALL = 5930;
export const ERROR_CLUSTER_RHS_FAILED_INITIALIZATION = 5931;
export const ERROR_CLUSTER_NOT_INSTALLED = 5932;
export const ERROR_CLUSTER_RESOURCES_MUST_BE_ONLINE_ON_THE_SAME_NODE = 5933;
export const ERROR_CLUSTER_MAX_NODES_IN_CLUSTER = 5934;
export const ERROR_CLUSTER_TOO_MANY_NODES = 5935;
export const ERROR_CLUSTER_OBJECT_ALREADY_USED = 5936;
export const ERROR_NONCORE_GROUPS_FOUND = 5937;
export const ERROR_FILE_SHARE_RESOURCE_CONFLICT = 5938;
export const ERROR_CLUSTER_EVICT_INVALID_REQUEST = 5939;
export const ERROR_CLUSTER_SINGLETON_RESOURCE = 5940;
export const ERROR_CLUSTER_GROUP_SINGLETON_RESOURCE = 5941;
export const ERROR_CLUSTER_RESOURCE_PROVIDER_FAILED = 5942;
export const ERROR_CLUSTER_RESOURCE_CONFIGURATION_ERROR = 5943;
export const ERROR_CLUSTER_GROUP_BUSY = 5944;
export const ERROR_CLUSTER_NOT_SHARED_VOLUME = 5945;
export const ERROR_CLUSTER_INVALID_SECURITY_DESCRIPTOR = 5946;
export const ERROR_CLUSTER_SHARED_VOLUMES_IN_USE = 5947;
export const ERROR_CLUSTER_USE_SHARED_VOLUMES_API = 5948;
export const ERROR_CLUSTER_BACKUP_IN_PROGRESS = 5949;
export const ERROR_NON_CSV_PATH = 5950;
export const ERROR_CSV_VOLUME_NOT_LOCAL = 5951;
export const ERROR_CLUSTER_WATCHDOG_TERMINATING = 5952;
export const ERROR_CLUSTER_RESOURCE_VETOED_MOVE_INCOMPATIBLE_NODES = 5953;
export const ERROR_CLUSTER_INVALID_NODE_WEIGHT = 5954;
export const ERROR_CLUSTER_RESOURCE_VETOED_CALL = 5955;
export const ERROR_RESMON_SYSTEM_RESOURCES_LACKING = 5956;
export const ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_DESTINATION = 5957;
export const ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_SOURCE = 5958;
export const ERROR_CLUSTER_GROUP_QUEUED = 5959;
export const ERROR_CLUSTER_RESOURCE_LOCKED_STATUS = 5960;
export const ERROR_CLUSTER_SHARED_VOLUME_FAILOVER_NOT_ALLOWED = 5961;
export const ERROR_CLUSTER_NODE_DRAIN_IN_PROGRESS = 5962;
export const ERROR_CLUSTER_DISK_NOT_CONNECTED = 5963;
export const ERROR_DISK_NOT_CSV_CAPABLE = 5964;
export const ERROR_RESOURCE_NOT_IN_AVAILABLE_STORAGE = 5965;
export const ERROR_CLUSTER_SHARED_VOLUME_REDIRECTED = 5966;
export const ERROR_CLUSTER_SHARED_VOLUME_NOT_REDIRECTED = 5967;
export const ERROR_CLUSTER_CANNOT_RETURN_PROPERTIES = 5968;
export const ERROR_CLUSTER_RESOURCE_CONTAINS_UNSUPPORTED_DIFF_AREA_FOR_SHARED_VOLUMES = 5969;
export const ERROR_CLUSTER_RESOURCE_IS_IN_MAINTENANCE_MODE = 5970;
export const ERROR_CLUSTER_AFFINITY_CONFLICT = 5971;
export const ERROR_CLUSTER_RESOURCE_IS_REPLICA_VIRTUAL_MACHINE = 5972;
export const ERROR_CLUSTER_UPGRADE_INCOMPATIBLE_VERSIONS = 5973;
export const ERROR_CLUSTER_UPGRADE_FIX_QUORUM_NOT_SUPPORTED = 5974;
export const ERROR_CLUSTER_UPGRADE_RESTART_REQUIRED = 5975;
export const ERROR_CLUSTER_UPGRADE_IN_PROGRESS = 5976;
export const ERROR_CLUSTER_UPGRADE_INCOMPLETE = 5977;
export const ERROR_CLUSTER_NODE_IN_GRACE_PERIOD = 5978;
export const ERROR_CLUSTER_CSV_IO_PAUSE_TIMEOUT = 5979;
export const ERROR_NODE_NOT_ACTIVE_CLUSTER_MEMBER = 5980;
export const ERROR_CLUSTER_RESOURCE_NOT_MONITORED = 5981;
export const ERROR_CLUSTER_RESOURCE_DOES_NOT_SUPPORT_UNMONITORED = 5982;
export const ERROR_CLUSTER_RESOURCE_IS_REPLICATED = 5983;
export const ERROR_CLUSTER_NODE_ISOLATED = 5984;
export const ERROR_CLUSTER_NODE_QUARANTINED = 5985;
export const ERROR_CLUSTER_DATABASE_UPDATE_CONDITION_FAILED = 5986;
export const ERROR_CLUSTER_SPACE_DEGRADED = 5987;
export const ERROR_CLUSTER_TOKEN_DELEGATION_NOT_SUPPORTED = 5988;
export const ERROR_CLUSTER_CSV_INVALID_HANDLE = 5989;
export const ERROR_CLUSTER_CSV_SUPPORTED_ONLY_ON_COORDINATOR = 5990;
export const ERROR_GROUPSET_NOT_AVAILABLE = 5991;
export const ERROR_GROUPSET_NOT_FOUND = 5992;
export const ERROR_GROUPSET_CANT_PROVIDE = 5993;
export const ERROR_CLUSTER_FAULT_DOMAIN_PARENT_NOT_FOUND = 5994;
export const ERROR_CLUSTER_FAULT_DOMAIN_INVALID_HIERARCHY = 5995;
export const ERROR_CLUSTER_FAULT_DOMAIN_FAILED_S2D_VALIDATION = 5996;
export const ERROR_CLUSTER_FAULT_DOMAIN_S2D_CONNECTIVITY_LOSS = 5997;
export const ERROR_CLUSTER_INVALID_INFRASTRUCTURE_FILESERVER_NAME = 5998;
export const ERROR_CLUSTERSET_MANAGEMENT_CLUSTER_UNREACHABLE = 5999;
export const ERROR_ENCRYPTION_FAILED = 6000;
export const ERROR_DECRYPTION_FAILED = 6001;
export const ERROR_FILE_ENCRYPTED = 6002;
export const ERROR_NO_RECOVERY_POLICY = 6003;
export const ERROR_NO_EFS = 6004;
export const ERROR_WRONG_EFS = 6005;
export const ERROR_NO_USER_KEYS = 6006;
export const ERROR_FILE_NOT_ENCRYPTED = 6007;
export const ERROR_NOT_EXPORT_FORMAT = 6008;
export const ERROR_FILE_READ_ONLY = 6009;
export const ERROR_DIR_EFS_DISALLOWED = 6010;
export const ERROR_EFS_SERVER_NOT_TRUSTED = 6011;
export const ERROR_BAD_RECOVERY_POLICY = 6012;
export const ERROR_EFS_ALG_BLOB_TOO_BIG = 6013;
export const ERROR_VOLUME_NOT_SUPPORT_EFS = 6014;
export const ERROR_EFS_DISABLED = 6015;
export const ERROR_EFS_VERSION_NOT_SUPPORT = 6016;
export const ERROR_CS_ENCRYPTION_INVALID_SERVER_RESPONSE = 6017;
export const ERROR_CS_ENCRYPTION_UNSUPPORTED_SERVER = 6018;
export const ERROR_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE = 6019;
export const ERROR_CS_ENCRYPTION_NEW_ENCRYPTED_FILE = 6020;
export const ERROR_CS_ENCRYPTION_FILE_NOT_CSE = 6021;
export const ERROR_ENCRYPTION_POLICY_DENIES_OPERATION = 6022;
export const ERROR_WIP_ENCRYPTION_FAILED = 6023;
export const ERROR_NO_BROWSER_SERVERS_FOUND = 6118;
export const ERROR_CLUSTER_OBJECT_IS_CLUSTER_SET_VM = 6250;
export const ERROR_LOG_SECTOR_INVALID = 6600;
export const ERROR_LOG_SECTOR_PARITY_INVALID = 6601;
export const ERROR_LOG_SECTOR_REMAPPED = 6602;
export const ERROR_LOG_BLOCK_INCOMPLETE = 6603;
export const ERROR_LOG_INVALID_RANGE = 6604;
export const ERROR_LOG_BLOCKS_EXHAUSTED = 6605;
export const ERROR_LOG_READ_CONTEXT_INVALID = 6606;
export const ERROR_LOG_RESTART_INVALID = 6607;
export const ERROR_LOG_BLOCK_VERSION = 6608;
export const ERROR_LOG_BLOCK_INVALID = 6609;
export const ERROR_LOG_READ_MODE_INVALID = 6610;
export const ERROR_LOG_NO_RESTART = 6611;
export const ERROR_LOG_METADATA_CORRUPT = 6612;
export const ERROR_LOG_METADATA_INVALID = 6613;
export const ERROR_LOG_METADATA_INCONSISTENT = 6614;
export const ERROR_LOG_RESERVATION_INVALID = 6615;
export const ERROR_LOG_CANT_DELETE = 6616;
export const ERROR_LOG_CONTAINER_LIMIT_EXCEEDED = 6617;
export const ERROR_LOG_START_OF_LOG = 6618;
export const ERROR_LOG_POLICY_ALREADY_INSTALLED = 6619;
export const ERROR_LOG_POLICY_NOT_INSTALLED = 6620;
export const ERROR_LOG_POLICY_INVALID = 6621;
export const ERROR_LOG_POLICY_CONFLICT = 6622;
export const ERROR_LOG_PINNED_ARCHIVE_TAIL = 6623;
export const ERROR_LOG_RECORD_NONEXISTENT = 6624;
export const ERROR_LOG_RECORDS_RESERVED_INVALID = 6625;
export const ERROR_LOG_SPACE_RESERVED_INVALID = 6626;
export const ERROR_LOG_TAIL_INVALID = 6627;
export const ERROR_LOG_FULL = 6628;
export const ERROR_COULD_NOT_RESIZE_LOG = 6629;
export const ERROR_LOG_MULTIPLEXED = 6630;
export const ERROR_LOG_DEDICATED = 6631;
export const ERROR_LOG_ARCHIVE_NOT_IN_PROGRESS = 6632;
export const ERROR_LOG_ARCHIVE_IN_PROGRESS = 6633;
export const ERROR_LOG_EPHEMERAL = 6634;
export const ERROR_LOG_NOT_ENOUGH_CONTAINERS = 6635;
export const ERROR_LOG_CLIENT_ALREADY_REGISTERED = 6636;
export const ERROR_LOG_CLIENT_NOT_REGISTERED = 6637;
export const ERROR_LOG_FULL_HANDLER_IN_PROGRESS = 6638;
export const ERROR_LOG_CONTAINER_READ_FAILED = 6639;
export const ERROR_LOG_CONTAINER_WRITE_FAILED = 6640;
export const ERROR_LOG_CONTAINER_OPEN_FAILED = 6641;
export const ERROR_LOG_CONTAINER_STATE_INVALID = 6642;
export const ERROR_LOG_STATE_INVALID = 6643;
export const ERROR_LOG_PINNED = 6644;
export const ERROR_LOG_METADATA_FLUSH_FAILED = 6645;
export const ERROR_LOG_INCONSISTENT_SECURITY = 6646;
export const ERROR_LOG_APPENDED_FLUSH_FAILED = 6647;
export const ERROR_LOG_PINNED_RESERVATION = 6648;
export const ERROR_INVALID_TRANSACTION = 6700;
export const ERROR_TRANSACTION_NOT_ACTIVE = 6701;
export const ERROR_TRANSACTION_REQUEST_NOT_VALID = 6702;
export const ERROR_TRANSACTION_NOT_REQUESTED = 6703;
export const ERROR_TRANSACTION_ALREADY_ABORTED = 6704;
export const ERROR_TRANSACTION_ALREADY_COMMITTED = 6705;
export const ERROR_TM_INITIALIZATION_FAILED = 6706;
export const ERROR_RESOURCEMANAGER_READ_ONLY = 6707;
export const ERROR_TRANSACTION_NOT_JOINED = 6708;
export const ERROR_TRANSACTION_SUPERIOR_EXISTS = 6709;
export const ERROR_CRM_PROTOCOL_ALREADY_EXISTS = 6710;
export const ERROR_TRANSACTION_PROPAGATION_FAILED = 6711;
export const ERROR_CRM_PROTOCOL_NOT_FOUND = 6712;
export const ERROR_TRANSACTION_INVALID_MARSHALL_BUFFER = 6713;
export const ERROR_CURRENT_TRANSACTION_NOT_VALID = 6714;
export const ERROR_TRANSACTION_NOT_FOUND = 6715;
export const ERROR_RESOURCEMANAGER_NOT_FOUND = 6716;
export const ERROR_ENLISTMENT_NOT_FOUND = 6717;
export const ERROR_TRANSACTIONMANAGER_NOT_FOUND = 6718;
export const ERROR_TRANSACTIONMANAGER_NOT_ONLINE = 6719;
export const ERROR_TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION = 6720;
export const ERROR_TRANSACTION_NOT_ROOT = 6721;
export const ERROR_TRANSACTION_OBJECT_EXPIRED = 6722;
export const ERROR_TRANSACTION_RESPONSE_NOT_ENLISTED = 6723;
export const ERROR_TRANSACTION_RECORD_TOO_LONG = 6724;
export const ERROR_IMPLICIT_TRANSACTION_NOT_SUPPORTED = 6725;
export const ERROR_TRANSACTION_INTEGRITY_VIOLATED = 6726;
export const ERROR_TRANSACTIONMANAGER_IDENTITY_MISMATCH = 6727;
export const ERROR_RM_CANNOT_BE_FROZEN_FOR_SNAPSHOT = 6728;
export const ERROR_TRANSACTION_MUST_WRITETHROUGH = 6729;
export const ERROR_TRANSACTION_NO_SUPERIOR = 6730;
export const ERROR_HEURISTIC_DAMAGE_POSSIBLE = 6731;
export const ERROR_TRANSACTIONAL_CONFLICT = 6800;
export const ERROR_RM_NOT_ACTIVE = 6801;
export const ERROR_RM_METADATA_CORRUPT = 6802;
export const ERROR_DIRECTORY_NOT_RM = 6803;
export const ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE = 6805;
export const ERROR_LOG_RESIZE_INVALID_SIZE = 6806;
export const ERROR_OBJECT_NO_LONGER_EXISTS = 6807;
export const ERROR_STREAM_MINIVERSION_NOT_FOUND = 6808;
export const ERROR_STREAM_MINIVERSION_NOT_VALID = 6809;
export const ERROR_MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION = 6810;
export const ERROR_CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT = 6811;
export const ERROR_CANT_CREATE_MORE_STREAM_MINIVERSIONS = 6812;
export const ERROR_REMOTE_FILE_VERSION_MISMATCH = 6814;
export const ERROR_HANDLE_NO_LONGER_VALID = 6815;
export const ERROR_NO_TXF_METADATA = 6816;
export const ERROR_LOG_CORRUPTION_DETECTED = 6817;
export const ERROR_CANT_RECOVER_WITH_HANDLE_OPEN = 6818;
export const ERROR_RM_DISCONNECTED = 6819;
export const ERROR_ENLISTMENT_NOT_SUPERIOR = 6820;
export const ERROR_RECOVERY_NOT_NEEDED = 6821;
export const ERROR_RM_ALREADY_STARTED = 6822;
export const ERROR_FILE_IDENTITY_NOT_PERSISTENT = 6823;
export const ERROR_CANT_BREAK_TRANSACTIONAL_DEPENDENCY = 6824;
export const ERROR_CANT_CROSS_RM_BOUNDARY = 6825;
export const ERROR_TXF_DIR_NOT_EMPTY = 6826;
export const ERROR_INDOUBT_TRANSACTIONS_EXIST = 6827;
export const ERROR_TM_VOLATILE = 6828;
export const ERROR_ROLLBACK_TIMER_EXPIRED = 6829;
export const ERROR_TXF_ATTRIBUTE_CORRUPT = 6830;
export const ERROR_EFS_NOT_ALLOWED_IN_TRANSACTION = 6831;
export const ERROR_TRANSACTIONAL_OPEN_NOT_ALLOWED = 6832;
export const ERROR_LOG_GROWTH_FAILED = 6833;
export const ERROR_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE = 6834;
export const ERROR_TXF_METADATA_ALREADY_PRESENT = 6835;
export const ERROR_TRANSACTION_SCOPE_CALLBACKS_NOT_SET = 6836;
export const ERROR_TRANSACTION_REQUIRED_PROMOTION = 6837;
export const ERROR_CANNOT_EXECUTE_FILE_IN_TRANSACTION = 6838;
export const ERROR_TRANSACTIONS_NOT_FROZEN = 6839;
export const ERROR_TRANSACTION_FREEZE_IN_PROGRESS = 6840;
export const ERROR_NOT_SNAPSHOT_VOLUME = 6841;
export const ERROR_NO_SAVEPOINT_WITH_OPEN_FILES = 6842;
export const ERROR_DATA_LOST_REPAIR = 6843;
export const ERROR_SPARSE_NOT_ALLOWED_IN_TRANSACTION = 6844;
export const ERROR_TM_IDENTITY_MISMATCH = 6845;
export const ERROR_FLOATED_SECTION = 6846;
export const ERROR_CANNOT_ACCEPT_TRANSACTED_WORK = 6847;
export const ERROR_CANNOT_ABORT_TRANSACTIONS = 6848;
export const ERROR_BAD_CLUSTERS = 6849;
export const ERROR_COMPRESSION_NOT_ALLOWED_IN_TRANSACTION = 6850;
export const ERROR_VOLUME_DIRTY = 6851;
export const ERROR_NO_LINK_TRACKING_IN_TRANSACTION = 6852;
export const ERROR_OPERATION_NOT_SUPPORTED_IN_TRANSACTION = 6853;
export const ERROR_EXPIRED_HANDLE = 6854;
export const ERROR_TRANSACTION_NOT_ENLISTED = 6855;
export const ERROR_CTX_WINSTATION_NAME_INVALID = 7001;
export const ERROR_CTX_INVALID_PD = 7002;
export const ERROR_CTX_PD_NOT_FOUND = 7003;
export const ERROR_CTX_WD_NOT_FOUND = 7004;
export const ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY = 7005;
export const ERROR_CTX_SERVICE_NAME_COLLISION = 7006;
export const ERROR_CTX_CLOSE_PENDING = 7007;
export const ERROR_CTX_NO_OUTBUF = 7008;
export const ERROR_CTX_MODEM_INF_NOT_FOUND = 7009;
export const ERROR_CTX_INVALID_MODEMNAME = 7010;
export const ERROR_CTX_MODEM_RESPONSE_ERROR = 7011;
export const ERROR_CTX_MODEM_RESPONSE_TIMEOUT = 7012;
export const ERROR_CTX_MODEM_RESPONSE_NO_CARRIER = 7013;
export const ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE = 7014;
export const ERROR_CTX_MODEM_RESPONSE_BUSY = 7015;
export const ERROR_CTX_MODEM_RESPONSE_VOICE = 7016;
export const ERROR_CTX_TD_ERROR = 7017;
export const ERROR_CTX_WINSTATION_NOT_FOUND = 7022;
export const ERROR_CTX_WINSTATION_ALREADY_EXISTS = 7023;
export const ERROR_CTX_WINSTATION_BUSY = 7024;
export const ERROR_CTX_BAD_VIDEO_MODE = 7025;
export const ERROR_CTX_GRAPHICS_INVALID = 7035;
export const ERROR_CTX_LOGON_DISABLED = 7037;
export const ERROR_CTX_NOT_CONSOLE = 7038;
export const ERROR_CTX_CLIENT_QUERY_TIMEOUT = 7040;
export const ERROR_CTX_CONSOLE_DISCONNECT = 7041;
export const ERROR_CTX_CONSOLE_CONNECT = 7042;
export const ERROR_CTX_SHADOW_DENIED = 7044;
export const ERROR_CTX_WINSTATION_ACCESS_DENIED = 7045;
export const ERROR_CTX_INVALID_WD = 7049;
export const ERROR_CTX_SHADOW_INVALID = 7050;
export const ERROR_CTX_SHADOW_DISABLED = 7051;
export const ERROR_CTX_CLIENT_LICENSE_IN_USE = 7052;
export const ERROR_CTX_CLIENT_LICENSE_NOT_SET = 7053;
export const ERROR_CTX_LICENSE_NOT_AVAILABLE = 7054;
export const ERROR_CTX_LICENSE_CLIENT_INVALID = 7055;
export const ERROR_CTX_LICENSE_EXPIRED = 7056;
export const ERROR_CTX_SHADOW_NOT_RUNNING = 7057;
export const ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE = 7058;
export const ERROR_ACTIVATION_COUNT_EXCEEDED = 7059;
export const ERROR_CTX_WINSTATIONS_DISABLED = 7060;
export const ERROR_CTX_ENCRYPTION_LEVEL_REQUIRED = 7061;
export const ERROR_CTX_SESSION_IN_USE = 7062;
export const ERROR_CTX_NO_FORCE_LOGOFF = 7063;
export const ERROR_CTX_ACCOUNT_RESTRICTION = 7064;
export const ERROR_RDP_PROTOCOL_ERROR = 7065;
export const ERROR_CTX_CDM_CONNECT = 7066;
export const ERROR_CTX_CDM_DISCONNECT = 7067;
export const ERROR_CTX_SECURITY_LAYER_ERROR = 7068;
export const ERROR_TS_INCOMPATIBLE_SESSIONS = 7069;
export const ERROR_TS_VIDEO_SUBSYSTEM_ERROR = 7070;
export const ERROR_DS_NOT_INSTALLED = 8200;
export const ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY = 8201;
export const ERROR_DS_NO_ATTRIBUTE_OR_VALUE = 8202;
export const ERROR_DS_INVALID_ATTRIBUTE_SYNTAX = 8203;
export const ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED = 8204;
export const ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS = 8205;
export const ERROR_DS_BUSY = 8206;
export const ERROR_DS_UNAVAILABLE = 8207;
export const ERROR_DS_NO_RIDS_ALLOCATED = 8208;
export const ERROR_DS_NO_MORE_RIDS = 8209;
export const ERROR_DS_INCORRECT_ROLE_OWNER = 8210;
export const ERROR_DS_RIDMGR_INIT_ERROR = 8211;
export const ERROR_DS_OBJ_CLASS_VIOLATION = 8212;
export const ERROR_DS_CANT_ON_NON_LEAF = 8213;
export const ERROR_DS_CANT_ON_RDN = 8214;
export const ERROR_DS_CANT_MOD_OBJ_CLASS = 8215;
export const ERROR_DS_CROSS_DOM_MOVE_ERROR = 8216;
export const ERROR_DS_GC_NOT_AVAILABLE = 8217;
export const ERROR_SHARED_POLICY = 8218;
export const ERROR_POLICY_OBJECT_NOT_FOUND = 8219;
export const ERROR_POLICY_ONLY_IN_DS = 8220;
export const ERROR_PROMOTION_ACTIVE = 8221;
export const ERROR_NO_PROMOTION_ACTIVE = 8222;
export const ERROR_DS_OPERATIONS_ERROR = 8224;
export const ERROR_DS_PROTOCOL_ERROR = 8225;
export const ERROR_DS_TIMELIMIT_EXCEEDED = 8226;
export const ERROR_DS_SIZELIMIT_EXCEEDED = 8227;
export const ERROR_DS_ADMIN_LIMIT_EXCEEDED = 8228;
export const ERROR_DS_COMPARE_FALSE = 8229;
export const ERROR_DS_COMPARE_TRUE = 8230;
export const ERROR_DS_AUTH_METHOD_NOT_SUPPORTED = 8231;
export const ERROR_DS_STRONG_AUTH_REQUIRED = 8232;
export const ERROR_DS_INAPPROPRIATE_AUTH = 8233;
export const ERROR_DS_AUTH_UNKNOWN = 8234;
export const ERROR_DS_REFERRAL = 8235;
export const ERROR_DS_UNAVAILABLE_CRIT_EXTENSION = 8236;
export const ERROR_DS_CONFIDENTIALITY_REQUIRED = 8237;
export const ERROR_DS_INAPPROPRIATE_MATCHING = 8238;
export const ERROR_DS_CONSTRAINT_VIOLATION = 8239;
export const ERROR_DS_NO_SUCH_OBJECT = 8240;
export const ERROR_DS_ALIAS_PROBLEM = 8241;
export const ERROR_DS_INVALID_DN_SYNTAX = 8242;
export const ERROR_DS_IS_LEAF = 8243;
export const ERROR_DS_ALIAS_DEREF_PROBLEM = 8244;
export const ERROR_DS_UNWILLING_TO_PERFORM = 8245;
export const ERROR_DS_LOOP_DETECT = 8246;
export const ERROR_DS_NAMING_VIOLATION = 8247;
export const ERROR_DS_OBJECT_RESULTS_TOO_LARGE = 8248;
export const ERROR_DS_AFFECTS_MULTIPLE_DSAS = 8249;
export const ERROR_DS_SERVER_DOWN = 8250;
export const ERROR_DS_LOCAL_ERROR = 8251;
export const ERROR_DS_ENCODING_ERROR = 8252;
export const ERROR_DS_DECODING_ERROR = 8253;
export const ERROR_DS_FILTER_UNKNOWN = 8254;
export const ERROR_DS_PARAM_ERROR = 8255;
export const ERROR_DS_NOT_SUPPORTED = 8256;
export const ERROR_DS_NO_RESULTS_RETURNED = 8257;
export const ERROR_DS_CONTROL_NOT_FOUND = 8258;
export const ERROR_DS_CLIENT_LOOP = 8259;
export const ERROR_DS_REFERRAL_LIMIT_EXCEEDED = 8260;
export const ERROR_DS_SORT_CONTROL_MISSING = 8261;
export const ERROR_DS_OFFSET_RANGE_ERROR = 8262;
export const ERROR_DS_RIDMGR_DISABLED = 8263;
export const ERROR_DS_ROOT_MUST_BE_NC = 8301;
export const ERROR_DS_ADD_REPLICA_INHIBITED = 8302;
export const ERROR_DS_ATT_NOT_DEF_IN_SCHEMA = 8303;
export const ERROR_DS_MAX_OBJ_SIZE_EXCEEDED = 8304;
export const ERROR_DS_OBJ_STRING_NAME_EXISTS = 8305;
export const ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA = 8306;
export const ERROR_DS_RDN_DOESNT_MATCH_SCHEMA = 8307;
export const ERROR_DS_NO_REQUESTED_ATTS_FOUND = 8308;
export const ERROR_DS_USER_BUFFER_TO_SMALL = 8309;
export const ERROR_DS_ATT_IS_NOT_ON_OBJ = 8310;
export const ERROR_DS_ILLEGAL_MOD_OPERATION = 8311;
export const ERROR_DS_OBJ_TOO_LARGE = 8312;
export const ERROR_DS_BAD_INSTANCE_TYPE = 8313;
export const ERROR_DS_MASTERDSA_REQUIRED = 8314;
export const ERROR_DS_OBJECT_CLASS_REQUIRED = 8315;
export const ERROR_DS_MISSING_REQUIRED_ATT = 8316;
export const ERROR_DS_ATT_NOT_DEF_FOR_CLASS = 8317;
export const ERROR_DS_ATT_ALREADY_EXISTS = 8318;
export const ERROR_DS_CANT_ADD_ATT_VALUES = 8320;
export const ERROR_DS_SINGLE_VALUE_CONSTRAINT = 8321;
export const ERROR_DS_RANGE_CONSTRAINT = 8322;
export const ERROR_DS_ATT_VAL_ALREADY_EXISTS = 8323;
export const ERROR_DS_CANT_REM_MISSING_ATT = 8324;
export const ERROR_DS_CANT_REM_MISSING_ATT_VAL = 8325;
export const ERROR_DS_ROOT_CANT_BE_SUBREF = 8326;
export const ERROR_DS_NO_CHAINING = 8327;
export const ERROR_DS_NO_CHAINED_EVAL = 8328;
export const ERROR_DS_NO_PARENT_OBJECT = 8329;
export const ERROR_DS_PARENT_IS_AN_ALIAS = 8330;
export const ERROR_DS_CANT_MIX_MASTER_AND_REPS = 8331;
export const ERROR_DS_CHILDREN_EXIST = 8332;
export const ERROR_DS_OBJ_NOT_FOUND = 8333;
export const ERROR_DS_ALIASED_OBJ_MISSING = 8334;
export const ERROR_DS_BAD_NAME_SYNTAX = 8335;
export const ERROR_DS_ALIAS_POINTS_TO_ALIAS = 8336;
export const ERROR_DS_CANT_DEREF_ALIAS = 8337;
export const ERROR_DS_OUT_OF_SCOPE = 8338;
export const ERROR_DS_OBJECT_BEING_REMOVED = 8339;
export const ERROR_DS_CANT_DELETE_DSA_OBJ = 8340;
export const ERROR_DS_GENERIC_ERROR = 8341;
export const ERROR_DS_DSA_MUST_BE_INT_MASTER = 8342;
export const ERROR_DS_CLASS_NOT_DSA = 8343;
export const ERROR_DS_INSUFF_ACCESS_RIGHTS = 8344;
export const ERROR_DS_ILLEGAL_SUPERIOR = 8345;
export const ERROR_DS_ATTRIBUTE_OWNED_BY_SAM = 8346;
export const ERROR_DS_NAME_TOO_MANY_PARTS = 8347;
export const ERROR_DS_NAME_TOO_LONG = 8348;
export const ERROR_DS_NAME_VALUE_TOO_LONG = 8349;
export const ERROR_DS_NAME_UNPARSEABLE = 8350;
export const ERROR_DS_NAME_TYPE_UNKNOWN = 8351;
export const ERROR_DS_NOT_AN_OBJECT = 8352;
export const ERROR_DS_SEC_DESC_TOO_SHORT = 8353;
export const ERROR_DS_SEC_DESC_INVALID = 8354;
export const ERROR_DS_NO_DELETED_NAME = 8355;
export const ERROR_DS_SUBREF_MUST_HAVE_PARENT = 8356;
export const ERROR_DS_NCNAME_MUST_BE_NC = 8357;
export const ERROR_DS_CANT_ADD_SYSTEM_ONLY = 8358;
export const ERROR_DS_CLASS_MUST_BE_CONCRETE = 8359;
export const ERROR_DS_INVALID_DMD = 8360;
export const ERROR_DS_OBJ_GUID_EXISTS = 8361;
export const ERROR_DS_NOT_ON_BACKLINK = 8362;
export const ERROR_DS_NO_CROSSREF_FOR_NC = 8363;
export const ERROR_DS_SHUTTING_DOWN = 8364;
export const ERROR_DS_UNKNOWN_OPERATION = 8365;
export const ERROR_DS_INVALID_ROLE_OWNER = 8366;
export const ERROR_DS_COULDNT_CONTACT_FSMO = 8367;
export const ERROR_DS_CROSS_NC_DN_RENAME = 8368;
export const ERROR_DS_CANT_MOD_SYSTEM_ONLY = 8369;
export const ERROR_DS_REPLICATOR_ONLY = 8370;
export const ERROR_DS_OBJ_CLASS_NOT_DEFINED = 8371;
export const ERROR_DS_OBJ_CLASS_NOT_SUBCLASS = 8372;
export const ERROR_DS_NAME_REFERENCE_INVALID = 8373;
export const ERROR_DS_CROSS_REF_EXISTS = 8374;
export const ERROR_DS_CANT_DEL_MASTER_CROSSREF = 8375;
export const ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD = 8376;
export const ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX = 8377;
export const ERROR_DS_DUP_RDN = 8378;
export const ERROR_DS_DUP_OID = 8379;
export const ERROR_DS_DUP_MAPI_ID = 8380;
export const ERROR_DS_DUP_SCHEMA_ID_GUID = 8381;
export const ERROR_DS_DUP_LDAP_DISPLAY_NAME = 8382;
export const ERROR_DS_SEMANTIC_ATT_TEST = 8383;
export const ERROR_DS_SYNTAX_MISMATCH = 8384;
export const ERROR_DS_EXISTS_IN_MUST_HAVE = 8385;
export const ERROR_DS_EXISTS_IN_MAY_HAVE = 8386;
export const ERROR_DS_NONEXISTENT_MAY_HAVE = 8387;
export const ERROR_DS_NONEXISTENT_MUST_HAVE = 8388;
export const ERROR_DS_AUX_CLS_TEST_FAIL = 8389;
export const ERROR_DS_NONEXISTENT_POSS_SUP = 8390;
export const ERROR_DS_SUB_CLS_TEST_FAIL = 8391;
export const ERROR_DS_BAD_RDN_ATT_ID_SYNTAX = 8392;
export const ERROR_DS_EXISTS_IN_AUX_CLS = 8393;
export const ERROR_DS_EXISTS_IN_SUB_CLS = 8394;
export const ERROR_DS_EXISTS_IN_POSS_SUP = 8395;
export const ERROR_DS_RECALCSCHEMA_FAILED = 8396;
export const ERROR_DS_TREE_DELETE_NOT_FINISHED = 8397;
export const ERROR_DS_CANT_DELETE = 8398;
export const ERROR_DS_ATT_SCHEMA_REQ_ID = 8399;
export const ERROR_DS_BAD_ATT_SCHEMA_SYNTAX = 8400;
export const ERROR_DS_CANT_CACHE_ATT = 8401;
export const ERROR_DS_CANT_CACHE_CLASS = 8402;
export const ERROR_DS_CANT_REMOVE_ATT_CACHE = 8403;
export const ERROR_DS_CANT_REMOVE_CLASS_CACHE = 8404;
export const ERROR_DS_CANT_RETRIEVE_DN = 8405;
export const ERROR_DS_MISSING_SUPREF = 8406;
export const ERROR_DS_CANT_RETRIEVE_INSTANCE = 8407;
export const ERROR_DS_CODE_INCONSISTENCY = 8408;
export const ERROR_DS_DATABASE_ERROR = 8409;
export const ERROR_DS_GOVERNSID_MISSING = 8410;
export const ERROR_DS_MISSING_EXPECTED_ATT = 8411;
export const ERROR_DS_NCNAME_MISSING_CR_REF = 8412;
export const ERROR_DS_SECURITY_CHECKING_ERROR = 8413;
export const ERROR_DS_SCHEMA_NOT_LOADED = 8414;
export const ERROR_DS_SCHEMA_ALLOC_FAILED = 8415;
export const ERROR_DS_ATT_SCHEMA_REQ_SYNTAX = 8416;
export const ERROR_DS_GCVERIFY_ERROR = 8417;
export const ERROR_DS_DRA_SCHEMA_MISMATCH = 8418;
export const ERROR_DS_CANT_FIND_DSA_OBJ = 8419;
export const ERROR_DS_CANT_FIND_EXPECTED_NC = 8420;
export const ERROR_DS_CANT_FIND_NC_IN_CACHE = 8421;
export const ERROR_DS_CANT_RETRIEVE_CHILD = 8422;
export const ERROR_DS_SECURITY_ILLEGAL_MODIFY = 8423;
export const ERROR_DS_CANT_REPLACE_HIDDEN_REC = 8424;
export const ERROR_DS_BAD_HIERARCHY_FILE = 8425;
export const ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED = 8426;
export const ERROR_DS_CONFIG_PARAM_MISSING = 8427;
export const ERROR_DS_COUNTING_AB_INDICES_FAILED = 8428;
export const ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED = 8429;
export const ERROR_DS_INTERNAL_FAILURE = 8430;
export const ERROR_DS_UNKNOWN_ERROR = 8431;
export const ERROR_DS_ROOT_REQUIRES_CLASS_TOP = 8432;
export const ERROR_DS_REFUSING_FSMO_ROLES = 8433;
export const ERROR_DS_MISSING_FSMO_SETTINGS = 8434;
export const ERROR_DS_UNABLE_TO_SURRENDER_ROLES = 8435;
export const ERROR_DS_DRA_GENERIC = 8436;
export const ERROR_DS_DRA_INVALID_PARAMETER = 8437;
export const ERROR_DS_DRA_BUSY = 8438;
export const ERROR_DS_DRA_BAD_DN = 8439;
export const ERROR_DS_DRA_BAD_NC = 8440;
export const ERROR_DS_DRA_DN_EXISTS = 8441;
export const ERROR_DS_DRA_INTERNAL_ERROR = 8442;
export const ERROR_DS_DRA_INCONSISTENT_DIT = 8443;
export const ERROR_DS_DRA_CONNECTION_FAILED = 8444;
export const ERROR_DS_DRA_BAD_INSTANCE_TYPE = 8445;
export const ERROR_DS_DRA_OUT_OF_MEM = 8446;
export const ERROR_DS_DRA_MAIL_PROBLEM = 8447;
export const ERROR_DS_DRA_REF_ALREADY_EXISTS = 8448;
export const ERROR_DS_DRA_REF_NOT_FOUND = 8449;
export const ERROR_DS_DRA_OBJ_IS_REP_SOURCE = 8450;
export const ERROR_DS_DRA_DB_ERROR = 8451;
export const ERROR_DS_DRA_NO_REPLICA = 8452;
export const ERROR_DS_DRA_ACCESS_DENIED = 8453;
export const ERROR_DS_DRA_NOT_SUPPORTED = 8454;
export const ERROR_DS_DRA_RPC_CANCELLED = 8455;
export const ERROR_DS_DRA_SOURCE_DISABLED = 8456;
export const ERROR_DS_DRA_SINK_DISABLED = 8457;
export const ERROR_DS_DRA_NAME_COLLISION = 8458;
export const ERROR_DS_DRA_SOURCE_REINSTALLED = 8459;
export const ERROR_DS_DRA_MISSING_PARENT = 8460;
export const ERROR_DS_DRA_PREEMPTED = 8461;
export const ERROR_DS_DRA_ABANDON_SYNC = 8462;
export const ERROR_DS_DRA_SHUTDOWN = 8463;
export const ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET = 8464;
export const ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA = 8465;
export const ERROR_DS_DRA_EXTN_CONNECTION_FAILED = 8466;
export const ERROR_DS_INSTALL_SCHEMA_MISMATCH = 8467;
export const ERROR_DS_DUP_LINK_ID = 8468;
export const ERROR_DS_NAME_ERROR_RESOLVING = 8469;
export const ERROR_DS_NAME_ERROR_NOT_FOUND = 8470;
export const ERROR_DS_NAME_ERROR_NOT_UNIQUE = 8471;
export const ERROR_DS_NAME_ERROR_NO_MAPPING = 8472;
export const ERROR_DS_NAME_ERROR_DOMAIN_ONLY = 8473;
export const ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING = 8474;
export const ERROR_DS_CONSTRUCTED_ATT_MOD = 8475;
export const ERROR_DS_WRONG_OM_OBJ_CLASS = 8476;
export const ERROR_DS_DRA_REPL_PENDING = 8477;
export const ERROR_DS_DS_REQUIRED = 8478;
export const ERROR_DS_INVALID_LDAP_DISPLAY_NAME = 8479;
export const ERROR_DS_NON_BASE_SEARCH = 8480;
export const ERROR_DS_CANT_RETRIEVE_ATTS = 8481;
export const ERROR_DS_BACKLINK_WITHOUT_LINK = 8482;
export const ERROR_DS_EPOCH_MISMATCH = 8483;
export const ERROR_DS_SRC_NAME_MISMATCH = 8484;
export const ERROR_DS_SRC_AND_DST_NC_IDENTICAL = 8485;
export const ERROR_DS_DST_NC_MISMATCH = 8486;
export const ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC = 8487;
export const ERROR_DS_SRC_GUID_MISMATCH = 8488;
export const ERROR_DS_CANT_MOVE_DELETED_OBJECT = 8489;
export const ERROR_DS_PDC_OPERATION_IN_PROGRESS = 8490;
export const ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD = 8491;
export const ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION = 8492;
export const ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS = 8493;
export const ERROR_DS_NC_MUST_HAVE_NC_PARENT = 8494;
export const ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE = 8495;
export const ERROR_DS_DST_DOMAIN_NOT_NATIVE = 8496;
export const ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER = 8497;
export const ERROR_DS_CANT_MOVE_ACCOUNT_GROUP = 8498;
export const ERROR_DS_CANT_MOVE_RESOURCE_GROUP = 8499;
export const ERROR_DS_INVALID_SEARCH_FLAG = 8500;
export const ERROR_DS_NO_TREE_DELETE_ABOVE_NC = 8501;
export const ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE = 8502;
export const ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE = 8503;
export const ERROR_DS_SAM_INIT_FAILURE = 8504;
export const ERROR_DS_SENSITIVE_GROUP_VIOLATION = 8505;
export const ERROR_DS_CANT_MOD_PRIMARYGROUPID = 8506;
export const ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD = 8507;
export const ERROR_DS_NONSAFE_SCHEMA_CHANGE = 8508;
export const ERROR_DS_SCHEMA_UPDATE_DISALLOWED = 8509;
export const ERROR_DS_CANT_CREATE_UNDER_SCHEMA = 8510;
export const ERROR_DS_INSTALL_NO_SRC_SCH_VERSION = 8511;
export const ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE = 8512;
export const ERROR_DS_INVALID_GROUP_TYPE = 8513;
export const ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN = 8514;
export const ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN = 8515;
export const ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER = 8516;
export const ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER = 8517;
export const ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER = 8518;
export const ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER = 8519;
export const ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER = 8520;
export const ERROR_DS_HAVE_PRIMARY_MEMBERS = 8521;
export const ERROR_DS_STRING_SD_CONVERSION_FAILED = 8522;
export const ERROR_DS_NAMING_MASTER_GC = 8523;
export const ERROR_DS_DNS_LOOKUP_FAILURE = 8524;
export const ERROR_DS_COULDNT_UPDATE_SPNS = 8525;
export const ERROR_DS_CANT_RETRIEVE_SD = 8526;
export const ERROR_DS_KEY_NOT_UNIQUE = 8527;
export const ERROR_DS_WRONG_LINKED_ATT_SYNTAX = 8528;
export const ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD = 8529;
export const ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY = 8530;
export const ERROR_DS_CANT_START = 8531;
export const ERROR_DS_INIT_FAILURE = 8532;
export const ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION = 8533;
export const ERROR_DS_SOURCE_DOMAIN_IN_FOREST = 8534;
export const ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST = 8535;
export const ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED = 8536;
export const ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN = 8537;
export const ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER = 8538;
export const ERROR_DS_SRC_SID_EXISTS_IN_FOREST = 8539;
export const ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH = 8540;
export const ERROR_SAM_INIT_FAILURE = 8541;
export const ERROR_DS_DRA_SCHEMA_INFO_SHIP = 8542;
export const ERROR_DS_DRA_SCHEMA_CONFLICT = 8543;
export const ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT = 8544;
export const ERROR_DS_DRA_OBJ_NC_MISMATCH = 8545;
export const ERROR_DS_NC_STILL_HAS_DSAS = 8546;
export const ERROR_DS_GC_REQUIRED = 8547;
export const ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY = 8548;
export const ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS = 8549;
export const ERROR_DS_CANT_ADD_TO_GC = 8550;
export const ERROR_DS_NO_CHECKPOINT_WITH_PDC = 8551;
export const ERROR_DS_SOURCE_AUDITING_NOT_ENABLED = 8552;
export const ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC = 8553;
export const ERROR_DS_INVALID_NAME_FOR_SPN = 8554;
export const ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS = 8555;
export const ERROR_DS_UNICODEPWD_NOT_IN_QUOTES = 8556;
export const ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED = 8557;
export const ERROR_DS_MUST_BE_RUN_ON_DST_DC = 8558;
export const ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER = 8559;
export const ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ = 8560;
export const ERROR_DS_INIT_FAILURE_CONSOLE = 8561;
export const ERROR_DS_SAM_INIT_FAILURE_CONSOLE = 8562;
export const ERROR_DS_FOREST_VERSION_TOO_HIGH = 8563;
export const ERROR_DS_DOMAIN_VERSION_TOO_HIGH = 8564;
export const ERROR_DS_FOREST_VERSION_TOO_LOW = 8565;
export const ERROR_DS_DOMAIN_VERSION_TOO_LOW = 8566;
export const ERROR_DS_INCOMPATIBLE_VERSION = 8567;
export const ERROR_DS_LOW_DSA_VERSION = 8568;
export const ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN = 8569;
export const ERROR_DS_NOT_SUPPORTED_SORT_ORDER = 8570;
export const ERROR_DS_NAME_NOT_UNIQUE = 8571;
export const ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4 = 8572;
export const ERROR_DS_OUT_OF_VERSION_STORE = 8573;
export const ERROR_DS_INCOMPATIBLE_CONTROLS_USED = 8574;
export const ERROR_DS_NO_REF_DOMAIN = 8575;
export const ERROR_DS_RESERVED_LINK_ID = 8576;
export const ERROR_DS_LINK_ID_NOT_AVAILABLE = 8577;
export const ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER = 8578;
export const ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE = 8579;
export const ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC = 8580;
export const ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG = 8581;
export const ERROR_DS_MODIFYDN_WRONG_GRANDPARENT = 8582;
export const ERROR_DS_NAME_ERROR_TRUST_REFERRAL = 8583;
export const ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER = 8584;
export const ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD = 8585;
export const ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2 = 8586;
export const ERROR_DS_THREAD_LIMIT_EXCEEDED = 8587;
export const ERROR_DS_NOT_CLOSEST = 8588;
export const ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF = 8589;
export const ERROR_DS_SINGLE_USER_MODE_FAILED = 8590;
export const ERROR_DS_NTDSCRIPT_SYNTAX_ERROR = 8591;
export const ERROR_DS_NTDSCRIPT_PROCESS_ERROR = 8592;
export const ERROR_DS_DIFFERENT_REPL_EPOCHS = 8593;
export const ERROR_DS_DRS_EXTENSIONS_CHANGED = 8594;
export const ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR = 8595;
export const ERROR_DS_NO_MSDS_INTID = 8596;
export const ERROR_DS_DUP_MSDS_INTID = 8597;
export const ERROR_DS_EXISTS_IN_RDNATTID = 8598;
export const ERROR_DS_AUTHORIZATION_FAILED = 8599;
export const ERROR_DS_INVALID_SCRIPT = 8600;
export const ERROR_DS_REMOTE_CROSSREF_OP_FAILED = 8601;
export const ERROR_DS_CROSS_REF_BUSY = 8602;
export const ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN = 8603;
export const ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC = 8604;
export const ERROR_DS_DUPLICATE_ID_FOUND = 8605;
export const ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT = 8606;
export const ERROR_DS_GROUP_CONVERSION_ERROR = 8607;
export const ERROR_DS_CANT_MOVE_APP_BASIC_GROUP = 8608;
export const ERROR_DS_CANT_MOVE_APP_QUERY_GROUP = 8609;
export const ERROR_DS_ROLE_NOT_VERIFIED = 8610;
export const ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL = 8611;
export const ERROR_DS_DOMAIN_RENAME_IN_PROGRESS = 8612;
export const ERROR_DS_EXISTING_AD_CHILD_NC = 8613;
export const ERROR_DS_REPL_LIFETIME_EXCEEDED = 8614;
export const ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER = 8615;
export const ERROR_DS_LDAP_SEND_QUEUE_FULL = 8616;
export const ERROR_DS_DRA_OUT_SCHEDULE_WINDOW = 8617;
export const ERROR_DS_POLICY_NOT_KNOWN = 8618;
export const ERROR_NO_SITE_SETTINGS_OBJECT = 8619;
export const ERROR_NO_SECRETS = 8620;
export const ERROR_NO_WRITABLE_DC_FOUND = 8621;
export const ERROR_DS_NO_SERVER_OBJECT = 8622;
export const ERROR_DS_NO_NTDSA_OBJECT = 8623;
export const ERROR_DS_NON_ASQ_SEARCH = 8624;
export const ERROR_DS_AUDIT_FAILURE = 8625;
export const ERROR_DS_INVALID_SEARCH_FLAG_SUBTREE = 8626;
export const ERROR_DS_INVALID_SEARCH_FLAG_TUPLE = 8627;
export const ERROR_DS_HIERARCHY_TABLE_TOO_DEEP = 8628;
export const ERROR_DS_DRA_CORRUPT_UTD_VECTOR = 8629;
export const ERROR_DS_DRA_SECRETS_DENIED = 8630;
export const ERROR_DS_RESERVED_MAPI_ID = 8631;
export const ERROR_DS_MAPI_ID_NOT_AVAILABLE = 8632;
export const ERROR_DS_DRA_MISSING_KRBTGT_SECRET = 8633;
export const ERROR_DS_DOMAIN_NAME_EXISTS_IN_FOREST = 8634;
export const ERROR_DS_FLAT_NAME_EXISTS_IN_FOREST = 8635;
export const ERROR_INVALID_USER_PRINCIPAL_NAME = 8636;
export const ERROR_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS = 8637;
export const ERROR_DS_OID_NOT_FOUND = 8638;
export const ERROR_DS_DRA_RECYCLED_TARGET = 8639;
export const ERROR_DS_DISALLOWED_NC_REDIRECT = 8640;
export const ERROR_DS_HIGH_ADLDS_FFL = 8641;
export const ERROR_DS_HIGH_DSA_VERSION = 8642;
export const ERROR_DS_LOW_ADLDS_FFL = 8643;
export const ERROR_DOMAIN_SID_SAME_AS_LOCAL_WORKSTATION = 8644;
export const ERROR_DS_UNDELETE_SAM_VALIDATION_FAILED = 8645;
export const ERROR_INCORRECT_ACCOUNT_TYPE = 8646;
export const ERROR_DS_SPN_VALUE_NOT_UNIQUE_IN_FOREST = 8647;
export const ERROR_DS_UPN_VALUE_NOT_UNIQUE_IN_FOREST = 8648;
export const ERROR_DS_MISSING_FOREST_TRUST = 8649;
export const ERROR_DS_VALUE_KEY_NOT_UNIQUE = 8650;
export const ERROR_WEAK_WHFBKEY_BLOCKED = 8651;
export const DNS_ERROR_RESPONSE_CODES_BASE = 9000;
export const DNS_ERROR_RCODE_NO_ERROR = 0;
export const DNS_ERROR_MASK = 9000;
export const DNS_ERROR_RCODE_FORMAT_ERROR = 9001;
export const DNS_ERROR_RCODE_SERVER_FAILURE = 9002;
export const DNS_ERROR_RCODE_NAME_ERROR = 9003;
export const DNS_ERROR_RCODE_NOT_IMPLEMENTED = 9004;
export const DNS_ERROR_RCODE_REFUSED = 9005;
export const DNS_ERROR_RCODE_YXDOMAIN = 9006;
export const DNS_ERROR_RCODE_YXRRSET = 9007;
export const DNS_ERROR_RCODE_NXRRSET = 9008;
export const DNS_ERROR_RCODE_NOTAUTH = 9009;
export const DNS_ERROR_RCODE_NOTZONE = 9010;
export const DNS_ERROR_RCODE_BADSIG = 9016;
export const DNS_ERROR_RCODE_BADKEY = 9017;
export const DNS_ERROR_RCODE_BADTIME = 9018;
export const DNS_ERROR_RCODE_LAST = 9018;
export const DNS_ERROR_DNSSEC_BASE = 9100;
export const DNS_ERROR_KEYMASTER_REQUIRED = 9101;
export const DNS_ERROR_NOT_ALLOWED_ON_SIGNED_ZONE = 9102;
export const DNS_ERROR_NSEC3_INCOMPATIBLE_WITH_RSA_SHA1 = 9103;
export const DNS_ERROR_NOT_ENOUGH_SIGNING_KEY_DESCRIPTORS = 9104;
export const DNS_ERROR_UNSUPPORTED_ALGORITHM = 9105;
export const DNS_ERROR_INVALID_KEY_SIZE = 9106;
export const DNS_ERROR_SIGNING_KEY_NOT_ACCESSIBLE = 9107;
export const DNS_ERROR_KSP_DOES_NOT_SUPPORT_PROTECTION = 9108;
export const DNS_ERROR_UNEXPECTED_DATA_PROTECTION_ERROR = 9109;
export const DNS_ERROR_UNEXPECTED_CNG_ERROR = 9110;
export const DNS_ERROR_UNKNOWN_SIGNING_PARAMETER_VERSION = 9111;
export const DNS_ERROR_KSP_NOT_ACCESSIBLE = 9112;
export const DNS_ERROR_TOO_MANY_SKDS = 9113;
export const DNS_ERROR_INVALID_ROLLOVER_PERIOD = 9114;
export const DNS_ERROR_INVALID_INITIAL_ROLLOVER_OFFSET = 9115;
export const DNS_ERROR_ROLLOVER_IN_PROGRESS = 9116;
export const DNS_ERROR_STANDBY_KEY_NOT_PRESENT = 9117;
export const DNS_ERROR_NOT_ALLOWED_ON_ZSK = 9118;
export const DNS_ERROR_NOT_ALLOWED_ON_ACTIVE_SKD = 9119;
export const DNS_ERROR_ROLLOVER_ALREADY_QUEUED = 9120;
export const DNS_ERROR_NOT_ALLOWED_ON_UNSIGNED_ZONE = 9121;
export const DNS_ERROR_BAD_KEYMASTER = 9122;
export const DNS_ERROR_INVALID_SIGNATURE_VALIDITY_PERIOD = 9123;
export const DNS_ERROR_INVALID_NSEC3_ITERATION_COUNT = 9124;
export const DNS_ERROR_DNSSEC_IS_DISABLED = 9125;
export const DNS_ERROR_INVALID_XML = 9126;
export const DNS_ERROR_NO_VALID_TRUST_ANCHORS = 9127;
export const DNS_ERROR_ROLLOVER_NOT_POKEABLE = 9128;
export const DNS_ERROR_NSEC3_NAME_COLLISION = 9129;
export const DNS_ERROR_NSEC_INCOMPATIBLE_WITH_NSEC3_RSA_SHA1 = 9130;
export const DNS_ERROR_PACKET_FMT_BASE = 9500;
export const DNS_ERROR_BAD_PACKET = 9502;
export const DNS_ERROR_NO_PACKET = 9503;
export const DNS_ERROR_RCODE = 9504;
export const DNS_ERROR_UNSECURE_PACKET = 9505;
export const DNS_ERROR_NO_MEMORY = 14;
export const DNS_ERROR_INVALID_NAME = 123;
export const DNS_ERROR_INVALID_DATA = 13;
export const DNS_ERROR_GENERAL_API_BASE = 9550;
export const DNS_ERROR_INVALID_TYPE = 9551;
export const DNS_ERROR_INVALID_IP_ADDRESS = 9552;
export const DNS_ERROR_INVALID_PROPERTY = 9553;
export const DNS_ERROR_TRY_AGAIN_LATER = 9554;
export const DNS_ERROR_NOT_UNIQUE = 9555;
export const DNS_ERROR_NON_RFC_NAME = 9556;
export const DNS_ERROR_INVALID_NAME_CHAR = 9560;
export const DNS_ERROR_NUMERIC_NAME = 9561;
export const DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER = 9562;
export const DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION = 9563;
export const DNS_ERROR_CANNOT_FIND_ROOT_HINTS = 9564;
export const DNS_ERROR_INCONSISTENT_ROOT_HINTS = 9565;
export const DNS_ERROR_DWORD_VALUE_TOO_SMALL = 9566;
export const DNS_ERROR_DWORD_VALUE_TOO_LARGE = 9567;
export const DNS_ERROR_BACKGROUND_LOADING = 9568;
export const DNS_ERROR_NOT_ALLOWED_ON_RODC = 9569;
export const DNS_ERROR_NOT_ALLOWED_UNDER_DNAME = 9570;
export const DNS_ERROR_DELEGATION_REQUIRED = 9571;
export const DNS_ERROR_INVALID_POLICY_TABLE = 9572;
export const DNS_ERROR_ADDRESS_REQUIRED = 9573;
export const DNS_ERROR_ZONE_BASE = 9600;
export const DNS_ERROR_ZONE_DOES_NOT_EXIST = 9601;
export const DNS_ERROR_NO_ZONE_INFO = 9602;
export const DNS_ERROR_INVALID_ZONE_OPERATION = 9603;
export const DNS_ERROR_ZONE_CONFIGURATION_ERROR = 9604;
export const DNS_ERROR_ZONE_HAS_NO_SOA_RECORD = 9605;
export const DNS_ERROR_ZONE_HAS_NO_NS_RECORDS = 9606;
export const DNS_ERROR_ZONE_LOCKED = 9607;
export const DNS_ERROR_ZONE_CREATION_FAILED = 9608;
export const DNS_ERROR_ZONE_ALREADY_EXISTS = 9609;
export const DNS_ERROR_AUTOZONE_ALREADY_EXISTS = 9610;
export const DNS_ERROR_INVALID_ZONE_TYPE = 9611;
export const DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP = 9612;
export const DNS_ERROR_ZONE_NOT_SECONDARY = 9613;
export const DNS_ERROR_NEED_SECONDARY_ADDRESSES = 9614;
export const DNS_ERROR_WINS_INIT_FAILED = 9615;
export const DNS_ERROR_NEED_WINS_SERVERS = 9616;
export const DNS_ERROR_NBSTAT_INIT_FAILED = 9617;
export const DNS_ERROR_SOA_DELETE_INVALID = 9618;
export const DNS_ERROR_FORWARDER_ALREADY_EXISTS = 9619;
export const DNS_ERROR_ZONE_REQUIRES_MASTER_IP = 9620;
export const DNS_ERROR_ZONE_IS_SHUTDOWN = 9621;
export const DNS_ERROR_ZONE_LOCKED_FOR_SIGNING = 9622;
export const DNS_ERROR_DATAFILE_BASE = 9650;
export const DNS_ERROR_PRIMARY_REQUIRES_DATAFILE = 9651;
export const DNS_ERROR_INVALID_DATAFILE_NAME = 9652;
export const DNS_ERROR_DATAFILE_OPEN_FAILURE = 9653;
export const DNS_ERROR_FILE_WRITEBACK_FAILED = 9654;
export const DNS_ERROR_DATAFILE_PARSING = 9655;
export const DNS_ERROR_DATABASE_BASE = 9700;
export const DNS_ERROR_RECORD_DOES_NOT_EXIST = 9701;
export const DNS_ERROR_RECORD_FORMAT = 9702;
export const DNS_ERROR_NODE_CREATION_FAILED = 9703;
export const DNS_ERROR_UNKNOWN_RECORD_TYPE = 9704;
export const DNS_ERROR_RECORD_TIMED_OUT = 9705;
export const DNS_ERROR_NAME_NOT_IN_ZONE = 9706;
export const DNS_ERROR_CNAME_LOOP = 9707;
export const DNS_ERROR_NODE_IS_CNAME = 9708;
export const DNS_ERROR_CNAME_COLLISION = 9709;
export const DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT = 9710;
export const DNS_ERROR_RECORD_ALREADY_EXISTS = 9711;
export const DNS_ERROR_SECONDARY_DATA = 9712;
export const DNS_ERROR_NO_CREATE_CACHE_DATA = 9713;
export const DNS_ERROR_NAME_DOES_NOT_EXIST = 9714;
export const DNS_ERROR_DS_UNAVAILABLE = 9717;
export const DNS_ERROR_DS_ZONE_ALREADY_EXISTS = 9718;
export const DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE = 9719;
export const DNS_ERROR_NODE_IS_DNAME = 9720;
export const DNS_ERROR_DNAME_COLLISION = 9721;
export const DNS_ERROR_ALIAS_LOOP = 9722;
export const DNS_ERROR_OPERATION_BASE = 9750;
export const DNS_ERROR_AXFR = 9752;
export const DNS_ERROR_SECURE_BASE = 9800;
export const DNS_ERROR_SETUP_BASE = 9850;
export const DNS_ERROR_NO_TCPIP = 9851;
export const DNS_ERROR_NO_DNS_SERVERS = 9852;
export const DNS_ERROR_DP_BASE = 9900;
export const DNS_ERROR_DP_DOES_NOT_EXIST = 9901;
export const DNS_ERROR_DP_ALREADY_EXISTS = 9902;
export const DNS_ERROR_DP_NOT_ENLISTED = 9903;
export const DNS_ERROR_DP_ALREADY_ENLISTED = 9904;
export const DNS_ERROR_DP_NOT_AVAILABLE = 9905;
export const DNS_ERROR_DP_FSMO_ERROR = 9906;
export const DNS_ERROR_RRL_NOT_ENABLED = 9911;
export const DNS_ERROR_RRL_INVALID_WINDOW_SIZE = 9912;
export const DNS_ERROR_RRL_INVALID_IPV4_PREFIX = 9913;
export const DNS_ERROR_RRL_INVALID_IPV6_PREFIX = 9914;
export const DNS_ERROR_RRL_INVALID_TC_RATE = 9915;
export const DNS_ERROR_RRL_INVALID_LEAK_RATE = 9916;
export const DNS_ERROR_RRL_LEAK_RATE_LESSTHAN_TC_RATE = 9917;
export const DNS_ERROR_VIRTUALIZATION_INSTANCE_ALREADY_EXISTS = 9921;
export const DNS_ERROR_VIRTUALIZATION_INSTANCE_DOES_NOT_EXIST = 9922;
export const DNS_ERROR_VIRTUALIZATION_TREE_LOCKED = 9923;
export const DNS_ERROR_INVAILD_VIRTUALIZATION_INSTANCE_NAME = 9924;
export const DNS_ERROR_DEFAULT_VIRTUALIZATION_INSTANCE = 9925;
export const DNS_ERROR_ZONESCOPE_ALREADY_EXISTS = 9951;
export const DNS_ERROR_ZONESCOPE_DOES_NOT_EXIST = 9952;
export const DNS_ERROR_DEFAULT_ZONESCOPE = 9953;
export const DNS_ERROR_INVALID_ZONESCOPE_NAME = 9954;
export const DNS_ERROR_NOT_ALLOWED_WITH_ZONESCOPES = 9955;
export const DNS_ERROR_LOAD_ZONESCOPE_FAILED = 9956;
export const DNS_ERROR_ZONESCOPE_FILE_WRITEBACK_FAILED = 9957;
export const DNS_ERROR_INVALID_SCOPE_NAME = 9958;
export const DNS_ERROR_SCOPE_DOES_NOT_EXIST = 9959;
export const DNS_ERROR_DEFAULT_SCOPE = 9960;
export const DNS_ERROR_INVALID_SCOPE_OPERATION = 9961;
export const DNS_ERROR_SCOPE_LOCKED = 9962;
export const DNS_ERROR_SCOPE_ALREADY_EXISTS = 9963;
export const DNS_ERROR_POLICY_ALREADY_EXISTS = 9971;
export const DNS_ERROR_POLICY_DOES_NOT_EXIST = 9972;
export const DNS_ERROR_POLICY_INVALID_CRITERIA = 9973;
export const DNS_ERROR_POLICY_INVALID_SETTINGS = 9974;
export const DNS_ERROR_CLIENT_SUBNET_IS_ACCESSED = 9975;
export const DNS_ERROR_CLIENT_SUBNET_DOES_NOT_EXIST = 9976;
export const DNS_ERROR_CLIENT_SUBNET_ALREADY_EXISTS = 9977;
export const DNS_ERROR_SUBNET_DOES_NOT_EXIST = 9978;
export const DNS_ERROR_SUBNET_ALREADY_EXISTS = 9979;
export const DNS_ERROR_POLICY_LOCKED = 9980;
export const DNS_ERROR_POLICY_INVALID_WEIGHT = 9981;
export const DNS_ERROR_POLICY_INVALID_NAME = 9982;
export const DNS_ERROR_POLICY_MISSING_CRITERIA = 9983;
export const DNS_ERROR_INVALID_CLIENT_SUBNET_NAME = 9984;
export const DNS_ERROR_POLICY_PROCESSING_ORDER_INVALID = 9985;
export const DNS_ERROR_POLICY_SCOPE_MISSING = 9986;
export const DNS_ERROR_POLICY_SCOPE_NOT_ALLOWED = 9987;
export const DNS_ERROR_SERVERSCOPE_IS_REFERENCED = 9988;
export const DNS_ERROR_ZONESCOPE_IS_REFERENCED = 9989;
export const DNS_ERROR_POLICY_INVALID_CRITERIA_CLIENT_SUBNET = 9990;
export const DNS_ERROR_POLICY_INVALID_CRITERIA_TRANSPORT_PROTOCOL = 9991;
export const DNS_ERROR_POLICY_INVALID_CRITERIA_NETWORK_PROTOCOL = 9992;
export const DNS_ERROR_POLICY_INVALID_CRITERIA_INTERFACE = 9993;
export const DNS_ERROR_POLICY_INVALID_CRITERIA_FQDN = 9994;
export const DNS_ERROR_POLICY_INVALID_CRITERIA_QUERY_TYPE = 9995;
export const DNS_ERROR_POLICY_INVALID_CRITERIA_TIME_OF_DAY = 9996;
export const ERROR_IPSEC_QM_POLICY_EXISTS = 13000;
export const ERROR_IPSEC_QM_POLICY_NOT_FOUND = 13001;
export const ERROR_IPSEC_QM_POLICY_IN_USE = 13002;
export const ERROR_IPSEC_MM_POLICY_EXISTS = 13003;
export const ERROR_IPSEC_MM_POLICY_NOT_FOUND = 13004;
export const ERROR_IPSEC_MM_POLICY_IN_USE = 13005;
export const ERROR_IPSEC_MM_FILTER_EXISTS = 13006;
export const ERROR_IPSEC_MM_FILTER_NOT_FOUND = 13007;
export const ERROR_IPSEC_TRANSPORT_FILTER_EXISTS = 13008;
export const ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND = 13009;
export const ERROR_IPSEC_MM_AUTH_EXISTS = 13010;
export const ERROR_IPSEC_MM_AUTH_NOT_FOUND = 13011;
export const ERROR_IPSEC_MM_AUTH_IN_USE = 13012;
export const ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND = 13013;
export const ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND = 13014;
export const ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND = 13015;
export const ERROR_IPSEC_TUNNEL_FILTER_EXISTS = 13016;
export const ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND = 13017;
export const ERROR_IPSEC_MM_FILTER_PENDING_DELETION = 13018;
export const ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION = 13019;
export const ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION = 13020;
export const ERROR_IPSEC_MM_POLICY_PENDING_DELETION = 13021;
export const ERROR_IPSEC_MM_AUTH_PENDING_DELETION = 13022;
export const ERROR_IPSEC_QM_POLICY_PENDING_DELETION = 13023;
export const ERROR_IPSEC_IKE_NEG_STATUS_BEGIN = 13800;
export const ERROR_IPSEC_IKE_AUTH_FAIL = 13801;
export const ERROR_IPSEC_IKE_ATTRIB_FAIL = 13802;
export const ERROR_IPSEC_IKE_NEGOTIATION_PENDING = 13803;
export const ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR = 13804;
export const ERROR_IPSEC_IKE_TIMED_OUT = 13805;
export const ERROR_IPSEC_IKE_NO_CERT = 13806;
export const ERROR_IPSEC_IKE_SA_DELETED = 13807;
export const ERROR_IPSEC_IKE_SA_REAPED = 13808;
export const ERROR_IPSEC_IKE_MM_ACQUIRE_DROP = 13809;
export const ERROR_IPSEC_IKE_QM_ACQUIRE_DROP = 13810;
export const ERROR_IPSEC_IKE_QUEUE_DROP_MM = 13811;
export const ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM = 13812;
export const ERROR_IPSEC_IKE_DROP_NO_RESPONSE = 13813;
export const ERROR_IPSEC_IKE_MM_DELAY_DROP = 13814;
export const ERROR_IPSEC_IKE_QM_DELAY_DROP = 13815;
export const ERROR_IPSEC_IKE_ERROR = 13816;
export const ERROR_IPSEC_IKE_CRL_FAILED = 13817;
export const ERROR_IPSEC_IKE_INVALID_KEY_USAGE = 13818;
export const ERROR_IPSEC_IKE_INVALID_CERT_TYPE = 13819;
export const ERROR_IPSEC_IKE_NO_PRIVATE_KEY = 13820;
export const ERROR_IPSEC_IKE_SIMULTANEOUS_REKEY = 13821;
export const ERROR_IPSEC_IKE_DH_FAIL = 13822;
export const ERROR_IPSEC_IKE_CRITICAL_PAYLOAD_NOT_RECOGNIZED = 13823;
export const ERROR_IPSEC_IKE_INVALID_HEADER = 13824;
export const ERROR_IPSEC_IKE_NO_POLICY = 13825;
export const ERROR_IPSEC_IKE_INVALID_SIGNATURE = 13826;
export const ERROR_IPSEC_IKE_KERBEROS_ERROR = 13827;
export const ERROR_IPSEC_IKE_NO_PUBLIC_KEY = 13828;
export const ERROR_IPSEC_IKE_PROCESS_ERR = 13829;
export const ERROR_IPSEC_IKE_PROCESS_ERR_SA = 13830;
export const ERROR_IPSEC_IKE_PROCESS_ERR_PROP = 13831;
export const ERROR_IPSEC_IKE_PROCESS_ERR_TRANS = 13832;
export const ERROR_IPSEC_IKE_PROCESS_ERR_KE = 13833;
export const ERROR_IPSEC_IKE_PROCESS_ERR_ID = 13834;
export const ERROR_IPSEC_IKE_PROCESS_ERR_CERT = 13835;
export const ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ = 13836;
export const ERROR_IPSEC_IKE_PROCESS_ERR_HASH = 13837;
export const ERROR_IPSEC_IKE_PROCESS_ERR_SIG = 13838;
export const ERROR_IPSEC_IKE_PROCESS_ERR_NONCE = 13839;
export const ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY = 13840;
export const ERROR_IPSEC_IKE_PROCESS_ERR_DELETE = 13841;
export const ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR = 13842;
export const ERROR_IPSEC_IKE_INVALID_PAYLOAD = 13843;
export const ERROR_IPSEC_IKE_LOAD_SOFT_SA = 13844;
export const ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN = 13845;
export const ERROR_IPSEC_IKE_INVALID_COOKIE = 13846;
export const ERROR_IPSEC_IKE_NO_PEER_CERT = 13847;
export const ERROR_IPSEC_IKE_PEER_CRL_FAILED = 13848;
export const ERROR_IPSEC_IKE_POLICY_CHANGE = 13849;
export const ERROR_IPSEC_IKE_NO_MM_POLICY = 13850;
export const ERROR_IPSEC_IKE_NOTCBPRIV = 13851;
export const ERROR_IPSEC_IKE_SECLOADFAIL = 13852;
export const ERROR_IPSEC_IKE_FAILSSPINIT = 13853;
export const ERROR_IPSEC_IKE_FAILQUERYSSP = 13854;
export const ERROR_IPSEC_IKE_SRVACQFAIL = 13855;
export const ERROR_IPSEC_IKE_SRVQUERYCRED = 13856;
export const ERROR_IPSEC_IKE_GETSPIFAIL = 13857;
export const ERROR_IPSEC_IKE_INVALID_FILTER = 13858;
export const ERROR_IPSEC_IKE_OUT_OF_MEMORY = 13859;
export const ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED = 13860;
export const ERROR_IPSEC_IKE_INVALID_POLICY = 13861;
export const ERROR_IPSEC_IKE_UNKNOWN_DOI = 13862;
export const ERROR_IPSEC_IKE_INVALID_SITUATION = 13863;
export const ERROR_IPSEC_IKE_DH_FAILURE = 13864;
export const ERROR_IPSEC_IKE_INVALID_GROUP = 13865;
export const ERROR_IPSEC_IKE_ENCRYPT = 13866;
export const ERROR_IPSEC_IKE_DECRYPT = 13867;
export const ERROR_IPSEC_IKE_POLICY_MATCH = 13868;
export const ERROR_IPSEC_IKE_UNSUPPORTED_ID = 13869;
export const ERROR_IPSEC_IKE_INVALID_HASH = 13870;
export const ERROR_IPSEC_IKE_INVALID_HASH_ALG = 13871;
export const ERROR_IPSEC_IKE_INVALID_HASH_SIZE = 13872;
export const ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG = 13873;
export const ERROR_IPSEC_IKE_INVALID_AUTH_ALG = 13874;
export const ERROR_IPSEC_IKE_INVALID_SIG = 13875;
export const ERROR_IPSEC_IKE_LOAD_FAILED = 13876;
export const ERROR_IPSEC_IKE_RPC_DELETE = 13877;
export const ERROR_IPSEC_IKE_BENIGN_REINIT = 13878;
export const ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY = 13879;
export const ERROR_IPSEC_IKE_INVALID_MAJOR_VERSION = 13880;
export const ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN = 13881;
export const ERROR_IPSEC_IKE_MM_LIMIT = 13882;
export const ERROR_IPSEC_IKE_NEGOTIATION_DISABLED = 13883;
export const ERROR_IPSEC_IKE_QM_LIMIT = 13884;
export const ERROR_IPSEC_IKE_MM_EXPIRED = 13885;
export const ERROR_IPSEC_IKE_PEER_MM_ASSUMED_INVALID = 13886;
export const ERROR_IPSEC_IKE_CERT_CHAIN_POLICY_MISMATCH = 13887;
export const ERROR_IPSEC_IKE_UNEXPECTED_MESSAGE_ID = 13888;
export const ERROR_IPSEC_IKE_INVALID_AUTH_PAYLOAD = 13889;
export const ERROR_IPSEC_IKE_DOS_COOKIE_SENT = 13890;
export const ERROR_IPSEC_IKE_SHUTTING_DOWN = 13891;
export const ERROR_IPSEC_IKE_CGA_AUTH_FAILED = 13892;
export const ERROR_IPSEC_IKE_PROCESS_ERR_NATOA = 13893;
export const ERROR_IPSEC_IKE_INVALID_MM_FOR_QM = 13894;
export const ERROR_IPSEC_IKE_QM_EXPIRED = 13895;
export const ERROR_IPSEC_IKE_TOO_MANY_FILTERS = 13896;
export const ERROR_IPSEC_IKE_NEG_STATUS_END = 13897;
export const ERROR_IPSEC_IKE_KILL_DUMMY_NAP_TUNNEL = 13898;
export const ERROR_IPSEC_IKE_INNER_IP_ASSIGNMENT_FAILURE = 13899;
export const ERROR_IPSEC_IKE_REQUIRE_CP_PAYLOAD_MISSING = 13900;
export const ERROR_IPSEC_KEY_MODULE_IMPERSONATION_NEGOTIATION_PENDING = 13901;
export const ERROR_IPSEC_IKE_COEXISTENCE_SUPPRESS = 13902;
export const ERROR_IPSEC_IKE_RATELIMIT_DROP = 13903;
export const ERROR_IPSEC_IKE_PEER_DOESNT_SUPPORT_MOBIKE = 13904;
export const ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE = 13905;
export const ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_FAILURE = 13906;
export const ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE_WITH_OPTIONAL_RETRY = 13907;
export const ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_AND_CERTMAP_FAILURE = 13908;
export const ERROR_IPSEC_IKE_NEG_STATUS_EXTENDED_END = 13909;
export const ERROR_IPSEC_BAD_SPI = 13910;
export const ERROR_IPSEC_SA_LIFETIME_EXPIRED = 13911;
export const ERROR_IPSEC_WRONG_SA = 13912;
export const ERROR_IPSEC_REPLAY_CHECK_FAILED = 13913;
export const ERROR_IPSEC_INVALID_PACKET = 13914;
export const ERROR_IPSEC_INTEGRITY_CHECK_FAILED = 13915;
export const ERROR_IPSEC_CLEAR_TEXT_DROP = 13916;
export const ERROR_IPSEC_AUTH_FIREWALL_DROP = 13917;
export const ERROR_IPSEC_THROTTLE_DROP = 13918;
export const ERROR_IPSEC_DOSP_BLOCK = 13925;
export const ERROR_IPSEC_DOSP_RECEIVED_MULTICAST = 13926;
export const ERROR_IPSEC_DOSP_INVALID_PACKET = 13927;
export const ERROR_IPSEC_DOSP_STATE_LOOKUP_FAILED = 13928;
export const ERROR_IPSEC_DOSP_MAX_ENTRIES = 13929;
export const ERROR_IPSEC_DOSP_KEYMOD_NOT_ALLOWED = 13930;
export const ERROR_IPSEC_DOSP_NOT_INSTALLED = 13931;
export const ERROR_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES = 13932;
export const ERROR_SXS_SECTION_NOT_FOUND = 14000;
export const ERROR_SXS_CANT_GEN_ACTCTX = 14001;
export const ERROR_SXS_INVALID_ACTCTXDATA_FORMAT = 14002;
export const ERROR_SXS_ASSEMBLY_NOT_FOUND = 14003;
export const ERROR_SXS_MANIFEST_FORMAT_ERROR = 14004;
export const ERROR_SXS_MANIFEST_PARSE_ERROR = 14005;
export const ERROR_SXS_ACTIVATION_CONTEXT_DISABLED = 14006;
export const ERROR_SXS_KEY_NOT_FOUND = 14007;
export const ERROR_SXS_VERSION_CONFLICT = 14008;
export const ERROR_SXS_WRONG_SECTION_TYPE = 14009;
export const ERROR_SXS_THREAD_QUERIES_DISABLED = 14010;
export const ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET = 14011;
export const ERROR_SXS_UNKNOWN_ENCODING_GROUP = 14012;
export const ERROR_SXS_UNKNOWN_ENCODING = 14013;
export const ERROR_SXS_INVALID_XML_NAMESPACE_URI = 14014;
export const ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED = 14015;
export const ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED = 14016;
export const ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE = 14017;
export const ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE = 14018;
export const ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE = 14019;
export const ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT = 14020;
export const ERROR_SXS_DUPLICATE_DLL_NAME = 14021;
export const ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME = 14022;
export const ERROR_SXS_DUPLICATE_CLSID = 14023;
export const ERROR_SXS_DUPLICATE_IID = 14024;
export const ERROR_SXS_DUPLICATE_TLBID = 14025;
export const ERROR_SXS_DUPLICATE_PROGID = 14026;
export const ERROR_SXS_DUPLICATE_ASSEMBLY_NAME = 14027;
export const ERROR_SXS_FILE_HASH_MISMATCH = 14028;
export const ERROR_SXS_POLICY_PARSE_ERROR = 14029;
export const ERROR_SXS_XML_E_MISSINGQUOTE = 14030;
export const ERROR_SXS_XML_E_COMMENTSYNTAX = 14031;
export const ERROR_SXS_XML_E_BADSTARTNAMECHAR = 14032;
export const ERROR_SXS_XML_E_BADNAMECHAR = 14033;
export const ERROR_SXS_XML_E_BADCHARINSTRING = 14034;
export const ERROR_SXS_XML_E_XMLDECLSYNTAX = 14035;
export const ERROR_SXS_XML_E_BADCHARDATA = 14036;
export const ERROR_SXS_XML_E_MISSINGWHITESPACE = 14037;
export const ERROR_SXS_XML_E_EXPECTINGTAGEND = 14038;
export const ERROR_SXS_XML_E_MISSINGSEMICOLON = 14039;
export const ERROR_SXS_XML_E_UNBALANCEDPAREN = 14040;
export const ERROR_SXS_XML_E_INTERNALERROR = 14041;
export const ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE = 14042;
export const ERROR_SXS_XML_E_INCOMPLETE_ENCODING = 14043;
export const ERROR_SXS_XML_E_MISSING_PAREN = 14044;
export const ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE = 14045;
export const ERROR_SXS_XML_E_MULTIPLE_COLONS = 14046;
export const ERROR_SXS_XML_E_INVALID_DECIMAL = 14047;
export const ERROR_SXS_XML_E_INVALID_HEXIDECIMAL = 14048;
export const ERROR_SXS_XML_E_INVALID_UNICODE = 14049;
export const ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK = 14050;
export const ERROR_SXS_XML_E_UNEXPECTEDENDTAG = 14051;
export const ERROR_SXS_XML_E_UNCLOSEDTAG = 14052;
export const ERROR_SXS_XML_E_DUPLICATEATTRIBUTE = 14053;
export const ERROR_SXS_XML_E_MULTIPLEROOTS = 14054;
export const ERROR_SXS_XML_E_INVALIDATROOTLEVEL = 14055;
export const ERROR_SXS_XML_E_BADXMLDECL = 14056;
export const ERROR_SXS_XML_E_MISSINGROOT = 14057;
export const ERROR_SXS_XML_E_UNEXPECTEDEOF = 14058;
export const ERROR_SXS_XML_E_BADPEREFINSUBSET = 14059;
export const ERROR_SXS_XML_E_UNCLOSEDSTARTTAG = 14060;
export const ERROR_SXS_XML_E_UNCLOSEDENDTAG = 14061;
export const ERROR_SXS_XML_E_UNCLOSEDSTRING = 14062;
export const ERROR_SXS_XML_E_UNCLOSEDCOMMENT = 14063;
export const ERROR_SXS_XML_E_UNCLOSEDDECL = 14064;
export const ERROR_SXS_XML_E_UNCLOSEDCDATA = 14065;
export const ERROR_SXS_XML_E_RESERVEDNAMESPACE = 14066;
export const ERROR_SXS_XML_E_INVALIDENCODING = 14067;
export const ERROR_SXS_XML_E_INVALIDSWITCH = 14068;
export const ERROR_SXS_XML_E_BADXMLCASE = 14069;
export const ERROR_SXS_XML_E_INVALID_STANDALONE = 14070;
export const ERROR_SXS_XML_E_UNEXPECTED_STANDALONE = 14071;
export const ERROR_SXS_XML_E_INVALID_VERSION = 14072;
export const ERROR_SXS_XML_E_MISSINGEQUALS = 14073;
export const ERROR_SXS_PROTECTION_RECOVERY_FAILED = 14074;
export const ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT = 14075;
export const ERROR_SXS_PROTECTION_CATALOG_NOT_VALID = 14076;
export const ERROR_SXS_UNTRANSLATABLE_HRESULT = 14077;
export const ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING = 14078;
export const ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE = 14079;
export const ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME = 14080;
export const ERROR_SXS_ASSEMBLY_MISSING = 14081;
export const ERROR_SXS_CORRUPT_ACTIVATION_STACK = 14082;
export const ERROR_SXS_CORRUPTION = 14083;
export const ERROR_SXS_EARLY_DEACTIVATION = 14084;
export const ERROR_SXS_INVALID_DEACTIVATION = 14085;
export const ERROR_SXS_MULTIPLE_DEACTIVATION = 14086;
export const ERROR_SXS_PROCESS_TERMINATION_REQUESTED = 14087;
export const ERROR_SXS_RELEASE_ACTIVATION_CONTEXT = 14088;
export const ERROR_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY = 14089;
export const ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE = 14090;
export const ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME = 14091;
export const ERROR_SXS_IDENTITY_DUPLICATE_ATTRIBUTE = 14092;
export const ERROR_SXS_IDENTITY_PARSE_ERROR = 14093;
export const ERROR_MALFORMED_SUBSTITUTION_STRING = 14094;
export const ERROR_SXS_INCORRECT_PUBLIC_KEY_TOKEN = 14095;
export const ERROR_UNMAPPED_SUBSTITUTION_STRING = 14096;
export const ERROR_SXS_ASSEMBLY_NOT_LOCKED = 14097;
export const ERROR_SXS_COMPONENT_STORE_CORRUPT = 14098;
export const ERROR_ADVANCED_INSTALLER_FAILED = 14099;
export const ERROR_XML_ENCODING_MISMATCH = 14100;
export const ERROR_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT = 14101;
export const ERROR_SXS_IDENTITIES_DIFFERENT = 14102;
export const ERROR_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT = 14103;
export const ERROR_SXS_FILE_NOT_PART_OF_ASSEMBLY = 14104;
export const ERROR_SXS_MANIFEST_TOO_BIG = 14105;
export const ERROR_SXS_SETTING_NOT_REGISTERED = 14106;
export const ERROR_SXS_TRANSACTION_CLOSURE_INCOMPLETE = 14107;
export const ERROR_SMI_PRIMITIVE_INSTALLER_FAILED = 14108;
export const ERROR_GENERIC_COMMAND_FAILED = 14109;
export const ERROR_SXS_FILE_HASH_MISSING = 14110;
export const ERROR_SXS_DUPLICATE_ACTIVATABLE_CLASS = 14111;
export const ERROR_EVT_INVALID_CHANNEL_PATH = 15000;
export const ERROR_EVT_INVALID_QUERY = 15001;
export const ERROR_EVT_PUBLISHER_METADATA_NOT_FOUND = 15002;
export const ERROR_EVT_EVENT_TEMPLATE_NOT_FOUND = 15003;
export const ERROR_EVT_INVALID_PUBLISHER_NAME = 15004;
export const ERROR_EVT_INVALID_EVENT_DATA = 15005;
export const ERROR_EVT_CHANNEL_NOT_FOUND = 15007;
export const ERROR_EVT_MALFORMED_XML_TEXT = 15008;
export const ERROR_EVT_SUBSCRIPTION_TO_DIRECT_CHANNEL = 15009;
export const ERROR_EVT_CONFIGURATION_ERROR = 15010;
export const ERROR_EVT_QUERY_RESULT_STALE = 15011;
export const ERROR_EVT_QUERY_RESULT_INVALID_POSITION = 15012;
export const ERROR_EVT_NON_VALIDATING_MSXML = 15013;
export const ERROR_EVT_FILTER_ALREADYSCOPED = 15014;
export const ERROR_EVT_FILTER_NOTELTSET = 15015;
export const ERROR_EVT_FILTER_INVARG = 15016;
export const ERROR_EVT_FILTER_INVTEST = 15017;
export const ERROR_EVT_FILTER_INVTYPE = 15018;
export const ERROR_EVT_FILTER_PARSEERR = 15019;
export const ERROR_EVT_FILTER_UNSUPPORTEDOP = 15020;
export const ERROR_EVT_FILTER_UNEXPECTEDTOKEN = 15021;
export const ERROR_EVT_INVALID_OPERATION_OVER_ENABLED_DIRECT_CHANNEL = 15022;
export const ERROR_EVT_INVALID_CHANNEL_PROPERTY_VALUE = 15023;
export const ERROR_EVT_INVALID_PUBLISHER_PROPERTY_VALUE = 15024;
export const ERROR_EVT_CHANNEL_CANNOT_ACTIVATE = 15025;
export const ERROR_EVT_FILTER_TOO_COMPLEX = 15026;
export const ERROR_EVT_MESSAGE_NOT_FOUND = 15027;
export const ERROR_EVT_MESSAGE_ID_NOT_FOUND = 15028;
export const ERROR_EVT_UNRESOLVED_VALUE_INSERT = 15029;
export const ERROR_EVT_UNRESOLVED_PARAMETER_INSERT = 15030;
export const ERROR_EVT_MAX_INSERTS_REACHED = 15031;
export const ERROR_EVT_EVENT_DEFINITION_NOT_FOUND = 15032;
export const ERROR_EVT_MESSAGE_LOCALE_NOT_FOUND = 15033;
export const ERROR_EVT_VERSION_TOO_OLD = 15034;
export const ERROR_EVT_VERSION_TOO_NEW = 15035;
export const ERROR_EVT_CANNOT_OPEN_CHANNEL_OF_QUERY = 15036;
export const ERROR_EVT_PUBLISHER_DISABLED = 15037;
export const ERROR_EVT_FILTER_OUT_OF_RANGE = 15038;
export const ERROR_EC_SUBSCRIPTION_CANNOT_ACTIVATE = 15080;
export const ERROR_EC_LOG_DISABLED = 15081;
export const ERROR_EC_CIRCULAR_FORWARDING = 15082;
export const ERROR_EC_CREDSTORE_FULL = 15083;
export const ERROR_EC_CRED_NOT_FOUND = 15084;
export const ERROR_EC_NO_ACTIVE_CHANNEL = 15085;
export const ERROR_MUI_FILE_NOT_FOUND = 15100;
export const ERROR_MUI_INVALID_FILE = 15101;
export const ERROR_MUI_INVALID_RC_CONFIG = 15102;
export const ERROR_MUI_INVALID_LOCALE_NAME = 15103;
export const ERROR_MUI_INVALID_ULTIMATEFALLBACK_NAME = 15104;
export const ERROR_MUI_FILE_NOT_LOADED = 15105;
export const ERROR_RESOURCE_ENUM_USER_STOP = 15106;
export const ERROR_MUI_INTLSETTINGS_UILANG_NOT_INSTALLED = 15107;
export const ERROR_MUI_INTLSETTINGS_INVALID_LOCALE_NAME = 15108;
export const ERROR_MRM_RUNTIME_NO_DEFAULT_OR_NEUTRAL_RESOURCE = 15110;
export const ERROR_MRM_INVALID_PRICONFIG = 15111;
export const ERROR_MRM_INVALID_FILE_TYPE = 15112;
export const ERROR_MRM_UNKNOWN_QUALIFIER = 15113;
export const ERROR_MRM_INVALID_QUALIFIER_VALUE = 15114;
export const ERROR_MRM_NO_CANDIDATE = 15115;
export const ERROR_MRM_NO_MATCH_OR_DEFAULT_CANDIDATE = 15116;
export const ERROR_MRM_RESOURCE_TYPE_MISMATCH = 15117;
export const ERROR_MRM_DUPLICATE_MAP_NAME = 15118;
export const ERROR_MRM_DUPLICATE_ENTRY = 15119;
export const ERROR_MRM_INVALID_RESOURCE_IDENTIFIER = 15120;
export const ERROR_MRM_FILEPATH_TOO_LONG = 15121;
export const ERROR_MRM_UNSUPPORTED_DIRECTORY_TYPE = 15122;
export const ERROR_MRM_INVALID_PRI_FILE = 15126;
export const ERROR_MRM_NAMED_RESOURCE_NOT_FOUND = 15127;
export const ERROR_MRM_MAP_NOT_FOUND = 15135;
export const ERROR_MRM_UNSUPPORTED_PROFILE_TYPE = 15136;
export const ERROR_MRM_INVALID_QUALIFIER_OPERATOR = 15137;
export const ERROR_MRM_INDETERMINATE_QUALIFIER_VALUE = 15138;
export const ERROR_MRM_AUTOMERGE_ENABLED = 15139;
export const ERROR_MRM_TOO_MANY_RESOURCES = 15140;
export const ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_MERGE = 15141;
export const ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_LOAD_UNLOAD_PRI_FILE = 15142;
export const ERROR_MRM_NO_CURRENT_VIEW_ON_THREAD = 15143;
export const ERROR_DIFFERENT_PROFILE_RESOURCE_MANAGER_EXIST = 15144;
export const ERROR_OPERATION_NOT_ALLOWED_FROM_SYSTEM_COMPONENT = 15145;
export const ERROR_MRM_DIRECT_REF_TO_NON_DEFAULT_RESOURCE = 15146;
export const ERROR_MRM_GENERATION_COUNT_MISMATCH = 15147;
export const ERROR_PRI_MERGE_VERSION_MISMATCH = 15148;
export const ERROR_PRI_MERGE_MISSING_SCHEMA = 15149;
export const ERROR_PRI_MERGE_LOAD_FILE_FAILED = 15150;
export const ERROR_PRI_MERGE_ADD_FILE_FAILED = 15151;
export const ERROR_PRI_MERGE_WRITE_FILE_FAILED = 15152;
export const ERROR_PRI_MERGE_MULTIPLE_PACKAGE_FAMILIES_NOT_ALLOWED = 15153;
export const ERROR_PRI_MERGE_MULTIPLE_MAIN_PACKAGES_NOT_ALLOWED = 15154;
export const ERROR_PRI_MERGE_BUNDLE_PACKAGES_NOT_ALLOWED = 15155;
export const ERROR_PRI_MERGE_MAIN_PACKAGE_REQUIRED = 15156;
export const ERROR_PRI_MERGE_RESOURCE_PACKAGE_REQUIRED = 15157;
export const ERROR_PRI_MERGE_INVALID_FILE_NAME = 15158;
export const ERROR_MRM_PACKAGE_NOT_FOUND = 15159;
export const ERROR_MRM_MISSING_DEFAULT_LANGUAGE = 15160;
export const ERROR_MCA_INVALID_CAPABILITIES_STRING = 15200;
export const ERROR_MCA_INVALID_VCP_VERSION = 15201;
export const ERROR_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION = 15202;
export const ERROR_MCA_MCCS_VERSION_MISMATCH = 15203;
export const ERROR_MCA_UNSUPPORTED_MCCS_VERSION = 15204;
export const ERROR_MCA_INTERNAL_ERROR = 15205;
export const ERROR_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED = 15206;
export const ERROR_MCA_UNSUPPORTED_COLOR_TEMPERATURE = 15207;
export const ERROR_AMBIGUOUS_SYSTEM_DEVICE = 15250;
export const ERROR_SYSTEM_DEVICE_NOT_FOUND = 15299;
export const ERROR_HASH_NOT_SUPPORTED = 15300;
export const ERROR_HASH_NOT_PRESENT = 15301;
export const ERROR_SECONDARY_IC_PROVIDER_NOT_REGISTERED = 15321;
export const ERROR_GPIO_CLIENT_INFORMATION_INVALID = 15322;
export const ERROR_GPIO_VERSION_NOT_SUPPORTED = 15323;
export const ERROR_GPIO_INVALID_REGISTRATION_PACKET = 15324;
export const ERROR_GPIO_OPERATION_DENIED = 15325;
export const ERROR_GPIO_INCOMPATIBLE_CONNECT_MODE = 15326;
export const ERROR_GPIO_INTERRUPT_ALREADY_UNMASKED = 15327;
export const ERROR_CANNOT_SWITCH_RUNLEVEL = 15400;
export const ERROR_INVALID_RUNLEVEL_SETTING = 15401;
export const ERROR_RUNLEVEL_SWITCH_TIMEOUT = 15402;
export const ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT = 15403;
export const ERROR_RUNLEVEL_SWITCH_IN_PROGRESS = 15404;
export const ERROR_SERVICES_FAILED_AUTOSTART = 15405;
export const ERROR_COM_TASK_STOP_PENDING = 15501;
export const ERROR_INSTALL_OPEN_PACKAGE_FAILED = 15600;
export const ERROR_INSTALL_PACKAGE_NOT_FOUND = 15601;
export const ERROR_INSTALL_INVALID_PACKAGE = 15602;
export const ERROR_INSTALL_RESOLVE_DEPENDENCY_FAILED = 15603;
export const ERROR_INSTALL_OUT_OF_DISK_SPACE = 15604;
export const ERROR_INSTALL_NETWORK_FAILURE = 15605;
export const ERROR_INSTALL_REGISTRATION_FAILURE = 15606;
export const ERROR_INSTALL_DEREGISTRATION_FAILURE = 15607;
export const ERROR_INSTALL_CANCEL = 15608;
export const ERROR_INSTALL_FAILED = 15609;
export const ERROR_REMOVE_FAILED = 15610;
export const ERROR_PACKAGE_ALREADY_EXISTS = 15611;
export const ERROR_NEEDS_REMEDIATION = 15612;
export const ERROR_INSTALL_PREREQUISITE_FAILED = 15613;
export const ERROR_PACKAGE_REPOSITORY_CORRUPTED = 15614;
export const ERROR_INSTALL_POLICY_FAILURE = 15615;
export const ERROR_PACKAGE_UPDATING = 15616;
export const ERROR_DEPLOYMENT_BLOCKED_BY_POLICY = 15617;
export const ERROR_PACKAGES_IN_USE = 15618;
export const ERROR_RECOVERY_FILE_CORRUPT = 15619;
export const ERROR_INVALID_STAGED_SIGNATURE = 15620;
export const ERROR_DELETING_EXISTING_APPLICATIONDATA_STORE_FAILED = 15621;
export const ERROR_INSTALL_PACKAGE_DOWNGRADE = 15622;
export const ERROR_SYSTEM_NEEDS_REMEDIATION = 15623;
export const ERROR_APPX_INTEGRITY_FAILURE_CLR_NGEN = 15624;
export const ERROR_RESILIENCY_FILE_CORRUPT = 15625;
export const ERROR_INSTALL_FIREWALL_SERVICE_NOT_RUNNING = 15626;
export const ERROR_PACKAGE_MOVE_FAILED = 15627;
export const ERROR_INSTALL_VOLUME_NOT_EMPTY = 15628;
export const ERROR_INSTALL_VOLUME_OFFLINE = 15629;
export const ERROR_INSTALL_VOLUME_CORRUPT = 15630;
export const ERROR_NEEDS_REGISTRATION = 15631;
export const ERROR_INSTALL_WRONG_PROCESSOR_ARCHITECTURE = 15632;
export const ERROR_DEV_SIDELOAD_LIMIT_EXCEEDED = 15633;
export const ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE = 15634;
export const ERROR_PACKAGE_NOT_SUPPORTED_ON_FILESYSTEM = 15635;
export const ERROR_PACKAGE_MOVE_BLOCKED_BY_STREAMING = 15636;
export const ERROR_INSTALL_OPTIONAL_PACKAGE_APPLICATIONID_NOT_UNIQUE = 15637;
export const ERROR_PACKAGE_STAGING_ONHOLD = 15638;
export const ERROR_INSTALL_INVALID_RELATED_SET_UPDATE = 15639;
export const ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY = 15640;
export const ERROR_DEPLOYMENT_BLOCKED_BY_USER_LOG_OFF = 15641;
export const ERROR_PROVISION_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_PROVISIONED = 15642;
export const ERROR_PACKAGES_REPUTATION_CHECK_FAILED = 15643;
export const ERROR_PACKAGES_REPUTATION_CHECK_TIMEDOUT = 15644;
export const ERROR_DEPLOYMENT_OPTION_NOT_SUPPORTED = 15645;
export const ERROR_APPINSTALLER_ACTIVATION_BLOCKED = 15646;
export const ERROR_REGISTRATION_FROM_REMOTE_DRIVE_NOT_SUPPORTED = 15647;
export const ERROR_APPX_RAW_DATA_WRITE_FAILED = 15648;
export const ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_PACKAGE = 15649;
export const ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_MACHINE = 15650;
export const ERROR_DEPLOYMENT_BLOCKED_BY_PROFILE_POLICY = 15651;
export const ERROR_DEPLOYMENT_FAILED_CONFLICTING_MUTABLE_PACKAGE_DIRECTORY = 15652;
export const ERROR_SINGLETON_RESOURCE_INSTALLED_IN_ACTIVE_USER = 15653;
export const ERROR_DIFFERENT_VERSION_OF_PACKAGED_SERVICE_INSTALLED = 15654;
export const ERROR_SERVICE_EXISTS_AS_NON_PACKAGED_SERVICE = 15655;
export const ERROR_PACKAGED_SERVICE_REQUIRES_ADMIN_PRIVILEGES = 15656;
export const ERROR_REDIRECTION_TO_DEFAULT_ACCOUNT_NOT_ALLOWED = 15657;
export const ERROR_PACKAGE_LACKS_CAPABILITY_TO_DEPLOY_ON_HOST = 15658;
export const ERROR_UNSIGNED_PACKAGE_INVALID_CONTENT = 15659;
export const ERROR_UNSIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE = 15660;
export const ERROR_SIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE = 15661;
export const ERROR_PACKAGE_EXTERNAL_LOCATION_NOT_ALLOWED = 15662;
export const ERROR_INSTALL_FULLTRUST_HOSTRUNTIME_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY = 15663;
export const ERROR_PACKAGE_LACKS_CAPABILITY_FOR_MANDATORY_STARTUPTASKS = 15664;
export const ERROR_INSTALL_RESOLVE_HOSTRUNTIME_DEPENDENCY_FAILED = 15665;
export const ERROR_MACHINE_SCOPE_NOT_ALLOWED = 15666;
export const ERROR_CLASSIC_COMPAT_MODE_NOT_ALLOWED = 15667;
export const ERROR_STAGEFROMUPDATEAGENT_PACKAGE_NOT_APPLICABLE = 15668;
export const ERROR_PACKAGE_NOT_REGISTERED_FOR_USER = 15669;
export const ERROR_STATE_LOAD_STORE_FAILED = 15800;
export const ERROR_STATE_GET_VERSION_FAILED = 15801;
export const ERROR_STATE_SET_VERSION_FAILED = 15802;
export const ERROR_STATE_STRUCTURED_RESET_FAILED = 15803;
export const ERROR_STATE_OPEN_CONTAINER_FAILED = 15804;
export const ERROR_STATE_CREATE_CONTAINER_FAILED = 15805;
export const ERROR_STATE_DELETE_CONTAINER_FAILED = 15806;
export const ERROR_STATE_READ_SETTING_FAILED = 15807;
export const ERROR_STATE_WRITE_SETTING_FAILED = 15808;
export const ERROR_STATE_DELETE_SETTING_FAILED = 15809;
export const ERROR_STATE_QUERY_SETTING_FAILED = 15810;
export const ERROR_STATE_READ_COMPOSITE_SETTING_FAILED = 15811;
export const ERROR_STATE_WRITE_COMPOSITE_SETTING_FAILED = 15812;
export const ERROR_STATE_ENUMERATE_CONTAINER_FAILED = 15813;
export const ERROR_STATE_ENUMERATE_SETTINGS_FAILED = 15814;
export const ERROR_STATE_COMPOSITE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED = 15815;
export const ERROR_STATE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED = 15816;
export const ERROR_STATE_SETTING_NAME_SIZE_LIMIT_EXCEEDED = 15817;
export const ERROR_STATE_CONTAINER_NAME_SIZE_LIMIT_EXCEEDED = 15818;
export const ERROR_API_UNAVAILABLE = 15841;
export const ERROR_NDIS_INTERFACE_CLOSING = 2150891522;
export const ERROR_NDIS_BAD_VERSION = 2150891524;
export const ERROR_NDIS_BAD_CHARACTERISTICS = 2150891525;
export const ERROR_NDIS_ADAPTER_NOT_FOUND = 2150891526;
export const ERROR_NDIS_OPEN_FAILED = 2150891527;
export const ERROR_NDIS_DEVICE_FAILED = 2150891528;
export const ERROR_NDIS_MULTICAST_FULL = 2150891529;
export const ERROR_NDIS_MULTICAST_EXISTS = 2150891530;
export const ERROR_NDIS_MULTICAST_NOT_FOUND = 2150891531;
export const ERROR_NDIS_REQUEST_ABORTED = 2150891532;
export const ERROR_NDIS_RESET_IN_PROGRESS = 2150891533;
export const ERROR_NDIS_NOT_SUPPORTED = 2150891707;
export const ERROR_NDIS_INVALID_PACKET = 2150891535;
export const ERROR_NDIS_ADAPTER_NOT_READY = 2150891537;
export const ERROR_NDIS_INVALID_LENGTH = 2150891540;
export const ERROR_NDIS_INVALID_DATA = 2150891541;
export const ERROR_NDIS_BUFFER_TOO_SHORT = 2150891542;
export const ERROR_NDIS_INVALID_OID = 2150891543;
export const ERROR_NDIS_ADAPTER_REMOVED = 2150891544;
export const ERROR_NDIS_UNSUPPORTED_MEDIA = 2150891545;
export const ERROR_NDIS_GROUP_ADDRESS_IN_USE = 2150891546;
export const ERROR_NDIS_FILE_NOT_FOUND = 2150891547;
export const ERROR_NDIS_ERROR_READING_FILE = 2150891548;
export const ERROR_NDIS_ALREADY_MAPPED = 2150891549;
export const ERROR_NDIS_RESOURCE_CONFLICT = 2150891550;
export const ERROR_NDIS_MEDIA_DISCONNECTED = 2150891551;
export const ERROR_NDIS_INVALID_ADDRESS = 2150891554;
export const ERROR_NDIS_INVALID_DEVICE_REQUEST = 2150891536;
export const ERROR_NDIS_PAUSED = 2150891562;
export const ERROR_NDIS_INTERFACE_NOT_FOUND = 2150891563;
export const ERROR_NDIS_UNSUPPORTED_REVISION = 2150891564;
export const ERROR_NDIS_INVALID_PORT = 2150891565;
export const ERROR_NDIS_INVALID_PORT_STATE = 2150891566;
export const ERROR_NDIS_LOW_POWER_STATE = 2150891567;
export const ERROR_NDIS_REINIT_REQUIRED = 2150891568;
export const ERROR_NDIS_NO_QUEUES = 2150891569;
export const ERROR_NDIS_DOT11_AUTO_CONFIG_ENABLED = 2150899712;
export const ERROR_NDIS_DOT11_MEDIA_IN_USE = 2150899713;
export const ERROR_NDIS_DOT11_POWER_STATE_INVALID = 2150899714;
export const ERROR_NDIS_PM_WOL_PATTERN_LIST_FULL = 2150899715;
export const ERROR_NDIS_PM_PROTOCOL_OFFLOAD_LIST_FULL = 2150899716;
export const ERROR_NDIS_DOT11_AP_CHANNEL_CURRENTLY_NOT_AVAILABLE = 2150899717;
export const ERROR_NDIS_DOT11_AP_BAND_CURRENTLY_NOT_AVAILABLE = 2150899718;
export const ERROR_NDIS_DOT11_AP_CHANNEL_NOT_ALLOWED = 2150899719;
export const ERROR_NDIS_DOT11_AP_BAND_NOT_ALLOWED = 2150899720;
export const ERROR_NDIS_INDICATION_REQUIRED = 3407873;
export const ERROR_NDIS_OFFLOAD_POLICY = 3224637455;
export const ERROR_NDIS_OFFLOAD_CONNECTION_REJECTED = 3224637458;
export const ERROR_NDIS_OFFLOAD_PATH_REJECTED = 3224637459;
export const ERROR_HV_INVALID_HYPERCALL_CODE = 3224698882;
export const ERROR_HV_INVALID_HYPERCALL_INPUT = 3224698883;
export const ERROR_HV_INVALID_ALIGNMENT = 3224698884;
export const ERROR_HV_INVALID_PARAMETER = 3224698885;
export const ERROR_HV_ACCESS_DENIED = 3224698886;
export const ERROR_HV_INVALID_PARTITION_STATE = 3224698887;
export const ERROR_HV_OPERATION_DENIED = 3224698888;
export const ERROR_HV_UNKNOWN_PROPERTY = 3224698889;
export const ERROR_HV_PROPERTY_VALUE_OUT_OF_RANGE = 3224698890;
export const ERROR_HV_INSUFFICIENT_MEMORY = 3224698891;
export const ERROR_HV_PARTITION_TOO_DEEP = 3224698892;
export const ERROR_HV_INVALID_PARTITION_ID = 3224698893;
export const ERROR_HV_INVALID_VP_INDEX = 3224698894;
export const ERROR_HV_INVALID_PORT_ID = 3224698897;
export const ERROR_HV_INVALID_CONNECTION_ID = 3224698898;
export const ERROR_HV_INSUFFICIENT_BUFFERS = 3224698899;
export const ERROR_HV_NOT_ACKNOWLEDGED = 3224698900;
export const ERROR_HV_INVALID_VP_STATE = 3224698901;
export const ERROR_HV_ACKNOWLEDGED = 3224698902;
export const ERROR_HV_INVALID_SAVE_RESTORE_STATE = 3224698903;
export const ERROR_HV_INVALID_SYNIC_STATE = 3224698904;
export const ERROR_HV_OBJECT_IN_USE = 3224698905;
export const ERROR_HV_INVALID_PROXIMITY_DOMAIN_INFO = 3224698906;
export const ERROR_HV_NO_DATA = 3224698907;
export const ERROR_HV_INACTIVE = 3224698908;
export const ERROR_HV_NO_RESOURCES = 3224698909;
export const ERROR_HV_FEATURE_UNAVAILABLE = 3224698910;
export const ERROR_HV_INSUFFICIENT_BUFFER = 3224698931;
export const ERROR_HV_INSUFFICIENT_DEVICE_DOMAINS = 3224698936;
export const ERROR_HV_CPUID_FEATURE_VALIDATION = 3224698940;
export const ERROR_HV_CPUID_XSAVE_FEATURE_VALIDATION = 3224698941;
export const ERROR_HV_PROCESSOR_STARTUP_TIMEOUT = 3224698942;
export const ERROR_HV_SMX_ENABLED = 3224698943;
export const ERROR_HV_INVALID_LP_INDEX = 3224698945;
export const ERROR_HV_INVALID_REGISTER_VALUE = 3224698960;
export const ERROR_HV_INVALID_VTL_STATE = 3224698961;
export const ERROR_HV_NX_NOT_DETECTED = 3224698965;
export const ERROR_HV_INVALID_DEVICE_ID = 3224698967;
export const ERROR_HV_INVALID_DEVICE_STATE = 3224698968;
export const ERROR_HV_PENDING_PAGE_REQUESTS = 3473497;
export const ERROR_HV_PAGE_REQUEST_INVALID = 3224698976;
export const ERROR_HV_INVALID_CPU_GROUP_ID = 3224698991;
export const ERROR_HV_INVALID_CPU_GROUP_STATE = 3224698992;
export const ERROR_HV_OPERATION_FAILED = 3224698993;
export const ERROR_HV_NOT_ALLOWED_WITH_NESTED_VIRT_ACTIVE = 3224698994;
export const ERROR_HV_INSUFFICIENT_ROOT_MEMORY = 3224698995;
export const ERROR_HV_EVENT_BUFFER_ALREADY_FREED = 3224698996;
export const ERROR_HV_INSUFFICIENT_CONTIGUOUS_MEMORY = 3224698997;
export const ERROR_HV_DEVICE_NOT_IN_DOMAIN = 3224698998;
export const ERROR_HV_NESTED_VM_EXIT = 3224698999;
export const ERROR_HV_MSR_ACCESS_FAILED = 3224699008;
export const ERROR_HV_NOT_PRESENT = 3224702976;
export const ERROR_VID_DUPLICATE_HANDLER = 3224829953;
export const ERROR_VID_TOO_MANY_HANDLERS = 3224829954;
export const ERROR_VID_QUEUE_FULL = 3224829955;
export const ERROR_VID_HANDLER_NOT_PRESENT = 3224829956;
export const ERROR_VID_INVALID_OBJECT_NAME = 3224829957;
export const ERROR_VID_PARTITION_NAME_TOO_LONG = 3224829958;
export const ERROR_VID_MESSAGE_QUEUE_NAME_TOO_LONG = 3224829959;
export const ERROR_VID_PARTITION_ALREADY_EXISTS = 3224829960;
export const ERROR_VID_PARTITION_DOES_NOT_EXIST = 3224829961;
export const ERROR_VID_PARTITION_NAME_NOT_FOUND = 3224829962;
export const ERROR_VID_MESSAGE_QUEUE_ALREADY_EXISTS = 3224829963;
export const ERROR_VID_EXCEEDED_MBP_ENTRY_MAP_LIMIT = 3224829964;
export const ERROR_VID_MB_STILL_REFERENCED = 3224829965;
export const ERROR_VID_CHILD_GPA_PAGE_SET_CORRUPTED = 3224829966;
export const ERROR_VID_INVALID_NUMA_SETTINGS = 3224829967;
export const ERROR_VID_INVALID_NUMA_NODE_INDEX = 3224829968;
export const ERROR_VID_NOTIFICATION_QUEUE_ALREADY_ASSOCIATED = 3224829969;
export const ERROR_VID_INVALID_MEMORY_BLOCK_HANDLE = 3224829970;
export const ERROR_VID_PAGE_RANGE_OVERFLOW = 3224829971;
export const ERROR_VID_INVALID_MESSAGE_QUEUE_HANDLE = 3224829972;
export const ERROR_VID_INVALID_GPA_RANGE_HANDLE = 3224829973;
export const ERROR_VID_NO_MEMORY_BLOCK_NOTIFICATION_QUEUE = 3224829974;
export const ERROR_VID_MEMORY_BLOCK_LOCK_COUNT_EXCEEDED = 3224829975;
export const ERROR_VID_INVALID_PPM_HANDLE = 3224829976;
export const ERROR_VID_MBPS_ARE_LOCKED = 3224829977;
export const ERROR_VID_MESSAGE_QUEUE_CLOSED = 3224829978;
export const ERROR_VID_VIRTUAL_PROCESSOR_LIMIT_EXCEEDED = 3224829979;
export const ERROR_VID_STOP_PENDING = 3224829980;
export const ERROR_VID_INVALID_PROCESSOR_STATE = 3224829981;
export const ERROR_VID_EXCEEDED_KM_CONTEXT_COUNT_LIMIT = 3224829982;
export const ERROR_VID_KM_INTERFACE_ALREADY_INITIALIZED = 3224829983;
export const ERROR_VID_MB_PROPERTY_ALREADY_SET_RESET = 3224829984;
export const ERROR_VID_MMIO_RANGE_DESTROYED = 3224829985;
export const ERROR_VID_INVALID_CHILD_GPA_PAGE_SET = 3224829986;
export const ERROR_VID_RESERVE_PAGE_SET_IS_BEING_USED = 3224829987;
export const ERROR_VID_RESERVE_PAGE_SET_TOO_SMALL = 3224829988;
export const ERROR_VID_MBP_ALREADY_LOCKED_USING_RESERVED_PAGE = 3224829989;
export const ERROR_VID_MBP_COUNT_EXCEEDED_LIMIT = 3224829990;
export const ERROR_VID_SAVED_STATE_CORRUPT = 3224829991;
export const ERROR_VID_SAVED_STATE_UNRECOGNIZED_ITEM = 3224829992;
export const ERROR_VID_SAVED_STATE_INCOMPATIBLE = 3224829993;
export const ERROR_VID_VTL_ACCESS_DENIED = 3224829994;
export const ERROR_VMCOMPUTE_TERMINATED_DURING_START = 3224830208;
export const ERROR_VMCOMPUTE_IMAGE_MISMATCH = 3224830209;
export const ERROR_VMCOMPUTE_HYPERV_NOT_INSTALLED = 3224830210;
export const ERROR_VMCOMPUTE_OPERATION_PENDING = 3224830211;
export const ERROR_VMCOMPUTE_TOO_MANY_NOTIFICATIONS = 3224830212;
export const ERROR_VMCOMPUTE_INVALID_STATE = 3224830213;
export const ERROR_VMCOMPUTE_UNEXPECTED_EXIT = 3224830214;
export const ERROR_VMCOMPUTE_TERMINATED = 3224830215;
export const ERROR_VMCOMPUTE_CONNECT_FAILED = 3224830216;
export const ERROR_VMCOMPUTE_TIMEOUT = 3224830217;
export const ERROR_VMCOMPUTE_CONNECTION_CLOSED = 3224830218;
export const ERROR_VMCOMPUTE_UNKNOWN_MESSAGE = 3224830219;
export const ERROR_VMCOMPUTE_UNSUPPORTED_PROTOCOL_VERSION = 3224830220;
export const ERROR_VMCOMPUTE_INVALID_JSON = 3224830221;
export const ERROR_VMCOMPUTE_SYSTEM_NOT_FOUND = 3224830222;
export const ERROR_VMCOMPUTE_SYSTEM_ALREADY_EXISTS = 3224830223;
export const ERROR_VMCOMPUTE_SYSTEM_ALREADY_STOPPED = 3224830224;
export const ERROR_VMCOMPUTE_PROTOCOL_ERROR = 3224830225;
export const ERROR_VMCOMPUTE_INVALID_LAYER = 3224830226;
export const ERROR_VMCOMPUTE_WINDOWS_INSIDER_REQUIRED = 3224830227;
export const ERROR_VNET_VIRTUAL_SWITCH_NAME_NOT_FOUND = 3224830464;
export const ERROR_VID_REMOTE_NODE_PARENT_GPA_PAGES_USED = 2151088129;
export const ERROR_VSMB_SAVED_STATE_FILE_NOT_FOUND = 3224830976;
export const ERROR_VSMB_SAVED_STATE_CORRUPT = 3224830977;
export const ERROR_VOLMGR_INCOMPLETE_REGENERATION = 2151153665;
export const ERROR_VOLMGR_INCOMPLETE_DISK_MIGRATION = 2151153666;
export const ERROR_VOLMGR_DATABASE_FULL = 3224895489;
export const ERROR_VOLMGR_DISK_CONFIGURATION_CORRUPTED = 3224895490;
export const ERROR_VOLMGR_DISK_CONFIGURATION_NOT_IN_SYNC = 3224895491;
export const ERROR_VOLMGR_PACK_CONFIG_UPDATE_FAILED = 3224895492;
export const ERROR_VOLMGR_DISK_CONTAINS_NON_SIMPLE_VOLUME = 3224895493;
export const ERROR_VOLMGR_DISK_DUPLICATE = 3224895494;
export const ERROR_VOLMGR_DISK_DYNAMIC = 3224895495;
export const ERROR_VOLMGR_DISK_ID_INVALID = 3224895496;
export const ERROR_VOLMGR_DISK_INVALID = 3224895497;
export const ERROR_VOLMGR_DISK_LAST_VOTER = 3224895498;
export const ERROR_VOLMGR_DISK_LAYOUT_INVALID = 3224895499;
export const ERROR_VOLMGR_DISK_LAYOUT_NON_BASIC_BETWEEN_BASIC_PARTITIONS = 3224895500;
export const ERROR_VOLMGR_DISK_LAYOUT_NOT_CYLINDER_ALIGNED = 3224895501;
export const ERROR_VOLMGR_DISK_LAYOUT_PARTITIONS_TOO_SMALL = 3224895502;
export const ERROR_VOLMGR_DISK_LAYOUT_PRIMARY_BETWEEN_LOGICAL_PARTITIONS = 3224895503;
export const ERROR_VOLMGR_DISK_LAYOUT_TOO_MANY_PARTITIONS = 3224895504;
export const ERROR_VOLMGR_DISK_MISSING = 3224895505;
export const ERROR_VOLMGR_DISK_NOT_EMPTY = 3224895506;
export const ERROR_VOLMGR_DISK_NOT_ENOUGH_SPACE = 3224895507;
export const ERROR_VOLMGR_DISK_REVECTORING_FAILED = 3224895508;
export const ERROR_VOLMGR_DISK_SECTOR_SIZE_INVALID = 3224895509;
export const ERROR_VOLMGR_DISK_SET_NOT_CONTAINED = 3224895510;
export const ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_MEMBERS = 3224895511;
export const ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_PLEXES = 3224895512;
export const ERROR_VOLMGR_DYNAMIC_DISK_NOT_SUPPORTED = 3224895513;
export const ERROR_VOLMGR_EXTENT_ALREADY_USED = 3224895514;
export const ERROR_VOLMGR_EXTENT_NOT_CONTIGUOUS = 3224895515;
export const ERROR_VOLMGR_EXTENT_NOT_IN_PUBLIC_REGION = 3224895516;
export const ERROR_VOLMGR_EXTENT_NOT_SECTOR_ALIGNED = 3224895517;
export const ERROR_VOLMGR_EXTENT_OVERLAPS_EBR_PARTITION = 3224895518;
export const ERROR_VOLMGR_EXTENT_VOLUME_LENGTHS_DO_NOT_MATCH = 3224895519;
export const ERROR_VOLMGR_FAULT_TOLERANT_NOT_SUPPORTED = 3224895520;
export const ERROR_VOLMGR_INTERLEAVE_LENGTH_INVALID = 3224895521;
export const ERROR_VOLMGR_MAXIMUM_REGISTERED_USERS = 3224895522;
export const ERROR_VOLMGR_MEMBER_IN_SYNC = 3224895523;
export const ERROR_VOLMGR_MEMBER_INDEX_DUPLICATE = 3224895524;
export const ERROR_VOLMGR_MEMBER_INDEX_INVALID = 3224895525;
export const ERROR_VOLMGR_MEMBER_MISSING = 3224895526;
export const ERROR_VOLMGR_MEMBER_NOT_DETACHED = 3224895527;
export const ERROR_VOLMGR_MEMBER_REGENERATING = 3224895528;
export const ERROR_VOLMGR_ALL_DISKS_FAILED = 3224895529;
export const ERROR_VOLMGR_NO_REGISTERED_USERS = 3224895530;
export const ERROR_VOLMGR_NO_SUCH_USER = 3224895531;
export const ERROR_VOLMGR_NOTIFICATION_RESET = 3224895532;
export const ERROR_VOLMGR_NUMBER_OF_MEMBERS_INVALID = 3224895533;
export const ERROR_VOLMGR_NUMBER_OF_PLEXES_INVALID = 3224895534;
export const ERROR_VOLMGR_PACK_DUPLICATE = 3224895535;
export const ERROR_VOLMGR_PACK_ID_INVALID = 3224895536;
export const ERROR_VOLMGR_PACK_INVALID = 3224895537;
export const ERROR_VOLMGR_PACK_NAME_INVALID = 3224895538;
export const ERROR_VOLMGR_PACK_OFFLINE = 3224895539;
export const ERROR_VOLMGR_PACK_HAS_QUORUM = 3224895540;
export const ERROR_VOLMGR_PACK_WITHOUT_QUORUM = 3224895541;
export const ERROR_VOLMGR_PARTITION_STYLE_INVALID = 3224895542;
export const ERROR_VOLMGR_PARTITION_UPDATE_FAILED = 3224895543;
export const ERROR_VOLMGR_PLEX_IN_SYNC = 3224895544;
export const ERROR_VOLMGR_PLEX_INDEX_DUPLICATE = 3224895545;
export const ERROR_VOLMGR_PLEX_INDEX_INVALID = 3224895546;
export const ERROR_VOLMGR_PLEX_LAST_ACTIVE = 3224895547;
export const ERROR_VOLMGR_PLEX_MISSING = 3224895548;
export const ERROR_VOLMGR_PLEX_REGENERATING = 3224895549;
export const ERROR_VOLMGR_PLEX_TYPE_INVALID = 3224895550;
export const ERROR_VOLMGR_PLEX_NOT_RAID5 = 3224895551;
export const ERROR_VOLMGR_PLEX_NOT_SIMPLE = 3224895552;
export const ERROR_VOLMGR_STRUCTURE_SIZE_INVALID = 3224895553;
export const ERROR_VOLMGR_TOO_MANY_NOTIFICATION_REQUESTS = 3224895554;
export const ERROR_VOLMGR_TRANSACTION_IN_PROGRESS = 3224895555;
export const ERROR_VOLMGR_UNEXPECTED_DISK_LAYOUT_CHANGE = 3224895556;
export const ERROR_VOLMGR_VOLUME_CONTAINS_MISSING_DISK = 3224895557;
export const ERROR_VOLMGR_VOLUME_ID_INVALID = 3224895558;
export const ERROR_VOLMGR_VOLUME_LENGTH_INVALID = 3224895559;
export const ERROR_VOLMGR_VOLUME_LENGTH_NOT_SECTOR_SIZE_MULTIPLE = 3224895560;
export const ERROR_VOLMGR_VOLUME_NOT_MIRRORED = 3224895561;
export const ERROR_VOLMGR_VOLUME_NOT_RETAINED = 3224895562;
export const ERROR_VOLMGR_VOLUME_OFFLINE = 3224895563;
export const ERROR_VOLMGR_VOLUME_RETAINED = 3224895564;
export const ERROR_VOLMGR_NUMBER_OF_EXTENTS_INVALID = 3224895565;
export const ERROR_VOLMGR_DIFFERENT_SECTOR_SIZE = 3224895566;
export const ERROR_VOLMGR_BAD_BOOT_DISK = 3224895567;
export const ERROR_VOLMGR_PACK_CONFIG_OFFLINE = 3224895568;
export const ERROR_VOLMGR_PACK_CONFIG_ONLINE = 3224895569;
export const ERROR_VOLMGR_NOT_PRIMARY_PACK = 3224895570;
export const ERROR_VOLMGR_PACK_LOG_UPDATE_FAILED = 3224895571;
export const ERROR_VOLMGR_NUMBER_OF_DISKS_IN_PLEX_INVALID = 3224895572;
export const ERROR_VOLMGR_NUMBER_OF_DISKS_IN_MEMBER_INVALID = 3224895573;
export const ERROR_VOLMGR_VOLUME_MIRRORED = 3224895574;
export const ERROR_VOLMGR_PLEX_NOT_SIMPLE_SPANNED = 3224895575;
export const ERROR_VOLMGR_NO_VALID_LOG_COPIES = 3224895576;
export const ERROR_VOLMGR_PRIMARY_PACK_PRESENT = 3224895577;
export const ERROR_VOLMGR_NUMBER_OF_DISKS_INVALID = 3224895578;
export const ERROR_VOLMGR_MIRROR_NOT_SUPPORTED = 3224895579;
export const ERROR_VOLMGR_RAID5_NOT_SUPPORTED = 3224895580;
export const ERROR_BCD_NOT_ALL_ENTRIES_IMPORTED = 2151219201;
export const ERROR_BCD_TOO_MANY_ELEMENTS = 3224961026;
export const ERROR_BCD_NOT_ALL_ENTRIES_SYNCHRONIZED = 2151219203;
export const ERROR_VHD_DRIVE_FOOTER_MISSING = 3225026561;
export const ERROR_VHD_DRIVE_FOOTER_CHECKSUM_MISMATCH = 3225026562;
export const ERROR_VHD_DRIVE_FOOTER_CORRUPT = 3225026563;
export const ERROR_VHD_FORMAT_UNKNOWN = 3225026564;
export const ERROR_VHD_FORMAT_UNSUPPORTED_VERSION = 3225026565;
export const ERROR_VHD_SPARSE_HEADER_CHECKSUM_MISMATCH = 3225026566;
export const ERROR_VHD_SPARSE_HEADER_UNSUPPORTED_VERSION = 3225026567;
export const ERROR_VHD_SPARSE_HEADER_CORRUPT = 3225026568;
export const ERROR_VHD_BLOCK_ALLOCATION_FAILURE = 3225026569;
export const ERROR_VHD_BLOCK_ALLOCATION_TABLE_CORRUPT = 3225026570;
export const ERROR_VHD_INVALID_BLOCK_SIZE = 3225026571;
export const ERROR_VHD_BITMAP_MISMATCH = 3225026572;
export const ERROR_VHD_PARENT_VHD_NOT_FOUND = 3225026573;
export const ERROR_VHD_CHILD_PARENT_ID_MISMATCH = 3225026574;
export const ERROR_VHD_CHILD_PARENT_TIMESTAMP_MISMATCH = 3225026575;
export const ERROR_VHD_METADATA_READ_FAILURE = 3225026576;
export const ERROR_VHD_METADATA_WRITE_FAILURE = 3225026577;
export const ERROR_VHD_INVALID_SIZE = 3225026578;
export const ERROR_VHD_INVALID_FILE_SIZE = 3225026579;
export const ERROR_VIRTDISK_PROVIDER_NOT_FOUND = 3225026580;
export const ERROR_VIRTDISK_NOT_VIRTUAL_DISK = 3225026581;
export const ERROR_VHD_PARENT_VHD_ACCESS_DENIED = 3225026582;
export const ERROR_VHD_CHILD_PARENT_SIZE_MISMATCH = 3225026583;
export const ERROR_VHD_DIFFERENCING_CHAIN_CYCLE_DETECTED = 3225026584;
export const ERROR_VHD_DIFFERENCING_CHAIN_ERROR_IN_PARENT = 3225026585;
export const ERROR_VIRTUAL_DISK_LIMITATION = 3225026586;
export const ERROR_VHD_INVALID_TYPE = 3225026587;
export const ERROR_VHD_INVALID_STATE = 3225026588;
export const ERROR_VIRTDISK_UNSUPPORTED_DISK_SECTOR_SIZE = 3225026589;
export const ERROR_VIRTDISK_DISK_ALREADY_OWNED = 3225026590;
export const ERROR_VIRTDISK_DISK_ONLINE_AND_WRITABLE = 3225026591;
export const ERROR_CTLOG_TRACKING_NOT_INITIALIZED = 3225026592;
export const ERROR_CTLOG_LOGFILE_SIZE_EXCEEDED_MAXSIZE = 3225026593;
export const ERROR_CTLOG_VHD_CHANGED_OFFLINE = 3225026594;
export const ERROR_CTLOG_INVALID_TRACKING_STATE = 3225026595;
export const ERROR_CTLOG_INCONSISTENT_TRACKING_FILE = 3225026596;
export const ERROR_VHD_RESIZE_WOULD_TRUNCATE_DATA = 3225026597;
export const ERROR_VHD_COULD_NOT_COMPUTE_MINIMUM_VIRTUAL_SIZE = 3225026598;
export const ERROR_VHD_ALREADY_AT_OR_BELOW_MINIMUM_VIRTUAL_SIZE = 3225026599;
export const ERROR_VHD_METADATA_FULL = 3225026600;
export const ERROR_VHD_INVALID_CHANGE_TRACKING_ID = 3225026601;
export const ERROR_VHD_CHANGE_TRACKING_DISABLED = 3225026602;
export const ERROR_VHD_MISSING_CHANGE_TRACKING_INFORMATION = 3225026608;
export const ERROR_QUERY_STORAGE_ERROR = 2151284737;
export const TOKEN_DELETE = 65536;
export const TOKEN_READ_CONTROL = 131072;
export const TOKEN_WRITE_DAC = 262144;
export const TOKEN_WRITE_OWNER = 524288;
export const TOKEN_ACCESS_SYSTEM_SECURITY = 16777216;
export const TOKEN_ASSIGN_PRIMARY = 1;
export const TOKEN_DUPLICATE = 2;
export const TOKEN_IMPERSONATE = 4;
export const TOKEN_QUERY = 8;
export const TOKEN_QUERY_SOURCE = 16;
export const TOKEN_ADJUST_PRIVILEGES = 32;
export const TOKEN_ADJUST_GROUPS = 64;
export const TOKEN_ADJUST_DEFAULT = 128;
export const TOKEN_ADJUST_SESSIONID = 256;
export const TOKEN_READ = 131080;
export const TOKEN_WRITE = 131296;
export const TOKEN_EXECUTE = 131072;
export const TOKEN_TRUST_CONSTRAINT_MASK = 131096;
export const TOKEN_ACCESS_PSEUDO_HANDLE_WIN8 = 24;
export const TOKEN_ACCESS_PSEUDO_HANDLE = 24;
export const TOKEN_ALL_ACCESS = 983295;

// Structs

export type TimerQueueHandle = Deno.PointerValue;

export type PTP_POOL = Deno.PointerValue;

export type NamespaceHandle = Deno.PointerValue;

export type BoundaryDescriptorHandle = Deno.PointerValue;

export type LPPROC_THREAD_ATTRIBUTE_LIST = Deno.PointerValue | Uint8Array | null;

export type HINSTANCE = Deno.PointerValue;

/**
 * _Detailed_e__Struct (size: 24)
 */
export interface _Detailed_e__Struct {
  /** Windows.Win32.Foundation.HINSTANCE */
  LocalizedReasonModule: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  LocalizedReasonId: number;
  /** u32 */
  ReasonStringCount: number;
  /** ptr */
  ReasonStrings: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_Detailed_e__Struct = 24;

export function alloc_Detailed_e__Struct(data?: Partial<_Detailed_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Detailed_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LocalizedReasonModule !== undefined) view.setBigUint64(0, data.LocalizedReasonModule === null ? 0n : BigInt(util.toPointer(data.LocalizedReasonModule)), true);
  // 0x08: u32
  if (data?.LocalizedReasonId !== undefined) view.setUint32(8, Number(data.LocalizedReasonId), true);
  // 0x0c: u32
  if (data?.ReasonStringCount !== undefined) view.setUint32(12, Number(data.ReasonStringCount), true);
  // 0x10: pointer
  if (data?.ReasonStrings !== undefined) view.setBigUint64(16, data.ReasonStrings === null ? 0n : BigInt(util.toPointer(data.ReasonStrings)), true);
  return buf;
}

export class _Detailed_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get LocalizedReasonModule(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get LocalizedReasonId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ReasonStringCount(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get ReasonStrings(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set LocalizedReasonModule(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set LocalizedReasonId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ReasonStringCount(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set ReasonStrings(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * _Reason_e__Union (size: 16)
 */
export interface _Reason_e__Union {
  /** _Detailed_e__Struct */
  Detailed: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  SimpleReasonString: string | null | Uint8Array | Uint16Array;
}

export const sizeof_Reason_e__Union = 16;

export function alloc_Reason_e__Union(data?: Partial<_Reason_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Reason_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Detailed !== undefined) view.setBigUint64(0, data.Detailed === null ? 0n : BigInt(util.toPointer(data.Detailed)), true);
  // 0x08: buffer
  if (data?.SimpleReasonString !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.SimpleReasonString);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class _Reason_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Detailed(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get SimpleReasonString(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Detailed(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: buffer
  set SimpleReasonString(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.System.Threading.REASON_CONTEXT (size: 16)
 */
export interface REASON_CONTEXT {
  /** u32 */
  Version: number;
  /** Windows.Win32.System.Threading.POWER_REQUEST_CONTEXT_FLAGS */
  Flags: POWER_REQUEST_CONTEXT_FLAGS;
  /** _Reason_e__Union */
  Reason: Uint8Array | Deno.PointerValue | null;
}

export const sizeofREASON_CONTEXT = 16;

export function allocREASON_CONTEXT(data?: Partial<REASON_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofREASON_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.Reason !== undefined) view.setBigUint64(8, data.Reason === null ? 0n : BigInt(util.toPointer(data.Reason)), true);
  return buf;
}

export class REASON_CONTEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Reason(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Reason(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.System.Threading.PROCESS_INFORMATION (size: 24)
 */
export interface PROCESS_INFORMATION {
  /** Windows.Win32.Foundation.HANDLE */
  hProcess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwProcessId: number;
  /** u32 */
  dwThreadId: number;
}

export const sizeofPROCESS_INFORMATION = 24;

export function allocPROCESS_INFORMATION(data?: Partial<PROCESS_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hProcess !== undefined) view.setBigUint64(0, data.hProcess === null ? 0n : BigInt(util.toPointer(data.hProcess)), true);
  // 0x08: pointer
  if (data?.hThread !== undefined) view.setBigUint64(8, data.hThread === null ? 0n : BigInt(util.toPointer(data.hThread)), true);
  // 0x10: u32
  if (data?.dwProcessId !== undefined) view.setUint32(16, Number(data.dwProcessId), true);
  // 0x14: u32
  if (data?.dwThreadId !== undefined) view.setUint32(20, Number(data.dwThreadId), true);
  return buf;
}

export class PROCESS_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hProcess(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get hThread(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwProcessId(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwThreadId(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: pointer
  set hProcess(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set hThread(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwProcessId(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwThreadId(value: number) {
    this.view.setUint32(20, value, true);
  }
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.System.Threading.STARTUPINFOA (size: 104)
 */
export interface STARTUPINFOA {
  /** u32 */
  cb: number;
  /** Windows.Win32.Foundation.PSTR */
  lpReserved: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpDesktop: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpTitle: string | null | Uint8Array;
  /** u32 */
  dwX: number;
  /** u32 */
  dwY: number;
  /** u32 */
  dwXSize: number;
  /** u32 */
  dwYSize: number;
  /** u32 */
  dwXCountChars: number;
  /** u32 */
  dwYCountChars: number;
  /** u32 */
  dwFillAttribute: number;
  /** Windows.Win32.System.Threading.STARTUPINFOW_FLAGS */
  dwFlags: STARTUPINFOW_FLAGS;
  /** u16 */
  wShowWindow: number;
  /** u16 */
  cbReserved2: number;
  /** ptr */
  lpReserved2: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.HANDLE */
  hStdInput: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hStdOutput: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hStdError: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSTARTUPINFOA = 104;

export function allocSTARTUPINFOA(data?: Partial<STARTUPINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofSTARTUPINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cb !== undefined) view.setUint32(0, Number(data.cb), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpReserved !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpReserved);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.lpDesktop !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpDesktop);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpTitle !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpTitle);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.dwX !== undefined) view.setUint32(32, Number(data.dwX), true);
  // 0x24: u32
  if (data?.dwY !== undefined) view.setUint32(36, Number(data.dwY), true);
  // 0x28: u32
  if (data?.dwXSize !== undefined) view.setUint32(40, Number(data.dwXSize), true);
  // 0x2c: u32
  if (data?.dwYSize !== undefined) view.setUint32(44, Number(data.dwYSize), true);
  // 0x30: u32
  if (data?.dwXCountChars !== undefined) view.setUint32(48, Number(data.dwXCountChars), true);
  // 0x34: u32
  if (data?.dwYCountChars !== undefined) view.setUint32(52, Number(data.dwYCountChars), true);
  // 0x38: u32
  if (data?.dwFillAttribute !== undefined) view.setUint32(56, Number(data.dwFillAttribute), true);
  // 0x3c: u32
  if (data?.dwFlags !== undefined) view.setUint32(60, Number(data.dwFlags), true);
  // 0x40: u16
  if (data?.wShowWindow !== undefined) view.setUint16(64, Number(data.wShowWindow), true);
  // 0x42: u16
  if (data?.cbReserved2 !== undefined) view.setUint16(66, Number(data.cbReserved2), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.lpReserved2 !== undefined) view.setBigUint64(72, data.lpReserved2 === null ? 0n : BigInt(util.toPointer(data.lpReserved2)), true);
  // 0x50: pointer
  if (data?.hStdInput !== undefined) view.setBigUint64(80, data.hStdInput === null ? 0n : BigInt(util.toPointer(data.hStdInput)), true);
  // 0x58: pointer
  if (data?.hStdOutput !== undefined) view.setBigUint64(88, data.hStdOutput === null ? 0n : BigInt(util.toPointer(data.hStdOutput)), true);
  // 0x60: pointer
  if (data?.hStdError !== undefined) view.setBigUint64(96, data.hStdError === null ? 0n : BigInt(util.toPointer(data.hStdError)), true);
  return buf;
}

export class STARTUPINFOAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cb(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get lpReserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get lpDesktop(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get lpTitle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get dwX(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwY(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get dwXSize(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwYSize(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get dwXCountChars(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwYCountChars(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get dwFillAttribute(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwFlags(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u16
  get wShowWindow(): number {
    return this.view.getUint16(64, true);
  }

  // 0x42: u16
  get cbReserved2(): number {
    return this.view.getUint16(66, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  get lpReserved2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get hStdInput(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get hStdOutput(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: pointer
  get hStdError(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cb(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set lpReserved(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set lpDesktop(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: buffer
  set lpTitle(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: u32
  set dwX(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwY(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set dwXSize(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwYSize(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set dwXCountChars(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwYCountChars(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set dwFillAttribute(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwFlags(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u16
  set wShowWindow(value: number) {
    this.view.setUint16(64, value, true);
  }

  // 0x42: u16
  set cbReserved2(value: number) {
    this.view.setUint16(66, value, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  set lpReserved2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set hStdInput(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set hStdOutput(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, BigInt(util.toPointer(value)), true);
  }

  // 0x60: pointer
  set hStdError(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Threading.STARTUPINFOW (size: 104)
 */
export interface STARTUPINFOW {
  /** u32 */
  cb: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpReserved: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpDesktop: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpTitle: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwX: number;
  /** u32 */
  dwY: number;
  /** u32 */
  dwXSize: number;
  /** u32 */
  dwYSize: number;
  /** u32 */
  dwXCountChars: number;
  /** u32 */
  dwYCountChars: number;
  /** u32 */
  dwFillAttribute: number;
  /** Windows.Win32.System.Threading.STARTUPINFOW_FLAGS */
  dwFlags: STARTUPINFOW_FLAGS;
  /** u16 */
  wShowWindow: number;
  /** u16 */
  cbReserved2: number;
  /** ptr */
  lpReserved2: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.HANDLE */
  hStdInput: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hStdOutput: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hStdError: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSTARTUPINFOW = 104;

export function allocSTARTUPINFOW(data?: Partial<STARTUPINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofSTARTUPINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cb !== undefined) view.setUint32(0, Number(data.cb), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpReserved !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpReserved);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.lpDesktop !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpDesktop);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpTitle !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpTitle);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.dwX !== undefined) view.setUint32(32, Number(data.dwX), true);
  // 0x24: u32
  if (data?.dwY !== undefined) view.setUint32(36, Number(data.dwY), true);
  // 0x28: u32
  if (data?.dwXSize !== undefined) view.setUint32(40, Number(data.dwXSize), true);
  // 0x2c: u32
  if (data?.dwYSize !== undefined) view.setUint32(44, Number(data.dwYSize), true);
  // 0x30: u32
  if (data?.dwXCountChars !== undefined) view.setUint32(48, Number(data.dwXCountChars), true);
  // 0x34: u32
  if (data?.dwYCountChars !== undefined) view.setUint32(52, Number(data.dwYCountChars), true);
  // 0x38: u32
  if (data?.dwFillAttribute !== undefined) view.setUint32(56, Number(data.dwFillAttribute), true);
  // 0x3c: u32
  if (data?.dwFlags !== undefined) view.setUint32(60, Number(data.dwFlags), true);
  // 0x40: u16
  if (data?.wShowWindow !== undefined) view.setUint16(64, Number(data.wShowWindow), true);
  // 0x42: u16
  if (data?.cbReserved2 !== undefined) view.setUint16(66, Number(data.cbReserved2), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.lpReserved2 !== undefined) view.setBigUint64(72, data.lpReserved2 === null ? 0n : BigInt(util.toPointer(data.lpReserved2)), true);
  // 0x50: pointer
  if (data?.hStdInput !== undefined) view.setBigUint64(80, data.hStdInput === null ? 0n : BigInt(util.toPointer(data.hStdInput)), true);
  // 0x58: pointer
  if (data?.hStdOutput !== undefined) view.setBigUint64(88, data.hStdOutput === null ? 0n : BigInt(util.toPointer(data.hStdOutput)), true);
  // 0x60: pointer
  if (data?.hStdError !== undefined) view.setBigUint64(96, data.hStdError === null ? 0n : BigInt(util.toPointer(data.hStdError)), true);
  return buf;
}

export class STARTUPINFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cb(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get lpReserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get lpDesktop(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get lpTitle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get dwX(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwY(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get dwXSize(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwYSize(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get dwXCountChars(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwYCountChars(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get dwFillAttribute(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwFlags(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u16
  get wShowWindow(): number {
    return this.view.getUint16(64, true);
  }

  // 0x42: u16
  get cbReserved2(): number {
    return this.view.getUint16(66, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  get lpReserved2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get hStdInput(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get hStdOutput(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: pointer
  get hStdError(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cb(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set lpReserved(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set lpDesktop(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: buffer
  set lpTitle(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: u32
  set dwX(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwY(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set dwXSize(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwYSize(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set dwXCountChars(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwYCountChars(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set dwFillAttribute(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwFlags(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u16
  set wShowWindow(value: number) {
    this.view.setUint16(64, value, true);
  }

  // 0x42: u16
  set cbReserved2(value: number) {
    this.view.setUint16(66, value, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  set lpReserved2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set hStdInput(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set hStdOutput(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, BigInt(util.toPointer(value)), true);
  }

  // 0x60: pointer
  set hStdError(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Threading.MEMORY_PRIORITY_INFORMATION (size: 8)
 */
export interface MEMORY_PRIORITY_INFORMATION {
  /** Windows.Win32.System.Threading.MEMORY_PRIORITY */
  MemoryPriority: MEMORY_PRIORITY;
}

export const sizeofMEMORY_PRIORITY_INFORMATION = 8;

export function allocMEMORY_PRIORITY_INFORMATION(data?: Partial<MEMORY_PRIORITY_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofMEMORY_PRIORITY_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MemoryPriority !== undefined) view.setUint32(0, Number(data.MemoryPriority), true);
  // 0x04: pad4
  return buf;
}

export class MEMORY_PRIORITY_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MemoryPriority(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set MemoryPriority(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Threading.THREAD_POWER_THROTTLING_STATE (size: 16)
 */
export interface THREAD_POWER_THROTTLING_STATE {
  /** u32 */
  Version: number;
  /** u32 */
  ControlMask: number;
  /** u32 */
  StateMask: number;
}

export const sizeofTHREAD_POWER_THROTTLING_STATE = 16;

export function allocTHREAD_POWER_THROTTLING_STATE(data?: Partial<THREAD_POWER_THROTTLING_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofTHREAD_POWER_THROTTLING_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.ControlMask !== undefined) view.setUint32(4, Number(data.ControlMask), true);
  // 0x08: u32
  if (data?.StateMask !== undefined) view.setUint32(8, Number(data.StateMask), true);
  // 0x0c: pad4
  return buf;
}

export class THREAD_POWER_THROTTLING_STATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ControlMask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get StateMask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ControlMask(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set StateMask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Threading.APP_MEMORY_INFORMATION (size: 32)
 */
export interface APP_MEMORY_INFORMATION {
  /** u64 */
  AvailableCommit: Deno.PointerValue;
  /** u64 */
  PrivateCommitUsage: Deno.PointerValue;
  /** u64 */
  PeakPrivateCommitUsage: Deno.PointerValue;
  /** u64 */
  TotalCommitUsage: Deno.PointerValue;
}

export const sizeofAPP_MEMORY_INFORMATION = 32;

export function allocAPP_MEMORY_INFORMATION(data?: Partial<APP_MEMORY_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofAPP_MEMORY_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.AvailableCommit !== undefined) view.setBigUint64(0, BigInt(data.AvailableCommit), true);
  // 0x08: u64
  if (data?.PrivateCommitUsage !== undefined) view.setBigUint64(8, BigInt(data.PrivateCommitUsage), true);
  // 0x10: u64
  if (data?.PeakPrivateCommitUsage !== undefined) view.setBigUint64(16, BigInt(data.PeakPrivateCommitUsage), true);
  // 0x18: u64
  if (data?.TotalCommitUsage !== undefined) view.setBigUint64(24, BigInt(data.TotalCommitUsage), true);
  return buf;
}

export class APP_MEMORY_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get AvailableCommit(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get PrivateCommitUsage(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get PeakPrivateCommitUsage(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u64
  get TotalCommitUsage(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x00: u64
  set AvailableCommit(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set PrivateCommitUsage(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set PeakPrivateCommitUsage(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u64
  set TotalCommitUsage(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Threading.PROCESS_MACHINE_INFORMATION (size: 8)
 */
export interface PROCESS_MACHINE_INFORMATION {
  /** Windows.Win32.System.SystemInformation.IMAGE_FILE_MACHINE */
  ProcessMachine: IMAGE_FILE_MACHINE;
  /** u16 */
  Res0: number;
  /** Windows.Win32.System.Threading.MACHINE_ATTRIBUTES */
  MachineAttributes: MACHINE_ATTRIBUTES;
}

export const sizeofPROCESS_MACHINE_INFORMATION = 8;

export function allocPROCESS_MACHINE_INFORMATION(data?: Partial<PROCESS_MACHINE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_MACHINE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ProcessMachine !== undefined) view.setUint16(0, Number(data.ProcessMachine), true);
  // 0x02: u16
  if (data?.Res0 !== undefined) view.setUint16(2, Number(data.Res0), true);
  // 0x04: u32
  if (data?.MachineAttributes !== undefined) view.setUint32(4, Number(data.MachineAttributes), true);
  return buf;
}

export class PROCESS_MACHINE_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get ProcessMachine(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Res0(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get MachineAttributes(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u16
  set ProcessMachine(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Res0(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set MachineAttributes(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Threading.PROCESS_MEMORY_EXHAUSTION_INFO (size: 16)
 */
export interface PROCESS_MEMORY_EXHAUSTION_INFO {
  /** u16 */
  Version: number;
  /** u16 */
  Reserved: number;
  /** Windows.Win32.System.Threading.PROCESS_MEMORY_EXHAUSTION_TYPE */
  Type: PROCESS_MEMORY_EXHAUSTION_TYPE;
  /** usize */
  Value: Deno.PointerValue;
}

export const sizeofPROCESS_MEMORY_EXHAUSTION_INFO = 16;

export function allocPROCESS_MEMORY_EXHAUSTION_INFO(data?: Partial<PROCESS_MEMORY_EXHAUSTION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_MEMORY_EXHAUSTION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Version !== undefined) view.setUint16(0, Number(data.Version), true);
  // 0x02: u16
  if (data?.Reserved !== undefined) view.setUint16(2, Number(data.Reserved), true);
  // 0x04: i32
  if (data?.Type !== undefined) view.setInt32(4, Number(data.Type), true);
  // 0x08: usize
  if (data?.Value !== undefined) view.setBigUint64(8, BigInt(data.Value), true);
  return buf;
}

export class PROCESS_MEMORY_EXHAUSTION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Version(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Reserved(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: i32
  get Type(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: usize
  get Value(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u16
  set Version(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Reserved(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: i32
  set Type(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: usize
  set Value(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Threading.PROCESS_POWER_THROTTLING_STATE (size: 16)
 */
export interface PROCESS_POWER_THROTTLING_STATE {
  /** u32 */
  Version: number;
  /** u32 */
  ControlMask: number;
  /** u32 */
  StateMask: number;
}

export const sizeofPROCESS_POWER_THROTTLING_STATE = 16;

export function allocPROCESS_POWER_THROTTLING_STATE(data?: Partial<PROCESS_POWER_THROTTLING_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_POWER_THROTTLING_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.ControlMask !== undefined) view.setUint32(4, Number(data.ControlMask), true);
  // 0x08: u32
  if (data?.StateMask !== undefined) view.setUint32(8, Number(data.StateMask), true);
  // 0x0c: pad4
  return buf;
}

export class PROCESS_POWER_THROTTLING_STATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ControlMask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get StateMask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ControlMask(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set StateMask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Threading.PROCESS_PROTECTION_LEVEL_INFORMATION (size: 8)
 */
export interface PROCESS_PROTECTION_LEVEL_INFORMATION {
  /** Windows.Win32.System.Threading.PROCESS_PROTECTION_LEVEL */
  ProtectionLevel: PROCESS_PROTECTION_LEVEL;
}

export const sizeofPROCESS_PROTECTION_LEVEL_INFORMATION = 8;

export function allocPROCESS_PROTECTION_LEVEL_INFORMATION(data?: Partial<PROCESS_PROTECTION_LEVEL_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_PROTECTION_LEVEL_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ProtectionLevel !== undefined) view.setUint32(0, Number(data.ProtectionLevel), true);
  // 0x04: pad4
  return buf;
}

export class PROCESS_PROTECTION_LEVEL_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ProtectionLevel(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set ProtectionLevel(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Threading.PROCESS_LEAP_SECOND_INFO (size: 8)
 */
export interface PROCESS_LEAP_SECOND_INFO {
  /** u32 */
  Flags: number;
  /** u32 */
  Reserved: number;
}

export const sizeofPROCESS_LEAP_SECOND_INFO = 8;

export function allocPROCESS_LEAP_SECOND_INFO(data?: Partial<PROCESS_LEAP_SECOND_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_LEAP_SECOND_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  return buf;
}

export class PROCESS_LEAP_SECOND_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Reserved(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Reserved(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Threading.PROCESS_DYNAMIC_EH_CONTINUATION_TARGET (size: 16)
 */
export interface PROCESS_DYNAMIC_EH_CONTINUATION_TARGET {
  /** usize */
  TargetAddress: Deno.PointerValue;
  /** usize */
  Flags: Deno.PointerValue;
}

export const sizeofPROCESS_DYNAMIC_EH_CONTINUATION_TARGET = 16;

export function allocPROCESS_DYNAMIC_EH_CONTINUATION_TARGET(data?: Partial<PROCESS_DYNAMIC_EH_CONTINUATION_TARGET>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_DYNAMIC_EH_CONTINUATION_TARGET);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.TargetAddress !== undefined) view.setBigUint64(0, BigInt(data.TargetAddress), true);
  // 0x08: usize
  if (data?.Flags !== undefined) view.setBigUint64(8, BigInt(data.Flags), true);
  return buf;
}

export class PROCESS_DYNAMIC_EH_CONTINUATION_TARGETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get TargetAddress(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: usize
  get Flags(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: usize
  set TargetAddress(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: usize
  set Flags(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Threading.PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION (size: 16)
 */
export interface PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION {
  /** u16 */
  NumberOfTargets: number;
  /** u16 */
  Reserved: number;
  /** u32 */
  Reserved2: number;
  /** ptr */
  Targets: Deno.PointerValue | Uint8Array | null;
}

export const sizeofPROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION = 16;

export function allocPROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION(data?: Partial<PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.NumberOfTargets !== undefined) view.setUint16(0, Number(data.NumberOfTargets), true);
  // 0x02: u16
  if (data?.Reserved !== undefined) view.setUint16(2, Number(data.Reserved), true);
  // 0x04: u32
  if (data?.Reserved2 !== undefined) view.setUint32(4, Number(data.Reserved2), true);
  // 0x08: pointer
  if (data?.Targets !== undefined) view.setBigUint64(8, data.Targets === null ? 0n : BigInt(util.toPointer(data.Targets)), true);
  return buf;
}

export class PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get NumberOfTargets(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Reserved(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get Reserved2(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Targets(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set NumberOfTargets(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Reserved(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set Reserved2(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Targets(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Threading.PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE (size: 24)
 */
export interface PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE {
  /** usize */
  BaseAddress: Deno.PointerValue;
  /** usize */
  Size: Deno.PointerValue;
  /** u32 */
  Flags: number;
}

export const sizeofPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE = 24;

export function allocPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE(data?: Partial<PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.BaseAddress !== undefined) view.setBigUint64(0, BigInt(data.BaseAddress), true);
  // 0x08: usize
  if (data?.Size !== undefined) view.setBigUint64(8, BigInt(data.Size), true);
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: pad4
  return buf;
}

export class PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get BaseAddress(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: usize
  get Size(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u32
  get Flags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: usize
  set BaseAddress(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: usize
  set Size(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u32
  set Flags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.System.Threading.PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION (size: 16)
 */
export interface PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION {
  /** u16 */
  NumberOfRanges: number;
  /** u16 */
  Reserved: number;
  /** u32 */
  Reserved2: number;
  /** ptr */
  Ranges: Deno.PointerValue | Uint8Array | null;
}

export const sizeofPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION = 16;

export function allocPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION(data?: Partial<PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.NumberOfRanges !== undefined) view.setUint16(0, Number(data.NumberOfRanges), true);
  // 0x02: u16
  if (data?.Reserved !== undefined) view.setUint16(2, Number(data.Reserved), true);
  // 0x04: u32
  if (data?.Reserved2 !== undefined) view.setUint32(4, Number(data.Reserved2), true);
  // 0x08: pointer
  if (data?.Ranges !== undefined) view.setBigUint64(8, data.Ranges === null ? 0n : BigInt(util.toPointer(data.Ranges)), true);
  return buf;
}

export class PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get NumberOfRanges(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Reserved(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get Reserved2(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Ranges(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set NumberOfRanges(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Reserved(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set Reserved2(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Ranges(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Threading.IO_COUNTERS (size: 48)
 */
export interface IO_COUNTERS {
  /** u64 */
  ReadOperationCount: Deno.PointerValue;
  /** u64 */
  WriteOperationCount: Deno.PointerValue;
  /** u64 */
  OtherOperationCount: Deno.PointerValue;
  /** u64 */
  ReadTransferCount: Deno.PointerValue;
  /** u64 */
  WriteTransferCount: Deno.PointerValue;
  /** u64 */
  OtherTransferCount: Deno.PointerValue;
}

export const sizeofIO_COUNTERS = 48;

export function allocIO_COUNTERS(data?: Partial<IO_COUNTERS>): Uint8Array {
  const buf = new Uint8Array(sizeofIO_COUNTERS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.ReadOperationCount !== undefined) view.setBigUint64(0, BigInt(data.ReadOperationCount), true);
  // 0x08: u64
  if (data?.WriteOperationCount !== undefined) view.setBigUint64(8, BigInt(data.WriteOperationCount), true);
  // 0x10: u64
  if (data?.OtherOperationCount !== undefined) view.setBigUint64(16, BigInt(data.OtherOperationCount), true);
  // 0x18: u64
  if (data?.ReadTransferCount !== undefined) view.setBigUint64(24, BigInt(data.ReadTransferCount), true);
  // 0x20: u64
  if (data?.WriteTransferCount !== undefined) view.setBigUint64(32, BigInt(data.WriteTransferCount), true);
  // 0x28: u64
  if (data?.OtherTransferCount !== undefined) view.setBigUint64(40, BigInt(data.OtherTransferCount), true);
  return buf;
}

export class IO_COUNTERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get ReadOperationCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get WriteOperationCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get OtherOperationCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u64
  get ReadTransferCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u64
  get WriteTransferCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: u64
  get OtherTransferCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x00: u64
  set ReadOperationCount(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set WriteOperationCount(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set OtherOperationCount(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u64
  set ReadTransferCount(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u64
  set WriteTransferCount(value: Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: u64
  set OtherTransferCount(value: Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Threading.RTL_RUN_ONCE (size: 8)
 */
export interface RTL_RUN_ONCE {
  /** ptr */
  Ptr: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRTL_RUN_ONCE = 8;

export function allocRTL_RUN_ONCE(data?: Partial<RTL_RUN_ONCE>): Uint8Array {
  const buf = new Uint8Array(sizeofRTL_RUN_ONCE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Ptr !== undefined) view.setBigUint64(0, data.Ptr === null ? 0n : BigInt(util.toPointer(data.Ptr)), true);
  return buf;
}

export class RTL_RUN_ONCEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Ptr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Ptr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Threading.RTL_BARRIER (size: 24)
 */
export interface RTL_BARRIER {
  /** u32 */
  Reserved1: number;
  /** u32 */
  Reserved2: number;
  /** array */
  Reserved3: Deno.PointerValue | null;
  /** u32 */
  Reserved4: number;
  /** u32 */
  Reserved5: number;
}

export const sizeofRTL_BARRIER = 24;

export function allocRTL_BARRIER(data?: Partial<RTL_BARRIER>): Uint8Array {
  const buf = new Uint8Array(sizeofRTL_BARRIER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Reserved1 !== undefined) view.setUint32(0, Number(data.Reserved1), true);
  // 0x04: u32
  if (data?.Reserved2 !== undefined) view.setUint32(4, Number(data.Reserved2), true);
  // 0x08: pointer
  if (data?.Reserved3 !== undefined) view.setBigUint64(8, data.Reserved3 === null ? 0n : BigInt(util.toPointer(data.Reserved3)), true);
  // 0x10: u32
  if (data?.Reserved4 !== undefined) view.setUint32(16, Number(data.Reserved4), true);
  // 0x14: u32
  if (data?.Reserved5 !== undefined) view.setUint32(20, Number(data.Reserved5), true);
  return buf;
}

export class RTL_BARRIERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Reserved1(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Reserved2(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Reserved3(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get Reserved4(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Reserved5(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set Reserved1(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Reserved2(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Reserved3(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set Reserved4(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Reserved5(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.System.Kernel.LIST_ENTRY (size: 16)
 */
export interface LIST_ENTRY {
  /** ptr */
  Flink: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Blink: Deno.PointerValue | Uint8Array | null;
}

export const sizeofLIST_ENTRY = 16;

export function allocLIST_ENTRY(data?: Partial<LIST_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofLIST_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Flink !== undefined) view.setBigUint64(0, data.Flink === null ? 0n : BigInt(util.toPointer(data.Flink)), true);
  // 0x08: pointer
  if (data?.Blink !== undefined) view.setBigUint64(8, data.Blink === null ? 0n : BigInt(util.toPointer(data.Blink)), true);
  return buf;
}

export class LIST_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Flink(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Blink(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Flink(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Blink(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Threading.RTL_CRITICAL_SECTION_DEBUG (size: 40)
 */
export interface RTL_CRITICAL_SECTION_DEBUG {
  /** u16 */
  Type: number;
  /** u16 */
  CreatorBackTraceIndex: number;
  /** ptr */
  CriticalSection: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Kernel.LIST_ENTRY */
  ProcessLocksList: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  EntryCount: number;
  /** u32 */
  ContentionCount: number;
  /** u32 */
  Flags: number;
  /** u16 */
  CreatorBackTraceIndexHigh: number;
  /** u16 */
  SpareWORD: number;
}

export const sizeofRTL_CRITICAL_SECTION_DEBUG = 40;

export function allocRTL_CRITICAL_SECTION_DEBUG(data?: Partial<RTL_CRITICAL_SECTION_DEBUG>): Uint8Array {
  const buf = new Uint8Array(sizeofRTL_CRITICAL_SECTION_DEBUG);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Type !== undefined) view.setUint16(0, Number(data.Type), true);
  // 0x02: u16
  if (data?.CreatorBackTraceIndex !== undefined) view.setUint16(2, Number(data.CreatorBackTraceIndex), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.CriticalSection !== undefined) view.setBigUint64(8, data.CriticalSection === null ? 0n : BigInt(util.toPointer(data.CriticalSection)), true);
  // 0x10: pointer
  if (data?.ProcessLocksList !== undefined) view.setBigUint64(16, data.ProcessLocksList === null ? 0n : BigInt(util.toPointer(data.ProcessLocksList)), true);
  // 0x18: u32
  if (data?.EntryCount !== undefined) view.setUint32(24, Number(data.EntryCount), true);
  // 0x1c: u32
  if (data?.ContentionCount !== undefined) view.setUint32(28, Number(data.ContentionCount), true);
  // 0x20: u32
  if (data?.Flags !== undefined) view.setUint32(32, Number(data.Flags), true);
  // 0x24: u16
  if (data?.CreatorBackTraceIndexHigh !== undefined) view.setUint16(36, Number(data.CreatorBackTraceIndexHigh), true);
  // 0x26: u16
  if (data?.SpareWORD !== undefined) view.setUint16(38, Number(data.SpareWORD), true);
  return buf;
}

export class RTL_CRITICAL_SECTION_DEBUGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Type(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get CreatorBackTraceIndex(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get CriticalSection(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get ProcessLocksList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get EntryCount(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get ContentionCount(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get Flags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u16
  get CreatorBackTraceIndexHigh(): number {
    return this.view.getUint16(36, true);
  }

  // 0x26: u16
  get SpareWORD(): number {
    return this.view.getUint16(38, true);
  }

  // 0x00: u16
  set Type(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set CreatorBackTraceIndex(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set CriticalSection(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set ProcessLocksList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set EntryCount(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set ContentionCount(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set Flags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u16
  set CreatorBackTraceIndexHigh(value: number) {
    this.view.setUint16(36, value, true);
  }

  // 0x26: u16
  set SpareWORD(value: number) {
    this.view.setUint16(38, value, true);
  }
}

/**
 * Windows.Win32.System.Threading.RTL_CRITICAL_SECTION (size: 40)
 */
export interface RTL_CRITICAL_SECTION {
  /** ptr */
  DebugInfo: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  LockCount: number;
  /** i32 */
  RecursionCount: number;
  /** Windows.Win32.Foundation.HANDLE */
  OwningThread: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  LockSemaphore: Uint8Array | Deno.PointerValue | null;
  /** usize */
  SpinCount: Deno.PointerValue;
}

export const sizeofRTL_CRITICAL_SECTION = 40;

export function allocRTL_CRITICAL_SECTION(data?: Partial<RTL_CRITICAL_SECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofRTL_CRITICAL_SECTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DebugInfo !== undefined) view.setBigUint64(0, data.DebugInfo === null ? 0n : BigInt(util.toPointer(data.DebugInfo)), true);
  // 0x08: i32
  if (data?.LockCount !== undefined) view.setInt32(8, Number(data.LockCount), true);
  // 0x0c: i32
  if (data?.RecursionCount !== undefined) view.setInt32(12, Number(data.RecursionCount), true);
  // 0x10: pointer
  if (data?.OwningThread !== undefined) view.setBigUint64(16, data.OwningThread === null ? 0n : BigInt(util.toPointer(data.OwningThread)), true);
  // 0x18: pointer
  if (data?.LockSemaphore !== undefined) view.setBigUint64(24, data.LockSemaphore === null ? 0n : BigInt(util.toPointer(data.LockSemaphore)), true);
  // 0x20: usize
  if (data?.SpinCount !== undefined) view.setBigUint64(32, BigInt(data.SpinCount), true);
  return buf;
}

export class RTL_CRITICAL_SECTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DebugInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get LockCount(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get RecursionCount(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: pointer
  get OwningThread(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get LockSemaphore(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: usize
  get SpinCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x00: pointer
  set DebugInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: i32
  set LockCount(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set RecursionCount(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: pointer
  set OwningThread(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set LockSemaphore(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: usize
  set SpinCount(value: Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Threading.RTL_SRWLOCK (size: 8)
 */
export interface RTL_SRWLOCK {
  /** ptr */
  Ptr: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRTL_SRWLOCK = 8;

export function allocRTL_SRWLOCK(data?: Partial<RTL_SRWLOCK>): Uint8Array {
  const buf = new Uint8Array(sizeofRTL_SRWLOCK);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Ptr !== undefined) view.setBigUint64(0, data.Ptr === null ? 0n : BigInt(util.toPointer(data.Ptr)), true);
  return buf;
}

export class RTL_SRWLOCKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Ptr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Ptr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Threading.RTL_CONDITION_VARIABLE (size: 8)
 */
export interface RTL_CONDITION_VARIABLE {
  /** ptr */
  Ptr: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRTL_CONDITION_VARIABLE = 8;

export function allocRTL_CONDITION_VARIABLE(data?: Partial<RTL_CONDITION_VARIABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofRTL_CONDITION_VARIABLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Ptr !== undefined) view.setBigUint64(0, data.Ptr === null ? 0n : BigInt(util.toPointer(data.Ptr)), true);
  return buf;
}

export class RTL_CONDITION_VARIABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Ptr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Ptr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Threading.TP_POOL_STACK_INFORMATION (size: 16)
 */
export interface TP_POOL_STACK_INFORMATION {
  /** usize */
  StackReserve: Deno.PointerValue;
  /** usize */
  StackCommit: Deno.PointerValue;
}

export const sizeofTP_POOL_STACK_INFORMATION = 16;

export function allocTP_POOL_STACK_INFORMATION(data?: Partial<TP_POOL_STACK_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofTP_POOL_STACK_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.StackReserve !== undefined) view.setBigUint64(0, BigInt(data.StackReserve), true);
  // 0x08: usize
  if (data?.StackCommit !== undefined) view.setBigUint64(8, BigInt(data.StackCommit), true);
  return buf;
}

export class TP_POOL_STACK_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get StackReserve(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: usize
  get StackCommit(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: usize
  set StackReserve(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: usize
  set StackCommit(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

export type NTSTATUS = number;

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD (size: 48)
 */
export interface EXCEPTION_RECORD {
  /** Windows.Win32.Foundation.NTSTATUS */
  ExceptionCode: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ExceptionFlags: number;
  /** ptr */
  ExceptionRecord: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ExceptionAddress: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumberParameters: number;
  /** array */
  ExceptionInformation: Deno.PointerValue | null;
}

export const sizeofEXCEPTION_RECORD = 48;

export function allocEXCEPTION_RECORD(data?: Partial<EXCEPTION_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionCode !== undefined) view.setBigUint64(0, data.ExceptionCode === null ? 0n : BigInt(util.toPointer(data.ExceptionCode)), true);
  // 0x08: u32
  if (data?.ExceptionFlags !== undefined) view.setUint32(8, Number(data.ExceptionFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(16, data.ExceptionRecord === null ? 0n : BigInt(util.toPointer(data.ExceptionRecord)), true);
  // 0x18: pointer
  if (data?.ExceptionAddress !== undefined) view.setBigUint64(24, data.ExceptionAddress === null ? 0n : BigInt(util.toPointer(data.ExceptionAddress)), true);
  // 0x20: u32
  if (data?.NumberParameters !== undefined) view.setUint32(32, Number(data.NumberParameters), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ExceptionInformation !== undefined) view.setBigUint64(40, data.ExceptionInformation === null ? 0n : BigInt(util.toPointer(data.ExceptionInformation)), true);
  return buf;
}

export class EXCEPTION_RECORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ExceptionCode(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ExceptionFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ExceptionRecord(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get ExceptionAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get NumberParameters(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get ExceptionInformation(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ExceptionCode(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ExceptionFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ExceptionRecord(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set ExceptionAddress(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set NumberParameters(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set ExceptionInformation(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_DEBUG_INFO (size: 16)
 */
export interface EXCEPTION_DEBUG_INFO {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD */
  ExceptionRecord: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFirstChance: number;
}

export const sizeofEXCEPTION_DEBUG_INFO = 16;

export function allocEXCEPTION_DEBUG_INFO(data?: Partial<EXCEPTION_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(0, data.ExceptionRecord === null ? 0n : BigInt(util.toPointer(data.ExceptionRecord)), true);
  // 0x08: u32
  if (data?.dwFirstChance !== undefined) view.setUint32(8, Number(data.dwFirstChance), true);
  // 0x0c: pad4
  return buf;
}

export class EXCEPTION_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ExceptionRecord(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwFirstChance(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set ExceptionRecord(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set dwFirstChance(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.CREATE_THREAD_DEBUG_INFO (size: 24)
 */
export interface CREATE_THREAD_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpThreadLocalBase: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */
  lpStartAddress: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCREATE_THREAD_DEBUG_INFO = 24;

export function allocCREATE_THREAD_DEBUG_INFO(data?: Partial<CREATE_THREAD_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_THREAD_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hThread !== undefined) view.setBigUint64(0, data.hThread === null ? 0n : BigInt(util.toPointer(data.hThread)), true);
  // 0x08: pointer
  if (data?.lpThreadLocalBase !== undefined) view.setBigUint64(8, data.lpThreadLocalBase === null ? 0n : BigInt(util.toPointer(data.lpThreadLocalBase)), true);
  // 0x10: pointer
  if (data?.lpStartAddress !== undefined) view.setBigUint64(16, data.lpStartAddress === null ? 0n : BigInt(util.toPointer(data.lpStartAddress)), true);
  return buf;
}

export class CREATE_THREAD_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hThread(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get lpThreadLocalBase(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get lpStartAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set hThread(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set lpThreadLocalBase(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set lpStartAddress(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.CREATE_PROCESS_DEBUG_INFO (size: 72)
 */
export interface CREATE_PROCESS_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hProcess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpBaseOfImage: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwDebugInfoFileOffset: number;
  /** u32 */
  nDebugInfoSize: number;
  /** ptr */
  lpThreadLocalBase: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */
  lpStartAddress: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpImageName: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  fUnicode: number;
}

export const sizeofCREATE_PROCESS_DEBUG_INFO = 72;

export function allocCREATE_PROCESS_DEBUG_INFO(data?: Partial<CREATE_PROCESS_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_PROCESS_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(util.toPointer(data.hFile)), true);
  // 0x08: pointer
  if (data?.hProcess !== undefined) view.setBigUint64(8, data.hProcess === null ? 0n : BigInt(util.toPointer(data.hProcess)), true);
  // 0x10: pointer
  if (data?.hThread !== undefined) view.setBigUint64(16, data.hThread === null ? 0n : BigInt(util.toPointer(data.hThread)), true);
  // 0x18: pointer
  if (data?.lpBaseOfImage !== undefined) view.setBigUint64(24, data.lpBaseOfImage === null ? 0n : BigInt(util.toPointer(data.lpBaseOfImage)), true);
  // 0x20: u32
  if (data?.dwDebugInfoFileOffset !== undefined) view.setUint32(32, Number(data.dwDebugInfoFileOffset), true);
  // 0x24: u32
  if (data?.nDebugInfoSize !== undefined) view.setUint32(36, Number(data.nDebugInfoSize), true);
  // 0x28: pointer
  if (data?.lpThreadLocalBase !== undefined) view.setBigUint64(40, data.lpThreadLocalBase === null ? 0n : BigInt(util.toPointer(data.lpThreadLocalBase)), true);
  // 0x30: pointer
  if (data?.lpStartAddress !== undefined) view.setBigUint64(48, data.lpStartAddress === null ? 0n : BigInt(util.toPointer(data.lpStartAddress)), true);
  // 0x38: pointer
  if (data?.lpImageName !== undefined) view.setBigUint64(56, data.lpImageName === null ? 0n : BigInt(util.toPointer(data.lpImageName)), true);
  // 0x40: u16
  if (data?.fUnicode !== undefined) view.setUint16(64, Number(data.fUnicode), true);
  // 0x42: pad6
  return buf;
}

export class CREATE_PROCESS_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hFile(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get hProcess(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get hThread(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get lpBaseOfImage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get dwDebugInfoFileOffset(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get nDebugInfoSize(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get lpThreadLocalBase(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get lpStartAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get lpImageName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: u16
  get fUnicode(): number {
    return this.view.getUint16(64, true);
  }

  // 0x42: pad6

  // 0x00: pointer
  set hFile(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set hProcess(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set hThread(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set lpBaseOfImage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set dwDebugInfoFileOffset(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set nDebugInfoSize(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set lpThreadLocalBase(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set lpStartAddress(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set lpImageName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: u16
  set fUnicode(value: number) {
    this.view.setUint16(64, value, true);
  }

  // 0x42: pad6
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXIT_THREAD_DEBUG_INFO (size: 8)
 */
export interface EXIT_THREAD_DEBUG_INFO {
  /** u32 */
  dwExitCode: number;
}

export const sizeofEXIT_THREAD_DEBUG_INFO = 8;

export function allocEXIT_THREAD_DEBUG_INFO(data?: Partial<EXIT_THREAD_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXIT_THREAD_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExitCode !== undefined) view.setUint32(0, Number(data.dwExitCode), true);
  // 0x04: pad4
  return buf;
}

export class EXIT_THREAD_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwExitCode(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set dwExitCode(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXIT_PROCESS_DEBUG_INFO (size: 8)
 */
export interface EXIT_PROCESS_DEBUG_INFO {
  /** u32 */
  dwExitCode: number;
}

export const sizeofEXIT_PROCESS_DEBUG_INFO = 8;

export function allocEXIT_PROCESS_DEBUG_INFO(data?: Partial<EXIT_PROCESS_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXIT_PROCESS_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExitCode !== undefined) view.setUint32(0, Number(data.dwExitCode), true);
  // 0x04: pad4
  return buf;
}

export class EXIT_PROCESS_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwExitCode(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set dwExitCode(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.LOAD_DLL_DEBUG_INFO (size: 40)
 */
export interface LOAD_DLL_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwDebugInfoFileOffset: number;
  /** u32 */
  nDebugInfoSize: number;
  /** ptr */
  lpImageName: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  fUnicode: number;
}

export const sizeofLOAD_DLL_DEBUG_INFO = 40;

export function allocLOAD_DLL_DEBUG_INFO(data?: Partial<LOAD_DLL_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofLOAD_DLL_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(util.toPointer(data.hFile)), true);
  // 0x08: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(8, data.lpBaseOfDll === null ? 0n : BigInt(util.toPointer(data.lpBaseOfDll)), true);
  // 0x10: u32
  if (data?.dwDebugInfoFileOffset !== undefined) view.setUint32(16, Number(data.dwDebugInfoFileOffset), true);
  // 0x14: u32
  if (data?.nDebugInfoSize !== undefined) view.setUint32(20, Number(data.nDebugInfoSize), true);
  // 0x18: pointer
  if (data?.lpImageName !== undefined) view.setBigUint64(24, data.lpImageName === null ? 0n : BigInt(util.toPointer(data.lpImageName)), true);
  // 0x20: u16
  if (data?.fUnicode !== undefined) view.setUint16(32, Number(data.fUnicode), true);
  // 0x22: pad6
  return buf;
}

export class LOAD_DLL_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hFile(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get lpBaseOfDll(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwDebugInfoFileOffset(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get nDebugInfoSize(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get lpImageName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u16
  get fUnicode(): number {
    return this.view.getUint16(32, true);
  }

  // 0x22: pad6

  // 0x00: pointer
  set hFile(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set lpBaseOfDll(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwDebugInfoFileOffset(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set nDebugInfoSize(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set lpImageName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u16
  set fUnicode(value: number) {
    this.view.setUint16(32, value, true);
  }

  // 0x22: pad6
}

/**
 * Windows.Win32.System.Diagnostics.Debug.UNLOAD_DLL_DEBUG_INFO (size: 8)
 */
export interface UNLOAD_DLL_DEBUG_INFO {
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array | null;
}

export const sizeofUNLOAD_DLL_DEBUG_INFO = 8;

export function allocUNLOAD_DLL_DEBUG_INFO(data?: Partial<UNLOAD_DLL_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofUNLOAD_DLL_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(0, data.lpBaseOfDll === null ? 0n : BigInt(util.toPointer(data.lpBaseOfDll)), true);
  return buf;
}

export class UNLOAD_DLL_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpBaseOfDll(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set lpBaseOfDll(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.OUTPUT_DEBUG_STRING_INFO (size: 16)
 */
export interface OUTPUT_DEBUG_STRING_INFO {
  /** Windows.Win32.Foundation.PSTR */
  lpDebugStringData: string | null | Uint8Array;
  /** u16 */
  fUnicode: number;
  /** u16 */
  nDebugStringLength: number;
}

export const sizeofOUTPUT_DEBUG_STRING_INFO = 16;

export function allocOUTPUT_DEBUG_STRING_INFO(data?: Partial<OUTPUT_DEBUG_STRING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofOUTPUT_DEBUG_STRING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpDebugStringData !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpDebugStringData);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u16
  if (data?.fUnicode !== undefined) view.setUint16(8, Number(data.fUnicode), true);
  // 0x0a: u16
  if (data?.nDebugStringLength !== undefined) view.setUint16(10, Number(data.nDebugStringLength), true);
  // 0x0c: pad4
  return buf;
}

export class OUTPUT_DEBUG_STRING_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get lpDebugStringData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u16
  get fUnicode(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get nDebugStringLength(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: pad4

  // 0x00: buffer
  set lpDebugStringData(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u16
  set fUnicode(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set nDebugStringLength(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.RIP_INFO (size: 8)
 */
export interface RIP_INFO {
  /** u32 */
  dwError: number;
  /** Windows.Win32.System.Diagnostics.Debug.RIP_INFO_TYPE */
  dwType: RIP_INFO_TYPE;
}

export const sizeofRIP_INFO = 8;

export function allocRIP_INFO(data?: Partial<RIP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRIP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwError !== undefined) view.setUint32(0, Number(data.dwError), true);
  // 0x04: u32
  if (data?.dwType !== undefined) view.setUint32(4, Number(data.dwType), true);
  return buf;
}

export class RIP_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwError(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwError(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwType(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * _u_e__Union (size: 72)
 */
export interface _u_e__Union {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_DEBUG_INFO */
  Exception: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.CREATE_THREAD_DEBUG_INFO */
  CreateThread: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.CREATE_PROCESS_DEBUG_INFO */
  CreateProcessInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.EXIT_THREAD_DEBUG_INFO */
  ExitThread: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.EXIT_PROCESS_DEBUG_INFO */
  ExitProcess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.LOAD_DLL_DEBUG_INFO */
  LoadDll: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.UNLOAD_DLL_DEBUG_INFO */
  UnloadDll: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.OUTPUT_DEBUG_STRING_INFO */
  DebugString: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.RIP_INFO */
  RipInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_u_e__Union = 72;

export function alloc_u_e__Union(data?: Partial<_u_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Exception !== undefined) view.setBigUint64(0, data.Exception === null ? 0n : BigInt(util.toPointer(data.Exception)), true);
  // 0x08: pointer
  if (data?.CreateThread !== undefined) view.setBigUint64(8, data.CreateThread === null ? 0n : BigInt(util.toPointer(data.CreateThread)), true);
  // 0x10: pointer
  if (data?.CreateProcessInfo !== undefined) view.setBigUint64(16, data.CreateProcessInfo === null ? 0n : BigInt(util.toPointer(data.CreateProcessInfo)), true);
  // 0x18: pointer
  if (data?.ExitThread !== undefined) view.setBigUint64(24, data.ExitThread === null ? 0n : BigInt(util.toPointer(data.ExitThread)), true);
  // 0x20: pointer
  if (data?.ExitProcess !== undefined) view.setBigUint64(32, data.ExitProcess === null ? 0n : BigInt(util.toPointer(data.ExitProcess)), true);
  // 0x28: pointer
  if (data?.LoadDll !== undefined) view.setBigUint64(40, data.LoadDll === null ? 0n : BigInt(util.toPointer(data.LoadDll)), true);
  // 0x30: pointer
  if (data?.UnloadDll !== undefined) view.setBigUint64(48, data.UnloadDll === null ? 0n : BigInt(util.toPointer(data.UnloadDll)), true);
  // 0x38: pointer
  if (data?.DebugString !== undefined) view.setBigUint64(56, data.DebugString === null ? 0n : BigInt(util.toPointer(data.DebugString)), true);
  // 0x40: pointer
  if (data?.RipInfo !== undefined) view.setBigUint64(64, data.RipInfo === null ? 0n : BigInt(util.toPointer(data.RipInfo)), true);
  return buf;
}

export class _u_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Exception(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get CreateThread(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get CreateProcessInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get ExitThread(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get ExitProcess(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get LoadDll(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get UnloadDll(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get DebugString(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get RipInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Exception(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set CreateThread(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set CreateProcessInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set ExitThread(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set ExitProcess(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set LoadDll(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set UnloadDll(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set DebugString(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set RipInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Threading.TP_CALLBACK_ENVIRON_V3 (size: 72)
 */
export interface TP_CALLBACK_ENVIRON_V3 {
  /** u32 */
  Version: number;
  /** Windows.Win32.System.Threading.PTP_POOL */
  Pool: Uint8Array | Deno.PointerValue | null;
  /** isize */
  CleanupGroup: Deno.PointerValue;
  /** Windows.Win32.System.Threading.PTP_CLEANUP_GROUP_CANCEL_CALLBACK */
  CleanupGroupCancelCallback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  RaceDll: Deno.PointerValue | Uint8Array | null;
  /** isize */
  ActivationContext: Deno.PointerValue;
  /** Windows.Win32.System.Threading.PTP_SIMPLE_CALLBACK */
  FinalizationCallback: Uint8Array | Deno.PointerValue | null;
  /** _u_e__Union */
  u: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Threading.TP_CALLBACK_PRIORITY */
  CallbackPriority: TP_CALLBACK_PRIORITY;
  /** u32 */
  Size: number;
}

export const sizeofTP_CALLBACK_ENVIRON_V3 = 72;

export function allocTP_CALLBACK_ENVIRON_V3(data?: Partial<TP_CALLBACK_ENVIRON_V3>): Uint8Array {
  const buf = new Uint8Array(sizeofTP_CALLBACK_ENVIRON_V3);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Pool !== undefined) view.setBigUint64(8, data.Pool === null ? 0n : BigInt(util.toPointer(data.Pool)), true);
  // 0x10: isize
  if (data?.CleanupGroup !== undefined) view.setBigInt64(16, BigInt(data.CleanupGroup), true);
  // 0x18: pointer
  if (data?.CleanupGroupCancelCallback !== undefined) view.setBigUint64(24, data.CleanupGroupCancelCallback === null ? 0n : BigInt(util.toPointer(data.CleanupGroupCancelCallback)), true);
  // 0x20: pointer
  if (data?.RaceDll !== undefined) view.setBigUint64(32, data.RaceDll === null ? 0n : BigInt(util.toPointer(data.RaceDll)), true);
  // 0x28: isize
  if (data?.ActivationContext !== undefined) view.setBigInt64(40, BigInt(data.ActivationContext), true);
  // 0x30: pointer
  if (data?.FinalizationCallback !== undefined) view.setBigUint64(48, data.FinalizationCallback === null ? 0n : BigInt(util.toPointer(data.FinalizationCallback)), true);
  // 0x38: pointer
  if (data?.u !== undefined) view.setBigUint64(56, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  // 0x40: i32
  if (data?.CallbackPriority !== undefined) view.setInt32(64, Number(data.CallbackPriority), true);
  // 0x44: u32
  if (data?.Size !== undefined) view.setUint32(68, Number(data.Size), true);
  return buf;
}

export class TP_CALLBACK_ENVIRON_V3View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Pool(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: isize
  get CleanupGroup(): Deno.PointerValue {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: pointer
  get CleanupGroupCancelCallback(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get RaceDll(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: isize
  get ActivationContext(): Deno.PointerValue {
    return Number(this.view.getBigInt64(40, true));
  }

  // 0x30: pointer
  get FinalizationCallback(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get u(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: i32
  get CallbackPriority(): number {
    return this.view.getInt32(64, true);
  }

  // 0x44: u32
  get Size(): number {
    return this.view.getUint32(68, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Pool(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: isize
  set CleanupGroup(value: Deno.PointerValue) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set CleanupGroupCancelCallback(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set RaceDll(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: isize
  set ActivationContext(value: Deno.PointerValue) {
    this.view.setBigInt64(40, BigInt(value), true);
  }

  // 0x30: pointer
  set FinalizationCallback(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set u(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: i32
  set CallbackPriority(value: number) {
    this.view.setInt32(64, value, true);
  }

  // 0x44: u32
  set Size(value: number) {
    this.view.setUint32(68, value, true);
  }
}

/**
 * Windows.Win32.System.Threading.UMS_SCHEDULER_STARTUP_INFO (size: 32)
 */
export interface UMS_SCHEDULER_STARTUP_INFO {
  /** u32 */
  UmsVersion: number;
  /** ptr */
  CompletionList: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Threading.PRTL_UMS_SCHEDULER_ENTRY_POINT */
  SchedulerProc: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  SchedulerParam: Deno.PointerValue | Uint8Array | null;
}

export const sizeofUMS_SCHEDULER_STARTUP_INFO = 32;

export function allocUMS_SCHEDULER_STARTUP_INFO(data?: Partial<UMS_SCHEDULER_STARTUP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofUMS_SCHEDULER_STARTUP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UmsVersion !== undefined) view.setUint32(0, Number(data.UmsVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.CompletionList !== undefined) view.setBigUint64(8, data.CompletionList === null ? 0n : BigInt(util.toPointer(data.CompletionList)), true);
  // 0x10: pointer
  if (data?.SchedulerProc !== undefined) view.setBigUint64(16, data.SchedulerProc === null ? 0n : BigInt(util.toPointer(data.SchedulerProc)), true);
  // 0x18: pointer
  if (data?.SchedulerParam !== undefined) view.setBigUint64(24, data.SchedulerParam === null ? 0n : BigInt(util.toPointer(data.SchedulerParam)), true);
  return buf;
}

export class UMS_SCHEDULER_STARTUP_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get UmsVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get CompletionList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get SchedulerProc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get SchedulerParam(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set UmsVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set CompletionList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set SchedulerProc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set SchedulerParam(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get Region(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set Alignment(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set Region(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Threading.UMS_SYSTEM_THREAD_INFORMATION (size: 16)
 */
export interface UMS_SYSTEM_THREAD_INFORMATION {
  /** u32 */
  UmsVersion: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUMS_SYSTEM_THREAD_INFORMATION = 16;

export function allocUMS_SYSTEM_THREAD_INFORMATION(data?: Partial<UMS_SYSTEM_THREAD_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofUMS_SYSTEM_THREAD_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UmsVersion !== undefined) view.setUint32(0, Number(data.UmsVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class UMS_SYSTEM_THREAD_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get UmsVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set UmsVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Threading.STARTUPINFOEXA (size: 16)
 */
export interface STARTUPINFOEXA {
  /** Windows.Win32.System.Threading.STARTUPINFOA */
  StartupInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Threading.LPPROC_THREAD_ATTRIBUTE_LIST */
  lpAttributeList: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSTARTUPINFOEXA = 16;

export function allocSTARTUPINFOEXA(data?: Partial<STARTUPINFOEXA>): Uint8Array {
  const buf = new Uint8Array(sizeofSTARTUPINFOEXA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.StartupInfo !== undefined) view.setBigUint64(0, data.StartupInfo === null ? 0n : BigInt(util.toPointer(data.StartupInfo)), true);
  // 0x08: pointer
  if (data?.lpAttributeList !== undefined) view.setBigUint64(8, data.lpAttributeList === null ? 0n : BigInt(util.toPointer(data.lpAttributeList)), true);
  return buf;
}

export class STARTUPINFOEXAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get StartupInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get lpAttributeList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set StartupInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set lpAttributeList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Threading.STARTUPINFOEXW (size: 16)
 */
export interface STARTUPINFOEXW {
  /** Windows.Win32.System.Threading.STARTUPINFOW */
  StartupInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Threading.LPPROC_THREAD_ATTRIBUTE_LIST */
  lpAttributeList: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSTARTUPINFOEXW = 16;

export function allocSTARTUPINFOEXW(data?: Partial<STARTUPINFOEXW>): Uint8Array {
  const buf = new Uint8Array(sizeofSTARTUPINFOEXW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.StartupInfo !== undefined) view.setBigUint64(0, data.StartupInfo === null ? 0n : BigInt(util.toPointer(data.StartupInfo)), true);
  // 0x08: pointer
  if (data?.lpAttributeList !== undefined) view.setBigUint64(8, data.lpAttributeList === null ? 0n : BigInt(util.toPointer(data.lpAttributeList)), true);
  return buf;
}

export class STARTUPINFOEXWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get StartupInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get lpAttributeList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set StartupInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set lpAttributeList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Threading.PEB_LDR_DATA (size: 24)
 */
export interface PEB_LDR_DATA {
  /** array */
  Reserved1: Deno.PointerValue | null;
  /** array */
  Reserved2: Deno.PointerValue | null;
  /** Windows.Win32.System.Kernel.LIST_ENTRY */
  InMemoryOrderModuleList: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPEB_LDR_DATA = 24;

export function allocPEB_LDR_DATA(data?: Partial<PEB_LDR_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofPEB_LDR_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(0, data.Reserved1 === null ? 0n : BigInt(util.toPointer(data.Reserved1)), true);
  // 0x08: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(8, data.Reserved2 === null ? 0n : BigInt(util.toPointer(data.Reserved2)), true);
  // 0x10: pointer
  if (data?.InMemoryOrderModuleList !== undefined) view.setBigUint64(16, data.InMemoryOrderModuleList === null ? 0n : BigInt(util.toPointer(data.InMemoryOrderModuleList)), true);
  return buf;
}

export class PEB_LDR_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Reserved1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Reserved2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get InMemoryOrderModuleList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Reserved1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Reserved2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set InMemoryOrderModuleList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Foundation.UNICODE_STRING (size: 16)
 */
export interface UNICODE_STRING {
  /** u16 */
  Length: number;
  /** u16 */
  MaximumLength: number;
  /** Windows.Win32.Foundation.PWSTR */
  Buffer: string | null | Uint8Array | Uint16Array;
}

export const sizeofUNICODE_STRING = 16;

export function allocUNICODE_STRING(data?: Partial<UNICODE_STRING>): Uint8Array {
  const buf = new Uint8Array(sizeofUNICODE_STRING);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Length !== undefined) view.setUint16(0, Number(data.Length), true);
  // 0x02: u16
  if (data?.MaximumLength !== undefined) view.setUint16(2, Number(data.MaximumLength), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.Buffer !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Buffer);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class UNICODE_STRINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Length(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get MaximumLength(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get Buffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set Length(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set MaximumLength(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set Buffer(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.System.Threading.RTL_USER_PROCESS_PARAMETERS (size: 32)
 */
export interface RTL_USER_PROCESS_PARAMETERS {
  /** array */
  Reserved1: Deno.PointerValue | null;
  /** array */
  Reserved2: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ImagePathName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  CommandLine: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRTL_USER_PROCESS_PARAMETERS = 32;

export function allocRTL_USER_PROCESS_PARAMETERS(data?: Partial<RTL_USER_PROCESS_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofRTL_USER_PROCESS_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(0, data.Reserved1 === null ? 0n : BigInt(util.toPointer(data.Reserved1)), true);
  // 0x08: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(8, data.Reserved2 === null ? 0n : BigInt(util.toPointer(data.Reserved2)), true);
  // 0x10: pointer
  if (data?.ImagePathName !== undefined) view.setBigUint64(16, data.ImagePathName === null ? 0n : BigInt(util.toPointer(data.ImagePathName)), true);
  // 0x18: pointer
  if (data?.CommandLine !== undefined) view.setBigUint64(24, data.CommandLine === null ? 0n : BigInt(util.toPointer(data.CommandLine)), true);
  return buf;
}

export class RTL_USER_PROCESS_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Reserved1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Reserved2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get ImagePathName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get CommandLine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Reserved1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Reserved2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set ImagePathName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set CommandLine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Threading.PEB (size: 144)
 */
export interface PEB {
  /** array */
  Reserved1: Deno.PointerValue | null;
  /** u8 */
  BeingDebugged: number;
  /** array */
  Reserved2: Deno.PointerValue | null;
  /** array */
  Reserved3: Deno.PointerValue | null;
  /** ptr */
  Ldr: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ProcessParameters: Deno.PointerValue | Uint8Array | null;
  /** array */
  Reserved4: Deno.PointerValue | null;
  /** ptr */
  AtlThunkSListPtr: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Reserved5: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Reserved6: number;
  /** ptr */
  Reserved7: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Reserved8: number;
  /** u32 */
  AtlThunkSListPtr32: number;
  /** array */
  Reserved9: Deno.PointerValue | null;
  /** array */
  Reserved10: Deno.PointerValue | null;
  /** Windows.Win32.System.Threading.PPS_POST_PROCESS_INIT_ROUTINE */
  PostProcessInitRoutine: Uint8Array | Deno.PointerValue | null;
  /** array */
  Reserved11: Deno.PointerValue | null;
  /** array */
  Reserved12: Deno.PointerValue | null;
  /** u32 */
  SessionId: number;
}

export const sizeofPEB = 144;

export function allocPEB(data?: Partial<PEB>): Uint8Array {
  const buf = new Uint8Array(sizeofPEB);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(0, data.Reserved1 === null ? 0n : BigInt(util.toPointer(data.Reserved1)), true);
  // 0x08: u8
  if (data?.BeingDebugged !== undefined) view.setUint8(8, Number(data.BeingDebugged));
  // 0x09: pad7
  // 0x10: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(16, data.Reserved2 === null ? 0n : BigInt(util.toPointer(data.Reserved2)), true);
  // 0x18: pointer
  if (data?.Reserved3 !== undefined) view.setBigUint64(24, data.Reserved3 === null ? 0n : BigInt(util.toPointer(data.Reserved3)), true);
  // 0x20: pointer
  if (data?.Ldr !== undefined) view.setBigUint64(32, data.Ldr === null ? 0n : BigInt(util.toPointer(data.Ldr)), true);
  // 0x28: pointer
  if (data?.ProcessParameters !== undefined) view.setBigUint64(40, data.ProcessParameters === null ? 0n : BigInt(util.toPointer(data.ProcessParameters)), true);
  // 0x30: pointer
  if (data?.Reserved4 !== undefined) view.setBigUint64(48, data.Reserved4 === null ? 0n : BigInt(util.toPointer(data.Reserved4)), true);
  // 0x38: pointer
  if (data?.AtlThunkSListPtr !== undefined) view.setBigUint64(56, data.AtlThunkSListPtr === null ? 0n : BigInt(util.toPointer(data.AtlThunkSListPtr)), true);
  // 0x40: pointer
  if (data?.Reserved5 !== undefined) view.setBigUint64(64, data.Reserved5 === null ? 0n : BigInt(util.toPointer(data.Reserved5)), true);
  // 0x48: u32
  if (data?.Reserved6 !== undefined) view.setUint32(72, Number(data.Reserved6), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.Reserved7 !== undefined) view.setBigUint64(80, data.Reserved7 === null ? 0n : BigInt(util.toPointer(data.Reserved7)), true);
  // 0x58: u32
  if (data?.Reserved8 !== undefined) view.setUint32(88, Number(data.Reserved8), true);
  // 0x5c: u32
  if (data?.AtlThunkSListPtr32 !== undefined) view.setUint32(92, Number(data.AtlThunkSListPtr32), true);
  // 0x60: pointer
  if (data?.Reserved9 !== undefined) view.setBigUint64(96, data.Reserved9 === null ? 0n : BigInt(util.toPointer(data.Reserved9)), true);
  // 0x68: pointer
  if (data?.Reserved10 !== undefined) view.setBigUint64(104, data.Reserved10 === null ? 0n : BigInt(util.toPointer(data.Reserved10)), true);
  // 0x70: pointer
  if (data?.PostProcessInitRoutine !== undefined) view.setBigUint64(112, data.PostProcessInitRoutine === null ? 0n : BigInt(util.toPointer(data.PostProcessInitRoutine)), true);
  // 0x78: pointer
  if (data?.Reserved11 !== undefined) view.setBigUint64(120, data.Reserved11 === null ? 0n : BigInt(util.toPointer(data.Reserved11)), true);
  // 0x80: pointer
  if (data?.Reserved12 !== undefined) view.setBigUint64(128, data.Reserved12 === null ? 0n : BigInt(util.toPointer(data.Reserved12)), true);
  // 0x88: u32
  if (data?.SessionId !== undefined) view.setUint32(136, Number(data.SessionId), true);
  // 0x8c: pad4
  return buf;
}

export class PEBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Reserved1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u8
  get BeingDebugged(): number {
    return this.view.getUint8(8);
  }

  // 0x09: pad7

  // 0x10: pointer
  get Reserved2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Reserved3(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get Ldr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get ProcessParameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get Reserved4(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get AtlThunkSListPtr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get Reserved5(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: u32
  get Reserved6(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get Reserved7(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: u32
  get Reserved8(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get AtlThunkSListPtr32(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: pointer
  get Reserved9(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: pointer
  get Reserved10(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: pointer
  get PostProcessInitRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(112, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x78: pointer
  get Reserved11(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(120, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x80: pointer
  get Reserved12(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(128, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x88: u32
  get SessionId(): number {
    return this.view.getUint32(136, true);
  }

  // 0x8c: pad4

  // 0x00: pointer
  set Reserved1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u8
  set BeingDebugged(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: pad7

  // 0x10: pointer
  set Reserved2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Reserved3(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set Ldr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set ProcessParameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set Reserved4(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set AtlThunkSListPtr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set Reserved5(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: u32
  set Reserved6(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set Reserved7(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }

  // 0x58: u32
  set Reserved8(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set AtlThunkSListPtr32(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: pointer
  set Reserved9(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, BigInt(util.toPointer(value)), true);
  }

  // 0x68: pointer
  set Reserved10(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, BigInt(util.toPointer(value)), true);
  }

  // 0x70: pointer
  set PostProcessInitRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(112, BigInt(util.toPointer(value)), true);
  }

  // 0x78: pointer
  set Reserved11(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(120, BigInt(util.toPointer(value)), true);
  }

  // 0x80: pointer
  set Reserved12(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(128, BigInt(util.toPointer(value)), true);
  }

  // 0x88: u32
  set SessionId(value: number) {
    this.view.setUint32(136, value, true);
  }

  // 0x8c: pad4
}

/**
 * Windows.Win32.System.Threading.PROCESS_BASIC_INFORMATION (size: 40)
 */
export interface PROCESS_BASIC_INFORMATION {
  /** ptr */
  Reserved1: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  PebBaseAddress: Deno.PointerValue | Uint8Array | null;
  /** array */
  Reserved2: Deno.PointerValue | null;
  /** usize */
  UniqueProcessId: Deno.PointerValue;
  /** ptr */
  Reserved3: Deno.PointerValue | Uint8Array | null;
}

export const sizeofPROCESS_BASIC_INFORMATION = 40;

export function allocPROCESS_BASIC_INFORMATION(data?: Partial<PROCESS_BASIC_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_BASIC_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(0, data.Reserved1 === null ? 0n : BigInt(util.toPointer(data.Reserved1)), true);
  // 0x08: pointer
  if (data?.PebBaseAddress !== undefined) view.setBigUint64(8, data.PebBaseAddress === null ? 0n : BigInt(util.toPointer(data.PebBaseAddress)), true);
  // 0x10: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(16, data.Reserved2 === null ? 0n : BigInt(util.toPointer(data.Reserved2)), true);
  // 0x18: usize
  if (data?.UniqueProcessId !== undefined) view.setBigUint64(24, BigInt(data.UniqueProcessId), true);
  // 0x20: pointer
  if (data?.Reserved3 !== undefined) view.setBigUint64(32, data.Reserved3 === null ? 0n : BigInt(util.toPointer(data.Reserved3)), true);
  return buf;
}

export class PROCESS_BASIC_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Reserved1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get PebBaseAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Reserved2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: usize
  get UniqueProcessId(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: pointer
  get Reserved3(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Reserved1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set PebBaseAddress(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Reserved2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: usize
  set UniqueProcessId(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: pointer
  set Reserved3(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

export type BOOL = number;

export type BOOLEAN = number;

export type HRESULT = number;

export type PSID = Deno.PointerValue | Uint8Array | null;

// Native Libraries

try {
  var libKERNEL32_dll = Deno.dlopen("KERNEL32.dll", {
    GetProcessWorkingSetSize: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetProcessWorkingSetSize: {
      parameters: ["pointer", "usize", "usize"],
      result: "i32",
    },
    FlsAlloc: {
      parameters: ["pointer"],
      result: "u32",
    },
    FlsGetValue: {
      parameters: ["u32"],
      result: "pointer",
    },
    FlsSetValue: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    FlsFree: {
      parameters: ["u32"],
      result: "i32",
    },
    IsThreadAFiber: {
      parameters: [],
      result: "i32",
    },
    InitializeSRWLock: {
      parameters: ["pointer"],
      result: "void",
    },
    ReleaseSRWLockExclusive: {
      parameters: ["pointer"],
      result: "void",
    },
    ReleaseSRWLockShared: {
      parameters: ["pointer"],
      result: "void",
    },
    AcquireSRWLockExclusive: {
      parameters: ["pointer"],
      result: "void",
    },
    AcquireSRWLockShared: {
      parameters: ["pointer"],
      result: "void",
    },
    TryAcquireSRWLockExclusive: {
      parameters: ["pointer"],
      result: "pointer",
    },
    TryAcquireSRWLockShared: {
      parameters: ["pointer"],
      result: "pointer",
    },
    InitializeCriticalSection: {
      parameters: ["pointer"],
      result: "void",
    },
    EnterCriticalSection: {
      parameters: ["pointer"],
      result: "void",
    },
    LeaveCriticalSection: {
      parameters: ["pointer"],
      result: "void",
    },
    InitializeCriticalSectionAndSpinCount: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    InitializeCriticalSectionEx: {
      parameters: ["pointer", "u32", "u32"],
      result: "i32",
    },
    SetCriticalSectionSpinCount: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    TryEnterCriticalSection: {
      parameters: ["pointer"],
      result: "i32",
    },
    DeleteCriticalSection: {
      parameters: ["pointer"],
      result: "void",
    },
    InitOnceInitialize: {
      parameters: ["pointer"],
      result: "void",
    },
    InitOnceExecuteOnce: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    InitOnceBeginInitialize: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    InitOnceComplete: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    InitializeConditionVariable: {
      parameters: ["pointer"],
      result: "void",
    },
    WakeConditionVariable: {
      parameters: ["pointer"],
      result: "void",
    },
    WakeAllConditionVariable: {
      parameters: ["pointer"],
      result: "void",
    },
    SleepConditionVariableCS: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    SleepConditionVariableSRW: {
      parameters: ["pointer", "pointer", "u32", "u32"],
      result: "i32",
    },
    SetEvent: {
      parameters: ["pointer"],
      result: "i32",
    },
    ResetEvent: {
      parameters: ["pointer"],
      result: "i32",
    },
    ReleaseSemaphore: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    ReleaseMutex: {
      parameters: ["pointer"],
      result: "i32",
    },
    WaitForSingleObject: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    SleepEx: {
      parameters: ["u32", "i32"],
      result: "u32",
    },
    WaitForSingleObjectEx: {
      parameters: ["pointer", "u32", "i32"],
      result: "u32",
    },
    WaitForMultipleObjectsEx: {
      parameters: ["u32", "pointer", "i32", "u32", "i32"],
      result: "u32",
    },
    CreateMutexA: {
      parameters: ["pointer", "i32", "buffer"],
      result: "pointer",
    },
    CreateMutexW: {
      parameters: ["pointer", "i32", "buffer"],
      result: "pointer",
    },
    OpenMutexW: {
      parameters: ["u32", "i32", "buffer"],
      result: "pointer",
    },
    CreateEventA: {
      parameters: ["pointer", "i32", "i32", "buffer"],
      result: "pointer",
    },
    CreateEventW: {
      parameters: ["pointer", "i32", "i32", "buffer"],
      result: "pointer",
    },
    OpenEventA: {
      parameters: ["u32", "i32", "buffer"],
      result: "pointer",
    },
    OpenEventW: {
      parameters: ["u32", "i32", "buffer"],
      result: "pointer",
    },
    OpenSemaphoreW: {
      parameters: ["u32", "i32", "buffer"],
      result: "pointer",
    },
    OpenWaitableTimerW: {
      parameters: ["u32", "i32", "buffer"],
      result: "pointer",
    },
    SetWaitableTimerEx: {
      parameters: ["pointer", "pointer", "i32", "pointer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    SetWaitableTimer: {
      parameters: ["pointer", "pointer", "i32", "pointer", "pointer", "i32"],
      result: "i32",
    },
    CancelWaitableTimer: {
      parameters: ["pointer"],
      result: "i32",
    },
    CreateMutexExA: {
      parameters: ["pointer", "buffer", "u32", "u32"],
      result: "pointer",
    },
    CreateMutexExW: {
      parameters: ["pointer", "buffer", "u32", "u32"],
      result: "pointer",
    },
    CreateEventExA: {
      parameters: ["pointer", "buffer", "u32", "u32"],
      result: "pointer",
    },
    CreateEventExW: {
      parameters: ["pointer", "buffer", "u32", "u32"],
      result: "pointer",
    },
    CreateSemaphoreExW: {
      parameters: ["pointer", "i32", "i32", "buffer", "u32", "u32"],
      result: "pointer",
    },
    CreateWaitableTimerExW: {
      parameters: ["pointer", "buffer", "u32", "u32"],
      result: "pointer",
    },
    EnterSynchronizationBarrier: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    InitializeSynchronizationBarrier: {
      parameters: ["pointer", "i32", "i32"],
      result: "i32",
    },
    DeleteSynchronizationBarrier: {
      parameters: ["pointer"],
      result: "i32",
    },
    Sleep: {
      parameters: ["u32"],
      result: "void",
    },
    WaitForMultipleObjects: {
      parameters: ["u32", "pointer", "i32", "u32"],
      result: "u32",
    },
    CreateSemaphoreW: {
      parameters: ["pointer", "i32", "i32", "buffer"],
      result: "pointer",
    },
    CreateWaitableTimerW: {
      parameters: ["pointer", "i32", "buffer"],
      result: "pointer",
    },
    InitializeSListHead: {
      parameters: ["pointer"],
      result: "void",
    },
    InterlockedPopEntrySList: {
      parameters: ["pointer"],
      result: "pointer",
    },
    InterlockedPushEntrySList: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    InterlockedPushListSListEx: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "pointer",
    },
    InterlockedFlushSList: {
      parameters: ["pointer"],
      result: "pointer",
    },
    QueryDepthSList: {
      parameters: ["pointer"],
      result: "u16",
    },
    QueueUserAPC: {
      parameters: ["pointer", "pointer", "usize"],
      result: "u32",
    },
    QueueUserAPC2: {
      parameters: ["pointer", "pointer", "usize", "i32"],
      result: "i32",
    },
    GetProcessTimes: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetCurrentProcess: {
      parameters: [],
      result: "pointer",
    },
    GetCurrentProcessId: {
      parameters: [],
      result: "u32",
    },
    ExitProcess: {
      parameters: ["u32"],
      result: "void",
    },
    TerminateProcess: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    GetExitCodeProcess: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SwitchToThread: {
      parameters: [],
      result: "i32",
    },
    CreateThread: {
      parameters: ["pointer", "usize", "pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    CreateRemoteThread: {
      parameters: ["pointer", "pointer", "usize", "pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    GetCurrentThread: {
      parameters: [],
      result: "pointer",
    },
    GetCurrentThreadId: {
      parameters: [],
      result: "u32",
    },
    OpenThread: {
      parameters: ["u32", "i32", "u32"],
      result: "pointer",
    },
    SetThreadPriority: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    SetThreadPriorityBoost: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    GetThreadPriorityBoost: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetThreadPriority: {
      parameters: ["pointer"],
      result: "i32",
    },
    ExitThread: {
      parameters: ["u32"],
      result: "void",
    },
    TerminateThread: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    GetExitCodeThread: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SuspendThread: {
      parameters: ["pointer"],
      result: "u32",
    },
    ResumeThread: {
      parameters: ["pointer"],
      result: "u32",
    },
    TlsAlloc: {
      parameters: [],
      result: "u32",
    },
    TlsGetValue: {
      parameters: ["u32"],
      result: "pointer",
    },
    TlsSetValue: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    TlsFree: {
      parameters: ["u32"],
      result: "i32",
    },
    CreateProcessA: {
      parameters: ["buffer", "buffer", "pointer", "pointer", "i32", "u32", "pointer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    CreateProcessW: {
      parameters: ["buffer", "buffer", "pointer", "pointer", "i32", "u32", "pointer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    SetProcessShutdownParameters: {
      parameters: ["u32", "u32"],
      result: "i32",
    },
    GetProcessVersion: {
      parameters: ["u32"],
      result: "u32",
    },
    GetStartupInfoW: {
      parameters: ["pointer"],
      result: "void",
    },
    SetPriorityClass: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    GetPriorityClass: {
      parameters: ["pointer"],
      result: "u32",
    },
    SetThreadStackGuarantee: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetProcessId: {
      parameters: ["pointer"],
      result: "u32",
    },
    GetThreadId: {
      parameters: ["pointer"],
      result: "u32",
    },
    FlushProcessWriteBuffers: {
      parameters: [],
      result: "void",
    },
    GetProcessIdOfThread: {
      parameters: ["pointer"],
      result: "u32",
    },
    InitializeProcThreadAttributeList: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "i32",
    },
    DeleteProcThreadAttributeList: {
      parameters: ["pointer"],
      result: "void",
    },
    UpdateProcThreadAttribute: {
      parameters: ["pointer", "u32", "usize", "pointer", "usize", "pointer", "pointer"],
      result: "i32",
    },
    SetProcessDynamicEHContinuationTargets: {
      parameters: ["pointer", "u16", "pointer"],
      result: "i32",
    },
    SetProcessDynamicEnforcedCetCompatibleRanges: {
      parameters: ["pointer", "u16", "pointer"],
      result: "i32",
    },
    SetProcessAffinityUpdateMode: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    QueryProcessAffinityUpdateMode: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    CreateRemoteThreadEx: {
      parameters: ["pointer", "pointer", "usize", "pointer", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    GetCurrentThreadStackLimits: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    GetProcessMitigationPolicy: {
      parameters: ["pointer", "i32", "pointer", "usize"],
      result: "i32",
    },
    SetProcessMitigationPolicy: {
      parameters: ["i32", "pointer", "usize"],
      result: "i32",
    },
    GetThreadTimes: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    OpenProcess: {
      parameters: ["u32", "i32", "u32"],
      result: "pointer",
    },
    IsProcessorFeaturePresent: {
      parameters: ["u32"],
      result: "i32",
    },
    GetProcessHandleCount: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetCurrentProcessorNumber: {
      parameters: [],
      result: "u32",
    },
    SetThreadIdealProcessorEx: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetThreadIdealProcessorEx: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetCurrentProcessorNumberEx: {
      parameters: ["pointer"],
      result: "void",
    },
    GetProcessPriorityBoost: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetProcessPriorityBoost: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    GetThreadIOPendingFlag: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetSystemTimes: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetThreadInformation: {
      parameters: ["pointer", "i32", "pointer", "u32"],
      result: "i32",
    },
    SetThreadInformation: {
      parameters: ["pointer", "i32", "pointer", "u32"],
      result: "i32",
    },
    IsProcessCritical: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetProtectedPolicy: {
      parameters: ["pointer", "usize", "pointer"],
      result: "i32",
    },
    QueryProtectedPolicy: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetThreadIdealProcessor: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    SetProcessInformation: {
      parameters: ["pointer", "i32", "pointer", "u32"],
      result: "i32",
    },
    GetProcessInformation: {
      parameters: ["pointer", "i32", "pointer", "u32"],
      result: "i32",
    },
    GetProcessDefaultCpuSets: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    SetProcessDefaultCpuSets: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    GetThreadSelectedCpuSets: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    SetThreadSelectedCpuSets: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    GetProcessShutdownParameters: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetProcessDefaultCpuSetMasks: {
      parameters: ["pointer", "pointer", "u16", "pointer"],
      result: "i32",
    },
    SetProcessDefaultCpuSetMasks: {
      parameters: ["pointer", "pointer", "u16"],
      result: "i32",
    },
    GetThreadSelectedCpuSetMasks: {
      parameters: ["pointer", "pointer", "u16", "pointer"],
      result: "i32",
    },
    SetThreadSelectedCpuSetMasks: {
      parameters: ["pointer", "pointer", "u16"],
      result: "i32",
    },
    GetMachineTypeAttributes: {
      parameters: ["u16", "pointer"],
      result: "pointer",
    },
    SetThreadDescription: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    GetThreadDescription: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    QueueUserWorkItem: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    UnregisterWaitEx: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    CreateTimerQueue: {
      parameters: [],
      result: "pointer",
    },
    CreateTimerQueueTimer: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32", "u32", "u32"],
      result: "i32",
    },
    ChangeTimerQueueTimer: {
      parameters: ["pointer", "pointer", "u32", "u32"],
      result: "i32",
    },
    DeleteTimerQueueTimer: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    DeleteTimerQueue: {
      parameters: ["pointer"],
      result: "i32",
    },
    DeleteTimerQueueEx: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    CreateThreadpool: {
      parameters: ["pointer"],
      result: "pointer",
    },
    SetThreadpoolThreadMaximum: {
      parameters: ["pointer", "u32"],
      result: "void",
    },
    SetThreadpoolThreadMinimum: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    SetThreadpoolStackInformation: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    QueryThreadpoolStackInformation: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    CloseThreadpool: {
      parameters: ["pointer"],
      result: "void",
    },
    CreateThreadpoolCleanupGroup: {
      parameters: [],
      result: "isize",
    },
    CloseThreadpoolCleanupGroupMembers: {
      parameters: ["isize", "i32", "pointer"],
      result: "void",
    },
    CloseThreadpoolCleanupGroup: {
      parameters: ["isize"],
      result: "void",
    },
    SetEventWhenCallbackReturns: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    ReleaseSemaphoreWhenCallbackReturns: {
      parameters: ["pointer", "pointer", "u32"],
      result: "void",
    },
    ReleaseMutexWhenCallbackReturns: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    LeaveCriticalSectionWhenCallbackReturns: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    FreeLibraryWhenCallbackReturns: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    CallbackMayRunLong: {
      parameters: ["pointer"],
      result: "i32",
    },
    DisassociateCurrentThreadFromCallback: {
      parameters: ["pointer"],
      result: "void",
    },
    TrySubmitThreadpoolCallback: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    CreateThreadpoolWork: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SubmitThreadpoolWork: {
      parameters: ["pointer"],
      result: "void",
    },
    WaitForThreadpoolWorkCallbacks: {
      parameters: ["pointer", "i32"],
      result: "void",
    },
    CloseThreadpoolWork: {
      parameters: ["pointer"],
      result: "void",
    },
    CreateThreadpoolTimer: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SetThreadpoolTimer: {
      parameters: ["pointer", "pointer", "u32", "u32"],
      result: "void",
    },
    IsThreadpoolTimerSet: {
      parameters: ["pointer"],
      result: "i32",
    },
    WaitForThreadpoolTimerCallbacks: {
      parameters: ["pointer", "i32"],
      result: "void",
    },
    CloseThreadpoolTimer: {
      parameters: ["pointer"],
      result: "void",
    },
    CreateThreadpoolWait: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SetThreadpoolWait: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    WaitForThreadpoolWaitCallbacks: {
      parameters: ["pointer", "i32"],
      result: "void",
    },
    CloseThreadpoolWait: {
      parameters: ["pointer"],
      result: "void",
    },
    CreateThreadpoolIo: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    StartThreadpoolIo: {
      parameters: ["pointer"],
      result: "void",
    },
    CancelThreadpoolIo: {
      parameters: ["pointer"],
      result: "void",
    },
    WaitForThreadpoolIoCallbacks: {
      parameters: ["pointer", "i32"],
      result: "void",
    },
    CloseThreadpoolIo: {
      parameters: ["pointer"],
      result: "void",
    },
    SetThreadpoolTimerEx: {
      parameters: ["pointer", "pointer", "u32", "u32"],
      result: "i32",
    },
    SetThreadpoolWaitEx: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    IsWow64Process: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    IsWow64Process2: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    Wow64SuspendThread: {
      parameters: ["pointer"],
      result: "u32",
    },
    CreatePrivateNamespaceW: {
      parameters: ["pointer", "pointer", "buffer"],
      result: "pointer",
    },
    OpenPrivateNamespaceW: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    ClosePrivateNamespace: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    CreateBoundaryDescriptorW: {
      parameters: ["buffer", "u32"],
      result: "pointer",
    },
    AddSIDToBoundaryDescriptor: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    DeleteBoundaryDescriptor: {
      parameters: ["pointer"],
      result: "void",
    },
    GetNumaHighestNodeNumber: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetNumaNodeProcessorMaskEx: {
      parameters: ["u16", "pointer"],
      result: "i32",
    },
    GetNumaNodeProcessorMask2: {
      parameters: ["u16", "pointer", "u16", "pointer"],
      result: "i32",
    },
    GetNumaProximityNodeEx: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    GetProcessGroupAffinity: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetThreadGroupAffinity: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetThreadGroupAffinity: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetProcessAffinityMask: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetProcessAffinityMask: {
      parameters: ["pointer", "usize"],
      result: "i32",
    },
    GetProcessIoCounters: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SwitchToFiber: {
      parameters: ["pointer"],
      result: "void",
    },
    DeleteFiber: {
      parameters: ["pointer"],
      result: "void",
    },
    ConvertFiberToThread: {
      parameters: [],
      result: "i32",
    },
    CreateFiberEx: {
      parameters: ["usize", "usize", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    ConvertThreadToFiberEx: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    CreateFiber: {
      parameters: ["usize", "pointer", "pointer"],
      result: "pointer",
    },
    ConvertThreadToFiber: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CreateUmsCompletionList: {
      parameters: ["pointer"],
      result: "i32",
    },
    DequeueUmsCompletionListItems: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    GetUmsCompletionListEvent: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ExecuteUmsThread: {
      parameters: ["pointer"],
      result: "i32",
    },
    UmsThreadYield: {
      parameters: ["pointer"],
      result: "i32",
    },
    DeleteUmsCompletionList: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetCurrentUmsThread: {
      parameters: [],
      result: "pointer",
    },
    GetNextUmsListItem: {
      parameters: ["pointer"],
      result: "pointer",
    },
    QueryUmsThreadInformation: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    SetUmsThreadInformation: {
      parameters: ["pointer", "i32", "pointer", "u32"],
      result: "i32",
    },
    DeleteUmsThreadContext: {
      parameters: ["pointer"],
      result: "i32",
    },
    CreateUmsThreadContext: {
      parameters: ["pointer"],
      result: "i32",
    },
    EnterUmsSchedulingMode: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetUmsSystemThreadInformation: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetThreadAffinityMask: {
      parameters: ["pointer", "usize"],
      result: "usize",
    },
    SetProcessDEPPolicy: {
      parameters: ["u32"],
      result: "i32",
    },
    GetProcessDEPPolicy: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    PulseEvent: {
      parameters: ["pointer"],
      result: "i32",
    },
    WinExec: {
      parameters: ["buffer", "u32"],
      result: "u32",
    },
    CreateSemaphoreA: {
      parameters: ["pointer", "i32", "i32", "buffer"],
      result: "pointer",
    },
    CreateSemaphoreExA: {
      parameters: ["pointer", "i32", "i32", "buffer", "u32", "u32"],
      result: "pointer",
    },
    QueryFullProcessImageNameA: {
      parameters: ["pointer", "u32", "buffer", "pointer"],
      result: "i32",
    },
    QueryFullProcessImageNameW: {
      parameters: ["pointer", "u32", "buffer", "pointer"],
      result: "i32",
    },
    GetStartupInfoA: {
      parameters: ["pointer"],
      result: "void",
    },
    RegisterWaitForSingleObject: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32", "u32"],
      result: "i32",
    },
    UnregisterWait: {
      parameters: ["pointer"],
      result: "i32",
    },
    SetTimerQueueTimer: {
      parameters: ["pointer", "pointer", "pointer", "u32", "u32", "i32"],
      result: "pointer",
    },
    CreatePrivateNamespaceA: {
      parameters: ["pointer", "pointer", "buffer"],
      result: "pointer",
    },
    OpenPrivateNamespaceA: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    CreateBoundaryDescriptorA: {
      parameters: ["buffer", "u32"],
      result: "pointer",
    },
    AddIntegrityLabelToBoundaryDescriptor: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetActiveProcessorGroupCount: {
      parameters: [],
      result: "u16",
    },
    GetMaximumProcessorGroupCount: {
      parameters: [],
      result: "u16",
    },
    GetActiveProcessorCount: {
      parameters: ["u16"],
      result: "u32",
    },
    GetMaximumProcessorCount: {
      parameters: ["u16"],
      result: "u32",
    },
    GetNumaProcessorNode: {
      parameters: ["u8", "pointer"],
      result: "i32",
    },
    GetNumaNodeNumberFromHandle: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetNumaProcessorNodeEx: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetNumaNodeProcessorMask: {
      parameters: ["u8", "pointer"],
      result: "i32",
    },
    GetNumaAvailableMemoryNode: {
      parameters: ["u8", "pointer"],
      result: "i32",
    },
    GetNumaAvailableMemoryNodeEx: {
      parameters: ["u16", "pointer"],
      result: "i32",
    },
    GetNumaProximityNode: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_synch_l1_2_0_dll = Deno.dlopen("api-ms-win-core-synch-l1-2-0.dll", {
    WaitOnAddress: {
      parameters: ["pointer", "pointer", "usize", "u32"],
      result: "i32",
    },
    WakeByAddressSingle: {
      parameters: ["pointer"],
      result: "void",
    },
    WakeByAddressAll: {
      parameters: ["pointer"],
      result: "void",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libADVAPI32_dll = Deno.dlopen("ADVAPI32.dll", {
    CreateProcessAsUserW: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "pointer", "i32", "u32", "pointer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    SetThreadToken: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    OpenProcessToken: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    OpenThreadToken: {
      parameters: ["pointer", "u32", "i32", "pointer"],
      result: "i32",
    },
    CreateProcessAsUserA: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "pointer", "i32", "u32", "pointer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    CreateProcessWithLogonW: {
      parameters: ["buffer", "buffer", "buffer", "u32", "buffer", "buffer", "u32", "pointer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    CreateProcessWithTokenW: {
      parameters: ["pointer", "u32", "buffer", "buffer", "u32", "pointer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_wow64_l1_1_1_dll = Deno.dlopen("api-ms-win-core-wow64-l1-1-1.dll", {
    Wow64SetThreadDefaultGuestMachine: {
      parameters: ["u16"],
      result: "u16",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libAVRT_dll = Deno.dlopen("AVRT.dll", {
    AvSetMmThreadCharacteristicsA: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    AvSetMmThreadCharacteristicsW: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    AvSetMmMaxThreadCharacteristicsA: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "pointer",
    },
    AvSetMmMaxThreadCharacteristicsW: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "pointer",
    },
    AvRevertMmThreadCharacteristics: {
      parameters: ["pointer"],
      result: "i32",
    },
    AvSetMmThreadPriority: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    AvRtCreateThreadOrderingGroup: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    AvRtCreateThreadOrderingGroupExA: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "buffer"],
      result: "i32",
    },
    AvRtCreateThreadOrderingGroupExW: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "buffer"],
      result: "i32",
    },
    AvRtJoinThreadOrderingGroup: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i32",
    },
    AvRtWaitOnThreadOrderingGroup: {
      parameters: ["pointer"],
      result: "i32",
    },
    AvRtLeaveThreadOrderingGroup: {
      parameters: ["pointer"],
      result: "i32",
    },
    AvRtDeleteThreadOrderingGroup: {
      parameters: ["pointer"],
      result: "i32",
    },
    AvQuerySystemResponsiveness: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libUSER32_dll = Deno.dlopen("USER32.dll", {
    AttachThreadInput: {
      parameters: ["u32", "u32", "i32"],
      result: "i32",
    },
    WaitForInputIdle: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    GetGuiResources: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    IsImmersiveProcess: {
      parameters: ["pointer"],
      result: "i32",
    },
    SetProcessRestrictionExemption: {
      parameters: ["i32"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libntdll_dll = Deno.dlopen("ntdll.dll", {
    NtQueryInformationProcess: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    NtQueryInformationThread: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    NtSetInformationThread: {
      parameters: ["pointer", "i32", "pointer", "u32"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function GetProcessWorkingSetSize(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpMinimumWorkingSetSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpMaximumWorkingSetSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetProcessWorkingSetSize(util.toPointer(hProcess), util.toPointer(lpMinimumWorkingSetSize), util.toPointer(lpMaximumWorkingSetSize)));
}

export function SetProcessWorkingSetSize(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwMinimumWorkingSetSize: Deno.PointerValue /* usize */,
  dwMaximumWorkingSetSize: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetProcessWorkingSetSize(util.toPointer(hProcess), dwMinimumWorkingSetSize, dwMaximumWorkingSetSize));
}

export function FlsAlloc(
  lpCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.PFLS_CALLBACK_FUNCTION */,
): number /* u32 */ {
  return libKERNEL32_dll.FlsAlloc(util.toPointer(lpCallback));
}

export function FlsGetValue(
  dwFlsIndex: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32_dll.FlsGetValue(dwFlsIndex));
}

export function FlsSetValue(
  dwFlsIndex: number /* u32 */,
  lpFlsData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.FlsSetValue(dwFlsIndex, util.toPointer(lpFlsData)));
}

export function FlsFree(
  dwFlsIndex: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.FlsFree(dwFlsIndex));
}

export function IsThreadAFiber(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.IsThreadAFiber());
}

export function InitializeSRWLock(
  SRWLock: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.InitializeSRWLock(util.toPointer(SRWLock));
}

export function ReleaseSRWLockExclusive(
  SRWLock: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.ReleaseSRWLockExclusive(util.toPointer(SRWLock));
}

export function ReleaseSRWLockShared(
  SRWLock: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.ReleaseSRWLockShared(util.toPointer(SRWLock));
}

export function AcquireSRWLockExclusive(
  SRWLock: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.AcquireSRWLockExclusive(util.toPointer(SRWLock));
}

export function AcquireSRWLockShared(
  SRWLock: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.AcquireSRWLockShared(util.toPointer(SRWLock));
}

export function TryAcquireSRWLockExclusive(
  SRWLock: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libKERNEL32_dll.TryAcquireSRWLockExclusive(util.toPointer(SRWLock)));
}

export function TryAcquireSRWLockShared(
  SRWLock: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libKERNEL32_dll.TryAcquireSRWLockShared(util.toPointer(SRWLock)));
}

export function InitializeCriticalSection(
  lpCriticalSection: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.InitializeCriticalSection(util.toPointer(lpCriticalSection));
}

export function EnterCriticalSection(
  lpCriticalSection: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.EnterCriticalSection(util.toPointer(lpCriticalSection));
}

export function LeaveCriticalSection(
  lpCriticalSection: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.LeaveCriticalSection(util.toPointer(lpCriticalSection));
}

export function InitializeCriticalSectionAndSpinCount(
  lpCriticalSection: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSpinCount: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.InitializeCriticalSectionAndSpinCount(util.toPointer(lpCriticalSection), dwSpinCount));
}

export function InitializeCriticalSectionEx(
  lpCriticalSection: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSpinCount: number /* u32 */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.InitializeCriticalSectionEx(util.toPointer(lpCriticalSection), dwSpinCount, Flags));
}

export function SetCriticalSectionSpinCount(
  lpCriticalSection: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSpinCount: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.SetCriticalSectionSpinCount(util.toPointer(lpCriticalSection), dwSpinCount);
}

export function TryEnterCriticalSection(
  lpCriticalSection: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.TryEnterCriticalSection(util.toPointer(lpCriticalSection)));
}

export function DeleteCriticalSection(
  lpCriticalSection: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.DeleteCriticalSection(util.toPointer(lpCriticalSection));
}

export function InitOnceInitialize(
  InitOnce: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.InitOnceInitialize(util.toPointer(InitOnce));
}

export function InitOnceExecuteOnce(
  InitOnce: Deno.PointerValue | Uint8Array | null /* ptr */,
  InitFn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.PINIT_ONCE_FN */,
  Parameter: Deno.PointerValue | Uint8Array | null /* ptr */,
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.InitOnceExecuteOnce(util.toPointer(InitOnce), util.toPointer(InitFn), util.toPointer(Parameter), util.toPointer(Context)));
}

export function InitOnceBeginInitialize(
  lpInitOnce: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  fPending: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.InitOnceBeginInitialize(util.toPointer(lpInitOnce), dwFlags, util.toPointer(fPending), util.toPointer(lpContext)));
}

export function InitOnceComplete(
  lpInitOnce: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  lpContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.InitOnceComplete(util.toPointer(lpInitOnce), dwFlags, util.toPointer(lpContext)));
}

export function InitializeConditionVariable(
  ConditionVariable: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.InitializeConditionVariable(util.toPointer(ConditionVariable));
}

export function WakeConditionVariable(
  ConditionVariable: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.WakeConditionVariable(util.toPointer(ConditionVariable));
}

export function WakeAllConditionVariable(
  ConditionVariable: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.WakeAllConditionVariable(util.toPointer(ConditionVariable));
}

export function SleepConditionVariableCS(
  ConditionVariable: Deno.PointerValue | Uint8Array | null /* ptr */,
  CriticalSection: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwMilliseconds: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SleepConditionVariableCS(util.toPointer(ConditionVariable), util.toPointer(CriticalSection), dwMilliseconds));
}

export function SleepConditionVariableSRW(
  ConditionVariable: Deno.PointerValue | Uint8Array | null /* ptr */,
  SRWLock: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwMilliseconds: number /* u32 */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SleepConditionVariableSRW(util.toPointer(ConditionVariable), util.toPointer(SRWLock), dwMilliseconds, Flags));
}

export function SetEvent(
  hEvent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetEvent(util.toPointer(hEvent)));
}

export function ResetEvent(
  hEvent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.ResetEvent(util.toPointer(hEvent)));
}

export function ReleaseSemaphore(
  hSemaphore: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lReleaseCount: number /* i32 */,
  lpPreviousCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.ReleaseSemaphore(util.toPointer(hSemaphore), lReleaseCount, util.toPointer(lpPreviousCount)));
}

export function ReleaseMutex(
  hMutex: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.ReleaseMutex(util.toPointer(hMutex)));
}

export function WaitForSingleObject(
  hHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwMilliseconds: number /* u32 */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libKERNEL32_dll.WaitForSingleObject(util.toPointer(hHandle), dwMilliseconds);
}

export function SleepEx(
  dwMilliseconds: number /* u32 */,
  bAlertable: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libKERNEL32_dll.SleepEx(dwMilliseconds, util.boolToFfi(bAlertable));
}

export function WaitForSingleObjectEx(
  hHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwMilliseconds: number /* u32 */,
  bAlertable: boolean /* Windows.Win32.Foundation.BOOL */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libKERNEL32_dll.WaitForSingleObjectEx(util.toPointer(hHandle), dwMilliseconds, util.boolToFfi(bAlertable));
}

export function WaitForMultipleObjectsEx(
  nCount: number /* u32 */,
  lpHandles: Deno.PointerValue | Uint8Array | null /* ptr */,
  bWaitAll: boolean /* Windows.Win32.Foundation.BOOL */,
  dwMilliseconds: number /* u32 */,
  bAlertable: boolean /* Windows.Win32.Foundation.BOOL */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libKERNEL32_dll.WaitForMultipleObjectsEx(nCount, util.toPointer(lpHandles), util.boolToFfi(bWaitAll), dwMilliseconds, util.boolToFfi(bAlertable));
}

export function CreateMutexA(
  lpMutexAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  bInitialOwner: boolean /* Windows.Win32.Foundation.BOOL */,
  lpName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32_dll.CreateMutexA(util.toPointer(lpMutexAttributes), util.boolToFfi(bInitialOwner), util.pstrToFfi(lpName)));
}

export function CreateMutexW(
  lpMutexAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  bInitialOwner: boolean /* Windows.Win32.Foundation.BOOL */,
  lpName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32_dll.CreateMutexW(util.toPointer(lpMutexAttributes), util.boolToFfi(bInitialOwner), util.pwstrToFfi(lpName)));
}

export function OpenMutexW(
  dwDesiredAccess: SYNCHRONIZATION_ACCESS_RIGHTS /* Windows.Win32.System.Threading.SYNCHRONIZATION_ACCESS_RIGHTS */,
  bInheritHandle: boolean /* Windows.Win32.Foundation.BOOL */,
  lpName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32_dll.OpenMutexW(dwDesiredAccess, util.boolToFfi(bInheritHandle), util.pwstrToFfi(lpName)));
}

export function CreateEventA(
  lpEventAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  bManualReset: boolean /* Windows.Win32.Foundation.BOOL */,
  bInitialState: boolean /* Windows.Win32.Foundation.BOOL */,
  lpName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32_dll.CreateEventA(util.toPointer(lpEventAttributes), util.boolToFfi(bManualReset), util.boolToFfi(bInitialState), util.pstrToFfi(lpName)));
}

export function CreateEventW(
  lpEventAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  bManualReset: boolean /* Windows.Win32.Foundation.BOOL */,
  bInitialState: boolean /* Windows.Win32.Foundation.BOOL */,
  lpName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32_dll.CreateEventW(util.toPointer(lpEventAttributes), util.boolToFfi(bManualReset), util.boolToFfi(bInitialState), util.pwstrToFfi(lpName)));
}

export function OpenEventA(
  dwDesiredAccess: SYNCHRONIZATION_ACCESS_RIGHTS /* Windows.Win32.System.Threading.SYNCHRONIZATION_ACCESS_RIGHTS */,
  bInheritHandle: boolean /* Windows.Win32.Foundation.BOOL */,
  lpName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32_dll.OpenEventA(dwDesiredAccess, util.boolToFfi(bInheritHandle), util.pstrToFfi(lpName)));
}

export function OpenEventW(
  dwDesiredAccess: SYNCHRONIZATION_ACCESS_RIGHTS /* Windows.Win32.System.Threading.SYNCHRONIZATION_ACCESS_RIGHTS */,
  bInheritHandle: boolean /* Windows.Win32.Foundation.BOOL */,
  lpName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32_dll.OpenEventW(dwDesiredAccess, util.boolToFfi(bInheritHandle), util.pwstrToFfi(lpName)));
}

export function OpenSemaphoreW(
  dwDesiredAccess: SYNCHRONIZATION_ACCESS_RIGHTS /* Windows.Win32.System.Threading.SYNCHRONIZATION_ACCESS_RIGHTS */,
  bInheritHandle: boolean /* Windows.Win32.Foundation.BOOL */,
  lpName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32_dll.OpenSemaphoreW(dwDesiredAccess, util.boolToFfi(bInheritHandle), util.pwstrToFfi(lpName)));
}

export function OpenWaitableTimerW(
  dwDesiredAccess: SYNCHRONIZATION_ACCESS_RIGHTS /* Windows.Win32.System.Threading.SYNCHRONIZATION_ACCESS_RIGHTS */,
  bInheritHandle: boolean /* Windows.Win32.Foundation.BOOL */,
  lpTimerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32_dll.OpenWaitableTimerW(dwDesiredAccess, util.boolToFfi(bInheritHandle), util.pwstrToFfi(lpTimerName)));
}

export function SetWaitableTimerEx(
  hTimer: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpDueTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  lPeriod: number /* i32 */,
  pfnCompletionRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.PTIMERAPCROUTINE */,
  lpArgToCompletionRoutine: Deno.PointerValue | Uint8Array | null /* ptr */,
  WakeContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  TolerableDelay: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetWaitableTimerEx(util.toPointer(hTimer), util.toPointer(lpDueTime), lPeriod, util.toPointer(pfnCompletionRoutine), util.toPointer(lpArgToCompletionRoutine), util.toPointer(WakeContext), TolerableDelay));
}

export function SetWaitableTimer(
  hTimer: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpDueTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  lPeriod: number /* i32 */,
  pfnCompletionRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.PTIMERAPCROUTINE */,
  lpArgToCompletionRoutine: Deno.PointerValue | Uint8Array | null /* ptr */,
  fResume: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetWaitableTimer(util.toPointer(hTimer), util.toPointer(lpDueTime), lPeriod, util.toPointer(pfnCompletionRoutine), util.toPointer(lpArgToCompletionRoutine), util.boolToFfi(fResume)));
}

export function CancelWaitableTimer(
  hTimer: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.CancelWaitableTimer(util.toPointer(hTimer)));
}

export function CreateMutexExA(
  lpMutexAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
  dwDesiredAccess: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32_dll.CreateMutexExA(util.toPointer(lpMutexAttributes), util.pstrToFfi(lpName), dwFlags, dwDesiredAccess));
}

export function CreateMutexExW(
  lpMutexAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  dwDesiredAccess: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32_dll.CreateMutexExW(util.toPointer(lpMutexAttributes), util.pwstrToFfi(lpName), dwFlags, dwDesiredAccess));
}

export function CreateEventExA(
  lpEventAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwFlags: CREATE_EVENT /* Windows.Win32.System.Threading.CREATE_EVENT */,
  dwDesiredAccess: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32_dll.CreateEventExA(util.toPointer(lpEventAttributes), util.pstrToFfi(lpName), dwFlags, dwDesiredAccess));
}

export function CreateEventExW(
  lpEventAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: CREATE_EVENT /* Windows.Win32.System.Threading.CREATE_EVENT */,
  dwDesiredAccess: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32_dll.CreateEventExW(util.toPointer(lpEventAttributes), util.pwstrToFfi(lpName), dwFlags, dwDesiredAccess));
}

export function CreateSemaphoreExW(
  lpSemaphoreAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lInitialCount: number /* i32 */,
  lMaximumCount: number /* i32 */,
  lpName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  dwDesiredAccess: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32_dll.CreateSemaphoreExW(util.toPointer(lpSemaphoreAttributes), lInitialCount, lMaximumCount, util.pwstrToFfi(lpName), dwFlags, dwDesiredAccess));
}

export function CreateWaitableTimerExW(
  lpTimerAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpTimerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  dwDesiredAccess: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32_dll.CreateWaitableTimerExW(util.toPointer(lpTimerAttributes), util.pwstrToFfi(lpTimerName), dwFlags, dwDesiredAccess));
}

export function EnterSynchronizationBarrier(
  lpBarrier: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.EnterSynchronizationBarrier(util.toPointer(lpBarrier), dwFlags));
}

export function InitializeSynchronizationBarrier(
  lpBarrier: Deno.PointerValue | Uint8Array | null /* ptr */,
  lTotalThreads: number /* i32 */,
  lSpinCount: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.InitializeSynchronizationBarrier(util.toPointer(lpBarrier), lTotalThreads, lSpinCount));
}

export function DeleteSynchronizationBarrier(
  lpBarrier: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.DeleteSynchronizationBarrier(util.toPointer(lpBarrier)));
}

export function Sleep(
  dwMilliseconds: number /* u32 */,
): void /* void */ {
  return libKERNEL32_dll.Sleep(dwMilliseconds);
}

export function WaitOnAddress(
  Address: Deno.PointerValue | Uint8Array | null /* ptr */,
  CompareAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  AddressSize: Deno.PointerValue /* usize */,
  dwMilliseconds: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libapi_ms_win_core_synch_l1_2_0_dll.WaitOnAddress(util.toPointer(Address), util.toPointer(CompareAddress), AddressSize, dwMilliseconds));
}

export function WakeByAddressSingle(
  Address: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libapi_ms_win_core_synch_l1_2_0_dll.WakeByAddressSingle(util.toPointer(Address));
}

export function WakeByAddressAll(
  Address: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libapi_ms_win_core_synch_l1_2_0_dll.WakeByAddressAll(util.toPointer(Address));
}

export function WaitForMultipleObjects(
  nCount: number /* u32 */,
  lpHandles: Deno.PointerValue | Uint8Array | null /* ptr */,
  bWaitAll: boolean /* Windows.Win32.Foundation.BOOL */,
  dwMilliseconds: number /* u32 */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libKERNEL32_dll.WaitForMultipleObjects(nCount, util.toPointer(lpHandles), util.boolToFfi(bWaitAll), dwMilliseconds);
}

export function CreateSemaphoreW(
  lpSemaphoreAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lInitialCount: number /* i32 */,
  lMaximumCount: number /* i32 */,
  lpName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32_dll.CreateSemaphoreW(util.toPointer(lpSemaphoreAttributes), lInitialCount, lMaximumCount, util.pwstrToFfi(lpName)));
}

export function CreateWaitableTimerW(
  lpTimerAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  bManualReset: boolean /* Windows.Win32.Foundation.BOOL */,
  lpTimerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32_dll.CreateWaitableTimerW(util.toPointer(lpTimerAttributes), util.boolToFfi(bManualReset), util.pwstrToFfi(lpTimerName)));
}

export function InitializeSListHead(
  ListHead: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.InitializeSListHead(util.toPointer(ListHead));
}

export function InterlockedPopEntrySList(
  ListHead: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32_dll.InterlockedPopEntrySList(util.toPointer(ListHead)));
}

export function InterlockedPushEntrySList(
  ListHead: Deno.PointerValue | Uint8Array | null /* ptr */,
  ListEntry: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32_dll.InterlockedPushEntrySList(util.toPointer(ListHead), util.toPointer(ListEntry)));
}

export function InterlockedPushListSListEx(
  ListHead: Deno.PointerValue | Uint8Array | null /* ptr */,
  List: Deno.PointerValue | Uint8Array | null /* ptr */,
  ListEnd: Deno.PointerValue | Uint8Array | null /* ptr */,
  Count: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32_dll.InterlockedPushListSListEx(util.toPointer(ListHead), util.toPointer(List), util.toPointer(ListEnd), Count));
}

export function InterlockedFlushSList(
  ListHead: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32_dll.InterlockedFlushSList(util.toPointer(ListHead)));
}

export function QueryDepthSList(
  ListHead: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u16 */ {
  return libKERNEL32_dll.QueryDepthSList(util.toPointer(ListHead));
}

export function QueueUserAPC(
  pfnAPC: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PAPCFUNC */,
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwData: Deno.PointerValue /* usize */,
): number /* u32 */ {
  return libKERNEL32_dll.QueueUserAPC(util.toPointer(pfnAPC), util.toPointer(hThread), dwData);
}

export function QueueUserAPC2(
  ApcRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PAPCFUNC */,
  Thread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Data: Deno.PointerValue /* usize */,
  Flags: QUEUE_USER_APC_FLAGS /* Windows.Win32.System.Threading.QUEUE_USER_APC_FLAGS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.QueueUserAPC2(util.toPointer(ApcRoutine), util.toPointer(Thread), Data, Flags));
}

export function GetProcessTimes(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpCreationTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpExitTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpKernelTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpUserTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetProcessTimes(util.toPointer(hProcess), util.toPointer(lpCreationTime), util.toPointer(lpExitTime), util.toPointer(lpKernelTime), util.toPointer(lpUserTime)));
}

export function GetCurrentProcess(): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32_dll.GetCurrentProcess());
}

export function GetCurrentProcessId(): number /* u32 */ {
  return libKERNEL32_dll.GetCurrentProcessId();
}

export function ExitProcess(
  uExitCode: number /* u32 */,
): void /* void */ {
  return libKERNEL32_dll.ExitProcess(uExitCode);
}

export function TerminateProcess(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  uExitCode: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.TerminateProcess(util.toPointer(hProcess), uExitCode));
}

export function GetExitCodeProcess(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpExitCode: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetExitCodeProcess(util.toPointer(hProcess), util.toPointer(lpExitCode)));
}

export function SwitchToThread(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SwitchToThread());
}

export function CreateThread(
  lpThreadAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwStackSize: Deno.PointerValue /* usize */,
  lpStartAddress: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */,
  lpParameter: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwCreationFlags: THREAD_CREATION_FLAGS /* Windows.Win32.System.Threading.THREAD_CREATION_FLAGS */,
  lpThreadId: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32_dll.CreateThread(util.toPointer(lpThreadAttributes), dwStackSize, util.toPointer(lpStartAddress), util.toPointer(lpParameter), dwCreationFlags, util.toPointer(lpThreadId)));
}

export function CreateRemoteThread(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpThreadAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwStackSize: Deno.PointerValue /* usize */,
  lpStartAddress: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */,
  lpParameter: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwCreationFlags: number /* u32 */,
  lpThreadId: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32_dll.CreateRemoteThread(util.toPointer(hProcess), util.toPointer(lpThreadAttributes), dwStackSize, util.toPointer(lpStartAddress), util.toPointer(lpParameter), dwCreationFlags, util.toPointer(lpThreadId)));
}

export function GetCurrentThread(): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32_dll.GetCurrentThread());
}

export function GetCurrentThreadId(): number /* u32 */ {
  return libKERNEL32_dll.GetCurrentThreadId();
}

export function OpenThread(
  dwDesiredAccess: THREAD_ACCESS_RIGHTS /* Windows.Win32.System.Threading.THREAD_ACCESS_RIGHTS */,
  bInheritHandle: boolean /* Windows.Win32.Foundation.BOOL */,
  dwThreadId: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32_dll.OpenThread(dwDesiredAccess, util.boolToFfi(bInheritHandle), dwThreadId));
}

export function SetThreadPriority(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  nPriority: THREAD_PRIORITY /* Windows.Win32.System.Threading.THREAD_PRIORITY */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetThreadPriority(util.toPointer(hThread), nPriority));
}

export function SetThreadPriorityBoost(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  bDisablePriorityBoost: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetThreadPriorityBoost(util.toPointer(hThread), util.boolToFfi(bDisablePriorityBoost)));
}

export function GetThreadPriorityBoost(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pDisablePriorityBoost: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetThreadPriorityBoost(util.toPointer(hThread), util.toPointer(pDisablePriorityBoost)));
}

export function GetThreadPriority(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* i32 */ {
  return libKERNEL32_dll.GetThreadPriority(util.toPointer(hThread));
}

export function ExitThread(
  dwExitCode: number /* u32 */,
): void /* void */ {
  return libKERNEL32_dll.ExitThread(dwExitCode);
}

export function TerminateThread(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwExitCode: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.TerminateThread(util.toPointer(hThread), dwExitCode));
}

export function GetExitCodeThread(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpExitCode: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetExitCodeThread(util.toPointer(hThread), util.toPointer(lpExitCode)));
}

export function SuspendThread(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libKERNEL32_dll.SuspendThread(util.toPointer(hThread));
}

export function ResumeThread(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libKERNEL32_dll.ResumeThread(util.toPointer(hThread));
}

export function TlsAlloc(): number /* u32 */ {
  return libKERNEL32_dll.TlsAlloc();
}

export function TlsGetValue(
  dwTlsIndex: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32_dll.TlsGetValue(dwTlsIndex));
}

export function TlsSetValue(
  dwTlsIndex: number /* u32 */,
  lpTlsValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.TlsSetValue(dwTlsIndex, util.toPointer(lpTlsValue)));
}

export function TlsFree(
  dwTlsIndex: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.TlsFree(dwTlsIndex));
}

export function CreateProcessA(
  lpApplicationName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpCommandLine: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpProcessAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpThreadAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  bInheritHandles: boolean /* Windows.Win32.Foundation.BOOL */,
  dwCreationFlags: PROCESS_CREATION_FLAGS /* Windows.Win32.System.Threading.PROCESS_CREATION_FLAGS */,
  lpEnvironment: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCurrentDirectory: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpStartupInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpProcessInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.CreateProcessA(util.pstrToFfi(lpApplicationName), util.pstrToFfi(lpCommandLine), util.toPointer(lpProcessAttributes), util.toPointer(lpThreadAttributes), util.boolToFfi(bInheritHandles), dwCreationFlags, util.toPointer(lpEnvironment), util.pstrToFfi(lpCurrentDirectory), util.toPointer(lpStartupInfo), util.toPointer(lpProcessInformation)));
}

export function CreateProcessW(
  lpApplicationName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpCommandLine: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpProcessAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpThreadAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  bInheritHandles: boolean /* Windows.Win32.Foundation.BOOL */,
  dwCreationFlags: PROCESS_CREATION_FLAGS /* Windows.Win32.System.Threading.PROCESS_CREATION_FLAGS */,
  lpEnvironment: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCurrentDirectory: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpStartupInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpProcessInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.CreateProcessW(util.pwstrToFfi(lpApplicationName), util.pwstrToFfi(lpCommandLine), util.toPointer(lpProcessAttributes), util.toPointer(lpThreadAttributes), util.boolToFfi(bInheritHandles), dwCreationFlags, util.toPointer(lpEnvironment), util.pwstrToFfi(lpCurrentDirectory), util.toPointer(lpStartupInfo), util.toPointer(lpProcessInformation)));
}

export function SetProcessShutdownParameters(
  dwLevel: number /* u32 */,
  dwFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetProcessShutdownParameters(dwLevel, dwFlags));
}

export function GetProcessVersion(
  ProcessId: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.GetProcessVersion(ProcessId);
}

export function GetStartupInfoW(
  lpStartupInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.GetStartupInfoW(util.toPointer(lpStartupInfo));
}

export function CreateProcessAsUserW(
  hToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpApplicationName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpCommandLine: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpProcessAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpThreadAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  bInheritHandles: boolean /* Windows.Win32.Foundation.BOOL */,
  dwCreationFlags: number /* u32 */,
  lpEnvironment: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCurrentDirectory: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpStartupInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpProcessInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CreateProcessAsUserW(util.toPointer(hToken), util.pwstrToFfi(lpApplicationName), util.pwstrToFfi(lpCommandLine), util.toPointer(lpProcessAttributes), util.toPointer(lpThreadAttributes), util.boolToFfi(bInheritHandles), dwCreationFlags, util.toPointer(lpEnvironment), util.pwstrToFfi(lpCurrentDirectory), util.toPointer(lpStartupInfo), util.toPointer(lpProcessInformation)));
}

export function SetThreadToken(
  Thread: Deno.PointerValue | Uint8Array | null /* ptr */,
  Token: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.SetThreadToken(util.toPointer(Thread), util.toPointer(Token)));
}

export function OpenProcessToken(
  ProcessHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  DesiredAccess: TOKEN_ACCESS_MASK /* Windows.Win32.Security.TOKEN_ACCESS_MASK */,
  TokenHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.OpenProcessToken(util.toPointer(ProcessHandle), DesiredAccess, util.toPointer(TokenHandle)));
}

export function OpenThreadToken(
  ThreadHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  DesiredAccess: TOKEN_ACCESS_MASK /* Windows.Win32.Security.TOKEN_ACCESS_MASK */,
  OpenAsSelf: boolean /* Windows.Win32.Foundation.BOOL */,
  TokenHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.OpenThreadToken(util.toPointer(ThreadHandle), DesiredAccess, util.boolToFfi(OpenAsSelf), util.toPointer(TokenHandle)));
}

export function SetPriorityClass(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwPriorityClass: PROCESS_CREATION_FLAGS /* Windows.Win32.System.Threading.PROCESS_CREATION_FLAGS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetPriorityClass(util.toPointer(hProcess), dwPriorityClass));
}

export function GetPriorityClass(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libKERNEL32_dll.GetPriorityClass(util.toPointer(hProcess));
}

export function SetThreadStackGuarantee(
  StackSizeInBytes: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetThreadStackGuarantee(util.toPointer(StackSizeInBytes)));
}

export function GetProcessId(
  Process: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libKERNEL32_dll.GetProcessId(util.toPointer(Process));
}

export function GetThreadId(
  Thread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libKERNEL32_dll.GetThreadId(util.toPointer(Thread));
}

export function FlushProcessWriteBuffers(): void /* void */ {
  return libKERNEL32_dll.FlushProcessWriteBuffers();
}

export function GetProcessIdOfThread(
  Thread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libKERNEL32_dll.GetProcessIdOfThread(util.toPointer(Thread));
}

export function InitializeProcThreadAttributeList(
  lpAttributeList: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.LPPROC_THREAD_ATTRIBUTE_LIST */,
  dwAttributeCount: number /* u32 */,
  dwFlags: number /* u32 */,
  lpSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.InitializeProcThreadAttributeList(util.toPointer(lpAttributeList), dwAttributeCount, dwFlags, util.toPointer(lpSize)));
}

export function DeleteProcThreadAttributeList(
  lpAttributeList: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.LPPROC_THREAD_ATTRIBUTE_LIST */,
): void /* void */ {
  return libKERNEL32_dll.DeleteProcThreadAttributeList(util.toPointer(lpAttributeList));
}

export function UpdateProcThreadAttribute(
  lpAttributeList: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.LPPROC_THREAD_ATTRIBUTE_LIST */,
  dwFlags: number /* u32 */,
  Attribute: Deno.PointerValue /* usize */,
  lpValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbSize: Deno.PointerValue /* usize */,
  lpPreviousValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpReturnSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.UpdateProcThreadAttribute(util.toPointer(lpAttributeList), dwFlags, Attribute, util.toPointer(lpValue), cbSize, util.toPointer(lpPreviousValue), util.toPointer(lpReturnSize)));
}

export function SetProcessDynamicEHContinuationTargets(
  Process: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  NumberOfTargets: number /* u16 */,
  Targets: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetProcessDynamicEHContinuationTargets(util.toPointer(Process), NumberOfTargets, util.toPointer(Targets)));
}

export function SetProcessDynamicEnforcedCetCompatibleRanges(
  Process: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  NumberOfRanges: number /* u16 */,
  Ranges: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetProcessDynamicEnforcedCetCompatibleRanges(util.toPointer(Process), NumberOfRanges, util.toPointer(Ranges)));
}

export function SetProcessAffinityUpdateMode(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwFlags: PROCESS_AFFINITY_AUTO_UPDATE_FLAGS /* Windows.Win32.System.Threading.PROCESS_AFFINITY_AUTO_UPDATE_FLAGS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetProcessAffinityUpdateMode(util.toPointer(hProcess), dwFlags));
}

export function QueryProcessAffinityUpdateMode(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpdwFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.QueryProcessAffinityUpdateMode(util.toPointer(hProcess), util.toPointer(lpdwFlags)));
}

export function CreateRemoteThreadEx(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpThreadAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwStackSize: Deno.PointerValue /* usize */,
  lpStartAddress: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */,
  lpParameter: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwCreationFlags: number /* u32 */,
  lpAttributeList: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.LPPROC_THREAD_ATTRIBUTE_LIST */,
  lpThreadId: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32_dll.CreateRemoteThreadEx(util.toPointer(hProcess), util.toPointer(lpThreadAttributes), dwStackSize, util.toPointer(lpStartAddress), util.toPointer(lpParameter), dwCreationFlags, util.toPointer(lpAttributeList), util.toPointer(lpThreadId)));
}

export function GetCurrentThreadStackLimits(
  LowLimit: Deno.PointerValue | Uint8Array | null /* ptr */,
  HighLimit: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.GetCurrentThreadStackLimits(util.toPointer(LowLimit), util.toPointer(HighLimit));
}

export function GetProcessMitigationPolicy(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  MitigationPolicy: PROCESS_MITIGATION_POLICY /* Windows.Win32.System.Threading.PROCESS_MITIGATION_POLICY */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwLength: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetProcessMitigationPolicy(util.toPointer(hProcess), MitigationPolicy, util.toPointer(lpBuffer), dwLength));
}

export function SetProcessMitigationPolicy(
  MitigationPolicy: PROCESS_MITIGATION_POLICY /* Windows.Win32.System.Threading.PROCESS_MITIGATION_POLICY */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwLength: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetProcessMitigationPolicy(MitigationPolicy, util.toPointer(lpBuffer), dwLength));
}

export function GetThreadTimes(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpCreationTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpExitTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpKernelTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpUserTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetThreadTimes(util.toPointer(hThread), util.toPointer(lpCreationTime), util.toPointer(lpExitTime), util.toPointer(lpKernelTime), util.toPointer(lpUserTime)));
}

export function OpenProcess(
  dwDesiredAccess: PROCESS_ACCESS_RIGHTS /* Windows.Win32.System.Threading.PROCESS_ACCESS_RIGHTS */,
  bInheritHandle: boolean /* Windows.Win32.Foundation.BOOL */,
  dwProcessId: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32_dll.OpenProcess(dwDesiredAccess, util.boolToFfi(bInheritHandle), dwProcessId));
}

export function IsProcessorFeaturePresent(
  ProcessorFeature: PROCESSOR_FEATURE_ID /* Windows.Win32.System.Threading.PROCESSOR_FEATURE_ID */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.IsProcessorFeaturePresent(ProcessorFeature));
}

export function GetProcessHandleCount(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pdwHandleCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetProcessHandleCount(util.toPointer(hProcess), util.toPointer(pdwHandleCount)));
}

export function GetCurrentProcessorNumber(): number /* u32 */ {
  return libKERNEL32_dll.GetCurrentProcessorNumber();
}

export function SetThreadIdealProcessorEx(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpIdealProcessor: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpPreviousIdealProcessor: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetThreadIdealProcessorEx(util.toPointer(hThread), util.toPointer(lpIdealProcessor), util.toPointer(lpPreviousIdealProcessor)));
}

export function GetThreadIdealProcessorEx(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpIdealProcessor: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetThreadIdealProcessorEx(util.toPointer(hThread), util.toPointer(lpIdealProcessor)));
}

export function GetCurrentProcessorNumberEx(
  ProcNumber: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.GetCurrentProcessorNumberEx(util.toPointer(ProcNumber));
}

export function GetProcessPriorityBoost(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pDisablePriorityBoost: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetProcessPriorityBoost(util.toPointer(hProcess), util.toPointer(pDisablePriorityBoost)));
}

export function SetProcessPriorityBoost(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  bDisablePriorityBoost: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetProcessPriorityBoost(util.toPointer(hProcess), util.boolToFfi(bDisablePriorityBoost)));
}

export function GetThreadIOPendingFlag(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpIOIsPending: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetThreadIOPendingFlag(util.toPointer(hThread), util.toPointer(lpIOIsPending)));
}

export function GetSystemTimes(
  lpIdleTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpKernelTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpUserTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetSystemTimes(util.toPointer(lpIdleTime), util.toPointer(lpKernelTime), util.toPointer(lpUserTime)));
}

export function GetThreadInformation(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ThreadInformationClass: THREAD_INFORMATION_CLASS /* Windows.Win32.System.Threading.THREAD_INFORMATION_CLASS */,
  ThreadInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  ThreadInformationSize: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetThreadInformation(util.toPointer(hThread), ThreadInformationClass, util.toPointer(ThreadInformation), ThreadInformationSize));
}

export function SetThreadInformation(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ThreadInformationClass: THREAD_INFORMATION_CLASS /* Windows.Win32.System.Threading.THREAD_INFORMATION_CLASS */,
  ThreadInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  ThreadInformationSize: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetThreadInformation(util.toPointer(hThread), ThreadInformationClass, util.toPointer(ThreadInformation), ThreadInformationSize));
}

export function IsProcessCritical(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Critical: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.IsProcessCritical(util.toPointer(hProcess), util.toPointer(Critical)));
}

export function SetProtectedPolicy(
  PolicyGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  PolicyValue: Deno.PointerValue /* usize */,
  OldPolicyValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetProtectedPolicy(util.toPointer(PolicyGuid), PolicyValue, util.toPointer(OldPolicyValue)));
}

export function QueryProtectedPolicy(
  PolicyGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  PolicyValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.QueryProtectedPolicy(util.toPointer(PolicyGuid), util.toPointer(PolicyValue)));
}

export function SetThreadIdealProcessor(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwIdealProcessor: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.SetThreadIdealProcessor(util.toPointer(hThread), dwIdealProcessor);
}

export function SetProcessInformation(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ProcessInformationClass: PROCESS_INFORMATION_CLASS /* Windows.Win32.System.Threading.PROCESS_INFORMATION_CLASS */,
  ProcessInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  ProcessInformationSize: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetProcessInformation(util.toPointer(hProcess), ProcessInformationClass, util.toPointer(ProcessInformation), ProcessInformationSize));
}

export function GetProcessInformation(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ProcessInformationClass: PROCESS_INFORMATION_CLASS /* Windows.Win32.System.Threading.PROCESS_INFORMATION_CLASS */,
  ProcessInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  ProcessInformationSize: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetProcessInformation(util.toPointer(hProcess), ProcessInformationClass, util.toPointer(ProcessInformation), ProcessInformationSize));
}

export function GetProcessDefaultCpuSets(
  Process: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  CpuSetIds: Deno.PointerValue | Uint8Array | null /* ptr */,
  CpuSetIdCount: number /* u32 */,
  RequiredIdCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetProcessDefaultCpuSets(util.toPointer(Process), util.toPointer(CpuSetIds), CpuSetIdCount, util.toPointer(RequiredIdCount)));
}

export function SetProcessDefaultCpuSets(
  Process: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  CpuSetIds: Deno.PointerValue | Uint8Array | null /* ptr */,
  CpuSetIdCount: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetProcessDefaultCpuSets(util.toPointer(Process), util.toPointer(CpuSetIds), CpuSetIdCount));
}

export function GetThreadSelectedCpuSets(
  Thread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  CpuSetIds: Deno.PointerValue | Uint8Array | null /* ptr */,
  CpuSetIdCount: number /* u32 */,
  RequiredIdCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetThreadSelectedCpuSets(util.toPointer(Thread), util.toPointer(CpuSetIds), CpuSetIdCount, util.toPointer(RequiredIdCount)));
}

export function SetThreadSelectedCpuSets(
  Thread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  CpuSetIds: Deno.PointerValue | Uint8Array | null /* ptr */,
  CpuSetIdCount: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetThreadSelectedCpuSets(util.toPointer(Thread), util.toPointer(CpuSetIds), CpuSetIdCount));
}

export function CreateProcessAsUserA(
  hToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpApplicationName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpCommandLine: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpProcessAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpThreadAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  bInheritHandles: boolean /* Windows.Win32.Foundation.BOOL */,
  dwCreationFlags: number /* u32 */,
  lpEnvironment: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCurrentDirectory: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpStartupInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpProcessInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CreateProcessAsUserA(util.toPointer(hToken), util.pstrToFfi(lpApplicationName), util.pstrToFfi(lpCommandLine), util.toPointer(lpProcessAttributes), util.toPointer(lpThreadAttributes), util.boolToFfi(bInheritHandles), dwCreationFlags, util.toPointer(lpEnvironment), util.pstrToFfi(lpCurrentDirectory), util.toPointer(lpStartupInfo), util.toPointer(lpProcessInformation)));
}

export function GetProcessShutdownParameters(
  lpdwLevel: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetProcessShutdownParameters(util.toPointer(lpdwLevel), util.toPointer(lpdwFlags)));
}

export function GetProcessDefaultCpuSetMasks(
  Process: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  CpuSetMasks: Deno.PointerValue | Uint8Array | null /* ptr */,
  CpuSetMaskCount: number /* u16 */,
  RequiredMaskCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetProcessDefaultCpuSetMasks(util.toPointer(Process), util.toPointer(CpuSetMasks), CpuSetMaskCount, util.toPointer(RequiredMaskCount)));
}

export function SetProcessDefaultCpuSetMasks(
  Process: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  CpuSetMasks: Deno.PointerValue | Uint8Array | null /* ptr */,
  CpuSetMaskCount: number /* u16 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetProcessDefaultCpuSetMasks(util.toPointer(Process), util.toPointer(CpuSetMasks), CpuSetMaskCount));
}

export function GetThreadSelectedCpuSetMasks(
  Thread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  CpuSetMasks: Deno.PointerValue | Uint8Array | null /* ptr */,
  CpuSetMaskCount: number /* u16 */,
  RequiredMaskCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetThreadSelectedCpuSetMasks(util.toPointer(Thread), util.toPointer(CpuSetMasks), CpuSetMaskCount, util.toPointer(RequiredMaskCount)));
}

export function SetThreadSelectedCpuSetMasks(
  Thread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  CpuSetMasks: Deno.PointerValue | Uint8Array | null /* ptr */,
  CpuSetMaskCount: number /* u16 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetThreadSelectedCpuSetMasks(util.toPointer(Thread), util.toPointer(CpuSetMasks), CpuSetMaskCount));
}

export function GetMachineTypeAttributes(
  Machine: number /* u16 */,
  MachineTypeAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libKERNEL32_dll.GetMachineTypeAttributes(Machine, util.toPointer(MachineTypeAttributes)));
}

export function SetThreadDescription(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpThreadDescription: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libKERNEL32_dll.SetThreadDescription(util.toPointer(hThread), util.pwstrToFfi(lpThreadDescription)));
}

export function GetThreadDescription(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ppszThreadDescription: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libKERNEL32_dll.GetThreadDescription(util.toPointer(hThread), util.toPointer(ppszThreadDescription)));
}

export function QueueUserWorkItem(
  Function: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */,
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: WORKER_THREAD_FLAGS /* Windows.Win32.System.Threading.WORKER_THREAD_FLAGS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.QueueUserWorkItem(util.toPointer(Function), util.toPointer(Context), Flags));
}

export function UnregisterWaitEx(
  WaitHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  CompletionEvent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.UnregisterWaitEx(util.toPointer(WaitHandle), util.toPointer(CompletionEvent)));
}

export function CreateTimerQueue(): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32_dll.CreateTimerQueue());
}

export function CreateTimerQueueTimer(
  phNewTimer: Deno.PointerValue | Uint8Array | null /* ptr */,
  TimerQueue: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.WAITORTIMERCALLBACK */,
  Parameter: Deno.PointerValue | Uint8Array | null /* ptr */,
  DueTime: number /* u32 */,
  Period: number /* u32 */,
  Flags: WORKER_THREAD_FLAGS /* Windows.Win32.System.Threading.WORKER_THREAD_FLAGS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.CreateTimerQueueTimer(util.toPointer(phNewTimer), util.toPointer(TimerQueue), util.toPointer(Callback), util.toPointer(Parameter), DueTime, Period, Flags));
}

export function ChangeTimerQueueTimer(
  TimerQueue: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Timer: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  DueTime: number /* u32 */,
  Period: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.ChangeTimerQueueTimer(util.toPointer(TimerQueue), util.toPointer(Timer), DueTime, Period));
}

export function DeleteTimerQueueTimer(
  TimerQueue: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Timer: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  CompletionEvent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.DeleteTimerQueueTimer(util.toPointer(TimerQueue), util.toPointer(Timer), util.toPointer(CompletionEvent)));
}

export function DeleteTimerQueue(
  TimerQueue: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.DeleteTimerQueue(util.toPointer(TimerQueue)));
}

export function DeleteTimerQueueEx(
  TimerQueue: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  CompletionEvent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.DeleteTimerQueueEx(util.toPointer(TimerQueue), util.toPointer(CompletionEvent)));
}

export function CreateThreadpool(
  reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.System.Threading.PTP_POOL */ {
  return util.pointerFromFfi(libKERNEL32_dll.CreateThreadpool(util.toPointer(reserved)));
}

export function SetThreadpoolThreadMaximum(
  ptpp: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.PTP_POOL */,
  cthrdMost: number /* u32 */,
): void /* void */ {
  return libKERNEL32_dll.SetThreadpoolThreadMaximum(util.toPointer(ptpp), cthrdMost);
}

export function SetThreadpoolThreadMinimum(
  ptpp: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.PTP_POOL */,
  cthrdMic: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetThreadpoolThreadMinimum(util.toPointer(ptpp), cthrdMic));
}

export function SetThreadpoolStackInformation(
  ptpp: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.PTP_POOL */,
  ptpsi: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetThreadpoolStackInformation(util.toPointer(ptpp), util.toPointer(ptpsi)));
}

export function QueryThreadpoolStackInformation(
  ptpp: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.PTP_POOL */,
  ptpsi: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.QueryThreadpoolStackInformation(util.toPointer(ptpp), util.toPointer(ptpsi)));
}

export function CloseThreadpool(
  ptpp: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.PTP_POOL */,
): void /* void */ {
  return libKERNEL32_dll.CloseThreadpool(util.toPointer(ptpp));
}

export function CreateThreadpoolCleanupGroup(): Deno.PointerValue /* isize */ {
  return libKERNEL32_dll.CreateThreadpoolCleanupGroup();
}

export function CloseThreadpoolCleanupGroupMembers(
  ptpcg: Deno.PointerValue /* isize */,
  fCancelPendingCallbacks: boolean /* Windows.Win32.Foundation.BOOL */,
  pvCleanupContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.CloseThreadpoolCleanupGroupMembers(ptpcg, util.boolToFfi(fCancelPendingCallbacks), util.toPointer(pvCleanupContext));
}

export function CloseThreadpoolCleanupGroup(
  ptpcg: Deno.PointerValue /* isize */,
): void /* void */ {
  return libKERNEL32_dll.CloseThreadpoolCleanupGroup(ptpcg);
}

export function SetEventWhenCallbackReturns(
  pci: Deno.PointerValue | Uint8Array | null /* ptr */,
  evt: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): void /* void */ {
  return libKERNEL32_dll.SetEventWhenCallbackReturns(util.toPointer(pci), util.toPointer(evt));
}

export function ReleaseSemaphoreWhenCallbackReturns(
  pci: Deno.PointerValue | Uint8Array | null /* ptr */,
  sem: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  crel: number /* u32 */,
): void /* void */ {
  return libKERNEL32_dll.ReleaseSemaphoreWhenCallbackReturns(util.toPointer(pci), util.toPointer(sem), crel);
}

export function ReleaseMutexWhenCallbackReturns(
  pci: Deno.PointerValue | Uint8Array | null /* ptr */,
  mut: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): void /* void */ {
  return libKERNEL32_dll.ReleaseMutexWhenCallbackReturns(util.toPointer(pci), util.toPointer(mut));
}

export function LeaveCriticalSectionWhenCallbackReturns(
  pci: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcs: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.LeaveCriticalSectionWhenCallbackReturns(util.toPointer(pci), util.toPointer(pcs));
}

export function FreeLibraryWhenCallbackReturns(
  pci: Deno.PointerValue | Uint8Array | null /* ptr */,
  mod: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
): void /* void */ {
  return libKERNEL32_dll.FreeLibraryWhenCallbackReturns(util.toPointer(pci), util.toPointer(mod));
}

export function CallbackMayRunLong(
  pci: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.CallbackMayRunLong(util.toPointer(pci)));
}

export function DisassociateCurrentThreadFromCallback(
  pci: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.DisassociateCurrentThreadFromCallback(util.toPointer(pci));
}

export function TrySubmitThreadpoolCallback(
  pfns: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.PTP_SIMPLE_CALLBACK */,
  pv: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbe: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.TrySubmitThreadpoolCallback(util.toPointer(pfns), util.toPointer(pv), util.toPointer(pcbe)));
}

export function CreateThreadpoolWork(
  pfnwk: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.PTP_WORK_CALLBACK */,
  pv: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbe: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32_dll.CreateThreadpoolWork(util.toPointer(pfnwk), util.toPointer(pv), util.toPointer(pcbe)));
}

export function SubmitThreadpoolWork(
  pwk: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.SubmitThreadpoolWork(util.toPointer(pwk));
}

export function WaitForThreadpoolWorkCallbacks(
  pwk: Deno.PointerValue | Uint8Array | null /* ptr */,
  fCancelPendingCallbacks: boolean /* Windows.Win32.Foundation.BOOL */,
): void /* void */ {
  return libKERNEL32_dll.WaitForThreadpoolWorkCallbacks(util.toPointer(pwk), util.boolToFfi(fCancelPendingCallbacks));
}

export function CloseThreadpoolWork(
  pwk: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.CloseThreadpoolWork(util.toPointer(pwk));
}

export function CreateThreadpoolTimer(
  pfnti: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.PTP_TIMER_CALLBACK */,
  pv: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbe: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32_dll.CreateThreadpoolTimer(util.toPointer(pfnti), util.toPointer(pv), util.toPointer(pcbe)));
}

export function SetThreadpoolTimer(
  pti: Deno.PointerValue | Uint8Array | null /* ptr */,
  pftDueTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  msPeriod: number /* u32 */,
  msWindowLength: number /* u32 */,
): void /* void */ {
  return libKERNEL32_dll.SetThreadpoolTimer(util.toPointer(pti), util.toPointer(pftDueTime), msPeriod, msWindowLength);
}

export function IsThreadpoolTimerSet(
  pti: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.IsThreadpoolTimerSet(util.toPointer(pti)));
}

export function WaitForThreadpoolTimerCallbacks(
  pti: Deno.PointerValue | Uint8Array | null /* ptr */,
  fCancelPendingCallbacks: boolean /* Windows.Win32.Foundation.BOOL */,
): void /* void */ {
  return libKERNEL32_dll.WaitForThreadpoolTimerCallbacks(util.toPointer(pti), util.boolToFfi(fCancelPendingCallbacks));
}

export function CloseThreadpoolTimer(
  pti: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.CloseThreadpoolTimer(util.toPointer(pti));
}

export function CreateThreadpoolWait(
  pfnwa: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.PTP_WAIT_CALLBACK */,
  pv: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbe: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32_dll.CreateThreadpoolWait(util.toPointer(pfnwa), util.toPointer(pv), util.toPointer(pcbe)));
}

export function SetThreadpoolWait(
  pwa: Deno.PointerValue | Uint8Array | null /* ptr */,
  h: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pftTimeout: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.SetThreadpoolWait(util.toPointer(pwa), util.toPointer(h), util.toPointer(pftTimeout));
}

export function WaitForThreadpoolWaitCallbacks(
  pwa: Deno.PointerValue | Uint8Array | null /* ptr */,
  fCancelPendingCallbacks: boolean /* Windows.Win32.Foundation.BOOL */,
): void /* void */ {
  return libKERNEL32_dll.WaitForThreadpoolWaitCallbacks(util.toPointer(pwa), util.boolToFfi(fCancelPendingCallbacks));
}

export function CloseThreadpoolWait(
  pwa: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.CloseThreadpoolWait(util.toPointer(pwa));
}

export function CreateThreadpoolIo(
  fl: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pfnio: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.PTP_WIN32_IO_CALLBACK */,
  pv: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbe: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32_dll.CreateThreadpoolIo(util.toPointer(fl), util.toPointer(pfnio), util.toPointer(pv), util.toPointer(pcbe)));
}

export function StartThreadpoolIo(
  pio: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.StartThreadpoolIo(util.toPointer(pio));
}

export function CancelThreadpoolIo(
  pio: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.CancelThreadpoolIo(util.toPointer(pio));
}

export function WaitForThreadpoolIoCallbacks(
  pio: Deno.PointerValue | Uint8Array | null /* ptr */,
  fCancelPendingCallbacks: boolean /* Windows.Win32.Foundation.BOOL */,
): void /* void */ {
  return libKERNEL32_dll.WaitForThreadpoolIoCallbacks(util.toPointer(pio), util.boolToFfi(fCancelPendingCallbacks));
}

export function CloseThreadpoolIo(
  pio: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.CloseThreadpoolIo(util.toPointer(pio));
}

export function SetThreadpoolTimerEx(
  pti: Deno.PointerValue | Uint8Array | null /* ptr */,
  pftDueTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  msPeriod: number /* u32 */,
  msWindowLength: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetThreadpoolTimerEx(util.toPointer(pti), util.toPointer(pftDueTime), msPeriod, msWindowLength));
}

export function SetThreadpoolWaitEx(
  pwa: Deno.PointerValue | Uint8Array | null /* ptr */,
  h: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pftTimeout: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetThreadpoolWaitEx(util.toPointer(pwa), util.toPointer(h), util.toPointer(pftTimeout), util.toPointer(Reserved)));
}

export function IsWow64Process(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Wow64Process: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.IsWow64Process(util.toPointer(hProcess), util.toPointer(Wow64Process)));
}

export function Wow64SetThreadDefaultGuestMachine(
  Machine: number /* u16 */,
): number /* u16 */ {
  return libapi_ms_win_core_wow64_l1_1_1_dll.Wow64SetThreadDefaultGuestMachine(Machine);
}

export function IsWow64Process2(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pProcessMachine: Deno.PointerValue | Uint8Array | null /* ptr */,
  pNativeMachine: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.IsWow64Process2(util.toPointer(hProcess), util.toPointer(pProcessMachine), util.toPointer(pNativeMachine)));
}

export function Wow64SuspendThread(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libKERNEL32_dll.Wow64SuspendThread(util.toPointer(hThread));
}

export function CreatePrivateNamespaceW(
  lpPrivateNamespaceAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpBoundaryDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpAliasPrefix: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.System.Threading.NamespaceHandle */ {
  return util.pointerFromFfi(libKERNEL32_dll.CreatePrivateNamespaceW(util.toPointer(lpPrivateNamespaceAttributes), util.toPointer(lpBoundaryDescriptor), util.pwstrToFfi(lpAliasPrefix)));
}

export function OpenPrivateNamespaceW(
  lpBoundaryDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpAliasPrefix: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.System.Threading.NamespaceHandle */ {
  return util.pointerFromFfi(libKERNEL32_dll.OpenPrivateNamespaceW(util.toPointer(lpBoundaryDescriptor), util.pwstrToFfi(lpAliasPrefix)));
}

export function ClosePrivateNamespace(
  Handle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.NamespaceHandle */,
  Flags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libKERNEL32_dll.ClosePrivateNamespace(util.toPointer(Handle), Flags));
}

export function CreateBoundaryDescriptorW(
  Name: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.System.Threading.BoundaryDescriptorHandle */ {
  return util.pointerFromFfi(libKERNEL32_dll.CreateBoundaryDescriptorW(util.pwstrToFfi(Name), Flags));
}

export function AddSIDToBoundaryDescriptor(
  BoundaryDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  RequiredSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.AddSIDToBoundaryDescriptor(util.toPointer(BoundaryDescriptor), util.toPointer(RequiredSid)));
}

export function DeleteBoundaryDescriptor(
  BoundaryDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.BoundaryDescriptorHandle */,
): void /* void */ {
  return libKERNEL32_dll.DeleteBoundaryDescriptor(util.toPointer(BoundaryDescriptor));
}

export function GetNumaHighestNodeNumber(
  HighestNodeNumber: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetNumaHighestNodeNumber(util.toPointer(HighestNodeNumber)));
}

export function GetNumaNodeProcessorMaskEx(
  Node: number /* u16 */,
  ProcessorMask: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetNumaNodeProcessorMaskEx(Node, util.toPointer(ProcessorMask)));
}

export function GetNumaNodeProcessorMask2(
  NodeNumber: number /* u16 */,
  ProcessorMasks: Deno.PointerValue | Uint8Array | null /* ptr */,
  ProcessorMaskCount: number /* u16 */,
  RequiredMaskCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetNumaNodeProcessorMask2(NodeNumber, util.toPointer(ProcessorMasks), ProcessorMaskCount, util.toPointer(RequiredMaskCount)));
}

export function GetNumaProximityNodeEx(
  ProximityId: number /* u32 */,
  NodeNumber: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetNumaProximityNodeEx(ProximityId, util.toPointer(NodeNumber)));
}

export function GetProcessGroupAffinity(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  GroupCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  GroupArray: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetProcessGroupAffinity(util.toPointer(hProcess), util.toPointer(GroupCount), util.toPointer(GroupArray)));
}

export function GetThreadGroupAffinity(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  GroupAffinity: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetThreadGroupAffinity(util.toPointer(hThread), util.toPointer(GroupAffinity)));
}

export function SetThreadGroupAffinity(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  GroupAffinity: Deno.PointerValue | Uint8Array | null /* ptr */,
  PreviousGroupAffinity: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetThreadGroupAffinity(util.toPointer(hThread), util.toPointer(GroupAffinity), util.toPointer(PreviousGroupAffinity)));
}

export function AvSetMmThreadCharacteristicsA(
  TaskName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  TaskIndex: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libAVRT_dll.AvSetMmThreadCharacteristicsA(util.pstrToFfi(TaskName), util.toPointer(TaskIndex)));
}

export function AvSetMmThreadCharacteristicsW(
  TaskName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  TaskIndex: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libAVRT_dll.AvSetMmThreadCharacteristicsW(util.pwstrToFfi(TaskName), util.toPointer(TaskIndex)));
}

export function AvSetMmMaxThreadCharacteristicsA(
  FirstTask: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  SecondTask: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  TaskIndex: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libAVRT_dll.AvSetMmMaxThreadCharacteristicsA(util.pstrToFfi(FirstTask), util.pstrToFfi(SecondTask), util.toPointer(TaskIndex)));
}

export function AvSetMmMaxThreadCharacteristicsW(
  FirstTask: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SecondTask: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  TaskIndex: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libAVRT_dll.AvSetMmMaxThreadCharacteristicsW(util.pwstrToFfi(FirstTask), util.pwstrToFfi(SecondTask), util.toPointer(TaskIndex)));
}

export function AvRevertMmThreadCharacteristics(
  AvrtHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAVRT_dll.AvRevertMmThreadCharacteristics(util.toPointer(AvrtHandle)));
}

export function AvSetMmThreadPriority(
  AvrtHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Priority: AVRT_PRIORITY /* Windows.Win32.System.Threading.AVRT_PRIORITY */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAVRT_dll.AvSetMmThreadPriority(util.toPointer(AvrtHandle), Priority));
}

export function AvRtCreateThreadOrderingGroup(
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
  Period: Deno.PointerValue | Uint8Array | null /* ptr */,
  ThreadOrderingGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  Timeout: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAVRT_dll.AvRtCreateThreadOrderingGroup(util.toPointer(Context), util.toPointer(Period), util.toPointer(ThreadOrderingGuid), util.toPointer(Timeout)));
}

export function AvRtCreateThreadOrderingGroupExA(
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
  Period: Deno.PointerValue | Uint8Array | null /* ptr */,
  ThreadOrderingGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  Timeout: Deno.PointerValue | Uint8Array | null /* ptr */,
  TaskName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAVRT_dll.AvRtCreateThreadOrderingGroupExA(util.toPointer(Context), util.toPointer(Period), util.toPointer(ThreadOrderingGuid), util.toPointer(Timeout), util.pstrToFfi(TaskName)));
}

export function AvRtCreateThreadOrderingGroupExW(
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
  Period: Deno.PointerValue | Uint8Array | null /* ptr */,
  ThreadOrderingGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  Timeout: Deno.PointerValue | Uint8Array | null /* ptr */,
  TaskName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAVRT_dll.AvRtCreateThreadOrderingGroupExW(util.toPointer(Context), util.toPointer(Period), util.toPointer(ThreadOrderingGuid), util.toPointer(Timeout), util.pwstrToFfi(TaskName)));
}

export function AvRtJoinThreadOrderingGroup(
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
  ThreadOrderingGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  Before: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAVRT_dll.AvRtJoinThreadOrderingGroup(util.toPointer(Context), util.toPointer(ThreadOrderingGuid), util.boolToFfi(Before)));
}

export function AvRtWaitOnThreadOrderingGroup(
  Context: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAVRT_dll.AvRtWaitOnThreadOrderingGroup(util.toPointer(Context)));
}

export function AvRtLeaveThreadOrderingGroup(
  Context: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAVRT_dll.AvRtLeaveThreadOrderingGroup(util.toPointer(Context)));
}

export function AvRtDeleteThreadOrderingGroup(
  Context: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAVRT_dll.AvRtDeleteThreadOrderingGroup(util.toPointer(Context)));
}

export function AvQuerySystemResponsiveness(
  AvrtHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  SystemResponsivenessValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAVRT_dll.AvQuerySystemResponsiveness(util.toPointer(AvrtHandle), util.toPointer(SystemResponsivenessValue)));
}

export function AttachThreadInput(
  idAttach: number /* u32 */,
  idAttachTo: number /* u32 */,
  fAttach: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.AttachThreadInput(idAttach, idAttachTo, util.boolToFfi(fAttach)));
}

export function WaitForInputIdle(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwMilliseconds: number /* u32 */,
): number /* u32 */ {
  return libUSER32_dll.WaitForInputIdle(util.toPointer(hProcess), dwMilliseconds);
}

export function GetGuiResources(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  uiFlags: GET_GUI_RESOURCES_FLAGS /* Windows.Win32.System.Threading.GET_GUI_RESOURCES_FLAGS */,
): number /* u32 */ {
  return libUSER32_dll.GetGuiResources(util.toPointer(hProcess), uiFlags);
}

export function IsImmersiveProcess(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.IsImmersiveProcess(util.toPointer(hProcess)));
}

export function SetProcessRestrictionExemption(
  fEnableExemption: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.SetProcessRestrictionExemption(util.boolToFfi(fEnableExemption)));
}

export function GetProcessAffinityMask(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpProcessAffinityMask: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpSystemAffinityMask: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetProcessAffinityMask(util.toPointer(hProcess), util.toPointer(lpProcessAffinityMask), util.toPointer(lpSystemAffinityMask)));
}

export function SetProcessAffinityMask(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwProcessAffinityMask: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetProcessAffinityMask(util.toPointer(hProcess), dwProcessAffinityMask));
}

export function GetProcessIoCounters(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpIoCounters: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetProcessIoCounters(util.toPointer(hProcess), util.toPointer(lpIoCounters)));
}

export function SwitchToFiber(
  lpFiber: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.SwitchToFiber(util.toPointer(lpFiber));
}

export function DeleteFiber(
  lpFiber: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.DeleteFiber(util.toPointer(lpFiber));
}

export function ConvertFiberToThread(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.ConvertFiberToThread());
}

export function CreateFiberEx(
  dwStackCommitSize: Deno.PointerValue /* usize */,
  dwStackReserveSize: Deno.PointerValue /* usize */,
  dwFlags: number /* u32 */,
  lpStartAddress: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.LPFIBER_START_ROUTINE */,
  lpParameter: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32_dll.CreateFiberEx(dwStackCommitSize, dwStackReserveSize, dwFlags, util.toPointer(lpStartAddress), util.toPointer(lpParameter)));
}

export function ConvertThreadToFiberEx(
  lpParameter: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32_dll.ConvertThreadToFiberEx(util.toPointer(lpParameter), dwFlags));
}

export function CreateFiber(
  dwStackSize: Deno.PointerValue /* usize */,
  lpStartAddress: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.LPFIBER_START_ROUTINE */,
  lpParameter: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32_dll.CreateFiber(dwStackSize, util.toPointer(lpStartAddress), util.toPointer(lpParameter)));
}

export function ConvertThreadToFiber(
  lpParameter: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32_dll.ConvertThreadToFiber(util.toPointer(lpParameter)));
}

export function CreateUmsCompletionList(
  UmsCompletionList: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.CreateUmsCompletionList(util.toPointer(UmsCompletionList)));
}

export function DequeueUmsCompletionListItems(
  UmsCompletionList: Deno.PointerValue | Uint8Array | null /* ptr */,
  WaitTimeOut: number /* u32 */,
  UmsThreadList: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.DequeueUmsCompletionListItems(util.toPointer(UmsCompletionList), WaitTimeOut, util.toPointer(UmsThreadList)));
}

export function GetUmsCompletionListEvent(
  UmsCompletionList: Deno.PointerValue | Uint8Array | null /* ptr */,
  UmsCompletionEvent: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetUmsCompletionListEvent(util.toPointer(UmsCompletionList), util.toPointer(UmsCompletionEvent)));
}

export function ExecuteUmsThread(
  UmsThread: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.ExecuteUmsThread(util.toPointer(UmsThread)));
}

export function UmsThreadYield(
  SchedulerParam: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.UmsThreadYield(util.toPointer(SchedulerParam)));
}

export function DeleteUmsCompletionList(
  UmsCompletionList: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.DeleteUmsCompletionList(util.toPointer(UmsCompletionList)));
}

export function GetCurrentUmsThread(): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32_dll.GetCurrentUmsThread());
}

export function GetNextUmsListItem(
  UmsContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32_dll.GetNextUmsListItem(util.toPointer(UmsContext)));
}

export function QueryUmsThreadInformation(
  UmsThread: Deno.PointerValue | Uint8Array | null /* ptr */,
  UmsThreadInfoClass: RTL_UMS_THREAD_INFO_CLASS /* Windows.Win32.System.Threading.RTL_UMS_THREAD_INFO_CLASS */,
  UmsThreadInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  UmsThreadInformationLength: number /* u32 */,
  ReturnLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.QueryUmsThreadInformation(util.toPointer(UmsThread), UmsThreadInfoClass, util.toPointer(UmsThreadInformation), UmsThreadInformationLength, util.toPointer(ReturnLength)));
}

export function SetUmsThreadInformation(
  UmsThread: Deno.PointerValue | Uint8Array | null /* ptr */,
  UmsThreadInfoClass: RTL_UMS_THREAD_INFO_CLASS /* Windows.Win32.System.Threading.RTL_UMS_THREAD_INFO_CLASS */,
  UmsThreadInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  UmsThreadInformationLength: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetUmsThreadInformation(util.toPointer(UmsThread), UmsThreadInfoClass, util.toPointer(UmsThreadInformation), UmsThreadInformationLength));
}

export function DeleteUmsThreadContext(
  UmsThread: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.DeleteUmsThreadContext(util.toPointer(UmsThread)));
}

export function CreateUmsThreadContext(
  lpUmsThread: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.CreateUmsThreadContext(util.toPointer(lpUmsThread)));
}

export function EnterUmsSchedulingMode(
  SchedulerStartupInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.EnterUmsSchedulingMode(util.toPointer(SchedulerStartupInfo)));
}

export function GetUmsSystemThreadInformation(
  ThreadHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  SystemThreadInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetUmsSystemThreadInformation(util.toPointer(ThreadHandle), util.toPointer(SystemThreadInfo)));
}

export function SetThreadAffinityMask(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwThreadAffinityMask: Deno.PointerValue /* usize */,
): Deno.PointerValue /* usize */ {
  return libKERNEL32_dll.SetThreadAffinityMask(util.toPointer(hThread), dwThreadAffinityMask);
}

export function SetProcessDEPPolicy(
  dwFlags: PROCESS_DEP_FLAGS /* Windows.Win32.System.Threading.PROCESS_DEP_FLAGS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetProcessDEPPolicy(dwFlags));
}

export function GetProcessDEPPolicy(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpPermanent: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetProcessDEPPolicy(util.toPointer(hProcess), util.toPointer(lpFlags), util.toPointer(lpPermanent)));
}

export function PulseEvent(
  hEvent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.PulseEvent(util.toPointer(hEvent)));
}

export function WinExec(
  lpCmdLine: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  uCmdShow: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.WinExec(util.pstrToFfi(lpCmdLine), uCmdShow);
}

export function CreateSemaphoreA(
  lpSemaphoreAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lInitialCount: number /* i32 */,
  lMaximumCount: number /* i32 */,
  lpName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32_dll.CreateSemaphoreA(util.toPointer(lpSemaphoreAttributes), lInitialCount, lMaximumCount, util.pstrToFfi(lpName)));
}

export function CreateSemaphoreExA(
  lpSemaphoreAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lInitialCount: number /* i32 */,
  lMaximumCount: number /* i32 */,
  lpName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
  dwDesiredAccess: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32_dll.CreateSemaphoreExA(util.toPointer(lpSemaphoreAttributes), lInitialCount, lMaximumCount, util.pstrToFfi(lpName), dwFlags, dwDesiredAccess));
}

export function QueryFullProcessImageNameA(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwFlags: PROCESS_NAME_FORMAT /* Windows.Win32.System.Threading.PROCESS_NAME_FORMAT */,
  lpExeName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpdwSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.QueryFullProcessImageNameA(util.toPointer(hProcess), dwFlags, util.pstrToFfi(lpExeName), util.toPointer(lpdwSize)));
}

export function QueryFullProcessImageNameW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwFlags: PROCESS_NAME_FORMAT /* Windows.Win32.System.Threading.PROCESS_NAME_FORMAT */,
  lpExeName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpdwSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.QueryFullProcessImageNameW(util.toPointer(hProcess), dwFlags, util.pwstrToFfi(lpExeName), util.toPointer(lpdwSize)));
}

export function GetStartupInfoA(
  lpStartupInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.GetStartupInfoA(util.toPointer(lpStartupInfo));
}

export function CreateProcessWithLogonW(
  lpUsername: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpDomain: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpPassword: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwLogonFlags: CREATE_PROCESS_LOGON_FLAGS /* Windows.Win32.System.Threading.CREATE_PROCESS_LOGON_FLAGS */,
  lpApplicationName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpCommandLine: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwCreationFlags: number /* u32 */,
  lpEnvironment: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCurrentDirectory: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpStartupInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpProcessInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CreateProcessWithLogonW(util.pwstrToFfi(lpUsername), util.pwstrToFfi(lpDomain), util.pwstrToFfi(lpPassword), dwLogonFlags, util.pwstrToFfi(lpApplicationName), util.pwstrToFfi(lpCommandLine), dwCreationFlags, util.toPointer(lpEnvironment), util.pwstrToFfi(lpCurrentDirectory), util.toPointer(lpStartupInfo), util.toPointer(lpProcessInformation)));
}

export function CreateProcessWithTokenW(
  hToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwLogonFlags: CREATE_PROCESS_LOGON_FLAGS /* Windows.Win32.System.Threading.CREATE_PROCESS_LOGON_FLAGS */,
  lpApplicationName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpCommandLine: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwCreationFlags: number /* u32 */,
  lpEnvironment: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCurrentDirectory: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpStartupInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpProcessInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CreateProcessWithTokenW(util.toPointer(hToken), dwLogonFlags, util.pwstrToFfi(lpApplicationName), util.pwstrToFfi(lpCommandLine), dwCreationFlags, util.toPointer(lpEnvironment), util.pwstrToFfi(lpCurrentDirectory), util.toPointer(lpStartupInfo), util.toPointer(lpProcessInformation)));
}

export function RegisterWaitForSingleObject(
  phNewWaitObject: Deno.PointerValue | Uint8Array | null /* ptr */,
  hObject: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.WAITORTIMERCALLBACK */,
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwMilliseconds: number /* u32 */,
  dwFlags: WORKER_THREAD_FLAGS /* Windows.Win32.System.Threading.WORKER_THREAD_FLAGS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.RegisterWaitForSingleObject(util.toPointer(phNewWaitObject), util.toPointer(hObject), util.toPointer(Callback), util.toPointer(Context), dwMilliseconds, dwFlags));
}

export function UnregisterWait(
  WaitHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.UnregisterWait(util.toPointer(WaitHandle)));
}

export function SetTimerQueueTimer(
  TimerQueue: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.WAITORTIMERCALLBACK */,
  Parameter: Deno.PointerValue | Uint8Array | null /* ptr */,
  DueTime: number /* u32 */,
  Period: number /* u32 */,
  PreferIo: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32_dll.SetTimerQueueTimer(util.toPointer(TimerQueue), util.toPointer(Callback), util.toPointer(Parameter), DueTime, Period, util.boolToFfi(PreferIo)));
}

export function CreatePrivateNamespaceA(
  lpPrivateNamespaceAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpBoundaryDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpAliasPrefix: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.System.Threading.NamespaceHandle */ {
  return util.pointerFromFfi(libKERNEL32_dll.CreatePrivateNamespaceA(util.toPointer(lpPrivateNamespaceAttributes), util.toPointer(lpBoundaryDescriptor), util.pstrToFfi(lpAliasPrefix)));
}

export function OpenPrivateNamespaceA(
  lpBoundaryDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpAliasPrefix: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.System.Threading.NamespaceHandle */ {
  return util.pointerFromFfi(libKERNEL32_dll.OpenPrivateNamespaceA(util.toPointer(lpBoundaryDescriptor), util.pstrToFfi(lpAliasPrefix)));
}

export function CreateBoundaryDescriptorA(
  Name: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Flags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.System.Threading.BoundaryDescriptorHandle */ {
  return util.pointerFromFfi(libKERNEL32_dll.CreateBoundaryDescriptorA(util.pstrToFfi(Name), Flags));
}

export function AddIntegrityLabelToBoundaryDescriptor(
  BoundaryDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  IntegrityLabel: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.AddIntegrityLabelToBoundaryDescriptor(util.toPointer(BoundaryDescriptor), util.toPointer(IntegrityLabel)));
}

export function GetActiveProcessorGroupCount(): number /* u16 */ {
  return libKERNEL32_dll.GetActiveProcessorGroupCount();
}

export function GetMaximumProcessorGroupCount(): number /* u16 */ {
  return libKERNEL32_dll.GetMaximumProcessorGroupCount();
}

export function GetActiveProcessorCount(
  GroupNumber: number /* u16 */,
): number /* u32 */ {
  return libKERNEL32_dll.GetActiveProcessorCount(GroupNumber);
}

export function GetMaximumProcessorCount(
  GroupNumber: number /* u16 */,
): number /* u32 */ {
  return libKERNEL32_dll.GetMaximumProcessorCount(GroupNumber);
}

export function GetNumaProcessorNode(
  Processor: number /* u8 */,
  NodeNumber: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetNumaProcessorNode(Processor, util.toPointer(NodeNumber)));
}

export function GetNumaNodeNumberFromHandle(
  hFile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  NodeNumber: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetNumaNodeNumberFromHandle(util.toPointer(hFile), util.toPointer(NodeNumber)));
}

export function GetNumaProcessorNodeEx(
  Processor: Deno.PointerValue | Uint8Array | null /* ptr */,
  NodeNumber: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetNumaProcessorNodeEx(util.toPointer(Processor), util.toPointer(NodeNumber)));
}

export function GetNumaNodeProcessorMask(
  Node: number /* u8 */,
  ProcessorMask: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetNumaNodeProcessorMask(Node, util.toPointer(ProcessorMask)));
}

export function GetNumaAvailableMemoryNode(
  Node: number /* u8 */,
  AvailableBytes: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetNumaAvailableMemoryNode(Node, util.toPointer(AvailableBytes)));
}

export function GetNumaAvailableMemoryNodeEx(
  Node: number /* u16 */,
  AvailableBytes: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetNumaAvailableMemoryNodeEx(Node, util.toPointer(AvailableBytes)));
}

export function GetNumaProximityNode(
  ProximityId: number /* u32 */,
  NodeNumber: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetNumaProximityNode(ProximityId, util.toPointer(NodeNumber)));
}

export function NtQueryInformationProcess(
  ProcessHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ProcessInformationClass: PROCESSINFOCLASS /* Windows.Win32.System.Threading.PROCESSINFOCLASS */,
  ProcessInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  ProcessInformationLength: number /* u32 */,
  ReturnLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libntdll_dll.NtQueryInformationProcess(util.toPointer(ProcessHandle), ProcessInformationClass, util.toPointer(ProcessInformation), ProcessInformationLength, util.toPointer(ReturnLength)));
}

export function NtQueryInformationThread(
  ThreadHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ThreadInformationClass: THREADINFOCLASS /* Windows.Win32.System.Threading.THREADINFOCLASS */,
  ThreadInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  ThreadInformationLength: number /* u32 */,
  ReturnLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libntdll_dll.NtQueryInformationThread(util.toPointer(ThreadHandle), ThreadInformationClass, util.toPointer(ThreadInformation), ThreadInformationLength, util.toPointer(ReturnLength)));
}

export function NtSetInformationThread(
  ThreadHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ThreadInformationClass: THREADINFOCLASS /* Windows.Win32.System.Threading.THREADINFOCLASS */,
  ThreadInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  ThreadInformationLength: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libntdll_dll.NtSetInformationThread(util.toPointer(ThreadHandle), ThreadInformationClass, util.toPointer(ThreadInformation), ThreadInformationLength));
}

