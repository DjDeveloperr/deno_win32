/// Auto-generated by Deno Win32: Windows.Win32.System.WinRT.Apis

import * as util from "../../util.ts";

// Enums
export type ACTIVATIONTYPE = number;
export type AgileReferenceOptions = number;
export type TrustLevel = number;
export type DISPATCHERQUEUE_THREAD_APARTMENTTYPE = number;
export type DISPATCHERQUEUE_THREAD_TYPE = number;
export type CASTING_CONNECTION_ERROR_STATUS = number;
export type CASTING_CONNECTION_STATE = number;
export type RO_INIT_TYPE = number;
export type RO_ERROR_REPORTING_FLAGS = number;
export type BSOS_OPTIONS = number;
export type GRAPHICS_EFFECT_PROPERTY_MAPPING = number;
export type HANDLE_OPTIONS = number;
export type HANDLE_ACCESS_OPTIONS = number;
export type HANDLE_SHARING_OPTIONS = number;
export type HANDLE_CREATION_OPTIONS = number;
export type CreateProcessMethod = number;
export type XAML_REFERENCETRACKER_DISCONNECT = number;

// Constants
export const MAX_ERROR_MESSAGE_CHARS = 512;
export const CastingSourceInfo_Property_PreferredSourceUriScheme = `PreferredSourceUriScheme`;
export const CastingSourceInfo_Property_CastingTypes = `CastingTypes`;
export const CastingSourceInfo_Property_ProtectedMedia = `ProtectedMedia`;
export const E_SURFACE_CONTENTS_LOST = 2150301728;
export const ACTIVATIONTYPE_UNCATEGORIZED = 0;
export const ACTIVATIONTYPE_FROM_MONIKER = 1;
export const ACTIVATIONTYPE_FROM_DATA = 2;
export const ACTIVATIONTYPE_FROM_STORAGE = 4;
export const ACTIVATIONTYPE_FROM_STREAM = 8;
export const ACTIVATIONTYPE_FROM_FILE = 16;
export const AGILEREFERENCE_DEFAULT = 0;
export const AGILEREFERENCE_DELAYEDMARSHAL = 1;
export const BaseTrust = 0;
export const PartialTrust = 1;
export const FullTrust = 2;
export const DQTAT_COM_NONE = 0;
export const DQTAT_COM_ASTA = 1;
export const DQTAT_COM_STA = 2;
export const DQTYPE_THREAD_DEDICATED = 1;
export const DQTYPE_THREAD_CURRENT = 2;
export const CASTING_CONNECTION_ERROR_STATUS_SUCCEEDED = 0;
export const CASTING_CONNECTION_ERROR_STATUS_DEVICE_DID_NOT_RESPOND = 1;
export const CASTING_CONNECTION_ERROR_STATUS_DEVICE_ERROR = 2;
export const CASTING_CONNECTION_ERROR_STATUS_DEVICE_LOCKED = 3;
export const CASTING_CONNECTION_ERROR_STATUS_PROTECTED_PLAYBACK_FAILED = 4;
export const CASTING_CONNECTION_ERROR_STATUS_INVALID_CASTING_SOURCE = 5;
export const CASTING_CONNECTION_ERROR_STATUS_UNKNOWN = 6;
export const CASTING_CONNECTION_STATE_DISCONNECTED = 0;
export const CASTING_CONNECTION_STATE_CONNECTED = 1;
export const CASTING_CONNECTION_STATE_RENDERING = 2;
export const CASTING_CONNECTION_STATE_DISCONNECTING = 3;
export const CASTING_CONNECTION_STATE_CONNECTING = 4;
export const RO_INIT_SINGLETHREADED = 0;
export const RO_INIT_MULTITHREADED = 1;
export const RO_ERROR_REPORTING_NONE = 0;
export const RO_ERROR_REPORTING_SUPPRESSEXCEPTIONS = 1;
export const RO_ERROR_REPORTING_FORCEEXCEPTIONS = 2;
export const RO_ERROR_REPORTING_USESETERRORINFO = 4;
export const RO_ERROR_REPORTING_SUPPRESSSETERRORINFO = 8;
export const BSOS_DEFAULT = 0;
export const BSOS_PREFERDESTINATIONSTREAM = 1;
export const GRAPHICS_EFFECT_PROPERTY_MAPPING_UNKNOWN = 0;
export const GRAPHICS_EFFECT_PROPERTY_MAPPING_DIRECT = 1;
export const GRAPHICS_EFFECT_PROPERTY_MAPPING_VECTORX = 2;
export const GRAPHICS_EFFECT_PROPERTY_MAPPING_VECTORY = 3;
export const GRAPHICS_EFFECT_PROPERTY_MAPPING_VECTORZ = 4;
export const GRAPHICS_EFFECT_PROPERTY_MAPPING_VECTORW = 5;
export const GRAPHICS_EFFECT_PROPERTY_MAPPING_RECT_TO_VECTOR4 = 6;
export const GRAPHICS_EFFECT_PROPERTY_MAPPING_RADIANS_TO_DEGREES = 7;
export const GRAPHICS_EFFECT_PROPERTY_MAPPING_COLORMATRIX_ALPHA_MODE = 8;
export const GRAPHICS_EFFECT_PROPERTY_MAPPING_COLOR_TO_VECTOR3 = 9;
export const GRAPHICS_EFFECT_PROPERTY_MAPPING_COLOR_TO_VECTOR4 = 10;
export const HO_NONE = 0;
export const HO_OPEN_REQUIRING_OPLOCK = 262144;
export const HO_DELETE_ON_CLOSE = 67108864;
export const HO_SEQUENTIAL_SCAN = 134217728;
export const HO_RANDOM_ACCESS = 268435456;
export const HO_NO_BUFFERING = 536870912;
export const HO_OVERLAPPED = 1073741824;
export const HO_WRITE_THROUGH = 2147483648;
export const HAO_NONE = 0;
export const HAO_READ_ATTRIBUTES = 128;
export const HAO_READ = 1179785;
export const HAO_WRITE = 1179926;
export const HAO_DELETE = 65536;
export const HSO_SHARE_NONE = 0;
export const HSO_SHARE_READ = 1;
export const HSO_SHARE_WRITE = 2;
export const HSO_SHARE_DELETE = 4;
export const HCO_CREATE_NEW = 1;
export const HCO_CREATE_ALWAYS = 2;
export const HCO_OPEN_EXISTING = 3;
export const HCO_OPEN_ALWAYS = 4;
export const HCO_TRUNCATE_EXISTING = 5;
export const CpCreateProcess = 0;
export const CpCreateProcessAsUser = 1;
export const CpAicLaunchAdminProcess = 2;
export const XAML_REFERENCETRACKER_DISCONNECT_DEFAULT = 0;
export const XAML_REFERENCETRACKER_DISCONNECT_SUSPEND = 1;

// Structs

/**
 * Windows.Win32.System.WinRT.EventRegistrationToken (size: 8)
 */
export interface EventRegistrationToken {
  /** i64 */
  value: bigint | number;
}

export const sizeofEventRegistrationToken = 8;

export function allocEventRegistrationToken(data?: Partial<EventRegistrationToken>): Uint8Array {
  const buf = new Uint8Array(sizeofEventRegistrationToken);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.value !== undefined) view.setBigInt64(0, BigInt(data.value), true);
  return buf;
}

export class EventRegistrationTokenView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get value(): bigint | number {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x00: i64
  set value(value: bigint | number) {
    this.view.setBigInt64(0, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.WinRT.HSTRING_HEADER (size: 24)
 */
export interface HSTRING_HEADER {
  /** u32 */
  flags: number;
  /** u32 */
  length: number;
  /** u32 */
  padding1: number;
  /** u32 */
  padding2: number;
  /** isize */
  data: bigint | number;
}

export const sizeofHSTRING_HEADER = 24;

export function allocHSTRING_HEADER(data?: Partial<HSTRING_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofHSTRING_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.flags !== undefined) view.setUint32(0, Number(data.flags), true);
  // 0x04: u32
  if (data?.length !== undefined) view.setUint32(4, Number(data.length), true);
  // 0x08: u32
  if (data?.padding1 !== undefined) view.setUint32(8, Number(data.padding1), true);
  // 0x0c: u32
  if (data?.padding2 !== undefined) view.setUint32(12, Number(data.padding2), true);
  // 0x10: isize
  if (data?.data !== undefined) view.setBigInt64(16, BigInt(data.data), true);
  return buf;
}

export class HSTRING_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get length(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get padding1(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get padding2(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: isize
  get data(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x00: u32
  set flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set length(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set padding1(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set padding2(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: isize
  set data(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }
}

export type HSTRING = bigint | number;

export type HSTRING_BUFFER = bigint | number;

export type ROPARAMIIDHANDLE = bigint | number;

export type APARTMENT_SHUTDOWN_REGISTRATION_COOKIE = bigint | number;

/**
 * Windows.Win32.System.WinRT.ServerInformation (size: 16)
 */
export interface ServerInformation {
  /** u32 */
  dwServerPid: number;
  /** u32 */
  dwServerTid: number;
  /** u64 */
  ui64ServerAddress: bigint | number;
}

export const sizeofServerInformation = 16;

export function allocServerInformation(data?: Partial<ServerInformation>): Uint8Array {
  const buf = new Uint8Array(sizeofServerInformation);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwServerPid !== undefined) view.setUint32(0, Number(data.dwServerPid), true);
  // 0x04: u32
  if (data?.dwServerTid !== undefined) view.setUint32(4, Number(data.dwServerTid), true);
  // 0x08: u64
  if (data?.ui64ServerAddress !== undefined) view.setBigUint64(8, BigInt(data.ui64ServerAddress), true);
  return buf;
}

export class ServerInformationView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwServerPid(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwServerTid(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get ui64ServerAddress(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u32
  set dwServerPid(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwServerTid(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set ui64ServerAddress(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.WinRT.DispatcherQueueOptions (size: 16)
 */
export interface DispatcherQueueOptions {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.System.WinRT.DISPATCHERQUEUE_THREAD_TYPE */
  threadType: DISPATCHERQUEUE_THREAD_TYPE;
  /** Windows.Win32.System.WinRT.DISPATCHERQUEUE_THREAD_APARTMENTTYPE */
  apartmentType: DISPATCHERQUEUE_THREAD_APARTMENTTYPE;
}

export const sizeofDispatcherQueueOptions = 16;

export function allocDispatcherQueueOptions(data?: Partial<DispatcherQueueOptions>): Uint8Array {
  const buf = new Uint8Array(sizeofDispatcherQueueOptions);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: i32
  if (data?.threadType !== undefined) view.setInt32(4, Number(data.threadType), true);
  // 0x08: i32
  if (data?.apartmentType !== undefined) view.setInt32(8, Number(data.apartmentType), true);
  // 0x0c: pad4
  return buf;
}

export class DispatcherQueueOptionsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get threadType(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get apartmentType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set threadType(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set apartmentType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct2D.Common.D2D_RECT_F (size: 16)
 */
export interface D2D_RECT_F {
  /** f32 */
  left: number;
  /** f32 */
  top: number;
  /** f32 */
  right: number;
  /** f32 */
  bottom: number;
}

export const sizeofD2D_RECT_F = 16;

export function allocD2D_RECT_F(data?: Partial<D2D_RECT_F>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D_RECT_F);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.left !== undefined) view.setFloat32(0, Number(data.left), true);
  // 0x04: f32
  if (data?.top !== undefined) view.setFloat32(4, Number(data.top), true);
  // 0x08: f32
  if (data?.right !== undefined) view.setFloat32(8, Number(data.right), true);
  // 0x0c: f32
  if (data?.bottom !== undefined) view.setFloat32(12, Number(data.bottom), true);
  return buf;
}

export class D2D_RECT_FView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get left(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get top(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get right(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get bottom(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x00: f32
  set left(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set top(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set right(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set bottom(value: number) {
    this.view.setFloat32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.Common.D2D_COLOR_F (size: 16)
 */
export interface D2D_COLOR_F {
  /** f32 */
  r: number;
  /** f32 */
  g: number;
  /** f32 */
  b: number;
  /** f32 */
  a: number;
}

export const sizeofD2D_COLOR_F = 16;

export function allocD2D_COLOR_F(data?: Partial<D2D_COLOR_F>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D_COLOR_F);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.r !== undefined) view.setFloat32(0, Number(data.r), true);
  // 0x04: f32
  if (data?.g !== undefined) view.setFloat32(4, Number(data.g), true);
  // 0x08: f32
  if (data?.b !== undefined) view.setFloat32(8, Number(data.b), true);
  // 0x0c: f32
  if (data?.a !== undefined) view.setFloat32(12, Number(data.a), true);
  return buf;
}

export class D2D_COLOR_FView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get r(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get g(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get b(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get a(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x00: f32
  set r(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set g(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set b(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set a(value: number) {
    this.view.setFloat32(12, value, true);
  }
}

export type BOOLEAN = number;

/**
 * Windows.Win32.System.WinRT.Pdf.PDF_RENDER_PARAMS (size: 32)
 */
export interface PDF_RENDER_PARAMS {
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_RECT_F */
  SourceRect: Uint8Array | Deno.PointerValue;
  /** u32 */
  DestinationWidth: number;
  /** u32 */
  DestinationHeight: number;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_COLOR_F */
  BackgroundColor: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  IgnoreHighContrast: Uint8Array | Deno.PointerValue;
}

export const sizeofPDF_RENDER_PARAMS = 32;

export function allocPDF_RENDER_PARAMS(data?: Partial<PDF_RENDER_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofPDF_RENDER_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SourceRect !== undefined) view.setBigUint64(0, data.SourceRect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SourceRect))), true);
  // 0x08: u32
  if (data?.DestinationWidth !== undefined) view.setUint32(8, Number(data.DestinationWidth), true);
  // 0x0c: u32
  if (data?.DestinationHeight !== undefined) view.setUint32(12, Number(data.DestinationHeight), true);
  // 0x10: pointer
  if (data?.BackgroundColor !== undefined) view.setBigUint64(16, data.BackgroundColor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.BackgroundColor))), true);
  // 0x18: pointer
  if (data?.IgnoreHighContrast !== undefined) view.setBigUint64(24, data.IgnoreHighContrast === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IgnoreHighContrast))), true);
  return buf;
}

export class PDF_RENDER_PARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get SourceRect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get DestinationWidth(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get DestinationHeight(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get BackgroundColor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get IgnoreHighContrast(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set SourceRect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set DestinationWidth(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set DestinationHeight(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set BackgroundColor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set IgnoreHighContrast(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.WinRT.Xaml.TrackerHandle__ (size: 8)
 */
export interface TrackerHandle__ {
  /** i32 */
  unused: number;
}

export const sizeofTrackerHandle__ = 8;

export function allocTrackerHandle__(data?: Partial<TrackerHandle__>): Uint8Array {
  const buf = new Uint8Array(sizeofTrackerHandle__);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.unused !== undefined) view.setInt32(0, Number(data.unused), true);
  // 0x04: pad4
  return buf;
}

export class TrackerHandle__View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get unused(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set unused(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

export type HRESULT = number;

export type PWSTR = Deno.PointerValue | Uint8Array;

export type BOOL = number;

export type PSTR = Deno.PointerValue | Uint8Array;

// Native Libraries

try {
  var libOLE32_dll = Deno.dlopen("OLE32.dll", {
    CoDecodeProxy: {
      parameters: ["u32", "u64", "pointer"],
      result: "pointer",
    },
    RoGetAgileReference: {
      parameters: ["i32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_winrt_string_l1_1_0_dll = Deno.dlopen("api-ms-win-core-winrt-string-l1-1-0.dll", {
    HSTRING_UserSize: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    HSTRING_UserMarshal: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HSTRING_UserUnmarshal: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HSTRING_UserFree: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    HSTRING_UserSize64: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    HSTRING_UserMarshal64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HSTRING_UserUnmarshal64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HSTRING_UserFree64: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    WindowsCreateString: {
      parameters: ["buffer", "u32", "pointer"],
      result: "pointer",
    },
    WindowsCreateStringReference: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    WindowsDeleteString: {
      parameters: ["pointer"],
      result: "pointer",
    },
    WindowsDuplicateString: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WindowsGetStringLen: {
      parameters: ["pointer"],
      result: "u32",
    },
    WindowsGetStringRawBuffer: {
      parameters: ["pointer", "pointer"],
      result: "buffer",
    },
    WindowsIsStringEmpty: {
      parameters: ["pointer"],
      result: "i32",
    },
    WindowsStringHasEmbeddedNull: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WindowsCompareStringOrdinal: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WindowsSubstring: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    WindowsSubstringWithSpecifiedLength: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    WindowsConcatString: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WindowsReplaceString: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WindowsTrimStringStart: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WindowsTrimStringEnd: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WindowsPreallocateStringBuffer: {
      parameters: ["u32", "pointer", "pointer"],
      result: "pointer",
    },
    WindowsPromoteStringBuffer: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WindowsDeleteStringBuffer: {
      parameters: ["pointer"],
      result: "pointer",
    },
    WindowsInspectString: {
      parameters: ["usize", "u16", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_winrt_string_l1_1_1_dll = Deno.dlopen("api-ms-win-core-winrt-string-l1-1-1.dll", {
    WindowsInspectString2: {
      parameters: ["u64", "u16", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libCoreMessaging_dll = Deno.dlopen("CoreMessaging.dll", {
    CreateDispatcherQueueController: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_winrt_l1_1_0_dll = Deno.dlopen("api-ms-win-core-winrt-l1-1-0.dll", {
    RoInitialize: {
      parameters: ["i32"],
      result: "pointer",
    },
    RoUninitialize: {
      parameters: [],
      result: "void",
    },
    RoActivateInstance: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    RoRegisterActivationFactories: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    RoRevokeActivationFactories: {
      parameters: ["isize"],
      result: "void",
    },
    RoGetActivationFactory: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    RoRegisterForApartmentShutdown: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    RoUnregisterForApartmentShutdown: {
      parameters: ["pointer"],
      result: "pointer",
    },
    RoGetApartmentIdentifier: {
      parameters: ["pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_winrt_robuffer_l1_1_0_dll = Deno.dlopen("api-ms-win-core-winrt-robuffer-l1-1-0.dll", {
    RoGetBufferMarshaler: {
      parameters: ["pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_winrt_error_l1_1_0_dll = Deno.dlopen("api-ms-win-core-winrt-error-l1-1-0.dll", {
    RoGetErrorReportingFlags: {
      parameters: ["pointer"],
      result: "pointer",
    },
    RoSetErrorReportingFlags: {
      parameters: ["u32"],
      result: "pointer",
    },
    RoResolveRestrictedErrorInfoReference: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    SetRestrictedErrorInfo: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetRestrictedErrorInfo: {
      parameters: ["pointer"],
      result: "pointer",
    },
    RoOriginateErrorW: {
      parameters: ["pointer", "u32", "buffer"],
      result: "i32",
    },
    RoOriginateError: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    RoTransformErrorW: {
      parameters: ["pointer", "pointer", "u32", "buffer"],
      result: "i32",
    },
    RoTransformError: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    RoCaptureErrorContext: {
      parameters: ["pointer"],
      result: "pointer",
    },
    RoFailFastWithErrorContext: {
      parameters: ["pointer"],
      result: "void",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_winrt_error_l1_1_1_dll = Deno.dlopen("api-ms-win-core-winrt-error-l1-1-1.dll", {
    RoOriginateLanguageException: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    RoClearError: {
      parameters: [],
      result: "void",
    },
    RoReportUnhandledError: {
      parameters: ["pointer"],
      result: "pointer",
    },
    RoInspectThreadErrorInfo: {
      parameters: ["usize", "u16", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    RoInspectCapturedStackBackTrace: {
      parameters: ["usize", "u16", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    RoGetMatchingRestrictedErrorInfo: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    RoReportFailedDelegate: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    IsErrorPropagationEnabled: {
      parameters: [],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libRoMetadata_dll = Deno.dlopen("RoMetadata.dll", {
    MetaDataGetDispenser: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_winrt_roparameterizediid_l1_1_0_dll = Deno.dlopen("api-ms-win-core-winrt-roparameterizediid-l1-1-0.dll", {
    RoGetParameterizedTypeInstanceIID: {
      parameters: ["u32", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    RoFreeParameterizedTypeExtra: {
      parameters: ["pointer"],
      result: "void",
    },
    RoParameterizedTypeExtraGetTypeSignature: {
      parameters: ["pointer"],
      result: "buffer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_winrt_registration_l1_1_0_dll = Deno.dlopen("api-ms-win-core-winrt-registration-l1-1-0.dll", {
    RoGetServerActivatableClasses: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_shcore_stream_winrt_l1_1_0_dll = Deno.dlopen("api-ms-win-shcore-stream-winrt-l1-1-0.dll", {
    CreateRandomAccessStreamOnFile: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    CreateRandomAccessStreamOverStream: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    CreateStreamOverRandomAccessStream: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libWindows_UI_dll = Deno.dlopen("Windows.UI.dll", {
    CreateControlInput: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    CreateControlInputEx: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function CoDecodeProxy(
  dwClientPid: number /* u32 */,
  ui64ProxyAddress: bigint | number /* u64 */,
  pServerInformation: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libOLE32_dll.CoDecodeProxy(dwClientPid, ui64ProxyAddress, util.toPointer(pServerInformation));
}

export function RoGetAgileReference(
  options: AgileReferenceOptions /* Windows.Win32.System.WinRT.AgileReferenceOptions */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  pUnk: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
  ppAgileReference: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libOLE32_dll.RoGetAgileReference(options, util.toPointer(riid), util.toPointer(pUnk), util.toPointer(ppAgileReference));
}

export function HSTRING_UserSize(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libapi_ms_win_core_winrt_string_l1_1_0_dll.HSTRING_UserSize(util.toPointer(param0), param1, util.toPointer(param2));
}

export function HSTRING_UserMarshal(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
  param1: Deno.PointerValue | Uint8Array /* ptr */,
  param2: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libapi_ms_win_core_winrt_string_l1_1_0_dll.HSTRING_UserMarshal(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2));
}

export function HSTRING_UserUnmarshal(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
  param1: Deno.PointerValue | Uint8Array /* ptr */,
  param2: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libapi_ms_win_core_winrt_string_l1_1_0_dll.HSTRING_UserUnmarshal(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2));
}

export function HSTRING_UserFree(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
  param1: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libapi_ms_win_core_winrt_string_l1_1_0_dll.HSTRING_UserFree(util.toPointer(param0), util.toPointer(param1));
}

export function HSTRING_UserSize64(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libapi_ms_win_core_winrt_string_l1_1_0_dll.HSTRING_UserSize64(util.toPointer(param0), param1, util.toPointer(param2));
}

export function HSTRING_UserMarshal64(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
  param1: Deno.PointerValue | Uint8Array /* ptr */,
  param2: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libapi_ms_win_core_winrt_string_l1_1_0_dll.HSTRING_UserMarshal64(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2));
}

export function HSTRING_UserUnmarshal64(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
  param1: Deno.PointerValue | Uint8Array /* ptr */,
  param2: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libapi_ms_win_core_winrt_string_l1_1_0_dll.HSTRING_UserUnmarshal64(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2));
}

export function HSTRING_UserFree64(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
  param1: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libapi_ms_win_core_winrt_string_l1_1_0_dll.HSTRING_UserFree64(util.toPointer(param0), util.toPointer(param1));
}

export function WindowsCreateString(
  sourceString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  length: number /* u32 */,
  string: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_winrt_string_l1_1_0_dll.WindowsCreateString(util.pwstrToFfi(sourceString), length, util.toPointer(string));
}

export function WindowsCreateStringReference(
  sourceString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  length: number /* u32 */,
  hstringHeader: Deno.PointerValue | Uint8Array /* ptr */,
  string: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_winrt_string_l1_1_0_dll.WindowsCreateStringReference(util.pwstrToFfi(sourceString), length, util.toPointer(hstringHeader), util.toPointer(string));
}

export function WindowsDeleteString(
  string: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.HSTRING */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_winrt_string_l1_1_0_dll.WindowsDeleteString(util.toPointer(string));
}

export function WindowsDuplicateString(
  string: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.HSTRING */,
  newString: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_winrt_string_l1_1_0_dll.WindowsDuplicateString(util.toPointer(string), util.toPointer(newString));
}

export function WindowsGetStringLen(
  string: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.HSTRING */,
): number /* u32 */ {
  return libapi_ms_win_core_winrt_string_l1_1_0_dll.WindowsGetStringLen(util.toPointer(string));
}

export function WindowsGetStringRawBuffer(
  string: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.HSTRING */,
  length: Deno.PointerValue | Uint8Array /* ptr */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libapi_ms_win_core_winrt_string_l1_1_0_dll.WindowsGetStringRawBuffer(util.toPointer(string), util.toPointer(length)));
}

export function WindowsIsStringEmpty(
  string: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.HSTRING */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libapi_ms_win_core_winrt_string_l1_1_0_dll.WindowsIsStringEmpty(util.toPointer(string)));
}

export function WindowsStringHasEmbeddedNull(
  string: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.HSTRING */,
  hasEmbedNull: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_winrt_string_l1_1_0_dll.WindowsStringHasEmbeddedNull(util.toPointer(string), util.toPointer(hasEmbedNull));
}

export function WindowsCompareStringOrdinal(
  string1: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.HSTRING */,
  string2: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.HSTRING */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_winrt_string_l1_1_0_dll.WindowsCompareStringOrdinal(util.toPointer(string1), util.toPointer(string2), util.toPointer(result));
}

export function WindowsSubstring(
  string: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.HSTRING */,
  startIndex: number /* u32 */,
  newString: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_winrt_string_l1_1_0_dll.WindowsSubstring(util.toPointer(string), startIndex, util.toPointer(newString));
}

export function WindowsSubstringWithSpecifiedLength(
  string: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.HSTRING */,
  startIndex: number /* u32 */,
  length: number /* u32 */,
  newString: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_winrt_string_l1_1_0_dll.WindowsSubstringWithSpecifiedLength(util.toPointer(string), startIndex, length, util.toPointer(newString));
}

export function WindowsConcatString(
  string1: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.HSTRING */,
  string2: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.HSTRING */,
  newString: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_winrt_string_l1_1_0_dll.WindowsConcatString(util.toPointer(string1), util.toPointer(string2), util.toPointer(newString));
}

export function WindowsReplaceString(
  string: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.HSTRING */,
  stringReplaced: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.HSTRING */,
  stringReplaceWith: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.HSTRING */,
  newString: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_winrt_string_l1_1_0_dll.WindowsReplaceString(util.toPointer(string), util.toPointer(stringReplaced), util.toPointer(stringReplaceWith), util.toPointer(newString));
}

export function WindowsTrimStringStart(
  string: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.HSTRING */,
  trimString: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.HSTRING */,
  newString: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_winrt_string_l1_1_0_dll.WindowsTrimStringStart(util.toPointer(string), util.toPointer(trimString), util.toPointer(newString));
}

export function WindowsTrimStringEnd(
  string: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.HSTRING */,
  trimString: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.HSTRING */,
  newString: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_winrt_string_l1_1_0_dll.WindowsTrimStringEnd(util.toPointer(string), util.toPointer(trimString), util.toPointer(newString));
}

export function WindowsPreallocateStringBuffer(
  length: number /* u32 */,
  charBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  bufferHandle: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_winrt_string_l1_1_0_dll.WindowsPreallocateStringBuffer(length, util.toPointer(charBuffer), util.toPointer(bufferHandle));
}

export function WindowsPromoteStringBuffer(
  bufferHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.HSTRING_BUFFER */,
  string: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_winrt_string_l1_1_0_dll.WindowsPromoteStringBuffer(util.toPointer(bufferHandle), util.toPointer(string));
}

export function WindowsDeleteStringBuffer(
  bufferHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.HSTRING_BUFFER */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_winrt_string_l1_1_0_dll.WindowsDeleteStringBuffer(util.toPointer(bufferHandle));
}

export function WindowsInspectString(
  targetHString: bigint | number /* usize */,
  machine: number /* u16 */,
  callback: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.PINSPECT_HSTRING_CALLBACK */,
  context: Deno.PointerValue | Uint8Array /* ptr */,
  length: Deno.PointerValue | Uint8Array /* ptr */,
  targetStringAddress: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_winrt_string_l1_1_0_dll.WindowsInspectString(targetHString, machine, util.toPointer(callback), util.toPointer(context), util.toPointer(length), util.toPointer(targetStringAddress));
}

export function WindowsInspectString2(
  targetHString: bigint | number /* u64 */,
  machine: number /* u16 */,
  callback: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.PINSPECT_HSTRING_CALLBACK2 */,
  context: Deno.PointerValue | Uint8Array /* ptr */,
  length: Deno.PointerValue | Uint8Array /* ptr */,
  targetStringAddress: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_winrt_string_l1_1_1_dll.WindowsInspectString2(targetHString, machine, util.toPointer(callback), util.toPointer(context), util.toPointer(length), util.toPointer(targetStringAddress));
}

export function CreateDispatcherQueueController(
  options: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.DispatcherQueueOptions */,
  dispatcherQueueController: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libCoreMessaging_dll.CreateDispatcherQueueController(util.toPointer(options), util.toPointer(dispatcherQueueController));
}

export function RoInitialize(
  initType: RO_INIT_TYPE /* Windows.Win32.System.WinRT.RO_INIT_TYPE */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_winrt_l1_1_0_dll.RoInitialize(initType);
}

export function RoUninitialize(): void /* void */ {
  return libapi_ms_win_core_winrt_l1_1_0_dll.RoUninitialize();
}

export function RoActivateInstance(
  activatableClassId: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.HSTRING */,
  instance: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_winrt_l1_1_0_dll.RoActivateInstance(util.toPointer(activatableClassId), util.toPointer(instance));
}

export function RoRegisterActivationFactories(
  activatableClassIds: Deno.PointerValue | Uint8Array /* ptr */,
  activationFactoryCallbacks: Deno.PointerValue | Uint8Array /* ptr */,
  count: number /* u32 */,
  cookie: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_winrt_l1_1_0_dll.RoRegisterActivationFactories(util.toPointer(activatableClassIds), util.toPointer(activationFactoryCallbacks), count, util.toPointer(cookie));
}

export function RoRevokeActivationFactories(
  cookie: bigint | number /* isize */,
): void /* void */ {
  return libapi_ms_win_core_winrt_l1_1_0_dll.RoRevokeActivationFactories(cookie);
}

export function RoGetActivationFactory(
  activatableClassId: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.HSTRING */,
  iid: Deno.PointerValue | Uint8Array /* ptr */,
  factory: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_winrt_l1_1_0_dll.RoGetActivationFactory(util.toPointer(activatableClassId), util.toPointer(iid), util.toPointer(factory));
}

export function RoRegisterForApartmentShutdown(
  callbackObject: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.IApartmentShutdown */,
  apartmentIdentifier: Deno.PointerValue | Uint8Array /* ptr */,
  regCookie: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_winrt_l1_1_0_dll.RoRegisterForApartmentShutdown(util.toPointer(callbackObject), util.toPointer(apartmentIdentifier), util.toPointer(regCookie));
}

export function RoUnregisterForApartmentShutdown(
  regCookie: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.APARTMENT_SHUTDOWN_REGISTRATION_COOKIE */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_winrt_l1_1_0_dll.RoUnregisterForApartmentShutdown(util.toPointer(regCookie));
}

export function RoGetApartmentIdentifier(
  apartmentIdentifier: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_winrt_l1_1_0_dll.RoGetApartmentIdentifier(util.toPointer(apartmentIdentifier));
}

export function RoGetBufferMarshaler(
  bufferMarshaler: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_winrt_robuffer_l1_1_0_dll.RoGetBufferMarshaler(util.toPointer(bufferMarshaler));
}

export function RoGetErrorReportingFlags(
  pflags: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_winrt_error_l1_1_0_dll.RoGetErrorReportingFlags(util.toPointer(pflags));
}

export function RoSetErrorReportingFlags(
  flags: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_winrt_error_l1_1_0_dll.RoSetErrorReportingFlags(flags);
}

export function RoResolveRestrictedErrorInfoReference(
  reference: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppRestrictedErrorInfo: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_winrt_error_l1_1_0_dll.RoResolveRestrictedErrorInfoReference(util.pwstrToFfi(reference), util.toPointer(ppRestrictedErrorInfo));
}

export function SetRestrictedErrorInfo(
  pRestrictedErrorInfo: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.IRestrictedErrorInfo */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_winrt_error_l1_1_0_dll.SetRestrictedErrorInfo(util.toPointer(pRestrictedErrorInfo));
}

export function GetRestrictedErrorInfo(
  ppRestrictedErrorInfo: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_winrt_error_l1_1_0_dll.GetRestrictedErrorInfo(util.toPointer(ppRestrictedErrorInfo));
}

export function RoOriginateErrorW(
  error: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */,
  cchMax: number /* u32 */,
  message: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libapi_ms_win_core_winrt_error_l1_1_0_dll.RoOriginateErrorW(util.toPointer(error), cchMax, util.pwstrToFfi(message)));
}

export function RoOriginateError(
  error: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */,
  message: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.HSTRING */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libapi_ms_win_core_winrt_error_l1_1_0_dll.RoOriginateError(util.toPointer(error), util.toPointer(message)));
}

export function RoTransformErrorW(
  oldError: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */,
  newError: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */,
  cchMax: number /* u32 */,
  message: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libapi_ms_win_core_winrt_error_l1_1_0_dll.RoTransformErrorW(util.toPointer(oldError), util.toPointer(newError), cchMax, util.pwstrToFfi(message)));
}

export function RoTransformError(
  oldError: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */,
  newError: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */,
  message: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.HSTRING */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libapi_ms_win_core_winrt_error_l1_1_0_dll.RoTransformError(util.toPointer(oldError), util.toPointer(newError), util.toPointer(message)));
}

export function RoCaptureErrorContext(
  hr: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_winrt_error_l1_1_0_dll.RoCaptureErrorContext(util.toPointer(hr));
}

export function RoFailFastWithErrorContext(
  hrError: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */,
): void /* void */ {
  return libapi_ms_win_core_winrt_error_l1_1_0_dll.RoFailFastWithErrorContext(util.toPointer(hrError));
}

export function RoOriginateLanguageException(
  error: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */,
  message: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.HSTRING */,
  languageException: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libapi_ms_win_core_winrt_error_l1_1_1_dll.RoOriginateLanguageException(util.toPointer(error), util.toPointer(message), util.toPointer(languageException)));
}

export function RoClearError(): void /* void */ {
  return libapi_ms_win_core_winrt_error_l1_1_1_dll.RoClearError();
}

export function RoReportUnhandledError(
  pRestrictedErrorInfo: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.IRestrictedErrorInfo */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_winrt_error_l1_1_1_dll.RoReportUnhandledError(util.toPointer(pRestrictedErrorInfo));
}

export function RoInspectThreadErrorInfo(
  targetTebAddress: bigint | number /* usize */,
  machine: number /* u16 */,
  readMemoryCallback: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.PINSPECT_MEMORY_CALLBACK */,
  context: Deno.PointerValue | Uint8Array /* ptr */,
  targetErrorInfoAddress: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_winrt_error_l1_1_1_dll.RoInspectThreadErrorInfo(targetTebAddress, machine, util.toPointer(readMemoryCallback), util.toPointer(context), util.toPointer(targetErrorInfoAddress));
}

export function RoInspectCapturedStackBackTrace(
  targetErrorInfoAddress: bigint | number /* usize */,
  machine: number /* u16 */,
  readMemoryCallback: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.PINSPECT_MEMORY_CALLBACK */,
  context: Deno.PointerValue | Uint8Array /* ptr */,
  frameCount: Deno.PointerValue | Uint8Array /* ptr */,
  targetBackTraceAddress: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_winrt_error_l1_1_1_dll.RoInspectCapturedStackBackTrace(targetErrorInfoAddress, machine, util.toPointer(readMemoryCallback), util.toPointer(context), util.toPointer(frameCount), util.toPointer(targetBackTraceAddress));
}

export function RoGetMatchingRestrictedErrorInfo(
  hrIn: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */,
  ppRestrictedErrorInfo: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_winrt_error_l1_1_1_dll.RoGetMatchingRestrictedErrorInfo(util.toPointer(hrIn), util.toPointer(ppRestrictedErrorInfo));
}

export function RoReportFailedDelegate(
  punkDelegate: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
  pRestrictedErrorInfo: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.IRestrictedErrorInfo */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_winrt_error_l1_1_1_dll.RoReportFailedDelegate(util.toPointer(punkDelegate), util.toPointer(pRestrictedErrorInfo));
}

export function IsErrorPropagationEnabled(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libapi_ms_win_core_winrt_error_l1_1_1_dll.IsErrorPropagationEnabled());
}

export function MetaDataGetDispenser(
  rclsid: Deno.PointerValue | Uint8Array /* ptr */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppv: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libRoMetadata_dll.MetaDataGetDispenser(util.toPointer(rclsid), util.toPointer(riid), util.toPointer(ppv));
}

export function RoGetParameterizedTypeInstanceIID(
  nameElementCount: number /* u32 */,
  nameElements: Deno.PointerValue | Uint8Array /* ptr */,
  metaDataLocator: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.IRoMetaDataLocator */,
  iid: Deno.PointerValue | Uint8Array /* ptr */,
  pExtra: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_winrt_roparameterizediid_l1_1_0_dll.RoGetParameterizedTypeInstanceIID(nameElementCount, util.toPointer(nameElements), util.toPointer(metaDataLocator), util.toPointer(iid), util.toPointer(pExtra));
}

export function RoFreeParameterizedTypeExtra(
  extra: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.ROPARAMIIDHANDLE */,
): void /* void */ {
  return libapi_ms_win_core_winrt_roparameterizediid_l1_1_0_dll.RoFreeParameterizedTypeExtra(util.toPointer(extra));
}

export function RoParameterizedTypeExtraGetTypeSignature(
  extra: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.ROPARAMIIDHANDLE */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libapi_ms_win_core_winrt_roparameterizediid_l1_1_0_dll.RoParameterizedTypeExtraGetTypeSignature(util.toPointer(extra)));
}

export function RoGetServerActivatableClasses(
  serverName: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WinRT.HSTRING */,
  activatableClassIds: Deno.PointerValue | Uint8Array /* ptr */,
  count: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_winrt_registration_l1_1_0_dll.RoGetServerActivatableClasses(util.toPointer(serverName), util.toPointer(activatableClassIds), util.toPointer(count));
}

export function CreateRandomAccessStreamOnFile(
  filePath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  accessMode: number /* u32 */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppv: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_shcore_stream_winrt_l1_1_0_dll.CreateRandomAccessStreamOnFile(util.pwstrToFfi(filePath), accessMode, util.toPointer(riid), util.toPointer(ppv));
}

export function CreateRandomAccessStreamOverStream(
  stream: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IStream */,
  options: BSOS_OPTIONS /* Windows.Win32.System.WinRT.BSOS_OPTIONS */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppv: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_shcore_stream_winrt_l1_1_0_dll.CreateRandomAccessStreamOverStream(util.toPointer(stream), options, util.toPointer(riid), util.toPointer(ppv));
}

export function CreateStreamOverRandomAccessStream(
  randomAccessStream: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppv: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_shcore_stream_winrt_l1_1_0_dll.CreateStreamOverRandomAccessStream(util.toPointer(randomAccessStream), util.toPointer(riid), util.toPointer(ppv));
}

export function CreateControlInput(
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppv: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libWindows_UI_dll.CreateControlInput(util.toPointer(riid), util.toPointer(ppv));
}

export function CreateControlInputEx(
  pCoreWindow: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppv: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libWindows_UI_dll.CreateControlInputEx(util.toPointer(pCoreWindow), util.toPointer(riid), util.toPointer(ppv));
}

