/// Auto-generated by Deno Win32: Windows.Win32.System.Rpc.Apis

import * as util from "../../util.ts";

// Enums
export type RPC_C_QOS_CAPABILITIES = number;
export type RPC_C_QOS_IDENTITY = number;
export type RPC_C_AUTHN_INFO_TYPE = number;
export type RPC_C_HTTP_FLAGS = number;
export type RPC_C_HTTP_AUTHN_TARGET = number;
export type RPC_STATUS = number;
export type GROUP_NAME_SYNTAX = number;
export type SEC_WINNT_AUTH_IDENTITY = number;
export type RPC_BINDING_HANDLE_OPTIONS_FLAGS = number;
export type RPC_C_IMP_LEVEL = number;
export type RIP_INFO_TYPE = number;
export type RPC_HTTP_REDIRECTOR_STAGE = number;
export type RPC_ADDRESS_CHANGE_TYPE = number;
export type LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION = number;
export type RpcPerfCounters = number;
export type RPC_NOTIFICATION_TYPES = number;
export type RPC_ASYNC_EVENT = number;
export type ExtendedErrorParamTypes = number;
export type RpcLocalAddressFormat = number;
export type RpcCallType = number;
export type RpcCallClientLocality = number;
export type RPC_NOTIFICATIONS = number;
export type USER_MARSHAL_CB_TYPE = number;
export type IDL_CS_CONVERT = number;
export type XLAT_SIDE = number;
export type system_handle_t = number;
export type STUB_PHASE = number;
export type PROXY_PHASE = number;
export type MIDL_ES_CODE = number;
export type MIDL_ES_HANDLE_STYLE = number;
export type EXPR_TOKEN = number;

// Constants
export const RPC_C_QOS_CAPABILITIES_DEFAULT = 0;
export const RPC_C_QOS_CAPABILITIES_MUTUAL_AUTH = 1;
export const RPC_C_QOS_CAPABILITIES_MAKE_FULLSIC = 2;
export const RPC_C_QOS_CAPABILITIES_ANY_AUTHORITY = 4;
export const RPC_C_QOS_CAPABILITIES_IGNORE_DELEGATE_FAILURE = 8;
export const RPC_C_QOS_CAPABILITIES_LOCAL_MA_HINT = 16;
export const RPC_C_QOS_CAPABILITIES_SCHANNEL_FULL_AUTH_IDENTITY = 32;
export const RPC_C_QOS_IDENTITY_STATIC = 0;
export const RPC_C_QOS_IDENTITY_DYNAMIC = 1;
export const RPC_C_AUTHN_INFO_NONE = 0;
export const RPC_C_AUTHN_INFO_TYPE_HTTP = 1;
export const RPC_C_HTTP_FLAG_USE_SSL = 1;
export const RPC_C_HTTP_FLAG_USE_FIRST_AUTH_SCHEME = 2;
export const RPC_C_HTTP_FLAG_IGNORE_CERT_CN_INVALID = 8;
export const RPC_C_HTTP_FLAG_ENABLE_CERT_REVOCATION_CHECK = 16;
export const RPC_C_HTTP_AUTHN_TARGET_SERVER = 1;
export const RPC_C_HTTP_AUTHN_TARGET_PROXY = 2;
export const RPC_S_INVALID_STRING_BINDING = 1700;
export const RPC_S_WRONG_KIND_OF_BINDING = 1701;
export const RPC_S_INVALID_BINDING = 1702;
export const RPC_S_PROTSEQ_NOT_SUPPORTED = 1703;
export const RPC_S_INVALID_RPC_PROTSEQ = 1704;
export const RPC_S_INVALID_STRING_UUID = 1705;
export const RPC_S_INVALID_ENDPOINT_FORMAT = 1706;
export const RPC_S_INVALID_NET_ADDR = 1707;
export const RPC_S_NO_ENDPOINT_FOUND = 1708;
export const RPC_S_INVALID_TIMEOUT = 1709;
export const RPC_S_OBJECT_NOT_FOUND = 1710;
export const RPC_S_ALREADY_REGISTERED = 1711;
export const RPC_S_TYPE_ALREADY_REGISTERED = 1712;
export const RPC_S_ALREADY_LISTENING = 1713;
export const RPC_S_NO_PROTSEQS_REGISTERED = 1714;
export const RPC_S_NOT_LISTENING = 1715;
export const RPC_S_UNKNOWN_MGR_TYPE = 1716;
export const RPC_S_UNKNOWN_IF = 1717;
export const RPC_S_NO_BINDINGS = 1718;
export const RPC_S_NO_PROTSEQS = 1719;
export const RPC_S_CANT_CREATE_ENDPOINT = 1720;
export const RPC_S_OUT_OF_RESOURCES = 1721;
export const RPC_S_SERVER_UNAVAILABLE = 1722;
export const RPC_S_SERVER_TOO_BUSY = 1723;
export const RPC_S_INVALID_NETWORK_OPTIONS = 1724;
export const RPC_S_NO_CALL_ACTIVE = 1725;
export const RPC_S_CALL_FAILED = 1726;
export const RPC_S_CALL_FAILED_DNE = 1727;
export const RPC_S_PROTOCOL_ERROR = 1728;
export const RPC_S_PROXY_ACCESS_DENIED = 1729;
export const RPC_S_UNSUPPORTED_TRANS_SYN = 1730;
export const RPC_S_UNSUPPORTED_TYPE = 1732;
export const RPC_S_INVALID_TAG = 1733;
export const RPC_S_INVALID_BOUND = 1734;
export const RPC_S_NO_ENTRY_NAME = 1735;
export const RPC_S_INVALID_NAME_SYNTAX = 1736;
export const RPC_S_UNSUPPORTED_NAME_SYNTAX = 1737;
export const RPC_S_UUID_NO_ADDRESS = 1739;
export const RPC_S_DUPLICATE_ENDPOINT = 1740;
export const RPC_S_UNKNOWN_AUTHN_TYPE = 1741;
export const RPC_S_MAX_CALLS_TOO_SMALL = 1742;
export const RPC_S_STRING_TOO_LONG = 1743;
export const RPC_S_PROTSEQ_NOT_FOUND = 1744;
export const RPC_S_PROCNUM_OUT_OF_RANGE = 1745;
export const RPC_S_BINDING_HAS_NO_AUTH = 1746;
export const RPC_S_UNKNOWN_AUTHN_SERVICE = 1747;
export const RPC_S_UNKNOWN_AUTHN_LEVEL = 1748;
export const RPC_S_INVALID_AUTH_IDENTITY = 1749;
export const RPC_S_UNKNOWN_AUTHZ_SERVICE = 1750;
export const EPT_S_INVALID_ENTRY = 1751;
export const EPT_S_CANT_PERFORM_OP = 1752;
export const EPT_S_NOT_REGISTERED = 1753;
export const RPC_S_NOTHING_TO_EXPORT = 1754;
export const RPC_S_INCOMPLETE_NAME = 1755;
export const RPC_S_INVALID_VERS_OPTION = 1756;
export const RPC_S_NO_MORE_MEMBERS = 1757;
export const RPC_S_NOT_ALL_OBJS_UNEXPORTED = 1758;
export const RPC_S_INTERFACE_NOT_FOUND = 1759;
export const RPC_S_ENTRY_ALREADY_EXISTS = 1760;
export const RPC_S_ENTRY_NOT_FOUND = 1761;
export const RPC_S_NAME_SERVICE_UNAVAILABLE = 1762;
export const RPC_S_INVALID_NAF_ID = 1763;
export const RPC_S_CANNOT_SUPPORT = 1764;
export const RPC_S_NO_CONTEXT_AVAILABLE = 1765;
export const RPC_S_INTERNAL_ERROR = 1766;
export const RPC_S_ZERO_DIVIDE = 1767;
export const RPC_S_ADDRESS_ERROR = 1768;
export const RPC_S_FP_DIV_ZERO = 1769;
export const RPC_S_FP_UNDERFLOW = 1770;
export const RPC_S_FP_OVERFLOW = 1771;
export const RPC_S_CALL_IN_PROGRESS = 1791;
export const RPC_S_NO_MORE_BINDINGS = 1806;
export const RPC_S_NO_INTERFACES = 1817;
export const RPC_S_CALL_CANCELLED = 1818;
export const RPC_S_BINDING_INCOMPLETE = 1819;
export const RPC_S_COMM_FAILURE = 1820;
export const RPC_S_UNSUPPORTED_AUTHN_LEVEL = 1821;
export const RPC_S_NO_PRINC_NAME = 1822;
export const RPC_S_NOT_RPC_ERROR = 1823;
export const RPC_S_UUID_LOCAL_ONLY = 1824;
export const RPC_S_SEC_PKG_ERROR = 1825;
export const RPC_S_NOT_CANCELLED = 1826;
export const RPC_S_COOKIE_AUTH_FAILED = 1833;
export const RPC_S_DO_NOT_DISTURB = 1834;
export const RPC_S_SYSTEM_HANDLE_COUNT_EXCEEDED = 1835;
export const RPC_S_SYSTEM_HANDLE_TYPE_MISMATCH = 1836;
export const RPC_S_GROUP_MEMBER_NOT_FOUND = 1898;
export const EPT_S_CANT_CREATE = 1899;
export const RPC_S_INVALID_OBJECT = 1900;
export const RPC_S_SEND_INCOMPLETE = 1913;
export const RPC_S_INVALID_ASYNC_HANDLE = 1914;
export const RPC_S_INVALID_ASYNC_CALL = 1915;
export const RPC_S_ENTRY_TYPE_MISMATCH = 1922;
export const RPC_S_NOT_ALL_OBJS_EXPORTED = 1923;
export const RPC_S_INTERFACE_NOT_EXPORTED = 1924;
export const RPC_S_PROFILE_NOT_ADDED = 1925;
export const RPC_S_PRF_ELT_NOT_ADDED = 1926;
export const RPC_S_PRF_ELT_NOT_REMOVED = 1927;
export const RPC_S_GRP_ELT_NOT_ADDED = 1928;
export const RPC_S_GRP_ELT_NOT_REMOVED = 1929;
export const RPC_C_NS_SYNTAX_DEFAULT = 0;
export const RPC_C_NS_SYNTAX_DCE = 3;
export const SEC_WINNT_AUTH_IDENTITY_ANSI = 1;
export const SEC_WINNT_AUTH_IDENTITY_UNICODE = 2;
export const RPC_BHO_NONCAUSAL = 1;
export const RPC_BHO_DONTLINGER = 2;
export const RPC_C_BINDING_INFINITE_TIMEOUT = 10;
export const RPC_C_BINDING_MIN_TIMEOUT = 0;
export const RPC_C_BINDING_DEFAULT_TIMEOUT = 5;
export const RPC_C_BINDING_MAX_TIMEOUT = 9;
export const RPC_C_CANCEL_INFINITE_TIMEOUT = `-1`;
export const RPC_C_LISTEN_MAX_CALLS_DEFAULT = 1234;
export const RPC_C_PROTSEQ_MAX_REQS_DEFAULT = 10;
export const RPC_C_BIND_TO_ALL_NICS = 1;
export const RPC_C_USE_INTERNET_PORT = 1;
export const RPC_C_USE_INTRANET_PORT = 2;
export const RPC_C_DONT_FAIL = 4;
export const RPC_C_RPCHTTP_USE_LOAD_BALANCE = 8;
export const RPC_C_TRY_ENFORCE_MAX_CALLS = 16;
export const RPC_C_MQ_TEMPORARY = 0;
export const RPC_C_MQ_PERMANENT = 1;
export const RPC_C_MQ_CLEAR_ON_OPEN = 2;
export const RPC_C_MQ_USE_EXISTING_SECURITY = 4;
export const RPC_C_MQ_AUTHN_LEVEL_NONE = 0;
export const RPC_C_MQ_AUTHN_LEVEL_PKT_INTEGRITY = 8;
export const RPC_C_MQ_AUTHN_LEVEL_PKT_PRIVACY = 16;
export const RPC_C_MQ_EXPRESS = 0;
export const RPC_C_MQ_RECOVERABLE = 1;
export const RPC_C_MQ_JOURNAL_NONE = 0;
export const RPC_C_MQ_JOURNAL_DEADLETTER = 1;
export const RPC_C_MQ_JOURNAL_ALWAYS = 2;
export const RPC_C_OPT_MQ_DELIVERY = 1;
export const RPC_C_OPT_MQ_PRIORITY = 2;
export const RPC_C_OPT_MQ_JOURNAL = 3;
export const RPC_C_OPT_MQ_ACKNOWLEDGE = 4;
export const RPC_C_OPT_MQ_AUTHN_SERVICE = 5;
export const RPC_C_OPT_MQ_AUTHN_LEVEL = 6;
export const RPC_C_OPT_MQ_TIME_TO_REACH_QUEUE = 7;
export const RPC_C_OPT_MQ_TIME_TO_BE_RECEIVED = 8;
export const RPC_C_OPT_BINDING_NONCAUSAL = 9;
export const RPC_C_OPT_SECURITY_CALLBACK = 10;
export const RPC_C_OPT_UNIQUE_BINDING = 11;
export const RPC_C_OPT_MAX_OPTIONS = 12;
export const RPC_C_OPT_CALL_TIMEOUT = 12;
export const RPC_C_OPT_DONT_LINGER = 13;
export const RPC_C_OPT_TRANS_SEND_BUFFER_SIZE = 5;
export const RPC_C_OPT_TRUST_PEER = 14;
export const RPC_C_OPT_ASYNC_BLOCK = 15;
export const RPC_C_OPT_OPTIMIZE_TIME = 16;
export const RPC_C_FULL_CERT_CHAIN = 1;
export const RPC_C_STATS_CALLS_IN = 0;
export const RPC_C_STATS_CALLS_OUT = 1;
export const RPC_C_STATS_PKTS_IN = 2;
export const RPC_C_STATS_PKTS_OUT = 3;
export const RPC_C_AUTHN_NONE = 0;
export const RPC_C_AUTHN_DCE_PRIVATE = 1;
export const RPC_C_AUTHN_DCE_PUBLIC = 2;
export const RPC_C_AUTHN_DEC_PUBLIC = 4;
export const RPC_C_AUTHN_GSS_NEGOTIATE = 9;
export const RPC_C_AUTHN_WINNT = 10;
export const RPC_C_AUTHN_GSS_SCHANNEL = 14;
export const RPC_C_AUTHN_GSS_KERBEROS = 16;
export const RPC_C_AUTHN_DPA = 17;
export const RPC_C_AUTHN_MSN = 18;
export const RPC_C_AUTHN_DIGEST = 21;
export const RPC_C_AUTHN_KERNEL = 20;
export const RPC_C_AUTHN_NEGO_EXTENDER = 30;
export const RPC_C_AUTHN_PKU2U = 31;
export const RPC_C_AUTHN_LIVE_SSP = 32;
export const RPC_C_AUTHN_LIVEXP_SSP = 35;
export const RPC_C_AUTHN_CLOUD_AP = 36;
export const RPC_C_AUTHN_MSONLINE = 82;
export const RPC_C_AUTHN_MQ = 100;
export const RPC_C_AUTHN_DEFAULT = `-1`;
export const RPC_C_SECURITY_QOS_VERSION = 1;
export const RPC_C_SECURITY_QOS_VERSION_1 = 1;
export const RPC_C_SECURITY_QOS_VERSION_2 = 2;
export const RPC_C_HTTP_AUTHN_SCHEME_BASIC = 1;
export const RPC_C_HTTP_AUTHN_SCHEME_NTLM = 2;
export const RPC_C_HTTP_AUTHN_SCHEME_PASSPORT = 4;
export const RPC_C_HTTP_AUTHN_SCHEME_DIGEST = 8;
export const RPC_C_HTTP_AUTHN_SCHEME_NEGOTIATE = 16;
export const RPC_C_HTTP_AUTHN_SCHEME_CERT = 65536;
export const RPC_C_SECURITY_QOS_VERSION_3 = 3;
export const RPC_C_SECURITY_QOS_VERSION_4 = 4;
export const RPC_C_SECURITY_QOS_VERSION_5 = 5;
export const RPC_PROTSEQ_TCP = 1;
export const RPC_PROTSEQ_NMP = 2;
export const RPC_PROTSEQ_LRPC = 3;
export const RPC_PROTSEQ_HTTP = 4;
export const RPC_BHT_OBJECT_UUID_VALID = 1;
export const RPC_BHO_EXCLUSIVE_AND_GUARANTEED = 4;
export const RPC_C_AUTHZ_NONE = 0;
export const RPC_C_AUTHZ_NAME = 1;
export const RPC_C_AUTHZ_DCE = 2;
export const RPC_C_AUTHZ_DEFAULT = 4294967295;
export const DCE_C_ERROR_STRING_LEN = 256;
export const RPC_C_EP_ALL_ELTS = 0;
export const RPC_C_EP_MATCH_BY_IF = 1;
export const RPC_C_EP_MATCH_BY_OBJ = 2;
export const RPC_C_EP_MATCH_BY_BOTH = 3;
export const RPC_C_VERS_ALL = 1;
export const RPC_C_VERS_COMPATIBLE = 2;
export const RPC_C_VERS_EXACT = 3;
export const RPC_C_VERS_MAJOR_ONLY = 4;
export const RPC_C_VERS_UPTO = 5;
export const RPC_C_MGMT_INQ_IF_IDS = 0;
export const RPC_C_MGMT_INQ_PRINC_NAME = 1;
export const RPC_C_MGMT_INQ_STATS = 2;
export const RPC_C_MGMT_IS_SERVER_LISTEN = 3;
export const RPC_C_MGMT_STOP_SERVER_LISTEN = 4;
export const RPC_C_PARM_MAX_PACKET_LENGTH = 1;
export const RPC_C_PARM_BUFFER_LENGTH = 2;
export const RPC_IF_AUTOLISTEN = 1;
export const RPC_IF_OLE = 2;
export const RPC_IF_ALLOW_UNKNOWN_AUTHORITY = 4;
export const RPC_IF_ALLOW_SECURE_ONLY = 8;
export const RPC_IF_ALLOW_CALLBACKS_WITH_NO_AUTH = 16;
export const RPC_IF_ALLOW_LOCAL_ONLY = 32;
export const RPC_IF_SEC_NO_CACHE = 64;
export const RPC_IF_SEC_CACHE_PER_PROC = 128;
export const RPC_IF_ASYNC_CALLBACK = 256;
export const RPC_FW_IF_FLAG_DCOM = 1;
export const RPC_C_NOTIFY_ON_SEND_COMPLETE = 1;
export const MaxNumberOfEEInfoParams = 4;
export const RPC_EEINFO_VERSION = 1;
export const EEInfoPreviousRecordsMissing = 1;
export const EEInfoNextRecordsMissing = 2;
export const EEInfoUseFileTime = 4;
export const EEInfoGCCOM = 11;
export const EEInfoGCFRS = 12;
export const RPC_CALL_ATTRIBUTES_VERSION = 2;
export const RPC_QUERY_SERVER_PRINCIPAL_NAME = 2;
export const RPC_QUERY_CLIENT_PRINCIPAL_NAME = 4;
export const RPC_QUERY_CALL_LOCAL_ADDRESS = 8;
export const RPC_QUERY_CLIENT_PID = 16;
export const RPC_QUERY_IS_CLIENT_LOCAL = 32;
export const RPC_QUERY_NO_AUTH_REQUIRED = 64;
export const RPC_QUERY_CLIENT_ID = 128;
export const RPC_CALL_STATUS_CANCELLED = 1;
export const RPC_CALL_STATUS_DISCONNECTED = 2;
export const RPC_CONTEXT_HANDLE_DEFAULT_FLAGS = 0;
export const RPC_CONTEXT_HANDLE_FLAGS = 805306368;
export const RPC_CONTEXT_HANDLE_SERIALIZE = 268435456;
export const RPC_CONTEXT_HANDLE_DONT_SERIALIZE = 536870912;
export const RPC_TYPE_STRICT_CONTEXT_HANDLE = 1073741824;
export const RPC_TYPE_DISCONNECT_EVENT_CONTEXT_HANDLE = 2147483648;
export const RPC_NCA_FLAGS_DEFAULT = 0;
export const RPC_NCA_FLAGS_IDEMPOTENT = 1;
export const RPC_NCA_FLAGS_BROADCAST = 2;
export const RPC_NCA_FLAGS_MAYBE = 4;
export const RPCFLG_HAS_GUARANTEE = 16;
export const RPCFLG_WINRT_REMOTE_ASYNC = 32;
export const RPC_BUFFER_COMPLETE = 4096;
export const RPC_BUFFER_PARTIAL = 8192;
export const RPC_BUFFER_EXTRA = 16384;
export const RPC_BUFFER_ASYNC = 32768;
export const RPC_BUFFER_NONOTIFY = 65536;
export const RPCFLG_MESSAGE = 16777216;
export const RPCFLG_AUTO_COMPLETE = 134217728;
export const RPCFLG_LOCAL_CALL = 268435456;
export const RPCFLG_INPUT_SYNCHRONOUS = 536870912;
export const RPCFLG_ASYNCHRONOUS = 1073741824;
export const RPCFLG_NON_NDR = 2147483648;
export const RPCFLG_HAS_MULTI_SYNTAXES = 33554432;
export const RPCFLG_HAS_CALLBACK = 67108864;
export const RPCFLG_ACCESSIBILITY_BIT1 = 1048576;
export const RPCFLG_ACCESSIBILITY_BIT2 = 2097152;
export const RPCFLG_ACCESS_LOCAL = 4194304;
export const NDR_CUSTOM_OR_DEFAULT_ALLOCATOR = 268435456;
export const NDR_DEFAULT_ALLOCATOR = 536870912;
export const RPCFLG_NDR64_CONTAINS_ARM_LAYOUT = 67108864;
export const RPCFLG_SENDER_WAITING_FOR_REPLY = 8388608;
export const RPC_FLAGS_VALID_BIT = 32768;
export const NT351_INTERFACE_SIZE = 64;
export const RPC_INTERFACE_HAS_PIPES = 1;
export const RPC_SYSTEM_HANDLE_FREE_UNRETRIEVED = 1;
export const RPC_SYSTEM_HANDLE_FREE_RETRIEVED = 2;
export const RPC_SYSTEM_HANDLE_FREE_ALL = 3;
export const RPC_SYSTEM_HANDLE_FREE_ERROR_ON_CLOSE = 4;
export const TRANSPORT_TYPE_CN = 1;
export const TRANSPORT_TYPE_DG = 2;
export const TRANSPORT_TYPE_LPC = 4;
export const TRANSPORT_TYPE_WMSG = 8;
export const RPC_P_ADDR_FORMAT_TCP_IPV4 = 1;
export const RPC_P_ADDR_FORMAT_TCP_IPV6 = 2;
export const RPC_C_OPT_SESSION_ID = 6;
export const RPC_C_OPT_COOKIE_AUTH = 7;
export const RPC_C_OPT_RESOURCE_TYPE_UUID = 8;
export const RPC_PROXY_CONNECTION_TYPE_IN_PROXY = 0;
export const RPC_PROXY_CONNECTION_TYPE_OUT_PROXY = 1;
export const RPC_C_OPT_PRIVATE_SUPPRESS_WAKE = 1;
export const RPC_C_OPT_PRIVATE_DO_NOT_DISTURB = 2;
export const RPC_C_OPT_PRIVATE_BREAK_ON_SUSPEND = 3;
export const RPC_C_PROFILE_DEFAULT_ELT = 0;
export const RPC_C_PROFILE_ALL_ELT = 1;
export const RPC_C_PROFILE_ALL_ELTS = 1;
export const RPC_C_PROFILE_MATCH_BY_IF = 2;
export const RPC_C_PROFILE_MATCH_BY_MBR = 3;
export const RPC_C_PROFILE_MATCH_BY_BOTH = 4;
export const RPC_C_NS_DEFAULT_EXP_AGE = `-1`;
export const TARGET_IS_NT100_OR_LATER = 1;
export const TARGET_IS_NT63_OR_LATER = 1;
export const TARGET_IS_NT62_OR_LATER = 1;
export const TARGET_IS_NT61_OR_LATER = 1;
export const TARGET_IS_NT60_OR_LATER = 1;
export const TARGET_IS_NT51_OR_LATER = 1;
export const TARGET_IS_NT50_OR_LATER = 1;
export const TARGET_IS_NT40_OR_LATER = 1;
export const TARGET_IS_NT351_OR_WIN95_OR_LATER = 1;
export const cbNDRContext = 20;
export const USER_CALL_IS_ASYNC = 256;
export const USER_CALL_NEW_CORRELATION_DESC = 512;
export const MIDL_WINRT_TYPE_SERIALIZATION_INFO_CURRENT_VERSION = 1;
export const USER_MARSHAL_FC_BYTE = 1;
export const USER_MARSHAL_FC_CHAR = 2;
export const USER_MARSHAL_FC_SMALL = 3;
export const USER_MARSHAL_FC_USMALL = 4;
export const USER_MARSHAL_FC_WCHAR = 5;
export const USER_MARSHAL_FC_SHORT = 6;
export const USER_MARSHAL_FC_USHORT = 7;
export const USER_MARSHAL_FC_LONG = 8;
export const USER_MARSHAL_FC_ULONG = 9;
export const USER_MARSHAL_FC_FLOAT = 10;
export const USER_MARSHAL_FC_HYPER = 11;
export const USER_MARSHAL_FC_DOUBLE = 12;
export const INVALID_FRAGMENT_ID = 0;
export const NDR64_FC_EXPLICIT_HANDLE = 0;
export const NDR64_FC_BIND_GENERIC = 1;
export const NDR64_FC_BIND_PRIMITIVE = 2;
export const NDR64_FC_AUTO_HANDLE = 3;
export const NDR64_FC_CALLBACK_HANDLE = 4;
export const NDR64_FC_NO_HANDLE = 5;
export const __RPCPROXY_H_VERSION__ = 475;
export const MidlInterceptionInfoVersionOne = 1;
export const MidlWinrtTypeSerializationInfoVersionOne = 1;
export const RPC_C_IMP_LEVEL_DEFAULT = 0;
export const RPC_C_IMP_LEVEL_ANONYMOUS = 1;
export const RPC_C_IMP_LEVEL_IDENTIFY = 2;
export const RPC_C_IMP_LEVEL_IMPERSONATE = 3;
export const RPC_C_IMP_LEVEL_DELEGATE = 4;
export const SLE_ERROR = 1;
export const SLE_MINORERROR = 2;
export const SLE_WARNING = 3;
export const RPCHTTP_RS_REDIRECT = 1;
export const RPCHTTP_RS_ACCESS_1 = 2;
export const RPCHTTP_RS_SESSION = 3;
export const RPCHTTP_RS_ACCESS_2 = 4;
export const RPCHTTP_RS_INTERFACE = 5;
export const PROTOCOL_NOT_LOADED = 1;
export const PROTOCOL_LOADED = 2;
export const PROTOCOL_ADDRESS_CHANGE = 3;
export const MarshalDirectionMarshal = 0;
export const MarshalDirectionUnmarshal = 1;
export const RpcCurrentUniqueUser = 1;
export const RpcBackEndConnectionAttempts = 2;
export const RpcBackEndConnectionFailed = 3;
export const RpcRequestsPerSecond = 4;
export const RpcIncomingConnections = 5;
export const RpcIncomingBandwidth = 6;
export const RpcOutgoingBandwidth = 7;
export const RpcAttemptedLbsDecisions = 8;
export const RpcFailedLbsDecisions = 9;
export const RpcAttemptedLbsMessages = 10;
export const RpcFailedLbsMessages = 11;
export const RpcLastCounter = 12;
export const RpcNotificationTypeNone = 0;
export const RpcNotificationTypeEvent = 1;
export const RpcNotificationTypeApc = 2;
export const RpcNotificationTypeIoc = 3;
export const RpcNotificationTypeHwnd = 4;
export const RpcNotificationTypeCallback = 5;
export const RpcCallComplete = 0;
export const RpcSendComplete = 1;
export const RpcReceiveComplete = 2;
export const RpcClientDisconnect = 3;
export const RpcClientCancel = 4;
export const eeptAnsiString = 1;
export const eeptUnicodeString = 2;
export const eeptLongVal = 3;
export const eeptShortVal = 4;
export const eeptPointerVal = 5;
export const eeptNone = 6;
export const eeptBinary = 7;
export const rlafInvalid = 0;
export const rlafIPv4 = 1;
export const rlafIPv6 = 2;
export const rctInvalid = 0;
export const rctNormal = 1;
export const rctTraining = 2;
export const rctGuaranteed = 3;
export const rcclInvalid = 0;
export const rcclLocal = 1;
export const rcclRemote = 2;
export const rcclClientUnknownLocality = 3;
export const RpcNotificationCallNone = 0;
export const RpcNotificationClientDisconnect = 1;
export const RpcNotificationCallCancel = 2;
export const USER_MARSHAL_CB_BUFFER_SIZE = 0;
export const USER_MARSHAL_CB_MARSHALL = 1;
export const USER_MARSHAL_CB_UNMARSHALL = 2;
export const USER_MARSHAL_CB_FREE = 3;
export const IDL_CS_NO_CONVERT = 0;
export const IDL_CS_IN_PLACE_CONVERT = 1;
export const IDL_CS_NEW_BUFFER_CONVERT = 2;
export const XLAT_SERVER = 1;
export const XLAT_CLIENT = 2;
export const SYSTEM_HANDLE_FILE = 0;
export const SYSTEM_HANDLE_SEMAPHORE = 1;
export const SYSTEM_HANDLE_EVENT = 2;
export const SYSTEM_HANDLE_MUTEX = 3;
export const SYSTEM_HANDLE_PROCESS = 4;
export const SYSTEM_HANDLE_TOKEN = 5;
export const SYSTEM_HANDLE_SECTION = 6;
export const SYSTEM_HANDLE_REG_KEY = 7;
export const SYSTEM_HANDLE_THREAD = 8;
export const SYSTEM_HANDLE_COMPOSITION_OBJECT = 9;
export const SYSTEM_HANDLE_SOCKET = 10;
export const SYSTEM_HANDLE_JOB = 11;
export const SYSTEM_HANDLE_PIPE = 12;
export const SYSTEM_HANDLE_MAX = 12;
export const SYSTEM_HANDLE_INVALID = 255;
export const STUB_UNMARSHAL = 0;
export const STUB_CALL_SERVER = 1;
export const STUB_MARSHAL = 2;
export const STUB_CALL_SERVER_NO_HRESULT = 3;
export const PROXY_CALCSIZE = 0;
export const PROXY_GETBUFFER = 1;
export const PROXY_MARSHAL = 2;
export const PROXY_SENDRECEIVE = 3;
export const PROXY_UNMARSHAL = 4;
export const MES_ENCODE = 0;
export const MES_DECODE = 1;
export const MES_ENCODE_NDR64 = 2;
export const MES_INCREMENTAL_HANDLE = 0;
export const MES_FIXED_BUFFER_HANDLE = 1;
export const MES_DYNAMIC_BUFFER_HANDLE = 2;
export const FC_EXPR_START = 0;
export const FC_EXPR_ILLEGAL = 0;
export const FC_EXPR_CONST32 = 1;
export const FC_EXPR_CONST64 = 2;
export const FC_EXPR_VAR = 3;
export const FC_EXPR_OPER = 4;
export const FC_EXPR_NOOP = 5;
export const FC_EXPR_END = 6;

// Structs

/**
 * Windows.Win32.System.Rpc.NDR_SCONTEXT_1 (size: 16)
 */
export interface NDR_SCONTEXT_1 {
  /** array */
  pad: Deno.PointerValue | null;
  /** ptr */
  userContext: Deno.PointerValue | Uint8Array | null;
}

export const sizeofNDR_SCONTEXT_1 = 16;

export function allocNDR_SCONTEXT_1(data?: Partial<NDR_SCONTEXT_1>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR_SCONTEXT_1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pad !== undefined) view.setBigUint64(0, data.pad === null ? 0n : BigInt(util.toPointer(data.pad)), true);
  // 0x08: pointer
  if (data?.userContext !== undefined) view.setBigUint64(8, data.userContext === null ? 0n : BigInt(util.toPointer(data.userContext)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_BINDING_VECTOR (size: 16)
 */
export interface RPC_BINDING_VECTOR {
  /** u32 */
  Count: number;
  /** array */
  BindingH: Deno.PointerValue | null;
}

export const sizeofRPC_BINDING_VECTOR = 16;

export function allocRPC_BINDING_VECTOR(data?: Partial<RPC_BINDING_VECTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_BINDING_VECTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Count !== undefined) view.setUint32(0, Number(data.Count), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.BindingH !== undefined) view.setBigUint64(8, data.BindingH === null ? 0n : BigInt(util.toPointer(data.BindingH)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.UUID_VECTOR (size: 16)
 */
export interface UUID_VECTOR {
  /** u32 */
  Count: number;
  /** array */
  Uuid: Deno.PointerValue | null;
}

export const sizeofUUID_VECTOR = 16;

export function allocUUID_VECTOR(data?: Partial<UUID_VECTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofUUID_VECTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Count !== undefined) view.setUint32(0, Number(data.Count), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Uuid !== undefined) view.setBigUint64(8, data.Uuid === null ? 0n : BigInt(util.toPointer(data.Uuid)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_IF_ID (size: 16)
 */
export interface RPC_IF_ID {
  /** System.Guid */
  Uuid: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  VersMajor: number;
  /** u16 */
  VersMinor: number;
}

export const sizeofRPC_IF_ID = 16;

export function allocRPC_IF_ID(data?: Partial<RPC_IF_ID>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_IF_ID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Uuid !== undefined) view.setBigUint64(0, data.Uuid === null ? 0n : BigInt(util.toPointer(data.Uuid)), true);
  // 0x08: u16
  if (data?.VersMajor !== undefined) view.setUint16(8, Number(data.VersMajor), true);
  // 0x0a: u16
  if (data?.VersMinor !== undefined) view.setUint16(10, Number(data.VersMinor), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_PROTSEQ_VECTORA (size: 16)
 */
export interface RPC_PROTSEQ_VECTORA {
  /** u32 */
  Count: number;
  /** array */
  Protseq: Deno.PointerValue | null;
}

export const sizeofRPC_PROTSEQ_VECTORA = 16;

export function allocRPC_PROTSEQ_VECTORA(data?: Partial<RPC_PROTSEQ_VECTORA>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_PROTSEQ_VECTORA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Count !== undefined) view.setUint32(0, Number(data.Count), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Protseq !== undefined) view.setBigUint64(8, data.Protseq === null ? 0n : BigInt(util.toPointer(data.Protseq)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_PROTSEQ_VECTORW (size: 16)
 */
export interface RPC_PROTSEQ_VECTORW {
  /** u32 */
  Count: number;
  /** array */
  Protseq: Deno.PointerValue | null;
}

export const sizeofRPC_PROTSEQ_VECTORW = 16;

export function allocRPC_PROTSEQ_VECTORW(data?: Partial<RPC_PROTSEQ_VECTORW>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_PROTSEQ_VECTORW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Count !== undefined) view.setUint32(0, Number(data.Count), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Protseq !== undefined) view.setBigUint64(8, data.Protseq === null ? 0n : BigInt(util.toPointer(data.Protseq)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_POLICY (size: 16)
 */
export interface RPC_POLICY {
  /** u32 */
  Length: number;
  /** u32 */
  EndpointFlags: number;
  /** u32 */
  NICFlags: number;
}

export const sizeofRPC_POLICY = 16;

export function allocRPC_POLICY(data?: Partial<RPC_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: u32
  if (data?.EndpointFlags !== undefined) view.setUint32(4, Number(data.EndpointFlags), true);
  // 0x08: u32
  if (data?.NICFlags !== undefined) view.setUint32(8, Number(data.NICFlags), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_STATS_VECTOR (size: 16)
 */
export interface RPC_STATS_VECTOR {
  /** u32 */
  Count: number;
  /** array */
  Stats: Deno.PointerValue | null;
}

export const sizeofRPC_STATS_VECTOR = 16;

export function allocRPC_STATS_VECTOR(data?: Partial<RPC_STATS_VECTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_STATS_VECTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Count !== undefined) view.setUint32(0, Number(data.Count), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Stats !== undefined) view.setBigUint64(8, data.Stats === null ? 0n : BigInt(util.toPointer(data.Stats)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_IF_ID_VECTOR (size: 16)
 */
export interface RPC_IF_ID_VECTOR {
  /** u32 */
  Count: number;
  /** array */
  IfId: Deno.PointerValue | null;
}

export const sizeofRPC_IF_ID_VECTOR = 16;

export function allocRPC_IF_ID_VECTOR(data?: Partial<RPC_IF_ID_VECTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_IF_ID_VECTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Count !== undefined) view.setUint32(0, Number(data.Count), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.IfId !== undefined) view.setBigUint64(8, data.IfId === null ? 0n : BigInt(util.toPointer(data.IfId)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_SECURITY_QOS (size: 16)
 */
export interface RPC_SECURITY_QOS {
  /** u32 */
  Version: number;
  /** Windows.Win32.System.Rpc.RPC_C_QOS_CAPABILITIES */
  Capabilities: RPC_C_QOS_CAPABILITIES;
  /** Windows.Win32.System.Rpc.RPC_C_QOS_IDENTITY */
  IdentityTracking: RPC_C_QOS_IDENTITY;
  /** Windows.Win32.System.Com.RPC_C_IMP_LEVEL */
  ImpersonationType: RPC_C_IMP_LEVEL;
}

export const sizeofRPC_SECURITY_QOS = 16;

export function allocRPC_SECURITY_QOS(data?: Partial<RPC_SECURITY_QOS>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_SECURITY_QOS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Capabilities !== undefined) view.setUint32(4, Number(data.Capabilities), true);
  // 0x08: u32
  if (data?.IdentityTracking !== undefined) view.setUint32(8, Number(data.IdentityTracking), true);
  // 0x0c: u32
  if (data?.ImpersonationType !== undefined) view.setUint32(12, Number(data.ImpersonationType), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.SEC_WINNT_AUTH_IDENTITY_W (size: 48)
 */
export interface SEC_WINNT_AUTH_IDENTITY_W {
  /** ptr */
  User: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  UserLength: number;
  /** ptr */
  Domain: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  DomainLength: number;
  /** ptr */
  Password: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  PasswordLength: number;
  /** Windows.Win32.System.Rpc.SEC_WINNT_AUTH_IDENTITY */
  Flags: SEC_WINNT_AUTH_IDENTITY;
}

export const sizeofSEC_WINNT_AUTH_IDENTITY_W = 48;

export function allocSEC_WINNT_AUTH_IDENTITY_W(data?: Partial<SEC_WINNT_AUTH_IDENTITY_W>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_WINNT_AUTH_IDENTITY_W);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.User !== undefined) view.setBigUint64(0, data.User === null ? 0n : BigInt(util.toPointer(data.User)), true);
  // 0x08: u32
  if (data?.UserLength !== undefined) view.setUint32(8, Number(data.UserLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Domain !== undefined) view.setBigUint64(16, data.Domain === null ? 0n : BigInt(util.toPointer(data.Domain)), true);
  // 0x18: u32
  if (data?.DomainLength !== undefined) view.setUint32(24, Number(data.DomainLength), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Password !== undefined) view.setBigUint64(32, data.Password === null ? 0n : BigInt(util.toPointer(data.Password)), true);
  // 0x28: u32
  if (data?.PasswordLength !== undefined) view.setUint32(40, Number(data.PasswordLength), true);
  // 0x2c: u32
  if (data?.Flags !== undefined) view.setUint32(44, Number(data.Flags), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.SEC_WINNT_AUTH_IDENTITY_A (size: 48)
 */
export interface SEC_WINNT_AUTH_IDENTITY_A {
  /** ptr */
  User: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  UserLength: number;
  /** ptr */
  Domain: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  DomainLength: number;
  /** ptr */
  Password: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  PasswordLength: number;
  /** Windows.Win32.System.Rpc.SEC_WINNT_AUTH_IDENTITY */
  Flags: SEC_WINNT_AUTH_IDENTITY;
}

export const sizeofSEC_WINNT_AUTH_IDENTITY_A = 48;

export function allocSEC_WINNT_AUTH_IDENTITY_A(data?: Partial<SEC_WINNT_AUTH_IDENTITY_A>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_WINNT_AUTH_IDENTITY_A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.User !== undefined) view.setBigUint64(0, data.User === null ? 0n : BigInt(util.toPointer(data.User)), true);
  // 0x08: u32
  if (data?.UserLength !== undefined) view.setUint32(8, Number(data.UserLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Domain !== undefined) view.setBigUint64(16, data.Domain === null ? 0n : BigInt(util.toPointer(data.Domain)), true);
  // 0x18: u32
  if (data?.DomainLength !== undefined) view.setUint32(24, Number(data.DomainLength), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Password !== undefined) view.setBigUint64(32, data.Password === null ? 0n : BigInt(util.toPointer(data.Password)), true);
  // 0x28: u32
  if (data?.PasswordLength !== undefined) view.setUint32(40, Number(data.PasswordLength), true);
  // 0x2c: u32
  if (data?.Flags !== undefined) view.setUint32(44, Number(data.Flags), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_HTTP_TRANSPORT_CREDENTIALS_W (size: 40)
 */
export interface RPC_HTTP_TRANSPORT_CREDENTIALS_W {
  /** ptr */
  TransportCredentials: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Rpc.RPC_C_HTTP_FLAGS */
  Flags: RPC_C_HTTP_FLAGS;
  /** Windows.Win32.System.Rpc.RPC_C_HTTP_AUTHN_TARGET */
  AuthenticationTarget: RPC_C_HTTP_AUTHN_TARGET;
  /** u32 */
  NumberOfAuthnSchemes: number;
  /** ptr */
  AuthnSchemes: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ServerCertificateSubject: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRPC_HTTP_TRANSPORT_CREDENTIALS_W = 40;

export function allocRPC_HTTP_TRANSPORT_CREDENTIALS_W(data?: Partial<RPC_HTTP_TRANSPORT_CREDENTIALS_W>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_HTTP_TRANSPORT_CREDENTIALS_W);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TransportCredentials !== undefined) view.setBigUint64(0, data.TransportCredentials === null ? 0n : BigInt(util.toPointer(data.TransportCredentials)), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.AuthenticationTarget !== undefined) view.setUint32(12, Number(data.AuthenticationTarget), true);
  // 0x10: u32
  if (data?.NumberOfAuthnSchemes !== undefined) view.setUint32(16, Number(data.NumberOfAuthnSchemes), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.AuthnSchemes !== undefined) view.setBigUint64(24, data.AuthnSchemes === null ? 0n : BigInt(util.toPointer(data.AuthnSchemes)), true);
  // 0x20: pointer
  if (data?.ServerCertificateSubject !== undefined) view.setBigUint64(32, data.ServerCertificateSubject === null ? 0n : BigInt(util.toPointer(data.ServerCertificateSubject)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_HTTP_TRANSPORT_CREDENTIALS_A (size: 40)
 */
export interface RPC_HTTP_TRANSPORT_CREDENTIALS_A {
  /** ptr */
  TransportCredentials: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Rpc.RPC_C_HTTP_FLAGS */
  Flags: RPC_C_HTTP_FLAGS;
  /** Windows.Win32.System.Rpc.RPC_C_HTTP_AUTHN_TARGET */
  AuthenticationTarget: RPC_C_HTTP_AUTHN_TARGET;
  /** u32 */
  NumberOfAuthnSchemes: number;
  /** ptr */
  AuthnSchemes: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ServerCertificateSubject: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRPC_HTTP_TRANSPORT_CREDENTIALS_A = 40;

export function allocRPC_HTTP_TRANSPORT_CREDENTIALS_A(data?: Partial<RPC_HTTP_TRANSPORT_CREDENTIALS_A>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_HTTP_TRANSPORT_CREDENTIALS_A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TransportCredentials !== undefined) view.setBigUint64(0, data.TransportCredentials === null ? 0n : BigInt(util.toPointer(data.TransportCredentials)), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.AuthenticationTarget !== undefined) view.setUint32(12, Number(data.AuthenticationTarget), true);
  // 0x10: u32
  if (data?.NumberOfAuthnSchemes !== undefined) view.setUint32(16, Number(data.NumberOfAuthnSchemes), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.AuthnSchemes !== undefined) view.setBigUint64(24, data.AuthnSchemes === null ? 0n : BigInt(util.toPointer(data.AuthnSchemes)), true);
  // 0x20: pointer
  if (data?.ServerCertificateSubject !== undefined) view.setBigUint64(32, data.ServerCertificateSubject === null ? 0n : BigInt(util.toPointer(data.ServerCertificateSubject)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W (size: 64)
 */
export interface RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W {
  /** ptr */
  TransportCredentials: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Rpc.RPC_C_HTTP_FLAGS */
  Flags: RPC_C_HTTP_FLAGS;
  /** Windows.Win32.System.Rpc.RPC_C_HTTP_AUTHN_TARGET */
  AuthenticationTarget: RPC_C_HTTP_AUTHN_TARGET;
  /** u32 */
  NumberOfAuthnSchemes: number;
  /** ptr */
  AuthnSchemes: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ServerCertificateSubject: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ProxyCredentials: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumberOfProxyAuthnSchemes: number;
  /** ptr */
  ProxyAuthnSchemes: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRPC_HTTP_TRANSPORT_CREDENTIALS_V2_W = 64;

export function allocRPC_HTTP_TRANSPORT_CREDENTIALS_V2_W(data?: Partial<RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_HTTP_TRANSPORT_CREDENTIALS_V2_W);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TransportCredentials !== undefined) view.setBigUint64(0, data.TransportCredentials === null ? 0n : BigInt(util.toPointer(data.TransportCredentials)), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.AuthenticationTarget !== undefined) view.setUint32(12, Number(data.AuthenticationTarget), true);
  // 0x10: u32
  if (data?.NumberOfAuthnSchemes !== undefined) view.setUint32(16, Number(data.NumberOfAuthnSchemes), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.AuthnSchemes !== undefined) view.setBigUint64(24, data.AuthnSchemes === null ? 0n : BigInt(util.toPointer(data.AuthnSchemes)), true);
  // 0x20: pointer
  if (data?.ServerCertificateSubject !== undefined) view.setBigUint64(32, data.ServerCertificateSubject === null ? 0n : BigInt(util.toPointer(data.ServerCertificateSubject)), true);
  // 0x28: pointer
  if (data?.ProxyCredentials !== undefined) view.setBigUint64(40, data.ProxyCredentials === null ? 0n : BigInt(util.toPointer(data.ProxyCredentials)), true);
  // 0x30: u32
  if (data?.NumberOfProxyAuthnSchemes !== undefined) view.setUint32(48, Number(data.NumberOfProxyAuthnSchemes), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.ProxyAuthnSchemes !== undefined) view.setBigUint64(56, data.ProxyAuthnSchemes === null ? 0n : BigInt(util.toPointer(data.ProxyAuthnSchemes)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A (size: 64)
 */
export interface RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A {
  /** ptr */
  TransportCredentials: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Rpc.RPC_C_HTTP_FLAGS */
  Flags: RPC_C_HTTP_FLAGS;
  /** Windows.Win32.System.Rpc.RPC_C_HTTP_AUTHN_TARGET */
  AuthenticationTarget: RPC_C_HTTP_AUTHN_TARGET;
  /** u32 */
  NumberOfAuthnSchemes: number;
  /** ptr */
  AuthnSchemes: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ServerCertificateSubject: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ProxyCredentials: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumberOfProxyAuthnSchemes: number;
  /** ptr */
  ProxyAuthnSchemes: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRPC_HTTP_TRANSPORT_CREDENTIALS_V2_A = 64;

export function allocRPC_HTTP_TRANSPORT_CREDENTIALS_V2_A(data?: Partial<RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_HTTP_TRANSPORT_CREDENTIALS_V2_A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TransportCredentials !== undefined) view.setBigUint64(0, data.TransportCredentials === null ? 0n : BigInt(util.toPointer(data.TransportCredentials)), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.AuthenticationTarget !== undefined) view.setUint32(12, Number(data.AuthenticationTarget), true);
  // 0x10: u32
  if (data?.NumberOfAuthnSchemes !== undefined) view.setUint32(16, Number(data.NumberOfAuthnSchemes), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.AuthnSchemes !== undefined) view.setBigUint64(24, data.AuthnSchemes === null ? 0n : BigInt(util.toPointer(data.AuthnSchemes)), true);
  // 0x20: pointer
  if (data?.ServerCertificateSubject !== undefined) view.setBigUint64(32, data.ServerCertificateSubject === null ? 0n : BigInt(util.toPointer(data.ServerCertificateSubject)), true);
  // 0x28: pointer
  if (data?.ProxyCredentials !== undefined) view.setBigUint64(40, data.ProxyCredentials === null ? 0n : BigInt(util.toPointer(data.ProxyCredentials)), true);
  // 0x30: u32
  if (data?.NumberOfProxyAuthnSchemes !== undefined) view.setUint32(48, Number(data.NumberOfProxyAuthnSchemes), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.ProxyAuthnSchemes !== undefined) view.setBigUint64(56, data.ProxyAuthnSchemes === null ? 0n : BigInt(util.toPointer(data.ProxyAuthnSchemes)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W (size: 64)
 */
export interface RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W {
  /** ptr */
  TransportCredentials: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Rpc.RPC_C_HTTP_FLAGS */
  Flags: RPC_C_HTTP_FLAGS;
  /** Windows.Win32.System.Rpc.RPC_C_HTTP_AUTHN_TARGET */
  AuthenticationTarget: RPC_C_HTTP_AUTHN_TARGET;
  /** u32 */
  NumberOfAuthnSchemes: number;
  /** ptr */
  AuthnSchemes: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ServerCertificateSubject: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ProxyCredentials: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumberOfProxyAuthnSchemes: number;
  /** ptr */
  ProxyAuthnSchemes: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRPC_HTTP_TRANSPORT_CREDENTIALS_V3_W = 64;

export function allocRPC_HTTP_TRANSPORT_CREDENTIALS_V3_W(data?: Partial<RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_HTTP_TRANSPORT_CREDENTIALS_V3_W);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TransportCredentials !== undefined) view.setBigUint64(0, data.TransportCredentials === null ? 0n : BigInt(util.toPointer(data.TransportCredentials)), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.AuthenticationTarget !== undefined) view.setUint32(12, Number(data.AuthenticationTarget), true);
  // 0x10: u32
  if (data?.NumberOfAuthnSchemes !== undefined) view.setUint32(16, Number(data.NumberOfAuthnSchemes), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.AuthnSchemes !== undefined) view.setBigUint64(24, data.AuthnSchemes === null ? 0n : BigInt(util.toPointer(data.AuthnSchemes)), true);
  // 0x20: pointer
  if (data?.ServerCertificateSubject !== undefined) view.setBigUint64(32, data.ServerCertificateSubject === null ? 0n : BigInt(util.toPointer(data.ServerCertificateSubject)), true);
  // 0x28: pointer
  if (data?.ProxyCredentials !== undefined) view.setBigUint64(40, data.ProxyCredentials === null ? 0n : BigInt(util.toPointer(data.ProxyCredentials)), true);
  // 0x30: u32
  if (data?.NumberOfProxyAuthnSchemes !== undefined) view.setUint32(48, Number(data.NumberOfProxyAuthnSchemes), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.ProxyAuthnSchemes !== undefined) view.setBigUint64(56, data.ProxyAuthnSchemes === null ? 0n : BigInt(util.toPointer(data.ProxyAuthnSchemes)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A (size: 64)
 */
export interface RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A {
  /** ptr */
  TransportCredentials: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Rpc.RPC_C_HTTP_FLAGS */
  Flags: RPC_C_HTTP_FLAGS;
  /** Windows.Win32.System.Rpc.RPC_C_HTTP_AUTHN_TARGET */
  AuthenticationTarget: RPC_C_HTTP_AUTHN_TARGET;
  /** u32 */
  NumberOfAuthnSchemes: number;
  /** ptr */
  AuthnSchemes: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ServerCertificateSubject: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ProxyCredentials: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumberOfProxyAuthnSchemes: number;
  /** ptr */
  ProxyAuthnSchemes: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRPC_HTTP_TRANSPORT_CREDENTIALS_V3_A = 64;

export function allocRPC_HTTP_TRANSPORT_CREDENTIALS_V3_A(data?: Partial<RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_HTTP_TRANSPORT_CREDENTIALS_V3_A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TransportCredentials !== undefined) view.setBigUint64(0, data.TransportCredentials === null ? 0n : BigInt(util.toPointer(data.TransportCredentials)), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.AuthenticationTarget !== undefined) view.setUint32(12, Number(data.AuthenticationTarget), true);
  // 0x10: u32
  if (data?.NumberOfAuthnSchemes !== undefined) view.setUint32(16, Number(data.NumberOfAuthnSchemes), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.AuthnSchemes !== undefined) view.setBigUint64(24, data.AuthnSchemes === null ? 0n : BigInt(util.toPointer(data.AuthnSchemes)), true);
  // 0x20: pointer
  if (data?.ServerCertificateSubject !== undefined) view.setBigUint64(32, data.ServerCertificateSubject === null ? 0n : BigInt(util.toPointer(data.ServerCertificateSubject)), true);
  // 0x28: pointer
  if (data?.ProxyCredentials !== undefined) view.setBigUint64(40, data.ProxyCredentials === null ? 0n : BigInt(util.toPointer(data.ProxyCredentials)), true);
  // 0x30: u32
  if (data?.NumberOfProxyAuthnSchemes !== undefined) view.setUint32(48, Number(data.NumberOfProxyAuthnSchemes), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.ProxyAuthnSchemes !== undefined) view.setBigUint64(56, data.ProxyAuthnSchemes === null ? 0n : BigInt(util.toPointer(data.ProxyAuthnSchemes)), true);
  return buf;
}

export type NTSTATUS = number;

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD (size: 48)
 */
export interface EXCEPTION_RECORD {
  /** Windows.Win32.Foundation.NTSTATUS */
  ExceptionCode: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ExceptionFlags: number;
  /** ptr */
  ExceptionRecord: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ExceptionAddress: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumberParameters: number;
  /** array */
  ExceptionInformation: Deno.PointerValue | null;
}

export const sizeofEXCEPTION_RECORD = 48;

export function allocEXCEPTION_RECORD(data?: Partial<EXCEPTION_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionCode !== undefined) view.setBigUint64(0, data.ExceptionCode === null ? 0n : BigInt(util.toPointer(data.ExceptionCode)), true);
  // 0x08: u32
  if (data?.ExceptionFlags !== undefined) view.setUint32(8, Number(data.ExceptionFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(16, data.ExceptionRecord === null ? 0n : BigInt(util.toPointer(data.ExceptionRecord)), true);
  // 0x18: pointer
  if (data?.ExceptionAddress !== undefined) view.setBigUint64(24, data.ExceptionAddress === null ? 0n : BigInt(util.toPointer(data.ExceptionAddress)), true);
  // 0x20: u32
  if (data?.NumberParameters !== undefined) view.setUint32(32, Number(data.NumberParameters), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ExceptionInformation !== undefined) view.setBigUint64(40, data.ExceptionInformation === null ? 0n : BigInt(util.toPointer(data.ExceptionInformation)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_DEBUG_INFO (size: 16)
 */
export interface EXCEPTION_DEBUG_INFO {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD */
  ExceptionRecord: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFirstChance: number;
}

export const sizeofEXCEPTION_DEBUG_INFO = 16;

export function allocEXCEPTION_DEBUG_INFO(data?: Partial<EXCEPTION_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(0, data.ExceptionRecord === null ? 0n : BigInt(util.toPointer(data.ExceptionRecord)), true);
  // 0x08: u32
  if (data?.dwFirstChance !== undefined) view.setUint32(8, Number(data.dwFirstChance), true);
  // 0x0c: pad4
  return buf;
}

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.System.Diagnostics.Debug.CREATE_THREAD_DEBUG_INFO (size: 24)
 */
export interface CREATE_THREAD_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpThreadLocalBase: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */
  lpStartAddress: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCREATE_THREAD_DEBUG_INFO = 24;

export function allocCREATE_THREAD_DEBUG_INFO(data?: Partial<CREATE_THREAD_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_THREAD_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hThread !== undefined) view.setBigUint64(0, data.hThread === null ? 0n : BigInt(util.toPointer(data.hThread)), true);
  // 0x08: pointer
  if (data?.lpThreadLocalBase !== undefined) view.setBigUint64(8, data.lpThreadLocalBase === null ? 0n : BigInt(util.toPointer(data.lpThreadLocalBase)), true);
  // 0x10: pointer
  if (data?.lpStartAddress !== undefined) view.setBigUint64(16, data.lpStartAddress === null ? 0n : BigInt(util.toPointer(data.lpStartAddress)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.CREATE_PROCESS_DEBUG_INFO (size: 72)
 */
export interface CREATE_PROCESS_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hProcess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpBaseOfImage: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwDebugInfoFileOffset: number;
  /** u32 */
  nDebugInfoSize: number;
  /** ptr */
  lpThreadLocalBase: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */
  lpStartAddress: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpImageName: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  fUnicode: number;
}

export const sizeofCREATE_PROCESS_DEBUG_INFO = 72;

export function allocCREATE_PROCESS_DEBUG_INFO(data?: Partial<CREATE_PROCESS_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_PROCESS_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(util.toPointer(data.hFile)), true);
  // 0x08: pointer
  if (data?.hProcess !== undefined) view.setBigUint64(8, data.hProcess === null ? 0n : BigInt(util.toPointer(data.hProcess)), true);
  // 0x10: pointer
  if (data?.hThread !== undefined) view.setBigUint64(16, data.hThread === null ? 0n : BigInt(util.toPointer(data.hThread)), true);
  // 0x18: pointer
  if (data?.lpBaseOfImage !== undefined) view.setBigUint64(24, data.lpBaseOfImage === null ? 0n : BigInt(util.toPointer(data.lpBaseOfImage)), true);
  // 0x20: u32
  if (data?.dwDebugInfoFileOffset !== undefined) view.setUint32(32, Number(data.dwDebugInfoFileOffset), true);
  // 0x24: u32
  if (data?.nDebugInfoSize !== undefined) view.setUint32(36, Number(data.nDebugInfoSize), true);
  // 0x28: pointer
  if (data?.lpThreadLocalBase !== undefined) view.setBigUint64(40, data.lpThreadLocalBase === null ? 0n : BigInt(util.toPointer(data.lpThreadLocalBase)), true);
  // 0x30: pointer
  if (data?.lpStartAddress !== undefined) view.setBigUint64(48, data.lpStartAddress === null ? 0n : BigInt(util.toPointer(data.lpStartAddress)), true);
  // 0x38: pointer
  if (data?.lpImageName !== undefined) view.setBigUint64(56, data.lpImageName === null ? 0n : BigInt(util.toPointer(data.lpImageName)), true);
  // 0x40: u16
  if (data?.fUnicode !== undefined) view.setUint16(64, Number(data.fUnicode), true);
  // 0x42: pad6
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXIT_THREAD_DEBUG_INFO (size: 8)
 */
export interface EXIT_THREAD_DEBUG_INFO {
  /** u32 */
  dwExitCode: number;
}

export const sizeofEXIT_THREAD_DEBUG_INFO = 8;

export function allocEXIT_THREAD_DEBUG_INFO(data?: Partial<EXIT_THREAD_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXIT_THREAD_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExitCode !== undefined) view.setUint32(0, Number(data.dwExitCode), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXIT_PROCESS_DEBUG_INFO (size: 8)
 */
export interface EXIT_PROCESS_DEBUG_INFO {
  /** u32 */
  dwExitCode: number;
}

export const sizeofEXIT_PROCESS_DEBUG_INFO = 8;

export function allocEXIT_PROCESS_DEBUG_INFO(data?: Partial<EXIT_PROCESS_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXIT_PROCESS_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExitCode !== undefined) view.setUint32(0, Number(data.dwExitCode), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.LOAD_DLL_DEBUG_INFO (size: 40)
 */
export interface LOAD_DLL_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwDebugInfoFileOffset: number;
  /** u32 */
  nDebugInfoSize: number;
  /** ptr */
  lpImageName: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  fUnicode: number;
}

export const sizeofLOAD_DLL_DEBUG_INFO = 40;

export function allocLOAD_DLL_DEBUG_INFO(data?: Partial<LOAD_DLL_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofLOAD_DLL_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(util.toPointer(data.hFile)), true);
  // 0x08: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(8, data.lpBaseOfDll === null ? 0n : BigInt(util.toPointer(data.lpBaseOfDll)), true);
  // 0x10: u32
  if (data?.dwDebugInfoFileOffset !== undefined) view.setUint32(16, Number(data.dwDebugInfoFileOffset), true);
  // 0x14: u32
  if (data?.nDebugInfoSize !== undefined) view.setUint32(20, Number(data.nDebugInfoSize), true);
  // 0x18: pointer
  if (data?.lpImageName !== undefined) view.setBigUint64(24, data.lpImageName === null ? 0n : BigInt(util.toPointer(data.lpImageName)), true);
  // 0x20: u16
  if (data?.fUnicode !== undefined) view.setUint16(32, Number(data.fUnicode), true);
  // 0x22: pad6
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.UNLOAD_DLL_DEBUG_INFO (size: 8)
 */
export interface UNLOAD_DLL_DEBUG_INFO {
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array | null;
}

export const sizeofUNLOAD_DLL_DEBUG_INFO = 8;

export function allocUNLOAD_DLL_DEBUG_INFO(data?: Partial<UNLOAD_DLL_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofUNLOAD_DLL_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(0, data.lpBaseOfDll === null ? 0n : BigInt(util.toPointer(data.lpBaseOfDll)), true);
  return buf;
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.System.Diagnostics.Debug.OUTPUT_DEBUG_STRING_INFO (size: 16)
 */
export interface OUTPUT_DEBUG_STRING_INFO {
  /** Windows.Win32.Foundation.PSTR */
  lpDebugStringData: string | null;
  /** u16 */
  fUnicode: number;
  /** u16 */
  nDebugStringLength: number;
}

export const sizeofOUTPUT_DEBUG_STRING_INFO = 16;

export function allocOUTPUT_DEBUG_STRING_INFO(data?: Partial<OUTPUT_DEBUG_STRING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofOUTPUT_DEBUG_STRING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpDebugStringData !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpDebugStringData);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u16
  if (data?.fUnicode !== undefined) view.setUint16(8, Number(data.fUnicode), true);
  // 0x0a: u16
  if (data?.nDebugStringLength !== undefined) view.setUint16(10, Number(data.nDebugStringLength), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.RIP_INFO (size: 8)
 */
export interface RIP_INFO {
  /** u32 */
  dwError: number;
  /** Windows.Win32.System.Diagnostics.Debug.RIP_INFO_TYPE */
  dwType: RIP_INFO_TYPE;
}

export const sizeofRIP_INFO = 8;

export function allocRIP_INFO(data?: Partial<RIP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRIP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwError !== undefined) view.setUint32(0, Number(data.dwError), true);
  // 0x04: u32
  if (data?.dwType !== undefined) view.setUint32(4, Number(data.dwType), true);
  return buf;
}

/**
 * _u_e__Union (size: 72)
 */
export interface _u_e__Union {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_DEBUG_INFO */
  Exception: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.CREATE_THREAD_DEBUG_INFO */
  CreateThread: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.CREATE_PROCESS_DEBUG_INFO */
  CreateProcessInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.EXIT_THREAD_DEBUG_INFO */
  ExitThread: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.EXIT_PROCESS_DEBUG_INFO */
  ExitProcess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.LOAD_DLL_DEBUG_INFO */
  LoadDll: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.UNLOAD_DLL_DEBUG_INFO */
  UnloadDll: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.OUTPUT_DEBUG_STRING_INFO */
  DebugString: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.RIP_INFO */
  RipInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_u_e__Union = 72;

export function alloc_u_e__Union(data?: Partial<_u_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Exception !== undefined) view.setBigUint64(0, data.Exception === null ? 0n : BigInt(util.toPointer(data.Exception)), true);
  // 0x08: pointer
  if (data?.CreateThread !== undefined) view.setBigUint64(8, data.CreateThread === null ? 0n : BigInt(util.toPointer(data.CreateThread)), true);
  // 0x10: pointer
  if (data?.CreateProcessInfo !== undefined) view.setBigUint64(16, data.CreateProcessInfo === null ? 0n : BigInt(util.toPointer(data.CreateProcessInfo)), true);
  // 0x18: pointer
  if (data?.ExitThread !== undefined) view.setBigUint64(24, data.ExitThread === null ? 0n : BigInt(util.toPointer(data.ExitThread)), true);
  // 0x20: pointer
  if (data?.ExitProcess !== undefined) view.setBigUint64(32, data.ExitProcess === null ? 0n : BigInt(util.toPointer(data.ExitProcess)), true);
  // 0x28: pointer
  if (data?.LoadDll !== undefined) view.setBigUint64(40, data.LoadDll === null ? 0n : BigInt(util.toPointer(data.LoadDll)), true);
  // 0x30: pointer
  if (data?.UnloadDll !== undefined) view.setBigUint64(48, data.UnloadDll === null ? 0n : BigInt(util.toPointer(data.UnloadDll)), true);
  // 0x38: pointer
  if (data?.DebugString !== undefined) view.setBigUint64(56, data.DebugString === null ? 0n : BigInt(util.toPointer(data.DebugString)), true);
  // 0x40: pointer
  if (data?.RipInfo !== undefined) view.setBigUint64(64, data.RipInfo === null ? 0n : BigInt(util.toPointer(data.RipInfo)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_SECURITY_QOS_V2_W (size: 32)
 */
export interface RPC_SECURITY_QOS_V2_W {
  /** u32 */
  Version: number;
  /** Windows.Win32.System.Rpc.RPC_C_QOS_CAPABILITIES */
  Capabilities: RPC_C_QOS_CAPABILITIES;
  /** Windows.Win32.System.Rpc.RPC_C_QOS_IDENTITY */
  IdentityTracking: RPC_C_QOS_IDENTITY;
  /** Windows.Win32.System.Com.RPC_C_IMP_LEVEL */
  ImpersonationType: RPC_C_IMP_LEVEL;
  /** Windows.Win32.System.Rpc.RPC_C_AUTHN_INFO_TYPE */
  AdditionalSecurityInfoType: RPC_C_AUTHN_INFO_TYPE;
  /** _u_e__Union */
  u: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRPC_SECURITY_QOS_V2_W = 32;

export function allocRPC_SECURITY_QOS_V2_W(data?: Partial<RPC_SECURITY_QOS_V2_W>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_SECURITY_QOS_V2_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Capabilities !== undefined) view.setUint32(4, Number(data.Capabilities), true);
  // 0x08: u32
  if (data?.IdentityTracking !== undefined) view.setUint32(8, Number(data.IdentityTracking), true);
  // 0x0c: u32
  if (data?.ImpersonationType !== undefined) view.setUint32(12, Number(data.ImpersonationType), true);
  // 0x10: u32
  if (data?.AdditionalSecurityInfoType !== undefined) view.setUint32(16, Number(data.AdditionalSecurityInfoType), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.u !== undefined) view.setBigUint64(24, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_SECURITY_QOS_V2_A (size: 32)
 */
export interface RPC_SECURITY_QOS_V2_A {
  /** u32 */
  Version: number;
  /** Windows.Win32.System.Rpc.RPC_C_QOS_CAPABILITIES */
  Capabilities: RPC_C_QOS_CAPABILITIES;
  /** Windows.Win32.System.Rpc.RPC_C_QOS_IDENTITY */
  IdentityTracking: RPC_C_QOS_IDENTITY;
  /** Windows.Win32.System.Com.RPC_C_IMP_LEVEL */
  ImpersonationType: RPC_C_IMP_LEVEL;
  /** Windows.Win32.System.Rpc.RPC_C_AUTHN_INFO_TYPE */
  AdditionalSecurityInfoType: RPC_C_AUTHN_INFO_TYPE;
  /** _u_e__Union */
  u: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRPC_SECURITY_QOS_V2_A = 32;

export function allocRPC_SECURITY_QOS_V2_A(data?: Partial<RPC_SECURITY_QOS_V2_A>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_SECURITY_QOS_V2_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Capabilities !== undefined) view.setUint32(4, Number(data.Capabilities), true);
  // 0x08: u32
  if (data?.IdentityTracking !== undefined) view.setUint32(8, Number(data.IdentityTracking), true);
  // 0x0c: u32
  if (data?.ImpersonationType !== undefined) view.setUint32(12, Number(data.ImpersonationType), true);
  // 0x10: u32
  if (data?.AdditionalSecurityInfoType !== undefined) view.setUint32(16, Number(data.AdditionalSecurityInfoType), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.u !== undefined) view.setBigUint64(24, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_SECURITY_QOS_V3_W (size: 40)
 */
export interface RPC_SECURITY_QOS_V3_W {
  /** u32 */
  Version: number;
  /** Windows.Win32.System.Rpc.RPC_C_QOS_CAPABILITIES */
  Capabilities: RPC_C_QOS_CAPABILITIES;
  /** Windows.Win32.System.Rpc.RPC_C_QOS_IDENTITY */
  IdentityTracking: RPC_C_QOS_IDENTITY;
  /** Windows.Win32.System.Com.RPC_C_IMP_LEVEL */
  ImpersonationType: RPC_C_IMP_LEVEL;
  /** Windows.Win32.System.Rpc.RPC_C_AUTHN_INFO_TYPE */
  AdditionalSecurityInfoType: RPC_C_AUTHN_INFO_TYPE;
  /** _u_e__Union */
  u: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Sid: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRPC_SECURITY_QOS_V3_W = 40;

export function allocRPC_SECURITY_QOS_V3_W(data?: Partial<RPC_SECURITY_QOS_V3_W>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_SECURITY_QOS_V3_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Capabilities !== undefined) view.setUint32(4, Number(data.Capabilities), true);
  // 0x08: u32
  if (data?.IdentityTracking !== undefined) view.setUint32(8, Number(data.IdentityTracking), true);
  // 0x0c: u32
  if (data?.ImpersonationType !== undefined) view.setUint32(12, Number(data.ImpersonationType), true);
  // 0x10: u32
  if (data?.AdditionalSecurityInfoType !== undefined) view.setUint32(16, Number(data.AdditionalSecurityInfoType), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.u !== undefined) view.setBigUint64(24, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  // 0x20: pointer
  if (data?.Sid !== undefined) view.setBigUint64(32, data.Sid === null ? 0n : BigInt(util.toPointer(data.Sid)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_SECURITY_QOS_V3_A (size: 40)
 */
export interface RPC_SECURITY_QOS_V3_A {
  /** u32 */
  Version: number;
  /** Windows.Win32.System.Rpc.RPC_C_QOS_CAPABILITIES */
  Capabilities: RPC_C_QOS_CAPABILITIES;
  /** Windows.Win32.System.Rpc.RPC_C_QOS_IDENTITY */
  IdentityTracking: RPC_C_QOS_IDENTITY;
  /** Windows.Win32.System.Com.RPC_C_IMP_LEVEL */
  ImpersonationType: RPC_C_IMP_LEVEL;
  /** Windows.Win32.System.Rpc.RPC_C_AUTHN_INFO_TYPE */
  AdditionalSecurityInfoType: RPC_C_AUTHN_INFO_TYPE;
  /** _u_e__Union */
  u: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Sid: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRPC_SECURITY_QOS_V3_A = 40;

export function allocRPC_SECURITY_QOS_V3_A(data?: Partial<RPC_SECURITY_QOS_V3_A>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_SECURITY_QOS_V3_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Capabilities !== undefined) view.setUint32(4, Number(data.Capabilities), true);
  // 0x08: u32
  if (data?.IdentityTracking !== undefined) view.setUint32(8, Number(data.IdentityTracking), true);
  // 0x0c: u32
  if (data?.ImpersonationType !== undefined) view.setUint32(12, Number(data.ImpersonationType), true);
  // 0x10: u32
  if (data?.AdditionalSecurityInfoType !== undefined) view.setUint32(16, Number(data.AdditionalSecurityInfoType), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.u !== undefined) view.setBigUint64(24, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  // 0x20: pointer
  if (data?.Sid !== undefined) view.setBigUint64(32, data.Sid === null ? 0n : BigInt(util.toPointer(data.Sid)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_SECURITY_QOS_V4_W (size: 48)
 */
export interface RPC_SECURITY_QOS_V4_W {
  /** u32 */
  Version: number;
  /** Windows.Win32.System.Rpc.RPC_C_QOS_CAPABILITIES */
  Capabilities: RPC_C_QOS_CAPABILITIES;
  /** Windows.Win32.System.Rpc.RPC_C_QOS_IDENTITY */
  IdentityTracking: RPC_C_QOS_IDENTITY;
  /** Windows.Win32.System.Com.RPC_C_IMP_LEVEL */
  ImpersonationType: RPC_C_IMP_LEVEL;
  /** Windows.Win32.System.Rpc.RPC_C_AUTHN_INFO_TYPE */
  AdditionalSecurityInfoType: RPC_C_AUTHN_INFO_TYPE;
  /** _u_e__Union */
  u: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Sid: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  EffectiveOnly: number;
}

export const sizeofRPC_SECURITY_QOS_V4_W = 48;

export function allocRPC_SECURITY_QOS_V4_W(data?: Partial<RPC_SECURITY_QOS_V4_W>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_SECURITY_QOS_V4_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Capabilities !== undefined) view.setUint32(4, Number(data.Capabilities), true);
  // 0x08: u32
  if (data?.IdentityTracking !== undefined) view.setUint32(8, Number(data.IdentityTracking), true);
  // 0x0c: u32
  if (data?.ImpersonationType !== undefined) view.setUint32(12, Number(data.ImpersonationType), true);
  // 0x10: u32
  if (data?.AdditionalSecurityInfoType !== undefined) view.setUint32(16, Number(data.AdditionalSecurityInfoType), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.u !== undefined) view.setBigUint64(24, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  // 0x20: pointer
  if (data?.Sid !== undefined) view.setBigUint64(32, data.Sid === null ? 0n : BigInt(util.toPointer(data.Sid)), true);
  // 0x28: u32
  if (data?.EffectiveOnly !== undefined) view.setUint32(40, Number(data.EffectiveOnly), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_SECURITY_QOS_V4_A (size: 48)
 */
export interface RPC_SECURITY_QOS_V4_A {
  /** u32 */
  Version: number;
  /** Windows.Win32.System.Rpc.RPC_C_QOS_CAPABILITIES */
  Capabilities: RPC_C_QOS_CAPABILITIES;
  /** Windows.Win32.System.Rpc.RPC_C_QOS_IDENTITY */
  IdentityTracking: RPC_C_QOS_IDENTITY;
  /** Windows.Win32.System.Com.RPC_C_IMP_LEVEL */
  ImpersonationType: RPC_C_IMP_LEVEL;
  /** Windows.Win32.System.Rpc.RPC_C_AUTHN_INFO_TYPE */
  AdditionalSecurityInfoType: RPC_C_AUTHN_INFO_TYPE;
  /** _u_e__Union */
  u: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Sid: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  EffectiveOnly: number;
}

export const sizeofRPC_SECURITY_QOS_V4_A = 48;

export function allocRPC_SECURITY_QOS_V4_A(data?: Partial<RPC_SECURITY_QOS_V4_A>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_SECURITY_QOS_V4_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Capabilities !== undefined) view.setUint32(4, Number(data.Capabilities), true);
  // 0x08: u32
  if (data?.IdentityTracking !== undefined) view.setUint32(8, Number(data.IdentityTracking), true);
  // 0x0c: u32
  if (data?.ImpersonationType !== undefined) view.setUint32(12, Number(data.ImpersonationType), true);
  // 0x10: u32
  if (data?.AdditionalSecurityInfoType !== undefined) view.setUint32(16, Number(data.AdditionalSecurityInfoType), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.u !== undefined) view.setBigUint64(24, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  // 0x20: pointer
  if (data?.Sid !== undefined) view.setBigUint64(32, data.Sid === null ? 0n : BigInt(util.toPointer(data.Sid)), true);
  // 0x28: u32
  if (data?.EffectiveOnly !== undefined) view.setUint32(40, Number(data.EffectiveOnly), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_SECURITY_QOS_V5_W (size: 56)
 */
export interface RPC_SECURITY_QOS_V5_W {
  /** u32 */
  Version: number;
  /** Windows.Win32.System.Rpc.RPC_C_QOS_CAPABILITIES */
  Capabilities: RPC_C_QOS_CAPABILITIES;
  /** Windows.Win32.System.Rpc.RPC_C_QOS_IDENTITY */
  IdentityTracking: RPC_C_QOS_IDENTITY;
  /** Windows.Win32.System.Com.RPC_C_IMP_LEVEL */
  ImpersonationType: RPC_C_IMP_LEVEL;
  /** Windows.Win32.System.Rpc.RPC_C_AUTHN_INFO_TYPE */
  AdditionalSecurityInfoType: RPC_C_AUTHN_INFO_TYPE;
  /** _u_e__Union */
  u: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Sid: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  EffectiveOnly: number;
  /** ptr */
  ServerSecurityDescriptor: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRPC_SECURITY_QOS_V5_W = 56;

export function allocRPC_SECURITY_QOS_V5_W(data?: Partial<RPC_SECURITY_QOS_V5_W>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_SECURITY_QOS_V5_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Capabilities !== undefined) view.setUint32(4, Number(data.Capabilities), true);
  // 0x08: u32
  if (data?.IdentityTracking !== undefined) view.setUint32(8, Number(data.IdentityTracking), true);
  // 0x0c: u32
  if (data?.ImpersonationType !== undefined) view.setUint32(12, Number(data.ImpersonationType), true);
  // 0x10: u32
  if (data?.AdditionalSecurityInfoType !== undefined) view.setUint32(16, Number(data.AdditionalSecurityInfoType), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.u !== undefined) view.setBigUint64(24, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  // 0x20: pointer
  if (data?.Sid !== undefined) view.setBigUint64(32, data.Sid === null ? 0n : BigInt(util.toPointer(data.Sid)), true);
  // 0x28: u32
  if (data?.EffectiveOnly !== undefined) view.setUint32(40, Number(data.EffectiveOnly), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.ServerSecurityDescriptor !== undefined) view.setBigUint64(48, data.ServerSecurityDescriptor === null ? 0n : BigInt(util.toPointer(data.ServerSecurityDescriptor)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_SECURITY_QOS_V5_A (size: 56)
 */
export interface RPC_SECURITY_QOS_V5_A {
  /** u32 */
  Version: number;
  /** Windows.Win32.System.Rpc.RPC_C_QOS_CAPABILITIES */
  Capabilities: RPC_C_QOS_CAPABILITIES;
  /** Windows.Win32.System.Rpc.RPC_C_QOS_IDENTITY */
  IdentityTracking: RPC_C_QOS_IDENTITY;
  /** Windows.Win32.System.Com.RPC_C_IMP_LEVEL */
  ImpersonationType: RPC_C_IMP_LEVEL;
  /** Windows.Win32.System.Rpc.RPC_C_AUTHN_INFO_TYPE */
  AdditionalSecurityInfoType: RPC_C_AUTHN_INFO_TYPE;
  /** _u_e__Union */
  u: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Sid: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  EffectiveOnly: number;
  /** ptr */
  ServerSecurityDescriptor: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRPC_SECURITY_QOS_V5_A = 56;

export function allocRPC_SECURITY_QOS_V5_A(data?: Partial<RPC_SECURITY_QOS_V5_A>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_SECURITY_QOS_V5_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Capabilities !== undefined) view.setUint32(4, Number(data.Capabilities), true);
  // 0x08: u32
  if (data?.IdentityTracking !== undefined) view.setUint32(8, Number(data.IdentityTracking), true);
  // 0x0c: u32
  if (data?.ImpersonationType !== undefined) view.setUint32(12, Number(data.ImpersonationType), true);
  // 0x10: u32
  if (data?.AdditionalSecurityInfoType !== undefined) view.setUint32(16, Number(data.AdditionalSecurityInfoType), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.u !== undefined) view.setBigUint64(24, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  // 0x20: pointer
  if (data?.Sid !== undefined) view.setBigUint64(32, data.Sid === null ? 0n : BigInt(util.toPointer(data.Sid)), true);
  // 0x28: u32
  if (data?.EffectiveOnly !== undefined) view.setUint32(40, Number(data.EffectiveOnly), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.ServerSecurityDescriptor !== undefined) view.setBigUint64(48, data.ServerSecurityDescriptor === null ? 0n : BigInt(util.toPointer(data.ServerSecurityDescriptor)), true);
  return buf;
}

/**
 * _u1_e__Union (size: 16)
 */
export interface _u1_e__Union {
  /** ptr */
  stspec: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  isflow: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_u1_e__Union = 16;

export function alloc_u1_e__Union(data?: Partial<_u1_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_u1_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.stspec !== undefined) view.setBigUint64(0, data.stspec === null ? 0n : BigInt(util.toPointer(data.stspec)), true);
  // 0x08: pointer
  if (data?.isflow !== undefined) view.setBigUint64(8, data.isflow === null ? 0n : BigInt(util.toPointer(data.isflow)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_BINDING_HANDLE_TEMPLATE_V1_W (size: 48)
 */
export interface RPC_BINDING_HANDLE_TEMPLATE_V1_W {
  /** u32 */
  Version: number;
  /** u32 */
  Flags: number;
  /** u32 */
  ProtocolSequence: number;
  /** ptr */
  NetworkAddress: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  StringEndpoint: Deno.PointerValue | Uint8Array | null;
  /** _u1_e__Union */
  u1: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ObjectUuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRPC_BINDING_HANDLE_TEMPLATE_V1_W = 48;

export function allocRPC_BINDING_HANDLE_TEMPLATE_V1_W(data?: Partial<RPC_BINDING_HANDLE_TEMPLATE_V1_W>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_BINDING_HANDLE_TEMPLATE_V1_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.ProtocolSequence !== undefined) view.setUint32(8, Number(data.ProtocolSequence), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.NetworkAddress !== undefined) view.setBigUint64(16, data.NetworkAddress === null ? 0n : BigInt(util.toPointer(data.NetworkAddress)), true);
  // 0x18: pointer
  if (data?.StringEndpoint !== undefined) view.setBigUint64(24, data.StringEndpoint === null ? 0n : BigInt(util.toPointer(data.StringEndpoint)), true);
  // 0x20: pointer
  if (data?.u1 !== undefined) view.setBigUint64(32, data.u1 === null ? 0n : BigInt(util.toPointer(data.u1)), true);
  // 0x28: pointer
  if (data?.ObjectUuid !== undefined) view.setBigUint64(40, data.ObjectUuid === null ? 0n : BigInt(util.toPointer(data.ObjectUuid)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_BINDING_HANDLE_TEMPLATE_V1_A (size: 48)
 */
export interface RPC_BINDING_HANDLE_TEMPLATE_V1_A {
  /** u32 */
  Version: number;
  /** u32 */
  Flags: number;
  /** u32 */
  ProtocolSequence: number;
  /** ptr */
  NetworkAddress: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  StringEndpoint: Deno.PointerValue | Uint8Array | null;
  /** _u1_e__Union */
  u1: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ObjectUuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRPC_BINDING_HANDLE_TEMPLATE_V1_A = 48;

export function allocRPC_BINDING_HANDLE_TEMPLATE_V1_A(data?: Partial<RPC_BINDING_HANDLE_TEMPLATE_V1_A>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_BINDING_HANDLE_TEMPLATE_V1_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.ProtocolSequence !== undefined) view.setUint32(8, Number(data.ProtocolSequence), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.NetworkAddress !== undefined) view.setBigUint64(16, data.NetworkAddress === null ? 0n : BigInt(util.toPointer(data.NetworkAddress)), true);
  // 0x18: pointer
  if (data?.StringEndpoint !== undefined) view.setBigUint64(24, data.StringEndpoint === null ? 0n : BigInt(util.toPointer(data.StringEndpoint)), true);
  // 0x20: pointer
  if (data?.u1 !== undefined) view.setBigUint64(32, data.u1 === null ? 0n : BigInt(util.toPointer(data.u1)), true);
  // 0x28: pointer
  if (data?.ObjectUuid !== undefined) view.setBigUint64(40, data.ObjectUuid === null ? 0n : BigInt(util.toPointer(data.ObjectUuid)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_BINDING_HANDLE_SECURITY_V1_W (size: 40)
 */
export interface RPC_BINDING_HANDLE_SECURITY_V1_W {
  /** u32 */
  Version: number;
  /** ptr */
  ServerPrincName: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  AuthnLevel: number;
  /** u32 */
  AuthnSvc: number;
  /** ptr */
  AuthIdentity: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  SecurityQos: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRPC_BINDING_HANDLE_SECURITY_V1_W = 40;

export function allocRPC_BINDING_HANDLE_SECURITY_V1_W(data?: Partial<RPC_BINDING_HANDLE_SECURITY_V1_W>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_BINDING_HANDLE_SECURITY_V1_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ServerPrincName !== undefined) view.setBigUint64(8, data.ServerPrincName === null ? 0n : BigInt(util.toPointer(data.ServerPrincName)), true);
  // 0x10: u32
  if (data?.AuthnLevel !== undefined) view.setUint32(16, Number(data.AuthnLevel), true);
  // 0x14: u32
  if (data?.AuthnSvc !== undefined) view.setUint32(20, Number(data.AuthnSvc), true);
  // 0x18: pointer
  if (data?.AuthIdentity !== undefined) view.setBigUint64(24, data.AuthIdentity === null ? 0n : BigInt(util.toPointer(data.AuthIdentity)), true);
  // 0x20: pointer
  if (data?.SecurityQos !== undefined) view.setBigUint64(32, data.SecurityQos === null ? 0n : BigInt(util.toPointer(data.SecurityQos)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_BINDING_HANDLE_SECURITY_V1_A (size: 40)
 */
export interface RPC_BINDING_HANDLE_SECURITY_V1_A {
  /** u32 */
  Version: number;
  /** ptr */
  ServerPrincName: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  AuthnLevel: number;
  /** u32 */
  AuthnSvc: number;
  /** ptr */
  AuthIdentity: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  SecurityQos: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRPC_BINDING_HANDLE_SECURITY_V1_A = 40;

export function allocRPC_BINDING_HANDLE_SECURITY_V1_A(data?: Partial<RPC_BINDING_HANDLE_SECURITY_V1_A>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_BINDING_HANDLE_SECURITY_V1_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ServerPrincName !== undefined) view.setBigUint64(8, data.ServerPrincName === null ? 0n : BigInt(util.toPointer(data.ServerPrincName)), true);
  // 0x10: u32
  if (data?.AuthnLevel !== undefined) view.setUint32(16, Number(data.AuthnLevel), true);
  // 0x14: u32
  if (data?.AuthnSvc !== undefined) view.setUint32(20, Number(data.AuthnSvc), true);
  // 0x18: pointer
  if (data?.AuthIdentity !== undefined) view.setBigUint64(24, data.AuthIdentity === null ? 0n : BigInt(util.toPointer(data.AuthIdentity)), true);
  // 0x20: pointer
  if (data?.SecurityQos !== undefined) view.setBigUint64(32, data.SecurityQos === null ? 0n : BigInt(util.toPointer(data.SecurityQos)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_BINDING_HANDLE_OPTIONS_V1 (size: 16)
 */
export interface RPC_BINDING_HANDLE_OPTIONS_V1 {
  /** u32 */
  Version: number;
  /** Windows.Win32.System.Rpc.RPC_BINDING_HANDLE_OPTIONS_FLAGS */
  Flags: RPC_BINDING_HANDLE_OPTIONS_FLAGS;
  /** u32 */
  ComTimeout: number;
  /** u32 */
  CallTimeout: number;
}

export const sizeofRPC_BINDING_HANDLE_OPTIONS_V1 = 16;

export function allocRPC_BINDING_HANDLE_OPTIONS_V1(data?: Partial<RPC_BINDING_HANDLE_OPTIONS_V1>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_BINDING_HANDLE_OPTIONS_V1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.ComTimeout !== undefined) view.setUint32(8, Number(data.ComTimeout), true);
  // 0x0c: u32
  if (data?.CallTimeout !== undefined) view.setUint32(12, Number(data.CallTimeout), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_CLIENT_INFORMATION1 (size: 24)
 */
export interface RPC_CLIENT_INFORMATION1 {
  /** ptr */
  UserName: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ComputerName: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  Privilege: number;
  /** u32 */
  AuthFlags: number;
}

export const sizeofRPC_CLIENT_INFORMATION1 = 24;

export function allocRPC_CLIENT_INFORMATION1(data?: Partial<RPC_CLIENT_INFORMATION1>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_CLIENT_INFORMATION1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.UserName !== undefined) view.setBigUint64(0, data.UserName === null ? 0n : BigInt(util.toPointer(data.UserName)), true);
  // 0x08: pointer
  if (data?.ComputerName !== undefined) view.setBigUint64(8, data.ComputerName === null ? 0n : BigInt(util.toPointer(data.ComputerName)), true);
  // 0x10: u16
  if (data?.Privilege !== undefined) view.setUint16(16, Number(data.Privilege), true);
  // 0x12: u32
  if (data?.AuthFlags !== undefined) view.setUint32(18, Number(data.AuthFlags), true);
  // 0x16: pad2
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_ENDPOINT_TEMPLATEW (size: 40)
 */
export interface RPC_ENDPOINT_TEMPLATEW {
  /** u32 */
  Version: number;
  /** ptr */
  ProtSeq: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Endpoint: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  SecurityDescriptor: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Backlog: number;
}

export const sizeofRPC_ENDPOINT_TEMPLATEW = 40;

export function allocRPC_ENDPOINT_TEMPLATEW(data?: Partial<RPC_ENDPOINT_TEMPLATEW>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_ENDPOINT_TEMPLATEW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ProtSeq !== undefined) view.setBigUint64(8, data.ProtSeq === null ? 0n : BigInt(util.toPointer(data.ProtSeq)), true);
  // 0x10: pointer
  if (data?.Endpoint !== undefined) view.setBigUint64(16, data.Endpoint === null ? 0n : BigInt(util.toPointer(data.Endpoint)), true);
  // 0x18: pointer
  if (data?.SecurityDescriptor !== undefined) view.setBigUint64(24, data.SecurityDescriptor === null ? 0n : BigInt(util.toPointer(data.SecurityDescriptor)), true);
  // 0x20: u32
  if (data?.Backlog !== undefined) view.setUint32(32, Number(data.Backlog), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_ENDPOINT_TEMPLATEA (size: 40)
 */
export interface RPC_ENDPOINT_TEMPLATEA {
  /** u32 */
  Version: number;
  /** ptr */
  ProtSeq: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Endpoint: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  SecurityDescriptor: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Backlog: number;
}

export const sizeofRPC_ENDPOINT_TEMPLATEA = 40;

export function allocRPC_ENDPOINT_TEMPLATEA(data?: Partial<RPC_ENDPOINT_TEMPLATEA>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_ENDPOINT_TEMPLATEA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ProtSeq !== undefined) view.setBigUint64(8, data.ProtSeq === null ? 0n : BigInt(util.toPointer(data.ProtSeq)), true);
  // 0x10: pointer
  if (data?.Endpoint !== undefined) view.setBigUint64(16, data.Endpoint === null ? 0n : BigInt(util.toPointer(data.Endpoint)), true);
  // 0x18: pointer
  if (data?.SecurityDescriptor !== undefined) view.setBigUint64(24, data.SecurityDescriptor === null ? 0n : BigInt(util.toPointer(data.SecurityDescriptor)), true);
  // 0x20: u32
  if (data?.Backlog !== undefined) view.setUint32(32, Number(data.Backlog), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_INTERFACE_TEMPLATEA (size: 80)
 */
export interface RPC_INTERFACE_TEMPLATEA {
  /** u32 */
  Version: number;
  /** ptr */
  IfSpec: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  MgrTypeUuid: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  MgrEpv: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Flags: number;
  /** u32 */
  MaxCalls: number;
  /** u32 */
  MaxRpcSize: number;
  /** Windows.Win32.System.Rpc.RPC_IF_CALLBACK_FN */
  IfCallback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  UuidVector: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Annotation: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  SecurityDescriptor: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRPC_INTERFACE_TEMPLATEA = 80;

export function allocRPC_INTERFACE_TEMPLATEA(data?: Partial<RPC_INTERFACE_TEMPLATEA>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_INTERFACE_TEMPLATEA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.IfSpec !== undefined) view.setBigUint64(8, data.IfSpec === null ? 0n : BigInt(util.toPointer(data.IfSpec)), true);
  // 0x10: pointer
  if (data?.MgrTypeUuid !== undefined) view.setBigUint64(16, data.MgrTypeUuid === null ? 0n : BigInt(util.toPointer(data.MgrTypeUuid)), true);
  // 0x18: pointer
  if (data?.MgrEpv !== undefined) view.setBigUint64(24, data.MgrEpv === null ? 0n : BigInt(util.toPointer(data.MgrEpv)), true);
  // 0x20: u32
  if (data?.Flags !== undefined) view.setUint32(32, Number(data.Flags), true);
  // 0x24: u32
  if (data?.MaxCalls !== undefined) view.setUint32(36, Number(data.MaxCalls), true);
  // 0x28: u32
  if (data?.MaxRpcSize !== undefined) view.setUint32(40, Number(data.MaxRpcSize), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.IfCallback !== undefined) view.setBigUint64(48, data.IfCallback === null ? 0n : BigInt(util.toPointer(data.IfCallback)), true);
  // 0x38: pointer
  if (data?.UuidVector !== undefined) view.setBigUint64(56, data.UuidVector === null ? 0n : BigInt(util.toPointer(data.UuidVector)), true);
  // 0x40: pointer
  if (data?.Annotation !== undefined) view.setBigUint64(64, data.Annotation === null ? 0n : BigInt(util.toPointer(data.Annotation)), true);
  // 0x48: pointer
  if (data?.SecurityDescriptor !== undefined) view.setBigUint64(72, data.SecurityDescriptor === null ? 0n : BigInt(util.toPointer(data.SecurityDescriptor)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_INTERFACE_TEMPLATEW (size: 80)
 */
export interface RPC_INTERFACE_TEMPLATEW {
  /** u32 */
  Version: number;
  /** ptr */
  IfSpec: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  MgrTypeUuid: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  MgrEpv: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Flags: number;
  /** u32 */
  MaxCalls: number;
  /** u32 */
  MaxRpcSize: number;
  /** Windows.Win32.System.Rpc.RPC_IF_CALLBACK_FN */
  IfCallback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  UuidVector: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Annotation: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  SecurityDescriptor: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRPC_INTERFACE_TEMPLATEW = 80;

export function allocRPC_INTERFACE_TEMPLATEW(data?: Partial<RPC_INTERFACE_TEMPLATEW>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_INTERFACE_TEMPLATEW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.IfSpec !== undefined) view.setBigUint64(8, data.IfSpec === null ? 0n : BigInt(util.toPointer(data.IfSpec)), true);
  // 0x10: pointer
  if (data?.MgrTypeUuid !== undefined) view.setBigUint64(16, data.MgrTypeUuid === null ? 0n : BigInt(util.toPointer(data.MgrTypeUuid)), true);
  // 0x18: pointer
  if (data?.MgrEpv !== undefined) view.setBigUint64(24, data.MgrEpv === null ? 0n : BigInt(util.toPointer(data.MgrEpv)), true);
  // 0x20: u32
  if (data?.Flags !== undefined) view.setUint32(32, Number(data.Flags), true);
  // 0x24: u32
  if (data?.MaxCalls !== undefined) view.setUint32(36, Number(data.MaxCalls), true);
  // 0x28: u32
  if (data?.MaxRpcSize !== undefined) view.setUint32(40, Number(data.MaxRpcSize), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.IfCallback !== undefined) view.setBigUint64(48, data.IfCallback === null ? 0n : BigInt(util.toPointer(data.IfCallback)), true);
  // 0x38: pointer
  if (data?.UuidVector !== undefined) view.setBigUint64(56, data.UuidVector === null ? 0n : BigInt(util.toPointer(data.UuidVector)), true);
  // 0x40: pointer
  if (data?.Annotation !== undefined) view.setBigUint64(64, data.Annotation === null ? 0n : BigInt(util.toPointer(data.Annotation)), true);
  // 0x48: pointer
  if (data?.SecurityDescriptor !== undefined) view.setBigUint64(72, data.SecurityDescriptor === null ? 0n : BigInt(util.toPointer(data.SecurityDescriptor)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_VERSION (size: 8)
 */
export interface RPC_VERSION {
  /** u16 */
  MajorVersion: number;
  /** u16 */
  MinorVersion: number;
}

export const sizeofRPC_VERSION = 8;

export function allocRPC_VERSION(data?: Partial<RPC_VERSION>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_VERSION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.MajorVersion !== undefined) view.setUint16(0, Number(data.MajorVersion), true);
  // 0x02: u16
  if (data?.MinorVersion !== undefined) view.setUint16(2, Number(data.MinorVersion), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_SYNTAX_IDENTIFIER (size: 16)
 */
export interface RPC_SYNTAX_IDENTIFIER {
  /** System.Guid */
  SyntaxGUID: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Rpc.RPC_VERSION */
  SyntaxVersion: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRPC_SYNTAX_IDENTIFIER = 16;

export function allocRPC_SYNTAX_IDENTIFIER(data?: Partial<RPC_SYNTAX_IDENTIFIER>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_SYNTAX_IDENTIFIER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SyntaxGUID !== undefined) view.setBigUint64(0, data.SyntaxGUID === null ? 0n : BigInt(util.toPointer(data.SyntaxGUID)), true);
  // 0x08: pointer
  if (data?.SyntaxVersion !== undefined) view.setBigUint64(8, data.SyntaxVersion === null ? 0n : BigInt(util.toPointer(data.SyntaxVersion)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_MESSAGE (size: 80)
 */
export interface RPC_MESSAGE {
  /** ptr */
  Handle: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  DataRepresentation: number;
  /** ptr */
  Buffer: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  BufferLength: number;
  /** u32 */
  ProcNum: number;
  /** ptr */
  TransferSyntax: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  RpcInterfaceInformation: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ReservedForRuntime: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ManagerEpv: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ImportContext: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  RpcFlags: number;
}

export const sizeofRPC_MESSAGE = 80;

export function allocRPC_MESSAGE(data?: Partial<RPC_MESSAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_MESSAGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Handle !== undefined) view.setBigUint64(0, data.Handle === null ? 0n : BigInt(util.toPointer(data.Handle)), true);
  // 0x08: u32
  if (data?.DataRepresentation !== undefined) view.setUint32(8, Number(data.DataRepresentation), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Buffer !== undefined) view.setBigUint64(16, data.Buffer === null ? 0n : BigInt(util.toPointer(data.Buffer)), true);
  // 0x18: u32
  if (data?.BufferLength !== undefined) view.setUint32(24, Number(data.BufferLength), true);
  // 0x1c: u32
  if (data?.ProcNum !== undefined) view.setUint32(28, Number(data.ProcNum), true);
  // 0x20: pointer
  if (data?.TransferSyntax !== undefined) view.setBigUint64(32, data.TransferSyntax === null ? 0n : BigInt(util.toPointer(data.TransferSyntax)), true);
  // 0x28: pointer
  if (data?.RpcInterfaceInformation !== undefined) view.setBigUint64(40, data.RpcInterfaceInformation === null ? 0n : BigInt(util.toPointer(data.RpcInterfaceInformation)), true);
  // 0x30: pointer
  if (data?.ReservedForRuntime !== undefined) view.setBigUint64(48, data.ReservedForRuntime === null ? 0n : BigInt(util.toPointer(data.ReservedForRuntime)), true);
  // 0x38: pointer
  if (data?.ManagerEpv !== undefined) view.setBigUint64(56, data.ManagerEpv === null ? 0n : BigInt(util.toPointer(data.ManagerEpv)), true);
  // 0x40: pointer
  if (data?.ImportContext !== undefined) view.setBigUint64(64, data.ImportContext === null ? 0n : BigInt(util.toPointer(data.ImportContext)), true);
  // 0x48: u32
  if (data?.RpcFlags !== undefined) view.setUint32(72, Number(data.RpcFlags), true);
  // 0x4c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_DISPATCH_TABLE (size: 24)
 */
export interface RPC_DISPATCH_TABLE {
  /** u32 */
  DispatchTableCount: number;
  /** Windows.Win32.System.Rpc.RPC_DISPATCH_FUNCTION */
  DispatchTable: Uint8Array | Deno.PointerValue | null;
  /** isize */
  Reserved: Deno.PointerValue;
}

export const sizeofRPC_DISPATCH_TABLE = 24;

export function allocRPC_DISPATCH_TABLE(data?: Partial<RPC_DISPATCH_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_DISPATCH_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DispatchTableCount !== undefined) view.setUint32(0, Number(data.DispatchTableCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.DispatchTable !== undefined) view.setBigUint64(8, data.DispatchTable === null ? 0n : BigInt(util.toPointer(data.DispatchTable)), true);
  // 0x10: isize
  if (data?.Reserved !== undefined) view.setBigInt64(16, BigInt(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_PROTSEQ_ENDPOINT (size: 16)
 */
export interface RPC_PROTSEQ_ENDPOINT {
  /** ptr */
  RpcProtocolSequence: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Endpoint: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRPC_PROTSEQ_ENDPOINT = 16;

export function allocRPC_PROTSEQ_ENDPOINT(data?: Partial<RPC_PROTSEQ_ENDPOINT>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_PROTSEQ_ENDPOINT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.RpcProtocolSequence !== undefined) view.setBigUint64(0, data.RpcProtocolSequence === null ? 0n : BigInt(util.toPointer(data.RpcProtocolSequence)), true);
  // 0x08: pointer
  if (data?.Endpoint !== undefined) view.setBigUint64(8, data.Endpoint === null ? 0n : BigInt(util.toPointer(data.Endpoint)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_SERVER_INTERFACE (size: 72)
 */
export interface RPC_SERVER_INTERFACE {
  /** u32 */
  Length: number;
  /** Windows.Win32.System.Rpc.RPC_SYNTAX_IDENTIFIER */
  InterfaceId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Rpc.RPC_SYNTAX_IDENTIFIER */
  TransferSyntax: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  DispatchTable: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  RpcProtseqEndpointCount: number;
  /** ptr */
  RpcProtseqEndpoint: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  DefaultManagerEpv: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  InterpreterInfo: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Flags: number;
}

export const sizeofRPC_SERVER_INTERFACE = 72;

export function allocRPC_SERVER_INTERFACE(data?: Partial<RPC_SERVER_INTERFACE>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_SERVER_INTERFACE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.InterfaceId !== undefined) view.setBigUint64(8, data.InterfaceId === null ? 0n : BigInt(util.toPointer(data.InterfaceId)), true);
  // 0x10: pointer
  if (data?.TransferSyntax !== undefined) view.setBigUint64(16, data.TransferSyntax === null ? 0n : BigInt(util.toPointer(data.TransferSyntax)), true);
  // 0x18: pointer
  if (data?.DispatchTable !== undefined) view.setBigUint64(24, data.DispatchTable === null ? 0n : BigInt(util.toPointer(data.DispatchTable)), true);
  // 0x20: u32
  if (data?.RpcProtseqEndpointCount !== undefined) view.setUint32(32, Number(data.RpcProtseqEndpointCount), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.RpcProtseqEndpoint !== undefined) view.setBigUint64(40, data.RpcProtseqEndpoint === null ? 0n : BigInt(util.toPointer(data.RpcProtseqEndpoint)), true);
  // 0x30: pointer
  if (data?.DefaultManagerEpv !== undefined) view.setBigUint64(48, data.DefaultManagerEpv === null ? 0n : BigInt(util.toPointer(data.DefaultManagerEpv)), true);
  // 0x38: pointer
  if (data?.InterpreterInfo !== undefined) view.setBigUint64(56, data.InterpreterInfo === null ? 0n : BigInt(util.toPointer(data.InterpreterInfo)), true);
  // 0x40: u32
  if (data?.Flags !== undefined) view.setUint32(64, Number(data.Flags), true);
  // 0x44: pad4
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_CLIENT_INTERFACE (size: 72)
 */
export interface RPC_CLIENT_INTERFACE {
  /** u32 */
  Length: number;
  /** Windows.Win32.System.Rpc.RPC_SYNTAX_IDENTIFIER */
  InterfaceId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Rpc.RPC_SYNTAX_IDENTIFIER */
  TransferSyntax: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  DispatchTable: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  RpcProtseqEndpointCount: number;
  /** ptr */
  RpcProtseqEndpoint: Deno.PointerValue | Uint8Array | null;
  /** usize */
  Reserved: Deno.PointerValue;
  /** ptr */
  InterpreterInfo: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Flags: number;
}

export const sizeofRPC_CLIENT_INTERFACE = 72;

export function allocRPC_CLIENT_INTERFACE(data?: Partial<RPC_CLIENT_INTERFACE>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_CLIENT_INTERFACE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.InterfaceId !== undefined) view.setBigUint64(8, data.InterfaceId === null ? 0n : BigInt(util.toPointer(data.InterfaceId)), true);
  // 0x10: pointer
  if (data?.TransferSyntax !== undefined) view.setBigUint64(16, data.TransferSyntax === null ? 0n : BigInt(util.toPointer(data.TransferSyntax)), true);
  // 0x18: pointer
  if (data?.DispatchTable !== undefined) view.setBigUint64(24, data.DispatchTable === null ? 0n : BigInt(util.toPointer(data.DispatchTable)), true);
  // 0x20: u32
  if (data?.RpcProtseqEndpointCount !== undefined) view.setUint32(32, Number(data.RpcProtseqEndpointCount), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.RpcProtseqEndpoint !== undefined) view.setBigUint64(40, data.RpcProtseqEndpoint === null ? 0n : BigInt(util.toPointer(data.RpcProtseqEndpoint)), true);
  // 0x30: usize
  if (data?.Reserved !== undefined) view.setBigUint64(48, BigInt(data.Reserved), true);
  // 0x38: pointer
  if (data?.InterpreterInfo !== undefined) view.setBigUint64(56, data.InterpreterInfo === null ? 0n : BigInt(util.toPointer(data.InterpreterInfo)), true);
  // 0x40: u32
  if (data?.Flags !== undefined) view.setUint32(64, Number(data.Flags), true);
  // 0x44: pad4
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_SEC_CONTEXT_KEY_INFO (size: 16)
 */
export interface RPC_SEC_CONTEXT_KEY_INFO {
  /** u32 */
  EncryptAlgorithm: number;
  /** u32 */
  KeySize: number;
  /** u32 */
  SignatureAlgorithm: number;
}

export const sizeofRPC_SEC_CONTEXT_KEY_INFO = 16;

export function allocRPC_SEC_CONTEXT_KEY_INFO(data?: Partial<RPC_SEC_CONTEXT_KEY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_SEC_CONTEXT_KEY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.EncryptAlgorithm !== undefined) view.setUint32(0, Number(data.EncryptAlgorithm), true);
  // 0x04: u32
  if (data?.KeySize !== undefined) view.setUint32(4, Number(data.KeySize), true);
  // 0x08: u32
  if (data?.SignatureAlgorithm !== undefined) view.setUint32(8, Number(data.SignatureAlgorithm), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_TRANSFER_SYNTAX (size: 16)
 */
export interface RPC_TRANSFER_SYNTAX {
  /** System.Guid */
  Uuid: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  VersMajor: number;
  /** u16 */
  VersMinor: number;
}

export const sizeofRPC_TRANSFER_SYNTAX = 16;

export function allocRPC_TRANSFER_SYNTAX(data?: Partial<RPC_TRANSFER_SYNTAX>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_TRANSFER_SYNTAX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Uuid !== undefined) view.setBigUint64(0, data.Uuid === null ? 0n : BigInt(util.toPointer(data.Uuid)), true);
  // 0x08: u16
  if (data?.VersMajor !== undefined) view.setUint16(8, Number(data.VersMajor), true);
  // 0x0a: u16
  if (data?.VersMinor !== undefined) view.setUint16(10, Number(data.VersMinor), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR (size: 16)
 */
export interface RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR {
  /** u32 */
  BufferSize: number;
  /** Windows.Win32.Foundation.PSTR */
  Buffer: string | null;
}

export const sizeofRPC_C_OPT_COOKIE_AUTH_DESCRIPTOR = 16;

export function allocRPC_C_OPT_COOKIE_AUTH_DESCRIPTOR(data?: Partial<RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_C_OPT_COOKIE_AUTH_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BufferSize !== undefined) view.setUint32(0, Number(data.BufferSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.Buffer !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.Buffer);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RDR_CALLOUT_STATE (size: 96)
 */
export interface RDR_CALLOUT_STATE {
  /** Windows.Win32.System.Rpc.RPC_STATUS */
  LastError: RPC_STATUS;
  /** ptr */
  LastEEInfo: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Rpc.RPC_HTTP_REDIRECTOR_STAGE */
  LastCalledStage: RPC_HTTP_REDIRECTOR_STAGE;
  /** ptr */
  ServerName: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ServerPort: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  RemoteUser: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  AuthType: Deno.PointerValue | Uint8Array | null;
  /** u8 */
  ResourceTypePresent: number;
  /** u8 */
  SessionIdPresent: number;
  /** u8 */
  InterfacePresent: number;
  /** System.Guid */
  ResourceType: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SessionId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Rpc.RPC_SYNTAX_IDENTIFIER */
  Interface: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  CertContext: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRDR_CALLOUT_STATE = 96;

export function allocRDR_CALLOUT_STATE(data?: Partial<RDR_CALLOUT_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofRDR_CALLOUT_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.LastError !== undefined) view.setInt32(0, Number(data.LastError), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LastEEInfo !== undefined) view.setBigUint64(8, data.LastEEInfo === null ? 0n : BigInt(util.toPointer(data.LastEEInfo)), true);
  // 0x10: i32
  if (data?.LastCalledStage !== undefined) view.setInt32(16, Number(data.LastCalledStage), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ServerName !== undefined) view.setBigUint64(24, data.ServerName === null ? 0n : BigInt(util.toPointer(data.ServerName)), true);
  // 0x20: pointer
  if (data?.ServerPort !== undefined) view.setBigUint64(32, data.ServerPort === null ? 0n : BigInt(util.toPointer(data.ServerPort)), true);
  // 0x28: pointer
  if (data?.RemoteUser !== undefined) view.setBigUint64(40, data.RemoteUser === null ? 0n : BigInt(util.toPointer(data.RemoteUser)), true);
  // 0x30: pointer
  if (data?.AuthType !== undefined) view.setBigUint64(48, data.AuthType === null ? 0n : BigInt(util.toPointer(data.AuthType)), true);
  // 0x38: u8
  if (data?.ResourceTypePresent !== undefined) view.setUint8(56, Number(data.ResourceTypePresent));
  // 0x39: u8
  if (data?.SessionIdPresent !== undefined) view.setUint8(57, Number(data.SessionIdPresent));
  // 0x3a: u8
  if (data?.InterfacePresent !== undefined) view.setUint8(58, Number(data.InterfacePresent));
  // 0x3b: pad5
  // 0x40: pointer
  if (data?.ResourceType !== undefined) view.setBigUint64(64, data.ResourceType === null ? 0n : BigInt(util.toPointer(data.ResourceType)), true);
  // 0x48: pointer
  if (data?.SessionId !== undefined) view.setBigUint64(72, data.SessionId === null ? 0n : BigInt(util.toPointer(data.SessionId)), true);
  // 0x50: pointer
  if (data?.Interface !== undefined) view.setBigUint64(80, data.Interface === null ? 0n : BigInt(util.toPointer(data.Interface)), true);
  // 0x58: pointer
  if (data?.CertContext !== undefined) view.setBigUint64(88, data.CertContext === null ? 0n : BigInt(util.toPointer(data.CertContext)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.I_RpcProxyCallbackInterface (size: 72)
 */
export interface I_RpcProxyCallbackInterface {
  /** Windows.Win32.System.Rpc.I_RpcProxyIsValidMachineFn */
  IsValidMachineFn: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Rpc.I_RpcProxyGetClientAddressFn */
  GetClientAddressFn: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Rpc.I_RpcProxyGetConnectionTimeoutFn */
  GetConnectionTimeoutFn: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Rpc.I_RpcPerformCalloutFn */
  PerformCalloutFn: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Rpc.I_RpcFreeCalloutStateFn */
  FreeCalloutStateFn: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Rpc.I_RpcProxyGetClientSessionAndResourceUUID */
  GetClientSessionAndResourceUUIDFn: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Rpc.I_RpcProxyFilterIfFn */
  ProxyFilterIfFn: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Rpc.I_RpcProxyUpdatePerfCounterFn */
  RpcProxyUpdatePerfCounterFn: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Rpc.I_RpcProxyUpdatePerfCounterBackendServerFn */
  RpcProxyUpdatePerfCounterBackendServerFn: Uint8Array | Deno.PointerValue | null;
}

export const sizeofI_RpcProxyCallbackInterface = 72;

export function allocI_RpcProxyCallbackInterface(data?: Partial<I_RpcProxyCallbackInterface>): Uint8Array {
  const buf = new Uint8Array(sizeofI_RpcProxyCallbackInterface);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.IsValidMachineFn !== undefined) view.setBigUint64(0, data.IsValidMachineFn === null ? 0n : BigInt(util.toPointer(data.IsValidMachineFn)), true);
  // 0x08: pointer
  if (data?.GetClientAddressFn !== undefined) view.setBigUint64(8, data.GetClientAddressFn === null ? 0n : BigInt(util.toPointer(data.GetClientAddressFn)), true);
  // 0x10: pointer
  if (data?.GetConnectionTimeoutFn !== undefined) view.setBigUint64(16, data.GetConnectionTimeoutFn === null ? 0n : BigInt(util.toPointer(data.GetConnectionTimeoutFn)), true);
  // 0x18: pointer
  if (data?.PerformCalloutFn !== undefined) view.setBigUint64(24, data.PerformCalloutFn === null ? 0n : BigInt(util.toPointer(data.PerformCalloutFn)), true);
  // 0x20: pointer
  if (data?.FreeCalloutStateFn !== undefined) view.setBigUint64(32, data.FreeCalloutStateFn === null ? 0n : BigInt(util.toPointer(data.FreeCalloutStateFn)), true);
  // 0x28: pointer
  if (data?.GetClientSessionAndResourceUUIDFn !== undefined) view.setBigUint64(40, data.GetClientSessionAndResourceUUIDFn === null ? 0n : BigInt(util.toPointer(data.GetClientSessionAndResourceUUIDFn)), true);
  // 0x30: pointer
  if (data?.ProxyFilterIfFn !== undefined) view.setBigUint64(48, data.ProxyFilterIfFn === null ? 0n : BigInt(util.toPointer(data.ProxyFilterIfFn)), true);
  // 0x38: pointer
  if (data?.RpcProxyUpdatePerfCounterFn !== undefined) view.setBigUint64(56, data.RpcProxyUpdatePerfCounterFn === null ? 0n : BigInt(util.toPointer(data.RpcProxyUpdatePerfCounterFn)), true);
  // 0x40: pointer
  if (data?.RpcProxyUpdatePerfCounterBackendServerFn !== undefined) view.setBigUint64(64, data.RpcProxyUpdatePerfCounterBackendServerFn === null ? 0n : BigInt(util.toPointer(data.RpcProxyUpdatePerfCounterBackendServerFn)), true);
  return buf;
}

/**
 * _APC_e__Struct (size: 16)
 */
export interface _APC_e__Struct {
  /** Windows.Win32.System.Rpc.PFN_RPCNOTIFICATION_ROUTINE */
  NotificationRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_APC_e__Struct = 16;

export function alloc_APC_e__Struct(data?: Partial<_APC_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_APC_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NotificationRoutine !== undefined) view.setBigUint64(0, data.NotificationRoutine === null ? 0n : BigInt(util.toPointer(data.NotificationRoutine)), true);
  // 0x08: pointer
  if (data?.hThread !== undefined) view.setBigUint64(8, data.hThread === null ? 0n : BigInt(util.toPointer(data.hThread)), true);
  return buf;
}

/**
 * _IOC_e__Struct (size: 32)
 */
export interface _IOC_e__Struct {
  /** Windows.Win32.Foundation.HANDLE */
  hIOPort: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwNumberOfBytesTransferred: number;
  /** usize */
  dwCompletionKey: Deno.PointerValue;
  /** ptr */
  lpOverlapped: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_IOC_e__Struct = 32;

export function alloc_IOC_e__Struct(data?: Partial<_IOC_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_IOC_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hIOPort !== undefined) view.setBigUint64(0, data.hIOPort === null ? 0n : BigInt(util.toPointer(data.hIOPort)), true);
  // 0x08: u32
  if (data?.dwNumberOfBytesTransferred !== undefined) view.setUint32(8, Number(data.dwNumberOfBytesTransferred), true);
  // 0x0c: pad4
  // 0x10: usize
  if (data?.dwCompletionKey !== undefined) view.setBigUint64(16, BigInt(data.dwCompletionKey), true);
  // 0x18: pointer
  if (data?.lpOverlapped !== undefined) view.setBigUint64(24, data.lpOverlapped === null ? 0n : BigInt(util.toPointer(data.lpOverlapped)), true);
  return buf;
}

export type HWND = Deno.PointerValue;

/**
 * _IntPtr_e__Struct (size: 16)
 */
export interface _IntPtr_e__Struct {
  /** Windows.Win32.Foundation.HWND */
  hWnd: Deno.PointerValue | null;
  /** u32 */
  Msg: number;
}

export const sizeof_IntPtr_e__Struct = 16;

export function alloc_IntPtr_e__Struct(data?: Partial<_IntPtr_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_IntPtr_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hWnd !== undefined) view.setBigUint64(0, data.hWnd === null ? 0n : BigInt(util.toPointer(data.hWnd)), true);
  // 0x08: u32
  if (data?.Msg !== undefined) view.setUint32(8, Number(data.Msg), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_ASYNC_NOTIFICATION_INFO (size: 40)
 */
export interface RPC_ASYNC_NOTIFICATION_INFO {
  /** _APC_e__Struct */
  APC: Uint8Array | Deno.PointerValue | null;
  /** _IOC_e__Struct */
  IOC: Uint8Array | Deno.PointerValue | null;
  /** _IntPtr_e__Struct */
  IntPtr: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hEvent: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Rpc.PFN_RPCNOTIFICATION_ROUTINE */
  NotificationRoutine: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRPC_ASYNC_NOTIFICATION_INFO = 40;

export function allocRPC_ASYNC_NOTIFICATION_INFO(data?: Partial<RPC_ASYNC_NOTIFICATION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_ASYNC_NOTIFICATION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.APC !== undefined) view.setBigUint64(0, data.APC === null ? 0n : BigInt(util.toPointer(data.APC)), true);
  // 0x08: pointer
  if (data?.IOC !== undefined) view.setBigUint64(8, data.IOC === null ? 0n : BigInt(util.toPointer(data.IOC)), true);
  // 0x10: pointer
  if (data?.IntPtr !== undefined) view.setBigUint64(16, data.IntPtr === null ? 0n : BigInt(util.toPointer(data.IntPtr)), true);
  // 0x18: pointer
  if (data?.hEvent !== undefined) view.setBigUint64(24, data.hEvent === null ? 0n : BigInt(util.toPointer(data.hEvent)), true);
  // 0x20: pointer
  if (data?.NotificationRoutine !== undefined) view.setBigUint64(32, data.NotificationRoutine === null ? 0n : BigInt(util.toPointer(data.NotificationRoutine)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_ASYNC_STATE (size: 64)
 */
export interface RPC_ASYNC_STATE {
  /** u32 */
  Size: number;
  /** u32 */
  Signature: number;
  /** i32 */
  Lock: number;
  /** u32 */
  Flags: number;
  /** ptr */
  StubInfo: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  UserInfo: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  RuntimeInfo: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Rpc.RPC_ASYNC_EVENT */
  Event: RPC_ASYNC_EVENT;
  /** Windows.Win32.System.Rpc.RPC_NOTIFICATION_TYPES */
  NotificationType: RPC_NOTIFICATION_TYPES;
  /** Windows.Win32.System.Rpc.RPC_ASYNC_NOTIFICATION_INFO */
  u: Uint8Array | Deno.PointerValue | null;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofRPC_ASYNC_STATE = 64;

export function allocRPC_ASYNC_STATE(data?: Partial<RPC_ASYNC_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_ASYNC_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Signature !== undefined) view.setUint32(4, Number(data.Signature), true);
  // 0x08: i32
  if (data?.Lock !== undefined) view.setInt32(8, Number(data.Lock), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: pointer
  if (data?.StubInfo !== undefined) view.setBigUint64(16, data.StubInfo === null ? 0n : BigInt(util.toPointer(data.StubInfo)), true);
  // 0x18: pointer
  if (data?.UserInfo !== undefined) view.setBigUint64(24, data.UserInfo === null ? 0n : BigInt(util.toPointer(data.UserInfo)), true);
  // 0x20: pointer
  if (data?.RuntimeInfo !== undefined) view.setBigUint64(32, data.RuntimeInfo === null ? 0n : BigInt(util.toPointer(data.RuntimeInfo)), true);
  // 0x28: i32
  if (data?.Event !== undefined) view.setInt32(40, Number(data.Event), true);
  // 0x2c: i32
  if (data?.NotificationType !== undefined) view.setInt32(44, Number(data.NotificationType), true);
  // 0x30: pointer
  if (data?.u !== undefined) view.setBigUint64(48, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  // 0x38: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(56, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.BinaryParam (size: 16)
 */
export interface BinaryParam {
  /** ptr */
  Buffer: Deno.PointerValue | Uint8Array | null;
  /** i16 */
  Size: number;
}

export const sizeofBinaryParam = 16;

export function allocBinaryParam(data?: Partial<BinaryParam>): Uint8Array {
  const buf = new Uint8Array(sizeofBinaryParam);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Buffer !== undefined) view.setBigUint64(0, data.Buffer === null ? 0n : BigInt(util.toPointer(data.Buffer)), true);
  // 0x08: i16
  if (data?.Size !== undefined) view.setInt16(8, Number(data.Size), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_EE_INFO_PARAM (size: 16)
 */
export interface RPC_EE_INFO_PARAM {
  /** Windows.Win32.System.Rpc.ExtendedErrorParamTypes */
  ParameterType: ExtendedErrorParamTypes;
  /** _u_e__Union */
  u: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRPC_EE_INFO_PARAM = 16;

export function allocRPC_EE_INFO_PARAM(data?: Partial<RPC_EE_INFO_PARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_EE_INFO_PARAM);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ParameterType !== undefined) view.setInt32(0, Number(data.ParameterType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.System.Rpc.RPC_EXTENDED_ERROR_INFO (size: 56)
 */
export interface RPC_EXTENDED_ERROR_INFO {
  /** u32 */
  Version: number;
  /** Windows.Win32.Foundation.PWSTR */
  ComputerName: string | null;
  /** u32 */
  ProcessID: number;
  /** _u_e__Union */
  u: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  GeneratingComponent: number;
  /** u32 */
  Status: number;
  /** u16 */
  DetectionLocation: number;
  /** u16 */
  Flags: number;
  /** i32 */
  NumberOfParameters: number;
  /** array */
  Parameters: Deno.PointerValue | null;
}

export const sizeofRPC_EXTENDED_ERROR_INFO = 56;

export function allocRPC_EXTENDED_ERROR_INFO(data?: Partial<RPC_EXTENDED_ERROR_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_EXTENDED_ERROR_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.ComputerName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.ComputerName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.ProcessID !== undefined) view.setUint32(16, Number(data.ProcessID), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.u !== undefined) view.setBigUint64(24, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  // 0x20: u32
  if (data?.GeneratingComponent !== undefined) view.setUint32(32, Number(data.GeneratingComponent), true);
  // 0x24: u32
  if (data?.Status !== undefined) view.setUint32(36, Number(data.Status), true);
  // 0x28: u16
  if (data?.DetectionLocation !== undefined) view.setUint16(40, Number(data.DetectionLocation), true);
  // 0x2a: u16
  if (data?.Flags !== undefined) view.setUint16(42, Number(data.Flags), true);
  // 0x2c: i32
  if (data?.NumberOfParameters !== undefined) view.setInt32(44, Number(data.NumberOfParameters), true);
  // 0x30: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(48, data.Parameters === null ? 0n : BigInt(util.toPointer(data.Parameters)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_ERROR_ENUM_HANDLE (size: 24)
 */
export interface RPC_ERROR_ENUM_HANDLE {
  /** u32 */
  Signature: number;
  /** ptr */
  CurrentPos: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Head: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRPC_ERROR_ENUM_HANDLE = 24;

export function allocRPC_ERROR_ENUM_HANDLE(data?: Partial<RPC_ERROR_ENUM_HANDLE>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_ERROR_ENUM_HANDLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Signature !== undefined) view.setUint32(0, Number(data.Signature), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.CurrentPos !== undefined) view.setBigUint64(8, data.CurrentPos === null ? 0n : BigInt(util.toPointer(data.CurrentPos)), true);
  // 0x10: pointer
  if (data?.Head !== undefined) view.setBigUint64(16, data.Head === null ? 0n : BigInt(util.toPointer(data.Head)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_CALL_LOCAL_ADDRESS_V1 (size: 24)
 */
export interface RPC_CALL_LOCAL_ADDRESS_V1 {
  /** u32 */
  Version: number;
  /** ptr */
  Buffer: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  BufferSize: number;
  /** Windows.Win32.System.Rpc.RpcLocalAddressFormat */
  AddressFormat: RpcLocalAddressFormat;
}

export const sizeofRPC_CALL_LOCAL_ADDRESS_V1 = 24;

export function allocRPC_CALL_LOCAL_ADDRESS_V1(data?: Partial<RPC_CALL_LOCAL_ADDRESS_V1>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_CALL_LOCAL_ADDRESS_V1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Buffer !== undefined) view.setBigUint64(8, data.Buffer === null ? 0n : BigInt(util.toPointer(data.Buffer)), true);
  // 0x10: u32
  if (data?.BufferSize !== undefined) view.setUint32(16, Number(data.BufferSize), true);
  // 0x14: i32
  if (data?.AddressFormat !== undefined) view.setInt32(20, Number(data.AddressFormat), true);
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.System.Rpc.RPC_CALL_ATTRIBUTES_V1_W (size: 56)
 */
export interface RPC_CALL_ATTRIBUTES_V1_W {
  /** u32 */
  Version: number;
  /** u32 */
  Flags: number;
  /** u32 */
  ServerPrincipalNameBufferLength: number;
  /** ptr */
  ServerPrincipalName: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ClientPrincipalNameBufferLength: number;
  /** ptr */
  ClientPrincipalName: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  AuthenticationLevel: number;
  /** u32 */
  AuthenticationService: number;
  /** Windows.Win32.Foundation.BOOL */
  NullSession: boolean;
}

export const sizeofRPC_CALL_ATTRIBUTES_V1_W = 56;

export function allocRPC_CALL_ATTRIBUTES_V1_W(data?: Partial<RPC_CALL_ATTRIBUTES_V1_W>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_CALL_ATTRIBUTES_V1_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.ServerPrincipalNameBufferLength !== undefined) view.setUint32(8, Number(data.ServerPrincipalNameBufferLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ServerPrincipalName !== undefined) view.setBigUint64(16, data.ServerPrincipalName === null ? 0n : BigInt(util.toPointer(data.ServerPrincipalName)), true);
  // 0x18: u32
  if (data?.ClientPrincipalNameBufferLength !== undefined) view.setUint32(24, Number(data.ClientPrincipalNameBufferLength), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ClientPrincipalName !== undefined) view.setBigUint64(32, data.ClientPrincipalName === null ? 0n : BigInt(util.toPointer(data.ClientPrincipalName)), true);
  // 0x28: u32
  if (data?.AuthenticationLevel !== undefined) view.setUint32(40, Number(data.AuthenticationLevel), true);
  // 0x2c: u32
  if (data?.AuthenticationService !== undefined) view.setUint32(44, Number(data.AuthenticationService), true);
  // 0x30: i32
  if (data?.NullSession !== undefined) view.setInt32(48, Number(data.NullSession), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_CALL_ATTRIBUTES_V1_A (size: 56)
 */
export interface RPC_CALL_ATTRIBUTES_V1_A {
  /** u32 */
  Version: number;
  /** u32 */
  Flags: number;
  /** u32 */
  ServerPrincipalNameBufferLength: number;
  /** ptr */
  ServerPrincipalName: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ClientPrincipalNameBufferLength: number;
  /** ptr */
  ClientPrincipalName: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  AuthenticationLevel: number;
  /** u32 */
  AuthenticationService: number;
  /** Windows.Win32.Foundation.BOOL */
  NullSession: boolean;
}

export const sizeofRPC_CALL_ATTRIBUTES_V1_A = 56;

export function allocRPC_CALL_ATTRIBUTES_V1_A(data?: Partial<RPC_CALL_ATTRIBUTES_V1_A>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_CALL_ATTRIBUTES_V1_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.ServerPrincipalNameBufferLength !== undefined) view.setUint32(8, Number(data.ServerPrincipalNameBufferLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ServerPrincipalName !== undefined) view.setBigUint64(16, data.ServerPrincipalName === null ? 0n : BigInt(util.toPointer(data.ServerPrincipalName)), true);
  // 0x18: u32
  if (data?.ClientPrincipalNameBufferLength !== undefined) view.setUint32(24, Number(data.ClientPrincipalNameBufferLength), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ClientPrincipalName !== undefined) view.setBigUint64(32, data.ClientPrincipalName === null ? 0n : BigInt(util.toPointer(data.ClientPrincipalName)), true);
  // 0x28: u32
  if (data?.AuthenticationLevel !== undefined) view.setUint32(40, Number(data.AuthenticationLevel), true);
  // 0x2c: u32
  if (data?.AuthenticationService !== undefined) view.setUint32(44, Number(data.AuthenticationService), true);
  // 0x30: i32
  if (data?.NullSession !== undefined) view.setInt32(48, Number(data.NullSession), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_CALL_ATTRIBUTES_V2_W (size: 104)
 */
export interface RPC_CALL_ATTRIBUTES_V2_W {
  /** u32 */
  Version: number;
  /** u32 */
  Flags: number;
  /** u32 */
  ServerPrincipalNameBufferLength: number;
  /** ptr */
  ServerPrincipalName: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ClientPrincipalNameBufferLength: number;
  /** ptr */
  ClientPrincipalName: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  AuthenticationLevel: number;
  /** u32 */
  AuthenticationService: number;
  /** Windows.Win32.Foundation.BOOL */
  NullSession: boolean;
  /** Windows.Win32.Foundation.BOOL */
  KernelModeCaller: boolean;
  /** u32 */
  ProtocolSequence: number;
  /** Windows.Win32.System.Rpc.RpcCallClientLocality */
  IsClientLocal: RpcCallClientLocality;
  /** Windows.Win32.Foundation.HANDLE */
  ClientPID: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  CallStatus: number;
  /** Windows.Win32.System.Rpc.RpcCallType */
  CallType: RpcCallType;
  /** ptr */
  CallLocalAddress: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  OpNum: number;
  /** System.Guid */
  InterfaceUuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRPC_CALL_ATTRIBUTES_V2_W = 104;

export function allocRPC_CALL_ATTRIBUTES_V2_W(data?: Partial<RPC_CALL_ATTRIBUTES_V2_W>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_CALL_ATTRIBUTES_V2_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.ServerPrincipalNameBufferLength !== undefined) view.setUint32(8, Number(data.ServerPrincipalNameBufferLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ServerPrincipalName !== undefined) view.setBigUint64(16, data.ServerPrincipalName === null ? 0n : BigInt(util.toPointer(data.ServerPrincipalName)), true);
  // 0x18: u32
  if (data?.ClientPrincipalNameBufferLength !== undefined) view.setUint32(24, Number(data.ClientPrincipalNameBufferLength), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ClientPrincipalName !== undefined) view.setBigUint64(32, data.ClientPrincipalName === null ? 0n : BigInt(util.toPointer(data.ClientPrincipalName)), true);
  // 0x28: u32
  if (data?.AuthenticationLevel !== undefined) view.setUint32(40, Number(data.AuthenticationLevel), true);
  // 0x2c: u32
  if (data?.AuthenticationService !== undefined) view.setUint32(44, Number(data.AuthenticationService), true);
  // 0x30: i32
  if (data?.NullSession !== undefined) view.setInt32(48, Number(data.NullSession), true);
  // 0x34: i32
  if (data?.KernelModeCaller !== undefined) view.setInt32(52, Number(data.KernelModeCaller), true);
  // 0x38: u32
  if (data?.ProtocolSequence !== undefined) view.setUint32(56, Number(data.ProtocolSequence), true);
  // 0x3c: i32
  if (data?.IsClientLocal !== undefined) view.setInt32(60, Number(data.IsClientLocal), true);
  // 0x40: pointer
  if (data?.ClientPID !== undefined) view.setBigUint64(64, data.ClientPID === null ? 0n : BigInt(util.toPointer(data.ClientPID)), true);
  // 0x48: u32
  if (data?.CallStatus !== undefined) view.setUint32(72, Number(data.CallStatus), true);
  // 0x4c: i32
  if (data?.CallType !== undefined) view.setInt32(76, Number(data.CallType), true);
  // 0x50: pointer
  if (data?.CallLocalAddress !== undefined) view.setBigUint64(80, data.CallLocalAddress === null ? 0n : BigInt(util.toPointer(data.CallLocalAddress)), true);
  // 0x58: u16
  if (data?.OpNum !== undefined) view.setUint16(88, Number(data.OpNum), true);
  // 0x5a: pad6
  // 0x60: pointer
  if (data?.InterfaceUuid !== undefined) view.setBigUint64(96, data.InterfaceUuid === null ? 0n : BigInt(util.toPointer(data.InterfaceUuid)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_CALL_ATTRIBUTES_V2_A (size: 104)
 */
export interface RPC_CALL_ATTRIBUTES_V2_A {
  /** u32 */
  Version: number;
  /** u32 */
  Flags: number;
  /** u32 */
  ServerPrincipalNameBufferLength: number;
  /** ptr */
  ServerPrincipalName: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ClientPrincipalNameBufferLength: number;
  /** ptr */
  ClientPrincipalName: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  AuthenticationLevel: number;
  /** u32 */
  AuthenticationService: number;
  /** Windows.Win32.Foundation.BOOL */
  NullSession: boolean;
  /** Windows.Win32.Foundation.BOOL */
  KernelModeCaller: boolean;
  /** u32 */
  ProtocolSequence: number;
  /** u32 */
  IsClientLocal: number;
  /** Windows.Win32.Foundation.HANDLE */
  ClientPID: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  CallStatus: number;
  /** Windows.Win32.System.Rpc.RpcCallType */
  CallType: RpcCallType;
  /** ptr */
  CallLocalAddress: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  OpNum: number;
  /** System.Guid */
  InterfaceUuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRPC_CALL_ATTRIBUTES_V2_A = 104;

export function allocRPC_CALL_ATTRIBUTES_V2_A(data?: Partial<RPC_CALL_ATTRIBUTES_V2_A>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_CALL_ATTRIBUTES_V2_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.ServerPrincipalNameBufferLength !== undefined) view.setUint32(8, Number(data.ServerPrincipalNameBufferLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ServerPrincipalName !== undefined) view.setBigUint64(16, data.ServerPrincipalName === null ? 0n : BigInt(util.toPointer(data.ServerPrincipalName)), true);
  // 0x18: u32
  if (data?.ClientPrincipalNameBufferLength !== undefined) view.setUint32(24, Number(data.ClientPrincipalNameBufferLength), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ClientPrincipalName !== undefined) view.setBigUint64(32, data.ClientPrincipalName === null ? 0n : BigInt(util.toPointer(data.ClientPrincipalName)), true);
  // 0x28: u32
  if (data?.AuthenticationLevel !== undefined) view.setUint32(40, Number(data.AuthenticationLevel), true);
  // 0x2c: u32
  if (data?.AuthenticationService !== undefined) view.setUint32(44, Number(data.AuthenticationService), true);
  // 0x30: i32
  if (data?.NullSession !== undefined) view.setInt32(48, Number(data.NullSession), true);
  // 0x34: i32
  if (data?.KernelModeCaller !== undefined) view.setInt32(52, Number(data.KernelModeCaller), true);
  // 0x38: u32
  if (data?.ProtocolSequence !== undefined) view.setUint32(56, Number(data.ProtocolSequence), true);
  // 0x3c: u32
  if (data?.IsClientLocal !== undefined) view.setUint32(60, Number(data.IsClientLocal), true);
  // 0x40: pointer
  if (data?.ClientPID !== undefined) view.setBigUint64(64, data.ClientPID === null ? 0n : BigInt(util.toPointer(data.ClientPID)), true);
  // 0x48: u32
  if (data?.CallStatus !== undefined) view.setUint32(72, Number(data.CallStatus), true);
  // 0x4c: i32
  if (data?.CallType !== undefined) view.setInt32(76, Number(data.CallType), true);
  // 0x50: pointer
  if (data?.CallLocalAddress !== undefined) view.setBigUint64(80, data.CallLocalAddress === null ? 0n : BigInt(util.toPointer(data.CallLocalAddress)), true);
  // 0x58: u16
  if (data?.OpNum !== undefined) view.setUint16(88, Number(data.OpNum), true);
  // 0x5a: pad6
  // 0x60: pointer
  if (data?.InterfaceUuid !== undefined) view.setBigUint64(96, data.InterfaceUuid === null ? 0n : BigInt(util.toPointer(data.InterfaceUuid)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_CALL_ATTRIBUTES_V3_W (size: 120)
 */
export interface RPC_CALL_ATTRIBUTES_V3_W {
  /** u32 */
  Version: number;
  /** u32 */
  Flags: number;
  /** u32 */
  ServerPrincipalNameBufferLength: number;
  /** ptr */
  ServerPrincipalName: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ClientPrincipalNameBufferLength: number;
  /** ptr */
  ClientPrincipalName: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  AuthenticationLevel: number;
  /** u32 */
  AuthenticationService: number;
  /** Windows.Win32.Foundation.BOOL */
  NullSession: boolean;
  /** Windows.Win32.Foundation.BOOL */
  KernelModeCaller: boolean;
  /** u32 */
  ProtocolSequence: number;
  /** Windows.Win32.System.Rpc.RpcCallClientLocality */
  IsClientLocal: RpcCallClientLocality;
  /** Windows.Win32.Foundation.HANDLE */
  ClientPID: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  CallStatus: number;
  /** Windows.Win32.System.Rpc.RpcCallType */
  CallType: RpcCallType;
  /** ptr */
  CallLocalAddress: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  OpNum: number;
  /** System.Guid */
  InterfaceUuid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ClientIdentifierBufferLength: number;
  /** ptr */
  ClientIdentifier: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRPC_CALL_ATTRIBUTES_V3_W = 120;

export function allocRPC_CALL_ATTRIBUTES_V3_W(data?: Partial<RPC_CALL_ATTRIBUTES_V3_W>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_CALL_ATTRIBUTES_V3_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.ServerPrincipalNameBufferLength !== undefined) view.setUint32(8, Number(data.ServerPrincipalNameBufferLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ServerPrincipalName !== undefined) view.setBigUint64(16, data.ServerPrincipalName === null ? 0n : BigInt(util.toPointer(data.ServerPrincipalName)), true);
  // 0x18: u32
  if (data?.ClientPrincipalNameBufferLength !== undefined) view.setUint32(24, Number(data.ClientPrincipalNameBufferLength), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ClientPrincipalName !== undefined) view.setBigUint64(32, data.ClientPrincipalName === null ? 0n : BigInt(util.toPointer(data.ClientPrincipalName)), true);
  // 0x28: u32
  if (data?.AuthenticationLevel !== undefined) view.setUint32(40, Number(data.AuthenticationLevel), true);
  // 0x2c: u32
  if (data?.AuthenticationService !== undefined) view.setUint32(44, Number(data.AuthenticationService), true);
  // 0x30: i32
  if (data?.NullSession !== undefined) view.setInt32(48, Number(data.NullSession), true);
  // 0x34: i32
  if (data?.KernelModeCaller !== undefined) view.setInt32(52, Number(data.KernelModeCaller), true);
  // 0x38: u32
  if (data?.ProtocolSequence !== undefined) view.setUint32(56, Number(data.ProtocolSequence), true);
  // 0x3c: i32
  if (data?.IsClientLocal !== undefined) view.setInt32(60, Number(data.IsClientLocal), true);
  // 0x40: pointer
  if (data?.ClientPID !== undefined) view.setBigUint64(64, data.ClientPID === null ? 0n : BigInt(util.toPointer(data.ClientPID)), true);
  // 0x48: u32
  if (data?.CallStatus !== undefined) view.setUint32(72, Number(data.CallStatus), true);
  // 0x4c: i32
  if (data?.CallType !== undefined) view.setInt32(76, Number(data.CallType), true);
  // 0x50: pointer
  if (data?.CallLocalAddress !== undefined) view.setBigUint64(80, data.CallLocalAddress === null ? 0n : BigInt(util.toPointer(data.CallLocalAddress)), true);
  // 0x58: u16
  if (data?.OpNum !== undefined) view.setUint16(88, Number(data.OpNum), true);
  // 0x5a: pad6
  // 0x60: pointer
  if (data?.InterfaceUuid !== undefined) view.setBigUint64(96, data.InterfaceUuid === null ? 0n : BigInt(util.toPointer(data.InterfaceUuid)), true);
  // 0x68: u32
  if (data?.ClientIdentifierBufferLength !== undefined) view.setUint32(104, Number(data.ClientIdentifierBufferLength), true);
  // 0x6c: pad4
  // 0x70: pointer
  if (data?.ClientIdentifier !== undefined) view.setBigUint64(112, data.ClientIdentifier === null ? 0n : BigInt(util.toPointer(data.ClientIdentifier)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_CALL_ATTRIBUTES_V3_A (size: 120)
 */
export interface RPC_CALL_ATTRIBUTES_V3_A {
  /** u32 */
  Version: number;
  /** u32 */
  Flags: number;
  /** u32 */
  ServerPrincipalNameBufferLength: number;
  /** ptr */
  ServerPrincipalName: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ClientPrincipalNameBufferLength: number;
  /** ptr */
  ClientPrincipalName: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  AuthenticationLevel: number;
  /** u32 */
  AuthenticationService: number;
  /** Windows.Win32.Foundation.BOOL */
  NullSession: boolean;
  /** Windows.Win32.Foundation.BOOL */
  KernelModeCaller: boolean;
  /** u32 */
  ProtocolSequence: number;
  /** u32 */
  IsClientLocal: number;
  /** Windows.Win32.Foundation.HANDLE */
  ClientPID: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  CallStatus: number;
  /** Windows.Win32.System.Rpc.RpcCallType */
  CallType: RpcCallType;
  /** ptr */
  CallLocalAddress: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  OpNum: number;
  /** System.Guid */
  InterfaceUuid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ClientIdentifierBufferLength: number;
  /** ptr */
  ClientIdentifier: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRPC_CALL_ATTRIBUTES_V3_A = 120;

export function allocRPC_CALL_ATTRIBUTES_V3_A(data?: Partial<RPC_CALL_ATTRIBUTES_V3_A>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_CALL_ATTRIBUTES_V3_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.ServerPrincipalNameBufferLength !== undefined) view.setUint32(8, Number(data.ServerPrincipalNameBufferLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ServerPrincipalName !== undefined) view.setBigUint64(16, data.ServerPrincipalName === null ? 0n : BigInt(util.toPointer(data.ServerPrincipalName)), true);
  // 0x18: u32
  if (data?.ClientPrincipalNameBufferLength !== undefined) view.setUint32(24, Number(data.ClientPrincipalNameBufferLength), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ClientPrincipalName !== undefined) view.setBigUint64(32, data.ClientPrincipalName === null ? 0n : BigInt(util.toPointer(data.ClientPrincipalName)), true);
  // 0x28: u32
  if (data?.AuthenticationLevel !== undefined) view.setUint32(40, Number(data.AuthenticationLevel), true);
  // 0x2c: u32
  if (data?.AuthenticationService !== undefined) view.setUint32(44, Number(data.AuthenticationService), true);
  // 0x30: i32
  if (data?.NullSession !== undefined) view.setInt32(48, Number(data.NullSession), true);
  // 0x34: i32
  if (data?.KernelModeCaller !== undefined) view.setInt32(52, Number(data.KernelModeCaller), true);
  // 0x38: u32
  if (data?.ProtocolSequence !== undefined) view.setUint32(56, Number(data.ProtocolSequence), true);
  // 0x3c: u32
  if (data?.IsClientLocal !== undefined) view.setUint32(60, Number(data.IsClientLocal), true);
  // 0x40: pointer
  if (data?.ClientPID !== undefined) view.setBigUint64(64, data.ClientPID === null ? 0n : BigInt(util.toPointer(data.ClientPID)), true);
  // 0x48: u32
  if (data?.CallStatus !== undefined) view.setUint32(72, Number(data.CallStatus), true);
  // 0x4c: i32
  if (data?.CallType !== undefined) view.setInt32(76, Number(data.CallType), true);
  // 0x50: pointer
  if (data?.CallLocalAddress !== undefined) view.setBigUint64(80, data.CallLocalAddress === null ? 0n : BigInt(util.toPointer(data.CallLocalAddress)), true);
  // 0x58: u16
  if (data?.OpNum !== undefined) view.setUint16(88, Number(data.OpNum), true);
  // 0x5a: pad6
  // 0x60: pointer
  if (data?.InterfaceUuid !== undefined) view.setBigUint64(96, data.InterfaceUuid === null ? 0n : BigInt(util.toPointer(data.InterfaceUuid)), true);
  // 0x68: u32
  if (data?.ClientIdentifierBufferLength !== undefined) view.setUint32(104, Number(data.ClientIdentifierBufferLength), true);
  // 0x6c: pad4
  // 0x70: pointer
  if (data?.ClientIdentifier !== undefined) view.setBigUint64(112, data.ClientIdentifier === null ? 0n : BigInt(util.toPointer(data.ClientIdentifier)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.RPC_IMPORT_CONTEXT_P (size: 24)
 */
export interface RPC_IMPORT_CONTEXT_P {
  /** ptr */
  LookupContext: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ProposedHandle: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Bindings: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRPC_IMPORT_CONTEXT_P = 24;

export function allocRPC_IMPORT_CONTEXT_P(data?: Partial<RPC_IMPORT_CONTEXT_P>): Uint8Array {
  const buf = new Uint8Array(sizeofRPC_IMPORT_CONTEXT_P);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LookupContext !== undefined) view.setBigUint64(0, data.LookupContext === null ? 0n : BigInt(util.toPointer(data.LookupContext)), true);
  // 0x08: pointer
  if (data?.ProposedHandle !== undefined) view.setBigUint64(8, data.ProposedHandle === null ? 0n : BigInt(util.toPointer(data.ProposedHandle)), true);
  // 0x10: pointer
  if (data?.Bindings !== undefined) view.setBigUint64(16, data.Bindings === null ? 0n : BigInt(util.toPointer(data.Bindings)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc._NDR_SCONTEXT (size: 16)
 */
export interface _NDR_SCONTEXT {
  /** array */
  pad: Deno.PointerValue | null;
  /** ptr */
  userContext: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_NDR_SCONTEXT = 16;

export function alloc_NDR_SCONTEXT(data?: Partial<_NDR_SCONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeof_NDR_SCONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pad !== undefined) view.setBigUint64(0, data.pad === null ? 0n : BigInt(util.toPointer(data.pad)), true);
  // 0x08: pointer
  if (data?.userContext !== undefined) view.setBigUint64(8, data.userContext === null ? 0n : BigInt(util.toPointer(data.userContext)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.SCONTEXT_QUEUE (size: 16)
 */
export interface SCONTEXT_QUEUE {
  /** u32 */
  NumberOfObjects: number;
  /** ptr */
  ArrayOfObjects: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSCONTEXT_QUEUE = 16;

export function allocSCONTEXT_QUEUE(data?: Partial<SCONTEXT_QUEUE>): Uint8Array {
  const buf = new Uint8Array(sizeofSCONTEXT_QUEUE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumberOfObjects !== undefined) view.setUint32(0, Number(data.NumberOfObjects), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ArrayOfObjects !== undefined) view.setBigUint64(8, data.ArrayOfObjects === null ? 0n : BigInt(util.toPointer(data.ArrayOfObjects)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.ARRAY_INFO (size: 48)
 */
export interface ARRAY_INFO {
  /** i32 */
  Dimension: number;
  /** ptr */
  BufferConformanceMark: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  BufferVarianceMark: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  MaxCountArray: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  OffsetArray: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ActualCountArray: Deno.PointerValue | Uint8Array | null;
}

export const sizeofARRAY_INFO = 48;

export function allocARRAY_INFO(data?: Partial<ARRAY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofARRAY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Dimension !== undefined) view.setInt32(0, Number(data.Dimension), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.BufferConformanceMark !== undefined) view.setBigUint64(8, data.BufferConformanceMark === null ? 0n : BigInt(util.toPointer(data.BufferConformanceMark)), true);
  // 0x10: pointer
  if (data?.BufferVarianceMark !== undefined) view.setBigUint64(16, data.BufferVarianceMark === null ? 0n : BigInt(util.toPointer(data.BufferVarianceMark)), true);
  // 0x18: pointer
  if (data?.MaxCountArray !== undefined) view.setBigUint64(24, data.MaxCountArray === null ? 0n : BigInt(util.toPointer(data.MaxCountArray)), true);
  // 0x20: pointer
  if (data?.OffsetArray !== undefined) view.setBigUint64(32, data.OffsetArray === null ? 0n : BigInt(util.toPointer(data.OffsetArray)), true);
  // 0x28: pointer
  if (data?.ActualCountArray !== undefined) view.setBigUint64(40, data.ActualCountArray === null ? 0n : BigInt(util.toPointer(data.ActualCountArray)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.MIDL_STUB_MESSAGE (size: 400)
 */
export interface MIDL_STUB_MESSAGE {
  /** ptr */
  RpcMsg: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Buffer: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  BufferStart: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  BufferEnd: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  BufferMark: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  BufferLength: number;
  /** u32 */
  MemorySize: number;
  /** ptr */
  Memory: Deno.PointerValue | Uint8Array | null;
  /** u8 */
  IsClient: number;
  /** u8 */
  Pad: number;
  /** u16 */
  uFlags2: number;
  /** i32 */
  ReuseBuffer: number;
  /** ptr */
  pAllocAllNodesContext: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pPointerQueueState: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  IgnoreEmbeddedPointers: number;
  /** ptr */
  PointerBufferMark: Deno.PointerValue | Uint8Array | null;
  /** u8 */
  CorrDespIncrement: number;
  /** u8 */
  uFlags: number;
  /** u16 */
  UniquePtrCount: number;
  /** usize */
  MaxCount: Deno.PointerValue;
  /** u32 */
  Offset: number;
  /** u32 */
  ActualCount: number;
  /** isize */
  pfnAllocate: Deno.PointerValue;
  /** isize */
  pfnFree: Deno.PointerValue;
  /** ptr */
  StackTop: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pPresentedType: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pTransmitType: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  SavedHandle: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  StubDesc: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  FullPtrXlatTables: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  FullPtrRefId: number;
  /** u32 */
  PointerLength: number;
  /** i32 */
  _bitfield: number;
  /** u32 */
  dwDestContext: number;
  /** ptr */
  pvDestContext: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  SavedContextHandles: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  ParamNumber: number;
  /** Windows.Win32.System.Com.IRpcChannelBuffer */
  pRpcChannelBuffer: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pArrayInfo: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  SizePtrCountArray: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  SizePtrOffsetArray: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  SizePtrLengthArray: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pArgQueue: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwStubPhase: number;
  /** ptr */
  LowStackMark: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pAsyncMsg: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pCorrInfo: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pCorrMemory: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pMemoryList: Deno.PointerValue | Uint8Array | null;
  /** isize */
  pCSInfo: Deno.PointerValue;
  /** ptr */
  ConformanceMark: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  VarianceMark: Deno.PointerValue | Uint8Array | null;
  /** isize */
  Unused: Deno.PointerValue;
  /** ptr */
  pContext: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ContextHandleHash: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pUserMarshalList: Deno.PointerValue | Uint8Array | null;
  /** isize */
  Reserved51_3: Deno.PointerValue;
  /** isize */
  Reserved51_4: Deno.PointerValue;
  /** isize */
  Reserved51_5: Deno.PointerValue;
}

export const sizeofMIDL_STUB_MESSAGE = 400;

export function allocMIDL_STUB_MESSAGE(data?: Partial<MIDL_STUB_MESSAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDL_STUB_MESSAGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.RpcMsg !== undefined) view.setBigUint64(0, data.RpcMsg === null ? 0n : BigInt(util.toPointer(data.RpcMsg)), true);
  // 0x08: pointer
  if (data?.Buffer !== undefined) view.setBigUint64(8, data.Buffer === null ? 0n : BigInt(util.toPointer(data.Buffer)), true);
  // 0x10: pointer
  if (data?.BufferStart !== undefined) view.setBigUint64(16, data.BufferStart === null ? 0n : BigInt(util.toPointer(data.BufferStart)), true);
  // 0x18: pointer
  if (data?.BufferEnd !== undefined) view.setBigUint64(24, data.BufferEnd === null ? 0n : BigInt(util.toPointer(data.BufferEnd)), true);
  // 0x20: pointer
  if (data?.BufferMark !== undefined) view.setBigUint64(32, data.BufferMark === null ? 0n : BigInt(util.toPointer(data.BufferMark)), true);
  // 0x28: u32
  if (data?.BufferLength !== undefined) view.setUint32(40, Number(data.BufferLength), true);
  // 0x2c: u32
  if (data?.MemorySize !== undefined) view.setUint32(44, Number(data.MemorySize), true);
  // 0x30: pointer
  if (data?.Memory !== undefined) view.setBigUint64(48, data.Memory === null ? 0n : BigInt(util.toPointer(data.Memory)), true);
  // 0x38: u8
  if (data?.IsClient !== undefined) view.setUint8(56, Number(data.IsClient));
  // 0x39: u8
  if (data?.Pad !== undefined) view.setUint8(57, Number(data.Pad));
  // 0x3a: u16
  if (data?.uFlags2 !== undefined) view.setUint16(58, Number(data.uFlags2), true);
  // 0x3c: i32
  if (data?.ReuseBuffer !== undefined) view.setInt32(60, Number(data.ReuseBuffer), true);
  // 0x40: pointer
  if (data?.pAllocAllNodesContext !== undefined) view.setBigUint64(64, data.pAllocAllNodesContext === null ? 0n : BigInt(util.toPointer(data.pAllocAllNodesContext)), true);
  // 0x48: pointer
  if (data?.pPointerQueueState !== undefined) view.setBigUint64(72, data.pPointerQueueState === null ? 0n : BigInt(util.toPointer(data.pPointerQueueState)), true);
  // 0x50: i32
  if (data?.IgnoreEmbeddedPointers !== undefined) view.setInt32(80, Number(data.IgnoreEmbeddedPointers), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.PointerBufferMark !== undefined) view.setBigUint64(88, data.PointerBufferMark === null ? 0n : BigInt(util.toPointer(data.PointerBufferMark)), true);
  // 0x60: u8
  if (data?.CorrDespIncrement !== undefined) view.setUint8(96, Number(data.CorrDespIncrement));
  // 0x61: u8
  if (data?.uFlags !== undefined) view.setUint8(97, Number(data.uFlags));
  // 0x62: u16
  if (data?.UniquePtrCount !== undefined) view.setUint16(98, Number(data.UniquePtrCount), true);
  // 0x64: pad4
  // 0x68: usize
  if (data?.MaxCount !== undefined) view.setBigUint64(104, BigInt(data.MaxCount), true);
  // 0x70: u32
  if (data?.Offset !== undefined) view.setUint32(112, Number(data.Offset), true);
  // 0x74: u32
  if (data?.ActualCount !== undefined) view.setUint32(116, Number(data.ActualCount), true);
  // 0x78: isize
  if (data?.pfnAllocate !== undefined) view.setBigInt64(120, BigInt(data.pfnAllocate), true);
  // 0x80: isize
  if (data?.pfnFree !== undefined) view.setBigInt64(128, BigInt(data.pfnFree), true);
  // 0x88: pointer
  if (data?.StackTop !== undefined) view.setBigUint64(136, data.StackTop === null ? 0n : BigInt(util.toPointer(data.StackTop)), true);
  // 0x90: pointer
  if (data?.pPresentedType !== undefined) view.setBigUint64(144, data.pPresentedType === null ? 0n : BigInt(util.toPointer(data.pPresentedType)), true);
  // 0x98: pointer
  if (data?.pTransmitType !== undefined) view.setBigUint64(152, data.pTransmitType === null ? 0n : BigInt(util.toPointer(data.pTransmitType)), true);
  // 0xa0: pointer
  if (data?.SavedHandle !== undefined) view.setBigUint64(160, data.SavedHandle === null ? 0n : BigInt(util.toPointer(data.SavedHandle)), true);
  // 0xa8: pointer
  if (data?.StubDesc !== undefined) view.setBigUint64(168, data.StubDesc === null ? 0n : BigInt(util.toPointer(data.StubDesc)), true);
  // 0xb0: pointer
  if (data?.FullPtrXlatTables !== undefined) view.setBigUint64(176, data.FullPtrXlatTables === null ? 0n : BigInt(util.toPointer(data.FullPtrXlatTables)), true);
  // 0xb8: u32
  if (data?.FullPtrRefId !== undefined) view.setUint32(184, Number(data.FullPtrRefId), true);
  // 0xbc: u32
  if (data?.PointerLength !== undefined) view.setUint32(188, Number(data.PointerLength), true);
  // 0xc0: i32
  if (data?._bitfield !== undefined) view.setInt32(192, Number(data._bitfield), true);
  // 0xc4: u32
  if (data?.dwDestContext !== undefined) view.setUint32(196, Number(data.dwDestContext), true);
  // 0xc8: pointer
  if (data?.pvDestContext !== undefined) view.setBigUint64(200, data.pvDestContext === null ? 0n : BigInt(util.toPointer(data.pvDestContext)), true);
  // 0xd0: pointer
  if (data?.SavedContextHandles !== undefined) view.setBigUint64(208, data.SavedContextHandles === null ? 0n : BigInt(util.toPointer(data.SavedContextHandles)), true);
  // 0xd8: i32
  if (data?.ParamNumber !== undefined) view.setInt32(216, Number(data.ParamNumber), true);
  // 0xdc: pad4
  // 0xe0: pointer
  if (data?.pRpcChannelBuffer !== undefined) view.setBigUint64(224, data.pRpcChannelBuffer === null ? 0n : BigInt(util.toPointer(data.pRpcChannelBuffer)), true);
  // 0xe8: pointer
  if (data?.pArrayInfo !== undefined) view.setBigUint64(232, data.pArrayInfo === null ? 0n : BigInt(util.toPointer(data.pArrayInfo)), true);
  // 0xf0: pointer
  if (data?.SizePtrCountArray !== undefined) view.setBigUint64(240, data.SizePtrCountArray === null ? 0n : BigInt(util.toPointer(data.SizePtrCountArray)), true);
  // 0xf8: pointer
  if (data?.SizePtrOffsetArray !== undefined) view.setBigUint64(248, data.SizePtrOffsetArray === null ? 0n : BigInt(util.toPointer(data.SizePtrOffsetArray)), true);
  // 0x100: pointer
  if (data?.SizePtrLengthArray !== undefined) view.setBigUint64(256, data.SizePtrLengthArray === null ? 0n : BigInt(util.toPointer(data.SizePtrLengthArray)), true);
  // 0x108: pointer
  if (data?.pArgQueue !== undefined) view.setBigUint64(264, data.pArgQueue === null ? 0n : BigInt(util.toPointer(data.pArgQueue)), true);
  // 0x110: u32
  if (data?.dwStubPhase !== undefined) view.setUint32(272, Number(data.dwStubPhase), true);
  // 0x114: pad4
  // 0x118: pointer
  if (data?.LowStackMark !== undefined) view.setBigUint64(280, data.LowStackMark === null ? 0n : BigInt(util.toPointer(data.LowStackMark)), true);
  // 0x120: pointer
  if (data?.pAsyncMsg !== undefined) view.setBigUint64(288, data.pAsyncMsg === null ? 0n : BigInt(util.toPointer(data.pAsyncMsg)), true);
  // 0x128: pointer
  if (data?.pCorrInfo !== undefined) view.setBigUint64(296, data.pCorrInfo === null ? 0n : BigInt(util.toPointer(data.pCorrInfo)), true);
  // 0x130: pointer
  if (data?.pCorrMemory !== undefined) view.setBigUint64(304, data.pCorrMemory === null ? 0n : BigInt(util.toPointer(data.pCorrMemory)), true);
  // 0x138: pointer
  if (data?.pMemoryList !== undefined) view.setBigUint64(312, data.pMemoryList === null ? 0n : BigInt(util.toPointer(data.pMemoryList)), true);
  // 0x140: isize
  if (data?.pCSInfo !== undefined) view.setBigInt64(320, BigInt(data.pCSInfo), true);
  // 0x148: pointer
  if (data?.ConformanceMark !== undefined) view.setBigUint64(328, data.ConformanceMark === null ? 0n : BigInt(util.toPointer(data.ConformanceMark)), true);
  // 0x150: pointer
  if (data?.VarianceMark !== undefined) view.setBigUint64(336, data.VarianceMark === null ? 0n : BigInt(util.toPointer(data.VarianceMark)), true);
  // 0x158: isize
  if (data?.Unused !== undefined) view.setBigInt64(344, BigInt(data.Unused), true);
  // 0x160: pointer
  if (data?.pContext !== undefined) view.setBigUint64(352, data.pContext === null ? 0n : BigInt(util.toPointer(data.pContext)), true);
  // 0x168: pointer
  if (data?.ContextHandleHash !== undefined) view.setBigUint64(360, data.ContextHandleHash === null ? 0n : BigInt(util.toPointer(data.ContextHandleHash)), true);
  // 0x170: pointer
  if (data?.pUserMarshalList !== undefined) view.setBigUint64(368, data.pUserMarshalList === null ? 0n : BigInt(util.toPointer(data.pUserMarshalList)), true);
  // 0x178: isize
  if (data?.Reserved51_3 !== undefined) view.setBigInt64(376, BigInt(data.Reserved51_3), true);
  // 0x180: isize
  if (data?.Reserved51_4 !== undefined) view.setBigInt64(384, BigInt(data.Reserved51_4), true);
  // 0x188: isize
  if (data?.Reserved51_5 !== undefined) view.setBigInt64(392, BigInt(data.Reserved51_5), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.GENERIC_BINDING_ROUTINE_PAIR (size: 16)
 */
export interface GENERIC_BINDING_ROUTINE_PAIR {
  /** Windows.Win32.System.Rpc.GENERIC_BINDING_ROUTINE */
  pfnBind: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Rpc.GENERIC_UNBIND_ROUTINE */
  pfnUnbind: Uint8Array | Deno.PointerValue | null;
}

export const sizeofGENERIC_BINDING_ROUTINE_PAIR = 16;

export function allocGENERIC_BINDING_ROUTINE_PAIR(data?: Partial<GENERIC_BINDING_ROUTINE_PAIR>): Uint8Array {
  const buf = new Uint8Array(sizeofGENERIC_BINDING_ROUTINE_PAIR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pfnBind !== undefined) view.setBigUint64(0, data.pfnBind === null ? 0n : BigInt(util.toPointer(data.pfnBind)), true);
  // 0x08: pointer
  if (data?.pfnUnbind !== undefined) view.setBigUint64(8, data.pfnUnbind === null ? 0n : BigInt(util.toPointer(data.pfnUnbind)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.GENERIC_BINDING_INFO (size: 32)
 */
export interface GENERIC_BINDING_INFO {
  /** ptr */
  pObj: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Size: number;
  /** Windows.Win32.System.Rpc.GENERIC_BINDING_ROUTINE */
  pfnBind: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Rpc.GENERIC_UNBIND_ROUTINE */
  pfnUnbind: Uint8Array | Deno.PointerValue | null;
}

export const sizeofGENERIC_BINDING_INFO = 32;

export function allocGENERIC_BINDING_INFO(data?: Partial<GENERIC_BINDING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofGENERIC_BINDING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pObj !== undefined) view.setBigUint64(0, data.pObj === null ? 0n : BigInt(util.toPointer(data.pObj)), true);
  // 0x08: u32
  if (data?.Size !== undefined) view.setUint32(8, Number(data.Size), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pfnBind !== undefined) view.setBigUint64(16, data.pfnBind === null ? 0n : BigInt(util.toPointer(data.pfnBind)), true);
  // 0x18: pointer
  if (data?.pfnUnbind !== undefined) view.setBigUint64(24, data.pfnUnbind === null ? 0n : BigInt(util.toPointer(data.pfnUnbind)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.XMIT_ROUTINE_QUINTUPLE (size: 32)
 */
export interface XMIT_ROUTINE_QUINTUPLE {
  /** Windows.Win32.System.Rpc.XMIT_HELPER_ROUTINE */
  pfnTranslateToXmit: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Rpc.XMIT_HELPER_ROUTINE */
  pfnTranslateFromXmit: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Rpc.XMIT_HELPER_ROUTINE */
  pfnFreeXmit: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Rpc.XMIT_HELPER_ROUTINE */
  pfnFreeInst: Uint8Array | Deno.PointerValue | null;
}

export const sizeofXMIT_ROUTINE_QUINTUPLE = 32;

export function allocXMIT_ROUTINE_QUINTUPLE(data?: Partial<XMIT_ROUTINE_QUINTUPLE>): Uint8Array {
  const buf = new Uint8Array(sizeofXMIT_ROUTINE_QUINTUPLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pfnTranslateToXmit !== undefined) view.setBigUint64(0, data.pfnTranslateToXmit === null ? 0n : BigInt(util.toPointer(data.pfnTranslateToXmit)), true);
  // 0x08: pointer
  if (data?.pfnTranslateFromXmit !== undefined) view.setBigUint64(8, data.pfnTranslateFromXmit === null ? 0n : BigInt(util.toPointer(data.pfnTranslateFromXmit)), true);
  // 0x10: pointer
  if (data?.pfnFreeXmit !== undefined) view.setBigUint64(16, data.pfnFreeXmit === null ? 0n : BigInt(util.toPointer(data.pfnFreeXmit)), true);
  // 0x18: pointer
  if (data?.pfnFreeInst !== undefined) view.setBigUint64(24, data.pfnFreeInst === null ? 0n : BigInt(util.toPointer(data.pfnFreeInst)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.USER_MARSHAL_ROUTINE_QUADRUPLE (size: 32)
 */
export interface USER_MARSHAL_ROUTINE_QUADRUPLE {
  /** Windows.Win32.System.Rpc.USER_MARSHAL_SIZING_ROUTINE */
  pfnBufferSize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Rpc.USER_MARSHAL_MARSHALLING_ROUTINE */
  pfnMarshall: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Rpc.USER_MARSHAL_UNMARSHALLING_ROUTINE */
  pfnUnmarshall: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Rpc.USER_MARSHAL_FREEING_ROUTINE */
  pfnFree: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSER_MARSHAL_ROUTINE_QUADRUPLE = 32;

export function allocUSER_MARSHAL_ROUTINE_QUADRUPLE(data?: Partial<USER_MARSHAL_ROUTINE_QUADRUPLE>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_MARSHAL_ROUTINE_QUADRUPLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pfnBufferSize !== undefined) view.setBigUint64(0, data.pfnBufferSize === null ? 0n : BigInt(util.toPointer(data.pfnBufferSize)), true);
  // 0x08: pointer
  if (data?.pfnMarshall !== undefined) view.setBigUint64(8, data.pfnMarshall === null ? 0n : BigInt(util.toPointer(data.pfnMarshall)), true);
  // 0x10: pointer
  if (data?.pfnUnmarshall !== undefined) view.setBigUint64(16, data.pfnUnmarshall === null ? 0n : BigInt(util.toPointer(data.pfnUnmarshall)), true);
  // 0x18: pointer
  if (data?.pfnFree !== undefined) view.setBigUint64(24, data.pfnFree === null ? 0n : BigInt(util.toPointer(data.pfnFree)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.USER_MARSHAL_CB (size: 48)
 */
export interface USER_MARSHAL_CB {
  /** u32 */
  Flags: number;
  /** ptr */
  pStubMsg: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pReserve: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Signature: number;
  /** Windows.Win32.System.Rpc.USER_MARSHAL_CB_TYPE */
  CBType: USER_MARSHAL_CB_TYPE;
  /** ptr */
  pFormat: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pTypeFormat: Deno.PointerValue | Uint8Array | null;
}

export const sizeofUSER_MARSHAL_CB = 48;

export function allocUSER_MARSHAL_CB(data?: Partial<USER_MARSHAL_CB>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_MARSHAL_CB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pStubMsg !== undefined) view.setBigUint64(8, data.pStubMsg === null ? 0n : BigInt(util.toPointer(data.pStubMsg)), true);
  // 0x10: pointer
  if (data?.pReserve !== undefined) view.setBigUint64(16, data.pReserve === null ? 0n : BigInt(util.toPointer(data.pReserve)), true);
  // 0x18: u32
  if (data?.Signature !== undefined) view.setUint32(24, Number(data.Signature), true);
  // 0x1c: i32
  if (data?.CBType !== undefined) view.setInt32(28, Number(data.CBType), true);
  // 0x20: pointer
  if (data?.pFormat !== undefined) view.setBigUint64(32, data.pFormat === null ? 0n : BigInt(util.toPointer(data.pFormat)), true);
  // 0x28: pointer
  if (data?.pTypeFormat !== undefined) view.setBigUint64(40, data.pTypeFormat === null ? 0n : BigInt(util.toPointer(data.pTypeFormat)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.MALLOC_FREE_STRUCT (size: 16)
 */
export interface MALLOC_FREE_STRUCT {
  /** isize */
  pfnAllocate: Deno.PointerValue;
  /** isize */
  pfnFree: Deno.PointerValue;
}

export const sizeofMALLOC_FREE_STRUCT = 16;

export function allocMALLOC_FREE_STRUCT(data?: Partial<MALLOC_FREE_STRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofMALLOC_FREE_STRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: isize
  if (data?.pfnAllocate !== undefined) view.setBigInt64(0, BigInt(data.pfnAllocate), true);
  // 0x08: isize
  if (data?.pfnFree !== undefined) view.setBigInt64(8, BigInt(data.pfnFree), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.COMM_FAULT_OFFSETS (size: 8)
 */
export interface COMM_FAULT_OFFSETS {
  /** i16 */
  CommOffset: number;
  /** i16 */
  FaultOffset: number;
}

export const sizeofCOMM_FAULT_OFFSETS = 8;

export function allocCOMM_FAULT_OFFSETS(data?: Partial<COMM_FAULT_OFFSETS>): Uint8Array {
  const buf = new Uint8Array(sizeofCOMM_FAULT_OFFSETS);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.CommOffset !== undefined) view.setInt16(0, Number(data.CommOffset), true);
  // 0x02: i16
  if (data?.FaultOffset !== undefined) view.setInt16(2, Number(data.FaultOffset), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR_CS_SIZE_CONVERT_ROUTINES (size: 32)
 */
export interface NDR_CS_SIZE_CONVERT_ROUTINES {
  /** Windows.Win32.System.Rpc.CS_TYPE_NET_SIZE_ROUTINE */
  pfnNetSize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Rpc.CS_TYPE_TO_NETCS_ROUTINE */
  pfnToNetCs: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Rpc.CS_TYPE_LOCAL_SIZE_ROUTINE */
  pfnLocalSize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Rpc.CS_TYPE_FROM_NETCS_ROUTINE */
  pfnFromNetCs: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNDR_CS_SIZE_CONVERT_ROUTINES = 32;

export function allocNDR_CS_SIZE_CONVERT_ROUTINES(data?: Partial<NDR_CS_SIZE_CONVERT_ROUTINES>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR_CS_SIZE_CONVERT_ROUTINES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pfnNetSize !== undefined) view.setBigUint64(0, data.pfnNetSize === null ? 0n : BigInt(util.toPointer(data.pfnNetSize)), true);
  // 0x08: pointer
  if (data?.pfnToNetCs !== undefined) view.setBigUint64(8, data.pfnToNetCs === null ? 0n : BigInt(util.toPointer(data.pfnToNetCs)), true);
  // 0x10: pointer
  if (data?.pfnLocalSize !== undefined) view.setBigUint64(16, data.pfnLocalSize === null ? 0n : BigInt(util.toPointer(data.pfnLocalSize)), true);
  // 0x18: pointer
  if (data?.pfnFromNetCs !== undefined) view.setBigUint64(24, data.pfnFromNetCs === null ? 0n : BigInt(util.toPointer(data.pfnFromNetCs)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR_CS_ROUTINES (size: 16)
 */
export interface NDR_CS_ROUTINES {
  /** ptr */
  pSizeConvertRoutines: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pTagGettingRoutines: Deno.PointerValue | Uint8Array | null;
}

export const sizeofNDR_CS_ROUTINES = 16;

export function allocNDR_CS_ROUTINES(data?: Partial<NDR_CS_ROUTINES>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR_CS_ROUTINES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pSizeConvertRoutines !== undefined) view.setBigUint64(0, data.pSizeConvertRoutines === null ? 0n : BigInt(util.toPointer(data.pSizeConvertRoutines)), true);
  // 0x08: pointer
  if (data?.pTagGettingRoutines !== undefined) view.setBigUint64(8, data.pTagGettingRoutines === null ? 0n : BigInt(util.toPointer(data.pTagGettingRoutines)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR_EXPR_DESC (size: 16)
 */
export interface NDR_EXPR_DESC {
  /** ptr */
  pOffset: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pFormatExpr: Deno.PointerValue | Uint8Array | null;
}

export const sizeofNDR_EXPR_DESC = 16;

export function allocNDR_EXPR_DESC(data?: Partial<NDR_EXPR_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR_EXPR_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pOffset !== undefined) view.setBigUint64(0, data.pOffset === null ? 0n : BigInt(util.toPointer(data.pOffset)), true);
  // 0x08: pointer
  if (data?.pFormatExpr !== undefined) view.setBigUint64(8, data.pFormatExpr === null ? 0n : BigInt(util.toPointer(data.pFormatExpr)), true);
  return buf;
}

/**
 * _IMPLICIT_HANDLE_INFO_e__Union (size: 24)
 */
export interface _IMPLICIT_HANDLE_INFO_e__Union {
  /** ptr */
  pAutoHandle: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pPrimitiveHandle: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pGenericBindingInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_IMPLICIT_HANDLE_INFO_e__Union = 24;

export function alloc_IMPLICIT_HANDLE_INFO_e__Union(data?: Partial<_IMPLICIT_HANDLE_INFO_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_IMPLICIT_HANDLE_INFO_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pAutoHandle !== undefined) view.setBigUint64(0, data.pAutoHandle === null ? 0n : BigInt(util.toPointer(data.pAutoHandle)), true);
  // 0x08: pointer
  if (data?.pPrimitiveHandle !== undefined) view.setBigUint64(8, data.pPrimitiveHandle === null ? 0n : BigInt(util.toPointer(data.pPrimitiveHandle)), true);
  // 0x10: pointer
  if (data?.pGenericBindingInfo !== undefined) view.setBigUint64(16, data.pGenericBindingInfo === null ? 0n : BigInt(util.toPointer(data.pGenericBindingInfo)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.MIDL_STUB_DESC (size: 152)
 */
export interface MIDL_STUB_DESC {
  /** ptr */
  RpcInterfaceInformation: Deno.PointerValue | Uint8Array | null;
  /** isize */
  pfnAllocate: Deno.PointerValue;
  /** isize */
  pfnFree: Deno.PointerValue;
  /** _IMPLICIT_HANDLE_INFO_e__Union */
  IMPLICIT_HANDLE_INFO: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  apfnNdrRundownRoutines: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  aGenericBindingRoutinePairs: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  apfnExprEval: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  aXmitQuintuple: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pFormatTypes: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  fCheckBounds: number;
  /** u32 */
  Version: number;
  /** ptr */
  pMallocFreeStruct: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  MIDLVersion: number;
  /** ptr */
  CommFaultOffsets: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  aUserMarshalQuadruple: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  NotifyRoutineTable: Deno.PointerValue | Uint8Array | null;
  /** usize */
  mFlags: Deno.PointerValue;
  /** ptr */
  CsRoutineTables: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ProxyServerInfo: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pExprInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMIDL_STUB_DESC = 152;

export function allocMIDL_STUB_DESC(data?: Partial<MIDL_STUB_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDL_STUB_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.RpcInterfaceInformation !== undefined) view.setBigUint64(0, data.RpcInterfaceInformation === null ? 0n : BigInt(util.toPointer(data.RpcInterfaceInformation)), true);
  // 0x08: isize
  if (data?.pfnAllocate !== undefined) view.setBigInt64(8, BigInt(data.pfnAllocate), true);
  // 0x10: isize
  if (data?.pfnFree !== undefined) view.setBigInt64(16, BigInt(data.pfnFree), true);
  // 0x18: pointer
  if (data?.IMPLICIT_HANDLE_INFO !== undefined) view.setBigUint64(24, data.IMPLICIT_HANDLE_INFO === null ? 0n : BigInt(util.toPointer(data.IMPLICIT_HANDLE_INFO)), true);
  // 0x20: pointer
  if (data?.apfnNdrRundownRoutines !== undefined) view.setBigUint64(32, data.apfnNdrRundownRoutines === null ? 0n : BigInt(util.toPointer(data.apfnNdrRundownRoutines)), true);
  // 0x28: pointer
  if (data?.aGenericBindingRoutinePairs !== undefined) view.setBigUint64(40, data.aGenericBindingRoutinePairs === null ? 0n : BigInt(util.toPointer(data.aGenericBindingRoutinePairs)), true);
  // 0x30: pointer
  if (data?.apfnExprEval !== undefined) view.setBigUint64(48, data.apfnExprEval === null ? 0n : BigInt(util.toPointer(data.apfnExprEval)), true);
  // 0x38: pointer
  if (data?.aXmitQuintuple !== undefined) view.setBigUint64(56, data.aXmitQuintuple === null ? 0n : BigInt(util.toPointer(data.aXmitQuintuple)), true);
  // 0x40: pointer
  if (data?.pFormatTypes !== undefined) view.setBigUint64(64, data.pFormatTypes === null ? 0n : BigInt(util.toPointer(data.pFormatTypes)), true);
  // 0x48: i32
  if (data?.fCheckBounds !== undefined) view.setInt32(72, Number(data.fCheckBounds), true);
  // 0x4c: u32
  if (data?.Version !== undefined) view.setUint32(76, Number(data.Version), true);
  // 0x50: pointer
  if (data?.pMallocFreeStruct !== undefined) view.setBigUint64(80, data.pMallocFreeStruct === null ? 0n : BigInt(util.toPointer(data.pMallocFreeStruct)), true);
  // 0x58: i32
  if (data?.MIDLVersion !== undefined) view.setInt32(88, Number(data.MIDLVersion), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.CommFaultOffsets !== undefined) view.setBigUint64(96, data.CommFaultOffsets === null ? 0n : BigInt(util.toPointer(data.CommFaultOffsets)), true);
  // 0x68: pointer
  if (data?.aUserMarshalQuadruple !== undefined) view.setBigUint64(104, data.aUserMarshalQuadruple === null ? 0n : BigInt(util.toPointer(data.aUserMarshalQuadruple)), true);
  // 0x70: pointer
  if (data?.NotifyRoutineTable !== undefined) view.setBigUint64(112, data.NotifyRoutineTable === null ? 0n : BigInt(util.toPointer(data.NotifyRoutineTable)), true);
  // 0x78: usize
  if (data?.mFlags !== undefined) view.setBigUint64(120, BigInt(data.mFlags), true);
  // 0x80: pointer
  if (data?.CsRoutineTables !== undefined) view.setBigUint64(128, data.CsRoutineTables === null ? 0n : BigInt(util.toPointer(data.CsRoutineTables)), true);
  // 0x88: pointer
  if (data?.ProxyServerInfo !== undefined) view.setBigUint64(136, data.ProxyServerInfo === null ? 0n : BigInt(util.toPointer(data.ProxyServerInfo)), true);
  // 0x90: pointer
  if (data?.pExprInfo !== undefined) view.setBigUint64(144, data.pExprInfo === null ? 0n : BigInt(util.toPointer(data.pExprInfo)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.MIDL_FORMAT_STRING (size: 16)
 */
export interface MIDL_FORMAT_STRING {
  /** i16 */
  Pad: number;
  /** array */
  Format: Deno.PointerValue | null;
}

export const sizeofMIDL_FORMAT_STRING = 16;

export function allocMIDL_FORMAT_STRING(data?: Partial<MIDL_FORMAT_STRING>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDL_FORMAT_STRING);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.Pad !== undefined) view.setInt16(0, Number(data.Pad), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Format !== undefined) view.setBigUint64(8, data.Format === null ? 0n : BigInt(util.toPointer(data.Format)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.MIDL_METHOD_PROPERTY (size: 16)
 */
export interface MIDL_METHOD_PROPERTY {
  /** u32 */
  Id: number;
  /** usize */
  Value: Deno.PointerValue;
}

export const sizeofMIDL_METHOD_PROPERTY = 16;

export function allocMIDL_METHOD_PROPERTY(data?: Partial<MIDL_METHOD_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDL_METHOD_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Id !== undefined) view.setUint32(0, Number(data.Id), true);
  // 0x04: pad4
  // 0x08: usize
  if (data?.Value !== undefined) view.setBigUint64(8, BigInt(data.Value), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.MIDL_METHOD_PROPERTY_MAP (size: 16)
 */
export interface MIDL_METHOD_PROPERTY_MAP {
  /** u32 */
  Count: number;
  /** ptr */
  Properties: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMIDL_METHOD_PROPERTY_MAP = 16;

export function allocMIDL_METHOD_PROPERTY_MAP(data?: Partial<MIDL_METHOD_PROPERTY_MAP>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDL_METHOD_PROPERTY_MAP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Count !== undefined) view.setUint32(0, Number(data.Count), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Properties !== undefined) view.setBigUint64(8, data.Properties === null ? 0n : BigInt(util.toPointer(data.Properties)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.MIDL_INTERFACE_METHOD_PROPERTIES (size: 16)
 */
export interface MIDL_INTERFACE_METHOD_PROPERTIES {
  /** u16 */
  MethodCount: number;
  /** ptr */
  MethodProperties: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMIDL_INTERFACE_METHOD_PROPERTIES = 16;

export function allocMIDL_INTERFACE_METHOD_PROPERTIES(data?: Partial<MIDL_INTERFACE_METHOD_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDL_INTERFACE_METHOD_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.MethodCount !== undefined) view.setUint16(0, Number(data.MethodCount), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.MethodProperties !== undefined) view.setBigUint64(8, data.MethodProperties === null ? 0n : BigInt(util.toPointer(data.MethodProperties)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.MIDL_SERVER_INFO (size: 64)
 */
export interface MIDL_SERVER_INFO {
  /** ptr */
  pStubDesc: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  DispatchTable: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ProcString: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  FmtStringOffset: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ThunkTable: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pTransferSyntax: Deno.PointerValue | Uint8Array | null;
  /** usize */
  nCount: Deno.PointerValue;
  /** ptr */
  pSyntaxInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMIDL_SERVER_INFO = 64;

export function allocMIDL_SERVER_INFO(data?: Partial<MIDL_SERVER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDL_SERVER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pStubDesc !== undefined) view.setBigUint64(0, data.pStubDesc === null ? 0n : BigInt(util.toPointer(data.pStubDesc)), true);
  // 0x08: pointer
  if (data?.DispatchTable !== undefined) view.setBigUint64(8, data.DispatchTable === null ? 0n : BigInt(util.toPointer(data.DispatchTable)), true);
  // 0x10: pointer
  if (data?.ProcString !== undefined) view.setBigUint64(16, data.ProcString === null ? 0n : BigInt(util.toPointer(data.ProcString)), true);
  // 0x18: pointer
  if (data?.FmtStringOffset !== undefined) view.setBigUint64(24, data.FmtStringOffset === null ? 0n : BigInt(util.toPointer(data.FmtStringOffset)), true);
  // 0x20: pointer
  if (data?.ThunkTable !== undefined) view.setBigUint64(32, data.ThunkTable === null ? 0n : BigInt(util.toPointer(data.ThunkTable)), true);
  // 0x28: pointer
  if (data?.pTransferSyntax !== undefined) view.setBigUint64(40, data.pTransferSyntax === null ? 0n : BigInt(util.toPointer(data.pTransferSyntax)), true);
  // 0x30: usize
  if (data?.nCount !== undefined) view.setBigUint64(48, BigInt(data.nCount), true);
  // 0x38: pointer
  if (data?.pSyntaxInfo !== undefined) view.setBigUint64(56, data.pSyntaxInfo === null ? 0n : BigInt(util.toPointer(data.pSyntaxInfo)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.MIDL_STUBLESS_PROXY_INFO (size: 48)
 */
export interface MIDL_STUBLESS_PROXY_INFO {
  /** ptr */
  pStubDesc: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ProcFormatString: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  FormatStringOffset: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pTransferSyntax: Deno.PointerValue | Uint8Array | null;
  /** usize */
  nCount: Deno.PointerValue;
  /** ptr */
  pSyntaxInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMIDL_STUBLESS_PROXY_INFO = 48;

export function allocMIDL_STUBLESS_PROXY_INFO(data?: Partial<MIDL_STUBLESS_PROXY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDL_STUBLESS_PROXY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pStubDesc !== undefined) view.setBigUint64(0, data.pStubDesc === null ? 0n : BigInt(util.toPointer(data.pStubDesc)), true);
  // 0x08: pointer
  if (data?.ProcFormatString !== undefined) view.setBigUint64(8, data.ProcFormatString === null ? 0n : BigInt(util.toPointer(data.ProcFormatString)), true);
  // 0x10: pointer
  if (data?.FormatStringOffset !== undefined) view.setBigUint64(16, data.FormatStringOffset === null ? 0n : BigInt(util.toPointer(data.FormatStringOffset)), true);
  // 0x18: pointer
  if (data?.pTransferSyntax !== undefined) view.setBigUint64(24, data.pTransferSyntax === null ? 0n : BigInt(util.toPointer(data.pTransferSyntax)), true);
  // 0x20: usize
  if (data?.nCount !== undefined) view.setBigUint64(32, BigInt(data.nCount), true);
  // 0x28: pointer
  if (data?.pSyntaxInfo !== undefined) view.setBigUint64(40, data.pSyntaxInfo === null ? 0n : BigInt(util.toPointer(data.pSyntaxInfo)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.MIDL_SYNTAX_INFO (size: 64)
 */
export interface MIDL_SYNTAX_INFO {
  /** Windows.Win32.System.Rpc.RPC_SYNTAX_IDENTIFIER */
  TransferSyntax: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  DispatchTable: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ProcString: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  FmtStringOffset: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  TypeString: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  aUserMarshalQuadruple: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pMethodProperties: Deno.PointerValue | Uint8Array | null;
  /** usize */
  pReserved2: Deno.PointerValue;
}

export const sizeofMIDL_SYNTAX_INFO = 64;

export function allocMIDL_SYNTAX_INFO(data?: Partial<MIDL_SYNTAX_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDL_SYNTAX_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TransferSyntax !== undefined) view.setBigUint64(0, data.TransferSyntax === null ? 0n : BigInt(util.toPointer(data.TransferSyntax)), true);
  // 0x08: pointer
  if (data?.DispatchTable !== undefined) view.setBigUint64(8, data.DispatchTable === null ? 0n : BigInt(util.toPointer(data.DispatchTable)), true);
  // 0x10: pointer
  if (data?.ProcString !== undefined) view.setBigUint64(16, data.ProcString === null ? 0n : BigInt(util.toPointer(data.ProcString)), true);
  // 0x18: pointer
  if (data?.FmtStringOffset !== undefined) view.setBigUint64(24, data.FmtStringOffset === null ? 0n : BigInt(util.toPointer(data.FmtStringOffset)), true);
  // 0x20: pointer
  if (data?.TypeString !== undefined) view.setBigUint64(32, data.TypeString === null ? 0n : BigInt(util.toPointer(data.TypeString)), true);
  // 0x28: pointer
  if (data?.aUserMarshalQuadruple !== undefined) view.setBigUint64(40, data.aUserMarshalQuadruple === null ? 0n : BigInt(util.toPointer(data.aUserMarshalQuadruple)), true);
  // 0x30: pointer
  if (data?.pMethodProperties !== undefined) view.setBigUint64(48, data.pMethodProperties === null ? 0n : BigInt(util.toPointer(data.pMethodProperties)), true);
  // 0x38: usize
  if (data?.pReserved2 !== undefined) view.setBigUint64(56, BigInt(data.pReserved2), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.CLIENT_CALL_RETURN (size: 16)
 */
export interface CLIENT_CALL_RETURN {
  /** ptr */
  Pointer: Deno.PointerValue | Uint8Array | null;
  /** isize */
  Simple: Deno.PointerValue;
}

export const sizeofCLIENT_CALL_RETURN = 16;

export function allocCLIENT_CALL_RETURN(data?: Partial<CLIENT_CALL_RETURN>): Uint8Array {
  const buf = new Uint8Array(sizeofCLIENT_CALL_RETURN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Pointer !== undefined) view.setBigUint64(0, data.Pointer === null ? 0n : BigInt(util.toPointer(data.Pointer)), true);
  // 0x08: isize
  if (data?.Simple !== undefined) view.setBigInt64(8, BigInt(data.Simple), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.FULL_PTR_XLAT_TABLES (size: 24)
 */
export interface FULL_PTR_XLAT_TABLES {
  /** ptr */
  RefIdToPointer: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  PointerToRefId: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NextRefId: number;
  /** Windows.Win32.System.Rpc.XLAT_SIDE */
  XlatSide: XLAT_SIDE;
}

export const sizeofFULL_PTR_XLAT_TABLES = 24;

export function allocFULL_PTR_XLAT_TABLES(data?: Partial<FULL_PTR_XLAT_TABLES>): Uint8Array {
  const buf = new Uint8Array(sizeofFULL_PTR_XLAT_TABLES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.RefIdToPointer !== undefined) view.setBigUint64(0, data.RefIdToPointer === null ? 0n : BigInt(util.toPointer(data.RefIdToPointer)), true);
  // 0x08: pointer
  if (data?.PointerToRefId !== undefined) view.setBigUint64(8, data.PointerToRefId === null ? 0n : BigInt(util.toPointer(data.PointerToRefId)), true);
  // 0x10: u32
  if (data?.NextRefId !== undefined) view.setUint32(16, Number(data.NextRefId), true);
  // 0x14: i32
  if (data?.XlatSide !== undefined) view.setInt32(20, Number(data.XlatSide), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.MIDL_INTERCEPTION_INFO (size: 40)
 */
export interface MIDL_INTERCEPTION_INFO {
  /** u32 */
  Version: number;
  /** ptr */
  ProcString: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ProcFormatOffsetTable: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ProcCount: number;
  /** ptr */
  TypeString: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMIDL_INTERCEPTION_INFO = 40;

export function allocMIDL_INTERCEPTION_INFO(data?: Partial<MIDL_INTERCEPTION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDL_INTERCEPTION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ProcString !== undefined) view.setBigUint64(8, data.ProcString === null ? 0n : BigInt(util.toPointer(data.ProcString)), true);
  // 0x10: pointer
  if (data?.ProcFormatOffsetTable !== undefined) view.setBigUint64(16, data.ProcFormatOffsetTable === null ? 0n : BigInt(util.toPointer(data.ProcFormatOffsetTable)), true);
  // 0x18: u32
  if (data?.ProcCount !== undefined) view.setUint32(24, Number(data.ProcCount), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.TypeString !== undefined) view.setBigUint64(32, data.TypeString === null ? 0n : BigInt(util.toPointer(data.TypeString)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.MIDL_WINRT_TYPE_SERIALIZATION_INFO (size: 32)
 */
export interface MIDL_WINRT_TYPE_SERIALIZATION_INFO {
  /** u32 */
  Version: number;
  /** ptr */
  TypeFormatString: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  FormatStringSize: number;
  /** u16 */
  TypeOffset: number;
  /** ptr */
  StubDesc: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMIDL_WINRT_TYPE_SERIALIZATION_INFO = 32;

export function allocMIDL_WINRT_TYPE_SERIALIZATION_INFO(data?: Partial<MIDL_WINRT_TYPE_SERIALIZATION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDL_WINRT_TYPE_SERIALIZATION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.TypeFormatString !== undefined) view.setBigUint64(8, data.TypeFormatString === null ? 0n : BigInt(util.toPointer(data.TypeFormatString)), true);
  // 0x10: u16
  if (data?.FormatStringSize !== undefined) view.setUint16(16, Number(data.FormatStringSize), true);
  // 0x12: u16
  if (data?.TypeOffset !== undefined) view.setUint16(18, Number(data.TypeOffset), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.StubDesc !== undefined) view.setBigUint64(24, data.StubDesc === null ? 0n : BigInt(util.toPointer(data.StubDesc)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR_USER_MARSHAL_INFO_LEVEL1 (size: 48)
 */
export interface NDR_USER_MARSHAL_INFO_LEVEL1 {
  /** ptr */
  Buffer: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  BufferSize: number;
  /** isize */
  pfnAllocate: Deno.PointerValue;
  /** isize */
  pfnFree: Deno.PointerValue;
  /** Windows.Win32.System.Com.IRpcChannelBuffer */
  pRpcChannelBuffer: Uint8Array | Deno.PointerValue | null;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofNDR_USER_MARSHAL_INFO_LEVEL1 = 48;

export function allocNDR_USER_MARSHAL_INFO_LEVEL1(data?: Partial<NDR_USER_MARSHAL_INFO_LEVEL1>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR_USER_MARSHAL_INFO_LEVEL1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Buffer !== undefined) view.setBigUint64(0, data.Buffer === null ? 0n : BigInt(util.toPointer(data.Buffer)), true);
  // 0x08: u32
  if (data?.BufferSize !== undefined) view.setUint32(8, Number(data.BufferSize), true);
  // 0x0c: pad4
  // 0x10: isize
  if (data?.pfnAllocate !== undefined) view.setBigInt64(16, BigInt(data.pfnAllocate), true);
  // 0x18: isize
  if (data?.pfnFree !== undefined) view.setBigInt64(24, BigInt(data.pfnFree), true);
  // 0x20: pointer
  if (data?.pRpcChannelBuffer !== undefined) view.setBigUint64(32, data.pRpcChannelBuffer === null ? 0n : BigInt(util.toPointer(data.pRpcChannelBuffer)), true);
  // 0x28: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(40, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR_USER_MARSHAL_INFO (size: 16)
 */
export interface NDR_USER_MARSHAL_INFO {
  /** u32 */
  InformationLevel: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNDR_USER_MARSHAL_INFO = 16;

export function allocNDR_USER_MARSHAL_INFO(data?: Partial<NDR_USER_MARSHAL_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR_USER_MARSHAL_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.InformationLevel !== undefined) view.setUint32(0, Number(data.InformationLevel), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.MIDL_TYPE_PICKLING_INFO (size: 16)
 */
export interface MIDL_TYPE_PICKLING_INFO {
  /** u32 */
  Version: number;
  /** u32 */
  Flags: number;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofMIDL_TYPE_PICKLING_INFO = 16;

export function allocMIDL_TYPE_PICKLING_INFO(data?: Partial<MIDL_TYPE_PICKLING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDL_TYPE_PICKLING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_PROC_FLAGS (size: 8)
 */
export interface NDR64_PROC_FLAGS {
  /** u32 */
  _bitfield: number;
}

export const sizeofNDR64_PROC_FLAGS = 8;

export function allocNDR64_PROC_FLAGS(data?: Partial<NDR64_PROC_FLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_PROC_FLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?._bitfield !== undefined) view.setUint32(0, Number(data._bitfield), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_RPC_FLAGS (size: 8)
 */
export interface NDR64_RPC_FLAGS {
  /** u16 */
  _bitfield: number;
}

export const sizeofNDR64_RPC_FLAGS = 8;

export function allocNDR64_RPC_FLAGS(data?: Partial<NDR64_RPC_FLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_RPC_FLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?._bitfield !== undefined) view.setUint16(0, Number(data._bitfield), true);
  // 0x02: pad6
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_PROC_FORMAT (size: 24)
 */
export interface NDR64_PROC_FORMAT {
  /** u32 */
  Flags: number;
  /** u32 */
  StackSize: number;
  /** u32 */
  ConstantClientBufferSize: number;
  /** u32 */
  ConstantServerBufferSize: number;
  /** u16 */
  RpcFlags: number;
  /** u16 */
  FloatDoubleMask: number;
  /** u16 */
  NumberOfParams: number;
  /** u16 */
  ExtensionSize: number;
}

export const sizeofNDR64_PROC_FORMAT = 24;

export function allocNDR64_PROC_FORMAT(data?: Partial<NDR64_PROC_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_PROC_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.StackSize !== undefined) view.setUint32(4, Number(data.StackSize), true);
  // 0x08: u32
  if (data?.ConstantClientBufferSize !== undefined) view.setUint32(8, Number(data.ConstantClientBufferSize), true);
  // 0x0c: u32
  if (data?.ConstantServerBufferSize !== undefined) view.setUint32(12, Number(data.ConstantServerBufferSize), true);
  // 0x10: u16
  if (data?.RpcFlags !== undefined) view.setUint16(16, Number(data.RpcFlags), true);
  // 0x12: u16
  if (data?.FloatDoubleMask !== undefined) view.setUint16(18, Number(data.FloatDoubleMask), true);
  // 0x14: u16
  if (data?.NumberOfParams !== undefined) view.setUint16(20, Number(data.NumberOfParams), true);
  // 0x16: u16
  if (data?.ExtensionSize !== undefined) view.setUint16(22, Number(data.ExtensionSize), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_PARAM_FLAGS (size: 8)
 */
export interface NDR64_PARAM_FLAGS {
  /** u16 */
  _bitfield: number;
}

export const sizeofNDR64_PARAM_FLAGS = 8;

export function allocNDR64_PARAM_FLAGS(data?: Partial<NDR64_PARAM_FLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_PARAM_FLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?._bitfield !== undefined) view.setUint16(0, Number(data._bitfield), true);
  // 0x02: pad6
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_PARAM_FORMAT (size: 24)
 */
export interface NDR64_PARAM_FORMAT {
  /** ptr */
  Type: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Rpc.NDR64_PARAM_FLAGS */
  Attributes: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  Reserved: number;
  /** u32 */
  StackOffset: number;
}

export const sizeofNDR64_PARAM_FORMAT = 24;

export function allocNDR64_PARAM_FORMAT(data?: Partial<NDR64_PARAM_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_PARAM_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Type !== undefined) view.setBigUint64(0, data.Type === null ? 0n : BigInt(util.toPointer(data.Type)), true);
  // 0x08: pointer
  if (data?.Attributes !== undefined) view.setBigUint64(8, data.Attributes === null ? 0n : BigInt(util.toPointer(data.Attributes)), true);
  // 0x10: u16
  if (data?.Reserved !== undefined) view.setUint16(16, Number(data.Reserved), true);
  // 0x12: u32
  if (data?.StackOffset !== undefined) view.setUint32(18, Number(data.StackOffset), true);
  // 0x16: pad2
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_RANGE_FORMAT (size: 24)
 */
export interface NDR64_RANGE_FORMAT {
  /** u8 */
  FormatCode: number;
  /** u8 */
  RangeType: number;
  /** u16 */
  Reserved: number;
  /** i64 */
  MinValue: Deno.PointerValue;
  /** i64 */
  MaxValue: Deno.PointerValue;
}

export const sizeofNDR64_RANGE_FORMAT = 24;

export function allocNDR64_RANGE_FORMAT(data?: Partial<NDR64_RANGE_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_RANGE_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.FormatCode !== undefined) view.setUint8(0, Number(data.FormatCode));
  // 0x01: u8
  if (data?.RangeType !== undefined) view.setUint8(1, Number(data.RangeType));
  // 0x02: u16
  if (data?.Reserved !== undefined) view.setUint16(2, Number(data.Reserved), true);
  // 0x04: pad4
  // 0x08: i64
  if (data?.MinValue !== undefined) view.setBigInt64(8, BigInt(data.MinValue), true);
  // 0x10: i64
  if (data?.MaxValue !== undefined) view.setBigInt64(16, BigInt(data.MaxValue), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_CONTEXT_HANDLE_FLAGS (size: 8)
 */
export interface NDR64_CONTEXT_HANDLE_FLAGS {
  /** u8 */
  _bitfield: number;
}

export const sizeofNDR64_CONTEXT_HANDLE_FLAGS = 8;

export function allocNDR64_CONTEXT_HANDLE_FLAGS(data?: Partial<NDR64_CONTEXT_HANDLE_FLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_CONTEXT_HANDLE_FLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?._bitfield !== undefined) view.setUint8(0, Number(data._bitfield));
  // 0x01: pad7
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_CONTEXT_HANDLE_FORMAT (size: 8)
 */
export interface NDR64_CONTEXT_HANDLE_FORMAT {
  /** u8 */
  FormatCode: number;
  /** u8 */
  ContextFlags: number;
  /** u8 */
  RundownRoutineIndex: number;
  /** u8 */
  Ordinal: number;
}

export const sizeofNDR64_CONTEXT_HANDLE_FORMAT = 8;

export function allocNDR64_CONTEXT_HANDLE_FORMAT(data?: Partial<NDR64_CONTEXT_HANDLE_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_CONTEXT_HANDLE_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.FormatCode !== undefined) view.setUint8(0, Number(data.FormatCode));
  // 0x01: u8
  if (data?.ContextFlags !== undefined) view.setUint8(1, Number(data.ContextFlags));
  // 0x02: u8
  if (data?.RundownRoutineIndex !== undefined) view.setUint8(2, Number(data.RundownRoutineIndex));
  // 0x03: u8
  if (data?.Ordinal !== undefined) view.setUint8(3, Number(data.Ordinal));
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_BIND_PRIMITIVE (size: 8)
 */
export interface NDR64_BIND_PRIMITIVE {
  /** u8 */
  HandleType: number;
  /** u8 */
  Flags: number;
  /** u16 */
  StackOffset: number;
  /** u16 */
  Reserved: number;
}

export const sizeofNDR64_BIND_PRIMITIVE = 8;

export function allocNDR64_BIND_PRIMITIVE(data?: Partial<NDR64_BIND_PRIMITIVE>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_BIND_PRIMITIVE);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.HandleType !== undefined) view.setUint8(0, Number(data.HandleType));
  // 0x01: u8
  if (data?.Flags !== undefined) view.setUint8(1, Number(data.Flags));
  // 0x02: u16
  if (data?.StackOffset !== undefined) view.setUint16(2, Number(data.StackOffset), true);
  // 0x04: u16
  if (data?.Reserved !== undefined) view.setUint16(4, Number(data.Reserved), true);
  // 0x06: pad2
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_BIND_GENERIC (size: 8)
 */
export interface NDR64_BIND_GENERIC {
  /** u8 */
  HandleType: number;
  /** u8 */
  Flags: number;
  /** u16 */
  StackOffset: number;
  /** u8 */
  RoutineIndex: number;
  /** u8 */
  Size: number;
}

export const sizeofNDR64_BIND_GENERIC = 8;

export function allocNDR64_BIND_GENERIC(data?: Partial<NDR64_BIND_GENERIC>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_BIND_GENERIC);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.HandleType !== undefined) view.setUint8(0, Number(data.HandleType));
  // 0x01: u8
  if (data?.Flags !== undefined) view.setUint8(1, Number(data.Flags));
  // 0x02: u16
  if (data?.StackOffset !== undefined) view.setUint16(2, Number(data.StackOffset), true);
  // 0x04: u8
  if (data?.RoutineIndex !== undefined) view.setUint8(4, Number(data.RoutineIndex));
  // 0x05: u8
  if (data?.Size !== undefined) view.setUint8(5, Number(data.Size));
  // 0x06: pad2
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_BIND_CONTEXT (size: 8)
 */
export interface NDR64_BIND_CONTEXT {
  /** u8 */
  HandleType: number;
  /** u8 */
  Flags: number;
  /** u16 */
  StackOffset: number;
  /** u8 */
  RoutineIndex: number;
  /** u8 */
  Ordinal: number;
}

export const sizeofNDR64_BIND_CONTEXT = 8;

export function allocNDR64_BIND_CONTEXT(data?: Partial<NDR64_BIND_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_BIND_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.HandleType !== undefined) view.setUint8(0, Number(data.HandleType));
  // 0x01: u8
  if (data?.Flags !== undefined) view.setUint8(1, Number(data.Flags));
  // 0x02: u16
  if (data?.StackOffset !== undefined) view.setUint16(2, Number(data.StackOffset), true);
  // 0x04: u8
  if (data?.RoutineIndex !== undefined) view.setUint8(4, Number(data.RoutineIndex));
  // 0x05: u8
  if (data?.Ordinal !== undefined) view.setUint8(5, Number(data.Ordinal));
  // 0x06: pad2
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_BINDINGS (size: 24)
 */
export interface NDR64_BINDINGS {
  /** Windows.Win32.System.Rpc.NDR64_BIND_PRIMITIVE */
  Primitive: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Rpc.NDR64_BIND_GENERIC */
  Generic: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Rpc.NDR64_BIND_CONTEXT */
  Context: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNDR64_BINDINGS = 24;

export function allocNDR64_BINDINGS(data?: Partial<NDR64_BINDINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_BINDINGS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Primitive !== undefined) view.setBigUint64(0, data.Primitive === null ? 0n : BigInt(util.toPointer(data.Primitive)), true);
  // 0x08: pointer
  if (data?.Generic !== undefined) view.setBigUint64(8, data.Generic === null ? 0n : BigInt(util.toPointer(data.Generic)), true);
  // 0x10: pointer
  if (data?.Context !== undefined) view.setBigUint64(16, data.Context === null ? 0n : BigInt(util.toPointer(data.Context)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_BIND_AND_NOTIFY_EXTENSION (size: 16)
 */
export interface NDR64_BIND_AND_NOTIFY_EXTENSION {
  /** Windows.Win32.System.Rpc.NDR64_BIND_CONTEXT */
  Binding: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  NotifyIndex: number;
}

export const sizeofNDR64_BIND_AND_NOTIFY_EXTENSION = 16;

export function allocNDR64_BIND_AND_NOTIFY_EXTENSION(data?: Partial<NDR64_BIND_AND_NOTIFY_EXTENSION>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_BIND_AND_NOTIFY_EXTENSION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Binding !== undefined) view.setBigUint64(0, data.Binding === null ? 0n : BigInt(util.toPointer(data.Binding)), true);
  // 0x08: u16
  if (data?.NotifyIndex !== undefined) view.setUint16(8, Number(data.NotifyIndex), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_SYSTEM_HANDLE_FORMAT (size: 8)
 */
export interface NDR64_SYSTEM_HANDLE_FORMAT {
  /** u8 */
  FormatCode: number;
  /** u8 */
  HandleType: number;
  /** u32 */
  DesiredAccess: number;
}

export const sizeofNDR64_SYSTEM_HANDLE_FORMAT = 8;

export function allocNDR64_SYSTEM_HANDLE_FORMAT(data?: Partial<NDR64_SYSTEM_HANDLE_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_SYSTEM_HANDLE_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.FormatCode !== undefined) view.setUint8(0, Number(data.FormatCode));
  // 0x01: u8
  if (data?.HandleType !== undefined) view.setUint8(1, Number(data.HandleType));
  // 0x02: u32
  if (data?.DesiredAccess !== undefined) view.setUint32(2, Number(data.DesiredAccess), true);
  // 0x06: pad2
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_POINTER_FORMAT (size: 16)
 */
export interface NDR64_POINTER_FORMAT {
  /** u8 */
  FormatCode: number;
  /** u8 */
  Flags: number;
  /** u16 */
  Reserved: number;
  /** ptr */
  Pointee: Deno.PointerValue | Uint8Array | null;
}

export const sizeofNDR64_POINTER_FORMAT = 16;

export function allocNDR64_POINTER_FORMAT(data?: Partial<NDR64_POINTER_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_POINTER_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.FormatCode !== undefined) view.setUint8(0, Number(data.FormatCode));
  // 0x01: u8
  if (data?.Flags !== undefined) view.setUint8(1, Number(data.Flags));
  // 0x02: u16
  if (data?.Reserved !== undefined) view.setUint16(2, Number(data.Reserved), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Pointee !== undefined) view.setBigUint64(8, data.Pointee === null ? 0n : BigInt(util.toPointer(data.Pointee)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_NO_REPEAT_FORMAT (size: 8)
 */
export interface NDR64_NO_REPEAT_FORMAT {
  /** u8 */
  FormatCode: number;
  /** u8 */
  Flags: number;
  /** u16 */
  Reserved1: number;
  /** u32 */
  Reserved2: number;
}

export const sizeofNDR64_NO_REPEAT_FORMAT = 8;

export function allocNDR64_NO_REPEAT_FORMAT(data?: Partial<NDR64_NO_REPEAT_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_NO_REPEAT_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.FormatCode !== undefined) view.setUint8(0, Number(data.FormatCode));
  // 0x01: u8
  if (data?.Flags !== undefined) view.setUint8(1, Number(data.Flags));
  // 0x02: u16
  if (data?.Reserved1 !== undefined) view.setUint16(2, Number(data.Reserved1), true);
  // 0x04: u32
  if (data?.Reserved2 !== undefined) view.setUint32(4, Number(data.Reserved2), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_POINTER_INSTANCE_HEADER_FORMAT (size: 8)
 */
export interface NDR64_POINTER_INSTANCE_HEADER_FORMAT {
  /** u32 */
  Offset: number;
  /** u32 */
  Reserved: number;
}

export const sizeofNDR64_POINTER_INSTANCE_HEADER_FORMAT = 8;

export function allocNDR64_POINTER_INSTANCE_HEADER_FORMAT(data?: Partial<NDR64_POINTER_INSTANCE_HEADER_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_POINTER_INSTANCE_HEADER_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Offset !== undefined) view.setUint32(0, Number(data.Offset), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_POINTER_REPEAT_FLAGS (size: 8)
 */
export interface NDR64_POINTER_REPEAT_FLAGS {
  /** u8 */
  _bitfield: number;
}

export const sizeofNDR64_POINTER_REPEAT_FLAGS = 8;

export function allocNDR64_POINTER_REPEAT_FLAGS(data?: Partial<NDR64_POINTER_REPEAT_FLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_POINTER_REPEAT_FLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?._bitfield !== undefined) view.setUint8(0, Number(data._bitfield));
  // 0x01: pad7
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_REPEAT_FORMAT (size: 32)
 */
export interface NDR64_REPEAT_FORMAT {
  /** u8 */
  FormatCode: number;
  /** Windows.Win32.System.Rpc.NDR64_POINTER_REPEAT_FLAGS */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  Reserved: number;
  /** u32 */
  Increment: number;
  /** u32 */
  OffsetToArray: number;
  /** u32 */
  NumberOfPointers: number;
}

export const sizeofNDR64_REPEAT_FORMAT = 32;

export function allocNDR64_REPEAT_FORMAT(data?: Partial<NDR64_REPEAT_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_REPEAT_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.FormatCode !== undefined) view.setUint8(0, Number(data.FormatCode));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.Flags !== undefined) view.setBigUint64(8, data.Flags === null ? 0n : BigInt(util.toPointer(data.Flags)), true);
  // 0x10: u16
  if (data?.Reserved !== undefined) view.setUint16(16, Number(data.Reserved), true);
  // 0x12: u32
  if (data?.Increment !== undefined) view.setUint32(18, Number(data.Increment), true);
  // 0x16: u32
  if (data?.OffsetToArray !== undefined) view.setUint32(22, Number(data.OffsetToArray), true);
  // 0x1a: u32
  if (data?.NumberOfPointers !== undefined) view.setUint32(26, Number(data.NumberOfPointers), true);
  // 0x1e: pad2
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_FIXED_REPEAT_FORMAT (size: 16)
 */
export interface NDR64_FIXED_REPEAT_FORMAT {
  /** Windows.Win32.System.Rpc.NDR64_REPEAT_FORMAT */
  RepeatFormat: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Iterations: number;
  /** u32 */
  Reserved: number;
}

export const sizeofNDR64_FIXED_REPEAT_FORMAT = 16;

export function allocNDR64_FIXED_REPEAT_FORMAT(data?: Partial<NDR64_FIXED_REPEAT_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_FIXED_REPEAT_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.RepeatFormat !== undefined) view.setBigUint64(0, data.RepeatFormat === null ? 0n : BigInt(util.toPointer(data.RepeatFormat)), true);
  // 0x08: u32
  if (data?.Iterations !== undefined) view.setUint32(8, Number(data.Iterations), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_IID_FLAGS (size: 8)
 */
export interface NDR64_IID_FLAGS {
  /** u8 */
  _bitfield: number;
}

export const sizeofNDR64_IID_FLAGS = 8;

export function allocNDR64_IID_FLAGS(data?: Partial<NDR64_IID_FLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_IID_FLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?._bitfield !== undefined) view.setUint8(0, Number(data._bitfield));
  // 0x01: pad7
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_CONSTANT_IID_FORMAT (size: 16)
 */
export interface NDR64_CONSTANT_IID_FORMAT {
  /** u8 */
  FormatCode: number;
  /** u8 */
  Flags: number;
  /** u16 */
  Reserved: number;
  /** System.Guid */
  Guid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNDR64_CONSTANT_IID_FORMAT = 16;

export function allocNDR64_CONSTANT_IID_FORMAT(data?: Partial<NDR64_CONSTANT_IID_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_CONSTANT_IID_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.FormatCode !== undefined) view.setUint8(0, Number(data.FormatCode));
  // 0x01: u8
  if (data?.Flags !== undefined) view.setUint8(1, Number(data.Flags));
  // 0x02: u16
  if (data?.Reserved !== undefined) view.setUint16(2, Number(data.Reserved), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Guid !== undefined) view.setBigUint64(8, data.Guid === null ? 0n : BigInt(util.toPointer(data.Guid)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_IID_FORMAT (size: 16)
 */
export interface NDR64_IID_FORMAT {
  /** u8 */
  FormatCode: number;
  /** u8 */
  Flags: number;
  /** u16 */
  Reserved: number;
  /** ptr */
  IIDDescriptor: Deno.PointerValue | Uint8Array | null;
}

export const sizeofNDR64_IID_FORMAT = 16;

export function allocNDR64_IID_FORMAT(data?: Partial<NDR64_IID_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_IID_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.FormatCode !== undefined) view.setUint8(0, Number(data.FormatCode));
  // 0x01: u8
  if (data?.Flags !== undefined) view.setUint8(1, Number(data.Flags));
  // 0x02: u16
  if (data?.Reserved !== undefined) view.setUint16(2, Number(data.Reserved), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.IIDDescriptor !== undefined) view.setBigUint64(8, data.IIDDescriptor === null ? 0n : BigInt(util.toPointer(data.IIDDescriptor)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_STRUCTURE_FLAGS (size: 8)
 */
export interface NDR64_STRUCTURE_FLAGS {
  /** u8 */
  _bitfield: number;
}

export const sizeofNDR64_STRUCTURE_FLAGS = 8;

export function allocNDR64_STRUCTURE_FLAGS(data?: Partial<NDR64_STRUCTURE_FLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_STRUCTURE_FLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?._bitfield !== undefined) view.setUint8(0, Number(data._bitfield));
  // 0x01: pad7
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_STRUCTURE_HEADER_FORMAT (size: 24)
 */
export interface NDR64_STRUCTURE_HEADER_FORMAT {
  /** u8 */
  FormatCode: number;
  /** u8 */
  Alignment: number;
  /** Windows.Win32.System.Rpc.NDR64_STRUCTURE_FLAGS */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  Reserve: number;
  /** u32 */
  MemorySize: number;
}

export const sizeofNDR64_STRUCTURE_HEADER_FORMAT = 24;

export function allocNDR64_STRUCTURE_HEADER_FORMAT(data?: Partial<NDR64_STRUCTURE_HEADER_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_STRUCTURE_HEADER_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.FormatCode !== undefined) view.setUint8(0, Number(data.FormatCode));
  // 0x01: u8
  if (data?.Alignment !== undefined) view.setUint8(1, Number(data.Alignment));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Flags !== undefined) view.setBigUint64(8, data.Flags === null ? 0n : BigInt(util.toPointer(data.Flags)), true);
  // 0x10: u8
  if (data?.Reserve !== undefined) view.setUint8(16, Number(data.Reserve));
  // 0x11: u32
  if (data?.MemorySize !== undefined) view.setUint32(17, Number(data.MemorySize), true);
  // 0x15: pad3
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_CONF_STRUCTURE_HEADER_FORMAT (size: 32)
 */
export interface NDR64_CONF_STRUCTURE_HEADER_FORMAT {
  /** u8 */
  FormatCode: number;
  /** u8 */
  Alignment: number;
  /** Windows.Win32.System.Rpc.NDR64_STRUCTURE_FLAGS */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  Reserve: number;
  /** u32 */
  MemorySize: number;
  /** ptr */
  ArrayDescription: Deno.PointerValue | Uint8Array | null;
}

export const sizeofNDR64_CONF_STRUCTURE_HEADER_FORMAT = 32;

export function allocNDR64_CONF_STRUCTURE_HEADER_FORMAT(data?: Partial<NDR64_CONF_STRUCTURE_HEADER_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_CONF_STRUCTURE_HEADER_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.FormatCode !== undefined) view.setUint8(0, Number(data.FormatCode));
  // 0x01: u8
  if (data?.Alignment !== undefined) view.setUint8(1, Number(data.Alignment));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Flags !== undefined) view.setBigUint64(8, data.Flags === null ? 0n : BigInt(util.toPointer(data.Flags)), true);
  // 0x10: u8
  if (data?.Reserve !== undefined) view.setUint8(16, Number(data.Reserve));
  // 0x11: u32
  if (data?.MemorySize !== undefined) view.setUint32(17, Number(data.MemorySize), true);
  // 0x15: pad3
  // 0x18: pointer
  if (data?.ArrayDescription !== undefined) view.setBigUint64(24, data.ArrayDescription === null ? 0n : BigInt(util.toPointer(data.ArrayDescription)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_BOGUS_STRUCTURE_HEADER_FORMAT (size: 48)
 */
export interface NDR64_BOGUS_STRUCTURE_HEADER_FORMAT {
  /** u8 */
  FormatCode: number;
  /** u8 */
  Alignment: number;
  /** Windows.Win32.System.Rpc.NDR64_STRUCTURE_FLAGS */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  Reserve: number;
  /** u32 */
  MemorySize: number;
  /** ptr */
  OriginalMemberLayout: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  OriginalPointerLayout: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  PointerLayout: Deno.PointerValue | Uint8Array | null;
}

export const sizeofNDR64_BOGUS_STRUCTURE_HEADER_FORMAT = 48;

export function allocNDR64_BOGUS_STRUCTURE_HEADER_FORMAT(data?: Partial<NDR64_BOGUS_STRUCTURE_HEADER_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_BOGUS_STRUCTURE_HEADER_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.FormatCode !== undefined) view.setUint8(0, Number(data.FormatCode));
  // 0x01: u8
  if (data?.Alignment !== undefined) view.setUint8(1, Number(data.Alignment));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Flags !== undefined) view.setBigUint64(8, data.Flags === null ? 0n : BigInt(util.toPointer(data.Flags)), true);
  // 0x10: u8
  if (data?.Reserve !== undefined) view.setUint8(16, Number(data.Reserve));
  // 0x11: u32
  if (data?.MemorySize !== undefined) view.setUint32(17, Number(data.MemorySize), true);
  // 0x15: pad3
  // 0x18: pointer
  if (data?.OriginalMemberLayout !== undefined) view.setBigUint64(24, data.OriginalMemberLayout === null ? 0n : BigInt(util.toPointer(data.OriginalMemberLayout)), true);
  // 0x20: pointer
  if (data?.OriginalPointerLayout !== undefined) view.setBigUint64(32, data.OriginalPointerLayout === null ? 0n : BigInt(util.toPointer(data.OriginalPointerLayout)), true);
  // 0x28: pointer
  if (data?.PointerLayout !== undefined) view.setBigUint64(40, data.PointerLayout === null ? 0n : BigInt(util.toPointer(data.PointerLayout)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_CONF_BOGUS_STRUCTURE_HEADER_FORMAT (size: 56)
 */
export interface NDR64_CONF_BOGUS_STRUCTURE_HEADER_FORMAT {
  /** u8 */
  FormatCode: number;
  /** u8 */
  Alignment: number;
  /** Windows.Win32.System.Rpc.NDR64_STRUCTURE_FLAGS */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  Dimensions: number;
  /** u32 */
  MemorySize: number;
  /** ptr */
  OriginalMemberLayout: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  OriginalPointerLayout: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  PointerLayout: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ConfArrayDescription: Deno.PointerValue | Uint8Array | null;
}

export const sizeofNDR64_CONF_BOGUS_STRUCTURE_HEADER_FORMAT = 56;

export function allocNDR64_CONF_BOGUS_STRUCTURE_HEADER_FORMAT(data?: Partial<NDR64_CONF_BOGUS_STRUCTURE_HEADER_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_CONF_BOGUS_STRUCTURE_HEADER_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.FormatCode !== undefined) view.setUint8(0, Number(data.FormatCode));
  // 0x01: u8
  if (data?.Alignment !== undefined) view.setUint8(1, Number(data.Alignment));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Flags !== undefined) view.setBigUint64(8, data.Flags === null ? 0n : BigInt(util.toPointer(data.Flags)), true);
  // 0x10: u8
  if (data?.Dimensions !== undefined) view.setUint8(16, Number(data.Dimensions));
  // 0x11: u32
  if (data?.MemorySize !== undefined) view.setUint32(17, Number(data.MemorySize), true);
  // 0x15: pad3
  // 0x18: pointer
  if (data?.OriginalMemberLayout !== undefined) view.setBigUint64(24, data.OriginalMemberLayout === null ? 0n : BigInt(util.toPointer(data.OriginalMemberLayout)), true);
  // 0x20: pointer
  if (data?.OriginalPointerLayout !== undefined) view.setBigUint64(32, data.OriginalPointerLayout === null ? 0n : BigInt(util.toPointer(data.OriginalPointerLayout)), true);
  // 0x28: pointer
  if (data?.PointerLayout !== undefined) view.setBigUint64(40, data.PointerLayout === null ? 0n : BigInt(util.toPointer(data.PointerLayout)), true);
  // 0x30: pointer
  if (data?.ConfArrayDescription !== undefined) view.setBigUint64(48, data.ConfArrayDescription === null ? 0n : BigInt(util.toPointer(data.ConfArrayDescription)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_SIMPLE_MEMBER_FORMAT (size: 8)
 */
export interface NDR64_SIMPLE_MEMBER_FORMAT {
  /** u8 */
  FormatCode: number;
  /** u8 */
  Reserved1: number;
  /** u16 */
  Reserved2: number;
  /** u32 */
  Reserved3: number;
}

export const sizeofNDR64_SIMPLE_MEMBER_FORMAT = 8;

export function allocNDR64_SIMPLE_MEMBER_FORMAT(data?: Partial<NDR64_SIMPLE_MEMBER_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_SIMPLE_MEMBER_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.FormatCode !== undefined) view.setUint8(0, Number(data.FormatCode));
  // 0x01: u8
  if (data?.Reserved1 !== undefined) view.setUint8(1, Number(data.Reserved1));
  // 0x02: u16
  if (data?.Reserved2 !== undefined) view.setUint16(2, Number(data.Reserved2), true);
  // 0x04: u32
  if (data?.Reserved3 !== undefined) view.setUint32(4, Number(data.Reserved3), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_MEMPAD_FORMAT (size: 8)
 */
export interface NDR64_MEMPAD_FORMAT {
  /** u8 */
  FormatCode: number;
  /** u8 */
  Reserve1: number;
  /** u16 */
  MemPad: number;
  /** u32 */
  Reserved2: number;
}

export const sizeofNDR64_MEMPAD_FORMAT = 8;

export function allocNDR64_MEMPAD_FORMAT(data?: Partial<NDR64_MEMPAD_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_MEMPAD_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.FormatCode !== undefined) view.setUint8(0, Number(data.FormatCode));
  // 0x01: u8
  if (data?.Reserve1 !== undefined) view.setUint8(1, Number(data.Reserve1));
  // 0x02: u16
  if (data?.MemPad !== undefined) view.setUint16(2, Number(data.MemPad), true);
  // 0x04: u32
  if (data?.Reserved2 !== undefined) view.setUint32(4, Number(data.Reserved2), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_EMBEDDED_COMPLEX_FORMAT (size: 16)
 */
export interface NDR64_EMBEDDED_COMPLEX_FORMAT {
  /** u8 */
  FormatCode: number;
  /** u8 */
  Reserve1: number;
  /** u16 */
  Reserve2: number;
  /** ptr */
  Type: Deno.PointerValue | Uint8Array | null;
}

export const sizeofNDR64_EMBEDDED_COMPLEX_FORMAT = 16;

export function allocNDR64_EMBEDDED_COMPLEX_FORMAT(data?: Partial<NDR64_EMBEDDED_COMPLEX_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_EMBEDDED_COMPLEX_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.FormatCode !== undefined) view.setUint8(0, Number(data.FormatCode));
  // 0x01: u8
  if (data?.Reserve1 !== undefined) view.setUint8(1, Number(data.Reserve1));
  // 0x02: u16
  if (data?.Reserve2 !== undefined) view.setUint16(2, Number(data.Reserve2), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Type !== undefined) view.setBigUint64(8, data.Type === null ? 0n : BigInt(util.toPointer(data.Type)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_BUFFER_ALIGN_FORMAT (size: 8)
 */
export interface NDR64_BUFFER_ALIGN_FORMAT {
  /** u8 */
  FormatCode: number;
  /** u8 */
  Alignment: number;
  /** u16 */
  Reserved: number;
  /** u32 */
  Reserved2: number;
}

export const sizeofNDR64_BUFFER_ALIGN_FORMAT = 8;

export function allocNDR64_BUFFER_ALIGN_FORMAT(data?: Partial<NDR64_BUFFER_ALIGN_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_BUFFER_ALIGN_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.FormatCode !== undefined) view.setUint8(0, Number(data.FormatCode));
  // 0x01: u8
  if (data?.Alignment !== undefined) view.setUint8(1, Number(data.Alignment));
  // 0x02: u16
  if (data?.Reserved !== undefined) view.setUint16(2, Number(data.Reserved), true);
  // 0x04: u32
  if (data?.Reserved2 !== undefined) view.setUint32(4, Number(data.Reserved2), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_SIMPLE_REGION_FORMAT (size: 8)
 */
export interface NDR64_SIMPLE_REGION_FORMAT {
  /** u8 */
  FormatCode: number;
  /** u8 */
  Alignment: number;
  /** u16 */
  RegionSize: number;
  /** u32 */
  Reserved: number;
}

export const sizeofNDR64_SIMPLE_REGION_FORMAT = 8;

export function allocNDR64_SIMPLE_REGION_FORMAT(data?: Partial<NDR64_SIMPLE_REGION_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_SIMPLE_REGION_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.FormatCode !== undefined) view.setUint8(0, Number(data.FormatCode));
  // 0x01: u8
  if (data?.Alignment !== undefined) view.setUint8(1, Number(data.Alignment));
  // 0x02: u16
  if (data?.RegionSize !== undefined) view.setUint16(2, Number(data.RegionSize), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_ENCAPSULATED_UNION (size: 16)
 */
export interface NDR64_ENCAPSULATED_UNION {
  /** u8 */
  FormatCode: number;
  /** u8 */
  Alignment: number;
  /** u8 */
  Flags: number;
  /** u8 */
  SwitchType: number;
  /** u32 */
  MemoryOffset: number;
  /** u32 */
  MemorySize: number;
  /** u32 */
  Reserved: number;
}

export const sizeofNDR64_ENCAPSULATED_UNION = 16;

export function allocNDR64_ENCAPSULATED_UNION(data?: Partial<NDR64_ENCAPSULATED_UNION>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_ENCAPSULATED_UNION);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.FormatCode !== undefined) view.setUint8(0, Number(data.FormatCode));
  // 0x01: u8
  if (data?.Alignment !== undefined) view.setUint8(1, Number(data.Alignment));
  // 0x02: u8
  if (data?.Flags !== undefined) view.setUint8(2, Number(data.Flags));
  // 0x03: u8
  if (data?.SwitchType !== undefined) view.setUint8(3, Number(data.SwitchType));
  // 0x04: u32
  if (data?.MemoryOffset !== undefined) view.setUint32(4, Number(data.MemoryOffset), true);
  // 0x08: u32
  if (data?.MemorySize !== undefined) view.setUint32(8, Number(data.MemorySize), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_NON_ENCAPSULATED_UNION (size: 24)
 */
export interface NDR64_NON_ENCAPSULATED_UNION {
  /** u8 */
  FormatCode: number;
  /** u8 */
  Alignment: number;
  /** u8 */
  Flags: number;
  /** u8 */
  SwitchType: number;
  /** u32 */
  MemorySize: number;
  /** ptr */
  Switch: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Reserved: number;
}

export const sizeofNDR64_NON_ENCAPSULATED_UNION = 24;

export function allocNDR64_NON_ENCAPSULATED_UNION(data?: Partial<NDR64_NON_ENCAPSULATED_UNION>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_NON_ENCAPSULATED_UNION);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.FormatCode !== undefined) view.setUint8(0, Number(data.FormatCode));
  // 0x01: u8
  if (data?.Alignment !== undefined) view.setUint8(1, Number(data.Alignment));
  // 0x02: u8
  if (data?.Flags !== undefined) view.setUint8(2, Number(data.Flags));
  // 0x03: u8
  if (data?.SwitchType !== undefined) view.setUint8(3, Number(data.SwitchType));
  // 0x04: u32
  if (data?.MemorySize !== undefined) view.setUint32(4, Number(data.MemorySize), true);
  // 0x08: pointer
  if (data?.Switch !== undefined) view.setBigUint64(8, data.Switch === null ? 0n : BigInt(util.toPointer(data.Switch)), true);
  // 0x10: u32
  if (data?.Reserved !== undefined) view.setUint32(16, Number(data.Reserved), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_UNION_ARM_SELECTOR (size: 8)
 */
export interface NDR64_UNION_ARM_SELECTOR {
  /** u8 */
  Reserved1: number;
  /** u8 */
  Alignment: number;
  /** u16 */
  Reserved2: number;
  /** u32 */
  Arms: number;
}

export const sizeofNDR64_UNION_ARM_SELECTOR = 8;

export function allocNDR64_UNION_ARM_SELECTOR(data?: Partial<NDR64_UNION_ARM_SELECTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_UNION_ARM_SELECTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Reserved1 !== undefined) view.setUint8(0, Number(data.Reserved1));
  // 0x01: u8
  if (data?.Alignment !== undefined) view.setUint8(1, Number(data.Alignment));
  // 0x02: u16
  if (data?.Reserved2 !== undefined) view.setUint16(2, Number(data.Reserved2), true);
  // 0x04: u32
  if (data?.Arms !== undefined) view.setUint32(4, Number(data.Arms), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_UNION_ARM (size: 24)
 */
export interface NDR64_UNION_ARM {
  /** i64 */
  CaseValue: Deno.PointerValue;
  /** ptr */
  Type: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Reserved: number;
}

export const sizeofNDR64_UNION_ARM = 24;

export function allocNDR64_UNION_ARM(data?: Partial<NDR64_UNION_ARM>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_UNION_ARM);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.CaseValue !== undefined) view.setBigInt64(0, BigInt(data.CaseValue), true);
  // 0x08: pointer
  if (data?.Type !== undefined) view.setBigUint64(8, data.Type === null ? 0n : BigInt(util.toPointer(data.Type)), true);
  // 0x10: u32
  if (data?.Reserved !== undefined) view.setUint32(16, Number(data.Reserved), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_ARRAY_FLAGS (size: 8)
 */
export interface NDR64_ARRAY_FLAGS {
  /** u8 */
  _bitfield: number;
}

export const sizeofNDR64_ARRAY_FLAGS = 8;

export function allocNDR64_ARRAY_FLAGS(data?: Partial<NDR64_ARRAY_FLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_ARRAY_FLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?._bitfield !== undefined) view.setUint8(0, Number(data._bitfield));
  // 0x01: pad7
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_ARRAY_ELEMENT_INFO (size: 16)
 */
export interface NDR64_ARRAY_ELEMENT_INFO {
  /** u32 */
  ElementMemSize: number;
  /** ptr */
  Element: Deno.PointerValue | Uint8Array | null;
}

export const sizeofNDR64_ARRAY_ELEMENT_INFO = 16;

export function allocNDR64_ARRAY_ELEMENT_INFO(data?: Partial<NDR64_ARRAY_ELEMENT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_ARRAY_ELEMENT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ElementMemSize !== undefined) view.setUint32(0, Number(data.ElementMemSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Element !== undefined) view.setBigUint64(8, data.Element === null ? 0n : BigInt(util.toPointer(data.Element)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_FIX_ARRAY_HEADER_FORMAT (size: 24)
 */
export interface NDR64_FIX_ARRAY_HEADER_FORMAT {
  /** u8 */
  FormatCode: number;
  /** u8 */
  Alignment: number;
  /** Windows.Win32.System.Rpc.NDR64_ARRAY_FLAGS */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  Reserved: number;
  /** u32 */
  TotalSize: number;
}

export const sizeofNDR64_FIX_ARRAY_HEADER_FORMAT = 24;

export function allocNDR64_FIX_ARRAY_HEADER_FORMAT(data?: Partial<NDR64_FIX_ARRAY_HEADER_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_FIX_ARRAY_HEADER_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.FormatCode !== undefined) view.setUint8(0, Number(data.FormatCode));
  // 0x01: u8
  if (data?.Alignment !== undefined) view.setUint8(1, Number(data.Alignment));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Flags !== undefined) view.setBigUint64(8, data.Flags === null ? 0n : BigInt(util.toPointer(data.Flags)), true);
  // 0x10: u8
  if (data?.Reserved !== undefined) view.setUint8(16, Number(data.Reserved));
  // 0x11: u32
  if (data?.TotalSize !== undefined) view.setUint32(17, Number(data.TotalSize), true);
  // 0x15: pad3
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_CONF_ARRAY_HEADER_FORMAT (size: 32)
 */
export interface NDR64_CONF_ARRAY_HEADER_FORMAT {
  /** u8 */
  FormatCode: number;
  /** u8 */
  Alignment: number;
  /** Windows.Win32.System.Rpc.NDR64_ARRAY_FLAGS */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  Reserved: number;
  /** u32 */
  ElementSize: number;
  /** ptr */
  ConfDescriptor: Deno.PointerValue | Uint8Array | null;
}

export const sizeofNDR64_CONF_ARRAY_HEADER_FORMAT = 32;

export function allocNDR64_CONF_ARRAY_HEADER_FORMAT(data?: Partial<NDR64_CONF_ARRAY_HEADER_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_CONF_ARRAY_HEADER_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.FormatCode !== undefined) view.setUint8(0, Number(data.FormatCode));
  // 0x01: u8
  if (data?.Alignment !== undefined) view.setUint8(1, Number(data.Alignment));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Flags !== undefined) view.setBigUint64(8, data.Flags === null ? 0n : BigInt(util.toPointer(data.Flags)), true);
  // 0x10: u8
  if (data?.Reserved !== undefined) view.setUint8(16, Number(data.Reserved));
  // 0x11: u32
  if (data?.ElementSize !== undefined) view.setUint32(17, Number(data.ElementSize), true);
  // 0x15: pad3
  // 0x18: pointer
  if (data?.ConfDescriptor !== undefined) view.setBigUint64(24, data.ConfDescriptor === null ? 0n : BigInt(util.toPointer(data.ConfDescriptor)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_CONF_VAR_ARRAY_HEADER_FORMAT (size: 40)
 */
export interface NDR64_CONF_VAR_ARRAY_HEADER_FORMAT {
  /** u8 */
  FormatCode: number;
  /** u8 */
  Alignment: number;
  /** Windows.Win32.System.Rpc.NDR64_ARRAY_FLAGS */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  Reserved: number;
  /** u32 */
  ElementSize: number;
  /** ptr */
  ConfDescriptor: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  VarDescriptor: Deno.PointerValue | Uint8Array | null;
}

export const sizeofNDR64_CONF_VAR_ARRAY_HEADER_FORMAT = 40;

export function allocNDR64_CONF_VAR_ARRAY_HEADER_FORMAT(data?: Partial<NDR64_CONF_VAR_ARRAY_HEADER_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_CONF_VAR_ARRAY_HEADER_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.FormatCode !== undefined) view.setUint8(0, Number(data.FormatCode));
  // 0x01: u8
  if (data?.Alignment !== undefined) view.setUint8(1, Number(data.Alignment));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Flags !== undefined) view.setBigUint64(8, data.Flags === null ? 0n : BigInt(util.toPointer(data.Flags)), true);
  // 0x10: u8
  if (data?.Reserved !== undefined) view.setUint8(16, Number(data.Reserved));
  // 0x11: u32
  if (data?.ElementSize !== undefined) view.setUint32(17, Number(data.ElementSize), true);
  // 0x15: pad3
  // 0x18: pointer
  if (data?.ConfDescriptor !== undefined) view.setBigUint64(24, data.ConfDescriptor === null ? 0n : BigInt(util.toPointer(data.ConfDescriptor)), true);
  // 0x20: pointer
  if (data?.VarDescriptor !== undefined) view.setBigUint64(32, data.VarDescriptor === null ? 0n : BigInt(util.toPointer(data.VarDescriptor)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_VAR_ARRAY_HEADER_FORMAT (size: 40)
 */
export interface NDR64_VAR_ARRAY_HEADER_FORMAT {
  /** u8 */
  FormatCode: number;
  /** u8 */
  Alignment: number;
  /** Windows.Win32.System.Rpc.NDR64_ARRAY_FLAGS */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  Reserved: number;
  /** u32 */
  TotalSize: number;
  /** u32 */
  ElementSize: number;
  /** ptr */
  VarDescriptor: Deno.PointerValue | Uint8Array | null;
}

export const sizeofNDR64_VAR_ARRAY_HEADER_FORMAT = 40;

export function allocNDR64_VAR_ARRAY_HEADER_FORMAT(data?: Partial<NDR64_VAR_ARRAY_HEADER_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_VAR_ARRAY_HEADER_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.FormatCode !== undefined) view.setUint8(0, Number(data.FormatCode));
  // 0x01: u8
  if (data?.Alignment !== undefined) view.setUint8(1, Number(data.Alignment));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Flags !== undefined) view.setBigUint64(8, data.Flags === null ? 0n : BigInt(util.toPointer(data.Flags)), true);
  // 0x10: u8
  if (data?.Reserved !== undefined) view.setUint8(16, Number(data.Reserved));
  // 0x11: u32
  if (data?.TotalSize !== undefined) view.setUint32(17, Number(data.TotalSize), true);
  // 0x15: u32
  if (data?.ElementSize !== undefined) view.setUint32(21, Number(data.ElementSize), true);
  // 0x19: pad7
  // 0x20: pointer
  if (data?.VarDescriptor !== undefined) view.setBigUint64(32, data.VarDescriptor === null ? 0n : BigInt(util.toPointer(data.VarDescriptor)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_BOGUS_ARRAY_HEADER_FORMAT (size: 32)
 */
export interface NDR64_BOGUS_ARRAY_HEADER_FORMAT {
  /** u8 */
  FormatCode: number;
  /** u8 */
  Alignment: number;
  /** Windows.Win32.System.Rpc.NDR64_ARRAY_FLAGS */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  NumberDims: number;
  /** u32 */
  NumberElements: number;
  /** ptr */
  Element: Deno.PointerValue | Uint8Array | null;
}

export const sizeofNDR64_BOGUS_ARRAY_HEADER_FORMAT = 32;

export function allocNDR64_BOGUS_ARRAY_HEADER_FORMAT(data?: Partial<NDR64_BOGUS_ARRAY_HEADER_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_BOGUS_ARRAY_HEADER_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.FormatCode !== undefined) view.setUint8(0, Number(data.FormatCode));
  // 0x01: u8
  if (data?.Alignment !== undefined) view.setUint8(1, Number(data.Alignment));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Flags !== undefined) view.setBigUint64(8, data.Flags === null ? 0n : BigInt(util.toPointer(data.Flags)), true);
  // 0x10: u8
  if (data?.NumberDims !== undefined) view.setUint8(16, Number(data.NumberDims));
  // 0x11: u32
  if (data?.NumberElements !== undefined) view.setUint32(17, Number(data.NumberElements), true);
  // 0x15: pad3
  // 0x18: pointer
  if (data?.Element !== undefined) view.setBigUint64(24, data.Element === null ? 0n : BigInt(util.toPointer(data.Element)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_CONF_VAR_BOGUS_ARRAY_HEADER_FORMAT (size: 32)
 */
export interface NDR64_CONF_VAR_BOGUS_ARRAY_HEADER_FORMAT {
  /** Windows.Win32.System.Rpc.NDR64_BOGUS_ARRAY_HEADER_FORMAT */
  FixedArrayFormat: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  ConfDescription: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  VarDescription: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  OffsetDescription: Deno.PointerValue | Uint8Array | null;
}

export const sizeofNDR64_CONF_VAR_BOGUS_ARRAY_HEADER_FORMAT = 32;

export function allocNDR64_CONF_VAR_BOGUS_ARRAY_HEADER_FORMAT(data?: Partial<NDR64_CONF_VAR_BOGUS_ARRAY_HEADER_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_CONF_VAR_BOGUS_ARRAY_HEADER_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.FixedArrayFormat !== undefined) view.setBigUint64(0, data.FixedArrayFormat === null ? 0n : BigInt(util.toPointer(data.FixedArrayFormat)), true);
  // 0x08: pointer
  if (data?.ConfDescription !== undefined) view.setBigUint64(8, data.ConfDescription === null ? 0n : BigInt(util.toPointer(data.ConfDescription)), true);
  // 0x10: pointer
  if (data?.VarDescription !== undefined) view.setBigUint64(16, data.VarDescription === null ? 0n : BigInt(util.toPointer(data.VarDescription)), true);
  // 0x18: pointer
  if (data?.OffsetDescription !== undefined) view.setBigUint64(24, data.OffsetDescription === null ? 0n : BigInt(util.toPointer(data.OffsetDescription)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_STRING_FLAGS (size: 8)
 */
export interface NDR64_STRING_FLAGS {
  /** u8 */
  _bitfield: number;
}

export const sizeofNDR64_STRING_FLAGS = 8;

export function allocNDR64_STRING_FLAGS(data?: Partial<NDR64_STRING_FLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_STRING_FLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?._bitfield !== undefined) view.setUint8(0, Number(data._bitfield));
  // 0x01: pad7
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_STRING_HEADER_FORMAT (size: 24)
 */
export interface NDR64_STRING_HEADER_FORMAT {
  /** u8 */
  FormatCode: number;
  /** Windows.Win32.System.Rpc.NDR64_STRING_FLAGS */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  ElementSize: number;
}

export const sizeofNDR64_STRING_HEADER_FORMAT = 24;

export function allocNDR64_STRING_HEADER_FORMAT(data?: Partial<NDR64_STRING_HEADER_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_STRING_HEADER_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.FormatCode !== undefined) view.setUint8(0, Number(data.FormatCode));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.Flags !== undefined) view.setBigUint64(8, data.Flags === null ? 0n : BigInt(util.toPointer(data.Flags)), true);
  // 0x10: u16
  if (data?.ElementSize !== undefined) view.setUint16(16, Number(data.ElementSize), true);
  // 0x12: pad6
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_NON_CONFORMANT_STRING_FORMAT (size: 16)
 */
export interface NDR64_NON_CONFORMANT_STRING_FORMAT {
  /** Windows.Win32.System.Rpc.NDR64_STRING_HEADER_FORMAT */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  TotalSize: number;
}

export const sizeofNDR64_NON_CONFORMANT_STRING_FORMAT = 16;

export function allocNDR64_NON_CONFORMANT_STRING_FORMAT(data?: Partial<NDR64_NON_CONFORMANT_STRING_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_NON_CONFORMANT_STRING_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.TotalSize !== undefined) view.setUint32(8, Number(data.TotalSize), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_RANGED_STRING_FORMAT (size: 32)
 */
export interface NDR64_RANGED_STRING_FORMAT {
  /** Windows.Win32.System.Rpc.NDR64_STRING_HEADER_FORMAT */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Reserved: number;
  /** u64 */
  Min: Deno.PointerValue;
  /** u64 */
  Max: Deno.PointerValue;
}

export const sizeofNDR64_RANGED_STRING_FORMAT = 32;

export function allocNDR64_RANGED_STRING_FORMAT(data?: Partial<NDR64_RANGED_STRING_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_RANGED_STRING_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.Reserved !== undefined) view.setUint32(8, Number(data.Reserved), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.Min !== undefined) view.setBigUint64(16, BigInt(data.Min), true);
  // 0x18: u64
  if (data?.Max !== undefined) view.setBigUint64(24, BigInt(data.Max), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_CONFORMANT_STRING_FORMAT (size: 8)
 */
export interface NDR64_CONFORMANT_STRING_FORMAT {
  /** Windows.Win32.System.Rpc.NDR64_STRING_HEADER_FORMAT */
  Header: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNDR64_CONFORMANT_STRING_FORMAT = 8;

export function allocNDR64_CONFORMANT_STRING_FORMAT(data?: Partial<NDR64_CONFORMANT_STRING_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_CONFORMANT_STRING_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_SIZED_CONFORMANT_STRING_FORMAT (size: 16)
 */
export interface NDR64_SIZED_CONFORMANT_STRING_FORMAT {
  /** Windows.Win32.System.Rpc.NDR64_STRING_HEADER_FORMAT */
  Header: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  SizeDescription: Deno.PointerValue | Uint8Array | null;
}

export const sizeofNDR64_SIZED_CONFORMANT_STRING_FORMAT = 16;

export function allocNDR64_SIZED_CONFORMANT_STRING_FORMAT(data?: Partial<NDR64_SIZED_CONFORMANT_STRING_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_SIZED_CONFORMANT_STRING_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: pointer
  if (data?.SizeDescription !== undefined) view.setBigUint64(8, data.SizeDescription === null ? 0n : BigInt(util.toPointer(data.SizeDescription)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_EXPR_OPERATOR (size: 8)
 */
export interface NDR64_EXPR_OPERATOR {
  /** u8 */
  ExprType: number;
  /** u8 */
  Operator: number;
  /** u8 */
  CastType: number;
  /** u8 */
  Reserved: number;
}

export const sizeofNDR64_EXPR_OPERATOR = 8;

export function allocNDR64_EXPR_OPERATOR(data?: Partial<NDR64_EXPR_OPERATOR>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_EXPR_OPERATOR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.ExprType !== undefined) view.setUint8(0, Number(data.ExprType));
  // 0x01: u8
  if (data?.Operator !== undefined) view.setUint8(1, Number(data.Operator));
  // 0x02: u8
  if (data?.CastType !== undefined) view.setUint8(2, Number(data.CastType));
  // 0x03: u8
  if (data?.Reserved !== undefined) view.setUint8(3, Number(data.Reserved));
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_EXPR_CONST32 (size: 8)
 */
export interface NDR64_EXPR_CONST32 {
  /** u8 */
  ExprType: number;
  /** u8 */
  Reserved: number;
  /** u16 */
  Reserved1: number;
  /** u32 */
  ConstValue: number;
}

export const sizeofNDR64_EXPR_CONST32 = 8;

export function allocNDR64_EXPR_CONST32(data?: Partial<NDR64_EXPR_CONST32>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_EXPR_CONST32);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.ExprType !== undefined) view.setUint8(0, Number(data.ExprType));
  // 0x01: u8
  if (data?.Reserved !== undefined) view.setUint8(1, Number(data.Reserved));
  // 0x02: u16
  if (data?.Reserved1 !== undefined) view.setUint16(2, Number(data.Reserved1), true);
  // 0x04: u32
  if (data?.ConstValue !== undefined) view.setUint32(4, Number(data.ConstValue), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_EXPR_CONST64 (size: 16)
 */
export interface NDR64_EXPR_CONST64 {
  /** u8 */
  ExprType: number;
  /** u8 */
  Reserved: number;
  /** u16 */
  Reserved1: number;
  /** i64 */
  ConstValue: Deno.PointerValue;
}

export const sizeofNDR64_EXPR_CONST64 = 16;

export function allocNDR64_EXPR_CONST64(data?: Partial<NDR64_EXPR_CONST64>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_EXPR_CONST64);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.ExprType !== undefined) view.setUint8(0, Number(data.ExprType));
  // 0x01: u8
  if (data?.Reserved !== undefined) view.setUint8(1, Number(data.Reserved));
  // 0x02: u16
  if (data?.Reserved1 !== undefined) view.setUint16(2, Number(data.Reserved1), true);
  // 0x04: pad4
  // 0x08: i64
  if (data?.ConstValue !== undefined) view.setBigInt64(8, BigInt(data.ConstValue), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_EXPR_VAR (size: 8)
 */
export interface NDR64_EXPR_VAR {
  /** u8 */
  ExprType: number;
  /** u8 */
  VarType: number;
  /** u16 */
  Reserved: number;
  /** u32 */
  Offset: number;
}

export const sizeofNDR64_EXPR_VAR = 8;

export function allocNDR64_EXPR_VAR(data?: Partial<NDR64_EXPR_VAR>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_EXPR_VAR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.ExprType !== undefined) view.setUint8(0, Number(data.ExprType));
  // 0x01: u8
  if (data?.VarType !== undefined) view.setUint8(1, Number(data.VarType));
  // 0x02: u16
  if (data?.Reserved !== undefined) view.setUint16(2, Number(data.Reserved), true);
  // 0x04: u32
  if (data?.Offset !== undefined) view.setUint32(4, Number(data.Offset), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_EXPR_NOOP (size: 8)
 */
export interface NDR64_EXPR_NOOP {
  /** u8 */
  ExprType: number;
  /** u8 */
  Size: number;
  /** u16 */
  Reserved: number;
}

export const sizeofNDR64_EXPR_NOOP = 8;

export function allocNDR64_EXPR_NOOP(data?: Partial<NDR64_EXPR_NOOP>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_EXPR_NOOP);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.ExprType !== undefined) view.setUint8(0, Number(data.ExprType));
  // 0x01: u8
  if (data?.Size !== undefined) view.setUint8(1, Number(data.Size));
  // 0x02: u16
  if (data?.Reserved !== undefined) view.setUint16(2, Number(data.Reserved), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_TRANSMIT_AS_FLAGS (size: 8)
 */
export interface NDR64_TRANSMIT_AS_FLAGS {
  /** u8 */
  _bitfield: number;
}

export const sizeofNDR64_TRANSMIT_AS_FLAGS = 8;

export function allocNDR64_TRANSMIT_AS_FLAGS(data?: Partial<NDR64_TRANSMIT_AS_FLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_TRANSMIT_AS_FLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?._bitfield !== undefined) view.setUint8(0, Number(data._bitfield));
  // 0x01: pad7
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_TRANSMIT_AS_FORMAT (size: 24)
 */
export interface NDR64_TRANSMIT_AS_FORMAT {
  /** u8 */
  FormatCode: number;
  /** u8 */
  Flags: number;
  /** u16 */
  RoutineIndex: number;
  /** u16 */
  TransmittedTypeWireAlignment: number;
  /** u16 */
  MemoryAlignment: number;
  /** u32 */
  PresentedTypeMemorySize: number;
  /** u32 */
  TransmittedTypeBufferSize: number;
  /** ptr */
  TransmittedType: Deno.PointerValue | Uint8Array | null;
}

export const sizeofNDR64_TRANSMIT_AS_FORMAT = 24;

export function allocNDR64_TRANSMIT_AS_FORMAT(data?: Partial<NDR64_TRANSMIT_AS_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_TRANSMIT_AS_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.FormatCode !== undefined) view.setUint8(0, Number(data.FormatCode));
  // 0x01: u8
  if (data?.Flags !== undefined) view.setUint8(1, Number(data.Flags));
  // 0x02: u16
  if (data?.RoutineIndex !== undefined) view.setUint16(2, Number(data.RoutineIndex), true);
  // 0x04: u16
  if (data?.TransmittedTypeWireAlignment !== undefined) view.setUint16(4, Number(data.TransmittedTypeWireAlignment), true);
  // 0x06: u16
  if (data?.MemoryAlignment !== undefined) view.setUint16(6, Number(data.MemoryAlignment), true);
  // 0x08: u32
  if (data?.PresentedTypeMemorySize !== undefined) view.setUint32(8, Number(data.PresentedTypeMemorySize), true);
  // 0x0c: u32
  if (data?.TransmittedTypeBufferSize !== undefined) view.setUint32(12, Number(data.TransmittedTypeBufferSize), true);
  // 0x10: pointer
  if (data?.TransmittedType !== undefined) view.setBigUint64(16, data.TransmittedType === null ? 0n : BigInt(util.toPointer(data.TransmittedType)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_USER_MARSHAL_FLAGS (size: 8)
 */
export interface NDR64_USER_MARSHAL_FLAGS {
  /** u8 */
  _bitfield: number;
}

export const sizeofNDR64_USER_MARSHAL_FLAGS = 8;

export function allocNDR64_USER_MARSHAL_FLAGS(data?: Partial<NDR64_USER_MARSHAL_FLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_USER_MARSHAL_FLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?._bitfield !== undefined) view.setUint8(0, Number(data._bitfield));
  // 0x01: pad7
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_USER_MARSHAL_FORMAT (size: 24)
 */
export interface NDR64_USER_MARSHAL_FORMAT {
  /** u8 */
  FormatCode: number;
  /** u8 */
  Flags: number;
  /** u16 */
  RoutineIndex: number;
  /** u16 */
  TransmittedTypeWireAlignment: number;
  /** u16 */
  MemoryAlignment: number;
  /** u32 */
  UserTypeMemorySize: number;
  /** u32 */
  TransmittedTypeBufferSize: number;
  /** ptr */
  TransmittedType: Deno.PointerValue | Uint8Array | null;
}

export const sizeofNDR64_USER_MARSHAL_FORMAT = 24;

export function allocNDR64_USER_MARSHAL_FORMAT(data?: Partial<NDR64_USER_MARSHAL_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_USER_MARSHAL_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.FormatCode !== undefined) view.setUint8(0, Number(data.FormatCode));
  // 0x01: u8
  if (data?.Flags !== undefined) view.setUint8(1, Number(data.Flags));
  // 0x02: u16
  if (data?.RoutineIndex !== undefined) view.setUint16(2, Number(data.RoutineIndex), true);
  // 0x04: u16
  if (data?.TransmittedTypeWireAlignment !== undefined) view.setUint16(4, Number(data.TransmittedTypeWireAlignment), true);
  // 0x06: u16
  if (data?.MemoryAlignment !== undefined) view.setUint16(6, Number(data.MemoryAlignment), true);
  // 0x08: u32
  if (data?.UserTypeMemorySize !== undefined) view.setUint32(8, Number(data.UserTypeMemorySize), true);
  // 0x0c: u32
  if (data?.TransmittedTypeBufferSize !== undefined) view.setUint32(12, Number(data.TransmittedTypeBufferSize), true);
  // 0x10: pointer
  if (data?.TransmittedType !== undefined) view.setBigUint64(16, data.TransmittedType === null ? 0n : BigInt(util.toPointer(data.TransmittedType)), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_PIPE_FLAGS (size: 8)
 */
export interface NDR64_PIPE_FLAGS {
  /** u8 */
  _bitfield: number;
}

export const sizeofNDR64_PIPE_FLAGS = 8;

export function allocNDR64_PIPE_FLAGS(data?: Partial<NDR64_PIPE_FLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_PIPE_FLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?._bitfield !== undefined) view.setUint8(0, Number(data._bitfield));
  // 0x01: pad7
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_PIPE_FORMAT (size: 24)
 */
export interface NDR64_PIPE_FORMAT {
  /** u8 */
  FormatCode: number;
  /** u8 */
  Flags: number;
  /** u8 */
  Alignment: number;
  /** u8 */
  Reserved: number;
  /** ptr */
  Type: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  MemorySize: number;
  /** u32 */
  BufferSize: number;
}

export const sizeofNDR64_PIPE_FORMAT = 24;

export function allocNDR64_PIPE_FORMAT(data?: Partial<NDR64_PIPE_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_PIPE_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.FormatCode !== undefined) view.setUint8(0, Number(data.FormatCode));
  // 0x01: u8
  if (data?.Flags !== undefined) view.setUint8(1, Number(data.Flags));
  // 0x02: u8
  if (data?.Alignment !== undefined) view.setUint8(2, Number(data.Alignment));
  // 0x03: u8
  if (data?.Reserved !== undefined) view.setUint8(3, Number(data.Reserved));
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Type !== undefined) view.setBigUint64(8, data.Type === null ? 0n : BigInt(util.toPointer(data.Type)), true);
  // 0x10: u32
  if (data?.MemorySize !== undefined) view.setUint32(16, Number(data.MemorySize), true);
  // 0x14: u32
  if (data?.BufferSize !== undefined) view.setUint32(20, Number(data.BufferSize), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_RANGE_PIPE_FORMAT (size: 32)
 */
export interface NDR64_RANGE_PIPE_FORMAT {
  /** u8 */
  FormatCode: number;
  /** u8 */
  Flags: number;
  /** u8 */
  Alignment: number;
  /** u8 */
  Reserved: number;
  /** ptr */
  Type: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  MemorySize: number;
  /** u32 */
  BufferSize: number;
  /** u32 */
  MinValue: number;
  /** u32 */
  MaxValue: number;
}

export const sizeofNDR64_RANGE_PIPE_FORMAT = 32;

export function allocNDR64_RANGE_PIPE_FORMAT(data?: Partial<NDR64_RANGE_PIPE_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_RANGE_PIPE_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.FormatCode !== undefined) view.setUint8(0, Number(data.FormatCode));
  // 0x01: u8
  if (data?.Flags !== undefined) view.setUint8(1, Number(data.Flags));
  // 0x02: u8
  if (data?.Alignment !== undefined) view.setUint8(2, Number(data.Alignment));
  // 0x03: u8
  if (data?.Reserved !== undefined) view.setUint8(3, Number(data.Reserved));
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Type !== undefined) view.setBigUint64(8, data.Type === null ? 0n : BigInt(util.toPointer(data.Type)), true);
  // 0x10: u32
  if (data?.MemorySize !== undefined) view.setUint32(16, Number(data.MemorySize), true);
  // 0x14: u32
  if (data?.BufferSize !== undefined) view.setUint32(20, Number(data.BufferSize), true);
  // 0x18: u32
  if (data?.MinValue !== undefined) view.setUint32(24, Number(data.MinValue), true);
  // 0x1c: u32
  if (data?.MaxValue !== undefined) view.setUint32(28, Number(data.MaxValue), true);
  return buf;
}

/**
 * Windows.Win32.System.Rpc.NDR64_TYPE_STRICT_CONTEXT_HANDLE (size: 24)
 */
export interface NDR64_TYPE_STRICT_CONTEXT_HANDLE {
  /** u8 */
  FormatCode: number;
  /** u8 */
  RealFormatCode: number;
  /** u16 */
  Reserved: number;
  /** ptr */
  Type: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  CtxtFlags: number;
  /** u32 */
  CtxtID: number;
}

export const sizeofNDR64_TYPE_STRICT_CONTEXT_HANDLE = 24;

export function allocNDR64_TYPE_STRICT_CONTEXT_HANDLE(data?: Partial<NDR64_TYPE_STRICT_CONTEXT_HANDLE>): Uint8Array {
  const buf = new Uint8Array(sizeofNDR64_TYPE_STRICT_CONTEXT_HANDLE);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.FormatCode !== undefined) view.setUint8(0, Number(data.FormatCode));
  // 0x01: u8
  if (data?.RealFormatCode !== undefined) view.setUint8(1, Number(data.RealFormatCode));
  // 0x02: u16
  if (data?.Reserved !== undefined) view.setUint16(2, Number(data.Reserved), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Type !== undefined) view.setBigUint64(8, data.Type === null ? 0n : BigInt(util.toPointer(data.Type)), true);
  // 0x10: u32
  if (data?.CtxtFlags !== undefined) view.setUint32(16, Number(data.CtxtFlags), true);
  // 0x14: u32
  if (data?.CtxtID !== undefined) view.setUint32(20, Number(data.CtxtID), true);
  return buf;
}

export type HRESULT = number;

/**
 * Windows.Win32.Foundation.LUID (size: 8)
 */
export interface LUID {
  /** u32 */
  LowPart: number;
  /** i32 */
  HighPart: number;
}

export const sizeofLUID = 8;

export function allocLUID(data?: Partial<LUID>): Uint8Array {
  const buf = new Uint8Array(sizeofLUID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.LowPart !== undefined) view.setUint32(0, Number(data.LowPart), true);
  // 0x04: i32
  if (data?.HighPart !== undefined) view.setInt32(4, Number(data.HighPart), true);
  return buf;
}

// Native Libraries

try {
  var libRPCRT4_dll = Deno.dlopen("RPCRT4.dll", {
    IUnknown_QueryInterface_Proxy: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    IUnknown_AddRef_Proxy: {
      parameters: ["pointer"],
      result: "u32",
    },
    IUnknown_Release_Proxy: {
      parameters: ["pointer"],
      result: "u32",
    },
    RpcBindingCopy: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    RpcBindingFree: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcBindingSetOption: {
      parameters: ["pointer", "u32", "usize"],
      result: "i32",
    },
    RpcBindingInqOption: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    RpcBindingFromStringBindingA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    RpcBindingFromStringBindingW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    RpcSsGetContextBinding: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    RpcBindingInqMaxCalls: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    RpcBindingInqObject: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    RpcBindingReset: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcBindingSetObject: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    RpcMgmtInqDefaultProtectLevel: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    RpcBindingToStringBindingA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    RpcBindingToStringBindingW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    RpcBindingVectorFree: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcStringBindingComposeA: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcStringBindingComposeW: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcStringBindingParseA: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcStringBindingParseW: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcStringFreeA: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcStringFreeW: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcIfInqId: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    RpcNetworkIsProtseqValidA: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcNetworkIsProtseqValidW: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcMgmtInqComTimeout: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    RpcMgmtSetComTimeout: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    RpcMgmtSetCancelTimeout: {
      parameters: ["i32"],
      result: "i32",
    },
    RpcNetworkInqProtseqsA: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcNetworkInqProtseqsW: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcObjectInqType: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    RpcObjectSetInqFn: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcObjectSetType: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    RpcProtseqVectorFreeA: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcProtseqVectorFreeW: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcServerInqBindings: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcServerInqBindingsEx: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    RpcServerInqIf: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcServerListen: {
      parameters: ["u32", "u32", "u32"],
      result: "i32",
    },
    RpcServerRegisterIf: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcServerRegisterIfEx: {
      parameters: ["pointer", "pointer", "pointer", "u32", "u32", "pointer"],
      result: "i32",
    },
    RpcServerRegisterIf2: {
      parameters: ["pointer", "pointer", "pointer", "u32", "u32", "u32", "pointer"],
      result: "i32",
    },
    RpcServerRegisterIf3: {
      parameters: ["pointer", "pointer", "pointer", "u32", "u32", "u32", "pointer", "pointer"],
      result: "i32",
    },
    RpcServerUnregisterIf: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    RpcServerUnregisterIfEx: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i32",
    },
    RpcServerUseAllProtseqs: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    RpcServerUseAllProtseqsEx: {
      parameters: ["u32", "pointer", "pointer"],
      result: "i32",
    },
    RpcServerUseAllProtseqsIf: {
      parameters: ["u32", "pointer", "pointer"],
      result: "i32",
    },
    RpcServerUseAllProtseqsIfEx: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcServerUseProtseqA: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    RpcServerUseProtseqExA: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    RpcServerUseProtseqW: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    RpcServerUseProtseqExW: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    RpcServerUseProtseqEpA: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    RpcServerUseProtseqEpExA: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcServerUseProtseqEpW: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    RpcServerUseProtseqEpExW: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcServerUseProtseqIfA: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    RpcServerUseProtseqIfExA: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcServerUseProtseqIfW: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    RpcServerUseProtseqIfExW: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcServerYield: {
      parameters: [],
      result: "void",
    },
    RpcMgmtStatsVectorFree: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcMgmtInqStats: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    RpcMgmtIsServerListening: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcMgmtStopServerListening: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcMgmtWaitServerListen: {
      parameters: [],
      result: "i32",
    },
    RpcMgmtSetServerStackSize: {
      parameters: ["u32"],
      result: "i32",
    },
    RpcSsDontSerializeContext: {
      parameters: [],
      result: "void",
    },
    RpcMgmtEnableIdleCleanup: {
      parameters: [],
      result: "i32",
    },
    RpcMgmtInqIfIds: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    RpcMgmtInqServerPrincNameA: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    RpcMgmtInqServerPrincNameW: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    RpcServerInqDefaultPrincNameA: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    RpcServerInqDefaultPrincNameW: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    RpcEpResolveBinding: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    RpcNsBindingInqEntryNameA: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    RpcNsBindingInqEntryNameW: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    RpcBindingCreateA: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcBindingCreateW: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcServerInqBindingHandle: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcImpersonateClient: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcImpersonateClient2: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcRevertToSelfEx: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcRevertToSelf: {
      parameters: [],
      result: "i32",
    },
    RpcImpersonateClientContainer: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcRevertContainerImpersonation: {
      parameters: [],
      result: "i32",
    },
    RpcBindingInqAuthClientA: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcBindingInqAuthClientW: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcBindingInqAuthClientExA: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    RpcBindingInqAuthClientExW: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    RpcBindingInqAuthInfoA: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcBindingInqAuthInfoW: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcBindingSetAuthInfoA: {
      parameters: ["pointer", "pointer", "u32", "u32", "pointer", "u32"],
      result: "i32",
    },
    RpcBindingSetAuthInfoExA: {
      parameters: ["pointer", "pointer", "u32", "u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    RpcBindingSetAuthInfoW: {
      parameters: ["pointer", "pointer", "u32", "u32", "pointer", "u32"],
      result: "i32",
    },
    RpcBindingSetAuthInfoExW: {
      parameters: ["pointer", "pointer", "u32", "u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    RpcBindingInqAuthInfoExA: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    RpcBindingInqAuthInfoExW: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    RpcServerCompleteSecurityCallback: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    RpcServerRegisterAuthInfoA: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    RpcServerRegisterAuthInfoW: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    RpcBindingServerFromClient: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    RpcRaiseException: {
      parameters: ["i32"],
      result: "void",
    },
    RpcTestCancel: {
      parameters: [],
      result: "i32",
    },
    RpcServerTestCancel: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcCancelThread: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcCancelThreadEx: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    UuidCreate: {
      parameters: ["pointer"],
      result: "i32",
    },
    UuidCreateSequential: {
      parameters: ["pointer"],
      result: "i32",
    },
    UuidToStringA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    UuidFromStringA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    UuidToStringW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    UuidFromStringW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    UuidCompare: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    UuidCreateNil: {
      parameters: ["pointer"],
      result: "i32",
    },
    UuidEqual: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    UuidHash: {
      parameters: ["pointer", "pointer"],
      result: "u16",
    },
    UuidIsNil: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    RpcEpRegisterNoReplaceA: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcEpRegisterNoReplaceW: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcEpRegisterA: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcEpRegisterW: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcEpUnregister: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    DceErrorInqTextA: {
      parameters: ["i32", "pointer"],
      result: "i32",
    },
    DceErrorInqTextW: {
      parameters: ["i32", "pointer"],
      result: "i32",
    },
    RpcMgmtEpEltInqBegin: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    RpcMgmtEpEltInqDone: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcMgmtEpEltInqNextA: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcMgmtEpEltInqNextW: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcMgmtEpUnregister: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcMgmtSetAuthorizationFn: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcExceptionFilter: {
      parameters: ["u32"],
      result: "i32",
    },
    RpcServerInterfaceGroupCreateW: {
      parameters: ["pointer", "u32", "pointer", "u32", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcServerInterfaceGroupCreateA: {
      parameters: ["pointer", "u32", "pointer", "u32", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcServerInterfaceGroupClose: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcServerInterfaceGroupActivate: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcServerInterfaceGroupDeactivate: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    RpcServerInterfaceGroupInqBindings: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    I_RpcNegotiateTransferSyntax: {
      parameters: ["pointer"],
      result: "i32",
    },
    I_RpcGetBuffer: {
      parameters: ["pointer"],
      result: "i32",
    },
    I_RpcGetBufferWithObject: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    I_RpcSendReceive: {
      parameters: ["pointer"],
      result: "i32",
    },
    I_RpcFreeBuffer: {
      parameters: ["pointer"],
      result: "i32",
    },
    I_RpcSend: {
      parameters: ["pointer"],
      result: "i32",
    },
    I_RpcReceive: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    I_RpcFreePipeBuffer: {
      parameters: ["pointer"],
      result: "i32",
    },
    I_RpcReallocPipeBuffer: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    I_RpcRequestMutex: {
      parameters: ["pointer"],
      result: "void",
    },
    I_RpcClearMutex: {
      parameters: ["pointer"],
      result: "void",
    },
    I_RpcDeleteMutex: {
      parameters: ["pointer"],
      result: "void",
    },
    I_RpcAllocate: {
      parameters: ["u32"],
      result: "pointer",
    },
    I_RpcFree: {
      parameters: ["pointer"],
      result: "void",
    },
    I_RpcPauseExecution: {
      parameters: ["u32"],
      result: "void",
    },
    I_RpcGetExtendedError: {
      parameters: [],
      result: "i32",
    },
    I_RpcSystemHandleTypeSpecificWork: {
      parameters: ["pointer", "u8", "u8", "i32"],
      result: "i32",
    },
    I_RpcGetCurrentCallHandle: {
      parameters: [],
      result: "pointer",
    },
    I_RpcNsInterfaceExported: {
      parameters: ["u32", "pointer", "pointer"],
      result: "i32",
    },
    I_RpcNsInterfaceUnexported: {
      parameters: ["u32", "pointer", "pointer"],
      result: "i32",
    },
    I_RpcBindingToStaticStringBindingW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    I_RpcBindingInqSecurityContext: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    I_RpcBindingInqSecurityContextKeyInfo: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    I_RpcBindingInqWireIdForSnego: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    I_RpcBindingInqMarshalledTargetInfo: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    I_RpcBindingInqLocalClientPID: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    I_RpcBindingHandleToAsyncHandle: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    I_RpcNsBindingSetEntryNameW: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    I_RpcNsBindingSetEntryNameA: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    I_RpcServerUseProtseqEp2A: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    I_RpcServerUseProtseqEp2W: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    I_RpcServerUseProtseq2W: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    I_RpcServerUseProtseq2A: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    I_RpcServerStartService: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    I_RpcBindingInqDynamicEndpointW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    I_RpcBindingInqDynamicEndpointA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    I_RpcServerCheckClientRestriction: {
      parameters: ["pointer"],
      result: "i32",
    },
    I_RpcBindingInqTransportType: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    I_RpcIfInqTransferSyntaxes: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    I_UuidCreate: {
      parameters: ["pointer"],
      result: "i32",
    },
    I_RpcBindingCopy: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    I_RpcBindingIsClientLocal: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    I_RpcBindingCreateNP: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    I_RpcSsDontSerializeContext: {
      parameters: [],
      result: "void",
    },
    I_RpcServerRegisterForwardFunction: {
      parameters: ["pointer"],
      result: "i32",
    },
    I_RpcServerInqAddressChangeFn: {
      parameters: [],
      result: "pointer",
    },
    I_RpcServerSetAddressChangeFn: {
      parameters: ["pointer"],
      result: "i32",
    },
    I_RpcServerInqLocalConnAddress: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    I_RpcServerInqRemoteConnAddress: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    I_RpcSessionStrictContextHandle: {
      parameters: [],
      result: "void",
    },
    I_RpcTurnOnEEInfoPropagation: {
      parameters: [],
      result: "i32",
    },
    I_RpcServerInqTransportType: {
      parameters: ["pointer"],
      result: "i32",
    },
    I_RpcMapWin32Status: {
      parameters: ["i32"],
      result: "i32",
    },
    I_RpcRecordCalloutFailure: {
      parameters: ["i32", "pointer", "pointer"],
      result: "void",
    },
    I_RpcMgmtEnableDedicatedThreadPool: {
      parameters: [],
      result: "i32",
    },
    I_RpcGetDefaultSD: {
      parameters: ["pointer"],
      result: "i32",
    },
    I_RpcOpenClientProcess: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    I_RpcBindingIsServerLocal: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    I_RpcBindingSetPrivateOption: {
      parameters: ["pointer", "u32", "usize"],
      result: "i32",
    },
    I_RpcServerSubscribeForDisconnectNotification: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    I_RpcServerGetAssociationID: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    I_RpcServerDisableExceptionFilter: {
      parameters: [],
      result: "i32",
    },
    I_RpcServerSubscribeForDisconnectNotification2: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    I_RpcServerUnsubscribeForDisconnectNotification: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    RpcAsyncRegisterInfo: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcAsyncInitializeHandle: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    RpcAsyncGetCallStatus: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcAsyncCompleteCall: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    RpcAsyncAbortCall: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    RpcAsyncCancelCall: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    RpcErrorStartEnumeration: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcErrorGetNextRecord: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    RpcErrorEndEnumeration: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcErrorResetEnumeration: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcErrorGetNumberOfRecords: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    RpcErrorSaveErrorInfo: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcErrorLoadErrorInfo: {
      parameters: ["pointer", "usize", "pointer"],
      result: "i32",
    },
    RpcErrorAddRecord: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcErrorClearInformation: {
      parameters: [],
      result: "void",
    },
    RpcGetAuthorizationContextForClient: {
      parameters: ["pointer", "i32", "pointer", "pointer", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    RpcFreeAuthorizationContext: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcSsContextLockExclusive: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    RpcSsContextLockShared: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    RpcServerInqCallAttributesW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    RpcServerInqCallAttributesA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    RpcServerSubscribeForNotification: {
      parameters: ["pointer", "i32", "i32", "pointer"],
      result: "i32",
    },
    RpcServerUnsubscribeForNotification: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    RpcBindingBind: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcBindingUnbind: {
      parameters: ["pointer"],
      result: "i32",
    },
    I_RpcAsyncSetHandle: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    I_RpcAsyncAbortCall: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    I_RpcExceptionFilter: {
      parameters: ["u32"],
      result: "i32",
    },
    I_RpcBindingInqClientTokenAttributes: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    NDRCContextBinding: {
      parameters: ["isize"],
      result: "pointer",
    },
    NDRCContextMarshall: {
      parameters: ["isize", "pointer"],
      result: "void",
    },
    NDRCContextUnmarshall: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "void",
    },
    NDRSContextMarshall: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NDRSContextUnmarshall: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    NDRSContextMarshallEx: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    NDRSContextMarshall2: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "u32"],
      result: "void",
    },
    NDRSContextUnmarshallEx: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
    },
    NDRSContextUnmarshall2: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32"],
      result: "pointer",
    },
    RpcSsDestroyClientContext: {
      parameters: ["pointer"],
      result: "void",
    },
    NdrSimpleTypeMarshall: {
      parameters: ["pointer", "pointer", "u8"],
      result: "void",
    },
    NdrPointerMarshall: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    NdrSimpleStructMarshall: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    NdrConformantStructMarshall: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    NdrConformantVaryingStructMarshall: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    NdrComplexStructMarshall: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    NdrFixedArrayMarshall: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    NdrConformantArrayMarshall: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    NdrConformantVaryingArrayMarshall: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    NdrVaryingArrayMarshall: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    NdrComplexArrayMarshall: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    NdrNonConformantStringMarshall: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    NdrConformantStringMarshall: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    NdrEncapsulatedUnionMarshall: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    NdrNonEncapsulatedUnionMarshall: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    NdrByteCountPointerMarshall: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    NdrXmitOrRepAsMarshall: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    NdrUserMarshalMarshall: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    NdrInterfacePointerMarshall: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    NdrClientContextMarshall: {
      parameters: ["pointer", "isize", "i32"],
      result: "void",
    },
    NdrServerContextMarshall: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrServerContextNewMarshall: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrSimpleTypeUnmarshall: {
      parameters: ["pointer", "pointer", "u8"],
      result: "void",
    },
    NdrRangeUnmarshall: {
      parameters: ["pointer", "pointer", "pointer", "u8"],
      result: "pointer",
    },
    NdrCorrelationInitialize: {
      parameters: ["pointer", "pointer", "u32", "u32"],
      result: "void",
    },
    NdrCorrelationPass: {
      parameters: ["pointer"],
      result: "void",
    },
    NdrCorrelationFree: {
      parameters: ["pointer"],
      result: "void",
    },
    NdrPointerUnmarshall: {
      parameters: ["pointer", "pointer", "pointer", "u8"],
      result: "pointer",
    },
    NdrSimpleStructUnmarshall: {
      parameters: ["pointer", "pointer", "pointer", "u8"],
      result: "pointer",
    },
    NdrConformantStructUnmarshall: {
      parameters: ["pointer", "pointer", "pointer", "u8"],
      result: "pointer",
    },
    NdrConformantVaryingStructUnmarshall: {
      parameters: ["pointer", "pointer", "pointer", "u8"],
      result: "pointer",
    },
    NdrComplexStructUnmarshall: {
      parameters: ["pointer", "pointer", "pointer", "u8"],
      result: "pointer",
    },
    NdrFixedArrayUnmarshall: {
      parameters: ["pointer", "pointer", "pointer", "u8"],
      result: "pointer",
    },
    NdrConformantArrayUnmarshall: {
      parameters: ["pointer", "pointer", "pointer", "u8"],
      result: "pointer",
    },
    NdrConformantVaryingArrayUnmarshall: {
      parameters: ["pointer", "pointer", "pointer", "u8"],
      result: "pointer",
    },
    NdrVaryingArrayUnmarshall: {
      parameters: ["pointer", "pointer", "pointer", "u8"],
      result: "pointer",
    },
    NdrComplexArrayUnmarshall: {
      parameters: ["pointer", "pointer", "pointer", "u8"],
      result: "pointer",
    },
    NdrNonConformantStringUnmarshall: {
      parameters: ["pointer", "pointer", "pointer", "u8"],
      result: "pointer",
    },
    NdrConformantStringUnmarshall: {
      parameters: ["pointer", "pointer", "pointer", "u8"],
      result: "pointer",
    },
    NdrEncapsulatedUnionUnmarshall: {
      parameters: ["pointer", "pointer", "pointer", "u8"],
      result: "pointer",
    },
    NdrNonEncapsulatedUnionUnmarshall: {
      parameters: ["pointer", "pointer", "pointer", "u8"],
      result: "pointer",
    },
    NdrByteCountPointerUnmarshall: {
      parameters: ["pointer", "pointer", "pointer", "u8"],
      result: "pointer",
    },
    NdrXmitOrRepAsUnmarshall: {
      parameters: ["pointer", "pointer", "pointer", "u8"],
      result: "pointer",
    },
    NdrUserMarshalUnmarshall: {
      parameters: ["pointer", "pointer", "pointer", "u8"],
      result: "pointer",
    },
    NdrInterfacePointerUnmarshall: {
      parameters: ["pointer", "pointer", "pointer", "u8"],
      result: "pointer",
    },
    NdrClientContextUnmarshall: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrServerContextUnmarshall: {
      parameters: ["pointer"],
      result: "pointer",
    },
    NdrContextHandleInitialize: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    NdrServerContextNewUnmarshall: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    NdrPointerBufferSize: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrSimpleStructBufferSize: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrConformantStructBufferSize: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrConformantVaryingStructBufferSize: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrComplexStructBufferSize: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrFixedArrayBufferSize: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrConformantArrayBufferSize: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrConformantVaryingArrayBufferSize: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrVaryingArrayBufferSize: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrComplexArrayBufferSize: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrConformantStringBufferSize: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrNonConformantStringBufferSize: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrEncapsulatedUnionBufferSize: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrNonEncapsulatedUnionBufferSize: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrByteCountPointerBufferSize: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrXmitOrRepAsBufferSize: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrUserMarshalBufferSize: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrInterfacePointerBufferSize: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrContextHandleSize: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrPointerMemorySize: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    NdrSimpleStructMemorySize: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    NdrConformantStructMemorySize: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    NdrConformantVaryingStructMemorySize: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    NdrComplexStructMemorySize: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    NdrFixedArrayMemorySize: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    NdrConformantArrayMemorySize: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    NdrConformantVaryingArrayMemorySize: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    NdrVaryingArrayMemorySize: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    NdrComplexArrayMemorySize: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    NdrConformantStringMemorySize: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    NdrNonConformantStringMemorySize: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    NdrEncapsulatedUnionMemorySize: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    NdrNonEncapsulatedUnionMemorySize: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    NdrXmitOrRepAsMemorySize: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    NdrUserMarshalMemorySize: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    NdrInterfacePointerMemorySize: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    NdrPointerFree: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrSimpleStructFree: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrConformantStructFree: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrConformantVaryingStructFree: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrComplexStructFree: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrFixedArrayFree: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrConformantArrayFree: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrConformantVaryingArrayFree: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrVaryingArrayFree: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrComplexArrayFree: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrEncapsulatedUnionFree: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrNonEncapsulatedUnionFree: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrByteCountPointerFree: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrXmitOrRepAsFree: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrUserMarshalFree: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrInterfacePointerFree: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrConvert2: {
      parameters: ["pointer", "pointer", "i32"],
      result: "void",
    },
    NdrConvert: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    NdrUserMarshalSimpleTypeConvert: {
      parameters: ["pointer", "pointer", "u8"],
      result: "pointer",
    },
    NdrClientInitializeNew: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "void",
    },
    NdrServerInitializeNew: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    NdrServerInitializePartial: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "void",
    },
    NdrClientInitialize: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "void",
    },
    NdrServerInitialize: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    NdrServerInitializeUnmarshall: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    NdrServerInitializeMarshall: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    NdrGetBuffer: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    NdrNsGetBuffer: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    NdrSendReceive: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    NdrNsSendReceive: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    NdrFreeBuffer: {
      parameters: ["pointer"],
      result: "void",
    },
    NdrGetDcomProtocolVersion: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    NdrClientCall2: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    NdrAsyncClientCall: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    NdrDcomAsyncClientCall: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    NdrAsyncServerCall: {
      parameters: ["pointer"],
      result: "void",
    },
    NdrDcomAsyncStubCall: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    NdrStubCall2: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    NdrServerCall2: {
      parameters: ["pointer"],
      result: "void",
    },
    NdrMapCommAndFaultStatus: {
      parameters: ["pointer", "pointer", "pointer", "i32"],
      result: "i32",
    },
    RpcSsAllocate: {
      parameters: ["usize"],
      result: "pointer",
    },
    RpcSsDisableAllocate: {
      parameters: [],
      result: "void",
    },
    RpcSsEnableAllocate: {
      parameters: [],
      result: "void",
    },
    RpcSsFree: {
      parameters: ["pointer"],
      result: "void",
    },
    RpcSsGetThreadHandle: {
      parameters: [],
      result: "pointer",
    },
    RpcSsSetClientAllocFree: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    RpcSsSetThreadHandle: {
      parameters: ["pointer"],
      result: "void",
    },
    RpcSsSwapClientAllocFree: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    RpcSmAllocate: {
      parameters: ["usize", "pointer"],
      result: "pointer",
    },
    RpcSmClientFree: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcSmDestroyClientContext: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcSmDisableAllocate: {
      parameters: [],
      result: "i32",
    },
    RpcSmEnableAllocate: {
      parameters: [],
      result: "i32",
    },
    RpcSmFree: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcSmGetThreadHandle: {
      parameters: ["pointer"],
      result: "pointer",
    },
    RpcSmSetClientAllocFree: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    RpcSmSetThreadHandle: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcSmSwapClientAllocFree: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    NdrRpcSsEnableAllocate: {
      parameters: ["pointer"],
      result: "void",
    },
    NdrRpcSsDisableAllocate: {
      parameters: ["pointer"],
      result: "void",
    },
    NdrRpcSmSetClientToOsf: {
      parameters: ["pointer"],
      result: "void",
    },
    NdrRpcSmClientAllocate: {
      parameters: ["usize"],
      result: "pointer",
    },
    NdrRpcSmClientFree: {
      parameters: ["pointer"],
      result: "void",
    },
    NdrRpcSsDefaultAllocate: {
      parameters: ["usize"],
      result: "pointer",
    },
    NdrRpcSsDefaultFree: {
      parameters: ["pointer"],
      result: "void",
    },
    NdrFullPointerXlatInit: {
      parameters: ["u32", "i32"],
      result: "pointer",
    },
    NdrFullPointerXlatFree: {
      parameters: ["pointer"],
      result: "void",
    },
    NdrAllocate: {
      parameters: ["pointer", "usize"],
      result: "pointer",
    },
    NdrClearOutParameters: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrOleAllocate: {
      parameters: ["usize"],
      result: "pointer",
    },
    NdrOleFree: {
      parameters: ["pointer"],
      result: "void",
    },
    NdrGetUserMarshalInfo: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    NdrCreateServerInterfaceFromStub: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    NdrClientCall3: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    Ndr64AsyncClientCall: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    Ndr64DcomAsyncClientCall: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    Ndr64AsyncServerCall64: {
      parameters: ["pointer"],
      result: "void",
    },
    Ndr64AsyncServerCallAll: {
      parameters: ["pointer"],
      result: "void",
    },
    Ndr64DcomAsyncStubCall: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    NdrStubCall3: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    NdrServerCallAll: {
      parameters: ["pointer"],
      result: "void",
    },
    NdrServerCallNdr64: {
      parameters: ["pointer"],
      result: "void",
    },
    NdrPartialIgnoreClientMarshall: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    NdrPartialIgnoreServerUnmarshall: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    NdrPartialIgnoreClientBufferSize: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    NdrPartialIgnoreServerInitialize: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    RpcUserFree: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    MesEncodeIncrementalHandleCreate: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    MesDecodeIncrementalHandleCreate: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    MesIncrementalHandleReset: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "i32"],
      result: "i32",
    },
    MesEncodeFixedBufferHandleCreate: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    MesEncodeDynBufferHandleCreate: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    MesDecodeBufferHandleCreate: {
      parameters: ["buffer", "u32", "pointer"],
      result: "i32",
    },
    MesBufferHandleReset: {
      parameters: ["pointer", "u32", "i32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    MesHandleFree: {
      parameters: ["pointer"],
      result: "i32",
    },
    MesInqProcEncodingId: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    NdrMesSimpleTypeAlignSize: {
      parameters: ["pointer"],
      result: "usize",
    },
    NdrMesSimpleTypeDecode: {
      parameters: ["pointer", "pointer", "i16"],
      result: "void",
    },
    NdrMesSimpleTypeEncode: {
      parameters: ["pointer", "pointer", "pointer", "i16"],
      result: "void",
    },
    NdrMesTypeAlignSize: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "usize",
    },
    NdrMesTypeEncode: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrMesTypeDecode: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrMesTypeAlignSize2: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "usize",
    },
    NdrMesTypeEncode2: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrMesTypeDecode2: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrMesTypeFree2: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrMesProcEncodeDecode: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    NdrMesProcEncodeDecode2: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    NdrMesTypeAlignSize3: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32", "pointer"],
      result: "usize",
    },
    NdrMesTypeEncode3: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32", "pointer"],
      result: "void",
    },
    NdrMesTypeDecode3: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32", "pointer"],
      result: "void",
    },
    NdrMesTypeFree3: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32", "pointer"],
      result: "void",
    },
    NdrMesProcEncodeDecode3: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    NdrMesSimpleTypeDecodeAll: {
      parameters: ["pointer", "pointer", "pointer", "i16"],
      result: "void",
    },
    NdrMesSimpleTypeEncodeAll: {
      parameters: ["pointer", "pointer", "pointer", "i16"],
      result: "void",
    },
    NdrMesSimpleTypeAlignSizeAll: {
      parameters: ["pointer", "pointer"],
      result: "usize",
    },
    RpcCertGeneratePrincipalNameW: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    RpcCertGeneratePrincipalNameA: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libRPCNS4_dll = Deno.dlopen("RPCNS4.dll", {
    RpcIfIdVectorFree: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcNsBindingExportA: {
      parameters: ["u32", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcNsBindingUnexportA: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcNsBindingExportW: {
      parameters: ["u32", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcNsBindingUnexportW: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcNsBindingExportPnPA: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcNsBindingUnexportPnPA: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcNsBindingExportPnPW: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcNsBindingUnexportPnPW: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcNsBindingLookupBeginA: {
      parameters: ["u32", "pointer", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    RpcNsBindingLookupBeginW: {
      parameters: ["u32", "pointer", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    RpcNsBindingLookupNext: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    RpcNsBindingLookupDone: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcNsGroupDeleteA: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    RpcNsGroupMbrAddA: {
      parameters: ["u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    RpcNsGroupMbrRemoveA: {
      parameters: ["u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    RpcNsGroupMbrInqBeginA: {
      parameters: ["u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    RpcNsGroupMbrInqNextA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    RpcNsGroupDeleteW: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    RpcNsGroupMbrAddW: {
      parameters: ["u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    RpcNsGroupMbrRemoveW: {
      parameters: ["u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    RpcNsGroupMbrInqBeginW: {
      parameters: ["u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    RpcNsGroupMbrInqNextW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    RpcNsGroupMbrInqDone: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcNsProfileDeleteA: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    RpcNsProfileEltAddA: {
      parameters: ["u32", "pointer", "pointer", "u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    RpcNsProfileEltRemoveA: {
      parameters: ["u32", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    RpcNsProfileEltInqBeginA: {
      parameters: ["u32", "pointer", "u32", "pointer", "u32", "u32", "pointer", "pointer"],
      result: "i32",
    },
    RpcNsProfileEltInqNextA: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcNsProfileDeleteW: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    RpcNsProfileEltAddW: {
      parameters: ["u32", "pointer", "pointer", "u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    RpcNsProfileEltRemoveW: {
      parameters: ["u32", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    RpcNsProfileEltInqBeginW: {
      parameters: ["u32", "pointer", "u32", "pointer", "u32", "u32", "pointer", "pointer"],
      result: "i32",
    },
    RpcNsProfileEltInqNextW: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcNsProfileEltInqDone: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcNsEntryObjectInqBeginA: {
      parameters: ["u32", "pointer", "pointer"],
      result: "i32",
    },
    RpcNsEntryObjectInqBeginW: {
      parameters: ["u32", "pointer", "pointer"],
      result: "i32",
    },
    RpcNsEntryObjectInqNext: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    RpcNsEntryObjectInqDone: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcNsEntryExpandNameA: {
      parameters: ["u32", "pointer", "pointer"],
      result: "i32",
    },
    RpcNsMgmtBindingUnexportA: {
      parameters: ["u32", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    RpcNsMgmtEntryCreateA: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    RpcNsMgmtEntryDeleteA: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    RpcNsMgmtEntryInqIfIdsA: {
      parameters: ["u32", "pointer", "pointer"],
      result: "i32",
    },
    RpcNsMgmtHandleSetExpAge: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    RpcNsMgmtInqExpAge: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcNsMgmtSetExpAge: {
      parameters: ["u32"],
      result: "i32",
    },
    RpcNsEntryExpandNameW: {
      parameters: ["u32", "pointer", "pointer"],
      result: "i32",
    },
    RpcNsMgmtBindingUnexportW: {
      parameters: ["u32", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    RpcNsMgmtEntryCreateW: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    RpcNsMgmtEntryDeleteW: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    RpcNsMgmtEntryInqIfIdsW: {
      parameters: ["u32", "pointer", "pointer"],
      result: "i32",
    },
    RpcNsBindingImportBeginA: {
      parameters: ["u32", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcNsBindingImportBeginW: {
      parameters: ["u32", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RpcNsBindingImportNext: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    RpcNsBindingImportDone: {
      parameters: ["pointer"],
      result: "i32",
    },
    RpcNsBindingSelect: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    I_RpcNsGetBuffer: {
      parameters: ["pointer"],
      result: "i32",
    },
    I_RpcNsSendReceive: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    I_RpcNsRaiseException: {
      parameters: ["pointer", "i32"],
      result: "void",
    },
    I_RpcReBindBuffer: {
      parameters: ["pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function IUnknown_QueryInterface_Proxy(
  This: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppvObject: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libRPCRT4_dll.IUnknown_QueryInterface_Proxy(util.toPointer(This), util.toPointer(riid), util.toPointer(ppvObject)));
}

export function IUnknown_AddRef_Proxy(
  This: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
): number /* u32 */ {
  return libRPCRT4_dll.IUnknown_AddRef_Proxy(util.toPointer(This));
}

export function IUnknown_Release_Proxy(
  This: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
): number /* u32 */ {
  return libRPCRT4_dll.IUnknown_Release_Proxy(util.toPointer(This));
}

export function RpcBindingCopy(
  SourceBinding: Deno.PointerValue | Uint8Array | null /* ptr */,
  DestinationBinding: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcBindingCopy(util.toPointer(SourceBinding), util.toPointer(DestinationBinding));
}

export function RpcBindingFree(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcBindingFree(util.toPointer(Binding));
}

export function RpcBindingSetOption(
  hBinding: Deno.PointerValue | Uint8Array | null /* ptr */,
  option: number /* u32 */,
  optionValue: Deno.PointerValue /* usize */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcBindingSetOption(util.toPointer(hBinding), option, optionValue);
}

export function RpcBindingInqOption(
  hBinding: Deno.PointerValue | Uint8Array | null /* ptr */,
  option: number /* u32 */,
  pOptionValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcBindingInqOption(util.toPointer(hBinding), option, util.toPointer(pOptionValue));
}

export function RpcBindingFromStringBindingA(
  StringBinding: Deno.PointerValue | Uint8Array | null /* ptr */,
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcBindingFromStringBindingA(util.toPointer(StringBinding), util.toPointer(Binding));
}

export function RpcBindingFromStringBindingW(
  StringBinding: Deno.PointerValue | Uint8Array | null /* ptr */,
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcBindingFromStringBindingW(util.toPointer(StringBinding), util.toPointer(Binding));
}

export function RpcSsGetContextBinding(
  ContextHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcSsGetContextBinding(util.toPointer(ContextHandle), util.toPointer(Binding));
}

export function RpcBindingInqMaxCalls(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  MaxCalls: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcBindingInqMaxCalls(util.toPointer(Binding), util.toPointer(MaxCalls));
}

export function RpcBindingInqObject(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectUuid: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcBindingInqObject(util.toPointer(Binding), util.toPointer(ObjectUuid));
}

export function RpcBindingReset(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcBindingReset(util.toPointer(Binding));
}

export function RpcBindingSetObject(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectUuid: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcBindingSetObject(util.toPointer(Binding), util.toPointer(ObjectUuid));
}

export function RpcMgmtInqDefaultProtectLevel(
  AuthnSvc: number /* u32 */,
  AuthnLevel: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcMgmtInqDefaultProtectLevel(AuthnSvc, util.toPointer(AuthnLevel));
}

export function RpcBindingToStringBindingA(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  StringBinding: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcBindingToStringBindingA(util.toPointer(Binding), util.toPointer(StringBinding));
}

export function RpcBindingToStringBindingW(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  StringBinding: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcBindingToStringBindingW(util.toPointer(Binding), util.toPointer(StringBinding));
}

export function RpcBindingVectorFree(
  BindingVector: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcBindingVectorFree(util.toPointer(BindingVector));
}

export function RpcStringBindingComposeA(
  ObjUuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ProtSeq: Deno.PointerValue | Uint8Array | null /* ptr */,
  NetworkAddr: Deno.PointerValue | Uint8Array | null /* ptr */,
  Endpoint: Deno.PointerValue | Uint8Array | null /* ptr */,
  Options: Deno.PointerValue | Uint8Array | null /* ptr */,
  StringBinding: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcStringBindingComposeA(util.toPointer(ObjUuid), util.toPointer(ProtSeq), util.toPointer(NetworkAddr), util.toPointer(Endpoint), util.toPointer(Options), util.toPointer(StringBinding));
}

export function RpcStringBindingComposeW(
  ObjUuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ProtSeq: Deno.PointerValue | Uint8Array | null /* ptr */,
  NetworkAddr: Deno.PointerValue | Uint8Array | null /* ptr */,
  Endpoint: Deno.PointerValue | Uint8Array | null /* ptr */,
  Options: Deno.PointerValue | Uint8Array | null /* ptr */,
  StringBinding: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcStringBindingComposeW(util.toPointer(ObjUuid), util.toPointer(ProtSeq), util.toPointer(NetworkAddr), util.toPointer(Endpoint), util.toPointer(Options), util.toPointer(StringBinding));
}

export function RpcStringBindingParseA(
  StringBinding: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjUuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  Protseq: Deno.PointerValue | Uint8Array | null /* ptr */,
  NetworkAddr: Deno.PointerValue | Uint8Array | null /* ptr */,
  Endpoint: Deno.PointerValue | Uint8Array | null /* ptr */,
  NetworkOptions: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcStringBindingParseA(util.toPointer(StringBinding), util.toPointer(ObjUuid), util.toPointer(Protseq), util.toPointer(NetworkAddr), util.toPointer(Endpoint), util.toPointer(NetworkOptions));
}

export function RpcStringBindingParseW(
  StringBinding: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjUuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  Protseq: Deno.PointerValue | Uint8Array | null /* ptr */,
  NetworkAddr: Deno.PointerValue | Uint8Array | null /* ptr */,
  Endpoint: Deno.PointerValue | Uint8Array | null /* ptr */,
  NetworkOptions: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcStringBindingParseW(util.toPointer(StringBinding), util.toPointer(ObjUuid), util.toPointer(Protseq), util.toPointer(NetworkAddr), util.toPointer(Endpoint), util.toPointer(NetworkOptions));
}

export function RpcStringFreeA(
  String: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcStringFreeA(util.toPointer(String));
}

export function RpcStringFreeW(
  String: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcStringFreeW(util.toPointer(String));
}

export function RpcIfInqId(
  RpcIfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  RpcIfId: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcIfInqId(util.toPointer(RpcIfHandle), util.toPointer(RpcIfId));
}

export function RpcNetworkIsProtseqValidA(
  Protseq: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcNetworkIsProtseqValidA(util.toPointer(Protseq));
}

export function RpcNetworkIsProtseqValidW(
  Protseq: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcNetworkIsProtseqValidW(util.toPointer(Protseq));
}

export function RpcMgmtInqComTimeout(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  Timeout: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcMgmtInqComTimeout(util.toPointer(Binding), util.toPointer(Timeout));
}

export function RpcMgmtSetComTimeout(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  Timeout: number /* u32 */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcMgmtSetComTimeout(util.toPointer(Binding), Timeout);
}

export function RpcMgmtSetCancelTimeout(
  Timeout: number /* i32 */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcMgmtSetCancelTimeout(Timeout);
}

export function RpcNetworkInqProtseqsA(
  ProtseqVector: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcNetworkInqProtseqsA(util.toPointer(ProtseqVector));
}

export function RpcNetworkInqProtseqsW(
  ProtseqVector: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcNetworkInqProtseqsW(util.toPointer(ProtseqVector));
}

export function RpcObjectInqType(
  ObjUuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  TypeUuid: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcObjectInqType(util.toPointer(ObjUuid), util.toPointer(TypeUuid));
}

export function RpcObjectSetInqFn(
  InquiryFn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Rpc.RPC_OBJECT_INQ_FN */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcObjectSetInqFn(util.toPointer(InquiryFn));
}

export function RpcObjectSetType(
  ObjUuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  TypeUuid: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcObjectSetType(util.toPointer(ObjUuid), util.toPointer(TypeUuid));
}

export function RpcProtseqVectorFreeA(
  ProtseqVector: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcProtseqVectorFreeA(util.toPointer(ProtseqVector));
}

export function RpcProtseqVectorFreeW(
  ProtseqVector: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcProtseqVectorFreeW(util.toPointer(ProtseqVector));
}

export function RpcServerInqBindings(
  BindingVector: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerInqBindings(util.toPointer(BindingVector));
}

export function RpcServerInqBindingsEx(
  SecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  BindingVector: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerInqBindingsEx(util.toPointer(SecurityDescriptor), util.toPointer(BindingVector));
}

export function RpcServerInqIf(
  IfSpec: Deno.PointerValue | Uint8Array | null /* ptr */,
  MgrTypeUuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  MgrEpv: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerInqIf(util.toPointer(IfSpec), util.toPointer(MgrTypeUuid), util.toPointer(MgrEpv));
}

export function RpcServerListen(
  MinimumCallThreads: number /* u32 */,
  MaxCalls: number /* u32 */,
  DontWait: number /* u32 */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerListen(MinimumCallThreads, MaxCalls, DontWait);
}

export function RpcServerRegisterIf(
  IfSpec: Deno.PointerValue | Uint8Array | null /* ptr */,
  MgrTypeUuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  MgrEpv: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerRegisterIf(util.toPointer(IfSpec), util.toPointer(MgrTypeUuid), util.toPointer(MgrEpv));
}

export function RpcServerRegisterIfEx(
  IfSpec: Deno.PointerValue | Uint8Array | null /* ptr */,
  MgrTypeUuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  MgrEpv: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
  MaxCalls: number /* u32 */,
  IfCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Rpc.RPC_IF_CALLBACK_FN */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerRegisterIfEx(util.toPointer(IfSpec), util.toPointer(MgrTypeUuid), util.toPointer(MgrEpv), Flags, MaxCalls, util.toPointer(IfCallback));
}

export function RpcServerRegisterIf2(
  IfSpec: Deno.PointerValue | Uint8Array | null /* ptr */,
  MgrTypeUuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  MgrEpv: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
  MaxCalls: number /* u32 */,
  MaxRpcSize: number /* u32 */,
  IfCallbackFn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Rpc.RPC_IF_CALLBACK_FN */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerRegisterIf2(util.toPointer(IfSpec), util.toPointer(MgrTypeUuid), util.toPointer(MgrEpv), Flags, MaxCalls, MaxRpcSize, util.toPointer(IfCallbackFn));
}

export function RpcServerRegisterIf3(
  IfSpec: Deno.PointerValue | Uint8Array | null /* ptr */,
  MgrTypeUuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  MgrEpv: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
  MaxCalls: number /* u32 */,
  MaxRpcSize: number /* u32 */,
  IfCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Rpc.RPC_IF_CALLBACK_FN */,
  SecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerRegisterIf3(util.toPointer(IfSpec), util.toPointer(MgrTypeUuid), util.toPointer(MgrEpv), Flags, MaxCalls, MaxRpcSize, util.toPointer(IfCallback), util.toPointer(SecurityDescriptor));
}

export function RpcServerUnregisterIf(
  IfSpec: Deno.PointerValue | Uint8Array | null /* ptr */,
  MgrTypeUuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  WaitForCallsToComplete: number /* u32 */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerUnregisterIf(util.toPointer(IfSpec), util.toPointer(MgrTypeUuid), WaitForCallsToComplete);
}

export function RpcServerUnregisterIfEx(
  IfSpec: Deno.PointerValue | Uint8Array | null /* ptr */,
  MgrTypeUuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  RundownContextHandles: number /* i32 */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerUnregisterIfEx(util.toPointer(IfSpec), util.toPointer(MgrTypeUuid), RundownContextHandles);
}

export function RpcServerUseAllProtseqs(
  MaxCalls: number /* u32 */,
  SecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerUseAllProtseqs(MaxCalls, util.toPointer(SecurityDescriptor));
}

export function RpcServerUseAllProtseqsEx(
  MaxCalls: number /* u32 */,
  SecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  Policy: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerUseAllProtseqsEx(MaxCalls, util.toPointer(SecurityDescriptor), util.toPointer(Policy));
}

export function RpcServerUseAllProtseqsIf(
  MaxCalls: number /* u32 */,
  IfSpec: Deno.PointerValue | Uint8Array | null /* ptr */,
  SecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerUseAllProtseqsIf(MaxCalls, util.toPointer(IfSpec), util.toPointer(SecurityDescriptor));
}

export function RpcServerUseAllProtseqsIfEx(
  MaxCalls: number /* u32 */,
  IfSpec: Deno.PointerValue | Uint8Array | null /* ptr */,
  SecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  Policy: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerUseAllProtseqsIfEx(MaxCalls, util.toPointer(IfSpec), util.toPointer(SecurityDescriptor), util.toPointer(Policy));
}

export function RpcServerUseProtseqA(
  Protseq: Deno.PointerValue | Uint8Array | null /* ptr */,
  MaxCalls: number /* u32 */,
  SecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerUseProtseqA(util.toPointer(Protseq), MaxCalls, util.toPointer(SecurityDescriptor));
}

export function RpcServerUseProtseqExA(
  Protseq: Deno.PointerValue | Uint8Array | null /* ptr */,
  MaxCalls: number /* u32 */,
  SecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  Policy: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerUseProtseqExA(util.toPointer(Protseq), MaxCalls, util.toPointer(SecurityDescriptor), util.toPointer(Policy));
}

export function RpcServerUseProtseqW(
  Protseq: Deno.PointerValue | Uint8Array | null /* ptr */,
  MaxCalls: number /* u32 */,
  SecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerUseProtseqW(util.toPointer(Protseq), MaxCalls, util.toPointer(SecurityDescriptor));
}

export function RpcServerUseProtseqExW(
  Protseq: Deno.PointerValue | Uint8Array | null /* ptr */,
  MaxCalls: number /* u32 */,
  SecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  Policy: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerUseProtseqExW(util.toPointer(Protseq), MaxCalls, util.toPointer(SecurityDescriptor), util.toPointer(Policy));
}

export function RpcServerUseProtseqEpA(
  Protseq: Deno.PointerValue | Uint8Array | null /* ptr */,
  MaxCalls: number /* u32 */,
  Endpoint: Deno.PointerValue | Uint8Array | null /* ptr */,
  SecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerUseProtseqEpA(util.toPointer(Protseq), MaxCalls, util.toPointer(Endpoint), util.toPointer(SecurityDescriptor));
}

export function RpcServerUseProtseqEpExA(
  Protseq: Deno.PointerValue | Uint8Array | null /* ptr */,
  MaxCalls: number /* u32 */,
  Endpoint: Deno.PointerValue | Uint8Array | null /* ptr */,
  SecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  Policy: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerUseProtseqEpExA(util.toPointer(Protseq), MaxCalls, util.toPointer(Endpoint), util.toPointer(SecurityDescriptor), util.toPointer(Policy));
}

export function RpcServerUseProtseqEpW(
  Protseq: Deno.PointerValue | Uint8Array | null /* ptr */,
  MaxCalls: number /* u32 */,
  Endpoint: Deno.PointerValue | Uint8Array | null /* ptr */,
  SecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerUseProtseqEpW(util.toPointer(Protseq), MaxCalls, util.toPointer(Endpoint), util.toPointer(SecurityDescriptor));
}

export function RpcServerUseProtseqEpExW(
  Protseq: Deno.PointerValue | Uint8Array | null /* ptr */,
  MaxCalls: number /* u32 */,
  Endpoint: Deno.PointerValue | Uint8Array | null /* ptr */,
  SecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  Policy: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerUseProtseqEpExW(util.toPointer(Protseq), MaxCalls, util.toPointer(Endpoint), util.toPointer(SecurityDescriptor), util.toPointer(Policy));
}

export function RpcServerUseProtseqIfA(
  Protseq: Deno.PointerValue | Uint8Array | null /* ptr */,
  MaxCalls: number /* u32 */,
  IfSpec: Deno.PointerValue | Uint8Array | null /* ptr */,
  SecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerUseProtseqIfA(util.toPointer(Protseq), MaxCalls, util.toPointer(IfSpec), util.toPointer(SecurityDescriptor));
}

export function RpcServerUseProtseqIfExA(
  Protseq: Deno.PointerValue | Uint8Array | null /* ptr */,
  MaxCalls: number /* u32 */,
  IfSpec: Deno.PointerValue | Uint8Array | null /* ptr */,
  SecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  Policy: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerUseProtseqIfExA(util.toPointer(Protseq), MaxCalls, util.toPointer(IfSpec), util.toPointer(SecurityDescriptor), util.toPointer(Policy));
}

export function RpcServerUseProtseqIfW(
  Protseq: Deno.PointerValue | Uint8Array | null /* ptr */,
  MaxCalls: number /* u32 */,
  IfSpec: Deno.PointerValue | Uint8Array | null /* ptr */,
  SecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerUseProtseqIfW(util.toPointer(Protseq), MaxCalls, util.toPointer(IfSpec), util.toPointer(SecurityDescriptor));
}

export function RpcServerUseProtseqIfExW(
  Protseq: Deno.PointerValue | Uint8Array | null /* ptr */,
  MaxCalls: number /* u32 */,
  IfSpec: Deno.PointerValue | Uint8Array | null /* ptr */,
  SecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  Policy: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerUseProtseqIfExW(util.toPointer(Protseq), MaxCalls, util.toPointer(IfSpec), util.toPointer(SecurityDescriptor), util.toPointer(Policy));
}

export function RpcServerYield(): void /* void */ {
  return libRPCRT4_dll.RpcServerYield();
}

export function RpcMgmtStatsVectorFree(
  StatsVector: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcMgmtStatsVectorFree(util.toPointer(StatsVector));
}

export function RpcMgmtInqStats(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  Statistics: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcMgmtInqStats(util.toPointer(Binding), util.toPointer(Statistics));
}

export function RpcMgmtIsServerListening(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcMgmtIsServerListening(util.toPointer(Binding));
}

export function RpcMgmtStopServerListening(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcMgmtStopServerListening(util.toPointer(Binding));
}

export function RpcMgmtWaitServerListen(): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcMgmtWaitServerListen();
}

export function RpcMgmtSetServerStackSize(
  ThreadStackSize: number /* u32 */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcMgmtSetServerStackSize(ThreadStackSize);
}

export function RpcSsDontSerializeContext(): void /* void */ {
  return libRPCRT4_dll.RpcSsDontSerializeContext();
}

export function RpcMgmtEnableIdleCleanup(): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcMgmtEnableIdleCleanup();
}

export function RpcMgmtInqIfIds(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  IfIdVector: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcMgmtInqIfIds(util.toPointer(Binding), util.toPointer(IfIdVector));
}

export function RpcIfIdVectorFree(
  IfIdVector: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcIfIdVectorFree(util.toPointer(IfIdVector));
}

export function RpcMgmtInqServerPrincNameA(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthnSvc: number /* u32 */,
  ServerPrincName: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcMgmtInqServerPrincNameA(util.toPointer(Binding), AuthnSvc, util.toPointer(ServerPrincName));
}

export function RpcMgmtInqServerPrincNameW(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthnSvc: number /* u32 */,
  ServerPrincName: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcMgmtInqServerPrincNameW(util.toPointer(Binding), AuthnSvc, util.toPointer(ServerPrincName));
}

export function RpcServerInqDefaultPrincNameA(
  AuthnSvc: number /* u32 */,
  PrincName: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerInqDefaultPrincNameA(AuthnSvc, util.toPointer(PrincName));
}

export function RpcServerInqDefaultPrincNameW(
  AuthnSvc: number /* u32 */,
  PrincName: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerInqDefaultPrincNameW(AuthnSvc, util.toPointer(PrincName));
}

export function RpcEpResolveBinding(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  IfSpec: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcEpResolveBinding(util.toPointer(Binding), util.toPointer(IfSpec));
}

export function RpcNsBindingInqEntryNameA(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  EntryNameSyntax: number /* u32 */,
  EntryName: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcNsBindingInqEntryNameA(util.toPointer(Binding), EntryNameSyntax, util.toPointer(EntryName));
}

export function RpcNsBindingInqEntryNameW(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  EntryNameSyntax: number /* u32 */,
  EntryName: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcNsBindingInqEntryNameW(util.toPointer(Binding), EntryNameSyntax, util.toPointer(EntryName));
}

export function RpcBindingCreateA(
  Template: Deno.PointerValue | Uint8Array | null /* ptr */,
  Security: Deno.PointerValue | Uint8Array | null /* ptr */,
  Options: Deno.PointerValue | Uint8Array | null /* ptr */,
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcBindingCreateA(util.toPointer(Template), util.toPointer(Security), util.toPointer(Options), util.toPointer(Binding));
}

export function RpcBindingCreateW(
  Template: Deno.PointerValue | Uint8Array | null /* ptr */,
  Security: Deno.PointerValue | Uint8Array | null /* ptr */,
  Options: Deno.PointerValue | Uint8Array | null /* ptr */,
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcBindingCreateW(util.toPointer(Template), util.toPointer(Security), util.toPointer(Options), util.toPointer(Binding));
}

export function RpcServerInqBindingHandle(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerInqBindingHandle(util.toPointer(Binding));
}

export function RpcImpersonateClient(
  BindingHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcImpersonateClient(util.toPointer(BindingHandle));
}

export function RpcImpersonateClient2(
  BindingHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcImpersonateClient2(util.toPointer(BindingHandle));
}

export function RpcRevertToSelfEx(
  BindingHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcRevertToSelfEx(util.toPointer(BindingHandle));
}

export function RpcRevertToSelf(): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcRevertToSelf();
}

export function RpcImpersonateClientContainer(
  BindingHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcImpersonateClientContainer(util.toPointer(BindingHandle));
}

export function RpcRevertContainerImpersonation(): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcRevertContainerImpersonation();
}

export function RpcBindingInqAuthClientA(
  ClientBinding: Deno.PointerValue | Uint8Array | null /* ptr */,
  Privs: Deno.PointerValue | Uint8Array | null /* ptr */,
  ServerPrincName: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthnLevel: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthnSvc: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthzSvc: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcBindingInqAuthClientA(util.toPointer(ClientBinding), util.toPointer(Privs), util.toPointer(ServerPrincName), util.toPointer(AuthnLevel), util.toPointer(AuthnSvc), util.toPointer(AuthzSvc));
}

export function RpcBindingInqAuthClientW(
  ClientBinding: Deno.PointerValue | Uint8Array | null /* ptr */,
  Privs: Deno.PointerValue | Uint8Array | null /* ptr */,
  ServerPrincName: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthnLevel: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthnSvc: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthzSvc: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcBindingInqAuthClientW(util.toPointer(ClientBinding), util.toPointer(Privs), util.toPointer(ServerPrincName), util.toPointer(AuthnLevel), util.toPointer(AuthnSvc), util.toPointer(AuthzSvc));
}

export function RpcBindingInqAuthClientExA(
  ClientBinding: Deno.PointerValue | Uint8Array | null /* ptr */,
  Privs: Deno.PointerValue | Uint8Array | null /* ptr */,
  ServerPrincName: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthnLevel: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthnSvc: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthzSvc: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcBindingInqAuthClientExA(util.toPointer(ClientBinding), util.toPointer(Privs), util.toPointer(ServerPrincName), util.toPointer(AuthnLevel), util.toPointer(AuthnSvc), util.toPointer(AuthzSvc), Flags);
}

export function RpcBindingInqAuthClientExW(
  ClientBinding: Deno.PointerValue | Uint8Array | null /* ptr */,
  Privs: Deno.PointerValue | Uint8Array | null /* ptr */,
  ServerPrincName: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthnLevel: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthnSvc: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthzSvc: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcBindingInqAuthClientExW(util.toPointer(ClientBinding), util.toPointer(Privs), util.toPointer(ServerPrincName), util.toPointer(AuthnLevel), util.toPointer(AuthnSvc), util.toPointer(AuthzSvc), Flags);
}

export function RpcBindingInqAuthInfoA(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  ServerPrincName: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthnLevel: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthnSvc: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthIdentity: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthzSvc: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcBindingInqAuthInfoA(util.toPointer(Binding), util.toPointer(ServerPrincName), util.toPointer(AuthnLevel), util.toPointer(AuthnSvc), util.toPointer(AuthIdentity), util.toPointer(AuthzSvc));
}

export function RpcBindingInqAuthInfoW(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  ServerPrincName: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthnLevel: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthnSvc: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthIdentity: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthzSvc: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcBindingInqAuthInfoW(util.toPointer(Binding), util.toPointer(ServerPrincName), util.toPointer(AuthnLevel), util.toPointer(AuthnSvc), util.toPointer(AuthIdentity), util.toPointer(AuthzSvc));
}

export function RpcBindingSetAuthInfoA(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  ServerPrincName: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthnLevel: number /* u32 */,
  AuthnSvc: number /* u32 */,
  AuthIdentity: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthzSvc: number /* u32 */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcBindingSetAuthInfoA(util.toPointer(Binding), util.toPointer(ServerPrincName), AuthnLevel, AuthnSvc, util.toPointer(AuthIdentity), AuthzSvc);
}

export function RpcBindingSetAuthInfoExA(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  ServerPrincName: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthnLevel: number /* u32 */,
  AuthnSvc: number /* u32 */,
  AuthIdentity: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthzSvc: number /* u32 */,
  SecurityQos: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcBindingSetAuthInfoExA(util.toPointer(Binding), util.toPointer(ServerPrincName), AuthnLevel, AuthnSvc, util.toPointer(AuthIdentity), AuthzSvc, util.toPointer(SecurityQos));
}

export function RpcBindingSetAuthInfoW(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  ServerPrincName: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthnLevel: number /* u32 */,
  AuthnSvc: number /* u32 */,
  AuthIdentity: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthzSvc: number /* u32 */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcBindingSetAuthInfoW(util.toPointer(Binding), util.toPointer(ServerPrincName), AuthnLevel, AuthnSvc, util.toPointer(AuthIdentity), AuthzSvc);
}

export function RpcBindingSetAuthInfoExW(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  ServerPrincName: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthnLevel: number /* u32 */,
  AuthnSvc: number /* u32 */,
  AuthIdentity: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthzSvc: number /* u32 */,
  SecurityQOS: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcBindingSetAuthInfoExW(util.toPointer(Binding), util.toPointer(ServerPrincName), AuthnLevel, AuthnSvc, util.toPointer(AuthIdentity), AuthzSvc, util.toPointer(SecurityQOS));
}

export function RpcBindingInqAuthInfoExA(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  ServerPrincName: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthnLevel: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthnSvc: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthIdentity: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthzSvc: Deno.PointerValue | Uint8Array | null /* ptr */,
  RpcQosVersion: number /* u32 */,
  SecurityQOS: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcBindingInqAuthInfoExA(util.toPointer(Binding), util.toPointer(ServerPrincName), util.toPointer(AuthnLevel), util.toPointer(AuthnSvc), util.toPointer(AuthIdentity), util.toPointer(AuthzSvc), RpcQosVersion, util.toPointer(SecurityQOS));
}

export function RpcBindingInqAuthInfoExW(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  ServerPrincName: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthnLevel: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthnSvc: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthIdentity: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthzSvc: Deno.PointerValue | Uint8Array | null /* ptr */,
  RpcQosVersion: number /* u32 */,
  SecurityQOS: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcBindingInqAuthInfoExW(util.toPointer(Binding), util.toPointer(ServerPrincName), util.toPointer(AuthnLevel), util.toPointer(AuthnSvc), util.toPointer(AuthIdentity), util.toPointer(AuthzSvc), RpcQosVersion, util.toPointer(SecurityQOS));
}

export function RpcServerCompleteSecurityCallback(
  BindingHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  Status: RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerCompleteSecurityCallback(util.toPointer(BindingHandle), Status);
}

export function RpcServerRegisterAuthInfoA(
  ServerPrincName: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthnSvc: number /* u32 */,
  GetKeyFn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Rpc.RPC_AUTH_KEY_RETRIEVAL_FN */,
  Arg: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerRegisterAuthInfoA(util.toPointer(ServerPrincName), AuthnSvc, util.toPointer(GetKeyFn), util.toPointer(Arg));
}

export function RpcServerRegisterAuthInfoW(
  ServerPrincName: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthnSvc: number /* u32 */,
  GetKeyFn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Rpc.RPC_AUTH_KEY_RETRIEVAL_FN */,
  Arg: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerRegisterAuthInfoW(util.toPointer(ServerPrincName), AuthnSvc, util.toPointer(GetKeyFn), util.toPointer(Arg));
}

export function RpcBindingServerFromClient(
  ClientBinding: Deno.PointerValue | Uint8Array | null /* ptr */,
  ServerBinding: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcBindingServerFromClient(util.toPointer(ClientBinding), util.toPointer(ServerBinding));
}

export function RpcRaiseException(
  exception: RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */,
): void /* void */ {
  return libRPCRT4_dll.RpcRaiseException(exception);
}

export function RpcTestCancel(): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcTestCancel();
}

export function RpcServerTestCancel(
  BindingHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerTestCancel(util.toPointer(BindingHandle));
}

export function RpcCancelThread(
  Thread: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcCancelThread(util.toPointer(Thread));
}

export function RpcCancelThreadEx(
  Thread: Deno.PointerValue | Uint8Array | null /* ptr */,
  Timeout: number /* i32 */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcCancelThreadEx(util.toPointer(Thread), Timeout);
}

export function UuidCreate(
  Uuid: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.UuidCreate(util.toPointer(Uuid));
}

export function UuidCreateSequential(
  Uuid: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.UuidCreateSequential(util.toPointer(Uuid));
}

export function UuidToStringA(
  Uuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  StringUuid: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.UuidToStringA(util.toPointer(Uuid), util.toPointer(StringUuid));
}

export function UuidFromStringA(
  StringUuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  Uuid: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.UuidFromStringA(util.toPointer(StringUuid), util.toPointer(Uuid));
}

export function UuidToStringW(
  Uuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  StringUuid: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.UuidToStringW(util.toPointer(Uuid), util.toPointer(StringUuid));
}

export function UuidFromStringW(
  StringUuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  Uuid: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.UuidFromStringW(util.toPointer(StringUuid), util.toPointer(Uuid));
}

export function UuidCompare(
  Uuid1: Deno.PointerValue | Uint8Array | null /* ptr */,
  Uuid2: Deno.PointerValue | Uint8Array | null /* ptr */,
  Status: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libRPCRT4_dll.UuidCompare(util.toPointer(Uuid1), util.toPointer(Uuid2), util.toPointer(Status));
}

export function UuidCreateNil(
  NilUuid: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.UuidCreateNil(util.toPointer(NilUuid));
}

export function UuidEqual(
  Uuid1: Deno.PointerValue | Uint8Array | null /* ptr */,
  Uuid2: Deno.PointerValue | Uint8Array | null /* ptr */,
  Status: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libRPCRT4_dll.UuidEqual(util.toPointer(Uuid1), util.toPointer(Uuid2), util.toPointer(Status));
}

export function UuidHash(
  Uuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  Status: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u16 */ {
  return libRPCRT4_dll.UuidHash(util.toPointer(Uuid), util.toPointer(Status));
}

export function UuidIsNil(
  Uuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  Status: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libRPCRT4_dll.UuidIsNil(util.toPointer(Uuid), util.toPointer(Status));
}

export function RpcEpRegisterNoReplaceA(
  IfSpec: Deno.PointerValue | Uint8Array | null /* ptr */,
  BindingVector: Deno.PointerValue | Uint8Array | null /* ptr */,
  UuidVector: Deno.PointerValue | Uint8Array | null /* ptr */,
  Annotation: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcEpRegisterNoReplaceA(util.toPointer(IfSpec), util.toPointer(BindingVector), util.toPointer(UuidVector), util.toPointer(Annotation));
}

export function RpcEpRegisterNoReplaceW(
  IfSpec: Deno.PointerValue | Uint8Array | null /* ptr */,
  BindingVector: Deno.PointerValue | Uint8Array | null /* ptr */,
  UuidVector: Deno.PointerValue | Uint8Array | null /* ptr */,
  Annotation: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcEpRegisterNoReplaceW(util.toPointer(IfSpec), util.toPointer(BindingVector), util.toPointer(UuidVector), util.toPointer(Annotation));
}

export function RpcEpRegisterA(
  IfSpec: Deno.PointerValue | Uint8Array | null /* ptr */,
  BindingVector: Deno.PointerValue | Uint8Array | null /* ptr */,
  UuidVector: Deno.PointerValue | Uint8Array | null /* ptr */,
  Annotation: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcEpRegisterA(util.toPointer(IfSpec), util.toPointer(BindingVector), util.toPointer(UuidVector), util.toPointer(Annotation));
}

export function RpcEpRegisterW(
  IfSpec: Deno.PointerValue | Uint8Array | null /* ptr */,
  BindingVector: Deno.PointerValue | Uint8Array | null /* ptr */,
  UuidVector: Deno.PointerValue | Uint8Array | null /* ptr */,
  Annotation: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcEpRegisterW(util.toPointer(IfSpec), util.toPointer(BindingVector), util.toPointer(UuidVector), util.toPointer(Annotation));
}

export function RpcEpUnregister(
  IfSpec: Deno.PointerValue | Uint8Array | null /* ptr */,
  BindingVector: Deno.PointerValue | Uint8Array | null /* ptr */,
  UuidVector: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcEpUnregister(util.toPointer(IfSpec), util.toPointer(BindingVector), util.toPointer(UuidVector));
}

export function DceErrorInqTextA(
  RpcStatus: RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */,
  ErrorText: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.DceErrorInqTextA(RpcStatus, util.toPointer(ErrorText));
}

export function DceErrorInqTextW(
  RpcStatus: RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */,
  ErrorText: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.DceErrorInqTextW(RpcStatus, util.toPointer(ErrorText));
}

export function RpcMgmtEpEltInqBegin(
  EpBinding: Deno.PointerValue | Uint8Array | null /* ptr */,
  InquiryType: number /* u32 */,
  IfId: Deno.PointerValue | Uint8Array | null /* ptr */,
  VersOption: number /* u32 */,
  ObjectUuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  InquiryContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcMgmtEpEltInqBegin(util.toPointer(EpBinding), InquiryType, util.toPointer(IfId), VersOption, util.toPointer(ObjectUuid), util.toPointer(InquiryContext));
}

export function RpcMgmtEpEltInqDone(
  InquiryContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcMgmtEpEltInqDone(util.toPointer(InquiryContext));
}

export function RpcMgmtEpEltInqNextA(
  InquiryContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  IfId: Deno.PointerValue | Uint8Array | null /* ptr */,
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectUuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  Annotation: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcMgmtEpEltInqNextA(util.toPointer(InquiryContext), util.toPointer(IfId), util.toPointer(Binding), util.toPointer(ObjectUuid), util.toPointer(Annotation));
}

export function RpcMgmtEpEltInqNextW(
  InquiryContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  IfId: Deno.PointerValue | Uint8Array | null /* ptr */,
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectUuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  Annotation: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcMgmtEpEltInqNextW(util.toPointer(InquiryContext), util.toPointer(IfId), util.toPointer(Binding), util.toPointer(ObjectUuid), util.toPointer(Annotation));
}

export function RpcMgmtEpUnregister(
  EpBinding: Deno.PointerValue | Uint8Array | null /* ptr */,
  IfId: Deno.PointerValue | Uint8Array | null /* ptr */,
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectUuid: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcMgmtEpUnregister(util.toPointer(EpBinding), util.toPointer(IfId), util.toPointer(Binding), util.toPointer(ObjectUuid));
}

export function RpcMgmtSetAuthorizationFn(
  AuthorizationFn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Rpc.RPC_MGMT_AUTHORIZATION_FN */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcMgmtSetAuthorizationFn(util.toPointer(AuthorizationFn));
}

export function RpcExceptionFilter(
  ExceptionCode: number /* u32 */,
): number /* i32 */ {
  return libRPCRT4_dll.RpcExceptionFilter(ExceptionCode);
}

export function RpcServerInterfaceGroupCreateW(
  Interfaces: Deno.PointerValue | Uint8Array | null /* ptr */,
  NumIfs: number /* u32 */,
  Endpoints: Deno.PointerValue | Uint8Array | null /* ptr */,
  NumEndpoints: number /* u32 */,
  IdlePeriod: number /* u32 */,
  IdleCallbackFn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Rpc.RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN */,
  IdleCallbackContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  IfGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerInterfaceGroupCreateW(util.toPointer(Interfaces), NumIfs, util.toPointer(Endpoints), NumEndpoints, IdlePeriod, util.toPointer(IdleCallbackFn), util.toPointer(IdleCallbackContext), util.toPointer(IfGroup));
}

export function RpcServerInterfaceGroupCreateA(
  Interfaces: Deno.PointerValue | Uint8Array | null /* ptr */,
  NumIfs: number /* u32 */,
  Endpoints: Deno.PointerValue | Uint8Array | null /* ptr */,
  NumEndpoints: number /* u32 */,
  IdlePeriod: number /* u32 */,
  IdleCallbackFn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Rpc.RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN */,
  IdleCallbackContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  IfGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerInterfaceGroupCreateA(util.toPointer(Interfaces), NumIfs, util.toPointer(Endpoints), NumEndpoints, IdlePeriod, util.toPointer(IdleCallbackFn), util.toPointer(IdleCallbackContext), util.toPointer(IfGroup));
}

export function RpcServerInterfaceGroupClose(
  IfGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerInterfaceGroupClose(util.toPointer(IfGroup));
}

export function RpcServerInterfaceGroupActivate(
  IfGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerInterfaceGroupActivate(util.toPointer(IfGroup));
}

export function RpcServerInterfaceGroupDeactivate(
  IfGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  ForceDeactivation: number /* u32 */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerInterfaceGroupDeactivate(util.toPointer(IfGroup), ForceDeactivation);
}

export function RpcServerInterfaceGroupInqBindings(
  IfGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  BindingVector: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerInterfaceGroupInqBindings(util.toPointer(IfGroup), util.toPointer(BindingVector));
}

export function I_RpcNegotiateTransferSyntax(
  Message: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcNegotiateTransferSyntax(util.toPointer(Message));
}

export function I_RpcGetBuffer(
  Message: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcGetBuffer(util.toPointer(Message));
}

export function I_RpcGetBufferWithObject(
  Message: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectUuid: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcGetBufferWithObject(util.toPointer(Message), util.toPointer(ObjectUuid));
}

export function I_RpcSendReceive(
  Message: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcSendReceive(util.toPointer(Message));
}

export function I_RpcFreeBuffer(
  Message: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcFreeBuffer(util.toPointer(Message));
}

export function I_RpcSend(
  Message: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcSend(util.toPointer(Message));
}

export function I_RpcReceive(
  Message: Deno.PointerValue | Uint8Array | null /* ptr */,
  Size: number /* u32 */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcReceive(util.toPointer(Message), Size);
}

export function I_RpcFreePipeBuffer(
  Message: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcFreePipeBuffer(util.toPointer(Message));
}

export function I_RpcReallocPipeBuffer(
  Message: Deno.PointerValue | Uint8Array | null /* ptr */,
  NewSize: number /* u32 */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcReallocPipeBuffer(util.toPointer(Message), NewSize);
}

export function I_RpcRequestMutex(
  Mutex: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.I_RpcRequestMutex(util.toPointer(Mutex));
}

export function I_RpcClearMutex(
  Mutex: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.I_RpcClearMutex(util.toPointer(Mutex));
}

export function I_RpcDeleteMutex(
  Mutex: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.I_RpcDeleteMutex(util.toPointer(Mutex));
}

export function I_RpcAllocate(
  Size: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.I_RpcAllocate(Size));
}

export function I_RpcFree(
  Object: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.I_RpcFree(util.toPointer(Object));
}

export function I_RpcPauseExecution(
  Milliseconds: number /* u32 */,
): void /* void */ {
  return libRPCRT4_dll.I_RpcPauseExecution(Milliseconds);
}

export function I_RpcGetExtendedError(): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcGetExtendedError();
}

export function I_RpcSystemHandleTypeSpecificWork(
  Handle: Deno.PointerValue | Uint8Array | null /* ptr */,
  ActualType: number /* u8 */,
  IdlType: number /* u8 */,
  MarshalDirection: LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION /* Windows.Win32.System.Rpc.LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcSystemHandleTypeSpecificWork(util.toPointer(Handle), ActualType, IdlType, MarshalDirection);
}

export function I_RpcGetCurrentCallHandle(): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.I_RpcGetCurrentCallHandle());
}

export function I_RpcNsInterfaceExported(
  EntryNameSyntax: number /* u32 */,
  EntryName: Deno.PointerValue | Uint8Array | null /* ptr */,
  RpcInterfaceInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcNsInterfaceExported(EntryNameSyntax, util.toPointer(EntryName), util.toPointer(RpcInterfaceInformation));
}

export function I_RpcNsInterfaceUnexported(
  EntryNameSyntax: number /* u32 */,
  EntryName: Deno.PointerValue | Uint8Array | null /* ptr */,
  RpcInterfaceInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcNsInterfaceUnexported(EntryNameSyntax, util.toPointer(EntryName), util.toPointer(RpcInterfaceInformation));
}

export function I_RpcBindingToStaticStringBindingW(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  StringBinding: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcBindingToStaticStringBindingW(util.toPointer(Binding), util.toPointer(StringBinding));
}

export function I_RpcBindingInqSecurityContext(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  SecurityContextHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcBindingInqSecurityContext(util.toPointer(Binding), util.toPointer(SecurityContextHandle));
}

export function I_RpcBindingInqSecurityContextKeyInfo(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  KeyInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcBindingInqSecurityContextKeyInfo(util.toPointer(Binding), util.toPointer(KeyInfo));
}

export function I_RpcBindingInqWireIdForSnego(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  WireId: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcBindingInqWireIdForSnego(util.toPointer(Binding), util.toPointer(WireId));
}

export function I_RpcBindingInqMarshalledTargetInfo(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  MarshalledTargetInfoSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  MarshalledTargetInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcBindingInqMarshalledTargetInfo(util.toPointer(Binding), util.toPointer(MarshalledTargetInfoSize), util.toPointer(MarshalledTargetInfo));
}

export function I_RpcBindingInqLocalClientPID(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  Pid: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcBindingInqLocalClientPID(util.toPointer(Binding), util.toPointer(Pid));
}

export function I_RpcBindingHandleToAsyncHandle(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  AsyncHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcBindingHandleToAsyncHandle(util.toPointer(Binding), util.toPointer(AsyncHandle));
}

export function I_RpcNsBindingSetEntryNameW(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  EntryNameSyntax: number /* u32 */,
  EntryName: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcNsBindingSetEntryNameW(util.toPointer(Binding), EntryNameSyntax, util.toPointer(EntryName));
}

export function I_RpcNsBindingSetEntryNameA(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  EntryNameSyntax: number /* u32 */,
  EntryName: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcNsBindingSetEntryNameA(util.toPointer(Binding), EntryNameSyntax, util.toPointer(EntryName));
}

export function I_RpcServerUseProtseqEp2A(
  NetworkAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  Protseq: Deno.PointerValue | Uint8Array | null /* ptr */,
  MaxCalls: number /* u32 */,
  Endpoint: Deno.PointerValue | Uint8Array | null /* ptr */,
  SecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  Policy: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcServerUseProtseqEp2A(util.toPointer(NetworkAddress), util.toPointer(Protseq), MaxCalls, util.toPointer(Endpoint), util.toPointer(SecurityDescriptor), util.toPointer(Policy));
}

export function I_RpcServerUseProtseqEp2W(
  NetworkAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  Protseq: Deno.PointerValue | Uint8Array | null /* ptr */,
  MaxCalls: number /* u32 */,
  Endpoint: Deno.PointerValue | Uint8Array | null /* ptr */,
  SecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  Policy: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcServerUseProtseqEp2W(util.toPointer(NetworkAddress), util.toPointer(Protseq), MaxCalls, util.toPointer(Endpoint), util.toPointer(SecurityDescriptor), util.toPointer(Policy));
}

export function I_RpcServerUseProtseq2W(
  NetworkAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  Protseq: Deno.PointerValue | Uint8Array | null /* ptr */,
  MaxCalls: number /* u32 */,
  SecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  Policy: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcServerUseProtseq2W(util.toPointer(NetworkAddress), util.toPointer(Protseq), MaxCalls, util.toPointer(SecurityDescriptor), util.toPointer(Policy));
}

export function I_RpcServerUseProtseq2A(
  NetworkAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  Protseq: Deno.PointerValue | Uint8Array | null /* ptr */,
  MaxCalls: number /* u32 */,
  SecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  Policy: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcServerUseProtseq2A(util.toPointer(NetworkAddress), util.toPointer(Protseq), MaxCalls, util.toPointer(SecurityDescriptor), util.toPointer(Policy));
}

export function I_RpcServerStartService(
  Protseq: Deno.PointerValue | Uint8Array | null /* ptr */,
  Endpoint: Deno.PointerValue | Uint8Array | null /* ptr */,
  IfSpec: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcServerStartService(util.toPointer(Protseq), util.toPointer(Endpoint), util.toPointer(IfSpec));
}

export function I_RpcBindingInqDynamicEndpointW(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  DynamicEndpoint: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcBindingInqDynamicEndpointW(util.toPointer(Binding), util.toPointer(DynamicEndpoint));
}

export function I_RpcBindingInqDynamicEndpointA(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  DynamicEndpoint: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcBindingInqDynamicEndpointA(util.toPointer(Binding), util.toPointer(DynamicEndpoint));
}

export function I_RpcServerCheckClientRestriction(
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcServerCheckClientRestriction(util.toPointer(Context));
}

export function I_RpcBindingInqTransportType(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  Type: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcBindingInqTransportType(util.toPointer(Binding), util.toPointer(Type));
}

export function I_RpcIfInqTransferSyntaxes(
  RpcIfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  TransferSyntaxes: Deno.PointerValue | Uint8Array | null /* ptr */,
  TransferSyntaxSize: number /* u32 */,
  TransferSyntaxCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcIfInqTransferSyntaxes(util.toPointer(RpcIfHandle), util.toPointer(TransferSyntaxes), TransferSyntaxSize, util.toPointer(TransferSyntaxCount));
}

export function I_UuidCreate(
  Uuid: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_UuidCreate(util.toPointer(Uuid));
}

export function I_RpcBindingCopy(
  SourceBinding: Deno.PointerValue | Uint8Array | null /* ptr */,
  DestinationBinding: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcBindingCopy(util.toPointer(SourceBinding), util.toPointer(DestinationBinding));
}

export function I_RpcBindingIsClientLocal(
  BindingHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  ClientLocalFlag: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcBindingIsClientLocal(util.toPointer(BindingHandle), util.toPointer(ClientLocalFlag));
}

export function I_RpcBindingCreateNP(
  ServerName: Deno.PointerValue | Uint8Array | null /* ptr */,
  ServiceName: Deno.PointerValue | Uint8Array | null /* ptr */,
  NetworkOptions: Deno.PointerValue | Uint8Array | null /* ptr */,
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcBindingCreateNP(util.toPointer(ServerName), util.toPointer(ServiceName), util.toPointer(NetworkOptions), util.toPointer(Binding));
}

export function I_RpcSsDontSerializeContext(): void /* void */ {
  return libRPCRT4_dll.I_RpcSsDontSerializeContext();
}

export function I_RpcServerRegisterForwardFunction(
  pForwardFunction: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcServerRegisterForwardFunction(util.toPointer(pForwardFunction));
}

export function I_RpcServerInqAddressChangeFn(): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.I_RpcServerInqAddressChangeFn());
}

export function I_RpcServerSetAddressChangeFn(
  pAddressChangeFn: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcServerSetAddressChangeFn(util.toPointer(pAddressChangeFn));
}

export function I_RpcServerInqLocalConnAddress(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  AddressFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcServerInqLocalConnAddress(util.toPointer(Binding), util.toPointer(Buffer), util.toPointer(BufferSize), util.toPointer(AddressFormat));
}

export function I_RpcServerInqRemoteConnAddress(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  AddressFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcServerInqRemoteConnAddress(util.toPointer(Binding), util.toPointer(Buffer), util.toPointer(BufferSize), util.toPointer(AddressFormat));
}

export function I_RpcSessionStrictContextHandle(): void /* void */ {
  return libRPCRT4_dll.I_RpcSessionStrictContextHandle();
}

export function I_RpcTurnOnEEInfoPropagation(): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcTurnOnEEInfoPropagation();
}

export function I_RpcServerInqTransportType(
  Type: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcServerInqTransportType(util.toPointer(Type));
}

export function I_RpcMapWin32Status(
  Status: RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */,
): number /* i32 */ {
  return libRPCRT4_dll.I_RpcMapWin32Status(Status);
}

export function I_RpcRecordCalloutFailure(
  RpcStatus: RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */,
  CallOutState: Deno.PointerValue | Uint8Array | null /* ptr */,
  DllName: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.I_RpcRecordCalloutFailure(RpcStatus, util.toPointer(CallOutState), util.toPointer(DllName));
}

export function I_RpcMgmtEnableDedicatedThreadPool(): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcMgmtEnableDedicatedThreadPool();
}

export function I_RpcGetDefaultSD(
  ppSecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcGetDefaultSD(util.toPointer(ppSecurityDescriptor));
}

export function I_RpcOpenClientProcess(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  DesiredAccess: number /* u32 */,
  ClientProcess: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcOpenClientProcess(util.toPointer(Binding), DesiredAccess, util.toPointer(ClientProcess));
}

export function I_RpcBindingIsServerLocal(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  ServerLocalFlag: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcBindingIsServerLocal(util.toPointer(Binding), util.toPointer(ServerLocalFlag));
}

export function I_RpcBindingSetPrivateOption(
  hBinding: Deno.PointerValue | Uint8Array | null /* ptr */,
  option: number /* u32 */,
  optionValue: Deno.PointerValue /* usize */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcBindingSetPrivateOption(util.toPointer(hBinding), option, optionValue);
}

export function I_RpcServerSubscribeForDisconnectNotification(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  hEvent: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcServerSubscribeForDisconnectNotification(util.toPointer(Binding), util.toPointer(hEvent));
}

export function I_RpcServerGetAssociationID(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  AssociationID: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcServerGetAssociationID(util.toPointer(Binding), util.toPointer(AssociationID));
}

export function I_RpcServerDisableExceptionFilter(): number /* i32 */ {
  return libRPCRT4_dll.I_RpcServerDisableExceptionFilter();
}

export function I_RpcServerSubscribeForDisconnectNotification2(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  hEvent: Deno.PointerValue | Uint8Array | null /* ptr */,
  SubscriptionId: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcServerSubscribeForDisconnectNotification2(util.toPointer(Binding), util.toPointer(hEvent), util.toPointer(SubscriptionId));
}

export function I_RpcServerUnsubscribeForDisconnectNotification(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  SubscriptionId: Uint8Array | Deno.PointerValue | null /* System.Guid */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcServerUnsubscribeForDisconnectNotification(util.toPointer(Binding), util.toPointer(SubscriptionId));
}

export function RpcNsBindingExportA(
  EntryNameSyntax: number /* u32 */,
  EntryName: Deno.PointerValue | Uint8Array | null /* ptr */,
  IfSpec: Deno.PointerValue | Uint8Array | null /* ptr */,
  BindingVec: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectUuidVec: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsBindingExportA(EntryNameSyntax, util.toPointer(EntryName), util.toPointer(IfSpec), util.toPointer(BindingVec), util.toPointer(ObjectUuidVec));
}

export function RpcNsBindingUnexportA(
  EntryNameSyntax: number /* u32 */,
  EntryName: Deno.PointerValue | Uint8Array | null /* ptr */,
  IfSpec: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectUuidVec: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsBindingUnexportA(EntryNameSyntax, util.toPointer(EntryName), util.toPointer(IfSpec), util.toPointer(ObjectUuidVec));
}

export function RpcNsBindingExportW(
  EntryNameSyntax: number /* u32 */,
  EntryName: Deno.PointerValue | Uint8Array | null /* ptr */,
  IfSpec: Deno.PointerValue | Uint8Array | null /* ptr */,
  BindingVec: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectUuidVec: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsBindingExportW(EntryNameSyntax, util.toPointer(EntryName), util.toPointer(IfSpec), util.toPointer(BindingVec), util.toPointer(ObjectUuidVec));
}

export function RpcNsBindingUnexportW(
  EntryNameSyntax: number /* u32 */,
  EntryName: Deno.PointerValue | Uint8Array | null /* ptr */,
  IfSpec: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectUuidVec: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsBindingUnexportW(EntryNameSyntax, util.toPointer(EntryName), util.toPointer(IfSpec), util.toPointer(ObjectUuidVec));
}

export function RpcNsBindingExportPnPA(
  EntryNameSyntax: number /* u32 */,
  EntryName: Deno.PointerValue | Uint8Array | null /* ptr */,
  IfSpec: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectVector: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsBindingExportPnPA(EntryNameSyntax, util.toPointer(EntryName), util.toPointer(IfSpec), util.toPointer(ObjectVector));
}

export function RpcNsBindingUnexportPnPA(
  EntryNameSyntax: number /* u32 */,
  EntryName: Deno.PointerValue | Uint8Array | null /* ptr */,
  IfSpec: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectVector: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsBindingUnexportPnPA(EntryNameSyntax, util.toPointer(EntryName), util.toPointer(IfSpec), util.toPointer(ObjectVector));
}

export function RpcNsBindingExportPnPW(
  EntryNameSyntax: number /* u32 */,
  EntryName: Deno.PointerValue | Uint8Array | null /* ptr */,
  IfSpec: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectVector: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsBindingExportPnPW(EntryNameSyntax, util.toPointer(EntryName), util.toPointer(IfSpec), util.toPointer(ObjectVector));
}

export function RpcNsBindingUnexportPnPW(
  EntryNameSyntax: number /* u32 */,
  EntryName: Deno.PointerValue | Uint8Array | null /* ptr */,
  IfSpec: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectVector: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsBindingUnexportPnPW(EntryNameSyntax, util.toPointer(EntryName), util.toPointer(IfSpec), util.toPointer(ObjectVector));
}

export function RpcNsBindingLookupBeginA(
  EntryNameSyntax: number /* u32 */,
  EntryName: Deno.PointerValue | Uint8Array | null /* ptr */,
  IfSpec: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjUuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  BindingMaxCount: number /* u32 */,
  LookupContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsBindingLookupBeginA(EntryNameSyntax, util.toPointer(EntryName), util.toPointer(IfSpec), util.toPointer(ObjUuid), BindingMaxCount, util.toPointer(LookupContext));
}

export function RpcNsBindingLookupBeginW(
  EntryNameSyntax: number /* u32 */,
  EntryName: Deno.PointerValue | Uint8Array | null /* ptr */,
  IfSpec: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjUuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  BindingMaxCount: number /* u32 */,
  LookupContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsBindingLookupBeginW(EntryNameSyntax, util.toPointer(EntryName), util.toPointer(IfSpec), util.toPointer(ObjUuid), BindingMaxCount, util.toPointer(LookupContext));
}

export function RpcNsBindingLookupNext(
  LookupContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  BindingVec: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsBindingLookupNext(util.toPointer(LookupContext), util.toPointer(BindingVec));
}

export function RpcNsBindingLookupDone(
  LookupContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsBindingLookupDone(util.toPointer(LookupContext));
}

export function RpcNsGroupDeleteA(
  GroupNameSyntax: GROUP_NAME_SYNTAX /* Windows.Win32.System.Rpc.GROUP_NAME_SYNTAX */,
  GroupName: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsGroupDeleteA(GroupNameSyntax, util.toPointer(GroupName));
}

export function RpcNsGroupMbrAddA(
  GroupNameSyntax: number /* u32 */,
  GroupName: Deno.PointerValue | Uint8Array | null /* ptr */,
  MemberNameSyntax: number /* u32 */,
  MemberName: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsGroupMbrAddA(GroupNameSyntax, util.toPointer(GroupName), MemberNameSyntax, util.toPointer(MemberName));
}

export function RpcNsGroupMbrRemoveA(
  GroupNameSyntax: number /* u32 */,
  GroupName: Deno.PointerValue | Uint8Array | null /* ptr */,
  MemberNameSyntax: number /* u32 */,
  MemberName: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsGroupMbrRemoveA(GroupNameSyntax, util.toPointer(GroupName), MemberNameSyntax, util.toPointer(MemberName));
}

export function RpcNsGroupMbrInqBeginA(
  GroupNameSyntax: number /* u32 */,
  GroupName: Deno.PointerValue | Uint8Array | null /* ptr */,
  MemberNameSyntax: number /* u32 */,
  InquiryContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsGroupMbrInqBeginA(GroupNameSyntax, util.toPointer(GroupName), MemberNameSyntax, util.toPointer(InquiryContext));
}

export function RpcNsGroupMbrInqNextA(
  InquiryContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  MemberName: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsGroupMbrInqNextA(util.toPointer(InquiryContext), util.toPointer(MemberName));
}

export function RpcNsGroupDeleteW(
  GroupNameSyntax: GROUP_NAME_SYNTAX /* Windows.Win32.System.Rpc.GROUP_NAME_SYNTAX */,
  GroupName: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsGroupDeleteW(GroupNameSyntax, util.toPointer(GroupName));
}

export function RpcNsGroupMbrAddW(
  GroupNameSyntax: number /* u32 */,
  GroupName: Deno.PointerValue | Uint8Array | null /* ptr */,
  MemberNameSyntax: number /* u32 */,
  MemberName: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsGroupMbrAddW(GroupNameSyntax, util.toPointer(GroupName), MemberNameSyntax, util.toPointer(MemberName));
}

export function RpcNsGroupMbrRemoveW(
  GroupNameSyntax: number /* u32 */,
  GroupName: Deno.PointerValue | Uint8Array | null /* ptr */,
  MemberNameSyntax: number /* u32 */,
  MemberName: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsGroupMbrRemoveW(GroupNameSyntax, util.toPointer(GroupName), MemberNameSyntax, util.toPointer(MemberName));
}

export function RpcNsGroupMbrInqBeginW(
  GroupNameSyntax: number /* u32 */,
  GroupName: Deno.PointerValue | Uint8Array | null /* ptr */,
  MemberNameSyntax: number /* u32 */,
  InquiryContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsGroupMbrInqBeginW(GroupNameSyntax, util.toPointer(GroupName), MemberNameSyntax, util.toPointer(InquiryContext));
}

export function RpcNsGroupMbrInqNextW(
  InquiryContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  MemberName: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsGroupMbrInqNextW(util.toPointer(InquiryContext), util.toPointer(MemberName));
}

export function RpcNsGroupMbrInqDone(
  InquiryContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsGroupMbrInqDone(util.toPointer(InquiryContext));
}

export function RpcNsProfileDeleteA(
  ProfileNameSyntax: number /* u32 */,
  ProfileName: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsProfileDeleteA(ProfileNameSyntax, util.toPointer(ProfileName));
}

export function RpcNsProfileEltAddA(
  ProfileNameSyntax: number /* u32 */,
  ProfileName: Deno.PointerValue | Uint8Array | null /* ptr */,
  IfId: Deno.PointerValue | Uint8Array | null /* ptr */,
  MemberNameSyntax: number /* u32 */,
  MemberName: Deno.PointerValue | Uint8Array | null /* ptr */,
  Priority: number /* u32 */,
  Annotation: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsProfileEltAddA(ProfileNameSyntax, util.toPointer(ProfileName), util.toPointer(IfId), MemberNameSyntax, util.toPointer(MemberName), Priority, util.toPointer(Annotation));
}

export function RpcNsProfileEltRemoveA(
  ProfileNameSyntax: number /* u32 */,
  ProfileName: Deno.PointerValue | Uint8Array | null /* ptr */,
  IfId: Deno.PointerValue | Uint8Array | null /* ptr */,
  MemberNameSyntax: number /* u32 */,
  MemberName: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsProfileEltRemoveA(ProfileNameSyntax, util.toPointer(ProfileName), util.toPointer(IfId), MemberNameSyntax, util.toPointer(MemberName));
}

export function RpcNsProfileEltInqBeginA(
  ProfileNameSyntax: number /* u32 */,
  ProfileName: Deno.PointerValue | Uint8Array | null /* ptr */,
  InquiryType: number /* u32 */,
  IfId: Deno.PointerValue | Uint8Array | null /* ptr */,
  VersOption: number /* u32 */,
  MemberNameSyntax: number /* u32 */,
  MemberName: Deno.PointerValue | Uint8Array | null /* ptr */,
  InquiryContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsProfileEltInqBeginA(ProfileNameSyntax, util.toPointer(ProfileName), InquiryType, util.toPointer(IfId), VersOption, MemberNameSyntax, util.toPointer(MemberName), util.toPointer(InquiryContext));
}

export function RpcNsProfileEltInqNextA(
  InquiryContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  IfId: Deno.PointerValue | Uint8Array | null /* ptr */,
  MemberName: Deno.PointerValue | Uint8Array | null /* ptr */,
  Priority: Deno.PointerValue | Uint8Array | null /* ptr */,
  Annotation: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsProfileEltInqNextA(util.toPointer(InquiryContext), util.toPointer(IfId), util.toPointer(MemberName), util.toPointer(Priority), util.toPointer(Annotation));
}

export function RpcNsProfileDeleteW(
  ProfileNameSyntax: number /* u32 */,
  ProfileName: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsProfileDeleteW(ProfileNameSyntax, util.toPointer(ProfileName));
}

export function RpcNsProfileEltAddW(
  ProfileNameSyntax: number /* u32 */,
  ProfileName: Deno.PointerValue | Uint8Array | null /* ptr */,
  IfId: Deno.PointerValue | Uint8Array | null /* ptr */,
  MemberNameSyntax: number /* u32 */,
  MemberName: Deno.PointerValue | Uint8Array | null /* ptr */,
  Priority: number /* u32 */,
  Annotation: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsProfileEltAddW(ProfileNameSyntax, util.toPointer(ProfileName), util.toPointer(IfId), MemberNameSyntax, util.toPointer(MemberName), Priority, util.toPointer(Annotation));
}

export function RpcNsProfileEltRemoveW(
  ProfileNameSyntax: number /* u32 */,
  ProfileName: Deno.PointerValue | Uint8Array | null /* ptr */,
  IfId: Deno.PointerValue | Uint8Array | null /* ptr */,
  MemberNameSyntax: number /* u32 */,
  MemberName: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsProfileEltRemoveW(ProfileNameSyntax, util.toPointer(ProfileName), util.toPointer(IfId), MemberNameSyntax, util.toPointer(MemberName));
}

export function RpcNsProfileEltInqBeginW(
  ProfileNameSyntax: number /* u32 */,
  ProfileName: Deno.PointerValue | Uint8Array | null /* ptr */,
  InquiryType: number /* u32 */,
  IfId: Deno.PointerValue | Uint8Array | null /* ptr */,
  VersOption: number /* u32 */,
  MemberNameSyntax: number /* u32 */,
  MemberName: Deno.PointerValue | Uint8Array | null /* ptr */,
  InquiryContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsProfileEltInqBeginW(ProfileNameSyntax, util.toPointer(ProfileName), InquiryType, util.toPointer(IfId), VersOption, MemberNameSyntax, util.toPointer(MemberName), util.toPointer(InquiryContext));
}

export function RpcNsProfileEltInqNextW(
  InquiryContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  IfId: Deno.PointerValue | Uint8Array | null /* ptr */,
  MemberName: Deno.PointerValue | Uint8Array | null /* ptr */,
  Priority: Deno.PointerValue | Uint8Array | null /* ptr */,
  Annotation: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsProfileEltInqNextW(util.toPointer(InquiryContext), util.toPointer(IfId), util.toPointer(MemberName), util.toPointer(Priority), util.toPointer(Annotation));
}

export function RpcNsProfileEltInqDone(
  InquiryContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsProfileEltInqDone(util.toPointer(InquiryContext));
}

export function RpcNsEntryObjectInqBeginA(
  EntryNameSyntax: number /* u32 */,
  EntryName: Deno.PointerValue | Uint8Array | null /* ptr */,
  InquiryContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsEntryObjectInqBeginA(EntryNameSyntax, util.toPointer(EntryName), util.toPointer(InquiryContext));
}

export function RpcNsEntryObjectInqBeginW(
  EntryNameSyntax: number /* u32 */,
  EntryName: Deno.PointerValue | Uint8Array | null /* ptr */,
  InquiryContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsEntryObjectInqBeginW(EntryNameSyntax, util.toPointer(EntryName), util.toPointer(InquiryContext));
}

export function RpcNsEntryObjectInqNext(
  InquiryContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjUuid: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsEntryObjectInqNext(util.toPointer(InquiryContext), util.toPointer(ObjUuid));
}

export function RpcNsEntryObjectInqDone(
  InquiryContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsEntryObjectInqDone(util.toPointer(InquiryContext));
}

export function RpcNsEntryExpandNameA(
  EntryNameSyntax: number /* u32 */,
  EntryName: Deno.PointerValue | Uint8Array | null /* ptr */,
  ExpandedName: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsEntryExpandNameA(EntryNameSyntax, util.toPointer(EntryName), util.toPointer(ExpandedName));
}

export function RpcNsMgmtBindingUnexportA(
  EntryNameSyntax: number /* u32 */,
  EntryName: Deno.PointerValue | Uint8Array | null /* ptr */,
  IfId: Deno.PointerValue | Uint8Array | null /* ptr */,
  VersOption: number /* u32 */,
  ObjectUuidVec: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsMgmtBindingUnexportA(EntryNameSyntax, util.toPointer(EntryName), util.toPointer(IfId), VersOption, util.toPointer(ObjectUuidVec));
}

export function RpcNsMgmtEntryCreateA(
  EntryNameSyntax: number /* u32 */,
  EntryName: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsMgmtEntryCreateA(EntryNameSyntax, util.toPointer(EntryName));
}

export function RpcNsMgmtEntryDeleteA(
  EntryNameSyntax: number /* u32 */,
  EntryName: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsMgmtEntryDeleteA(EntryNameSyntax, util.toPointer(EntryName));
}

export function RpcNsMgmtEntryInqIfIdsA(
  EntryNameSyntax: number /* u32 */,
  EntryName: Deno.PointerValue | Uint8Array | null /* ptr */,
  IfIdVec: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsMgmtEntryInqIfIdsA(EntryNameSyntax, util.toPointer(EntryName), util.toPointer(IfIdVec));
}

export function RpcNsMgmtHandleSetExpAge(
  NsHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  ExpirationAge: number /* u32 */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsMgmtHandleSetExpAge(util.toPointer(NsHandle), ExpirationAge);
}

export function RpcNsMgmtInqExpAge(
  ExpirationAge: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsMgmtInqExpAge(util.toPointer(ExpirationAge));
}

export function RpcNsMgmtSetExpAge(
  ExpirationAge: number /* u32 */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsMgmtSetExpAge(ExpirationAge);
}

export function RpcNsEntryExpandNameW(
  EntryNameSyntax: number /* u32 */,
  EntryName: Deno.PointerValue | Uint8Array | null /* ptr */,
  ExpandedName: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsEntryExpandNameW(EntryNameSyntax, util.toPointer(EntryName), util.toPointer(ExpandedName));
}

export function RpcNsMgmtBindingUnexportW(
  EntryNameSyntax: number /* u32 */,
  EntryName: Deno.PointerValue | Uint8Array | null /* ptr */,
  IfId: Deno.PointerValue | Uint8Array | null /* ptr */,
  VersOption: number /* u32 */,
  ObjectUuidVec: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsMgmtBindingUnexportW(EntryNameSyntax, util.toPointer(EntryName), util.toPointer(IfId), VersOption, util.toPointer(ObjectUuidVec));
}

export function RpcNsMgmtEntryCreateW(
  EntryNameSyntax: number /* u32 */,
  EntryName: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsMgmtEntryCreateW(EntryNameSyntax, util.toPointer(EntryName));
}

export function RpcNsMgmtEntryDeleteW(
  EntryNameSyntax: number /* u32 */,
  EntryName: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsMgmtEntryDeleteW(EntryNameSyntax, util.toPointer(EntryName));
}

export function RpcNsMgmtEntryInqIfIdsW(
  EntryNameSyntax: number /* u32 */,
  EntryName: Deno.PointerValue | Uint8Array | null /* ptr */,
  IfIdVec: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsMgmtEntryInqIfIdsW(EntryNameSyntax, util.toPointer(EntryName), util.toPointer(IfIdVec));
}

export function RpcNsBindingImportBeginA(
  EntryNameSyntax: number /* u32 */,
  EntryName: Deno.PointerValue | Uint8Array | null /* ptr */,
  IfSpec: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjUuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ImportContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsBindingImportBeginA(EntryNameSyntax, util.toPointer(EntryName), util.toPointer(IfSpec), util.toPointer(ObjUuid), util.toPointer(ImportContext));
}

export function RpcNsBindingImportBeginW(
  EntryNameSyntax: number /* u32 */,
  EntryName: Deno.PointerValue | Uint8Array | null /* ptr */,
  IfSpec: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjUuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ImportContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsBindingImportBeginW(EntryNameSyntax, util.toPointer(EntryName), util.toPointer(IfSpec), util.toPointer(ObjUuid), util.toPointer(ImportContext));
}

export function RpcNsBindingImportNext(
  ImportContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsBindingImportNext(util.toPointer(ImportContext), util.toPointer(Binding));
}

export function RpcNsBindingImportDone(
  ImportContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsBindingImportDone(util.toPointer(ImportContext));
}

export function RpcNsBindingSelect(
  BindingVec: Deno.PointerValue | Uint8Array | null /* ptr */,
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.RpcNsBindingSelect(util.toPointer(BindingVec), util.toPointer(Binding));
}

export function RpcAsyncRegisterInfo(
  pAsync: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcAsyncRegisterInfo(util.toPointer(pAsync));
}

export function RpcAsyncInitializeHandle(
  pAsync: Deno.PointerValue | Uint8Array | null /* ptr */,
  Size: number /* u32 */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcAsyncInitializeHandle(util.toPointer(pAsync), Size);
}

export function RpcAsyncGetCallStatus(
  pAsync: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcAsyncGetCallStatus(util.toPointer(pAsync));
}

export function RpcAsyncCompleteCall(
  pAsync: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reply: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcAsyncCompleteCall(util.toPointer(pAsync), util.toPointer(Reply));
}

export function RpcAsyncAbortCall(
  pAsync: Deno.PointerValue | Uint8Array | null /* ptr */,
  ExceptionCode: number /* u32 */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcAsyncAbortCall(util.toPointer(pAsync), ExceptionCode);
}

export function RpcAsyncCancelCall(
  pAsync: Deno.PointerValue | Uint8Array | null /* ptr */,
  fAbort: boolean /* Windows.Win32.Foundation.BOOL */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcAsyncCancelCall(util.toPointer(pAsync), util.boolToFfi(fAbort));
}

export function RpcErrorStartEnumeration(
  EnumHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcErrorStartEnumeration(util.toPointer(EnumHandle));
}

export function RpcErrorGetNextRecord(
  EnumHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  CopyStrings: boolean /* Windows.Win32.Foundation.BOOL */,
  ErrorInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcErrorGetNextRecord(util.toPointer(EnumHandle), util.boolToFfi(CopyStrings), util.toPointer(ErrorInfo));
}

export function RpcErrorEndEnumeration(
  EnumHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcErrorEndEnumeration(util.toPointer(EnumHandle));
}

export function RpcErrorResetEnumeration(
  EnumHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcErrorResetEnumeration(util.toPointer(EnumHandle));
}

export function RpcErrorGetNumberOfRecords(
  EnumHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  Records: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcErrorGetNumberOfRecords(util.toPointer(EnumHandle), util.toPointer(Records));
}

export function RpcErrorSaveErrorInfo(
  EnumHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  ErrorBlob: Deno.PointerValue | Uint8Array | null /* ptr */,
  BlobSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcErrorSaveErrorInfo(util.toPointer(EnumHandle), util.toPointer(ErrorBlob), util.toPointer(BlobSize));
}

export function RpcErrorLoadErrorInfo(
  ErrorBlob: Deno.PointerValue | Uint8Array | null /* ptr */,
  BlobSize: Deno.PointerValue /* usize */,
  EnumHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcErrorLoadErrorInfo(util.toPointer(ErrorBlob), BlobSize, util.toPointer(EnumHandle));
}

export function RpcErrorAddRecord(
  ErrorInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcErrorAddRecord(util.toPointer(ErrorInfo));
}

export function RpcErrorClearInformation(): void /* void */ {
  return libRPCRT4_dll.RpcErrorClearInformation();
}

export function RpcGetAuthorizationContextForClient(
  ClientBinding: Deno.PointerValue | Uint8Array | null /* ptr */,
  ImpersonateOnReturn: boolean /* Windows.Win32.Foundation.BOOL */,
  Reserved1: Deno.PointerValue | Uint8Array | null /* ptr */,
  pExpirationTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved2: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LUID */,
  Reserved3: number /* u32 */,
  Reserved4: Deno.PointerValue | Uint8Array | null /* ptr */,
  pAuthzClientContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcGetAuthorizationContextForClient(util.toPointer(ClientBinding), util.boolToFfi(ImpersonateOnReturn), util.toPointer(Reserved1), util.toPointer(pExpirationTime), util.toPointer(Reserved2), Reserved3, util.toPointer(Reserved4), util.toPointer(pAuthzClientContext));
}

export function RpcFreeAuthorizationContext(
  pAuthzClientContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcFreeAuthorizationContext(util.toPointer(pAuthzClientContext));
}

export function RpcSsContextLockExclusive(
  ServerBindingHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  UserContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcSsContextLockExclusive(util.toPointer(ServerBindingHandle), util.toPointer(UserContext));
}

export function RpcSsContextLockShared(
  ServerBindingHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  UserContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcSsContextLockShared(util.toPointer(ServerBindingHandle), util.toPointer(UserContext));
}

export function RpcServerInqCallAttributesW(
  ClientBinding: Deno.PointerValue | Uint8Array | null /* ptr */,
  RpcCallAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerInqCallAttributesW(util.toPointer(ClientBinding), util.toPointer(RpcCallAttributes));
}

export function RpcServerInqCallAttributesA(
  ClientBinding: Deno.PointerValue | Uint8Array | null /* ptr */,
  RpcCallAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerInqCallAttributesA(util.toPointer(ClientBinding), util.toPointer(RpcCallAttributes));
}

export function RpcServerSubscribeForNotification(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  Notification: RPC_NOTIFICATIONS /* Windows.Win32.System.Rpc.RPC_NOTIFICATIONS */,
  NotificationType: RPC_NOTIFICATION_TYPES /* Windows.Win32.System.Rpc.RPC_NOTIFICATION_TYPES */,
  NotificationInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerSubscribeForNotification(util.toPointer(Binding), Notification, NotificationType, util.toPointer(NotificationInfo));
}

export function RpcServerUnsubscribeForNotification(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  Notification: RPC_NOTIFICATIONS /* Windows.Win32.System.Rpc.RPC_NOTIFICATIONS */,
  NotificationsQueued: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcServerUnsubscribeForNotification(util.toPointer(Binding), Notification, util.toPointer(NotificationsQueued));
}

export function RpcBindingBind(
  pAsync: Deno.PointerValue | Uint8Array | null /* ptr */,
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  IfSpec: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcBindingBind(util.toPointer(pAsync), util.toPointer(Binding), util.toPointer(IfSpec));
}

export function RpcBindingUnbind(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcBindingUnbind(util.toPointer(Binding));
}

export function I_RpcAsyncSetHandle(
  Message: Deno.PointerValue | Uint8Array | null /* ptr */,
  pAsync: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcAsyncSetHandle(util.toPointer(Message), util.toPointer(pAsync));
}

export function I_RpcAsyncAbortCall(
  pAsync: Deno.PointerValue | Uint8Array | null /* ptr */,
  ExceptionCode: number /* u32 */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcAsyncAbortCall(util.toPointer(pAsync), ExceptionCode);
}

export function I_RpcExceptionFilter(
  ExceptionCode: number /* u32 */,
): number /* i32 */ {
  return libRPCRT4_dll.I_RpcExceptionFilter(ExceptionCode);
}

export function I_RpcBindingInqClientTokenAttributes(
  Binding: Deno.PointerValue | Uint8Array | null /* ptr */,
  TokenId: Deno.PointerValue | Uint8Array | null /* ptr */,
  AuthenticationId: Deno.PointerValue | Uint8Array | null /* ptr */,
  ModifiedId: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.I_RpcBindingInqClientTokenAttributes(util.toPointer(Binding), util.toPointer(TokenId), util.toPointer(AuthenticationId), util.toPointer(ModifiedId));
}

export function I_RpcNsGetBuffer(
  Message: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.I_RpcNsGetBuffer(util.toPointer(Message));
}

export function I_RpcNsSendReceive(
  Message: Deno.PointerValue | Uint8Array | null /* ptr */,
  Handle: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.I_RpcNsSendReceive(util.toPointer(Message), util.toPointer(Handle));
}

export function I_RpcNsRaiseException(
  Message: Deno.PointerValue | Uint8Array | null /* ptr */,
  Status: RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */,
): void /* void */ {
  return libRPCNS4_dll.I_RpcNsRaiseException(util.toPointer(Message), Status);
}

export function I_RpcReBindBuffer(
  Message: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCNS4_dll.I_RpcReBindBuffer(util.toPointer(Message));
}

export function NDRCContextBinding(
  CContext: Deno.PointerValue /* isize */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NDRCContextBinding(CContext));
}

export function NDRCContextMarshall(
  CContext: Deno.PointerValue /* isize */,
  pBuff: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NDRCContextMarshall(CContext, util.toPointer(pBuff));
}

export function NDRCContextUnmarshall(
  pCContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  hBinding: Deno.PointerValue | Uint8Array | null /* ptr */,
  pBuff: Deno.PointerValue | Uint8Array | null /* ptr */,
  DataRepresentation: number /* u32 */,
): void /* void */ {
  return libRPCRT4_dll.NDRCContextUnmarshall(util.toPointer(pCContext), util.toPointer(hBinding), util.toPointer(pBuff), DataRepresentation);
}

export function NDRSContextMarshall(
  CContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  pBuff: Deno.PointerValue | Uint8Array | null /* ptr */,
  userRunDownIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Rpc.NDR_RUNDOWN */,
): void /* void */ {
  return libRPCRT4_dll.NDRSContextMarshall(util.toPointer(CContext), util.toPointer(pBuff), util.toPointer(userRunDownIn));
}

export function NDRSContextUnmarshall(
  pBuff: Deno.PointerValue | Uint8Array | null /* ptr */,
  DataRepresentation: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NDRSContextUnmarshall(util.toPointer(pBuff), DataRepresentation));
}

export function NDRSContextMarshallEx(
  BindingHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  CContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  pBuff: Deno.PointerValue | Uint8Array | null /* ptr */,
  userRunDownIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Rpc.NDR_RUNDOWN */,
): void /* void */ {
  return libRPCRT4_dll.NDRSContextMarshallEx(util.toPointer(BindingHandle), util.toPointer(CContext), util.toPointer(pBuff), util.toPointer(userRunDownIn));
}

export function NDRSContextMarshall2(
  BindingHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  CContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  pBuff: Deno.PointerValue | Uint8Array | null /* ptr */,
  userRunDownIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Rpc.NDR_RUNDOWN */,
  CtxGuard: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
): void /* void */ {
  return libRPCRT4_dll.NDRSContextMarshall2(util.toPointer(BindingHandle), util.toPointer(CContext), util.toPointer(pBuff), util.toPointer(userRunDownIn), util.toPointer(CtxGuard), Flags);
}

export function NDRSContextUnmarshallEx(
  BindingHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  pBuff: Deno.PointerValue | Uint8Array | null /* ptr */,
  DataRepresentation: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NDRSContextUnmarshallEx(util.toPointer(BindingHandle), util.toPointer(pBuff), DataRepresentation));
}

export function NDRSContextUnmarshall2(
  BindingHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  pBuff: Deno.PointerValue | Uint8Array | null /* ptr */,
  DataRepresentation: number /* u32 */,
  CtxGuard: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NDRSContextUnmarshall2(util.toPointer(BindingHandle), util.toPointer(pBuff), DataRepresentation, util.toPointer(CtxGuard), Flags));
}

export function RpcSsDestroyClientContext(
  ContextHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.RpcSsDestroyClientContext(util.toPointer(ContextHandle));
}

export function NdrSimpleTypeMarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  FormatChar: number /* u8 */,
): void /* void */ {
  return libRPCRT4_dll.NdrSimpleTypeMarshall(util.toPointer(pStubMsg), util.toPointer(pMemory), FormatChar);
}

export function NdrPointerMarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrPointerMarshall(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat)));
}

export function NdrSimpleStructMarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrSimpleStructMarshall(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat)));
}

export function NdrConformantStructMarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrConformantStructMarshall(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat)));
}

export function NdrConformantVaryingStructMarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrConformantVaryingStructMarshall(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat)));
}

export function NdrComplexStructMarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrComplexStructMarshall(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat)));
}

export function NdrFixedArrayMarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrFixedArrayMarshall(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat)));
}

export function NdrConformantArrayMarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrConformantArrayMarshall(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat)));
}

export function NdrConformantVaryingArrayMarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrConformantVaryingArrayMarshall(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat)));
}

export function NdrVaryingArrayMarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrVaryingArrayMarshall(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat)));
}

export function NdrComplexArrayMarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrComplexArrayMarshall(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat)));
}

export function NdrNonConformantStringMarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrNonConformantStringMarshall(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat)));
}

export function NdrConformantStringMarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrConformantStringMarshall(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat)));
}

export function NdrEncapsulatedUnionMarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrEncapsulatedUnionMarshall(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat)));
}

export function NdrNonEncapsulatedUnionMarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrNonEncapsulatedUnionMarshall(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat)));
}

export function NdrByteCountPointerMarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrByteCountPointerMarshall(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat)));
}

export function NdrXmitOrRepAsMarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrXmitOrRepAsMarshall(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat)));
}

export function NdrUserMarshalMarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrUserMarshalMarshall(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat)));
}

export function NdrInterfacePointerMarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrInterfacePointerMarshall(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat)));
}

export function NdrClientContextMarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  ContextHandle: Deno.PointerValue /* isize */,
  fCheck: number /* i32 */,
): void /* void */ {
  return libRPCRT4_dll.NdrClientContextMarshall(util.toPointer(pStubMsg), ContextHandle, fCheck);
}

export function NdrServerContextMarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  ContextHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  RundownRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Rpc.NDR_RUNDOWN */,
): void /* void */ {
  return libRPCRT4_dll.NdrServerContextMarshall(util.toPointer(pStubMsg), util.toPointer(ContextHandle), util.toPointer(RundownRoutine));
}

export function NdrServerContextNewMarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  ContextHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  RundownRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Rpc.NDR_RUNDOWN */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrServerContextNewMarshall(util.toPointer(pStubMsg), util.toPointer(ContextHandle), util.toPointer(RundownRoutine), util.toPointer(pFormat));
}

export function NdrSimpleTypeUnmarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  FormatChar: number /* u8 */,
): void /* void */ {
  return libRPCRT4_dll.NdrSimpleTypeUnmarshall(util.toPointer(pStubMsg), util.toPointer(pMemory), FormatChar);
}

export function NdrRangeUnmarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
  fMustAlloc: number /* u8 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrRangeUnmarshall(util.toPointer(pStubMsg), util.toPointer(ppMemory), util.toPointer(pFormat), fMustAlloc));
}

export function NdrCorrelationInitialize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  CacheSize: number /* u32 */,
  flags: number /* u32 */,
): void /* void */ {
  return libRPCRT4_dll.NdrCorrelationInitialize(util.toPointer(pStubMsg), util.toPointer(pMemory), CacheSize, flags);
}

export function NdrCorrelationPass(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrCorrelationPass(util.toPointer(pStubMsg));
}

export function NdrCorrelationFree(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrCorrelationFree(util.toPointer(pStubMsg));
}

export function NdrPointerUnmarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
  fMustAlloc: number /* u8 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrPointerUnmarshall(util.toPointer(pStubMsg), util.toPointer(ppMemory), util.toPointer(pFormat), fMustAlloc));
}

export function NdrSimpleStructUnmarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
  fMustAlloc: number /* u8 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrSimpleStructUnmarshall(util.toPointer(pStubMsg), util.toPointer(ppMemory), util.toPointer(pFormat), fMustAlloc));
}

export function NdrConformantStructUnmarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
  fMustAlloc: number /* u8 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrConformantStructUnmarshall(util.toPointer(pStubMsg), util.toPointer(ppMemory), util.toPointer(pFormat), fMustAlloc));
}

export function NdrConformantVaryingStructUnmarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
  fMustAlloc: number /* u8 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrConformantVaryingStructUnmarshall(util.toPointer(pStubMsg), util.toPointer(ppMemory), util.toPointer(pFormat), fMustAlloc));
}

export function NdrComplexStructUnmarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
  fMustAlloc: number /* u8 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrComplexStructUnmarshall(util.toPointer(pStubMsg), util.toPointer(ppMemory), util.toPointer(pFormat), fMustAlloc));
}

export function NdrFixedArrayUnmarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
  fMustAlloc: number /* u8 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrFixedArrayUnmarshall(util.toPointer(pStubMsg), util.toPointer(ppMemory), util.toPointer(pFormat), fMustAlloc));
}

export function NdrConformantArrayUnmarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
  fMustAlloc: number /* u8 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrConformantArrayUnmarshall(util.toPointer(pStubMsg), util.toPointer(ppMemory), util.toPointer(pFormat), fMustAlloc));
}

export function NdrConformantVaryingArrayUnmarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
  fMustAlloc: number /* u8 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrConformantVaryingArrayUnmarshall(util.toPointer(pStubMsg), util.toPointer(ppMemory), util.toPointer(pFormat), fMustAlloc));
}

export function NdrVaryingArrayUnmarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
  fMustAlloc: number /* u8 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrVaryingArrayUnmarshall(util.toPointer(pStubMsg), util.toPointer(ppMemory), util.toPointer(pFormat), fMustAlloc));
}

export function NdrComplexArrayUnmarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
  fMustAlloc: number /* u8 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrComplexArrayUnmarshall(util.toPointer(pStubMsg), util.toPointer(ppMemory), util.toPointer(pFormat), fMustAlloc));
}

export function NdrNonConformantStringUnmarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
  fMustAlloc: number /* u8 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrNonConformantStringUnmarshall(util.toPointer(pStubMsg), util.toPointer(ppMemory), util.toPointer(pFormat), fMustAlloc));
}

export function NdrConformantStringUnmarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
  fMustAlloc: number /* u8 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrConformantStringUnmarshall(util.toPointer(pStubMsg), util.toPointer(ppMemory), util.toPointer(pFormat), fMustAlloc));
}

export function NdrEncapsulatedUnionUnmarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
  fMustAlloc: number /* u8 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrEncapsulatedUnionUnmarshall(util.toPointer(pStubMsg), util.toPointer(ppMemory), util.toPointer(pFormat), fMustAlloc));
}

export function NdrNonEncapsulatedUnionUnmarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
  fMustAlloc: number /* u8 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrNonEncapsulatedUnionUnmarshall(util.toPointer(pStubMsg), util.toPointer(ppMemory), util.toPointer(pFormat), fMustAlloc));
}

export function NdrByteCountPointerUnmarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
  fMustAlloc: number /* u8 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrByteCountPointerUnmarshall(util.toPointer(pStubMsg), util.toPointer(ppMemory), util.toPointer(pFormat), fMustAlloc));
}

export function NdrXmitOrRepAsUnmarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
  fMustAlloc: number /* u8 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrXmitOrRepAsUnmarshall(util.toPointer(pStubMsg), util.toPointer(ppMemory), util.toPointer(pFormat), fMustAlloc));
}

export function NdrUserMarshalUnmarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
  fMustAlloc: number /* u8 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrUserMarshalUnmarshall(util.toPointer(pStubMsg), util.toPointer(ppMemory), util.toPointer(pFormat), fMustAlloc));
}

export function NdrInterfacePointerUnmarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
  fMustAlloc: number /* u8 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrInterfacePointerUnmarshall(util.toPointer(pStubMsg), util.toPointer(ppMemory), util.toPointer(pFormat), fMustAlloc));
}

export function NdrClientContextUnmarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pContextHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  BindHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrClientContextUnmarshall(util.toPointer(pStubMsg), util.toPointer(pContextHandle), util.toPointer(BindHandle));
}

export function NdrServerContextUnmarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrServerContextUnmarshall(util.toPointer(pStubMsg)));
}

export function NdrContextHandleInitialize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrContextHandleInitialize(util.toPointer(pStubMsg), util.toPointer(pFormat)));
}

export function NdrServerContextNewUnmarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrServerContextNewUnmarshall(util.toPointer(pStubMsg), util.toPointer(pFormat)));
}

export function NdrPointerBufferSize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrPointerBufferSize(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat));
}

export function NdrSimpleStructBufferSize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrSimpleStructBufferSize(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat));
}

export function NdrConformantStructBufferSize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrConformantStructBufferSize(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat));
}

export function NdrConformantVaryingStructBufferSize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrConformantVaryingStructBufferSize(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat));
}

export function NdrComplexStructBufferSize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrComplexStructBufferSize(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat));
}

export function NdrFixedArrayBufferSize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrFixedArrayBufferSize(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat));
}

export function NdrConformantArrayBufferSize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrConformantArrayBufferSize(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat));
}

export function NdrConformantVaryingArrayBufferSize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrConformantVaryingArrayBufferSize(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat));
}

export function NdrVaryingArrayBufferSize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrVaryingArrayBufferSize(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat));
}

export function NdrComplexArrayBufferSize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrComplexArrayBufferSize(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat));
}

export function NdrConformantStringBufferSize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrConformantStringBufferSize(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat));
}

export function NdrNonConformantStringBufferSize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrNonConformantStringBufferSize(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat));
}

export function NdrEncapsulatedUnionBufferSize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrEncapsulatedUnionBufferSize(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat));
}

export function NdrNonEncapsulatedUnionBufferSize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrNonEncapsulatedUnionBufferSize(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat));
}

export function NdrByteCountPointerBufferSize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrByteCountPointerBufferSize(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat));
}

export function NdrXmitOrRepAsBufferSize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrXmitOrRepAsBufferSize(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat));
}

export function NdrUserMarshalBufferSize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrUserMarshalBufferSize(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat));
}

export function NdrInterfacePointerBufferSize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrInterfacePointerBufferSize(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat));
}

export function NdrContextHandleSize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrContextHandleSize(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat));
}

export function NdrPointerMemorySize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRPCRT4_dll.NdrPointerMemorySize(util.toPointer(pStubMsg), util.toPointer(pFormat));
}

export function NdrSimpleStructMemorySize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRPCRT4_dll.NdrSimpleStructMemorySize(util.toPointer(pStubMsg), util.toPointer(pFormat));
}

export function NdrConformantStructMemorySize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRPCRT4_dll.NdrConformantStructMemorySize(util.toPointer(pStubMsg), util.toPointer(pFormat));
}

export function NdrConformantVaryingStructMemorySize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRPCRT4_dll.NdrConformantVaryingStructMemorySize(util.toPointer(pStubMsg), util.toPointer(pFormat));
}

export function NdrComplexStructMemorySize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRPCRT4_dll.NdrComplexStructMemorySize(util.toPointer(pStubMsg), util.toPointer(pFormat));
}

export function NdrFixedArrayMemorySize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRPCRT4_dll.NdrFixedArrayMemorySize(util.toPointer(pStubMsg), util.toPointer(pFormat));
}

export function NdrConformantArrayMemorySize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRPCRT4_dll.NdrConformantArrayMemorySize(util.toPointer(pStubMsg), util.toPointer(pFormat));
}

export function NdrConformantVaryingArrayMemorySize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRPCRT4_dll.NdrConformantVaryingArrayMemorySize(util.toPointer(pStubMsg), util.toPointer(pFormat));
}

export function NdrVaryingArrayMemorySize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRPCRT4_dll.NdrVaryingArrayMemorySize(util.toPointer(pStubMsg), util.toPointer(pFormat));
}

export function NdrComplexArrayMemorySize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRPCRT4_dll.NdrComplexArrayMemorySize(util.toPointer(pStubMsg), util.toPointer(pFormat));
}

export function NdrConformantStringMemorySize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRPCRT4_dll.NdrConformantStringMemorySize(util.toPointer(pStubMsg), util.toPointer(pFormat));
}

export function NdrNonConformantStringMemorySize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRPCRT4_dll.NdrNonConformantStringMemorySize(util.toPointer(pStubMsg), util.toPointer(pFormat));
}

export function NdrEncapsulatedUnionMemorySize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRPCRT4_dll.NdrEncapsulatedUnionMemorySize(util.toPointer(pStubMsg), util.toPointer(pFormat));
}

export function NdrNonEncapsulatedUnionMemorySize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRPCRT4_dll.NdrNonEncapsulatedUnionMemorySize(util.toPointer(pStubMsg), util.toPointer(pFormat));
}

export function NdrXmitOrRepAsMemorySize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRPCRT4_dll.NdrXmitOrRepAsMemorySize(util.toPointer(pStubMsg), util.toPointer(pFormat));
}

export function NdrUserMarshalMemorySize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRPCRT4_dll.NdrUserMarshalMemorySize(util.toPointer(pStubMsg), util.toPointer(pFormat));
}

export function NdrInterfacePointerMemorySize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRPCRT4_dll.NdrInterfacePointerMemorySize(util.toPointer(pStubMsg), util.toPointer(pFormat));
}

export function NdrPointerFree(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrPointerFree(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat));
}

export function NdrSimpleStructFree(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrSimpleStructFree(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat));
}

export function NdrConformantStructFree(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrConformantStructFree(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat));
}

export function NdrConformantVaryingStructFree(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrConformantVaryingStructFree(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat));
}

export function NdrComplexStructFree(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrComplexStructFree(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat));
}

export function NdrFixedArrayFree(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrFixedArrayFree(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat));
}

export function NdrConformantArrayFree(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrConformantArrayFree(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat));
}

export function NdrConformantVaryingArrayFree(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrConformantVaryingArrayFree(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat));
}

export function NdrVaryingArrayFree(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrVaryingArrayFree(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat));
}

export function NdrComplexArrayFree(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrComplexArrayFree(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat));
}

export function NdrEncapsulatedUnionFree(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrEncapsulatedUnionFree(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat));
}

export function NdrNonEncapsulatedUnionFree(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrNonEncapsulatedUnionFree(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat));
}

export function NdrByteCountPointerFree(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrByteCountPointerFree(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat));
}

export function NdrXmitOrRepAsFree(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrXmitOrRepAsFree(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat));
}

export function NdrUserMarshalFree(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrUserMarshalFree(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat));
}

export function NdrInterfacePointerFree(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrInterfacePointerFree(util.toPointer(pStubMsg), util.toPointer(pMemory), util.toPointer(pFormat));
}

export function NdrConvert2(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
  NumberParams: number /* i32 */,
): void /* void */ {
  return libRPCRT4_dll.NdrConvert2(util.toPointer(pStubMsg), util.toPointer(pFormat), NumberParams);
}

export function NdrConvert(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrConvert(util.toPointer(pStubMsg), util.toPointer(pFormat));
}

export function NdrUserMarshalSimpleTypeConvert(
  pFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
  pBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  FormatChar: number /* u8 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrUserMarshalSimpleTypeConvert(util.toPointer(pFlags), util.toPointer(pBuffer), FormatChar));
}

export function NdrClientInitializeNew(
  pRpcMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pStubDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  ProcNum: number /* u32 */,
): void /* void */ {
  return libRPCRT4_dll.NdrClientInitializeNew(util.toPointer(pRpcMsg), util.toPointer(pStubMsg), util.toPointer(pStubDescriptor), ProcNum);
}

export function NdrServerInitializeNew(
  pRpcMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pStubDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrServerInitializeNew(util.toPointer(pRpcMsg), util.toPointer(pStubMsg), util.toPointer(pStubDescriptor)));
}

export function NdrServerInitializePartial(
  pRpcMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pStubDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  RequestedBufferSize: number /* u32 */,
): void /* void */ {
  return libRPCRT4_dll.NdrServerInitializePartial(util.toPointer(pRpcMsg), util.toPointer(pStubMsg), util.toPointer(pStubDescriptor), RequestedBufferSize);
}

export function NdrClientInitialize(
  pRpcMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pStubDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  ProcNum: number /* u32 */,
): void /* void */ {
  return libRPCRT4_dll.NdrClientInitialize(util.toPointer(pRpcMsg), util.toPointer(pStubMsg), util.toPointer(pStubDescriptor), ProcNum);
}

export function NdrServerInitialize(
  pRpcMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pStubDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrServerInitialize(util.toPointer(pRpcMsg), util.toPointer(pStubMsg), util.toPointer(pStubDescriptor)));
}

export function NdrServerInitializeUnmarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pStubDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  pRpcMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrServerInitializeUnmarshall(util.toPointer(pStubMsg), util.toPointer(pStubDescriptor), util.toPointer(pRpcMsg)));
}

export function NdrServerInitializeMarshall(
  pRpcMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrServerInitializeMarshall(util.toPointer(pRpcMsg), util.toPointer(pStubMsg));
}

export function NdrGetBuffer(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferLength: number /* u32 */,
  Handle: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrGetBuffer(util.toPointer(pStubMsg), BufferLength, util.toPointer(Handle)));
}

export function NdrNsGetBuffer(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferLength: number /* u32 */,
  Handle: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrNsGetBuffer(util.toPointer(pStubMsg), BufferLength, util.toPointer(Handle)));
}

export function NdrSendReceive(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pBufferEnd: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrSendReceive(util.toPointer(pStubMsg), util.toPointer(pBufferEnd)));
}

export function NdrNsSendReceive(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pBufferEnd: Deno.PointerValue | Uint8Array | null /* ptr */,
  pAutoHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrNsSendReceive(util.toPointer(pStubMsg), util.toPointer(pBufferEnd), util.toPointer(pAutoHandle)));
}

export function NdrFreeBuffer(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrFreeBuffer(util.toPointer(pStubMsg));
}

export function NdrGetDcomProtocolVersion(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pVersion: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrGetDcomProtocolVersion(util.toPointer(pStubMsg), util.toPointer(pVersion)));
}

export function NdrClientCall2(
  pStubDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.System.Rpc.CLIENT_CALL_RETURN */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrClientCall2(util.toPointer(pStubDescriptor), util.toPointer(pFormat)));
}

export function NdrAsyncClientCall(
  pStubDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.System.Rpc.CLIENT_CALL_RETURN */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrAsyncClientCall(util.toPointer(pStubDescriptor), util.toPointer(pFormat)));
}

export function NdrDcomAsyncClientCall(
  pStubDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.System.Rpc.CLIENT_CALL_RETURN */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrDcomAsyncClientCall(util.toPointer(pStubDescriptor), util.toPointer(pFormat)));
}

export function NdrAsyncServerCall(
  pRpcMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrAsyncServerCall(util.toPointer(pRpcMsg));
}

export function NdrDcomAsyncStubCall(
  pThis: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IRpcStubBuffer */,
  pChannel: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IRpcChannelBuffer */,
  pRpcMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwStubPhase: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libRPCRT4_dll.NdrDcomAsyncStubCall(util.toPointer(pThis), util.toPointer(pChannel), util.toPointer(pRpcMsg), util.toPointer(pdwStubPhase));
}

export function NdrStubCall2(
  pThis: Deno.PointerValue | Uint8Array | null /* ptr */,
  pChannel: Deno.PointerValue | Uint8Array | null /* ptr */,
  pRpcMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwStubPhase: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libRPCRT4_dll.NdrStubCall2(util.toPointer(pThis), util.toPointer(pChannel), util.toPointer(pRpcMsg), util.toPointer(pdwStubPhase));
}

export function NdrServerCall2(
  pRpcMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrServerCall2(util.toPointer(pRpcMsg));
}

export function NdrMapCommAndFaultStatus(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pCommStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFaultStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
  Status: RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.NdrMapCommAndFaultStatus(util.toPointer(pStubMsg), util.toPointer(pCommStatus), util.toPointer(pFaultStatus), Status);
}

export function RpcSsAllocate(
  Size: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.RpcSsAllocate(Size));
}

export function RpcSsDisableAllocate(): void /* void */ {
  return libRPCRT4_dll.RpcSsDisableAllocate();
}

export function RpcSsEnableAllocate(): void /* void */ {
  return libRPCRT4_dll.RpcSsEnableAllocate();
}

export function RpcSsFree(
  NodeToFree: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.RpcSsFree(util.toPointer(NodeToFree));
}

export function RpcSsGetThreadHandle(): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.RpcSsGetThreadHandle());
}

export function RpcSsSetClientAllocFree(
  ClientAlloc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Rpc.RPC_CLIENT_ALLOC */,
  ClientFree: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Rpc.RPC_CLIENT_FREE */,
): void /* void */ {
  return libRPCRT4_dll.RpcSsSetClientAllocFree(util.toPointer(ClientAlloc), util.toPointer(ClientFree));
}

export function RpcSsSetThreadHandle(
  Id: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.RpcSsSetThreadHandle(util.toPointer(Id));
}

export function RpcSsSwapClientAllocFree(
  ClientAlloc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Rpc.RPC_CLIENT_ALLOC */,
  ClientFree: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Rpc.RPC_CLIENT_FREE */,
  OldClientAlloc: Deno.PointerValue | Uint8Array | null /* ptr */,
  OldClientFree: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.RpcSsSwapClientAllocFree(util.toPointer(ClientAlloc), util.toPointer(ClientFree), util.toPointer(OldClientAlloc), util.toPointer(OldClientFree));
}

export function RpcSmAllocate(
  Size: Deno.PointerValue /* usize */,
  pStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.RpcSmAllocate(Size, util.toPointer(pStatus)));
}

export function RpcSmClientFree(
  pNodeToFree: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcSmClientFree(util.toPointer(pNodeToFree));
}

export function RpcSmDestroyClientContext(
  ContextHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcSmDestroyClientContext(util.toPointer(ContextHandle));
}

export function RpcSmDisableAllocate(): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcSmDisableAllocate();
}

export function RpcSmEnableAllocate(): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcSmEnableAllocate();
}

export function RpcSmFree(
  NodeToFree: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcSmFree(util.toPointer(NodeToFree));
}

export function RpcSmGetThreadHandle(
  pStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.RpcSmGetThreadHandle(util.toPointer(pStatus)));
}

export function RpcSmSetClientAllocFree(
  ClientAlloc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Rpc.RPC_CLIENT_ALLOC */,
  ClientFree: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Rpc.RPC_CLIENT_FREE */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcSmSetClientAllocFree(util.toPointer(ClientAlloc), util.toPointer(ClientFree));
}

export function RpcSmSetThreadHandle(
  Id: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcSmSetThreadHandle(util.toPointer(Id));
}

export function RpcSmSwapClientAllocFree(
  ClientAlloc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Rpc.RPC_CLIENT_ALLOC */,
  ClientFree: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Rpc.RPC_CLIENT_FREE */,
  OldClientAlloc: Deno.PointerValue | Uint8Array | null /* ptr */,
  OldClientFree: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcSmSwapClientAllocFree(util.toPointer(ClientAlloc), util.toPointer(ClientFree), util.toPointer(OldClientAlloc), util.toPointer(OldClientFree));
}

export function NdrRpcSsEnableAllocate(
  pMessage: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrRpcSsEnableAllocate(util.toPointer(pMessage));
}

export function NdrRpcSsDisableAllocate(
  pMessage: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrRpcSsDisableAllocate(util.toPointer(pMessage));
}

export function NdrRpcSmSetClientToOsf(
  pMessage: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrRpcSmSetClientToOsf(util.toPointer(pMessage));
}

export function NdrRpcSmClientAllocate(
  Size: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrRpcSmClientAllocate(Size));
}

export function NdrRpcSmClientFree(
  NodeToFree: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrRpcSmClientFree(util.toPointer(NodeToFree));
}

export function NdrRpcSsDefaultAllocate(
  Size: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrRpcSsDefaultAllocate(Size));
}

export function NdrRpcSsDefaultFree(
  NodeToFree: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrRpcSsDefaultFree(util.toPointer(NodeToFree));
}

export function NdrFullPointerXlatInit(
  NumberOfPointers: number /* u32 */,
  XlatSide: XLAT_SIDE /* Windows.Win32.System.Rpc.XLAT_SIDE */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrFullPointerXlatInit(NumberOfPointers, XlatSide));
}

export function NdrFullPointerXlatFree(
  pXlatTables: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrFullPointerXlatFree(util.toPointer(pXlatTables));
}

export function NdrAllocate(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  Len: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrAllocate(util.toPointer(pStubMsg), Len));
}

export function NdrClearOutParameters(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
  ArgAddr: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrClearOutParameters(util.toPointer(pStubMsg), util.toPointer(pFormat), util.toPointer(ArgAddr));
}

export function NdrOleAllocate(
  Size: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrOleAllocate(Size));
}

export function NdrOleFree(
  NodeToFree: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrOleFree(util.toPointer(NodeToFree));
}

export function NdrGetUserMarshalInfo(
  pFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
  InformationLevel: number /* u32 */,
  pMarshalInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.NdrGetUserMarshalInfo(util.toPointer(pFlags), InformationLevel, util.toPointer(pMarshalInfo));
}

export function NdrCreateServerInterfaceFromStub(
  pStub: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IRpcStubBuffer */,
  pServerIf: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.NdrCreateServerInterfaceFromStub(util.toPointer(pStub), util.toPointer(pServerIf));
}

export function NdrClientCall3(
  pProxyInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  nProcNum: number /* u32 */,
  pReturnValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.System.Rpc.CLIENT_CALL_RETURN */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrClientCall3(util.toPointer(pProxyInfo), nProcNum, util.toPointer(pReturnValue)));
}

export function Ndr64AsyncClientCall(
  pProxyInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  nProcNum: number /* u32 */,
  pReturnValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.System.Rpc.CLIENT_CALL_RETURN */ {
  return util.pointerFromFfi(libRPCRT4_dll.Ndr64AsyncClientCall(util.toPointer(pProxyInfo), nProcNum, util.toPointer(pReturnValue)));
}

export function Ndr64DcomAsyncClientCall(
  pProxyInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  nProcNum: number /* u32 */,
  pReturnValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.System.Rpc.CLIENT_CALL_RETURN */ {
  return util.pointerFromFfi(libRPCRT4_dll.Ndr64DcomAsyncClientCall(util.toPointer(pProxyInfo), nProcNum, util.toPointer(pReturnValue)));
}

export function Ndr64AsyncServerCall64(
  pRpcMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.Ndr64AsyncServerCall64(util.toPointer(pRpcMsg));
}

export function Ndr64AsyncServerCallAll(
  pRpcMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.Ndr64AsyncServerCallAll(util.toPointer(pRpcMsg));
}

export function Ndr64DcomAsyncStubCall(
  pThis: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IRpcStubBuffer */,
  pChannel: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IRpcChannelBuffer */,
  pRpcMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwStubPhase: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libRPCRT4_dll.Ndr64DcomAsyncStubCall(util.toPointer(pThis), util.toPointer(pChannel), util.toPointer(pRpcMsg), util.toPointer(pdwStubPhase));
}

export function NdrStubCall3(
  pThis: Deno.PointerValue | Uint8Array | null /* ptr */,
  pChannel: Deno.PointerValue | Uint8Array | null /* ptr */,
  pRpcMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwStubPhase: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libRPCRT4_dll.NdrStubCall3(util.toPointer(pThis), util.toPointer(pChannel), util.toPointer(pRpcMsg), util.toPointer(pdwStubPhase));
}

export function NdrServerCallAll(
  pRpcMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrServerCallAll(util.toPointer(pRpcMsg));
}

export function NdrServerCallNdr64(
  pRpcMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrServerCallNdr64(util.toPointer(pRpcMsg));
}

export function NdrPartialIgnoreClientMarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrPartialIgnoreClientMarshall(util.toPointer(pStubMsg), util.toPointer(pMemory));
}

export function NdrPartialIgnoreServerUnmarshall(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrPartialIgnoreServerUnmarshall(util.toPointer(pStubMsg), util.toPointer(ppMemory));
}

export function NdrPartialIgnoreClientBufferSize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrPartialIgnoreClientBufferSize(util.toPointer(pStubMsg), util.toPointer(pMemory));
}

export function NdrPartialIgnoreServerInitialize(
  pStubMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppMemory: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrPartialIgnoreServerInitialize(util.toPointer(pStubMsg), util.toPointer(ppMemory), util.toPointer(pFormat));
}

export function RpcUserFree(
  AsyncHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  pBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.RpcUserFree(util.toPointer(AsyncHandle), util.toPointer(pBuffer));
}

export function MesEncodeIncrementalHandleCreate(
  UserState: Deno.PointerValue | Uint8Array | null /* ptr */,
  AllocFn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Rpc.MIDL_ES_ALLOC */,
  WriteFn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Rpc.MIDL_ES_WRITE */,
  pHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.MesEncodeIncrementalHandleCreate(util.toPointer(UserState), util.toPointer(AllocFn), util.toPointer(WriteFn), util.toPointer(pHandle));
}

export function MesDecodeIncrementalHandleCreate(
  UserState: Deno.PointerValue | Uint8Array | null /* ptr */,
  ReadFn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Rpc.MIDL_ES_READ */,
  pHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.MesDecodeIncrementalHandleCreate(util.toPointer(UserState), util.toPointer(ReadFn), util.toPointer(pHandle));
}

export function MesIncrementalHandleReset(
  Handle: Deno.PointerValue | Uint8Array | null /* ptr */,
  UserState: Deno.PointerValue | Uint8Array | null /* ptr */,
  AllocFn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Rpc.MIDL_ES_ALLOC */,
  WriteFn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Rpc.MIDL_ES_WRITE */,
  ReadFn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Rpc.MIDL_ES_READ */,
  Operation: MIDL_ES_CODE /* Windows.Win32.System.Rpc.MIDL_ES_CODE */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.MesIncrementalHandleReset(util.toPointer(Handle), util.toPointer(UserState), util.toPointer(AllocFn), util.toPointer(WriteFn), util.toPointer(ReadFn), Operation);
}

export function MesEncodeFixedBufferHandleCreate(
  pBuffer: string | null /* Windows.Win32.Foundation.PSTR */,
  BufferSize: number /* u32 */,
  pEncodedSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  pHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.MesEncodeFixedBufferHandleCreate(util.pstrToFfi(pBuffer), BufferSize, util.toPointer(pEncodedSize), util.toPointer(pHandle));
}

export function MesEncodeDynBufferHandleCreate(
  pBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  pEncodedSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  pHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.MesEncodeDynBufferHandleCreate(util.toPointer(pBuffer), util.toPointer(pEncodedSize), util.toPointer(pHandle));
}

export function MesDecodeBufferHandleCreate(
  Buffer: string | null /* Windows.Win32.Foundation.PSTR */,
  BufferSize: number /* u32 */,
  pHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.MesDecodeBufferHandleCreate(util.pstrToFfi(Buffer), BufferSize, util.toPointer(pHandle));
}

export function MesBufferHandleReset(
  Handle: Deno.PointerValue | Uint8Array | null /* ptr */,
  HandleStyle: number /* u32 */,
  Operation: MIDL_ES_CODE /* Windows.Win32.System.Rpc.MIDL_ES_CODE */,
  pBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferSize: number /* u32 */,
  pEncodedSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.MesBufferHandleReset(util.toPointer(Handle), HandleStyle, Operation, util.toPointer(pBuffer), BufferSize, util.toPointer(pEncodedSize));
}

export function MesHandleFree(
  Handle: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.MesHandleFree(util.toPointer(Handle));
}

export function MesInqProcEncodingId(
  Handle: Deno.PointerValue | Uint8Array | null /* ptr */,
  pInterfaceId: Deno.PointerValue | Uint8Array | null /* ptr */,
  pProcNum: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.MesInqProcEncodingId(util.toPointer(Handle), util.toPointer(pInterfaceId), util.toPointer(pProcNum));
}

export function NdrMesSimpleTypeAlignSize(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue /* usize */ {
  return libRPCRT4_dll.NdrMesSimpleTypeAlignSize(util.toPointer(param0));
}

export function NdrMesSimpleTypeDecode(
  Handle: Deno.PointerValue | Uint8Array | null /* ptr */,
  pObject: Deno.PointerValue | Uint8Array | null /* ptr */,
  Size: number /* i16 */,
): void /* void */ {
  return libRPCRT4_dll.NdrMesSimpleTypeDecode(util.toPointer(Handle), util.toPointer(pObject), Size);
}

export function NdrMesSimpleTypeEncode(
  Handle: Deno.PointerValue | Uint8Array | null /* ptr */,
  pStubDesc: Deno.PointerValue | Uint8Array | null /* ptr */,
  pObject: Deno.PointerValue | Uint8Array | null /* ptr */,
  Size: number /* i16 */,
): void /* void */ {
  return libRPCRT4_dll.NdrMesSimpleTypeEncode(util.toPointer(Handle), util.toPointer(pStubDesc), util.toPointer(pObject), Size);
}

export function NdrMesTypeAlignSize(
  Handle: Deno.PointerValue | Uint8Array | null /* ptr */,
  pStubDesc: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormatString: Deno.PointerValue | Uint8Array | null /* ptr */,
  pObject: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue /* usize */ {
  return libRPCRT4_dll.NdrMesTypeAlignSize(util.toPointer(Handle), util.toPointer(pStubDesc), util.toPointer(pFormatString), util.toPointer(pObject));
}

export function NdrMesTypeEncode(
  Handle: Deno.PointerValue | Uint8Array | null /* ptr */,
  pStubDesc: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormatString: Deno.PointerValue | Uint8Array | null /* ptr */,
  pObject: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrMesTypeEncode(util.toPointer(Handle), util.toPointer(pStubDesc), util.toPointer(pFormatString), util.toPointer(pObject));
}

export function NdrMesTypeDecode(
  Handle: Deno.PointerValue | Uint8Array | null /* ptr */,
  pStubDesc: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormatString: Deno.PointerValue | Uint8Array | null /* ptr */,
  pObject: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrMesTypeDecode(util.toPointer(Handle), util.toPointer(pStubDesc), util.toPointer(pFormatString), util.toPointer(pObject));
}

export function NdrMesTypeAlignSize2(
  Handle: Deno.PointerValue | Uint8Array | null /* ptr */,
  pPicklingInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pStubDesc: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormatString: Deno.PointerValue | Uint8Array | null /* ptr */,
  pObject: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue /* usize */ {
  return libRPCRT4_dll.NdrMesTypeAlignSize2(util.toPointer(Handle), util.toPointer(pPicklingInfo), util.toPointer(pStubDesc), util.toPointer(pFormatString), util.toPointer(pObject));
}

export function NdrMesTypeEncode2(
  Handle: Deno.PointerValue | Uint8Array | null /* ptr */,
  pPicklingInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pStubDesc: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormatString: Deno.PointerValue | Uint8Array | null /* ptr */,
  pObject: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrMesTypeEncode2(util.toPointer(Handle), util.toPointer(pPicklingInfo), util.toPointer(pStubDesc), util.toPointer(pFormatString), util.toPointer(pObject));
}

export function NdrMesTypeDecode2(
  Handle: Deno.PointerValue | Uint8Array | null /* ptr */,
  pPicklingInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pStubDesc: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormatString: Deno.PointerValue | Uint8Array | null /* ptr */,
  pObject: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrMesTypeDecode2(util.toPointer(Handle), util.toPointer(pPicklingInfo), util.toPointer(pStubDesc), util.toPointer(pFormatString), util.toPointer(pObject));
}

export function NdrMesTypeFree2(
  Handle: Deno.PointerValue | Uint8Array | null /* ptr */,
  pPicklingInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pStubDesc: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormatString: Deno.PointerValue | Uint8Array | null /* ptr */,
  pObject: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrMesTypeFree2(util.toPointer(Handle), util.toPointer(pPicklingInfo), util.toPointer(pStubDesc), util.toPointer(pFormatString), util.toPointer(pObject));
}

export function NdrMesProcEncodeDecode(
  Handle: Deno.PointerValue | Uint8Array | null /* ptr */,
  pStubDesc: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormatString: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrMesProcEncodeDecode(util.toPointer(Handle), util.toPointer(pStubDesc), util.toPointer(pFormatString));
}

export function NdrMesProcEncodeDecode2(
  Handle: Deno.PointerValue | Uint8Array | null /* ptr */,
  pStubDesc: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFormatString: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.System.Rpc.CLIENT_CALL_RETURN */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrMesProcEncodeDecode2(util.toPointer(Handle), util.toPointer(pStubDesc), util.toPointer(pFormatString)));
}

export function NdrMesTypeAlignSize3(
  Handle: Deno.PointerValue | Uint8Array | null /* ptr */,
  pPicklingInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pProxyInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  ArrTypeOffset: Deno.PointerValue | Uint8Array | null /* ptr */,
  nTypeIndex: number /* u32 */,
  pObject: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue /* usize */ {
  return libRPCRT4_dll.NdrMesTypeAlignSize3(util.toPointer(Handle), util.toPointer(pPicklingInfo), util.toPointer(pProxyInfo), util.toPointer(ArrTypeOffset), nTypeIndex, util.toPointer(pObject));
}

export function NdrMesTypeEncode3(
  Handle: Deno.PointerValue | Uint8Array | null /* ptr */,
  pPicklingInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pProxyInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  ArrTypeOffset: Deno.PointerValue | Uint8Array | null /* ptr */,
  nTypeIndex: number /* u32 */,
  pObject: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrMesTypeEncode3(util.toPointer(Handle), util.toPointer(pPicklingInfo), util.toPointer(pProxyInfo), util.toPointer(ArrTypeOffset), nTypeIndex, util.toPointer(pObject));
}

export function NdrMesTypeDecode3(
  Handle: Deno.PointerValue | Uint8Array | null /* ptr */,
  pPicklingInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pProxyInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  ArrTypeOffset: Deno.PointerValue | Uint8Array | null /* ptr */,
  nTypeIndex: number /* u32 */,
  pObject: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrMesTypeDecode3(util.toPointer(Handle), util.toPointer(pPicklingInfo), util.toPointer(pProxyInfo), util.toPointer(ArrTypeOffset), nTypeIndex, util.toPointer(pObject));
}

export function NdrMesTypeFree3(
  Handle: Deno.PointerValue | Uint8Array | null /* ptr */,
  pPicklingInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pProxyInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  ArrTypeOffset: Deno.PointerValue | Uint8Array | null /* ptr */,
  nTypeIndex: number /* u32 */,
  pObject: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRPCRT4_dll.NdrMesTypeFree3(util.toPointer(Handle), util.toPointer(pPicklingInfo), util.toPointer(pProxyInfo), util.toPointer(ArrTypeOffset), nTypeIndex, util.toPointer(pObject));
}

export function NdrMesProcEncodeDecode3(
  Handle: Deno.PointerValue | Uint8Array | null /* ptr */,
  pProxyInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  nProcNum: number /* u32 */,
  pReturnValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.System.Rpc.CLIENT_CALL_RETURN */ {
  return util.pointerFromFfi(libRPCRT4_dll.NdrMesProcEncodeDecode3(util.toPointer(Handle), util.toPointer(pProxyInfo), nProcNum, util.toPointer(pReturnValue)));
}

export function NdrMesSimpleTypeDecodeAll(
  Handle: Deno.PointerValue | Uint8Array | null /* ptr */,
  pProxyInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pObject: Deno.PointerValue | Uint8Array | null /* ptr */,
  Size: number /* i16 */,
): void /* void */ {
  return libRPCRT4_dll.NdrMesSimpleTypeDecodeAll(util.toPointer(Handle), util.toPointer(pProxyInfo), util.toPointer(pObject), Size);
}

export function NdrMesSimpleTypeEncodeAll(
  Handle: Deno.PointerValue | Uint8Array | null /* ptr */,
  pProxyInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pObject: Deno.PointerValue | Uint8Array | null /* ptr */,
  Size: number /* i16 */,
): void /* void */ {
  return libRPCRT4_dll.NdrMesSimpleTypeEncodeAll(util.toPointer(Handle), util.toPointer(pProxyInfo), util.toPointer(pObject), Size);
}

export function NdrMesSimpleTypeAlignSizeAll(
  Handle: Deno.PointerValue | Uint8Array | null /* ptr */,
  pProxyInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue /* usize */ {
  return libRPCRT4_dll.NdrMesSimpleTypeAlignSizeAll(util.toPointer(Handle), util.toPointer(pProxyInfo));
}

export function RpcCertGeneratePrincipalNameW(
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
  pBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcCertGeneratePrincipalNameW(util.toPointer(Context), Flags, util.toPointer(pBuffer));
}

export function RpcCertGeneratePrincipalNameA(
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
  pBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): RPC_STATUS /* Windows.Win32.System.Rpc.RPC_STATUS */ {
  return libRPCRT4_dll.RpcCertGeneratePrincipalNameA(util.toPointer(Context), Flags, util.toPointer(pBuffer));
}

