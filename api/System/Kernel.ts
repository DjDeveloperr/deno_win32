/// Auto-generated by Deno Win32: Windows.Win32.System.Kernel.Apis

import * as util from "../../util.ts";

// Enums
export type EXCEPTION_DISPOSITION = number;
export type EVENT_TYPE = number;
export type TIMER_TYPE = number;
export type WAIT_TYPE = number;
export type NT_PRODUCT_TYPE = number;
export type SUITE_TYPE = number;
export type COMPARTMENT_ID = number;

// Constants
export const ExceptionContinueExecution = 0;
export const ExceptionContinueSearch = 1;
export const ExceptionNestedException = 2;
export const ExceptionCollidedUnwind = 3;
export const OBJ_HANDLE_TAGBITS = 3;
export const RTL_BALANCED_NODE_RESERVED_PARENT_MASK = 3;
export const OBJ_INHERIT = 2;
export const OBJ_PERMANENT = 16;
export const OBJ_EXCLUSIVE = 32;
export const OBJ_CASE_INSENSITIVE = 64;
export const OBJ_OPENIF = 128;
export const OBJ_OPENLINK = 256;
export const OBJ_KERNEL_HANDLE = 512;
export const OBJ_FORCE_ACCESS_CHECK = 1024;
export const OBJ_IGNORE_IMPERSONATED_DEVICEMAP = 2048;
export const OBJ_DONT_REPARSE = 4096;
export const OBJ_VALID_ATTRIBUTES = 8178;
export const NULL64 = 0;
export const MAXUCHAR = 255;
export const MAXUSHORT = 65535;
export const MAXULONG = 4294967295;
export const NotificationEvent = 0;
export const SynchronizationEvent = 1;
export const NotificationTimer = 0;
export const SynchronizationTimer = 1;
export const WaitAll = 0;
export const WaitAny = 1;
export const WaitNotification = 2;
export const WaitDequeue = 3;
export const WaitDpc = 4;
export const NtProductWinNt = 1;
export const NtProductLanManNt = 2;
export const NtProductServer = 3;
export const SmallBusiness = 0;
export const Enterprise = 1;
export const BackOffice = 2;
export const CommunicationServer = 3;
export const TerminalServer = 4;
export const SmallBusinessRestricted = 5;
export const EmbeddedNT = 6;
export const DataCenter = 7;
export const SingleUserTS = 8;
export const Personal = 9;
export const Blade = 10;
export const EmbeddedRestricted = 11;
export const SecurityAppliance = 12;
export const StorageServer = 13;
export const ComputeServer = 14;
export const WHServer = 15;
export const PhoneNT = 16;
export const MultiUserTS = 17;
export const MaxSuiteType = 18;
export const UNSPECIFIED_COMPARTMENT_ID = 0;
export const DEFAULT_COMPARTMENT_ID = 1;

// Structs

/**
 * Windows.Win32.System.Kernel.SLIST_ENTRY (size: 8)
 */
export interface SLIST_ENTRY {
  /** ptr */
  Next: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSLIST_ENTRY = 8;

export function allocSLIST_ENTRY(data?: Partial<SLIST_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofSLIST_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Next !== undefined) view.setBigUint64(0, data.Next === null ? 0n : util.toBigInt(util.toPointer(data.Next)), true);
  return buf;
}

export class SLIST_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Next(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Next(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: number | bigint;
  /** u64 */
  Region: number | bigint;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, util.toBigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, util.toBigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get Region(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u64
  set Alignment(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set Region(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * _HeaderArm64_e__Struct (size: 16)
 */
export interface _HeaderArm64_e__Struct {
  /** u64 */
  _bitfield1: number | bigint;
  /** u64 */
  _bitfield2: number | bigint;
}

export const sizeof_HeaderArm64_e__Struct = 16;

export function alloc_HeaderArm64_e__Struct(data?: Partial<_HeaderArm64_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_HeaderArm64_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?._bitfield1 !== undefined) view.setBigUint64(0, util.toBigInt(data._bitfield1), true);
  // 0x08: u64
  if (data?._bitfield2 !== undefined) view.setBigUint64(8, util.toBigInt(data._bitfield2), true);
  return buf;
}

export class _HeaderArm64_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get _bitfield1(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get _bitfield2(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u64
  set _bitfield1(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set _bitfield2(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Kernel.SLIST_HEADER (size: 16)
 */
export interface SLIST_HEADER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** _HeaderArm64_e__Struct */
  HeaderArm64: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSLIST_HEADER = 16;

export function allocSLIST_HEADER(data?: Partial<SLIST_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofSLIST_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.HeaderArm64 !== undefined) view.setBigUint64(8, data.HeaderArm64 === null ? 0n : util.toBigInt(util.toPointer(data.HeaderArm64)), true);
  return buf;
}

export class SLIST_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get HeaderArm64(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set HeaderArm64(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : util.toBigInt(util.toPointer(data.X)), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Kernel.QUAD (size: 8)
 */
export interface QUAD {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofQUAD = 8;

export function allocQUAD(data?: Partial<QUAD>): Uint8Array {
  const buf = new Uint8Array(sizeofQUAD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class QUADView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Kernel.PROCESSOR_NUMBER (size: 8)
 */
export interface PROCESSOR_NUMBER {
  /** u16 */
  Group: number;
  /** u8 */
  Number: number;
  /** u8 */
  Reserved: number;
}

export const sizeofPROCESSOR_NUMBER = 8;

export function allocPROCESSOR_NUMBER(data?: Partial<PROCESSOR_NUMBER>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESSOR_NUMBER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Group !== undefined) view.setUint16(0, Number(data.Group), true);
  // 0x02: u8
  if (data?.Number !== undefined) view.setUint8(2, Number(data.Number));
  // 0x03: u8
  if (data?.Reserved !== undefined) view.setUint8(3, Number(data.Reserved));
  // 0x04: pad4
  return buf;
}

export class PROCESSOR_NUMBERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Group(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get Number(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get Reserved(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x00: u16
  set Group(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set Number(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set Reserved(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.System.Kernel.STRING (size: 16)
 */
export interface STRING {
  /** u16 */
  Length: number;
  /** u16 */
  MaximumLength: number;
  /** Windows.Win32.Foundation.PSTR */
  Buffer: string | null | Uint8Array;
}

export const sizeofSTRING = 16;

export function allocSTRING(data?: Partial<STRING>): Uint8Array {
  const buf = new Uint8Array(sizeofSTRING);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Length !== undefined) view.setUint16(0, Number(data.Length), true);
  // 0x02: u16
  if (data?.MaximumLength !== undefined) view.setUint16(2, Number(data.MaximumLength), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.Buffer !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.Buffer);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class STRINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Length(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get MaximumLength(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get Buffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set Length(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set MaximumLength(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set Buffer(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.System.Kernel.CSTRING (size: 16)
 */
export interface CSTRING {
  /** u16 */
  Length: number;
  /** u16 */
  MaximumLength: number;
  /** Windows.Win32.Foundation.PSTR */
  Buffer: string | null | Uint8Array;
}

export const sizeofCSTRING = 16;

export function allocCSTRING(data?: Partial<CSTRING>): Uint8Array {
  const buf = new Uint8Array(sizeofCSTRING);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Length !== undefined) view.setUint16(0, Number(data.Length), true);
  // 0x02: u16
  if (data?.MaximumLength !== undefined) view.setUint16(2, Number(data.MaximumLength), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.Buffer !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.Buffer);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class CSTRINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Length(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get MaximumLength(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get Buffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set Length(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set MaximumLength(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set Buffer(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.System.Kernel.LIST_ENTRY (size: 16)
 */
export interface LIST_ENTRY {
  /** ptr */
  Flink: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Blink: Deno.PointerValue | Uint8Array | null;
}

export const sizeofLIST_ENTRY = 16;

export function allocLIST_ENTRY(data?: Partial<LIST_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofLIST_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Flink !== undefined) view.setBigUint64(0, data.Flink === null ? 0n : util.toBigInt(util.toPointer(data.Flink)), true);
  // 0x08: pointer
  if (data?.Blink !== undefined) view.setBigUint64(8, data.Blink === null ? 0n : util.toBigInt(util.toPointer(data.Blink)), true);
  return buf;
}

export class LIST_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Flink(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Blink(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Flink(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Blink(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Kernel.SINGLE_LIST_ENTRY (size: 8)
 */
export interface SINGLE_LIST_ENTRY {
  /** ptr */
  Next: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSINGLE_LIST_ENTRY = 8;

export function allocSINGLE_LIST_ENTRY(data?: Partial<SINGLE_LIST_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofSINGLE_LIST_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Next !== undefined) view.setBigUint64(0, data.Next === null ? 0n : util.toBigInt(util.toPointer(data.Next)), true);
  return buf;
}

export class SINGLE_LIST_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Next(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Next(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * _Anonymous1_e__Union (size: 64)
 */
export interface _Anonymous1_e__Union {
  /** usize */
  Data0: number | bigint;
  /** Windows.Win32.Foundation.PWSTR */
  String: string | null | Uint8Array | Uint16Array;
  /** usize */
  u: number | bigint;
  /** ptr */
  psid: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pguid: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  LogonId_LowPart: number;
  /** ptr */
  pObjectTypes: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pIpAddress: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_Anonymous1_e__Union = 64;

export function alloc_Anonymous1_e__Union(data?: Partial<_Anonymous1_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous1_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data0 !== undefined) view.setBigUint64(0, util.toBigInt(data.Data0), true);
  // 0x08: buffer
  if (data?.String !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.String);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: usize
  if (data?.u !== undefined) view.setBigUint64(16, util.toBigInt(data.u), true);
  // 0x18: pointer
  if (data?.psid !== undefined) view.setBigUint64(24, data.psid === null ? 0n : util.toBigInt(util.toPointer(data.psid)), true);
  // 0x20: pointer
  if (data?.pguid !== undefined) view.setBigUint64(32, data.pguid === null ? 0n : util.toBigInt(util.toPointer(data.pguid)), true);
  // 0x28: u32
  if (data?.LogonId_LowPart !== undefined) view.setUint32(40, Number(data.LogonId_LowPart), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pObjectTypes !== undefined) view.setBigUint64(48, data.pObjectTypes === null ? 0n : util.toBigInt(util.toPointer(data.pObjectTypes)), true);
  // 0x38: pointer
  if (data?.pIpAddress !== undefined) view.setBigUint64(56, data.pIpAddress === null ? 0n : util.toBigInt(util.toPointer(data.pIpAddress)), true);
  return buf;
}

export class _Anonymous1_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get Data0(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: buffer
  get String(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: usize
  get u(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: pointer
  get psid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get pguid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get LogonId_LowPart(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get pObjectTypes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get pIpAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: usize
  set Data0(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: buffer
  set String(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: usize
  set u(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: pointer
  set psid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set pguid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set LogonId_LowPart(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set pObjectTypes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set pIpAddress(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * _Anonymous2_e__Union (size: 16)
 */
export interface _Anonymous2_e__Union {
  /** usize */
  Data1: number | bigint;
  /** i32 */
  LogonId_HighPart: number;
}

export const sizeof_Anonymous2_e__Union = 16;

export function alloc_Anonymous2_e__Union(data?: Partial<_Anonymous2_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous2_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data1 !== undefined) view.setBigUint64(0, util.toBigInt(data.Data1), true);
  // 0x08: i32
  if (data?.LogonId_HighPart !== undefined) view.setInt32(8, Number(data.LogonId_HighPart), true);
  // 0x0c: pad4
  return buf;
}

export class _Anonymous2_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get Data1(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: i32
  get LogonId_HighPart(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: usize
  set Data1(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: i32
  set LogonId_HighPart(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Kernel.RTL_BALANCED_NODE (size: 16)
 */
export interface RTL_BALANCED_NODE {
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRTL_BALANCED_NODE = 16;

export function allocRTL_BALANCED_NODE(data?: Partial<RTL_BALANCED_NODE>): Uint8Array {
  const buf = new Uint8Array(sizeofRTL_BALANCED_NODE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(0, data.Anonymous1 === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous1)), true);
  // 0x08: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(8, data.Anonymous2 === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous2)), true);
  return buf;
}

export class RTL_BALANCED_NODEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Kernel.LIST_ENTRY32 (size: 8)
 */
export interface LIST_ENTRY32 {
  /** u32 */
  Flink: number;
  /** u32 */
  Blink: number;
}

export const sizeofLIST_ENTRY32 = 8;

export function allocLIST_ENTRY32(data?: Partial<LIST_ENTRY32>): Uint8Array {
  const buf = new Uint8Array(sizeofLIST_ENTRY32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flink !== undefined) view.setUint32(0, Number(data.Flink), true);
  // 0x04: u32
  if (data?.Blink !== undefined) view.setUint32(4, Number(data.Blink), true);
  return buf;
}

export class LIST_ENTRY32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flink(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Blink(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set Flink(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Blink(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Kernel.LIST_ENTRY64 (size: 16)
 */
export interface LIST_ENTRY64 {
  /** u64 */
  Flink: number | bigint;
  /** u64 */
  Blink: number | bigint;
}

export const sizeofLIST_ENTRY64 = 16;

export function allocLIST_ENTRY64(data?: Partial<LIST_ENTRY64>): Uint8Array {
  const buf = new Uint8Array(sizeofLIST_ENTRY64);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Flink !== undefined) view.setBigUint64(0, util.toBigInt(data.Flink), true);
  // 0x08: u64
  if (data?.Blink !== undefined) view.setBigUint64(8, util.toBigInt(data.Blink), true);
  return buf;
}

export class LIST_ENTRY64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Flink(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get Blink(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u64
  set Flink(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set Blink(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Kernel.SINGLE_LIST_ENTRY32 (size: 8)
 */
export interface SINGLE_LIST_ENTRY32 {
  /** u32 */
  Next: number;
}

export const sizeofSINGLE_LIST_ENTRY32 = 8;

export function allocSINGLE_LIST_ENTRY32(data?: Partial<SINGLE_LIST_ENTRY32>): Uint8Array {
  const buf = new Uint8Array(sizeofSINGLE_LIST_ENTRY32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Next !== undefined) view.setUint32(0, Number(data.Next), true);
  // 0x04: pad4
  return buf;
}

export class SINGLE_LIST_ENTRY32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Next(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set Next(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Kernel.WNF_STATE_NAME (size: 8)
 */
export interface WNF_STATE_NAME {
  /** array */
  Data: Deno.PointerValue | null;
}

export const sizeofWNF_STATE_NAME = 8;

export function allocWNF_STATE_NAME(data?: Partial<WNF_STATE_NAME>): Uint8Array {
  const buf = new Uint8Array(sizeofWNF_STATE_NAME);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Data !== undefined) view.setBigUint64(0, data.Data === null ? 0n : util.toBigInt(util.toPointer(data.Data)), true);
  return buf;
}

export class WNF_STATE_NAMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Data(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Data(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Kernel.STRING32 (size: 8)
 */
export interface STRING32 {
  /** u16 */
  Length: number;
  /** u16 */
  MaximumLength: number;
  /** u32 */
  Buffer: number;
}

export const sizeofSTRING32 = 8;

export function allocSTRING32(data?: Partial<STRING32>): Uint8Array {
  const buf = new Uint8Array(sizeofSTRING32);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Length !== undefined) view.setUint16(0, Number(data.Length), true);
  // 0x02: u16
  if (data?.MaximumLength !== undefined) view.setUint16(2, Number(data.MaximumLength), true);
  // 0x04: u32
  if (data?.Buffer !== undefined) view.setUint32(4, Number(data.Buffer), true);
  return buf;
}

export class STRING32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Length(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get MaximumLength(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get Buffer(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u16
  set Length(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set MaximumLength(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set Buffer(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Kernel.STRING64 (size: 16)
 */
export interface STRING64 {
  /** u16 */
  Length: number;
  /** u16 */
  MaximumLength: number;
  /** u64 */
  Buffer: number | bigint;
}

export const sizeofSTRING64 = 16;

export function allocSTRING64(data?: Partial<STRING64>): Uint8Array {
  const buf = new Uint8Array(sizeofSTRING64);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Length !== undefined) view.setUint16(0, Number(data.Length), true);
  // 0x02: u16
  if (data?.MaximumLength !== undefined) view.setUint16(2, Number(data.MaximumLength), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.Buffer !== undefined) view.setBigUint64(8, util.toBigInt(data.Buffer), true);
  return buf;
}

export class STRING64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Length(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get MaximumLength(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: u64
  get Buffer(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u16
  set Length(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set MaximumLength(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: u64
  set Buffer(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Kernel.OBJECT_ATTRIBUTES64 (size: 48)
 */
export interface OBJECT_ATTRIBUTES64 {
  /** u32 */
  Length: number;
  /** u64 */
  RootDirectory: number | bigint;
  /** u64 */
  ObjectName: number | bigint;
  /** u32 */
  Attributes: number;
  /** u64 */
  SecurityDescriptor: number | bigint;
  /** u64 */
  SecurityQualityOfService: number | bigint;
}

export const sizeofOBJECT_ATTRIBUTES64 = 48;

export function allocOBJECT_ATTRIBUTES64(data?: Partial<OBJECT_ATTRIBUTES64>): Uint8Array {
  const buf = new Uint8Array(sizeofOBJECT_ATTRIBUTES64);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.RootDirectory !== undefined) view.setBigUint64(8, util.toBigInt(data.RootDirectory), true);
  // 0x10: u64
  if (data?.ObjectName !== undefined) view.setBigUint64(16, util.toBigInt(data.ObjectName), true);
  // 0x18: u32
  if (data?.Attributes !== undefined) view.setUint32(24, Number(data.Attributes), true);
  // 0x1c: pad4
  // 0x20: u64
  if (data?.SecurityDescriptor !== undefined) view.setBigUint64(32, util.toBigInt(data.SecurityDescriptor), true);
  // 0x28: u64
  if (data?.SecurityQualityOfService !== undefined) view.setBigUint64(40, util.toBigInt(data.SecurityQualityOfService), true);
  return buf;
}

export class OBJECT_ATTRIBUTES64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Length(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: u64
  get RootDirectory(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get ObjectName(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u32
  get Attributes(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: u64
  get SecurityDescriptor(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: u64
  get SecurityQualityOfService(): number | bigint {
    return this.view.getBigUint64(40, true);
  }

  // 0x00: u32
  set Length(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: u64
  set RootDirectory(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set ObjectName(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u32
  set Attributes(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: u64
  set SecurityDescriptor(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: u64
  set SecurityQualityOfService(value: number | bigint) {
    this.view.setBigUint64(40, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Kernel.OBJECT_ATTRIBUTES32 (size: 24)
 */
export interface OBJECT_ATTRIBUTES32 {
  /** u32 */
  Length: number;
  /** u32 */
  RootDirectory: number;
  /** u32 */
  ObjectName: number;
  /** u32 */
  Attributes: number;
  /** u32 */
  SecurityDescriptor: number;
  /** u32 */
  SecurityQualityOfService: number;
}

export const sizeofOBJECT_ATTRIBUTES32 = 24;

export function allocOBJECT_ATTRIBUTES32(data?: Partial<OBJECT_ATTRIBUTES32>): Uint8Array {
  const buf = new Uint8Array(sizeofOBJECT_ATTRIBUTES32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: u32
  if (data?.RootDirectory !== undefined) view.setUint32(4, Number(data.RootDirectory), true);
  // 0x08: u32
  if (data?.ObjectName !== undefined) view.setUint32(8, Number(data.ObjectName), true);
  // 0x0c: u32
  if (data?.Attributes !== undefined) view.setUint32(12, Number(data.Attributes), true);
  // 0x10: u32
  if (data?.SecurityDescriptor !== undefined) view.setUint32(16, Number(data.SecurityDescriptor), true);
  // 0x14: u32
  if (data?.SecurityQualityOfService !== undefined) view.setUint32(20, Number(data.SecurityQualityOfService), true);
  return buf;
}

export class OBJECT_ATTRIBUTES32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Length(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get RootDirectory(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ObjectName(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Attributes(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get SecurityDescriptor(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get SecurityQualityOfService(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set Length(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set RootDirectory(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ObjectName(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Attributes(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set SecurityDescriptor(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set SecurityQualityOfService(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.System.Kernel.OBJECTID (size: 16)
 */
export interface OBJECTID {
  /** System.Guid */
  Lineage: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Uniquifier: number;
}

export const sizeofOBJECTID = 16;

export function allocOBJECTID(data?: Partial<OBJECTID>): Uint8Array {
  const buf = new Uint8Array(sizeofOBJECTID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Lineage !== undefined) view.setBigUint64(0, data.Lineage === null ? 0n : util.toBigInt(util.toPointer(data.Lineage)), true);
  // 0x08: u32
  if (data?.Uniquifier !== undefined) view.setUint32(8, Number(data.Uniquifier), true);
  // 0x0c: pad4
  return buf;
}

export class OBJECTIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Lineage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Uniquifier(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Lineage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set Uniquifier(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Kernel.FLOATING_SAVE_AREA (size: 48)
 */
export interface FLOATING_SAVE_AREA {
  /** u32 */
  ControlWord: number;
  /** u32 */
  StatusWord: number;
  /** u32 */
  TagWord: number;
  /** u32 */
  ErrorOffset: number;
  /** u32 */
  ErrorSelector: number;
  /** u32 */
  DataOffset: number;
  /** u32 */
  DataSelector: number;
  /** array */
  RegisterArea: Deno.PointerValue | null;
  /** u32 */
  Cr0NpxState: number;
}

export const sizeofFLOATING_SAVE_AREA = 48;

export function allocFLOATING_SAVE_AREA(data?: Partial<FLOATING_SAVE_AREA>): Uint8Array {
  const buf = new Uint8Array(sizeofFLOATING_SAVE_AREA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ControlWord !== undefined) view.setUint32(0, Number(data.ControlWord), true);
  // 0x04: u32
  if (data?.StatusWord !== undefined) view.setUint32(4, Number(data.StatusWord), true);
  // 0x08: u32
  if (data?.TagWord !== undefined) view.setUint32(8, Number(data.TagWord), true);
  // 0x0c: u32
  if (data?.ErrorOffset !== undefined) view.setUint32(12, Number(data.ErrorOffset), true);
  // 0x10: u32
  if (data?.ErrorSelector !== undefined) view.setUint32(16, Number(data.ErrorSelector), true);
  // 0x14: u32
  if (data?.DataOffset !== undefined) view.setUint32(20, Number(data.DataOffset), true);
  // 0x18: u32
  if (data?.DataSelector !== undefined) view.setUint32(24, Number(data.DataSelector), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.RegisterArea !== undefined) view.setBigUint64(32, data.RegisterArea === null ? 0n : util.toBigInt(util.toPointer(data.RegisterArea)), true);
  // 0x28: u32
  if (data?.Cr0NpxState !== undefined) view.setUint32(40, Number(data.Cr0NpxState), true);
  // 0x2c: pad4
  return buf;
}

export class FLOATING_SAVE_AREAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ControlWord(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get StatusWord(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get TagWord(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ErrorOffset(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ErrorSelector(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get DataOffset(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get DataSelector(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get RegisterArea(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get Cr0NpxState(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: u32
  set ControlWord(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set StatusWord(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set TagWord(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ErrorOffset(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ErrorSelector(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set DataOffset(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set DataSelector(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set RegisterArea(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set Cr0NpxState(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.System.Kernel.EXCEPTION_REGISTRATION_RECORD (size: 16)
 */
export interface EXCEPTION_REGISTRATION_RECORD {
  /** ptr */
  Next: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Kernel.EXCEPTION_ROUTINE */
  Handler: Uint8Array | Deno.PointerValue | null;
}

export const sizeofEXCEPTION_REGISTRATION_RECORD = 16;

export function allocEXCEPTION_REGISTRATION_RECORD(data?: Partial<EXCEPTION_REGISTRATION_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_REGISTRATION_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Next !== undefined) view.setBigUint64(0, data.Next === null ? 0n : util.toBigInt(util.toPointer(data.Next)), true);
  // 0x08: pointer
  if (data?.Handler !== undefined) view.setBigUint64(8, data.Handler === null ? 0n : util.toBigInt(util.toPointer(data.Handler)), true);
  return buf;
}

export class EXCEPTION_REGISTRATION_RECORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Next(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Handler(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Next(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Handler(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Kernel.NT_TIB (size: 56)
 */
export interface NT_TIB {
  /** ptr */
  ExceptionList: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  StackBase: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  StackLimit: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  SubSystemTib: Deno.PointerValue | Uint8Array | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  ArbitraryUserPointer: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Self: Deno.PointerValue | Uint8Array | null;
}

export const sizeofNT_TIB = 56;

export function allocNT_TIB(data?: Partial<NT_TIB>): Uint8Array {
  const buf = new Uint8Array(sizeofNT_TIB);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionList !== undefined) view.setBigUint64(0, data.ExceptionList === null ? 0n : util.toBigInt(util.toPointer(data.ExceptionList)), true);
  // 0x08: pointer
  if (data?.StackBase !== undefined) view.setBigUint64(8, data.StackBase === null ? 0n : util.toBigInt(util.toPointer(data.StackBase)), true);
  // 0x10: pointer
  if (data?.StackLimit !== undefined) view.setBigUint64(16, data.StackLimit === null ? 0n : util.toBigInt(util.toPointer(data.StackLimit)), true);
  // 0x18: pointer
  if (data?.SubSystemTib !== undefined) view.setBigUint64(24, data.SubSystemTib === null ? 0n : util.toBigInt(util.toPointer(data.SubSystemTib)), true);
  // 0x20: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(32, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x28: pointer
  if (data?.ArbitraryUserPointer !== undefined) view.setBigUint64(40, data.ArbitraryUserPointer === null ? 0n : util.toBigInt(util.toPointer(data.ArbitraryUserPointer)), true);
  // 0x30: pointer
  if (data?.Self !== undefined) view.setBigUint64(48, data.Self === null ? 0n : util.toBigInt(util.toPointer(data.Self)), true);
  return buf;
}

export class NT_TIBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ExceptionList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get StackBase(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get StackLimit(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get SubSystemTib(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get ArbitraryUserPointer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get Self(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ExceptionList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set StackBase(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set StackLimit(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set SubSystemTib(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set ArbitraryUserPointer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set Self(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }
}

// Native Libraries

try {
  var libntdll_dll = Deno.dlopen("ntdll.dll", {
    RtlInitializeSListHead: {
      parameters: ["pointer"],
      result: "void",
    },
    RtlFirstEntrySList: {
      parameters: ["pointer"],
      result: "pointer",
    },
    RtlInterlockedPopEntrySList: {
      parameters: ["pointer"],
      result: "pointer",
    },
    RtlInterlockedPushEntrySList: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    RtlInterlockedPushListSListEx: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "pointer",
    },
    RtlInterlockedFlushSList: {
      parameters: ["pointer"],
      result: "pointer",
    },
    RtlQueryDepthSList: {
      parameters: ["pointer"],
      result: "u16",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function RtlInitializeSListHead(
  ListHead: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libntdll_dll.RtlInitializeSListHead(util.toPointer(ListHead));
}

export function RtlFirstEntrySList(
  ListHead: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libntdll_dll.RtlFirstEntrySList(util.toPointer(ListHead)));
}

export function RtlInterlockedPopEntrySList(
  ListHead: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libntdll_dll.RtlInterlockedPopEntrySList(util.toPointer(ListHead)));
}

export function RtlInterlockedPushEntrySList(
  ListHead: Deno.PointerValue | Uint8Array | null /* ptr */,
  ListEntry: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libntdll_dll.RtlInterlockedPushEntrySList(util.toPointer(ListHead), util.toPointer(ListEntry)));
}

export function RtlInterlockedPushListSListEx(
  ListHead: Deno.PointerValue | Uint8Array | null /* ptr */,
  List: Deno.PointerValue | Uint8Array | null /* ptr */,
  ListEnd: Deno.PointerValue | Uint8Array | null /* ptr */,
  Count: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libntdll_dll.RtlInterlockedPushListSListEx(util.toPointer(ListHead), util.toPointer(List), util.toPointer(ListEnd), Count));
}

export function RtlInterlockedFlushSList(
  ListHead: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libntdll_dll.RtlInterlockedFlushSList(util.toPointer(ListHead)));
}

export function RtlQueryDepthSList(
  ListHead: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u16 */ {
  return libntdll_dll.RtlQueryDepthSList(util.toPointer(ListHead));
}

