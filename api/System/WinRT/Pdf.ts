/// Auto-generated by Deno Win32: Windows.Win32.System.WinRT.Pdf.Apis

import * as util from "../../../util.ts";

// Structs

/**
 * Windows.Win32.Graphics.Direct2D.Common.D2D_RECT_F (size: 16)
 */
export interface D2D_RECT_F {
  /** f32 */
  left: number;
  /** f32 */
  top: number;
  /** f32 */
  right: number;
  /** f32 */
  bottom: number;
}

export const sizeofD2D_RECT_F = 16;

export function allocD2D_RECT_F(data?: Partial<D2D_RECT_F>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D_RECT_F);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.left !== undefined) view.setFloat32(0, Number(data.left), true);
  // 0x04: f32
  if (data?.top !== undefined) view.setFloat32(4, Number(data.top), true);
  // 0x08: f32
  if (data?.right !== undefined) view.setFloat32(8, Number(data.right), true);
  // 0x0c: f32
  if (data?.bottom !== undefined) view.setFloat32(12, Number(data.bottom), true);
  return buf;
}

export class D2D_RECT_FView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get left(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get top(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get right(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get bottom(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x00: f32
  set left(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set top(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set right(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set bottom(value: number) {
    this.view.setFloat32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.Common.D2D_COLOR_F (size: 16)
 */
export interface D2D_COLOR_F {
  /** f32 */
  r: number;
  /** f32 */
  g: number;
  /** f32 */
  b: number;
  /** f32 */
  a: number;
}

export const sizeofD2D_COLOR_F = 16;

export function allocD2D_COLOR_F(data?: Partial<D2D_COLOR_F>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D_COLOR_F);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.r !== undefined) view.setFloat32(0, Number(data.r), true);
  // 0x04: f32
  if (data?.g !== undefined) view.setFloat32(4, Number(data.g), true);
  // 0x08: f32
  if (data?.b !== undefined) view.setFloat32(8, Number(data.b), true);
  // 0x0c: f32
  if (data?.a !== undefined) view.setFloat32(12, Number(data.a), true);
  return buf;
}

export class D2D_COLOR_FView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get r(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get g(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get b(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get a(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x00: f32
  set r(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set g(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set b(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set a(value: number) {
    this.view.setFloat32(12, value, true);
  }
}

export type BOOLEAN = number;

/**
 * Windows.Win32.System.WinRT.Pdf.PDF_RENDER_PARAMS (size: 32)
 */
export interface PDF_RENDER_PARAMS {
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_RECT_F */
  SourceRect: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  DestinationWidth: number;
  /** u32 */
  DestinationHeight: number;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_COLOR_F */
  BackgroundColor: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  IgnoreHighContrast: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPDF_RENDER_PARAMS = 32;

export function allocPDF_RENDER_PARAMS(data?: Partial<PDF_RENDER_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofPDF_RENDER_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SourceRect !== undefined) view.setBigUint64(0, data.SourceRect === null ? 0n : BigInt(util.toPointer(data.SourceRect)), true);
  // 0x08: u32
  if (data?.DestinationWidth !== undefined) view.setUint32(8, Number(data.DestinationWidth), true);
  // 0x0c: u32
  if (data?.DestinationHeight !== undefined) view.setUint32(12, Number(data.DestinationHeight), true);
  // 0x10: pointer
  if (data?.BackgroundColor !== undefined) view.setBigUint64(16, data.BackgroundColor === null ? 0n : BigInt(util.toPointer(data.BackgroundColor)), true);
  // 0x18: pointer
  if (data?.IgnoreHighContrast !== undefined) view.setBigUint64(24, data.IgnoreHighContrast === null ? 0n : BigInt(util.toPointer(data.IgnoreHighContrast)), true);
  return buf;
}

export class PDF_RENDER_PARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get SourceRect(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get DestinationWidth(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get DestinationHeight(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get BackgroundColor(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get IgnoreHighContrast(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set SourceRect(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set DestinationWidth(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set DestinationHeight(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set BackgroundColor(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set IgnoreHighContrast(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

export type HRESULT = number;

// Native Libraries

try {
  var libWindows_Data_Pdf_dll = Deno.dlopen("Windows.Data.Pdf.dll", {
    PdfCreateRenderer: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function PdfCreateRenderer(
  pDevice: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Dxgi.IDXGIDevice */,
  ppRenderer: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWindows_Data_Pdf_dll.PdfCreateRenderer(util.toPointer(pDevice), util.toPointer(ppRenderer)));
}

