/// Auto-generated by Deno Win32: Windows.Win32.System.Power.Apis

import * as util from "../../util.ts";

// Enums
export type POWER_COOLING_MODE = number;
export type POWER_PLATFORM_ROLE_VERSION = number;
export type POWER_SETTING_REGISTER_NOTIFICATION_FLAGS = number;
export type EXECUTION_STATE = number;
export type POWER_ACTION_POLICY_EVENT_CODE = number;
export type EFFECTIVE_POWER_MODE = number;
export type SYSTEM_POWER_STATE = number;
export type POWER_ACTION = number;
export type POWER_DATA_ACCESSOR = number;
export type BATTERY_QUERY_INFORMATION_LEVEL = number;
export type BATTERY_CHARGING_SOURCE_TYPE = number;
export type USB_CHARGER_PORT = number;
export type BATTERY_SET_INFORMATION_LEVEL = number;
export type EMI_MEASUREMENT_UNIT = number;
export type DEVICE_POWER_STATE = number;
export type LATENCY_TIME = number;
export type POWER_REQUEST_TYPE = number;
export type POWER_INFORMATION_LEVEL = number;
export type SYSTEM_POWER_CONDITION = number;
export type POWER_PLATFORM_ROLE = number;
export type REG_SAM_FLAGS = number;

// Constants
export const PO_TZ_ACTIVE = 0;
export const PO_TZ_PASSIVE = 1;
export const PO_TZ_INVALID_MODE = 2;
export const POWER_PLATFORM_ROLE_V1 = 1;
export const POWER_PLATFORM_ROLE_V2 = 2;
export const DEVICE_NOTIFY_SERVICE_HANDLE = 1;
export const DEVICE_NOTIFY_CALLBACK = 2;
export const DEVICE_NOTIFY_WINDOW_HANDLE = 0;
export const ES_AWAYMODE_REQUIRED = 64;
export const ES_CONTINUOUS = 2147483648;
export const ES_DISPLAY_REQUIRED = 2;
export const ES_SYSTEM_REQUIRED = 1;
export const ES_USER_PRESENT = 4;
export const POWER_FORCE_TRIGGER_RESET = 2147483648;
export const POWER_LEVEL_USER_NOTIFY_EXEC = 4;
export const POWER_LEVEL_USER_NOTIFY_SOUND = 2;
export const POWER_LEVEL_USER_NOTIFY_TEXT = 1;
export const POWER_USER_NOTIFY_BUTTON = 8;
export const POWER_USER_NOTIFY_SHUTDOWN = 16;
export const BATTERY_UNKNOWN_CAPACITY = 4294967295;
export const UNKNOWN_CAPACITY = 4294967295;
export const BATTERY_SYSTEM_BATTERY = 2147483648;
export const BATTERY_CAPACITY_RELATIVE = 1073741824;
export const BATTERY_IS_SHORT_TERM = 536870912;
export const BATTERY_SEALED = 268435456;
export const BATTERY_SET_CHARGE_SUPPORTED = 1;
export const BATTERY_SET_DISCHARGE_SUPPORTED = 2;
export const BATTERY_SET_CHARGINGSOURCE_SUPPORTED = 4;
export const BATTERY_SET_CHARGER_ID_SUPPORTED = 8;
export const BATTERY_UNKNOWN_TIME = 4294967295;
export const BATTERY_UNKNOWN_CURRENT = 4294967295;
export const UNKNOWN_CURRENT = 4294967295;
export const BATTERY_USB_CHARGER_STATUS_FN_DEFAULT_USB = 1;
export const BATTERY_USB_CHARGER_STATUS_UCM_PD = 2;
export const BATTERY_UNKNOWN_VOLTAGE = 4294967295;
export const BATTERY_UNKNOWN_RATE = 2147483648;
export const UNKNOWN_RATE = 2147483648;
export const UNKNOWN_VOLTAGE = 4294967295;
export const BATTERY_POWER_ON_LINE = 1;
export const BATTERY_DISCHARGING = 2;
export const BATTERY_CHARGING = 4;
export const BATTERY_CRITICAL = 8;
export const MAX_BATTERY_STRING_SIZE = 128;
export const IOCTL_BATTERY_QUERY_TAG = 2703424;
export const IOCTL_BATTERY_QUERY_INFORMATION = 2703428;
export const IOCTL_BATTERY_SET_INFORMATION = 2719816;
export const IOCTL_BATTERY_QUERY_STATUS = 2703436;
export const IOCTL_BATTERY_CHARGING_SOURCE_CHANGE = 2703440;
export const BATTERY_TAG_INVALID = 0;
export const MAX_ACTIVE_COOLING_LEVELS = 10;
export const ACTIVE_COOLING = 0;
export const PASSIVE_COOLING = 1;
export const TZ_ACTIVATION_REASON_THERMAL = 1;
export const TZ_ACTIVATION_REASON_CURRENT = 2;
export const THERMAL_POLICY_VERSION_1 = 1;
export const THERMAL_POLICY_VERSION_2 = 2;
export const IOCTL_THERMAL_QUERY_INFORMATION = 2703488;
export const IOCTL_THERMAL_SET_COOLING_POLICY = 2719876;
export const IOCTL_RUN_ACTIVE_COOLING_METHOD = 2719880;
export const IOCTL_THERMAL_SET_PASSIVE_LIMIT = 2719884;
export const IOCTL_THERMAL_READ_TEMPERATURE = 2703504;
export const IOCTL_THERMAL_READ_POLICY = 2703508;
export const IOCTL_QUERY_LID = 2703552;
export const IOCTL_NOTIFY_SWITCH_EVENT = 2703616;
export const IOCTL_GET_SYS_BUTTON_CAPS = 2703680;
export const IOCTL_GET_SYS_BUTTON_EVENT = 2703684;
export const SYS_BUTTON_POWER = 1;
export const SYS_BUTTON_SLEEP = 2;
export const SYS_BUTTON_LID = 4;
export const SYS_BUTTON_WAKE = 2147483648;
export const SYS_BUTTON_LID_STATE_MASK = 196608;
export const SYS_BUTTON_LID_OPEN = 65536;
export const SYS_BUTTON_LID_CLOSED = 131072;
export const SYS_BUTTON_LID_INITIAL = 262144;
export const SYS_BUTTON_LID_CHANGED = 524288;
export const IOCTL_GET_PROCESSOR_OBJ_INFO = 2703744;
export const THERMAL_COOLING_INTERFACE_VERSION = 1;
export const THERMAL_DEVICE_INTERFACE_VERSION = 1;
export const IOCTL_SET_SYS_MESSAGE_INDICATOR = 2720192;
export const IOCTL_SET_WAKE_ALARM_VALUE = 2720256;
export const IOCTL_SET_WAKE_ALARM_POLICY = 2720260;
export const IOCTL_GET_WAKE_ALARM_VALUE = 2736648;
export const IOCTL_GET_WAKE_ALARM_POLICY = 2736652;
export const ACPI_TIME_ADJUST_DAYLIGHT = 1;
export const ACPI_TIME_IN_DAYLIGHT = 2;
export const ACPI_TIME_ZONE_UNKNOWN = 2047;
export const IOCTL_ACPI_GET_REAL_TIME = 2703888;
export const IOCTL_ACPI_SET_REAL_TIME = 2720276;
export const IOCTL_GET_WAKE_ALARM_SYSTEM_POWERSTATE = 2703896;
export const BATTERY_MINIPORT_UPDATE_DATA_VER_1 = 1;
export const BATTERY_MINIPORT_UPDATE_DATA_VER_2 = 2;
export const BATTERY_CLASS_MAJOR_VERSION = 1;
export const BATTERY_CLASS_MINOR_VERSION = 0;
export const BATTERY_CLASS_MINOR_VERSION_1 = 1;
export const IOCTL_EMI_GET_VERSION = 2244608;
export const IOCTL_EMI_GET_METADATA_SIZE = 2244612;
export const IOCTL_EMI_GET_METADATA = 2244616;
export const IOCTL_EMI_GET_MEASUREMENT = 2244620;
export const EMI_NAME_MAX = 16;
export const EMI_VERSION_V1 = 1;
export const EMI_VERSION_V2 = 2;
export const EFFECTIVE_POWER_MODE_V1 = 1;
export const EFFECTIVE_POWER_MODE_V2 = 2;
export const EnableSysTrayBatteryMeter = 1;
export const EnableMultiBatteryDisplay = 2;
export const EnablePasswordLogon = 4;
export const EnableWakeOnRing = 8;
export const EnableVideoDimDisplay = 16;
export const POWER_ATTRIBUTE_HIDE = 1;
export const POWER_ATTRIBUTE_SHOW_AOAC = 2;
export const DEVICEPOWER_HARDWAREID = 2147483648;
export const DEVICEPOWER_AND_OPERATION = 1073741824;
export const DEVICEPOWER_FILTER_DEVICES_PRESENT = 536870912;
export const DEVICEPOWER_FILTER_HARDWARE = 268435456;
export const DEVICEPOWER_FILTER_WAKEENABLED = 134217728;
export const DEVICEPOWER_FILTER_WAKEPROGRAMMABLE = 67108864;
export const DEVICEPOWER_FILTER_ON_NAME = 33554432;
export const DEVICEPOWER_SET_WAKEENABLED = 1;
export const DEVICEPOWER_CLEAR_WAKEENABLED = 2;
export const PDCAP_S0_SUPPORTED = 65536;
export const PDCAP_S1_SUPPORTED = 131072;
export const PDCAP_S2_SUPPORTED = 262144;
export const PDCAP_S3_SUPPORTED = 524288;
export const PDCAP_WAKE_FROM_S0_SUPPORTED = 1048576;
export const PDCAP_WAKE_FROM_S1_SUPPORTED = 2097152;
export const PDCAP_WAKE_FROM_S2_SUPPORTED = 4194304;
export const PDCAP_WAKE_FROM_S3_SUPPORTED = 8388608;
export const PDCAP_S4_SUPPORTED = 16777216;
export const PDCAP_S5_SUPPORTED = 33554432;
export const THERMAL_EVENT_VERSION = 1;
export const EffectivePowerModeBatterySaver = 0;
export const EffectivePowerModeBetterBattery = 1;
export const EffectivePowerModeBalanced = 2;
export const EffectivePowerModeHighPerformance = 3;
export const EffectivePowerModeMaxPerformance = 4;
export const EffectivePowerModeGameMode = 5;
export const EffectivePowerModeMixedReality = 6;
export const PowerSystemUnspecified = 0;
export const PowerSystemWorking = 1;
export const PowerSystemSleeping1 = 2;
export const PowerSystemSleeping2 = 3;
export const PowerSystemSleeping3 = 4;
export const PowerSystemHibernate = 5;
export const PowerSystemShutdown = 6;
export const PowerSystemMaximum = 7;
export const PowerActionNone = 0;
export const PowerActionReserved = 1;
export const PowerActionSleep = 2;
export const PowerActionHibernate = 3;
export const PowerActionShutdown = 4;
export const PowerActionShutdownReset = 5;
export const PowerActionShutdownOff = 6;
export const PowerActionWarmEject = 7;
export const PowerActionDisplayOff = 8;
export const ACCESS_AC_POWER_SETTING_INDEX = 0;
export const ACCESS_DC_POWER_SETTING_INDEX = 1;
export const ACCESS_FRIENDLY_NAME = 2;
export const ACCESS_DESCRIPTION = 3;
export const ACCESS_POSSIBLE_POWER_SETTING = 4;
export const ACCESS_POSSIBLE_POWER_SETTING_FRIENDLY_NAME = 5;
export const ACCESS_POSSIBLE_POWER_SETTING_DESCRIPTION = 6;
export const ACCESS_DEFAULT_AC_POWER_SETTING = 7;
export const ACCESS_DEFAULT_DC_POWER_SETTING = 8;
export const ACCESS_POSSIBLE_VALUE_MIN = 9;
export const ACCESS_POSSIBLE_VALUE_MAX = 10;
export const ACCESS_POSSIBLE_VALUE_INCREMENT = 11;
export const ACCESS_POSSIBLE_VALUE_UNITS = 12;
export const ACCESS_ICON_RESOURCE = 13;
export const ACCESS_DEFAULT_SECURITY_DESCRIPTOR = 14;
export const ACCESS_ATTRIBUTES = 15;
export const ACCESS_SCHEME = 16;
export const ACCESS_SUBGROUP = 17;
export const ACCESS_INDIVIDUAL_SETTING = 18;
export const ACCESS_ACTIVE_SCHEME = 19;
export const ACCESS_CREATE_SCHEME = 20;
export const ACCESS_AC_POWER_SETTING_MAX = 21;
export const ACCESS_DC_POWER_SETTING_MAX = 22;
export const ACCESS_AC_POWER_SETTING_MIN = 23;
export const ACCESS_DC_POWER_SETTING_MIN = 24;
export const ACCESS_PROFILE = 25;
export const ACCESS_OVERLAY_SCHEME = 26;
export const ACCESS_ACTIVE_OVERLAY_SCHEME = 27;
export const BatteryInformation = 0;
export const BatteryGranularityInformation = 1;
export const BatteryTemperature = 2;
export const BatteryEstimatedTime = 3;
export const BatteryDeviceName = 4;
export const BatteryManufactureDate = 5;
export const BatteryManufactureName = 6;
export const BatteryUniqueID = 7;
export const BatterySerialNumber = 8;
export const BatteryChargingSourceType_AC = 1;
export const BatteryChargingSourceType_USB = 2;
export const BatteryChargingSourceType_Wireless = 3;
export const BatteryChargingSourceType_Max = 4;
export const UsbChargerPort_Legacy = 0;
export const UsbChargerPort_TypeC = 1;
export const UsbChargerPort_Max = 2;
export const BatteryCriticalBias = 0;
export const BatteryCharge = 1;
export const BatteryDischarge = 2;
export const BatteryChargingSource = 3;
export const BatteryChargerId = 4;
export const BatteryChargerStatus = 5;
export const EmiMeasurementUnitPicowattHours = 0;
export const PowerDeviceUnspecified = 0;
export const PowerDeviceD0 = 1;
export const PowerDeviceD1 = 2;
export const PowerDeviceD2 = 3;
export const PowerDeviceD3 = 4;
export const PowerDeviceMaximum = 5;
export const LT_DONT_CARE = 0;
export const LT_LOWEST_LATENCY = 1;
export const PowerRequestDisplayRequired = 0;
export const PowerRequestSystemRequired = 1;
export const PowerRequestAwayModeRequired = 2;
export const PowerRequestExecutionRequired = 3;
export const SystemPowerPolicyAc = 0;
export const SystemPowerPolicyDc = 1;
export const VerifySystemPolicyAc = 2;
export const VerifySystemPolicyDc = 3;
export const SystemPowerCapabilities = 4;
export const SystemBatteryState = 5;
export const SystemPowerStateHandler = 6;
export const ProcessorStateHandler = 7;
export const SystemPowerPolicyCurrent = 8;
export const AdministratorPowerPolicy = 9;
export const SystemReserveHiberFile = 10;
export const ProcessorInformation = 11;
export const SystemPowerInformation = 12;
export const ProcessorStateHandler2 = 13;
export const LastWakeTime = 14;
export const LastSleepTime = 15;
export const SystemExecutionState = 16;
export const SystemPowerStateNotifyHandler = 17;
export const ProcessorPowerPolicyAc = 18;
export const ProcessorPowerPolicyDc = 19;
export const VerifyProcessorPowerPolicyAc = 20;
export const VerifyProcessorPowerPolicyDc = 21;
export const ProcessorPowerPolicyCurrent = 22;
export const SystemPowerStateLogging = 23;
export const SystemPowerLoggingEntry = 24;
export const SetPowerSettingValue = 25;
export const NotifyUserPowerSetting = 26;
export const PowerInformationLevelUnused0 = 27;
export const SystemMonitorHiberBootPowerOff = 28;
export const SystemVideoState = 29;
export const TraceApplicationPowerMessage = 30;
export const TraceApplicationPowerMessageEnd = 31;
export const ProcessorPerfStates = 32;
export const ProcessorIdleStates = 33;
export const ProcessorCap = 34;
export const SystemWakeSource = 35;
export const SystemHiberFileInformation = 36;
export const TraceServicePowerMessage = 37;
export const ProcessorLoad = 38;
export const PowerShutdownNotification = 39;
export const MonitorCapabilities = 40;
export const SessionPowerInit = 41;
export const SessionDisplayState = 42;
export const PowerRequestCreate = 43;
export const PowerRequestAction = 44;
export const GetPowerRequestList = 45;
export const ProcessorInformationEx = 46;
export const NotifyUserModeLegacyPowerEvent = 47;
export const GroupPark = 48;
export const ProcessorIdleDomains = 49;
export const WakeTimerList = 50;
export const SystemHiberFileSize = 51;
export const ProcessorIdleStatesHv = 52;
export const ProcessorPerfStatesHv = 53;
export const ProcessorPerfCapHv = 54;
export const ProcessorSetIdle = 55;
export const LogicalProcessorIdling = 56;
export const UserPresence = 57;
export const PowerSettingNotificationName = 58;
export const GetPowerSettingValue = 59;
export const IdleResiliency = 60;
export const SessionRITState = 61;
export const SessionConnectNotification = 62;
export const SessionPowerCleanup = 63;
export const SessionLockState = 64;
export const SystemHiberbootState = 65;
export const PlatformInformation = 66;
export const PdcInvocation = 67;
export const MonitorInvocation = 68;
export const FirmwareTableInformationRegistered = 69;
export const SetShutdownSelectedTime = 70;
export const SuspendResumeInvocation = 71;
export const PlmPowerRequestCreate = 72;
export const ScreenOff = 73;
export const CsDeviceNotification = 74;
export const PlatformRole = 75;
export const LastResumePerformance = 76;
export const DisplayBurst = 77;
export const ExitLatencySamplingPercentage = 78;
export const RegisterSpmPowerSettings = 79;
export const PlatformIdleStates = 80;
export const ProcessorIdleVeto = 81;
export const PlatformIdleVeto = 82;
export const SystemBatteryStatePrecise = 83;
export const ThermalEvent = 84;
export const PowerRequestActionInternal = 85;
export const BatteryDeviceState = 86;
export const PowerInformationInternal = 87;
export const ThermalStandby = 88;
export const SystemHiberFileType = 89;
export const PhysicalPowerButtonPress = 90;
export const QueryPotentialDripsConstraint = 91;
export const EnergyTrackerCreate = 92;
export const EnergyTrackerQuery = 93;
export const UpdateBlackBoxRecorder = 94;
export const SessionAllowExternalDmaDevices = 95;
export const SendSuspendResumeNotification = 96;
export const PowerInformationLevelMaximum = 97;
export const PoAc = 0;
export const PoDc = 1;
export const PoHot = 2;
export const PoConditionMaximum = 3;
export const PlatformRoleUnspecified = 0;
export const PlatformRoleDesktop = 1;
export const PlatformRoleMobile = 2;
export const PlatformRoleWorkstation = 3;
export const PlatformRoleEnterpriseServer = 4;
export const PlatformRoleSOHOServer = 5;
export const PlatformRoleAppliancePC = 6;
export const PlatformRolePerformanceServer = 7;
export const PlatformRoleSlate = 8;
export const PlatformRoleMaximum = 9;
export const KEY_QUERY_VALUE = 1;
export const KEY_SET_VALUE = 2;
export const KEY_CREATE_SUB_KEY = 4;
export const KEY_ENUMERATE_SUB_KEYS = 8;
export const KEY_NOTIFY = 16;
export const KEY_CREATE_LINK = 32;
export const KEY_WOW64_32KEY = 512;
export const KEY_WOW64_64KEY = 256;
export const KEY_WOW64_RES = 768;
export const KEY_READ = 131097;
export const KEY_WRITE = 131078;
export const KEY_EXECUTE = 131097;
export const KEY_ALL_ACCESS = 983103;

// Structs

/**
 * Windows.Win32.System.Power.PROCESSOR_POWER_INFORMATION (size: 48)
 */
export interface PROCESSOR_POWER_INFORMATION {
  /** u64 */
  Number: bigint | number;
  /** u64 */
  MaxMhz: bigint | number;
  /** u64 */
  CurrentMhz: bigint | number;
  /** u64 */
  MhzLimit: bigint | number;
  /** u64 */
  MaxIdleState: bigint | number;
  /** u64 */
  CurrentIdleState: bigint | number;
}

export const sizeofPROCESSOR_POWER_INFORMATION = 48;

export function allocPROCESSOR_POWER_INFORMATION(data?: Partial<PROCESSOR_POWER_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESSOR_POWER_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Number !== undefined) view.setBigUint64(0, BigInt(data.Number), true);
  // 0x08: u64
  if (data?.MaxMhz !== undefined) view.setBigUint64(8, BigInt(data.MaxMhz), true);
  // 0x10: u64
  if (data?.CurrentMhz !== undefined) view.setBigUint64(16, BigInt(data.CurrentMhz), true);
  // 0x18: u64
  if (data?.MhzLimit !== undefined) view.setBigUint64(24, BigInt(data.MhzLimit), true);
  // 0x20: u64
  if (data?.MaxIdleState !== undefined) view.setBigUint64(32, BigInt(data.MaxIdleState), true);
  // 0x28: u64
  if (data?.CurrentIdleState !== undefined) view.setBigUint64(40, BigInt(data.CurrentIdleState), true);
  return buf;
}

export class PROCESSOR_POWER_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Number(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get MaxMhz(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get CurrentMhz(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u64
  get MhzLimit(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u64
  get MaxIdleState(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: u64
  get CurrentIdleState(): bigint | number {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x00: u64
  set Number(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set MaxMhz(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set CurrentMhz(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u64
  set MhzLimit(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u64
  set MaxIdleState(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: u64
  set CurrentIdleState(value: bigint | number) {
    this.view.setBigUint64(40, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Power.SYSTEM_POWER_INFORMATION (size: 32)
 */
export interface SYSTEM_POWER_INFORMATION {
  /** u64 */
  MaxIdlenessAllowed: bigint | number;
  /** u64 */
  Idleness: bigint | number;
  /** u64 */
  TimeRemaining: bigint | number;
  /** Windows.Win32.System.Power.POWER_COOLING_MODE */
  CoolingMode: POWER_COOLING_MODE;
}

export const sizeofSYSTEM_POWER_INFORMATION = 32;

export function allocSYSTEM_POWER_INFORMATION(data?: Partial<SYSTEM_POWER_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_POWER_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.MaxIdlenessAllowed !== undefined) view.setBigUint64(0, BigInt(data.MaxIdlenessAllowed), true);
  // 0x08: u64
  if (data?.Idleness !== undefined) view.setBigUint64(8, BigInt(data.Idleness), true);
  // 0x10: u64
  if (data?.TimeRemaining !== undefined) view.setBigUint64(16, BigInt(data.TimeRemaining), true);
  // 0x18: u16
  if (data?.CoolingMode !== undefined) view.setUint16(24, Number(data.CoolingMode), true);
  // 0x1a: pad6
  return buf;
}

export class SYSTEM_POWER_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get MaxIdlenessAllowed(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get Idleness(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get TimeRemaining(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u16
  get CoolingMode(): number {
    return this.view.getUint16(24, true);
  }

  // 0x1a: pad6

  // 0x00: u64
  set MaxIdlenessAllowed(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set Idleness(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set TimeRemaining(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u16
  set CoolingMode(value: number) {
    this.view.setUint16(24, value, true);
  }

  // 0x1a: pad6
}

/**
 * Windows.Win32.Devices.Properties.DEVPROPKEY (size: 16)
 */
export interface DEVPROPKEY {
  /** System.Guid */
  fmtid: Uint8Array | Deno.PointerValue;
  /** u32 */
  pid: number;
}

export const sizeofDEVPROPKEY = 16;

export function allocDEVPROPKEY(data?: Partial<DEVPROPKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVPROPKEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fmtid !== undefined) view.setBigUint64(0, data.fmtid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fmtid))), true);
  // 0x08: u32
  if (data?.pid !== undefined) view.setUint32(8, Number(data.pid), true);
  // 0x0c: pad4
  return buf;
}

export class DEVPROPKEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get fmtid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get pid(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set fmtid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set pid(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

export type HPOWERNOTIFY = bigint | number;

/**
 * Windows.Win32.System.Power.GLOBAL_MACHINE_POWER_POLICY (size: 16)
 */
export interface GLOBAL_MACHINE_POWER_POLICY {
  /** u32 */
  Revision: number;
  /** Windows.Win32.System.Power.SYSTEM_POWER_STATE */
  LidOpenWakeAc: SYSTEM_POWER_STATE;
  /** Windows.Win32.System.Power.SYSTEM_POWER_STATE */
  LidOpenWakeDc: SYSTEM_POWER_STATE;
  /** u32 */
  BroadcastCapacityResolution: number;
}

export const sizeofGLOBAL_MACHINE_POWER_POLICY = 16;

export function allocGLOBAL_MACHINE_POWER_POLICY(data?: Partial<GLOBAL_MACHINE_POWER_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofGLOBAL_MACHINE_POWER_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Revision !== undefined) view.setUint32(0, Number(data.Revision), true);
  // 0x04: i32
  if (data?.LidOpenWakeAc !== undefined) view.setInt32(4, Number(data.LidOpenWakeAc), true);
  // 0x08: i32
  if (data?.LidOpenWakeDc !== undefined) view.setInt32(8, Number(data.LidOpenWakeDc), true);
  // 0x0c: u32
  if (data?.BroadcastCapacityResolution !== undefined) view.setUint32(12, Number(data.BroadcastCapacityResolution), true);
  return buf;
}

export class GLOBAL_MACHINE_POWER_POLICYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Revision(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get LidOpenWakeAc(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get LidOpenWakeDc(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get BroadcastCapacityResolution(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set Revision(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set LidOpenWakeAc(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set LidOpenWakeDc(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set BroadcastCapacityResolution(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.System.Power.POWER_ACTION_POLICY (size: 16)
 */
export interface POWER_ACTION_POLICY {
  /** Windows.Win32.System.Power.POWER_ACTION */
  Action: POWER_ACTION;
  /** u32 */
  Flags: number;
  /** Windows.Win32.System.Power.POWER_ACTION_POLICY_EVENT_CODE */
  EventCode: POWER_ACTION_POLICY_EVENT_CODE;
}

export const sizeofPOWER_ACTION_POLICY = 16;

export function allocPOWER_ACTION_POLICY(data?: Partial<POWER_ACTION_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofPOWER_ACTION_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Action !== undefined) view.setInt32(0, Number(data.Action), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.EventCode !== undefined) view.setUint32(8, Number(data.EventCode), true);
  // 0x0c: pad4
  return buf;
}

export class POWER_ACTION_POLICYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Action(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get EventCode(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i32
  set Action(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set EventCode(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Power.GLOBAL_USER_POWER_POLICY (size: 72)
 */
export interface GLOBAL_USER_POWER_POLICY {
  /** u32 */
  Revision: number;
  /** Windows.Win32.System.Power.POWER_ACTION_POLICY */
  PowerButtonAc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Power.POWER_ACTION_POLICY */
  PowerButtonDc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Power.POWER_ACTION_POLICY */
  SleepButtonAc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Power.POWER_ACTION_POLICY */
  SleepButtonDc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Power.POWER_ACTION_POLICY */
  LidCloseAc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Power.POWER_ACTION_POLICY */
  LidCloseDc: Uint8Array | Deno.PointerValue;
  /** array */
  DischargePolicy: Deno.PointerValue;
  /** u32 */
  GlobalFlags: number;
}

export const sizeofGLOBAL_USER_POWER_POLICY = 72;

export function allocGLOBAL_USER_POWER_POLICY(data?: Partial<GLOBAL_USER_POWER_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofGLOBAL_USER_POWER_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Revision !== undefined) view.setUint32(0, Number(data.Revision), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.PowerButtonAc !== undefined) view.setBigUint64(8, data.PowerButtonAc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PowerButtonAc))), true);
  // 0x10: pointer
  if (data?.PowerButtonDc !== undefined) view.setBigUint64(16, data.PowerButtonDc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PowerButtonDc))), true);
  // 0x18: pointer
  if (data?.SleepButtonAc !== undefined) view.setBigUint64(24, data.SleepButtonAc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SleepButtonAc))), true);
  // 0x20: pointer
  if (data?.SleepButtonDc !== undefined) view.setBigUint64(32, data.SleepButtonDc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SleepButtonDc))), true);
  // 0x28: pointer
  if (data?.LidCloseAc !== undefined) view.setBigUint64(40, data.LidCloseAc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LidCloseAc))), true);
  // 0x30: pointer
  if (data?.LidCloseDc !== undefined) view.setBigUint64(48, data.LidCloseDc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LidCloseDc))), true);
  // 0x38: pointer
  if (data?.DischargePolicy !== undefined) view.setBigUint64(56, data.DischargePolicy === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DischargePolicy))), true);
  // 0x40: u32
  if (data?.GlobalFlags !== undefined) view.setUint32(64, Number(data.GlobalFlags), true);
  // 0x44: pad4
  return buf;
}

export class GLOBAL_USER_POWER_POLICYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Revision(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get PowerButtonAc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get PowerButtonDc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get SleepButtonAc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get SleepButtonDc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get LidCloseAc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get LidCloseDc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get DischargePolicy(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get GlobalFlags(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x00: u32
  set Revision(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set PowerButtonAc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set PowerButtonDc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set SleepButtonAc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set SleepButtonDc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set LidCloseAc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set LidCloseDc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set DischargePolicy(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set GlobalFlags(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4
}

/**
 * Windows.Win32.System.Power.GLOBAL_POWER_POLICY (size: 16)
 */
export interface GLOBAL_POWER_POLICY {
  /** Windows.Win32.System.Power.GLOBAL_USER_POWER_POLICY */
  user: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Power.GLOBAL_MACHINE_POWER_POLICY */
  mach: Uint8Array | Deno.PointerValue;
}

export const sizeofGLOBAL_POWER_POLICY = 16;

export function allocGLOBAL_POWER_POLICY(data?: Partial<GLOBAL_POWER_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofGLOBAL_POWER_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.user !== undefined) view.setBigUint64(0, data.user === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.user))), true);
  // 0x08: pointer
  if (data?.mach !== undefined) view.setBigUint64(8, data.mach === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.mach))), true);
  return buf;
}

export class GLOBAL_POWER_POLICYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get user(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get mach(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set user(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set mach(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Power.MACHINE_POWER_POLICY (size: 64)
 */
export interface MACHINE_POWER_POLICY {
  /** u32 */
  Revision: number;
  /** Windows.Win32.System.Power.SYSTEM_POWER_STATE */
  MinSleepAc: SYSTEM_POWER_STATE;
  /** Windows.Win32.System.Power.SYSTEM_POWER_STATE */
  MinSleepDc: SYSTEM_POWER_STATE;
  /** Windows.Win32.System.Power.SYSTEM_POWER_STATE */
  ReducedLatencySleepAc: SYSTEM_POWER_STATE;
  /** Windows.Win32.System.Power.SYSTEM_POWER_STATE */
  ReducedLatencySleepDc: SYSTEM_POWER_STATE;
  /** u32 */
  DozeTimeoutAc: number;
  /** u32 */
  DozeTimeoutDc: number;
  /** u32 */
  DozeS4TimeoutAc: number;
  /** u32 */
  DozeS4TimeoutDc: number;
  /** u8 */
  MinThrottleAc: number;
  /** u8 */
  MinThrottleDc: number;
  /** array */
  pad1: Deno.PointerValue;
  /** Windows.Win32.System.Power.POWER_ACTION_POLICY */
  OverThrottledAc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Power.POWER_ACTION_POLICY */
  OverThrottledDc: Uint8Array | Deno.PointerValue;
}

export const sizeofMACHINE_POWER_POLICY = 64;

export function allocMACHINE_POWER_POLICY(data?: Partial<MACHINE_POWER_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofMACHINE_POWER_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Revision !== undefined) view.setUint32(0, Number(data.Revision), true);
  // 0x04: i32
  if (data?.MinSleepAc !== undefined) view.setInt32(4, Number(data.MinSleepAc), true);
  // 0x08: i32
  if (data?.MinSleepDc !== undefined) view.setInt32(8, Number(data.MinSleepDc), true);
  // 0x0c: i32
  if (data?.ReducedLatencySleepAc !== undefined) view.setInt32(12, Number(data.ReducedLatencySleepAc), true);
  // 0x10: i32
  if (data?.ReducedLatencySleepDc !== undefined) view.setInt32(16, Number(data.ReducedLatencySleepDc), true);
  // 0x14: u32
  if (data?.DozeTimeoutAc !== undefined) view.setUint32(20, Number(data.DozeTimeoutAc), true);
  // 0x18: u32
  if (data?.DozeTimeoutDc !== undefined) view.setUint32(24, Number(data.DozeTimeoutDc), true);
  // 0x1c: u32
  if (data?.DozeS4TimeoutAc !== undefined) view.setUint32(28, Number(data.DozeS4TimeoutAc), true);
  // 0x20: u32
  if (data?.DozeS4TimeoutDc !== undefined) view.setUint32(32, Number(data.DozeS4TimeoutDc), true);
  // 0x24: u8
  if (data?.MinThrottleAc !== undefined) view.setUint8(36, Number(data.MinThrottleAc));
  // 0x25: u8
  if (data?.MinThrottleDc !== undefined) view.setUint8(37, Number(data.MinThrottleDc));
  // 0x26: pad2
  // 0x28: pointer
  if (data?.pad1 !== undefined) view.setBigUint64(40, data.pad1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pad1))), true);
  // 0x30: pointer
  if (data?.OverThrottledAc !== undefined) view.setBigUint64(48, data.OverThrottledAc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OverThrottledAc))), true);
  // 0x38: pointer
  if (data?.OverThrottledDc !== undefined) view.setBigUint64(56, data.OverThrottledDc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OverThrottledDc))), true);
  return buf;
}

export class MACHINE_POWER_POLICYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Revision(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get MinSleepAc(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get MinSleepDc(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get ReducedLatencySleepAc(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get ReducedLatencySleepDc(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u32
  get DozeTimeoutAc(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get DozeTimeoutDc(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get DozeS4TimeoutAc(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get DozeS4TimeoutDc(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u8
  get MinThrottleAc(): number {
    return this.view.getUint8(36);
  }

  // 0x25: u8
  get MinThrottleDc(): number {
    return this.view.getUint8(37);
  }

  // 0x26: pad2

  // 0x28: pointer
  get pad1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get OverThrottledAc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get OverThrottledDc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Revision(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set MinSleepAc(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set MinSleepDc(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set ReducedLatencySleepAc(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set ReducedLatencySleepDc(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u32
  set DozeTimeoutAc(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set DozeTimeoutDc(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set DozeS4TimeoutAc(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set DozeS4TimeoutDc(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u8
  set MinThrottleAc(value: number) {
    this.view.setUint8(36, value);
  }

  // 0x25: u8
  set MinThrottleDc(value: number) {
    this.view.setUint8(37, value);
  }

  // 0x26: pad2

  // 0x28: pointer
  set pad1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set OverThrottledAc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set OverThrottledDc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Power.PROCESSOR_POWER_POLICY (size: 32)
 */
export interface PROCESSOR_POWER_POLICY {
  /** u32 */
  Revision: number;
  /** u8 */
  DynamicThrottle: number;
  /** array */
  Spare: Deno.PointerValue;
  /** u32 */
  _bitfield: number;
  /** u32 */
  PolicyCount: number;
  /** array */
  Policy: Deno.PointerValue;
}

export const sizeofPROCESSOR_POWER_POLICY = 32;

export function allocPROCESSOR_POWER_POLICY(data?: Partial<PROCESSOR_POWER_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESSOR_POWER_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Revision !== undefined) view.setUint32(0, Number(data.Revision), true);
  // 0x04: u8
  if (data?.DynamicThrottle !== undefined) view.setUint8(4, Number(data.DynamicThrottle));
  // 0x05: pad3
  // 0x08: pointer
  if (data?.Spare !== undefined) view.setBigUint64(8, data.Spare === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Spare))), true);
  // 0x10: u32
  if (data?._bitfield !== undefined) view.setUint32(16, Number(data._bitfield), true);
  // 0x14: u32
  if (data?.PolicyCount !== undefined) view.setUint32(20, Number(data.PolicyCount), true);
  // 0x18: pointer
  if (data?.Policy !== undefined) view.setBigUint64(24, data.Policy === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Policy))), true);
  return buf;
}

export class PROCESSOR_POWER_POLICYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Revision(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u8
  get DynamicThrottle(): number {
    return this.view.getUint8(4);
  }

  // 0x05: pad3

  // 0x08: pointer
  get Spare(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get _bitfield(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get PolicyCount(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get Policy(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Revision(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u8
  set DynamicThrottle(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: pad3

  // 0x08: pointer
  set Spare(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set _bitfield(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set PolicyCount(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set Policy(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Power.MACHINE_PROCESSOR_POWER_POLICY (size: 24)
 */
export interface MACHINE_PROCESSOR_POWER_POLICY {
  /** u32 */
  Revision: number;
  /** Windows.Win32.System.Power.PROCESSOR_POWER_POLICY */
  ProcessorPolicyAc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Power.PROCESSOR_POWER_POLICY */
  ProcessorPolicyDc: Uint8Array | Deno.PointerValue;
}

export const sizeofMACHINE_PROCESSOR_POWER_POLICY = 24;

export function allocMACHINE_PROCESSOR_POWER_POLICY(data?: Partial<MACHINE_PROCESSOR_POWER_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofMACHINE_PROCESSOR_POWER_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Revision !== undefined) view.setUint32(0, Number(data.Revision), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ProcessorPolicyAc !== undefined) view.setBigUint64(8, data.ProcessorPolicyAc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProcessorPolicyAc))), true);
  // 0x10: pointer
  if (data?.ProcessorPolicyDc !== undefined) view.setBigUint64(16, data.ProcessorPolicyDc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProcessorPolicyDc))), true);
  return buf;
}

export class MACHINE_PROCESSOR_POWER_POLICYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Revision(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ProcessorPolicyAc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ProcessorPolicyDc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Revision(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ProcessorPolicyAc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ProcessorPolicyDc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type BOOLEAN = number;

/**
 * Windows.Win32.System.Power.USER_POWER_POLICY (size: 96)
 */
export interface USER_POWER_POLICY {
  /** u32 */
  Revision: number;
  /** Windows.Win32.System.Power.POWER_ACTION_POLICY */
  IdleAc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Power.POWER_ACTION_POLICY */
  IdleDc: Uint8Array | Deno.PointerValue;
  /** u32 */
  IdleTimeoutAc: number;
  /** u32 */
  IdleTimeoutDc: number;
  /** u8 */
  IdleSensitivityAc: number;
  /** u8 */
  IdleSensitivityDc: number;
  /** u8 */
  ThrottlePolicyAc: number;
  /** u8 */
  ThrottlePolicyDc: number;
  /** Windows.Win32.System.Power.SYSTEM_POWER_STATE */
  MaxSleepAc: SYSTEM_POWER_STATE;
  /** Windows.Win32.System.Power.SYSTEM_POWER_STATE */
  MaxSleepDc: SYSTEM_POWER_STATE;
  /** array */
  Reserved: Deno.PointerValue;
  /** u32 */
  VideoTimeoutAc: number;
  /** u32 */
  VideoTimeoutDc: number;
  /** u32 */
  SpindownTimeoutAc: number;
  /** u32 */
  SpindownTimeoutDc: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  OptimizeForPowerAc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  OptimizeForPowerDc: Uint8Array | Deno.PointerValue;
  /** u8 */
  FanThrottleToleranceAc: number;
  /** u8 */
  FanThrottleToleranceDc: number;
  /** u8 */
  ForcedThrottleAc: number;
  /** u8 */
  ForcedThrottleDc: number;
}

export const sizeofUSER_POWER_POLICY = 96;

export function allocUSER_POWER_POLICY(data?: Partial<USER_POWER_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_POWER_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Revision !== undefined) view.setUint32(0, Number(data.Revision), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.IdleAc !== undefined) view.setBigUint64(8, data.IdleAc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IdleAc))), true);
  // 0x10: pointer
  if (data?.IdleDc !== undefined) view.setBigUint64(16, data.IdleDc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IdleDc))), true);
  // 0x18: u32
  if (data?.IdleTimeoutAc !== undefined) view.setUint32(24, Number(data.IdleTimeoutAc), true);
  // 0x1c: u32
  if (data?.IdleTimeoutDc !== undefined) view.setUint32(28, Number(data.IdleTimeoutDc), true);
  // 0x20: u8
  if (data?.IdleSensitivityAc !== undefined) view.setUint8(32, Number(data.IdleSensitivityAc));
  // 0x21: u8
  if (data?.IdleSensitivityDc !== undefined) view.setUint8(33, Number(data.IdleSensitivityDc));
  // 0x22: u8
  if (data?.ThrottlePolicyAc !== undefined) view.setUint8(34, Number(data.ThrottlePolicyAc));
  // 0x23: u8
  if (data?.ThrottlePolicyDc !== undefined) view.setUint8(35, Number(data.ThrottlePolicyDc));
  // 0x24: i32
  if (data?.MaxSleepAc !== undefined) view.setInt32(36, Number(data.MaxSleepAc), true);
  // 0x28: i32
  if (data?.MaxSleepDc !== undefined) view.setInt32(40, Number(data.MaxSleepDc), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(48, data.Reserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved))), true);
  // 0x38: u32
  if (data?.VideoTimeoutAc !== undefined) view.setUint32(56, Number(data.VideoTimeoutAc), true);
  // 0x3c: u32
  if (data?.VideoTimeoutDc !== undefined) view.setUint32(60, Number(data.VideoTimeoutDc), true);
  // 0x40: u32
  if (data?.SpindownTimeoutAc !== undefined) view.setUint32(64, Number(data.SpindownTimeoutAc), true);
  // 0x44: u32
  if (data?.SpindownTimeoutDc !== undefined) view.setUint32(68, Number(data.SpindownTimeoutDc), true);
  // 0x48: pointer
  if (data?.OptimizeForPowerAc !== undefined) view.setBigUint64(72, data.OptimizeForPowerAc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OptimizeForPowerAc))), true);
  // 0x50: pointer
  if (data?.OptimizeForPowerDc !== undefined) view.setBigUint64(80, data.OptimizeForPowerDc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OptimizeForPowerDc))), true);
  // 0x58: u8
  if (data?.FanThrottleToleranceAc !== undefined) view.setUint8(88, Number(data.FanThrottleToleranceAc));
  // 0x59: u8
  if (data?.FanThrottleToleranceDc !== undefined) view.setUint8(89, Number(data.FanThrottleToleranceDc));
  // 0x5a: u8
  if (data?.ForcedThrottleAc !== undefined) view.setUint8(90, Number(data.ForcedThrottleAc));
  // 0x5b: u8
  if (data?.ForcedThrottleDc !== undefined) view.setUint8(91, Number(data.ForcedThrottleDc));
  // 0x5c: pad4
  return buf;
}

export class USER_POWER_POLICYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Revision(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get IdleAc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get IdleDc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get IdleTimeoutAc(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get IdleTimeoutDc(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u8
  get IdleSensitivityAc(): number {
    return this.view.getUint8(32);
  }

  // 0x21: u8
  get IdleSensitivityDc(): number {
    return this.view.getUint8(33);
  }

  // 0x22: u8
  get ThrottlePolicyAc(): number {
    return this.view.getUint8(34);
  }

  // 0x23: u8
  get ThrottlePolicyDc(): number {
    return this.view.getUint8(35);
  }

  // 0x24: i32
  get MaxSleepAc(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: i32
  get MaxSleepDc(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get Reserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get VideoTimeoutAc(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get VideoTimeoutDc(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get SpindownTimeoutAc(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get SpindownTimeoutDc(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: pointer
  get OptimizeForPowerAc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get OptimizeForPowerDc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: u8
  get FanThrottleToleranceAc(): number {
    return this.view.getUint8(88);
  }

  // 0x59: u8
  get FanThrottleToleranceDc(): number {
    return this.view.getUint8(89);
  }

  // 0x5a: u8
  get ForcedThrottleAc(): number {
    return this.view.getUint8(90);
  }

  // 0x5b: u8
  get ForcedThrottleDc(): number {
    return this.view.getUint8(91);
  }

  // 0x5c: pad4

  // 0x00: u32
  set Revision(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set IdleAc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set IdleDc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set IdleTimeoutAc(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set IdleTimeoutDc(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u8
  set IdleSensitivityAc(value: number) {
    this.view.setUint8(32, value);
  }

  // 0x21: u8
  set IdleSensitivityDc(value: number) {
    this.view.setUint8(33, value);
  }

  // 0x22: u8
  set ThrottlePolicyAc(value: number) {
    this.view.setUint8(34, value);
  }

  // 0x23: u8
  set ThrottlePolicyDc(value: number) {
    this.view.setUint8(35, value);
  }

  // 0x24: i32
  set MaxSleepAc(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: i32
  set MaxSleepDc(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set VideoTimeoutAc(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set VideoTimeoutDc(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set SpindownTimeoutAc(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set SpindownTimeoutDc(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: pointer
  set OptimizeForPowerAc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set OptimizeForPowerDc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: u8
  set FanThrottleToleranceAc(value: number) {
    this.view.setUint8(88, value);
  }

  // 0x59: u8
  set FanThrottleToleranceDc(value: number) {
    this.view.setUint8(89, value);
  }

  // 0x5a: u8
  set ForcedThrottleAc(value: number) {
    this.view.setUint8(90, value);
  }

  // 0x5b: u8
  set ForcedThrottleDc(value: number) {
    this.view.setUint8(91, value);
  }

  // 0x5c: pad4
}

/**
 * Windows.Win32.System.Power.POWER_POLICY (size: 16)
 */
export interface POWER_POLICY {
  /** Windows.Win32.System.Power.USER_POWER_POLICY */
  user: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Power.MACHINE_POWER_POLICY */
  mach: Uint8Array | Deno.PointerValue;
}

export const sizeofPOWER_POLICY = 16;

export function allocPOWER_POLICY(data?: Partial<POWER_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofPOWER_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.user !== undefined) view.setBigUint64(0, data.user === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.user))), true);
  // 0x08: pointer
  if (data?.mach !== undefined) view.setBigUint64(8, data.mach === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.mach))), true);
  return buf;
}

export class POWER_POLICYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get user(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get mach(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set user(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set mach(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Power.DEVICE_NOTIFY_SUBSCRIBE_PARAMETERS (size: 16)
 */
export interface DEVICE_NOTIFY_SUBSCRIBE_PARAMETERS {
  /** Windows.Win32.System.Power.PDEVICE_NOTIFY_CALLBACK_ROUTINE */
  Callback: Uint8Array | Deno.PointerValue;
  /** ptr */
  Context: Deno.PointerValue | Uint8Array;
}

export const sizeofDEVICE_NOTIFY_SUBSCRIBE_PARAMETERS = 16;

export function allocDEVICE_NOTIFY_SUBSCRIBE_PARAMETERS(data?: Partial<DEVICE_NOTIFY_SUBSCRIBE_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_NOTIFY_SUBSCRIBE_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Callback !== undefined) view.setBigUint64(0, data.Callback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Callback))), true);
  // 0x08: pointer
  if (data?.Context !== undefined) view.setBigUint64(8, data.Context === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Context))), true);
  return buf;
}

export class DEVICE_NOTIFY_SUBSCRIBE_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Callback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Context(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Callback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Context(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type PWSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.System.Power.THERMAL_EVENT (size: 32)
 */
export interface THERMAL_EVENT {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  Type: number;
  /** u32 */
  Temperature: number;
  /** u32 */
  TripPointTemperature: number;
  /** Windows.Win32.Foundation.PWSTR */
  Initiator: string | null | Uint8Array | Uint16Array;
}

export const sizeofTHERMAL_EVENT = 32;

export function allocTHERMAL_EVENT(data?: Partial<THERMAL_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofTHERMAL_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.Type !== undefined) view.setUint32(8, Number(data.Type), true);
  // 0x0c: u32
  if (data?.Temperature !== undefined) view.setUint32(12, Number(data.Temperature), true);
  // 0x10: u32
  if (data?.TripPointTemperature !== undefined) view.setUint32(16, Number(data.TripPointTemperature), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.Initiator !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.Initiator);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  return buf;
}

export class THERMAL_EVENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Type(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Temperature(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get TripPointTemperature(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  get Initiator(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Type(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Temperature(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set TripPointTemperature(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  set Initiator(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }
}

/**
 * Windows.Win32.System.Power.BATTERY_QUERY_INFORMATION (size: 16)
 */
export interface BATTERY_QUERY_INFORMATION {
  /** u32 */
  BatteryTag: number;
  /** Windows.Win32.System.Power.BATTERY_QUERY_INFORMATION_LEVEL */
  InformationLevel: BATTERY_QUERY_INFORMATION_LEVEL;
  /** u32 */
  AtRate: number;
}

export const sizeofBATTERY_QUERY_INFORMATION = 16;

export function allocBATTERY_QUERY_INFORMATION(data?: Partial<BATTERY_QUERY_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofBATTERY_QUERY_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BatteryTag !== undefined) view.setUint32(0, Number(data.BatteryTag), true);
  // 0x04: i32
  if (data?.InformationLevel !== undefined) view.setInt32(4, Number(data.InformationLevel), true);
  // 0x08: u32
  if (data?.AtRate !== undefined) view.setUint32(8, Number(data.AtRate), true);
  // 0x0c: pad4
  return buf;
}

export class BATTERY_QUERY_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get BatteryTag(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get InformationLevel(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get AtRate(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set BatteryTag(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set InformationLevel(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set AtRate(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Power.BATTERY_INFORMATION (size: 48)
 */
export interface BATTERY_INFORMATION {
  /** u32 */
  Capabilities: number;
  /** u8 */
  Technology: number;
  /** array */
  Reserved: Deno.PointerValue;
  /** array */
  Chemistry: Deno.PointerValue;
  /** u32 */
  DesignedCapacity: number;
  /** u32 */
  FullChargedCapacity: number;
  /** u32 */
  DefaultAlert1: number;
  /** u32 */
  DefaultAlert2: number;
  /** u32 */
  CriticalBias: number;
  /** u32 */
  CycleCount: number;
}

export const sizeofBATTERY_INFORMATION = 48;

export function allocBATTERY_INFORMATION(data?: Partial<BATTERY_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofBATTERY_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Capabilities !== undefined) view.setUint32(0, Number(data.Capabilities), true);
  // 0x04: u8
  if (data?.Technology !== undefined) view.setUint8(4, Number(data.Technology));
  // 0x05: pad3
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved))), true);
  // 0x10: pointer
  if (data?.Chemistry !== undefined) view.setBigUint64(16, data.Chemistry === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Chemistry))), true);
  // 0x18: u32
  if (data?.DesignedCapacity !== undefined) view.setUint32(24, Number(data.DesignedCapacity), true);
  // 0x1c: u32
  if (data?.FullChargedCapacity !== undefined) view.setUint32(28, Number(data.FullChargedCapacity), true);
  // 0x20: u32
  if (data?.DefaultAlert1 !== undefined) view.setUint32(32, Number(data.DefaultAlert1), true);
  // 0x24: u32
  if (data?.DefaultAlert2 !== undefined) view.setUint32(36, Number(data.DefaultAlert2), true);
  // 0x28: u32
  if (data?.CriticalBias !== undefined) view.setUint32(40, Number(data.CriticalBias), true);
  // 0x2c: u32
  if (data?.CycleCount !== undefined) view.setUint32(44, Number(data.CycleCount), true);
  return buf;
}

export class BATTERY_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Capabilities(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u8
  get Technology(): number {
    return this.view.getUint8(4);
  }

  // 0x05: pad3

  // 0x08: pointer
  get Reserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Chemistry(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get DesignedCapacity(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get FullChargedCapacity(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get DefaultAlert1(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get DefaultAlert2(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get CriticalBias(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get CycleCount(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: u32
  set Capabilities(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u8
  set Technology(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: pad3

  // 0x08: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Chemistry(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set DesignedCapacity(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set FullChargedCapacity(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set DefaultAlert1(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set DefaultAlert2(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set CriticalBias(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set CycleCount(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.System.Power.BATTERY_CHARGING_SOURCE (size: 8)
 */
export interface BATTERY_CHARGING_SOURCE {
  /** Windows.Win32.System.Power.BATTERY_CHARGING_SOURCE_TYPE */
  Type: BATTERY_CHARGING_SOURCE_TYPE;
  /** u32 */
  MaxCurrent: number;
}

export const sizeofBATTERY_CHARGING_SOURCE = 8;

export function allocBATTERY_CHARGING_SOURCE(data?: Partial<BATTERY_CHARGING_SOURCE>): Uint8Array {
  const buf = new Uint8Array(sizeofBATTERY_CHARGING_SOURCE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.MaxCurrent !== undefined) view.setUint32(4, Number(data.MaxCurrent), true);
  return buf;
}

export class BATTERY_CHARGING_SOURCEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get MaxCurrent(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set MaxCurrent(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Power.BATTERY_CHARGING_SOURCE_INFORMATION (size: 16)
 */
export interface BATTERY_CHARGING_SOURCE_INFORMATION {
  /** Windows.Win32.System.Power.BATTERY_CHARGING_SOURCE_TYPE */
  Type: BATTERY_CHARGING_SOURCE_TYPE;
  /** Windows.Win32.Foundation.BOOLEAN */
  SourceOnline: Uint8Array | Deno.PointerValue;
}

export const sizeofBATTERY_CHARGING_SOURCE_INFORMATION = 16;

export function allocBATTERY_CHARGING_SOURCE_INFORMATION(data?: Partial<BATTERY_CHARGING_SOURCE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofBATTERY_CHARGING_SOURCE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SourceOnline !== undefined) view.setBigUint64(8, data.SourceOnline === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SourceOnline))), true);
  return buf;
}

export class BATTERY_CHARGING_SOURCE_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get SourceOnline(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set SourceOnline(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Power.BATTERY_SET_INFORMATION (size: 16)
 */
export interface BATTERY_SET_INFORMATION {
  /** u32 */
  BatteryTag: number;
  /** Windows.Win32.System.Power.BATTERY_SET_INFORMATION_LEVEL */
  InformationLevel: BATTERY_SET_INFORMATION_LEVEL;
  /** array */
  Buffer: Deno.PointerValue;
}

export const sizeofBATTERY_SET_INFORMATION = 16;

export function allocBATTERY_SET_INFORMATION(data?: Partial<BATTERY_SET_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofBATTERY_SET_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BatteryTag !== undefined) view.setUint32(0, Number(data.BatteryTag), true);
  // 0x04: i32
  if (data?.InformationLevel !== undefined) view.setInt32(4, Number(data.InformationLevel), true);
  // 0x08: pointer
  if (data?.Buffer !== undefined) view.setBigUint64(8, data.Buffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Buffer))), true);
  return buf;
}

export class BATTERY_SET_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get BatteryTag(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get InformationLevel(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get Buffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set BatteryTag(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set InformationLevel(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set Buffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Power.BATTERY_CHARGER_STATUS (size: 16)
 */
export interface BATTERY_CHARGER_STATUS {
  /** Windows.Win32.System.Power.BATTERY_CHARGING_SOURCE_TYPE */
  Type: BATTERY_CHARGING_SOURCE_TYPE;
  /** array */
  VaData: Deno.PointerValue;
}

export const sizeofBATTERY_CHARGER_STATUS = 16;

export function allocBATTERY_CHARGER_STATUS(data?: Partial<BATTERY_CHARGER_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofBATTERY_CHARGER_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.VaData !== undefined) view.setBigUint64(8, data.VaData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.VaData))), true);
  return buf;
}

export class BATTERY_CHARGER_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get VaData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set VaData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Power.BATTERY_USB_CHARGER_STATUS (size: 48)
 */
export interface BATTERY_USB_CHARGER_STATUS {
  /** Windows.Win32.System.Power.BATTERY_CHARGING_SOURCE_TYPE */
  Type: BATTERY_CHARGING_SOURCE_TYPE;
  /** u32 */
  Reserved: number;
  /** u32 */
  Flags: number;
  /** u32 */
  MaxCurrent: number;
  /** u32 */
  Voltage: number;
  /** Windows.Win32.System.Power.USB_CHARGER_PORT */
  PortType: USB_CHARGER_PORT;
  /** u64 */
  PortId: bigint | number;
  /** ptr */
  PowerSourceInformation: Deno.PointerValue | Uint8Array;
  /** System.Guid */
  OemCharger: Uint8Array | Deno.PointerValue;
}

export const sizeofBATTERY_USB_CHARGER_STATUS = 48;

export function allocBATTERY_USB_CHARGER_STATUS(data?: Partial<BATTERY_USB_CHARGER_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofBATTERY_USB_CHARGER_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.MaxCurrent !== undefined) view.setUint32(12, Number(data.MaxCurrent), true);
  // 0x10: u32
  if (data?.Voltage !== undefined) view.setUint32(16, Number(data.Voltage), true);
  // 0x14: i32
  if (data?.PortType !== undefined) view.setInt32(20, Number(data.PortType), true);
  // 0x18: u64
  if (data?.PortId !== undefined) view.setBigUint64(24, BigInt(data.PortId), true);
  // 0x20: pointer
  if (data?.PowerSourceInformation !== undefined) view.setBigUint64(32, data.PowerSourceInformation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PowerSourceInformation))), true);
  // 0x28: pointer
  if (data?.OemCharger !== undefined) view.setBigUint64(40, data.OemCharger === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OemCharger))), true);
  return buf;
}

export class BATTERY_USB_CHARGER_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Reserved(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get MaxCurrent(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Voltage(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get PortType(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: u64
  get PortId(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: pointer
  get PowerSourceInformation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get OemCharger(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Reserved(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set MaxCurrent(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Voltage(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set PortType(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: u64
  set PortId(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: pointer
  set PowerSourceInformation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set OemCharger(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Power.BATTERY_WAIT_STATUS (size: 24)
 */
export interface BATTERY_WAIT_STATUS {
  /** u32 */
  BatteryTag: number;
  /** u32 */
  Timeout: number;
  /** u32 */
  PowerState: number;
  /** u32 */
  LowCapacity: number;
  /** u32 */
  HighCapacity: number;
}

export const sizeofBATTERY_WAIT_STATUS = 24;

export function allocBATTERY_WAIT_STATUS(data?: Partial<BATTERY_WAIT_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofBATTERY_WAIT_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BatteryTag !== undefined) view.setUint32(0, Number(data.BatteryTag), true);
  // 0x04: u32
  if (data?.Timeout !== undefined) view.setUint32(4, Number(data.Timeout), true);
  // 0x08: u32
  if (data?.PowerState !== undefined) view.setUint32(8, Number(data.PowerState), true);
  // 0x0c: u32
  if (data?.LowCapacity !== undefined) view.setUint32(12, Number(data.LowCapacity), true);
  // 0x10: u32
  if (data?.HighCapacity !== undefined) view.setUint32(16, Number(data.HighCapacity), true);
  // 0x14: pad4
  return buf;
}

export class BATTERY_WAIT_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get BatteryTag(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Timeout(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get PowerState(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get LowCapacity(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get HighCapacity(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set BatteryTag(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Timeout(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set PowerState(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set LowCapacity(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set HighCapacity(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.System.Power.BATTERY_STATUS (size: 16)
 */
export interface BATTERY_STATUS {
  /** u32 */
  PowerState: number;
  /** u32 */
  Capacity: number;
  /** u32 */
  Voltage: number;
  /** i32 */
  Rate: number;
}

export const sizeofBATTERY_STATUS = 16;

export function allocBATTERY_STATUS(data?: Partial<BATTERY_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofBATTERY_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PowerState !== undefined) view.setUint32(0, Number(data.PowerState), true);
  // 0x04: u32
  if (data?.Capacity !== undefined) view.setUint32(4, Number(data.Capacity), true);
  // 0x08: u32
  if (data?.Voltage !== undefined) view.setUint32(8, Number(data.Voltage), true);
  // 0x0c: i32
  if (data?.Rate !== undefined) view.setInt32(12, Number(data.Rate), true);
  return buf;
}

export class BATTERY_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get PowerState(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Capacity(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Voltage(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get Rate(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: u32
  set PowerState(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Capacity(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Voltage(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set Rate(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.System.Power.BATTERY_MANUFACTURE_DATE (size: 8)
 */
export interface BATTERY_MANUFACTURE_DATE {
  /** u8 */
  Day: number;
  /** u8 */
  Month: number;
  /** u16 */
  Year: number;
}

export const sizeofBATTERY_MANUFACTURE_DATE = 8;

export function allocBATTERY_MANUFACTURE_DATE(data?: Partial<BATTERY_MANUFACTURE_DATE>): Uint8Array {
  const buf = new Uint8Array(sizeofBATTERY_MANUFACTURE_DATE);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Day !== undefined) view.setUint8(0, Number(data.Day));
  // 0x01: u8
  if (data?.Month !== undefined) view.setUint8(1, Number(data.Month));
  // 0x02: u16
  if (data?.Year !== undefined) view.setUint16(2, Number(data.Year), true);
  // 0x04: pad4
  return buf;
}

export class BATTERY_MANUFACTURE_DATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get Day(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Month(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u16
  get Year(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u8
  set Day(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Month(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u16
  set Year(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Power.THERMAL_INFORMATION (size: 56)
 */
export interface THERMAL_INFORMATION {
  /** u32 */
  ThermalStamp: number;
  /** u32 */
  ThermalConstant1: number;
  /** u32 */
  ThermalConstant2: number;
  /** usize */
  Processors: bigint | number;
  /** u32 */
  SamplingPeriod: number;
  /** u32 */
  CurrentTemperature: number;
  /** u32 */
  PassiveTripPoint: number;
  /** u32 */
  CriticalTripPoint: number;
  /** u8 */
  ActiveTripPointCount: number;
  /** array */
  ActiveTripPoint: Deno.PointerValue;
}

export const sizeofTHERMAL_INFORMATION = 56;

export function allocTHERMAL_INFORMATION(data?: Partial<THERMAL_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofTHERMAL_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ThermalStamp !== undefined) view.setUint32(0, Number(data.ThermalStamp), true);
  // 0x04: u32
  if (data?.ThermalConstant1 !== undefined) view.setUint32(4, Number(data.ThermalConstant1), true);
  // 0x08: u32
  if (data?.ThermalConstant2 !== undefined) view.setUint32(8, Number(data.ThermalConstant2), true);
  // 0x0c: pad4
  // 0x10: usize
  if (data?.Processors !== undefined) view.setBigUint64(16, BigInt(data.Processors), true);
  // 0x18: u32
  if (data?.SamplingPeriod !== undefined) view.setUint32(24, Number(data.SamplingPeriod), true);
  // 0x1c: u32
  if (data?.CurrentTemperature !== undefined) view.setUint32(28, Number(data.CurrentTemperature), true);
  // 0x20: u32
  if (data?.PassiveTripPoint !== undefined) view.setUint32(32, Number(data.PassiveTripPoint), true);
  // 0x24: u32
  if (data?.CriticalTripPoint !== undefined) view.setUint32(36, Number(data.CriticalTripPoint), true);
  // 0x28: u8
  if (data?.ActiveTripPointCount !== undefined) view.setUint8(40, Number(data.ActiveTripPointCount));
  // 0x29: pad7
  // 0x30: pointer
  if (data?.ActiveTripPoint !== undefined) view.setBigUint64(48, data.ActiveTripPoint === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ActiveTripPoint))), true);
  return buf;
}

export class THERMAL_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ThermalStamp(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ThermalConstant1(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ThermalConstant2(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: usize
  get Processors(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u32
  get SamplingPeriod(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get CurrentTemperature(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get PassiveTripPoint(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get CriticalTripPoint(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u8
  get ActiveTripPointCount(): number {
    return this.view.getUint8(40);
  }

  // 0x29: pad7

  // 0x30: pointer
  get ActiveTripPoint(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set ThermalStamp(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ThermalConstant1(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ThermalConstant2(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: usize
  set Processors(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u32
  set SamplingPeriod(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set CurrentTemperature(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set PassiveTripPoint(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set CriticalTripPoint(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u8
  set ActiveTripPointCount(value: number) {
    this.view.setUint8(40, value);
  }

  // 0x29: pad7

  // 0x30: pointer
  set ActiveTripPoint(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Power.THERMAL_WAIT_READ (size: 16)
 */
export interface THERMAL_WAIT_READ {
  /** u32 */
  Timeout: number;
  /** u32 */
  LowTemperature: number;
  /** u32 */
  HighTemperature: number;
}

export const sizeofTHERMAL_WAIT_READ = 16;

export function allocTHERMAL_WAIT_READ(data?: Partial<THERMAL_WAIT_READ>): Uint8Array {
  const buf = new Uint8Array(sizeofTHERMAL_WAIT_READ);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Timeout !== undefined) view.setUint32(0, Number(data.Timeout), true);
  // 0x04: u32
  if (data?.LowTemperature !== undefined) view.setUint32(4, Number(data.LowTemperature), true);
  // 0x08: u32
  if (data?.HighTemperature !== undefined) view.setUint32(8, Number(data.HighTemperature), true);
  // 0x0c: pad4
  return buf;
}

export class THERMAL_WAIT_READView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Timeout(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get LowTemperature(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get HighTemperature(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set Timeout(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set LowTemperature(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set HighTemperature(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Power.THERMAL_POLICY (size: 64)
 */
export interface THERMAL_POLICY {
  /** u32 */
  Version: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  WaitForUpdate: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  Hibernate: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  Critical: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  ThermalStandby: Uint8Array | Deno.PointerValue;
  /** u32 */
  ActivationReasons: number;
  /** u32 */
  PassiveLimit: number;
  /** u32 */
  ActiveLevel: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  OverThrottled: Uint8Array | Deno.PointerValue;
}

export const sizeofTHERMAL_POLICY = 64;

export function allocTHERMAL_POLICY(data?: Partial<THERMAL_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofTHERMAL_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.WaitForUpdate !== undefined) view.setBigUint64(8, data.WaitForUpdate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WaitForUpdate))), true);
  // 0x10: pointer
  if (data?.Hibernate !== undefined) view.setBigUint64(16, data.Hibernate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Hibernate))), true);
  // 0x18: pointer
  if (data?.Critical !== undefined) view.setBigUint64(24, data.Critical === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Critical))), true);
  // 0x20: pointer
  if (data?.ThermalStandby !== undefined) view.setBigUint64(32, data.ThermalStandby === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ThermalStandby))), true);
  // 0x28: u32
  if (data?.ActivationReasons !== undefined) view.setUint32(40, Number(data.ActivationReasons), true);
  // 0x2c: u32
  if (data?.PassiveLimit !== undefined) view.setUint32(44, Number(data.PassiveLimit), true);
  // 0x30: u32
  if (data?.ActiveLevel !== undefined) view.setUint32(48, Number(data.ActiveLevel), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.OverThrottled !== undefined) view.setBigUint64(56, data.OverThrottled === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OverThrottled))), true);
  return buf;
}

export class THERMAL_POLICYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get WaitForUpdate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Hibernate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Critical(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ThermalStandby(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get ActivationReasons(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get PassiveLimit(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get ActiveLevel(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get OverThrottled(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set WaitForUpdate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Hibernate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Critical(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set ThermalStandby(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set ActivationReasons(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set PassiveLimit(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set ActiveLevel(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set OverThrottled(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Power.PROCESSOR_OBJECT_INFO (size: 16)
 */
export interface PROCESSOR_OBJECT_INFO {
  /** u32 */
  PhysicalID: number;
  /** u32 */
  PBlkAddress: number;
  /** u8 */
  PBlkLength: number;
}

export const sizeofPROCESSOR_OBJECT_INFO = 16;

export function allocPROCESSOR_OBJECT_INFO(data?: Partial<PROCESSOR_OBJECT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESSOR_OBJECT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PhysicalID !== undefined) view.setUint32(0, Number(data.PhysicalID), true);
  // 0x04: u32
  if (data?.PBlkAddress !== undefined) view.setUint32(4, Number(data.PBlkAddress), true);
  // 0x08: u8
  if (data?.PBlkLength !== undefined) view.setUint8(8, Number(data.PBlkLength));
  // 0x09: pad7
  return buf;
}

export class PROCESSOR_OBJECT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get PhysicalID(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get PBlkAddress(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u8
  get PBlkLength(): number {
    return this.view.getUint8(8);
  }

  // 0x09: pad7

  // 0x00: u32
  set PhysicalID(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set PBlkAddress(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u8
  set PBlkLength(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: pad7
}

/**
 * Windows.Win32.System.Power.PROCESSOR_OBJECT_INFO_EX (size: 16)
 */
export interface PROCESSOR_OBJECT_INFO_EX {
  /** u32 */
  PhysicalID: number;
  /** u32 */
  PBlkAddress: number;
  /** u8 */
  PBlkLength: number;
  /** u32 */
  InitialApicId: number;
}

export const sizeofPROCESSOR_OBJECT_INFO_EX = 16;

export function allocPROCESSOR_OBJECT_INFO_EX(data?: Partial<PROCESSOR_OBJECT_INFO_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESSOR_OBJECT_INFO_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PhysicalID !== undefined) view.setUint32(0, Number(data.PhysicalID), true);
  // 0x04: u32
  if (data?.PBlkAddress !== undefined) view.setUint32(4, Number(data.PBlkAddress), true);
  // 0x08: u8
  if (data?.PBlkLength !== undefined) view.setUint8(8, Number(data.PBlkLength));
  // 0x09: u32
  if (data?.InitialApicId !== undefined) view.setUint32(9, Number(data.InitialApicId), true);
  // 0x0d: pad3
  return buf;
}

export class PROCESSOR_OBJECT_INFO_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get PhysicalID(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get PBlkAddress(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u8
  get PBlkLength(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u32
  get InitialApicId(): number {
    return this.view.getUint32(9, true);
  }

  // 0x0d: pad3

  // 0x00: u32
  set PhysicalID(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set PBlkAddress(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u8
  set PBlkLength(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u32
  set InitialApicId(value: number) {
    this.view.setUint32(9, value, true);
  }

  // 0x0d: pad3
}

/**
 * Windows.Win32.System.Power.WAKE_ALARM_INFORMATION (size: 8)
 */
export interface WAKE_ALARM_INFORMATION {
  /** u32 */
  TimerIdentifier: number;
  /** u32 */
  Timeout: number;
}

export const sizeofWAKE_ALARM_INFORMATION = 8;

export function allocWAKE_ALARM_INFORMATION(data?: Partial<WAKE_ALARM_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofWAKE_ALARM_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TimerIdentifier !== undefined) view.setUint32(0, Number(data.TimerIdentifier), true);
  // 0x04: u32
  if (data?.Timeout !== undefined) view.setUint32(4, Number(data.Timeout), true);
  return buf;
}

export class WAKE_ALARM_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get TimerIdentifier(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Timeout(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set TimerIdentifier(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Timeout(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Power.ACPI_REAL_TIME (size: 24)
 */
export interface ACPI_REAL_TIME {
  /** u16 */
  Year: number;
  /** u8 */
  Month: number;
  /** u8 */
  Day: number;
  /** u8 */
  Hour: number;
  /** u8 */
  Minute: number;
  /** u8 */
  Second: number;
  /** u8 */
  Valid: number;
  /** u16 */
  Milliseconds: number;
  /** i16 */
  TimeZone: number;
  /** u8 */
  DayLight: number;
  /** array */
  Reserved1: Deno.PointerValue;
}

export const sizeofACPI_REAL_TIME = 24;

export function allocACPI_REAL_TIME(data?: Partial<ACPI_REAL_TIME>): Uint8Array {
  const buf = new Uint8Array(sizeofACPI_REAL_TIME);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Year !== undefined) view.setUint16(0, Number(data.Year), true);
  // 0x02: u8
  if (data?.Month !== undefined) view.setUint8(2, Number(data.Month));
  // 0x03: u8
  if (data?.Day !== undefined) view.setUint8(3, Number(data.Day));
  // 0x04: u8
  if (data?.Hour !== undefined) view.setUint8(4, Number(data.Hour));
  // 0x05: u8
  if (data?.Minute !== undefined) view.setUint8(5, Number(data.Minute));
  // 0x06: u8
  if (data?.Second !== undefined) view.setUint8(6, Number(data.Second));
  // 0x07: u8
  if (data?.Valid !== undefined) view.setUint8(7, Number(data.Valid));
  // 0x08: u16
  if (data?.Milliseconds !== undefined) view.setUint16(8, Number(data.Milliseconds), true);
  // 0x0a: i16
  if (data?.TimeZone !== undefined) view.setInt16(10, Number(data.TimeZone), true);
  // 0x0c: u8
  if (data?.DayLight !== undefined) view.setUint8(12, Number(data.DayLight));
  // 0x0d: pad3
  // 0x10: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(16, data.Reserved1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved1))), true);
  return buf;
}

export class ACPI_REAL_TIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Year(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get Month(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get Day(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u8
  get Hour(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get Minute(): number {
    return this.view.getUint8(5);
  }

  // 0x06: u8
  get Second(): number {
    return this.view.getUint8(6);
  }

  // 0x07: u8
  get Valid(): number {
    return this.view.getUint8(7);
  }

  // 0x08: u16
  get Milliseconds(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: i16
  get TimeZone(): number {
    return this.view.getInt16(10, true);
  }

  // 0x0c: u8
  get DayLight(): number {
    return this.view.getUint8(12);
  }

  // 0x0d: pad3

  // 0x10: pointer
  get Reserved1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set Year(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set Month(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set Day(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u8
  set Hour(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set Minute(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: u8
  set Second(value: number) {
    this.view.setUint8(6, value);
  }

  // 0x07: u8
  set Valid(value: number) {
    this.view.setUint8(7, value);
  }

  // 0x08: u16
  set Milliseconds(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: i16
  set TimeZone(value: number) {
    this.view.setInt16(10, value, true);
  }

  // 0x0c: u8
  set DayLight(value: number) {
    this.view.setUint8(12, value);
  }

  // 0x0d: pad3

  // 0x10: pointer
  set Reserved1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Power.EMI_VERSION (size: 8)
 */
export interface EMI_VERSION {
  /** u16 */
  EmiVersion: number;
}

export const sizeofEMI_VERSION = 8;

export function allocEMI_VERSION(data?: Partial<EMI_VERSION>): Uint8Array {
  const buf = new Uint8Array(sizeofEMI_VERSION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.EmiVersion !== undefined) view.setUint16(0, Number(data.EmiVersion), true);
  // 0x02: pad6
  return buf;
}

export class EMI_VERSIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get EmiVersion(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x00: u16
  set EmiVersion(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6
}

/**
 * Windows.Win32.System.Power.EMI_METADATA_SIZE (size: 8)
 */
export interface EMI_METADATA_SIZE {
  /** u32 */
  MetadataSize: number;
}

export const sizeofEMI_METADATA_SIZE = 8;

export function allocEMI_METADATA_SIZE(data?: Partial<EMI_METADATA_SIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofEMI_METADATA_SIZE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MetadataSize !== undefined) view.setUint32(0, Number(data.MetadataSize), true);
  // 0x04: pad4
  return buf;
}

export class EMI_METADATA_SIZEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MetadataSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set MetadataSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Power.EMI_CHANNEL_MEASUREMENT_DATA (size: 16)
 */
export interface EMI_CHANNEL_MEASUREMENT_DATA {
  /** u64 */
  AbsoluteEnergy: bigint | number;
  /** u64 */
  AbsoluteTime: bigint | number;
}

export const sizeofEMI_CHANNEL_MEASUREMENT_DATA = 16;

export function allocEMI_CHANNEL_MEASUREMENT_DATA(data?: Partial<EMI_CHANNEL_MEASUREMENT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofEMI_CHANNEL_MEASUREMENT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.AbsoluteEnergy !== undefined) view.setBigUint64(0, BigInt(data.AbsoluteEnergy), true);
  // 0x08: u64
  if (data?.AbsoluteTime !== undefined) view.setBigUint64(8, BigInt(data.AbsoluteTime), true);
  return buf;
}

export class EMI_CHANNEL_MEASUREMENT_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get AbsoluteEnergy(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get AbsoluteTime(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set AbsoluteEnergy(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set AbsoluteTime(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Power.EMI_METADATA_V1 (size: 40)
 */
export interface EMI_METADATA_V1 {
  /** Windows.Win32.System.Power.EMI_MEASUREMENT_UNIT */
  MeasurementUnit: EMI_MEASUREMENT_UNIT;
  /** array */
  HardwareOEM: Deno.PointerValue;
  /** array */
  HardwareModel: Deno.PointerValue;
  /** u16 */
  HardwareRevision: number;
  /** u16 */
  MeteredHardwareNameSize: number;
  /** array */
  MeteredHardwareName: Deno.PointerValue;
}

export const sizeofEMI_METADATA_V1 = 40;

export function allocEMI_METADATA_V1(data?: Partial<EMI_METADATA_V1>): Uint8Array {
  const buf = new Uint8Array(sizeofEMI_METADATA_V1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MeasurementUnit !== undefined) view.setInt32(0, Number(data.MeasurementUnit), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.HardwareOEM !== undefined) view.setBigUint64(8, data.HardwareOEM === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HardwareOEM))), true);
  // 0x10: pointer
  if (data?.HardwareModel !== undefined) view.setBigUint64(16, data.HardwareModel === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HardwareModel))), true);
  // 0x18: u16
  if (data?.HardwareRevision !== undefined) view.setUint16(24, Number(data.HardwareRevision), true);
  // 0x1a: u16
  if (data?.MeteredHardwareNameSize !== undefined) view.setUint16(26, Number(data.MeteredHardwareNameSize), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.MeteredHardwareName !== undefined) view.setBigUint64(32, data.MeteredHardwareName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MeteredHardwareName))), true);
  return buf;
}

export class EMI_METADATA_V1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MeasurementUnit(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get HardwareOEM(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get HardwareModel(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u16
  get HardwareRevision(): number {
    return this.view.getUint16(24, true);
  }

  // 0x1a: u16
  get MeteredHardwareNameSize(): number {
    return this.view.getUint16(26, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get MeteredHardwareName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MeasurementUnit(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set HardwareOEM(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set HardwareModel(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u16
  set HardwareRevision(value: number) {
    this.view.setUint16(24, value, true);
  }

  // 0x1a: u16
  set MeteredHardwareNameSize(value: number) {
    this.view.setUint16(26, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set MeteredHardwareName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Power.EMI_CHANNEL_V2 (size: 16)
 */
export interface EMI_CHANNEL_V2 {
  /** Windows.Win32.System.Power.EMI_MEASUREMENT_UNIT */
  MeasurementUnit: EMI_MEASUREMENT_UNIT;
  /** u16 */
  ChannelNameSize: number;
  /** array */
  ChannelName: Deno.PointerValue;
}

export const sizeofEMI_CHANNEL_V2 = 16;

export function allocEMI_CHANNEL_V2(data?: Partial<EMI_CHANNEL_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofEMI_CHANNEL_V2);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MeasurementUnit !== undefined) view.setInt32(0, Number(data.MeasurementUnit), true);
  // 0x04: u16
  if (data?.ChannelNameSize !== undefined) view.setUint16(4, Number(data.ChannelNameSize), true);
  // 0x06: pad2
  // 0x08: pointer
  if (data?.ChannelName !== undefined) view.setBigUint64(8, data.ChannelName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ChannelName))), true);
  return buf;
}

export class EMI_CHANNEL_V2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MeasurementUnit(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u16
  get ChannelNameSize(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: pad2

  // 0x08: pointer
  get ChannelName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MeasurementUnit(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u16
  set ChannelNameSize(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: pad2

  // 0x08: pointer
  set ChannelName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Power.EMI_METADATA_V2 (size: 32)
 */
export interface EMI_METADATA_V2 {
  /** array */
  HardwareOEM: Deno.PointerValue;
  /** array */
  HardwareModel: Deno.PointerValue;
  /** u16 */
  HardwareRevision: number;
  /** u16 */
  ChannelCount: number;
  /** array */
  Channels: Deno.PointerValue;
}

export const sizeofEMI_METADATA_V2 = 32;

export function allocEMI_METADATA_V2(data?: Partial<EMI_METADATA_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofEMI_METADATA_V2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.HardwareOEM !== undefined) view.setBigUint64(0, data.HardwareOEM === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HardwareOEM))), true);
  // 0x08: pointer
  if (data?.HardwareModel !== undefined) view.setBigUint64(8, data.HardwareModel === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HardwareModel))), true);
  // 0x10: u16
  if (data?.HardwareRevision !== undefined) view.setUint16(16, Number(data.HardwareRevision), true);
  // 0x12: u16
  if (data?.ChannelCount !== undefined) view.setUint16(18, Number(data.ChannelCount), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Channels !== undefined) view.setBigUint64(24, data.Channels === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Channels))), true);
  return buf;
}

export class EMI_METADATA_V2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get HardwareOEM(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get HardwareModel(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u16
  get HardwareRevision(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: u16
  get ChannelCount(): number {
    return this.view.getUint16(18, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Channels(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set HardwareOEM(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set HardwareModel(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u16
  set HardwareRevision(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: u16
  set ChannelCount(value: number) {
    this.view.setUint16(18, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Channels(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Power.EMI_MEASUREMENT_DATA_V2 (size: 8)
 */
export interface EMI_MEASUREMENT_DATA_V2 {
  /** array */
  ChannelData: Deno.PointerValue;
}

export const sizeofEMI_MEASUREMENT_DATA_V2 = 8;

export function allocEMI_MEASUREMENT_DATA_V2(data?: Partial<EMI_MEASUREMENT_DATA_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofEMI_MEASUREMENT_DATA_V2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ChannelData !== undefined) view.setBigUint64(0, data.ChannelData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ChannelData))), true);
  return buf;
}

export class EMI_MEASUREMENT_DATA_V2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ChannelData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ChannelData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Power.CM_POWER_DATA (size: 40)
 */
export interface CM_POWER_DATA {
  /** u32 */
  PD_Size: number;
  /** Windows.Win32.System.Power.DEVICE_POWER_STATE */
  PD_MostRecentPowerState: DEVICE_POWER_STATE;
  /** u32 */
  PD_Capabilities: number;
  /** u32 */
  PD_D1Latency: number;
  /** u32 */
  PD_D2Latency: number;
  /** u32 */
  PD_D3Latency: number;
  /** array */
  PD_PowerStateMapping: Deno.PointerValue;
  /** Windows.Win32.System.Power.SYSTEM_POWER_STATE */
  PD_DeepestSystemWake: SYSTEM_POWER_STATE;
}

export const sizeofCM_POWER_DATA = 40;

export function allocCM_POWER_DATA(data?: Partial<CM_POWER_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofCM_POWER_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PD_Size !== undefined) view.setUint32(0, Number(data.PD_Size), true);
  // 0x04: i32
  if (data?.PD_MostRecentPowerState !== undefined) view.setInt32(4, Number(data.PD_MostRecentPowerState), true);
  // 0x08: u32
  if (data?.PD_Capabilities !== undefined) view.setUint32(8, Number(data.PD_Capabilities), true);
  // 0x0c: u32
  if (data?.PD_D1Latency !== undefined) view.setUint32(12, Number(data.PD_D1Latency), true);
  // 0x10: u32
  if (data?.PD_D2Latency !== undefined) view.setUint32(16, Number(data.PD_D2Latency), true);
  // 0x14: u32
  if (data?.PD_D3Latency !== undefined) view.setUint32(20, Number(data.PD_D3Latency), true);
  // 0x18: pointer
  if (data?.PD_PowerStateMapping !== undefined) view.setBigUint64(24, data.PD_PowerStateMapping === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PD_PowerStateMapping))), true);
  // 0x20: i32
  if (data?.PD_DeepestSystemWake !== undefined) view.setInt32(32, Number(data.PD_DeepestSystemWake), true);
  // 0x24: pad4
  return buf;
}

export class CM_POWER_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get PD_Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get PD_MostRecentPowerState(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get PD_Capabilities(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get PD_D1Latency(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get PD_D2Latency(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get PD_D3Latency(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get PD_PowerStateMapping(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get PD_DeepestSystemWake(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set PD_Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set PD_MostRecentPowerState(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set PD_Capabilities(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set PD_D1Latency(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set PD_D2Latency(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set PD_D3Latency(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set PD_PowerStateMapping(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: i32
  set PD_DeepestSystemWake(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.System.Power.SET_POWER_SETTING_VALUE (size: 32)
 */
export interface SET_POWER_SETTING_VALUE {
  /** u32 */
  Version: number;
  /** System.Guid */
  Guid: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Power.SYSTEM_POWER_CONDITION */
  PowerCondition: SYSTEM_POWER_CONDITION;
  /** u32 */
  DataLength: number;
  /** array */
  Data: Deno.PointerValue;
}

export const sizeofSET_POWER_SETTING_VALUE = 32;

export function allocSET_POWER_SETTING_VALUE(data?: Partial<SET_POWER_SETTING_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofSET_POWER_SETTING_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Guid !== undefined) view.setBigUint64(8, data.Guid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Guid))), true);
  // 0x10: i32
  if (data?.PowerCondition !== undefined) view.setInt32(16, Number(data.PowerCondition), true);
  // 0x14: u32
  if (data?.DataLength !== undefined) view.setUint32(20, Number(data.DataLength), true);
  // 0x18: pointer
  if (data?.Data !== undefined) view.setBigUint64(24, data.Data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Data))), true);
  return buf;
}

export class SET_POWER_SETTING_VALUEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Guid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get PowerCondition(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u32
  get DataLength(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get Data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Guid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set PowerCondition(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u32
  set DataLength(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set Data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Power.BATTERY_REPORTING_SCALE (size: 8)
 */
export interface BATTERY_REPORTING_SCALE {
  /** u32 */
  Granularity: number;
  /** u32 */
  Capacity: number;
}

export const sizeofBATTERY_REPORTING_SCALE = 8;

export function allocBATTERY_REPORTING_SCALE(data?: Partial<BATTERY_REPORTING_SCALE>): Uint8Array {
  const buf = new Uint8Array(sizeofBATTERY_REPORTING_SCALE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Granularity !== undefined) view.setUint32(0, Number(data.Granularity), true);
  // 0x04: u32
  if (data?.Capacity !== undefined) view.setUint32(4, Number(data.Capacity), true);
  return buf;
}

export class BATTERY_REPORTING_SCALEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Granularity(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Capacity(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set Granularity(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Capacity(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Power.SYSTEM_POWER_LEVEL (size: 40)
 */
export interface SYSTEM_POWER_LEVEL {
  /** Windows.Win32.Foundation.BOOLEAN */
  Enable: Uint8Array | Deno.PointerValue;
  /** array */
  Spare: Deno.PointerValue;
  /** u32 */
  BatteryLevel: number;
  /** Windows.Win32.System.Power.POWER_ACTION_POLICY */
  PowerPolicy: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Power.SYSTEM_POWER_STATE */
  MinSystemState: SYSTEM_POWER_STATE;
}

export const sizeofSYSTEM_POWER_LEVEL = 40;

export function allocSYSTEM_POWER_LEVEL(data?: Partial<SYSTEM_POWER_LEVEL>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_POWER_LEVEL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Enable !== undefined) view.setBigUint64(0, data.Enable === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Enable))), true);
  // 0x08: pointer
  if (data?.Spare !== undefined) view.setBigUint64(8, data.Spare === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Spare))), true);
  // 0x10: u32
  if (data?.BatteryLevel !== undefined) view.setUint32(16, Number(data.BatteryLevel), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.PowerPolicy !== undefined) view.setBigUint64(24, data.PowerPolicy === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PowerPolicy))), true);
  // 0x20: i32
  if (data?.MinSystemState !== undefined) view.setInt32(32, Number(data.MinSystemState), true);
  // 0x24: pad4
  return buf;
}

export class SYSTEM_POWER_LEVELView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Enable(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Spare(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get BatteryLevel(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get PowerPolicy(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get MinSystemState(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x00: pointer
  set Enable(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Spare(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set BatteryLevel(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set PowerPolicy(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: i32
  set MinSystemState(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.System.Power.SYSTEM_POWER_POLICY (size: 160)
 */
export interface SYSTEM_POWER_POLICY {
  /** u32 */
  Revision: number;
  /** Windows.Win32.System.Power.POWER_ACTION_POLICY */
  PowerButton: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Power.POWER_ACTION_POLICY */
  SleepButton: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Power.POWER_ACTION_POLICY */
  LidClose: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Power.SYSTEM_POWER_STATE */
  LidOpenWake: SYSTEM_POWER_STATE;
  /** u32 */
  Reserved: number;
  /** Windows.Win32.System.Power.POWER_ACTION_POLICY */
  Idle: Uint8Array | Deno.PointerValue;
  /** u32 */
  IdleTimeout: number;
  /** u8 */
  IdleSensitivity: number;
  /** u8 */
  DynamicThrottle: number;
  /** array */
  Spare2: Deno.PointerValue;
  /** Windows.Win32.System.Power.SYSTEM_POWER_STATE */
  MinSleep: SYSTEM_POWER_STATE;
  /** Windows.Win32.System.Power.SYSTEM_POWER_STATE */
  MaxSleep: SYSTEM_POWER_STATE;
  /** Windows.Win32.System.Power.SYSTEM_POWER_STATE */
  ReducedLatencySleep: SYSTEM_POWER_STATE;
  /** u32 */
  WinLogonFlags: number;
  /** u32 */
  Spare3: number;
  /** u32 */
  DozeS4Timeout: number;
  /** u32 */
  BroadcastCapacityResolution: number;
  /** array */
  DischargePolicy: Deno.PointerValue;
  /** u32 */
  VideoTimeout: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  VideoDimDisplay: Uint8Array | Deno.PointerValue;
  /** array */
  VideoReserved: Deno.PointerValue;
  /** u32 */
  SpindownTimeout: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  OptimizeForPower: Uint8Array | Deno.PointerValue;
  /** u8 */
  FanThrottleTolerance: number;
  /** u8 */
  ForcedThrottle: number;
  /** u8 */
  MinThrottle: number;
  /** Windows.Win32.System.Power.POWER_ACTION_POLICY */
  OverThrottled: Uint8Array | Deno.PointerValue;
}

export const sizeofSYSTEM_POWER_POLICY = 160;

export function allocSYSTEM_POWER_POLICY(data?: Partial<SYSTEM_POWER_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_POWER_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Revision !== undefined) view.setUint32(0, Number(data.Revision), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.PowerButton !== undefined) view.setBigUint64(8, data.PowerButton === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PowerButton))), true);
  // 0x10: pointer
  if (data?.SleepButton !== undefined) view.setBigUint64(16, data.SleepButton === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SleepButton))), true);
  // 0x18: pointer
  if (data?.LidClose !== undefined) view.setBigUint64(24, data.LidClose === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LidClose))), true);
  // 0x20: i32
  if (data?.LidOpenWake !== undefined) view.setInt32(32, Number(data.LidOpenWake), true);
  // 0x24: u32
  if (data?.Reserved !== undefined) view.setUint32(36, Number(data.Reserved), true);
  // 0x28: pointer
  if (data?.Idle !== undefined) view.setBigUint64(40, data.Idle === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Idle))), true);
  // 0x30: u32
  if (data?.IdleTimeout !== undefined) view.setUint32(48, Number(data.IdleTimeout), true);
  // 0x34: u8
  if (data?.IdleSensitivity !== undefined) view.setUint8(52, Number(data.IdleSensitivity));
  // 0x35: u8
  if (data?.DynamicThrottle !== undefined) view.setUint8(53, Number(data.DynamicThrottle));
  // 0x36: pad2
  // 0x38: pointer
  if (data?.Spare2 !== undefined) view.setBigUint64(56, data.Spare2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Spare2))), true);
  // 0x40: i32
  if (data?.MinSleep !== undefined) view.setInt32(64, Number(data.MinSleep), true);
  // 0x44: i32
  if (data?.MaxSleep !== undefined) view.setInt32(68, Number(data.MaxSleep), true);
  // 0x48: i32
  if (data?.ReducedLatencySleep !== undefined) view.setInt32(72, Number(data.ReducedLatencySleep), true);
  // 0x4c: u32
  if (data?.WinLogonFlags !== undefined) view.setUint32(76, Number(data.WinLogonFlags), true);
  // 0x50: u32
  if (data?.Spare3 !== undefined) view.setUint32(80, Number(data.Spare3), true);
  // 0x54: u32
  if (data?.DozeS4Timeout !== undefined) view.setUint32(84, Number(data.DozeS4Timeout), true);
  // 0x58: u32
  if (data?.BroadcastCapacityResolution !== undefined) view.setUint32(88, Number(data.BroadcastCapacityResolution), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.DischargePolicy !== undefined) view.setBigUint64(96, data.DischargePolicy === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DischargePolicy))), true);
  // 0x68: u32
  if (data?.VideoTimeout !== undefined) view.setUint32(104, Number(data.VideoTimeout), true);
  // 0x6c: pad4
  // 0x70: pointer
  if (data?.VideoDimDisplay !== undefined) view.setBigUint64(112, data.VideoDimDisplay === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.VideoDimDisplay))), true);
  // 0x78: pointer
  if (data?.VideoReserved !== undefined) view.setBigUint64(120, data.VideoReserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.VideoReserved))), true);
  // 0x80: u32
  if (data?.SpindownTimeout !== undefined) view.setUint32(128, Number(data.SpindownTimeout), true);
  // 0x84: pad4
  // 0x88: pointer
  if (data?.OptimizeForPower !== undefined) view.setBigUint64(136, data.OptimizeForPower === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OptimizeForPower))), true);
  // 0x90: u8
  if (data?.FanThrottleTolerance !== undefined) view.setUint8(144, Number(data.FanThrottleTolerance));
  // 0x91: u8
  if (data?.ForcedThrottle !== undefined) view.setUint8(145, Number(data.ForcedThrottle));
  // 0x92: u8
  if (data?.MinThrottle !== undefined) view.setUint8(146, Number(data.MinThrottle));
  // 0x93: pad5
  // 0x98: pointer
  if (data?.OverThrottled !== undefined) view.setBigUint64(152, data.OverThrottled === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OverThrottled))), true);
  return buf;
}

export class SYSTEM_POWER_POLICYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Revision(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get PowerButton(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get SleepButton(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get LidClose(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get LidOpenWake(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: u32
  get Reserved(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get Idle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get IdleTimeout(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u8
  get IdleSensitivity(): number {
    return this.view.getUint8(52);
  }

  // 0x35: u8
  get DynamicThrottle(): number {
    return this.view.getUint8(53);
  }

  // 0x36: pad2

  // 0x38: pointer
  get Spare2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: i32
  get MinSleep(): number {
    return this.view.getInt32(64, true);
  }

  // 0x44: i32
  get MaxSleep(): number {
    return this.view.getInt32(68, true);
  }

  // 0x48: i32
  get ReducedLatencySleep(): number {
    return this.view.getInt32(72, true);
  }

  // 0x4c: u32
  get WinLogonFlags(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get Spare3(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get DozeS4Timeout(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get BroadcastCapacityResolution(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  get DischargePolicy(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: u32
  get VideoTimeout(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: pad4

  // 0x70: pointer
  get VideoDimDisplay(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get VideoReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: u32
  get SpindownTimeout(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: pad4

  // 0x88: pointer
  get OptimizeForPower(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(136, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x90: u8
  get FanThrottleTolerance(): number {
    return this.view.getUint8(144);
  }

  // 0x91: u8
  get ForcedThrottle(): number {
    return this.view.getUint8(145);
  }

  // 0x92: u8
  get MinThrottle(): number {
    return this.view.getUint8(146);
  }

  // 0x93: pad5

  // 0x98: pointer
  get OverThrottled(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(152, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Revision(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set PowerButton(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set SleepButton(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set LidClose(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: i32
  set LidOpenWake(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: u32
  set Reserved(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set Idle(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set IdleTimeout(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u8
  set IdleSensitivity(value: number) {
    this.view.setUint8(52, value);
  }

  // 0x35: u8
  set DynamicThrottle(value: number) {
    this.view.setUint8(53, value);
  }

  // 0x36: pad2

  // 0x38: pointer
  set Spare2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: i32
  set MinSleep(value: number) {
    this.view.setInt32(64, value, true);
  }

  // 0x44: i32
  set MaxSleep(value: number) {
    this.view.setInt32(68, value, true);
  }

  // 0x48: i32
  set ReducedLatencySleep(value: number) {
    this.view.setInt32(72, value, true);
  }

  // 0x4c: u32
  set WinLogonFlags(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set Spare3(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set DozeS4Timeout(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set BroadcastCapacityResolution(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  set DischargePolicy(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: u32
  set VideoTimeout(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: pad4

  // 0x70: pointer
  set VideoDimDisplay(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set VideoReserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: u32
  set SpindownTimeout(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: pad4

  // 0x88: pointer
  set OptimizeForPower(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(136, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x90: u8
  set FanThrottleTolerance(value: number) {
    this.view.setUint8(144, value);
  }

  // 0x91: u8
  set ForcedThrottle(value: number) {
    this.view.setUint8(145, value);
  }

  // 0x92: u8
  set MinThrottle(value: number) {
    this.view.setUint8(146, value);
  }

  // 0x93: pad5

  // 0x98: pointer
  set OverThrottled(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(152, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Power.PROCESSOR_POWER_POLICY_INFO (size: 32)
 */
export interface PROCESSOR_POWER_POLICY_INFO {
  /** u32 */
  TimeCheck: number;
  /** u32 */
  DemoteLimit: number;
  /** u32 */
  PromoteLimit: number;
  /** u8 */
  DemotePercent: number;
  /** u8 */
  PromotePercent: number;
  /** array */
  Spare: Deno.PointerValue;
  /** u32 */
  _bitfield: number;
}

export const sizeofPROCESSOR_POWER_POLICY_INFO = 32;

export function allocPROCESSOR_POWER_POLICY_INFO(data?: Partial<PROCESSOR_POWER_POLICY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESSOR_POWER_POLICY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TimeCheck !== undefined) view.setUint32(0, Number(data.TimeCheck), true);
  // 0x04: u32
  if (data?.DemoteLimit !== undefined) view.setUint32(4, Number(data.DemoteLimit), true);
  // 0x08: u32
  if (data?.PromoteLimit !== undefined) view.setUint32(8, Number(data.PromoteLimit), true);
  // 0x0c: u8
  if (data?.DemotePercent !== undefined) view.setUint8(12, Number(data.DemotePercent));
  // 0x0d: u8
  if (data?.PromotePercent !== undefined) view.setUint8(13, Number(data.PromotePercent));
  // 0x0e: pad2
  // 0x10: pointer
  if (data?.Spare !== undefined) view.setBigUint64(16, data.Spare === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Spare))), true);
  // 0x18: u32
  if (data?._bitfield !== undefined) view.setUint32(24, Number(data._bitfield), true);
  // 0x1c: pad4
  return buf;
}

export class PROCESSOR_POWER_POLICY_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get TimeCheck(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get DemoteLimit(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get PromoteLimit(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u8
  get DemotePercent(): number {
    return this.view.getUint8(12);
  }

  // 0x0d: u8
  get PromotePercent(): number {
    return this.view.getUint8(13);
  }

  // 0x0e: pad2

  // 0x10: pointer
  get Spare(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get _bitfield(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set TimeCheck(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set DemoteLimit(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set PromoteLimit(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u8
  set DemotePercent(value: number) {
    this.view.setUint8(12, value);
  }

  // 0x0d: u8
  set PromotePercent(value: number) {
    this.view.setUint8(13, value);
  }

  // 0x0e: pad2

  // 0x10: pointer
  set Spare(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set _bitfield(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.System.Power.ADMINISTRATOR_POWER_POLICY (size: 24)
 */
export interface ADMINISTRATOR_POWER_POLICY {
  /** Windows.Win32.System.Power.SYSTEM_POWER_STATE */
  MinSleep: SYSTEM_POWER_STATE;
  /** Windows.Win32.System.Power.SYSTEM_POWER_STATE */
  MaxSleep: SYSTEM_POWER_STATE;
  /** u32 */
  MinVideoTimeout: number;
  /** u32 */
  MaxVideoTimeout: number;
  /** u32 */
  MinSpindownTimeout: number;
  /** u32 */
  MaxSpindownTimeout: number;
}

export const sizeofADMINISTRATOR_POWER_POLICY = 24;

export function allocADMINISTRATOR_POWER_POLICY(data?: Partial<ADMINISTRATOR_POWER_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofADMINISTRATOR_POWER_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MinSleep !== undefined) view.setInt32(0, Number(data.MinSleep), true);
  // 0x04: i32
  if (data?.MaxSleep !== undefined) view.setInt32(4, Number(data.MaxSleep), true);
  // 0x08: u32
  if (data?.MinVideoTimeout !== undefined) view.setUint32(8, Number(data.MinVideoTimeout), true);
  // 0x0c: u32
  if (data?.MaxVideoTimeout !== undefined) view.setUint32(12, Number(data.MaxVideoTimeout), true);
  // 0x10: u32
  if (data?.MinSpindownTimeout !== undefined) view.setUint32(16, Number(data.MinSpindownTimeout), true);
  // 0x14: u32
  if (data?.MaxSpindownTimeout !== undefined) view.setUint32(20, Number(data.MaxSpindownTimeout), true);
  return buf;
}

export class ADMINISTRATOR_POWER_POLICYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MinSleep(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get MaxSleep(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get MinVideoTimeout(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get MaxVideoTimeout(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get MinSpindownTimeout(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get MaxSpindownTimeout(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: i32
  set MinSleep(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set MaxSleep(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set MinVideoTimeout(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set MaxVideoTimeout(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set MinSpindownTimeout(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set MaxSpindownTimeout(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.System.Power.SYSTEM_POWER_CAPABILITIES (size: 240)
 */
export interface SYSTEM_POWER_CAPABILITIES {
  /** Windows.Win32.Foundation.BOOLEAN */
  PowerButtonPresent: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  SleepButtonPresent: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  LidPresent: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  SystemS1: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  SystemS2: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  SystemS3: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  SystemS4: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  SystemS5: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  HiberFilePresent: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  FullWake: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  VideoDimPresent: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  ApmPresent: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  UpsPresent: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  ThermalControl: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  ProcessorThrottle: Uint8Array | Deno.PointerValue;
  /** u8 */
  ProcessorMinThrottle: number;
  /** u8 */
  ProcessorMaxThrottle: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  FastSystemS4: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  Hiberboot: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  WakeAlarmPresent: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  AoAc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  DiskSpinDown: Uint8Array | Deno.PointerValue;
  /** u8 */
  HiberFileType: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  AoAcConnectivitySupported: Uint8Array | Deno.PointerValue;
  /** array */
  spare3: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  SystemBatteriesPresent: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  BatteriesAreShortTerm: Uint8Array | Deno.PointerValue;
  /** array */
  BatteryScale: Deno.PointerValue;
  /** Windows.Win32.System.Power.SYSTEM_POWER_STATE */
  AcOnLineWake: SYSTEM_POWER_STATE;
  /** Windows.Win32.System.Power.SYSTEM_POWER_STATE */
  SoftLidWake: SYSTEM_POWER_STATE;
  /** Windows.Win32.System.Power.SYSTEM_POWER_STATE */
  RtcWake: SYSTEM_POWER_STATE;
  /** Windows.Win32.System.Power.SYSTEM_POWER_STATE */
  MinDeviceWakeState: SYSTEM_POWER_STATE;
  /** Windows.Win32.System.Power.SYSTEM_POWER_STATE */
  DefaultLowLatencyWake: SYSTEM_POWER_STATE;
}

export const sizeofSYSTEM_POWER_CAPABILITIES = 240;

export function allocSYSTEM_POWER_CAPABILITIES(data?: Partial<SYSTEM_POWER_CAPABILITIES>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_POWER_CAPABILITIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PowerButtonPresent !== undefined) view.setBigUint64(0, data.PowerButtonPresent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PowerButtonPresent))), true);
  // 0x08: pointer
  if (data?.SleepButtonPresent !== undefined) view.setBigUint64(8, data.SleepButtonPresent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SleepButtonPresent))), true);
  // 0x10: pointer
  if (data?.LidPresent !== undefined) view.setBigUint64(16, data.LidPresent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LidPresent))), true);
  // 0x18: pointer
  if (data?.SystemS1 !== undefined) view.setBigUint64(24, data.SystemS1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SystemS1))), true);
  // 0x20: pointer
  if (data?.SystemS2 !== undefined) view.setBigUint64(32, data.SystemS2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SystemS2))), true);
  // 0x28: pointer
  if (data?.SystemS3 !== undefined) view.setBigUint64(40, data.SystemS3 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SystemS3))), true);
  // 0x30: pointer
  if (data?.SystemS4 !== undefined) view.setBigUint64(48, data.SystemS4 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SystemS4))), true);
  // 0x38: pointer
  if (data?.SystemS5 !== undefined) view.setBigUint64(56, data.SystemS5 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SystemS5))), true);
  // 0x40: pointer
  if (data?.HiberFilePresent !== undefined) view.setBigUint64(64, data.HiberFilePresent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HiberFilePresent))), true);
  // 0x48: pointer
  if (data?.FullWake !== undefined) view.setBigUint64(72, data.FullWake === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FullWake))), true);
  // 0x50: pointer
  if (data?.VideoDimPresent !== undefined) view.setBigUint64(80, data.VideoDimPresent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.VideoDimPresent))), true);
  // 0x58: pointer
  if (data?.ApmPresent !== undefined) view.setBigUint64(88, data.ApmPresent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ApmPresent))), true);
  // 0x60: pointer
  if (data?.UpsPresent !== undefined) view.setBigUint64(96, data.UpsPresent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UpsPresent))), true);
  // 0x68: pointer
  if (data?.ThermalControl !== undefined) view.setBigUint64(104, data.ThermalControl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ThermalControl))), true);
  // 0x70: pointer
  if (data?.ProcessorThrottle !== undefined) view.setBigUint64(112, data.ProcessorThrottle === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProcessorThrottle))), true);
  // 0x78: u8
  if (data?.ProcessorMinThrottle !== undefined) view.setUint8(120, Number(data.ProcessorMinThrottle));
  // 0x79: u8
  if (data?.ProcessorMaxThrottle !== undefined) view.setUint8(121, Number(data.ProcessorMaxThrottle));
  // 0x7a: pad6
  // 0x80: pointer
  if (data?.FastSystemS4 !== undefined) view.setBigUint64(128, data.FastSystemS4 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FastSystemS4))), true);
  // 0x88: pointer
  if (data?.Hiberboot !== undefined) view.setBigUint64(136, data.Hiberboot === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Hiberboot))), true);
  // 0x90: pointer
  if (data?.WakeAlarmPresent !== undefined) view.setBigUint64(144, data.WakeAlarmPresent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WakeAlarmPresent))), true);
  // 0x98: pointer
  if (data?.AoAc !== undefined) view.setBigUint64(152, data.AoAc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AoAc))), true);
  // 0xa0: pointer
  if (data?.DiskSpinDown !== undefined) view.setBigUint64(160, data.DiskSpinDown === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DiskSpinDown))), true);
  // 0xa8: u8
  if (data?.HiberFileType !== undefined) view.setUint8(168, Number(data.HiberFileType));
  // 0xa9: pad7
  // 0xb0: pointer
  if (data?.AoAcConnectivitySupported !== undefined) view.setBigUint64(176, data.AoAcConnectivitySupported === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AoAcConnectivitySupported))), true);
  // 0xb8: pointer
  if (data?.spare3 !== undefined) view.setBigUint64(184, data.spare3 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.spare3))), true);
  // 0xc0: pointer
  if (data?.SystemBatteriesPresent !== undefined) view.setBigUint64(192, data.SystemBatteriesPresent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SystemBatteriesPresent))), true);
  // 0xc8: pointer
  if (data?.BatteriesAreShortTerm !== undefined) view.setBigUint64(200, data.BatteriesAreShortTerm === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.BatteriesAreShortTerm))), true);
  // 0xd0: pointer
  if (data?.BatteryScale !== undefined) view.setBigUint64(208, data.BatteryScale === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.BatteryScale))), true);
  // 0xd8: i32
  if (data?.AcOnLineWake !== undefined) view.setInt32(216, Number(data.AcOnLineWake), true);
  // 0xdc: i32
  if (data?.SoftLidWake !== undefined) view.setInt32(220, Number(data.SoftLidWake), true);
  // 0xe0: i32
  if (data?.RtcWake !== undefined) view.setInt32(224, Number(data.RtcWake), true);
  // 0xe4: i32
  if (data?.MinDeviceWakeState !== undefined) view.setInt32(228, Number(data.MinDeviceWakeState), true);
  // 0xe8: i32
  if (data?.DefaultLowLatencyWake !== undefined) view.setInt32(232, Number(data.DefaultLowLatencyWake), true);
  // 0xec: pad4
  return buf;
}

export class SYSTEM_POWER_CAPABILITIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PowerButtonPresent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get SleepButtonPresent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get LidPresent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get SystemS1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get SystemS2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get SystemS3(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get SystemS4(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get SystemS5(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get HiberFilePresent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get FullWake(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get VideoDimPresent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get ApmPresent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get UpsPresent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get ThermalControl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get ProcessorThrottle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: u8
  get ProcessorMinThrottle(): number {
    return this.view.getUint8(120);
  }

  // 0x79: u8
  get ProcessorMaxThrottle(): number {
    return this.view.getUint8(121);
  }

  // 0x7a: pad6

  // 0x80: pointer
  get FastSystemS4(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x88: pointer
  get Hiberboot(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(136, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x90: pointer
  get WakeAlarmPresent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(144, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x98: pointer
  get AoAc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(152, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa0: pointer
  get DiskSpinDown(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(160, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa8: u8
  get HiberFileType(): number {
    return this.view.getUint8(168);
  }

  // 0xa9: pad7

  // 0xb0: pointer
  get AoAcConnectivitySupported(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(176, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xb8: pointer
  get spare3(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(184, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xc0: pointer
  get SystemBatteriesPresent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(192, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xc8: pointer
  get BatteriesAreShortTerm(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(200, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xd0: pointer
  get BatteryScale(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(208, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xd8: i32
  get AcOnLineWake(): number {
    return this.view.getInt32(216, true);
  }

  // 0xdc: i32
  get SoftLidWake(): number {
    return this.view.getInt32(220, true);
  }

  // 0xe0: i32
  get RtcWake(): number {
    return this.view.getInt32(224, true);
  }

  // 0xe4: i32
  get MinDeviceWakeState(): number {
    return this.view.getInt32(228, true);
  }

  // 0xe8: i32
  get DefaultLowLatencyWake(): number {
    return this.view.getInt32(232, true);
  }

  // 0xec: pad4

  // 0x00: pointer
  set PowerButtonPresent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set SleepButtonPresent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set LidPresent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set SystemS1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set SystemS2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set SystemS3(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set SystemS4(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set SystemS5(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set HiberFilePresent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set FullWake(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set VideoDimPresent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set ApmPresent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set UpsPresent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: pointer
  set ThermalControl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set ProcessorThrottle(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: u8
  set ProcessorMinThrottle(value: number) {
    this.view.setUint8(120, value);
  }

  // 0x79: u8
  set ProcessorMaxThrottle(value: number) {
    this.view.setUint8(121, value);
  }

  // 0x7a: pad6

  // 0x80: pointer
  set FastSystemS4(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x88: pointer
  set Hiberboot(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(136, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x90: pointer
  set WakeAlarmPresent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(144, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x98: pointer
  set AoAc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(152, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa0: pointer
  set DiskSpinDown(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(160, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa8: u8
  set HiberFileType(value: number) {
    this.view.setUint8(168, value);
  }

  // 0xa9: pad7

  // 0xb0: pointer
  set AoAcConnectivitySupported(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(176, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xb8: pointer
  set spare3(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(184, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xc0: pointer
  set SystemBatteriesPresent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(192, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xc8: pointer
  set BatteriesAreShortTerm(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(200, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xd0: pointer
  set BatteryScale(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(208, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xd8: i32
  set AcOnLineWake(value: number) {
    this.view.setInt32(216, value, true);
  }

  // 0xdc: i32
  set SoftLidWake(value: number) {
    this.view.setInt32(220, value, true);
  }

  // 0xe0: i32
  set RtcWake(value: number) {
    this.view.setInt32(224, value, true);
  }

  // 0xe4: i32
  set MinDeviceWakeState(value: number) {
    this.view.setInt32(228, value, true);
  }

  // 0xe8: i32
  set DefaultLowLatencyWake(value: number) {
    this.view.setInt32(232, value, true);
  }

  // 0xec: pad4
}

/**
 * Windows.Win32.System.Power.SYSTEM_BATTERY_STATE (size: 72)
 */
export interface SYSTEM_BATTERY_STATE {
  /** Windows.Win32.Foundation.BOOLEAN */
  AcOnLine: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  BatteryPresent: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  Charging: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  Discharging: Uint8Array | Deno.PointerValue;
  /** array */
  Spare1: Deno.PointerValue;
  /** u8 */
  Tag: number;
  /** u32 */
  MaxCapacity: number;
  /** u32 */
  RemainingCapacity: number;
  /** u32 */
  Rate: number;
  /** u32 */
  EstimatedTime: number;
  /** u32 */
  DefaultAlert1: number;
  /** u32 */
  DefaultAlert2: number;
}

export const sizeofSYSTEM_BATTERY_STATE = 72;

export function allocSYSTEM_BATTERY_STATE(data?: Partial<SYSTEM_BATTERY_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_BATTERY_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AcOnLine !== undefined) view.setBigUint64(0, data.AcOnLine === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AcOnLine))), true);
  // 0x08: pointer
  if (data?.BatteryPresent !== undefined) view.setBigUint64(8, data.BatteryPresent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.BatteryPresent))), true);
  // 0x10: pointer
  if (data?.Charging !== undefined) view.setBigUint64(16, data.Charging === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Charging))), true);
  // 0x18: pointer
  if (data?.Discharging !== undefined) view.setBigUint64(24, data.Discharging === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Discharging))), true);
  // 0x20: pointer
  if (data?.Spare1 !== undefined) view.setBigUint64(32, data.Spare1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Spare1))), true);
  // 0x28: u8
  if (data?.Tag !== undefined) view.setUint8(40, Number(data.Tag));
  // 0x29: u32
  if (data?.MaxCapacity !== undefined) view.setUint32(41, Number(data.MaxCapacity), true);
  // 0x2d: u32
  if (data?.RemainingCapacity !== undefined) view.setUint32(45, Number(data.RemainingCapacity), true);
  // 0x31: u32
  if (data?.Rate !== undefined) view.setUint32(49, Number(data.Rate), true);
  // 0x35: u32
  if (data?.EstimatedTime !== undefined) view.setUint32(53, Number(data.EstimatedTime), true);
  // 0x39: u32
  if (data?.DefaultAlert1 !== undefined) view.setUint32(57, Number(data.DefaultAlert1), true);
  // 0x3d: u32
  if (data?.DefaultAlert2 !== undefined) view.setUint32(61, Number(data.DefaultAlert2), true);
  // 0x41: pad7
  return buf;
}

export class SYSTEM_BATTERY_STATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get AcOnLine(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get BatteryPresent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Charging(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Discharging(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get Spare1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u8
  get Tag(): number {
    return this.view.getUint8(40);
  }

  // 0x29: u32
  get MaxCapacity(): number {
    return this.view.getUint32(41, true);
  }

  // 0x2d: u32
  get RemainingCapacity(): number {
    return this.view.getUint32(45, true);
  }

  // 0x31: u32
  get Rate(): number {
    return this.view.getUint32(49, true);
  }

  // 0x35: u32
  get EstimatedTime(): number {
    return this.view.getUint32(53, true);
  }

  // 0x39: u32
  get DefaultAlert1(): number {
    return this.view.getUint32(57, true);
  }

  // 0x3d: u32
  get DefaultAlert2(): number {
    return this.view.getUint32(61, true);
  }

  // 0x41: pad7

  // 0x00: pointer
  set AcOnLine(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set BatteryPresent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Charging(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Discharging(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set Spare1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u8
  set Tag(value: number) {
    this.view.setUint8(40, value);
  }

  // 0x29: u32
  set MaxCapacity(value: number) {
    this.view.setUint32(41, value, true);
  }

  // 0x2d: u32
  set RemainingCapacity(value: number) {
    this.view.setUint32(45, value, true);
  }

  // 0x31: u32
  set Rate(value: number) {
    this.view.setUint32(49, value, true);
  }

  // 0x35: u32
  set EstimatedTime(value: number) {
    this.view.setUint32(53, value, true);
  }

  // 0x39: u32
  set DefaultAlert1(value: number) {
    this.view.setUint32(57, value, true);
  }

  // 0x3d: u32
  set DefaultAlert2(value: number) {
    this.view.setUint32(61, value, true);
  }

  // 0x41: pad7
}

/**
 * Windows.Win32.System.Power.POWERBROADCAST_SETTING (size: 24)
 */
export interface POWERBROADCAST_SETTING {
  /** System.Guid */
  PowerSetting: Uint8Array | Deno.PointerValue;
  /** u32 */
  DataLength: number;
  /** array */
  Data: Deno.PointerValue;
}

export const sizeofPOWERBROADCAST_SETTING = 24;

export function allocPOWERBROADCAST_SETTING(data?: Partial<POWERBROADCAST_SETTING>): Uint8Array {
  const buf = new Uint8Array(sizeofPOWERBROADCAST_SETTING);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PowerSetting !== undefined) view.setBigUint64(0, data.PowerSetting === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PowerSetting))), true);
  // 0x08: u32
  if (data?.DataLength !== undefined) view.setUint32(8, Number(data.DataLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Data !== undefined) view.setBigUint64(16, data.Data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Data))), true);
  return buf;
}

export class POWERBROADCAST_SETTINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PowerSetting(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get DataLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set PowerSetting(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set DataLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Power.SYSTEM_POWER_STATUS (size: 16)
 */
export interface SYSTEM_POWER_STATUS {
  /** u8 */
  ACLineStatus: number;
  /** u8 */
  BatteryFlag: number;
  /** u8 */
  BatteryLifePercent: number;
  /** u8 */
  SystemStatusFlag: number;
  /** u32 */
  BatteryLifeTime: number;
  /** u32 */
  BatteryFullLifeTime: number;
}

export const sizeofSYSTEM_POWER_STATUS = 16;

export function allocSYSTEM_POWER_STATUS(data?: Partial<SYSTEM_POWER_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_POWER_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.ACLineStatus !== undefined) view.setUint8(0, Number(data.ACLineStatus));
  // 0x01: u8
  if (data?.BatteryFlag !== undefined) view.setUint8(1, Number(data.BatteryFlag));
  // 0x02: u8
  if (data?.BatteryLifePercent !== undefined) view.setUint8(2, Number(data.BatteryLifePercent));
  // 0x03: u8
  if (data?.SystemStatusFlag !== undefined) view.setUint8(3, Number(data.SystemStatusFlag));
  // 0x04: u32
  if (data?.BatteryLifeTime !== undefined) view.setUint32(4, Number(data.BatteryLifeTime), true);
  // 0x08: u32
  if (data?.BatteryFullLifeTime !== undefined) view.setUint32(8, Number(data.BatteryFullLifeTime), true);
  // 0x0c: pad4
  return buf;
}

export class SYSTEM_POWER_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get ACLineStatus(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get BatteryFlag(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get BatteryLifePercent(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get SystemStatusFlag(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u32
  get BatteryLifeTime(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get BatteryFullLifeTime(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u8
  set ACLineStatus(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set BatteryFlag(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set BatteryLifePercent(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set SystemStatusFlag(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u32
  set BatteryLifeTime(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set BatteryFullLifeTime(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

export type NTSTATUS = number;

export type HANDLE = bigint | number;

export type HKEY = bigint | number;

export type HRESULT = number;

export type LPARAM = bigint | number;

export type BOOL = number;

// Native Libraries

try {
  var libPOWRPROF_dll = Deno.dlopen("POWRPROF.dll", {
    CallNtPowerInformation: {
      parameters: ["i32", "pointer", "u32", "pointer", "u32"],
      result: "pointer",
    },
    GetPwrCapabilities: {
      parameters: ["pointer"],
      result: "pointer",
    },
    PowerDeterminePlatformRoleEx: {
      parameters: ["u32"],
      result: "i32",
    },
    PowerRegisterSuspendResumeNotification: {
      parameters: ["u32", "pointer", "pointer"],
      result: "u32",
    },
    PowerUnregisterSuspendResumeNotification: {
      parameters: ["pointer"],
      result: "u32",
    },
    PowerReadACValue: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    PowerReadDCValue: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    PowerWriteACValueIndex: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32"],
      result: "u32",
    },
    PowerWriteDCValueIndex: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32"],
      result: "u32",
    },
    PowerGetActiveScheme: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    PowerSetActiveScheme: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    PowerSettingRegisterNotification: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    PowerSettingUnregisterNotification: {
      parameters: ["pointer"],
      result: "u32",
    },
    PowerRegisterForEffectivePowerModeNotifications: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PowerUnregisterFromEffectivePowerModeNotifications: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetPwrDiskSpindownRange: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    EnumPwrSchemes: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    ReadGlobalPwrPolicy: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ReadPwrScheme: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    WritePwrScheme: {
      parameters: ["pointer", "buffer", "buffer", "pointer"],
      result: "pointer",
    },
    WriteGlobalPwrPolicy: {
      parameters: ["pointer"],
      result: "pointer",
    },
    DeletePwrScheme: {
      parameters: ["u32"],
      result: "pointer",
    },
    GetActivePwrScheme: {
      parameters: ["pointer"],
      result: "pointer",
    },
    SetActivePwrScheme: {
      parameters: ["u32", "pointer", "pointer"],
      result: "pointer",
    },
    IsPwrSuspendAllowed: {
      parameters: [],
      result: "pointer",
    },
    IsPwrHibernateAllowed: {
      parameters: [],
      result: "pointer",
    },
    IsPwrShutdownAllowed: {
      parameters: [],
      result: "pointer",
    },
    IsAdminOverrideActive: {
      parameters: ["pointer"],
      result: "pointer",
    },
    SetSuspendState: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    GetCurrentPowerPolicies: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    CanUserWritePwrScheme: {
      parameters: [],
      result: "pointer",
    },
    ReadProcessorPwrScheme: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    WriteProcessorPwrScheme: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    ValidatePowerPolicies: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PowerIsSettingRangeDefined: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PowerSettingAccessCheckEx: {
      parameters: ["i32", "pointer", "u32"],
      result: "u32",
    },
    PowerSettingAccessCheck: {
      parameters: ["i32", "pointer"],
      result: "u32",
    },
    PowerReadACValueIndex: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    PowerReadDCValueIndex: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    PowerReadFriendlyName: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    PowerReadDescription: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    PowerReadPossibleValue: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    PowerReadPossibleFriendlyName: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    PowerReadPossibleDescription: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    PowerReadValueMin: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    PowerReadValueMax: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    PowerReadValueIncrement: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    PowerReadValueUnitsSpecifier: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    PowerReadACDefaultIndex: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    PowerReadDCDefaultIndex: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    PowerReadIconResourceSpecifier: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    PowerReadSettingAttributes: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    PowerWriteFriendlyName: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "u32"],
      result: "u32",
    },
    PowerWriteDescription: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "u32"],
      result: "u32",
    },
    PowerWritePossibleValue: {
      parameters: ["pointer", "pointer", "pointer", "u32", "u32", "pointer", "u32"],
      result: "u32",
    },
    PowerWritePossibleFriendlyName: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer", "u32"],
      result: "u32",
    },
    PowerWritePossibleDescription: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer", "u32"],
      result: "u32",
    },
    PowerWriteValueMin: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "u32",
    },
    PowerWriteValueMax: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "u32",
    },
    PowerWriteValueIncrement: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "u32",
    },
    PowerWriteValueUnitsSpecifier: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32"],
      result: "u32",
    },
    PowerWriteACDefaultIndex: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32"],
      result: "u32",
    },
    PowerWriteDCDefaultIndex: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32"],
      result: "u32",
    },
    PowerWriteIconResourceSpecifier: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "u32"],
      result: "u32",
    },
    PowerWriteSettingAttributes: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    PowerDuplicateScheme: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    PowerImportPowerScheme: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "u32",
    },
    PowerDeleteScheme: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    PowerRemovePowerSetting: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    PowerCreateSetting: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    PowerCreatePossibleSetting: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "u32",
    },
    PowerEnumerate: {
      parameters: ["pointer", "pointer", "pointer", "i32", "u32", "pointer", "pointer"],
      result: "u32",
    },
    PowerOpenUserPowerKey: {
      parameters: ["pointer", "u32", "i32"],
      result: "u32",
    },
    PowerOpenSystemPowerKey: {
      parameters: ["pointer", "u32", "i32"],
      result: "u32",
    },
    PowerCanRestoreIndividualDefaultPowerScheme: {
      parameters: ["pointer"],
      result: "u32",
    },
    PowerRestoreIndividualDefaultPowerScheme: {
      parameters: ["pointer"],
      result: "u32",
    },
    PowerRestoreDefaultPowerSchemes: {
      parameters: [],
      result: "u32",
    },
    PowerReplaceDefaultPowerSchemes: {
      parameters: [],
      result: "u32",
    },
    PowerDeterminePlatformRole: {
      parameters: [],
      result: "i32",
    },
    DevicePowerEnumDevices: {
      parameters: ["u32", "u32", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    DevicePowerSetDeviceState: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
    },
    DevicePowerOpen: {
      parameters: ["u32"],
      result: "pointer",
    },
    DevicePowerClose: {
      parameters: [],
      result: "pointer",
    },
    PowerReportThermalEvent: {
      parameters: ["pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libUSER32_dll = Deno.dlopen("USER32.dll", {
    RegisterPowerSettingNotification: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
    },
    UnregisterPowerSettingNotification: {
      parameters: ["pointer"],
      result: "i32",
    },
    RegisterSuspendResumeNotification: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    UnregisterSuspendResumeNotification: {
      parameters: ["pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libKERNEL32_dll = Deno.dlopen("KERNEL32.dll", {
    RequestWakeupLatency: {
      parameters: ["i32"],
      result: "i32",
    },
    IsSystemResumeAutomatic: {
      parameters: [],
      result: "i32",
    },
    SetThreadExecutionState: {
      parameters: ["u32"],
      result: "u32",
    },
    PowerCreateRequest: {
      parameters: ["pointer"],
      result: "pointer",
    },
    PowerSetRequest: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    PowerClearRequest: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    GetDevicePowerState: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetSystemPowerState: {
      parameters: ["i32", "i32"],
      result: "i32",
    },
    GetSystemPowerStatus: {
      parameters: ["pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function CallNtPowerInformation(
  InformationLevel: POWER_INFORMATION_LEVEL /* Windows.Win32.System.Power.POWER_INFORMATION_LEVEL */,
  InputBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  InputBufferLength: number /* u32 */,
  OutputBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  OutputBufferLength: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libPOWRPROF_dll.CallNtPowerInformation(InformationLevel, util.toPointer(InputBuffer), InputBufferLength, util.toPointer(OutputBuffer), OutputBufferLength);
}

export function GetPwrCapabilities(
  lpspc: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libPOWRPROF_dll.GetPwrCapabilities(util.toPointer(lpspc));
}

export function PowerDeterminePlatformRoleEx(
  Version: POWER_PLATFORM_ROLE_VERSION /* Windows.Win32.System.Power.POWER_PLATFORM_ROLE_VERSION */,
): POWER_PLATFORM_ROLE /* Windows.Win32.System.Power.POWER_PLATFORM_ROLE */ {
  return libPOWRPROF_dll.PowerDeterminePlatformRoleEx(Version);
}

export function PowerRegisterSuspendResumeNotification(
  Flags: number /* u32 */,
  Recipient: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  RegistrationHandle: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerRegisterSuspendResumeNotification(Flags, util.toPointer(Recipient), util.toPointer(RegistrationHandle));
}

export function PowerUnregisterSuspendResumeNotification(
  RegistrationHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Power.HPOWERNOTIFY */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerUnregisterSuspendResumeNotification(util.toPointer(RegistrationHandle));
}

export function PowerReadACValue(
  RootPowerKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  SchemeGuid: Deno.PointerValue | Uint8Array /* ptr */,
  SubGroupOfPowerSettingsGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PowerSettingGuid: Deno.PointerValue | Uint8Array /* ptr */,
  Type: Deno.PointerValue | Uint8Array /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
  BufferSize: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerReadACValue(util.toPointer(RootPowerKey), util.toPointer(SchemeGuid), util.toPointer(SubGroupOfPowerSettingsGuid), util.toPointer(PowerSettingGuid), util.toPointer(Type), util.toPointer(Buffer), util.toPointer(BufferSize));
}

export function PowerReadDCValue(
  RootPowerKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  SchemeGuid: Deno.PointerValue | Uint8Array /* ptr */,
  SubGroupOfPowerSettingsGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PowerSettingGuid: Deno.PointerValue | Uint8Array /* ptr */,
  Type: Deno.PointerValue | Uint8Array /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
  BufferSize: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerReadDCValue(util.toPointer(RootPowerKey), util.toPointer(SchemeGuid), util.toPointer(SubGroupOfPowerSettingsGuid), util.toPointer(PowerSettingGuid), util.toPointer(Type), util.toPointer(Buffer), util.toPointer(BufferSize));
}

export function PowerWriteACValueIndex(
  RootPowerKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  SchemeGuid: Deno.PointerValue | Uint8Array /* ptr */,
  SubGroupOfPowerSettingsGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PowerSettingGuid: Deno.PointerValue | Uint8Array /* ptr */,
  AcValueIndex: number /* u32 */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerWriteACValueIndex(util.toPointer(RootPowerKey), util.toPointer(SchemeGuid), util.toPointer(SubGroupOfPowerSettingsGuid), util.toPointer(PowerSettingGuid), AcValueIndex);
}

export function PowerWriteDCValueIndex(
  RootPowerKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  SchemeGuid: Deno.PointerValue | Uint8Array /* ptr */,
  SubGroupOfPowerSettingsGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PowerSettingGuid: Deno.PointerValue | Uint8Array /* ptr */,
  DcValueIndex: number /* u32 */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerWriteDCValueIndex(util.toPointer(RootPowerKey), util.toPointer(SchemeGuid), util.toPointer(SubGroupOfPowerSettingsGuid), util.toPointer(PowerSettingGuid), DcValueIndex);
}

export function PowerGetActiveScheme(
  UserRootPowerKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  ActivePolicyGuid: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerGetActiveScheme(util.toPointer(UserRootPowerKey), util.toPointer(ActivePolicyGuid));
}

export function PowerSetActiveScheme(
  UserRootPowerKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  SchemeGuid: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerSetActiveScheme(util.toPointer(UserRootPowerKey), util.toPointer(SchemeGuid));
}

export function PowerSettingRegisterNotification(
  SettingGuid: Deno.PointerValue | Uint8Array /* ptr */,
  Flags: POWER_SETTING_REGISTER_NOTIFICATION_FLAGS /* Windows.Win32.System.Power.POWER_SETTING_REGISTER_NOTIFICATION_FLAGS */,
  Recipient: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  RegistrationHandle: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerSettingRegisterNotification(util.toPointer(SettingGuid), Flags, util.toPointer(Recipient), util.toPointer(RegistrationHandle));
}

export function PowerSettingUnregisterNotification(
  RegistrationHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Power.HPOWERNOTIFY */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerSettingUnregisterNotification(util.toPointer(RegistrationHandle));
}

export function PowerRegisterForEffectivePowerModeNotifications(
  Version: number /* u32 */,
  Callback: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Power.EFFECTIVE_POWER_MODE_CALLBACK */,
  Context: Deno.PointerValue | Uint8Array /* ptr */,
  RegistrationHandle: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPOWRPROF_dll.PowerRegisterForEffectivePowerModeNotifications(Version, util.toPointer(Callback), util.toPointer(Context), util.toPointer(RegistrationHandle));
}

export function PowerUnregisterFromEffectivePowerModeNotifications(
  RegistrationHandle: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPOWRPROF_dll.PowerUnregisterFromEffectivePowerModeNotifications(util.toPointer(RegistrationHandle));
}

export function GetPwrDiskSpindownRange(
  puiMax: Deno.PointerValue | Uint8Array /* ptr */,
  puiMin: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libPOWRPROF_dll.GetPwrDiskSpindownRange(util.toPointer(puiMax), util.toPointer(puiMin));
}

export function EnumPwrSchemes(
  lpfn: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Power.PWRSCHEMESENUMPROC */,
  lParam: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libPOWRPROF_dll.EnumPwrSchemes(util.toPointer(lpfn), util.toPointer(lParam));
}

export function ReadGlobalPwrPolicy(
  pGlobalPowerPolicy: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libPOWRPROF_dll.ReadGlobalPwrPolicy(util.toPointer(pGlobalPowerPolicy));
}

export function ReadPwrScheme(
  uiID: number /* u32 */,
  pPowerPolicy: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libPOWRPROF_dll.ReadPwrScheme(uiID, util.toPointer(pPowerPolicy));
}

export function WritePwrScheme(
  puiID: Deno.PointerValue | Uint8Array /* ptr */,
  lpszSchemeName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszDescription: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpScheme: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libPOWRPROF_dll.WritePwrScheme(util.toPointer(puiID), util.pwstrToFfi(lpszSchemeName), util.pwstrToFfi(lpszDescription), util.toPointer(lpScheme));
}

export function WriteGlobalPwrPolicy(
  pGlobalPowerPolicy: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libPOWRPROF_dll.WriteGlobalPwrPolicy(util.toPointer(pGlobalPowerPolicy));
}

export function DeletePwrScheme(
  uiID: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libPOWRPROF_dll.DeletePwrScheme(uiID);
}

export function GetActivePwrScheme(
  puiID: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libPOWRPROF_dll.GetActivePwrScheme(util.toPointer(puiID));
}

export function SetActivePwrScheme(
  uiID: number /* u32 */,
  pGlobalPowerPolicy: Deno.PointerValue | Uint8Array /* ptr */,
  pPowerPolicy: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libPOWRPROF_dll.SetActivePwrScheme(uiID, util.toPointer(pGlobalPowerPolicy), util.toPointer(pPowerPolicy));
}

export function IsPwrSuspendAllowed(): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libPOWRPROF_dll.IsPwrSuspendAllowed();
}

export function IsPwrHibernateAllowed(): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libPOWRPROF_dll.IsPwrHibernateAllowed();
}

export function IsPwrShutdownAllowed(): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libPOWRPROF_dll.IsPwrShutdownAllowed();
}

export function IsAdminOverrideActive(
  papp: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libPOWRPROF_dll.IsAdminOverrideActive(util.toPointer(papp));
}

export function SetSuspendState(
  bHibernate: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */,
  bForce: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */,
  bWakeupEventsDisabled: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libPOWRPROF_dll.SetSuspendState(util.toPointer(bHibernate), util.toPointer(bForce), util.toPointer(bWakeupEventsDisabled));
}

export function GetCurrentPowerPolicies(
  pGlobalPowerPolicy: Deno.PointerValue | Uint8Array /* ptr */,
  pPowerPolicy: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libPOWRPROF_dll.GetCurrentPowerPolicies(util.toPointer(pGlobalPowerPolicy), util.toPointer(pPowerPolicy));
}

export function CanUserWritePwrScheme(): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libPOWRPROF_dll.CanUserWritePwrScheme();
}

export function ReadProcessorPwrScheme(
  uiID: number /* u32 */,
  pMachineProcessorPowerPolicy: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libPOWRPROF_dll.ReadProcessorPwrScheme(uiID, util.toPointer(pMachineProcessorPowerPolicy));
}

export function WriteProcessorPwrScheme(
  uiID: number /* u32 */,
  pMachineProcessorPowerPolicy: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libPOWRPROF_dll.WriteProcessorPwrScheme(uiID, util.toPointer(pMachineProcessorPowerPolicy));
}

export function ValidatePowerPolicies(
  pGlobalPowerPolicy: Deno.PointerValue | Uint8Array /* ptr */,
  pPowerPolicy: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libPOWRPROF_dll.ValidatePowerPolicies(util.toPointer(pGlobalPowerPolicy), util.toPointer(pPowerPolicy));
}

export function PowerIsSettingRangeDefined(
  SubKeyGuid: Deno.PointerValue | Uint8Array /* ptr */,
  SettingGuid: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libPOWRPROF_dll.PowerIsSettingRangeDefined(util.toPointer(SubKeyGuid), util.toPointer(SettingGuid));
}

export function PowerSettingAccessCheckEx(
  AccessFlags: POWER_DATA_ACCESSOR /* Windows.Win32.System.Power.POWER_DATA_ACCESSOR */,
  PowerGuid: Deno.PointerValue | Uint8Array /* ptr */,
  AccessType: REG_SAM_FLAGS /* Windows.Win32.System.Registry.REG_SAM_FLAGS */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerSettingAccessCheckEx(AccessFlags, util.toPointer(PowerGuid), AccessType);
}

export function PowerSettingAccessCheck(
  AccessFlags: POWER_DATA_ACCESSOR /* Windows.Win32.System.Power.POWER_DATA_ACCESSOR */,
  PowerGuid: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerSettingAccessCheck(AccessFlags, util.toPointer(PowerGuid));
}

export function PowerReadACValueIndex(
  RootPowerKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  SchemeGuid: Deno.PointerValue | Uint8Array /* ptr */,
  SubGroupOfPowerSettingsGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PowerSettingGuid: Deno.PointerValue | Uint8Array /* ptr */,
  AcValueIndex: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerReadACValueIndex(util.toPointer(RootPowerKey), util.toPointer(SchemeGuid), util.toPointer(SubGroupOfPowerSettingsGuid), util.toPointer(PowerSettingGuid), util.toPointer(AcValueIndex));
}

export function PowerReadDCValueIndex(
  RootPowerKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  SchemeGuid: Deno.PointerValue | Uint8Array /* ptr */,
  SubGroupOfPowerSettingsGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PowerSettingGuid: Deno.PointerValue | Uint8Array /* ptr */,
  DcValueIndex: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerReadDCValueIndex(util.toPointer(RootPowerKey), util.toPointer(SchemeGuid), util.toPointer(SubGroupOfPowerSettingsGuid), util.toPointer(PowerSettingGuid), util.toPointer(DcValueIndex));
}

export function PowerReadFriendlyName(
  RootPowerKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  SchemeGuid: Deno.PointerValue | Uint8Array /* ptr */,
  SubGroupOfPowerSettingsGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PowerSettingGuid: Deno.PointerValue | Uint8Array /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
  BufferSize: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerReadFriendlyName(util.toPointer(RootPowerKey), util.toPointer(SchemeGuid), util.toPointer(SubGroupOfPowerSettingsGuid), util.toPointer(PowerSettingGuid), util.toPointer(Buffer), util.toPointer(BufferSize));
}

export function PowerReadDescription(
  RootPowerKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  SchemeGuid: Deno.PointerValue | Uint8Array /* ptr */,
  SubGroupOfPowerSettingsGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PowerSettingGuid: Deno.PointerValue | Uint8Array /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
  BufferSize: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerReadDescription(util.toPointer(RootPowerKey), util.toPointer(SchemeGuid), util.toPointer(SubGroupOfPowerSettingsGuid), util.toPointer(PowerSettingGuid), util.toPointer(Buffer), util.toPointer(BufferSize));
}

export function PowerReadPossibleValue(
  RootPowerKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  SubGroupOfPowerSettingsGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PowerSettingGuid: Deno.PointerValue | Uint8Array /* ptr */,
  Type: Deno.PointerValue | Uint8Array /* ptr */,
  PossibleSettingIndex: number /* u32 */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
  BufferSize: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerReadPossibleValue(util.toPointer(RootPowerKey), util.toPointer(SubGroupOfPowerSettingsGuid), util.toPointer(PowerSettingGuid), util.toPointer(Type), PossibleSettingIndex, util.toPointer(Buffer), util.toPointer(BufferSize));
}

export function PowerReadPossibleFriendlyName(
  RootPowerKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  SubGroupOfPowerSettingsGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PowerSettingGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PossibleSettingIndex: number /* u32 */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
  BufferSize: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerReadPossibleFriendlyName(util.toPointer(RootPowerKey), util.toPointer(SubGroupOfPowerSettingsGuid), util.toPointer(PowerSettingGuid), PossibleSettingIndex, util.toPointer(Buffer), util.toPointer(BufferSize));
}

export function PowerReadPossibleDescription(
  RootPowerKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  SubGroupOfPowerSettingsGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PowerSettingGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PossibleSettingIndex: number /* u32 */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
  BufferSize: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerReadPossibleDescription(util.toPointer(RootPowerKey), util.toPointer(SubGroupOfPowerSettingsGuid), util.toPointer(PowerSettingGuid), PossibleSettingIndex, util.toPointer(Buffer), util.toPointer(BufferSize));
}

export function PowerReadValueMin(
  RootPowerKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  SubGroupOfPowerSettingsGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PowerSettingGuid: Deno.PointerValue | Uint8Array /* ptr */,
  ValueMinimum: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerReadValueMin(util.toPointer(RootPowerKey), util.toPointer(SubGroupOfPowerSettingsGuid), util.toPointer(PowerSettingGuid), util.toPointer(ValueMinimum));
}

export function PowerReadValueMax(
  RootPowerKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  SubGroupOfPowerSettingsGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PowerSettingGuid: Deno.PointerValue | Uint8Array /* ptr */,
  ValueMaximum: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerReadValueMax(util.toPointer(RootPowerKey), util.toPointer(SubGroupOfPowerSettingsGuid), util.toPointer(PowerSettingGuid), util.toPointer(ValueMaximum));
}

export function PowerReadValueIncrement(
  RootPowerKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  SubGroupOfPowerSettingsGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PowerSettingGuid: Deno.PointerValue | Uint8Array /* ptr */,
  ValueIncrement: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerReadValueIncrement(util.toPointer(RootPowerKey), util.toPointer(SubGroupOfPowerSettingsGuid), util.toPointer(PowerSettingGuid), util.toPointer(ValueIncrement));
}

export function PowerReadValueUnitsSpecifier(
  RootPowerKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  SubGroupOfPowerSettingsGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PowerSettingGuid: Deno.PointerValue | Uint8Array /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
  BufferSize: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerReadValueUnitsSpecifier(util.toPointer(RootPowerKey), util.toPointer(SubGroupOfPowerSettingsGuid), util.toPointer(PowerSettingGuid), util.toPointer(Buffer), util.toPointer(BufferSize));
}

export function PowerReadACDefaultIndex(
  RootPowerKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  SchemePersonalityGuid: Deno.PointerValue | Uint8Array /* ptr */,
  SubGroupOfPowerSettingsGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PowerSettingGuid: Deno.PointerValue | Uint8Array /* ptr */,
  AcDefaultIndex: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerReadACDefaultIndex(util.toPointer(RootPowerKey), util.toPointer(SchemePersonalityGuid), util.toPointer(SubGroupOfPowerSettingsGuid), util.toPointer(PowerSettingGuid), util.toPointer(AcDefaultIndex));
}

export function PowerReadDCDefaultIndex(
  RootPowerKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  SchemePersonalityGuid: Deno.PointerValue | Uint8Array /* ptr */,
  SubGroupOfPowerSettingsGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PowerSettingGuid: Deno.PointerValue | Uint8Array /* ptr */,
  DcDefaultIndex: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerReadDCDefaultIndex(util.toPointer(RootPowerKey), util.toPointer(SchemePersonalityGuid), util.toPointer(SubGroupOfPowerSettingsGuid), util.toPointer(PowerSettingGuid), util.toPointer(DcDefaultIndex));
}

export function PowerReadIconResourceSpecifier(
  RootPowerKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  SchemeGuid: Deno.PointerValue | Uint8Array /* ptr */,
  SubGroupOfPowerSettingsGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PowerSettingGuid: Deno.PointerValue | Uint8Array /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
  BufferSize: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerReadIconResourceSpecifier(util.toPointer(RootPowerKey), util.toPointer(SchemeGuid), util.toPointer(SubGroupOfPowerSettingsGuid), util.toPointer(PowerSettingGuid), util.toPointer(Buffer), util.toPointer(BufferSize));
}

export function PowerReadSettingAttributes(
  SubGroupGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PowerSettingGuid: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerReadSettingAttributes(util.toPointer(SubGroupGuid), util.toPointer(PowerSettingGuid));
}

export function PowerWriteFriendlyName(
  RootPowerKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  SchemeGuid: Deno.PointerValue | Uint8Array /* ptr */,
  SubGroupOfPowerSettingsGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PowerSettingGuid: Deno.PointerValue | Uint8Array /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
  BufferSize: number /* u32 */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerWriteFriendlyName(util.toPointer(RootPowerKey), util.toPointer(SchemeGuid), util.toPointer(SubGroupOfPowerSettingsGuid), util.toPointer(PowerSettingGuid), util.toPointer(Buffer), BufferSize);
}

export function PowerWriteDescription(
  RootPowerKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  SchemeGuid: Deno.PointerValue | Uint8Array /* ptr */,
  SubGroupOfPowerSettingsGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PowerSettingGuid: Deno.PointerValue | Uint8Array /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
  BufferSize: number /* u32 */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerWriteDescription(util.toPointer(RootPowerKey), util.toPointer(SchemeGuid), util.toPointer(SubGroupOfPowerSettingsGuid), util.toPointer(PowerSettingGuid), util.toPointer(Buffer), BufferSize);
}

export function PowerWritePossibleValue(
  RootPowerKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  SubGroupOfPowerSettingsGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PowerSettingGuid: Deno.PointerValue | Uint8Array /* ptr */,
  Type: number /* u32 */,
  PossibleSettingIndex: number /* u32 */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
  BufferSize: number /* u32 */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerWritePossibleValue(util.toPointer(RootPowerKey), util.toPointer(SubGroupOfPowerSettingsGuid), util.toPointer(PowerSettingGuid), Type, PossibleSettingIndex, util.toPointer(Buffer), BufferSize);
}

export function PowerWritePossibleFriendlyName(
  RootPowerKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  SubGroupOfPowerSettingsGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PowerSettingGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PossibleSettingIndex: number /* u32 */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
  BufferSize: number /* u32 */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerWritePossibleFriendlyName(util.toPointer(RootPowerKey), util.toPointer(SubGroupOfPowerSettingsGuid), util.toPointer(PowerSettingGuid), PossibleSettingIndex, util.toPointer(Buffer), BufferSize);
}

export function PowerWritePossibleDescription(
  RootPowerKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  SubGroupOfPowerSettingsGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PowerSettingGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PossibleSettingIndex: number /* u32 */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
  BufferSize: number /* u32 */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerWritePossibleDescription(util.toPointer(RootPowerKey), util.toPointer(SubGroupOfPowerSettingsGuid), util.toPointer(PowerSettingGuid), PossibleSettingIndex, util.toPointer(Buffer), BufferSize);
}

export function PowerWriteValueMin(
  RootPowerKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  SubGroupOfPowerSettingsGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PowerSettingGuid: Deno.PointerValue | Uint8Array /* ptr */,
  ValueMinimum: number /* u32 */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerWriteValueMin(util.toPointer(RootPowerKey), util.toPointer(SubGroupOfPowerSettingsGuid), util.toPointer(PowerSettingGuid), ValueMinimum);
}

export function PowerWriteValueMax(
  RootPowerKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  SubGroupOfPowerSettingsGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PowerSettingGuid: Deno.PointerValue | Uint8Array /* ptr */,
  ValueMaximum: number /* u32 */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerWriteValueMax(util.toPointer(RootPowerKey), util.toPointer(SubGroupOfPowerSettingsGuid), util.toPointer(PowerSettingGuid), ValueMaximum);
}

export function PowerWriteValueIncrement(
  RootPowerKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  SubGroupOfPowerSettingsGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PowerSettingGuid: Deno.PointerValue | Uint8Array /* ptr */,
  ValueIncrement: number /* u32 */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerWriteValueIncrement(util.toPointer(RootPowerKey), util.toPointer(SubGroupOfPowerSettingsGuid), util.toPointer(PowerSettingGuid), ValueIncrement);
}

export function PowerWriteValueUnitsSpecifier(
  RootPowerKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  SubGroupOfPowerSettingsGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PowerSettingGuid: Deno.PointerValue | Uint8Array /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
  BufferSize: number /* u32 */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerWriteValueUnitsSpecifier(util.toPointer(RootPowerKey), util.toPointer(SubGroupOfPowerSettingsGuid), util.toPointer(PowerSettingGuid), util.toPointer(Buffer), BufferSize);
}

export function PowerWriteACDefaultIndex(
  RootSystemPowerKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  SchemePersonalityGuid: Deno.PointerValue | Uint8Array /* ptr */,
  SubGroupOfPowerSettingsGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PowerSettingGuid: Deno.PointerValue | Uint8Array /* ptr */,
  DefaultAcIndex: number /* u32 */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerWriteACDefaultIndex(util.toPointer(RootSystemPowerKey), util.toPointer(SchemePersonalityGuid), util.toPointer(SubGroupOfPowerSettingsGuid), util.toPointer(PowerSettingGuid), DefaultAcIndex);
}

export function PowerWriteDCDefaultIndex(
  RootSystemPowerKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  SchemePersonalityGuid: Deno.PointerValue | Uint8Array /* ptr */,
  SubGroupOfPowerSettingsGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PowerSettingGuid: Deno.PointerValue | Uint8Array /* ptr */,
  DefaultDcIndex: number /* u32 */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerWriteDCDefaultIndex(util.toPointer(RootSystemPowerKey), util.toPointer(SchemePersonalityGuid), util.toPointer(SubGroupOfPowerSettingsGuid), util.toPointer(PowerSettingGuid), DefaultDcIndex);
}

export function PowerWriteIconResourceSpecifier(
  RootPowerKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  SchemeGuid: Deno.PointerValue | Uint8Array /* ptr */,
  SubGroupOfPowerSettingsGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PowerSettingGuid: Deno.PointerValue | Uint8Array /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
  BufferSize: number /* u32 */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerWriteIconResourceSpecifier(util.toPointer(RootPowerKey), util.toPointer(SchemeGuid), util.toPointer(SubGroupOfPowerSettingsGuid), util.toPointer(PowerSettingGuid), util.toPointer(Buffer), BufferSize);
}

export function PowerWriteSettingAttributes(
  SubGroupGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PowerSettingGuid: Deno.PointerValue | Uint8Array /* ptr */,
  Attributes: number /* u32 */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerWriteSettingAttributes(util.toPointer(SubGroupGuid), util.toPointer(PowerSettingGuid), Attributes);
}

export function PowerDuplicateScheme(
  RootPowerKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  SourceSchemeGuid: Deno.PointerValue | Uint8Array /* ptr */,
  DestinationSchemeGuid: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerDuplicateScheme(util.toPointer(RootPowerKey), util.toPointer(SourceSchemeGuid), util.toPointer(DestinationSchemeGuid));
}

export function PowerImportPowerScheme(
  RootPowerKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  ImportFileNamePath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  DestinationSchemeGuid: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerImportPowerScheme(util.toPointer(RootPowerKey), util.pwstrToFfi(ImportFileNamePath), util.toPointer(DestinationSchemeGuid));
}

export function PowerDeleteScheme(
  RootPowerKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  SchemeGuid: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerDeleteScheme(util.toPointer(RootPowerKey), util.toPointer(SchemeGuid));
}

export function PowerRemovePowerSetting(
  PowerSettingSubKeyGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PowerSettingGuid: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerRemovePowerSetting(util.toPointer(PowerSettingSubKeyGuid), util.toPointer(PowerSettingGuid));
}

export function PowerCreateSetting(
  RootSystemPowerKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  SubGroupOfPowerSettingsGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PowerSettingGuid: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerCreateSetting(util.toPointer(RootSystemPowerKey), util.toPointer(SubGroupOfPowerSettingsGuid), util.toPointer(PowerSettingGuid));
}

export function PowerCreatePossibleSetting(
  RootSystemPowerKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  SubGroupOfPowerSettingsGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PowerSettingGuid: Deno.PointerValue | Uint8Array /* ptr */,
  PossibleSettingIndex: number /* u32 */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerCreatePossibleSetting(util.toPointer(RootSystemPowerKey), util.toPointer(SubGroupOfPowerSettingsGuid), util.toPointer(PowerSettingGuid), PossibleSettingIndex);
}

export function PowerEnumerate(
  RootPowerKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  SchemeGuid: Deno.PointerValue | Uint8Array /* ptr */,
  SubGroupOfPowerSettingsGuid: Deno.PointerValue | Uint8Array /* ptr */,
  AccessFlags: POWER_DATA_ACCESSOR /* Windows.Win32.System.Power.POWER_DATA_ACCESSOR */,
  Index: number /* u32 */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
  BufferSize: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerEnumerate(util.toPointer(RootPowerKey), util.toPointer(SchemeGuid), util.toPointer(SubGroupOfPowerSettingsGuid), AccessFlags, Index, util.toPointer(Buffer), util.toPointer(BufferSize));
}

export function PowerOpenUserPowerKey(
  phUserPowerKey: Deno.PointerValue | Uint8Array /* ptr */,
  Access: number /* u32 */,
  OpenExisting: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerOpenUserPowerKey(util.toPointer(phUserPowerKey), Access, util.boolToFfi(OpenExisting));
}

export function PowerOpenSystemPowerKey(
  phSystemPowerKey: Deno.PointerValue | Uint8Array /* ptr */,
  Access: number /* u32 */,
  OpenExisting: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerOpenSystemPowerKey(util.toPointer(phSystemPowerKey), Access, util.boolToFfi(OpenExisting));
}

export function PowerCanRestoreIndividualDefaultPowerScheme(
  SchemeGuid: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerCanRestoreIndividualDefaultPowerScheme(util.toPointer(SchemeGuid));
}

export function PowerRestoreIndividualDefaultPowerScheme(
  SchemeGuid: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerRestoreIndividualDefaultPowerScheme(util.toPointer(SchemeGuid));
}

export function PowerRestoreDefaultPowerSchemes(): number /* u32 */ {
  return libPOWRPROF_dll.PowerRestoreDefaultPowerSchemes();
}

export function PowerReplaceDefaultPowerSchemes(): number /* u32 */ {
  return libPOWRPROF_dll.PowerReplaceDefaultPowerSchemes();
}

export function PowerDeterminePlatformRole(): POWER_PLATFORM_ROLE /* Windows.Win32.System.Power.POWER_PLATFORM_ROLE */ {
  return libPOWRPROF_dll.PowerDeterminePlatformRole();
}

export function DevicePowerEnumDevices(
  QueryIndex: number /* u32 */,
  QueryInterpretationFlags: number /* u32 */,
  QueryFlags: number /* u32 */,
  pReturnBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  pBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libPOWRPROF_dll.DevicePowerEnumDevices(QueryIndex, QueryInterpretationFlags, QueryFlags, util.toPointer(pReturnBuffer), util.toPointer(pBufferSize));
}

export function DevicePowerSetDeviceState(
  DeviceDescription: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SetFlags: number /* u32 */,
  SetData: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPOWRPROF_dll.DevicePowerSetDeviceState(util.pwstrToFfi(DeviceDescription), SetFlags, util.toPointer(SetData));
}

export function DevicePowerOpen(
  DebugMask: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libPOWRPROF_dll.DevicePowerOpen(DebugMask);
}

export function DevicePowerClose(): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libPOWRPROF_dll.DevicePowerClose();
}

export function PowerReportThermalEvent(
  Event: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPOWRPROF_dll.PowerReportThermalEvent(util.toPointer(Event));
}

export function RegisterPowerSettingNotification(
  hRecipient: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  PowerSettingGuid: Deno.PointerValue | Uint8Array /* ptr */,
  Flags: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.System.Power.HPOWERNOTIFY */ {
  return libUSER32_dll.RegisterPowerSettingNotification(util.toPointer(hRecipient), util.toPointer(PowerSettingGuid), Flags);
}

export function UnregisterPowerSettingNotification(
  Handle: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Power.HPOWERNOTIFY */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.UnregisterPowerSettingNotification(util.toPointer(Handle)));
}

export function RegisterSuspendResumeNotification(
  hRecipient: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Flags: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.System.Power.HPOWERNOTIFY */ {
  return libUSER32_dll.RegisterSuspendResumeNotification(util.toPointer(hRecipient), Flags);
}

export function UnregisterSuspendResumeNotification(
  Handle: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Power.HPOWERNOTIFY */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.UnregisterSuspendResumeNotification(util.toPointer(Handle)));
}

export function RequestWakeupLatency(
  latency: LATENCY_TIME /* Windows.Win32.System.Power.LATENCY_TIME */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.RequestWakeupLatency(latency));
}

export function IsSystemResumeAutomatic(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.IsSystemResumeAutomatic());
}

export function SetThreadExecutionState(
  esFlags: EXECUTION_STATE /* Windows.Win32.System.Power.EXECUTION_STATE */,
): EXECUTION_STATE /* Windows.Win32.System.Power.EXECUTION_STATE */ {
  return libKERNEL32_dll.SetThreadExecutionState(esFlags);
}

export function PowerCreateRequest(
  Context: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libKERNEL32_dll.PowerCreateRequest(util.toPointer(Context));
}

export function PowerSetRequest(
  PowerRequest: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  RequestType: POWER_REQUEST_TYPE /* Windows.Win32.System.Power.POWER_REQUEST_TYPE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.PowerSetRequest(util.toPointer(PowerRequest), RequestType));
}

export function PowerClearRequest(
  PowerRequest: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  RequestType: POWER_REQUEST_TYPE /* Windows.Win32.System.Power.POWER_REQUEST_TYPE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.PowerClearRequest(util.toPointer(PowerRequest), RequestType));
}

export function GetDevicePowerState(
  hDevice: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pfOn: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetDevicePowerState(util.toPointer(hDevice), util.toPointer(pfOn)));
}

export function SetSystemPowerState(
  fSuspend: boolean /* Windows.Win32.Foundation.BOOL */,
  fForce: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetSystemPowerState(util.boolToFfi(fSuspend), util.boolToFfi(fForce)));
}

export function GetSystemPowerStatus(
  lpSystemPowerStatus: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetSystemPowerStatus(util.toPointer(lpSystemPowerStatus)));
}

