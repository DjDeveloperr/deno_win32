/// Auto-generated by Deno Win32: Windows.Win32.System.Services.Apis

import * as util from "../../util.ts";

// Enums
export type ENUM_SERVICE_STATE = number;
export type SERVICE_ERROR = number;
export type SERVICE_CONFIG = number;
export type ENUM_SERVICE_TYPE = number;
export type SERVICE_START_TYPE = number;
export type SERVICE_NOTIFY = number;
export type SERVICE_RUNS_IN_PROCESS = number;
export type SERVICE_TRIGGER_ACTION = number;
export type SERVICE_TRIGGER_TYPE = number;
export type SERVICE_TRIGGER_SPECIFIC_DATA_ITEM_DATA_TYPE = number;
export type SERVICE_STATUS_CURRENT_STATE = number;
export type RIP_INFO_TYPE = number;
export type SC_ACTION_TYPE = number;
export type SC_STATUS_TYPE = number;
export type SC_ENUM_TYPE = number;
export type SC_EVENT_TYPE = number;
export type SERVICE_REGISTRY_STATE_TYPE = number;
export type SERVICE_DIRECTORY_TYPE = number;
export type SERVICE_SHARED_REGISTRY_STATE_TYPE = number;
export type SERVICE_SHARED_DIRECTORY_TYPE = number;
export type OBJECT_SECURITY_INFORMATION = number;

// Constants
export const SERVICE_ALL_ACCESS = 983551;
export const SC_MANAGER_ALL_ACCESS = 983103;
export const SERVICES_ACTIVE_DATABASEW = `ServicesActive`;
export const SERVICES_FAILED_DATABASEW = `ServicesFailed`;
export const SERVICES_ACTIVE_DATABASEA = `ServicesActive`;
export const SERVICES_FAILED_DATABASEA = `ServicesFailed`;
export const SERVICES_ACTIVE_DATABASE = `ServicesActive`;
export const SERVICES_FAILED_DATABASE = `ServicesFailed`;
export const SERVICE_NO_CHANGE = 4294967295;
export const SERVICE_CONTROL_STOP = 1;
export const SERVICE_CONTROL_PAUSE = 2;
export const SERVICE_CONTROL_CONTINUE = 3;
export const SERVICE_CONTROL_INTERROGATE = 4;
export const SERVICE_CONTROL_SHUTDOWN = 5;
export const SERVICE_CONTROL_PARAMCHANGE = 6;
export const SERVICE_CONTROL_NETBINDADD = 7;
export const SERVICE_CONTROL_NETBINDREMOVE = 8;
export const SERVICE_CONTROL_NETBINDENABLE = 9;
export const SERVICE_CONTROL_NETBINDDISABLE = 10;
export const SERVICE_CONTROL_DEVICEEVENT = 11;
export const SERVICE_CONTROL_HARDWAREPROFILECHANGE = 12;
export const SERVICE_CONTROL_POWEREVENT = 13;
export const SERVICE_CONTROL_SESSIONCHANGE = 14;
export const SERVICE_CONTROL_PRESHUTDOWN = 15;
export const SERVICE_CONTROL_TIMECHANGE = 16;
export const SERVICE_CONTROL_TRIGGEREVENT = 32;
export const SERVICE_CONTROL_LOWRESOURCES = 96;
export const SERVICE_CONTROL_SYSTEMLOWRESOURCES = 97;
export const SERVICE_ACCEPT_STOP = 1;
export const SERVICE_ACCEPT_PAUSE_CONTINUE = 2;
export const SERVICE_ACCEPT_SHUTDOWN = 4;
export const SERVICE_ACCEPT_PARAMCHANGE = 8;
export const SERVICE_ACCEPT_NETBINDCHANGE = 16;
export const SERVICE_ACCEPT_HARDWAREPROFILECHANGE = 32;
export const SERVICE_ACCEPT_POWEREVENT = 64;
export const SERVICE_ACCEPT_SESSIONCHANGE = 128;
export const SERVICE_ACCEPT_PRESHUTDOWN = 256;
export const SERVICE_ACCEPT_TIMECHANGE = 512;
export const SERVICE_ACCEPT_TRIGGEREVENT = 1024;
export const SERVICE_ACCEPT_USER_LOGOFF = 2048;
export const SERVICE_ACCEPT_LOWRESOURCES = 8192;
export const SERVICE_ACCEPT_SYSTEMLOWRESOURCES = 16384;
export const SC_MANAGER_CONNECT = 1;
export const SC_MANAGER_CREATE_SERVICE = 2;
export const SC_MANAGER_ENUMERATE_SERVICE = 4;
export const SC_MANAGER_LOCK = 8;
export const SC_MANAGER_QUERY_LOCK_STATUS = 16;
export const SC_MANAGER_MODIFY_BOOT_CONFIG = 32;
export const SERVICE_QUERY_CONFIG = 1;
export const SERVICE_CHANGE_CONFIG = 2;
export const SERVICE_QUERY_STATUS = 4;
export const SERVICE_ENUMERATE_DEPENDENTS = 8;
export const SERVICE_START = 16;
export const SERVICE_STOP = 32;
export const SERVICE_PAUSE_CONTINUE = 64;
export const SERVICE_INTERROGATE = 128;
export const SERVICE_USER_DEFINED_CONTROL = 256;
export const SERVICE_NOTIFY_STATUS_CHANGE_1 = 1;
export const SERVICE_NOTIFY_STATUS_CHANGE_2 = 2;
export const SERVICE_NOTIFY_STATUS_CHANGE = 2;
export const SERVICE_STOP_REASON_FLAG_MIN = 0;
export const SERVICE_STOP_REASON_FLAG_UNPLANNED = 268435456;
export const SERVICE_STOP_REASON_FLAG_CUSTOM = 536870912;
export const SERVICE_STOP_REASON_FLAG_PLANNED = 1073741824;
export const SERVICE_STOP_REASON_FLAG_MAX = 2147483648;
export const SERVICE_STOP_REASON_MAJOR_MIN = 0;
export const SERVICE_STOP_REASON_MAJOR_OTHER = 65536;
export const SERVICE_STOP_REASON_MAJOR_HARDWARE = 131072;
export const SERVICE_STOP_REASON_MAJOR_OPERATINGSYSTEM = 196608;
export const SERVICE_STOP_REASON_MAJOR_SOFTWARE = 262144;
export const SERVICE_STOP_REASON_MAJOR_APPLICATION = 327680;
export const SERVICE_STOP_REASON_MAJOR_NONE = 393216;
export const SERVICE_STOP_REASON_MAJOR_MAX = 458752;
export const SERVICE_STOP_REASON_MAJOR_MIN_CUSTOM = 4194304;
export const SERVICE_STOP_REASON_MAJOR_MAX_CUSTOM = 16711680;
export const SERVICE_STOP_REASON_MINOR_MIN = 0;
export const SERVICE_STOP_REASON_MINOR_OTHER = 1;
export const SERVICE_STOP_REASON_MINOR_MAINTENANCE = 2;
export const SERVICE_STOP_REASON_MINOR_INSTALLATION = 3;
export const SERVICE_STOP_REASON_MINOR_UPGRADE = 4;
export const SERVICE_STOP_REASON_MINOR_RECONFIG = 5;
export const SERVICE_STOP_REASON_MINOR_HUNG = 6;
export const SERVICE_STOP_REASON_MINOR_UNSTABLE = 7;
export const SERVICE_STOP_REASON_MINOR_DISK = 8;
export const SERVICE_STOP_REASON_MINOR_NETWORKCARD = 9;
export const SERVICE_STOP_REASON_MINOR_ENVIRONMENT = 10;
export const SERVICE_STOP_REASON_MINOR_HARDWARE_DRIVER = 11;
export const SERVICE_STOP_REASON_MINOR_OTHERDRIVER = 12;
export const SERVICE_STOP_REASON_MINOR_SERVICEPACK = 13;
export const SERVICE_STOP_REASON_MINOR_SOFTWARE_UPDATE = 14;
export const SERVICE_STOP_REASON_MINOR_SECURITYFIX = 15;
export const SERVICE_STOP_REASON_MINOR_SECURITY = 16;
export const SERVICE_STOP_REASON_MINOR_NETWORK_CONNECTIVITY = 17;
export const SERVICE_STOP_REASON_MINOR_WMI = 18;
export const SERVICE_STOP_REASON_MINOR_SERVICEPACK_UNINSTALL = 19;
export const SERVICE_STOP_REASON_MINOR_SOFTWARE_UPDATE_UNINSTALL = 20;
export const SERVICE_STOP_REASON_MINOR_SECURITYFIX_UNINSTALL = 21;
export const SERVICE_STOP_REASON_MINOR_MMC = 22;
export const SERVICE_STOP_REASON_MINOR_NONE = 23;
export const SERVICE_STOP_REASON_MINOR_MEMOTYLIMIT = 24;
export const SERVICE_STOP_REASON_MINOR_MAX = 25;
export const SERVICE_STOP_REASON_MINOR_MIN_CUSTOM = 256;
export const SERVICE_STOP_REASON_MINOR_MAX_CUSTOM = 65535;
export const SERVICE_CONTROL_STATUS_REASON_INFO = 1;
export const SERVICE_SID_TYPE_NONE = 0;
export const SERVICE_SID_TYPE_UNRESTRICTED = 1;
export const SERVICE_TRIGGER_TYPE_CUSTOM_SYSTEM_STATE_CHANGE = 7;
export const SERVICE_TRIGGER_TYPE_AGGREGATE = 30;
export const SERVICE_START_REASON_DEMAND = 1;
export const SERVICE_START_REASON_AUTO = 2;
export const SERVICE_START_REASON_TRIGGER = 4;
export const SERVICE_START_REASON_RESTART_ON_FAILURE = 8;
export const SERVICE_START_REASON_DELAYEDAUTO = 16;
export const SERVICE_DYNAMIC_INFORMATION_LEVEL_START_REASON = 1;
export const SERVICE_LAUNCH_PROTECTED_NONE = 0;
export const SERVICE_LAUNCH_PROTECTED_WINDOWS = 1;
export const SERVICE_LAUNCH_PROTECTED_WINDOWS_LIGHT = 2;
export const SERVICE_LAUNCH_PROTECTED_ANTIMALWARE_LIGHT = 3;
export const SERVICE_TRIGGER_STARTED_ARGUMENT = `TriggerStarted`;
export const SC_AGGREGATE_STORAGE_KEY = `System\\CurrentControlSet\\Control\\ServiceAggregatedEvents`;
export const SERVICE_ACTIVE = 1;
export const SERVICE_INACTIVE = 2;
export const SERVICE_STATE_ALL = 3;
export const SERVICE_ERROR_CRITICAL = 3;
export const SERVICE_ERROR_IGNORE = 0;
export const SERVICE_ERROR_NORMAL = 1;
export const SERVICE_ERROR_SEVERE = 2;
export const SERVICE_CONFIG_DELAYED_AUTO_START_INFO = 3;
export const SERVICE_CONFIG_DESCRIPTION = 1;
export const SERVICE_CONFIG_FAILURE_ACTIONS = 2;
export const SERVICE_CONFIG_FAILURE_ACTIONS_FLAG = 4;
export const SERVICE_CONFIG_PREFERRED_NODE = 9;
export const SERVICE_CONFIG_PRESHUTDOWN_INFO = 7;
export const SERVICE_CONFIG_REQUIRED_PRIVILEGES_INFO = 6;
export const SERVICE_CONFIG_SERVICE_SID_INFO = 5;
export const SERVICE_CONFIG_TRIGGER_INFO = 8;
export const SERVICE_CONFIG_LAUNCH_PROTECTED = 12;
export const SERVICE_DRIVER = 11;
export const SERVICE_KERNEL_DRIVER = 1;
export const SERVICE_WIN32 = 48;
export const SERVICE_WIN32_SHARE_PROCESS = 32;
export const SERVICE_ADAPTER = 4;
export const SERVICE_FILE_SYSTEM_DRIVER = 2;
export const SERVICE_RECOGNIZER_DRIVER = 8;
export const SERVICE_WIN32_OWN_PROCESS = 16;
export const SERVICE_USER_OWN_PROCESS = 80;
export const SERVICE_USER_SHARE_PROCESS = 96;
export const SERVICE_AUTO_START = 2;
export const SERVICE_BOOT_START = 0;
export const SERVICE_DEMAND_START = 3;
export const SERVICE_DISABLED = 4;
export const SERVICE_SYSTEM_START = 1;
export const SERVICE_NOTIFY_CREATED = 128;
export const SERVICE_NOTIFY_CONTINUE_PENDING = 16;
export const SERVICE_NOTIFY_DELETE_PENDING = 512;
export const SERVICE_NOTIFY_DELETED = 256;
export const SERVICE_NOTIFY_PAUSE_PENDING = 32;
export const SERVICE_NOTIFY_PAUSED = 64;
export const SERVICE_NOTIFY_RUNNING = 8;
export const SERVICE_NOTIFY_START_PENDING = 2;
export const SERVICE_NOTIFY_STOP_PENDING = 4;
export const SERVICE_NOTIFY_STOPPED = 1;
export const SERVICE_RUNS_IN_NON_SYSTEM_OR_NOT_RUNNING = 0;
export const SERVICE_RUNS_IN_SYSTEM_PROCESS = 1;
export const SERVICE_TRIGGER_ACTION_SERVICE_START = 1;
export const SERVICE_TRIGGER_ACTION_SERVICE_STOP = 2;
export const SERVICE_TRIGGER_TYPE_CUSTOM = 20;
export const SERVICE_TRIGGER_TYPE_DEVICE_INTERFACE_ARRIVAL = 1;
export const SERVICE_TRIGGER_TYPE_DOMAIN_JOIN = 3;
export const SERVICE_TRIGGER_TYPE_FIREWALL_PORT_EVENT = 4;
export const SERVICE_TRIGGER_TYPE_GROUP_POLICY = 5;
export const SERVICE_TRIGGER_TYPE_IP_ADDRESS_AVAILABILITY = 2;
export const SERVICE_TRIGGER_TYPE_NETWORK_ENDPOINT = 6;
export const SERVICE_TRIGGER_DATA_TYPE_BINARY = 1;
export const SERVICE_TRIGGER_DATA_TYPE_STRING = 2;
export const SERVICE_TRIGGER_DATA_TYPE_LEVEL = 3;
export const SERVICE_TRIGGER_DATA_TYPE_KEYWORD_ANY = 4;
export const SERVICE_TRIGGER_DATA_TYPE_KEYWORD_ALL = 5;
export const SERVICE_CONTINUE_PENDING = 5;
export const SERVICE_PAUSE_PENDING = 6;
export const SERVICE_PAUSED = 7;
export const SERVICE_RUNNING = 4;
export const SERVICE_START_PENDING = 2;
export const SERVICE_STOP_PENDING = 3;
export const SERVICE_STOPPED = 1;
export const SLE_ERROR = 1;
export const SLE_MINORERROR = 2;
export const SLE_WARNING = 3;
export const SC_ACTION_NONE = 0;
export const SC_ACTION_RESTART = 1;
export const SC_ACTION_REBOOT = 2;
export const SC_ACTION_RUN_COMMAND = 3;
export const SC_ACTION_OWN_RESTART = 4;
export const SC_STATUS_PROCESS_INFO = 0;
export const SC_ENUM_PROCESS_INFO = 0;
export const SC_EVENT_DATABASE_CHANGE = 0;
export const SC_EVENT_PROPERTY_CHANGE = 1;
export const SC_EVENT_STATUS_CHANGE = 2;
export const ServiceRegistryStateParameters = 0;
export const ServiceRegistryStatePersistent = 1;
export const MaxServiceRegistryStateType = 2;
export const ServiceDirectoryPersistentState = 0;
export const ServiceDirectoryTypeMax = 1;
export const ServiceSharedRegistryPersistentState = 0;
export const ServiceSharedDirectoryPersistentState = 0;
export const ATTRIBUTE_SECURITY_INFORMATION = 32;
export const BACKUP_SECURITY_INFORMATION = 65536;
export const DACL_SECURITY_INFORMATION = 4;
export const GROUP_SECURITY_INFORMATION = 2;
export const LABEL_SECURITY_INFORMATION = 16;
export const OWNER_SECURITY_INFORMATION = 1;
export const PROTECTED_DACL_SECURITY_INFORMATION = 2147483648;
export const PROTECTED_SACL_SECURITY_INFORMATION = 1073741824;
export const SACL_SECURITY_INFORMATION = 8;
export const SCOPE_SECURITY_INFORMATION = 64;
export const UNPROTECTED_DACL_SECURITY_INFORMATION = 536870912;
export const UNPROTECTED_SACL_SECURITY_INFORMATION = 268435456;

// Structs

export type SERVICE_STATUS_HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.System.Services.SERVICE_TRIGGER_CUSTOM_STATE_ID (size: 8)
 */
export interface SERVICE_TRIGGER_CUSTOM_STATE_ID {
  /** array */
  Data: Deno.PointerValue | null;
}

export const sizeofSERVICE_TRIGGER_CUSTOM_STATE_ID = 8;

export function allocSERVICE_TRIGGER_CUSTOM_STATE_ID(data?: Partial<SERVICE_TRIGGER_CUSTOM_STATE_ID>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_TRIGGER_CUSTOM_STATE_ID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Data !== undefined) view.setBigUint64(0, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  return buf;
}

export type NTSTATUS = number;

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD (size: 48)
 */
export interface EXCEPTION_RECORD {
  /** Windows.Win32.Foundation.NTSTATUS */
  ExceptionCode: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ExceptionFlags: number;
  /** ptr */
  ExceptionRecord: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ExceptionAddress: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumberParameters: number;
  /** array */
  ExceptionInformation: Deno.PointerValue | null;
}

export const sizeofEXCEPTION_RECORD = 48;

export function allocEXCEPTION_RECORD(data?: Partial<EXCEPTION_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionCode !== undefined) view.setBigUint64(0, data.ExceptionCode === null ? 0n : BigInt(util.toPointer(data.ExceptionCode)), true);
  // 0x08: u32
  if (data?.ExceptionFlags !== undefined) view.setUint32(8, Number(data.ExceptionFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(16, data.ExceptionRecord === null ? 0n : BigInt(util.toPointer(data.ExceptionRecord)), true);
  // 0x18: pointer
  if (data?.ExceptionAddress !== undefined) view.setBigUint64(24, data.ExceptionAddress === null ? 0n : BigInt(util.toPointer(data.ExceptionAddress)), true);
  // 0x20: u32
  if (data?.NumberParameters !== undefined) view.setUint32(32, Number(data.NumberParameters), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ExceptionInformation !== undefined) view.setBigUint64(40, data.ExceptionInformation === null ? 0n : BigInt(util.toPointer(data.ExceptionInformation)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_DEBUG_INFO (size: 16)
 */
export interface EXCEPTION_DEBUG_INFO {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD */
  ExceptionRecord: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFirstChance: number;
}

export const sizeofEXCEPTION_DEBUG_INFO = 16;

export function allocEXCEPTION_DEBUG_INFO(data?: Partial<EXCEPTION_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(0, data.ExceptionRecord === null ? 0n : BigInt(util.toPointer(data.ExceptionRecord)), true);
  // 0x08: u32
  if (data?.dwFirstChance !== undefined) view.setUint32(8, Number(data.dwFirstChance), true);
  // 0x0c: pad4
  return buf;
}

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.System.Diagnostics.Debug.CREATE_THREAD_DEBUG_INFO (size: 24)
 */
export interface CREATE_THREAD_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpThreadLocalBase: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */
  lpStartAddress: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCREATE_THREAD_DEBUG_INFO = 24;

export function allocCREATE_THREAD_DEBUG_INFO(data?: Partial<CREATE_THREAD_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_THREAD_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hThread !== undefined) view.setBigUint64(0, data.hThread === null ? 0n : BigInt(util.toPointer(data.hThread)), true);
  // 0x08: pointer
  if (data?.lpThreadLocalBase !== undefined) view.setBigUint64(8, data.lpThreadLocalBase === null ? 0n : BigInt(util.toPointer(data.lpThreadLocalBase)), true);
  // 0x10: pointer
  if (data?.lpStartAddress !== undefined) view.setBigUint64(16, data.lpStartAddress === null ? 0n : BigInt(util.toPointer(data.lpStartAddress)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.CREATE_PROCESS_DEBUG_INFO (size: 72)
 */
export interface CREATE_PROCESS_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hProcess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpBaseOfImage: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwDebugInfoFileOffset: number;
  /** u32 */
  nDebugInfoSize: number;
  /** ptr */
  lpThreadLocalBase: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */
  lpStartAddress: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpImageName: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  fUnicode: number;
}

export const sizeofCREATE_PROCESS_DEBUG_INFO = 72;

export function allocCREATE_PROCESS_DEBUG_INFO(data?: Partial<CREATE_PROCESS_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_PROCESS_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(util.toPointer(data.hFile)), true);
  // 0x08: pointer
  if (data?.hProcess !== undefined) view.setBigUint64(8, data.hProcess === null ? 0n : BigInt(util.toPointer(data.hProcess)), true);
  // 0x10: pointer
  if (data?.hThread !== undefined) view.setBigUint64(16, data.hThread === null ? 0n : BigInt(util.toPointer(data.hThread)), true);
  // 0x18: pointer
  if (data?.lpBaseOfImage !== undefined) view.setBigUint64(24, data.lpBaseOfImage === null ? 0n : BigInt(util.toPointer(data.lpBaseOfImage)), true);
  // 0x20: u32
  if (data?.dwDebugInfoFileOffset !== undefined) view.setUint32(32, Number(data.dwDebugInfoFileOffset), true);
  // 0x24: u32
  if (data?.nDebugInfoSize !== undefined) view.setUint32(36, Number(data.nDebugInfoSize), true);
  // 0x28: pointer
  if (data?.lpThreadLocalBase !== undefined) view.setBigUint64(40, data.lpThreadLocalBase === null ? 0n : BigInt(util.toPointer(data.lpThreadLocalBase)), true);
  // 0x30: pointer
  if (data?.lpStartAddress !== undefined) view.setBigUint64(48, data.lpStartAddress === null ? 0n : BigInt(util.toPointer(data.lpStartAddress)), true);
  // 0x38: pointer
  if (data?.lpImageName !== undefined) view.setBigUint64(56, data.lpImageName === null ? 0n : BigInt(util.toPointer(data.lpImageName)), true);
  // 0x40: u16
  if (data?.fUnicode !== undefined) view.setUint16(64, Number(data.fUnicode), true);
  // 0x42: pad6
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXIT_THREAD_DEBUG_INFO (size: 8)
 */
export interface EXIT_THREAD_DEBUG_INFO {
  /** u32 */
  dwExitCode: number;
}

export const sizeofEXIT_THREAD_DEBUG_INFO = 8;

export function allocEXIT_THREAD_DEBUG_INFO(data?: Partial<EXIT_THREAD_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXIT_THREAD_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExitCode !== undefined) view.setUint32(0, Number(data.dwExitCode), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXIT_PROCESS_DEBUG_INFO (size: 8)
 */
export interface EXIT_PROCESS_DEBUG_INFO {
  /** u32 */
  dwExitCode: number;
}

export const sizeofEXIT_PROCESS_DEBUG_INFO = 8;

export function allocEXIT_PROCESS_DEBUG_INFO(data?: Partial<EXIT_PROCESS_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXIT_PROCESS_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExitCode !== undefined) view.setUint32(0, Number(data.dwExitCode), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.LOAD_DLL_DEBUG_INFO (size: 40)
 */
export interface LOAD_DLL_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwDebugInfoFileOffset: number;
  /** u32 */
  nDebugInfoSize: number;
  /** ptr */
  lpImageName: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  fUnicode: number;
}

export const sizeofLOAD_DLL_DEBUG_INFO = 40;

export function allocLOAD_DLL_DEBUG_INFO(data?: Partial<LOAD_DLL_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofLOAD_DLL_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(util.toPointer(data.hFile)), true);
  // 0x08: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(8, data.lpBaseOfDll === null ? 0n : BigInt(util.toPointer(data.lpBaseOfDll)), true);
  // 0x10: u32
  if (data?.dwDebugInfoFileOffset !== undefined) view.setUint32(16, Number(data.dwDebugInfoFileOffset), true);
  // 0x14: u32
  if (data?.nDebugInfoSize !== undefined) view.setUint32(20, Number(data.nDebugInfoSize), true);
  // 0x18: pointer
  if (data?.lpImageName !== undefined) view.setBigUint64(24, data.lpImageName === null ? 0n : BigInt(util.toPointer(data.lpImageName)), true);
  // 0x20: u16
  if (data?.fUnicode !== undefined) view.setUint16(32, Number(data.fUnicode), true);
  // 0x22: pad6
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.UNLOAD_DLL_DEBUG_INFO (size: 8)
 */
export interface UNLOAD_DLL_DEBUG_INFO {
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array | null;
}

export const sizeofUNLOAD_DLL_DEBUG_INFO = 8;

export function allocUNLOAD_DLL_DEBUG_INFO(data?: Partial<UNLOAD_DLL_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofUNLOAD_DLL_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(0, data.lpBaseOfDll === null ? 0n : BigInt(util.toPointer(data.lpBaseOfDll)), true);
  return buf;
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.System.Diagnostics.Debug.OUTPUT_DEBUG_STRING_INFO (size: 16)
 */
export interface OUTPUT_DEBUG_STRING_INFO {
  /** Windows.Win32.Foundation.PSTR */
  lpDebugStringData: string | null;
  /** u16 */
  fUnicode: number;
  /** u16 */
  nDebugStringLength: number;
}

export const sizeofOUTPUT_DEBUG_STRING_INFO = 16;

export function allocOUTPUT_DEBUG_STRING_INFO(data?: Partial<OUTPUT_DEBUG_STRING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofOUTPUT_DEBUG_STRING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpDebugStringData !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpDebugStringData);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u16
  if (data?.fUnicode !== undefined) view.setUint16(8, Number(data.fUnicode), true);
  // 0x0a: u16
  if (data?.nDebugStringLength !== undefined) view.setUint16(10, Number(data.nDebugStringLength), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.RIP_INFO (size: 8)
 */
export interface RIP_INFO {
  /** u32 */
  dwError: number;
  /** Windows.Win32.System.Diagnostics.Debug.RIP_INFO_TYPE */
  dwType: RIP_INFO_TYPE;
}

export const sizeofRIP_INFO = 8;

export function allocRIP_INFO(data?: Partial<RIP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRIP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwError !== undefined) view.setUint32(0, Number(data.dwError), true);
  // 0x04: u32
  if (data?.dwType !== undefined) view.setUint32(4, Number(data.dwType), true);
  return buf;
}

/**
 * _u_e__Union (size: 72)
 */
export interface _u_e__Union {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_DEBUG_INFO */
  Exception: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.CREATE_THREAD_DEBUG_INFO */
  CreateThread: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.CREATE_PROCESS_DEBUG_INFO */
  CreateProcessInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.EXIT_THREAD_DEBUG_INFO */
  ExitThread: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.EXIT_PROCESS_DEBUG_INFO */
  ExitProcess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.LOAD_DLL_DEBUG_INFO */
  LoadDll: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.UNLOAD_DLL_DEBUG_INFO */
  UnloadDll: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.OUTPUT_DEBUG_STRING_INFO */
  DebugString: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.RIP_INFO */
  RipInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_u_e__Union = 72;

export function alloc_u_e__Union(data?: Partial<_u_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Exception !== undefined) view.setBigUint64(0, data.Exception === null ? 0n : BigInt(util.toPointer(data.Exception)), true);
  // 0x08: pointer
  if (data?.CreateThread !== undefined) view.setBigUint64(8, data.CreateThread === null ? 0n : BigInt(util.toPointer(data.CreateThread)), true);
  // 0x10: pointer
  if (data?.CreateProcessInfo !== undefined) view.setBigUint64(16, data.CreateProcessInfo === null ? 0n : BigInt(util.toPointer(data.CreateProcessInfo)), true);
  // 0x18: pointer
  if (data?.ExitThread !== undefined) view.setBigUint64(24, data.ExitThread === null ? 0n : BigInt(util.toPointer(data.ExitThread)), true);
  // 0x20: pointer
  if (data?.ExitProcess !== undefined) view.setBigUint64(32, data.ExitProcess === null ? 0n : BigInt(util.toPointer(data.ExitProcess)), true);
  // 0x28: pointer
  if (data?.LoadDll !== undefined) view.setBigUint64(40, data.LoadDll === null ? 0n : BigInt(util.toPointer(data.LoadDll)), true);
  // 0x30: pointer
  if (data?.UnloadDll !== undefined) view.setBigUint64(48, data.UnloadDll === null ? 0n : BigInt(util.toPointer(data.UnloadDll)), true);
  // 0x38: pointer
  if (data?.DebugString !== undefined) view.setBigUint64(56, data.DebugString === null ? 0n : BigInt(util.toPointer(data.DebugString)), true);
  // 0x40: pointer
  if (data?.RipInfo !== undefined) view.setBigUint64(64, data.RipInfo === null ? 0n : BigInt(util.toPointer(data.RipInfo)), true);
  return buf;
}

/**
 * Windows.Win32.System.Services.SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM (size: 8)
 */
export interface SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM {
  /** _u_e__Union */
  u: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM = 8;

export function allocSERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM(data?: Partial<SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.u !== undefined) view.setBigUint64(0, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  return buf;
}

/**
 * Windows.Win32.System.Services.SERVICE_DESCRIPTIONA (size: 8)
 */
export interface SERVICE_DESCRIPTIONA {
  /** Windows.Win32.Foundation.PSTR */
  lpDescription: string | null;
}

export const sizeofSERVICE_DESCRIPTIONA = 8;

export function allocSERVICE_DESCRIPTIONA(data?: Partial<SERVICE_DESCRIPTIONA>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_DESCRIPTIONA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpDescription !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpDescription);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.System.Services.SERVICE_DESCRIPTIONW (size: 8)
 */
export interface SERVICE_DESCRIPTIONW {
  /** Windows.Win32.Foundation.PWSTR */
  lpDescription: string | null;
}

export const sizeofSERVICE_DESCRIPTIONW = 8;

export function allocSERVICE_DESCRIPTIONW(data?: Partial<SERVICE_DESCRIPTIONW>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_DESCRIPTIONW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpDescription !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.lpDescription);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

/**
 * Windows.Win32.System.Services.SC_ACTION (size: 8)
 */
export interface SC_ACTION {
  /** Windows.Win32.System.Services.SC_ACTION_TYPE */
  Type: SC_ACTION_TYPE;
  /** u32 */
  Delay: number;
}

export const sizeofSC_ACTION = 8;

export function allocSC_ACTION(data?: Partial<SC_ACTION>): Uint8Array {
  const buf = new Uint8Array(sizeofSC_ACTION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Delay !== undefined) view.setUint32(4, Number(data.Delay), true);
  return buf;
}

/**
 * Windows.Win32.System.Services.SERVICE_FAILURE_ACTIONSA (size: 40)
 */
export interface SERVICE_FAILURE_ACTIONSA {
  /** u32 */
  dwResetPeriod: number;
  /** Windows.Win32.Foundation.PSTR */
  lpRebootMsg: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpCommand: string | null;
  /** u32 */
  cActions: number;
  /** ptr */
  lpsaActions: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSERVICE_FAILURE_ACTIONSA = 40;

export function allocSERVICE_FAILURE_ACTIONSA(data?: Partial<SERVICE_FAILURE_ACTIONSA>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_FAILURE_ACTIONSA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwResetPeriod !== undefined) view.setUint32(0, Number(data.dwResetPeriod), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpRebootMsg !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpRebootMsg);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.lpCommand !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpCommand);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.cActions !== undefined) view.setUint32(24, Number(data.cActions), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.lpsaActions !== undefined) view.setBigUint64(32, data.lpsaActions === null ? 0n : BigInt(util.toPointer(data.lpsaActions)), true);
  return buf;
}

/**
 * Windows.Win32.System.Services.SERVICE_FAILURE_ACTIONSW (size: 40)
 */
export interface SERVICE_FAILURE_ACTIONSW {
  /** u32 */
  dwResetPeriod: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpRebootMsg: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpCommand: string | null;
  /** u32 */
  cActions: number;
  /** ptr */
  lpsaActions: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSERVICE_FAILURE_ACTIONSW = 40;

export function allocSERVICE_FAILURE_ACTIONSW(data?: Partial<SERVICE_FAILURE_ACTIONSW>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_FAILURE_ACTIONSW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwResetPeriod !== undefined) view.setUint32(0, Number(data.dwResetPeriod), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpRebootMsg !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpRebootMsg);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.lpCommand !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpCommand);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.cActions !== undefined) view.setUint32(24, Number(data.cActions), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.lpsaActions !== undefined) view.setBigUint64(32, data.lpsaActions === null ? 0n : BigInt(util.toPointer(data.lpsaActions)), true);
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.System.Services.SERVICE_DELAYED_AUTO_START_INFO (size: 8)
 */
export interface SERVICE_DELAYED_AUTO_START_INFO {
  /** Windows.Win32.Foundation.BOOL */
  fDelayedAutostart: boolean;
}

export const sizeofSERVICE_DELAYED_AUTO_START_INFO = 8;

export function allocSERVICE_DELAYED_AUTO_START_INFO(data?: Partial<SERVICE_DELAYED_AUTO_START_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_DELAYED_AUTO_START_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fDelayedAutostart !== undefined) view.setInt32(0, Number(data.fDelayedAutostart), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Services.SERVICE_FAILURE_ACTIONS_FLAG (size: 8)
 */
export interface SERVICE_FAILURE_ACTIONS_FLAG {
  /** Windows.Win32.Foundation.BOOL */
  fFailureActionsOnNonCrashFailures: boolean;
}

export const sizeofSERVICE_FAILURE_ACTIONS_FLAG = 8;

export function allocSERVICE_FAILURE_ACTIONS_FLAG(data?: Partial<SERVICE_FAILURE_ACTIONS_FLAG>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_FAILURE_ACTIONS_FLAG);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fFailureActionsOnNonCrashFailures !== undefined) view.setInt32(0, Number(data.fFailureActionsOnNonCrashFailures), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Services.SERVICE_SID_INFO (size: 8)
 */
export interface SERVICE_SID_INFO {
  /** u32 */
  dwServiceSidType: number;
}

export const sizeofSERVICE_SID_INFO = 8;

export function allocSERVICE_SID_INFO(data?: Partial<SERVICE_SID_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_SID_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwServiceSidType !== undefined) view.setUint32(0, Number(data.dwServiceSidType), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Services.SERVICE_REQUIRED_PRIVILEGES_INFOA (size: 8)
 */
export interface SERVICE_REQUIRED_PRIVILEGES_INFOA {
  /** Windows.Win32.Foundation.PSTR */
  pmszRequiredPrivileges: string | null;
}

export const sizeofSERVICE_REQUIRED_PRIVILEGES_INFOA = 8;

export function allocSERVICE_REQUIRED_PRIVILEGES_INFOA(data?: Partial<SERVICE_REQUIRED_PRIVILEGES_INFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_REQUIRED_PRIVILEGES_INFOA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pmszRequiredPrivileges !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pmszRequiredPrivileges);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

/**
 * Windows.Win32.System.Services.SERVICE_REQUIRED_PRIVILEGES_INFOW (size: 8)
 */
export interface SERVICE_REQUIRED_PRIVILEGES_INFOW {
  /** Windows.Win32.Foundation.PWSTR */
  pmszRequiredPrivileges: string | null;
}

export const sizeofSERVICE_REQUIRED_PRIVILEGES_INFOW = 8;

export function allocSERVICE_REQUIRED_PRIVILEGES_INFOW(data?: Partial<SERVICE_REQUIRED_PRIVILEGES_INFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_REQUIRED_PRIVILEGES_INFOW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pmszRequiredPrivileges !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pmszRequiredPrivileges);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

/**
 * Windows.Win32.System.Services.SERVICE_PRESHUTDOWN_INFO (size: 8)
 */
export interface SERVICE_PRESHUTDOWN_INFO {
  /** u32 */
  dwPreshutdownTimeout: number;
}

export const sizeofSERVICE_PRESHUTDOWN_INFO = 8;

export function allocSERVICE_PRESHUTDOWN_INFO(data?: Partial<SERVICE_PRESHUTDOWN_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_PRESHUTDOWN_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwPreshutdownTimeout !== undefined) view.setUint32(0, Number(data.dwPreshutdownTimeout), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Services.SERVICE_TRIGGER_SPECIFIC_DATA_ITEM (size: 16)
 */
export interface SERVICE_TRIGGER_SPECIFIC_DATA_ITEM {
  /** Windows.Win32.System.Services.SERVICE_TRIGGER_SPECIFIC_DATA_ITEM_DATA_TYPE */
  dwDataType: SERVICE_TRIGGER_SPECIFIC_DATA_ITEM_DATA_TYPE;
  /** u32 */
  cbData: number;
  /** ptr */
  pData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSERVICE_TRIGGER_SPECIFIC_DATA_ITEM = 16;

export function allocSERVICE_TRIGGER_SPECIFIC_DATA_ITEM(data?: Partial<SERVICE_TRIGGER_SPECIFIC_DATA_ITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_TRIGGER_SPECIFIC_DATA_ITEM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwDataType !== undefined) view.setUint32(0, Number(data.dwDataType), true);
  // 0x04: u32
  if (data?.cbData !== undefined) view.setUint32(4, Number(data.cbData), true);
  // 0x08: pointer
  if (data?.pData !== undefined) view.setBigUint64(8, data.pData === null ? 0n : BigInt(util.toPointer(data.pData)), true);
  return buf;
}

/**
 * Windows.Win32.System.Services.SERVICE_TRIGGER (size: 32)
 */
export interface SERVICE_TRIGGER {
  /** Windows.Win32.System.Services.SERVICE_TRIGGER_TYPE */
  dwTriggerType: SERVICE_TRIGGER_TYPE;
  /** Windows.Win32.System.Services.SERVICE_TRIGGER_ACTION */
  dwAction: SERVICE_TRIGGER_ACTION;
  /** ptr */
  pTriggerSubtype: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cDataItems: number;
  /** ptr */
  pDataItems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSERVICE_TRIGGER = 32;

export function allocSERVICE_TRIGGER(data?: Partial<SERVICE_TRIGGER>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_TRIGGER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTriggerType !== undefined) view.setUint32(0, Number(data.dwTriggerType), true);
  // 0x04: u32
  if (data?.dwAction !== undefined) view.setUint32(4, Number(data.dwAction), true);
  // 0x08: pointer
  if (data?.pTriggerSubtype !== undefined) view.setBigUint64(8, data.pTriggerSubtype === null ? 0n : BigInt(util.toPointer(data.pTriggerSubtype)), true);
  // 0x10: u32
  if (data?.cDataItems !== undefined) view.setUint32(16, Number(data.cDataItems), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pDataItems !== undefined) view.setBigUint64(24, data.pDataItems === null ? 0n : BigInt(util.toPointer(data.pDataItems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Services.SERVICE_TRIGGER_INFO (size: 24)
 */
export interface SERVICE_TRIGGER_INFO {
  /** u32 */
  cTriggers: number;
  /** ptr */
  pTriggers: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pReserved: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSERVICE_TRIGGER_INFO = 24;

export function allocSERVICE_TRIGGER_INFO(data?: Partial<SERVICE_TRIGGER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_TRIGGER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cTriggers !== undefined) view.setUint32(0, Number(data.cTriggers), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pTriggers !== undefined) view.setBigUint64(8, data.pTriggers === null ? 0n : BigInt(util.toPointer(data.pTriggers)), true);
  // 0x10: pointer
  if (data?.pReserved !== undefined) view.setBigUint64(16, data.pReserved === null ? 0n : BigInt(util.toPointer(data.pReserved)), true);
  return buf;
}

export type BOOLEAN = number;

/**
 * Windows.Win32.System.Services.SERVICE_PREFERRED_NODE_INFO (size: 16)
 */
export interface SERVICE_PREFERRED_NODE_INFO {
  /** u16 */
  usPreferredNode: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  fDelete: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSERVICE_PREFERRED_NODE_INFO = 16;

export function allocSERVICE_PREFERRED_NODE_INFO(data?: Partial<SERVICE_PREFERRED_NODE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_PREFERRED_NODE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.usPreferredNode !== undefined) view.setUint16(0, Number(data.usPreferredNode), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.fDelete !== undefined) view.setBigUint64(8, data.fDelete === null ? 0n : BigInt(util.toPointer(data.fDelete)), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Foundation.LARGE_INTEGER (size: 24)
 */
export interface LARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  QuadPart: Deno.PointerValue;
}

export const sizeofLARGE_INTEGER = 24;

export function allocLARGE_INTEGER(data?: Partial<LARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofLARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  // 0x10: i64
  if (data?.QuadPart !== undefined) view.setBigInt64(16, BigInt(data.QuadPart), true);
  return buf;
}

/**
 * Windows.Win32.System.Services.SERVICE_TIMECHANGE_INFO (size: 16)
 */
export interface SERVICE_TIMECHANGE_INFO {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  liNewTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  liOldTime: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSERVICE_TIMECHANGE_INFO = 16;

export function allocSERVICE_TIMECHANGE_INFO(data?: Partial<SERVICE_TIMECHANGE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_TIMECHANGE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.liNewTime !== undefined) view.setBigUint64(0, data.liNewTime === null ? 0n : BigInt(util.toPointer(data.liNewTime)), true);
  // 0x08: pointer
  if (data?.liOldTime !== undefined) view.setBigUint64(8, data.liOldTime === null ? 0n : BigInt(util.toPointer(data.liOldTime)), true);
  return buf;
}

/**
 * Windows.Win32.System.Services.SERVICE_LAUNCH_PROTECTED_INFO (size: 8)
 */
export interface SERVICE_LAUNCH_PROTECTED_INFO {
  /** u32 */
  dwLaunchProtected: number;
}

export const sizeofSERVICE_LAUNCH_PROTECTED_INFO = 8;

export function allocSERVICE_LAUNCH_PROTECTED_INFO(data?: Partial<SERVICE_LAUNCH_PROTECTED_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_LAUNCH_PROTECTED_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLaunchProtected !== undefined) view.setUint32(0, Number(data.dwLaunchProtected), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Services.SERVICE_STATUS (size: 32)
 */
export interface SERVICE_STATUS {
  /** Windows.Win32.System.Services.ENUM_SERVICE_TYPE */
  dwServiceType: ENUM_SERVICE_TYPE;
  /** Windows.Win32.System.Services.SERVICE_STATUS_CURRENT_STATE */
  dwCurrentState: SERVICE_STATUS_CURRENT_STATE;
  /** u32 */
  dwControlsAccepted: number;
  /** u32 */
  dwWin32ExitCode: number;
  /** u32 */
  dwServiceSpecificExitCode: number;
  /** u32 */
  dwCheckPoint: number;
  /** u32 */
  dwWaitHint: number;
}

export const sizeofSERVICE_STATUS = 32;

export function allocSERVICE_STATUS(data?: Partial<SERVICE_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwServiceType !== undefined) view.setUint32(0, Number(data.dwServiceType), true);
  // 0x04: u32
  if (data?.dwCurrentState !== undefined) view.setUint32(4, Number(data.dwCurrentState), true);
  // 0x08: u32
  if (data?.dwControlsAccepted !== undefined) view.setUint32(8, Number(data.dwControlsAccepted), true);
  // 0x0c: u32
  if (data?.dwWin32ExitCode !== undefined) view.setUint32(12, Number(data.dwWin32ExitCode), true);
  // 0x10: u32
  if (data?.dwServiceSpecificExitCode !== undefined) view.setUint32(16, Number(data.dwServiceSpecificExitCode), true);
  // 0x14: u32
  if (data?.dwCheckPoint !== undefined) view.setUint32(20, Number(data.dwCheckPoint), true);
  // 0x18: u32
  if (data?.dwWaitHint !== undefined) view.setUint32(24, Number(data.dwWaitHint), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Services.SERVICE_STATUS_PROCESS (size: 40)
 */
export interface SERVICE_STATUS_PROCESS {
  /** Windows.Win32.System.Services.ENUM_SERVICE_TYPE */
  dwServiceType: ENUM_SERVICE_TYPE;
  /** Windows.Win32.System.Services.SERVICE_STATUS_CURRENT_STATE */
  dwCurrentState: SERVICE_STATUS_CURRENT_STATE;
  /** u32 */
  dwControlsAccepted: number;
  /** u32 */
  dwWin32ExitCode: number;
  /** u32 */
  dwServiceSpecificExitCode: number;
  /** u32 */
  dwCheckPoint: number;
  /** u32 */
  dwWaitHint: number;
  /** u32 */
  dwProcessId: number;
  /** Windows.Win32.System.Services.SERVICE_RUNS_IN_PROCESS */
  dwServiceFlags: SERVICE_RUNS_IN_PROCESS;
}

export const sizeofSERVICE_STATUS_PROCESS = 40;

export function allocSERVICE_STATUS_PROCESS(data?: Partial<SERVICE_STATUS_PROCESS>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_STATUS_PROCESS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwServiceType !== undefined) view.setUint32(0, Number(data.dwServiceType), true);
  // 0x04: u32
  if (data?.dwCurrentState !== undefined) view.setUint32(4, Number(data.dwCurrentState), true);
  // 0x08: u32
  if (data?.dwControlsAccepted !== undefined) view.setUint32(8, Number(data.dwControlsAccepted), true);
  // 0x0c: u32
  if (data?.dwWin32ExitCode !== undefined) view.setUint32(12, Number(data.dwWin32ExitCode), true);
  // 0x10: u32
  if (data?.dwServiceSpecificExitCode !== undefined) view.setUint32(16, Number(data.dwServiceSpecificExitCode), true);
  // 0x14: u32
  if (data?.dwCheckPoint !== undefined) view.setUint32(20, Number(data.dwCheckPoint), true);
  // 0x18: u32
  if (data?.dwWaitHint !== undefined) view.setUint32(24, Number(data.dwWaitHint), true);
  // 0x1c: u32
  if (data?.dwProcessId !== undefined) view.setUint32(28, Number(data.dwProcessId), true);
  // 0x20: u32
  if (data?.dwServiceFlags !== undefined) view.setUint32(32, Number(data.dwServiceFlags), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.System.Services.ENUM_SERVICE_STATUSA (size: 24)
 */
export interface ENUM_SERVICE_STATUSA {
  /** Windows.Win32.Foundation.PSTR */
  lpServiceName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpDisplayName: string | null;
  /** Windows.Win32.System.Services.SERVICE_STATUS */
  ServiceStatus: Uint8Array | Deno.PointerValue | null;
}

export const sizeofENUM_SERVICE_STATUSA = 24;

export function allocENUM_SERVICE_STATUSA(data?: Partial<ENUM_SERVICE_STATUSA>): Uint8Array {
  const buf = new Uint8Array(sizeofENUM_SERVICE_STATUSA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpServiceName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpServiceName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.lpDisplayName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpDisplayName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.ServiceStatus !== undefined) view.setBigUint64(16, data.ServiceStatus === null ? 0n : BigInt(util.toPointer(data.ServiceStatus)), true);
  return buf;
}

/**
 * Windows.Win32.System.Services.ENUM_SERVICE_STATUSW (size: 24)
 */
export interface ENUM_SERVICE_STATUSW {
  /** Windows.Win32.Foundation.PWSTR */
  lpServiceName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpDisplayName: string | null;
  /** Windows.Win32.System.Services.SERVICE_STATUS */
  ServiceStatus: Uint8Array | Deno.PointerValue | null;
}

export const sizeofENUM_SERVICE_STATUSW = 24;

export function allocENUM_SERVICE_STATUSW(data?: Partial<ENUM_SERVICE_STATUSW>): Uint8Array {
  const buf = new Uint8Array(sizeofENUM_SERVICE_STATUSW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpServiceName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.lpServiceName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.lpDisplayName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpDisplayName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.ServiceStatus !== undefined) view.setBigUint64(16, data.ServiceStatus === null ? 0n : BigInt(util.toPointer(data.ServiceStatus)), true);
  return buf;
}

/**
 * Windows.Win32.System.Services.ENUM_SERVICE_STATUS_PROCESSA (size: 24)
 */
export interface ENUM_SERVICE_STATUS_PROCESSA {
  /** Windows.Win32.Foundation.PSTR */
  lpServiceName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpDisplayName: string | null;
  /** Windows.Win32.System.Services.SERVICE_STATUS_PROCESS */
  ServiceStatusProcess: Uint8Array | Deno.PointerValue | null;
}

export const sizeofENUM_SERVICE_STATUS_PROCESSA = 24;

export function allocENUM_SERVICE_STATUS_PROCESSA(data?: Partial<ENUM_SERVICE_STATUS_PROCESSA>): Uint8Array {
  const buf = new Uint8Array(sizeofENUM_SERVICE_STATUS_PROCESSA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpServiceName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpServiceName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.lpDisplayName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpDisplayName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.ServiceStatusProcess !== undefined) view.setBigUint64(16, data.ServiceStatusProcess === null ? 0n : BigInt(util.toPointer(data.ServiceStatusProcess)), true);
  return buf;
}

/**
 * Windows.Win32.System.Services.ENUM_SERVICE_STATUS_PROCESSW (size: 24)
 */
export interface ENUM_SERVICE_STATUS_PROCESSW {
  /** Windows.Win32.Foundation.PWSTR */
  lpServiceName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpDisplayName: string | null;
  /** Windows.Win32.System.Services.SERVICE_STATUS_PROCESS */
  ServiceStatusProcess: Uint8Array | Deno.PointerValue | null;
}

export const sizeofENUM_SERVICE_STATUS_PROCESSW = 24;

export function allocENUM_SERVICE_STATUS_PROCESSW(data?: Partial<ENUM_SERVICE_STATUS_PROCESSW>): Uint8Array {
  const buf = new Uint8Array(sizeofENUM_SERVICE_STATUS_PROCESSW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpServiceName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.lpServiceName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.lpDisplayName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpDisplayName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.ServiceStatusProcess !== undefined) view.setBigUint64(16, data.ServiceStatusProcess === null ? 0n : BigInt(util.toPointer(data.ServiceStatusProcess)), true);
  return buf;
}

/**
 * Windows.Win32.System.Services.QUERY_SERVICE_LOCK_STATUSA (size: 24)
 */
export interface QUERY_SERVICE_LOCK_STATUSA {
  /** u32 */
  fIsLocked: number;
  /** Windows.Win32.Foundation.PSTR */
  lpLockOwner: string | null;
  /** u32 */
  dwLockDuration: number;
}

export const sizeofQUERY_SERVICE_LOCK_STATUSA = 24;

export function allocQUERY_SERVICE_LOCK_STATUSA(data?: Partial<QUERY_SERVICE_LOCK_STATUSA>): Uint8Array {
  const buf = new Uint8Array(sizeofQUERY_SERVICE_LOCK_STATUSA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fIsLocked !== undefined) view.setUint32(0, Number(data.fIsLocked), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpLockOwner !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpLockOwner);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwLockDuration !== undefined) view.setUint32(16, Number(data.dwLockDuration), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.System.Services.QUERY_SERVICE_LOCK_STATUSW (size: 24)
 */
export interface QUERY_SERVICE_LOCK_STATUSW {
  /** u32 */
  fIsLocked: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpLockOwner: string | null;
  /** u32 */
  dwLockDuration: number;
}

export const sizeofQUERY_SERVICE_LOCK_STATUSW = 24;

export function allocQUERY_SERVICE_LOCK_STATUSW(data?: Partial<QUERY_SERVICE_LOCK_STATUSW>): Uint8Array {
  const buf = new Uint8Array(sizeofQUERY_SERVICE_LOCK_STATUSW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fIsLocked !== undefined) view.setUint32(0, Number(data.fIsLocked), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpLockOwner !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpLockOwner);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwLockDuration !== undefined) view.setUint32(16, Number(data.dwLockDuration), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.System.Services.QUERY_SERVICE_CONFIGA (size: 64)
 */
export interface QUERY_SERVICE_CONFIGA {
  /** Windows.Win32.System.Services.ENUM_SERVICE_TYPE */
  dwServiceType: ENUM_SERVICE_TYPE;
  /** Windows.Win32.System.Services.SERVICE_START_TYPE */
  dwStartType: SERVICE_START_TYPE;
  /** Windows.Win32.System.Services.SERVICE_ERROR */
  dwErrorControl: SERVICE_ERROR;
  /** Windows.Win32.Foundation.PSTR */
  lpBinaryPathName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpLoadOrderGroup: string | null;
  /** u32 */
  dwTagId: number;
  /** Windows.Win32.Foundation.PSTR */
  lpDependencies: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpServiceStartName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpDisplayName: string | null;
}

export const sizeofQUERY_SERVICE_CONFIGA = 64;

export function allocQUERY_SERVICE_CONFIGA(data?: Partial<QUERY_SERVICE_CONFIGA>): Uint8Array {
  const buf = new Uint8Array(sizeofQUERY_SERVICE_CONFIGA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwServiceType !== undefined) view.setUint32(0, Number(data.dwServiceType), true);
  // 0x04: u32
  if (data?.dwStartType !== undefined) view.setUint32(4, Number(data.dwStartType), true);
  // 0x08: u32
  if (data?.dwErrorControl !== undefined) view.setUint32(8, Number(data.dwErrorControl), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lpBinaryPathName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpBinaryPathName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpLoadOrderGroup !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpLoadOrderGroup);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.dwTagId !== undefined) view.setUint32(32, Number(data.dwTagId), true);
  // 0x24: pad4
  // 0x28: buffer
  if (data?.lpDependencies !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.lpDependencies);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: buffer
  if (data?.lpServiceStartName !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.lpServiceStartName);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: buffer
  if (data?.lpDisplayName !== undefined) {
    (buf as any)._f56 = util.pstrToFfi(data.lpDisplayName);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  return buf;
}

/**
 * Windows.Win32.System.Services.QUERY_SERVICE_CONFIGW (size: 64)
 */
export interface QUERY_SERVICE_CONFIGW {
  /** Windows.Win32.System.Services.ENUM_SERVICE_TYPE */
  dwServiceType: ENUM_SERVICE_TYPE;
  /** Windows.Win32.System.Services.SERVICE_START_TYPE */
  dwStartType: SERVICE_START_TYPE;
  /** Windows.Win32.System.Services.SERVICE_ERROR */
  dwErrorControl: SERVICE_ERROR;
  /** Windows.Win32.Foundation.PWSTR */
  lpBinaryPathName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpLoadOrderGroup: string | null;
  /** u32 */
  dwTagId: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpDependencies: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpServiceStartName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpDisplayName: string | null;
}

export const sizeofQUERY_SERVICE_CONFIGW = 64;

export function allocQUERY_SERVICE_CONFIGW(data?: Partial<QUERY_SERVICE_CONFIGW>): Uint8Array {
  const buf = new Uint8Array(sizeofQUERY_SERVICE_CONFIGW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwServiceType !== undefined) view.setUint32(0, Number(data.dwServiceType), true);
  // 0x04: u32
  if (data?.dwStartType !== undefined) view.setUint32(4, Number(data.dwStartType), true);
  // 0x08: u32
  if (data?.dwErrorControl !== undefined) view.setUint32(8, Number(data.dwErrorControl), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lpBinaryPathName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpBinaryPathName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpLoadOrderGroup !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpLoadOrderGroup);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.dwTagId !== undefined) view.setUint32(32, Number(data.dwTagId), true);
  // 0x24: pad4
  // 0x28: buffer
  if (data?.lpDependencies !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.lpDependencies);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: buffer
  if (data?.lpServiceStartName !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.lpServiceStartName);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: buffer
  if (data?.lpDisplayName !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.lpDisplayName);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  return buf;
}

/**
 * Windows.Win32.System.Services.SERVICE_TABLE_ENTRYA (size: 16)
 */
export interface SERVICE_TABLE_ENTRYA {
  /** Windows.Win32.Foundation.PSTR */
  lpServiceName: string | null;
  /** Windows.Win32.System.Services.LPSERVICE_MAIN_FUNCTIONA */
  lpServiceProc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSERVICE_TABLE_ENTRYA = 16;

export function allocSERVICE_TABLE_ENTRYA(data?: Partial<SERVICE_TABLE_ENTRYA>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_TABLE_ENTRYA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpServiceName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpServiceName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.lpServiceProc !== undefined) view.setBigUint64(8, data.lpServiceProc === null ? 0n : BigInt(util.toPointer(data.lpServiceProc)), true);
  return buf;
}

/**
 * Windows.Win32.System.Services.SERVICE_TABLE_ENTRYW (size: 16)
 */
export interface SERVICE_TABLE_ENTRYW {
  /** Windows.Win32.Foundation.PWSTR */
  lpServiceName: string | null;
  /** Windows.Win32.System.Services.LPSERVICE_MAIN_FUNCTIONW */
  lpServiceProc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSERVICE_TABLE_ENTRYW = 16;

export function allocSERVICE_TABLE_ENTRYW(data?: Partial<SERVICE_TABLE_ENTRYW>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_TABLE_ENTRYW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpServiceName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.lpServiceName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.lpServiceProc !== undefined) view.setBigUint64(8, data.lpServiceProc === null ? 0n : BigInt(util.toPointer(data.lpServiceProc)), true);
  return buf;
}

/**
 * Windows.Win32.System.Services.SERVICE_NOTIFY_1 (size: 40)
 */
export interface SERVICE_NOTIFY_1 {
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.System.Services.PFN_SC_NOTIFY_CALLBACK */
  pfnNotifyCallback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pContext: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwNotificationStatus: number;
  /** Windows.Win32.System.Services.SERVICE_STATUS_PROCESS */
  ServiceStatus: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSERVICE_NOTIFY_1 = 40;

export function allocSERVICE_NOTIFY_1(data?: Partial<SERVICE_NOTIFY_1>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_NOTIFY_1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pfnNotifyCallback !== undefined) view.setBigUint64(8, data.pfnNotifyCallback === null ? 0n : BigInt(util.toPointer(data.pfnNotifyCallback)), true);
  // 0x10: pointer
  if (data?.pContext !== undefined) view.setBigUint64(16, data.pContext === null ? 0n : BigInt(util.toPointer(data.pContext)), true);
  // 0x18: u32
  if (data?.dwNotificationStatus !== undefined) view.setUint32(24, Number(data.dwNotificationStatus), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ServiceStatus !== undefined) view.setBigUint64(32, data.ServiceStatus === null ? 0n : BigInt(util.toPointer(data.ServiceStatus)), true);
  return buf;
}

/**
 * Windows.Win32.System.Services.SERVICE_NOTIFY_2A (size: 56)
 */
export interface SERVICE_NOTIFY_2A {
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.System.Services.PFN_SC_NOTIFY_CALLBACK */
  pfnNotifyCallback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pContext: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwNotificationStatus: number;
  /** Windows.Win32.System.Services.SERVICE_STATUS_PROCESS */
  ServiceStatus: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwNotificationTriggered: number;
  /** Windows.Win32.Foundation.PSTR */
  pszServiceNames: string | null;
}

export const sizeofSERVICE_NOTIFY_2A = 56;

export function allocSERVICE_NOTIFY_2A(data?: Partial<SERVICE_NOTIFY_2A>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_NOTIFY_2A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pfnNotifyCallback !== undefined) view.setBigUint64(8, data.pfnNotifyCallback === null ? 0n : BigInt(util.toPointer(data.pfnNotifyCallback)), true);
  // 0x10: pointer
  if (data?.pContext !== undefined) view.setBigUint64(16, data.pContext === null ? 0n : BigInt(util.toPointer(data.pContext)), true);
  // 0x18: u32
  if (data?.dwNotificationStatus !== undefined) view.setUint32(24, Number(data.dwNotificationStatus), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ServiceStatus !== undefined) view.setBigUint64(32, data.ServiceStatus === null ? 0n : BigInt(util.toPointer(data.ServiceStatus)), true);
  // 0x28: u32
  if (data?.dwNotificationTriggered !== undefined) view.setUint32(40, Number(data.dwNotificationTriggered), true);
  // 0x2c: pad4
  // 0x30: buffer
  if (data?.pszServiceNames !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.pszServiceNames);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  return buf;
}

/**
 * Windows.Win32.System.Services.SERVICE_NOTIFY_2W (size: 56)
 */
export interface SERVICE_NOTIFY_2W {
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.System.Services.PFN_SC_NOTIFY_CALLBACK */
  pfnNotifyCallback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pContext: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwNotificationStatus: number;
  /** Windows.Win32.System.Services.SERVICE_STATUS_PROCESS */
  ServiceStatus: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwNotificationTriggered: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszServiceNames: string | null;
}

export const sizeofSERVICE_NOTIFY_2W = 56;

export function allocSERVICE_NOTIFY_2W(data?: Partial<SERVICE_NOTIFY_2W>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_NOTIFY_2W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pfnNotifyCallback !== undefined) view.setBigUint64(8, data.pfnNotifyCallback === null ? 0n : BigInt(util.toPointer(data.pfnNotifyCallback)), true);
  // 0x10: pointer
  if (data?.pContext !== undefined) view.setBigUint64(16, data.pContext === null ? 0n : BigInt(util.toPointer(data.pContext)), true);
  // 0x18: u32
  if (data?.dwNotificationStatus !== undefined) view.setUint32(24, Number(data.dwNotificationStatus), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ServiceStatus !== undefined) view.setBigUint64(32, data.ServiceStatus === null ? 0n : BigInt(util.toPointer(data.ServiceStatus)), true);
  // 0x28: u32
  if (data?.dwNotificationTriggered !== undefined) view.setUint32(40, Number(data.dwNotificationTriggered), true);
  // 0x2c: pad4
  // 0x30: buffer
  if (data?.pszServiceNames !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pszServiceNames);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  return buf;
}

/**
 * Windows.Win32.System.Services.SERVICE_CONTROL_STATUS_REASON_PARAMSA (size: 24)
 */
export interface SERVICE_CONTROL_STATUS_REASON_PARAMSA {
  /** u32 */
  dwReason: number;
  /** Windows.Win32.Foundation.PSTR */
  pszComment: string | null;
  /** Windows.Win32.System.Services.SERVICE_STATUS_PROCESS */
  ServiceStatus: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSERVICE_CONTROL_STATUS_REASON_PARAMSA = 24;

export function allocSERVICE_CONTROL_STATUS_REASON_PARAMSA(data?: Partial<SERVICE_CONTROL_STATUS_REASON_PARAMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_CONTROL_STATUS_REASON_PARAMSA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwReason !== undefined) view.setUint32(0, Number(data.dwReason), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszComment !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszComment);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.ServiceStatus !== undefined) view.setBigUint64(16, data.ServiceStatus === null ? 0n : BigInt(util.toPointer(data.ServiceStatus)), true);
  return buf;
}

/**
 * Windows.Win32.System.Services.SERVICE_CONTROL_STATUS_REASON_PARAMSW (size: 24)
 */
export interface SERVICE_CONTROL_STATUS_REASON_PARAMSW {
  /** u32 */
  dwReason: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszComment: string | null;
  /** Windows.Win32.System.Services.SERVICE_STATUS_PROCESS */
  ServiceStatus: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSERVICE_CONTROL_STATUS_REASON_PARAMSW = 24;

export function allocSERVICE_CONTROL_STATUS_REASON_PARAMSW(data?: Partial<SERVICE_CONTROL_STATUS_REASON_PARAMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_CONTROL_STATUS_REASON_PARAMSW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwReason !== undefined) view.setUint32(0, Number(data.dwReason), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszComment !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszComment);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.ServiceStatus !== undefined) view.setBigUint64(16, data.ServiceStatus === null ? 0n : BigInt(util.toPointer(data.ServiceStatus)), true);
  return buf;
}

/**
 * Windows.Win32.System.Services.SERVICE_START_REASON (size: 8)
 */
export interface SERVICE_START_REASON {
  /** u32 */
  dwReason: number;
}

export const sizeofSERVICE_START_REASON = 8;

export function allocSERVICE_START_REASON(data?: Partial<SERVICE_START_REASON>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_START_REASON);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwReason !== undefined) view.setUint32(0, Number(data.dwReason), true);
  // 0x04: pad4
  return buf;
}

export type SC_HANDLE = Deno.PointerValue;

export type PSECURITY_DESCRIPTOR = Deno.PointerValue | Uint8Array | null;

// Native Libraries

try {
  var libADVAPI32_dll = Deno.dlopen("ADVAPI32.dll", {
    SetServiceBits: {
      parameters: ["pointer", "u32", "i32", "i32"],
      result: "i32",
    },
    ChangeServiceConfigA: {
      parameters: ["pointer", "u32", "u32", "u32", "buffer", "buffer", "pointer", "buffer", "buffer", "buffer", "buffer"],
      result: "i32",
    },
    ChangeServiceConfigW: {
      parameters: ["pointer", "u32", "u32", "u32", "buffer", "buffer", "pointer", "buffer", "buffer", "buffer", "buffer"],
      result: "i32",
    },
    ChangeServiceConfig2A: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    ChangeServiceConfig2W: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    CloseServiceHandle: {
      parameters: ["pointer"],
      result: "i32",
    },
    ControlService: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    CreateServiceA: {
      parameters: ["pointer", "buffer", "buffer", "u32", "u32", "u32", "u32", "buffer", "buffer", "pointer", "buffer", "buffer", "buffer"],
      result: "pointer",
    },
    CreateServiceW: {
      parameters: ["pointer", "buffer", "buffer", "u32", "u32", "u32", "u32", "buffer", "buffer", "pointer", "buffer", "buffer", "buffer"],
      result: "pointer",
    },
    DeleteService: {
      parameters: ["pointer"],
      result: "i32",
    },
    EnumDependentServicesA: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    EnumDependentServicesW: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    EnumServicesStatusA: {
      parameters: ["pointer", "u32", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    EnumServicesStatusW: {
      parameters: ["pointer", "u32", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    EnumServicesStatusExA: {
      parameters: ["pointer", "i32", "u32", "u32", "pointer", "u32", "pointer", "pointer", "pointer", "buffer"],
      result: "i32",
    },
    EnumServicesStatusExW: {
      parameters: ["pointer", "i32", "u32", "u32", "pointer", "u32", "pointer", "pointer", "pointer", "buffer"],
      result: "i32",
    },
    GetServiceKeyNameA: {
      parameters: ["pointer", "buffer", "buffer", "pointer"],
      result: "i32",
    },
    GetServiceKeyNameW: {
      parameters: ["pointer", "buffer", "buffer", "pointer"],
      result: "i32",
    },
    GetServiceDisplayNameA: {
      parameters: ["pointer", "buffer", "buffer", "pointer"],
      result: "i32",
    },
    GetServiceDisplayNameW: {
      parameters: ["pointer", "buffer", "buffer", "pointer"],
      result: "i32",
    },
    LockServiceDatabase: {
      parameters: ["pointer"],
      result: "pointer",
    },
    NotifyBootConfigStatus: {
      parameters: ["i32"],
      result: "i32",
    },
    OpenSCManagerA: {
      parameters: ["buffer", "buffer", "u32"],
      result: "pointer",
    },
    OpenSCManagerW: {
      parameters: ["buffer", "buffer", "u32"],
      result: "pointer",
    },
    OpenServiceA: {
      parameters: ["pointer", "buffer", "u32"],
      result: "pointer",
    },
    OpenServiceW: {
      parameters: ["pointer", "buffer", "u32"],
      result: "pointer",
    },
    QueryServiceConfigA: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    QueryServiceConfigW: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    QueryServiceConfig2A: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    QueryServiceConfig2W: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    QueryServiceLockStatusA: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    QueryServiceLockStatusW: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    QueryServiceObjectSecurity: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    QueryServiceStatus: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    QueryServiceStatusEx: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    RegisterServiceCtrlHandlerA: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    RegisterServiceCtrlHandlerW: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    RegisterServiceCtrlHandlerExA: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "pointer",
    },
    RegisterServiceCtrlHandlerExW: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "pointer",
    },
    SetServiceObjectSecurity: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    SetServiceStatus: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    StartServiceCtrlDispatcherA: {
      parameters: ["pointer"],
      result: "i32",
    },
    StartServiceCtrlDispatcherW: {
      parameters: ["pointer"],
      result: "i32",
    },
    StartServiceA: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    StartServiceW: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    UnlockServiceDatabase: {
      parameters: ["pointer"],
      result: "i32",
    },
    NotifyServiceStatusChangeA: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    NotifyServiceStatusChangeW: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    ControlServiceExA: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "i32",
    },
    ControlServiceExW: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "i32",
    },
    QueryServiceDynamicInformation: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    WaitServiceState: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_service_core_l1_1_3_dll = Deno.dlopen("api-ms-win-service-core-l1-1-3.dll", {
    GetServiceRegistryStateKey: {
      parameters: ["pointer", "i32", "u32", "pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_service_core_l1_1_4_dll = Deno.dlopen("api-ms-win-service-core-l1-1-4.dll", {
    GetServiceDirectory: {
      parameters: ["pointer", "i32", "buffer", "u32", "pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_service_core_l1_1_5_dll = Deno.dlopen("api-ms-win-service-core-l1-1-5.dll", {
    GetSharedServiceRegistryStateKey: {
      parameters: ["pointer", "i32", "u32", "pointer"],
      result: "u32",
    },
    GetSharedServiceDirectory: {
      parameters: ["pointer", "i32", "buffer", "u32", "pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function SetServiceBits(
  hServiceStatus: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Services.SERVICE_STATUS_HANDLE */,
  dwServiceBits: number /* u32 */,
  bSetBitsOn: boolean /* Windows.Win32.Foundation.BOOL */,
  bUpdateImmediately: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.SetServiceBits(util.toPointer(hServiceStatus), dwServiceBits, util.boolToFfi(bSetBitsOn), util.boolToFfi(bUpdateImmediately)));
}

export function ChangeServiceConfigA(
  hService: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  dwServiceType: number /* u32 */,
  dwStartType: SERVICE_START_TYPE /* Windows.Win32.System.Services.SERVICE_START_TYPE */,
  dwErrorControl: SERVICE_ERROR /* Windows.Win32.System.Services.SERVICE_ERROR */,
  lpBinaryPathName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpLoadOrderGroup: string | null /* Windows.Win32.Foundation.PSTR */,
  lpdwTagId: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpDependencies: string | null /* Windows.Win32.Foundation.PSTR */,
  lpServiceStartName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpPassword: string | null /* Windows.Win32.Foundation.PSTR */,
  lpDisplayName: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.ChangeServiceConfigA(util.toPointer(hService), dwServiceType, dwStartType, dwErrorControl, util.pstrToFfi(lpBinaryPathName), util.pstrToFfi(lpLoadOrderGroup), util.toPointer(lpdwTagId), util.pstrToFfi(lpDependencies), util.pstrToFfi(lpServiceStartName), util.pstrToFfi(lpPassword), util.pstrToFfi(lpDisplayName)));
}

export function ChangeServiceConfigW(
  hService: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  dwServiceType: number /* u32 */,
  dwStartType: SERVICE_START_TYPE /* Windows.Win32.System.Services.SERVICE_START_TYPE */,
  dwErrorControl: SERVICE_ERROR /* Windows.Win32.System.Services.SERVICE_ERROR */,
  lpBinaryPathName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpLoadOrderGroup: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpdwTagId: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpDependencies: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpServiceStartName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpPassword: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpDisplayName: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.ChangeServiceConfigW(util.toPointer(hService), dwServiceType, dwStartType, dwErrorControl, util.pwstrToFfi(lpBinaryPathName), util.pwstrToFfi(lpLoadOrderGroup), util.toPointer(lpdwTagId), util.pwstrToFfi(lpDependencies), util.pwstrToFfi(lpServiceStartName), util.pwstrToFfi(lpPassword), util.pwstrToFfi(lpDisplayName)));
}

export function ChangeServiceConfig2A(
  hService: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  dwInfoLevel: SERVICE_CONFIG /* Windows.Win32.System.Services.SERVICE_CONFIG */,
  lpInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.ChangeServiceConfig2A(util.toPointer(hService), dwInfoLevel, util.toPointer(lpInfo)));
}

export function ChangeServiceConfig2W(
  hService: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  dwInfoLevel: SERVICE_CONFIG /* Windows.Win32.System.Services.SERVICE_CONFIG */,
  lpInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.ChangeServiceConfig2W(util.toPointer(hService), dwInfoLevel, util.toPointer(lpInfo)));
}

export function CloseServiceHandle(
  hSCObject: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CloseServiceHandle(util.toPointer(hSCObject)));
}

export function ControlService(
  hService: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  dwControl: number /* u32 */,
  lpServiceStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.ControlService(util.toPointer(hService), dwControl, util.toPointer(lpServiceStatus)));
}

export function CreateServiceA(
  hSCManager: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  lpServiceName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpDisplayName: string | null /* Windows.Win32.Foundation.PSTR */,
  dwDesiredAccess: number /* u32 */,
  dwServiceType: ENUM_SERVICE_TYPE /* Windows.Win32.System.Services.ENUM_SERVICE_TYPE */,
  dwStartType: SERVICE_START_TYPE /* Windows.Win32.System.Services.SERVICE_START_TYPE */,
  dwErrorControl: SERVICE_ERROR /* Windows.Win32.System.Services.SERVICE_ERROR */,
  lpBinaryPathName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpLoadOrderGroup: string | null /* Windows.Win32.Foundation.PSTR */,
  lpdwTagId: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpDependencies: string | null /* Windows.Win32.Foundation.PSTR */,
  lpServiceStartName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpPassword: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */ {
  return util.pointerFromFfi(libADVAPI32_dll.CreateServiceA(util.toPointer(hSCManager), util.pstrToFfi(lpServiceName), util.pstrToFfi(lpDisplayName), dwDesiredAccess, dwServiceType, dwStartType, dwErrorControl, util.pstrToFfi(lpBinaryPathName), util.pstrToFfi(lpLoadOrderGroup), util.toPointer(lpdwTagId), util.pstrToFfi(lpDependencies), util.pstrToFfi(lpServiceStartName), util.pstrToFfi(lpPassword)));
}

export function CreateServiceW(
  hSCManager: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  lpServiceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpDisplayName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwDesiredAccess: number /* u32 */,
  dwServiceType: ENUM_SERVICE_TYPE /* Windows.Win32.System.Services.ENUM_SERVICE_TYPE */,
  dwStartType: SERVICE_START_TYPE /* Windows.Win32.System.Services.SERVICE_START_TYPE */,
  dwErrorControl: SERVICE_ERROR /* Windows.Win32.System.Services.SERVICE_ERROR */,
  lpBinaryPathName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpLoadOrderGroup: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpdwTagId: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpDependencies: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpServiceStartName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpPassword: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */ {
  return util.pointerFromFfi(libADVAPI32_dll.CreateServiceW(util.toPointer(hSCManager), util.pwstrToFfi(lpServiceName), util.pwstrToFfi(lpDisplayName), dwDesiredAccess, dwServiceType, dwStartType, dwErrorControl, util.pwstrToFfi(lpBinaryPathName), util.pwstrToFfi(lpLoadOrderGroup), util.toPointer(lpdwTagId), util.pwstrToFfi(lpDependencies), util.pwstrToFfi(lpServiceStartName), util.pwstrToFfi(lpPassword)));
}

export function DeleteService(
  hService: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.DeleteService(util.toPointer(hService)));
}

export function EnumDependentServicesA(
  hService: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  dwServiceState: ENUM_SERVICE_STATE /* Windows.Win32.System.Services.ENUM_SERVICE_STATE */,
  lpServices: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbBufSize: number /* u32 */,
  pcbBytesNeeded: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpServicesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.EnumDependentServicesA(util.toPointer(hService), dwServiceState, util.toPointer(lpServices), cbBufSize, util.toPointer(pcbBytesNeeded), util.toPointer(lpServicesReturned)));
}

export function EnumDependentServicesW(
  hService: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  dwServiceState: ENUM_SERVICE_STATE /* Windows.Win32.System.Services.ENUM_SERVICE_STATE */,
  lpServices: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbBufSize: number /* u32 */,
  pcbBytesNeeded: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpServicesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.EnumDependentServicesW(util.toPointer(hService), dwServiceState, util.toPointer(lpServices), cbBufSize, util.toPointer(pcbBytesNeeded), util.toPointer(lpServicesReturned)));
}

export function EnumServicesStatusA(
  hSCManager: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  dwServiceType: ENUM_SERVICE_TYPE /* Windows.Win32.System.Services.ENUM_SERVICE_TYPE */,
  dwServiceState: ENUM_SERVICE_STATE /* Windows.Win32.System.Services.ENUM_SERVICE_STATE */,
  lpServices: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbBufSize: number /* u32 */,
  pcbBytesNeeded: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpServicesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpResumeHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.EnumServicesStatusA(util.toPointer(hSCManager), dwServiceType, dwServiceState, util.toPointer(lpServices), cbBufSize, util.toPointer(pcbBytesNeeded), util.toPointer(lpServicesReturned), util.toPointer(lpResumeHandle)));
}

export function EnumServicesStatusW(
  hSCManager: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  dwServiceType: ENUM_SERVICE_TYPE /* Windows.Win32.System.Services.ENUM_SERVICE_TYPE */,
  dwServiceState: ENUM_SERVICE_STATE /* Windows.Win32.System.Services.ENUM_SERVICE_STATE */,
  lpServices: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbBufSize: number /* u32 */,
  pcbBytesNeeded: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpServicesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpResumeHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.EnumServicesStatusW(util.toPointer(hSCManager), dwServiceType, dwServiceState, util.toPointer(lpServices), cbBufSize, util.toPointer(pcbBytesNeeded), util.toPointer(lpServicesReturned), util.toPointer(lpResumeHandle)));
}

export function EnumServicesStatusExA(
  hSCManager: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  InfoLevel: SC_ENUM_TYPE /* Windows.Win32.System.Services.SC_ENUM_TYPE */,
  dwServiceType: ENUM_SERVICE_TYPE /* Windows.Win32.System.Services.ENUM_SERVICE_TYPE */,
  dwServiceState: ENUM_SERVICE_STATE /* Windows.Win32.System.Services.ENUM_SERVICE_STATE */,
  lpServices: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbBufSize: number /* u32 */,
  pcbBytesNeeded: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpServicesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpResumeHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszGroupName: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.EnumServicesStatusExA(util.toPointer(hSCManager), InfoLevel, dwServiceType, dwServiceState, util.toPointer(lpServices), cbBufSize, util.toPointer(pcbBytesNeeded), util.toPointer(lpServicesReturned), util.toPointer(lpResumeHandle), util.pstrToFfi(pszGroupName)));
}

export function EnumServicesStatusExW(
  hSCManager: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  InfoLevel: SC_ENUM_TYPE /* Windows.Win32.System.Services.SC_ENUM_TYPE */,
  dwServiceType: ENUM_SERVICE_TYPE /* Windows.Win32.System.Services.ENUM_SERVICE_TYPE */,
  dwServiceState: ENUM_SERVICE_STATE /* Windows.Win32.System.Services.ENUM_SERVICE_STATE */,
  lpServices: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbBufSize: number /* u32 */,
  pcbBytesNeeded: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpServicesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpResumeHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszGroupName: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.EnumServicesStatusExW(util.toPointer(hSCManager), InfoLevel, dwServiceType, dwServiceState, util.toPointer(lpServices), cbBufSize, util.toPointer(pcbBytesNeeded), util.toPointer(lpServicesReturned), util.toPointer(lpResumeHandle), util.pwstrToFfi(pszGroupName)));
}

export function GetServiceKeyNameA(
  hSCManager: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  lpDisplayName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpServiceName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpcchBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.GetServiceKeyNameA(util.toPointer(hSCManager), util.pstrToFfi(lpDisplayName), util.pstrToFfi(lpServiceName), util.toPointer(lpcchBuffer)));
}

export function GetServiceKeyNameW(
  hSCManager: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  lpDisplayName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpServiceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpcchBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.GetServiceKeyNameW(util.toPointer(hSCManager), util.pwstrToFfi(lpDisplayName), util.pwstrToFfi(lpServiceName), util.toPointer(lpcchBuffer)));
}

export function GetServiceDisplayNameA(
  hSCManager: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  lpServiceName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpDisplayName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpcchBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.GetServiceDisplayNameA(util.toPointer(hSCManager), util.pstrToFfi(lpServiceName), util.pstrToFfi(lpDisplayName), util.toPointer(lpcchBuffer)));
}

export function GetServiceDisplayNameW(
  hSCManager: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  lpServiceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpDisplayName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpcchBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.GetServiceDisplayNameW(util.toPointer(hSCManager), util.pwstrToFfi(lpServiceName), util.pwstrToFfi(lpDisplayName), util.toPointer(lpcchBuffer)));
}

export function LockServiceDatabase(
  hSCManager: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libADVAPI32_dll.LockServiceDatabase(util.toPointer(hSCManager)));
}

export function NotifyBootConfigStatus(
  BootAcceptable: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.NotifyBootConfigStatus(util.boolToFfi(BootAcceptable)));
}

export function OpenSCManagerA(
  lpMachineName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpDatabaseName: string | null /* Windows.Win32.Foundation.PSTR */,
  dwDesiredAccess: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */ {
  return util.pointerFromFfi(libADVAPI32_dll.OpenSCManagerA(util.pstrToFfi(lpMachineName), util.pstrToFfi(lpDatabaseName), dwDesiredAccess));
}

export function OpenSCManagerW(
  lpMachineName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpDatabaseName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwDesiredAccess: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */ {
  return util.pointerFromFfi(libADVAPI32_dll.OpenSCManagerW(util.pwstrToFfi(lpMachineName), util.pwstrToFfi(lpDatabaseName), dwDesiredAccess));
}

export function OpenServiceA(
  hSCManager: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  lpServiceName: string | null /* Windows.Win32.Foundation.PSTR */,
  dwDesiredAccess: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */ {
  return util.pointerFromFfi(libADVAPI32_dll.OpenServiceA(util.toPointer(hSCManager), util.pstrToFfi(lpServiceName), dwDesiredAccess));
}

export function OpenServiceW(
  hSCManager: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  lpServiceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwDesiredAccess: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */ {
  return util.pointerFromFfi(libADVAPI32_dll.OpenServiceW(util.toPointer(hSCManager), util.pwstrToFfi(lpServiceName), dwDesiredAccess));
}

export function QueryServiceConfigA(
  hService: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  lpServiceConfig: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbBufSize: number /* u32 */,
  pcbBytesNeeded: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.QueryServiceConfigA(util.toPointer(hService), util.toPointer(lpServiceConfig), cbBufSize, util.toPointer(pcbBytesNeeded)));
}

export function QueryServiceConfigW(
  hService: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  lpServiceConfig: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbBufSize: number /* u32 */,
  pcbBytesNeeded: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.QueryServiceConfigW(util.toPointer(hService), util.toPointer(lpServiceConfig), cbBufSize, util.toPointer(pcbBytesNeeded)));
}

export function QueryServiceConfig2A(
  hService: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  dwInfoLevel: SERVICE_CONFIG /* Windows.Win32.System.Services.SERVICE_CONFIG */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbBufSize: number /* u32 */,
  pcbBytesNeeded: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.QueryServiceConfig2A(util.toPointer(hService), dwInfoLevel, util.toPointer(lpBuffer), cbBufSize, util.toPointer(pcbBytesNeeded)));
}

export function QueryServiceConfig2W(
  hService: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  dwInfoLevel: SERVICE_CONFIG /* Windows.Win32.System.Services.SERVICE_CONFIG */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbBufSize: number /* u32 */,
  pcbBytesNeeded: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.QueryServiceConfig2W(util.toPointer(hService), dwInfoLevel, util.toPointer(lpBuffer), cbBufSize, util.toPointer(pcbBytesNeeded)));
}

export function QueryServiceLockStatusA(
  hSCManager: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  lpLockStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbBufSize: number /* u32 */,
  pcbBytesNeeded: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.QueryServiceLockStatusA(util.toPointer(hSCManager), util.toPointer(lpLockStatus), cbBufSize, util.toPointer(pcbBytesNeeded)));
}

export function QueryServiceLockStatusW(
  hSCManager: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  lpLockStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbBufSize: number /* u32 */,
  pcbBytesNeeded: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.QueryServiceLockStatusW(util.toPointer(hSCManager), util.toPointer(lpLockStatus), cbBufSize, util.toPointer(pcbBytesNeeded)));
}

export function QueryServiceObjectSecurity(
  hService: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  dwSecurityInformation: number /* u32 */,
  lpSecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  cbBufSize: number /* u32 */,
  pcbBytesNeeded: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.QueryServiceObjectSecurity(util.toPointer(hService), dwSecurityInformation, util.toPointer(lpSecurityDescriptor), cbBufSize, util.toPointer(pcbBytesNeeded)));
}

export function QueryServiceStatus(
  hService: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  lpServiceStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.QueryServiceStatus(util.toPointer(hService), util.toPointer(lpServiceStatus)));
}

export function QueryServiceStatusEx(
  hService: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  InfoLevel: SC_STATUS_TYPE /* Windows.Win32.System.Services.SC_STATUS_TYPE */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbBufSize: number /* u32 */,
  pcbBytesNeeded: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.QueryServiceStatusEx(util.toPointer(hService), InfoLevel, util.toPointer(lpBuffer), cbBufSize, util.toPointer(pcbBytesNeeded)));
}

export function RegisterServiceCtrlHandlerA(
  lpServiceName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpHandlerProc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Services.LPHANDLER_FUNCTION */,
): Deno.PointerValue | null /* Windows.Win32.System.Services.SERVICE_STATUS_HANDLE */ {
  return util.pointerFromFfi(libADVAPI32_dll.RegisterServiceCtrlHandlerA(util.pstrToFfi(lpServiceName), util.toPointer(lpHandlerProc)));
}

export function RegisterServiceCtrlHandlerW(
  lpServiceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpHandlerProc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Services.LPHANDLER_FUNCTION */,
): Deno.PointerValue | null /* Windows.Win32.System.Services.SERVICE_STATUS_HANDLE */ {
  return util.pointerFromFfi(libADVAPI32_dll.RegisterServiceCtrlHandlerW(util.pwstrToFfi(lpServiceName), util.toPointer(lpHandlerProc)));
}

export function RegisterServiceCtrlHandlerExA(
  lpServiceName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpHandlerProc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Services.LPHANDLER_FUNCTION_EX */,
  lpContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.System.Services.SERVICE_STATUS_HANDLE */ {
  return util.pointerFromFfi(libADVAPI32_dll.RegisterServiceCtrlHandlerExA(util.pstrToFfi(lpServiceName), util.toPointer(lpHandlerProc), util.toPointer(lpContext)));
}

export function RegisterServiceCtrlHandlerExW(
  lpServiceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpHandlerProc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Services.LPHANDLER_FUNCTION_EX */,
  lpContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.System.Services.SERVICE_STATUS_HANDLE */ {
  return util.pointerFromFfi(libADVAPI32_dll.RegisterServiceCtrlHandlerExW(util.pwstrToFfi(lpServiceName), util.toPointer(lpHandlerProc), util.toPointer(lpContext)));
}

export function SetServiceObjectSecurity(
  hService: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  dwSecurityInformation: OBJECT_SECURITY_INFORMATION /* Windows.Win32.Security.OBJECT_SECURITY_INFORMATION */,
  lpSecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.SetServiceObjectSecurity(util.toPointer(hService), dwSecurityInformation, util.toPointer(lpSecurityDescriptor)));
}

export function SetServiceStatus(
  hServiceStatus: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Services.SERVICE_STATUS_HANDLE */,
  lpServiceStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.SetServiceStatus(util.toPointer(hServiceStatus), util.toPointer(lpServiceStatus)));
}

export function StartServiceCtrlDispatcherA(
  lpServiceStartTable: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.StartServiceCtrlDispatcherA(util.toPointer(lpServiceStartTable)));
}

export function StartServiceCtrlDispatcherW(
  lpServiceStartTable: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.StartServiceCtrlDispatcherW(util.toPointer(lpServiceStartTable)));
}

export function StartServiceA(
  hService: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  dwNumServiceArgs: number /* u32 */,
  lpServiceArgVectors: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.StartServiceA(util.toPointer(hService), dwNumServiceArgs, util.toPointer(lpServiceArgVectors)));
}

export function StartServiceW(
  hService: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  dwNumServiceArgs: number /* u32 */,
  lpServiceArgVectors: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.StartServiceW(util.toPointer(hService), dwNumServiceArgs, util.toPointer(lpServiceArgVectors)));
}

export function UnlockServiceDatabase(
  ScLock: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.UnlockServiceDatabase(util.toPointer(ScLock)));
}

export function NotifyServiceStatusChangeA(
  hService: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  dwNotifyMask: SERVICE_NOTIFY /* Windows.Win32.System.Services.SERVICE_NOTIFY */,
  pNotifyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32_dll.NotifyServiceStatusChangeA(util.toPointer(hService), dwNotifyMask, util.toPointer(pNotifyBuffer));
}

export function NotifyServiceStatusChangeW(
  hService: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  dwNotifyMask: SERVICE_NOTIFY /* Windows.Win32.System.Services.SERVICE_NOTIFY */,
  pNotifyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32_dll.NotifyServiceStatusChangeW(util.toPointer(hService), dwNotifyMask, util.toPointer(pNotifyBuffer));
}

export function ControlServiceExA(
  hService: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  dwControl: number /* u32 */,
  dwInfoLevel: number /* u32 */,
  pControlParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.ControlServiceExA(util.toPointer(hService), dwControl, dwInfoLevel, util.toPointer(pControlParams)));
}

export function ControlServiceExW(
  hService: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  dwControl: number /* u32 */,
  dwInfoLevel: number /* u32 */,
  pControlParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.ControlServiceExW(util.toPointer(hService), dwControl, dwInfoLevel, util.toPointer(pControlParams)));
}

export function QueryServiceDynamicInformation(
  hServiceStatus: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Services.SERVICE_STATUS_HANDLE */,
  dwInfoLevel: number /* u32 */,
  ppDynamicInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.QueryServiceDynamicInformation(util.toPointer(hServiceStatus), dwInfoLevel, util.toPointer(ppDynamicInfo)));
}

export function WaitServiceState(
  hService: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  dwNotify: number /* u32 */,
  dwTimeout: number /* u32 */,
  hCancelEvent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libADVAPI32_dll.WaitServiceState(util.toPointer(hService), dwNotify, dwTimeout, util.toPointer(hCancelEvent));
}

export function GetServiceRegistryStateKey(
  ServiceStatusHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Services.SERVICE_STATUS_HANDLE */,
  StateType: SERVICE_REGISTRY_STATE_TYPE /* Windows.Win32.System.Services.SERVICE_REGISTRY_STATE_TYPE */,
  AccessMask: number /* u32 */,
  ServiceStateKey: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libapi_ms_win_service_core_l1_1_3_dll.GetServiceRegistryStateKey(util.toPointer(ServiceStatusHandle), StateType, AccessMask, util.toPointer(ServiceStateKey));
}

export function GetServiceDirectory(
  hServiceStatus: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Services.SERVICE_STATUS_HANDLE */,
  eDirectoryType: SERVICE_DIRECTORY_TYPE /* Windows.Win32.System.Services.SERVICE_DIRECTORY_TYPE */,
  lpPathBuffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchPathBufferLength: number /* u32 */,
  lpcchRequiredBufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libapi_ms_win_service_core_l1_1_4_dll.GetServiceDirectory(util.toPointer(hServiceStatus), eDirectoryType, util.pwstrToFfi(lpPathBuffer), cchPathBufferLength, util.toPointer(lpcchRequiredBufferLength));
}

export function GetSharedServiceRegistryStateKey(
  ServiceHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  StateType: SERVICE_SHARED_REGISTRY_STATE_TYPE /* Windows.Win32.System.Services.SERVICE_SHARED_REGISTRY_STATE_TYPE */,
  AccessMask: number /* u32 */,
  ServiceStateKey: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libapi_ms_win_service_core_l1_1_5_dll.GetSharedServiceRegistryStateKey(util.toPointer(ServiceHandle), StateType, AccessMask, util.toPointer(ServiceStateKey));
}

export function GetSharedServiceDirectory(
  ServiceHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  DirectoryType: SERVICE_SHARED_DIRECTORY_TYPE /* Windows.Win32.System.Services.SERVICE_SHARED_DIRECTORY_TYPE */,
  PathBuffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  PathBufferLength: number /* u32 */,
  RequiredBufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libapi_ms_win_service_core_l1_1_5_dll.GetSharedServiceDirectory(util.toPointer(ServiceHandle), DirectoryType, util.pwstrToFfi(PathBuffer), PathBufferLength, util.toPointer(RequiredBufferLength));
}

