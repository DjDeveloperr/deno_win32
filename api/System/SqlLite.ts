/// Auto-generated by Deno Win32: Windows.Win32.System.SqlLite.Apis

import * as util from "../../util.ts";

// Constants
export const SQLITE_VERSION_NUMBER = 3029000;
export const SQLITE_OK = 0;
export const SQLITE_ERROR = 1;
export const SQLITE_INTERNAL = 2;
export const SQLITE_PERM = 3;
export const SQLITE_ABORT = 4;
export const SQLITE_BUSY = 5;
export const SQLITE_LOCKED = 6;
export const SQLITE_NOMEM = 7;
export const SQLITE_READONLY = 8;
export const SQLITE_INTERRUPT = 9;
export const SQLITE_IOERR = 10;
export const SQLITE_CORRUPT = 11;
export const SQLITE_NOTFOUND = 12;
export const SQLITE_FULL = 13;
export const SQLITE_CANTOPEN = 14;
export const SQLITE_PROTOCOL = 15;
export const SQLITE_EMPTY = 16;
export const SQLITE_SCHEMA = 17;
export const SQLITE_TOOBIG = 18;
export const SQLITE_CONSTRAINT = 19;
export const SQLITE_MISMATCH = 20;
export const SQLITE_MISUSE = 21;
export const SQLITE_NOLFS = 22;
export const SQLITE_AUTH = 23;
export const SQLITE_FORMAT = 24;
export const SQLITE_RANGE = 25;
export const SQLITE_NOTADB = 26;
export const SQLITE_NOTICE = 27;
export const SQLITE_WARNING = 28;
export const SQLITE_ROW = 100;
export const SQLITE_DONE = 101;
export const SQLITE_OPEN_READONLY = 1;
export const SQLITE_OPEN_READWRITE = 2;
export const SQLITE_OPEN_CREATE = 4;
export const SQLITE_OPEN_DELETEONCLOSE = 8;
export const SQLITE_OPEN_EXCLUSIVE = 16;
export const SQLITE_OPEN_AUTOPROXY = 32;
export const SQLITE_OPEN_URI = 64;
export const SQLITE_OPEN_MEMORY = 128;
export const SQLITE_OPEN_MAIN_DB = 256;
export const SQLITE_OPEN_TEMP_DB = 512;
export const SQLITE_OPEN_TRANSIENT_DB = 1024;
export const SQLITE_OPEN_MAIN_JOURNAL = 2048;
export const SQLITE_OPEN_TEMP_JOURNAL = 4096;
export const SQLITE_OPEN_SUBJOURNAL = 8192;
export const SQLITE_OPEN_SUPER_JOURNAL = 16384;
export const SQLITE_OPEN_NOMUTEX = 32768;
export const SQLITE_OPEN_FULLMUTEX = 65536;
export const SQLITE_OPEN_SHAREDCACHE = 131072;
export const SQLITE_OPEN_PRIVATECACHE = 262144;
export const SQLITE_OPEN_WAL = 524288;
export const SQLITE_OPEN_NOFOLLOW = 16777216;
export const SQLITE_OPEN_MASTER_JOURNAL = 16384;
export const SQLITE_IOCAP_ATOMIC = 1;
export const SQLITE_IOCAP_ATOMIC512 = 2;
export const SQLITE_IOCAP_ATOMIC1K = 4;
export const SQLITE_IOCAP_ATOMIC2K = 8;
export const SQLITE_IOCAP_ATOMIC4K = 16;
export const SQLITE_IOCAP_ATOMIC8K = 32;
export const SQLITE_IOCAP_ATOMIC16K = 64;
export const SQLITE_IOCAP_ATOMIC32K = 128;
export const SQLITE_IOCAP_ATOMIC64K = 256;
export const SQLITE_IOCAP_SAFE_APPEND = 512;
export const SQLITE_IOCAP_SEQUENTIAL = 1024;
export const SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN = 2048;
export const SQLITE_IOCAP_POWERSAFE_OVERWRITE = 4096;
export const SQLITE_IOCAP_IMMUTABLE = 8192;
export const SQLITE_IOCAP_BATCH_ATOMIC = 16384;
export const SQLITE_LOCK_NONE = 0;
export const SQLITE_LOCK_SHARED = 1;
export const SQLITE_LOCK_RESERVED = 2;
export const SQLITE_LOCK_PENDING = 3;
export const SQLITE_LOCK_EXCLUSIVE = 4;
export const SQLITE_SYNC_NORMAL = 2;
export const SQLITE_SYNC_FULL = 3;
export const SQLITE_SYNC_DATAONLY = 16;
export const SQLITE_FCNTL_LOCKSTATE = 1;
export const SQLITE_FCNTL_GET_LOCKPROXYFILE = 2;
export const SQLITE_FCNTL_SET_LOCKPROXYFILE = 3;
export const SQLITE_FCNTL_LAST_ERRNO = 4;
export const SQLITE_FCNTL_SIZE_HINT = 5;
export const SQLITE_FCNTL_CHUNK_SIZE = 6;
export const SQLITE_FCNTL_FILE_POINTER = 7;
export const SQLITE_FCNTL_SYNC_OMITTED = 8;
export const SQLITE_FCNTL_WIN32_AV_RETRY = 9;
export const SQLITE_FCNTL_PERSIST_WAL = 10;
export const SQLITE_FCNTL_OVERWRITE = 11;
export const SQLITE_FCNTL_VFSNAME = 12;
export const SQLITE_FCNTL_POWERSAFE_OVERWRITE = 13;
export const SQLITE_FCNTL_PRAGMA = 14;
export const SQLITE_FCNTL_BUSYHANDLER = 15;
export const SQLITE_FCNTL_TEMPFILENAME = 16;
export const SQLITE_FCNTL_MMAP_SIZE = 18;
export const SQLITE_FCNTL_TRACE = 19;
export const SQLITE_FCNTL_HAS_MOVED = 20;
export const SQLITE_FCNTL_SYNC = 21;
export const SQLITE_FCNTL_COMMIT_PHASETWO = 22;
export const SQLITE_FCNTL_WIN32_SET_HANDLE = 23;
export const SQLITE_FCNTL_WAL_BLOCK = 24;
export const SQLITE_FCNTL_ZIPVFS = 25;
export const SQLITE_FCNTL_RBU = 26;
export const SQLITE_FCNTL_VFS_POINTER = 27;
export const SQLITE_FCNTL_JOURNAL_POINTER = 28;
export const SQLITE_FCNTL_WIN32_GET_HANDLE = 29;
export const SQLITE_FCNTL_PDB = 30;
export const SQLITE_FCNTL_BEGIN_ATOMIC_WRITE = 31;
export const SQLITE_FCNTL_COMMIT_ATOMIC_WRITE = 32;
export const SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE = 33;
export const SQLITE_FCNTL_LOCK_TIMEOUT = 34;
export const SQLITE_FCNTL_DATA_VERSION = 35;
export const SQLITE_FCNTL_SIZE_LIMIT = 36;
export const SQLITE_FCNTL_CKPT_DONE = 37;
export const SQLITE_FCNTL_RESERVE_BYTES = 38;
export const SQLITE_FCNTL_CKPT_START = 39;
export const SQLITE_GET_LOCKPROXYFILE = 2;
export const SQLITE_SET_LOCKPROXYFILE = 3;
export const SQLITE_LAST_ERRNO = 4;
export const SQLITE_ACCESS_EXISTS = 0;
export const SQLITE_ACCESS_READWRITE = 1;
export const SQLITE_ACCESS_READ = 2;
export const SQLITE_SHM_UNLOCK = 1;
export const SQLITE_SHM_LOCK = 2;
export const SQLITE_SHM_SHARED = 4;
export const SQLITE_SHM_EXCLUSIVE = 8;
export const SQLITE_SHM_NLOCK = 8;
export const SQLITE_CONFIG_SINGLETHREAD = 1;
export const SQLITE_CONFIG_MULTITHREAD = 2;
export const SQLITE_CONFIG_SERIALIZED = 3;
export const SQLITE_CONFIG_MALLOC = 4;
export const SQLITE_CONFIG_GETMALLOC = 5;
export const SQLITE_CONFIG_SCRATCH = 6;
export const SQLITE_CONFIG_PAGECACHE = 7;
export const SQLITE_CONFIG_HEAP = 8;
export const SQLITE_CONFIG_MEMSTATUS = 9;
export const SQLITE_CONFIG_MUTEX = 10;
export const SQLITE_CONFIG_GETMUTEX = 11;
export const SQLITE_CONFIG_LOOKASIDE = 13;
export const SQLITE_CONFIG_PCACHE = 14;
export const SQLITE_CONFIG_GETPCACHE = 15;
export const SQLITE_CONFIG_LOG = 16;
export const SQLITE_CONFIG_URI = 17;
export const SQLITE_CONFIG_PCACHE2 = 18;
export const SQLITE_CONFIG_GETPCACHE2 = 19;
export const SQLITE_CONFIG_COVERING_INDEX_SCAN = 20;
export const SQLITE_CONFIG_SQLLOG = 21;
export const SQLITE_CONFIG_MMAP_SIZE = 22;
export const SQLITE_CONFIG_WIN32_HEAPSIZE = 23;
export const SQLITE_CONFIG_PCACHE_HDRSZ = 24;
export const SQLITE_CONFIG_PMASZ = 25;
export const SQLITE_CONFIG_STMTJRNL_SPILL = 26;
export const SQLITE_CONFIG_SMALL_MALLOC = 27;
export const SQLITE_CONFIG_SORTERREF_SIZE = 28;
export const SQLITE_CONFIG_MEMDB_MAXSIZE = 29;
export const SQLITE_DBCONFIG_MAINDBNAME = 1000;
export const SQLITE_DBCONFIG_LOOKASIDE = 1001;
export const SQLITE_DBCONFIG_ENABLE_FKEY = 1002;
export const SQLITE_DBCONFIG_ENABLE_TRIGGER = 1003;
export const SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER = 1004;
export const SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION = 1005;
export const SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE = 1006;
export const SQLITE_DBCONFIG_ENABLE_QPSG = 1007;
export const SQLITE_DBCONFIG_TRIGGER_EQP = 1008;
export const SQLITE_DBCONFIG_RESET_DATABASE = 1009;
export const SQLITE_DBCONFIG_DEFENSIVE = 1010;
export const SQLITE_DBCONFIG_WRITABLE_SCHEMA = 1011;
export const SQLITE_DBCONFIG_LEGACY_ALTER_TABLE = 1012;
export const SQLITE_DBCONFIG_DQS_DML = 1013;
export const SQLITE_DBCONFIG_DQS_DDL = 1014;
export const SQLITE_DBCONFIG_ENABLE_VIEW = 1015;
export const SQLITE_DBCONFIG_LEGACY_FILE_FORMAT = 1016;
export const SQLITE_DBCONFIG_TRUSTED_SCHEMA = 1017;
export const SQLITE_DBCONFIG_MAX = 1017;
export const SQLITE_DENY = 1;
export const SQLITE_IGNORE = 2;
export const SQLITE_CREATE_INDEX = 1;
export const SQLITE_CREATE_TABLE = 2;
export const SQLITE_CREATE_TEMP_INDEX = 3;
export const SQLITE_CREATE_TEMP_TABLE = 4;
export const SQLITE_CREATE_TEMP_TRIGGER = 5;
export const SQLITE_CREATE_TEMP_VIEW = 6;
export const SQLITE_CREATE_TRIGGER = 7;
export const SQLITE_CREATE_VIEW = 8;
export const SQLITE_DELETE = 9;
export const SQLITE_DROP_INDEX = 10;
export const SQLITE_DROP_TABLE = 11;
export const SQLITE_DROP_TEMP_INDEX = 12;
export const SQLITE_DROP_TEMP_TABLE = 13;
export const SQLITE_DROP_TEMP_TRIGGER = 14;
export const SQLITE_DROP_TEMP_VIEW = 15;
export const SQLITE_DROP_TRIGGER = 16;
export const SQLITE_DROP_VIEW = 17;
export const SQLITE_INSERT = 18;
export const SQLITE_PRAGMA = 19;
export const SQLITE_READ = 20;
export const SQLITE_SELECT = 21;
export const SQLITE_TRANSACTION = 22;
export const SQLITE_UPDATE = 23;
export const SQLITE_ATTACH = 24;
export const SQLITE_DETACH = 25;
export const SQLITE_ALTER_TABLE = 26;
export const SQLITE_REINDEX = 27;
export const SQLITE_ANALYZE = 28;
export const SQLITE_CREATE_VTABLE = 29;
export const SQLITE_DROP_VTABLE = 30;
export const SQLITE_FUNCTION = 31;
export const SQLITE_SAVEPOINT = 32;
export const SQLITE_COPY = 0;
export const SQLITE_RECURSIVE = 33;
export const SQLITE_TRACE_STMT = 1;
export const SQLITE_TRACE_PROFILE = 2;
export const SQLITE_TRACE_ROW = 4;
export const SQLITE_TRACE_CLOSE = 8;
export const SQLITE_LIMIT_LENGTH = 0;
export const SQLITE_LIMIT_SQL_LENGTH = 1;
export const SQLITE_LIMIT_COLUMN = 2;
export const SQLITE_LIMIT_EXPR_DEPTH = 3;
export const SQLITE_LIMIT_COMPOUND_SELECT = 4;
export const SQLITE_LIMIT_VDBE_OP = 5;
export const SQLITE_LIMIT_FUNCTION_ARG = 6;
export const SQLITE_LIMIT_ATTACHED = 7;
export const SQLITE_LIMIT_LIKE_PATTERN_LENGTH = 8;
export const SQLITE_LIMIT_VARIABLE_NUMBER = 9;
export const SQLITE_LIMIT_TRIGGER_DEPTH = 10;
export const SQLITE_LIMIT_WORKER_THREADS = 11;
export const SQLITE_PREPARE_PERSISTENT = 1;
export const SQLITE_PREPARE_NORMALIZE = 2;
export const SQLITE_PREPARE_NO_VTAB = 4;
export const SQLITE_INTEGER = 1;
export const SQLITE_FLOAT = 2;
export const SQLITE_BLOB = 4;
export const SQLITE_NULL = 5;
export const SQLITE_TEXT = 3;
export const SQLITE3_TEXT = 3;
export const SQLITE_UTF8 = 1;
export const SQLITE_UTF16LE = 2;
export const SQLITE_UTF16BE = 3;
export const SQLITE_UTF16 = 4;
export const SQLITE_ANY = 5;
export const SQLITE_UTF16_ALIGNED = 8;
export const SQLITE_DETERMINISTIC = 2048;
export const SQLITE_DIRECTONLY = 524288;
export const SQLITE_SUBTYPE = 1048576;
export const SQLITE_INNOCUOUS = 2097152;
export const SQLITE_WIN32_DATA_DIRECTORY_TYPE = 1;
export const SQLITE_WIN32_TEMP_DIRECTORY_TYPE = 2;
export const SQLITE_TXN_NONE = 0;
export const SQLITE_TXN_READ = 1;
export const SQLITE_TXN_WRITE = 2;
export const SQLITE_INDEX_SCAN_UNIQUE = 1;
export const SQLITE_INDEX_CONSTRAINT_EQ = 2;
export const SQLITE_INDEX_CONSTRAINT_GT = 4;
export const SQLITE_INDEX_CONSTRAINT_LE = 8;
export const SQLITE_INDEX_CONSTRAINT_LT = 16;
export const SQLITE_INDEX_CONSTRAINT_GE = 32;
export const SQLITE_INDEX_CONSTRAINT_MATCH = 64;
export const SQLITE_INDEX_CONSTRAINT_LIKE = 65;
export const SQLITE_INDEX_CONSTRAINT_GLOB = 66;
export const SQLITE_INDEX_CONSTRAINT_REGEXP = 67;
export const SQLITE_INDEX_CONSTRAINT_NE = 68;
export const SQLITE_INDEX_CONSTRAINT_ISNOT = 69;
export const SQLITE_INDEX_CONSTRAINT_ISNOTNULL = 70;
export const SQLITE_INDEX_CONSTRAINT_ISNULL = 71;
export const SQLITE_INDEX_CONSTRAINT_IS = 72;
export const SQLITE_INDEX_CONSTRAINT_FUNCTION = 150;
export const SQLITE_MUTEX_FAST = 0;
export const SQLITE_MUTEX_RECURSIVE = 1;
export const SQLITE_MUTEX_STATIC_MAIN = 2;
export const SQLITE_MUTEX_STATIC_MEM = 3;
export const SQLITE_MUTEX_STATIC_MEM2 = 4;
export const SQLITE_MUTEX_STATIC_OPEN = 4;
export const SQLITE_MUTEX_STATIC_PRNG = 5;
export const SQLITE_MUTEX_STATIC_LRU = 6;
export const SQLITE_MUTEX_STATIC_LRU2 = 7;
export const SQLITE_MUTEX_STATIC_PMEM = 7;
export const SQLITE_MUTEX_STATIC_APP1 = 8;
export const SQLITE_MUTEX_STATIC_APP2 = 9;
export const SQLITE_MUTEX_STATIC_APP3 = 10;
export const SQLITE_MUTEX_STATIC_VFS1 = 11;
export const SQLITE_MUTEX_STATIC_VFS2 = 12;
export const SQLITE_MUTEX_STATIC_VFS3 = 13;
export const SQLITE_MUTEX_STATIC_MASTER = 2;
export const SQLITE_TESTCTRL_FIRST = 5;
export const SQLITE_TESTCTRL_PRNG_SAVE = 5;
export const SQLITE_TESTCTRL_PRNG_RESTORE = 6;
export const SQLITE_TESTCTRL_PRNG_RESET = 7;
export const SQLITE_TESTCTRL_BITVEC_TEST = 8;
export const SQLITE_TESTCTRL_FAULT_INSTALL = 9;
export const SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS = 10;
export const SQLITE_TESTCTRL_PENDING_BYTE = 11;
export const SQLITE_TESTCTRL_ASSERT = 12;
export const SQLITE_TESTCTRL_ALWAYS = 13;
export const SQLITE_TESTCTRL_RESERVE = 14;
export const SQLITE_TESTCTRL_OPTIMIZATIONS = 15;
export const SQLITE_TESTCTRL_ISKEYWORD = 16;
export const SQLITE_TESTCTRL_SCRATCHMALLOC = 17;
export const SQLITE_TESTCTRL_INTERNAL_FUNCTIONS = 17;
export const SQLITE_TESTCTRL_LOCALTIME_FAULT = 18;
export const SQLITE_TESTCTRL_EXPLAIN_STMT = 19;
export const SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD = 19;
export const SQLITE_TESTCTRL_NEVER_CORRUPT = 20;
export const SQLITE_TESTCTRL_VDBE_COVERAGE = 21;
export const SQLITE_TESTCTRL_BYTEORDER = 22;
export const SQLITE_TESTCTRL_ISINIT = 23;
export const SQLITE_TESTCTRL_SORTER_MMAP = 24;
export const SQLITE_TESTCTRL_IMPOSTER = 25;
export const SQLITE_TESTCTRL_PARSER_COVERAGE = 26;
export const SQLITE_TESTCTRL_RESULT_INTREAL = 27;
export const SQLITE_TESTCTRL_PRNG_SEED = 28;
export const SQLITE_TESTCTRL_EXTRA_SCHEMA_CHECKS = 29;
export const SQLITE_TESTCTRL_SEEK_COUNT = 30;
export const SQLITE_TESTCTRL_LAST = 30;
export const SQLITE_STATUS_MEMORY_USED = 0;
export const SQLITE_STATUS_PAGECACHE_USED = 1;
export const SQLITE_STATUS_PAGECACHE_OVERFLOW = 2;
export const SQLITE_STATUS_SCRATCH_USED = 3;
export const SQLITE_STATUS_SCRATCH_OVERFLOW = 4;
export const SQLITE_STATUS_MALLOC_SIZE = 5;
export const SQLITE_STATUS_PARSER_STACK = 6;
export const SQLITE_STATUS_PAGECACHE_SIZE = 7;
export const SQLITE_STATUS_SCRATCH_SIZE = 8;
export const SQLITE_STATUS_MALLOC_COUNT = 9;
export const SQLITE_DBSTATUS_LOOKASIDE_USED = 0;
export const SQLITE_DBSTATUS_CACHE_USED = 1;
export const SQLITE_DBSTATUS_SCHEMA_USED = 2;
export const SQLITE_DBSTATUS_STMT_USED = 3;
export const SQLITE_DBSTATUS_LOOKASIDE_HIT = 4;
export const SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE = 5;
export const SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL = 6;
export const SQLITE_DBSTATUS_CACHE_HIT = 7;
export const SQLITE_DBSTATUS_CACHE_MISS = 8;
export const SQLITE_DBSTATUS_CACHE_WRITE = 9;
export const SQLITE_DBSTATUS_DEFERRED_FKS = 10;
export const SQLITE_DBSTATUS_CACHE_USED_SHARED = 11;
export const SQLITE_DBSTATUS_CACHE_SPILL = 12;
export const SQLITE_DBSTATUS_MAX = 12;
export const SQLITE_STMTSTATUS_FULLSCAN_STEP = 1;
export const SQLITE_STMTSTATUS_SORT = 2;
export const SQLITE_STMTSTATUS_AUTOINDEX = 3;
export const SQLITE_STMTSTATUS_VM_STEP = 4;
export const SQLITE_STMTSTATUS_REPREPARE = 5;
export const SQLITE_STMTSTATUS_RUN = 6;
export const SQLITE_STMTSTATUS_MEMUSED = 99;
export const SQLITE_CHECKPOINT_PASSIVE = 0;
export const SQLITE_CHECKPOINT_FULL = 1;
export const SQLITE_CHECKPOINT_RESTART = 2;
export const SQLITE_CHECKPOINT_TRUNCATE = 3;
export const SQLITE_VTAB_CONSTRAINT_SUPPORT = 1;
export const SQLITE_VTAB_INNOCUOUS = 2;
export const SQLITE_VTAB_DIRECTONLY = 3;
export const SQLITE_ROLLBACK = 1;
export const SQLITE_FAIL = 3;
export const SQLITE_REPLACE = 5;
export const SQLITE_SCANSTAT_NLOOP = 0;
export const SQLITE_SCANSTAT_NVISIT = 1;
export const SQLITE_SCANSTAT_EST = 2;
export const SQLITE_SCANSTAT_NAME = 3;
export const SQLITE_SCANSTAT_EXPLAIN = 4;
export const SQLITE_SCANSTAT_SELECTID = 5;
export const SQLITE_SERIALIZE_NOCOPY = 1;
export const SQLITE_DESERIALIZE_FREEONCLOSE = 1;
export const SQLITE_DESERIALIZE_RESIZEABLE = 2;
export const SQLITE_DESERIALIZE_READONLY = 4;
export const NOT_WITHIN = 0;
export const PARTLY_WITHIN = 1;
export const FULLY_WITHIN = 2;
export const __SQLITESESSION_H_ = 1;
export const SQLITE_CHANGESETSTART_INVERT = 2;
export const SQLITE_CHANGESETAPPLY_NOSAVEPOINT = 1;
export const SQLITE_CHANGESETAPPLY_INVERT = 2;
export const SQLITE_CHANGESET_DATA = 1;
export const SQLITE_CHANGESET_NOTFOUND = 2;
export const SQLITE_CHANGESET_CONFLICT = 3;
export const SQLITE_CHANGESET_CONSTRAINT = 4;
export const SQLITE_CHANGESET_FOREIGN_KEY = 5;
export const SQLITE_CHANGESET_OMIT = 0;
export const SQLITE_CHANGESET_REPLACE = 1;
export const SQLITE_CHANGESET_ABORT = 2;
export const SQLITE_SESSION_CONFIG_STRMSIZE = 1;
export const FTS5_TOKENIZE_QUERY = 1;
export const FTS5_TOKENIZE_PREFIX = 2;
export const FTS5_TOKENIZE_DOCUMENT = 4;
export const FTS5_TOKENIZE_AUX = 8;
export const FTS5_TOKEN_COLOCATED = 1;

// Structs

/**
 * Windows.Win32.System.SqlLite.sqlite3_file (size: 8)
 */
export interface sqlite3_file {
  /** ptr */
  pMethods: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSqlite3_file = 8;

export function allocSqlite3_file(data?: Partial<sqlite3_file>): Uint8Array {
  const buf = new Uint8Array(sizeofSqlite3_file);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pMethods !== undefined) view.setBigUint64(0, data.pMethods === null ? 0n : BigInt(util.toPointer(data.pMethods)), true);
  return buf;
}

/**
 * Windows.Win32.System.SqlLite.sqlite3_io_methods (size: 152)
 */
export interface sqlite3_io_methods {
  /** i32 */
  iVersion: number;
  /** isize */
  xClose: Deno.PointerValue;
  /** isize */
  xRead: Deno.PointerValue;
  /** isize */
  xWrite: Deno.PointerValue;
  /** isize */
  xTruncate: Deno.PointerValue;
  /** isize */
  xSync: Deno.PointerValue;
  /** isize */
  xFileSize: Deno.PointerValue;
  /** isize */
  xLock: Deno.PointerValue;
  /** isize */
  xUnlock: Deno.PointerValue;
  /** isize */
  xCheckReservedLock: Deno.PointerValue;
  /** isize */
  xFileControl: Deno.PointerValue;
  /** isize */
  xSectorSize: Deno.PointerValue;
  /** isize */
  xDeviceCharacteristics: Deno.PointerValue;
  /** isize */
  xShmMap: Deno.PointerValue;
  /** isize */
  xShmLock: Deno.PointerValue;
  /** isize */
  xShmBarrier: Deno.PointerValue;
  /** isize */
  xShmUnmap: Deno.PointerValue;
  /** isize */
  xFetch: Deno.PointerValue;
  /** isize */
  xUnfetch: Deno.PointerValue;
}

export const sizeofSqlite3_io_methods = 152;

export function allocSqlite3_io_methods(data?: Partial<sqlite3_io_methods>): Uint8Array {
  const buf = new Uint8Array(sizeofSqlite3_io_methods);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.iVersion !== undefined) view.setInt32(0, Number(data.iVersion), true);
  // 0x04: pad4
  // 0x08: isize
  if (data?.xClose !== undefined) view.setBigInt64(8, BigInt(data.xClose), true);
  // 0x10: isize
  if (data?.xRead !== undefined) view.setBigInt64(16, BigInt(data.xRead), true);
  // 0x18: isize
  if (data?.xWrite !== undefined) view.setBigInt64(24, BigInt(data.xWrite), true);
  // 0x20: isize
  if (data?.xTruncate !== undefined) view.setBigInt64(32, BigInt(data.xTruncate), true);
  // 0x28: isize
  if (data?.xSync !== undefined) view.setBigInt64(40, BigInt(data.xSync), true);
  // 0x30: isize
  if (data?.xFileSize !== undefined) view.setBigInt64(48, BigInt(data.xFileSize), true);
  // 0x38: isize
  if (data?.xLock !== undefined) view.setBigInt64(56, BigInt(data.xLock), true);
  // 0x40: isize
  if (data?.xUnlock !== undefined) view.setBigInt64(64, BigInt(data.xUnlock), true);
  // 0x48: isize
  if (data?.xCheckReservedLock !== undefined) view.setBigInt64(72, BigInt(data.xCheckReservedLock), true);
  // 0x50: isize
  if (data?.xFileControl !== undefined) view.setBigInt64(80, BigInt(data.xFileControl), true);
  // 0x58: isize
  if (data?.xSectorSize !== undefined) view.setBigInt64(88, BigInt(data.xSectorSize), true);
  // 0x60: isize
  if (data?.xDeviceCharacteristics !== undefined) view.setBigInt64(96, BigInt(data.xDeviceCharacteristics), true);
  // 0x68: isize
  if (data?.xShmMap !== undefined) view.setBigInt64(104, BigInt(data.xShmMap), true);
  // 0x70: isize
  if (data?.xShmLock !== undefined) view.setBigInt64(112, BigInt(data.xShmLock), true);
  // 0x78: isize
  if (data?.xShmBarrier !== undefined) view.setBigInt64(120, BigInt(data.xShmBarrier), true);
  // 0x80: isize
  if (data?.xShmUnmap !== undefined) view.setBigInt64(128, BigInt(data.xShmUnmap), true);
  // 0x88: isize
  if (data?.xFetch !== undefined) view.setBigInt64(136, BigInt(data.xFetch), true);
  // 0x90: isize
  if (data?.xUnfetch !== undefined) view.setBigInt64(144, BigInt(data.xUnfetch), true);
  return buf;
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.System.SqlLite.sqlite3_vfs (size: 168)
 */
export interface sqlite3_vfs {
  /** i32 */
  iVersion: number;
  /** i32 */
  szOsFile: number;
  /** i32 */
  mxPathname: number;
  /** ptr */
  pNext: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PSTR */
  zName: string | null;
  /** ptr */
  pAppData: Deno.PointerValue | Uint8Array | null;
  /** isize */
  xOpen: Deno.PointerValue;
  /** isize */
  xDelete: Deno.PointerValue;
  /** isize */
  xAccess: Deno.PointerValue;
  /** isize */
  xFullPathname: Deno.PointerValue;
  /** isize */
  xDlOpen: Deno.PointerValue;
  /** isize */
  xDlError: Deno.PointerValue;
  /** isize */
  xDlSym: Deno.PointerValue;
  /** isize */
  xDlClose: Deno.PointerValue;
  /** isize */
  xRandomness: Deno.PointerValue;
  /** isize */
  xSleep: Deno.PointerValue;
  /** isize */
  xCurrentTime: Deno.PointerValue;
  /** isize */
  xGetLastError: Deno.PointerValue;
  /** isize */
  xCurrentTimeInt64: Deno.PointerValue;
  /** isize */
  xSetSystemCall: Deno.PointerValue;
  /** isize */
  xGetSystemCall: Deno.PointerValue;
  /** isize */
  xNextSystemCall: Deno.PointerValue;
}

export const sizeofSqlite3_vfs = 168;

export function allocSqlite3_vfs(data?: Partial<sqlite3_vfs>): Uint8Array {
  const buf = new Uint8Array(sizeofSqlite3_vfs);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.iVersion !== undefined) view.setInt32(0, Number(data.iVersion), true);
  // 0x04: i32
  if (data?.szOsFile !== undefined) view.setInt32(4, Number(data.szOsFile), true);
  // 0x08: i32
  if (data?.mxPathname !== undefined) view.setInt32(8, Number(data.mxPathname), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pNext !== undefined) view.setBigUint64(16, data.pNext === null ? 0n : BigInt(util.toPointer(data.pNext)), true);
  // 0x18: buffer
  if (data?.zName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.zName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.pAppData !== undefined) view.setBigUint64(32, data.pAppData === null ? 0n : BigInt(util.toPointer(data.pAppData)), true);
  // 0x28: isize
  if (data?.xOpen !== undefined) view.setBigInt64(40, BigInt(data.xOpen), true);
  // 0x30: isize
  if (data?.xDelete !== undefined) view.setBigInt64(48, BigInt(data.xDelete), true);
  // 0x38: isize
  if (data?.xAccess !== undefined) view.setBigInt64(56, BigInt(data.xAccess), true);
  // 0x40: isize
  if (data?.xFullPathname !== undefined) view.setBigInt64(64, BigInt(data.xFullPathname), true);
  // 0x48: isize
  if (data?.xDlOpen !== undefined) view.setBigInt64(72, BigInt(data.xDlOpen), true);
  // 0x50: isize
  if (data?.xDlError !== undefined) view.setBigInt64(80, BigInt(data.xDlError), true);
  // 0x58: isize
  if (data?.xDlSym !== undefined) view.setBigInt64(88, BigInt(data.xDlSym), true);
  // 0x60: isize
  if (data?.xDlClose !== undefined) view.setBigInt64(96, BigInt(data.xDlClose), true);
  // 0x68: isize
  if (data?.xRandomness !== undefined) view.setBigInt64(104, BigInt(data.xRandomness), true);
  // 0x70: isize
  if (data?.xSleep !== undefined) view.setBigInt64(112, BigInt(data.xSleep), true);
  // 0x78: isize
  if (data?.xCurrentTime !== undefined) view.setBigInt64(120, BigInt(data.xCurrentTime), true);
  // 0x80: isize
  if (data?.xGetLastError !== undefined) view.setBigInt64(128, BigInt(data.xGetLastError), true);
  // 0x88: isize
  if (data?.xCurrentTimeInt64 !== undefined) view.setBigInt64(136, BigInt(data.xCurrentTimeInt64), true);
  // 0x90: isize
  if (data?.xSetSystemCall !== undefined) view.setBigInt64(144, BigInt(data.xSetSystemCall), true);
  // 0x98: isize
  if (data?.xGetSystemCall !== undefined) view.setBigInt64(152, BigInt(data.xGetSystemCall), true);
  // 0xa0: isize
  if (data?.xNextSystemCall !== undefined) view.setBigInt64(160, BigInt(data.xNextSystemCall), true);
  return buf;
}

/**
 * Windows.Win32.System.SqlLite.sqlite3_mem_methods (size: 64)
 */
export interface sqlite3_mem_methods {
  /** isize */
  xMalloc: Deno.PointerValue;
  /** isize */
  xFree: Deno.PointerValue;
  /** isize */
  xRealloc: Deno.PointerValue;
  /** isize */
  xSize: Deno.PointerValue;
  /** isize */
  xRoundup: Deno.PointerValue;
  /** isize */
  xInit: Deno.PointerValue;
  /** isize */
  xShutdown: Deno.PointerValue;
  /** ptr */
  pAppData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSqlite3_mem_methods = 64;

export function allocSqlite3_mem_methods(data?: Partial<sqlite3_mem_methods>): Uint8Array {
  const buf = new Uint8Array(sizeofSqlite3_mem_methods);
  const view = new DataView(buf.buffer);
  // 0x00: isize
  if (data?.xMalloc !== undefined) view.setBigInt64(0, BigInt(data.xMalloc), true);
  // 0x08: isize
  if (data?.xFree !== undefined) view.setBigInt64(8, BigInt(data.xFree), true);
  // 0x10: isize
  if (data?.xRealloc !== undefined) view.setBigInt64(16, BigInt(data.xRealloc), true);
  // 0x18: isize
  if (data?.xSize !== undefined) view.setBigInt64(24, BigInt(data.xSize), true);
  // 0x20: isize
  if (data?.xRoundup !== undefined) view.setBigInt64(32, BigInt(data.xRoundup), true);
  // 0x28: isize
  if (data?.xInit !== undefined) view.setBigInt64(40, BigInt(data.xInit), true);
  // 0x30: isize
  if (data?.xShutdown !== undefined) view.setBigInt64(48, BigInt(data.xShutdown), true);
  // 0x38: pointer
  if (data?.pAppData !== undefined) view.setBigUint64(56, data.pAppData === null ? 0n : BigInt(util.toPointer(data.pAppData)), true);
  return buf;
}

/**
 * Windows.Win32.System.SqlLite.sqlite3_module (size: 192)
 */
export interface sqlite3_module {
  /** i32 */
  iVersion: number;
  /** isize */
  xCreate: Deno.PointerValue;
  /** isize */
  xConnect: Deno.PointerValue;
  /** isize */
  xBestIndex: Deno.PointerValue;
  /** isize */
  xDisconnect: Deno.PointerValue;
  /** isize */
  xDestroy: Deno.PointerValue;
  /** isize */
  xOpen: Deno.PointerValue;
  /** isize */
  xClose: Deno.PointerValue;
  /** isize */
  xFilter: Deno.PointerValue;
  /** isize */
  xNext: Deno.PointerValue;
  /** isize */
  xEof: Deno.PointerValue;
  /** isize */
  xColumn: Deno.PointerValue;
  /** isize */
  xRowid: Deno.PointerValue;
  /** isize */
  xUpdate: Deno.PointerValue;
  /** isize */
  xBegin: Deno.PointerValue;
  /** isize */
  xSync: Deno.PointerValue;
  /** isize */
  xCommit: Deno.PointerValue;
  /** isize */
  xRollback: Deno.PointerValue;
  /** isize */
  xFindFunction: Deno.PointerValue;
  /** isize */
  xRename: Deno.PointerValue;
  /** isize */
  xSavepoint: Deno.PointerValue;
  /** isize */
  xRelease: Deno.PointerValue;
  /** isize */
  xRollbackTo: Deno.PointerValue;
  /** isize */
  xShadowName: Deno.PointerValue;
}

export const sizeofSqlite3_module = 192;

export function allocSqlite3_module(data?: Partial<sqlite3_module>): Uint8Array {
  const buf = new Uint8Array(sizeofSqlite3_module);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.iVersion !== undefined) view.setInt32(0, Number(data.iVersion), true);
  // 0x04: pad4
  // 0x08: isize
  if (data?.xCreate !== undefined) view.setBigInt64(8, BigInt(data.xCreate), true);
  // 0x10: isize
  if (data?.xConnect !== undefined) view.setBigInt64(16, BigInt(data.xConnect), true);
  // 0x18: isize
  if (data?.xBestIndex !== undefined) view.setBigInt64(24, BigInt(data.xBestIndex), true);
  // 0x20: isize
  if (data?.xDisconnect !== undefined) view.setBigInt64(32, BigInt(data.xDisconnect), true);
  // 0x28: isize
  if (data?.xDestroy !== undefined) view.setBigInt64(40, BigInt(data.xDestroy), true);
  // 0x30: isize
  if (data?.xOpen !== undefined) view.setBigInt64(48, BigInt(data.xOpen), true);
  // 0x38: isize
  if (data?.xClose !== undefined) view.setBigInt64(56, BigInt(data.xClose), true);
  // 0x40: isize
  if (data?.xFilter !== undefined) view.setBigInt64(64, BigInt(data.xFilter), true);
  // 0x48: isize
  if (data?.xNext !== undefined) view.setBigInt64(72, BigInt(data.xNext), true);
  // 0x50: isize
  if (data?.xEof !== undefined) view.setBigInt64(80, BigInt(data.xEof), true);
  // 0x58: isize
  if (data?.xColumn !== undefined) view.setBigInt64(88, BigInt(data.xColumn), true);
  // 0x60: isize
  if (data?.xRowid !== undefined) view.setBigInt64(96, BigInt(data.xRowid), true);
  // 0x68: isize
  if (data?.xUpdate !== undefined) view.setBigInt64(104, BigInt(data.xUpdate), true);
  // 0x70: isize
  if (data?.xBegin !== undefined) view.setBigInt64(112, BigInt(data.xBegin), true);
  // 0x78: isize
  if (data?.xSync !== undefined) view.setBigInt64(120, BigInt(data.xSync), true);
  // 0x80: isize
  if (data?.xCommit !== undefined) view.setBigInt64(128, BigInt(data.xCommit), true);
  // 0x88: isize
  if (data?.xRollback !== undefined) view.setBigInt64(136, BigInt(data.xRollback), true);
  // 0x90: isize
  if (data?.xFindFunction !== undefined) view.setBigInt64(144, BigInt(data.xFindFunction), true);
  // 0x98: isize
  if (data?.xRename !== undefined) view.setBigInt64(152, BigInt(data.xRename), true);
  // 0xa0: isize
  if (data?.xSavepoint !== undefined) view.setBigInt64(160, BigInt(data.xSavepoint), true);
  // 0xa8: isize
  if (data?.xRelease !== undefined) view.setBigInt64(168, BigInt(data.xRelease), true);
  // 0xb0: isize
  if (data?.xRollbackTo !== undefined) view.setBigInt64(176, BigInt(data.xRollbackTo), true);
  // 0xb8: isize
  if (data?.xShadowName !== undefined) view.setBigInt64(184, BigInt(data.xShadowName), true);
  return buf;
}

/**
 * Windows.Win32.System.SqlLite.sqlite3_index_info (size: 96)
 */
export interface sqlite3_index_info {
  /** i32 */
  nConstraint: number;
  /** ptr */
  aConstraint: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  nOrderBy: number;
  /** ptr */
  aOrderBy: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  aConstraintUsage: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  idxNum: number;
  /** Windows.Win32.Foundation.PSTR */
  idxStr: string | null;
  /** i32 */
  needToFreeIdxStr: number;
  /** i32 */
  orderByConsumed: number;
  /** f64 */
  estimatedCost: number;
  /** i64 */
  estimatedRows: Deno.PointerValue;
  /** i32 */
  idxFlags: number;
  /** u64 */
  colUsed: Deno.PointerValue;
}

export const sizeofSqlite3_index_info = 96;

export function allocSqlite3_index_info(data?: Partial<sqlite3_index_info>): Uint8Array {
  const buf = new Uint8Array(sizeofSqlite3_index_info);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.nConstraint !== undefined) view.setInt32(0, Number(data.nConstraint), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.aConstraint !== undefined) view.setBigUint64(8, data.aConstraint === null ? 0n : BigInt(util.toPointer(data.aConstraint)), true);
  // 0x10: i32
  if (data?.nOrderBy !== undefined) view.setInt32(16, Number(data.nOrderBy), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.aOrderBy !== undefined) view.setBigUint64(24, data.aOrderBy === null ? 0n : BigInt(util.toPointer(data.aOrderBy)), true);
  // 0x20: pointer
  if (data?.aConstraintUsage !== undefined) view.setBigUint64(32, data.aConstraintUsage === null ? 0n : BigInt(util.toPointer(data.aConstraintUsage)), true);
  // 0x28: i32
  if (data?.idxNum !== undefined) view.setInt32(40, Number(data.idxNum), true);
  // 0x2c: pad4
  // 0x30: buffer
  if (data?.idxStr !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.idxStr);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: i32
  if (data?.needToFreeIdxStr !== undefined) view.setInt32(56, Number(data.needToFreeIdxStr), true);
  // 0x3c: i32
  if (data?.orderByConsumed !== undefined) view.setInt32(60, Number(data.orderByConsumed), true);
  // 0x40: f64
  if (data?.estimatedCost !== undefined) view.setFloat64(64, Number(data.estimatedCost), true);
  // 0x48: i64
  if (data?.estimatedRows !== undefined) view.setBigInt64(72, BigInt(data.estimatedRows), true);
  // 0x50: i32
  if (data?.idxFlags !== undefined) view.setInt32(80, Number(data.idxFlags), true);
  // 0x54: pad4
  // 0x58: u64
  if (data?.colUsed !== undefined) view.setBigUint64(88, BigInt(data.colUsed), true);
  return buf;
}

/**
 * Windows.Win32.System.SqlLite.sqlite3_vtab (size: 24)
 */
export interface sqlite3_vtab {
  /** ptr */
  pModule: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  nRef: number;
  /** Windows.Win32.Foundation.PSTR */
  zErrMsg: string | null;
}

export const sizeofSqlite3_vtab = 24;

export function allocSqlite3_vtab(data?: Partial<sqlite3_vtab>): Uint8Array {
  const buf = new Uint8Array(sizeofSqlite3_vtab);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pModule !== undefined) view.setBigUint64(0, data.pModule === null ? 0n : BigInt(util.toPointer(data.pModule)), true);
  // 0x08: i32
  if (data?.nRef !== undefined) view.setInt32(8, Number(data.nRef), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.zErrMsg !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.zErrMsg);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

/**
 * Windows.Win32.System.SqlLite.sqlite3_vtab_cursor (size: 8)
 */
export interface sqlite3_vtab_cursor {
  /** ptr */
  pVtab: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSqlite3_vtab_cursor = 8;

export function allocSqlite3_vtab_cursor(data?: Partial<sqlite3_vtab_cursor>): Uint8Array {
  const buf = new Uint8Array(sizeofSqlite3_vtab_cursor);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pVtab !== undefined) view.setBigUint64(0, data.pVtab === null ? 0n : BigInt(util.toPointer(data.pVtab)), true);
  return buf;
}

/**
 * Windows.Win32.System.SqlLite.sqlite3_mutex_methods (size: 72)
 */
export interface sqlite3_mutex_methods {
  /** isize */
  xMutexInit: Deno.PointerValue;
  /** isize */
  xMutexEnd: Deno.PointerValue;
  /** isize */
  xMutexAlloc: Deno.PointerValue;
  /** isize */
  xMutexFree: Deno.PointerValue;
  /** isize */
  xMutexEnter: Deno.PointerValue;
  /** isize */
  xMutexTry: Deno.PointerValue;
  /** isize */
  xMutexLeave: Deno.PointerValue;
  /** isize */
  xMutexHeld: Deno.PointerValue;
  /** isize */
  xMutexNotheld: Deno.PointerValue;
}

export const sizeofSqlite3_mutex_methods = 72;

export function allocSqlite3_mutex_methods(data?: Partial<sqlite3_mutex_methods>): Uint8Array {
  const buf = new Uint8Array(sizeofSqlite3_mutex_methods);
  const view = new DataView(buf.buffer);
  // 0x00: isize
  if (data?.xMutexInit !== undefined) view.setBigInt64(0, BigInt(data.xMutexInit), true);
  // 0x08: isize
  if (data?.xMutexEnd !== undefined) view.setBigInt64(8, BigInt(data.xMutexEnd), true);
  // 0x10: isize
  if (data?.xMutexAlloc !== undefined) view.setBigInt64(16, BigInt(data.xMutexAlloc), true);
  // 0x18: isize
  if (data?.xMutexFree !== undefined) view.setBigInt64(24, BigInt(data.xMutexFree), true);
  // 0x20: isize
  if (data?.xMutexEnter !== undefined) view.setBigInt64(32, BigInt(data.xMutexEnter), true);
  // 0x28: isize
  if (data?.xMutexTry !== undefined) view.setBigInt64(40, BigInt(data.xMutexTry), true);
  // 0x30: isize
  if (data?.xMutexLeave !== undefined) view.setBigInt64(48, BigInt(data.xMutexLeave), true);
  // 0x38: isize
  if (data?.xMutexHeld !== undefined) view.setBigInt64(56, BigInt(data.xMutexHeld), true);
  // 0x40: isize
  if (data?.xMutexNotheld !== undefined) view.setBigInt64(64, BigInt(data.xMutexNotheld), true);
  return buf;
}

/**
 * Windows.Win32.System.SqlLite.sqlite3_pcache_page (size: 16)
 */
export interface sqlite3_pcache_page {
  /** ptr */
  pBuf: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pExtra: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSqlite3_pcache_page = 16;

export function allocSqlite3_pcache_page(data?: Partial<sqlite3_pcache_page>): Uint8Array {
  const buf = new Uint8Array(sizeofSqlite3_pcache_page);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pBuf !== undefined) view.setBigUint64(0, data.pBuf === null ? 0n : BigInt(util.toPointer(data.pBuf)), true);
  // 0x08: pointer
  if (data?.pExtra !== undefined) view.setBigUint64(8, data.pExtra === null ? 0n : BigInt(util.toPointer(data.pExtra)), true);
  return buf;
}

/**
 * Windows.Win32.System.SqlLite.sqlite3_pcache_methods2 (size: 104)
 */
export interface sqlite3_pcache_methods2 {
  /** i32 */
  iVersion: number;
  /** ptr */
  pArg: Deno.PointerValue | Uint8Array | null;
  /** isize */
  xInit: Deno.PointerValue;
  /** isize */
  xShutdown: Deno.PointerValue;
  /** isize */
  xCreate: Deno.PointerValue;
  /** isize */
  xCachesize: Deno.PointerValue;
  /** isize */
  xPagecount: Deno.PointerValue;
  /** isize */
  xFetch: Deno.PointerValue;
  /** isize */
  xUnpin: Deno.PointerValue;
  /** isize */
  xRekey: Deno.PointerValue;
  /** isize */
  xTruncate: Deno.PointerValue;
  /** isize */
  xDestroy: Deno.PointerValue;
  /** isize */
  xShrink: Deno.PointerValue;
}

export const sizeofSqlite3_pcache_methods2 = 104;

export function allocSqlite3_pcache_methods2(data?: Partial<sqlite3_pcache_methods2>): Uint8Array {
  const buf = new Uint8Array(sizeofSqlite3_pcache_methods2);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.iVersion !== undefined) view.setInt32(0, Number(data.iVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pArg !== undefined) view.setBigUint64(8, data.pArg === null ? 0n : BigInt(util.toPointer(data.pArg)), true);
  // 0x10: isize
  if (data?.xInit !== undefined) view.setBigInt64(16, BigInt(data.xInit), true);
  // 0x18: isize
  if (data?.xShutdown !== undefined) view.setBigInt64(24, BigInt(data.xShutdown), true);
  // 0x20: isize
  if (data?.xCreate !== undefined) view.setBigInt64(32, BigInt(data.xCreate), true);
  // 0x28: isize
  if (data?.xCachesize !== undefined) view.setBigInt64(40, BigInt(data.xCachesize), true);
  // 0x30: isize
  if (data?.xPagecount !== undefined) view.setBigInt64(48, BigInt(data.xPagecount), true);
  // 0x38: isize
  if (data?.xFetch !== undefined) view.setBigInt64(56, BigInt(data.xFetch), true);
  // 0x40: isize
  if (data?.xUnpin !== undefined) view.setBigInt64(64, BigInt(data.xUnpin), true);
  // 0x48: isize
  if (data?.xRekey !== undefined) view.setBigInt64(72, BigInt(data.xRekey), true);
  // 0x50: isize
  if (data?.xTruncate !== undefined) view.setBigInt64(80, BigInt(data.xTruncate), true);
  // 0x58: isize
  if (data?.xDestroy !== undefined) view.setBigInt64(88, BigInt(data.xDestroy), true);
  // 0x60: isize
  if (data?.xShrink !== undefined) view.setBigInt64(96, BigInt(data.xShrink), true);
  return buf;
}

/**
 * Windows.Win32.System.SqlLite.sqlite3_pcache_methods (size: 88)
 */
export interface sqlite3_pcache_methods {
  /** ptr */
  pArg: Deno.PointerValue | Uint8Array | null;
  /** isize */
  xInit: Deno.PointerValue;
  /** isize */
  xShutdown: Deno.PointerValue;
  /** isize */
  xCreate: Deno.PointerValue;
  /** isize */
  xCachesize: Deno.PointerValue;
  /** isize */
  xPagecount: Deno.PointerValue;
  /** isize */
  xFetch: Deno.PointerValue;
  /** isize */
  xUnpin: Deno.PointerValue;
  /** isize */
  xRekey: Deno.PointerValue;
  /** isize */
  xTruncate: Deno.PointerValue;
  /** isize */
  xDestroy: Deno.PointerValue;
}

export const sizeofSqlite3_pcache_methods = 88;

export function allocSqlite3_pcache_methods(data?: Partial<sqlite3_pcache_methods>): Uint8Array {
  const buf = new Uint8Array(sizeofSqlite3_pcache_methods);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pArg !== undefined) view.setBigUint64(0, data.pArg === null ? 0n : BigInt(util.toPointer(data.pArg)), true);
  // 0x08: isize
  if (data?.xInit !== undefined) view.setBigInt64(8, BigInt(data.xInit), true);
  // 0x10: isize
  if (data?.xShutdown !== undefined) view.setBigInt64(16, BigInt(data.xShutdown), true);
  // 0x18: isize
  if (data?.xCreate !== undefined) view.setBigInt64(24, BigInt(data.xCreate), true);
  // 0x20: isize
  if (data?.xCachesize !== undefined) view.setBigInt64(32, BigInt(data.xCachesize), true);
  // 0x28: isize
  if (data?.xPagecount !== undefined) view.setBigInt64(40, BigInt(data.xPagecount), true);
  // 0x30: isize
  if (data?.xFetch !== undefined) view.setBigInt64(48, BigInt(data.xFetch), true);
  // 0x38: isize
  if (data?.xUnpin !== undefined) view.setBigInt64(56, BigInt(data.xUnpin), true);
  // 0x40: isize
  if (data?.xRekey !== undefined) view.setBigInt64(64, BigInt(data.xRekey), true);
  // 0x48: isize
  if (data?.xTruncate !== undefined) view.setBigInt64(72, BigInt(data.xTruncate), true);
  // 0x50: isize
  if (data?.xDestroy !== undefined) view.setBigInt64(80, BigInt(data.xDestroy), true);
  return buf;
}

/**
 * Windows.Win32.System.SqlLite.sqlite3_snapshot (size: 8)
 */
export interface sqlite3_snapshot {
  /** array */
  hidden: Deno.PointerValue | null;
}

export const sizeofSqlite3_snapshot = 8;

export function allocSqlite3_snapshot(data?: Partial<sqlite3_snapshot>): Uint8Array {
  const buf = new Uint8Array(sizeofSqlite3_snapshot);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hidden !== undefined) view.setBigUint64(0, data.hidden === null ? 0n : BigInt(util.toPointer(data.hidden)), true);
  return buf;
}

/**
 * Windows.Win32.System.SqlLite.sqlite3_rtree_geometry (size: 40)
 */
export interface sqlite3_rtree_geometry {
  /** ptr */
  pContext: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  nParam: number;
  /** ptr */
  aParam: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pUser: Deno.PointerValue | Uint8Array | null;
  /** isize */
  xDelUser: Deno.PointerValue;
}

export const sizeofSqlite3_rtree_geometry = 40;

export function allocSqlite3_rtree_geometry(data?: Partial<sqlite3_rtree_geometry>): Uint8Array {
  const buf = new Uint8Array(sizeofSqlite3_rtree_geometry);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pContext !== undefined) view.setBigUint64(0, data.pContext === null ? 0n : BigInt(util.toPointer(data.pContext)), true);
  // 0x08: i32
  if (data?.nParam !== undefined) view.setInt32(8, Number(data.nParam), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.aParam !== undefined) view.setBigUint64(16, data.aParam === null ? 0n : BigInt(util.toPointer(data.aParam)), true);
  // 0x18: pointer
  if (data?.pUser !== undefined) view.setBigUint64(24, data.pUser === null ? 0n : BigInt(util.toPointer(data.pUser)), true);
  // 0x20: isize
  if (data?.xDelUser !== undefined) view.setBigInt64(32, BigInt(data.xDelUser), true);
  return buf;
}

/**
 * Windows.Win32.System.SqlLite.sqlite3_rtree_query_info (size: 112)
 */
export interface sqlite3_rtree_query_info {
  /** ptr */
  pContext: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  nParam: number;
  /** ptr */
  aParam: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pUser: Deno.PointerValue | Uint8Array | null;
  /** isize */
  xDelUser: Deno.PointerValue;
  /** ptr */
  aCoord: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  anQueue: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  nCoord: number;
  /** i32 */
  iLevel: number;
  /** i32 */
  mxLevel: number;
  /** i64 */
  iRowid: Deno.PointerValue;
  /** f64 */
  rParentScore: number;
  /** i32 */
  eParentWithin: number;
  /** i32 */
  eWithin: number;
  /** f64 */
  rScore: number;
  /** ptr */
  apSqlParam: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSqlite3_rtree_query_info = 112;

export function allocSqlite3_rtree_query_info(data?: Partial<sqlite3_rtree_query_info>): Uint8Array {
  const buf = new Uint8Array(sizeofSqlite3_rtree_query_info);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pContext !== undefined) view.setBigUint64(0, data.pContext === null ? 0n : BigInt(util.toPointer(data.pContext)), true);
  // 0x08: i32
  if (data?.nParam !== undefined) view.setInt32(8, Number(data.nParam), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.aParam !== undefined) view.setBigUint64(16, data.aParam === null ? 0n : BigInt(util.toPointer(data.aParam)), true);
  // 0x18: pointer
  if (data?.pUser !== undefined) view.setBigUint64(24, data.pUser === null ? 0n : BigInt(util.toPointer(data.pUser)), true);
  // 0x20: isize
  if (data?.xDelUser !== undefined) view.setBigInt64(32, BigInt(data.xDelUser), true);
  // 0x28: pointer
  if (data?.aCoord !== undefined) view.setBigUint64(40, data.aCoord === null ? 0n : BigInt(util.toPointer(data.aCoord)), true);
  // 0x30: pointer
  if (data?.anQueue !== undefined) view.setBigUint64(48, data.anQueue === null ? 0n : BigInt(util.toPointer(data.anQueue)), true);
  // 0x38: i32
  if (data?.nCoord !== undefined) view.setInt32(56, Number(data.nCoord), true);
  // 0x3c: i32
  if (data?.iLevel !== undefined) view.setInt32(60, Number(data.iLevel), true);
  // 0x40: i32
  if (data?.mxLevel !== undefined) view.setInt32(64, Number(data.mxLevel), true);
  // 0x44: pad4
  // 0x48: i64
  if (data?.iRowid !== undefined) view.setBigInt64(72, BigInt(data.iRowid), true);
  // 0x50: f64
  if (data?.rParentScore !== undefined) view.setFloat64(80, Number(data.rParentScore), true);
  // 0x58: i32
  if (data?.eParentWithin !== undefined) view.setInt32(88, Number(data.eParentWithin), true);
  // 0x5c: i32
  if (data?.eWithin !== undefined) view.setInt32(92, Number(data.eWithin), true);
  // 0x60: f64
  if (data?.rScore !== undefined) view.setFloat64(96, Number(data.rScore), true);
  // 0x68: pointer
  if (data?.apSqlParam !== undefined) view.setBigUint64(104, data.apSqlParam === null ? 0n : BigInt(util.toPointer(data.apSqlParam)), true);
  return buf;
}

/**
 * Windows.Win32.System.SqlLite.Fts5PhraseIter (size: 16)
 */
export interface Fts5PhraseIter {
  /** ptr */
  a: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  b: Deno.PointerValue | Uint8Array | null;
}

export const sizeofFts5PhraseIter = 16;

export function allocFts5PhraseIter(data?: Partial<Fts5PhraseIter>): Uint8Array {
  const buf = new Uint8Array(sizeofFts5PhraseIter);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.a !== undefined) view.setBigUint64(0, data.a === null ? 0n : BigInt(util.toPointer(data.a)), true);
  // 0x08: pointer
  if (data?.b !== undefined) view.setBigUint64(8, data.b === null ? 0n : BigInt(util.toPointer(data.b)), true);
  return buf;
}

/**
 * Windows.Win32.System.SqlLite.Fts5ExtensionApi (size: 160)
 */
export interface Fts5ExtensionApi {
  /** i32 */
  iVersion: number;
  /** isize */
  xUserData: Deno.PointerValue;
  /** isize */
  xColumnCount: Deno.PointerValue;
  /** isize */
  xRowCount: Deno.PointerValue;
  /** isize */
  xColumnTotalSize: Deno.PointerValue;
  /** isize */
  xTokenize: Deno.PointerValue;
  /** isize */
  xPhraseCount: Deno.PointerValue;
  /** isize */
  xPhraseSize: Deno.PointerValue;
  /** isize */
  xInstCount: Deno.PointerValue;
  /** isize */
  xInst: Deno.PointerValue;
  /** isize */
  xRowid: Deno.PointerValue;
  /** isize */
  xColumnText: Deno.PointerValue;
  /** isize */
  xColumnSize: Deno.PointerValue;
  /** isize */
  xQueryPhrase: Deno.PointerValue;
  /** isize */
  xSetAuxdata: Deno.PointerValue;
  /** isize */
  xGetAuxdata: Deno.PointerValue;
  /** isize */
  xPhraseFirst: Deno.PointerValue;
  /** isize */
  xPhraseNext: Deno.PointerValue;
  /** isize */
  xPhraseFirstColumn: Deno.PointerValue;
  /** isize */
  xPhraseNextColumn: Deno.PointerValue;
}

export const sizeofFts5ExtensionApi = 160;

export function allocFts5ExtensionApi(data?: Partial<Fts5ExtensionApi>): Uint8Array {
  const buf = new Uint8Array(sizeofFts5ExtensionApi);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.iVersion !== undefined) view.setInt32(0, Number(data.iVersion), true);
  // 0x04: pad4
  // 0x08: isize
  if (data?.xUserData !== undefined) view.setBigInt64(8, BigInt(data.xUserData), true);
  // 0x10: isize
  if (data?.xColumnCount !== undefined) view.setBigInt64(16, BigInt(data.xColumnCount), true);
  // 0x18: isize
  if (data?.xRowCount !== undefined) view.setBigInt64(24, BigInt(data.xRowCount), true);
  // 0x20: isize
  if (data?.xColumnTotalSize !== undefined) view.setBigInt64(32, BigInt(data.xColumnTotalSize), true);
  // 0x28: isize
  if (data?.xTokenize !== undefined) view.setBigInt64(40, BigInt(data.xTokenize), true);
  // 0x30: isize
  if (data?.xPhraseCount !== undefined) view.setBigInt64(48, BigInt(data.xPhraseCount), true);
  // 0x38: isize
  if (data?.xPhraseSize !== undefined) view.setBigInt64(56, BigInt(data.xPhraseSize), true);
  // 0x40: isize
  if (data?.xInstCount !== undefined) view.setBigInt64(64, BigInt(data.xInstCount), true);
  // 0x48: isize
  if (data?.xInst !== undefined) view.setBigInt64(72, BigInt(data.xInst), true);
  // 0x50: isize
  if (data?.xRowid !== undefined) view.setBigInt64(80, BigInt(data.xRowid), true);
  // 0x58: isize
  if (data?.xColumnText !== undefined) view.setBigInt64(88, BigInt(data.xColumnText), true);
  // 0x60: isize
  if (data?.xColumnSize !== undefined) view.setBigInt64(96, BigInt(data.xColumnSize), true);
  // 0x68: isize
  if (data?.xQueryPhrase !== undefined) view.setBigInt64(104, BigInt(data.xQueryPhrase), true);
  // 0x70: isize
  if (data?.xSetAuxdata !== undefined) view.setBigInt64(112, BigInt(data.xSetAuxdata), true);
  // 0x78: isize
  if (data?.xGetAuxdata !== undefined) view.setBigInt64(120, BigInt(data.xGetAuxdata), true);
  // 0x80: isize
  if (data?.xPhraseFirst !== undefined) view.setBigInt64(128, BigInt(data.xPhraseFirst), true);
  // 0x88: isize
  if (data?.xPhraseNext !== undefined) view.setBigInt64(136, BigInt(data.xPhraseNext), true);
  // 0x90: isize
  if (data?.xPhraseFirstColumn !== undefined) view.setBigInt64(144, BigInt(data.xPhraseFirstColumn), true);
  // 0x98: isize
  if (data?.xPhraseNextColumn !== undefined) view.setBigInt64(152, BigInt(data.xPhraseNextColumn), true);
  return buf;
}

/**
 * Windows.Win32.System.SqlLite.fts5_tokenizer (size: 24)
 */
export interface fts5_tokenizer {
  /** isize */
  xCreate: Deno.PointerValue;
  /** isize */
  xDelete: Deno.PointerValue;
  /** isize */
  xTokenize: Deno.PointerValue;
}

export const sizeofFts5_tokenizer = 24;

export function allocFts5_tokenizer(data?: Partial<fts5_tokenizer>): Uint8Array {
  const buf = new Uint8Array(sizeofFts5_tokenizer);
  const view = new DataView(buf.buffer);
  // 0x00: isize
  if (data?.xCreate !== undefined) view.setBigInt64(0, BigInt(data.xCreate), true);
  // 0x08: isize
  if (data?.xDelete !== undefined) view.setBigInt64(8, BigInt(data.xDelete), true);
  // 0x10: isize
  if (data?.xTokenize !== undefined) view.setBigInt64(16, BigInt(data.xTokenize), true);
  return buf;
}

/**
 * Windows.Win32.System.SqlLite.fts5_api (size: 32)
 */
export interface fts5_api {
  /** i32 */
  iVersion: number;
  /** isize */
  xCreateTokenizer: Deno.PointerValue;
  /** isize */
  xFindTokenizer: Deno.PointerValue;
  /** isize */
  xCreateFunction: Deno.PointerValue;
}

export const sizeofFts5_api = 32;

export function allocFts5_api(data?: Partial<fts5_api>): Uint8Array {
  const buf = new Uint8Array(sizeofFts5_api);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.iVersion !== undefined) view.setInt32(0, Number(data.iVersion), true);
  // 0x04: pad4
  // 0x08: isize
  if (data?.xCreateTokenizer !== undefined) view.setBigInt64(8, BigInt(data.xCreateTokenizer), true);
  // 0x10: isize
  if (data?.xFindTokenizer !== undefined) view.setBigInt64(16, BigInt(data.xFindTokenizer), true);
  // 0x18: isize
  if (data?.xCreateFunction !== undefined) view.setBigInt64(24, BigInt(data.xCreateFunction), true);
  return buf;
}

/**
 * Windows.Win32.System.SqlLite.sqlite3_api_routines (size: 2024)
 */
export interface sqlite3_api_routines {
  /** isize */
  aggregate_context: Deno.PointerValue;
  /** isize */
  aggregate_count: Deno.PointerValue;
  /** isize */
  bind_blob: Deno.PointerValue;
  /** isize */
  bind_double: Deno.PointerValue;
  /** isize */
  bind_int: Deno.PointerValue;
  /** isize */
  bind_int64: Deno.PointerValue;
  /** isize */
  bind_null: Deno.PointerValue;
  /** isize */
  bind_parameter_count: Deno.PointerValue;
  /** isize */
  bind_parameter_index: Deno.PointerValue;
  /** isize */
  bind_parameter_name: Deno.PointerValue;
  /** isize */
  bind_text: Deno.PointerValue;
  /** isize */
  bind_text16: Deno.PointerValue;
  /** isize */
  bind_value: Deno.PointerValue;
  /** isize */
  busy_handler: Deno.PointerValue;
  /** isize */
  busy_timeout: Deno.PointerValue;
  /** isize */
  changes: Deno.PointerValue;
  /** isize */
  close: Deno.PointerValue;
  /** isize */
  collation_needed: Deno.PointerValue;
  /** isize */
  collation_needed16: Deno.PointerValue;
  /** isize */
  column_blob: Deno.PointerValue;
  /** isize */
  column_bytes: Deno.PointerValue;
  /** isize */
  column_bytes16: Deno.PointerValue;
  /** isize */
  column_count: Deno.PointerValue;
  /** isize */
  column_database_name: Deno.PointerValue;
  /** isize */
  column_database_name16: Deno.PointerValue;
  /** isize */
  column_decltype: Deno.PointerValue;
  /** isize */
  column_decltype16: Deno.PointerValue;
  /** isize */
  column_double: Deno.PointerValue;
  /** isize */
  column_int: Deno.PointerValue;
  /** isize */
  column_int64: Deno.PointerValue;
  /** isize */
  column_name: Deno.PointerValue;
  /** isize */
  column_name16: Deno.PointerValue;
  /** isize */
  column_origin_name: Deno.PointerValue;
  /** isize */
  column_origin_name16: Deno.PointerValue;
  /** isize */
  column_table_name: Deno.PointerValue;
  /** isize */
  column_table_name16: Deno.PointerValue;
  /** isize */
  column_text: Deno.PointerValue;
  /** isize */
  column_text16: Deno.PointerValue;
  /** isize */
  column_type: Deno.PointerValue;
  /** isize */
  column_value: Deno.PointerValue;
  /** isize */
  commit_hook: Deno.PointerValue;
  /** isize */
  complete: Deno.PointerValue;
  /** isize */
  complete16: Deno.PointerValue;
  /** isize */
  create_collation: Deno.PointerValue;
  /** isize */
  create_collation16: Deno.PointerValue;
  /** isize */
  create_function: Deno.PointerValue;
  /** isize */
  create_function16: Deno.PointerValue;
  /** isize */
  create_module: Deno.PointerValue;
  /** isize */
  data_count: Deno.PointerValue;
  /** isize */
  db_handle: Deno.PointerValue;
  /** isize */
  declare_vtab: Deno.PointerValue;
  /** isize */
  enable_shared_cache: Deno.PointerValue;
  /** isize */
  errcode: Deno.PointerValue;
  /** isize */
  errmsg: Deno.PointerValue;
  /** isize */
  errmsg16: Deno.PointerValue;
  /** isize */
  exec: Deno.PointerValue;
  /** isize */
  expired: Deno.PointerValue;
  /** isize */
  finalize: Deno.PointerValue;
  /** isize */
  free: Deno.PointerValue;
  /** isize */
  free_table: Deno.PointerValue;
  /** isize */
  get_autocommit: Deno.PointerValue;
  /** isize */
  get_auxdata: Deno.PointerValue;
  /** isize */
  get_table: Deno.PointerValue;
  /** isize */
  global_recover: Deno.PointerValue;
  /** isize */
  interruptx: Deno.PointerValue;
  /** isize */
  last_insert_rowid: Deno.PointerValue;
  /** isize */
  libversion: Deno.PointerValue;
  /** isize */
  libversion_number: Deno.PointerValue;
  /** isize */
  malloc: Deno.PointerValue;
  /** isize */
  mprintf: Deno.PointerValue;
  /** isize */
  open: Deno.PointerValue;
  /** isize */
  open16: Deno.PointerValue;
  /** isize */
  prepare: Deno.PointerValue;
  /** isize */
  prepare16: Deno.PointerValue;
  /** isize */
  profile: Deno.PointerValue;
  /** isize */
  progress_handler: Deno.PointerValue;
  /** isize */
  realloc: Deno.PointerValue;
  /** isize */
  reset: Deno.PointerValue;
  /** isize */
  result_blob: Deno.PointerValue;
  /** isize */
  result_double: Deno.PointerValue;
  /** isize */
  result_error: Deno.PointerValue;
  /** isize */
  result_error16: Deno.PointerValue;
  /** isize */
  result_int: Deno.PointerValue;
  /** isize */
  result_int64: Deno.PointerValue;
  /** isize */
  result_null: Deno.PointerValue;
  /** isize */
  result_text: Deno.PointerValue;
  /** isize */
  result_text16: Deno.PointerValue;
  /** isize */
  result_text16be: Deno.PointerValue;
  /** isize */
  result_text16le: Deno.PointerValue;
  /** isize */
  result_value: Deno.PointerValue;
  /** isize */
  rollback_hook: Deno.PointerValue;
  /** isize */
  set_authorizer: Deno.PointerValue;
  /** isize */
  set_auxdata: Deno.PointerValue;
  /** isize */
  xsnprintf: Deno.PointerValue;
  /** isize */
  step: Deno.PointerValue;
  /** isize */
  table_column_metadata: Deno.PointerValue;
  /** isize */
  thread_cleanup: Deno.PointerValue;
  /** isize */
  total_changes: Deno.PointerValue;
  /** isize */
  trace: Deno.PointerValue;
  /** isize */
  transfer_bindings: Deno.PointerValue;
  /** isize */
  update_hook: Deno.PointerValue;
  /** isize */
  user_data: Deno.PointerValue;
  /** isize */
  value_blob: Deno.PointerValue;
  /** isize */
  value_bytes: Deno.PointerValue;
  /** isize */
  value_bytes16: Deno.PointerValue;
  /** isize */
  value_double: Deno.PointerValue;
  /** isize */
  value_int: Deno.PointerValue;
  /** isize */
  value_int64: Deno.PointerValue;
  /** isize */
  value_numeric_type: Deno.PointerValue;
  /** isize */
  value_text: Deno.PointerValue;
  /** isize */
  value_text16: Deno.PointerValue;
  /** isize */
  value_text16be: Deno.PointerValue;
  /** isize */
  value_text16le: Deno.PointerValue;
  /** isize */
  value_type: Deno.PointerValue;
  /** isize */
  vmprintf: Deno.PointerValue;
  /** isize */
  overload_function: Deno.PointerValue;
  /** isize */
  prepare_v2: Deno.PointerValue;
  /** isize */
  prepare16_v2: Deno.PointerValue;
  /** isize */
  clear_bindings: Deno.PointerValue;
  /** isize */
  create_module_v2: Deno.PointerValue;
  /** isize */
  bind_zeroblob: Deno.PointerValue;
  /** isize */
  blob_bytes: Deno.PointerValue;
  /** isize */
  blob_close: Deno.PointerValue;
  /** isize */
  blob_open: Deno.PointerValue;
  /** isize */
  blob_read: Deno.PointerValue;
  /** isize */
  blob_write: Deno.PointerValue;
  /** isize */
  create_collation_v2: Deno.PointerValue;
  /** isize */
  file_control: Deno.PointerValue;
  /** isize */
  memory_highwater: Deno.PointerValue;
  /** isize */
  memory_used: Deno.PointerValue;
  /** isize */
  mutex_alloc: Deno.PointerValue;
  /** isize */
  mutex_enter: Deno.PointerValue;
  /** isize */
  mutex_free: Deno.PointerValue;
  /** isize */
  mutex_leave: Deno.PointerValue;
  /** isize */
  mutex_try: Deno.PointerValue;
  /** isize */
  open_v2: Deno.PointerValue;
  /** isize */
  release_memory: Deno.PointerValue;
  /** isize */
  result_error_nomem: Deno.PointerValue;
  /** isize */
  result_error_toobig: Deno.PointerValue;
  /** isize */
  sleep: Deno.PointerValue;
  /** isize */
  soft_heap_limit: Deno.PointerValue;
  /** isize */
  vfs_find: Deno.PointerValue;
  /** isize */
  vfs_register: Deno.PointerValue;
  /** isize */
  vfs_unregister: Deno.PointerValue;
  /** isize */
  xthreadsafe: Deno.PointerValue;
  /** isize */
  result_zeroblob: Deno.PointerValue;
  /** isize */
  result_error_code: Deno.PointerValue;
  /** isize */
  test_control: Deno.PointerValue;
  /** isize */
  randomness: Deno.PointerValue;
  /** isize */
  context_db_handle: Deno.PointerValue;
  /** isize */
  extended_result_codes: Deno.PointerValue;
  /** isize */
  limit: Deno.PointerValue;
  /** isize */
  next_stmt: Deno.PointerValue;
  /** isize */
  sql: Deno.PointerValue;
  /** isize */
  status: Deno.PointerValue;
  /** isize */
  backup_finish: Deno.PointerValue;
  /** isize */
  backup_init: Deno.PointerValue;
  /** isize */
  backup_pagecount: Deno.PointerValue;
  /** isize */
  backup_remaining: Deno.PointerValue;
  /** isize */
  backup_step: Deno.PointerValue;
  /** isize */
  compileoption_get: Deno.PointerValue;
  /** isize */
  compileoption_used: Deno.PointerValue;
  /** isize */
  create_function_v2: Deno.PointerValue;
  /** isize */
  db_config: Deno.PointerValue;
  /** isize */
  db_mutex: Deno.PointerValue;
  /** isize */
  db_status: Deno.PointerValue;
  /** isize */
  extended_errcode: Deno.PointerValue;
  /** isize */
  log: Deno.PointerValue;
  /** isize */
  soft_heap_limit64: Deno.PointerValue;
  /** isize */
  sourceid: Deno.PointerValue;
  /** isize */
  stmt_status: Deno.PointerValue;
  /** isize */
  strnicmp: Deno.PointerValue;
  /** isize */
  unlock_notify: Deno.PointerValue;
  /** isize */
  wal_autocheckpoint: Deno.PointerValue;
  /** isize */
  wal_checkpoint: Deno.PointerValue;
  /** isize */
  wal_hook: Deno.PointerValue;
  /** isize */
  blob_reopen: Deno.PointerValue;
  /** isize */
  vtab_config: Deno.PointerValue;
  /** isize */
  vtab_on_conflict: Deno.PointerValue;
  /** isize */
  close_v2: Deno.PointerValue;
  /** isize */
  db_filename: Deno.PointerValue;
  /** isize */
  db_readonly: Deno.PointerValue;
  /** isize */
  db_release_memory: Deno.PointerValue;
  /** isize */
  errstr: Deno.PointerValue;
  /** isize */
  stmt_busy: Deno.PointerValue;
  /** isize */
  stmt_readonly: Deno.PointerValue;
  /** isize */
  stricmp: Deno.PointerValue;
  /** isize */
  uri_boolean: Deno.PointerValue;
  /** isize */
  uri_int64: Deno.PointerValue;
  /** isize */
  uri_parameter: Deno.PointerValue;
  /** isize */
  xvsnprintf: Deno.PointerValue;
  /** isize */
  wal_checkpoint_v2: Deno.PointerValue;
  /** isize */
  auto_extension: Deno.PointerValue;
  /** isize */
  bind_blob64: Deno.PointerValue;
  /** isize */
  bind_text64: Deno.PointerValue;
  /** isize */
  cancel_auto_extension: Deno.PointerValue;
  /** isize */
  load_extension: Deno.PointerValue;
  /** isize */
  malloc64: Deno.PointerValue;
  /** isize */
  msize: Deno.PointerValue;
  /** isize */
  realloc64: Deno.PointerValue;
  /** isize */
  reset_auto_extension: Deno.PointerValue;
  /** isize */
  result_blob64: Deno.PointerValue;
  /** isize */
  result_text64: Deno.PointerValue;
  /** isize */
  strglob: Deno.PointerValue;
  /** isize */
  value_dup: Deno.PointerValue;
  /** isize */
  value_free: Deno.PointerValue;
  /** isize */
  result_zeroblob64: Deno.PointerValue;
  /** isize */
  bind_zeroblob64: Deno.PointerValue;
  /** isize */
  value_subtype: Deno.PointerValue;
  /** isize */
  result_subtype: Deno.PointerValue;
  /** isize */
  status64: Deno.PointerValue;
  /** isize */
  strlike: Deno.PointerValue;
  /** isize */
  db_cacheflush: Deno.PointerValue;
  /** isize */
  system_errno: Deno.PointerValue;
  /** isize */
  trace_v2: Deno.PointerValue;
  /** isize */
  expanded_sql: Deno.PointerValue;
  /** isize */
  set_last_insert_rowid: Deno.PointerValue;
  /** isize */
  prepare_v3: Deno.PointerValue;
  /** isize */
  prepare16_v3: Deno.PointerValue;
  /** isize */
  bind_pointer: Deno.PointerValue;
  /** isize */
  result_pointer: Deno.PointerValue;
  /** isize */
  value_pointer: Deno.PointerValue;
  /** isize */
  vtab_nochange: Deno.PointerValue;
  /** isize */
  value_nochange: Deno.PointerValue;
  /** isize */
  vtab_collation: Deno.PointerValue;
  /** isize */
  keyword_count: Deno.PointerValue;
  /** isize */
  keyword_name: Deno.PointerValue;
  /** isize */
  keyword_check: Deno.PointerValue;
  /** isize */
  str_new: Deno.PointerValue;
  /** isize */
  str_finish: Deno.PointerValue;
  /** isize */
  str_appendf: Deno.PointerValue;
  /** isize */
  str_vappendf: Deno.PointerValue;
  /** isize */
  str_append: Deno.PointerValue;
  /** isize */
  str_appendall: Deno.PointerValue;
  /** isize */
  str_appendchar: Deno.PointerValue;
  /** isize */
  str_reset: Deno.PointerValue;
  /** isize */
  str_errcode: Deno.PointerValue;
  /** isize */
  str_length: Deno.PointerValue;
  /** isize */
  str_value: Deno.PointerValue;
  /** isize */
  create_window_function: Deno.PointerValue;
  /** isize */
  normalized_sql: Deno.PointerValue;
  /** isize */
  stmt_isexplain: Deno.PointerValue;
  /** isize */
  value_frombind: Deno.PointerValue;
  /** isize */
  drop_modules: Deno.PointerValue;
  /** isize */
  hard_heap_limit64: Deno.PointerValue;
  /** isize */
  uri_key: Deno.PointerValue;
  /** isize */
  filename_database: Deno.PointerValue;
  /** isize */
  filename_journal: Deno.PointerValue;
  /** isize */
  filename_wal: Deno.PointerValue;
  /** isize */
  create_filename: Deno.PointerValue;
  /** isize */
  free_filename: Deno.PointerValue;
  /** isize */
  database_file_object: Deno.PointerValue;
  /** isize */
  txn_state: Deno.PointerValue;
}

export const sizeofSqlite3_api_routines = 2024;

export function allocSqlite3_api_routines(data?: Partial<sqlite3_api_routines>): Uint8Array {
  const buf = new Uint8Array(sizeofSqlite3_api_routines);
  const view = new DataView(buf.buffer);
  // 0x00: isize
  if (data?.aggregate_context !== undefined) view.setBigInt64(0, BigInt(data.aggregate_context), true);
  // 0x08: isize
  if (data?.aggregate_count !== undefined) view.setBigInt64(8, BigInt(data.aggregate_count), true);
  // 0x10: isize
  if (data?.bind_blob !== undefined) view.setBigInt64(16, BigInt(data.bind_blob), true);
  // 0x18: isize
  if (data?.bind_double !== undefined) view.setBigInt64(24, BigInt(data.bind_double), true);
  // 0x20: isize
  if (data?.bind_int !== undefined) view.setBigInt64(32, BigInt(data.bind_int), true);
  // 0x28: isize
  if (data?.bind_int64 !== undefined) view.setBigInt64(40, BigInt(data.bind_int64), true);
  // 0x30: isize
  if (data?.bind_null !== undefined) view.setBigInt64(48, BigInt(data.bind_null), true);
  // 0x38: isize
  if (data?.bind_parameter_count !== undefined) view.setBigInt64(56, BigInt(data.bind_parameter_count), true);
  // 0x40: isize
  if (data?.bind_parameter_index !== undefined) view.setBigInt64(64, BigInt(data.bind_parameter_index), true);
  // 0x48: isize
  if (data?.bind_parameter_name !== undefined) view.setBigInt64(72, BigInt(data.bind_parameter_name), true);
  // 0x50: isize
  if (data?.bind_text !== undefined) view.setBigInt64(80, BigInt(data.bind_text), true);
  // 0x58: isize
  if (data?.bind_text16 !== undefined) view.setBigInt64(88, BigInt(data.bind_text16), true);
  // 0x60: isize
  if (data?.bind_value !== undefined) view.setBigInt64(96, BigInt(data.bind_value), true);
  // 0x68: isize
  if (data?.busy_handler !== undefined) view.setBigInt64(104, BigInt(data.busy_handler), true);
  // 0x70: isize
  if (data?.busy_timeout !== undefined) view.setBigInt64(112, BigInt(data.busy_timeout), true);
  // 0x78: isize
  if (data?.changes !== undefined) view.setBigInt64(120, BigInt(data.changes), true);
  // 0x80: isize
  if (data?.close !== undefined) view.setBigInt64(128, BigInt(data.close), true);
  // 0x88: isize
  if (data?.collation_needed !== undefined) view.setBigInt64(136, BigInt(data.collation_needed), true);
  // 0x90: isize
  if (data?.collation_needed16 !== undefined) view.setBigInt64(144, BigInt(data.collation_needed16), true);
  // 0x98: isize
  if (data?.column_blob !== undefined) view.setBigInt64(152, BigInt(data.column_blob), true);
  // 0xa0: isize
  if (data?.column_bytes !== undefined) view.setBigInt64(160, BigInt(data.column_bytes), true);
  // 0xa8: isize
  if (data?.column_bytes16 !== undefined) view.setBigInt64(168, BigInt(data.column_bytes16), true);
  // 0xb0: isize
  if (data?.column_count !== undefined) view.setBigInt64(176, BigInt(data.column_count), true);
  // 0xb8: isize
  if (data?.column_database_name !== undefined) view.setBigInt64(184, BigInt(data.column_database_name), true);
  // 0xc0: isize
  if (data?.column_database_name16 !== undefined) view.setBigInt64(192, BigInt(data.column_database_name16), true);
  // 0xc8: isize
  if (data?.column_decltype !== undefined) view.setBigInt64(200, BigInt(data.column_decltype), true);
  // 0xd0: isize
  if (data?.column_decltype16 !== undefined) view.setBigInt64(208, BigInt(data.column_decltype16), true);
  // 0xd8: isize
  if (data?.column_double !== undefined) view.setBigInt64(216, BigInt(data.column_double), true);
  // 0xe0: isize
  if (data?.column_int !== undefined) view.setBigInt64(224, BigInt(data.column_int), true);
  // 0xe8: isize
  if (data?.column_int64 !== undefined) view.setBigInt64(232, BigInt(data.column_int64), true);
  // 0xf0: isize
  if (data?.column_name !== undefined) view.setBigInt64(240, BigInt(data.column_name), true);
  // 0xf8: isize
  if (data?.column_name16 !== undefined) view.setBigInt64(248, BigInt(data.column_name16), true);
  // 0x100: isize
  if (data?.column_origin_name !== undefined) view.setBigInt64(256, BigInt(data.column_origin_name), true);
  // 0x108: isize
  if (data?.column_origin_name16 !== undefined) view.setBigInt64(264, BigInt(data.column_origin_name16), true);
  // 0x110: isize
  if (data?.column_table_name !== undefined) view.setBigInt64(272, BigInt(data.column_table_name), true);
  // 0x118: isize
  if (data?.column_table_name16 !== undefined) view.setBigInt64(280, BigInt(data.column_table_name16), true);
  // 0x120: isize
  if (data?.column_text !== undefined) view.setBigInt64(288, BigInt(data.column_text), true);
  // 0x128: isize
  if (data?.column_text16 !== undefined) view.setBigInt64(296, BigInt(data.column_text16), true);
  // 0x130: isize
  if (data?.column_type !== undefined) view.setBigInt64(304, BigInt(data.column_type), true);
  // 0x138: isize
  if (data?.column_value !== undefined) view.setBigInt64(312, BigInt(data.column_value), true);
  // 0x140: isize
  if (data?.commit_hook !== undefined) view.setBigInt64(320, BigInt(data.commit_hook), true);
  // 0x148: isize
  if (data?.complete !== undefined) view.setBigInt64(328, BigInt(data.complete), true);
  // 0x150: isize
  if (data?.complete16 !== undefined) view.setBigInt64(336, BigInt(data.complete16), true);
  // 0x158: isize
  if (data?.create_collation !== undefined) view.setBigInt64(344, BigInt(data.create_collation), true);
  // 0x160: isize
  if (data?.create_collation16 !== undefined) view.setBigInt64(352, BigInt(data.create_collation16), true);
  // 0x168: isize
  if (data?.create_function !== undefined) view.setBigInt64(360, BigInt(data.create_function), true);
  // 0x170: isize
  if (data?.create_function16 !== undefined) view.setBigInt64(368, BigInt(data.create_function16), true);
  // 0x178: isize
  if (data?.create_module !== undefined) view.setBigInt64(376, BigInt(data.create_module), true);
  // 0x180: isize
  if (data?.data_count !== undefined) view.setBigInt64(384, BigInt(data.data_count), true);
  // 0x188: isize
  if (data?.db_handle !== undefined) view.setBigInt64(392, BigInt(data.db_handle), true);
  // 0x190: isize
  if (data?.declare_vtab !== undefined) view.setBigInt64(400, BigInt(data.declare_vtab), true);
  // 0x198: isize
  if (data?.enable_shared_cache !== undefined) view.setBigInt64(408, BigInt(data.enable_shared_cache), true);
  // 0x1a0: isize
  if (data?.errcode !== undefined) view.setBigInt64(416, BigInt(data.errcode), true);
  // 0x1a8: isize
  if (data?.errmsg !== undefined) view.setBigInt64(424, BigInt(data.errmsg), true);
  // 0x1b0: isize
  if (data?.errmsg16 !== undefined) view.setBigInt64(432, BigInt(data.errmsg16), true);
  // 0x1b8: isize
  if (data?.exec !== undefined) view.setBigInt64(440, BigInt(data.exec), true);
  // 0x1c0: isize
  if (data?.expired !== undefined) view.setBigInt64(448, BigInt(data.expired), true);
  // 0x1c8: isize
  if (data?.finalize !== undefined) view.setBigInt64(456, BigInt(data.finalize), true);
  // 0x1d0: isize
  if (data?.free !== undefined) view.setBigInt64(464, BigInt(data.free), true);
  // 0x1d8: isize
  if (data?.free_table !== undefined) view.setBigInt64(472, BigInt(data.free_table), true);
  // 0x1e0: isize
  if (data?.get_autocommit !== undefined) view.setBigInt64(480, BigInt(data.get_autocommit), true);
  // 0x1e8: isize
  if (data?.get_auxdata !== undefined) view.setBigInt64(488, BigInt(data.get_auxdata), true);
  // 0x1f0: isize
  if (data?.get_table !== undefined) view.setBigInt64(496, BigInt(data.get_table), true);
  // 0x1f8: isize
  if (data?.global_recover !== undefined) view.setBigInt64(504, BigInt(data.global_recover), true);
  // 0x200: isize
  if (data?.interruptx !== undefined) view.setBigInt64(512, BigInt(data.interruptx), true);
  // 0x208: isize
  if (data?.last_insert_rowid !== undefined) view.setBigInt64(520, BigInt(data.last_insert_rowid), true);
  // 0x210: isize
  if (data?.libversion !== undefined) view.setBigInt64(528, BigInt(data.libversion), true);
  // 0x218: isize
  if (data?.libversion_number !== undefined) view.setBigInt64(536, BigInt(data.libversion_number), true);
  // 0x220: isize
  if (data?.malloc !== undefined) view.setBigInt64(544, BigInt(data.malloc), true);
  // 0x228: isize
  if (data?.mprintf !== undefined) view.setBigInt64(552, BigInt(data.mprintf), true);
  // 0x230: isize
  if (data?.open !== undefined) view.setBigInt64(560, BigInt(data.open), true);
  // 0x238: isize
  if (data?.open16 !== undefined) view.setBigInt64(568, BigInt(data.open16), true);
  // 0x240: isize
  if (data?.prepare !== undefined) view.setBigInt64(576, BigInt(data.prepare), true);
  // 0x248: isize
  if (data?.prepare16 !== undefined) view.setBigInt64(584, BigInt(data.prepare16), true);
  // 0x250: isize
  if (data?.profile !== undefined) view.setBigInt64(592, BigInt(data.profile), true);
  // 0x258: isize
  if (data?.progress_handler !== undefined) view.setBigInt64(600, BigInt(data.progress_handler), true);
  // 0x260: isize
  if (data?.realloc !== undefined) view.setBigInt64(608, BigInt(data.realloc), true);
  // 0x268: isize
  if (data?.reset !== undefined) view.setBigInt64(616, BigInt(data.reset), true);
  // 0x270: isize
  if (data?.result_blob !== undefined) view.setBigInt64(624, BigInt(data.result_blob), true);
  // 0x278: isize
  if (data?.result_double !== undefined) view.setBigInt64(632, BigInt(data.result_double), true);
  // 0x280: isize
  if (data?.result_error !== undefined) view.setBigInt64(640, BigInt(data.result_error), true);
  // 0x288: isize
  if (data?.result_error16 !== undefined) view.setBigInt64(648, BigInt(data.result_error16), true);
  // 0x290: isize
  if (data?.result_int !== undefined) view.setBigInt64(656, BigInt(data.result_int), true);
  // 0x298: isize
  if (data?.result_int64 !== undefined) view.setBigInt64(664, BigInt(data.result_int64), true);
  // 0x2a0: isize
  if (data?.result_null !== undefined) view.setBigInt64(672, BigInt(data.result_null), true);
  // 0x2a8: isize
  if (data?.result_text !== undefined) view.setBigInt64(680, BigInt(data.result_text), true);
  // 0x2b0: isize
  if (data?.result_text16 !== undefined) view.setBigInt64(688, BigInt(data.result_text16), true);
  // 0x2b8: isize
  if (data?.result_text16be !== undefined) view.setBigInt64(696, BigInt(data.result_text16be), true);
  // 0x2c0: isize
  if (data?.result_text16le !== undefined) view.setBigInt64(704, BigInt(data.result_text16le), true);
  // 0x2c8: isize
  if (data?.result_value !== undefined) view.setBigInt64(712, BigInt(data.result_value), true);
  // 0x2d0: isize
  if (data?.rollback_hook !== undefined) view.setBigInt64(720, BigInt(data.rollback_hook), true);
  // 0x2d8: isize
  if (data?.set_authorizer !== undefined) view.setBigInt64(728, BigInt(data.set_authorizer), true);
  // 0x2e0: isize
  if (data?.set_auxdata !== undefined) view.setBigInt64(736, BigInt(data.set_auxdata), true);
  // 0x2e8: isize
  if (data?.xsnprintf !== undefined) view.setBigInt64(744, BigInt(data.xsnprintf), true);
  // 0x2f0: isize
  if (data?.step !== undefined) view.setBigInt64(752, BigInt(data.step), true);
  // 0x2f8: isize
  if (data?.table_column_metadata !== undefined) view.setBigInt64(760, BigInt(data.table_column_metadata), true);
  // 0x300: isize
  if (data?.thread_cleanup !== undefined) view.setBigInt64(768, BigInt(data.thread_cleanup), true);
  // 0x308: isize
  if (data?.total_changes !== undefined) view.setBigInt64(776, BigInt(data.total_changes), true);
  // 0x310: isize
  if (data?.trace !== undefined) view.setBigInt64(784, BigInt(data.trace), true);
  // 0x318: isize
  if (data?.transfer_bindings !== undefined) view.setBigInt64(792, BigInt(data.transfer_bindings), true);
  // 0x320: isize
  if (data?.update_hook !== undefined) view.setBigInt64(800, BigInt(data.update_hook), true);
  // 0x328: isize
  if (data?.user_data !== undefined) view.setBigInt64(808, BigInt(data.user_data), true);
  // 0x330: isize
  if (data?.value_blob !== undefined) view.setBigInt64(816, BigInt(data.value_blob), true);
  // 0x338: isize
  if (data?.value_bytes !== undefined) view.setBigInt64(824, BigInt(data.value_bytes), true);
  // 0x340: isize
  if (data?.value_bytes16 !== undefined) view.setBigInt64(832, BigInt(data.value_bytes16), true);
  // 0x348: isize
  if (data?.value_double !== undefined) view.setBigInt64(840, BigInt(data.value_double), true);
  // 0x350: isize
  if (data?.value_int !== undefined) view.setBigInt64(848, BigInt(data.value_int), true);
  // 0x358: isize
  if (data?.value_int64 !== undefined) view.setBigInt64(856, BigInt(data.value_int64), true);
  // 0x360: isize
  if (data?.value_numeric_type !== undefined) view.setBigInt64(864, BigInt(data.value_numeric_type), true);
  // 0x368: isize
  if (data?.value_text !== undefined) view.setBigInt64(872, BigInt(data.value_text), true);
  // 0x370: isize
  if (data?.value_text16 !== undefined) view.setBigInt64(880, BigInt(data.value_text16), true);
  // 0x378: isize
  if (data?.value_text16be !== undefined) view.setBigInt64(888, BigInt(data.value_text16be), true);
  // 0x380: isize
  if (data?.value_text16le !== undefined) view.setBigInt64(896, BigInt(data.value_text16le), true);
  // 0x388: isize
  if (data?.value_type !== undefined) view.setBigInt64(904, BigInt(data.value_type), true);
  // 0x390: isize
  if (data?.vmprintf !== undefined) view.setBigInt64(912, BigInt(data.vmprintf), true);
  // 0x398: isize
  if (data?.overload_function !== undefined) view.setBigInt64(920, BigInt(data.overload_function), true);
  // 0x3a0: isize
  if (data?.prepare_v2 !== undefined) view.setBigInt64(928, BigInt(data.prepare_v2), true);
  // 0x3a8: isize
  if (data?.prepare16_v2 !== undefined) view.setBigInt64(936, BigInt(data.prepare16_v2), true);
  // 0x3b0: isize
  if (data?.clear_bindings !== undefined) view.setBigInt64(944, BigInt(data.clear_bindings), true);
  // 0x3b8: isize
  if (data?.create_module_v2 !== undefined) view.setBigInt64(952, BigInt(data.create_module_v2), true);
  // 0x3c0: isize
  if (data?.bind_zeroblob !== undefined) view.setBigInt64(960, BigInt(data.bind_zeroblob), true);
  // 0x3c8: isize
  if (data?.blob_bytes !== undefined) view.setBigInt64(968, BigInt(data.blob_bytes), true);
  // 0x3d0: isize
  if (data?.blob_close !== undefined) view.setBigInt64(976, BigInt(data.blob_close), true);
  // 0x3d8: isize
  if (data?.blob_open !== undefined) view.setBigInt64(984, BigInt(data.blob_open), true);
  // 0x3e0: isize
  if (data?.blob_read !== undefined) view.setBigInt64(992, BigInt(data.blob_read), true);
  // 0x3e8: isize
  if (data?.blob_write !== undefined) view.setBigInt64(1000, BigInt(data.blob_write), true);
  // 0x3f0: isize
  if (data?.create_collation_v2 !== undefined) view.setBigInt64(1008, BigInt(data.create_collation_v2), true);
  // 0x3f8: isize
  if (data?.file_control !== undefined) view.setBigInt64(1016, BigInt(data.file_control), true);
  // 0x400: isize
  if (data?.memory_highwater !== undefined) view.setBigInt64(1024, BigInt(data.memory_highwater), true);
  // 0x408: isize
  if (data?.memory_used !== undefined) view.setBigInt64(1032, BigInt(data.memory_used), true);
  // 0x410: isize
  if (data?.mutex_alloc !== undefined) view.setBigInt64(1040, BigInt(data.mutex_alloc), true);
  // 0x418: isize
  if (data?.mutex_enter !== undefined) view.setBigInt64(1048, BigInt(data.mutex_enter), true);
  // 0x420: isize
  if (data?.mutex_free !== undefined) view.setBigInt64(1056, BigInt(data.mutex_free), true);
  // 0x428: isize
  if (data?.mutex_leave !== undefined) view.setBigInt64(1064, BigInt(data.mutex_leave), true);
  // 0x430: isize
  if (data?.mutex_try !== undefined) view.setBigInt64(1072, BigInt(data.mutex_try), true);
  // 0x438: isize
  if (data?.open_v2 !== undefined) view.setBigInt64(1080, BigInt(data.open_v2), true);
  // 0x440: isize
  if (data?.release_memory !== undefined) view.setBigInt64(1088, BigInt(data.release_memory), true);
  // 0x448: isize
  if (data?.result_error_nomem !== undefined) view.setBigInt64(1096, BigInt(data.result_error_nomem), true);
  // 0x450: isize
  if (data?.result_error_toobig !== undefined) view.setBigInt64(1104, BigInt(data.result_error_toobig), true);
  // 0x458: isize
  if (data?.sleep !== undefined) view.setBigInt64(1112, BigInt(data.sleep), true);
  // 0x460: isize
  if (data?.soft_heap_limit !== undefined) view.setBigInt64(1120, BigInt(data.soft_heap_limit), true);
  // 0x468: isize
  if (data?.vfs_find !== undefined) view.setBigInt64(1128, BigInt(data.vfs_find), true);
  // 0x470: isize
  if (data?.vfs_register !== undefined) view.setBigInt64(1136, BigInt(data.vfs_register), true);
  // 0x478: isize
  if (data?.vfs_unregister !== undefined) view.setBigInt64(1144, BigInt(data.vfs_unregister), true);
  // 0x480: isize
  if (data?.xthreadsafe !== undefined) view.setBigInt64(1152, BigInt(data.xthreadsafe), true);
  // 0x488: isize
  if (data?.result_zeroblob !== undefined) view.setBigInt64(1160, BigInt(data.result_zeroblob), true);
  // 0x490: isize
  if (data?.result_error_code !== undefined) view.setBigInt64(1168, BigInt(data.result_error_code), true);
  // 0x498: isize
  if (data?.test_control !== undefined) view.setBigInt64(1176, BigInt(data.test_control), true);
  // 0x4a0: isize
  if (data?.randomness !== undefined) view.setBigInt64(1184, BigInt(data.randomness), true);
  // 0x4a8: isize
  if (data?.context_db_handle !== undefined) view.setBigInt64(1192, BigInt(data.context_db_handle), true);
  // 0x4b0: isize
  if (data?.extended_result_codes !== undefined) view.setBigInt64(1200, BigInt(data.extended_result_codes), true);
  // 0x4b8: isize
  if (data?.limit !== undefined) view.setBigInt64(1208, BigInt(data.limit), true);
  // 0x4c0: isize
  if (data?.next_stmt !== undefined) view.setBigInt64(1216, BigInt(data.next_stmt), true);
  // 0x4c8: isize
  if (data?.sql !== undefined) view.setBigInt64(1224, BigInt(data.sql), true);
  // 0x4d0: isize
  if (data?.status !== undefined) view.setBigInt64(1232, BigInt(data.status), true);
  // 0x4d8: isize
  if (data?.backup_finish !== undefined) view.setBigInt64(1240, BigInt(data.backup_finish), true);
  // 0x4e0: isize
  if (data?.backup_init !== undefined) view.setBigInt64(1248, BigInt(data.backup_init), true);
  // 0x4e8: isize
  if (data?.backup_pagecount !== undefined) view.setBigInt64(1256, BigInt(data.backup_pagecount), true);
  // 0x4f0: isize
  if (data?.backup_remaining !== undefined) view.setBigInt64(1264, BigInt(data.backup_remaining), true);
  // 0x4f8: isize
  if (data?.backup_step !== undefined) view.setBigInt64(1272, BigInt(data.backup_step), true);
  // 0x500: isize
  if (data?.compileoption_get !== undefined) view.setBigInt64(1280, BigInt(data.compileoption_get), true);
  // 0x508: isize
  if (data?.compileoption_used !== undefined) view.setBigInt64(1288, BigInt(data.compileoption_used), true);
  // 0x510: isize
  if (data?.create_function_v2 !== undefined) view.setBigInt64(1296, BigInt(data.create_function_v2), true);
  // 0x518: isize
  if (data?.db_config !== undefined) view.setBigInt64(1304, BigInt(data.db_config), true);
  // 0x520: isize
  if (data?.db_mutex !== undefined) view.setBigInt64(1312, BigInt(data.db_mutex), true);
  // 0x528: isize
  if (data?.db_status !== undefined) view.setBigInt64(1320, BigInt(data.db_status), true);
  // 0x530: isize
  if (data?.extended_errcode !== undefined) view.setBigInt64(1328, BigInt(data.extended_errcode), true);
  // 0x538: isize
  if (data?.log !== undefined) view.setBigInt64(1336, BigInt(data.log), true);
  // 0x540: isize
  if (data?.soft_heap_limit64 !== undefined) view.setBigInt64(1344, BigInt(data.soft_heap_limit64), true);
  // 0x548: isize
  if (data?.sourceid !== undefined) view.setBigInt64(1352, BigInt(data.sourceid), true);
  // 0x550: isize
  if (data?.stmt_status !== undefined) view.setBigInt64(1360, BigInt(data.stmt_status), true);
  // 0x558: isize
  if (data?.strnicmp !== undefined) view.setBigInt64(1368, BigInt(data.strnicmp), true);
  // 0x560: isize
  if (data?.unlock_notify !== undefined) view.setBigInt64(1376, BigInt(data.unlock_notify), true);
  // 0x568: isize
  if (data?.wal_autocheckpoint !== undefined) view.setBigInt64(1384, BigInt(data.wal_autocheckpoint), true);
  // 0x570: isize
  if (data?.wal_checkpoint !== undefined) view.setBigInt64(1392, BigInt(data.wal_checkpoint), true);
  // 0x578: isize
  if (data?.wal_hook !== undefined) view.setBigInt64(1400, BigInt(data.wal_hook), true);
  // 0x580: isize
  if (data?.blob_reopen !== undefined) view.setBigInt64(1408, BigInt(data.blob_reopen), true);
  // 0x588: isize
  if (data?.vtab_config !== undefined) view.setBigInt64(1416, BigInt(data.vtab_config), true);
  // 0x590: isize
  if (data?.vtab_on_conflict !== undefined) view.setBigInt64(1424, BigInt(data.vtab_on_conflict), true);
  // 0x598: isize
  if (data?.close_v2 !== undefined) view.setBigInt64(1432, BigInt(data.close_v2), true);
  // 0x5a0: isize
  if (data?.db_filename !== undefined) view.setBigInt64(1440, BigInt(data.db_filename), true);
  // 0x5a8: isize
  if (data?.db_readonly !== undefined) view.setBigInt64(1448, BigInt(data.db_readonly), true);
  // 0x5b0: isize
  if (data?.db_release_memory !== undefined) view.setBigInt64(1456, BigInt(data.db_release_memory), true);
  // 0x5b8: isize
  if (data?.errstr !== undefined) view.setBigInt64(1464, BigInt(data.errstr), true);
  // 0x5c0: isize
  if (data?.stmt_busy !== undefined) view.setBigInt64(1472, BigInt(data.stmt_busy), true);
  // 0x5c8: isize
  if (data?.stmt_readonly !== undefined) view.setBigInt64(1480, BigInt(data.stmt_readonly), true);
  // 0x5d0: isize
  if (data?.stricmp !== undefined) view.setBigInt64(1488, BigInt(data.stricmp), true);
  // 0x5d8: isize
  if (data?.uri_boolean !== undefined) view.setBigInt64(1496, BigInt(data.uri_boolean), true);
  // 0x5e0: isize
  if (data?.uri_int64 !== undefined) view.setBigInt64(1504, BigInt(data.uri_int64), true);
  // 0x5e8: isize
  if (data?.uri_parameter !== undefined) view.setBigInt64(1512, BigInt(data.uri_parameter), true);
  // 0x5f0: isize
  if (data?.xvsnprintf !== undefined) view.setBigInt64(1520, BigInt(data.xvsnprintf), true);
  // 0x5f8: isize
  if (data?.wal_checkpoint_v2 !== undefined) view.setBigInt64(1528, BigInt(data.wal_checkpoint_v2), true);
  // 0x600: isize
  if (data?.auto_extension !== undefined) view.setBigInt64(1536, BigInt(data.auto_extension), true);
  // 0x608: isize
  if (data?.bind_blob64 !== undefined) view.setBigInt64(1544, BigInt(data.bind_blob64), true);
  // 0x610: isize
  if (data?.bind_text64 !== undefined) view.setBigInt64(1552, BigInt(data.bind_text64), true);
  // 0x618: isize
  if (data?.cancel_auto_extension !== undefined) view.setBigInt64(1560, BigInt(data.cancel_auto_extension), true);
  // 0x620: isize
  if (data?.load_extension !== undefined) view.setBigInt64(1568, BigInt(data.load_extension), true);
  // 0x628: isize
  if (data?.malloc64 !== undefined) view.setBigInt64(1576, BigInt(data.malloc64), true);
  // 0x630: isize
  if (data?.msize !== undefined) view.setBigInt64(1584, BigInt(data.msize), true);
  // 0x638: isize
  if (data?.realloc64 !== undefined) view.setBigInt64(1592, BigInt(data.realloc64), true);
  // 0x640: isize
  if (data?.reset_auto_extension !== undefined) view.setBigInt64(1600, BigInt(data.reset_auto_extension), true);
  // 0x648: isize
  if (data?.result_blob64 !== undefined) view.setBigInt64(1608, BigInt(data.result_blob64), true);
  // 0x650: isize
  if (data?.result_text64 !== undefined) view.setBigInt64(1616, BigInt(data.result_text64), true);
  // 0x658: isize
  if (data?.strglob !== undefined) view.setBigInt64(1624, BigInt(data.strglob), true);
  // 0x660: isize
  if (data?.value_dup !== undefined) view.setBigInt64(1632, BigInt(data.value_dup), true);
  // 0x668: isize
  if (data?.value_free !== undefined) view.setBigInt64(1640, BigInt(data.value_free), true);
  // 0x670: isize
  if (data?.result_zeroblob64 !== undefined) view.setBigInt64(1648, BigInt(data.result_zeroblob64), true);
  // 0x678: isize
  if (data?.bind_zeroblob64 !== undefined) view.setBigInt64(1656, BigInt(data.bind_zeroblob64), true);
  // 0x680: isize
  if (data?.value_subtype !== undefined) view.setBigInt64(1664, BigInt(data.value_subtype), true);
  // 0x688: isize
  if (data?.result_subtype !== undefined) view.setBigInt64(1672, BigInt(data.result_subtype), true);
  // 0x690: isize
  if (data?.status64 !== undefined) view.setBigInt64(1680, BigInt(data.status64), true);
  // 0x698: isize
  if (data?.strlike !== undefined) view.setBigInt64(1688, BigInt(data.strlike), true);
  // 0x6a0: isize
  if (data?.db_cacheflush !== undefined) view.setBigInt64(1696, BigInt(data.db_cacheflush), true);
  // 0x6a8: isize
  if (data?.system_errno !== undefined) view.setBigInt64(1704, BigInt(data.system_errno), true);
  // 0x6b0: isize
  if (data?.trace_v2 !== undefined) view.setBigInt64(1712, BigInt(data.trace_v2), true);
  // 0x6b8: isize
  if (data?.expanded_sql !== undefined) view.setBigInt64(1720, BigInt(data.expanded_sql), true);
  // 0x6c0: isize
  if (data?.set_last_insert_rowid !== undefined) view.setBigInt64(1728, BigInt(data.set_last_insert_rowid), true);
  // 0x6c8: isize
  if (data?.prepare_v3 !== undefined) view.setBigInt64(1736, BigInt(data.prepare_v3), true);
  // 0x6d0: isize
  if (data?.prepare16_v3 !== undefined) view.setBigInt64(1744, BigInt(data.prepare16_v3), true);
  // 0x6d8: isize
  if (data?.bind_pointer !== undefined) view.setBigInt64(1752, BigInt(data.bind_pointer), true);
  // 0x6e0: isize
  if (data?.result_pointer !== undefined) view.setBigInt64(1760, BigInt(data.result_pointer), true);
  // 0x6e8: isize
  if (data?.value_pointer !== undefined) view.setBigInt64(1768, BigInt(data.value_pointer), true);
  // 0x6f0: isize
  if (data?.vtab_nochange !== undefined) view.setBigInt64(1776, BigInt(data.vtab_nochange), true);
  // 0x6f8: isize
  if (data?.value_nochange !== undefined) view.setBigInt64(1784, BigInt(data.value_nochange), true);
  // 0x700: isize
  if (data?.vtab_collation !== undefined) view.setBigInt64(1792, BigInt(data.vtab_collation), true);
  // 0x708: isize
  if (data?.keyword_count !== undefined) view.setBigInt64(1800, BigInt(data.keyword_count), true);
  // 0x710: isize
  if (data?.keyword_name !== undefined) view.setBigInt64(1808, BigInt(data.keyword_name), true);
  // 0x718: isize
  if (data?.keyword_check !== undefined) view.setBigInt64(1816, BigInt(data.keyword_check), true);
  // 0x720: isize
  if (data?.str_new !== undefined) view.setBigInt64(1824, BigInt(data.str_new), true);
  // 0x728: isize
  if (data?.str_finish !== undefined) view.setBigInt64(1832, BigInt(data.str_finish), true);
  // 0x730: isize
  if (data?.str_appendf !== undefined) view.setBigInt64(1840, BigInt(data.str_appendf), true);
  // 0x738: isize
  if (data?.str_vappendf !== undefined) view.setBigInt64(1848, BigInt(data.str_vappendf), true);
  // 0x740: isize
  if (data?.str_append !== undefined) view.setBigInt64(1856, BigInt(data.str_append), true);
  // 0x748: isize
  if (data?.str_appendall !== undefined) view.setBigInt64(1864, BigInt(data.str_appendall), true);
  // 0x750: isize
  if (data?.str_appendchar !== undefined) view.setBigInt64(1872, BigInt(data.str_appendchar), true);
  // 0x758: isize
  if (data?.str_reset !== undefined) view.setBigInt64(1880, BigInt(data.str_reset), true);
  // 0x760: isize
  if (data?.str_errcode !== undefined) view.setBigInt64(1888, BigInt(data.str_errcode), true);
  // 0x768: isize
  if (data?.str_length !== undefined) view.setBigInt64(1896, BigInt(data.str_length), true);
  // 0x770: isize
  if (data?.str_value !== undefined) view.setBigInt64(1904, BigInt(data.str_value), true);
  // 0x778: isize
  if (data?.create_window_function !== undefined) view.setBigInt64(1912, BigInt(data.create_window_function), true);
  // 0x780: isize
  if (data?.normalized_sql !== undefined) view.setBigInt64(1920, BigInt(data.normalized_sql), true);
  // 0x788: isize
  if (data?.stmt_isexplain !== undefined) view.setBigInt64(1928, BigInt(data.stmt_isexplain), true);
  // 0x790: isize
  if (data?.value_frombind !== undefined) view.setBigInt64(1936, BigInt(data.value_frombind), true);
  // 0x798: isize
  if (data?.drop_modules !== undefined) view.setBigInt64(1944, BigInt(data.drop_modules), true);
  // 0x7a0: isize
  if (data?.hard_heap_limit64 !== undefined) view.setBigInt64(1952, BigInt(data.hard_heap_limit64), true);
  // 0x7a8: isize
  if (data?.uri_key !== undefined) view.setBigInt64(1960, BigInt(data.uri_key), true);
  // 0x7b0: isize
  if (data?.filename_database !== undefined) view.setBigInt64(1968, BigInt(data.filename_database), true);
  // 0x7b8: isize
  if (data?.filename_journal !== undefined) view.setBigInt64(1976, BigInt(data.filename_journal), true);
  // 0x7c0: isize
  if (data?.filename_wal !== undefined) view.setBigInt64(1984, BigInt(data.filename_wal), true);
  // 0x7c8: isize
  if (data?.create_filename !== undefined) view.setBigInt64(1992, BigInt(data.create_filename), true);
  // 0x7d0: isize
  if (data?.free_filename !== undefined) view.setBigInt64(2000, BigInt(data.free_filename), true);
  // 0x7d8: isize
  if (data?.database_file_object !== undefined) view.setBigInt64(2008, BigInt(data.database_file_object), true);
  // 0x7e0: isize
  if (data?.txn_state !== undefined) view.setBigInt64(2016, BigInt(data.txn_state), true);
  return buf;
}

export type CHAR = number;

// Native Libraries

try {
  var libwinsqlite3 = Deno.dlopen("winsqlite3", {
    sqlite3_libversion: {
      parameters: [],
      result: "buffer",
    },
    sqlite3_sourceid: {
      parameters: [],
      result: "buffer",
    },
    sqlite3_libversion_number: {
      parameters: [],
      result: "i32",
    },
    sqlite3_compileoption_used: {
      parameters: ["buffer"],
      result: "i32",
    },
    sqlite3_compileoption_get: {
      parameters: ["i32"],
      result: "buffer",
    },
    sqlite3_threadsafe: {
      parameters: [],
      result: "i32",
    },
    sqlite3_close: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_close_v2: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_exec: {
      parameters: ["pointer", "buffer", "isize", "pointer", "pointer"],
      result: "i32",
    },
    sqlite3_initialize: {
      parameters: [],
      result: "i32",
    },
    sqlite3_shutdown: {
      parameters: [],
      result: "i32",
    },
    sqlite3_os_init: {
      parameters: [],
      result: "i32",
    },
    sqlite3_os_end: {
      parameters: [],
      result: "i32",
    },
    sqlite3_config: {
      parameters: ["i32"],
      result: "i32",
    },
    sqlite3_db_config: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    sqlite3_extended_result_codes: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    sqlite3_last_insert_rowid: {
      parameters: ["pointer"],
      result: "i64",
    },
    sqlite3_set_last_insert_rowid: {
      parameters: ["pointer", "i64"],
      result: "void",
    },
    sqlite3_changes: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_total_changes: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_interrupt: {
      parameters: ["pointer"],
      result: "void",
    },
    sqlite3_complete: {
      parameters: ["buffer"],
      result: "i32",
    },
    sqlite3_complete16: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_busy_handler: {
      parameters: ["pointer", "isize", "pointer"],
      result: "i32",
    },
    sqlite3_busy_timeout: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    sqlite3_get_table: {
      parameters: ["pointer", "buffer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    sqlite3_free_table: {
      parameters: ["pointer"],
      result: "void",
    },
    sqlite3_mprintf: {
      parameters: ["buffer"],
      result: "buffer",
    },
    sqlite3_vmprintf: {
      parameters: ["buffer", "pointer"],
      result: "buffer",
    },
    sqlite3_snprintf: {
      parameters: ["i32", "buffer", "buffer"],
      result: "buffer",
    },
    sqlite3_vsnprintf: {
      parameters: ["i32", "buffer", "buffer", "pointer"],
      result: "buffer",
    },
    sqlite3_malloc: {
      parameters: ["i32"],
      result: "pointer",
    },
    sqlite3_malloc64: {
      parameters: ["u64"],
      result: "pointer",
    },
    sqlite3_realloc: {
      parameters: ["pointer", "i32"],
      result: "pointer",
    },
    sqlite3_realloc64: {
      parameters: ["pointer", "u64"],
      result: "pointer",
    },
    sqlite3_free: {
      parameters: ["pointer"],
      result: "void",
    },
    sqlite3_msize: {
      parameters: ["pointer"],
      result: "u64",
    },
    sqlite3_memory_used: {
      parameters: [],
      result: "i64",
    },
    sqlite3_memory_highwater: {
      parameters: ["i32"],
      result: "i64",
    },
    sqlite3_randomness: {
      parameters: ["i32", "pointer"],
      result: "void",
    },
    sqlite3_set_authorizer: {
      parameters: ["pointer", "isize", "pointer"],
      result: "i32",
    },
    sqlite3_trace: {
      parameters: ["pointer", "isize", "pointer"],
      result: "pointer",
    },
    sqlite3_profile: {
      parameters: ["pointer", "isize", "pointer"],
      result: "pointer",
    },
    sqlite3_trace_v2: {
      parameters: ["pointer", "u32", "isize", "pointer"],
      result: "i32",
    },
    sqlite3_progress_handler: {
      parameters: ["pointer", "i32", "isize", "pointer"],
      result: "void",
    },
    sqlite3_open: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    sqlite3_open16: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    sqlite3_open_v2: {
      parameters: ["buffer", "pointer", "i32", "buffer"],
      result: "i32",
    },
    sqlite3_uri_parameter: {
      parameters: ["buffer", "buffer"],
      result: "buffer",
    },
    sqlite3_uri_boolean: {
      parameters: ["buffer", "buffer", "i32"],
      result: "i32",
    },
    sqlite3_uri_int64: {
      parameters: ["buffer", "buffer", "i64"],
      result: "i64",
    },
    sqlite3_uri_key: {
      parameters: ["buffer", "i32"],
      result: "buffer",
    },
    sqlite3_filename_database: {
      parameters: ["buffer"],
      result: "buffer",
    },
    sqlite3_filename_journal: {
      parameters: ["buffer"],
      result: "buffer",
    },
    sqlite3_filename_wal: {
      parameters: ["buffer"],
      result: "buffer",
    },
    sqlite3_database_file_object: {
      parameters: ["buffer"],
      result: "pointer",
    },
    sqlite3_create_filename: {
      parameters: ["buffer", "buffer", "buffer", "i32", "pointer"],
      result: "buffer",
    },
    sqlite3_free_filename: {
      parameters: ["buffer"],
      result: "void",
    },
    sqlite3_errcode: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_extended_errcode: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_errmsg: {
      parameters: ["pointer"],
      result: "buffer",
    },
    sqlite3_errmsg16: {
      parameters: ["pointer"],
      result: "pointer",
    },
    sqlite3_errstr: {
      parameters: ["i32"],
      result: "buffer",
    },
    sqlite3_limit: {
      parameters: ["pointer", "i32", "i32"],
      result: "i32",
    },
    sqlite3_prepare: {
      parameters: ["pointer", "buffer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    sqlite3_prepare_v2: {
      parameters: ["pointer", "buffer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    sqlite3_prepare_v3: {
      parameters: ["pointer", "buffer", "i32", "u32", "pointer", "pointer"],
      result: "i32",
    },
    sqlite3_prepare16: {
      parameters: ["pointer", "pointer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    sqlite3_prepare16_v2: {
      parameters: ["pointer", "pointer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    sqlite3_prepare16_v3: {
      parameters: ["pointer", "pointer", "i32", "u32", "pointer", "pointer"],
      result: "i32",
    },
    sqlite3_sql: {
      parameters: ["pointer"],
      result: "buffer",
    },
    sqlite3_expanded_sql: {
      parameters: ["pointer"],
      result: "buffer",
    },
    sqlite3_stmt_readonly: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_stmt_isexplain: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_stmt_busy: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_bind_blob: {
      parameters: ["pointer", "i32", "pointer", "i32", "isize"],
      result: "i32",
    },
    sqlite3_bind_blob64: {
      parameters: ["pointer", "i32", "pointer", "u64", "isize"],
      result: "i32",
    },
    sqlite3_bind_double: {
      parameters: ["pointer", "i32", "f64"],
      result: "i32",
    },
    sqlite3_bind_int: {
      parameters: ["pointer", "i32", "i32"],
      result: "i32",
    },
    sqlite3_bind_int64: {
      parameters: ["pointer", "i32", "i64"],
      result: "i32",
    },
    sqlite3_bind_null: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    sqlite3_bind_text: {
      parameters: ["pointer", "i32", "buffer", "i32", "isize"],
      result: "i32",
    },
    sqlite3_bind_text16: {
      parameters: ["pointer", "i32", "pointer", "i32", "isize"],
      result: "i32",
    },
    sqlite3_bind_text64: {
      parameters: ["pointer", "i32", "buffer", "u64", "isize", "u8"],
      result: "i32",
    },
    sqlite3_bind_value: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    sqlite3_bind_pointer: {
      parameters: ["pointer", "i32", "pointer", "buffer", "isize"],
      result: "i32",
    },
    sqlite3_bind_zeroblob: {
      parameters: ["pointer", "i32", "i32"],
      result: "i32",
    },
    sqlite3_bind_zeroblob64: {
      parameters: ["pointer", "i32", "u64"],
      result: "i32",
    },
    sqlite3_bind_parameter_count: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_bind_parameter_name: {
      parameters: ["pointer", "i32"],
      result: "buffer",
    },
    sqlite3_bind_parameter_index: {
      parameters: ["pointer", "buffer"],
      result: "i32",
    },
    sqlite3_clear_bindings: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_column_count: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_column_name: {
      parameters: ["pointer", "i32"],
      result: "buffer",
    },
    sqlite3_column_name16: {
      parameters: ["pointer", "i32"],
      result: "pointer",
    },
    sqlite3_column_database_name: {
      parameters: ["pointer", "i32"],
      result: "buffer",
    },
    sqlite3_column_database_name16: {
      parameters: ["pointer", "i32"],
      result: "pointer",
    },
    sqlite3_column_table_name: {
      parameters: ["pointer", "i32"],
      result: "buffer",
    },
    sqlite3_column_table_name16: {
      parameters: ["pointer", "i32"],
      result: "pointer",
    },
    sqlite3_column_origin_name: {
      parameters: ["pointer", "i32"],
      result: "buffer",
    },
    sqlite3_column_origin_name16: {
      parameters: ["pointer", "i32"],
      result: "pointer",
    },
    sqlite3_column_decltype: {
      parameters: ["pointer", "i32"],
      result: "buffer",
    },
    sqlite3_column_decltype16: {
      parameters: ["pointer", "i32"],
      result: "pointer",
    },
    sqlite3_step: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_data_count: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_column_blob: {
      parameters: ["pointer", "i32"],
      result: "pointer",
    },
    sqlite3_column_double: {
      parameters: ["pointer", "i32"],
      result: "f64",
    },
    sqlite3_column_int: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    sqlite3_column_int64: {
      parameters: ["pointer", "i32"],
      result: "i64",
    },
    sqlite3_column_text: {
      parameters: ["pointer", "i32"],
      result: "pointer",
    },
    sqlite3_column_text16: {
      parameters: ["pointer", "i32"],
      result: "pointer",
    },
    sqlite3_column_value: {
      parameters: ["pointer", "i32"],
      result: "pointer",
    },
    sqlite3_column_bytes: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    sqlite3_column_bytes16: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    sqlite3_column_type: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    sqlite3_finalize: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_reset: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_create_function: {
      parameters: ["pointer", "buffer", "i32", "i32", "pointer", "isize", "isize", "isize"],
      result: "i32",
    },
    sqlite3_create_function16: {
      parameters: ["pointer", "pointer", "i32", "i32", "pointer", "isize", "isize", "isize"],
      result: "i32",
    },
    sqlite3_create_function_v2: {
      parameters: ["pointer", "buffer", "i32", "i32", "pointer", "isize", "isize", "isize", "isize"],
      result: "i32",
    },
    sqlite3_create_window_function: {
      parameters: ["pointer", "buffer", "i32", "i32", "pointer", "isize", "isize", "isize", "isize", "isize"],
      result: "i32",
    },
    sqlite3_aggregate_count: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_expired: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_transfer_bindings: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    sqlite3_global_recover: {
      parameters: [],
      result: "i32",
    },
    sqlite3_thread_cleanup: {
      parameters: [],
      result: "void",
    },
    sqlite3_memory_alarm: {
      parameters: ["isize", "pointer", "i64"],
      result: "i32",
    },
    sqlite3_value_blob: {
      parameters: ["pointer"],
      result: "pointer",
    },
    sqlite3_value_double: {
      parameters: ["pointer"],
      result: "f64",
    },
    sqlite3_value_int: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_value_int64: {
      parameters: ["pointer"],
      result: "i64",
    },
    sqlite3_value_pointer: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    sqlite3_value_text: {
      parameters: ["pointer"],
      result: "pointer",
    },
    sqlite3_value_text16: {
      parameters: ["pointer"],
      result: "pointer",
    },
    sqlite3_value_text16le: {
      parameters: ["pointer"],
      result: "pointer",
    },
    sqlite3_value_text16be: {
      parameters: ["pointer"],
      result: "pointer",
    },
    sqlite3_value_bytes: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_value_bytes16: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_value_type: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_value_numeric_type: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_value_nochange: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_value_frombind: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_value_subtype: {
      parameters: ["pointer"],
      result: "u32",
    },
    sqlite3_value_dup: {
      parameters: ["pointer"],
      result: "pointer",
    },
    sqlite3_value_free: {
      parameters: ["pointer"],
      result: "void",
    },
    sqlite3_aggregate_context: {
      parameters: ["pointer", "i32"],
      result: "pointer",
    },
    sqlite3_user_data: {
      parameters: ["pointer"],
      result: "pointer",
    },
    sqlite3_context_db_handle: {
      parameters: ["pointer"],
      result: "pointer",
    },
    sqlite3_get_auxdata: {
      parameters: ["pointer", "i32"],
      result: "pointer",
    },
    sqlite3_set_auxdata: {
      parameters: ["pointer", "i32", "pointer", "isize"],
      result: "void",
    },
    sqlite3_result_blob: {
      parameters: ["pointer", "pointer", "i32", "isize"],
      result: "void",
    },
    sqlite3_result_blob64: {
      parameters: ["pointer", "pointer", "u64", "isize"],
      result: "void",
    },
    sqlite3_result_double: {
      parameters: ["pointer", "f64"],
      result: "void",
    },
    sqlite3_result_error: {
      parameters: ["pointer", "buffer", "i32"],
      result: "void",
    },
    sqlite3_result_error16: {
      parameters: ["pointer", "pointer", "i32"],
      result: "void",
    },
    sqlite3_result_error_toobig: {
      parameters: ["pointer"],
      result: "void",
    },
    sqlite3_result_error_nomem: {
      parameters: ["pointer"],
      result: "void",
    },
    sqlite3_result_error_code: {
      parameters: ["pointer", "i32"],
      result: "void",
    },
    sqlite3_result_int: {
      parameters: ["pointer", "i32"],
      result: "void",
    },
    sqlite3_result_int64: {
      parameters: ["pointer", "i64"],
      result: "void",
    },
    sqlite3_result_null: {
      parameters: ["pointer"],
      result: "void",
    },
    sqlite3_result_text: {
      parameters: ["pointer", "buffer", "i32", "isize"],
      result: "void",
    },
    sqlite3_result_text64: {
      parameters: ["pointer", "buffer", "u64", "isize", "u8"],
      result: "void",
    },
    sqlite3_result_text16: {
      parameters: ["pointer", "pointer", "i32", "isize"],
      result: "void",
    },
    sqlite3_result_text16le: {
      parameters: ["pointer", "pointer", "i32", "isize"],
      result: "void",
    },
    sqlite3_result_text16be: {
      parameters: ["pointer", "pointer", "i32", "isize"],
      result: "void",
    },
    sqlite3_result_value: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    sqlite3_result_pointer: {
      parameters: ["pointer", "pointer", "buffer", "isize"],
      result: "void",
    },
    sqlite3_result_zeroblob: {
      parameters: ["pointer", "i32"],
      result: "void",
    },
    sqlite3_result_zeroblob64: {
      parameters: ["pointer", "u64"],
      result: "i32",
    },
    sqlite3_result_subtype: {
      parameters: ["pointer", "u32"],
      result: "void",
    },
    sqlite3_create_collation: {
      parameters: ["pointer", "buffer", "i32", "pointer", "isize"],
      result: "i32",
    },
    sqlite3_create_collation_v2: {
      parameters: ["pointer", "buffer", "i32", "pointer", "isize", "isize"],
      result: "i32",
    },
    sqlite3_create_collation16: {
      parameters: ["pointer", "pointer", "i32", "pointer", "isize"],
      result: "i32",
    },
    sqlite3_collation_needed: {
      parameters: ["pointer", "pointer", "isize"],
      result: "i32",
    },
    sqlite3_collation_needed16: {
      parameters: ["pointer", "pointer", "isize"],
      result: "i32",
    },
    sqlite3_sleep: {
      parameters: ["i32"],
      result: "i32",
    },
    sqlite3_win32_set_directory: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    sqlite3_win32_set_directory8: {
      parameters: ["u32", "buffer"],
      result: "i32",
    },
    sqlite3_win32_set_directory16: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    sqlite3_get_autocommit: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_db_handle: {
      parameters: ["pointer"],
      result: "pointer",
    },
    sqlite3_db_filename: {
      parameters: ["pointer", "buffer"],
      result: "buffer",
    },
    sqlite3_db_readonly: {
      parameters: ["pointer", "buffer"],
      result: "i32",
    },
    sqlite3_txn_state: {
      parameters: ["pointer", "buffer"],
      result: "i32",
    },
    sqlite3_next_stmt: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    sqlite3_commit_hook: {
      parameters: ["pointer", "isize", "pointer"],
      result: "pointer",
    },
    sqlite3_rollback_hook: {
      parameters: ["pointer", "isize", "pointer"],
      result: "pointer",
    },
    sqlite3_update_hook: {
      parameters: ["pointer", "isize", "pointer"],
      result: "pointer",
    },
    sqlite3_enable_shared_cache: {
      parameters: ["i32"],
      result: "i32",
    },
    sqlite3_release_memory: {
      parameters: ["i32"],
      result: "i32",
    },
    sqlite3_db_release_memory: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_soft_heap_limit64: {
      parameters: ["i64"],
      result: "i64",
    },
    sqlite3_hard_heap_limit64: {
      parameters: ["i64"],
      result: "i64",
    },
    sqlite3_soft_heap_limit: {
      parameters: ["i32"],
      result: "void",
    },
    sqlite3_table_column_metadata: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    sqlite3_load_extension: {
      parameters: ["pointer", "buffer", "buffer", "pointer"],
      result: "i32",
    },
    sqlite3_enable_load_extension: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    sqlite3_auto_extension: {
      parameters: ["isize"],
      result: "i32",
    },
    sqlite3_cancel_auto_extension: {
      parameters: ["isize"],
      result: "i32",
    },
    sqlite3_reset_auto_extension: {
      parameters: [],
      result: "void",
    },
    sqlite3_create_module: {
      parameters: ["pointer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    sqlite3_create_module_v2: {
      parameters: ["pointer", "buffer", "pointer", "pointer", "isize"],
      result: "i32",
    },
    sqlite3_drop_modules: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    sqlite3_declare_vtab: {
      parameters: ["pointer", "buffer"],
      result: "i32",
    },
    sqlite3_overload_function: {
      parameters: ["pointer", "buffer", "i32"],
      result: "i32",
    },
    sqlite3_blob_open: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "i64", "i32", "pointer"],
      result: "i32",
    },
    sqlite3_blob_reopen: {
      parameters: ["pointer", "i64"],
      result: "i32",
    },
    sqlite3_blob_close: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_blob_bytes: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_blob_read: {
      parameters: ["pointer", "pointer", "i32", "i32"],
      result: "i32",
    },
    sqlite3_blob_write: {
      parameters: ["pointer", "pointer", "i32", "i32"],
      result: "i32",
    },
    sqlite3_vfs_find: {
      parameters: ["buffer"],
      result: "pointer",
    },
    sqlite3_vfs_register: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    sqlite3_vfs_unregister: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_mutex_alloc: {
      parameters: ["i32"],
      result: "pointer",
    },
    sqlite3_mutex_free: {
      parameters: ["pointer"],
      result: "void",
    },
    sqlite3_mutex_enter: {
      parameters: ["pointer"],
      result: "void",
    },
    sqlite3_mutex_try: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_mutex_leave: {
      parameters: ["pointer"],
      result: "void",
    },
    sqlite3_db_mutex: {
      parameters: ["pointer"],
      result: "pointer",
    },
    sqlite3_file_control: {
      parameters: ["pointer", "buffer", "i32", "pointer"],
      result: "i32",
    },
    sqlite3_test_control: {
      parameters: ["i32"],
      result: "i32",
    },
    sqlite3_keyword_count: {
      parameters: [],
      result: "i32",
    },
    sqlite3_keyword_name: {
      parameters: ["i32", "pointer", "pointer"],
      result: "i32",
    },
    sqlite3_keyword_check: {
      parameters: ["buffer", "i32"],
      result: "i32",
    },
    sqlite3_str_new: {
      parameters: ["pointer"],
      result: "pointer",
    },
    sqlite3_str_finish: {
      parameters: ["pointer"],
      result: "buffer",
    },
    sqlite3_str_appendf: {
      parameters: ["pointer", "buffer"],
      result: "void",
    },
    sqlite3_str_vappendf: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "void",
    },
    sqlite3_str_append: {
      parameters: ["pointer", "buffer", "i32"],
      result: "void",
    },
    sqlite3_str_appendall: {
      parameters: ["pointer", "buffer"],
      result: "void",
    },
    sqlite3_str_appendchar: {
      parameters: ["pointer", "i32", "pointer"],
      result: "void",
    },
    sqlite3_str_reset: {
      parameters: ["pointer"],
      result: "void",
    },
    sqlite3_str_errcode: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_str_length: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_str_value: {
      parameters: ["pointer"],
      result: "buffer",
    },
    sqlite3_status: {
      parameters: ["i32", "pointer", "pointer", "i32"],
      result: "i32",
    },
    sqlite3_status64: {
      parameters: ["i32", "pointer", "pointer", "i32"],
      result: "i32",
    },
    sqlite3_db_status: {
      parameters: ["pointer", "i32", "pointer", "pointer", "i32"],
      result: "i32",
    },
    sqlite3_stmt_status: {
      parameters: ["pointer", "i32", "i32"],
      result: "i32",
    },
    sqlite3_backup_init: {
      parameters: ["pointer", "buffer", "pointer", "buffer"],
      result: "pointer",
    },
    sqlite3_backup_step: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    sqlite3_backup_finish: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_backup_remaining: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_backup_pagecount: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_stricmp: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    sqlite3_strnicmp: {
      parameters: ["buffer", "buffer", "i32"],
      result: "i32",
    },
    sqlite3_strglob: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    sqlite3_strlike: {
      parameters: ["buffer", "buffer", "u32"],
      result: "i32",
    },
    sqlite3_log: {
      parameters: ["i32", "buffer"],
      result: "void",
    },
    sqlite3_wal_hook: {
      parameters: ["pointer", "isize", "pointer"],
      result: "pointer",
    },
    sqlite3_wal_autocheckpoint: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    sqlite3_wal_checkpoint: {
      parameters: ["pointer", "buffer"],
      result: "i32",
    },
    sqlite3_wal_checkpoint_v2: {
      parameters: ["pointer", "buffer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    sqlite3_vtab_config: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    sqlite3_vtab_on_conflict: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_vtab_nochange: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_vtab_collation: {
      parameters: ["pointer", "i32"],
      result: "buffer",
    },
    sqlite3_db_cacheflush: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_system_errno: {
      parameters: ["pointer"],
      result: "i32",
    },
    sqlite3_serialize: {
      parameters: ["pointer", "buffer", "pointer", "u32"],
      result: "pointer",
    },
    sqlite3_deserialize: {
      parameters: ["pointer", "buffer", "pointer", "i64", "i64", "u32"],
      result: "i32",
    },
    sqlite3_rtree_geometry_callback: {
      parameters: ["pointer", "buffer", "isize", "pointer"],
      result: "i32",
    },
    sqlite3_rtree_query_callback: {
      parameters: ["pointer", "buffer", "isize", "pointer", "isize"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function sqlite3_libversion(): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libwinsqlite3.sqlite3_libversion());
}

export function sqlite3_sourceid(): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libwinsqlite3.sqlite3_sourceid());
}

export function sqlite3_libversion_number(): number /* i32 */ {
  return libwinsqlite3.sqlite3_libversion_number();
}

export function sqlite3_compileoption_used(
  zOptName: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_compileoption_used(util.pstrToFfi(zOptName));
}

export function sqlite3_compileoption_get(
  N: number /* i32 */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libwinsqlite3.sqlite3_compileoption_get(N));
}

export function sqlite3_threadsafe(): number /* i32 */ {
  return libwinsqlite3.sqlite3_threadsafe();
}

export function sqlite3_close(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_close(util.toPointer(param0));
}

export function sqlite3_close_v2(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_close_v2(util.toPointer(param0));
}

export function sqlite3_exec(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  sql: string | null /* Windows.Win32.Foundation.PSTR */,
  callback: Deno.PointerValue /* isize */,
  param3: Deno.PointerValue | Uint8Array | null /* ptr */,
  errmsg: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_exec(util.toPointer(param0), util.pstrToFfi(sql), callback, util.toPointer(param3), util.toPointer(errmsg));
}

export function sqlite3_initialize(): number /* i32 */ {
  return libwinsqlite3.sqlite3_initialize();
}

export function sqlite3_shutdown(): number /* i32 */ {
  return libwinsqlite3.sqlite3_shutdown();
}

export function sqlite3_os_init(): number /* i32 */ {
  return libwinsqlite3.sqlite3_os_init();
}

export function sqlite3_os_end(): number /* i32 */ {
  return libwinsqlite3.sqlite3_os_end();
}

export function sqlite3_config(
  param0: number /* i32 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_config(param0);
}

export function sqlite3_db_config(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  op: number /* i32 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_db_config(util.toPointer(param0), op);
}

export function sqlite3_extended_result_codes(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  onoff: number /* i32 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_extended_result_codes(util.toPointer(param0), onoff);
}

export function sqlite3_last_insert_rowid(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue /* i64 */ {
  return libwinsqlite3.sqlite3_last_insert_rowid(util.toPointer(param0));
}

export function sqlite3_set_last_insert_rowid(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue /* i64 */,
): void /* void */ {
  return libwinsqlite3.sqlite3_set_last_insert_rowid(util.toPointer(param0), param1);
}

export function sqlite3_changes(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_changes(util.toPointer(param0));
}

export function sqlite3_total_changes(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_total_changes(util.toPointer(param0));
}

export function sqlite3_interrupt(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libwinsqlite3.sqlite3_interrupt(util.toPointer(param0));
}

export function sqlite3_complete(
  sql: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_complete(util.pstrToFfi(sql));
}

export function sqlite3_complete16(
  sql: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_complete16(util.toPointer(sql));
}

export function sqlite3_busy_handler(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue /* isize */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_busy_handler(util.toPointer(param0), param1, util.toPointer(param2));
}

export function sqlite3_busy_timeout(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  ms: number /* i32 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_busy_timeout(util.toPointer(param0), ms);
}

export function sqlite3_get_table(
  db: Deno.PointerValue | Uint8Array | null /* ptr */,
  zSql: string | null /* Windows.Win32.Foundation.PSTR */,
  pazResult: Deno.PointerValue | Uint8Array | null /* ptr */,
  pnRow: Deno.PointerValue | Uint8Array | null /* ptr */,
  pnColumn: Deno.PointerValue | Uint8Array | null /* ptr */,
  pzErrmsg: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_get_table(util.toPointer(db), util.pstrToFfi(zSql), util.toPointer(pazResult), util.toPointer(pnRow), util.toPointer(pnColumn), util.toPointer(pzErrmsg));
}

export function sqlite3_free_table(
  result: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libwinsqlite3.sqlite3_free_table(util.toPointer(result));
}

export function sqlite3_mprintf(
  param0: string | null /* Windows.Win32.Foundation.PSTR */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libwinsqlite3.sqlite3_mprintf(util.pstrToFfi(param0)));
}

export function sqlite3_vmprintf(
  param0: string | null /* Windows.Win32.Foundation.PSTR */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libwinsqlite3.sqlite3_vmprintf(util.pstrToFfi(param0), util.toPointer(param1)));
}

export function sqlite3_snprintf(
  param0: number /* i32 */,
  param1: string | null /* Windows.Win32.Foundation.PSTR */,
  param2: string | null /* Windows.Win32.Foundation.PSTR */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libwinsqlite3.sqlite3_snprintf(param0, util.pstrToFfi(param1), util.pstrToFfi(param2)));
}

export function sqlite3_vsnprintf(
  param0: number /* i32 */,
  param1: string | null /* Windows.Win32.Foundation.PSTR */,
  param2: string | null /* Windows.Win32.Foundation.PSTR */,
  param3: Deno.PointerValue | Uint8Array | null /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libwinsqlite3.sqlite3_vsnprintf(param0, util.pstrToFfi(param1), util.pstrToFfi(param2), util.toPointer(param3)));
}

export function sqlite3_malloc(
  param0: number /* i32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_malloc(param0));
}

export function sqlite3_malloc64(
  param0: Deno.PointerValue /* u64 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_malloc64(param0));
}

export function sqlite3_realloc(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* i32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_realloc(util.toPointer(param0), param1));
}

export function sqlite3_realloc64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue /* u64 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_realloc64(util.toPointer(param0), param1));
}

export function sqlite3_free(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libwinsqlite3.sqlite3_free(util.toPointer(param0));
}

export function sqlite3_msize(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue /* u64 */ {
  return libwinsqlite3.sqlite3_msize(util.toPointer(param0));
}

export function sqlite3_memory_used(): Deno.PointerValue /* i64 */ {
  return libwinsqlite3.sqlite3_memory_used();
}

export function sqlite3_memory_highwater(
  resetFlag: number /* i32 */,
): Deno.PointerValue /* i64 */ {
  return libwinsqlite3.sqlite3_memory_highwater(resetFlag);
}

export function sqlite3_randomness(
  N: number /* i32 */,
  P: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libwinsqlite3.sqlite3_randomness(N, util.toPointer(P));
}

export function sqlite3_set_authorizer(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  xAuth: Deno.PointerValue /* isize */,
  pUserData: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_set_authorizer(util.toPointer(param0), xAuth, util.toPointer(pUserData));
}

export function sqlite3_trace(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  xTrace: Deno.PointerValue /* isize */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_trace(util.toPointer(param0), xTrace, util.toPointer(param2)));
}

export function sqlite3_profile(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  xProfile: Deno.PointerValue /* isize */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_profile(util.toPointer(param0), xProfile, util.toPointer(param2)));
}

export function sqlite3_trace_v2(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  uMask: number /* u32 */,
  xCallback: Deno.PointerValue /* isize */,
  pCtx: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_trace_v2(util.toPointer(param0), uMask, xCallback, util.toPointer(pCtx));
}

export function sqlite3_progress_handler(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* i32 */,
  param2: Deno.PointerValue /* isize */,
  param3: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libwinsqlite3.sqlite3_progress_handler(util.toPointer(param0), param1, param2, util.toPointer(param3));
}

export function sqlite3_open(
  filename: string | null /* Windows.Win32.Foundation.PSTR */,
  ppDb: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_open(util.pstrToFfi(filename), util.toPointer(ppDb));
}

export function sqlite3_open16(
  filename: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppDb: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_open16(util.toPointer(filename), util.toPointer(ppDb));
}

export function sqlite3_open_v2(
  filename: string | null /* Windows.Win32.Foundation.PSTR */,
  ppDb: Deno.PointerValue | Uint8Array | null /* ptr */,
  flags: number /* i32 */,
  zVfs: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_open_v2(util.pstrToFfi(filename), util.toPointer(ppDb), flags, util.pstrToFfi(zVfs));
}

export function sqlite3_uri_parameter(
  zFilename: string | null /* Windows.Win32.Foundation.PSTR */,
  zParam: string | null /* Windows.Win32.Foundation.PSTR */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libwinsqlite3.sqlite3_uri_parameter(util.pstrToFfi(zFilename), util.pstrToFfi(zParam)));
}

export function sqlite3_uri_boolean(
  zFile: string | null /* Windows.Win32.Foundation.PSTR */,
  zParam: string | null /* Windows.Win32.Foundation.PSTR */,
  bDefault: number /* i32 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_uri_boolean(util.pstrToFfi(zFile), util.pstrToFfi(zParam), bDefault);
}

export function sqlite3_uri_int64(
  param0: string | null /* Windows.Win32.Foundation.PSTR */,
  param1: string | null /* Windows.Win32.Foundation.PSTR */,
  param2: Deno.PointerValue /* i64 */,
): Deno.PointerValue /* i64 */ {
  return libwinsqlite3.sqlite3_uri_int64(util.pstrToFfi(param0), util.pstrToFfi(param1), param2);
}

export function sqlite3_uri_key(
  zFilename: string | null /* Windows.Win32.Foundation.PSTR */,
  N: number /* i32 */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libwinsqlite3.sqlite3_uri_key(util.pstrToFfi(zFilename), N));
}

export function sqlite3_filename_database(
  param0: string | null /* Windows.Win32.Foundation.PSTR */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libwinsqlite3.sqlite3_filename_database(util.pstrToFfi(param0)));
}

export function sqlite3_filename_journal(
  param0: string | null /* Windows.Win32.Foundation.PSTR */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libwinsqlite3.sqlite3_filename_journal(util.pstrToFfi(param0)));
}

export function sqlite3_filename_wal(
  param0: string | null /* Windows.Win32.Foundation.PSTR */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libwinsqlite3.sqlite3_filename_wal(util.pstrToFfi(param0)));
}

export function sqlite3_database_file_object(
  param0: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_database_file_object(util.pstrToFfi(param0)));
}

export function sqlite3_create_filename(
  zDatabase: string | null /* Windows.Win32.Foundation.PSTR */,
  zJournal: string | null /* Windows.Win32.Foundation.PSTR */,
  zWal: string | null /* Windows.Win32.Foundation.PSTR */,
  nParam: number /* i32 */,
  azParam: Deno.PointerValue | Uint8Array | null /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libwinsqlite3.sqlite3_create_filename(util.pstrToFfi(zDatabase), util.pstrToFfi(zJournal), util.pstrToFfi(zWal), nParam, util.toPointer(azParam)));
}

export function sqlite3_free_filename(
  param0: string | null /* Windows.Win32.Foundation.PSTR */,
): void /* void */ {
  return libwinsqlite3.sqlite3_free_filename(util.pstrToFfi(param0));
}

export function sqlite3_errcode(
  db: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_errcode(util.toPointer(db));
}

export function sqlite3_extended_errcode(
  db: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_extended_errcode(util.toPointer(db));
}

export function sqlite3_errmsg(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libwinsqlite3.sqlite3_errmsg(util.toPointer(param0)));
}

export function sqlite3_errmsg16(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_errmsg16(util.toPointer(param0)));
}

export function sqlite3_errstr(
  param0: number /* i32 */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libwinsqlite3.sqlite3_errstr(param0));
}

export function sqlite3_limit(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  id: number /* i32 */,
  newVal: number /* i32 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_limit(util.toPointer(param0), id, newVal);
}

export function sqlite3_prepare(
  db: Deno.PointerValue | Uint8Array | null /* ptr */,
  zSql: string | null /* Windows.Win32.Foundation.PSTR */,
  nByte: number /* i32 */,
  ppStmt: Deno.PointerValue | Uint8Array | null /* ptr */,
  pzTail: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_prepare(util.toPointer(db), util.pstrToFfi(zSql), nByte, util.toPointer(ppStmt), util.toPointer(pzTail));
}

export function sqlite3_prepare_v2(
  db: Deno.PointerValue | Uint8Array | null /* ptr */,
  zSql: string | null /* Windows.Win32.Foundation.PSTR */,
  nByte: number /* i32 */,
  ppStmt: Deno.PointerValue | Uint8Array | null /* ptr */,
  pzTail: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_prepare_v2(util.toPointer(db), util.pstrToFfi(zSql), nByte, util.toPointer(ppStmt), util.toPointer(pzTail));
}

export function sqlite3_prepare_v3(
  db: Deno.PointerValue | Uint8Array | null /* ptr */,
  zSql: string | null /* Windows.Win32.Foundation.PSTR */,
  nByte: number /* i32 */,
  prepFlags: number /* u32 */,
  ppStmt: Deno.PointerValue | Uint8Array | null /* ptr */,
  pzTail: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_prepare_v3(util.toPointer(db), util.pstrToFfi(zSql), nByte, prepFlags, util.toPointer(ppStmt), util.toPointer(pzTail));
}

export function sqlite3_prepare16(
  db: Deno.PointerValue | Uint8Array | null /* ptr */,
  zSql: Deno.PointerValue | Uint8Array | null /* ptr */,
  nByte: number /* i32 */,
  ppStmt: Deno.PointerValue | Uint8Array | null /* ptr */,
  pzTail: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_prepare16(util.toPointer(db), util.toPointer(zSql), nByte, util.toPointer(ppStmt), util.toPointer(pzTail));
}

export function sqlite3_prepare16_v2(
  db: Deno.PointerValue | Uint8Array | null /* ptr */,
  zSql: Deno.PointerValue | Uint8Array | null /* ptr */,
  nByte: number /* i32 */,
  ppStmt: Deno.PointerValue | Uint8Array | null /* ptr */,
  pzTail: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_prepare16_v2(util.toPointer(db), util.toPointer(zSql), nByte, util.toPointer(ppStmt), util.toPointer(pzTail));
}

export function sqlite3_prepare16_v3(
  db: Deno.PointerValue | Uint8Array | null /* ptr */,
  zSql: Deno.PointerValue | Uint8Array | null /* ptr */,
  nByte: number /* i32 */,
  prepFlags: number /* u32 */,
  ppStmt: Deno.PointerValue | Uint8Array | null /* ptr */,
  pzTail: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_prepare16_v3(util.toPointer(db), util.toPointer(zSql), nByte, prepFlags, util.toPointer(ppStmt), util.toPointer(pzTail));
}

export function sqlite3_sql(
  pStmt: Deno.PointerValue | Uint8Array | null /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libwinsqlite3.sqlite3_sql(util.toPointer(pStmt)));
}

export function sqlite3_expanded_sql(
  pStmt: Deno.PointerValue | Uint8Array | null /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libwinsqlite3.sqlite3_expanded_sql(util.toPointer(pStmt)));
}

export function sqlite3_stmt_readonly(
  pStmt: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_stmt_readonly(util.toPointer(pStmt));
}

export function sqlite3_stmt_isexplain(
  pStmt: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_stmt_isexplain(util.toPointer(pStmt));
}

export function sqlite3_stmt_busy(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_stmt_busy(util.toPointer(param0));
}

export function sqlite3_bind_blob(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* i32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
  n: number /* i32 */,
  param4: Deno.PointerValue /* isize */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_bind_blob(util.toPointer(param0), param1, util.toPointer(param2), n, param4);
}

export function sqlite3_bind_blob64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* i32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
  param3: Deno.PointerValue /* u64 */,
  param4: Deno.PointerValue /* isize */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_bind_blob64(util.toPointer(param0), param1, util.toPointer(param2), param3, param4);
}

export function sqlite3_bind_double(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* i32 */,
  param2: number /* f64 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_bind_double(util.toPointer(param0), param1, param2);
}

export function sqlite3_bind_int(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* i32 */,
  param2: number /* i32 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_bind_int(util.toPointer(param0), param1, param2);
}

export function sqlite3_bind_int64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* i32 */,
  param2: Deno.PointerValue /* i64 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_bind_int64(util.toPointer(param0), param1, param2);
}

export function sqlite3_bind_null(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* i32 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_bind_null(util.toPointer(param0), param1);
}

export function sqlite3_bind_text(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* i32 */,
  param2: string | null /* Windows.Win32.Foundation.PSTR */,
  param3: number /* i32 */,
  param4: Deno.PointerValue /* isize */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_bind_text(util.toPointer(param0), param1, util.pstrToFfi(param2), param3, param4);
}

export function sqlite3_bind_text16(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* i32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
  param3: number /* i32 */,
  param4: Deno.PointerValue /* isize */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_bind_text16(util.toPointer(param0), param1, util.toPointer(param2), param3, param4);
}

export function sqlite3_bind_text64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* i32 */,
  param2: string | null /* Windows.Win32.Foundation.PSTR */,
  param3: Deno.PointerValue /* u64 */,
  param4: Deno.PointerValue /* isize */,
  encoding: number /* u8 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_bind_text64(util.toPointer(param0), param1, util.pstrToFfi(param2), param3, param4, encoding);
}

export function sqlite3_bind_value(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* i32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_bind_value(util.toPointer(param0), param1, util.toPointer(param2));
}

export function sqlite3_bind_pointer(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* i32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
  param3: string | null /* Windows.Win32.Foundation.PSTR */,
  param4: Deno.PointerValue /* isize */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_bind_pointer(util.toPointer(param0), param1, util.toPointer(param2), util.pstrToFfi(param3), param4);
}

export function sqlite3_bind_zeroblob(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* i32 */,
  n: number /* i32 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_bind_zeroblob(util.toPointer(param0), param1, n);
}

export function sqlite3_bind_zeroblob64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* i32 */,
  param2: Deno.PointerValue /* u64 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_bind_zeroblob64(util.toPointer(param0), param1, param2);
}

export function sqlite3_bind_parameter_count(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_bind_parameter_count(util.toPointer(param0));
}

export function sqlite3_bind_parameter_name(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* i32 */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libwinsqlite3.sqlite3_bind_parameter_name(util.toPointer(param0), param1));
}

export function sqlite3_bind_parameter_index(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  zName: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_bind_parameter_index(util.toPointer(param0), util.pstrToFfi(zName));
}

export function sqlite3_clear_bindings(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_clear_bindings(util.toPointer(param0));
}

export function sqlite3_column_count(
  pStmt: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_column_count(util.toPointer(pStmt));
}

export function sqlite3_column_name(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  N: number /* i32 */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libwinsqlite3.sqlite3_column_name(util.toPointer(param0), N));
}

export function sqlite3_column_name16(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  N: number /* i32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_column_name16(util.toPointer(param0), N));
}

export function sqlite3_column_database_name(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* i32 */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libwinsqlite3.sqlite3_column_database_name(util.toPointer(param0), param1));
}

export function sqlite3_column_database_name16(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* i32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_column_database_name16(util.toPointer(param0), param1));
}

export function sqlite3_column_table_name(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* i32 */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libwinsqlite3.sqlite3_column_table_name(util.toPointer(param0), param1));
}

export function sqlite3_column_table_name16(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* i32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_column_table_name16(util.toPointer(param0), param1));
}

export function sqlite3_column_origin_name(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* i32 */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libwinsqlite3.sqlite3_column_origin_name(util.toPointer(param0), param1));
}

export function sqlite3_column_origin_name16(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* i32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_column_origin_name16(util.toPointer(param0), param1));
}

export function sqlite3_column_decltype(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* i32 */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libwinsqlite3.sqlite3_column_decltype(util.toPointer(param0), param1));
}

export function sqlite3_column_decltype16(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* i32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_column_decltype16(util.toPointer(param0), param1));
}

export function sqlite3_step(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_step(util.toPointer(param0));
}

export function sqlite3_data_count(
  pStmt: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_data_count(util.toPointer(pStmt));
}

export function sqlite3_column_blob(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  iCol: number /* i32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_column_blob(util.toPointer(param0), iCol));
}

export function sqlite3_column_double(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  iCol: number /* i32 */,
): number /* f64 */ {
  return libwinsqlite3.sqlite3_column_double(util.toPointer(param0), iCol);
}

export function sqlite3_column_int(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  iCol: number /* i32 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_column_int(util.toPointer(param0), iCol);
}

export function sqlite3_column_int64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  iCol: number /* i32 */,
): Deno.PointerValue /* i64 */ {
  return libwinsqlite3.sqlite3_column_int64(util.toPointer(param0), iCol);
}

export function sqlite3_column_text(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  iCol: number /* i32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_column_text(util.toPointer(param0), iCol));
}

export function sqlite3_column_text16(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  iCol: number /* i32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_column_text16(util.toPointer(param0), iCol));
}

export function sqlite3_column_value(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  iCol: number /* i32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_column_value(util.toPointer(param0), iCol));
}

export function sqlite3_column_bytes(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  iCol: number /* i32 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_column_bytes(util.toPointer(param0), iCol);
}

export function sqlite3_column_bytes16(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  iCol: number /* i32 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_column_bytes16(util.toPointer(param0), iCol);
}

export function sqlite3_column_type(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  iCol: number /* i32 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_column_type(util.toPointer(param0), iCol);
}

export function sqlite3_finalize(
  pStmt: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_finalize(util.toPointer(pStmt));
}

export function sqlite3_reset(
  pStmt: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_reset(util.toPointer(pStmt));
}

export function sqlite3_create_function(
  db: Deno.PointerValue | Uint8Array | null /* ptr */,
  zFunctionName: string | null /* Windows.Win32.Foundation.PSTR */,
  nArg: number /* i32 */,
  eTextRep: number /* i32 */,
  pApp: Deno.PointerValue | Uint8Array | null /* ptr */,
  xFunc: Deno.PointerValue /* isize */,
  xStep: Deno.PointerValue /* isize */,
  xFinal: Deno.PointerValue /* isize */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_create_function(util.toPointer(db), util.pstrToFfi(zFunctionName), nArg, eTextRep, util.toPointer(pApp), xFunc, xStep, xFinal);
}

export function sqlite3_create_function16(
  db: Deno.PointerValue | Uint8Array | null /* ptr */,
  zFunctionName: Deno.PointerValue | Uint8Array | null /* ptr */,
  nArg: number /* i32 */,
  eTextRep: number /* i32 */,
  pApp: Deno.PointerValue | Uint8Array | null /* ptr */,
  xFunc: Deno.PointerValue /* isize */,
  xStep: Deno.PointerValue /* isize */,
  xFinal: Deno.PointerValue /* isize */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_create_function16(util.toPointer(db), util.toPointer(zFunctionName), nArg, eTextRep, util.toPointer(pApp), xFunc, xStep, xFinal);
}

export function sqlite3_create_function_v2(
  db: Deno.PointerValue | Uint8Array | null /* ptr */,
  zFunctionName: string | null /* Windows.Win32.Foundation.PSTR */,
  nArg: number /* i32 */,
  eTextRep: number /* i32 */,
  pApp: Deno.PointerValue | Uint8Array | null /* ptr */,
  xFunc: Deno.PointerValue /* isize */,
  xStep: Deno.PointerValue /* isize */,
  xFinal: Deno.PointerValue /* isize */,
  xDestroy: Deno.PointerValue /* isize */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_create_function_v2(util.toPointer(db), util.pstrToFfi(zFunctionName), nArg, eTextRep, util.toPointer(pApp), xFunc, xStep, xFinal, xDestroy);
}

export function sqlite3_create_window_function(
  db: Deno.PointerValue | Uint8Array | null /* ptr */,
  zFunctionName: string | null /* Windows.Win32.Foundation.PSTR */,
  nArg: number /* i32 */,
  eTextRep: number /* i32 */,
  pApp: Deno.PointerValue | Uint8Array | null /* ptr */,
  xStep: Deno.PointerValue /* isize */,
  xFinal: Deno.PointerValue /* isize */,
  xValue: Deno.PointerValue /* isize */,
  xInverse: Deno.PointerValue /* isize */,
  xDestroy: Deno.PointerValue /* isize */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_create_window_function(util.toPointer(db), util.pstrToFfi(zFunctionName), nArg, eTextRep, util.toPointer(pApp), xStep, xFinal, xValue, xInverse, xDestroy);
}

export function sqlite3_aggregate_count(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_aggregate_count(util.toPointer(param0));
}

export function sqlite3_expired(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_expired(util.toPointer(param0));
}

export function sqlite3_transfer_bindings(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_transfer_bindings(util.toPointer(param0), util.toPointer(param1));
}

export function sqlite3_global_recover(): number /* i32 */ {
  return libwinsqlite3.sqlite3_global_recover();
}

export function sqlite3_thread_cleanup(): void /* void */ {
  return libwinsqlite3.sqlite3_thread_cleanup();
}

export function sqlite3_memory_alarm(
  param0: Deno.PointerValue /* isize */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue /* i64 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_memory_alarm(param0, util.toPointer(param1), param2);
}

export function sqlite3_value_blob(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_value_blob(util.toPointer(param0)));
}

export function sqlite3_value_double(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* f64 */ {
  return libwinsqlite3.sqlite3_value_double(util.toPointer(param0));
}

export function sqlite3_value_int(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_value_int(util.toPointer(param0));
}

export function sqlite3_value_int64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue /* i64 */ {
  return libwinsqlite3.sqlite3_value_int64(util.toPointer(param0));
}

export function sqlite3_value_pointer(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_value_pointer(util.toPointer(param0), util.pstrToFfi(param1)));
}

export function sqlite3_value_text(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_value_text(util.toPointer(param0)));
}

export function sqlite3_value_text16(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_value_text16(util.toPointer(param0)));
}

export function sqlite3_value_text16le(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_value_text16le(util.toPointer(param0)));
}

export function sqlite3_value_text16be(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_value_text16be(util.toPointer(param0)));
}

export function sqlite3_value_bytes(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_value_bytes(util.toPointer(param0));
}

export function sqlite3_value_bytes16(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_value_bytes16(util.toPointer(param0));
}

export function sqlite3_value_type(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_value_type(util.toPointer(param0));
}

export function sqlite3_value_numeric_type(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_value_numeric_type(util.toPointer(param0));
}

export function sqlite3_value_nochange(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_value_nochange(util.toPointer(param0));
}

export function sqlite3_value_frombind(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_value_frombind(util.toPointer(param0));
}

export function sqlite3_value_subtype(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libwinsqlite3.sqlite3_value_subtype(util.toPointer(param0));
}

export function sqlite3_value_dup(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_value_dup(util.toPointer(param0)));
}

export function sqlite3_value_free(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libwinsqlite3.sqlite3_value_free(util.toPointer(param0));
}

export function sqlite3_aggregate_context(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  nBytes: number /* i32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_aggregate_context(util.toPointer(param0), nBytes));
}

export function sqlite3_user_data(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_user_data(util.toPointer(param0)));
}

export function sqlite3_context_db_handle(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_context_db_handle(util.toPointer(param0)));
}

export function sqlite3_get_auxdata(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  N: number /* i32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_get_auxdata(util.toPointer(param0), N));
}

export function sqlite3_set_auxdata(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  N: number /* i32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
  param3: Deno.PointerValue /* isize */,
): void /* void */ {
  return libwinsqlite3.sqlite3_set_auxdata(util.toPointer(param0), N, util.toPointer(param2), param3);
}

export function sqlite3_result_blob(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: number /* i32 */,
  param3: Deno.PointerValue /* isize */,
): void /* void */ {
  return libwinsqlite3.sqlite3_result_blob(util.toPointer(param0), util.toPointer(param1), param2, param3);
}

export function sqlite3_result_blob64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue /* u64 */,
  param3: Deno.PointerValue /* isize */,
): void /* void */ {
  return libwinsqlite3.sqlite3_result_blob64(util.toPointer(param0), util.toPointer(param1), param2, param3);
}

export function sqlite3_result_double(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* f64 */,
): void /* void */ {
  return libwinsqlite3.sqlite3_result_double(util.toPointer(param0), param1);
}

export function sqlite3_result_error(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: string | null /* Windows.Win32.Foundation.PSTR */,
  param2: number /* i32 */,
): void /* void */ {
  return libwinsqlite3.sqlite3_result_error(util.toPointer(param0), util.pstrToFfi(param1), param2);
}

export function sqlite3_result_error16(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: number /* i32 */,
): void /* void */ {
  return libwinsqlite3.sqlite3_result_error16(util.toPointer(param0), util.toPointer(param1), param2);
}

export function sqlite3_result_error_toobig(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libwinsqlite3.sqlite3_result_error_toobig(util.toPointer(param0));
}

export function sqlite3_result_error_nomem(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libwinsqlite3.sqlite3_result_error_nomem(util.toPointer(param0));
}

export function sqlite3_result_error_code(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* i32 */,
): void /* void */ {
  return libwinsqlite3.sqlite3_result_error_code(util.toPointer(param0), param1);
}

export function sqlite3_result_int(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* i32 */,
): void /* void */ {
  return libwinsqlite3.sqlite3_result_int(util.toPointer(param0), param1);
}

export function sqlite3_result_int64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue /* i64 */,
): void /* void */ {
  return libwinsqlite3.sqlite3_result_int64(util.toPointer(param0), param1);
}

export function sqlite3_result_null(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libwinsqlite3.sqlite3_result_null(util.toPointer(param0));
}

export function sqlite3_result_text(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: string | null /* Windows.Win32.Foundation.PSTR */,
  param2: number /* i32 */,
  param3: Deno.PointerValue /* isize */,
): void /* void */ {
  return libwinsqlite3.sqlite3_result_text(util.toPointer(param0), util.pstrToFfi(param1), param2, param3);
}

export function sqlite3_result_text64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: string | null /* Windows.Win32.Foundation.PSTR */,
  param2: Deno.PointerValue /* u64 */,
  param3: Deno.PointerValue /* isize */,
  encoding: number /* u8 */,
): void /* void */ {
  return libwinsqlite3.sqlite3_result_text64(util.toPointer(param0), util.pstrToFfi(param1), param2, param3, encoding);
}

export function sqlite3_result_text16(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: number /* i32 */,
  param3: Deno.PointerValue /* isize */,
): void /* void */ {
  return libwinsqlite3.sqlite3_result_text16(util.toPointer(param0), util.toPointer(param1), param2, param3);
}

export function sqlite3_result_text16le(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: number /* i32 */,
  param3: Deno.PointerValue /* isize */,
): void /* void */ {
  return libwinsqlite3.sqlite3_result_text16le(util.toPointer(param0), util.toPointer(param1), param2, param3);
}

export function sqlite3_result_text16be(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: number /* i32 */,
  param3: Deno.PointerValue /* isize */,
): void /* void */ {
  return libwinsqlite3.sqlite3_result_text16be(util.toPointer(param0), util.toPointer(param1), param2, param3);
}

export function sqlite3_result_value(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libwinsqlite3.sqlite3_result_value(util.toPointer(param0), util.toPointer(param1));
}

export function sqlite3_result_pointer(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: string | null /* Windows.Win32.Foundation.PSTR */,
  param3: Deno.PointerValue /* isize */,
): void /* void */ {
  return libwinsqlite3.sqlite3_result_pointer(util.toPointer(param0), util.toPointer(param1), util.pstrToFfi(param2), param3);
}

export function sqlite3_result_zeroblob(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  n: number /* i32 */,
): void /* void */ {
  return libwinsqlite3.sqlite3_result_zeroblob(util.toPointer(param0), n);
}

export function sqlite3_result_zeroblob64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  n: Deno.PointerValue /* u64 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_result_zeroblob64(util.toPointer(param0), n);
}

export function sqlite3_result_subtype(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* u32 */,
): void /* void */ {
  return libwinsqlite3.sqlite3_result_subtype(util.toPointer(param0), param1);
}

export function sqlite3_create_collation(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  zName: string | null /* Windows.Win32.Foundation.PSTR */,
  eTextRep: number /* i32 */,
  pArg: Deno.PointerValue | Uint8Array | null /* ptr */,
  xCompare: Deno.PointerValue /* isize */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_create_collation(util.toPointer(param0), util.pstrToFfi(zName), eTextRep, util.toPointer(pArg), xCompare);
}

export function sqlite3_create_collation_v2(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  zName: string | null /* Windows.Win32.Foundation.PSTR */,
  eTextRep: number /* i32 */,
  pArg: Deno.PointerValue | Uint8Array | null /* ptr */,
  xCompare: Deno.PointerValue /* isize */,
  xDestroy: Deno.PointerValue /* isize */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_create_collation_v2(util.toPointer(param0), util.pstrToFfi(zName), eTextRep, util.toPointer(pArg), xCompare, xDestroy);
}

export function sqlite3_create_collation16(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  zName: Deno.PointerValue | Uint8Array | null /* ptr */,
  eTextRep: number /* i32 */,
  pArg: Deno.PointerValue | Uint8Array | null /* ptr */,
  xCompare: Deno.PointerValue /* isize */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_create_collation16(util.toPointer(param0), util.toPointer(zName), eTextRep, util.toPointer(pArg), xCompare);
}

export function sqlite3_collation_needed(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue /* isize */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_collation_needed(util.toPointer(param0), util.toPointer(param1), param2);
}

export function sqlite3_collation_needed16(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue /* isize */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_collation_needed16(util.toPointer(param0), util.toPointer(param1), param2);
}

export function sqlite3_sleep(
  param0: number /* i32 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_sleep(param0);
}

export function sqlite3_win32_set_directory(
  type: number /* u32 */,
  zValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_win32_set_directory(type, util.toPointer(zValue));
}

export function sqlite3_win32_set_directory8(
  type: number /* u32 */,
  zValue: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_win32_set_directory8(type, util.pstrToFfi(zValue));
}

export function sqlite3_win32_set_directory16(
  type: number /* u32 */,
  zValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_win32_set_directory16(type, util.toPointer(zValue));
}

export function sqlite3_get_autocommit(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_get_autocommit(util.toPointer(param0));
}

export function sqlite3_db_handle(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_db_handle(util.toPointer(param0)));
}

export function sqlite3_db_filename(
  db: Deno.PointerValue | Uint8Array | null /* ptr */,
  zDbName: string | null /* Windows.Win32.Foundation.PSTR */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libwinsqlite3.sqlite3_db_filename(util.toPointer(db), util.pstrToFfi(zDbName)));
}

export function sqlite3_db_readonly(
  db: Deno.PointerValue | Uint8Array | null /* ptr */,
  zDbName: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_db_readonly(util.toPointer(db), util.pstrToFfi(zDbName));
}

export function sqlite3_txn_state(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  zSchema: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_txn_state(util.toPointer(param0), util.pstrToFfi(zSchema));
}

export function sqlite3_next_stmt(
  pDb: Deno.PointerValue | Uint8Array | null /* ptr */,
  pStmt: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_next_stmt(util.toPointer(pDb), util.toPointer(pStmt)));
}

export function sqlite3_commit_hook(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue /* isize */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_commit_hook(util.toPointer(param0), param1, util.toPointer(param2)));
}

export function sqlite3_rollback_hook(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue /* isize */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_rollback_hook(util.toPointer(param0), param1, util.toPointer(param2)));
}

export function sqlite3_update_hook(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue /* isize */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_update_hook(util.toPointer(param0), param1, util.toPointer(param2)));
}

export function sqlite3_enable_shared_cache(
  param0: number /* i32 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_enable_shared_cache(param0);
}

export function sqlite3_release_memory(
  param0: number /* i32 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_release_memory(param0);
}

export function sqlite3_db_release_memory(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_db_release_memory(util.toPointer(param0));
}

export function sqlite3_soft_heap_limit64(
  N: Deno.PointerValue /* i64 */,
): Deno.PointerValue /* i64 */ {
  return libwinsqlite3.sqlite3_soft_heap_limit64(N);
}

export function sqlite3_hard_heap_limit64(
  N: Deno.PointerValue /* i64 */,
): Deno.PointerValue /* i64 */ {
  return libwinsqlite3.sqlite3_hard_heap_limit64(N);
}

export function sqlite3_soft_heap_limit(
  N: number /* i32 */,
): void /* void */ {
  return libwinsqlite3.sqlite3_soft_heap_limit(N);
}

export function sqlite3_table_column_metadata(
  db: Deno.PointerValue | Uint8Array | null /* ptr */,
  zDbName: string | null /* Windows.Win32.Foundation.PSTR */,
  zTableName: string | null /* Windows.Win32.Foundation.PSTR */,
  zColumnName: string | null /* Windows.Win32.Foundation.PSTR */,
  pzDataType: Deno.PointerValue | Uint8Array | null /* ptr */,
  pzCollSeq: Deno.PointerValue | Uint8Array | null /* ptr */,
  pNotNull: Deno.PointerValue | Uint8Array | null /* ptr */,
  pPrimaryKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  pAutoinc: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_table_column_metadata(util.toPointer(db), util.pstrToFfi(zDbName), util.pstrToFfi(zTableName), util.pstrToFfi(zColumnName), util.toPointer(pzDataType), util.toPointer(pzCollSeq), util.toPointer(pNotNull), util.toPointer(pPrimaryKey), util.toPointer(pAutoinc));
}

export function sqlite3_load_extension(
  db: Deno.PointerValue | Uint8Array | null /* ptr */,
  zFile: string | null /* Windows.Win32.Foundation.PSTR */,
  zProc: string | null /* Windows.Win32.Foundation.PSTR */,
  pzErrMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_load_extension(util.toPointer(db), util.pstrToFfi(zFile), util.pstrToFfi(zProc), util.toPointer(pzErrMsg));
}

export function sqlite3_enable_load_extension(
  db: Deno.PointerValue | Uint8Array | null /* ptr */,
  onoff: number /* i32 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_enable_load_extension(util.toPointer(db), onoff);
}

export function sqlite3_auto_extension(
  xEntryPoint: Deno.PointerValue /* isize */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_auto_extension(xEntryPoint);
}

export function sqlite3_cancel_auto_extension(
  xEntryPoint: Deno.PointerValue /* isize */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_cancel_auto_extension(xEntryPoint);
}

export function sqlite3_reset_auto_extension(): void /* void */ {
  return libwinsqlite3.sqlite3_reset_auto_extension();
}

export function sqlite3_create_module(
  db: Deno.PointerValue | Uint8Array | null /* ptr */,
  zName: string | null /* Windows.Win32.Foundation.PSTR */,
  p: Deno.PointerValue | Uint8Array | null /* ptr */,
  pClientData: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_create_module(util.toPointer(db), util.pstrToFfi(zName), util.toPointer(p), util.toPointer(pClientData));
}

export function sqlite3_create_module_v2(
  db: Deno.PointerValue | Uint8Array | null /* ptr */,
  zName: string | null /* Windows.Win32.Foundation.PSTR */,
  p: Deno.PointerValue | Uint8Array | null /* ptr */,
  pClientData: Deno.PointerValue | Uint8Array | null /* ptr */,
  xDestroy: Deno.PointerValue /* isize */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_create_module_v2(util.toPointer(db), util.pstrToFfi(zName), util.toPointer(p), util.toPointer(pClientData), xDestroy);
}

export function sqlite3_drop_modules(
  db: Deno.PointerValue | Uint8Array | null /* ptr */,
  azKeep: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_drop_modules(util.toPointer(db), util.toPointer(azKeep));
}

export function sqlite3_declare_vtab(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  zSQL: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_declare_vtab(util.toPointer(param0), util.pstrToFfi(zSQL));
}

export function sqlite3_overload_function(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  zFuncName: string | null /* Windows.Win32.Foundation.PSTR */,
  nArg: number /* i32 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_overload_function(util.toPointer(param0), util.pstrToFfi(zFuncName), nArg);
}

export function sqlite3_blob_open(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  zDb: string | null /* Windows.Win32.Foundation.PSTR */,
  zTable: string | null /* Windows.Win32.Foundation.PSTR */,
  zColumn: string | null /* Windows.Win32.Foundation.PSTR */,
  iRow: Deno.PointerValue /* i64 */,
  flags: number /* i32 */,
  ppBlob: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_blob_open(util.toPointer(param0), util.pstrToFfi(zDb), util.pstrToFfi(zTable), util.pstrToFfi(zColumn), iRow, flags, util.toPointer(ppBlob));
}

export function sqlite3_blob_reopen(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue /* i64 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_blob_reopen(util.toPointer(param0), param1);
}

export function sqlite3_blob_close(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_blob_close(util.toPointer(param0));
}

export function sqlite3_blob_bytes(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_blob_bytes(util.toPointer(param0));
}

export function sqlite3_blob_read(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  Z: Deno.PointerValue | Uint8Array | null /* ptr */,
  N: number /* i32 */,
  iOffset: number /* i32 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_blob_read(util.toPointer(param0), util.toPointer(Z), N, iOffset);
}

export function sqlite3_blob_write(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  z: Deno.PointerValue | Uint8Array | null /* ptr */,
  n: number /* i32 */,
  iOffset: number /* i32 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_blob_write(util.toPointer(param0), util.toPointer(z), n, iOffset);
}

export function sqlite3_vfs_find(
  zVfsName: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_vfs_find(util.pstrToFfi(zVfsName)));
}

export function sqlite3_vfs_register(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  makeDflt: number /* i32 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_vfs_register(util.toPointer(param0), makeDflt);
}

export function sqlite3_vfs_unregister(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_vfs_unregister(util.toPointer(param0));
}

export function sqlite3_mutex_alloc(
  param0: number /* i32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_mutex_alloc(param0));
}

export function sqlite3_mutex_free(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libwinsqlite3.sqlite3_mutex_free(util.toPointer(param0));
}

export function sqlite3_mutex_enter(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libwinsqlite3.sqlite3_mutex_enter(util.toPointer(param0));
}

export function sqlite3_mutex_try(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_mutex_try(util.toPointer(param0));
}

export function sqlite3_mutex_leave(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libwinsqlite3.sqlite3_mutex_leave(util.toPointer(param0));
}

export function sqlite3_db_mutex(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_db_mutex(util.toPointer(param0)));
}

export function sqlite3_file_control(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  zDbName: string | null /* Windows.Win32.Foundation.PSTR */,
  op: number /* i32 */,
  param3: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_file_control(util.toPointer(param0), util.pstrToFfi(zDbName), op, util.toPointer(param3));
}

export function sqlite3_test_control(
  op: number /* i32 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_test_control(op);
}

export function sqlite3_keyword_count(): number /* i32 */ {
  return libwinsqlite3.sqlite3_keyword_count();
}

export function sqlite3_keyword_name(
  param0: number /* i32 */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_keyword_name(param0, util.toPointer(param1), util.toPointer(param2));
}

export function sqlite3_keyword_check(
  param0: string | null /* Windows.Win32.Foundation.PSTR */,
  param1: number /* i32 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_keyword_check(util.pstrToFfi(param0), param1);
}

export function sqlite3_str_new(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_str_new(util.toPointer(param0)));
}

export function sqlite3_str_finish(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libwinsqlite3.sqlite3_str_finish(util.toPointer(param0)));
}

export function sqlite3_str_appendf(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  zFormat: string | null /* Windows.Win32.Foundation.PSTR */,
): void /* void */ {
  return libwinsqlite3.sqlite3_str_appendf(util.toPointer(param0), util.pstrToFfi(zFormat));
}

export function sqlite3_str_vappendf(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  zFormat: string | null /* Windows.Win32.Foundation.PSTR */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libwinsqlite3.sqlite3_str_vappendf(util.toPointer(param0), util.pstrToFfi(zFormat), util.toPointer(param2));
}

export function sqlite3_str_append(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  zIn: string | null /* Windows.Win32.Foundation.PSTR */,
  N: number /* i32 */,
): void /* void */ {
  return libwinsqlite3.sqlite3_str_append(util.toPointer(param0), util.pstrToFfi(zIn), N);
}

export function sqlite3_str_appendall(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  zIn: string | null /* Windows.Win32.Foundation.PSTR */,
): void /* void */ {
  return libwinsqlite3.sqlite3_str_appendall(util.toPointer(param0), util.pstrToFfi(zIn));
}

export function sqlite3_str_appendchar(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  N: number /* i32 */,
  C: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.CHAR */,
): void /* void */ {
  return libwinsqlite3.sqlite3_str_appendchar(util.toPointer(param0), N, util.toPointer(C));
}

export function sqlite3_str_reset(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libwinsqlite3.sqlite3_str_reset(util.toPointer(param0));
}

export function sqlite3_str_errcode(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_str_errcode(util.toPointer(param0));
}

export function sqlite3_str_length(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_str_length(util.toPointer(param0));
}

export function sqlite3_str_value(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libwinsqlite3.sqlite3_str_value(util.toPointer(param0)));
}

export function sqlite3_status(
  op: number /* i32 */,
  pCurrent: Deno.PointerValue | Uint8Array | null /* ptr */,
  pHighwater: Deno.PointerValue | Uint8Array | null /* ptr */,
  resetFlag: number /* i32 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_status(op, util.toPointer(pCurrent), util.toPointer(pHighwater), resetFlag);
}

export function sqlite3_status64(
  op: number /* i32 */,
  pCurrent: Deno.PointerValue | Uint8Array | null /* ptr */,
  pHighwater: Deno.PointerValue | Uint8Array | null /* ptr */,
  resetFlag: number /* i32 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_status64(op, util.toPointer(pCurrent), util.toPointer(pHighwater), resetFlag);
}

export function sqlite3_db_status(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  op: number /* i32 */,
  pCur: Deno.PointerValue | Uint8Array | null /* ptr */,
  pHiwtr: Deno.PointerValue | Uint8Array | null /* ptr */,
  resetFlg: number /* i32 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_db_status(util.toPointer(param0), op, util.toPointer(pCur), util.toPointer(pHiwtr), resetFlg);
}

export function sqlite3_stmt_status(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  op: number /* i32 */,
  resetFlg: number /* i32 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_stmt_status(util.toPointer(param0), op, resetFlg);
}

export function sqlite3_backup_init(
  pDest: Deno.PointerValue | Uint8Array | null /* ptr */,
  zDestName: string | null /* Windows.Win32.Foundation.PSTR */,
  pSource: Deno.PointerValue | Uint8Array | null /* ptr */,
  zSourceName: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_backup_init(util.toPointer(pDest), util.pstrToFfi(zDestName), util.toPointer(pSource), util.pstrToFfi(zSourceName)));
}

export function sqlite3_backup_step(
  p: Deno.PointerValue | Uint8Array | null /* ptr */,
  nPage: number /* i32 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_backup_step(util.toPointer(p), nPage);
}

export function sqlite3_backup_finish(
  p: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_backup_finish(util.toPointer(p));
}

export function sqlite3_backup_remaining(
  p: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_backup_remaining(util.toPointer(p));
}

export function sqlite3_backup_pagecount(
  p: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_backup_pagecount(util.toPointer(p));
}

export function sqlite3_stricmp(
  param0: string | null /* Windows.Win32.Foundation.PSTR */,
  param1: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_stricmp(util.pstrToFfi(param0), util.pstrToFfi(param1));
}

export function sqlite3_strnicmp(
  param0: string | null /* Windows.Win32.Foundation.PSTR */,
  param1: string | null /* Windows.Win32.Foundation.PSTR */,
  param2: number /* i32 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_strnicmp(util.pstrToFfi(param0), util.pstrToFfi(param1), param2);
}

export function sqlite3_strglob(
  zGlob: string | null /* Windows.Win32.Foundation.PSTR */,
  zStr: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_strglob(util.pstrToFfi(zGlob), util.pstrToFfi(zStr));
}

export function sqlite3_strlike(
  zGlob: string | null /* Windows.Win32.Foundation.PSTR */,
  zStr: string | null /* Windows.Win32.Foundation.PSTR */,
  cEsc: number /* u32 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_strlike(util.pstrToFfi(zGlob), util.pstrToFfi(zStr), cEsc);
}

export function sqlite3_log(
  iErrCode: number /* i32 */,
  zFormat: string | null /* Windows.Win32.Foundation.PSTR */,
): void /* void */ {
  return libwinsqlite3.sqlite3_log(iErrCode, util.pstrToFfi(zFormat));
}

export function sqlite3_wal_hook(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue /* isize */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_wal_hook(util.toPointer(param0), param1, util.toPointer(param2)));
}

export function sqlite3_wal_autocheckpoint(
  db: Deno.PointerValue | Uint8Array | null /* ptr */,
  N: number /* i32 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_wal_autocheckpoint(util.toPointer(db), N);
}

export function sqlite3_wal_checkpoint(
  db: Deno.PointerValue | Uint8Array | null /* ptr */,
  zDb: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_wal_checkpoint(util.toPointer(db), util.pstrToFfi(zDb));
}

export function sqlite3_wal_checkpoint_v2(
  db: Deno.PointerValue | Uint8Array | null /* ptr */,
  zDb: string | null /* Windows.Win32.Foundation.PSTR */,
  eMode: number /* i32 */,
  pnLog: Deno.PointerValue | Uint8Array | null /* ptr */,
  pnCkpt: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_wal_checkpoint_v2(util.toPointer(db), util.pstrToFfi(zDb), eMode, util.toPointer(pnLog), util.toPointer(pnCkpt));
}

export function sqlite3_vtab_config(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  op: number /* i32 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_vtab_config(util.toPointer(param0), op);
}

export function sqlite3_vtab_on_conflict(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_vtab_on_conflict(util.toPointer(param0));
}

export function sqlite3_vtab_nochange(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_vtab_nochange(util.toPointer(param0));
}

export function sqlite3_vtab_collation(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* i32 */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libwinsqlite3.sqlite3_vtab_collation(util.toPointer(param0), param1));
}

export function sqlite3_db_cacheflush(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_db_cacheflush(util.toPointer(param0));
}

export function sqlite3_system_errno(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_system_errno(util.toPointer(param0));
}

export function sqlite3_serialize(
  db: Deno.PointerValue | Uint8Array | null /* ptr */,
  zSchema: string | null /* Windows.Win32.Foundation.PSTR */,
  piSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  mFlags: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libwinsqlite3.sqlite3_serialize(util.toPointer(db), util.pstrToFfi(zSchema), util.toPointer(piSize), mFlags));
}

export function sqlite3_deserialize(
  db: Deno.PointerValue | Uint8Array | null /* ptr */,
  zSchema: string | null /* Windows.Win32.Foundation.PSTR */,
  pData: Deno.PointerValue | Uint8Array | null /* ptr */,
  szDb: Deno.PointerValue /* i64 */,
  szBuf: Deno.PointerValue /* i64 */,
  mFlags: number /* u32 */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_deserialize(util.toPointer(db), util.pstrToFfi(zSchema), util.toPointer(pData), szDb, szBuf, mFlags);
}

export function sqlite3_rtree_geometry_callback(
  db: Deno.PointerValue | Uint8Array | null /* ptr */,
  zGeom: string | null /* Windows.Win32.Foundation.PSTR */,
  xGeom: Deno.PointerValue /* isize */,
  pContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_rtree_geometry_callback(util.toPointer(db), util.pstrToFfi(zGeom), xGeom, util.toPointer(pContext));
}

export function sqlite3_rtree_query_callback(
  db: Deno.PointerValue | Uint8Array | null /* ptr */,
  zQueryFunc: string | null /* Windows.Win32.Foundation.PSTR */,
  xQueryFunc: Deno.PointerValue /* isize */,
  pContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  xDestructor: Deno.PointerValue /* isize */,
): number /* i32 */ {
  return libwinsqlite3.sqlite3_rtree_query_callback(util.toPointer(db), util.pstrToFfi(zQueryFunc), xQueryFunc, util.toPointer(pContext), xDestructor);
}

