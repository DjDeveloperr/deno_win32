/// Auto-generated by Deno Win32: Windows.Win32.System.JobObjects.Apis

import * as util from "../../util.ts";

// Enums
export type JOB_OBJECT_LIMIT = number;
export type JOB_OBJECT_UILIMIT = number;
export type JOB_OBJECT_SECURITY = number;
export type JOB_OBJECT_CPU_RATE_CONTROL = number;
export type JOB_OBJECT_TERMINATE_AT_END_ACTION = number;
export type JOB_OBJECT_IO_RATE_CONTROL_FLAGS = number;
export type JOBOBJECT_RATE_CONTROL_TOLERANCE = number;
export type JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL = number;
export type JOB_OBJECT_NET_RATE_CONTROL_FLAGS = number;
export type JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS = number;
export type JOBOBJECTINFOCLASS = number;

// Constants
export const JOB_OBJECT_LIMIT_WORKINGSET = 1;
export const JOB_OBJECT_LIMIT_PROCESS_TIME = 2;
export const JOB_OBJECT_LIMIT_JOB_TIME = 4;
export const JOB_OBJECT_LIMIT_ACTIVE_PROCESS = 8;
export const JOB_OBJECT_LIMIT_AFFINITY = 16;
export const JOB_OBJECT_LIMIT_PRIORITY_CLASS = 32;
export const JOB_OBJECT_LIMIT_PRESERVE_JOB_TIME = 64;
export const JOB_OBJECT_LIMIT_SCHEDULING_CLASS = 128;
export const JOB_OBJECT_LIMIT_PROCESS_MEMORY = 256;
export const JOB_OBJECT_LIMIT_JOB_MEMORY = 512;
export const JOB_OBJECT_LIMIT_JOB_MEMORY_HIGH = 512;
export const JOB_OBJECT_LIMIT_DIE_ON_UNHANDLED_EXCEPTION = 1024;
export const JOB_OBJECT_LIMIT_BREAKAWAY_OK = 2048;
export const JOB_OBJECT_LIMIT_SILENT_BREAKAWAY_OK = 4096;
export const JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE = 8192;
export const JOB_OBJECT_LIMIT_SUBSET_AFFINITY = 16384;
export const JOB_OBJECT_LIMIT_JOB_MEMORY_LOW = 32768;
export const JOB_OBJECT_LIMIT_JOB_READ_BYTES = 65536;
export const JOB_OBJECT_LIMIT_JOB_WRITE_BYTES = 131072;
export const JOB_OBJECT_LIMIT_RATE_CONTROL = 262144;
export const JOB_OBJECT_LIMIT_CPU_RATE_CONTROL = 262144;
export const JOB_OBJECT_LIMIT_IO_RATE_CONTROL = 524288;
export const JOB_OBJECT_LIMIT_NET_RATE_CONTROL = 1048576;
export const JOB_OBJECT_LIMIT_VALID_FLAGS = 524287;
export const JOB_OBJECT_BASIC_LIMIT_VALID_FLAGS = 255;
export const JOB_OBJECT_EXTENDED_LIMIT_VALID_FLAGS = 32767;
export const JOB_OBJECT_NOTIFICATION_LIMIT_VALID_FLAGS = 2064900;
export const JOB_OBJECT_UILIMIT_NONE = 0;
export const JOB_OBJECT_UILIMIT_HANDLES = 1;
export const JOB_OBJECT_UILIMIT_READCLIPBOARD = 2;
export const JOB_OBJECT_UILIMIT_WRITECLIPBOARD = 4;
export const JOB_OBJECT_UILIMIT_SYSTEMPARAMETERS = 8;
export const JOB_OBJECT_UILIMIT_DISPLAYSETTINGS = 16;
export const JOB_OBJECT_UILIMIT_GLOBALATOMS = 32;
export const JOB_OBJECT_UILIMIT_DESKTOP = 64;
export const JOB_OBJECT_UILIMIT_EXITWINDOWS = 128;
export const JOB_OBJECT_SECURITY_NO_ADMIN = 1;
export const JOB_OBJECT_SECURITY_RESTRICTED_TOKEN = 2;
export const JOB_OBJECT_SECURITY_ONLY_TOKEN = 4;
export const JOB_OBJECT_SECURITY_FILTER_TOKENS = 8;
export const JOB_OBJECT_SECURITY_VALID_FLAGS = 15;
export const JOB_OBJECT_CPU_RATE_CONTROL_ENABLE = 1;
export const JOB_OBJECT_CPU_RATE_CONTROL_WEIGHT_BASED = 2;
export const JOB_OBJECT_CPU_RATE_CONTROL_HARD_CAP = 4;
export const JOB_OBJECT_CPU_RATE_CONTROL_NOTIFY = 8;
export const JOB_OBJECT_CPU_RATE_CONTROL_MIN_MAX_RATE = 16;
export const JOB_OBJECT_CPU_RATE_CONTROL_VALID_FLAGS = 31;
export const JOB_OBJECT_TERMINATE_AT_END_OF_JOB = 0;
export const JOB_OBJECT_POST_AT_END_OF_JOB = 1;
export const JOB_OBJECT_IO_RATE_CONTROL_ENABLE = 1;
export const JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME = 2;
export const JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL = 4;
export const JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP = 8;
export const JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS = 15;
export const ToleranceLow = 1;
export const ToleranceMedium = 2;
export const ToleranceHigh = 3;
export const ToleranceIntervalShort = 1;
export const ToleranceIntervalMedium = 2;
export const ToleranceIntervalLong = 3;
export const JOB_OBJECT_NET_RATE_CONTROL_ENABLE = 1;
export const JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH = 2;
export const JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG = 4;
export const JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS = 7;
export const JOBOBJECT_IO_ATTRIBUTION_CONTROL_ENABLE = 1;
export const JOBOBJECT_IO_ATTRIBUTION_CONTROL_DISABLE = 2;
export const JOBOBJECT_IO_ATTRIBUTION_CONTROL_VALID_FLAGS = 3;
export const JobObjectBasicAccountingInformation = 1;
export const JobObjectBasicLimitInformation = 2;
export const JobObjectBasicProcessIdList = 3;
export const JobObjectBasicUIRestrictions = 4;
export const JobObjectSecurityLimitInformation = 5;
export const JobObjectEndOfJobTimeInformation = 6;
export const JobObjectAssociateCompletionPortInformation = 7;
export const JobObjectBasicAndIoAccountingInformation = 8;
export const JobObjectExtendedLimitInformation = 9;
export const JobObjectJobSetInformation = 10;
export const JobObjectGroupInformation = 11;
export const JobObjectNotificationLimitInformation = 12;
export const JobObjectLimitViolationInformation = 13;
export const JobObjectGroupInformationEx = 14;
export const JobObjectCpuRateControlInformation = 15;
export const JobObjectCompletionFilter = 16;
export const JobObjectCompletionCounter = 17;
export const JobObjectReserved1Information = 18;
export const JobObjectReserved2Information = 19;
export const JobObjectReserved3Information = 20;
export const JobObjectReserved4Information = 21;
export const JobObjectReserved5Information = 22;
export const JobObjectReserved6Information = 23;
export const JobObjectReserved7Information = 24;
export const JobObjectReserved8Information = 25;
export const JobObjectReserved9Information = 26;
export const JobObjectReserved10Information = 27;
export const JobObjectReserved11Information = 28;
export const JobObjectReserved12Information = 29;
export const JobObjectReserved13Information = 30;
export const JobObjectReserved14Information = 31;
export const JobObjectNetRateControlInformation = 32;
export const JobObjectNotificationLimitInformation2 = 33;
export const JobObjectLimitViolationInformation2 = 34;
export const JobObjectCreateSilo = 35;
export const JobObjectSiloBasicInformation = 36;
export const JobObjectReserved15Information = 37;
export const JobObjectReserved16Information = 38;
export const JobObjectReserved17Information = 39;
export const JobObjectReserved18Information = 40;
export const JobObjectReserved19Information = 41;
export const JobObjectReserved20Information = 42;
export const JobObjectReserved21Information = 43;
export const JobObjectReserved22Information = 44;
export const JobObjectReserved23Information = 45;
export const JobObjectReserved24Information = 46;
export const JobObjectReserved25Information = 47;
export const MaxJobObjectInfoClass = 48;

// Structs

export type PWSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.System.JobObjects.JOBOBJECT_IO_RATE_CONTROL_INFORMATION (size: 40)
 */
export interface JOBOBJECT_IO_RATE_CONTROL_INFORMATION {
  /** i64 */
  MaxIops: bigint | number;
  /** i64 */
  MaxBandwidth: bigint | number;
  /** i64 */
  ReservationIops: bigint | number;
  /** Windows.Win32.Foundation.PWSTR */
  VolumeName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  BaseIoSize: number;
  /** Windows.Win32.System.JobObjects.JOB_OBJECT_IO_RATE_CONTROL_FLAGS */
  ControlFlags: JOB_OBJECT_IO_RATE_CONTROL_FLAGS;
}

export const sizeofJOBOBJECT_IO_RATE_CONTROL_INFORMATION = 40;

export function allocJOBOBJECT_IO_RATE_CONTROL_INFORMATION(data?: Partial<JOBOBJECT_IO_RATE_CONTROL_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofJOBOBJECT_IO_RATE_CONTROL_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.MaxIops !== undefined) view.setBigInt64(0, BigInt(data.MaxIops), true);
  // 0x08: i64
  if (data?.MaxBandwidth !== undefined) view.setBigInt64(8, BigInt(data.MaxBandwidth), true);
  // 0x10: i64
  if (data?.ReservationIops !== undefined) view.setBigInt64(16, BigInt(data.ReservationIops), true);
  // 0x18: buffer
  if (data?.VolumeName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.VolumeName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: u32
  if (data?.BaseIoSize !== undefined) view.setUint32(32, Number(data.BaseIoSize), true);
  // 0x24: i32
  if (data?.ControlFlags !== undefined) view.setInt32(36, Number(data.ControlFlags), true);
  return buf;
}

export class JOBOBJECT_IO_RATE_CONTROL_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get MaxIops(): bigint | number {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: i64
  get MaxBandwidth(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: i64
  get ReservationIops(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: buffer
  get VolumeName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get BaseIoSize(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: i32
  get ControlFlags(): number {
    return this.view.getInt32(36, true);
  }

  // 0x00: i64
  set MaxIops(value: bigint | number) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: i64
  set MaxBandwidth(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: i64
  set ReservationIops(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: buffer
  set VolumeName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: u32
  set BaseIoSize(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: i32
  set ControlFlags(value: number) {
    this.view.setInt32(36, value, true);
  }
}

export type HANDLE = bigint | number;

/**
 * Windows.Win32.System.JobObjects.JOB_SET_ARRAY (size: 16)
 */
export interface JOB_SET_ARRAY {
  /** Windows.Win32.Foundation.HANDLE */
  JobHandle: Uint8Array | Deno.PointerValue;
  /** u32 */
  MemberLevel: number;
  /** u32 */
  Flags: number;
}

export const sizeofJOB_SET_ARRAY = 16;

export function allocJOB_SET_ARRAY(data?: Partial<JOB_SET_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofJOB_SET_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.JobHandle !== undefined) view.setBigUint64(0, data.JobHandle === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.JobHandle))), true);
  // 0x08: u32
  if (data?.MemberLevel !== undefined) view.setUint32(8, Number(data.MemberLevel), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  return buf;
}

export class JOB_SET_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get JobHandle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get MemberLevel(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Flags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set JobHandle(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set MemberLevel(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Flags(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: bigint | number;
  /** u64 */
  Region: bigint | number;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get Region(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set Alignment(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set Region(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null | Uint8Array | Uint16Array;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class _u_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwValue(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pwszName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwValue(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pwszName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.Foundation.LARGE_INTEGER (size: 24)
 */
export interface LARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue;
  /** i64 */
  QuadPart: bigint | number;
}

export const sizeofLARGE_INTEGER = 24;

export function allocLARGE_INTEGER(data?: Partial<LARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofLARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.u))), true);
  // 0x10: i64
  if (data?.QuadPart !== undefined) view.setBigInt64(16, BigInt(data.QuadPart), true);
  return buf;
}

export class LARGE_INTEGERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get u(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i64
  get QuadPart(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set u(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i64
  set QuadPart(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.JobObjects.JOBOBJECT_BASIC_ACCOUNTING_INFORMATION (size: 48)
 */
export interface JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TotalUserTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TotalKernelTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ThisPeriodTotalUserTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ThisPeriodTotalKernelTime: Uint8Array | Deno.PointerValue;
  /** u32 */
  TotalPageFaultCount: number;
  /** u32 */
  TotalProcesses: number;
  /** u32 */
  ActiveProcesses: number;
  /** u32 */
  TotalTerminatedProcesses: number;
}

export const sizeofJOBOBJECT_BASIC_ACCOUNTING_INFORMATION = 48;

export function allocJOBOBJECT_BASIC_ACCOUNTING_INFORMATION(data?: Partial<JOBOBJECT_BASIC_ACCOUNTING_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofJOBOBJECT_BASIC_ACCOUNTING_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TotalUserTime !== undefined) view.setBigUint64(0, data.TotalUserTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TotalUserTime))), true);
  // 0x08: pointer
  if (data?.TotalKernelTime !== undefined) view.setBigUint64(8, data.TotalKernelTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TotalKernelTime))), true);
  // 0x10: pointer
  if (data?.ThisPeriodTotalUserTime !== undefined) view.setBigUint64(16, data.ThisPeriodTotalUserTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ThisPeriodTotalUserTime))), true);
  // 0x18: pointer
  if (data?.ThisPeriodTotalKernelTime !== undefined) view.setBigUint64(24, data.ThisPeriodTotalKernelTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ThisPeriodTotalKernelTime))), true);
  // 0x20: u32
  if (data?.TotalPageFaultCount !== undefined) view.setUint32(32, Number(data.TotalPageFaultCount), true);
  // 0x24: u32
  if (data?.TotalProcesses !== undefined) view.setUint32(36, Number(data.TotalProcesses), true);
  // 0x28: u32
  if (data?.ActiveProcesses !== undefined) view.setUint32(40, Number(data.ActiveProcesses), true);
  // 0x2c: u32
  if (data?.TotalTerminatedProcesses !== undefined) view.setUint32(44, Number(data.TotalTerminatedProcesses), true);
  return buf;
}

export class JOBOBJECT_BASIC_ACCOUNTING_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get TotalUserTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get TotalKernelTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ThisPeriodTotalUserTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ThisPeriodTotalKernelTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get TotalPageFaultCount(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get TotalProcesses(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get ActiveProcesses(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get TotalTerminatedProcesses(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: pointer
  set TotalUserTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set TotalKernelTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ThisPeriodTotalUserTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ThisPeriodTotalKernelTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set TotalPageFaultCount(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set TotalProcesses(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set ActiveProcesses(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set TotalTerminatedProcesses(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.System.JobObjects.JOBOBJECT_BASIC_LIMIT_INFORMATION (size: 64)
 */
export interface JOBOBJECT_BASIC_LIMIT_INFORMATION {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PerProcessUserTimeLimit: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PerJobUserTimeLimit: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.JobObjects.JOB_OBJECT_LIMIT */
  LimitFlags: JOB_OBJECT_LIMIT;
  /** usize */
  MinimumWorkingSetSize: bigint | number;
  /** usize */
  MaximumWorkingSetSize: bigint | number;
  /** u32 */
  ActiveProcessLimit: number;
  /** usize */
  Affinity: bigint | number;
  /** u32 */
  PriorityClass: number;
  /** u32 */
  SchedulingClass: number;
}

export const sizeofJOBOBJECT_BASIC_LIMIT_INFORMATION = 64;

export function allocJOBOBJECT_BASIC_LIMIT_INFORMATION(data?: Partial<JOBOBJECT_BASIC_LIMIT_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofJOBOBJECT_BASIC_LIMIT_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PerProcessUserTimeLimit !== undefined) view.setBigUint64(0, data.PerProcessUserTimeLimit === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PerProcessUserTimeLimit))), true);
  // 0x08: pointer
  if (data?.PerJobUserTimeLimit !== undefined) view.setBigUint64(8, data.PerJobUserTimeLimit === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PerJobUserTimeLimit))), true);
  // 0x10: u32
  if (data?.LimitFlags !== undefined) view.setUint32(16, Number(data.LimitFlags), true);
  // 0x14: pad4
  // 0x18: usize
  if (data?.MinimumWorkingSetSize !== undefined) view.setBigUint64(24, BigInt(data.MinimumWorkingSetSize), true);
  // 0x20: usize
  if (data?.MaximumWorkingSetSize !== undefined) view.setBigUint64(32, BigInt(data.MaximumWorkingSetSize), true);
  // 0x28: u32
  if (data?.ActiveProcessLimit !== undefined) view.setUint32(40, Number(data.ActiveProcessLimit), true);
  // 0x2c: pad4
  // 0x30: usize
  if (data?.Affinity !== undefined) view.setBigUint64(48, BigInt(data.Affinity), true);
  // 0x38: u32
  if (data?.PriorityClass !== undefined) view.setUint32(56, Number(data.PriorityClass), true);
  // 0x3c: u32
  if (data?.SchedulingClass !== undefined) view.setUint32(60, Number(data.SchedulingClass), true);
  return buf;
}

export class JOBOBJECT_BASIC_LIMIT_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PerProcessUserTimeLimit(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get PerJobUserTimeLimit(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get LimitFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: usize
  get MinimumWorkingSetSize(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: usize
  get MaximumWorkingSetSize(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: u32
  get ActiveProcessLimit(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: usize
  get Affinity(): bigint | number {
    return Number(this.view.getBigUint64(48, true));
  }

  // 0x38: u32
  get PriorityClass(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get SchedulingClass(): number {
    return this.view.getUint32(60, true);
  }

  // 0x00: pointer
  set PerProcessUserTimeLimit(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set PerJobUserTimeLimit(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set LimitFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: usize
  set MinimumWorkingSetSize(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: usize
  set MaximumWorkingSetSize(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: u32
  set ActiveProcessLimit(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: usize
  set Affinity(value: bigint | number) {
    this.view.setBigUint64(48, BigInt(value), true);
  }

  // 0x38: u32
  set PriorityClass(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set SchedulingClass(value: number) {
    this.view.setUint32(60, value, true);
  }
}

/**
 * Windows.Win32.System.Threading.IO_COUNTERS (size: 48)
 */
export interface IO_COUNTERS {
  /** u64 */
  ReadOperationCount: bigint | number;
  /** u64 */
  WriteOperationCount: bigint | number;
  /** u64 */
  OtherOperationCount: bigint | number;
  /** u64 */
  ReadTransferCount: bigint | number;
  /** u64 */
  WriteTransferCount: bigint | number;
  /** u64 */
  OtherTransferCount: bigint | number;
}

export const sizeofIO_COUNTERS = 48;

export function allocIO_COUNTERS(data?: Partial<IO_COUNTERS>): Uint8Array {
  const buf = new Uint8Array(sizeofIO_COUNTERS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.ReadOperationCount !== undefined) view.setBigUint64(0, BigInt(data.ReadOperationCount), true);
  // 0x08: u64
  if (data?.WriteOperationCount !== undefined) view.setBigUint64(8, BigInt(data.WriteOperationCount), true);
  // 0x10: u64
  if (data?.OtherOperationCount !== undefined) view.setBigUint64(16, BigInt(data.OtherOperationCount), true);
  // 0x18: u64
  if (data?.ReadTransferCount !== undefined) view.setBigUint64(24, BigInt(data.ReadTransferCount), true);
  // 0x20: u64
  if (data?.WriteTransferCount !== undefined) view.setBigUint64(32, BigInt(data.WriteTransferCount), true);
  // 0x28: u64
  if (data?.OtherTransferCount !== undefined) view.setBigUint64(40, BigInt(data.OtherTransferCount), true);
  return buf;
}

export class IO_COUNTERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get ReadOperationCount(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get WriteOperationCount(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get OtherOperationCount(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u64
  get ReadTransferCount(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u64
  get WriteTransferCount(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: u64
  get OtherTransferCount(): bigint | number {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x00: u64
  set ReadOperationCount(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set WriteOperationCount(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set OtherOperationCount(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u64
  set ReadTransferCount(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u64
  set WriteTransferCount(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: u64
  set OtherTransferCount(value: bigint | number) {
    this.view.setBigUint64(40, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.JobObjects.JOBOBJECT_EXTENDED_LIMIT_INFORMATION (size: 48)
 */
export interface JOBOBJECT_EXTENDED_LIMIT_INFORMATION {
  /** Windows.Win32.System.JobObjects.JOBOBJECT_BASIC_LIMIT_INFORMATION */
  BasicLimitInformation: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Threading.IO_COUNTERS */
  IoInfo: Uint8Array | Deno.PointerValue;
  /** usize */
  ProcessMemoryLimit: bigint | number;
  /** usize */
  JobMemoryLimit: bigint | number;
  /** usize */
  PeakProcessMemoryUsed: bigint | number;
  /** usize */
  PeakJobMemoryUsed: bigint | number;
}

export const sizeofJOBOBJECT_EXTENDED_LIMIT_INFORMATION = 48;

export function allocJOBOBJECT_EXTENDED_LIMIT_INFORMATION(data?: Partial<JOBOBJECT_EXTENDED_LIMIT_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofJOBOBJECT_EXTENDED_LIMIT_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.BasicLimitInformation !== undefined) view.setBigUint64(0, data.BasicLimitInformation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.BasicLimitInformation))), true);
  // 0x08: pointer
  if (data?.IoInfo !== undefined) view.setBigUint64(8, data.IoInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IoInfo))), true);
  // 0x10: usize
  if (data?.ProcessMemoryLimit !== undefined) view.setBigUint64(16, BigInt(data.ProcessMemoryLimit), true);
  // 0x18: usize
  if (data?.JobMemoryLimit !== undefined) view.setBigUint64(24, BigInt(data.JobMemoryLimit), true);
  // 0x20: usize
  if (data?.PeakProcessMemoryUsed !== undefined) view.setBigUint64(32, BigInt(data.PeakProcessMemoryUsed), true);
  // 0x28: usize
  if (data?.PeakJobMemoryUsed !== undefined) view.setBigUint64(40, BigInt(data.PeakJobMemoryUsed), true);
  return buf;
}

export class JOBOBJECT_EXTENDED_LIMIT_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get BasicLimitInformation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get IoInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: usize
  get ProcessMemoryLimit(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: usize
  get JobMemoryLimit(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: usize
  get PeakProcessMemoryUsed(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: usize
  get PeakJobMemoryUsed(): bigint | number {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x00: pointer
  set BasicLimitInformation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set IoInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: usize
  set ProcessMemoryLimit(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: usize
  set JobMemoryLimit(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: usize
  set PeakProcessMemoryUsed(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: usize
  set PeakJobMemoryUsed(value: bigint | number) {
    this.view.setBigUint64(40, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.JobObjects.JOBOBJECT_BASIC_PROCESS_ID_LIST (size: 16)
 */
export interface JOBOBJECT_BASIC_PROCESS_ID_LIST {
  /** u32 */
  NumberOfAssignedProcesses: number;
  /** u32 */
  NumberOfProcessIdsInList: number;
  /** array */
  ProcessIdList: Deno.PointerValue;
}

export const sizeofJOBOBJECT_BASIC_PROCESS_ID_LIST = 16;

export function allocJOBOBJECT_BASIC_PROCESS_ID_LIST(data?: Partial<JOBOBJECT_BASIC_PROCESS_ID_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofJOBOBJECT_BASIC_PROCESS_ID_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumberOfAssignedProcesses !== undefined) view.setUint32(0, Number(data.NumberOfAssignedProcesses), true);
  // 0x04: u32
  if (data?.NumberOfProcessIdsInList !== undefined) view.setUint32(4, Number(data.NumberOfProcessIdsInList), true);
  // 0x08: pointer
  if (data?.ProcessIdList !== undefined) view.setBigUint64(8, data.ProcessIdList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProcessIdList))), true);
  return buf;
}

export class JOBOBJECT_BASIC_PROCESS_ID_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumberOfAssignedProcesses(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NumberOfProcessIdsInList(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ProcessIdList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumberOfAssignedProcesses(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NumberOfProcessIdsInList(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ProcessIdList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.JobObjects.JOBOBJECT_BASIC_UI_RESTRICTIONS (size: 8)
 */
export interface JOBOBJECT_BASIC_UI_RESTRICTIONS {
  /** Windows.Win32.System.JobObjects.JOB_OBJECT_UILIMIT */
  UIRestrictionsClass: JOB_OBJECT_UILIMIT;
}

export const sizeofJOBOBJECT_BASIC_UI_RESTRICTIONS = 8;

export function allocJOBOBJECT_BASIC_UI_RESTRICTIONS(data?: Partial<JOBOBJECT_BASIC_UI_RESTRICTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofJOBOBJECT_BASIC_UI_RESTRICTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UIRestrictionsClass !== undefined) view.setUint32(0, Number(data.UIRestrictionsClass), true);
  // 0x04: pad4
  return buf;
}

export class JOBOBJECT_BASIC_UI_RESTRICTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get UIRestrictionsClass(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set UIRestrictionsClass(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.JobObjects.JOBOBJECT_SECURITY_LIMIT_INFORMATION (size: 40)
 */
export interface JOBOBJECT_SECURITY_LIMIT_INFORMATION {
  /** Windows.Win32.System.JobObjects.JOB_OBJECT_SECURITY */
  SecurityLimitFlags: JOB_OBJECT_SECURITY;
  /** Windows.Win32.Foundation.HANDLE */
  JobToken: Uint8Array | Deno.PointerValue;
  /** ptr */
  SidsToDisable: Deno.PointerValue | Uint8Array;
  /** ptr */
  PrivilegesToDelete: Deno.PointerValue | Uint8Array;
  /** ptr */
  RestrictedSids: Deno.PointerValue | Uint8Array;
}

export const sizeofJOBOBJECT_SECURITY_LIMIT_INFORMATION = 40;

export function allocJOBOBJECT_SECURITY_LIMIT_INFORMATION(data?: Partial<JOBOBJECT_SECURITY_LIMIT_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofJOBOBJECT_SECURITY_LIMIT_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SecurityLimitFlags !== undefined) view.setUint32(0, Number(data.SecurityLimitFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.JobToken !== undefined) view.setBigUint64(8, data.JobToken === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.JobToken))), true);
  // 0x10: pointer
  if (data?.SidsToDisable !== undefined) view.setBigUint64(16, data.SidsToDisable === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SidsToDisable))), true);
  // 0x18: pointer
  if (data?.PrivilegesToDelete !== undefined) view.setBigUint64(24, data.PrivilegesToDelete === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PrivilegesToDelete))), true);
  // 0x20: pointer
  if (data?.RestrictedSids !== undefined) view.setBigUint64(32, data.RestrictedSids === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RestrictedSids))), true);
  return buf;
}

export class JOBOBJECT_SECURITY_LIMIT_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SecurityLimitFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get JobToken(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get SidsToDisable(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get PrivilegesToDelete(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get RestrictedSids(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set SecurityLimitFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set JobToken(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set SidsToDisable(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set PrivilegesToDelete(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set RestrictedSids(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.JobObjects.JOBOBJECT_END_OF_JOB_TIME_INFORMATION (size: 8)
 */
export interface JOBOBJECT_END_OF_JOB_TIME_INFORMATION {
  /** Windows.Win32.System.JobObjects.JOB_OBJECT_TERMINATE_AT_END_ACTION */
  EndOfJobTimeAction: JOB_OBJECT_TERMINATE_AT_END_ACTION;
}

export const sizeofJOBOBJECT_END_OF_JOB_TIME_INFORMATION = 8;

export function allocJOBOBJECT_END_OF_JOB_TIME_INFORMATION(data?: Partial<JOBOBJECT_END_OF_JOB_TIME_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofJOBOBJECT_END_OF_JOB_TIME_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.EndOfJobTimeAction !== undefined) view.setUint32(0, Number(data.EndOfJobTimeAction), true);
  // 0x04: pad4
  return buf;
}

export class JOBOBJECT_END_OF_JOB_TIME_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get EndOfJobTimeAction(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set EndOfJobTimeAction(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.JobObjects.JOBOBJECT_ASSOCIATE_COMPLETION_PORT (size: 16)
 */
export interface JOBOBJECT_ASSOCIATE_COMPLETION_PORT {
  /** ptr */
  CompletionKey: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HANDLE */
  CompletionPort: Uint8Array | Deno.PointerValue;
}

export const sizeofJOBOBJECT_ASSOCIATE_COMPLETION_PORT = 16;

export function allocJOBOBJECT_ASSOCIATE_COMPLETION_PORT(data?: Partial<JOBOBJECT_ASSOCIATE_COMPLETION_PORT>): Uint8Array {
  const buf = new Uint8Array(sizeofJOBOBJECT_ASSOCIATE_COMPLETION_PORT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CompletionKey !== undefined) view.setBigUint64(0, data.CompletionKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CompletionKey))), true);
  // 0x08: pointer
  if (data?.CompletionPort !== undefined) view.setBigUint64(8, data.CompletionPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CompletionPort))), true);
  return buf;
}

export class JOBOBJECT_ASSOCIATE_COMPLETION_PORTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CompletionKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get CompletionPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set CompletionKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set CompletionPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.JobObjects.JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION (size: 16)
 */
export interface JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION {
  /** Windows.Win32.System.JobObjects.JOBOBJECT_BASIC_ACCOUNTING_INFORMATION */
  BasicInfo: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Threading.IO_COUNTERS */
  IoInfo: Uint8Array | Deno.PointerValue;
}

export const sizeofJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION = 16;

export function allocJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION(data?: Partial<JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.BasicInfo !== undefined) view.setBigUint64(0, data.BasicInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.BasicInfo))), true);
  // 0x08: pointer
  if (data?.IoInfo !== undefined) view.setBigUint64(8, data.IoInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IoInfo))), true);
  return buf;
}

export class JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get BasicInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get IoInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set BasicInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set IoInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.JobObjects.JOBOBJECT_JOBSET_INFORMATION (size: 8)
 */
export interface JOBOBJECT_JOBSET_INFORMATION {
  /** u32 */
  MemberLevel: number;
}

export const sizeofJOBOBJECT_JOBSET_INFORMATION = 8;

export function allocJOBOBJECT_JOBSET_INFORMATION(data?: Partial<JOBOBJECT_JOBSET_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofJOBOBJECT_JOBSET_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MemberLevel !== undefined) view.setUint32(0, Number(data.MemberLevel), true);
  // 0x04: pad4
  return buf;
}

export class JOBOBJECT_JOBSET_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MemberLevel(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set MemberLevel(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.JobObjects.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION (size: 48)
 */
export interface JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION {
  /** u64 */
  IoReadBytesLimit: bigint | number;
  /** u64 */
  IoWriteBytesLimit: bigint | number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PerJobUserTimeLimit: Uint8Array | Deno.PointerValue;
  /** u64 */
  JobMemoryLimit: bigint | number;
  /** Windows.Win32.System.JobObjects.JOBOBJECT_RATE_CONTROL_TOLERANCE */
  RateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE;
  /** Windows.Win32.System.JobObjects.JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL */
  RateControlToleranceInterval: JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL;
  /** Windows.Win32.System.JobObjects.JOB_OBJECT_LIMIT */
  LimitFlags: JOB_OBJECT_LIMIT;
}

export const sizeofJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION = 48;

export function allocJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION(data?: Partial<JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.IoReadBytesLimit !== undefined) view.setBigUint64(0, BigInt(data.IoReadBytesLimit), true);
  // 0x08: u64
  if (data?.IoWriteBytesLimit !== undefined) view.setBigUint64(8, BigInt(data.IoWriteBytesLimit), true);
  // 0x10: pointer
  if (data?.PerJobUserTimeLimit !== undefined) view.setBigUint64(16, data.PerJobUserTimeLimit === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PerJobUserTimeLimit))), true);
  // 0x18: u64
  if (data?.JobMemoryLimit !== undefined) view.setBigUint64(24, BigInt(data.JobMemoryLimit), true);
  // 0x20: i32
  if (data?.RateControlTolerance !== undefined) view.setInt32(32, Number(data.RateControlTolerance), true);
  // 0x24: i32
  if (data?.RateControlToleranceInterval !== undefined) view.setInt32(36, Number(data.RateControlToleranceInterval), true);
  // 0x28: u32
  if (data?.LimitFlags !== undefined) view.setUint32(40, Number(data.LimitFlags), true);
  // 0x2c: pad4
  return buf;
}

export class JOBOBJECT_NOTIFICATION_LIMIT_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get IoReadBytesLimit(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get IoWriteBytesLimit(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: pointer
  get PerJobUserTimeLimit(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u64
  get JobMemoryLimit(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: i32
  get RateControlTolerance(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get RateControlToleranceInterval(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: u32
  get LimitFlags(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: u64
  set IoReadBytesLimit(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set IoWriteBytesLimit(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set PerJobUserTimeLimit(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u64
  set JobMemoryLimit(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: i32
  set RateControlTolerance(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set RateControlToleranceInterval(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: u32
  set LimitFlags(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * _Anonymous1_e__Union (size: 64)
 */
export interface _Anonymous1_e__Union {
  /** usize */
  Data0: bigint | number;
  /** Windows.Win32.Foundation.PWSTR */
  String: string | null | Uint8Array | Uint16Array;
  /** usize */
  u: bigint | number;
  /** ptr */
  psid: Deno.PointerValue | Uint8Array;
  /** ptr */
  pguid: Deno.PointerValue | Uint8Array;
  /** u32 */
  LogonId_LowPart: number;
  /** ptr */
  pObjectTypes: Deno.PointerValue | Uint8Array;
  /** ptr */
  pIpAddress: Deno.PointerValue | Uint8Array;
}

export const sizeof_Anonymous1_e__Union = 64;

export function alloc_Anonymous1_e__Union(data?: Partial<_Anonymous1_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous1_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data0 !== undefined) view.setBigUint64(0, BigInt(data.Data0), true);
  // 0x08: buffer
  if (data?.String !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.String);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: usize
  if (data?.u !== undefined) view.setBigUint64(16, BigInt(data.u), true);
  // 0x18: pointer
  if (data?.psid !== undefined) view.setBigUint64(24, data.psid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.psid))), true);
  // 0x20: pointer
  if (data?.pguid !== undefined) view.setBigUint64(32, data.pguid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pguid))), true);
  // 0x28: u32
  if (data?.LogonId_LowPart !== undefined) view.setUint32(40, Number(data.LogonId_LowPart), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pObjectTypes !== undefined) view.setBigUint64(48, data.pObjectTypes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pObjectTypes))), true);
  // 0x38: pointer
  if (data?.pIpAddress !== undefined) view.setBigUint64(56, data.pIpAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pIpAddress))), true);
  return buf;
}

export class _Anonymous1_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get Data0(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: buffer
  get String(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: usize
  get u(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: pointer
  get psid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get pguid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get LogonId_LowPart(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get pObjectTypes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get pIpAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: usize
  set Data0(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: buffer
  set String(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: usize
  set u(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set psid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set pguid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set LogonId_LowPart(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set pObjectTypes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set pIpAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _Anonymous2_e__Union (size: 16)
 */
export interface _Anonymous2_e__Union {
  /** usize */
  Data1: bigint | number;
  /** i32 */
  LogonId_HighPart: number;
}

export const sizeof_Anonymous2_e__Union = 16;

export function alloc_Anonymous2_e__Union(data?: Partial<_Anonymous2_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous2_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data1 !== undefined) view.setBigUint64(0, BigInt(data.Data1), true);
  // 0x08: i32
  if (data?.LogonId_HighPart !== undefined) view.setInt32(8, Number(data.LogonId_HighPart), true);
  // 0x0c: pad4
  return buf;
}

export class _Anonymous2_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get Data1(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: i32
  get LogonId_HighPart(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: usize
  set Data1(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: i32
  set LogonId_HighPart(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * _Anonymous3_e__Union (size: 16)
 */
export interface _Anonymous3_e__Union {
  /** u32 */
  dwAlphaDestConst: number;
  /** Windows.Win32.Graphics.DirectDraw.IDirectDrawSurface */
  lpDDSAlphaDest: Uint8Array | Deno.PointerValue;
}

export const sizeof_Anonymous3_e__Union = 16;

export function alloc_Anonymous3_e__Union(data?: Partial<_Anonymous3_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous3_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwAlphaDestConst !== undefined) view.setUint32(0, Number(data.dwAlphaDestConst), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpDDSAlphaDest !== undefined) view.setBigUint64(8, data.lpDDSAlphaDest === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSAlphaDest))), true);
  return buf;
}

export class _Anonymous3_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwAlphaDestConst(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpDDSAlphaDest(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwAlphaDestConst(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpDDSAlphaDest(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.JobObjects.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2 (size: 80)
 */
export interface JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2 {
  /** u64 */
  IoReadBytesLimit: bigint | number;
  /** u64 */
  IoWriteBytesLimit: bigint | number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PerJobUserTimeLimit: Uint8Array | Deno.PointerValue;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
  /** _Anonymous3_e__Union */
  Anonymous3: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.JobObjects.JOB_OBJECT_LIMIT */
  LimitFlags: JOB_OBJECT_LIMIT;
  /** Windows.Win32.System.JobObjects.JOBOBJECT_RATE_CONTROL_TOLERANCE */
  IoRateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE;
  /** u64 */
  JobLowMemoryLimit: bigint | number;
  /** Windows.Win32.System.JobObjects.JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL */
  IoRateControlToleranceInterval: JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL;
  /** Windows.Win32.System.JobObjects.JOBOBJECT_RATE_CONTROL_TOLERANCE */
  NetRateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE;
  /** Windows.Win32.System.JobObjects.JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL */
  NetRateControlToleranceInterval: JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL;
}

export const sizeofJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2 = 80;

export function allocJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2(data?: Partial<JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2>): Uint8Array {
  const buf = new Uint8Array(sizeofJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.IoReadBytesLimit !== undefined) view.setBigUint64(0, BigInt(data.IoReadBytesLimit), true);
  // 0x08: u64
  if (data?.IoWriteBytesLimit !== undefined) view.setBigUint64(8, BigInt(data.IoWriteBytesLimit), true);
  // 0x10: pointer
  if (data?.PerJobUserTimeLimit !== undefined) view.setBigUint64(16, data.PerJobUserTimeLimit === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PerJobUserTimeLimit))), true);
  // 0x18: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(24, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x20: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(32, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  // 0x28: pointer
  if (data?.Anonymous3 !== undefined) view.setBigUint64(40, data.Anonymous3 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous3))), true);
  // 0x30: u32
  if (data?.LimitFlags !== undefined) view.setUint32(48, Number(data.LimitFlags), true);
  // 0x34: i32
  if (data?.IoRateControlTolerance !== undefined) view.setInt32(52, Number(data.IoRateControlTolerance), true);
  // 0x38: u64
  if (data?.JobLowMemoryLimit !== undefined) view.setBigUint64(56, BigInt(data.JobLowMemoryLimit), true);
  // 0x40: i32
  if (data?.IoRateControlToleranceInterval !== undefined) view.setInt32(64, Number(data.IoRateControlToleranceInterval), true);
  // 0x44: i32
  if (data?.NetRateControlTolerance !== undefined) view.setInt32(68, Number(data.NetRateControlTolerance), true);
  // 0x48: i32
  if (data?.NetRateControlToleranceInterval !== undefined) view.setInt32(72, Number(data.NetRateControlToleranceInterval), true);
  // 0x4c: pad4
  return buf;
}

export class JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get IoReadBytesLimit(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get IoWriteBytesLimit(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: pointer
  get PerJobUserTimeLimit(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get Anonymous3(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get LimitFlags(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: i32
  get IoRateControlTolerance(): number {
    return this.view.getInt32(52, true);
  }

  // 0x38: u64
  get JobLowMemoryLimit(): bigint | number {
    return Number(this.view.getBigUint64(56, true));
  }

  // 0x40: i32
  get IoRateControlToleranceInterval(): number {
    return this.view.getInt32(64, true);
  }

  // 0x44: i32
  get NetRateControlTolerance(): number {
    return this.view.getInt32(68, true);
  }

  // 0x48: i32
  get NetRateControlToleranceInterval(): number {
    return this.view.getInt32(72, true);
  }

  // 0x4c: pad4

  // 0x00: u64
  set IoReadBytesLimit(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set IoWriteBytesLimit(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set PerJobUserTimeLimit(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set Anonymous3(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set LimitFlags(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: i32
  set IoRateControlTolerance(value: number) {
    this.view.setInt32(52, value, true);
  }

  // 0x38: u64
  set JobLowMemoryLimit(value: bigint | number) {
    this.view.setBigUint64(56, BigInt(value), true);
  }

  // 0x40: i32
  set IoRateControlToleranceInterval(value: number) {
    this.view.setInt32(64, value, true);
  }

  // 0x44: i32
  set NetRateControlTolerance(value: number) {
    this.view.setInt32(68, value, true);
  }

  // 0x48: i32
  set NetRateControlToleranceInterval(value: number) {
    this.view.setInt32(72, value, true);
  }

  // 0x4c: pad4
}

/**
 * Windows.Win32.System.JobObjects.JOBOBJECT_LIMIT_VIOLATION_INFORMATION (size: 80)
 */
export interface JOBOBJECT_LIMIT_VIOLATION_INFORMATION {
  /** Windows.Win32.System.JobObjects.JOB_OBJECT_LIMIT */
  LimitFlags: JOB_OBJECT_LIMIT;
  /** Windows.Win32.System.JobObjects.JOB_OBJECT_LIMIT */
  ViolationLimitFlags: JOB_OBJECT_LIMIT;
  /** u64 */
  IoReadBytes: bigint | number;
  /** u64 */
  IoReadBytesLimit: bigint | number;
  /** u64 */
  IoWriteBytes: bigint | number;
  /** u64 */
  IoWriteBytesLimit: bigint | number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PerJobUserTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PerJobUserTimeLimit: Uint8Array | Deno.PointerValue;
  /** u64 */
  JobMemory: bigint | number;
  /** u64 */
  JobMemoryLimit: bigint | number;
  /** Windows.Win32.System.JobObjects.JOBOBJECT_RATE_CONTROL_TOLERANCE */
  RateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE;
  /** Windows.Win32.System.JobObjects.JOBOBJECT_RATE_CONTROL_TOLERANCE */
  RateControlToleranceLimit: JOBOBJECT_RATE_CONTROL_TOLERANCE;
}

export const sizeofJOBOBJECT_LIMIT_VIOLATION_INFORMATION = 80;

export function allocJOBOBJECT_LIMIT_VIOLATION_INFORMATION(data?: Partial<JOBOBJECT_LIMIT_VIOLATION_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofJOBOBJECT_LIMIT_VIOLATION_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.LimitFlags !== undefined) view.setUint32(0, Number(data.LimitFlags), true);
  // 0x04: u32
  if (data?.ViolationLimitFlags !== undefined) view.setUint32(4, Number(data.ViolationLimitFlags), true);
  // 0x08: u64
  if (data?.IoReadBytes !== undefined) view.setBigUint64(8, BigInt(data.IoReadBytes), true);
  // 0x10: u64
  if (data?.IoReadBytesLimit !== undefined) view.setBigUint64(16, BigInt(data.IoReadBytesLimit), true);
  // 0x18: u64
  if (data?.IoWriteBytes !== undefined) view.setBigUint64(24, BigInt(data.IoWriteBytes), true);
  // 0x20: u64
  if (data?.IoWriteBytesLimit !== undefined) view.setBigUint64(32, BigInt(data.IoWriteBytesLimit), true);
  // 0x28: pointer
  if (data?.PerJobUserTime !== undefined) view.setBigUint64(40, data.PerJobUserTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PerJobUserTime))), true);
  // 0x30: pointer
  if (data?.PerJobUserTimeLimit !== undefined) view.setBigUint64(48, data.PerJobUserTimeLimit === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PerJobUserTimeLimit))), true);
  // 0x38: u64
  if (data?.JobMemory !== undefined) view.setBigUint64(56, BigInt(data.JobMemory), true);
  // 0x40: u64
  if (data?.JobMemoryLimit !== undefined) view.setBigUint64(64, BigInt(data.JobMemoryLimit), true);
  // 0x48: i32
  if (data?.RateControlTolerance !== undefined) view.setInt32(72, Number(data.RateControlTolerance), true);
  // 0x4c: i32
  if (data?.RateControlToleranceLimit !== undefined) view.setInt32(76, Number(data.RateControlToleranceLimit), true);
  return buf;
}

export class JOBOBJECT_LIMIT_VIOLATION_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get LimitFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ViolationLimitFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get IoReadBytes(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get IoReadBytesLimit(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u64
  get IoWriteBytes(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u64
  get IoWriteBytesLimit(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: pointer
  get PerJobUserTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get PerJobUserTimeLimit(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u64
  get JobMemory(): bigint | number {
    return Number(this.view.getBigUint64(56, true));
  }

  // 0x40: u64
  get JobMemoryLimit(): bigint | number {
    return Number(this.view.getBigUint64(64, true));
  }

  // 0x48: i32
  get RateControlTolerance(): number {
    return this.view.getInt32(72, true);
  }

  // 0x4c: i32
  get RateControlToleranceLimit(): number {
    return this.view.getInt32(76, true);
  }

  // 0x00: u32
  set LimitFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ViolationLimitFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set IoReadBytes(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set IoReadBytesLimit(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u64
  set IoWriteBytes(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u64
  set IoWriteBytesLimit(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: pointer
  set PerJobUserTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set PerJobUserTimeLimit(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u64
  set JobMemory(value: bigint | number) {
    this.view.setBigUint64(56, BigInt(value), true);
  }

  // 0x40: u64
  set JobMemoryLimit(value: bigint | number) {
    this.view.setBigUint64(64, BigInt(value), true);
  }

  // 0x48: i32
  set RateControlTolerance(value: number) {
    this.view.setInt32(72, value, true);
  }

  // 0x4c: i32
  set RateControlToleranceLimit(value: number) {
    this.view.setInt32(76, value, true);
  }
}

/**
 * Windows.Win32.System.JobObjects.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2 (size: 112)
 */
export interface JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2 {
  /** Windows.Win32.System.JobObjects.JOB_OBJECT_LIMIT */
  LimitFlags: JOB_OBJECT_LIMIT;
  /** Windows.Win32.System.JobObjects.JOB_OBJECT_LIMIT */
  ViolationLimitFlags: JOB_OBJECT_LIMIT;
  /** u64 */
  IoReadBytes: bigint | number;
  /** u64 */
  IoReadBytesLimit: bigint | number;
  /** u64 */
  IoWriteBytes: bigint | number;
  /** u64 */
  IoWriteBytesLimit: bigint | number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PerJobUserTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PerJobUserTimeLimit: Uint8Array | Deno.PointerValue;
  /** u64 */
  JobMemory: bigint | number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
  /** _Anonymous3_e__Union */
  Anonymous3: Uint8Array | Deno.PointerValue;
  /** u64 */
  JobLowMemoryLimit: bigint | number;
  /** Windows.Win32.System.JobObjects.JOBOBJECT_RATE_CONTROL_TOLERANCE */
  IoRateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE;
  /** Windows.Win32.System.JobObjects.JOBOBJECT_RATE_CONTROL_TOLERANCE */
  IoRateControlToleranceLimit: JOBOBJECT_RATE_CONTROL_TOLERANCE;
  /** Windows.Win32.System.JobObjects.JOBOBJECT_RATE_CONTROL_TOLERANCE */
  NetRateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE;
  /** Windows.Win32.System.JobObjects.JOBOBJECT_RATE_CONTROL_TOLERANCE */
  NetRateControlToleranceLimit: JOBOBJECT_RATE_CONTROL_TOLERANCE;
}

export const sizeofJOBOBJECT_LIMIT_VIOLATION_INFORMATION_2 = 112;

export function allocJOBOBJECT_LIMIT_VIOLATION_INFORMATION_2(data?: Partial<JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2>): Uint8Array {
  const buf = new Uint8Array(sizeofJOBOBJECT_LIMIT_VIOLATION_INFORMATION_2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.LimitFlags !== undefined) view.setUint32(0, Number(data.LimitFlags), true);
  // 0x04: u32
  if (data?.ViolationLimitFlags !== undefined) view.setUint32(4, Number(data.ViolationLimitFlags), true);
  // 0x08: u64
  if (data?.IoReadBytes !== undefined) view.setBigUint64(8, BigInt(data.IoReadBytes), true);
  // 0x10: u64
  if (data?.IoReadBytesLimit !== undefined) view.setBigUint64(16, BigInt(data.IoReadBytesLimit), true);
  // 0x18: u64
  if (data?.IoWriteBytes !== undefined) view.setBigUint64(24, BigInt(data.IoWriteBytes), true);
  // 0x20: u64
  if (data?.IoWriteBytesLimit !== undefined) view.setBigUint64(32, BigInt(data.IoWriteBytesLimit), true);
  // 0x28: pointer
  if (data?.PerJobUserTime !== undefined) view.setBigUint64(40, data.PerJobUserTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PerJobUserTime))), true);
  // 0x30: pointer
  if (data?.PerJobUserTimeLimit !== undefined) view.setBigUint64(48, data.PerJobUserTimeLimit === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PerJobUserTimeLimit))), true);
  // 0x38: u64
  if (data?.JobMemory !== undefined) view.setBigUint64(56, BigInt(data.JobMemory), true);
  // 0x40: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(64, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x48: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(72, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  // 0x50: pointer
  if (data?.Anonymous3 !== undefined) view.setBigUint64(80, data.Anonymous3 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous3))), true);
  // 0x58: u64
  if (data?.JobLowMemoryLimit !== undefined) view.setBigUint64(88, BigInt(data.JobLowMemoryLimit), true);
  // 0x60: i32
  if (data?.IoRateControlTolerance !== undefined) view.setInt32(96, Number(data.IoRateControlTolerance), true);
  // 0x64: i32
  if (data?.IoRateControlToleranceLimit !== undefined) view.setInt32(100, Number(data.IoRateControlToleranceLimit), true);
  // 0x68: i32
  if (data?.NetRateControlTolerance !== undefined) view.setInt32(104, Number(data.NetRateControlTolerance), true);
  // 0x6c: i32
  if (data?.NetRateControlToleranceLimit !== undefined) view.setInt32(108, Number(data.NetRateControlToleranceLimit), true);
  return buf;
}

export class JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get LimitFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ViolationLimitFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get IoReadBytes(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get IoReadBytesLimit(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u64
  get IoWriteBytes(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u64
  get IoWriteBytesLimit(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: pointer
  get PerJobUserTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get PerJobUserTimeLimit(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u64
  get JobMemory(): bigint | number {
    return Number(this.view.getBigUint64(56, true));
  }

  // 0x40: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get Anonymous3(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: u64
  get JobLowMemoryLimit(): bigint | number {
    return Number(this.view.getBigUint64(88, true));
  }

  // 0x60: i32
  get IoRateControlTolerance(): number {
    return this.view.getInt32(96, true);
  }

  // 0x64: i32
  get IoRateControlToleranceLimit(): number {
    return this.view.getInt32(100, true);
  }

  // 0x68: i32
  get NetRateControlTolerance(): number {
    return this.view.getInt32(104, true);
  }

  // 0x6c: i32
  get NetRateControlToleranceLimit(): number {
    return this.view.getInt32(108, true);
  }

  // 0x00: u32
  set LimitFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ViolationLimitFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set IoReadBytes(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set IoReadBytesLimit(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u64
  set IoWriteBytes(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u64
  set IoWriteBytesLimit(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: pointer
  set PerJobUserTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set PerJobUserTimeLimit(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u64
  set JobMemory(value: bigint | number) {
    this.view.setBigUint64(56, BigInt(value), true);
  }

  // 0x40: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set Anonymous3(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: u64
  set JobLowMemoryLimit(value: bigint | number) {
    this.view.setBigUint64(88, BigInt(value), true);
  }

  // 0x60: i32
  set IoRateControlTolerance(value: number) {
    this.view.setInt32(96, value, true);
  }

  // 0x64: i32
  set IoRateControlToleranceLimit(value: number) {
    this.view.setInt32(100, value, true);
  }

  // 0x68: i32
  set NetRateControlTolerance(value: number) {
    this.view.setInt32(104, value, true);
  }

  // 0x6c: i32
  set NetRateControlToleranceLimit(value: number) {
    this.view.setInt32(108, value, true);
  }
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** array */
  X: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.X))), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.JobObjects.JOBOBJECT_CPU_RATE_CONTROL_INFORMATION (size: 16)
 */
export interface JOBOBJECT_CPU_RATE_CONTROL_INFORMATION {
  /** Windows.Win32.System.JobObjects.JOB_OBJECT_CPU_RATE_CONTROL */
  ControlFlags: JOB_OBJECT_CPU_RATE_CONTROL;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofJOBOBJECT_CPU_RATE_CONTROL_INFORMATION = 16;

export function allocJOBOBJECT_CPU_RATE_CONTROL_INFORMATION(data?: Partial<JOBOBJECT_CPU_RATE_CONTROL_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofJOBOBJECT_CPU_RATE_CONTROL_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ControlFlags !== undefined) view.setUint32(0, Number(data.ControlFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class JOBOBJECT_CPU_RATE_CONTROL_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ControlFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set ControlFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.JobObjects.JOBOBJECT_NET_RATE_CONTROL_INFORMATION (size: 16)
 */
export interface JOBOBJECT_NET_RATE_CONTROL_INFORMATION {
  /** u64 */
  MaxBandwidth: bigint | number;
  /** Windows.Win32.System.JobObjects.JOB_OBJECT_NET_RATE_CONTROL_FLAGS */
  ControlFlags: JOB_OBJECT_NET_RATE_CONTROL_FLAGS;
  /** u8 */
  DscpTag: number;
}

export const sizeofJOBOBJECT_NET_RATE_CONTROL_INFORMATION = 16;

export function allocJOBOBJECT_NET_RATE_CONTROL_INFORMATION(data?: Partial<JOBOBJECT_NET_RATE_CONTROL_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofJOBOBJECT_NET_RATE_CONTROL_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.MaxBandwidth !== undefined) view.setBigUint64(0, BigInt(data.MaxBandwidth), true);
  // 0x08: u32
  if (data?.ControlFlags !== undefined) view.setUint32(8, Number(data.ControlFlags), true);
  // 0x0c: u8
  if (data?.DscpTag !== undefined) view.setUint8(12, Number(data.DscpTag));
  // 0x0d: pad3
  return buf;
}

export class JOBOBJECT_NET_RATE_CONTROL_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get MaxBandwidth(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u32
  get ControlFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u8
  get DscpTag(): number {
    return this.view.getUint8(12);
  }

  // 0x0d: pad3

  // 0x00: u64
  set MaxBandwidth(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u32
  set ControlFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u8
  set DscpTag(value: number) {
    this.view.setUint8(12, value);
  }

  // 0x0d: pad3
}

/**
 * Windows.Win32.System.JobObjects.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2 (size: 96)
 */
export interface JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2 {
  /** i64 */
  MaxIops: bigint | number;
  /** i64 */
  MaxBandwidth: bigint | number;
  /** i64 */
  ReservationIops: bigint | number;
  /** Windows.Win32.Foundation.PWSTR */
  VolumeName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  BaseIoSize: number;
  /** Windows.Win32.System.JobObjects.JOB_OBJECT_IO_RATE_CONTROL_FLAGS */
  ControlFlags: JOB_OBJECT_IO_RATE_CONTROL_FLAGS;
  /** u16 */
  VolumeNameLength: number;
  /** i64 */
  CriticalReservationIops: bigint | number;
  /** i64 */
  ReservationBandwidth: bigint | number;
  /** i64 */
  CriticalReservationBandwidth: bigint | number;
  /** i64 */
  MaxTimePercent: bigint | number;
  /** i64 */
  ReservationTimePercent: bigint | number;
  /** i64 */
  CriticalReservationTimePercent: bigint | number;
}

export const sizeofJOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2 = 96;

export function allocJOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2(data?: Partial<JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofJOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.MaxIops !== undefined) view.setBigInt64(0, BigInt(data.MaxIops), true);
  // 0x08: i64
  if (data?.MaxBandwidth !== undefined) view.setBigInt64(8, BigInt(data.MaxBandwidth), true);
  // 0x10: i64
  if (data?.ReservationIops !== undefined) view.setBigInt64(16, BigInt(data.ReservationIops), true);
  // 0x18: buffer
  if (data?.VolumeName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.VolumeName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: u32
  if (data?.BaseIoSize !== undefined) view.setUint32(32, Number(data.BaseIoSize), true);
  // 0x24: i32
  if (data?.ControlFlags !== undefined) view.setInt32(36, Number(data.ControlFlags), true);
  // 0x28: u16
  if (data?.VolumeNameLength !== undefined) view.setUint16(40, Number(data.VolumeNameLength), true);
  // 0x2a: pad6
  // 0x30: i64
  if (data?.CriticalReservationIops !== undefined) view.setBigInt64(48, BigInt(data.CriticalReservationIops), true);
  // 0x38: i64
  if (data?.ReservationBandwidth !== undefined) view.setBigInt64(56, BigInt(data.ReservationBandwidth), true);
  // 0x40: i64
  if (data?.CriticalReservationBandwidth !== undefined) view.setBigInt64(64, BigInt(data.CriticalReservationBandwidth), true);
  // 0x48: i64
  if (data?.MaxTimePercent !== undefined) view.setBigInt64(72, BigInt(data.MaxTimePercent), true);
  // 0x50: i64
  if (data?.ReservationTimePercent !== undefined) view.setBigInt64(80, BigInt(data.ReservationTimePercent), true);
  // 0x58: i64
  if (data?.CriticalReservationTimePercent !== undefined) view.setBigInt64(88, BigInt(data.CriticalReservationTimePercent), true);
  return buf;
}

export class JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get MaxIops(): bigint | number {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: i64
  get MaxBandwidth(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: i64
  get ReservationIops(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: buffer
  get VolumeName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get BaseIoSize(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: i32
  get ControlFlags(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: u16
  get VolumeNameLength(): number {
    return this.view.getUint16(40, true);
  }

  // 0x2a: pad6

  // 0x30: i64
  get CriticalReservationIops(): bigint | number {
    return Number(this.view.getBigInt64(48, true));
  }

  // 0x38: i64
  get ReservationBandwidth(): bigint | number {
    return Number(this.view.getBigInt64(56, true));
  }

  // 0x40: i64
  get CriticalReservationBandwidth(): bigint | number {
    return Number(this.view.getBigInt64(64, true));
  }

  // 0x48: i64
  get MaxTimePercent(): bigint | number {
    return Number(this.view.getBigInt64(72, true));
  }

  // 0x50: i64
  get ReservationTimePercent(): bigint | number {
    return Number(this.view.getBigInt64(80, true));
  }

  // 0x58: i64
  get CriticalReservationTimePercent(): bigint | number {
    return Number(this.view.getBigInt64(88, true));
  }

  // 0x00: i64
  set MaxIops(value: bigint | number) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: i64
  set MaxBandwidth(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: i64
  set ReservationIops(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: buffer
  set VolumeName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: u32
  set BaseIoSize(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: i32
  set ControlFlags(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: u16
  set VolumeNameLength(value: number) {
    this.view.setUint16(40, value, true);
  }

  // 0x2a: pad6

  // 0x30: i64
  set CriticalReservationIops(value: bigint | number) {
    this.view.setBigInt64(48, BigInt(value), true);
  }

  // 0x38: i64
  set ReservationBandwidth(value: bigint | number) {
    this.view.setBigInt64(56, BigInt(value), true);
  }

  // 0x40: i64
  set CriticalReservationBandwidth(value: bigint | number) {
    this.view.setBigInt64(64, BigInt(value), true);
  }

  // 0x48: i64
  set MaxTimePercent(value: bigint | number) {
    this.view.setBigInt64(72, BigInt(value), true);
  }

  // 0x50: i64
  set ReservationTimePercent(value: bigint | number) {
    this.view.setBigInt64(80, BigInt(value), true);
  }

  // 0x58: i64
  set CriticalReservationTimePercent(value: bigint | number) {
    this.view.setBigInt64(88, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.JobObjects.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3 (size: 144)
 */
export interface JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3 {
  /** i64 */
  MaxIops: bigint | number;
  /** i64 */
  MaxBandwidth: bigint | number;
  /** i64 */
  ReservationIops: bigint | number;
  /** Windows.Win32.Foundation.PWSTR */
  VolumeName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  BaseIoSize: number;
  /** Windows.Win32.System.JobObjects.JOB_OBJECT_IO_RATE_CONTROL_FLAGS */
  ControlFlags: JOB_OBJECT_IO_RATE_CONTROL_FLAGS;
  /** u16 */
  VolumeNameLength: number;
  /** i64 */
  CriticalReservationIops: bigint | number;
  /** i64 */
  ReservationBandwidth: bigint | number;
  /** i64 */
  CriticalReservationBandwidth: bigint | number;
  /** i64 */
  MaxTimePercent: bigint | number;
  /** i64 */
  ReservationTimePercent: bigint | number;
  /** i64 */
  CriticalReservationTimePercent: bigint | number;
  /** i64 */
  SoftMaxIops: bigint | number;
  /** i64 */
  SoftMaxBandwidth: bigint | number;
  /** i64 */
  SoftMaxTimePercent: bigint | number;
  /** i64 */
  LimitExcessNotifyIops: bigint | number;
  /** i64 */
  LimitExcessNotifyBandwidth: bigint | number;
  /** i64 */
  LimitExcessNotifyTimePercent: bigint | number;
}

export const sizeofJOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3 = 144;

export function allocJOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3(data?: Partial<JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3>): Uint8Array {
  const buf = new Uint8Array(sizeofJOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.MaxIops !== undefined) view.setBigInt64(0, BigInt(data.MaxIops), true);
  // 0x08: i64
  if (data?.MaxBandwidth !== undefined) view.setBigInt64(8, BigInt(data.MaxBandwidth), true);
  // 0x10: i64
  if (data?.ReservationIops !== undefined) view.setBigInt64(16, BigInt(data.ReservationIops), true);
  // 0x18: buffer
  if (data?.VolumeName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.VolumeName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: u32
  if (data?.BaseIoSize !== undefined) view.setUint32(32, Number(data.BaseIoSize), true);
  // 0x24: i32
  if (data?.ControlFlags !== undefined) view.setInt32(36, Number(data.ControlFlags), true);
  // 0x28: u16
  if (data?.VolumeNameLength !== undefined) view.setUint16(40, Number(data.VolumeNameLength), true);
  // 0x2a: pad6
  // 0x30: i64
  if (data?.CriticalReservationIops !== undefined) view.setBigInt64(48, BigInt(data.CriticalReservationIops), true);
  // 0x38: i64
  if (data?.ReservationBandwidth !== undefined) view.setBigInt64(56, BigInt(data.ReservationBandwidth), true);
  // 0x40: i64
  if (data?.CriticalReservationBandwidth !== undefined) view.setBigInt64(64, BigInt(data.CriticalReservationBandwidth), true);
  // 0x48: i64
  if (data?.MaxTimePercent !== undefined) view.setBigInt64(72, BigInt(data.MaxTimePercent), true);
  // 0x50: i64
  if (data?.ReservationTimePercent !== undefined) view.setBigInt64(80, BigInt(data.ReservationTimePercent), true);
  // 0x58: i64
  if (data?.CriticalReservationTimePercent !== undefined) view.setBigInt64(88, BigInt(data.CriticalReservationTimePercent), true);
  // 0x60: i64
  if (data?.SoftMaxIops !== undefined) view.setBigInt64(96, BigInt(data.SoftMaxIops), true);
  // 0x68: i64
  if (data?.SoftMaxBandwidth !== undefined) view.setBigInt64(104, BigInt(data.SoftMaxBandwidth), true);
  // 0x70: i64
  if (data?.SoftMaxTimePercent !== undefined) view.setBigInt64(112, BigInt(data.SoftMaxTimePercent), true);
  // 0x78: i64
  if (data?.LimitExcessNotifyIops !== undefined) view.setBigInt64(120, BigInt(data.LimitExcessNotifyIops), true);
  // 0x80: i64
  if (data?.LimitExcessNotifyBandwidth !== undefined) view.setBigInt64(128, BigInt(data.LimitExcessNotifyBandwidth), true);
  // 0x88: i64
  if (data?.LimitExcessNotifyTimePercent !== undefined) view.setBigInt64(136, BigInt(data.LimitExcessNotifyTimePercent), true);
  return buf;
}

export class JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get MaxIops(): bigint | number {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: i64
  get MaxBandwidth(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: i64
  get ReservationIops(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: buffer
  get VolumeName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get BaseIoSize(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: i32
  get ControlFlags(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: u16
  get VolumeNameLength(): number {
    return this.view.getUint16(40, true);
  }

  // 0x2a: pad6

  // 0x30: i64
  get CriticalReservationIops(): bigint | number {
    return Number(this.view.getBigInt64(48, true));
  }

  // 0x38: i64
  get ReservationBandwidth(): bigint | number {
    return Number(this.view.getBigInt64(56, true));
  }

  // 0x40: i64
  get CriticalReservationBandwidth(): bigint | number {
    return Number(this.view.getBigInt64(64, true));
  }

  // 0x48: i64
  get MaxTimePercent(): bigint | number {
    return Number(this.view.getBigInt64(72, true));
  }

  // 0x50: i64
  get ReservationTimePercent(): bigint | number {
    return Number(this.view.getBigInt64(80, true));
  }

  // 0x58: i64
  get CriticalReservationTimePercent(): bigint | number {
    return Number(this.view.getBigInt64(88, true));
  }

  // 0x60: i64
  get SoftMaxIops(): bigint | number {
    return Number(this.view.getBigInt64(96, true));
  }

  // 0x68: i64
  get SoftMaxBandwidth(): bigint | number {
    return Number(this.view.getBigInt64(104, true));
  }

  // 0x70: i64
  get SoftMaxTimePercent(): bigint | number {
    return Number(this.view.getBigInt64(112, true));
  }

  // 0x78: i64
  get LimitExcessNotifyIops(): bigint | number {
    return Number(this.view.getBigInt64(120, true));
  }

  // 0x80: i64
  get LimitExcessNotifyBandwidth(): bigint | number {
    return Number(this.view.getBigInt64(128, true));
  }

  // 0x88: i64
  get LimitExcessNotifyTimePercent(): bigint | number {
    return Number(this.view.getBigInt64(136, true));
  }

  // 0x00: i64
  set MaxIops(value: bigint | number) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: i64
  set MaxBandwidth(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: i64
  set ReservationIops(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: buffer
  set VolumeName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: u32
  set BaseIoSize(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: i32
  set ControlFlags(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: u16
  set VolumeNameLength(value: number) {
    this.view.setUint16(40, value, true);
  }

  // 0x2a: pad6

  // 0x30: i64
  set CriticalReservationIops(value: bigint | number) {
    this.view.setBigInt64(48, BigInt(value), true);
  }

  // 0x38: i64
  set ReservationBandwidth(value: bigint | number) {
    this.view.setBigInt64(56, BigInt(value), true);
  }

  // 0x40: i64
  set CriticalReservationBandwidth(value: bigint | number) {
    this.view.setBigInt64(64, BigInt(value), true);
  }

  // 0x48: i64
  set MaxTimePercent(value: bigint | number) {
    this.view.setBigInt64(72, BigInt(value), true);
  }

  // 0x50: i64
  set ReservationTimePercent(value: bigint | number) {
    this.view.setBigInt64(80, BigInt(value), true);
  }

  // 0x58: i64
  set CriticalReservationTimePercent(value: bigint | number) {
    this.view.setBigInt64(88, BigInt(value), true);
  }

  // 0x60: i64
  set SoftMaxIops(value: bigint | number) {
    this.view.setBigInt64(96, BigInt(value), true);
  }

  // 0x68: i64
  set SoftMaxBandwidth(value: bigint | number) {
    this.view.setBigInt64(104, BigInt(value), true);
  }

  // 0x70: i64
  set SoftMaxTimePercent(value: bigint | number) {
    this.view.setBigInt64(112, BigInt(value), true);
  }

  // 0x78: i64
  set LimitExcessNotifyIops(value: bigint | number) {
    this.view.setBigInt64(120, BigInt(value), true);
  }

  // 0x80: i64
  set LimitExcessNotifyBandwidth(value: bigint | number) {
    this.view.setBigInt64(128, BigInt(value), true);
  }

  // 0x88: i64
  set LimitExcessNotifyTimePercent(value: bigint | number) {
    this.view.setBigInt64(136, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.JobObjects.JOBOBJECT_IO_ATTRIBUTION_STATS (size: 32)
 */
export interface JOBOBJECT_IO_ATTRIBUTION_STATS {
  /** usize */
  IoCount: bigint | number;
  /** u64 */
  TotalNonOverlappedQueueTime: bigint | number;
  /** u64 */
  TotalNonOverlappedServiceTime: bigint | number;
  /** u64 */
  TotalSize: bigint | number;
}

export const sizeofJOBOBJECT_IO_ATTRIBUTION_STATS = 32;

export function allocJOBOBJECT_IO_ATTRIBUTION_STATS(data?: Partial<JOBOBJECT_IO_ATTRIBUTION_STATS>): Uint8Array {
  const buf = new Uint8Array(sizeofJOBOBJECT_IO_ATTRIBUTION_STATS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.IoCount !== undefined) view.setBigUint64(0, BigInt(data.IoCount), true);
  // 0x08: u64
  if (data?.TotalNonOverlappedQueueTime !== undefined) view.setBigUint64(8, BigInt(data.TotalNonOverlappedQueueTime), true);
  // 0x10: u64
  if (data?.TotalNonOverlappedServiceTime !== undefined) view.setBigUint64(16, BigInt(data.TotalNonOverlappedServiceTime), true);
  // 0x18: u64
  if (data?.TotalSize !== undefined) view.setBigUint64(24, BigInt(data.TotalSize), true);
  return buf;
}

export class JOBOBJECT_IO_ATTRIBUTION_STATSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get IoCount(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get TotalNonOverlappedQueueTime(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get TotalNonOverlappedServiceTime(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u64
  get TotalSize(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x00: usize
  set IoCount(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set TotalNonOverlappedQueueTime(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set TotalNonOverlappedServiceTime(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u64
  set TotalSize(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.JobObjects.JOBOBJECT_IO_ATTRIBUTION_INFORMATION (size: 24)
 */
export interface JOBOBJECT_IO_ATTRIBUTION_INFORMATION {
  /** u32 */
  ControlFlags: number;
  /** Windows.Win32.System.JobObjects.JOBOBJECT_IO_ATTRIBUTION_STATS */
  ReadStats: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.JobObjects.JOBOBJECT_IO_ATTRIBUTION_STATS */
  WriteStats: Uint8Array | Deno.PointerValue;
}

export const sizeofJOBOBJECT_IO_ATTRIBUTION_INFORMATION = 24;

export function allocJOBOBJECT_IO_ATTRIBUTION_INFORMATION(data?: Partial<JOBOBJECT_IO_ATTRIBUTION_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofJOBOBJECT_IO_ATTRIBUTION_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ControlFlags !== undefined) view.setUint32(0, Number(data.ControlFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ReadStats !== undefined) view.setBigUint64(8, data.ReadStats === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ReadStats))), true);
  // 0x10: pointer
  if (data?.WriteStats !== undefined) view.setBigUint64(16, data.WriteStats === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WriteStats))), true);
  return buf;
}

export class JOBOBJECT_IO_ATTRIBUTION_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ControlFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ReadStats(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get WriteStats(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set ControlFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ReadStats(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set WriteStats(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type BOOL = number;

export type PSTR = Deno.PointerValue | Uint8Array;

// Native Libraries

try {
  var libKERNEL32_dll = Deno.dlopen("KERNEL32.dll", {
    IsProcessInJob: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    CreateJobObjectW: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    FreeMemoryJobObject: {
      parameters: ["pointer"],
      result: "void",
    },
    OpenJobObjectW: {
      parameters: ["u32", "i32", "buffer"],
      result: "pointer",
    },
    AssignProcessToJobObject: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    TerminateJobObject: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    SetInformationJobObject: {
      parameters: ["pointer", "i32", "pointer", "u32"],
      result: "i32",
    },
    SetIoRateControlInformationJobObject: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    QueryInformationJobObject: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    QueryIoRateControlInformationJobObject: {
      parameters: ["pointer", "buffer", "pointer", "pointer"],
      result: "u32",
    },
    CreateJobObjectA: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    OpenJobObjectA: {
      parameters: ["u32", "i32", "buffer"],
      result: "pointer",
    },
    CreateJobSet: {
      parameters: ["u32", "pointer", "u32"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libUSER32_dll = Deno.dlopen("USER32.dll", {
    UserHandleGrantAccess: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function IsProcessInJob(
  ProcessHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  JobHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Result: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.IsProcessInJob(util.toPointer(ProcessHandle), util.toPointer(JobHandle), util.toPointer(Result)));
}

export function CreateJobObjectW(
  lpJobAttributes: Deno.PointerValue | Uint8Array /* ptr */,
  lpName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libKERNEL32_dll.CreateJobObjectW(util.toPointer(lpJobAttributes), util.pwstrToFfi(lpName));
}

export function FreeMemoryJobObject(
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.FreeMemoryJobObject(util.toPointer(Buffer));
}

export function OpenJobObjectW(
  dwDesiredAccess: number /* u32 */,
  bInheritHandle: boolean /* Windows.Win32.Foundation.BOOL */,
  lpName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libKERNEL32_dll.OpenJobObjectW(dwDesiredAccess, util.boolToFfi(bInheritHandle), util.pwstrToFfi(lpName));
}

export function AssignProcessToJobObject(
  hJob: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  hProcess: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.AssignProcessToJobObject(util.toPointer(hJob), util.toPointer(hProcess)));
}

export function TerminateJobObject(
  hJob: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  uExitCode: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.TerminateJobObject(util.toPointer(hJob), uExitCode));
}

export function SetInformationJobObject(
  hJob: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  JobObjectInformationClass: JOBOBJECTINFOCLASS /* Windows.Win32.System.JobObjects.JOBOBJECTINFOCLASS */,
  lpJobObjectInformation: Deno.PointerValue | Uint8Array /* ptr */,
  cbJobObjectInformationLength: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetInformationJobObject(util.toPointer(hJob), JobObjectInformationClass, util.toPointer(lpJobObjectInformation), cbJobObjectInformationLength));
}

export function SetIoRateControlInformationJobObject(
  hJob: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  IoRateControlInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libKERNEL32_dll.SetIoRateControlInformationJobObject(util.toPointer(hJob), util.toPointer(IoRateControlInfo));
}

export function QueryInformationJobObject(
  hJob: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  JobObjectInformationClass: JOBOBJECTINFOCLASS /* Windows.Win32.System.JobObjects.JOBOBJECTINFOCLASS */,
  lpJobObjectInformation: Deno.PointerValue | Uint8Array /* ptr */,
  cbJobObjectInformationLength: number /* u32 */,
  lpReturnLength: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.QueryInformationJobObject(util.toPointer(hJob), JobObjectInformationClass, util.toPointer(lpJobObjectInformation), cbJobObjectInformationLength, util.toPointer(lpReturnLength)));
}

export function QueryIoRateControlInformationJobObject(
  hJob: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  VolumeName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  InfoBlocks: Deno.PointerValue | Uint8Array /* ptr */,
  InfoBlockCount: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libKERNEL32_dll.QueryIoRateControlInformationJobObject(util.toPointer(hJob), util.pwstrToFfi(VolumeName), util.toPointer(InfoBlocks), util.toPointer(InfoBlockCount));
}

export function UserHandleGrantAccess(
  hUserHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  hJob: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  bGrant: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.UserHandleGrantAccess(util.toPointer(hUserHandle), util.toPointer(hJob), util.boolToFfi(bGrant)));
}

export function CreateJobObjectA(
  lpJobAttributes: Deno.PointerValue | Uint8Array /* ptr */,
  lpName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libKERNEL32_dll.CreateJobObjectA(util.toPointer(lpJobAttributes), util.pstrToFfi(lpName));
}

export function OpenJobObjectA(
  dwDesiredAccess: number /* u32 */,
  bInheritHandle: boolean /* Windows.Win32.Foundation.BOOL */,
  lpName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libKERNEL32_dll.OpenJobObjectA(dwDesiredAccess, util.boolToFfi(bInheritHandle), util.pstrToFfi(lpName));
}

export function CreateJobSet(
  NumJob: number /* u32 */,
  UserJobSet: Deno.PointerValue | Uint8Array /* ptr */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.CreateJobSet(NumJob, util.toPointer(UserJobSet), Flags));
}

