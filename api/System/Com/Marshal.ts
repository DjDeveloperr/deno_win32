/// Auto-generated by Deno Win32: Windows.Win32.System.Com.Marshal.Apis

import * as util from "../../../util.ts";

// Enums
export type STDMSHLFLAGS = number;

// Constants
export const SMEXF_SERVER = 1;
export const SMEXF_HANDLER = 2;

// Structs

export type HRESULT = number;

// Native Libraries

try {
  var libOLEAUT32 = Deno.dlopen("OLEAUT32", {
    BSTR_UserSize: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    BSTR_UserMarshal: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    BSTR_UserUnmarshal: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    BSTR_UserFree: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    VARIANT_UserSize: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    VARIANT_UserMarshal: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    VARIANT_UserUnmarshal: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    VARIANT_UserFree: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    BSTR_UserSize64: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    BSTR_UserMarshal64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    BSTR_UserUnmarshal64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    BSTR_UserFree64: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    VARIANT_UserSize64: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    VARIANT_UserMarshal64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    VARIANT_UserUnmarshal64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    VARIANT_UserFree64: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    LPSAFEARRAY_UserSize: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    LPSAFEARRAY_UserMarshal: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    LPSAFEARRAY_UserUnmarshal: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    LPSAFEARRAY_UserFree: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    LPSAFEARRAY_UserSize64: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    LPSAFEARRAY_UserMarshal64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    LPSAFEARRAY_UserUnmarshal64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    LPSAFEARRAY_UserFree64: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libOLE32 = Deno.dlopen("OLE32", {
    HWND_UserSize: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    HWND_UserMarshal: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HWND_UserUnmarshal: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HWND_UserFree: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    HWND_UserSize64: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    HWND_UserMarshal64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HWND_UserUnmarshal64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HWND_UserFree64: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    CLIPFORMAT_UserSize: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    CLIPFORMAT_UserMarshal: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    CLIPFORMAT_UserUnmarshal: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    CLIPFORMAT_UserFree: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    HBITMAP_UserSize: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    HBITMAP_UserMarshal: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HBITMAP_UserUnmarshal: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HBITMAP_UserFree: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    HDC_UserSize: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    HDC_UserMarshal: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HDC_UserUnmarshal: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HDC_UserFree: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    HICON_UserSize: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    HICON_UserMarshal: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HICON_UserUnmarshal: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HICON_UserFree: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    STGMEDIUM_UserSize: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    STGMEDIUM_UserMarshal: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    STGMEDIUM_UserUnmarshal: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    STGMEDIUM_UserFree: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    CLIPFORMAT_UserSize64: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    CLIPFORMAT_UserMarshal64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    CLIPFORMAT_UserUnmarshal64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    CLIPFORMAT_UserFree64: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    HBITMAP_UserSize64: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    HBITMAP_UserMarshal64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HBITMAP_UserUnmarshal64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HBITMAP_UserFree64: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    HDC_UserSize64: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    HDC_UserMarshal64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HDC_UserUnmarshal64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HDC_UserFree64: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    HICON_UserSize64: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    HICON_UserMarshal64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HICON_UserUnmarshal64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HICON_UserFree64: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    STGMEDIUM_UserSize64: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    STGMEDIUM_UserMarshal64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    STGMEDIUM_UserUnmarshal64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    STGMEDIUM_UserFree64: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    CoGetMarshalSizeMax: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer", "u32"],
      result: "pointer",
    },
    CoMarshalInterface: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer", "u32"],
      result: "pointer",
    },
    CoUnmarshalInterface: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    CoMarshalHresult: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    CoUnmarshalHresult: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    CoReleaseMarshalData: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CoGetStandardMarshal: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    CoGetStdMarshalEx: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    CoMarshalInterThreadInterfaceInStream: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HACCEL_UserSize: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    HACCEL_UserMarshal: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HACCEL_UserUnmarshal: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HACCEL_UserFree: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    HGLOBAL_UserSize: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    HGLOBAL_UserMarshal: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HGLOBAL_UserUnmarshal: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HGLOBAL_UserFree: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    HMENU_UserSize: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    HMENU_UserMarshal: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HMENU_UserUnmarshal: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HMENU_UserFree: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    HACCEL_UserSize64: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    HACCEL_UserMarshal64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HACCEL_UserUnmarshal64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HACCEL_UserFree64: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    HGLOBAL_UserSize64: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    HGLOBAL_UserMarshal64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HGLOBAL_UserUnmarshal64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HGLOBAL_UserFree64: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    HMENU_UserSize64: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    HMENU_UserMarshal64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HMENU_UserUnmarshal64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HMENU_UserFree64: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    HPALETTE_UserSize: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    HPALETTE_UserMarshal: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HPALETTE_UserUnmarshal: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HPALETTE_UserFree: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    HPALETTE_UserSize64: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    HPALETTE_UserMarshal64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HPALETTE_UserUnmarshal64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HPALETTE_UserFree64: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libole32 = Deno.dlopen("ole32", {
    SNB_UserSize: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    SNB_UserMarshal: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SNB_UserUnmarshal: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SNB_UserFree: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    SNB_UserSize64: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    SNB_UserMarshal64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SNB_UserUnmarshal64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SNB_UserFree64: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function BSTR_UserSize(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libOLEAUT32.BSTR_UserSize(util.toPointer(param0), param1, util.toPointer(param2));
}

export function BSTR_UserMarshal(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLEAUT32.BSTR_UserMarshal(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function BSTR_UserUnmarshal(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLEAUT32.BSTR_UserUnmarshal(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function BSTR_UserFree(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOLEAUT32.BSTR_UserFree(util.toPointer(param0), util.toPointer(param1));
}

export function HWND_UserSize(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libOLE32.HWND_UserSize(util.toPointer(param0), param1, util.toPointer(param2));
}

export function HWND_UserMarshal(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.HWND_UserMarshal(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HWND_UserUnmarshal(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.HWND_UserUnmarshal(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HWND_UserFree(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOLE32.HWND_UserFree(util.toPointer(param0), util.toPointer(param1));
}

export function VARIANT_UserSize(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libOLEAUT32.VARIANT_UserSize(util.toPointer(param0), param1, util.toPointer(param2));
}

export function VARIANT_UserMarshal(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLEAUT32.VARIANT_UserMarshal(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function VARIANT_UserUnmarshal(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLEAUT32.VARIANT_UserUnmarshal(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function VARIANT_UserFree(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOLEAUT32.VARIANT_UserFree(util.toPointer(param0), util.toPointer(param1));
}

export function BSTR_UserSize64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libOLEAUT32.BSTR_UserSize64(util.toPointer(param0), param1, util.toPointer(param2));
}

export function BSTR_UserMarshal64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLEAUT32.BSTR_UserMarshal64(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function BSTR_UserUnmarshal64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLEAUT32.BSTR_UserUnmarshal64(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function BSTR_UserFree64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOLEAUT32.BSTR_UserFree64(util.toPointer(param0), util.toPointer(param1));
}

export function HWND_UserSize64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libOLE32.HWND_UserSize64(util.toPointer(param0), param1, util.toPointer(param2));
}

export function HWND_UserMarshal64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.HWND_UserMarshal64(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HWND_UserUnmarshal64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.HWND_UserUnmarshal64(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HWND_UserFree64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOLE32.HWND_UserFree64(util.toPointer(param0), util.toPointer(param1));
}

export function VARIANT_UserSize64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libOLEAUT32.VARIANT_UserSize64(util.toPointer(param0), param1, util.toPointer(param2));
}

export function VARIANT_UserMarshal64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLEAUT32.VARIANT_UserMarshal64(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function VARIANT_UserUnmarshal64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLEAUT32.VARIANT_UserUnmarshal64(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function VARIANT_UserFree64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOLEAUT32.VARIANT_UserFree64(util.toPointer(param0), util.toPointer(param1));
}

export function CLIPFORMAT_UserSize(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libOLE32.CLIPFORMAT_UserSize(util.toPointer(param0), param1, util.toPointer(param2));
}

export function CLIPFORMAT_UserMarshal(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.CLIPFORMAT_UserMarshal(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function CLIPFORMAT_UserUnmarshal(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.CLIPFORMAT_UserUnmarshal(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function CLIPFORMAT_UserFree(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOLE32.CLIPFORMAT_UserFree(util.toPointer(param0), util.toPointer(param1));
}

export function HBITMAP_UserSize(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libOLE32.HBITMAP_UserSize(util.toPointer(param0), param1, util.toPointer(param2));
}

export function HBITMAP_UserMarshal(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.HBITMAP_UserMarshal(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HBITMAP_UserUnmarshal(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.HBITMAP_UserUnmarshal(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HBITMAP_UserFree(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOLE32.HBITMAP_UserFree(util.toPointer(param0), util.toPointer(param1));
}

export function HDC_UserSize(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libOLE32.HDC_UserSize(util.toPointer(param0), param1, util.toPointer(param2));
}

export function HDC_UserMarshal(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.HDC_UserMarshal(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HDC_UserUnmarshal(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.HDC_UserUnmarshal(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HDC_UserFree(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOLE32.HDC_UserFree(util.toPointer(param0), util.toPointer(param1));
}

export function HICON_UserSize(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libOLE32.HICON_UserSize(util.toPointer(param0), param1, util.toPointer(param2));
}

export function HICON_UserMarshal(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.HICON_UserMarshal(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HICON_UserUnmarshal(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.HICON_UserUnmarshal(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HICON_UserFree(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOLE32.HICON_UserFree(util.toPointer(param0), util.toPointer(param1));
}

export function SNB_UserSize(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libole32.SNB_UserSize(util.toPointer(param0), param1, util.toPointer(param2));
}

export function SNB_UserMarshal(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libole32.SNB_UserMarshal(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function SNB_UserUnmarshal(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libole32.SNB_UserUnmarshal(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function SNB_UserFree(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libole32.SNB_UserFree(util.toPointer(param0), util.toPointer(param1));
}

export function STGMEDIUM_UserSize(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libOLE32.STGMEDIUM_UserSize(util.toPointer(param0), param1, util.toPointer(param2));
}

export function STGMEDIUM_UserMarshal(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.STGMEDIUM_UserMarshal(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function STGMEDIUM_UserUnmarshal(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.STGMEDIUM_UserUnmarshal(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function STGMEDIUM_UserFree(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOLE32.STGMEDIUM_UserFree(util.toPointer(param0), util.toPointer(param1));
}

export function CLIPFORMAT_UserSize64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libOLE32.CLIPFORMAT_UserSize64(util.toPointer(param0), param1, util.toPointer(param2));
}

export function CLIPFORMAT_UserMarshal64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.CLIPFORMAT_UserMarshal64(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function CLIPFORMAT_UserUnmarshal64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.CLIPFORMAT_UserUnmarshal64(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function CLIPFORMAT_UserFree64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOLE32.CLIPFORMAT_UserFree64(util.toPointer(param0), util.toPointer(param1));
}

export function HBITMAP_UserSize64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libOLE32.HBITMAP_UserSize64(util.toPointer(param0), param1, util.toPointer(param2));
}

export function HBITMAP_UserMarshal64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.HBITMAP_UserMarshal64(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HBITMAP_UserUnmarshal64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.HBITMAP_UserUnmarshal64(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HBITMAP_UserFree64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOLE32.HBITMAP_UserFree64(util.toPointer(param0), util.toPointer(param1));
}

export function HDC_UserSize64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libOLE32.HDC_UserSize64(util.toPointer(param0), param1, util.toPointer(param2));
}

export function HDC_UserMarshal64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.HDC_UserMarshal64(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HDC_UserUnmarshal64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.HDC_UserUnmarshal64(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HDC_UserFree64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOLE32.HDC_UserFree64(util.toPointer(param0), util.toPointer(param1));
}

export function HICON_UserSize64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libOLE32.HICON_UserSize64(util.toPointer(param0), param1, util.toPointer(param2));
}

export function HICON_UserMarshal64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.HICON_UserMarshal64(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HICON_UserUnmarshal64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.HICON_UserUnmarshal64(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HICON_UserFree64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOLE32.HICON_UserFree64(util.toPointer(param0), util.toPointer(param1));
}

export function SNB_UserSize64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libole32.SNB_UserSize64(util.toPointer(param0), param1, util.toPointer(param2));
}

export function SNB_UserMarshal64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libole32.SNB_UserMarshal64(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function SNB_UserUnmarshal64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libole32.SNB_UserUnmarshal64(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function SNB_UserFree64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libole32.SNB_UserFree64(util.toPointer(param0), util.toPointer(param1));
}

export function STGMEDIUM_UserSize64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libOLE32.STGMEDIUM_UserSize64(util.toPointer(param0), param1, util.toPointer(param2));
}

export function STGMEDIUM_UserMarshal64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.STGMEDIUM_UserMarshal64(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function STGMEDIUM_UserUnmarshal64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.STGMEDIUM_UserUnmarshal64(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function STGMEDIUM_UserFree64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOLE32.STGMEDIUM_UserFree64(util.toPointer(param0), util.toPointer(param1));
}

export function CoGetMarshalSizeMax(
  pulSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pUnk: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  dwDestContext: number /* u32 */,
  pvDestContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  mshlflags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoGetMarshalSizeMax(util.toPointer(pulSize), util.toPointer(riid), util.toPointer(pUnk), dwDestContext, util.toPointer(pvDestContext), mshlflags));
}

export function CoMarshalInterface(
  pStm: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IStream */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pUnk: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  dwDestContext: number /* u32 */,
  pvDestContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  mshlflags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoMarshalInterface(util.toPointer(pStm), util.toPointer(riid), util.toPointer(pUnk), dwDestContext, util.toPointer(pvDestContext), mshlflags));
}

export function CoUnmarshalInterface(
  pStm: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IStream */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppv: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoUnmarshalInterface(util.toPointer(pStm), util.toPointer(riid), util.toPointer(ppv)));
}

export function CoMarshalHresult(
  pstm: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IStream */,
  hresult: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoMarshalHresult(util.toPointer(pstm), util.toPointer(hresult)));
}

export function CoUnmarshalHresult(
  pstm: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IStream */,
  phresult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoUnmarshalHresult(util.toPointer(pstm), util.toPointer(phresult)));
}

export function CoReleaseMarshalData(
  pStm: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IStream */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoReleaseMarshalData(util.toPointer(pStm)));
}

export function CoGetStandardMarshal(
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pUnk: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  dwDestContext: number /* u32 */,
  pvDestContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  mshlflags: number /* u32 */,
  ppMarshal: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoGetStandardMarshal(util.toPointer(riid), util.toPointer(pUnk), dwDestContext, util.toPointer(pvDestContext), mshlflags, util.toPointer(ppMarshal)));
}

export function CoGetStdMarshalEx(
  pUnkOuter: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  smexflags: number /* u32 */,
  ppUnkInner: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoGetStdMarshalEx(util.toPointer(pUnkOuter), smexflags, util.toPointer(ppUnkInner)));
}

export function CoMarshalInterThreadInterfaceInStream(
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pUnk: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  ppStm: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoMarshalInterThreadInterfaceInStream(util.toPointer(riid), util.toPointer(pUnk), util.toPointer(ppStm)));
}

export function LPSAFEARRAY_UserSize(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libOLEAUT32.LPSAFEARRAY_UserSize(util.toPointer(param0), param1, util.toPointer(param2));
}

export function LPSAFEARRAY_UserMarshal(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLEAUT32.LPSAFEARRAY_UserMarshal(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function LPSAFEARRAY_UserUnmarshal(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLEAUT32.LPSAFEARRAY_UserUnmarshal(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function LPSAFEARRAY_UserFree(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOLEAUT32.LPSAFEARRAY_UserFree(util.toPointer(param0), util.toPointer(param1));
}

export function LPSAFEARRAY_UserSize64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libOLEAUT32.LPSAFEARRAY_UserSize64(util.toPointer(param0), param1, util.toPointer(param2));
}

export function LPSAFEARRAY_UserMarshal64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLEAUT32.LPSAFEARRAY_UserMarshal64(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function LPSAFEARRAY_UserUnmarshal64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLEAUT32.LPSAFEARRAY_UserUnmarshal64(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function LPSAFEARRAY_UserFree64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOLEAUT32.LPSAFEARRAY_UserFree64(util.toPointer(param0), util.toPointer(param1));
}

export function HACCEL_UserSize(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libOLE32.HACCEL_UserSize(util.toPointer(param0), param1, util.toPointer(param2));
}

export function HACCEL_UserMarshal(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.HACCEL_UserMarshal(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HACCEL_UserUnmarshal(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.HACCEL_UserUnmarshal(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HACCEL_UserFree(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOLE32.HACCEL_UserFree(util.toPointer(param0), util.toPointer(param1));
}

export function HGLOBAL_UserSize(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libOLE32.HGLOBAL_UserSize(util.toPointer(param0), param1, util.toPointer(param2));
}

export function HGLOBAL_UserMarshal(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.HGLOBAL_UserMarshal(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HGLOBAL_UserUnmarshal(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.HGLOBAL_UserUnmarshal(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HGLOBAL_UserFree(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOLE32.HGLOBAL_UserFree(util.toPointer(param0), util.toPointer(param1));
}

export function HMENU_UserSize(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libOLE32.HMENU_UserSize(util.toPointer(param0), param1, util.toPointer(param2));
}

export function HMENU_UserMarshal(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.HMENU_UserMarshal(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HMENU_UserUnmarshal(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.HMENU_UserUnmarshal(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HMENU_UserFree(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOLE32.HMENU_UserFree(util.toPointer(param0), util.toPointer(param1));
}

export function HACCEL_UserSize64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libOLE32.HACCEL_UserSize64(util.toPointer(param0), param1, util.toPointer(param2));
}

export function HACCEL_UserMarshal64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.HACCEL_UserMarshal64(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HACCEL_UserUnmarshal64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.HACCEL_UserUnmarshal64(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HACCEL_UserFree64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOLE32.HACCEL_UserFree64(util.toPointer(param0), util.toPointer(param1));
}

export function HGLOBAL_UserSize64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libOLE32.HGLOBAL_UserSize64(util.toPointer(param0), param1, util.toPointer(param2));
}

export function HGLOBAL_UserMarshal64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.HGLOBAL_UserMarshal64(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HGLOBAL_UserUnmarshal64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.HGLOBAL_UserUnmarshal64(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HGLOBAL_UserFree64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOLE32.HGLOBAL_UserFree64(util.toPointer(param0), util.toPointer(param1));
}

export function HMENU_UserSize64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libOLE32.HMENU_UserSize64(util.toPointer(param0), param1, util.toPointer(param2));
}

export function HMENU_UserMarshal64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.HMENU_UserMarshal64(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HMENU_UserUnmarshal64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.HMENU_UserUnmarshal64(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HMENU_UserFree64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOLE32.HMENU_UserFree64(util.toPointer(param0), util.toPointer(param1));
}

export function HPALETTE_UserSize(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libOLE32.HPALETTE_UserSize(util.toPointer(param0), param1, util.toPointer(param2));
}

export function HPALETTE_UserMarshal(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.HPALETTE_UserMarshal(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HPALETTE_UserUnmarshal(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.HPALETTE_UserUnmarshal(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HPALETTE_UserFree(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOLE32.HPALETTE_UserFree(util.toPointer(param0), util.toPointer(param1));
}

export function HPALETTE_UserSize64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libOLE32.HPALETTE_UserSize64(util.toPointer(param0), param1, util.toPointer(param2));
}

export function HPALETTE_UserMarshal64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.HPALETTE_UserMarshal64(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HPALETTE_UserUnmarshal64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.HPALETTE_UserUnmarshal64(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HPALETTE_UserFree64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOLE32.HPALETTE_UserFree64(util.toPointer(param0), util.toPointer(param1));
}

