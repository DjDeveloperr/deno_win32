/// Auto-generated by Deno Win32: Windows.Win32.System.Com.Urlmon.Apis

import * as util from "../../../util.ts";

// Enums
export type IEObjectType = number;
export type MONIKERPROPERTY = number;
export type BINDVERB = number;
export type BINDF = number;
export type URL_ENCODING = number;
export type BINDINFO_OPTIONS = number;
export type BSCF = number;
export type BINDSTATUS = number;
export type BINDF2 = number;
export type AUTHENTICATEF = number;
export type CIP_STATUS = number;
export type Uri_HOST_TYPE = number;
export type BINDSTRING = number;
export type PI_FLAGS = number;
export type OIBDG_FLAGS = number;
export type PARSEACTION = number;
export type PSUACTION = number;
export type QUERYOPTION = number;
export type INTERNETFEATURELIST = number;
export type PUAF = number;
export type PUAFOUT = number;
export type SZM_FLAGS = number;
export type URLZONE = number;
export type URLTEMPLATE = number;
export type INET_ZONE_MANAGER_CONSTANTS = number;
export type ZAFLAGS = number;
export type URLZONEREG = number;
export type BINDHANDLETYPES = number;
export type CLSCTX = number;

// Constants
export const MKSYS_URLMONIKER = 6;
export const URL_MK_LEGACY = 0;
export const URL_MK_UNIFORM = 1;
export const URL_MK_NO_CANONICALIZE = 2;
export const FIEF_FLAG_FORCE_JITUI = 1;
export const FIEF_FLAG_PEEK = 2;
export const FIEF_FLAG_SKIP_INSTALLED_VERSION_CHECK = 4;
export const FIEF_FLAG_RESERVED_0 = 8;
export const FMFD_DEFAULT = 0;
export const FMFD_URLASFILENAME = 1;
export const FMFD_ENABLEMIMESNIFFING = 2;
export const FMFD_IGNOREMIMETEXTPLAIN = 4;
export const FMFD_SERVERMIME = 8;
export const FMFD_RESPECTTEXTPLAIN = 16;
export const FMFD_RETURNUPDATEDIMGMIMES = 32;
export const FMFD_RESERVED_1 = 64;
export const FMFD_RESERVED_2 = 128;
export const UAS_EXACTLEGACY = 4096;
export const URLMON_OPTION_USERAGENT = 268435457;
export const URLMON_OPTION_USERAGENT_REFRESH = 268435458;
export const URLMON_OPTION_URL_ENCODING = 268435460;
export const URLMON_OPTION_USE_BINDSTRINGCREDS = 268435464;
export const URLMON_OPTION_USE_BROWSERAPPSDOCUMENTS = 268435472;
export const CF_NULL = 0;
export const MK_S_ASYNCHRONOUS = 864693344658522600n;
export const S_ASYNCHRONOUS = 262632;
export const E_PENDING = 12113955258378;
export const INET_E_INVALID_URL = 864694446318157826n;
export const INET_E_NO_SESSION = 864695545829785603n;
export const INET_E_CANNOT_CONNECT = 864696645341413380n;
export const INET_E_RESOURCE_NOT_FOUND = 864697744853041157n;
export const INET_E_OBJECT_NOT_FOUND = 864698844364668934n;
export const INET_E_DATA_NOT_AVAILABLE = 864699943876296711n;
export const INET_E_DOWNLOAD_FAILURE = 864701043387924488n;
export const INET_E_AUTHENTICATION_REQUIRED = 864702142899552265n;
export const INET_E_NO_VALID_MEDIA = 864703242411180042n;
export const INET_E_CONNECTION_TIMEOUT = 864704341922807819n;
export const INET_E_INVALID_REQUEST = 864705441434435596n;
export const INET_E_UNKNOWN_PROTOCOL = 864706540946063373n;
export const INET_E_SECURITY_PROBLEM = 864707640457691150n;
export const INET_E_CANNOT_LOAD_DATA = 864708739969318927n;
export const INET_E_CANNOT_INSTANTIATE_OBJECT = 864718635573968912n;
export const INET_E_INVALID_CERTIFICATE = 864713138015830041n;
export const INET_E_REDIRECT_FAILED = 864714237527457812n;
export const INET_E_REDIRECT_TO_DIR = 864715337039085589n;
export const INET_E_CANNOT_LOCK_REQUEST = 864716436550713366n;
export const INET_E_USE_EXTEND_BINDING = 864717536062341143n;
export const INET_E_TERMINATED_BIND = 864719735085596696n;
export const INET_E_RESERVED_1 = 864720834597224474n;
export const INET_E_BLOCKED_REDIRECT_XSECURITYID = 864721934108852251n;
export const INET_E_DOMINJECTIONVALIDATION = 864723033620480028n;
export const INET_E_VTAB_SWITCH_FORCE_ENGINE = 864724133132107805n;
export const INET_E_HSTS_CERTIFICATE_ERROR = 864725232643735582n;
export const INET_E_RESERVED_2 = 864726332155363359n;
export const INET_E_RESERVED_3 = 864727431666991136n;
export const INET_E_RESERVED_4 = 864728531178618913n;
export const INET_E_RESERVED_5 = 864972622759985186n;
export const INET_E_ERROR_FIRST = 864694446318157826n;
export const INET_E_CODE_DOWNLOAD_DECLINED = 865254097736696064n;
export const INET_E_RESULT_DISPATCHED = 865535572713406976n;
export const INET_E_CANNOT_REPLACE_SFP_FILE = 865817047690117888n;
export const INET_E_CODE_INSTALL_SUPPRESSED = 866098522666828800n;
export const INET_E_CODE_INSTALL_BLOCKED_BY_HASH_POLICY = 866099622178456832n;
export const INET_E_DOWNLOAD_BLOCKED_BY_INPRIVATE = 866100721690084609n;
export const INET_E_CODE_INSTALL_BLOCKED_IMMERSIVE = 866101821201712386n;
export const INET_E_FORBIDFRAMING = 866102920713340163n;
export const INET_E_CODE_INSTALL_BLOCKED_ARM = 866104020224967940n;
export const INET_E_BLOCKED_PLUGGABLE_PROTOCOL = 866105119736595717n;
export const INET_E_BLOCKED_ENHANCEDPROTECTEDMODE = 866106219248223494n;
export const INET_E_CODE_INSTALL_BLOCKED_BITNESS = 866107318759851271n;
export const INET_E_DOWNLOAD_BLOCKED_BY_CSP = 864709839480947976n;
export const INET_E_ERROR_LAST = "-2146695928";
export const Uri_DISPLAY_NO_FRAGMENT = 1;
export const Uri_PUNYCODE_IDN_HOST = 2;
export const Uri_DISPLAY_IDN_HOST = 4;
export const Uri_DISPLAY_NO_PUNYCODE = 8;
export const Uri_ENCODING_USER_INFO_AND_PATH_IS_PERCENT_ENCODED_UTF8 = 1;
export const Uri_ENCODING_USER_INFO_AND_PATH_IS_CP = 2;
export const Uri_ENCODING_HOST_IS_IDN = 4;
export const Uri_ENCODING_HOST_IS_PERCENT_ENCODED_UTF8 = 8;
export const Uri_ENCODING_HOST_IS_PERCENT_ENCODED_CP = 16;
export const Uri_ENCODING_QUERY_AND_FRAGMENT_IS_PERCENT_ENCODED_UTF8 = 32;
export const Uri_ENCODING_QUERY_AND_FRAGMENT_IS_CP = 64;
export const UriBuilder_USE_ORIGINAL_FLAGS = 1;
export const WININETINFO_OPTION_LOCK_HANDLE = 65534;
export const URLOSTRM_USECACHEDCOPY_ONLY = 1;
export const URLOSTRM_USECACHEDCOPY = 2;
export const URLOSTRM_GETNEWESTVERSION = 3;
export const SET_FEATURE_ON_THREAD = 1;
export const SET_FEATURE_ON_PROCESS = 2;
export const SET_FEATURE_IN_REGISTRY = 4;
export const SET_FEATURE_ON_THREAD_LOCALMACHINE = 8;
export const SET_FEATURE_ON_THREAD_INTRANET = 16;
export const SET_FEATURE_ON_THREAD_TRUSTED = 32;
export const SET_FEATURE_ON_THREAD_INTERNET = 64;
export const SET_FEATURE_ON_THREAD_RESTRICTED = 128;
export const GET_FEATURE_FROM_THREAD = 1;
export const GET_FEATURE_FROM_PROCESS = 2;
export const GET_FEATURE_FROM_REGISTRY = 4;
export const GET_FEATURE_FROM_THREAD_LOCALMACHINE = 8;
export const GET_FEATURE_FROM_THREAD_INTRANET = 16;
export const GET_FEATURE_FROM_THREAD_TRUSTED = 32;
export const GET_FEATURE_FROM_THREAD_INTERNET = 64;
export const GET_FEATURE_FROM_THREAD_RESTRICTED = 128;
export const INET_E_USE_DEFAULT_PROTOCOLHANDLER = 864710938992574481n;
export const INET_E_USE_DEFAULT_SETTING = 864712038504202258n;
export const INET_E_DEFAULT_ACTION = "-2146697199";
export const INET_E_QUERYOPTION_UNKNOWN = 5628419350724627;
export const INET_E_REDIRECTING = 864714237527457812n;
export const PROTOCOLFLAG_NO_PICS_CHECK = 1;
export const MUTZ_NOSAVEDFILECHECK = 1;
export const MUTZ_ISFILE = 2;
export const MUTZ_ACCEPT_WILDCARD_SCHEME = 128;
export const MUTZ_ENFORCERESTRICTED = 256;
export const MUTZ_RESERVED = 512;
export const MUTZ_REQUIRESAVEDFILECHECK = 1024;
export const MUTZ_DONT_UNESCAPE = 2048;
export const MUTZ_DONT_USE_CACHE = 4096;
export const MUTZ_FORCE_INTRANET_FLAGS = 8192;
export const MUTZ_IGNORE_ZONE_MAPPINGS = 16384;
export const MAX_SIZE_SECURITY_ID = 512;
export const URLACTION_MIN = 4096;
export const URLACTION_DOWNLOAD_MIN = 4096;
export const URLACTION_DOWNLOAD_SIGNED_ACTIVEX = 4097;
export const URLACTION_DOWNLOAD_UNSIGNED_ACTIVEX = 4100;
export const URLACTION_DOWNLOAD_CURR_MAX = 4100;
export const URLACTION_DOWNLOAD_MAX = 4607;
export const URLACTION_ACTIVEX_MIN = 4608;
export const URLACTION_ACTIVEX_RUN = 4608;
export const URLPOLICY_ACTIVEX_CHECK_LIST = 65536;
export const URLACTION_ACTIVEX_OVERRIDE_OBJECT_SAFETY = 4609;
export const URLACTION_ACTIVEX_OVERRIDE_DATA_SAFETY = 4610;
export const URLACTION_ACTIVEX_OVERRIDE_SCRIPT_SAFETY = 4611;
export const URLACTION_SCRIPT_OVERRIDE_SAFETY = 5121;
export const URLACTION_ACTIVEX_CONFIRM_NOOBJECTSAFETY = 4612;
export const URLACTION_ACTIVEX_TREATASUNTRUSTED = 4613;
export const URLACTION_ACTIVEX_NO_WEBOC_SCRIPT = 4614;
export const URLACTION_ACTIVEX_OVERRIDE_REPURPOSEDETECTION = 4615;
export const URLACTION_ACTIVEX_OVERRIDE_OPTIN = 4616;
export const URLACTION_ACTIVEX_SCRIPTLET_RUN = 4617;
export const URLACTION_ACTIVEX_DYNSRC_VIDEO_AND_ANIMATION = 4618;
export const URLACTION_ACTIVEX_OVERRIDE_DOMAINLIST = 4619;
export const URLACTION_ACTIVEX_ALLOW_TDC = 4620;
export const URLACTION_ACTIVEX_CURR_MAX = 4620;
export const URLACTION_ACTIVEX_MAX = 5119;
export const URLACTION_SCRIPT_MIN = 5120;
export const URLACTION_SCRIPT_RUN = 5120;
export const URLACTION_SCRIPT_JAVA_USE = 5122;
export const URLACTION_SCRIPT_SAFE_ACTIVEX = 5125;
export const URLACTION_CROSS_DOMAIN_DATA = 5126;
export const URLACTION_SCRIPT_PASTE = 5127;
export const URLACTION_ALLOW_XDOMAIN_SUBFRAME_RESIZE = 5128;
export const URLACTION_SCRIPT_XSSFILTER = 5129;
export const URLACTION_SCRIPT_NAVIGATE = 5130;
export const URLACTION_PLUGGABLE_PROTOCOL_XHR = 5131;
export const URLACTION_ALLOW_VBSCRIPT_IE = 5132;
export const URLACTION_ALLOW_JSCRIPT_IE = 5133;
export const URLACTION_SCRIPT_CURR_MAX = 5133;
export const URLACTION_SCRIPT_MAX = 5631;
export const URLACTION_HTML_MIN = 5632;
export const URLACTION_HTML_SUBMIT_FORMS = 5633;
export const URLACTION_HTML_SUBMIT_FORMS_FROM = 5634;
export const URLACTION_HTML_SUBMIT_FORMS_TO = 5635;
export const URLACTION_HTML_FONT_DOWNLOAD = 5636;
export const URLACTION_HTML_JAVA_RUN = 5637;
export const URLACTION_HTML_USERDATA_SAVE = 5638;
export const URLACTION_HTML_SUBFRAME_NAVIGATE = 5639;
export const URLACTION_HTML_META_REFRESH = 5640;
export const URLACTION_HTML_MIXED_CONTENT = 5641;
export const URLACTION_HTML_INCLUDE_FILE_PATH = 5642;
export const URLACTION_HTML_ALLOW_INJECTED_DYNAMIC_HTML = 5643;
export const URLACTION_HTML_REQUIRE_UTF8_DOCUMENT_CODEPAGE = 5644;
export const URLACTION_HTML_ALLOW_CROSS_DOMAIN_CANVAS = 5645;
export const URLACTION_HTML_ALLOW_WINDOW_CLOSE = 5646;
export const URLACTION_HTML_ALLOW_CROSS_DOMAIN_WEBWORKER = 5647;
export const URLACTION_HTML_ALLOW_CROSS_DOMAIN_TEXTTRACK = 5648;
export const URLACTION_HTML_ALLOW_INDEXEDDB = 5649;
export const URLACTION_HTML_MAX = 6143;
export const URLACTION_SHELL_MIN = 6144;
export const URLACTION_SHELL_INSTALL_DTITEMS = 6144;
export const URLACTION_SHELL_MOVE_OR_COPY = 6146;
export const URLACTION_SHELL_FILE_DOWNLOAD = 6147;
export const URLACTION_SHELL_VERB = 6148;
export const URLACTION_SHELL_WEBVIEW_VERB = 6149;
export const URLACTION_SHELL_SHELLEXECUTE = 6150;
export const URLACTION_SHELL_EXECUTE_HIGHRISK = 6150;
export const URLACTION_SHELL_EXECUTE_MODRISK = 6151;
export const URLACTION_SHELL_EXECUTE_LOWRISK = 6152;
export const URLACTION_SHELL_POPUPMGR = 6153;
export const URLACTION_SHELL_RTF_OBJECTS_LOAD = 6154;
export const URLACTION_SHELL_ENHANCED_DRAGDROP_SECURITY = 6155;
export const URLACTION_SHELL_EXTENSIONSECURITY = 6156;
export const URLACTION_SHELL_SECURE_DRAGSOURCE = 6157;
export const URLACTION_SHELL_REMOTEQUERY = 6158;
export const URLACTION_SHELL_PREVIEW = 6159;
export const URLACTION_SHELL_SHARE = 6160;
export const URLACTION_SHELL_ALLOW_CROSS_SITE_SHARE = 6161;
export const URLACTION_SHELL_TOCTOU_RISK = 6162;
export const URLACTION_SHELL_CURR_MAX = 6162;
export const URLACTION_SHELL_MAX = 6655;
export const URLACTION_NETWORK_MIN = 6656;
export const URLACTION_CREDENTIALS_USE = 6656;
export const URLPOLICY_CREDENTIALS_SILENT_LOGON_OK = 0;
export const URLPOLICY_CREDENTIALS_MUST_PROMPT_USER = 65536;
export const URLPOLICY_CREDENTIALS_CONDITIONAL_PROMPT = 131072;
export const URLPOLICY_CREDENTIALS_ANONYMOUS_ONLY = 196608;
export const URLACTION_AUTHENTICATE_CLIENT = 6657;
export const URLPOLICY_AUTHENTICATE_CLEARTEXT_OK = 0;
export const URLPOLICY_AUTHENTICATE_CHALLENGE_RESPONSE = 65536;
export const URLPOLICY_AUTHENTICATE_MUTUAL_ONLY = 196608;
export const URLACTION_COOKIES = 6658;
export const URLACTION_COOKIES_SESSION = 6659;
export const URLACTION_CLIENT_CERT_PROMPT = 6660;
export const URLACTION_COOKIES_THIRD_PARTY = 6661;
export const URLACTION_COOKIES_SESSION_THIRD_PARTY = 6662;
export const URLACTION_COOKIES_ENABLED = 6672;
export const URLACTION_NETWORK_CURR_MAX = 6672;
export const URLACTION_NETWORK_MAX = 7167;
export const URLACTION_JAVA_MIN = 7168;
export const URLACTION_JAVA_PERMISSIONS = 7168;
export const URLPOLICY_JAVA_PROHIBIT = 0;
export const URLPOLICY_JAVA_HIGH = 65536;
export const URLPOLICY_JAVA_MEDIUM = 131072;
export const URLPOLICY_JAVA_LOW = 196608;
export const URLPOLICY_JAVA_CUSTOM = 8388608;
export const URLACTION_JAVA_CURR_MAX = 7168;
export const URLACTION_JAVA_MAX = 7423;
export const URLACTION_INFODELIVERY_MIN = 7424;
export const URLACTION_INFODELIVERY_NO_ADDING_CHANNELS = 7424;
export const URLACTION_INFODELIVERY_NO_EDITING_CHANNELS = 7425;
export const URLACTION_INFODELIVERY_NO_REMOVING_CHANNELS = 7426;
export const URLACTION_INFODELIVERY_NO_ADDING_SUBSCRIPTIONS = 7427;
export const URLACTION_INFODELIVERY_NO_EDITING_SUBSCRIPTIONS = 7428;
export const URLACTION_INFODELIVERY_NO_REMOVING_SUBSCRIPTIONS = 7429;
export const URLACTION_INFODELIVERY_NO_CHANNEL_LOGGING = 7430;
export const URLACTION_INFODELIVERY_CURR_MAX = 7430;
export const URLACTION_INFODELIVERY_MAX = 7679;
export const URLACTION_CHANNEL_SOFTDIST_MIN = 7680;
export const URLACTION_CHANNEL_SOFTDIST_PERMISSIONS = 7685;
export const URLPOLICY_CHANNEL_SOFTDIST_PROHIBIT = 65536;
export const URLPOLICY_CHANNEL_SOFTDIST_PRECACHE = 131072;
export const URLPOLICY_CHANNEL_SOFTDIST_AUTOINSTALL = 196608;
export const URLACTION_CHANNEL_SOFTDIST_MAX = 7935;
export const URLACTION_DOTNET_USERCONTROLS = 8197;
export const URLACTION_BEHAVIOR_MIN = 8192;
export const URLACTION_BEHAVIOR_RUN = 8192;
export const URLPOLICY_BEHAVIOR_CHECK_LIST = 65536;
export const URLACTION_FEATURE_MIN = 8448;
export const URLACTION_FEATURE_MIME_SNIFFING = 8448;
export const URLACTION_FEATURE_ZONE_ELEVATION = 8449;
export const URLACTION_FEATURE_WINDOW_RESTRICTIONS = 8450;
export const URLACTION_FEATURE_SCRIPT_STATUS_BAR = 8451;
export const URLACTION_FEATURE_FORCE_ADDR_AND_STATUS = 8452;
export const URLACTION_FEATURE_BLOCK_INPUT_PROMPTS = 8453;
export const URLACTION_FEATURE_DATA_BINDING = 8454;
export const URLACTION_FEATURE_CROSSDOMAIN_FOCUS_CHANGE = 8455;
export const URLACTION_AUTOMATIC_DOWNLOAD_UI_MIN = 8704;
export const URLACTION_AUTOMATIC_DOWNLOAD_UI = 8704;
export const URLACTION_AUTOMATIC_ACTIVEX_UI = 8705;
export const URLACTION_ALLOW_RESTRICTEDPROTOCOLS = 8960;
export const URLACTION_ALLOW_APEVALUATION = 8961;
export const URLACTION_ALLOW_XHR_EVALUATION = 8962;
export const URLACTION_WINDOWS_BROWSER_APPLICATIONS = 9216;
export const URLACTION_XPS_DOCUMENTS = 9217;
export const URLACTION_LOOSE_XAML = 9218;
export const URLACTION_LOWRIGHTS = 9472;
export const URLACTION_WINFX_SETUP = 9728;
export const URLACTION_INPRIVATE_BLOCKING = 9984;
export const URLACTION_ALLOW_AUDIO_VIDEO = 9985;
export const URLACTION_ALLOW_ACTIVEX_FILTERING = 9986;
export const URLACTION_ALLOW_STRUCTURED_STORAGE_SNIFFING = 9987;
export const URLACTION_ALLOW_AUDIO_VIDEO_PLUGINS = 9988;
export const URLACTION_ALLOW_ZONE_ELEVATION_VIA_OPT_OUT = 9989;
export const URLACTION_ALLOW_ZONE_ELEVATION_OPT_OUT_ADDITION = 9990;
export const URLACTION_ALLOW_CROSSDOMAIN_DROP_WITHIN_WINDOW = 9992;
export const URLACTION_ALLOW_CROSSDOMAIN_DROP_ACROSS_WINDOWS = 9993;
export const URLACTION_ALLOW_CROSSDOMAIN_APPCACHE_MANIFEST = 9994;
export const URLACTION_ALLOW_RENDER_LEGACY_DXTFILTERS = 9995;
export const URLACTION_ALLOW_ANTIMALWARE_SCANNING_OF_ACTIVEX = 9996;
export const URLACTION_ALLOW_CSS_EXPRESSIONS = 9997;
export const URLPOLICY_ALLOW = 0;
export const URLPOLICY_QUERY = 1;
export const URLPOLICY_DISALLOW = 3;
export const URLPOLICY_NOTIFY_ON_ALLOW = 16;
export const URLPOLICY_NOTIFY_ON_DISALLOW = 32;
export const URLPOLICY_LOG_ON_ALLOW = 64;
export const URLPOLICY_LOG_ON_DISALLOW = 128;
export const URLPOLICY_MASK_PERMISSIONS = 15;
export const URLPOLICY_DONTCHECKDLGBOX = 256;
export const URLZONE_ESC_FLAG = 256;
export const SECURITY_IE_STATE_GREEN = 0;
export const SECURITY_IE_STATE_RED = 1;
export const SOFTDIST_FLAG_USAGE_EMAIL = 1;
export const SOFTDIST_FLAG_USAGE_PRECACHE = 2;
export const SOFTDIST_FLAG_USAGE_AUTOINSTALL = 4;
export const SOFTDIST_FLAG_DELETE_SUBSCRIPTION = 8;
export const SOFTDIST_ADSTATE_NONE = 0;
export const SOFTDIST_ADSTATE_AVAILABLE = 1;
export const SOFTDIST_ADSTATE_DOWNLOADED = 2;
export const SOFTDIST_ADSTATE_INSTALLED = 3;
export const CONFIRMSAFETYACTION_LOADOBJECT = 1;
export const IE_EPM_OBJECT_EVENT = 0;
export const IE_EPM_OBJECT_MUTEX = 1;
export const IE_EPM_OBJECT_SEMAPHORE = 2;
export const IE_EPM_OBJECT_SHARED_MEMORY = 3;
export const IE_EPM_OBJECT_WAITABLE_TIMER = 4;
export const IE_EPM_OBJECT_FILE = 5;
export const IE_EPM_OBJECT_NAMED_PIPE = 6;
export const IE_EPM_OBJECT_REGISTRY = 7;
export const MIMETYPEPROP = 0;
export const USE_SRC_URL = 1;
export const CLASSIDPROP = 2;
export const TRUSTEDDOWNLOADPROP = 3;
export const POPUPLEVELPROP = 4;
export const BINDVERB_GET = 0;
export const BINDVERB_POST = 1;
export const BINDVERB_PUT = 2;
export const BINDVERB_CUSTOM = 3;
export const BINDVERB_RESERVED1 = 4;
export const BINDF_ASYNCHRONOUS = 1;
export const BINDF_ASYNCSTORAGE = 2;
export const BINDF_NOPROGRESSIVERENDERING = 4;
export const BINDF_OFFLINEOPERATION = 8;
export const BINDF_GETNEWESTVERSION = 16;
export const BINDF_NOWRITECACHE = 32;
export const BINDF_NEEDFILE = 64;
export const BINDF_PULLDATA = 128;
export const BINDF_IGNORESECURITYPROBLEM = 256;
export const BINDF_RESYNCHRONIZE = 512;
export const BINDF_HYPERLINK = 1024;
export const BINDF_NO_UI = 2048;
export const BINDF_SILENTOPERATION = 4096;
export const BINDF_PRAGMA_NO_CACHE = 8192;
export const BINDF_GETCLASSOBJECT = 16384;
export const BINDF_RESERVED_1 = 32768;
export const BINDF_FREE_THREADED = 65536;
export const BINDF_DIRECT_READ = 131072;
export const BINDF_FORMS_SUBMIT = 262144;
export const BINDF_GETFROMCACHE_IF_NET_FAIL = 524288;
export const BINDF_FROMURLMON = 1048576;
export const BINDF_FWD_BACK = 2097152;
export const BINDF_PREFERDEFAULTHANDLER = 4194304;
export const BINDF_ENFORCERESTRICTED = 8388608;
export const BINDF_RESERVED_2 = "-2147483648";
export const BINDF_RESERVED_3 = 16777216;
export const BINDF_RESERVED_4 = 33554432;
export const BINDF_RESERVED_5 = 67108864;
export const BINDF_RESERVED_6 = 134217728;
export const BINDF_RESERVED_7 = 1073741824;
export const BINDF_RESERVED_8 = 536870912;
export const URL_ENCODING_NONE = 0;
export const URL_ENCODING_ENABLE_UTF8 = 268435456;
export const URL_ENCODING_DISABLE_UTF8 = 536870912;
export const BINDINFO_OPTIONS_WININETFLAG = 65536;
export const BINDINFO_OPTIONS_ENABLE_UTF8 = 131072;
export const BINDINFO_OPTIONS_DISABLE_UTF8 = 262144;
export const BINDINFO_OPTIONS_USE_IE_ENCODING = 524288;
export const BINDINFO_OPTIONS_BINDTOOBJECT = 1048576;
export const BINDINFO_OPTIONS_SECURITYOPTOUT = 2097152;
export const BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN = 4194304;
export const BINDINFO_OPTIONS_USEBINDSTRINGCREDS = 8388608;
export const BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS = 16777216;
export const BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE = 33554432;
export const BINDINFO_WPC_DOWNLOADBLOCKED = 134217728;
export const BINDINFO_WPC_LOGGING_ENABLED = 268435456;
export const BINDINFO_OPTIONS_ALLOWCONNECTDATA = 536870912;
export const BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS = 1073741824;
export const BINDINFO_OPTIONS_SHDOCVW_NAVIGATE = "-2147483648";
export const BSCF_FIRSTDATANOTIFICATION = 1;
export const BSCF_INTERMEDIATEDATANOTIFICATION = 2;
export const BSCF_LASTDATANOTIFICATION = 4;
export const BSCF_DATAFULLYAVAILABLE = 8;
export const BSCF_AVAILABLEDATASIZEUNKNOWN = 16;
export const BSCF_SKIPDRAINDATAFORFILEURLS = 32;
export const BSCF_64BITLENGTHDOWNLOAD = 64;
export const BINDSTATUS_FINDINGRESOURCE = 1;
export const BINDSTATUS_CONNECTING = 2;
export const BINDSTATUS_REDIRECTING = 3;
export const BINDSTATUS_BEGINDOWNLOADDATA = 4;
export const BINDSTATUS_DOWNLOADINGDATA = 5;
export const BINDSTATUS_ENDDOWNLOADDATA = 6;
export const BINDSTATUS_BEGINDOWNLOADCOMPONENTS = 7;
export const BINDSTATUS_INSTALLINGCOMPONENTS = 8;
export const BINDSTATUS_ENDDOWNLOADCOMPONENTS = 9;
export const BINDSTATUS_USINGCACHEDCOPY = 10;
export const BINDSTATUS_SENDINGREQUEST = 11;
export const BINDSTATUS_CLASSIDAVAILABLE = 12;
export const BINDSTATUS_MIMETYPEAVAILABLE = 13;
export const BINDSTATUS_CACHEFILENAMEAVAILABLE = 14;
export const BINDSTATUS_BEGINSYNCOPERATION = 15;
export const BINDSTATUS_ENDSYNCOPERATION = 16;
export const BINDSTATUS_BEGINUPLOADDATA = 17;
export const BINDSTATUS_UPLOADINGDATA = 18;
export const BINDSTATUS_ENDUPLOADDATA = 19;
export const BINDSTATUS_PROTOCOLCLASSID = 20;
export const BINDSTATUS_ENCODING = 21;
export const BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE = 22;
export const BINDSTATUS_CLASSINSTALLLOCATION = 23;
export const BINDSTATUS_DECODING = 24;
export const BINDSTATUS_LOADINGMIMEHANDLER = 25;
export const BINDSTATUS_CONTENTDISPOSITIONATTACH = 26;
export const BINDSTATUS_FILTERREPORTMIMETYPE = 27;
export const BINDSTATUS_CLSIDCANINSTANTIATE = 28;
export const BINDSTATUS_IUNKNOWNAVAILABLE = 29;
export const BINDSTATUS_DIRECTBIND = 30;
export const BINDSTATUS_RAWMIMETYPE = 31;
export const BINDSTATUS_PROXYDETECTING = 32;
export const BINDSTATUS_ACCEPTRANGES = 33;
export const BINDSTATUS_COOKIE_SENT = 34;
export const BINDSTATUS_COMPACT_POLICY_RECEIVED = 35;
export const BINDSTATUS_COOKIE_SUPPRESSED = 36;
export const BINDSTATUS_COOKIE_STATE_UNKNOWN = 37;
export const BINDSTATUS_COOKIE_STATE_ACCEPT = 38;
export const BINDSTATUS_COOKIE_STATE_REJECT = 39;
export const BINDSTATUS_COOKIE_STATE_PROMPT = 40;
export const BINDSTATUS_COOKIE_STATE_LEASH = 41;
export const BINDSTATUS_COOKIE_STATE_DOWNGRADE = 42;
export const BINDSTATUS_POLICY_HREF = 43;
export const BINDSTATUS_P3P_HEADER = 44;
export const BINDSTATUS_SESSION_COOKIE_RECEIVED = 45;
export const BINDSTATUS_PERSISTENT_COOKIE_RECEIVED = 46;
export const BINDSTATUS_SESSION_COOKIES_ALLOWED = 47;
export const BINDSTATUS_CACHECONTROL = 48;
export const BINDSTATUS_CONTENTDISPOSITIONFILENAME = 49;
export const BINDSTATUS_MIMETEXTPLAINMISMATCH = 50;
export const BINDSTATUS_PUBLISHERAVAILABLE = 51;
export const BINDSTATUS_DISPLAYNAMEAVAILABLE = 52;
export const BINDSTATUS_SSLUX_NAVBLOCKED = 53;
export const BINDSTATUS_SERVER_MIMETYPEAVAILABLE = 54;
export const BINDSTATUS_SNIFFED_CLASSIDAVAILABLE = 55;
export const BINDSTATUS_64BIT_PROGRESS = 56;
export const BINDSTATUS_LAST = 56;
export const BINDSTATUS_RESERVED_0 = 57;
export const BINDSTATUS_RESERVED_1 = 58;
export const BINDSTATUS_RESERVED_2 = 59;
export const BINDSTATUS_RESERVED_3 = 60;
export const BINDSTATUS_RESERVED_4 = 61;
export const BINDSTATUS_RESERVED_5 = 62;
export const BINDSTATUS_RESERVED_6 = 63;
export const BINDSTATUS_RESERVED_7 = 64;
export const BINDSTATUS_RESERVED_8 = 65;
export const BINDSTATUS_RESERVED_9 = 66;
export const BINDSTATUS_RESERVED_A = 67;
export const BINDSTATUS_RESERVED_B = 68;
export const BINDSTATUS_RESERVED_C = 69;
export const BINDSTATUS_RESERVED_D = 70;
export const BINDSTATUS_RESERVED_E = 71;
export const BINDSTATUS_RESERVED_F = 72;
export const BINDSTATUS_RESERVED_10 = 73;
export const BINDSTATUS_RESERVED_11 = 74;
export const BINDSTATUS_RESERVED_12 = 75;
export const BINDSTATUS_RESERVED_13 = 76;
export const BINDSTATUS_RESERVED_14 = 77;
export const BINDSTATUS_LAST_PRIVATE = 77;
export const BINDF2_DISABLEBASICOVERHTTP = 1;
export const BINDF2_DISABLEAUTOCOOKIEHANDLING = 2;
export const BINDF2_READ_DATA_GREATER_THAN_4GB = 4;
export const BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID = 8;
export const BINDF2_SETDOWNLOADMODE = 32;
export const BINDF2_DISABLE_HTTP_REDIRECT_CACHING = 64;
export const BINDF2_KEEP_CALLBACK_MODULE_LOADED = 128;
export const BINDF2_ALLOW_PROXY_CRED_PROMPT = 256;
export const BINDF2_RESERVED_17 = 512;
export const BINDF2_RESERVED_16 = 1024;
export const BINDF2_RESERVED_15 = 2048;
export const BINDF2_RESERVED_14 = 4096;
export const BINDF2_RESERVED_13 = 8192;
export const BINDF2_RESERVED_12 = 16384;
export const BINDF2_RESERVED_11 = 32768;
export const BINDF2_RESERVED_10 = 65536;
export const BINDF2_RESERVED_F = 131072;
export const BINDF2_RESERVED_E = 262144;
export const BINDF2_RESERVED_D = 524288;
export const BINDF2_RESERVED_C = 1048576;
export const BINDF2_RESERVED_B = 2097152;
export const BINDF2_RESERVED_A = 4194304;
export const BINDF2_RESERVED_9 = 8388608;
export const BINDF2_RESERVED_8 = 16777216;
export const BINDF2_RESERVED_7 = 33554432;
export const BINDF2_RESERVED_6 = 67108864;
export const BINDF2_RESERVED_5 = 134217728;
export const BINDF2_RESERVED_4 = 268435456;
export const BINDF2_RESERVED_3 = 536870912;
export const BINDF2_RESERVED_2 = 1073741824;
export const BINDF2_RESERVED_1 = "-2147483648";
export const AUTHENTICATEF_PROXY = 1;
export const AUTHENTICATEF_BASIC = 2;
export const AUTHENTICATEF_HTTP = 4;
export const CIP_DISK_FULL = 0;
export const CIP_ACCESS_DENIED = 1;
export const CIP_NEWER_VERSION_EXISTS = 2;
export const CIP_OLDER_VERSION_EXISTS = 3;
export const CIP_NAME_CONFLICT = 4;
export const CIP_TRUST_VERIFICATION_COMPONENT_MISSING = 5;
export const CIP_EXE_SELF_REGISTERATION_TIMEOUT = 6;
export const CIP_UNSAFE_TO_ABORT = 7;
export const CIP_NEED_REBOOT = 8;
export const CIP_NEED_REBOOT_UI_PERMISSION = 9;
export const Uri_HOST_UNKNOWN = 0;
export const Uri_HOST_DNS = 1;
export const Uri_HOST_IPV4 = 2;
export const Uri_HOST_IPV6 = 3;
export const Uri_HOST_IDN = 4;
export const BINDSTRING_HEADERS = 1;
export const BINDSTRING_ACCEPT_MIMES = 2;
export const BINDSTRING_EXTRA_URL = 3;
export const BINDSTRING_LANGUAGE = 4;
export const BINDSTRING_USERNAME = 5;
export const BINDSTRING_PASSWORD = 6;
export const BINDSTRING_UA_PIXELS = 7;
export const BINDSTRING_UA_COLOR = 8;
export const BINDSTRING_OS = 9;
export const BINDSTRING_USER_AGENT = 10;
export const BINDSTRING_ACCEPT_ENCODINGS = 11;
export const BINDSTRING_POST_COOKIE = 12;
export const BINDSTRING_POST_DATA_MIME = 13;
export const BINDSTRING_URL = 14;
export const BINDSTRING_IID = 15;
export const BINDSTRING_FLAG_BIND_TO_OBJECT = 16;
export const BINDSTRING_PTR_BIND_CONTEXT = 17;
export const BINDSTRING_XDR_ORIGIN = 18;
export const BINDSTRING_DOWNLOADPATH = 19;
export const BINDSTRING_ROOTDOC_URL = 20;
export const BINDSTRING_INITIAL_FILENAME = 21;
export const BINDSTRING_PROXY_USERNAME = 22;
export const BINDSTRING_PROXY_PASSWORD = 23;
export const BINDSTRING_ENTERPRISE_ID = 24;
export const BINDSTRING_DOC_URL = 25;
export const BINDSTRING_SAMESITE_COOKIE_LEVEL = 26;
export const PI_PARSE_URL = 1;
export const PI_FILTER_MODE = 2;
export const PI_FORCE_ASYNC = 4;
export const PI_USE_WORKERTHREAD = 8;
export const PI_MIMEVERIFICATION = 16;
export const PI_CLSIDLOOKUP = 32;
export const PI_DATAPROGRESS = 64;
export const PI_SYNCHRONOUS = 128;
export const PI_APARTMENTTHREADED = 256;
export const PI_CLASSINSTALL = 512;
export const PI_PASSONBINDCTX = 8192;
export const PI_NOMIMEHANDLER = 32768;
export const PI_LOADAPPDIRECT = 16384;
export const PD_FORCE_SWITCH = 65536;
export const PI_PREFERDEFAULTHANDLER = 131072;
export const OIBDG_APARTMENTTHREADED = 256;
export const OIBDG_DATAONLY = 4096;
export const PARSE_CANONICALIZE = 1;
export const PARSE_FRIENDLY = 2;
export const PARSE_SECURITY_URL = 3;
export const PARSE_ROOTDOCUMENT = 4;
export const PARSE_DOCUMENT = 5;
export const PARSE_ANCHOR = 6;
export const PARSE_ENCODE_IS_UNESCAPE = 7;
export const PARSE_DECODE_IS_ESCAPE = 8;
export const PARSE_PATH_FROM_URL = 9;
export const PARSE_URL_FROM_PATH = 10;
export const PARSE_MIME = 11;
export const PARSE_SERVER = 12;
export const PARSE_SCHEMA = 13;
export const PARSE_SITE = 14;
export const PARSE_DOMAIN = 15;
export const PARSE_LOCATION = 16;
export const PARSE_SECURITY_DOMAIN = 17;
export const PARSE_ESCAPE = 18;
export const PARSE_UNESCAPE = 19;
export const PSU_DEFAULT = 1;
export const PSU_SECURITY_URL_ONLY = 2;
export const QUERY_EXPIRATION_DATE = 1;
export const QUERY_TIME_OF_LAST_CHANGE = 2;
export const QUERY_CONTENT_ENCODING = 3;
export const QUERY_CONTENT_TYPE = 4;
export const QUERY_REFRESH = 5;
export const QUERY_RECOMBINE = 6;
export const QUERY_CAN_NAVIGATE = 7;
export const QUERY_USES_NETWORK = 8;
export const QUERY_IS_CACHED = 9;
export const QUERY_IS_INSTALLEDENTRY = 10;
export const QUERY_IS_CACHED_OR_MAPPED = 11;
export const QUERY_USES_CACHE = 12;
export const QUERY_IS_SECURE = 13;
export const QUERY_IS_SAFE = 14;
export const QUERY_USES_HISTORYFOLDER = 15;
export const QUERY_IS_CACHED_AND_USABLE_OFFLINE = 16;
export const FEATURE_OBJECT_CACHING = 0;
export const FEATURE_ZONE_ELEVATION = 1;
export const FEATURE_MIME_HANDLING = 2;
export const FEATURE_MIME_SNIFFING = 3;
export const FEATURE_WINDOW_RESTRICTIONS = 4;
export const FEATURE_WEBOC_POPUPMANAGEMENT = 5;
export const FEATURE_BEHAVIORS = 6;
export const FEATURE_DISABLE_MK_PROTOCOL = 7;
export const FEATURE_LOCALMACHINE_LOCKDOWN = 8;
export const FEATURE_SECURITYBAND = 9;
export const FEATURE_RESTRICT_ACTIVEXINSTALL = 10;
export const FEATURE_VALIDATE_NAVIGATE_URL = 11;
export const FEATURE_RESTRICT_FILEDOWNLOAD = 12;
export const FEATURE_ADDON_MANAGEMENT = 13;
export const FEATURE_PROTOCOL_LOCKDOWN = 14;
export const FEATURE_HTTP_USERNAME_PASSWORD_DISABLE = 15;
export const FEATURE_SAFE_BINDTOOBJECT = 16;
export const FEATURE_UNC_SAVEDFILECHECK = 17;
export const FEATURE_GET_URL_DOM_FILEPATH_UNENCODED = 18;
export const FEATURE_TABBED_BROWSING = 19;
export const FEATURE_SSLUX = 20;
export const FEATURE_DISABLE_NAVIGATION_SOUNDS = 21;
export const FEATURE_DISABLE_LEGACY_COMPRESSION = 22;
export const FEATURE_FORCE_ADDR_AND_STATUS = 23;
export const FEATURE_XMLHTTP = 24;
export const FEATURE_DISABLE_TELNET_PROTOCOL = 25;
export const FEATURE_FEEDS = 26;
export const FEATURE_BLOCK_INPUT_PROMPTS = 27;
export const FEATURE_ENTRY_COUNT = 28;
export const PUAF_DEFAULT = 0;
export const PUAF_NOUI = 1;
export const PUAF_ISFILE = 2;
export const PUAF_WARN_IF_DENIED = 4;
export const PUAF_FORCEUI_FOREGROUND = 8;
export const PUAF_CHECK_TIFS = 16;
export const PUAF_DONTCHECKBOXINDIALOG = 32;
export const PUAF_TRUSTED = 64;
export const PUAF_ACCEPT_WILDCARD_SCHEME = 128;
export const PUAF_ENFORCERESTRICTED = 256;
export const PUAF_NOSAVEDFILECHECK = 512;
export const PUAF_REQUIRESAVEDFILECHECK = 1024;
export const PUAF_DONT_USE_CACHE = 4096;
export const PUAF_RESERVED1 = 8192;
export const PUAF_RESERVED2 = 16384;
export const PUAF_LMZ_UNLOCKED = 65536;
export const PUAF_LMZ_LOCKED = 131072;
export const PUAF_DEFAULTZONEPOL = 262144;
export const PUAF_NPL_USE_LOCKED_IF_RESTRICTED = 524288;
export const PUAF_NOUIIFLOCKED = 1048576;
export const PUAF_DRAGPROTOCOLCHECK = 2097152;
export const PUAFOUT_DEFAULT = 0;
export const PUAFOUT_ISLOCKZONEPOLICY = 1;
export const SZM_CREATE = 0;
export const SZM_DELETE = 1;
export const URLZONE_INVALID = "-1";
export const URLZONE_PREDEFINED_MIN = 0;
export const URLZONE_LOCAL_MACHINE = 0;
export const URLZONE_INTRANET = 1;
export const URLZONE_TRUSTED = 2;
export const URLZONE_INTERNET = 3;
export const URLZONE_UNTRUSTED = 4;
export const URLZONE_PREDEFINED_MAX = 999;
export const URLZONE_USER_MIN = 1000;
export const URLZONE_USER_MAX = 10000;
export const URLTEMPLATE_CUSTOM = 0;
export const URLTEMPLATE_PREDEFINED_MIN = 65536;
export const URLTEMPLATE_LOW = 65536;
export const URLTEMPLATE_MEDLOW = 66816;
export const URLTEMPLATE_MEDIUM = 69632;
export const URLTEMPLATE_MEDHIGH = 70912;
export const URLTEMPLATE_HIGH = 73728;
export const URLTEMPLATE_PREDEFINED_MAX = 131072;
export const MAX_ZONE_PATH = 260;
export const MAX_ZONE_DESCRIPTION = 200;
export const ZAFLAGS_CUSTOM_EDIT = 1;
export const ZAFLAGS_ADD_SITES = 2;
export const ZAFLAGS_REQUIRE_VERIFICATION = 4;
export const ZAFLAGS_INCLUDE_PROXY_OVERRIDE = 8;
export const ZAFLAGS_INCLUDE_INTRANET_SITES = 16;
export const ZAFLAGS_NO_UI = 32;
export const ZAFLAGS_SUPPORTS_VERIFICATION = 64;
export const ZAFLAGS_UNC_AS_INTRANET = 128;
export const ZAFLAGS_DETECT_INTRANET = 256;
export const ZAFLAGS_USE_LOCKED_ZONES = 65536;
export const ZAFLAGS_VERIFY_TEMPLATE_SETTINGS = 131072;
export const ZAFLAGS_NO_CACHE = 262144;
export const URLZONEREG_DEFAULT = 0;
export const URLZONEREG_HKLM = 1;
export const URLZONEREG_HKCU = 2;
export const BINDHANDLETYPES_APPCACHE = 0;
export const BINDHANDLETYPES_DEPENDENCY = 1;
export const BINDHANDLETYPES_COUNT = 2;
export const CLSCTX_INPROC_SERVER = 1;
export const CLSCTX_INPROC_HANDLER = 2;
export const CLSCTX_LOCAL_SERVER = 4;
export const CLSCTX_INPROC_SERVER16 = 8;
export const CLSCTX_REMOTE_SERVER = 16;
export const CLSCTX_INPROC_HANDLER16 = 32;
export const CLSCTX_RESERVED1 = 64;
export const CLSCTX_RESERVED2 = 128;
export const CLSCTX_RESERVED3 = 256;
export const CLSCTX_RESERVED4 = 512;
export const CLSCTX_NO_CODE_DOWNLOAD = 1024;
export const CLSCTX_RESERVED5 = 2048;
export const CLSCTX_NO_CUSTOM_MARSHAL = 4096;
export const CLSCTX_ENABLE_CODE_DOWNLOAD = 8192;
export const CLSCTX_NO_FAILURE_LOG = 16384;
export const CLSCTX_DISABLE_AAA = 32768;
export const CLSCTX_ENABLE_AAA = 65536;
export const CLSCTX_FROM_DEFAULT_CONTEXT = 131072;
export const CLSCTX_ACTIVATE_X86_SERVER = 262144;
export const CLSCTX_ACTIVATE_32_BIT_SERVER = 262144;
export const CLSCTX_ACTIVATE_64_BIT_SERVER = 524288;
export const CLSCTX_ENABLE_CLOAKING = 1048576;
export const CLSCTX_APPCONTAINER = 4194304;
export const CLSCTX_ACTIVATE_AAA_AS_IU = 8388608;
export const CLSCTX_RESERVED6 = 16777216;
export const CLSCTX_ACTIVATE_ARM32_SERVER = 33554432;
export const CLSCTX_PS_DLL = 2147483648;
export const CLSCTX_ALL = 23;
export const CLSCTX_SERVER = 21;

// Structs

export type BOOL = number;

/**
 * Windows.Win32.System.Com.Urlmon.REMSECURITY_ATTRIBUTES (size: 16)
 */
export interface REMSECURITY_ATTRIBUTES {
  /** u32 */
  nLength: number;
  /** u32 */
  lpSecurityDescriptor: number;
  /** Windows.Win32.Foundation.BOOL */
  bInheritHandle: boolean;
}

export const sizeofREMSECURITY_ATTRIBUTES = 16;

export function allocREMSECURITY_ATTRIBUTES(data?: Partial<REMSECURITY_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofREMSECURITY_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.nLength !== undefined) view.setUint32(0, Number(data.nLength), true);
  // 0x04: u32
  if (data?.lpSecurityDescriptor !== undefined) view.setUint32(4, Number(data.lpSecurityDescriptor), true);
  // 0x08: i32
  if (data?.bInheritHandle !== undefined) view.setInt32(8, Number(data.bInheritHandle), true);
  // 0x0c: pad4
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.System.Com.Urlmon.RemBINDINFO (size: 80)
 */
export interface RemBINDINFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  szExtraInfo: string | null;
  /** u32 */
  grfBindInfoF: number;
  /** u32 */
  dwBindVerb: number;
  /** Windows.Win32.Foundation.PWSTR */
  szCustomVerb: string | null;
  /** u32 */
  cbstgmedData: number;
  /** u32 */
  dwOptions: number;
  /** u32 */
  dwOptionsFlags: number;
  /** u32 */
  dwCodePage: number;
  /** Windows.Win32.System.Com.Urlmon.REMSECURITY_ATTRIBUTES */
  securityAttributes: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  iid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.IUnknown */
  pUnk: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwReserved: number;
}

export const sizeofRemBINDINFO = 80;

export function allocRemBINDINFO(data?: Partial<RemBINDINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRemBINDINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.szExtraInfo !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.szExtraInfo);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.grfBindInfoF !== undefined) view.setUint32(16, Number(data.grfBindInfoF), true);
  // 0x14: u32
  if (data?.dwBindVerb !== undefined) view.setUint32(20, Number(data.dwBindVerb), true);
  // 0x18: buffer
  if (data?.szCustomVerb !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.szCustomVerb);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.cbstgmedData !== undefined) view.setUint32(32, Number(data.cbstgmedData), true);
  // 0x24: u32
  if (data?.dwOptions !== undefined) view.setUint32(36, Number(data.dwOptions), true);
  // 0x28: u32
  if (data?.dwOptionsFlags !== undefined) view.setUint32(40, Number(data.dwOptionsFlags), true);
  // 0x2c: u32
  if (data?.dwCodePage !== undefined) view.setUint32(44, Number(data.dwCodePage), true);
  // 0x30: pointer
  if (data?.securityAttributes !== undefined) view.setBigUint64(48, data.securityAttributes === null ? 0n : BigInt(util.toPointer(data.securityAttributes)), true);
  // 0x38: pointer
  if (data?.iid !== undefined) view.setBigUint64(56, data.iid === null ? 0n : BigInt(util.toPointer(data.iid)), true);
  // 0x40: pointer
  if (data?.pUnk !== undefined) view.setBigUint64(64, data.pUnk === null ? 0n : BigInt(util.toPointer(data.pUnk)), true);
  // 0x48: u32
  if (data?.dwReserved !== undefined) view.setUint32(72, Number(data.dwReserved), true);
  // 0x4c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Com.Urlmon.RemFORMATETC (size: 24)
 */
export interface RemFORMATETC {
  /** u32 */
  cfFormat: number;
  /** u32 */
  ptd: number;
  /** u32 */
  dwAspect: number;
  /** i32 */
  lindex: number;
  /** u32 */
  tymed: number;
}

export const sizeofRemFORMATETC = 24;

export function allocRemFORMATETC(data?: Partial<RemFORMATETC>): Uint8Array {
  const buf = new Uint8Array(sizeofRemFORMATETC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cfFormat !== undefined) view.setUint32(0, Number(data.cfFormat), true);
  // 0x04: u32
  if (data?.ptd !== undefined) view.setUint32(4, Number(data.ptd), true);
  // 0x08: u32
  if (data?.dwAspect !== undefined) view.setUint32(8, Number(data.dwAspect), true);
  // 0x0c: i32
  if (data?.lindex !== undefined) view.setInt32(12, Number(data.lindex), true);
  // 0x10: u32
  if (data?.tymed !== undefined) view.setUint32(16, Number(data.tymed), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.System.Com.Urlmon.PROTOCOLDATA (size: 24)
 */
export interface PROTOCOLDATA {
  /** u32 */
  grfFlags: number;
  /** u32 */
  dwState: number;
  /** ptr */
  pData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbData: number;
}

export const sizeofPROTOCOLDATA = 24;

export function allocPROTOCOLDATA(data?: Partial<PROTOCOLDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofPROTOCOLDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.grfFlags !== undefined) view.setUint32(0, Number(data.grfFlags), true);
  // 0x04: u32
  if (data?.dwState !== undefined) view.setUint32(4, Number(data.dwState), true);
  // 0x08: pointer
  if (data?.pData !== undefined) view.setBigUint64(8, data.pData === null ? 0n : BigInt(util.toPointer(data.pData)), true);
  // 0x10: u32
  if (data?.cbData !== undefined) view.setUint32(16, Number(data.cbData), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.System.Com.Urlmon.StartParam (size: 24)
 */
export interface StartParam {
  /** System.Guid */
  iid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.IBindCtx */
  pIBindCtx: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.IUnknown */
  pItf: Uint8Array | Deno.PointerValue | null;
}

export const sizeofStartParam = 24;

export function allocStartParam(data?: Partial<StartParam>): Uint8Array {
  const buf = new Uint8Array(sizeofStartParam);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.iid !== undefined) view.setBigUint64(0, data.iid === null ? 0n : BigInt(util.toPointer(data.iid)), true);
  // 0x08: pointer
  if (data?.pIBindCtx !== undefined) view.setBigUint64(8, data.pIBindCtx === null ? 0n : BigInt(util.toPointer(data.pIBindCtx)), true);
  // 0x10: pointer
  if (data?.pItf !== undefined) view.setBigUint64(16, data.pItf === null ? 0n : BigInt(util.toPointer(data.pItf)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.Urlmon.ZONEATTRIBUTES (size: 48)
 */
export interface ZONEATTRIBUTES {
  /** u32 */
  cbSize: number;
  /** array */
  szDisplayName: Deno.PointerValue | null;
  /** array */
  szDescription: Deno.PointerValue | null;
  /** array */
  szIconPath: Deno.PointerValue | null;
  /** u32 */
  dwTemplateMinLevel: number;
  /** u32 */
  dwTemplateRecommended: number;
  /** u32 */
  dwTemplateCurrentLevel: number;
  /** u32 */
  dwFlags: number;
}

export const sizeofZONEATTRIBUTES = 48;

export function allocZONEATTRIBUTES(data?: Partial<ZONEATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofZONEATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.szDisplayName !== undefined) view.setBigUint64(8, data.szDisplayName === null ? 0n : BigInt(util.toPointer(data.szDisplayName)), true);
  // 0x10: pointer
  if (data?.szDescription !== undefined) view.setBigUint64(16, data.szDescription === null ? 0n : BigInt(util.toPointer(data.szDescription)), true);
  // 0x18: pointer
  if (data?.szIconPath !== undefined) view.setBigUint64(24, data.szIconPath === null ? 0n : BigInt(util.toPointer(data.szIconPath)), true);
  // 0x20: u32
  if (data?.dwTemplateMinLevel !== undefined) view.setUint32(32, Number(data.dwTemplateMinLevel), true);
  // 0x24: u32
  if (data?.dwTemplateRecommended !== undefined) view.setUint32(36, Number(data.dwTemplateRecommended), true);
  // 0x28: u32
  if (data?.dwTemplateCurrentLevel !== undefined) view.setUint32(40, Number(data.dwTemplateCurrentLevel), true);
  // 0x2c: u32
  if (data?.dwFlags !== undefined) view.setUint32(44, Number(data.dwFlags), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.Urlmon.CODEBASEHOLD (size: 40)
 */
export interface CODEBASEHOLD {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  szDistUnit: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  szCodeBase: string | null;
  /** u32 */
  dwVersionMS: number;
  /** u32 */
  dwVersionLS: number;
  /** u32 */
  dwStyle: number;
}

export const sizeofCODEBASEHOLD = 40;

export function allocCODEBASEHOLD(data?: Partial<CODEBASEHOLD>): Uint8Array {
  const buf = new Uint8Array(sizeofCODEBASEHOLD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.szDistUnit !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.szDistUnit);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.szCodeBase !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.szCodeBase);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.dwVersionMS !== undefined) view.setUint32(24, Number(data.dwVersionMS), true);
  // 0x1c: u32
  if (data?.dwVersionLS !== undefined) view.setUint32(28, Number(data.dwVersionLS), true);
  // 0x20: u32
  if (data?.dwStyle !== undefined) view.setUint32(32, Number(data.dwStyle), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.System.Com.Urlmon.SOFTDISTINFO (size: 72)
 */
export interface SOFTDISTINFO {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwAdState: number;
  /** Windows.Win32.Foundation.PWSTR */
  szTitle: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  szAbstract: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  szHREF: string | null;
  /** u32 */
  dwInstalledVersionMS: number;
  /** u32 */
  dwInstalledVersionLS: number;
  /** u32 */
  dwUpdateVersionMS: number;
  /** u32 */
  dwUpdateVersionLS: number;
  /** u32 */
  dwAdvertisedVersionMS: number;
  /** u32 */
  dwAdvertisedVersionLS: number;
  /** u32 */
  dwReserved: number;
}

export const sizeofSOFTDISTINFO = 72;

export function allocSOFTDISTINFO(data?: Partial<SOFTDISTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSOFTDISTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwAdState !== undefined) view.setUint32(8, Number(data.dwAdState), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.szTitle !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.szTitle);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.szAbstract !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.szAbstract);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.szHREF !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.szHREF);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dwInstalledVersionMS !== undefined) view.setUint32(40, Number(data.dwInstalledVersionMS), true);
  // 0x2c: u32
  if (data?.dwInstalledVersionLS !== undefined) view.setUint32(44, Number(data.dwInstalledVersionLS), true);
  // 0x30: u32
  if (data?.dwUpdateVersionMS !== undefined) view.setUint32(48, Number(data.dwUpdateVersionMS), true);
  // 0x34: u32
  if (data?.dwUpdateVersionLS !== undefined) view.setUint32(52, Number(data.dwUpdateVersionLS), true);
  // 0x38: u32
  if (data?.dwAdvertisedVersionMS !== undefined) view.setUint32(56, Number(data.dwAdvertisedVersionMS), true);
  // 0x3c: u32
  if (data?.dwAdvertisedVersionLS !== undefined) view.setUint32(60, Number(data.dwAdvertisedVersionLS), true);
  // 0x40: u32
  if (data?.dwReserved !== undefined) view.setUint32(64, Number(data.dwReserved), true);
  // 0x44: pad4
  return buf;
}

/**
 * Windows.Win32.System.Com.Urlmon.PROTOCOLFILTERDATA (size: 40)
 */
export interface PROTOCOLFILTERDATA {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.System.Com.Urlmon.IInternetProtocolSink */
  pProtocolSink: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.Urlmon.IInternetProtocol */
  pProtocol: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.IUnknown */
  pUnk: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFilterFlags: number;
}

export const sizeofPROTOCOLFILTERDATA = 40;

export function allocPROTOCOLFILTERDATA(data?: Partial<PROTOCOLFILTERDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofPROTOCOLFILTERDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pProtocolSink !== undefined) view.setBigUint64(8, data.pProtocolSink === null ? 0n : BigInt(util.toPointer(data.pProtocolSink)), true);
  // 0x10: pointer
  if (data?.pProtocol !== undefined) view.setBigUint64(16, data.pProtocol === null ? 0n : BigInt(util.toPointer(data.pProtocol)), true);
  // 0x18: pointer
  if (data?.pUnk !== undefined) view.setBigUint64(24, data.pUnk === null ? 0n : BigInt(util.toPointer(data.pUnk)), true);
  // 0x20: u32
  if (data?.dwFilterFlags !== undefined) view.setUint32(32, Number(data.dwFilterFlags), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.System.Com.Urlmon.DATAINFO (size: 16)
 */
export interface DATAINFO {
  /** u32 */
  ulTotalSize: number;
  /** u32 */
  ulavrPacketSize: number;
  /** u32 */
  ulConnectSpeed: number;
  /** u32 */
  ulProcessorSpeed: number;
}

export const sizeofDATAINFO = 16;

export function allocDATAINFO(data?: Partial<DATAINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDATAINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulTotalSize !== undefined) view.setUint32(0, Number(data.ulTotalSize), true);
  // 0x04: u32
  if (data?.ulavrPacketSize !== undefined) view.setUint32(4, Number(data.ulavrPacketSize), true);
  // 0x08: u32
  if (data?.ulConnectSpeed !== undefined) view.setUint32(8, Number(data.ulConnectSpeed), true);
  // 0x0c: u32
  if (data?.ulProcessorSpeed !== undefined) view.setUint32(12, Number(data.ulProcessorSpeed), true);
  return buf;
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Foundation.SYSTEMTIME (size: 16)
 */
export interface SYSTEMTIME {
  /** u16 */
  wYear: number;
  /** u16 */
  wMonth: number;
  /** u16 */
  wDayOfWeek: number;
  /** u16 */
  wDay: number;
  /** u16 */
  wHour: number;
  /** u16 */
  wMinute: number;
  /** u16 */
  wSecond: number;
  /** u16 */
  wMilliseconds: number;
}

export const sizeofSYSTEMTIME = 16;

export function allocSYSTEMTIME(data?: Partial<SYSTEMTIME>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEMTIME);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wYear !== undefined) view.setUint16(0, Number(data.wYear), true);
  // 0x02: u16
  if (data?.wMonth !== undefined) view.setUint16(2, Number(data.wMonth), true);
  // 0x04: u16
  if (data?.wDayOfWeek !== undefined) view.setUint16(4, Number(data.wDayOfWeek), true);
  // 0x06: u16
  if (data?.wDay !== undefined) view.setUint16(6, Number(data.wDay), true);
  // 0x08: u16
  if (data?.wHour !== undefined) view.setUint16(8, Number(data.wHour), true);
  // 0x0a: u16
  if (data?.wMinute !== undefined) view.setUint16(10, Number(data.wMinute), true);
  // 0x0c: u16
  if (data?.wSecond !== undefined) view.setUint16(12, Number(data.wSecond), true);
  // 0x0e: u16
  if (data?.wMilliseconds !== undefined) view.setUint16(14, Number(data.wMilliseconds), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.Urlmon.HIT_LOGGING_INFO (size: 40)
 */
export interface HIT_LOGGING_INFO {
  /** u32 */
  dwStructSize: number;
  /** Windows.Win32.Foundation.PSTR */
  lpszLoggedUrlName: string | null;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  StartTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  EndTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  lpszExtendedInfo: string | null;
}

export const sizeofHIT_LOGGING_INFO = 40;

export function allocHIT_LOGGING_INFO(data?: Partial<HIT_LOGGING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHIT_LOGGING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStructSize !== undefined) view.setUint32(0, Number(data.dwStructSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpszLoggedUrlName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpszLoggedUrlName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.StartTime !== undefined) view.setBigUint64(16, data.StartTime === null ? 0n : BigInt(util.toPointer(data.StartTime)), true);
  // 0x18: pointer
  if (data?.EndTime !== undefined) view.setBigUint64(24, data.EndTime === null ? 0n : BigInt(util.toPointer(data.EndTime)), true);
  // 0x20: buffer
  if (data?.lpszExtendedInfo !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpszExtendedInfo);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

/**
 * Windows.Win32.System.Com.Urlmon.CONFIRMSAFETY (size: 24)
 */
export interface CONFIRMSAFETY {
  /** System.Guid */
  clsid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.IUnknown */
  pUnk: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
}

export const sizeofCONFIRMSAFETY = 24;

export function allocCONFIRMSAFETY(data?: Partial<CONFIRMSAFETY>): Uint8Array {
  const buf = new Uint8Array(sizeofCONFIRMSAFETY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.clsid !== undefined) view.setBigUint64(0, data.clsid === null ? 0n : BigInt(util.toPointer(data.clsid)), true);
  // 0x08: pointer
  if (data?.pUnk !== undefined) view.setBigUint64(8, data.pUnk === null ? 0n : BigInt(util.toPointer(data.pUnk)), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.System.Com.Urlmon.PROTOCOL_ARGUMENT (size: 16)
 */
export interface PROTOCOL_ARGUMENT {
  /** Windows.Win32.Foundation.PWSTR */
  szMethod: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  szTargetUrl: string | null;
}

export const sizeofPROTOCOL_ARGUMENT = 16;

export function allocPROTOCOL_ARGUMENT(data?: Partial<PROTOCOL_ARGUMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofPROTOCOL_ARGUMENT);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.szMethod !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.szMethod);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.szTargetUrl !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.szTargetUrl);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export type HRESULT = number;

export type HWND = Deno.PointerValue;

export type HANDLE = Deno.PointerValue;

// Native Libraries

try {
  var liburlmon_dll = Deno.dlopen("urlmon.dll", {
    CreateURLMoniker: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    CreateURLMonikerEx: {
      parameters: ["pointer", "buffer", "pointer", "u32"],
      result: "pointer",
    },
    GetClassURL: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    CreateAsyncBindCtx: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    CreateURLMonikerEx2: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "pointer",
    },
    CreateAsyncBindCtxEx: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "u32"],
      result: "pointer",
    },
    MkParseDisplayNameEx: {
      parameters: ["pointer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    RegisterBindStatusCallback: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "pointer",
    },
    RevokeBindStatusCallback: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    GetClassFileOrMime: {
      parameters: ["pointer", "buffer", "pointer", "u32", "buffer", "u32", "pointer"],
      result: "pointer",
    },
    IsValidURL: {
      parameters: ["pointer", "buffer", "u32"],
      result: "pointer",
    },
    CoGetClassObjectFromURL: {
      parameters: ["pointer", "buffer", "u32", "u32", "buffer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    IEInstallScope: {
      parameters: ["pointer"],
      result: "pointer",
    },
    FaultInIEFeature: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "pointer",
    },
    GetComponentIDFromCLSSPEC: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    IsAsyncMoniker: {
      parameters: ["pointer"],
      result: "pointer",
    },
    RegisterMediaTypes: {
      parameters: ["u32", "pointer", "pointer"],
      result: "pointer",
    },
    FindMediaType: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    CreateFormatEnumerator: {
      parameters: ["u32", "pointer", "pointer"],
      result: "pointer",
    },
    RegisterFormatEnumerator: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
    },
    RevokeFormatEnumerator: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    RegisterMediaTypeClass: {
      parameters: ["pointer", "u32", "pointer", "pointer", "u32"],
      result: "pointer",
    },
    FindMediaTypeClass: {
      parameters: ["pointer", "buffer", "pointer", "u32"],
      result: "pointer",
    },
    UrlMkSetSessionOption: {
      parameters: ["u32", "pointer", "u32", "u32"],
      result: "pointer",
    },
    UrlMkGetSessionOption: {
      parameters: ["u32", "pointer", "u32", "pointer", "u32"],
      result: "pointer",
    },
    FindMimeFromData: {
      parameters: ["pointer", "buffer", "pointer", "u32", "buffer", "u32", "pointer", "u32"],
      result: "pointer",
    },
    ObtainUserAgentString: {
      parameters: ["u32", "buffer", "pointer"],
      result: "pointer",
    },
    CompareSecurityIds: {
      parameters: ["pointer", "u32", "pointer", "u32", "u32"],
      result: "pointer",
    },
    CompatFlagsFromClsid: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SetAccessForIEAppContainer: {
      parameters: ["pointer", "i32", "u32"],
      result: "pointer",
    },
    HlinkSimpleNavigateToString: {
      parameters: ["buffer", "buffer", "buffer", "pointer", "pointer", "pointer", "u32", "u32"],
      result: "pointer",
    },
    HlinkSimpleNavigateToMoniker: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "pointer", "pointer", "u32", "u32"],
      result: "pointer",
    },
    URLOpenStreamA: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "pointer",
    },
    URLOpenStreamW: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "pointer",
    },
    URLOpenPullStreamA: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "pointer",
    },
    URLOpenPullStreamW: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "pointer",
    },
    URLDownloadToFileA: {
      parameters: ["pointer", "buffer", "buffer", "u32", "pointer"],
      result: "pointer",
    },
    URLDownloadToFileW: {
      parameters: ["pointer", "buffer", "buffer", "u32", "pointer"],
      result: "pointer",
    },
    URLDownloadToCacheFileA: {
      parameters: ["pointer", "buffer", "buffer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    URLDownloadToCacheFileW: {
      parameters: ["pointer", "buffer", "buffer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    URLOpenBlockingStreamA: {
      parameters: ["pointer", "buffer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    URLOpenBlockingStreamW: {
      parameters: ["pointer", "buffer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    HlinkGoBack: {
      parameters: ["pointer"],
      result: "pointer",
    },
    HlinkGoForward: {
      parameters: ["pointer"],
      result: "pointer",
    },
    HlinkNavigateString: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    HlinkNavigateMoniker: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    CoInternetParseUrl: {
      parameters: ["buffer", "i32", "u32", "buffer", "u32", "pointer", "u32"],
      result: "pointer",
    },
    CoInternetParseIUri: {
      parameters: ["pointer", "i32", "u32", "buffer", "u32", "pointer", "usize"],
      result: "pointer",
    },
    CoInternetCombineUrl: {
      parameters: ["buffer", "buffer", "u32", "buffer", "u32", "pointer", "u32"],
      result: "pointer",
    },
    CoInternetCombineUrlEx: {
      parameters: ["pointer", "buffer", "u32", "pointer", "usize"],
      result: "pointer",
    },
    CoInternetCombineIUri: {
      parameters: ["pointer", "pointer", "u32", "pointer", "usize"],
      result: "pointer",
    },
    CoInternetCompareUrl: {
      parameters: ["buffer", "buffer", "u32"],
      result: "pointer",
    },
    CoInternetGetProtocolFlags: {
      parameters: ["buffer", "pointer", "u32"],
      result: "pointer",
    },
    CoInternetQueryInfo: {
      parameters: ["buffer", "i32", "u32", "pointer", "u32", "pointer", "u32"],
      result: "pointer",
    },
    CoInternetGetSession: {
      parameters: ["u32", "pointer", "u32"],
      result: "pointer",
    },
    CoInternetGetSecurityUrl: {
      parameters: ["buffer", "pointer", "i32", "u32"],
      result: "pointer",
    },
    CoInternetGetSecurityUrlEx: {
      parameters: ["pointer", "pointer", "i32", "usize"],
      result: "pointer",
    },
    CoInternetSetFeatureEnabled: {
      parameters: ["i32", "u32", "i32"],
      result: "pointer",
    },
    CoInternetIsFeatureEnabled: {
      parameters: ["i32", "u32"],
      result: "pointer",
    },
    CoInternetIsFeatureEnabledForUrl: {
      parameters: ["i32", "u32", "buffer", "pointer"],
      result: "pointer",
    },
    CoInternetIsFeatureEnabledForIUri: {
      parameters: ["i32", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    CoInternetIsFeatureZoneElevationEnabled: {
      parameters: ["buffer", "buffer", "pointer", "u32"],
      result: "pointer",
    },
    CopyStgMedium: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    CopyBindInfo: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    ReleaseBindInfo: {
      parameters: ["pointer"],
      result: "void",
    },
    IEGetUserPrivateNamespaceName: {
      parameters: [],
      result: "buffer",
    },
    CoInternetCreateSecurityManager: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
    },
    CoInternetCreateZoneManager: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
    },
    GetSoftwareUpdateInfo: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    SetSoftwareUpdateAdvertisementState: {
      parameters: ["buffer", "u32", "u32", "u32"],
      result: "pointer",
    },
    IsLoggingEnabledA: {
      parameters: ["buffer"],
      result: "i32",
    },
    IsLoggingEnabledW: {
      parameters: ["buffer"],
      result: "i32",
    },
    WriteHitLogging: {
      parameters: ["pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function CreateURLMoniker(
  pMkCtx: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IMoniker */,
  szURL: string | null /* Windows.Win32.Foundation.PWSTR */,
  ppmk: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.CreateURLMoniker(util.toPointer(pMkCtx), util.pwstrToFfi(szURL), util.toPointer(ppmk)));
}

export function CreateURLMonikerEx(
  pMkCtx: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IMoniker */,
  szURL: string | null /* Windows.Win32.Foundation.PWSTR */,
  ppmk: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.CreateURLMonikerEx(util.toPointer(pMkCtx), util.pwstrToFfi(szURL), util.toPointer(ppmk), dwFlags));
}

export function GetClassURL(
  szURL: string | null /* Windows.Win32.Foundation.PWSTR */,
  pClsID: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.GetClassURL(util.pwstrToFfi(szURL), util.toPointer(pClsID)));
}

export function CreateAsyncBindCtx(
  reserved: number /* u32 */,
  pBSCb: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindStatusCallback */,
  pEFetc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IEnumFORMATETC */,
  ppBC: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.CreateAsyncBindCtx(reserved, util.toPointer(pBSCb), util.toPointer(pEFetc), util.toPointer(ppBC)));
}

export function CreateURLMonikerEx2(
  pMkCtx: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IMoniker */,
  pUri: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUri */,
  ppmk: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.CreateURLMonikerEx2(util.toPointer(pMkCtx), util.toPointer(pUri), util.toPointer(ppmk), dwFlags));
}

export function CreateAsyncBindCtxEx(
  pbc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindCtx */,
  dwOptions: number /* u32 */,
  pBSCb: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindStatusCallback */,
  pEnum: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IEnumFORMATETC */,
  ppBC: Deno.PointerValue | Uint8Array | null /* ptr */,
  reserved: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.CreateAsyncBindCtxEx(util.toPointer(pbc), dwOptions, util.toPointer(pBSCb), util.toPointer(pEnum), util.toPointer(ppBC), reserved));
}

export function MkParseDisplayNameEx(
  pbc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindCtx */,
  szDisplayName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pchEaten: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppmk: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.MkParseDisplayNameEx(util.toPointer(pbc), util.pwstrToFfi(szDisplayName), util.toPointer(pchEaten), util.toPointer(ppmk)));
}

export function RegisterBindStatusCallback(
  pBC: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindCtx */,
  pBSCb: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindStatusCallback */,
  ppBSCBPrev: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReserved: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.RegisterBindStatusCallback(util.toPointer(pBC), util.toPointer(pBSCb), util.toPointer(ppBSCBPrev), dwReserved));
}

export function RevokeBindStatusCallback(
  pBC: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindCtx */,
  pBSCb: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindStatusCallback */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.RevokeBindStatusCallback(util.toPointer(pBC), util.toPointer(pBSCb)));
}

export function GetClassFileOrMime(
  pBC: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindCtx */,
  szFilename: string | null /* Windows.Win32.Foundation.PWSTR */,
  pBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbSize: number /* u32 */,
  szMime: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwReserved: number /* u32 */,
  pclsid: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.GetClassFileOrMime(util.toPointer(pBC), util.pwstrToFfi(szFilename), util.toPointer(pBuffer), cbSize, util.pwstrToFfi(szMime), dwReserved, util.toPointer(pclsid)));
}

export function IsValidURL(
  pBC: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindCtx */,
  szURL: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwReserved: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.IsValidURL(util.toPointer(pBC), util.pwstrToFfi(szURL), dwReserved));
}

export function CoGetClassObjectFromURL(
  rCLASSID: Deno.PointerValue | Uint8Array | null /* ptr */,
  szCODE: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFileVersionMS: number /* u32 */,
  dwFileVersionLS: number /* u32 */,
  szTYPE: string | null /* Windows.Win32.Foundation.PWSTR */,
  pBindCtx: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindCtx */,
  dwClsContext: CLSCTX /* Windows.Win32.System.Com.CLSCTX */,
  pvReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppv: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.CoGetClassObjectFromURL(util.toPointer(rCLASSID), util.pwstrToFfi(szCODE), dwFileVersionMS, dwFileVersionLS, util.pwstrToFfi(szTYPE), util.toPointer(pBindCtx), dwClsContext, util.toPointer(pvReserved), util.toPointer(riid), util.toPointer(ppv)));
}

export function IEInstallScope(
  pdwScope: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.IEInstallScope(util.toPointer(pdwScope)));
}

export function FaultInIEFeature(
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pClassSpec: Deno.PointerValue | Uint8Array | null /* ptr */,
  pQuery: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.FaultInIEFeature(util.hwndToFfi(hWnd), util.toPointer(pClassSpec), util.toPointer(pQuery), dwFlags));
}

export function GetComponentIDFromCLSSPEC(
  pClassspec: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppszComponentID: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.GetComponentIDFromCLSSPEC(util.toPointer(pClassspec), util.toPointer(ppszComponentID)));
}

export function IsAsyncMoniker(
  pmk: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IMoniker */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.IsAsyncMoniker(util.toPointer(pmk)));
}

export function RegisterMediaTypes(
  ctypes: number /* u32 */,
  rgszTypes: Deno.PointerValue | Uint8Array | null /* ptr */,
  rgcfTypes: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.RegisterMediaTypes(ctypes, util.toPointer(rgszTypes), util.toPointer(rgcfTypes)));
}

export function FindMediaType(
  rgszTypes: string | null /* Windows.Win32.Foundation.PSTR */,
  rgcfTypes: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.FindMediaType(util.pstrToFfi(rgszTypes), util.toPointer(rgcfTypes)));
}

export function CreateFormatEnumerator(
  cfmtetc: number /* u32 */,
  rgfmtetc: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppenumfmtetc: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.CreateFormatEnumerator(cfmtetc, util.toPointer(rgfmtetc), util.toPointer(ppenumfmtetc)));
}

export function RegisterFormatEnumerator(
  pBC: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindCtx */,
  pEFetc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IEnumFORMATETC */,
  reserved: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.RegisterFormatEnumerator(util.toPointer(pBC), util.toPointer(pEFetc), reserved));
}

export function RevokeFormatEnumerator(
  pBC: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindCtx */,
  pEFetc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IEnumFORMATETC */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.RevokeFormatEnumerator(util.toPointer(pBC), util.toPointer(pEFetc)));
}

export function RegisterMediaTypeClass(
  pBC: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindCtx */,
  ctypes: number /* u32 */,
  rgszTypes: Deno.PointerValue | Uint8Array | null /* ptr */,
  rgclsID: Deno.PointerValue | Uint8Array | null /* ptr */,
  reserved: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.RegisterMediaTypeClass(util.toPointer(pBC), ctypes, util.toPointer(rgszTypes), util.toPointer(rgclsID), reserved));
}

export function FindMediaTypeClass(
  pBC: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindCtx */,
  szType: string | null /* Windows.Win32.Foundation.PSTR */,
  pclsID: Deno.PointerValue | Uint8Array | null /* ptr */,
  reserved: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.FindMediaTypeClass(util.toPointer(pBC), util.pstrToFfi(szType), util.toPointer(pclsID), reserved));
}

export function UrlMkSetSessionOption(
  dwOption: number /* u32 */,
  pBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwBufferLength: number /* u32 */,
  dwReserved: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.UrlMkSetSessionOption(dwOption, util.toPointer(pBuffer), dwBufferLength, dwReserved));
}

export function UrlMkGetSessionOption(
  dwOption: number /* u32 */,
  pBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwBufferLength: number /* u32 */,
  pdwBufferLengthOut: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReserved: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.UrlMkGetSessionOption(dwOption, util.toPointer(pBuffer), dwBufferLength, util.toPointer(pdwBufferLengthOut), dwReserved));
}

export function FindMimeFromData(
  pBC: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindCtx */,
  pwzUrl: string | null /* Windows.Win32.Foundation.PWSTR */,
  pBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbSize: number /* u32 */,
  pwzMimeProposed: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwMimeFlags: number /* u32 */,
  ppwzMimeOut: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReserved: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.FindMimeFromData(util.toPointer(pBC), util.pwstrToFfi(pwzUrl), util.toPointer(pBuffer), cbSize, util.pwstrToFfi(pwzMimeProposed), dwMimeFlags, util.toPointer(ppwzMimeOut), dwReserved));
}

export function ObtainUserAgentString(
  dwOption: number /* u32 */,
  pszUAOut: string | null /* Windows.Win32.Foundation.PSTR */,
  cbSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.ObtainUserAgentString(dwOption, util.pstrToFfi(pszUAOut), util.toPointer(cbSize)));
}

export function CompareSecurityIds(
  pbSecurityId1: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwLen1: number /* u32 */,
  pbSecurityId2: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwLen2: number /* u32 */,
  dwReserved: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.CompareSecurityIds(util.toPointer(pbSecurityId1), dwLen1, util.toPointer(pbSecurityId2), dwLen2, dwReserved));
}

export function CompatFlagsFromClsid(
  pclsid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwCompatFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwMiscStatusFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.CompatFlagsFromClsid(util.toPointer(pclsid), util.toPointer(pdwCompatFlags), util.toPointer(pdwMiscStatusFlags)));
}

export function SetAccessForIEAppContainer(
  hObject: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ieObjectType: IEObjectType /* Windows.Win32.System.Com.Urlmon.IEObjectType */,
  dwAccessMask: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.SetAccessForIEAppContainer(util.toPointer(hObject), ieObjectType, dwAccessMask));
}

export function HlinkSimpleNavigateToString(
  szTarget: string | null /* Windows.Win32.Foundation.PWSTR */,
  szLocation: string | null /* Windows.Win32.Foundation.PWSTR */,
  szTargetFrameName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pUnk: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  pbc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindCtx */,
  param5: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindStatusCallback */,
  grfHLNF: number /* u32 */,
  dwReserved: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.HlinkSimpleNavigateToString(util.pwstrToFfi(szTarget), util.pwstrToFfi(szLocation), util.pwstrToFfi(szTargetFrameName), util.toPointer(pUnk), util.toPointer(pbc), util.toPointer(param5), grfHLNF, dwReserved));
}

export function HlinkSimpleNavigateToMoniker(
  pmkTarget: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IMoniker */,
  szLocation: string | null /* Windows.Win32.Foundation.PWSTR */,
  szTargetFrameName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pUnk: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  pbc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindCtx */,
  param5: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindStatusCallback */,
  grfHLNF: number /* u32 */,
  dwReserved: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.HlinkSimpleNavigateToMoniker(util.toPointer(pmkTarget), util.pwstrToFfi(szLocation), util.pwstrToFfi(szTargetFrameName), util.toPointer(pUnk), util.toPointer(pbc), util.toPointer(param5), grfHLNF, dwReserved));
}

export function URLOpenStreamA(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  param1: string | null /* Windows.Win32.Foundation.PSTR */,
  param2: number /* u32 */,
  param3: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindStatusCallback */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.URLOpenStreamA(util.toPointer(param0), util.pstrToFfi(param1), param2, util.toPointer(param3)));
}

export function URLOpenStreamW(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  param1: string | null /* Windows.Win32.Foundation.PWSTR */,
  param2: number /* u32 */,
  param3: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindStatusCallback */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.URLOpenStreamW(util.toPointer(param0), util.pwstrToFfi(param1), param2, util.toPointer(param3)));
}

export function URLOpenPullStreamA(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  param1: string | null /* Windows.Win32.Foundation.PSTR */,
  param2: number /* u32 */,
  param3: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindStatusCallback */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.URLOpenPullStreamA(util.toPointer(param0), util.pstrToFfi(param1), param2, util.toPointer(param3)));
}

export function URLOpenPullStreamW(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  param1: string | null /* Windows.Win32.Foundation.PWSTR */,
  param2: number /* u32 */,
  param3: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindStatusCallback */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.URLOpenPullStreamW(util.toPointer(param0), util.pwstrToFfi(param1), param2, util.toPointer(param3)));
}

export function URLDownloadToFileA(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  param1: string | null /* Windows.Win32.Foundation.PSTR */,
  param2: string | null /* Windows.Win32.Foundation.PSTR */,
  param3: number /* u32 */,
  param4: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindStatusCallback */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.URLDownloadToFileA(util.toPointer(param0), util.pstrToFfi(param1), util.pstrToFfi(param2), param3, util.toPointer(param4)));
}

export function URLDownloadToFileW(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  param1: string | null /* Windows.Win32.Foundation.PWSTR */,
  param2: string | null /* Windows.Win32.Foundation.PWSTR */,
  param3: number /* u32 */,
  param4: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindStatusCallback */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.URLDownloadToFileW(util.toPointer(param0), util.pwstrToFfi(param1), util.pwstrToFfi(param2), param3, util.toPointer(param4)));
}

export function URLDownloadToCacheFileA(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  param1: string | null /* Windows.Win32.Foundation.PSTR */,
  param2: string | null /* Windows.Win32.Foundation.PSTR */,
  cchFileName: number /* u32 */,
  param4: number /* u32 */,
  param5: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindStatusCallback */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.URLDownloadToCacheFileA(util.toPointer(param0), util.pstrToFfi(param1), util.pstrToFfi(param2), cchFileName, param4, util.toPointer(param5)));
}

export function URLDownloadToCacheFileW(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  param1: string | null /* Windows.Win32.Foundation.PWSTR */,
  param2: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchFileName: number /* u32 */,
  param4: number /* u32 */,
  param5: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindStatusCallback */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.URLDownloadToCacheFileW(util.toPointer(param0), util.pwstrToFfi(param1), util.pwstrToFfi(param2), cchFileName, param4, util.toPointer(param5)));
}

export function URLOpenBlockingStreamA(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  param1: string | null /* Windows.Win32.Foundation.PSTR */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
  param3: number /* u32 */,
  param4: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindStatusCallback */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.URLOpenBlockingStreamA(util.toPointer(param0), util.pstrToFfi(param1), util.toPointer(param2), param3, util.toPointer(param4)));
}

export function URLOpenBlockingStreamW(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  param1: string | null /* Windows.Win32.Foundation.PWSTR */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
  param3: number /* u32 */,
  param4: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindStatusCallback */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.URLOpenBlockingStreamW(util.toPointer(param0), util.pwstrToFfi(param1), util.toPointer(param2), param3, util.toPointer(param4)));
}

export function HlinkGoBack(
  pUnk: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.HlinkGoBack(util.toPointer(pUnk)));
}

export function HlinkGoForward(
  pUnk: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.HlinkGoForward(util.toPointer(pUnk)));
}

export function HlinkNavigateString(
  pUnk: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  szTarget: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.HlinkNavigateString(util.toPointer(pUnk), util.pwstrToFfi(szTarget)));
}

export function HlinkNavigateMoniker(
  pUnk: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  pmkTarget: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IMoniker */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.HlinkNavigateMoniker(util.toPointer(pUnk), util.toPointer(pmkTarget)));
}

export function CoInternetParseUrl(
  pwzUrl: string | null /* Windows.Win32.Foundation.PWSTR */,
  ParseAction: PARSEACTION /* Windows.Win32.System.Com.Urlmon.PARSEACTION */,
  dwFlags: number /* u32 */,
  pszResult: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchResult: number /* u32 */,
  pcchResult: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReserved: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.CoInternetParseUrl(util.pwstrToFfi(pwzUrl), ParseAction, dwFlags, util.pwstrToFfi(pszResult), cchResult, util.toPointer(pcchResult), dwReserved));
}

export function CoInternetParseIUri(
  pIUri: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUri */,
  ParseAction: PARSEACTION /* Windows.Win32.System.Com.Urlmon.PARSEACTION */,
  dwFlags: number /* u32 */,
  pwzResult: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchResult: number /* u32 */,
  pcchResult: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReserved: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.CoInternetParseIUri(util.toPointer(pIUri), ParseAction, dwFlags, util.pwstrToFfi(pwzResult), cchResult, util.toPointer(pcchResult), dwReserved));
}

export function CoInternetCombineUrl(
  pwzBaseUrl: string | null /* Windows.Win32.Foundation.PWSTR */,
  pwzRelativeUrl: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwCombineFlags: number /* u32 */,
  pszResult: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchResult: number /* u32 */,
  pcchResult: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReserved: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.CoInternetCombineUrl(util.pwstrToFfi(pwzBaseUrl), util.pwstrToFfi(pwzRelativeUrl), dwCombineFlags, util.pwstrToFfi(pszResult), cchResult, util.toPointer(pcchResult), dwReserved));
}

export function CoInternetCombineUrlEx(
  pBaseUri: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUri */,
  pwzRelativeUrl: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwCombineFlags: number /* u32 */,
  ppCombinedUri: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReserved: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.CoInternetCombineUrlEx(util.toPointer(pBaseUri), util.pwstrToFfi(pwzRelativeUrl), dwCombineFlags, util.toPointer(ppCombinedUri), dwReserved));
}

export function CoInternetCombineIUri(
  pBaseUri: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUri */,
  pRelativeUri: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUri */,
  dwCombineFlags: number /* u32 */,
  ppCombinedUri: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReserved: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.CoInternetCombineIUri(util.toPointer(pBaseUri), util.toPointer(pRelativeUri), dwCombineFlags, util.toPointer(ppCombinedUri), dwReserved));
}

export function CoInternetCompareUrl(
  pwzUrl1: string | null /* Windows.Win32.Foundation.PWSTR */,
  pwzUrl2: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.CoInternetCompareUrl(util.pwstrToFfi(pwzUrl1), util.pwstrToFfi(pwzUrl2), dwFlags));
}

export function CoInternetGetProtocolFlags(
  pwzUrl: string | null /* Windows.Win32.Foundation.PWSTR */,
  pdwFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReserved: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.CoInternetGetProtocolFlags(util.pwstrToFfi(pwzUrl), util.toPointer(pdwFlags), dwReserved));
}

export function CoInternetQueryInfo(
  pwzUrl: string | null /* Windows.Win32.Foundation.PWSTR */,
  QueryOptions: QUERYOPTION /* Windows.Win32.System.Com.Urlmon.QUERYOPTION */,
  dwQueryFlags: number /* u32 */,
  pvBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbBuffer: number /* u32 */,
  pcbBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReserved: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.CoInternetQueryInfo(util.pwstrToFfi(pwzUrl), QueryOptions, dwQueryFlags, util.toPointer(pvBuffer), cbBuffer, util.toPointer(pcbBuffer), dwReserved));
}

export function CoInternetGetSession(
  dwSessionMode: number /* u32 */,
  ppIInternetSession: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReserved: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.CoInternetGetSession(dwSessionMode, util.toPointer(ppIInternetSession), dwReserved));
}

export function CoInternetGetSecurityUrl(
  pwszUrl: string | null /* Windows.Win32.Foundation.PWSTR */,
  ppwszSecUrl: Deno.PointerValue | Uint8Array | null /* ptr */,
  psuAction: PSUACTION /* Windows.Win32.System.Com.Urlmon.PSUACTION */,
  dwReserved: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.CoInternetGetSecurityUrl(util.pwstrToFfi(pwszUrl), util.toPointer(ppwszSecUrl), psuAction, dwReserved));
}

export function CoInternetGetSecurityUrlEx(
  pUri: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUri */,
  ppSecUri: Deno.PointerValue | Uint8Array | null /* ptr */,
  psuAction: PSUACTION /* Windows.Win32.System.Com.Urlmon.PSUACTION */,
  dwReserved: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.CoInternetGetSecurityUrlEx(util.toPointer(pUri), util.toPointer(ppSecUri), psuAction, dwReserved));
}

export function CoInternetSetFeatureEnabled(
  FeatureEntry: INTERNETFEATURELIST /* Windows.Win32.System.Com.Urlmon.INTERNETFEATURELIST */,
  dwFlags: number /* u32 */,
  fEnable: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.CoInternetSetFeatureEnabled(FeatureEntry, dwFlags, util.boolToFfi(fEnable)));
}

export function CoInternetIsFeatureEnabled(
  FeatureEntry: INTERNETFEATURELIST /* Windows.Win32.System.Com.Urlmon.INTERNETFEATURELIST */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.CoInternetIsFeatureEnabled(FeatureEntry, dwFlags));
}

export function CoInternetIsFeatureEnabledForUrl(
  FeatureEntry: INTERNETFEATURELIST /* Windows.Win32.System.Com.Urlmon.INTERNETFEATURELIST */,
  dwFlags: number /* u32 */,
  szURL: string | null /* Windows.Win32.Foundation.PWSTR */,
  pSecMgr: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.Urlmon.IInternetSecurityManager */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.CoInternetIsFeatureEnabledForUrl(FeatureEntry, dwFlags, util.pwstrToFfi(szURL), util.toPointer(pSecMgr)));
}

export function CoInternetIsFeatureEnabledForIUri(
  FeatureEntry: INTERNETFEATURELIST /* Windows.Win32.System.Com.Urlmon.INTERNETFEATURELIST */,
  dwFlags: number /* u32 */,
  pIUri: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUri */,
  pSecMgr: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.Urlmon.IInternetSecurityManagerEx2 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.CoInternetIsFeatureEnabledForIUri(FeatureEntry, dwFlags, util.toPointer(pIUri), util.toPointer(pSecMgr)));
}

export function CoInternetIsFeatureZoneElevationEnabled(
  szFromURL: string | null /* Windows.Win32.Foundation.PWSTR */,
  szToURL: string | null /* Windows.Win32.Foundation.PWSTR */,
  pSecMgr: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.Urlmon.IInternetSecurityManager */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.CoInternetIsFeatureZoneElevationEnabled(util.pwstrToFfi(szFromURL), util.pwstrToFfi(szToURL), util.toPointer(pSecMgr), dwFlags));
}

export function CopyStgMedium(
  pcstgmedSrc: Deno.PointerValue | Uint8Array | null /* ptr */,
  pstgmedDest: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.CopyStgMedium(util.toPointer(pcstgmedSrc), util.toPointer(pstgmedDest)));
}

export function CopyBindInfo(
  pcbiSrc: Deno.PointerValue | Uint8Array | null /* ptr */,
  pbiDest: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.CopyBindInfo(util.toPointer(pcbiSrc), util.toPointer(pbiDest)));
}

export function ReleaseBindInfo(
  pbindinfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return liburlmon_dll.ReleaseBindInfo(util.toPointer(pbindinfo));
}

export function IEGetUserPrivateNamespaceName(): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(liburlmon_dll.IEGetUserPrivateNamespaceName());
}

export function CoInternetCreateSecurityManager(
  pSP: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IServiceProvider */,
  ppSM: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReserved: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.CoInternetCreateSecurityManager(util.toPointer(pSP), util.toPointer(ppSM), dwReserved));
}

export function CoInternetCreateZoneManager(
  pSP: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IServiceProvider */,
  ppZM: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReserved: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.CoInternetCreateZoneManager(util.toPointer(pSP), util.toPointer(ppZM), dwReserved));
}

export function GetSoftwareUpdateInfo(
  szDistUnit: string | null /* Windows.Win32.Foundation.PWSTR */,
  psdi: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.GetSoftwareUpdateInfo(util.pwstrToFfi(szDistUnit), util.toPointer(psdi)));
}

export function SetSoftwareUpdateAdvertisementState(
  szDistUnit: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwAdState: number /* u32 */,
  dwAdvertisedVersionMS: number /* u32 */,
  dwAdvertisedVersionLS: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon_dll.SetSoftwareUpdateAdvertisementState(util.pwstrToFfi(szDistUnit), dwAdState, dwAdvertisedVersionMS, dwAdvertisedVersionLS));
}

export function IsLoggingEnabledA(
  pszUrl: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(liburlmon_dll.IsLoggingEnabledA(util.pstrToFfi(pszUrl)));
}

export function IsLoggingEnabledW(
  pwszUrl: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(liburlmon_dll.IsLoggingEnabledW(util.pwstrToFfi(pwszUrl)));
}

export function WriteHitLogging(
  lpLogginginfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(liburlmon_dll.WriteHitLogging(util.toPointer(lpLogginginfo)));
}

