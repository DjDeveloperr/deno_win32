/// Auto-generated by Deno Win32: Windows.Win32.System.Com.StructuredStorage.Apis

import * as util from "../../../util.ts";

// Enums
export type PROPSPEC_KIND = number;
export type STGFMT = number;
export type STGMOVE = number;
export type VARENUM = number;
export type PIDMSI_STATUS_VALUE = number;
export type CLSCTX = number;
export type STGM = number;

// Constants
export const PRSPEC_LPWSTR = 0;
export const PRSPEC_PROPID = 1;
export const STGFMT_STORAGE = 0;
export const STGFMT_NATIVE = 1;
export const STGFMT_FILE = 3;
export const STGFMT_ANY = 4;
export const STGFMT_DOCFILE = 5;
export const STGFMT_DOCUMENT = 0;
export const PROPSETFLAG_DEFAULT = 0;
export const PROPSETFLAG_NONSIMPLE = 1;
export const PROPSETFLAG_ANSI = 2;
export const PROPSETFLAG_UNBUFFERED = 4;
export const PROPSETFLAG_CASE_SENSITIVE = 8;
export const PROPSET_BEHAVIOR_CASE_SENSITIVE = 1;
export const PID_DICTIONARY = 0;
export const PID_CODEPAGE = 1;
export const PID_FIRST_USABLE = 2;
export const PID_FIRST_NAME_DEFAULT = 4095;
export const PID_LOCALE = 2147483648;
export const PID_MODIFY_TIME = 2147483649;
export const PID_SECURITY = 2147483650;
export const PID_BEHAVIOR = 2147483651;
export const PID_ILLEGAL = 4294967295;
export const PID_MIN_READONLY = 2147483648;
export const PID_MAX_READONLY = 3221225471;
export const PRSPEC_INVALID = 4294967295;
export const PROPSETHDR_OSVERSION_UNKNOWN = 4294967295;
export const PIDDI_THUMBNAIL = 2;
export const PIDSI_TITLE = 2;
export const PIDSI_SUBJECT = 3;
export const PIDSI_AUTHOR = 4;
export const PIDSI_KEYWORDS = 5;
export const PIDSI_COMMENTS = 6;
export const PIDSI_TEMPLATE = 7;
export const PIDSI_LASTAUTHOR = 8;
export const PIDSI_REVNUMBER = 9;
export const PIDSI_EDITTIME = 10;
export const PIDSI_LASTPRINTED = 11;
export const PIDSI_CREATE_DTM = 12;
export const PIDSI_LASTSAVE_DTM = 13;
export const PIDSI_PAGECOUNT = 14;
export const PIDSI_WORDCOUNT = 15;
export const PIDSI_CHARCOUNT = 16;
export const PIDSI_THUMBNAIL = 17;
export const PIDSI_APPNAME = 18;
export const PIDSI_DOC_SECURITY = 19;
export const PIDDSI_CATEGORY = 2;
export const PIDDSI_PRESFORMAT = 3;
export const PIDDSI_BYTECOUNT = 4;
export const PIDDSI_LINECOUNT = 5;
export const PIDDSI_PARCOUNT = 6;
export const PIDDSI_SLIDECOUNT = 7;
export const PIDDSI_NOTECOUNT = 8;
export const PIDDSI_HIDDENCOUNT = 9;
export const PIDDSI_MMCLIPCOUNT = 10;
export const PIDDSI_SCALE = 11;
export const PIDDSI_HEADINGPAIR = 12;
export const PIDDSI_DOCPARTS = 13;
export const PIDDSI_MANAGER = 14;
export const PIDDSI_COMPANY = 15;
export const PIDDSI_LINKSDIRTY = 16;
export const PIDMSI_EDITOR = 2;
export const PIDMSI_SUPPLIER = 3;
export const PIDMSI_SOURCE = 4;
export const PIDMSI_SEQUENCE_NO = 5;
export const PIDMSI_PROJECT = 6;
export const PIDMSI_STATUS = 7;
export const PIDMSI_OWNER = 8;
export const PIDMSI_RATING = 9;
export const PIDMSI_PRODUCTION = 10;
export const PIDMSI_COPYRIGHT = 11;
export const CWCSTORAGENAME = 32;
export const STGOPTIONS_VERSION = 1;
export const CCH_MAX_PROPSTG_NAME = 31;
export const STGMOVE_MOVE = 0;
export const STGMOVE_COPY = 1;
export const STGMOVE_SHALLOWCOPY = 2;
export const VT_EMPTY = 0;
export const VT_NULL = 1;
export const VT_I2 = 2;
export const VT_I4 = 3;
export const VT_R4 = 4;
export const VT_R8 = 5;
export const VT_CY = 6;
export const VT_DATE = 7;
export const VT_BSTR = 8;
export const VT_DISPATCH = 9;
export const VT_ERROR = 10;
export const VT_BOOL = 11;
export const VT_VARIANT = 12;
export const VT_UNKNOWN = 13;
export const VT_DECIMAL = 14;
export const VT_I1 = 16;
export const VT_UI1 = 17;
export const VT_UI2 = 18;
export const VT_UI4 = 19;
export const VT_I8 = 20;
export const VT_UI8 = 21;
export const VT_INT = 22;
export const VT_UINT = 23;
export const VT_VOID = 24;
export const VT_HRESULT = 25;
export const VT_PTR = 26;
export const VT_SAFEARRAY = 27;
export const VT_CARRAY = 28;
export const VT_USERDEFINED = 29;
export const VT_LPSTR = 30;
export const VT_LPWSTR = 31;
export const VT_RECORD = 36;
export const VT_INT_PTR = 37;
export const VT_UINT_PTR = 38;
export const VT_FILETIME = 64;
export const VT_BLOB = 65;
export const VT_STREAM = 66;
export const VT_STORAGE = 67;
export const VT_STREAMED_OBJECT = 68;
export const VT_STORED_OBJECT = 69;
export const VT_BLOB_OBJECT = 70;
export const VT_CF = 71;
export const VT_CLSID = 72;
export const VT_VERSIONED_STREAM = 73;
export const VT_BSTR_BLOB = 4095;
export const VT_VECTOR = 4096;
export const VT_ARRAY = 8192;
export const VT_BYREF = 16384;
export const VT_RESERVED = 32768;
export const VT_ILLEGAL = 65535;
export const VT_ILLEGALMASKED = 4095;
export const VT_TYPEMASK = 4095;
export const PIDMSI_STATUS_NORMAL = 0;
export const PIDMSI_STATUS_NEW = 1;
export const PIDMSI_STATUS_PRELIM = 2;
export const PIDMSI_STATUS_DRAFT = 3;
export const PIDMSI_STATUS_INPROGRESS = 4;
export const PIDMSI_STATUS_EDIT = 5;
export const PIDMSI_STATUS_REVIEW = 6;
export const PIDMSI_STATUS_PROOF = 7;
export const PIDMSI_STATUS_FINAL = 8;
export const PIDMSI_STATUS_OTHER = 32767;
export const CLSCTX_INPROC_SERVER = 1;
export const CLSCTX_INPROC_HANDLER = 2;
export const CLSCTX_LOCAL_SERVER = 4;
export const CLSCTX_INPROC_SERVER16 = 8;
export const CLSCTX_REMOTE_SERVER = 16;
export const CLSCTX_INPROC_HANDLER16 = 32;
export const CLSCTX_RESERVED1 = 64;
export const CLSCTX_RESERVED2 = 128;
export const CLSCTX_RESERVED3 = 256;
export const CLSCTX_RESERVED4 = 512;
export const CLSCTX_NO_CODE_DOWNLOAD = 1024;
export const CLSCTX_RESERVED5 = 2048;
export const CLSCTX_NO_CUSTOM_MARSHAL = 4096;
export const CLSCTX_ENABLE_CODE_DOWNLOAD = 8192;
export const CLSCTX_NO_FAILURE_LOG = 16384;
export const CLSCTX_DISABLE_AAA = 32768;
export const CLSCTX_ENABLE_AAA = 65536;
export const CLSCTX_FROM_DEFAULT_CONTEXT = 131072;
export const CLSCTX_ACTIVATE_X86_SERVER = 262144;
export const CLSCTX_ACTIVATE_32_BIT_SERVER = 262144;
export const CLSCTX_ACTIVATE_64_BIT_SERVER = 524288;
export const CLSCTX_ENABLE_CLOAKING = 1048576;
export const CLSCTX_APPCONTAINER = 4194304;
export const CLSCTX_ACTIVATE_AAA_AS_IU = 8388608;
export const CLSCTX_RESERVED6 = 16777216;
export const CLSCTX_ACTIVATE_ARM32_SERVER = 33554432;
export const CLSCTX_PS_DLL = 2147483648;
export const CLSCTX_ALL = 23;
export const CLSCTX_SERVER = 21;
export const STGM_DIRECT = 0;
export const STGM_TRANSACTED = 65536;
export const STGM_SIMPLE = 134217728;
export const STGM_READ = 0;
export const STGM_WRITE = 1;
export const STGM_READWRITE = 2;
export const STGM_SHARE_DENY_NONE = 64;
export const STGM_SHARE_DENY_READ = 48;
export const STGM_SHARE_DENY_WRITE = 32;
export const STGM_SHARE_EXCLUSIVE = 16;
export const STGM_PRIORITY = 262144;
export const STGM_DELETEONRELEASE = 67108864;
export const STGM_NOSCRATCH = 1048576;
export const STGM_CREATE = 4096;
export const STGM_CONVERT = 131072;
export const STGM_FAILIFTHERE = 0;
export const STGM_NOSNAPSHOT = 2097152;
export const STGM_DIRECT_SWMR = 4194304;

// Structs

/**
 * Windows.Win32.System.Com.StructuredStorage.BSTRBLOB (size: 16)
 */
export interface BSTRBLOB {
  /** u32 */
  cbSize: number;
  /** ptr */
  pData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofBSTRBLOB = 16;

export function allocBSTRBLOB(data?: Partial<BSTRBLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofBSTRBLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pData !== undefined) view.setBigUint64(8, data.pData === null ? 0n : BigInt(util.toPointer(data.pData)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CLIPDATA (size: 16)
 */
export interface CLIPDATA {
  /** u32 */
  cbSize: number;
  /** i32 */
  ulClipFmt: number;
  /** ptr */
  pClipData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCLIPDATA = 16;

export function allocCLIPDATA(data?: Partial<CLIPDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofCLIPDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: i32
  if (data?.ulClipFmt !== undefined) view.setInt32(4, Number(data.ulClipFmt), true);
  // 0x08: pointer
  if (data?.pClipData !== undefined) view.setBigUint64(8, data.pClipData === null ? 0n : BigInt(util.toPointer(data.pClipData)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.RemSNB (size: 16)
 */
export interface RemSNB {
  /** u32 */
  ulCntStr: number;
  /** u32 */
  ulCntChar: number;
  /** array */
  rgString: Deno.PointerValue | null;
}

export const sizeofRemSNB = 16;

export function allocRemSNB(data?: Partial<RemSNB>): Uint8Array {
  const buf = new Uint8Array(sizeofRemSNB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulCntStr !== undefined) view.setUint32(0, Number(data.ulCntStr), true);
  // 0x04: u32
  if (data?.ulCntChar !== undefined) view.setUint32(4, Number(data.ulCntChar), true);
  // 0x08: pointer
  if (data?.rgString !== undefined) view.setBigUint64(8, data.rgString === null ? 0n : BigInt(util.toPointer(data.rgString)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.VERSIONEDSTREAM (size: 16)
 */
export interface VERSIONEDSTREAM {
  /** System.Guid */
  guidVersion: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.IStream */
  pStream: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVERSIONEDSTREAM = 16;

export function allocVERSIONEDSTREAM(data?: Partial<VERSIONEDSTREAM>): Uint8Array {
  const buf = new Uint8Array(sizeofVERSIONEDSTREAM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guidVersion !== undefined) view.setBigUint64(0, data.guidVersion === null ? 0n : BigInt(util.toPointer(data.guidVersion)), true);
  // 0x08: pointer
  if (data?.pStream !== undefined) view.setBigUint64(8, data.pStream === null ? 0n : BigInt(util.toPointer(data.pStream)), true);
  return buf;
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.System.Com.StructuredStorage.CAC (size: 16)
 */
export interface CAC {
  /** u32 */
  cElems: number;
  /** Windows.Win32.Foundation.PSTR */
  pElems: string | null;
}

export const sizeofCAC = 16;

export function allocCAC(data?: Partial<CAC>): Uint8Array {
  const buf = new Uint8Array(sizeofCAC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pElems !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pElems);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CAUB (size: 16)
 */
export interface CAUB {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCAUB = 16;

export function allocCAUB(data?: Partial<CAUB>): Uint8Array {
  const buf = new Uint8Array(sizeofCAUB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CAI (size: 16)
 */
export interface CAI {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCAI = 16;

export function allocCAI(data?: Partial<CAI>): Uint8Array {
  const buf = new Uint8Array(sizeofCAI);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CAUI (size: 16)
 */
export interface CAUI {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCAUI = 16;

export function allocCAUI(data?: Partial<CAUI>): Uint8Array {
  const buf = new Uint8Array(sizeofCAUI);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CAL (size: 16)
 */
export interface CAL {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCAL = 16;

export function allocCAL(data?: Partial<CAL>): Uint8Array {
  const buf = new Uint8Array(sizeofCAL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CAUL (size: 16)
 */
export interface CAUL {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCAUL = 16;

export function allocCAUL(data?: Partial<CAUL>): Uint8Array {
  const buf = new Uint8Array(sizeofCAUL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CAFLT (size: 16)
 */
export interface CAFLT {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCAFLT = 16;

export function allocCAFLT(data?: Partial<CAFLT>): Uint8Array {
  const buf = new Uint8Array(sizeofCAFLT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CADBL (size: 16)
 */
export interface CADBL {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCADBL = 16;

export function allocCADBL(data?: Partial<CADBL>): Uint8Array {
  const buf = new Uint8Array(sizeofCADBL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CACY (size: 16)
 */
export interface CACY {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCACY = 16;

export function allocCACY(data?: Partial<CACY>): Uint8Array {
  const buf = new Uint8Array(sizeofCACY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CADATE (size: 16)
 */
export interface CADATE {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCADATE = 16;

export function allocCADATE(data?: Partial<CADATE>): Uint8Array {
  const buf = new Uint8Array(sizeofCADATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CABSTR (size: 16)
 */
export interface CABSTR {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCABSTR = 16;

export function allocCABSTR(data?: Partial<CABSTR>): Uint8Array {
  const buf = new Uint8Array(sizeofCABSTR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CABSTRBLOB (size: 16)
 */
export interface CABSTRBLOB {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCABSTRBLOB = 16;

export function allocCABSTRBLOB(data?: Partial<CABSTRBLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofCABSTRBLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CABOOL (size: 16)
 */
export interface CABOOL {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCABOOL = 16;

export function allocCABOOL(data?: Partial<CABOOL>): Uint8Array {
  const buf = new Uint8Array(sizeofCABOOL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CASCODE (size: 16)
 */
export interface CASCODE {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCASCODE = 16;

export function allocCASCODE(data?: Partial<CASCODE>): Uint8Array {
  const buf = new Uint8Array(sizeofCASCODE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CAPROPVARIANT (size: 16)
 */
export interface CAPROPVARIANT {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCAPROPVARIANT = 16;

export function allocCAPROPVARIANT(data?: Partial<CAPROPVARIANT>): Uint8Array {
  const buf = new Uint8Array(sizeofCAPROPVARIANT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CAH (size: 16)
 */
export interface CAH {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCAH = 16;

export function allocCAH(data?: Partial<CAH>): Uint8Array {
  const buf = new Uint8Array(sizeofCAH);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CAUH (size: 16)
 */
export interface CAUH {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCAUH = 16;

export function allocCAUH(data?: Partial<CAUH>): Uint8Array {
  const buf = new Uint8Array(sizeofCAUH);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CALPSTR (size: 16)
 */
export interface CALPSTR {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCALPSTR = 16;

export function allocCALPSTR(data?: Partial<CALPSTR>): Uint8Array {
  const buf = new Uint8Array(sizeofCALPSTR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CALPWSTR (size: 16)
 */
export interface CALPWSTR {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCALPWSTR = 16;

export function allocCALPWSTR(data?: Partial<CALPWSTR>): Uint8Array {
  const buf = new Uint8Array(sizeofCALPWSTR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CAFILETIME (size: 16)
 */
export interface CAFILETIME {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCAFILETIME = 16;

export function allocCAFILETIME(data?: Partial<CAFILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofCAFILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CACLIPDATA (size: 16)
 */
export interface CACLIPDATA {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCACLIPDATA = 16;

export function allocCACLIPDATA(data?: Partial<CACLIPDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofCACLIPDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CACLSID (size: 16)
 */
export interface CACLSID {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCACLSID = 16;

export function allocCACLSID(data?: Partial<CACLSID>): Uint8Array {
  const buf = new Uint8Array(sizeofCACLSID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.PROPVARIANT (size: 8)
 */
export interface PROPVARIANT {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPROPVARIANT = 8;

export function allocPROPVARIANT(data?: Partial<PROPVARIANT>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPVARIANT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.PROPSPEC (size: 16)
 */
export interface PROPSPEC {
  /** Windows.Win32.System.Com.StructuredStorage.PROPSPEC_KIND */
  ulKind: PROPSPEC_KIND;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPROPSPEC = 16;

export function allocPROPSPEC(data?: Partial<PROPSPEC>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPSPEC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulKind !== undefined) view.setUint32(0, Number(data.ulKind), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.System.Com.StructuredStorage.STATPROPSTG (size: 16)
 */
export interface STATPROPSTG {
  /** Windows.Win32.Foundation.PWSTR */
  lpwstrName: string | null;
  /** u32 */
  propid: number;
  /** Windows.Win32.System.Com.VARENUM */
  vt: VARENUM;
}

export const sizeofSTATPROPSTG = 16;

export function allocSTATPROPSTG(data?: Partial<STATPROPSTG>): Uint8Array {
  const buf = new Uint8Array(sizeofSTATPROPSTG);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpwstrName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.lpwstrName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.propid !== undefined) view.setUint32(8, Number(data.propid), true);
  // 0x0c: u16
  if (data?.vt !== undefined) view.setUint16(12, Number(data.vt), true);
  // 0x0e: pad2
  return buf;
}

/**
 * Windows.Win32.Foundation.FILETIME (size: 8)
 */
export interface FILETIME {
  /** u32 */
  dwLowDateTime: number;
  /** u32 */
  dwHighDateTime: number;
}

export const sizeofFILETIME = 8;

export function allocFILETIME(data?: Partial<FILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofFILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowDateTime !== undefined) view.setUint32(0, Number(data.dwLowDateTime), true);
  // 0x04: u32
  if (data?.dwHighDateTime !== undefined) view.setUint32(4, Number(data.dwHighDateTime), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.STATPROPSETSTG (size: 56)
 */
export interface STATPROPSETSTG {
  /** System.Guid */
  fmtid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  clsid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  grfFlags: number;
  /** Windows.Win32.Foundation.FILETIME */
  mtime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  ctime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  atime: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwOSVersion: number;
}

export const sizeofSTATPROPSETSTG = 56;

export function allocSTATPROPSETSTG(data?: Partial<STATPROPSETSTG>): Uint8Array {
  const buf = new Uint8Array(sizeofSTATPROPSETSTG);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fmtid !== undefined) view.setBigUint64(0, data.fmtid === null ? 0n : BigInt(util.toPointer(data.fmtid)), true);
  // 0x08: pointer
  if (data?.clsid !== undefined) view.setBigUint64(8, data.clsid === null ? 0n : BigInt(util.toPointer(data.clsid)), true);
  // 0x10: u32
  if (data?.grfFlags !== undefined) view.setUint32(16, Number(data.grfFlags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.mtime !== undefined) view.setBigUint64(24, data.mtime === null ? 0n : BigInt(util.toPointer(data.mtime)), true);
  // 0x20: pointer
  if (data?.ctime !== undefined) view.setBigUint64(32, data.ctime === null ? 0n : BigInt(util.toPointer(data.ctime)), true);
  // 0x28: pointer
  if (data?.atime !== undefined) view.setBigUint64(40, data.atime === null ? 0n : BigInt(util.toPointer(data.atime)), true);
  // 0x30: u32
  if (data?.dwOSVersion !== undefined) view.setUint32(48, Number(data.dwOSVersion), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.STGOPTIONS (size: 16)
 */
export interface STGOPTIONS {
  /** u16 */
  usVersion: number;
  /** u16 */
  reserved: number;
  /** u32 */
  ulSectorSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwcsTemplateFile: string | null;
}

export const sizeofSTGOPTIONS = 16;

export function allocSTGOPTIONS(data?: Partial<STGOPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofSTGOPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.usVersion !== undefined) view.setUint16(0, Number(data.usVersion), true);
  // 0x02: u16
  if (data?.reserved !== undefined) view.setUint16(2, Number(data.reserved), true);
  // 0x04: u32
  if (data?.ulSectorSize !== undefined) view.setUint32(4, Number(data.ulSectorSize), true);
  // 0x08: buffer
  if (data?.pwcsTemplateFile !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwcsTemplateFile);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.SERIALIZEDPROPERTYVALUE (size: 16)
 */
export interface SERIALIZEDPROPERTYVALUE {
  /** u32 */
  dwType: number;
  /** array */
  rgb: Deno.PointerValue | null;
}

export const sizeofSERIALIZEDPROPERTYVALUE = 16;

export function allocSERIALIZEDPROPERTYVALUE(data?: Partial<SERIALIZEDPROPERTYVALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofSERIALIZEDPROPERTYVALUE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwType !== undefined) view.setUint32(0, Number(data.dwType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgb !== undefined) view.setBigUint64(8, data.rgb === null ? 0n : BigInt(util.toPointer(data.rgb)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.OLESTREAMVTBL (size: 16)
 */
export interface OLESTREAMVTBL {
  /** isize */
  Get: Deno.PointerValue;
  /** isize */
  Put: Deno.PointerValue;
}

export const sizeofOLESTREAMVTBL = 16;

export function allocOLESTREAMVTBL(data?: Partial<OLESTREAMVTBL>): Uint8Array {
  const buf = new Uint8Array(sizeofOLESTREAMVTBL);
  const view = new DataView(buf.buffer);
  // 0x00: isize
  if (data?.Get !== undefined) view.setBigInt64(0, BigInt(data.Get), true);
  // 0x08: isize
  if (data?.Put !== undefined) view.setBigInt64(8, BigInt(data.Put), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.OLESTREAM (size: 8)
 */
export interface OLESTREAM {
  /** ptr */
  lpstbl: Deno.PointerValue | Uint8Array | null;
}

export const sizeofOLESTREAM = 8;

export function allocOLESTREAM(data?: Partial<OLESTREAM>): Uint8Array {
  const buf = new Uint8Array(sizeofOLESTREAM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpstbl !== undefined) view.setBigUint64(0, data.lpstbl === null ? 0n : BigInt(util.toPointer(data.lpstbl)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.PROPBAG2 (size: 32)
 */
export interface PROPBAG2 {
  /** u32 */
  dwType: number;
  /** Windows.Win32.System.Com.VARENUM */
  vt: VARENUM;
  /** u16 */
  cfType: number;
  /** u32 */
  dwHint: number;
  /** Windows.Win32.Foundation.PWSTR */
  pstrName: string | null;
  /** System.Guid */
  clsid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPROPBAG2 = 32;

export function allocPROPBAG2(data?: Partial<PROPBAG2>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPBAG2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwType !== undefined) view.setUint32(0, Number(data.dwType), true);
  // 0x04: u16
  if (data?.vt !== undefined) view.setUint16(4, Number(data.vt), true);
  // 0x06: u16
  if (data?.cfType !== undefined) view.setUint16(6, Number(data.cfType), true);
  // 0x08: u32
  if (data?.dwHint !== undefined) view.setUint32(8, Number(data.dwHint), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pstrName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pstrName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.clsid !== undefined) view.setBigUint64(24, data.clsid === null ? 0n : BigInt(util.toPointer(data.clsid)), true);
  return buf;
}

export type HRESULT = number;

export type BOOL = number;

export type PSECURITY_DESCRIPTOR = Deno.PointerValue | Uint8Array | null;

export type BOOLEAN = number;

// Native Libraries

try {
  var libOLE32_dll = Deno.dlopen("OLE32.dll", {
    CoGetInstanceFromFile: {
      parameters: ["pointer", "pointer", "pointer", "u32", "u32", "buffer", "u32", "pointer"],
      result: "pointer",
    },
    CoGetInstanceFromIStorage: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    CreateStreamOnHGlobal: {
      parameters: ["isize", "i32", "pointer"],
      result: "pointer",
    },
    GetHGlobalFromStream: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    CoGetInterfaceAndReleaseStream: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PropVariantCopy: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PropVariantClear: {
      parameters: ["pointer"],
      result: "pointer",
    },
    FreePropVariantArray: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    StgCreateDocfile: {
      parameters: ["buffer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    StgCreateDocfileOnILockBytes: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    StgOpenStorage: {
      parameters: ["buffer", "pointer", "u32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    StgOpenStorageOnILockBytes: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    StgIsStorageFile: {
      parameters: ["buffer"],
      result: "pointer",
    },
    StgIsStorageILockBytes: {
      parameters: ["pointer"],
      result: "pointer",
    },
    StgSetTimes: {
      parameters: ["buffer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    StgCreateStorageEx: {
      parameters: ["buffer", "u32", "u32", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    StgOpenStorageEx: {
      parameters: ["buffer", "u32", "u32", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    StgCreatePropStg: {
      parameters: ["pointer", "pointer", "pointer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    StgOpenPropStg: {
      parameters: ["pointer", "pointer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    StgCreatePropSetStg: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    FmtIdToPropStgName: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    PropStgNameToFmtId: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    ReadClassStg: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WriteClassStg: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    ReadClassStm: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WriteClassStm: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    GetHGlobalFromILockBytes: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    CreateILockBytesOnHGlobal: {
      parameters: ["isize", "i32", "pointer"],
      result: "pointer",
    },
    GetConvertStg: {
      parameters: ["pointer"],
      result: "pointer",
    },
    WriteFmtUserTypeStg: {
      parameters: ["pointer", "u16", "buffer"],
      result: "pointer",
    },
    ReadFmtUserTypeStg: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SetConvertStg: {
      parameters: ["pointer", "i32"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libole32_dll = Deno.dlopen("ole32.dll", {
    StgOpenAsyncDocfileOnIFillLockBytes: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    StgGetIFillLockBytesOnILockBytes: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    StgGetIFillLockBytesOnFile: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    StgConvertVariantToProperty: {
      parameters: ["pointer", "u16", "pointer", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    StgConvertPropertyToVariant: {
      parameters: ["pointer", "u16", "pointer", "pointer"],
      result: "pointer",
    },
    StgPropertyLengthAsVariant: {
      parameters: ["pointer", "u32", "u16", "u8"],
      result: "u32",
    },
    OleConvertOLESTREAMToIStorage: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    OleConvertIStorageToOLESTREAM: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    OleConvertIStorageToOLESTREAMEx: {
      parameters: ["pointer", "u16", "i32", "i32", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    OleConvertOLESTREAMToIStorageEx: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libdflayout_dll = Deno.dlopen("dflayout.dll", {
    StgOpenLayoutDocfile: {
      parameters: ["buffer", "u32", "u32", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libPROPSYS_dll = Deno.dlopen("PROPSYS.dll", {
    StgSerializePropVariant: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    StgDeserializePropVariant: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function CoGetInstanceFromFile(
  pServerInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pClsid: Deno.PointerValue | Uint8Array | null /* ptr */,
  punkOuter: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  dwClsCtx: CLSCTX /* Windows.Win32.System.Com.CLSCTX */,
  grfMode: number /* u32 */,
  pwszName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwCount: number /* u32 */,
  pResults: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32_dll.CoGetInstanceFromFile(util.toPointer(pServerInfo), util.toPointer(pClsid), util.toPointer(punkOuter), dwClsCtx, grfMode, util.pwstrToFfi(pwszName), dwCount, util.toPointer(pResults)));
}

export function CoGetInstanceFromIStorage(
  pServerInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pClsid: Deno.PointerValue | Uint8Array | null /* ptr */,
  punkOuter: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  dwClsCtx: CLSCTX /* Windows.Win32.System.Com.CLSCTX */,
  pstg: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.StructuredStorage.IStorage */,
  dwCount: number /* u32 */,
  pResults: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32_dll.CoGetInstanceFromIStorage(util.toPointer(pServerInfo), util.toPointer(pClsid), util.toPointer(punkOuter), dwClsCtx, util.toPointer(pstg), dwCount, util.toPointer(pResults)));
}

export function StgOpenAsyncDocfileOnIFillLockBytes(
  pflb: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.StructuredStorage.IFillLockBytes */,
  grfMode: number /* u32 */,
  asyncFlags: number /* u32 */,
  ppstgOpen: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libole32_dll.StgOpenAsyncDocfileOnIFillLockBytes(util.toPointer(pflb), grfMode, asyncFlags, util.toPointer(ppstgOpen)));
}

export function StgGetIFillLockBytesOnILockBytes(
  pilb: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.StructuredStorage.ILockBytes */,
  ppflb: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libole32_dll.StgGetIFillLockBytesOnILockBytes(util.toPointer(pilb), util.toPointer(ppflb)));
}

export function StgGetIFillLockBytesOnFile(
  pwcsName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ppflb: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libole32_dll.StgGetIFillLockBytesOnFile(util.pwstrToFfi(pwcsName), util.toPointer(ppflb)));
}

export function StgOpenLayoutDocfile(
  pwcsDfName: string | null /* Windows.Win32.Foundation.PWSTR */,
  grfMode: number /* u32 */,
  reserved: number /* u32 */,
  ppstgOpen: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libdflayout_dll.StgOpenLayoutDocfile(util.pwstrToFfi(pwcsDfName), grfMode, reserved, util.toPointer(ppstgOpen)));
}

export function CreateStreamOnHGlobal(
  hGlobal: Deno.PointerValue /* isize */,
  fDeleteOnRelease: boolean /* Windows.Win32.Foundation.BOOL */,
  ppstm: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32_dll.CreateStreamOnHGlobal(hGlobal, util.boolToFfi(fDeleteOnRelease), util.toPointer(ppstm)));
}

export function GetHGlobalFromStream(
  pstm: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IStream */,
  phglobal: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32_dll.GetHGlobalFromStream(util.toPointer(pstm), util.toPointer(phglobal)));
}

export function CoGetInterfaceAndReleaseStream(
  pStm: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IStream */,
  iid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppv: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32_dll.CoGetInterfaceAndReleaseStream(util.toPointer(pStm), util.toPointer(iid), util.toPointer(ppv)));
}

export function PropVariantCopy(
  pvarDest: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarSrc: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32_dll.PropVariantCopy(util.toPointer(pvarDest), util.toPointer(pvarSrc)));
}

export function PropVariantClear(
  pvar: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32_dll.PropVariantClear(util.toPointer(pvar)));
}

export function FreePropVariantArray(
  cVariants: number /* u32 */,
  rgvars: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32_dll.FreePropVariantArray(cVariants, util.toPointer(rgvars)));
}

export function StgCreateDocfile(
  pwcsName: string | null /* Windows.Win32.Foundation.PWSTR */,
  grfMode: STGM /* Windows.Win32.System.Com.STGM */,
  reserved: number /* u32 */,
  ppstgOpen: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32_dll.StgCreateDocfile(util.pwstrToFfi(pwcsName), grfMode, reserved, util.toPointer(ppstgOpen)));
}

export function StgCreateDocfileOnILockBytes(
  plkbyt: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.StructuredStorage.ILockBytes */,
  grfMode: STGM /* Windows.Win32.System.Com.STGM */,
  reserved: number /* u32 */,
  ppstgOpen: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32_dll.StgCreateDocfileOnILockBytes(util.toPointer(plkbyt), grfMode, reserved, util.toPointer(ppstgOpen)));
}

export function StgOpenStorage(
  pwcsName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pstgPriority: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.StructuredStorage.IStorage */,
  grfMode: STGM /* Windows.Win32.System.Com.STGM */,
  snbExclude: Deno.PointerValue | Uint8Array | null /* ptr */,
  reserved: number /* u32 */,
  ppstgOpen: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32_dll.StgOpenStorage(util.pwstrToFfi(pwcsName), util.toPointer(pstgPriority), grfMode, util.toPointer(snbExclude), reserved, util.toPointer(ppstgOpen)));
}

export function StgOpenStorageOnILockBytes(
  plkbyt: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.StructuredStorage.ILockBytes */,
  pstgPriority: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.StructuredStorage.IStorage */,
  grfMode: STGM /* Windows.Win32.System.Com.STGM */,
  snbExclude: Deno.PointerValue | Uint8Array | null /* ptr */,
  reserved: number /* u32 */,
  ppstgOpen: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32_dll.StgOpenStorageOnILockBytes(util.toPointer(plkbyt), util.toPointer(pstgPriority), grfMode, util.toPointer(snbExclude), reserved, util.toPointer(ppstgOpen)));
}

export function StgIsStorageFile(
  pwcsName: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32_dll.StgIsStorageFile(util.pwstrToFfi(pwcsName)));
}

export function StgIsStorageILockBytes(
  plkbyt: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.StructuredStorage.ILockBytes */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32_dll.StgIsStorageILockBytes(util.toPointer(plkbyt)));
}

export function StgSetTimes(
  lpszName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pctime: Deno.PointerValue | Uint8Array | null /* ptr */,
  patime: Deno.PointerValue | Uint8Array | null /* ptr */,
  pmtime: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32_dll.StgSetTimes(util.pwstrToFfi(lpszName), util.toPointer(pctime), util.toPointer(patime), util.toPointer(pmtime)));
}

export function StgCreateStorageEx(
  pwcsName: string | null /* Windows.Win32.Foundation.PWSTR */,
  grfMode: STGM /* Windows.Win32.System.Com.STGM */,
  stgfmt: STGFMT /* Windows.Win32.System.Com.StructuredStorage.STGFMT */,
  grfAttrs: number /* u32 */,
  pStgOptions: Deno.PointerValue | Uint8Array | null /* ptr */,
  pSecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppObjectOpen: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32_dll.StgCreateStorageEx(util.pwstrToFfi(pwcsName), grfMode, stgfmt, grfAttrs, util.toPointer(pStgOptions), util.toPointer(pSecurityDescriptor), util.toPointer(riid), util.toPointer(ppObjectOpen)));
}

export function StgOpenStorageEx(
  pwcsName: string | null /* Windows.Win32.Foundation.PWSTR */,
  grfMode: STGM /* Windows.Win32.System.Com.STGM */,
  stgfmt: STGFMT /* Windows.Win32.System.Com.StructuredStorage.STGFMT */,
  grfAttrs: number /* u32 */,
  pStgOptions: Deno.PointerValue | Uint8Array | null /* ptr */,
  pSecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppObjectOpen: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32_dll.StgOpenStorageEx(util.pwstrToFfi(pwcsName), grfMode, stgfmt, grfAttrs, util.toPointer(pStgOptions), util.toPointer(pSecurityDescriptor), util.toPointer(riid), util.toPointer(ppObjectOpen)));
}

export function StgCreatePropStg(
  pUnk: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  fmtid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pclsid: Deno.PointerValue | Uint8Array | null /* ptr */,
  grfFlags: number /* u32 */,
  dwReserved: number /* u32 */,
  ppPropStg: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32_dll.StgCreatePropStg(util.toPointer(pUnk), util.toPointer(fmtid), util.toPointer(pclsid), grfFlags, dwReserved, util.toPointer(ppPropStg)));
}

export function StgOpenPropStg(
  pUnk: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  fmtid: Deno.PointerValue | Uint8Array | null /* ptr */,
  grfFlags: number /* u32 */,
  dwReserved: number /* u32 */,
  ppPropStg: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32_dll.StgOpenPropStg(util.toPointer(pUnk), util.toPointer(fmtid), grfFlags, dwReserved, util.toPointer(ppPropStg)));
}

export function StgCreatePropSetStg(
  pStorage: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.StructuredStorage.IStorage */,
  dwReserved: number /* u32 */,
  ppPropSetStg: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32_dll.StgCreatePropSetStg(util.toPointer(pStorage), dwReserved, util.toPointer(ppPropSetStg)));
}

export function FmtIdToPropStgName(
  pfmtid: Deno.PointerValue | Uint8Array | null /* ptr */,
  oszName: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32_dll.FmtIdToPropStgName(util.toPointer(pfmtid), util.pwstrToFfi(oszName)));
}

export function PropStgNameToFmtId(
  oszName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pfmtid: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32_dll.PropStgNameToFmtId(util.pwstrToFfi(oszName), util.toPointer(pfmtid)));
}

export function ReadClassStg(
  pStg: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.StructuredStorage.IStorage */,
  pclsid: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32_dll.ReadClassStg(util.toPointer(pStg), util.toPointer(pclsid)));
}

export function WriteClassStg(
  pStg: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.StructuredStorage.IStorage */,
  rclsid: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32_dll.WriteClassStg(util.toPointer(pStg), util.toPointer(rclsid)));
}

export function ReadClassStm(
  pStm: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IStream */,
  pclsid: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32_dll.ReadClassStm(util.toPointer(pStm), util.toPointer(pclsid)));
}

export function WriteClassStm(
  pStm: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IStream */,
  rclsid: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32_dll.WriteClassStm(util.toPointer(pStm), util.toPointer(rclsid)));
}

export function GetHGlobalFromILockBytes(
  plkbyt: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.StructuredStorage.ILockBytes */,
  phglobal: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32_dll.GetHGlobalFromILockBytes(util.toPointer(plkbyt), util.toPointer(phglobal)));
}

export function CreateILockBytesOnHGlobal(
  hGlobal: Deno.PointerValue /* isize */,
  fDeleteOnRelease: boolean /* Windows.Win32.Foundation.BOOL */,
  pplkbyt: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32_dll.CreateILockBytesOnHGlobal(hGlobal, util.boolToFfi(fDeleteOnRelease), util.toPointer(pplkbyt)));
}

export function GetConvertStg(
  pStg: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.StructuredStorage.IStorage */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32_dll.GetConvertStg(util.toPointer(pStg)));
}

export function StgConvertVariantToProperty(
  pvar: Deno.PointerValue | Uint8Array | null /* ptr */,
  CodePage: number /* u16 */,
  pprop: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcb: Deno.PointerValue | Uint8Array | null /* ptr */,
  pid: number /* u32 */,
  fReserved: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */,
  pcIndirect: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libole32_dll.StgConvertVariantToProperty(util.toPointer(pvar), CodePage, util.toPointer(pprop), util.toPointer(pcb), pid, util.toPointer(fReserved), util.toPointer(pcIndirect)));
}

export function StgConvertPropertyToVariant(
  pprop: Deno.PointerValue | Uint8Array | null /* ptr */,
  CodePage: number /* u16 */,
  pvar: Deno.PointerValue | Uint8Array | null /* ptr */,
  pma: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libole32_dll.StgConvertPropertyToVariant(util.toPointer(pprop), CodePage, util.toPointer(pvar), util.toPointer(pma)));
}

export function StgPropertyLengthAsVariant(
  pProp: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbProp: number /* u32 */,
  CodePage: number /* u16 */,
  bReserved: number /* u8 */,
): number /* u32 */ {
  return libole32_dll.StgPropertyLengthAsVariant(util.toPointer(pProp), cbProp, CodePage, bReserved);
}

export function WriteFmtUserTypeStg(
  pstg: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.StructuredStorage.IStorage */,
  cf: number /* u16 */,
  lpszUserType: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32_dll.WriteFmtUserTypeStg(util.toPointer(pstg), cf, util.pwstrToFfi(lpszUserType)));
}

export function ReadFmtUserTypeStg(
  pstg: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.StructuredStorage.IStorage */,
  pcf: Deno.PointerValue | Uint8Array | null /* ptr */,
  lplpszUserType: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32_dll.ReadFmtUserTypeStg(util.toPointer(pstg), util.toPointer(pcf), util.toPointer(lplpszUserType)));
}

export function OleConvertOLESTREAMToIStorage(
  lpolestream: Deno.PointerValue | Uint8Array | null /* ptr */,
  pstg: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.StructuredStorage.IStorage */,
  ptd: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libole32_dll.OleConvertOLESTREAMToIStorage(util.toPointer(lpolestream), util.toPointer(pstg), util.toPointer(ptd)));
}

export function OleConvertIStorageToOLESTREAM(
  pstg: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.StructuredStorage.IStorage */,
  lpolestream: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libole32_dll.OleConvertIStorageToOLESTREAM(util.toPointer(pstg), util.toPointer(lpolestream)));
}

export function SetConvertStg(
  pStg: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.StructuredStorage.IStorage */,
  fConvert: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32_dll.SetConvertStg(util.toPointer(pStg), util.boolToFfi(fConvert)));
}

export function OleConvertIStorageToOLESTREAMEx(
  pstg: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.StructuredStorage.IStorage */,
  cfFormat: number /* u16 */,
  lWidth: number /* i32 */,
  lHeight: number /* i32 */,
  dwSize: number /* u32 */,
  pmedium: Deno.PointerValue | Uint8Array | null /* ptr */,
  polestm: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libole32_dll.OleConvertIStorageToOLESTREAMEx(util.toPointer(pstg), cfFormat, lWidth, lHeight, dwSize, util.toPointer(pmedium), util.toPointer(polestm)));
}

export function OleConvertOLESTREAMToIStorageEx(
  polestm: Deno.PointerValue | Uint8Array | null /* ptr */,
  pstg: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.StructuredStorage.IStorage */,
  pcfFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
  plwWidth: Deno.PointerValue | Uint8Array | null /* ptr */,
  plHeight: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  pmedium: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libole32_dll.OleConvertOLESTREAMToIStorageEx(util.toPointer(polestm), util.toPointer(pstg), util.toPointer(pcfFormat), util.toPointer(plwWidth), util.toPointer(plHeight), util.toPointer(pdwSize), util.toPointer(pmedium)));
}

export function StgSerializePropVariant(
  ppropvar: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppProp: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcb: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libPROPSYS_dll.StgSerializePropVariant(util.toPointer(ppropvar), util.toPointer(ppProp), util.toPointer(pcb)));
}

export function StgDeserializePropVariant(
  pprop: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbMax: number /* u32 */,
  ppropvar: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libPROPSYS_dll.StgDeserializePropVariant(util.toPointer(pprop), cbMax, util.toPointer(ppropvar)));
}

