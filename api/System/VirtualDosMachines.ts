/// Auto-generated by Deno Win32: Windows.Win32.System.VirtualDosMachines.Apis

import * as util from "../../util.ts";

// Constants
export const VDMCONTEXT_i386 = 65536;
export const VDMCONTEXT_i486 = 65536;
export const VDM_KGDT_R3_CODE = 24;
export const VDM_MAXIMUM_SUPPORTED_EXTENSION = 512;
export const V86FLAGS_CARRY = 1;
export const V86FLAGS_PARITY = 4;
export const V86FLAGS_AUXCARRY = 16;
export const V86FLAGS_ZERO = 64;
export const V86FLAGS_SIGN = 128;
export const V86FLAGS_TRACE = 256;
export const V86FLAGS_INTERRUPT = 512;
export const V86FLAGS_DIRECTION = 1024;
export const V86FLAGS_OVERFLOW = 2048;
export const V86FLAGS_IOPL = 12288;
export const V86FLAGS_IOPL_BITS = 18;
export const V86FLAGS_RESUME = 65536;
export const V86FLAGS_V86 = 131072;
export const V86FLAGS_ALIGNMENT = 262144;
export const STATUS_VDM_EVENT = 1073741829;
export const DBG_SEGLOAD = 0;
export const DBG_SEGMOVE = 1;
export const DBG_SEGFREE = 2;
export const DBG_MODLOAD = 3;
export const DBG_MODFREE = 4;
export const DBG_SINGLESTEP = 5;
export const DBG_BREAK = 6;
export const DBG_GPFAULT = 7;
export const DBG_DIVOVERFLOW = 8;
export const DBG_INSTRFAULT = 9;
export const DBG_TASKSTART = 10;
export const DBG_TASKSTOP = 11;
export const DBG_DLLSTART = 12;
export const DBG_DLLSTOP = 13;
export const DBG_ATTACH = 14;
export const DBG_TOOLHELP = 15;
export const DBG_STACKFAULT = 16;
export const DBG_WOWINIT = 17;
export const DBG_TEMPBP = 18;
export const DBG_MODMOVE = 19;
export const DBG_INIT = 20;
export const DBG_GPFAULT2 = 21;
export const VDMEVENT_NEEDS_INTERACTIVE = 32768;
export const VDMEVENT_VERBOSE = 16384;
export const VDMEVENT_PE = 8192;
export const VDMEVENT_ALLFLAGS = 57344;
export const VDMEVENT_V86 = 1;
export const VDMEVENT_PM16 = 2;
export const MAX_MODULE_NAME = 9;
export const MAX_PATH16 = 255;
export const SN_CODE = 0;
export const SN_DATA = 1;
export const SN_V86 = 2;
export const GLOBAL_ALL = 0;
export const GLOBAL_LRU = 1;
export const GLOBAL_FREE = 2;
export const GT_UNKNOWN = 0;
export const GT_DGROUP = 1;
export const GT_DATA = 2;
export const GT_CODE = 3;
export const GT_TASK = 4;
export const GT_RESOURCE = 5;
export const GT_MODULE = 6;
export const GT_FREE = 7;
export const GT_INTERNAL = 8;
export const GT_SENTINEL = 9;
export const GT_BURGERMASTER = 10;
export const GD_USERDEFINED = 0;
export const GD_CURSORCOMPONENT = 1;
export const GD_BITMAP = 2;
export const GD_ICONCOMPONENT = 3;
export const GD_MENU = 4;
export const GD_DIALOG = 5;
export const GD_STRING = 6;
export const GD_FONTDIR = 7;
export const GD_FONT = 8;
export const GD_ACCELERATORS = 9;
export const GD_RCDATA = 10;
export const GD_ERRTABLE = 11;
export const GD_CURSOR = 12;
export const GD_ICON = 14;
export const GD_NAMETABLE = 15;
export const GD_MAX_RESOURCE = 15;
export const VDMDBG_BREAK_DOSTASK = 1;
export const VDMDBG_BREAK_WOWTASK = 2;
export const VDMDBG_BREAK_LOADDLL = 4;
export const VDMDBG_BREAK_EXCEPTIONS = 8;
export const VDMDBG_BREAK_DEBUGGER = 16;
export const VDMDBG_TRACE_HISTORY = 128;
export const VDMDBG_BREAK_DIVIDEBYZERO = 256;
export const VDMDBG_INITIAL_FLAGS = 256;
export const VDMDBG_MAX_SYMBOL_BUFFER = 256;
export const VDMADDR_V86 = 2;
export const VDMADDR_PM16 = 4;
export const VDMADDR_PM32 = 16;

// Structs

/**
 * Windows.Win32.System.Kernel.FLOATING_SAVE_AREA (size: 48)
 */
export interface FLOATING_SAVE_AREA {
  /** u32 */
  ControlWord: number;
  /** u32 */
  StatusWord: number;
  /** u32 */
  TagWord: number;
  /** u32 */
  ErrorOffset: number;
  /** u32 */
  ErrorSelector: number;
  /** u32 */
  DataOffset: number;
  /** u32 */
  DataSelector: number;
  /** array */
  RegisterArea: Deno.PointerValue | null;
  /** u32 */
  Cr0NpxState: number;
}

export const sizeofFLOATING_SAVE_AREA = 48;

export function allocFLOATING_SAVE_AREA(data?: Partial<FLOATING_SAVE_AREA>): Uint8Array {
  const buf = new Uint8Array(sizeofFLOATING_SAVE_AREA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ControlWord !== undefined) view.setUint32(0, Number(data.ControlWord), true);
  // 0x04: u32
  if (data?.StatusWord !== undefined) view.setUint32(4, Number(data.StatusWord), true);
  // 0x08: u32
  if (data?.TagWord !== undefined) view.setUint32(8, Number(data.TagWord), true);
  // 0x0c: u32
  if (data?.ErrorOffset !== undefined) view.setUint32(12, Number(data.ErrorOffset), true);
  // 0x10: u32
  if (data?.ErrorSelector !== undefined) view.setUint32(16, Number(data.ErrorSelector), true);
  // 0x14: u32
  if (data?.DataOffset !== undefined) view.setUint32(20, Number(data.DataOffset), true);
  // 0x18: u32
  if (data?.DataSelector !== undefined) view.setUint32(24, Number(data.DataSelector), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.RegisterArea !== undefined) view.setBigUint64(32, data.RegisterArea === null ? 0n : BigInt(util.toPointer(data.RegisterArea)), true);
  // 0x28: u32
  if (data?.Cr0NpxState !== undefined) view.setUint32(40, Number(data.Cr0NpxState), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.System.VirtualDosMachines.VDMCONTEXT (size: 112)
 */
export interface VDMCONTEXT {
  /** u32 */
  ContextFlags: number;
  /** u32 */
  Dr0: number;
  /** u32 */
  Dr1: number;
  /** u32 */
  Dr2: number;
  /** u32 */
  Dr3: number;
  /** u32 */
  Dr6: number;
  /** u32 */
  Dr7: number;
  /** Windows.Win32.System.Kernel.FLOATING_SAVE_AREA */
  FloatSave: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SegGs: number;
  /** u32 */
  SegFs: number;
  /** u32 */
  SegEs: number;
  /** u32 */
  SegDs: number;
  /** u32 */
  Edi: number;
  /** u32 */
  Esi: number;
  /** u32 */
  Ebx: number;
  /** u32 */
  Edx: number;
  /** u32 */
  Ecx: number;
  /** u32 */
  Eax: number;
  /** u32 */
  Ebp: number;
  /** u32 */
  Eip: number;
  /** u32 */
  SegCs: number;
  /** u32 */
  EFlags: number;
  /** u32 */
  Esp: number;
  /** u32 */
  SegSs: number;
  /** array */
  ExtendedRegisters: Deno.PointerValue | null;
}

export const sizeofVDMCONTEXT = 112;

export function allocVDMCONTEXT(data?: Partial<VDMCONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofVDMCONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ContextFlags !== undefined) view.setUint32(0, Number(data.ContextFlags), true);
  // 0x04: u32
  if (data?.Dr0 !== undefined) view.setUint32(4, Number(data.Dr0), true);
  // 0x08: u32
  if (data?.Dr1 !== undefined) view.setUint32(8, Number(data.Dr1), true);
  // 0x0c: u32
  if (data?.Dr2 !== undefined) view.setUint32(12, Number(data.Dr2), true);
  // 0x10: u32
  if (data?.Dr3 !== undefined) view.setUint32(16, Number(data.Dr3), true);
  // 0x14: u32
  if (data?.Dr6 !== undefined) view.setUint32(20, Number(data.Dr6), true);
  // 0x18: u32
  if (data?.Dr7 !== undefined) view.setUint32(24, Number(data.Dr7), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.FloatSave !== undefined) view.setBigUint64(32, data.FloatSave === null ? 0n : BigInt(util.toPointer(data.FloatSave)), true);
  // 0x28: u32
  if (data?.SegGs !== undefined) view.setUint32(40, Number(data.SegGs), true);
  // 0x2c: u32
  if (data?.SegFs !== undefined) view.setUint32(44, Number(data.SegFs), true);
  // 0x30: u32
  if (data?.SegEs !== undefined) view.setUint32(48, Number(data.SegEs), true);
  // 0x34: u32
  if (data?.SegDs !== undefined) view.setUint32(52, Number(data.SegDs), true);
  // 0x38: u32
  if (data?.Edi !== undefined) view.setUint32(56, Number(data.Edi), true);
  // 0x3c: u32
  if (data?.Esi !== undefined) view.setUint32(60, Number(data.Esi), true);
  // 0x40: u32
  if (data?.Ebx !== undefined) view.setUint32(64, Number(data.Ebx), true);
  // 0x44: u32
  if (data?.Edx !== undefined) view.setUint32(68, Number(data.Edx), true);
  // 0x48: u32
  if (data?.Ecx !== undefined) view.setUint32(72, Number(data.Ecx), true);
  // 0x4c: u32
  if (data?.Eax !== undefined) view.setUint32(76, Number(data.Eax), true);
  // 0x50: u32
  if (data?.Ebp !== undefined) view.setUint32(80, Number(data.Ebp), true);
  // 0x54: u32
  if (data?.Eip !== undefined) view.setUint32(84, Number(data.Eip), true);
  // 0x58: u32
  if (data?.SegCs !== undefined) view.setUint32(88, Number(data.SegCs), true);
  // 0x5c: u32
  if (data?.EFlags !== undefined) view.setUint32(92, Number(data.EFlags), true);
  // 0x60: u32
  if (data?.Esp !== undefined) view.setUint32(96, Number(data.Esp), true);
  // 0x64: u32
  if (data?.SegSs !== undefined) view.setUint32(100, Number(data.SegSs), true);
  // 0x68: pointer
  if (data?.ExtendedRegisters !== undefined) view.setBigUint64(104, data.ExtendedRegisters === null ? 0n : BigInt(util.toPointer(data.ExtendedRegisters)), true);
  return buf;
}

/**
 * _Bytes_e__Struct (size: 8)
 */
export interface _Bytes_e__Struct {
  /** u8 */
  BaseMid: number;
  /** u8 */
  Flags1: number;
  /** u8 */
  Flags2: number;
  /** u8 */
  BaseHi: number;
}

export const sizeof_Bytes_e__Struct = 8;

export function alloc_Bytes_e__Struct(data?: Partial<_Bytes_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Bytes_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.BaseMid !== undefined) view.setUint8(0, Number(data.BaseMid));
  // 0x01: u8
  if (data?.Flags1 !== undefined) view.setUint8(1, Number(data.Flags1));
  // 0x02: u8
  if (data?.Flags2 !== undefined) view.setUint8(2, Number(data.Flags2));
  // 0x03: u8
  if (data?.BaseHi !== undefined) view.setUint8(3, Number(data.BaseHi));
  // 0x04: pad4
  return buf;
}

/**
 * _Bits_e__Struct (size: 8)
 */
export interface _Bits_e__Struct {
  /** u32 */
  _bitfield: number;
}

export const sizeof_Bits_e__Struct = 8;

export function alloc_Bits_e__Struct(data?: Partial<_Bits_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Bits_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?._bitfield !== undefined) view.setUint32(0, Number(data._bitfield), true);
  // 0x04: pad4
  return buf;
}

/**
 * _HighWord_e__Union (size: 16)
 */
export interface _HighWord_e__Union {
  /** _Bytes_e__Struct */
  Bytes: Uint8Array | Deno.PointerValue | null;
  /** _Bits_e__Struct */
  Bits: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_HighWord_e__Union = 16;

export function alloc_HighWord_e__Union(data?: Partial<_HighWord_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_HighWord_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Bytes !== undefined) view.setBigUint64(0, data.Bytes === null ? 0n : BigInt(util.toPointer(data.Bytes)), true);
  // 0x08: pointer
  if (data?.Bits !== undefined) view.setBigUint64(8, data.Bits === null ? 0n : BigInt(util.toPointer(data.Bits)), true);
  return buf;
}

/**
 * Windows.Win32.System.VirtualDosMachines.VDMLDT_ENTRY (size: 16)
 */
export interface VDMLDT_ENTRY {
  /** u16 */
  LimitLow: number;
  /** u16 */
  BaseLow: number;
  /** _HighWord_e__Union */
  HighWord: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVDMLDT_ENTRY = 16;

export function allocVDMLDT_ENTRY(data?: Partial<VDMLDT_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofVDMLDT_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.LimitLow !== undefined) view.setUint16(0, Number(data.LimitLow), true);
  // 0x02: u16
  if (data?.BaseLow !== undefined) view.setUint16(2, Number(data.BaseLow), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.HighWord !== undefined) view.setBigUint64(8, data.HighWord === null ? 0n : BigInt(util.toPointer(data.HighWord)), true);
  return buf;
}

/**
 * Windows.Win32.System.VirtualDosMachines.VDMCONTEXT_WITHOUT_XSAVE (size: 104)
 */
export interface VDMCONTEXT_WITHOUT_XSAVE {
  /** u32 */
  ContextFlags: number;
  /** u32 */
  Dr0: number;
  /** u32 */
  Dr1: number;
  /** u32 */
  Dr2: number;
  /** u32 */
  Dr3: number;
  /** u32 */
  Dr6: number;
  /** u32 */
  Dr7: number;
  /** Windows.Win32.System.Kernel.FLOATING_SAVE_AREA */
  FloatSave: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SegGs: number;
  /** u32 */
  SegFs: number;
  /** u32 */
  SegEs: number;
  /** u32 */
  SegDs: number;
  /** u32 */
  Edi: number;
  /** u32 */
  Esi: number;
  /** u32 */
  Ebx: number;
  /** u32 */
  Edx: number;
  /** u32 */
  Ecx: number;
  /** u32 */
  Eax: number;
  /** u32 */
  Ebp: number;
  /** u32 */
  Eip: number;
  /** u32 */
  SegCs: number;
  /** u32 */
  EFlags: number;
  /** u32 */
  Esp: number;
  /** u32 */
  SegSs: number;
}

export const sizeofVDMCONTEXT_WITHOUT_XSAVE = 104;

export function allocVDMCONTEXT_WITHOUT_XSAVE(data?: Partial<VDMCONTEXT_WITHOUT_XSAVE>): Uint8Array {
  const buf = new Uint8Array(sizeofVDMCONTEXT_WITHOUT_XSAVE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ContextFlags !== undefined) view.setUint32(0, Number(data.ContextFlags), true);
  // 0x04: u32
  if (data?.Dr0 !== undefined) view.setUint32(4, Number(data.Dr0), true);
  // 0x08: u32
  if (data?.Dr1 !== undefined) view.setUint32(8, Number(data.Dr1), true);
  // 0x0c: u32
  if (data?.Dr2 !== undefined) view.setUint32(12, Number(data.Dr2), true);
  // 0x10: u32
  if (data?.Dr3 !== undefined) view.setUint32(16, Number(data.Dr3), true);
  // 0x14: u32
  if (data?.Dr6 !== undefined) view.setUint32(20, Number(data.Dr6), true);
  // 0x18: u32
  if (data?.Dr7 !== undefined) view.setUint32(24, Number(data.Dr7), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.FloatSave !== undefined) view.setBigUint64(32, data.FloatSave === null ? 0n : BigInt(util.toPointer(data.FloatSave)), true);
  // 0x28: u32
  if (data?.SegGs !== undefined) view.setUint32(40, Number(data.SegGs), true);
  // 0x2c: u32
  if (data?.SegFs !== undefined) view.setUint32(44, Number(data.SegFs), true);
  // 0x30: u32
  if (data?.SegEs !== undefined) view.setUint32(48, Number(data.SegEs), true);
  // 0x34: u32
  if (data?.SegDs !== undefined) view.setUint32(52, Number(data.SegDs), true);
  // 0x38: u32
  if (data?.Edi !== undefined) view.setUint32(56, Number(data.Edi), true);
  // 0x3c: u32
  if (data?.Esi !== undefined) view.setUint32(60, Number(data.Esi), true);
  // 0x40: u32
  if (data?.Ebx !== undefined) view.setUint32(64, Number(data.Ebx), true);
  // 0x44: u32
  if (data?.Edx !== undefined) view.setUint32(68, Number(data.Edx), true);
  // 0x48: u32
  if (data?.Ecx !== undefined) view.setUint32(72, Number(data.Ecx), true);
  // 0x4c: u32
  if (data?.Eax !== undefined) view.setUint32(76, Number(data.Eax), true);
  // 0x50: u32
  if (data?.Ebp !== undefined) view.setUint32(80, Number(data.Ebp), true);
  // 0x54: u32
  if (data?.Eip !== undefined) view.setUint32(84, Number(data.Eip), true);
  // 0x58: u32
  if (data?.SegCs !== undefined) view.setUint32(88, Number(data.SegCs), true);
  // 0x5c: u32
  if (data?.EFlags !== undefined) view.setUint32(92, Number(data.EFlags), true);
  // 0x60: u32
  if (data?.Esp !== undefined) view.setUint32(96, Number(data.Esp), true);
  // 0x64: u32
  if (data?.SegSs !== undefined) view.setUint32(100, Number(data.SegSs), true);
  return buf;
}

/**
 * Windows.Win32.System.VirtualDosMachines.SEGMENT_NOTE (size: 32)
 */
export interface SEGMENT_NOTE {
  /** u16 */
  Selector1: number;
  /** u16 */
  Selector2: number;
  /** u16 */
  Segment: number;
  /** array */
  Module: Deno.PointerValue | null;
  /** array */
  FileName: Deno.PointerValue | null;
  /** u16 */
  Type: number;
  /** u32 */
  Length: number;
}

export const sizeofSEGMENT_NOTE = 32;

export function allocSEGMENT_NOTE(data?: Partial<SEGMENT_NOTE>): Uint8Array {
  const buf = new Uint8Array(sizeofSEGMENT_NOTE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Selector1 !== undefined) view.setUint16(0, Number(data.Selector1), true);
  // 0x02: u16
  if (data?.Selector2 !== undefined) view.setUint16(2, Number(data.Selector2), true);
  // 0x04: u16
  if (data?.Segment !== undefined) view.setUint16(4, Number(data.Segment), true);
  // 0x06: pad2
  // 0x08: pointer
  if (data?.Module !== undefined) view.setBigUint64(8, data.Module === null ? 0n : BigInt(util.toPointer(data.Module)), true);
  // 0x10: pointer
  if (data?.FileName !== undefined) view.setBigUint64(16, data.FileName === null ? 0n : BigInt(util.toPointer(data.FileName)), true);
  // 0x18: u16
  if (data?.Type !== undefined) view.setUint16(24, Number(data.Type), true);
  // 0x1a: u32
  if (data?.Length !== undefined) view.setUint32(26, Number(data.Length), true);
  // 0x1e: pad2
  return buf;
}

/**
 * Windows.Win32.System.VirtualDosMachines.IMAGE_NOTE (size: 24)
 */
export interface IMAGE_NOTE {
  /** array */
  Module: Deno.PointerValue | null;
  /** array */
  FileName: Deno.PointerValue | null;
  /** u16 */
  hModule: number;
  /** u16 */
  hTask: number;
}

export const sizeofIMAGE_NOTE = 24;

export function allocIMAGE_NOTE(data?: Partial<IMAGE_NOTE>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_NOTE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Module !== undefined) view.setBigUint64(0, data.Module === null ? 0n : BigInt(util.toPointer(data.Module)), true);
  // 0x08: pointer
  if (data?.FileName !== undefined) view.setBigUint64(8, data.FileName === null ? 0n : BigInt(util.toPointer(data.FileName)), true);
  // 0x10: u16
  if (data?.hModule !== undefined) view.setUint16(16, Number(data.hModule), true);
  // 0x12: u16
  if (data?.hTask !== undefined) view.setUint16(18, Number(data.hTask), true);
  // 0x14: pad4
  return buf;
}

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.System.VirtualDosMachines.MODULEENTRY (size: 48)
 */
export interface MODULEENTRY {
  /** u32 */
  dwSize: number;
  /** array */
  szModule: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hModule: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wcUsage: number;
  /** array */
  szExePath: Deno.PointerValue | null;
  /** u16 */
  wNext: number;
}

export const sizeofMODULEENTRY = 48;

export function allocMODULEENTRY(data?: Partial<MODULEENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofMODULEENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.szModule !== undefined) view.setBigUint64(8, data.szModule === null ? 0n : BigInt(util.toPointer(data.szModule)), true);
  // 0x10: pointer
  if (data?.hModule !== undefined) view.setBigUint64(16, data.hModule === null ? 0n : BigInt(util.toPointer(data.hModule)), true);
  // 0x18: u16
  if (data?.wcUsage !== undefined) view.setUint16(24, Number(data.wcUsage), true);
  // 0x1a: pad6
  // 0x20: pointer
  if (data?.szExePath !== undefined) view.setBigUint64(32, data.szExePath === null ? 0n : BigInt(util.toPointer(data.szExePath)), true);
  // 0x28: u16
  if (data?.wNext !== undefined) view.setUint16(40, Number(data.wNext), true);
  // 0x2a: pad6
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.System.VirtualDosMachines.TEMP_BP_NOTE (size: 16)
 */
export interface TEMP_BP_NOTE {
  /** u16 */
  Seg: number;
  /** u32 */
  Offset: number;
  /** Windows.Win32.Foundation.BOOL */
  bPM: boolean;
}

export const sizeofTEMP_BP_NOTE = 16;

export function allocTEMP_BP_NOTE(data?: Partial<TEMP_BP_NOTE>): Uint8Array {
  const buf = new Uint8Array(sizeofTEMP_BP_NOTE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Seg !== undefined) view.setUint16(0, Number(data.Seg), true);
  // 0x02: u32
  if (data?.Offset !== undefined) view.setUint32(2, Number(data.Offset), true);
  // 0x06: i32
  if (data?.bPM !== undefined) view.setInt32(6, Number(data.bPM), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.System.VirtualDosMachines.VDM_SEGINFO (size: 32)
 */
export interface VDM_SEGINFO {
  /** u16 */
  Selector: number;
  /** u16 */
  SegNumber: number;
  /** u32 */
  Length: number;
  /** u16 */
  Type: number;
  /** array */
  ModuleName: Deno.PointerValue | null;
  /** array */
  FileName: Deno.PointerValue | null;
}

export const sizeofVDM_SEGINFO = 32;

export function allocVDM_SEGINFO(data?: Partial<VDM_SEGINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofVDM_SEGINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Selector !== undefined) view.setUint16(0, Number(data.Selector), true);
  // 0x02: u16
  if (data?.SegNumber !== undefined) view.setUint16(2, Number(data.SegNumber), true);
  // 0x04: u32
  if (data?.Length !== undefined) view.setUint32(4, Number(data.Length), true);
  // 0x08: u16
  if (data?.Type !== undefined) view.setUint16(8, Number(data.Type), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.ModuleName !== undefined) view.setBigUint64(16, data.ModuleName === null ? 0n : BigInt(util.toPointer(data.ModuleName)), true);
  // 0x18: pointer
  if (data?.FileName !== undefined) view.setBigUint64(24, data.FileName === null ? 0n : BigInt(util.toPointer(data.FileName)), true);
  return buf;
}

/**
 * Windows.Win32.System.VirtualDosMachines.GLOBALENTRY (size: 64)
 */
export interface GLOBALENTRY {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwAddress: number;
  /** u32 */
  dwBlockSize: number;
  /** Windows.Win32.Foundation.HANDLE */
  hBlock: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wcLock: number;
  /** u16 */
  wcPageLock: number;
  /** u16 */
  wFlags: number;
  /** Windows.Win32.Foundation.BOOL */
  wHeapPresent: boolean;
  /** Windows.Win32.Foundation.HANDLE */
  hOwner: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wType: number;
  /** u16 */
  wData: number;
  /** u32 */
  dwNext: number;
  /** u32 */
  dwNextAlt: number;
}

export const sizeofGLOBALENTRY = 64;

export function allocGLOBALENTRY(data?: Partial<GLOBALENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofGLOBALENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwAddress !== undefined) view.setUint32(4, Number(data.dwAddress), true);
  // 0x08: u32
  if (data?.dwBlockSize !== undefined) view.setUint32(8, Number(data.dwBlockSize), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.hBlock !== undefined) view.setBigUint64(16, data.hBlock === null ? 0n : BigInt(util.toPointer(data.hBlock)), true);
  // 0x18: u16
  if (data?.wcLock !== undefined) view.setUint16(24, Number(data.wcLock), true);
  // 0x1a: u16
  if (data?.wcPageLock !== undefined) view.setUint16(26, Number(data.wcPageLock), true);
  // 0x1c: u16
  if (data?.wFlags !== undefined) view.setUint16(28, Number(data.wFlags), true);
  // 0x1e: i32
  if (data?.wHeapPresent !== undefined) view.setInt32(30, Number(data.wHeapPresent), true);
  // 0x22: pad6
  // 0x28: pointer
  if (data?.hOwner !== undefined) view.setBigUint64(40, data.hOwner === null ? 0n : BigInt(util.toPointer(data.hOwner)), true);
  // 0x30: u16
  if (data?.wType !== undefined) view.setUint16(48, Number(data.wType), true);
  // 0x32: u16
  if (data?.wData !== undefined) view.setUint16(50, Number(data.wData), true);
  // 0x34: u32
  if (data?.dwNext !== undefined) view.setUint32(52, Number(data.dwNext), true);
  // 0x38: u32
  if (data?.dwNextAlt !== undefined) view.setUint32(56, Number(data.dwNextAlt), true);
  // 0x3c: pad4
  return buf;
}

// Native Libraries

// Symbols

