/// Auto-generated by Deno Win32: Windows.Win32.System.LibraryLoader.Apis

import * as util from "../../util.ts";

// Enums
export type LOAD_LIBRARY_FLAGS = number;

// Constants
export const DONT_RESOLVE_DLL_REFERENCES = 1;
export const LOAD_LIBRARY_AS_DATAFILE = 2;
export const LOAD_WITH_ALTERED_SEARCH_PATH = 8;
export const LOAD_IGNORE_CODE_AUTHZ_LEVEL = 16;
export const LOAD_LIBRARY_AS_IMAGE_RESOURCE = 32;
export const LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE = 64;
export const LOAD_LIBRARY_REQUIRE_SIGNED_TARGET = 128;
export const LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR = 256;
export const LOAD_LIBRARY_SEARCH_APPLICATION_DIR = 512;
export const LOAD_LIBRARY_SEARCH_USER_DIRS = 1024;
export const LOAD_LIBRARY_SEARCH_SYSTEM32 = 2048;
export const LOAD_LIBRARY_SEARCH_DEFAULT_DIRS = 4096;
export const LOAD_LIBRARY_SAFE_CURRENT_DIRS = 8192;
export const LOAD_LIBRARY_SEARCH_SYSTEM32_NO_FORWARDER = 16384;
export const FIND_RESOURCE_DIRECTORY_TYPES = 256;
export const FIND_RESOURCE_DIRECTORY_NAMES = 512;
export const FIND_RESOURCE_DIRECTORY_LANGUAGES = 1024;
export const RESOURCE_ENUM_LN = 1;
export const RESOURCE_ENUM_MUI = 2;
export const RESOURCE_ENUM_MUI_SYSTEM = 4;
export const RESOURCE_ENUM_VALIDATE = 8;
export const RESOURCE_ENUM_MODULE_EXACT = 16;
export const SUPPORT_LANG_NUMBER = 32;
export const GET_MODULE_HANDLE_EX_FLAG_PIN = 1;
export const GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT = 2;
export const GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS = 4;
export const CURRENT_IMPORT_REDIRECTION_VERSION = 1;
export const LOAD_LIBRARY_OS_INTEGRITY_CONTINUITY = 32768;

// Structs

/**
 * Windows.Win32.System.LibraryLoader.ENUMUILANG (size: 16)
 */
export interface ENUMUILANG {
  /** u32 */
  NumOfEnumUILang: number;
  /** u32 */
  SizeOfEnumUIBuffer: number;
  /** ptr */
  pEnumUIBuffer: Deno.PointerValue | Uint8Array | null;
}

export const sizeofENUMUILANG = 16;

export function allocENUMUILANG(data?: Partial<ENUMUILANG>): Uint8Array {
  const buf = new Uint8Array(sizeofENUMUILANG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumOfEnumUILang !== undefined) view.setUint32(0, Number(data.NumOfEnumUILang), true);
  // 0x04: u32
  if (data?.SizeOfEnumUIBuffer !== undefined) view.setUint32(4, Number(data.SizeOfEnumUIBuffer), true);
  // 0x08: pointer
  if (data?.pEnumUIBuffer !== undefined) view.setBigUint64(8, data.pEnumUIBuffer === null ? 0n : BigInt(util.toPointer(data.pEnumUIBuffer)), true);
  return buf;
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.System.LibraryLoader.REDIRECTION_FUNCTION_DESCRIPTOR (size: 24)
 */
export interface REDIRECTION_FUNCTION_DESCRIPTOR {
  /** Windows.Win32.Foundation.PSTR */
  DllName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  FunctionName: string | null;
  /** ptr */
  RedirectionTarget: Deno.PointerValue | Uint8Array | null;
}

export const sizeofREDIRECTION_FUNCTION_DESCRIPTOR = 24;

export function allocREDIRECTION_FUNCTION_DESCRIPTOR(data?: Partial<REDIRECTION_FUNCTION_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofREDIRECTION_FUNCTION_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.DllName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.DllName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.FunctionName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.FunctionName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.RedirectionTarget !== undefined) view.setBigUint64(16, data.RedirectionTarget === null ? 0n : BigInt(util.toPointer(data.RedirectionTarget)), true);
  return buf;
}

/**
 * Windows.Win32.System.LibraryLoader.REDIRECTION_DESCRIPTOR (size: 16)
 */
export interface REDIRECTION_DESCRIPTOR {
  /** u32 */
  Version: number;
  /** u32 */
  FunctionCount: number;
  /** ptr */
  Redirections: Deno.PointerValue | Uint8Array | null;
}

export const sizeofREDIRECTION_DESCRIPTOR = 16;

export function allocREDIRECTION_DESCRIPTOR(data?: Partial<REDIRECTION_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofREDIRECTION_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.FunctionCount !== undefined) view.setUint32(4, Number(data.FunctionCount), true);
  // 0x08: pointer
  if (data?.Redirections !== undefined) view.setBigUint64(8, data.Redirections === null ? 0n : BigInt(util.toPointer(data.Redirections)), true);
  return buf;
}

export type HINSTANCE = Deno.PointerValue;

export type BOOL = number;

export type PWSTR = Deno.PointerValue | Uint8Array | null;

export type HRSRC = Deno.PointerValue;

export type HANDLE = Deno.PointerValue;

// Native Libraries

try {
  var libKERNEL32 = Deno.dlopen("KERNEL32", {
    DisableThreadLibraryCalls: {
      parameters: ["pointer"],
      result: "i32",
    },
    FindResourceExW: {
      parameters: ["pointer", "buffer", "buffer", "u16"],
      result: "pointer",
    },
    FreeLibrary: {
      parameters: ["pointer"],
      result: "i32",
    },
    FreeLibraryAndExitThread: {
      parameters: ["pointer", "u32"],
      result: "void",
    },
    FreeResource: {
      parameters: ["isize"],
      result: "i32",
    },
    GetModuleFileNameA: {
      parameters: ["pointer", "buffer", "u32"],
      result: "u32",
    },
    GetModuleFileNameW: {
      parameters: ["pointer", "buffer", "u32"],
      result: "u32",
    },
    GetModuleHandleA: {
      parameters: ["buffer"],
      result: "pointer",
    },
    GetModuleHandleW: {
      parameters: ["buffer"],
      result: "pointer",
    },
    GetModuleHandleExA: {
      parameters: ["u32", "buffer", "pointer"],
      result: "i32",
    },
    GetModuleHandleExW: {
      parameters: ["u32", "buffer", "pointer"],
      result: "i32",
    },
    GetProcAddress: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    LoadLibraryExA: {
      parameters: ["buffer", "pointer", "u32"],
      result: "pointer",
    },
    LoadLibraryExW: {
      parameters: ["buffer", "pointer", "u32"],
      result: "pointer",
    },
    LoadResource: {
      parameters: ["pointer", "pointer"],
      result: "isize",
    },
    LockResource: {
      parameters: ["isize"],
      result: "pointer",
    },
    SizeofResource: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    AddDllDirectory: {
      parameters: ["buffer"],
      result: "pointer",
    },
    RemoveDllDirectory: {
      parameters: ["pointer"],
      result: "i32",
    },
    SetDefaultDllDirectories: {
      parameters: ["u32"],
      result: "i32",
    },
    EnumResourceLanguagesExA: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "isize", "u32", "u16"],
      result: "i32",
    },
    EnumResourceLanguagesExW: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "isize", "u32", "u16"],
      result: "i32",
    },
    EnumResourceNamesExA: {
      parameters: ["pointer", "buffer", "pointer", "isize", "u32", "u16"],
      result: "i32",
    },
    EnumResourceNamesExW: {
      parameters: ["pointer", "buffer", "pointer", "isize", "u32", "u16"],
      result: "i32",
    },
    EnumResourceTypesExA: {
      parameters: ["pointer", "pointer", "isize", "u32", "u16"],
      result: "i32",
    },
    EnumResourceTypesExW: {
      parameters: ["pointer", "pointer", "isize", "u32", "u16"],
      result: "i32",
    },
    FindResourceW: {
      parameters: ["pointer", "buffer", "buffer"],
      result: "pointer",
    },
    LoadLibraryA: {
      parameters: ["buffer"],
      result: "pointer",
    },
    LoadLibraryW: {
      parameters: ["buffer"],
      result: "pointer",
    },
    EnumResourceNamesW: {
      parameters: ["pointer", "buffer", "pointer", "isize"],
      result: "i32",
    },
    EnumResourceNamesA: {
      parameters: ["pointer", "buffer", "pointer", "isize"],
      result: "i32",
    },
    LoadModule: {
      parameters: ["buffer", "pointer"],
      result: "u32",
    },
    LoadPackagedLibrary: {
      parameters: ["buffer", "u32"],
      result: "pointer",
    },
    FindResourceA: {
      parameters: ["pointer", "buffer", "buffer"],
      result: "pointer",
    },
    FindResourceExA: {
      parameters: ["pointer", "buffer", "buffer", "u16"],
      result: "pointer",
    },
    EnumResourceTypesA: {
      parameters: ["pointer", "pointer", "isize"],
      result: "i32",
    },
    EnumResourceTypesW: {
      parameters: ["pointer", "pointer", "isize"],
      result: "i32",
    },
    EnumResourceLanguagesA: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "isize"],
      result: "i32",
    },
    EnumResourceLanguagesW: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "isize"],
      result: "i32",
    },
    BeginUpdateResourceA: {
      parameters: ["buffer", "i32"],
      result: "pointer",
    },
    BeginUpdateResourceW: {
      parameters: ["buffer", "i32"],
      result: "pointer",
    },
    UpdateResourceA: {
      parameters: ["pointer", "buffer", "buffer", "u16", "pointer", "u32"],
      result: "i32",
    },
    UpdateResourceW: {
      parameters: ["pointer", "buffer", "buffer", "u16", "pointer", "u32"],
      result: "i32",
    },
    EndUpdateResourceA: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    EndUpdateResourceW: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    SetDllDirectoryA: {
      parameters: ["buffer"],
      result: "i32",
    },
    SetDllDirectoryW: {
      parameters: ["buffer"],
      result: "i32",
    },
    GetDllDirectoryA: {
      parameters: ["u32", "buffer"],
      result: "u32",
    },
    GetDllDirectoryW: {
      parameters: ["u32", "buffer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function DisableThreadLibraryCalls(
  hLibModule: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.DisableThreadLibraryCalls(util.toPointer(hLibModule)));
}

export function FindResourceExW(
  hModule: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  lpType: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpName: string | null /* Windows.Win32.Foundation.PWSTR */,
  wLanguage: number /* u16 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRSRC */ {
  return util.pointerFromFfi(libKERNEL32.FindResourceExW(util.toPointer(hModule), util.pwstrToFfi(lpType), util.pwstrToFfi(lpName), wLanguage));
}

export function FreeLibrary(
  hLibModule: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.FreeLibrary(util.toPointer(hLibModule)));
}

export function FreeLibraryAndExitThread(
  hLibModule: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  dwExitCode: number /* u32 */,
): void /* void */ {
  return libKERNEL32.FreeLibraryAndExitThread(util.toPointer(hLibModule), dwExitCode);
}

export function FreeResource(
  hResData: Deno.PointerValue /* isize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.FreeResource(hResData));
}

export function GetModuleFileNameA(
  hModule: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  lpFilename: string | null /* Windows.Win32.Foundation.PSTR */,
  nSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32.GetModuleFileNameA(util.toPointer(hModule), util.pstrToFfi(lpFilename), nSize);
}

export function GetModuleFileNameW(
  hModule: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  lpFilename: string | null /* Windows.Win32.Foundation.PWSTR */,
  nSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32.GetModuleFileNameW(util.toPointer(hModule), util.pwstrToFfi(lpFilename), nSize);
}

export function GetModuleHandleA(
  lpModuleName: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */ {
  return util.pointerFromFfi(libKERNEL32.GetModuleHandleA(util.pstrToFfi(lpModuleName)));
}

export function GetModuleHandleW(
  lpModuleName: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */ {
  return util.pointerFromFfi(libKERNEL32.GetModuleHandleW(util.pwstrToFfi(lpModuleName)));
}

export function GetModuleHandleExA(
  dwFlags: number /* u32 */,
  lpModuleName: string | null /* Windows.Win32.Foundation.PSTR */,
  phModule: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetModuleHandleExA(dwFlags, util.pstrToFfi(lpModuleName), util.toPointer(phModule)));
}

export function GetModuleHandleExW(
  dwFlags: number /* u32 */,
  lpModuleName: string | null /* Windows.Win32.Foundation.PWSTR */,
  phModule: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetModuleHandleExW(dwFlags, util.pwstrToFfi(lpModuleName), util.toPointer(phModule)));
}

export function GetProcAddress(
  hModule: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  lpProcName: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.FARPROC */ {
  return util.pointerFromFfi(libKERNEL32.GetProcAddress(util.toPointer(hModule), util.pstrToFfi(lpProcName)));
}

export function LoadLibraryExA(
  lpLibFileName: string | null /* Windows.Win32.Foundation.PSTR */,
  hFile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwFlags: LOAD_LIBRARY_FLAGS /* Windows.Win32.System.LibraryLoader.LOAD_LIBRARY_FLAGS */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */ {
  return util.pointerFromFfi(libKERNEL32.LoadLibraryExA(util.pstrToFfi(lpLibFileName), util.toPointer(hFile), dwFlags));
}

export function LoadLibraryExW(
  lpLibFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  hFile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwFlags: LOAD_LIBRARY_FLAGS /* Windows.Win32.System.LibraryLoader.LOAD_LIBRARY_FLAGS */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */ {
  return util.pointerFromFfi(libKERNEL32.LoadLibraryExW(util.pwstrToFfi(lpLibFileName), util.toPointer(hFile), dwFlags));
}

export function LoadResource(
  hModule: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  hResInfo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HRSRC */,
): Deno.PointerValue /* isize */ {
  return libKERNEL32.LoadResource(util.toPointer(hModule), util.toPointer(hResInfo));
}

export function LockResource(
  hResData: Deno.PointerValue /* isize */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32.LockResource(hResData));
}

export function SizeofResource(
  hModule: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  hResInfo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HRSRC */,
): number /* u32 */ {
  return libKERNEL32.SizeofResource(util.toPointer(hModule), util.toPointer(hResInfo));
}

export function AddDllDirectory(
  NewDirectory: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32.AddDllDirectory(util.pwstrToFfi(NewDirectory)));
}

export function RemoveDllDirectory(
  Cookie: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.RemoveDllDirectory(util.toPointer(Cookie)));
}

export function SetDefaultDllDirectories(
  DirectoryFlags: LOAD_LIBRARY_FLAGS /* Windows.Win32.System.LibraryLoader.LOAD_LIBRARY_FLAGS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetDefaultDllDirectories(DirectoryFlags));
}

export function EnumResourceLanguagesExA(
  hModule: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  lpType: string | null /* Windows.Win32.Foundation.PSTR */,
  lpName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpEnumFunc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.LibraryLoader.ENUMRESLANGPROCA */,
  lParam: Deno.PointerValue /* isize */,
  dwFlags: number /* u32 */,
  LangId: number /* u16 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.EnumResourceLanguagesExA(util.toPointer(hModule), util.pstrToFfi(lpType), util.pstrToFfi(lpName), util.toPointer(lpEnumFunc), lParam, dwFlags, LangId));
}

export function EnumResourceLanguagesExW(
  hModule: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  lpType: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpEnumFunc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.LibraryLoader.ENUMRESLANGPROCW */,
  lParam: Deno.PointerValue /* isize */,
  dwFlags: number /* u32 */,
  LangId: number /* u16 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.EnumResourceLanguagesExW(util.toPointer(hModule), util.pwstrToFfi(lpType), util.pwstrToFfi(lpName), util.toPointer(lpEnumFunc), lParam, dwFlags, LangId));
}

export function EnumResourceNamesExA(
  hModule: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  lpType: string | null /* Windows.Win32.Foundation.PSTR */,
  lpEnumFunc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.LibraryLoader.ENUMRESNAMEPROCA */,
  lParam: Deno.PointerValue /* isize */,
  dwFlags: number /* u32 */,
  LangId: number /* u16 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.EnumResourceNamesExA(util.toPointer(hModule), util.pstrToFfi(lpType), util.toPointer(lpEnumFunc), lParam, dwFlags, LangId));
}

export function EnumResourceNamesExW(
  hModule: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  lpType: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpEnumFunc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.LibraryLoader.ENUMRESNAMEPROCW */,
  lParam: Deno.PointerValue /* isize */,
  dwFlags: number /* u32 */,
  LangId: number /* u16 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.EnumResourceNamesExW(util.toPointer(hModule), util.pwstrToFfi(lpType), util.toPointer(lpEnumFunc), lParam, dwFlags, LangId));
}

export function EnumResourceTypesExA(
  hModule: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  lpEnumFunc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.LibraryLoader.ENUMRESTYPEPROCA */,
  lParam: Deno.PointerValue /* isize */,
  dwFlags: number /* u32 */,
  LangId: number /* u16 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.EnumResourceTypesExA(util.toPointer(hModule), util.toPointer(lpEnumFunc), lParam, dwFlags, LangId));
}

export function EnumResourceTypesExW(
  hModule: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  lpEnumFunc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.LibraryLoader.ENUMRESTYPEPROCW */,
  lParam: Deno.PointerValue /* isize */,
  dwFlags: number /* u32 */,
  LangId: number /* u16 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.EnumResourceTypesExW(util.toPointer(hModule), util.toPointer(lpEnumFunc), lParam, dwFlags, LangId));
}

export function FindResourceW(
  hModule: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  lpName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpType: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRSRC */ {
  return util.pointerFromFfi(libKERNEL32.FindResourceW(util.toPointer(hModule), util.pwstrToFfi(lpName), util.pwstrToFfi(lpType)));
}

export function LoadLibraryA(
  lpLibFileName: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */ {
  return util.pointerFromFfi(libKERNEL32.LoadLibraryA(util.pstrToFfi(lpLibFileName)));
}

export function LoadLibraryW(
  lpLibFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */ {
  return util.pointerFromFfi(libKERNEL32.LoadLibraryW(util.pwstrToFfi(lpLibFileName)));
}

export function EnumResourceNamesW(
  hModule: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  lpType: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpEnumFunc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.LibraryLoader.ENUMRESNAMEPROCW */,
  lParam: Deno.PointerValue /* isize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.EnumResourceNamesW(util.toPointer(hModule), util.pwstrToFfi(lpType), util.toPointer(lpEnumFunc), lParam));
}

export function EnumResourceNamesA(
  hModule: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  lpType: string | null /* Windows.Win32.Foundation.PSTR */,
  lpEnumFunc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.LibraryLoader.ENUMRESNAMEPROCA */,
  lParam: Deno.PointerValue /* isize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.EnumResourceNamesA(util.toPointer(hModule), util.pstrToFfi(lpType), util.toPointer(lpEnumFunc), lParam));
}

export function LoadModule(
  lpModuleName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpParameterBlock: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libKERNEL32.LoadModule(util.pstrToFfi(lpModuleName), util.toPointer(lpParameterBlock));
}

export function LoadPackagedLibrary(
  lpwLibFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Reserved: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */ {
  return util.pointerFromFfi(libKERNEL32.LoadPackagedLibrary(util.pwstrToFfi(lpwLibFileName), Reserved));
}

export function FindResourceA(
  hModule: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  lpName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpType: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRSRC */ {
  return util.pointerFromFfi(libKERNEL32.FindResourceA(util.toPointer(hModule), util.pstrToFfi(lpName), util.pstrToFfi(lpType)));
}

export function FindResourceExA(
  hModule: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  lpType: string | null /* Windows.Win32.Foundation.PSTR */,
  lpName: string | null /* Windows.Win32.Foundation.PSTR */,
  wLanguage: number /* u16 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRSRC */ {
  return util.pointerFromFfi(libKERNEL32.FindResourceExA(util.toPointer(hModule), util.pstrToFfi(lpType), util.pstrToFfi(lpName), wLanguage));
}

export function EnumResourceTypesA(
  hModule: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  lpEnumFunc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.LibraryLoader.ENUMRESTYPEPROCA */,
  lParam: Deno.PointerValue /* isize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.EnumResourceTypesA(util.toPointer(hModule), util.toPointer(lpEnumFunc), lParam));
}

export function EnumResourceTypesW(
  hModule: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  lpEnumFunc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.LibraryLoader.ENUMRESTYPEPROCW */,
  lParam: Deno.PointerValue /* isize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.EnumResourceTypesW(util.toPointer(hModule), util.toPointer(lpEnumFunc), lParam));
}

export function EnumResourceLanguagesA(
  hModule: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  lpType: string | null /* Windows.Win32.Foundation.PSTR */,
  lpName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpEnumFunc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.LibraryLoader.ENUMRESLANGPROCA */,
  lParam: Deno.PointerValue /* isize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.EnumResourceLanguagesA(util.toPointer(hModule), util.pstrToFfi(lpType), util.pstrToFfi(lpName), util.toPointer(lpEnumFunc), lParam));
}

export function EnumResourceLanguagesW(
  hModule: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  lpType: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpEnumFunc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.LibraryLoader.ENUMRESLANGPROCW */,
  lParam: Deno.PointerValue /* isize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.EnumResourceLanguagesW(util.toPointer(hModule), util.pwstrToFfi(lpType), util.pwstrToFfi(lpName), util.toPointer(lpEnumFunc), lParam));
}

export function BeginUpdateResourceA(
  pFileName: string | null /* Windows.Win32.Foundation.PSTR */,
  bDeleteExistingResources: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32.BeginUpdateResourceA(util.pstrToFfi(pFileName), util.boolToFfi(bDeleteExistingResources)));
}

export function BeginUpdateResourceW(
  pFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  bDeleteExistingResources: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32.BeginUpdateResourceW(util.pwstrToFfi(pFileName), util.boolToFfi(bDeleteExistingResources)));
}

export function UpdateResourceA(
  hUpdate: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpType: string | null /* Windows.Win32.Foundation.PSTR */,
  lpName: string | null /* Windows.Win32.Foundation.PSTR */,
  wLanguage: number /* u16 */,
  lpData: Deno.PointerValue | Uint8Array | null /* ptr */,
  cb: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.UpdateResourceA(util.toPointer(hUpdate), util.pstrToFfi(lpType), util.pstrToFfi(lpName), wLanguage, util.toPointer(lpData), cb));
}

export function UpdateResourceW(
  hUpdate: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpType: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpName: string | null /* Windows.Win32.Foundation.PWSTR */,
  wLanguage: number /* u16 */,
  lpData: Deno.PointerValue | Uint8Array | null /* ptr */,
  cb: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.UpdateResourceW(util.toPointer(hUpdate), util.pwstrToFfi(lpType), util.pwstrToFfi(lpName), wLanguage, util.toPointer(lpData), cb));
}

export function EndUpdateResourceA(
  hUpdate: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  fDiscard: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.EndUpdateResourceA(util.toPointer(hUpdate), util.boolToFfi(fDiscard)));
}

export function EndUpdateResourceW(
  hUpdate: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  fDiscard: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.EndUpdateResourceW(util.toPointer(hUpdate), util.boolToFfi(fDiscard)));
}

export function SetDllDirectoryA(
  lpPathName: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetDllDirectoryA(util.pstrToFfi(lpPathName)));
}

export function SetDllDirectoryW(
  lpPathName: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetDllDirectoryW(util.pwstrToFfi(lpPathName)));
}

export function GetDllDirectoryA(
  nBufferLength: number /* u32 */,
  lpBuffer: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libKERNEL32.GetDllDirectoryA(nBufferLength, util.pstrToFfi(lpBuffer));
}

export function GetDllDirectoryW(
  nBufferLength: number /* u32 */,
  lpBuffer: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libKERNEL32.GetDllDirectoryW(nBufferLength, util.pwstrToFfi(lpBuffer));
}

