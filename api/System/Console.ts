/// Auto-generated by Deno Win32: Windows.Win32.System.Console.Apis

import * as util from "../../util.ts";

// Enums
export type CONSOLE_MODE = number;
export type STD_HANDLE = number;
export type CONSOLE_CHARACTER_ATTRIBUTES = number;

// Constants
export const ENABLE_PROCESSED_INPUT = 1;
export const ENABLE_LINE_INPUT = 2;
export const ENABLE_ECHO_INPUT = 4;
export const ENABLE_WINDOW_INPUT = 8;
export const ENABLE_MOUSE_INPUT = 16;
export const ENABLE_INSERT_MODE = 32;
export const ENABLE_QUICK_EDIT_MODE = 64;
export const ENABLE_EXTENDED_FLAGS = 128;
export const ENABLE_AUTO_POSITION = 256;
export const ENABLE_VIRTUAL_TERMINAL_INPUT = 512;
export const ENABLE_PROCESSED_OUTPUT = 1;
export const ENABLE_WRAP_AT_EOL_OUTPUT = 2;
export const ENABLE_VIRTUAL_TERMINAL_PROCESSING = 4;
export const DISABLE_NEWLINE_AUTO_RETURN = 8;
export const ENABLE_LVB_GRID_WORLDWIDE = 16;
export const STD_INPUT_HANDLE = 4294967286;
export const STD_OUTPUT_HANDLE = 4294967285;
export const STD_ERROR_HANDLE = 4294967284;
export const FOREGROUND_BLUE = 1;
export const FOREGROUND_GREEN = 2;
export const FOREGROUND_RED = 4;
export const FOREGROUND_INTENSITY = 8;
export const BACKGROUND_BLUE = 16;
export const BACKGROUND_GREEN = 32;
export const BACKGROUND_RED = 64;
export const BACKGROUND_INTENSITY = 128;
export const COMMON_LVB_LEADING_BYTE = 256;
export const COMMON_LVB_TRAILING_BYTE = 512;
export const COMMON_LVB_GRID_HORIZONTAL = 1024;
export const COMMON_LVB_GRID_LVERTICAL = 2048;
export const COMMON_LVB_GRID_RVERTICAL = 4096;
export const COMMON_LVB_REVERSE_VIDEO = 16384;
export const COMMON_LVB_UNDERSCORE = 32768;
export const COMMON_LVB_SBCSDBCS = 768;
export const CONSOLE_TEXTMODE_BUFFER = 1;
export const ATTACH_PARENT_PROCESS = 4294967295;
export const CTRL_C_EVENT = 0;
export const CTRL_BREAK_EVENT = 1;
export const CTRL_CLOSE_EVENT = 2;
export const CTRL_LOGOFF_EVENT = 5;
export const CTRL_SHUTDOWN_EVENT = 6;
export const PSEUDOCONSOLE_INHERIT_CURSOR = 1;
export const CONSOLE_NO_SELECTION = 0;
export const CONSOLE_SELECTION_IN_PROGRESS = 1;
export const CONSOLE_SELECTION_NOT_EMPTY = 2;
export const CONSOLE_MOUSE_SELECTION = 4;
export const CONSOLE_MOUSE_DOWN = 8;
export const HISTORY_NO_DUP_FLAG = 1;
export const CONSOLE_FULLSCREEN = 1;
export const CONSOLE_FULLSCREEN_HARDWARE = 2;
export const CONSOLE_FULLSCREEN_MODE = 1;
export const CONSOLE_WINDOWED_MODE = 2;
export const RIGHT_ALT_PRESSED = 1;
export const LEFT_ALT_PRESSED = 2;
export const RIGHT_CTRL_PRESSED = 4;
export const LEFT_CTRL_PRESSED = 8;
export const SHIFT_PRESSED = 16;
export const NUMLOCK_ON = 32;
export const SCROLLLOCK_ON = 64;
export const CAPSLOCK_ON = 128;
export const ENHANCED_KEY = 256;
export const NLS_DBCSCHAR = 65536;
export const NLS_ALPHANUMERIC = 0;
export const NLS_KATAKANA = 131072;
export const NLS_HIRAGANA = 262144;
export const NLS_ROMAN = 4194304;
export const NLS_IME_CONVERSION = 8388608;
export const ALTNUMPAD_BIT = 67108864;
export const NLS_IME_DISABLE = 536870912;
export const FROM_LEFT_1ST_BUTTON_PRESSED = 1;
export const RIGHTMOST_BUTTON_PRESSED = 2;
export const FROM_LEFT_2ND_BUTTON_PRESSED = 4;
export const FROM_LEFT_3RD_BUTTON_PRESSED = 8;
export const FROM_LEFT_4TH_BUTTON_PRESSED = 16;
export const MOUSE_MOVED = 1;
export const DOUBLE_CLICK = 2;
export const MOUSE_WHEELED = 4;
export const MOUSE_HWHEELED = 8;
export const KEY_EVENT = 1;
export const MOUSE_EVENT = 2;
export const WINDOW_BUFFER_SIZE_EVENT = 4;
export const MENU_EVENT = 8;
export const FOCUS_EVENT = 16;

// Structs

export type HPCON = Deno.PointerValue;

/**
 * Windows.Win32.System.Console.COORD (size: 8)
 */
export interface COORD {
  /** i16 */
  X: number;
  /** i16 */
  Y: number;
}

export const sizeofCOORD = 8;

export function allocCOORD(data?: Partial<COORD>): Uint8Array {
  const buf = new Uint8Array(sizeofCOORD);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.X !== undefined) view.setInt16(0, Number(data.X), true);
  // 0x02: i16
  if (data?.Y !== undefined) view.setInt16(2, Number(data.Y), true);
  // 0x04: pad4
  return buf;
}

export class COORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i16
  get X(): number {
    return this.view.getInt16(0, true);
  }

  // 0x02: i16
  get Y(): number {
    return this.view.getInt16(2, true);
  }

  // 0x04: pad4

  // 0x00: i16
  set X(value: number) {
    this.view.setInt16(0, value, true);
  }

  // 0x02: i16
  set Y(value: number) {
    this.view.setInt16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Console.SMALL_RECT (size: 8)
 */
export interface SMALL_RECT {
  /** i16 */
  Left: number;
  /** i16 */
  Top: number;
  /** i16 */
  Right: number;
  /** i16 */
  Bottom: number;
}

export const sizeofSMALL_RECT = 8;

export function allocSMALL_RECT(data?: Partial<SMALL_RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofSMALL_RECT);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.Left !== undefined) view.setInt16(0, Number(data.Left), true);
  // 0x02: i16
  if (data?.Top !== undefined) view.setInt16(2, Number(data.Top), true);
  // 0x04: i16
  if (data?.Right !== undefined) view.setInt16(4, Number(data.Right), true);
  // 0x06: i16
  if (data?.Bottom !== undefined) view.setInt16(6, Number(data.Bottom), true);
  return buf;
}

export class SMALL_RECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i16
  get Left(): number {
    return this.view.getInt16(0, true);
  }

  // 0x02: i16
  get Top(): number {
    return this.view.getInt16(2, true);
  }

  // 0x04: i16
  get Right(): number {
    return this.view.getInt16(4, true);
  }

  // 0x06: i16
  get Bottom(): number {
    return this.view.getInt16(6, true);
  }

  // 0x00: i16
  set Left(value: number) {
    this.view.setInt16(0, value, true);
  }

  // 0x02: i16
  set Top(value: number) {
    this.view.setInt16(2, value, true);
  }

  // 0x04: i16
  set Right(value: number) {
    this.view.setInt16(4, value, true);
  }

  // 0x06: i16
  set Bottom(value: number) {
    this.view.setInt16(6, value, true);
  }
}

export type BOOL = number;

export type CHAR = number;

/**
 * _uChar_e__Union (size: 16)
 */
export interface _uChar_e__Union {
  /** char */
  UnicodeChar: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.CHAR */
  AsciiChar: string | number;
}

export const sizeof_uChar_e__Union = 16;

export function alloc_uChar_e__Union(data?: Partial<_uChar_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_uChar_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.UnicodeChar !== undefined) view.setBigUint64(0, data.UnicodeChar === null ? 0n : BigInt(util.toPointer(data.UnicodeChar)), true);
  // 0x08: u8
  if (data?.AsciiChar !== undefined) view.setUint8(8, Number(data.AsciiChar));
  // 0x09: pad7
  return buf;
}

export class _uChar_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get UnicodeChar(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u8
  get AsciiChar(): number {
    return this.view.getUint8(8);
  }

  // 0x09: pad7

  // 0x00: pointer
  set UnicodeChar(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u8
  set AsciiChar(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: pad7
}

/**
 * Windows.Win32.System.Console.KEY_EVENT_RECORD (size: 32)
 */
export interface KEY_EVENT_RECORD {
  /** Windows.Win32.Foundation.BOOL */
  bKeyDown: boolean;
  /** u16 */
  wRepeatCount: number;
  /** u16 */
  wVirtualKeyCode: number;
  /** u16 */
  wVirtualScanCode: number;
  /** _uChar_e__Union */
  uChar: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwControlKeyState: number;
}

export const sizeofKEY_EVENT_RECORD = 32;

export function allocKEY_EVENT_RECORD(data?: Partial<KEY_EVENT_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofKEY_EVENT_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.bKeyDown !== undefined) view.setInt32(0, Number(data.bKeyDown), true);
  // 0x04: u16
  if (data?.wRepeatCount !== undefined) view.setUint16(4, Number(data.wRepeatCount), true);
  // 0x06: u16
  if (data?.wVirtualKeyCode !== undefined) view.setUint16(6, Number(data.wVirtualKeyCode), true);
  // 0x08: u16
  if (data?.wVirtualScanCode !== undefined) view.setUint16(8, Number(data.wVirtualScanCode), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.uChar !== undefined) view.setBigUint64(16, data.uChar === null ? 0n : BigInt(util.toPointer(data.uChar)), true);
  // 0x18: u32
  if (data?.dwControlKeyState !== undefined) view.setUint32(24, Number(data.dwControlKeyState), true);
  // 0x1c: pad4
  return buf;
}

export class KEY_EVENT_RECORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get bKeyDown(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u16
  get wRepeatCount(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get wVirtualKeyCode(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u16
  get wVirtualScanCode(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  get uChar(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwControlKeyState(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: i32
  set bKeyDown(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u16
  set wRepeatCount(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set wVirtualKeyCode(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u16
  set wVirtualScanCode(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  set uChar(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set dwControlKeyState(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.System.Console.MOUSE_EVENT_RECORD (size: 24)
 */
export interface MOUSE_EVENT_RECORD {
  /** Windows.Win32.System.Console.COORD */
  dwMousePosition: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwButtonState: number;
  /** u32 */
  dwControlKeyState: number;
  /** u32 */
  dwEventFlags: number;
}

export const sizeofMOUSE_EVENT_RECORD = 24;

export function allocMOUSE_EVENT_RECORD(data?: Partial<MOUSE_EVENT_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofMOUSE_EVENT_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.dwMousePosition !== undefined) view.setBigUint64(0, data.dwMousePosition === null ? 0n : BigInt(util.toPointer(data.dwMousePosition)), true);
  // 0x08: u32
  if (data?.dwButtonState !== undefined) view.setUint32(8, Number(data.dwButtonState), true);
  // 0x0c: u32
  if (data?.dwControlKeyState !== undefined) view.setUint32(12, Number(data.dwControlKeyState), true);
  // 0x10: u32
  if (data?.dwEventFlags !== undefined) view.setUint32(16, Number(data.dwEventFlags), true);
  // 0x14: pad4
  return buf;
}

export class MOUSE_EVENT_RECORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get dwMousePosition(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwButtonState(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwControlKeyState(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwEventFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set dwMousePosition(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set dwButtonState(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwControlKeyState(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwEventFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.System.Console.WINDOW_BUFFER_SIZE_RECORD (size: 8)
 */
export interface WINDOW_BUFFER_SIZE_RECORD {
  /** Windows.Win32.System.Console.COORD */
  dwSize: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWINDOW_BUFFER_SIZE_RECORD = 8;

export function allocWINDOW_BUFFER_SIZE_RECORD(data?: Partial<WINDOW_BUFFER_SIZE_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofWINDOW_BUFFER_SIZE_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.dwSize !== undefined) view.setBigUint64(0, data.dwSize === null ? 0n : BigInt(util.toPointer(data.dwSize)), true);
  return buf;
}

export class WINDOW_BUFFER_SIZE_RECORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get dwSize(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set dwSize(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Console.MENU_EVENT_RECORD (size: 8)
 */
export interface MENU_EVENT_RECORD {
  /** u32 */
  dwCommandId: number;
}

export const sizeofMENU_EVENT_RECORD = 8;

export function allocMENU_EVENT_RECORD(data?: Partial<MENU_EVENT_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofMENU_EVENT_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwCommandId !== undefined) view.setUint32(0, Number(data.dwCommandId), true);
  // 0x04: pad4
  return buf;
}

export class MENU_EVENT_RECORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwCommandId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set dwCommandId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Console.FOCUS_EVENT_RECORD (size: 8)
 */
export interface FOCUS_EVENT_RECORD {
  /** Windows.Win32.Foundation.BOOL */
  bSetFocus: boolean;
}

export const sizeofFOCUS_EVENT_RECORD = 8;

export function allocFOCUS_EVENT_RECORD(data?: Partial<FOCUS_EVENT_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofFOCUS_EVENT_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.bSetFocus !== undefined) view.setInt32(0, Number(data.bSetFocus), true);
  // 0x04: pad4
  return buf;
}

export class FOCUS_EVENT_RECORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get bSetFocus(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set bSetFocus(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * _Event_e__Union (size: 40)
 */
export interface _Event_e__Union {
  /** Windows.Win32.System.Console.KEY_EVENT_RECORD */
  KeyEvent: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Console.MOUSE_EVENT_RECORD */
  MouseEvent: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Console.WINDOW_BUFFER_SIZE_RECORD */
  WindowBufferSizeEvent: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Console.MENU_EVENT_RECORD */
  MenuEvent: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Console.FOCUS_EVENT_RECORD */
  FocusEvent: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Event_e__Union = 40;

export function alloc_Event_e__Union(data?: Partial<_Event_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Event_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.KeyEvent !== undefined) view.setBigUint64(0, data.KeyEvent === null ? 0n : BigInt(util.toPointer(data.KeyEvent)), true);
  // 0x08: pointer
  if (data?.MouseEvent !== undefined) view.setBigUint64(8, data.MouseEvent === null ? 0n : BigInt(util.toPointer(data.MouseEvent)), true);
  // 0x10: pointer
  if (data?.WindowBufferSizeEvent !== undefined) view.setBigUint64(16, data.WindowBufferSizeEvent === null ? 0n : BigInt(util.toPointer(data.WindowBufferSizeEvent)), true);
  // 0x18: pointer
  if (data?.MenuEvent !== undefined) view.setBigUint64(24, data.MenuEvent === null ? 0n : BigInt(util.toPointer(data.MenuEvent)), true);
  // 0x20: pointer
  if (data?.FocusEvent !== undefined) view.setBigUint64(32, data.FocusEvent === null ? 0n : BigInt(util.toPointer(data.FocusEvent)), true);
  return buf;
}

export class _Event_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get KeyEvent(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get MouseEvent(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get WindowBufferSizeEvent(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get MenuEvent(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get FocusEvent(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set KeyEvent(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set MouseEvent(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set WindowBufferSizeEvent(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set MenuEvent(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set FocusEvent(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Console.INPUT_RECORD (size: 16)
 */
export interface INPUT_RECORD {
  /** u16 */
  EventType: number;
  /** _Event_e__Union */
  Event: Uint8Array | Deno.PointerValue | null;
}

export const sizeofINPUT_RECORD = 16;

export function allocINPUT_RECORD(data?: Partial<INPUT_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofINPUT_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.EventType !== undefined) view.setUint16(0, Number(data.EventType), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Event !== undefined) view.setBigUint64(8, data.Event === null ? 0n : BigInt(util.toPointer(data.Event)), true);
  return buf;
}

export class INPUT_RECORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get EventType(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get Event(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set EventType(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set Event(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * _Char_e__Union (size: 16)
 */
export interface _Char_e__Union {
  /** char */
  UnicodeChar: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.CHAR */
  AsciiChar: string | number;
}

export const sizeof_Char_e__Union = 16;

export function alloc_Char_e__Union(data?: Partial<_Char_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Char_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.UnicodeChar !== undefined) view.setBigUint64(0, data.UnicodeChar === null ? 0n : BigInt(util.toPointer(data.UnicodeChar)), true);
  // 0x08: u8
  if (data?.AsciiChar !== undefined) view.setUint8(8, Number(data.AsciiChar));
  // 0x09: pad7
  return buf;
}

export class _Char_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get UnicodeChar(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u8
  get AsciiChar(): number {
    return this.view.getUint8(8);
  }

  // 0x09: pad7

  // 0x00: pointer
  set UnicodeChar(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u8
  set AsciiChar(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: pad7
}

/**
 * Windows.Win32.System.Console.CHAR_INFO (size: 16)
 */
export interface CHAR_INFO {
  /** _Char_e__Union */
  Char: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  Attributes: number;
}

export const sizeofCHAR_INFO = 16;

export function allocCHAR_INFO(data?: Partial<CHAR_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCHAR_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Char !== undefined) view.setBigUint64(0, data.Char === null ? 0n : BigInt(util.toPointer(data.Char)), true);
  // 0x08: u16
  if (data?.Attributes !== undefined) view.setUint16(8, Number(data.Attributes), true);
  // 0x0a: pad6
  return buf;
}

export class CHAR_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Char(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u16
  get Attributes(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set Char(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u16
  set Attributes(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Console.CONSOLE_FONT_INFO (size: 16)
 */
export interface CONSOLE_FONT_INFO {
  /** u32 */
  nFont: number;
  /** Windows.Win32.System.Console.COORD */
  dwFontSize: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCONSOLE_FONT_INFO = 16;

export function allocCONSOLE_FONT_INFO(data?: Partial<CONSOLE_FONT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCONSOLE_FONT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.nFont !== undefined) view.setUint32(0, Number(data.nFont), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.dwFontSize !== undefined) view.setBigUint64(8, data.dwFontSize === null ? 0n : BigInt(util.toPointer(data.dwFontSize)), true);
  return buf;
}

export class CONSOLE_FONT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get nFont(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get dwFontSize(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set nFont(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set dwFontSize(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Console.CONSOLE_READCONSOLE_CONTROL (size: 16)
 */
export interface CONSOLE_READCONSOLE_CONTROL {
  /** u32 */
  nLength: number;
  /** u32 */
  nInitialChars: number;
  /** u32 */
  dwCtrlWakeupMask: number;
  /** u32 */
  dwControlKeyState: number;
}

export const sizeofCONSOLE_READCONSOLE_CONTROL = 16;

export function allocCONSOLE_READCONSOLE_CONTROL(data?: Partial<CONSOLE_READCONSOLE_CONTROL>): Uint8Array {
  const buf = new Uint8Array(sizeofCONSOLE_READCONSOLE_CONTROL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.nLength !== undefined) view.setUint32(0, Number(data.nLength), true);
  // 0x04: u32
  if (data?.nInitialChars !== undefined) view.setUint32(4, Number(data.nInitialChars), true);
  // 0x08: u32
  if (data?.dwCtrlWakeupMask !== undefined) view.setUint32(8, Number(data.dwCtrlWakeupMask), true);
  // 0x0c: u32
  if (data?.dwControlKeyState !== undefined) view.setUint32(12, Number(data.dwControlKeyState), true);
  return buf;
}

export class CONSOLE_READCONSOLE_CONTROLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get nLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get nInitialChars(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwCtrlWakeupMask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwControlKeyState(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set nLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set nInitialChars(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwCtrlWakeupMask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwControlKeyState(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.System.Console.CONSOLE_CURSOR_INFO (size: 8)
 */
export interface CONSOLE_CURSOR_INFO {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.BOOL */
  bVisible: boolean;
}

export const sizeofCONSOLE_CURSOR_INFO = 8;

export function allocCONSOLE_CURSOR_INFO(data?: Partial<CONSOLE_CURSOR_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCONSOLE_CURSOR_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: i32
  if (data?.bVisible !== undefined) view.setInt32(4, Number(data.bVisible), true);
  return buf;
}

export class CONSOLE_CURSOR_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get bVisible(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set bVisible(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Console.CONSOLE_SCREEN_BUFFER_INFO (size: 40)
 */
export interface CONSOLE_SCREEN_BUFFER_INFO {
  /** Windows.Win32.System.Console.COORD */
  dwSize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Console.COORD */
  dwCursorPosition: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Console.CONSOLE_CHARACTER_ATTRIBUTES */
  wAttributes: CONSOLE_CHARACTER_ATTRIBUTES;
  /** Windows.Win32.System.Console.SMALL_RECT */
  srWindow: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Console.COORD */
  dwMaximumWindowSize: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCONSOLE_SCREEN_BUFFER_INFO = 40;

export function allocCONSOLE_SCREEN_BUFFER_INFO(data?: Partial<CONSOLE_SCREEN_BUFFER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCONSOLE_SCREEN_BUFFER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.dwSize !== undefined) view.setBigUint64(0, data.dwSize === null ? 0n : BigInt(util.toPointer(data.dwSize)), true);
  // 0x08: pointer
  if (data?.dwCursorPosition !== undefined) view.setBigUint64(8, data.dwCursorPosition === null ? 0n : BigInt(util.toPointer(data.dwCursorPosition)), true);
  // 0x10: u16
  if (data?.wAttributes !== undefined) view.setUint16(16, Number(data.wAttributes), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.srWindow !== undefined) view.setBigUint64(24, data.srWindow === null ? 0n : BigInt(util.toPointer(data.srWindow)), true);
  // 0x20: pointer
  if (data?.dwMaximumWindowSize !== undefined) view.setBigUint64(32, data.dwMaximumWindowSize === null ? 0n : BigInt(util.toPointer(data.dwMaximumWindowSize)), true);
  return buf;
}

export class CONSOLE_SCREEN_BUFFER_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get dwSize(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get dwCursorPosition(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u16
  get wAttributes(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  get srWindow(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get dwMaximumWindowSize(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set dwSize(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set dwCursorPosition(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u16
  set wAttributes(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  set srWindow(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set dwMaximumWindowSize(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Console.CONSOLE_SCREEN_BUFFER_INFOEX (size: 64)
 */
export interface CONSOLE_SCREEN_BUFFER_INFOEX {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.System.Console.COORD */
  dwSize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Console.COORD */
  dwCursorPosition: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Console.CONSOLE_CHARACTER_ATTRIBUTES */
  wAttributes: CONSOLE_CHARACTER_ATTRIBUTES;
  /** Windows.Win32.System.Console.SMALL_RECT */
  srWindow: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Console.COORD */
  dwMaximumWindowSize: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wPopupAttributes: number;
  /** Windows.Win32.Foundation.BOOL */
  bFullscreenSupported: boolean;
  /** array */
  ColorTable: Deno.PointerValue | null;
}

export const sizeofCONSOLE_SCREEN_BUFFER_INFOEX = 64;

export function allocCONSOLE_SCREEN_BUFFER_INFOEX(data?: Partial<CONSOLE_SCREEN_BUFFER_INFOEX>): Uint8Array {
  const buf = new Uint8Array(sizeofCONSOLE_SCREEN_BUFFER_INFOEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.dwSize !== undefined) view.setBigUint64(8, data.dwSize === null ? 0n : BigInt(util.toPointer(data.dwSize)), true);
  // 0x10: pointer
  if (data?.dwCursorPosition !== undefined) view.setBigUint64(16, data.dwCursorPosition === null ? 0n : BigInt(util.toPointer(data.dwCursorPosition)), true);
  // 0x18: u16
  if (data?.wAttributes !== undefined) view.setUint16(24, Number(data.wAttributes), true);
  // 0x1a: pad6
  // 0x20: pointer
  if (data?.srWindow !== undefined) view.setBigUint64(32, data.srWindow === null ? 0n : BigInt(util.toPointer(data.srWindow)), true);
  // 0x28: pointer
  if (data?.dwMaximumWindowSize !== undefined) view.setBigUint64(40, data.dwMaximumWindowSize === null ? 0n : BigInt(util.toPointer(data.dwMaximumWindowSize)), true);
  // 0x30: u16
  if (data?.wPopupAttributes !== undefined) view.setUint16(48, Number(data.wPopupAttributes), true);
  // 0x32: i32
  if (data?.bFullscreenSupported !== undefined) view.setInt32(50, Number(data.bFullscreenSupported), true);
  // 0x36: pad2
  // 0x38: pointer
  if (data?.ColorTable !== undefined) view.setBigUint64(56, data.ColorTable === null ? 0n : BigInt(util.toPointer(data.ColorTable)), true);
  return buf;
}

export class CONSOLE_SCREEN_BUFFER_INFOEXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get dwSize(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get dwCursorPosition(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u16
  get wAttributes(): number {
    return this.view.getUint16(24, true);
  }

  // 0x1a: pad6

  // 0x20: pointer
  get srWindow(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get dwMaximumWindowSize(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u16
  get wPopupAttributes(): number {
    return this.view.getUint16(48, true);
  }

  // 0x32: i32
  get bFullscreenSupported(): number {
    return this.view.getInt32(50, true);
  }

  // 0x36: pad2

  // 0x38: pointer
  get ColorTable(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set dwSize(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set dwCursorPosition(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u16
  set wAttributes(value: number) {
    this.view.setUint16(24, value, true);
  }

  // 0x1a: pad6

  // 0x20: pointer
  set srWindow(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set dwMaximumWindowSize(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: u16
  set wPopupAttributes(value: number) {
    this.view.setUint16(48, value, true);
  }

  // 0x32: i32
  set bFullscreenSupported(value: number) {
    this.view.setInt32(50, value, true);
  }

  // 0x36: pad2

  // 0x38: pointer
  set ColorTable(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Console.CONSOLE_FONT_INFOEX (size: 32)
 */
export interface CONSOLE_FONT_INFOEX {
  /** u32 */
  cbSize: number;
  /** u32 */
  nFont: number;
  /** Windows.Win32.System.Console.COORD */
  dwFontSize: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  FontFamily: number;
  /** u32 */
  FontWeight: number;
  /** array */
  FaceName: Deno.PointerValue | null;
}

export const sizeofCONSOLE_FONT_INFOEX = 32;

export function allocCONSOLE_FONT_INFOEX(data?: Partial<CONSOLE_FONT_INFOEX>): Uint8Array {
  const buf = new Uint8Array(sizeofCONSOLE_FONT_INFOEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.nFont !== undefined) view.setUint32(4, Number(data.nFont), true);
  // 0x08: pointer
  if (data?.dwFontSize !== undefined) view.setBigUint64(8, data.dwFontSize === null ? 0n : BigInt(util.toPointer(data.dwFontSize)), true);
  // 0x10: u32
  if (data?.FontFamily !== undefined) view.setUint32(16, Number(data.FontFamily), true);
  // 0x14: u32
  if (data?.FontWeight !== undefined) view.setUint32(20, Number(data.FontWeight), true);
  // 0x18: pointer
  if (data?.FaceName !== undefined) view.setBigUint64(24, data.FaceName === null ? 0n : BigInt(util.toPointer(data.FaceName)), true);
  return buf;
}

export class CONSOLE_FONT_INFOEXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get nFont(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get dwFontSize(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get FontFamily(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get FontWeight(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get FaceName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set nFont(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set dwFontSize(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set FontFamily(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set FontWeight(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set FaceName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Console.CONSOLE_SELECTION_INFO (size: 24)
 */
export interface CONSOLE_SELECTION_INFO {
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.System.Console.COORD */
  dwSelectionAnchor: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Console.SMALL_RECT */
  srSelection: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCONSOLE_SELECTION_INFO = 24;

export function allocCONSOLE_SELECTION_INFO(data?: Partial<CONSOLE_SELECTION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCONSOLE_SELECTION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.dwSelectionAnchor !== undefined) view.setBigUint64(8, data.dwSelectionAnchor === null ? 0n : BigInt(util.toPointer(data.dwSelectionAnchor)), true);
  // 0x10: pointer
  if (data?.srSelection !== undefined) view.setBigUint64(16, data.srSelection === null ? 0n : BigInt(util.toPointer(data.srSelection)), true);
  return buf;
}

export class CONSOLE_SELECTION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get dwSelectionAnchor(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get srSelection(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set dwSelectionAnchor(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set srSelection(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Console.CONSOLE_HISTORY_INFO (size: 16)
 */
export interface CONSOLE_HISTORY_INFO {
  /** u32 */
  cbSize: number;
  /** u32 */
  HistoryBufferSize: number;
  /** u32 */
  NumberOfHistoryBuffers: number;
  /** u32 */
  dwFlags: number;
}

export const sizeofCONSOLE_HISTORY_INFO = 16;

export function allocCONSOLE_HISTORY_INFO(data?: Partial<CONSOLE_HISTORY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCONSOLE_HISTORY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.HistoryBufferSize !== undefined) view.setUint32(4, Number(data.HistoryBufferSize), true);
  // 0x08: u32
  if (data?.NumberOfHistoryBuffers !== undefined) view.setUint32(8, Number(data.NumberOfHistoryBuffers), true);
  // 0x0c: u32
  if (data?.dwFlags !== undefined) view.setUint32(12, Number(data.dwFlags), true);
  return buf;
}

export class CONSOLE_HISTORY_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get HistoryBufferSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get NumberOfHistoryBuffers(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwFlags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set HistoryBufferSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set NumberOfHistoryBuffers(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwFlags(value: number) {
    this.view.setUint32(12, value, true);
  }
}

export type HANDLE = Deno.PointerValue;

export type HRESULT = number;

export type PSTR = Deno.PointerValue | Uint8Array | null;

export type PWSTR = Deno.PointerValue | Uint8Array | null;

export type HWND = Deno.PointerValue;

// Native Libraries

try {
  var libKERNEL32_dll = Deno.dlopen("KERNEL32.dll", {
    AllocConsole: {
      parameters: [],
      result: "i32",
    },
    FreeConsole: {
      parameters: [],
      result: "i32",
    },
    AttachConsole: {
      parameters: ["u32"],
      result: "i32",
    },
    GetConsoleCP: {
      parameters: [],
      result: "u32",
    },
    GetConsoleOutputCP: {
      parameters: [],
      result: "u32",
    },
    GetConsoleMode: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetConsoleMode: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    GetNumberOfConsoleInputEvents: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ReadConsoleInputA: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    ReadConsoleInputW: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    PeekConsoleInputA: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    PeekConsoleInputW: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    ReadConsoleA: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    ReadConsoleW: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    WriteConsoleA: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    WriteConsoleW: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    SetConsoleCtrlHandler: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    CreatePseudoConsole: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    ResizePseudoConsole: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    ClosePseudoConsole: {
      parameters: ["pointer"],
      result: "void",
    },
    FillConsoleOutputCharacterA: {
      parameters: ["pointer", "u8", "u32", "pointer", "pointer"],
      result: "i32",
    },
    FillConsoleOutputCharacterW: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    FillConsoleOutputAttribute: {
      parameters: ["pointer", "u16", "u32", "pointer", "pointer"],
      result: "i32",
    },
    GenerateConsoleCtrlEvent: {
      parameters: ["u32", "u32"],
      result: "i32",
    },
    CreateConsoleScreenBuffer: {
      parameters: ["u32", "u32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    SetConsoleActiveScreenBuffer: {
      parameters: ["pointer"],
      result: "i32",
    },
    FlushConsoleInputBuffer: {
      parameters: ["pointer"],
      result: "i32",
    },
    SetConsoleCP: {
      parameters: ["u32"],
      result: "i32",
    },
    SetConsoleOutputCP: {
      parameters: ["u32"],
      result: "i32",
    },
    GetConsoleCursorInfo: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetConsoleCursorInfo: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetConsoleScreenBufferInfo: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetConsoleScreenBufferInfoEx: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetConsoleScreenBufferInfoEx: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetConsoleScreenBufferSize: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetConsoleCursorPosition: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetLargestConsoleWindowSize: {
      parameters: ["pointer"],
      result: "pointer",
    },
    SetConsoleTextAttribute: {
      parameters: ["pointer", "u16"],
      result: "i32",
    },
    SetConsoleWindowInfo: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    WriteConsoleOutputCharacterA: {
      parameters: ["pointer", "buffer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    WriteConsoleOutputCharacterW: {
      parameters: ["pointer", "buffer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    WriteConsoleOutputAttribute: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    ReadConsoleOutputCharacterA: {
      parameters: ["pointer", "buffer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    ReadConsoleOutputCharacterW: {
      parameters: ["pointer", "buffer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    ReadConsoleOutputAttribute: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    WriteConsoleInputA: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    WriteConsoleInputW: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    ScrollConsoleScreenBufferA: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    ScrollConsoleScreenBufferW: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    WriteConsoleOutputA: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    WriteConsoleOutputW: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    ReadConsoleOutputA: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    ReadConsoleOutputW: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetConsoleTitleA: {
      parameters: ["buffer", "u32"],
      result: "u32",
    },
    GetConsoleTitleW: {
      parameters: ["buffer", "u32"],
      result: "u32",
    },
    GetConsoleOriginalTitleA: {
      parameters: ["buffer", "u32"],
      result: "u32",
    },
    GetConsoleOriginalTitleW: {
      parameters: ["buffer", "u32"],
      result: "u32",
    },
    SetConsoleTitleA: {
      parameters: ["buffer"],
      result: "i32",
    },
    SetConsoleTitleW: {
      parameters: ["buffer"],
      result: "i32",
    },
    GetNumberOfConsoleMouseButtons: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetConsoleFontSize: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    GetCurrentConsoleFont: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    GetCurrentConsoleFontEx: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    SetCurrentConsoleFontEx: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    GetConsoleSelectionInfo: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetConsoleHistoryInfo: {
      parameters: ["pointer"],
      result: "i32",
    },
    SetConsoleHistoryInfo: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetConsoleDisplayMode: {
      parameters: ["pointer"],
      result: "i32",
    },
    SetConsoleDisplayMode: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    GetConsoleWindow: {
      parameters: [],
      result: "pointer",
    },
    AddConsoleAliasA: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "i32",
    },
    AddConsoleAliasW: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "i32",
    },
    GetConsoleAliasA: {
      parameters: ["buffer", "buffer", "u32", "buffer"],
      result: "u32",
    },
    GetConsoleAliasW: {
      parameters: ["buffer", "buffer", "u32", "buffer"],
      result: "u32",
    },
    GetConsoleAliasesLengthA: {
      parameters: ["buffer"],
      result: "u32",
    },
    GetConsoleAliasesLengthW: {
      parameters: ["buffer"],
      result: "u32",
    },
    GetConsoleAliasExesLengthA: {
      parameters: [],
      result: "u32",
    },
    GetConsoleAliasExesLengthW: {
      parameters: [],
      result: "u32",
    },
    GetConsoleAliasesA: {
      parameters: ["buffer", "u32", "buffer"],
      result: "u32",
    },
    GetConsoleAliasesW: {
      parameters: ["buffer", "u32", "buffer"],
      result: "u32",
    },
    GetConsoleAliasExesA: {
      parameters: ["buffer", "u32"],
      result: "u32",
    },
    GetConsoleAliasExesW: {
      parameters: ["buffer", "u32"],
      result: "u32",
    },
    ExpungeConsoleCommandHistoryA: {
      parameters: ["buffer"],
      result: "void",
    },
    ExpungeConsoleCommandHistoryW: {
      parameters: ["buffer"],
      result: "void",
    },
    SetConsoleNumberOfCommandsA: {
      parameters: ["u32", "buffer"],
      result: "i32",
    },
    SetConsoleNumberOfCommandsW: {
      parameters: ["u32", "buffer"],
      result: "i32",
    },
    GetConsoleCommandHistoryLengthA: {
      parameters: ["buffer"],
      result: "u32",
    },
    GetConsoleCommandHistoryLengthW: {
      parameters: ["buffer"],
      result: "u32",
    },
    GetConsoleCommandHistoryA: {
      parameters: ["buffer", "u32", "buffer"],
      result: "u32",
    },
    GetConsoleCommandHistoryW: {
      parameters: ["buffer", "u32", "buffer"],
      result: "u32",
    },
    GetConsoleProcessList: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    GetStdHandle: {
      parameters: ["u32"],
      result: "pointer",
    },
    SetStdHandle: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    SetStdHandleEx: {
      parameters: ["u32", "pointer", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function AllocConsole(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.AllocConsole());
}

export function FreeConsole(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.FreeConsole());
}

export function AttachConsole(
  dwProcessId: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.AttachConsole(dwProcessId));
}

export function GetConsoleCP(): number /* u32 */ {
  return libKERNEL32_dll.GetConsoleCP();
}

export function GetConsoleOutputCP(): number /* u32 */ {
  return libKERNEL32_dll.GetConsoleOutputCP();
}

export function GetConsoleMode(
  hConsoleHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpMode: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetConsoleMode(util.toPointer(hConsoleHandle), util.toPointer(lpMode)));
}

export function SetConsoleMode(
  hConsoleHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwMode: CONSOLE_MODE /* Windows.Win32.System.Console.CONSOLE_MODE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetConsoleMode(util.toPointer(hConsoleHandle), dwMode));
}

export function GetNumberOfConsoleInputEvents(
  hConsoleInput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpNumberOfEvents: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetNumberOfConsoleInputEvents(util.toPointer(hConsoleInput), util.toPointer(lpNumberOfEvents)));
}

export function ReadConsoleInputA(
  hConsoleInput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  nLength: number /* u32 */,
  lpNumberOfEventsRead: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.ReadConsoleInputA(util.toPointer(hConsoleInput), util.toPointer(lpBuffer), nLength, util.toPointer(lpNumberOfEventsRead)));
}

export function ReadConsoleInputW(
  hConsoleInput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  nLength: number /* u32 */,
  lpNumberOfEventsRead: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.ReadConsoleInputW(util.toPointer(hConsoleInput), util.toPointer(lpBuffer), nLength, util.toPointer(lpNumberOfEventsRead)));
}

export function PeekConsoleInputA(
  hConsoleInput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  nLength: number /* u32 */,
  lpNumberOfEventsRead: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.PeekConsoleInputA(util.toPointer(hConsoleInput), util.toPointer(lpBuffer), nLength, util.toPointer(lpNumberOfEventsRead)));
}

export function PeekConsoleInputW(
  hConsoleInput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  nLength: number /* u32 */,
  lpNumberOfEventsRead: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.PeekConsoleInputW(util.toPointer(hConsoleInput), util.toPointer(lpBuffer), nLength, util.toPointer(lpNumberOfEventsRead)));
}

export function ReadConsoleA(
  hConsoleInput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  nNumberOfCharsToRead: number /* u32 */,
  lpNumberOfCharsRead: Deno.PointerValue | Uint8Array | null /* ptr */,
  pInputControl: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.ReadConsoleA(util.toPointer(hConsoleInput), util.toPointer(lpBuffer), nNumberOfCharsToRead, util.toPointer(lpNumberOfCharsRead), util.toPointer(pInputControl)));
}

export function ReadConsoleW(
  hConsoleInput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  nNumberOfCharsToRead: number /* u32 */,
  lpNumberOfCharsRead: Deno.PointerValue | Uint8Array | null /* ptr */,
  pInputControl: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.ReadConsoleW(util.toPointer(hConsoleInput), util.toPointer(lpBuffer), nNumberOfCharsToRead, util.toPointer(lpNumberOfCharsRead), util.toPointer(pInputControl)));
}

export function WriteConsoleA(
  hConsoleOutput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  nNumberOfCharsToWrite: number /* u32 */,
  lpNumberOfCharsWritten: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.WriteConsoleA(util.toPointer(hConsoleOutput), util.toPointer(lpBuffer), nNumberOfCharsToWrite, util.toPointer(lpNumberOfCharsWritten), util.toPointer(lpReserved)));
}

export function WriteConsoleW(
  hConsoleOutput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  nNumberOfCharsToWrite: number /* u32 */,
  lpNumberOfCharsWritten: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.WriteConsoleW(util.toPointer(hConsoleOutput), util.toPointer(lpBuffer), nNumberOfCharsToWrite, util.toPointer(lpNumberOfCharsWritten), util.toPointer(lpReserved)));
}

export function SetConsoleCtrlHandler(
  HandlerRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Console.PHANDLER_ROUTINE */,
  Add: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetConsoleCtrlHandler(util.toPointer(HandlerRoutine), util.boolToFfi(Add)));
}

export function CreatePseudoConsole(
  size: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Console.COORD */,
  hInput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  hOutput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwFlags: number /* u32 */,
  phPC: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libKERNEL32_dll.CreatePseudoConsole(util.toPointer(size), util.toPointer(hInput), util.toPointer(hOutput), dwFlags, util.toPointer(phPC)));
}

export function ResizePseudoConsole(
  hPC: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Console.HPCON */,
  size: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Console.COORD */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libKERNEL32_dll.ResizePseudoConsole(util.toPointer(hPC), util.toPointer(size)));
}

export function ClosePseudoConsole(
  hPC: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Console.HPCON */,
): void /* void */ {
  return libKERNEL32_dll.ClosePseudoConsole(util.toPointer(hPC));
}

export function FillConsoleOutputCharacterA(
  hConsoleOutput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  cCharacter: string | number /* Windows.Win32.Foundation.CHAR */,
  nLength: number /* u32 */,
  dwWriteCoord: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Console.COORD */,
  lpNumberOfCharsWritten: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.FillConsoleOutputCharacterA(util.toPointer(hConsoleOutput), util.charToFfi(cCharacter), nLength, util.toPointer(dwWriteCoord), util.toPointer(lpNumberOfCharsWritten)));
}

export function FillConsoleOutputCharacterW(
  hConsoleOutput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  cCharacter: Uint8Array | Deno.PointerValue | null /* char */,
  nLength: number /* u32 */,
  dwWriteCoord: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Console.COORD */,
  lpNumberOfCharsWritten: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.FillConsoleOutputCharacterW(util.toPointer(hConsoleOutput), util.toPointer(cCharacter), nLength, util.toPointer(dwWriteCoord), util.toPointer(lpNumberOfCharsWritten)));
}

export function FillConsoleOutputAttribute(
  hConsoleOutput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  wAttribute: number /* u16 */,
  nLength: number /* u32 */,
  dwWriteCoord: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Console.COORD */,
  lpNumberOfAttrsWritten: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.FillConsoleOutputAttribute(util.toPointer(hConsoleOutput), wAttribute, nLength, util.toPointer(dwWriteCoord), util.toPointer(lpNumberOfAttrsWritten)));
}

export function GenerateConsoleCtrlEvent(
  dwCtrlEvent: number /* u32 */,
  dwProcessGroupId: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GenerateConsoleCtrlEvent(dwCtrlEvent, dwProcessGroupId));
}

export function CreateConsoleScreenBuffer(
  dwDesiredAccess: number /* u32 */,
  dwShareMode: number /* u32 */,
  lpSecurityAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  lpScreenBufferData: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32_dll.CreateConsoleScreenBuffer(dwDesiredAccess, dwShareMode, util.toPointer(lpSecurityAttributes), dwFlags, util.toPointer(lpScreenBufferData)));
}

export function SetConsoleActiveScreenBuffer(
  hConsoleOutput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetConsoleActiveScreenBuffer(util.toPointer(hConsoleOutput)));
}

export function FlushConsoleInputBuffer(
  hConsoleInput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.FlushConsoleInputBuffer(util.toPointer(hConsoleInput)));
}

export function SetConsoleCP(
  wCodePageID: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetConsoleCP(wCodePageID));
}

export function SetConsoleOutputCP(
  wCodePageID: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetConsoleOutputCP(wCodePageID));
}

export function GetConsoleCursorInfo(
  hConsoleOutput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpConsoleCursorInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetConsoleCursorInfo(util.toPointer(hConsoleOutput), util.toPointer(lpConsoleCursorInfo)));
}

export function SetConsoleCursorInfo(
  hConsoleOutput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpConsoleCursorInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetConsoleCursorInfo(util.toPointer(hConsoleOutput), util.toPointer(lpConsoleCursorInfo)));
}

export function GetConsoleScreenBufferInfo(
  hConsoleOutput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpConsoleScreenBufferInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetConsoleScreenBufferInfo(util.toPointer(hConsoleOutput), util.toPointer(lpConsoleScreenBufferInfo)));
}

export function GetConsoleScreenBufferInfoEx(
  hConsoleOutput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpConsoleScreenBufferInfoEx: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetConsoleScreenBufferInfoEx(util.toPointer(hConsoleOutput), util.toPointer(lpConsoleScreenBufferInfoEx)));
}

export function SetConsoleScreenBufferInfoEx(
  hConsoleOutput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpConsoleScreenBufferInfoEx: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetConsoleScreenBufferInfoEx(util.toPointer(hConsoleOutput), util.toPointer(lpConsoleScreenBufferInfoEx)));
}

export function SetConsoleScreenBufferSize(
  hConsoleOutput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwSize: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Console.COORD */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetConsoleScreenBufferSize(util.toPointer(hConsoleOutput), util.toPointer(dwSize)));
}

export function SetConsoleCursorPosition(
  hConsoleOutput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwCursorPosition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Console.COORD */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetConsoleCursorPosition(util.toPointer(hConsoleOutput), util.toPointer(dwCursorPosition)));
}

export function GetLargestConsoleWindowSize(
  hConsoleOutput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): Deno.PointerValue | null /* Windows.Win32.System.Console.COORD */ {
  return util.pointerFromFfi(libKERNEL32_dll.GetLargestConsoleWindowSize(util.toPointer(hConsoleOutput)));
}

export function SetConsoleTextAttribute(
  hConsoleOutput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  wAttributes: CONSOLE_CHARACTER_ATTRIBUTES /* Windows.Win32.System.Console.CONSOLE_CHARACTER_ATTRIBUTES */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetConsoleTextAttribute(util.toPointer(hConsoleOutput), wAttributes));
}

export function SetConsoleWindowInfo(
  hConsoleOutput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  bAbsolute: boolean /* Windows.Win32.Foundation.BOOL */,
  lpConsoleWindow: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetConsoleWindowInfo(util.toPointer(hConsoleOutput), util.boolToFfi(bAbsolute), util.toPointer(lpConsoleWindow)));
}

export function WriteConsoleOutputCharacterA(
  hConsoleOutput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpCharacter: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nLength: number /* u32 */,
  dwWriteCoord: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Console.COORD */,
  lpNumberOfCharsWritten: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.WriteConsoleOutputCharacterA(util.toPointer(hConsoleOutput), util.pstrToFfi(lpCharacter), nLength, util.toPointer(dwWriteCoord), util.toPointer(lpNumberOfCharsWritten)));
}

export function WriteConsoleOutputCharacterW(
  hConsoleOutput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpCharacter: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nLength: number /* u32 */,
  dwWriteCoord: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Console.COORD */,
  lpNumberOfCharsWritten: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.WriteConsoleOutputCharacterW(util.toPointer(hConsoleOutput), util.pwstrToFfi(lpCharacter), nLength, util.toPointer(dwWriteCoord), util.toPointer(lpNumberOfCharsWritten)));
}

export function WriteConsoleOutputAttribute(
  hConsoleOutput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpAttribute: Deno.PointerValue | Uint8Array | null /* ptr */,
  nLength: number /* u32 */,
  dwWriteCoord: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Console.COORD */,
  lpNumberOfAttrsWritten: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.WriteConsoleOutputAttribute(util.toPointer(hConsoleOutput), util.toPointer(lpAttribute), nLength, util.toPointer(dwWriteCoord), util.toPointer(lpNumberOfAttrsWritten)));
}

export function ReadConsoleOutputCharacterA(
  hConsoleOutput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpCharacter: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nLength: number /* u32 */,
  dwReadCoord: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Console.COORD */,
  lpNumberOfCharsRead: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.ReadConsoleOutputCharacterA(util.toPointer(hConsoleOutput), util.pstrToFfi(lpCharacter), nLength, util.toPointer(dwReadCoord), util.toPointer(lpNumberOfCharsRead)));
}

export function ReadConsoleOutputCharacterW(
  hConsoleOutput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpCharacter: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nLength: number /* u32 */,
  dwReadCoord: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Console.COORD */,
  lpNumberOfCharsRead: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.ReadConsoleOutputCharacterW(util.toPointer(hConsoleOutput), util.pwstrToFfi(lpCharacter), nLength, util.toPointer(dwReadCoord), util.toPointer(lpNumberOfCharsRead)));
}

export function ReadConsoleOutputAttribute(
  hConsoleOutput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpAttribute: Deno.PointerValue | Uint8Array | null /* ptr */,
  nLength: number /* u32 */,
  dwReadCoord: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Console.COORD */,
  lpNumberOfAttrsRead: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.ReadConsoleOutputAttribute(util.toPointer(hConsoleOutput), util.toPointer(lpAttribute), nLength, util.toPointer(dwReadCoord), util.toPointer(lpNumberOfAttrsRead)));
}

export function WriteConsoleInputA(
  hConsoleInput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  nLength: number /* u32 */,
  lpNumberOfEventsWritten: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.WriteConsoleInputA(util.toPointer(hConsoleInput), util.toPointer(lpBuffer), nLength, util.toPointer(lpNumberOfEventsWritten)));
}

export function WriteConsoleInputW(
  hConsoleInput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  nLength: number /* u32 */,
  lpNumberOfEventsWritten: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.WriteConsoleInputW(util.toPointer(hConsoleInput), util.toPointer(lpBuffer), nLength, util.toPointer(lpNumberOfEventsWritten)));
}

export function ScrollConsoleScreenBufferA(
  hConsoleOutput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpScrollRectangle: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpClipRectangle: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwDestinationOrigin: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Console.COORD */,
  lpFill: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.ScrollConsoleScreenBufferA(util.toPointer(hConsoleOutput), util.toPointer(lpScrollRectangle), util.toPointer(lpClipRectangle), util.toPointer(dwDestinationOrigin), util.toPointer(lpFill)));
}

export function ScrollConsoleScreenBufferW(
  hConsoleOutput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpScrollRectangle: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpClipRectangle: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwDestinationOrigin: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Console.COORD */,
  lpFill: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.ScrollConsoleScreenBufferW(util.toPointer(hConsoleOutput), util.toPointer(lpScrollRectangle), util.toPointer(lpClipRectangle), util.toPointer(dwDestinationOrigin), util.toPointer(lpFill)));
}

export function WriteConsoleOutputA(
  hConsoleOutput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwBufferSize: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Console.COORD */,
  dwBufferCoord: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Console.COORD */,
  lpWriteRegion: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.WriteConsoleOutputA(util.toPointer(hConsoleOutput), util.toPointer(lpBuffer), util.toPointer(dwBufferSize), util.toPointer(dwBufferCoord), util.toPointer(lpWriteRegion)));
}

export function WriteConsoleOutputW(
  hConsoleOutput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwBufferSize: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Console.COORD */,
  dwBufferCoord: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Console.COORD */,
  lpWriteRegion: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.WriteConsoleOutputW(util.toPointer(hConsoleOutput), util.toPointer(lpBuffer), util.toPointer(dwBufferSize), util.toPointer(dwBufferCoord), util.toPointer(lpWriteRegion)));
}

export function ReadConsoleOutputA(
  hConsoleOutput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwBufferSize: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Console.COORD */,
  dwBufferCoord: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Console.COORD */,
  lpReadRegion: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.ReadConsoleOutputA(util.toPointer(hConsoleOutput), util.toPointer(lpBuffer), util.toPointer(dwBufferSize), util.toPointer(dwBufferCoord), util.toPointer(lpReadRegion)));
}

export function ReadConsoleOutputW(
  hConsoleOutput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwBufferSize: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Console.COORD */,
  dwBufferCoord: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Console.COORD */,
  lpReadRegion: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.ReadConsoleOutputW(util.toPointer(hConsoleOutput), util.toPointer(lpBuffer), util.toPointer(dwBufferSize), util.toPointer(dwBufferCoord), util.toPointer(lpReadRegion)));
}

export function GetConsoleTitleA(
  lpConsoleTitle: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.GetConsoleTitleA(util.pstrToFfi(lpConsoleTitle), nSize);
}

export function GetConsoleTitleW(
  lpConsoleTitle: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.GetConsoleTitleW(util.pwstrToFfi(lpConsoleTitle), nSize);
}

export function GetConsoleOriginalTitleA(
  lpConsoleTitle: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.GetConsoleOriginalTitleA(util.pstrToFfi(lpConsoleTitle), nSize);
}

export function GetConsoleOriginalTitleW(
  lpConsoleTitle: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.GetConsoleOriginalTitleW(util.pwstrToFfi(lpConsoleTitle), nSize);
}

export function SetConsoleTitleA(
  lpConsoleTitle: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetConsoleTitleA(util.pstrToFfi(lpConsoleTitle)));
}

export function SetConsoleTitleW(
  lpConsoleTitle: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetConsoleTitleW(util.pwstrToFfi(lpConsoleTitle)));
}

export function GetNumberOfConsoleMouseButtons(
  lpNumberOfMouseButtons: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetNumberOfConsoleMouseButtons(util.toPointer(lpNumberOfMouseButtons)));
}

export function GetConsoleFontSize(
  hConsoleOutput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  nFont: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.System.Console.COORD */ {
  return util.pointerFromFfi(libKERNEL32_dll.GetConsoleFontSize(util.toPointer(hConsoleOutput), nFont));
}

export function GetCurrentConsoleFont(
  hConsoleOutput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  bMaximumWindow: boolean /* Windows.Win32.Foundation.BOOL */,
  lpConsoleCurrentFont: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetCurrentConsoleFont(util.toPointer(hConsoleOutput), util.boolToFfi(bMaximumWindow), util.toPointer(lpConsoleCurrentFont)));
}

export function GetCurrentConsoleFontEx(
  hConsoleOutput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  bMaximumWindow: boolean /* Windows.Win32.Foundation.BOOL */,
  lpConsoleCurrentFontEx: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetCurrentConsoleFontEx(util.toPointer(hConsoleOutput), util.boolToFfi(bMaximumWindow), util.toPointer(lpConsoleCurrentFontEx)));
}

export function SetCurrentConsoleFontEx(
  hConsoleOutput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  bMaximumWindow: boolean /* Windows.Win32.Foundation.BOOL */,
  lpConsoleCurrentFontEx: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetCurrentConsoleFontEx(util.toPointer(hConsoleOutput), util.boolToFfi(bMaximumWindow), util.toPointer(lpConsoleCurrentFontEx)));
}

export function GetConsoleSelectionInfo(
  lpConsoleSelectionInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetConsoleSelectionInfo(util.toPointer(lpConsoleSelectionInfo)));
}

export function GetConsoleHistoryInfo(
  lpConsoleHistoryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetConsoleHistoryInfo(util.toPointer(lpConsoleHistoryInfo)));
}

export function SetConsoleHistoryInfo(
  lpConsoleHistoryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetConsoleHistoryInfo(util.toPointer(lpConsoleHistoryInfo)));
}

export function GetConsoleDisplayMode(
  lpModeFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetConsoleDisplayMode(util.toPointer(lpModeFlags)));
}

export function SetConsoleDisplayMode(
  hConsoleOutput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwFlags: number /* u32 */,
  lpNewScreenBufferDimensions: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetConsoleDisplayMode(util.toPointer(hConsoleOutput), dwFlags, util.toPointer(lpNewScreenBufferDimensions)));
}

export function GetConsoleWindow(): Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */ {
  return util.hwndFromFfi(libKERNEL32_dll.GetConsoleWindow());
}

export function AddConsoleAliasA(
  Source: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Target: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ExeName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.AddConsoleAliasA(util.pstrToFfi(Source), util.pstrToFfi(Target), util.pstrToFfi(ExeName)));
}

export function AddConsoleAliasW(
  Source: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Target: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ExeName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.AddConsoleAliasW(util.pwstrToFfi(Source), util.pwstrToFfi(Target), util.pwstrToFfi(ExeName)));
}

export function GetConsoleAliasA(
  Source: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  TargetBuffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  TargetBufferLength: number /* u32 */,
  ExeName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libKERNEL32_dll.GetConsoleAliasA(util.pstrToFfi(Source), util.pstrToFfi(TargetBuffer), TargetBufferLength, util.pstrToFfi(ExeName));
}

export function GetConsoleAliasW(
  Source: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  TargetBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  TargetBufferLength: number /* u32 */,
  ExeName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libKERNEL32_dll.GetConsoleAliasW(util.pwstrToFfi(Source), util.pwstrToFfi(TargetBuffer), TargetBufferLength, util.pwstrToFfi(ExeName));
}

export function GetConsoleAliasesLengthA(
  ExeName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libKERNEL32_dll.GetConsoleAliasesLengthA(util.pstrToFfi(ExeName));
}

export function GetConsoleAliasesLengthW(
  ExeName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libKERNEL32_dll.GetConsoleAliasesLengthW(util.pwstrToFfi(ExeName));
}

export function GetConsoleAliasExesLengthA(): number /* u32 */ {
  return libKERNEL32_dll.GetConsoleAliasExesLengthA();
}

export function GetConsoleAliasExesLengthW(): number /* u32 */ {
  return libKERNEL32_dll.GetConsoleAliasExesLengthW();
}

export function GetConsoleAliasesA(
  AliasBuffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  AliasBufferLength: number /* u32 */,
  ExeName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libKERNEL32_dll.GetConsoleAliasesA(util.pstrToFfi(AliasBuffer), AliasBufferLength, util.pstrToFfi(ExeName));
}

export function GetConsoleAliasesW(
  AliasBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  AliasBufferLength: number /* u32 */,
  ExeName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libKERNEL32_dll.GetConsoleAliasesW(util.pwstrToFfi(AliasBuffer), AliasBufferLength, util.pwstrToFfi(ExeName));
}

export function GetConsoleAliasExesA(
  ExeNameBuffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ExeNameBufferLength: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.GetConsoleAliasExesA(util.pstrToFfi(ExeNameBuffer), ExeNameBufferLength);
}

export function GetConsoleAliasExesW(
  ExeNameBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ExeNameBufferLength: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.GetConsoleAliasExesW(util.pwstrToFfi(ExeNameBuffer), ExeNameBufferLength);
}

export function ExpungeConsoleCommandHistoryA(
  ExeName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): void /* void */ {
  return libKERNEL32_dll.ExpungeConsoleCommandHistoryA(util.pstrToFfi(ExeName));
}

export function ExpungeConsoleCommandHistoryW(
  ExeName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): void /* void */ {
  return libKERNEL32_dll.ExpungeConsoleCommandHistoryW(util.pwstrToFfi(ExeName));
}

export function SetConsoleNumberOfCommandsA(
  Number: number /* u32 */,
  ExeName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetConsoleNumberOfCommandsA(Number, util.pstrToFfi(ExeName)));
}

export function SetConsoleNumberOfCommandsW(
  Number: number /* u32 */,
  ExeName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetConsoleNumberOfCommandsW(Number, util.pwstrToFfi(ExeName)));
}

export function GetConsoleCommandHistoryLengthA(
  ExeName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libKERNEL32_dll.GetConsoleCommandHistoryLengthA(util.pstrToFfi(ExeName));
}

export function GetConsoleCommandHistoryLengthW(
  ExeName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libKERNEL32_dll.GetConsoleCommandHistoryLengthW(util.pwstrToFfi(ExeName));
}

export function GetConsoleCommandHistoryA(
  Commands: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  CommandBufferLength: number /* u32 */,
  ExeName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libKERNEL32_dll.GetConsoleCommandHistoryA(util.pstrToFfi(Commands), CommandBufferLength, util.pstrToFfi(ExeName));
}

export function GetConsoleCommandHistoryW(
  Commands: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  CommandBufferLength: number /* u32 */,
  ExeName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libKERNEL32_dll.GetConsoleCommandHistoryW(util.pwstrToFfi(Commands), CommandBufferLength, util.pwstrToFfi(ExeName));
}

export function GetConsoleProcessList(
  lpdwProcessList: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwProcessCount: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.GetConsoleProcessList(util.toPointer(lpdwProcessList), dwProcessCount);
}

export function GetStdHandle(
  nStdHandle: STD_HANDLE /* Windows.Win32.System.Console.STD_HANDLE */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32_dll.GetStdHandle(nStdHandle));
}

export function SetStdHandle(
  nStdHandle: STD_HANDLE /* Windows.Win32.System.Console.STD_HANDLE */,
  hHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetStdHandle(nStdHandle, util.toPointer(hHandle)));
}

export function SetStdHandleEx(
  nStdHandle: STD_HANDLE /* Windows.Win32.System.Console.STD_HANDLE */,
  hHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  phPrevValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetStdHandleEx(nStdHandle, util.toPointer(hHandle), util.toPointer(phPrevValue)));
}

