/// Auto-generated by Deno Win32: Windows.Win32.System.Environment.Apis

import * as util from "../../util.ts";

// Enums
export type ENCLAVE_SEALING_IDENTITY_POLICY = number;

// Constants
export const ENCLAVE_RUNTIME_POLICY_ALLOW_FULL_DEBUG = 1;
export const ENCLAVE_RUNTIME_POLICY_ALLOW_DYNAMIC_DEBUG = 2;
export const ENCLAVE_UNSEAL_FLAG_STALE_KEY = 1;
export const ENCLAVE_FLAG_FULL_DEBUG_ENABLED = 1;
export const ENCLAVE_FLAG_DYNAMIC_DEBUG_ENABLED = 2;
export const ENCLAVE_FLAG_DYNAMIC_DEBUG_ACTIVE = 4;
export const VBS_ENCLAVE_REPORT_PKG_HEADER_VERSION_CURRENT = 1;
export const VBS_ENCLAVE_REPORT_SIGNATURE_SCHEME_SHA256_RSA_PSS_SHA256 = 1;
export const VBS_ENCLAVE_REPORT_VERSION_CURRENT = 1;
export const ENCLAVE_REPORT_DATA_LENGTH = 64;
export const VBS_ENCLAVE_VARDATA_INVALID = 0;
export const VBS_ENCLAVE_VARDATA_MODULE = 1;
export const ENCLAVE_VBS_BASIC_KEY_FLAG_MEASUREMENT = 1;
export const ENCLAVE_VBS_BASIC_KEY_FLAG_FAMILY_ID = 2;
export const ENCLAVE_VBS_BASIC_KEY_FLAG_IMAGE_ID = 4;
export const ENCLAVE_VBS_BASIC_KEY_FLAG_DEBUG_KEY = 8;
export const ENCLAVE_IDENTITY_POLICY_SEAL_INVALID = 0;
export const ENCLAVE_IDENTITY_POLICY_SEAL_EXACT_CODE = 1;
export const ENCLAVE_IDENTITY_POLICY_SEAL_SAME_PRIMARY_CODE = 2;
export const ENCLAVE_IDENTITY_POLICY_SEAL_SAME_IMAGE = 3;
export const ENCLAVE_IDENTITY_POLICY_SEAL_SAME_FAMILY = 4;
export const ENCLAVE_IDENTITY_POLICY_SEAL_SAME_AUTHOR = 5;

// Structs

/**
 * Windows.Win32.System.Environment.ENCLAVE_IDENTITY (size: 64)
 */
export interface ENCLAVE_IDENTITY {
  /** array */
  OwnerId: Deno.PointerValue | null;
  /** array */
  UniqueId: Deno.PointerValue | null;
  /** array */
  AuthorId: Deno.PointerValue | null;
  /** array */
  FamilyId: Deno.PointerValue | null;
  /** array */
  ImageId: Deno.PointerValue | null;
  /** u32 */
  EnclaveSvn: number;
  /** u32 */
  SecureKernelSvn: number;
  /** u32 */
  PlatformSvn: number;
  /** u32 */
  Flags: number;
  /** u32 */
  SigningLevel: number;
  /** u32 */
  EnclaveType: number;
}

export const sizeofENCLAVE_IDENTITY = 64;

export function allocENCLAVE_IDENTITY(data?: Partial<ENCLAVE_IDENTITY>): Uint8Array {
  const buf = new Uint8Array(sizeofENCLAVE_IDENTITY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.OwnerId !== undefined) view.setBigUint64(0, data.OwnerId === null ? 0n : BigInt(util.toPointer(data.OwnerId)), true);
  // 0x08: pointer
  if (data?.UniqueId !== undefined) view.setBigUint64(8, data.UniqueId === null ? 0n : BigInt(util.toPointer(data.UniqueId)), true);
  // 0x10: pointer
  if (data?.AuthorId !== undefined) view.setBigUint64(16, data.AuthorId === null ? 0n : BigInt(util.toPointer(data.AuthorId)), true);
  // 0x18: pointer
  if (data?.FamilyId !== undefined) view.setBigUint64(24, data.FamilyId === null ? 0n : BigInt(util.toPointer(data.FamilyId)), true);
  // 0x20: pointer
  if (data?.ImageId !== undefined) view.setBigUint64(32, data.ImageId === null ? 0n : BigInt(util.toPointer(data.ImageId)), true);
  // 0x28: u32
  if (data?.EnclaveSvn !== undefined) view.setUint32(40, Number(data.EnclaveSvn), true);
  // 0x2c: u32
  if (data?.SecureKernelSvn !== undefined) view.setUint32(44, Number(data.SecureKernelSvn), true);
  // 0x30: u32
  if (data?.PlatformSvn !== undefined) view.setUint32(48, Number(data.PlatformSvn), true);
  // 0x34: u32
  if (data?.Flags !== undefined) view.setUint32(52, Number(data.Flags), true);
  // 0x38: u32
  if (data?.SigningLevel !== undefined) view.setUint32(56, Number(data.SigningLevel), true);
  // 0x3c: u32
  if (data?.EnclaveType !== undefined) view.setUint32(60, Number(data.EnclaveType), true);
  return buf;
}

/**
 * Windows.Win32.System.Environment.VBS_ENCLAVE_REPORT_PKG_HEADER (size: 24)
 */
export interface VBS_ENCLAVE_REPORT_PKG_HEADER {
  /** u32 */
  PackageSize: number;
  /** u32 */
  Version: number;
  /** u32 */
  SignatureScheme: number;
  /** u32 */
  SignedStatementSize: number;
  /** u32 */
  SignatureSize: number;
  /** u32 */
  Reserved: number;
}

export const sizeofVBS_ENCLAVE_REPORT_PKG_HEADER = 24;

export function allocVBS_ENCLAVE_REPORT_PKG_HEADER(data?: Partial<VBS_ENCLAVE_REPORT_PKG_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofVBS_ENCLAVE_REPORT_PKG_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PackageSize !== undefined) view.setUint32(0, Number(data.PackageSize), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u32
  if (data?.SignatureScheme !== undefined) view.setUint32(8, Number(data.SignatureScheme), true);
  // 0x0c: u32
  if (data?.SignedStatementSize !== undefined) view.setUint32(12, Number(data.SignedStatementSize), true);
  // 0x10: u32
  if (data?.SignatureSize !== undefined) view.setUint32(16, Number(data.SignatureSize), true);
  // 0x14: u32
  if (data?.Reserved !== undefined) view.setUint32(20, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.System.Environment.VBS_ENCLAVE_REPORT (size: 24)
 */
export interface VBS_ENCLAVE_REPORT {
  /** u32 */
  ReportSize: number;
  /** u32 */
  ReportVersion: number;
  /** array */
  EnclaveData: Deno.PointerValue | null;
  /** Windows.Win32.System.Environment.ENCLAVE_IDENTITY */
  EnclaveIdentity: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVBS_ENCLAVE_REPORT = 24;

export function allocVBS_ENCLAVE_REPORT(data?: Partial<VBS_ENCLAVE_REPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofVBS_ENCLAVE_REPORT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ReportSize !== undefined) view.setUint32(0, Number(data.ReportSize), true);
  // 0x04: u32
  if (data?.ReportVersion !== undefined) view.setUint32(4, Number(data.ReportVersion), true);
  // 0x08: pointer
  if (data?.EnclaveData !== undefined) view.setBigUint64(8, data.EnclaveData === null ? 0n : BigInt(util.toPointer(data.EnclaveData)), true);
  // 0x10: pointer
  if (data?.EnclaveIdentity !== undefined) view.setBigUint64(16, data.EnclaveIdentity === null ? 0n : BigInt(util.toPointer(data.EnclaveIdentity)), true);
  return buf;
}

/**
 * Windows.Win32.System.Environment.VBS_ENCLAVE_REPORT_VARDATA_HEADER (size: 8)
 */
export interface VBS_ENCLAVE_REPORT_VARDATA_HEADER {
  /** u32 */
  DataType: number;
  /** u32 */
  Size: number;
}

export const sizeofVBS_ENCLAVE_REPORT_VARDATA_HEADER = 8;

export function allocVBS_ENCLAVE_REPORT_VARDATA_HEADER(data?: Partial<VBS_ENCLAVE_REPORT_VARDATA_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofVBS_ENCLAVE_REPORT_VARDATA_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DataType !== undefined) view.setUint32(0, Number(data.DataType), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  return buf;
}

/**
 * Windows.Win32.System.Environment.VBS_ENCLAVE_REPORT_MODULE (size: 56)
 */
export interface VBS_ENCLAVE_REPORT_MODULE {
  /** Windows.Win32.System.Environment.VBS_ENCLAVE_REPORT_VARDATA_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** array */
  UniqueId: Deno.PointerValue | null;
  /** array */
  AuthorId: Deno.PointerValue | null;
  /** array */
  FamilyId: Deno.PointerValue | null;
  /** array */
  ImageId: Deno.PointerValue | null;
  /** u32 */
  Svn: number;
  /** array */
  ModuleName: Deno.PointerValue | null;
}

export const sizeofVBS_ENCLAVE_REPORT_MODULE = 56;

export function allocVBS_ENCLAVE_REPORT_MODULE(data?: Partial<VBS_ENCLAVE_REPORT_MODULE>): Uint8Array {
  const buf = new Uint8Array(sizeofVBS_ENCLAVE_REPORT_MODULE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: pointer
  if (data?.UniqueId !== undefined) view.setBigUint64(8, data.UniqueId === null ? 0n : BigInt(util.toPointer(data.UniqueId)), true);
  // 0x10: pointer
  if (data?.AuthorId !== undefined) view.setBigUint64(16, data.AuthorId === null ? 0n : BigInt(util.toPointer(data.AuthorId)), true);
  // 0x18: pointer
  if (data?.FamilyId !== undefined) view.setBigUint64(24, data.FamilyId === null ? 0n : BigInt(util.toPointer(data.FamilyId)), true);
  // 0x20: pointer
  if (data?.ImageId !== undefined) view.setBigUint64(32, data.ImageId === null ? 0n : BigInt(util.toPointer(data.ImageId)), true);
  // 0x28: u32
  if (data?.Svn !== undefined) view.setUint32(40, Number(data.Svn), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.ModuleName !== undefined) view.setBigUint64(48, data.ModuleName === null ? 0n : BigInt(util.toPointer(data.ModuleName)), true);
  return buf;
}

/**
 * Windows.Win32.System.Environment.ENCLAVE_INFORMATION (size: 32)
 */
export interface ENCLAVE_INFORMATION {
  /** u32 */
  EnclaveType: number;
  /** u32 */
  Reserved: number;
  /** ptr */
  BaseAddress: Deno.PointerValue | Uint8Array | null;
  /** usize */
  Size: Deno.PointerValue;
  /** Windows.Win32.System.Environment.ENCLAVE_IDENTITY */
  Identity: Uint8Array | Deno.PointerValue | null;
}

export const sizeofENCLAVE_INFORMATION = 32;

export function allocENCLAVE_INFORMATION(data?: Partial<ENCLAVE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofENCLAVE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.EnclaveType !== undefined) view.setUint32(0, Number(data.EnclaveType), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  // 0x08: pointer
  if (data?.BaseAddress !== undefined) view.setBigUint64(8, data.BaseAddress === null ? 0n : BigInt(util.toPointer(data.BaseAddress)), true);
  // 0x10: usize
  if (data?.Size !== undefined) view.setBigUint64(16, BigInt(data.Size), true);
  // 0x18: pointer
  if (data?.Identity !== undefined) view.setBigUint64(24, data.Identity === null ? 0n : BigInt(util.toPointer(data.Identity)), true);
  return buf;
}

/**
 * Windows.Win32.System.Environment.VBS_BASIC_ENCLAVE_THREAD_DESCRIPTOR32 (size: 32)
 */
export interface VBS_BASIC_ENCLAVE_THREAD_DESCRIPTOR32 {
  /** array */
  ThreadContext: Deno.PointerValue | null;
  /** u32 */
  EntryPoint: number;
  /** u32 */
  StackPointer: number;
  /** u32 */
  ExceptionEntryPoint: number;
  /** u32 */
  ExceptionStack: number;
  /** u32 */
  ExceptionActive: number;
}

export const sizeofVBS_BASIC_ENCLAVE_THREAD_DESCRIPTOR32 = 32;

export function allocVBS_BASIC_ENCLAVE_THREAD_DESCRIPTOR32(data?: Partial<VBS_BASIC_ENCLAVE_THREAD_DESCRIPTOR32>): Uint8Array {
  const buf = new Uint8Array(sizeofVBS_BASIC_ENCLAVE_THREAD_DESCRIPTOR32);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ThreadContext !== undefined) view.setBigUint64(0, data.ThreadContext === null ? 0n : BigInt(util.toPointer(data.ThreadContext)), true);
  // 0x08: u32
  if (data?.EntryPoint !== undefined) view.setUint32(8, Number(data.EntryPoint), true);
  // 0x0c: u32
  if (data?.StackPointer !== undefined) view.setUint32(12, Number(data.StackPointer), true);
  // 0x10: u32
  if (data?.ExceptionEntryPoint !== undefined) view.setUint32(16, Number(data.ExceptionEntryPoint), true);
  // 0x14: u32
  if (data?.ExceptionStack !== undefined) view.setUint32(20, Number(data.ExceptionStack), true);
  // 0x18: u32
  if (data?.ExceptionActive !== undefined) view.setUint32(24, Number(data.ExceptionActive), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Environment.VBS_BASIC_ENCLAVE_THREAD_DESCRIPTOR64 (size: 48)
 */
export interface VBS_BASIC_ENCLAVE_THREAD_DESCRIPTOR64 {
  /** array */
  ThreadContext: Deno.PointerValue | null;
  /** u64 */
  EntryPoint: Deno.PointerValue;
  /** u64 */
  StackPointer: Deno.PointerValue;
  /** u64 */
  ExceptionEntryPoint: Deno.PointerValue;
  /** u64 */
  ExceptionStack: Deno.PointerValue;
  /** u32 */
  ExceptionActive: number;
}

export const sizeofVBS_BASIC_ENCLAVE_THREAD_DESCRIPTOR64 = 48;

export function allocVBS_BASIC_ENCLAVE_THREAD_DESCRIPTOR64(data?: Partial<VBS_BASIC_ENCLAVE_THREAD_DESCRIPTOR64>): Uint8Array {
  const buf = new Uint8Array(sizeofVBS_BASIC_ENCLAVE_THREAD_DESCRIPTOR64);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ThreadContext !== undefined) view.setBigUint64(0, data.ThreadContext === null ? 0n : BigInt(util.toPointer(data.ThreadContext)), true);
  // 0x08: u64
  if (data?.EntryPoint !== undefined) view.setBigUint64(8, BigInt(data.EntryPoint), true);
  // 0x10: u64
  if (data?.StackPointer !== undefined) view.setBigUint64(16, BigInt(data.StackPointer), true);
  // 0x18: u64
  if (data?.ExceptionEntryPoint !== undefined) view.setBigUint64(24, BigInt(data.ExceptionEntryPoint), true);
  // 0x20: u64
  if (data?.ExceptionStack !== undefined) view.setBigUint64(32, BigInt(data.ExceptionStack), true);
  // 0x28: u32
  if (data?.ExceptionActive !== undefined) view.setUint32(40, Number(data.ExceptionActive), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Environment.VBS_BASIC_ENCLAVE_EXCEPTION_AMD64 (size: 56)
 */
export interface VBS_BASIC_ENCLAVE_EXCEPTION_AMD64 {
  /** u32 */
  ExceptionCode: number;
  /** u32 */
  NumberParameters: number;
  /** array */
  ExceptionInformation: Deno.PointerValue | null;
  /** usize */
  ExceptionRAX: Deno.PointerValue;
  /** usize */
  ExceptionRCX: Deno.PointerValue;
  /** usize */
  ExceptionRIP: Deno.PointerValue;
  /** usize */
  ExceptionRFLAGS: Deno.PointerValue;
  /** usize */
  ExceptionRSP: Deno.PointerValue;
}

export const sizeofVBS_BASIC_ENCLAVE_EXCEPTION_AMD64 = 56;

export function allocVBS_BASIC_ENCLAVE_EXCEPTION_AMD64(data?: Partial<VBS_BASIC_ENCLAVE_EXCEPTION_AMD64>): Uint8Array {
  const buf = new Uint8Array(sizeofVBS_BASIC_ENCLAVE_EXCEPTION_AMD64);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ExceptionCode !== undefined) view.setUint32(0, Number(data.ExceptionCode), true);
  // 0x04: u32
  if (data?.NumberParameters !== undefined) view.setUint32(4, Number(data.NumberParameters), true);
  // 0x08: pointer
  if (data?.ExceptionInformation !== undefined) view.setBigUint64(8, data.ExceptionInformation === null ? 0n : BigInt(util.toPointer(data.ExceptionInformation)), true);
  // 0x10: usize
  if (data?.ExceptionRAX !== undefined) view.setBigUint64(16, BigInt(data.ExceptionRAX), true);
  // 0x18: usize
  if (data?.ExceptionRCX !== undefined) view.setBigUint64(24, BigInt(data.ExceptionRCX), true);
  // 0x20: usize
  if (data?.ExceptionRIP !== undefined) view.setBigUint64(32, BigInt(data.ExceptionRIP), true);
  // 0x28: usize
  if (data?.ExceptionRFLAGS !== undefined) view.setBigUint64(40, BigInt(data.ExceptionRFLAGS), true);
  // 0x30: usize
  if (data?.ExceptionRSP !== undefined) view.setBigUint64(48, BigInt(data.ExceptionRSP), true);
  return buf;
}

/**
 * Windows.Win32.System.Environment.ENCLAVE_VBS_BASIC_KEY_REQUEST (size: 24)
 */
export interface ENCLAVE_VBS_BASIC_KEY_REQUEST {
  /** u32 */
  RequestSize: number;
  /** u32 */
  Flags: number;
  /** u32 */
  EnclaveSVN: number;
  /** u32 */
  SystemKeyID: number;
  /** u32 */
  CurrentSystemKeyID: number;
}

export const sizeofENCLAVE_VBS_BASIC_KEY_REQUEST = 24;

export function allocENCLAVE_VBS_BASIC_KEY_REQUEST(data?: Partial<ENCLAVE_VBS_BASIC_KEY_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofENCLAVE_VBS_BASIC_KEY_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.RequestSize !== undefined) view.setUint32(0, Number(data.RequestSize), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.EnclaveSVN !== undefined) view.setUint32(8, Number(data.EnclaveSVN), true);
  // 0x0c: u32
  if (data?.SystemKeyID !== undefined) view.setUint32(12, Number(data.SystemKeyID), true);
  // 0x10: u32
  if (data?.CurrentSystemKeyID !== undefined) view.setUint32(16, Number(data.CurrentSystemKeyID), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.System.Environment.VBS_BASIC_ENCLAVE_SYSCALL_PAGE (size: 104)
 */
export interface VBS_BASIC_ENCLAVE_SYSCALL_PAGE {
  /** Windows.Win32.System.Environment.VBS_BASIC_ENCLAVE_BASIC_CALL_RETURN_FROM_ENCLAVE */
  ReturnFromEnclave: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Environment.VBS_BASIC_ENCLAVE_BASIC_CALL_RETURN_FROM_EXCEPTION */
  ReturnFromException: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Environment.VBS_BASIC_ENCLAVE_BASIC_CALL_TERMINATE_THREAD */
  TerminateThread: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Environment.VBS_BASIC_ENCLAVE_BASIC_CALL_INTERRUPT_THREAD */
  InterruptThread: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Environment.VBS_BASIC_ENCLAVE_BASIC_CALL_COMMIT_PAGES */
  CommitPages: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Environment.VBS_BASIC_ENCLAVE_BASIC_CALL_DECOMMIT_PAGES */
  DecommitPages: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Environment.VBS_BASIC_ENCLAVE_BASIC_CALL_PROTECT_PAGES */
  ProtectPages: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Environment.VBS_BASIC_ENCLAVE_BASIC_CALL_CREATE_THREAD */
  CreateThread: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Environment.VBS_BASIC_ENCLAVE_BASIC_CALL_GET_ENCLAVE_INFORMATION */
  GetEnclaveInformation: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Environment.VBS_BASIC_ENCLAVE_BASIC_CALL_GENERATE_KEY */
  GenerateKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Environment.VBS_BASIC_ENCLAVE_BASIC_CALL_GENERATE_REPORT */
  GenerateReport: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Environment.VBS_BASIC_ENCLAVE_BASIC_CALL_VERIFY_REPORT */
  VerifyReport: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Environment.VBS_BASIC_ENCLAVE_BASIC_CALL_GENERATE_RANDOM_DATA */
  GenerateRandomData: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVBS_BASIC_ENCLAVE_SYSCALL_PAGE = 104;

export function allocVBS_BASIC_ENCLAVE_SYSCALL_PAGE(data?: Partial<VBS_BASIC_ENCLAVE_SYSCALL_PAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofVBS_BASIC_ENCLAVE_SYSCALL_PAGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ReturnFromEnclave !== undefined) view.setBigUint64(0, data.ReturnFromEnclave === null ? 0n : BigInt(util.toPointer(data.ReturnFromEnclave)), true);
  // 0x08: pointer
  if (data?.ReturnFromException !== undefined) view.setBigUint64(8, data.ReturnFromException === null ? 0n : BigInt(util.toPointer(data.ReturnFromException)), true);
  // 0x10: pointer
  if (data?.TerminateThread !== undefined) view.setBigUint64(16, data.TerminateThread === null ? 0n : BigInt(util.toPointer(data.TerminateThread)), true);
  // 0x18: pointer
  if (data?.InterruptThread !== undefined) view.setBigUint64(24, data.InterruptThread === null ? 0n : BigInt(util.toPointer(data.InterruptThread)), true);
  // 0x20: pointer
  if (data?.CommitPages !== undefined) view.setBigUint64(32, data.CommitPages === null ? 0n : BigInt(util.toPointer(data.CommitPages)), true);
  // 0x28: pointer
  if (data?.DecommitPages !== undefined) view.setBigUint64(40, data.DecommitPages === null ? 0n : BigInt(util.toPointer(data.DecommitPages)), true);
  // 0x30: pointer
  if (data?.ProtectPages !== undefined) view.setBigUint64(48, data.ProtectPages === null ? 0n : BigInt(util.toPointer(data.ProtectPages)), true);
  // 0x38: pointer
  if (data?.CreateThread !== undefined) view.setBigUint64(56, data.CreateThread === null ? 0n : BigInt(util.toPointer(data.CreateThread)), true);
  // 0x40: pointer
  if (data?.GetEnclaveInformation !== undefined) view.setBigUint64(64, data.GetEnclaveInformation === null ? 0n : BigInt(util.toPointer(data.GetEnclaveInformation)), true);
  // 0x48: pointer
  if (data?.GenerateKey !== undefined) view.setBigUint64(72, data.GenerateKey === null ? 0n : BigInt(util.toPointer(data.GenerateKey)), true);
  // 0x50: pointer
  if (data?.GenerateReport !== undefined) view.setBigUint64(80, data.GenerateReport === null ? 0n : BigInt(util.toPointer(data.GenerateReport)), true);
  // 0x58: pointer
  if (data?.VerifyReport !== undefined) view.setBigUint64(88, data.VerifyReport === null ? 0n : BigInt(util.toPointer(data.VerifyReport)), true);
  // 0x60: pointer
  if (data?.GenerateRandomData !== undefined) view.setBigUint64(96, data.GenerateRandomData === null ? 0n : BigInt(util.toPointer(data.GenerateRandomData)), true);
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

export type BOOL = number;

export type PSTR = Deno.PointerValue | Uint8Array | null;

export type HANDLE = Deno.PointerValue;

export type HRESULT = number;

// Native Libraries

try {
  var libKERNEL32_dll = Deno.dlopen("KERNEL32.dll", {
    SetEnvironmentStringsW: {
      parameters: ["buffer"],
      result: "i32",
    },
    GetCommandLineA: {
      parameters: [],
      result: "buffer",
    },
    GetCommandLineW: {
      parameters: [],
      result: "buffer",
    },
    GetEnvironmentStrings: {
      parameters: [],
      result: "buffer",
    },
    GetEnvironmentStringsW: {
      parameters: [],
      result: "buffer",
    },
    FreeEnvironmentStringsA: {
      parameters: ["buffer"],
      result: "i32",
    },
    FreeEnvironmentStringsW: {
      parameters: ["buffer"],
      result: "i32",
    },
    GetEnvironmentVariableA: {
      parameters: ["buffer", "buffer", "u32"],
      result: "u32",
    },
    GetEnvironmentVariableW: {
      parameters: ["buffer", "buffer", "u32"],
      result: "u32",
    },
    SetEnvironmentVariableA: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    SetEnvironmentVariableW: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    ExpandEnvironmentStringsA: {
      parameters: ["buffer", "buffer", "u32"],
      result: "u32",
    },
    ExpandEnvironmentStringsW: {
      parameters: ["buffer", "buffer", "u32"],
      result: "u32",
    },
    SetCurrentDirectoryA: {
      parameters: ["buffer"],
      result: "i32",
    },
    SetCurrentDirectoryW: {
      parameters: ["buffer"],
      result: "i32",
    },
    GetCurrentDirectoryA: {
      parameters: ["u32", "buffer"],
      result: "u32",
    },
    GetCurrentDirectoryW: {
      parameters: ["u32", "buffer"],
      result: "u32",
    },
    NeedCurrentDirectoryForExePathA: {
      parameters: ["buffer"],
      result: "i32",
    },
    NeedCurrentDirectoryForExePathW: {
      parameters: ["buffer"],
      result: "i32",
    },
    IsEnclaveTypeSupported: {
      parameters: ["u32"],
      result: "i32",
    },
    CreateEnclave: {
      parameters: ["pointer", "pointer", "usize", "usize", "u32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    LoadEnclaveData: {
      parameters: ["pointer", "pointer", "pointer", "usize", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    InitializeEnclave: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libUSERENV_dll = Deno.dlopen("USERENV.dll", {
    CreateEnvironmentBlock: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i32",
    },
    DestroyEnvironmentBlock: {
      parameters: ["pointer"],
      result: "i32",
    },
    ExpandEnvironmentStringsForUserA: {
      parameters: ["pointer", "buffer", "buffer", "u32"],
      result: "i32",
    },
    ExpandEnvironmentStringsForUserW: {
      parameters: ["pointer", "buffer", "buffer", "u32"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_enclave_l1_1_1_dll = Deno.dlopen("api-ms-win-core-enclave-l1-1-1.dll", {
    LoadEnclaveImageA: {
      parameters: ["pointer", "buffer"],
      result: "i32",
    },
    LoadEnclaveImageW: {
      parameters: ["pointer", "buffer"],
      result: "i32",
    },
    DeleteEnclave: {
      parameters: ["pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libvertdll_dll = Deno.dlopen("vertdll.dll", {
    CallEnclave: {
      parameters: ["isize", "pointer", "i32", "pointer"],
      result: "i32",
    },
    TerminateEnclave: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    EnclaveGetAttestationReport: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    EnclaveVerifyAttestationReport: {
      parameters: ["u32", "pointer", "u32"],
      result: "pointer",
    },
    EnclaveSealData: {
      parameters: ["pointer", "u32", "i32", "u32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    EnclaveUnsealData: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    EnclaveGetEnclaveInformation: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function SetEnvironmentStringsW(
  NewEnvironment: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetEnvironmentStringsW(util.pwstrToFfi(NewEnvironment)));
}

export function GetCommandLineA(): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libKERNEL32_dll.GetCommandLineA());
}

export function GetCommandLineW(): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libKERNEL32_dll.GetCommandLineW());
}

export function GetEnvironmentStrings(): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libKERNEL32_dll.GetEnvironmentStrings());
}

export function GetEnvironmentStringsW(): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libKERNEL32_dll.GetEnvironmentStringsW());
}

export function FreeEnvironmentStringsA(
  penv: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.FreeEnvironmentStringsA(util.pstrToFfi(penv)));
}

export function FreeEnvironmentStringsW(
  penv: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.FreeEnvironmentStringsW(util.pwstrToFfi(penv)));
}

export function GetEnvironmentVariableA(
  lpName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpBuffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.GetEnvironmentVariableA(util.pstrToFfi(lpName), util.pstrToFfi(lpBuffer), nSize);
}

export function GetEnvironmentVariableW(
  lpName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.GetEnvironmentVariableW(util.pwstrToFfi(lpName), util.pwstrToFfi(lpBuffer), nSize);
}

export function SetEnvironmentVariableA(
  lpName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpValue: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetEnvironmentVariableA(util.pstrToFfi(lpName), util.pstrToFfi(lpValue)));
}

export function SetEnvironmentVariableW(
  lpName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpValue: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetEnvironmentVariableW(util.pwstrToFfi(lpName), util.pwstrToFfi(lpValue)));
}

export function ExpandEnvironmentStringsA(
  lpSrc: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpDst: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.ExpandEnvironmentStringsA(util.pstrToFfi(lpSrc), util.pstrToFfi(lpDst), nSize);
}

export function ExpandEnvironmentStringsW(
  lpSrc: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpDst: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.ExpandEnvironmentStringsW(util.pwstrToFfi(lpSrc), util.pwstrToFfi(lpDst), nSize);
}

export function SetCurrentDirectoryA(
  lpPathName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetCurrentDirectoryA(util.pstrToFfi(lpPathName)));
}

export function SetCurrentDirectoryW(
  lpPathName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetCurrentDirectoryW(util.pwstrToFfi(lpPathName)));
}

export function GetCurrentDirectoryA(
  nBufferLength: number /* u32 */,
  lpBuffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libKERNEL32_dll.GetCurrentDirectoryA(nBufferLength, util.pstrToFfi(lpBuffer));
}

export function GetCurrentDirectoryW(
  nBufferLength: number /* u32 */,
  lpBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libKERNEL32_dll.GetCurrentDirectoryW(nBufferLength, util.pwstrToFfi(lpBuffer));
}

export function NeedCurrentDirectoryForExePathA(
  ExeName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.NeedCurrentDirectoryForExePathA(util.pstrToFfi(ExeName)));
}

export function NeedCurrentDirectoryForExePathW(
  ExeName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.NeedCurrentDirectoryForExePathW(util.pwstrToFfi(ExeName)));
}

export function CreateEnvironmentBlock(
  lpEnvironment: Deno.PointerValue | Uint8Array | null /* ptr */,
  hToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  bInherit: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSERENV_dll.CreateEnvironmentBlock(util.toPointer(lpEnvironment), util.toPointer(hToken), util.boolToFfi(bInherit)));
}

export function DestroyEnvironmentBlock(
  lpEnvironment: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSERENV_dll.DestroyEnvironmentBlock(util.toPointer(lpEnvironment)));
}

export function ExpandEnvironmentStringsForUserA(
  hToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpSrc: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpDest: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwSize: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSERENV_dll.ExpandEnvironmentStringsForUserA(util.toPointer(hToken), util.pstrToFfi(lpSrc), util.pstrToFfi(lpDest), dwSize));
}

export function ExpandEnvironmentStringsForUserW(
  hToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpSrc: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpDest: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwSize: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSERENV_dll.ExpandEnvironmentStringsForUserW(util.toPointer(hToken), util.pwstrToFfi(lpSrc), util.pwstrToFfi(lpDest), dwSize));
}

export function IsEnclaveTypeSupported(
  flEnclaveType: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.IsEnclaveTypeSupported(flEnclaveType));
}

export function CreateEnclave(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSize: Deno.PointerValue /* usize */,
  dwInitialCommitment: Deno.PointerValue /* usize */,
  flEnclaveType: number /* u32 */,
  lpEnclaveInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwInfoLength: number /* u32 */,
  lpEnclaveError: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32_dll.CreateEnclave(util.toPointer(hProcess), util.toPointer(lpAddress), dwSize, dwInitialCommitment, flEnclaveType, util.toPointer(lpEnclaveInformation), dwInfoLength, util.toPointer(lpEnclaveError)));
}

export function LoadEnclaveData(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  nSize: Deno.PointerValue /* usize */,
  flProtect: number /* u32 */,
  lpPageInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwInfoLength: number /* u32 */,
  lpNumberOfBytesWritten: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpEnclaveError: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.LoadEnclaveData(util.toPointer(hProcess), util.toPointer(lpAddress), util.toPointer(lpBuffer), nSize, flProtect, util.toPointer(lpPageInformation), dwInfoLength, util.toPointer(lpNumberOfBytesWritten), util.toPointer(lpEnclaveError)));
}

export function InitializeEnclave(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpEnclaveInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwInfoLength: number /* u32 */,
  lpEnclaveError: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.InitializeEnclave(util.toPointer(hProcess), util.toPointer(lpAddress), util.toPointer(lpEnclaveInformation), dwInfoLength, util.toPointer(lpEnclaveError)));
}

export function LoadEnclaveImageA(
  lpEnclaveAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpImageName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libapi_ms_win_core_enclave_l1_1_1_dll.LoadEnclaveImageA(util.toPointer(lpEnclaveAddress), util.pstrToFfi(lpImageName)));
}

export function LoadEnclaveImageW(
  lpEnclaveAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpImageName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libapi_ms_win_core_enclave_l1_1_1_dll.LoadEnclaveImageW(util.toPointer(lpEnclaveAddress), util.pwstrToFfi(lpImageName)));
}

export function CallEnclave(
  lpRoutine: Deno.PointerValue /* isize */,
  lpParameter: Deno.PointerValue | Uint8Array | null /* ptr */,
  fWaitForThread: boolean /* Windows.Win32.Foundation.BOOL */,
  lpReturnValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libvertdll_dll.CallEnclave(lpRoutine, util.toPointer(lpParameter), util.boolToFfi(fWaitForThread), util.toPointer(lpReturnValue)));
}

export function TerminateEnclave(
  lpAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  fWait: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libvertdll_dll.TerminateEnclave(util.toPointer(lpAddress), util.boolToFfi(fWait)));
}

export function DeleteEnclave(
  lpAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libapi_ms_win_core_enclave_l1_1_1_dll.DeleteEnclave(util.toPointer(lpAddress)));
}

export function EnclaveGetAttestationReport(
  EnclaveData: Deno.PointerValue | Uint8Array | null /* ptr */,
  Report: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferSize: number /* u32 */,
  OutputSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libvertdll_dll.EnclaveGetAttestationReport(util.toPointer(EnclaveData), util.toPointer(Report), BufferSize, util.toPointer(OutputSize)));
}

export function EnclaveVerifyAttestationReport(
  EnclaveType: number /* u32 */,
  Report: Deno.PointerValue | Uint8Array | null /* ptr */,
  ReportSize: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libvertdll_dll.EnclaveVerifyAttestationReport(EnclaveType, util.toPointer(Report), ReportSize));
}

export function EnclaveSealData(
  DataToEncrypt: Deno.PointerValue | Uint8Array | null /* ptr */,
  DataToEncryptSize: number /* u32 */,
  IdentityPolicy: ENCLAVE_SEALING_IDENTITY_POLICY /* Windows.Win32.System.Environment.ENCLAVE_SEALING_IDENTITY_POLICY */,
  RuntimePolicy: number /* u32 */,
  ProtectedBlob: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferSize: number /* u32 */,
  ProtectedBlobSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libvertdll_dll.EnclaveSealData(util.toPointer(DataToEncrypt), DataToEncryptSize, IdentityPolicy, RuntimePolicy, util.toPointer(ProtectedBlob), BufferSize, util.toPointer(ProtectedBlobSize)));
}

export function EnclaveUnsealData(
  ProtectedBlob: Deno.PointerValue | Uint8Array | null /* ptr */,
  ProtectedBlobSize: number /* u32 */,
  DecryptedData: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferSize: number /* u32 */,
  DecryptedDataSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  SealingIdentity: Deno.PointerValue | Uint8Array | null /* ptr */,
  UnsealingFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libvertdll_dll.EnclaveUnsealData(util.toPointer(ProtectedBlob), ProtectedBlobSize, util.toPointer(DecryptedData), BufferSize, util.toPointer(DecryptedDataSize), util.toPointer(SealingIdentity), util.toPointer(UnsealingFlags)));
}

export function EnclaveGetEnclaveInformation(
  InformationSize: number /* u32 */,
  EnclaveInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libvertdll_dll.EnclaveGetEnclaveInformation(InformationSize, util.toPointer(EnclaveInformation)));
}

