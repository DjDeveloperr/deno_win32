/// Auto-generated by Deno Win32: Windows.Win32.System.ComponentServices.Apis

import * as util from "../../util.ts";

// Enums
export type COMAdminInUse = number;
export type COMAdminComponentType = number;
export type COMAdminApplicationInstallOptions = number;
export type COMAdminApplicationExportOptions = number;
export type COMAdminThreadingModels = number;
export type COMAdminTransactionOptions = number;
export type COMAdminTxIsolationLevelOptions = number;
export type COMAdminSynchronizationOptions = number;
export type COMAdminActivationOptions = number;
export type COMAdminAccessChecksLevelOptions = number;
export type COMAdminAuthenticationLevelOptions = number;
export type COMAdminImpersonationLevelOptions = number;
export type COMAdminAuthenticationCapabilitiesOptions = number;
export type COMAdminOS = number;
export type COMAdminServiceOptions = number;
export type COMAdminServiceStatusOptions = number;
export type COMAdminQCMessageAuthenticateOptions = number;
export type COMAdminFileFlags = number;
export type COMAdminComponentFlags = number;
export type COMAdminErrorCodes = number;
export type TRACKING_COLL_TYPE = number;
export type DUMPTYPE = number;
export type COMPLUS_APPTYPE = number;
export type GetAppTrackerDataFlags = number;
export type TransactionVote = number;
export type CrmTransactionState = number;
export type CSC_InheritanceConfig = number;
export type CSC_ThreadPool = number;
export type CSC_Binding = number;
export type CSC_TransactionConfig = number;
export type CSC_SynchronizationConfig = number;
export type CSC_TrackerConfig = number;
export type CSC_PartitionConfig = number;
export type CSC_IISIntrinsicsConfig = number;
export type CSC_COMTIIntrinsicsConfig = number;
export type CSC_SxsConfig = number;
export type AutoSvcs_Error_Constants = number;
export type LockModes = number;
export type ReleaseModes = number;
export type CRMFLAGS = number;
export type CRMREGFLAGS = number;
export type APTTYPE = number;

// Constants
export const TRACKER_STARTSTOP_EVENT = `Global\\COM+ Tracker Push Event`;
export const TRACKER_INIT_EVENT = `Global\\COM+ Tracker Init Event`;
export const GUID_STRING_SIZE = 40;
export const DATA_NOT_AVAILABLE = 4294967295;
export const MTXDM_E_ENLISTRESOURCEFAILED = 2147803392;
export const CRR_NO_REASON_SUPPLIED = 0;
export const CRR_LIFETIME_LIMIT = 4294967295;
export const CRR_ACTIVATION_LIMIT = 4294967294;
export const CRR_CALL_LIMIT = 4294967293;
export const CRR_MEMORY_LIMIT = 4294967292;
export const CRR_RECYCLED_FROM_UI = 4294967291;
export const COMAdminNotInUse = 0;
export const COMAdminInUseByCatalog = 1;
export const COMAdminInUseByRegistryUnknown = 2;
export const COMAdminInUseByRegistryProxyStub = 3;
export const COMAdminInUseByRegistryTypeLib = 4;
export const COMAdminInUseByRegistryClsid = 5;
export const COMAdmin32BitComponent = 1;
export const COMAdmin64BitComponent = 2;
export const COMAdminInstallNoUsers = 0;
export const COMAdminInstallUsers = 1;
export const COMAdminInstallForceOverwriteOfFiles = 2;
export const COMAdminExportNoUsers = 0;
export const COMAdminExportUsers = 1;
export const COMAdminExportApplicationProxy = 2;
export const COMAdminExportForceOverwriteOfFiles = 4;
export const COMAdminExportIn10Format = 16;
export const COMAdminThreadingModelApartment = 0;
export const COMAdminThreadingModelFree = 1;
export const COMAdminThreadingModelMain = 2;
export const COMAdminThreadingModelBoth = 3;
export const COMAdminThreadingModelNeutral = 4;
export const COMAdminThreadingModelNotSpecified = 5;
export const COMAdminTransactionIgnored = 0;
export const COMAdminTransactionNone = 1;
export const COMAdminTransactionSupported = 2;
export const COMAdminTransactionRequired = 3;
export const COMAdminTransactionRequiresNew = 4;
export const COMAdminTxIsolationLevelAny = 0;
export const COMAdminTxIsolationLevelReadUnCommitted = 1;
export const COMAdminTxIsolationLevelReadCommitted = 2;
export const COMAdminTxIsolationLevelRepeatableRead = 3;
export const COMAdminTxIsolationLevelSerializable = 4;
export const COMAdminSynchronizationIgnored = 0;
export const COMAdminSynchronizationNone = 1;
export const COMAdminSynchronizationSupported = 2;
export const COMAdminSynchronizationRequired = 3;
export const COMAdminSynchronizationRequiresNew = 4;
export const COMAdminActivationInproc = 0;
export const COMAdminActivationLocal = 1;
export const COMAdminAccessChecksApplicationLevel = 0;
export const COMAdminAccessChecksApplicationComponentLevel = 1;
export const COMAdminAuthenticationDefault = 0;
export const COMAdminAuthenticationNone = 1;
export const COMAdminAuthenticationConnect = 2;
export const COMAdminAuthenticationCall = 3;
export const COMAdminAuthenticationPacket = 4;
export const COMAdminAuthenticationIntegrity = 5;
export const COMAdminAuthenticationPrivacy = 6;
export const COMAdminImpersonationAnonymous = 1;
export const COMAdminImpersonationIdentify = 2;
export const COMAdminImpersonationImpersonate = 3;
export const COMAdminImpersonationDelegate = 4;
export const COMAdminAuthenticationCapabilitiesNone = 0;
export const COMAdminAuthenticationCapabilitiesSecureReference = 2;
export const COMAdminAuthenticationCapabilitiesStaticCloaking = 32;
export const COMAdminAuthenticationCapabilitiesDynamicCloaking = 64;
export const COMAdminOSNotInitialized = 0;
export const COMAdminOSWindows3_1 = 1;
export const COMAdminOSWindows9x = 2;
export const COMAdminOSWindows2000 = 3;
export const COMAdminOSWindows2000AdvancedServer = 4;
export const COMAdminOSWindows2000Unknown = 5;
export const COMAdminOSUnknown = 6;
export const COMAdminOSWindowsXPPersonal = 11;
export const COMAdminOSWindowsXPProfessional = 12;
export const COMAdminOSWindowsNETStandardServer = 13;
export const COMAdminOSWindowsNETEnterpriseServer = 14;
export const COMAdminOSWindowsNETDatacenterServer = 15;
export const COMAdminOSWindowsNETWebServer = 16;
export const COMAdminOSWindowsLonghornPersonal = 17;
export const COMAdminOSWindowsLonghornProfessional = 18;
export const COMAdminOSWindowsLonghornStandardServer = 19;
export const COMAdminOSWindowsLonghornEnterpriseServer = 20;
export const COMAdminOSWindowsLonghornDatacenterServer = 21;
export const COMAdminOSWindowsLonghornWebServer = 22;
export const COMAdminOSWindows7Personal = 23;
export const COMAdminOSWindows7Professional = 24;
export const COMAdminOSWindows7StandardServer = 25;
export const COMAdminOSWindows7EnterpriseServer = 26;
export const COMAdminOSWindows7DatacenterServer = 27;
export const COMAdminOSWindows7WebServer = 28;
export const COMAdminOSWindows8Personal = 29;
export const COMAdminOSWindows8Professional = 30;
export const COMAdminOSWindows8StandardServer = 31;
export const COMAdminOSWindows8EnterpriseServer = 32;
export const COMAdminOSWindows8DatacenterServer = 33;
export const COMAdminOSWindows8WebServer = 34;
export const COMAdminOSWindowsBluePersonal = 35;
export const COMAdminOSWindowsBlueProfessional = 36;
export const COMAdminOSWindowsBlueStandardServer = 37;
export const COMAdminOSWindowsBlueEnterpriseServer = 38;
export const COMAdminOSWindowsBlueDatacenterServer = 39;
export const COMAdminOSWindowsBlueWebServer = 40;
export const COMAdminServiceLoadBalanceRouter = 1;
export const COMAdminServiceStopped = 0;
export const COMAdminServiceStartPending = 1;
export const COMAdminServiceStopPending = 2;
export const COMAdminServiceRunning = 3;
export const COMAdminServiceContinuePending = 4;
export const COMAdminServicePausePending = 5;
export const COMAdminServicePaused = 6;
export const COMAdminServiceUnknownState = 7;
export const COMAdminQCMessageAuthenticateSecureApps = 0;
export const COMAdminQCMessageAuthenticateOff = 1;
export const COMAdminQCMessageAuthenticateOn = 2;
export const COMAdminFileFlagLoadable = 1;
export const COMAdminFileFlagCOM = 2;
export const COMAdminFileFlagContainsPS = 4;
export const COMAdminFileFlagContainsComp = 8;
export const COMAdminFileFlagContainsTLB = 16;
export const COMAdminFileFlagSelfReg = 32;
export const COMAdminFileFlagSelfUnReg = 64;
export const COMAdminFileFlagUnloadableDLL = 128;
export const COMAdminFileFlagDoesNotExist = 256;
export const COMAdminFileFlagAlreadyInstalled = 512;
export const COMAdminFileFlagBadTLB = 1024;
export const COMAdminFileFlagGetClassObjFailed = 2048;
export const COMAdminFileFlagClassNotAvailable = 4096;
export const COMAdminFileFlagRegistrar = 8192;
export const COMAdminFileFlagNoRegistrar = 16384;
export const COMAdminFileFlagDLLRegsvrFailed = 32768;
export const COMAdminFileFlagRegTLBFailed = 65536;
export const COMAdminFileFlagRegistrarFailed = 131072;
export const COMAdminFileFlagError = 262144;
export const COMAdminCompFlagTypeInfoFound = 1;
export const COMAdminCompFlagCOMPlusPropertiesFound = 2;
export const COMAdminCompFlagProxyFound = 4;
export const COMAdminCompFlagInterfacesFound = 8;
export const COMAdminCompFlagAlreadyInstalled = 16;
export const COMAdminCompFlagNotInApplication = 32;
export const COMAdminErrObjectErrors = `-2146368511`;
export const COMAdminErrObjectInvalid = `-2146368510`;
export const COMAdminErrKeyMissing = `-2146368509`;
export const COMAdminErrAlreadyInstalled = `-2146368508`;
export const COMAdminErrAppFileWriteFail = `-2146368505`;
export const COMAdminErrAppFileReadFail = `-2146368504`;
export const COMAdminErrAppFileVersion = `-2146368503`;
export const COMAdminErrBadPath = `-2146368502`;
export const COMAdminErrApplicationExists = `-2146368501`;
export const COMAdminErrRoleExists = `-2146368500`;
export const COMAdminErrCantCopyFile = `-2146368499`;
export const COMAdminErrNoUser = `-2146368497`;
export const COMAdminErrInvalidUserids = `-2146368496`;
export const COMAdminErrNoRegistryCLSID = `-2146368495`;
export const COMAdminErrBadRegistryProgID = `-2146368494`;
export const COMAdminErrAuthenticationLevel = `-2146368493`;
export const COMAdminErrUserPasswdNotValid = `-2146368492`;
export const COMAdminErrCLSIDOrIIDMismatch = `-2146368488`;
export const COMAdminErrRemoteInterface = `-2146368487`;
export const COMAdminErrDllRegisterServer = `-2146368486`;
export const COMAdminErrNoServerShare = `-2146368485`;
export const COMAdminErrDllLoadFailed = `-2146368483`;
export const COMAdminErrBadRegistryLibID = `-2146368482`;
export const COMAdminErrAppDirNotFound = `-2146368481`;
export const COMAdminErrRegistrarFailed = `-2146368477`;
export const COMAdminErrCompFileDoesNotExist = `-2146368476`;
export const COMAdminErrCompFileLoadDLLFail = `-2146368475`;
export const COMAdminErrCompFileGetClassObj = `-2146368474`;
export const COMAdminErrCompFileClassNotAvail = `-2146368473`;
export const COMAdminErrCompFileBadTLB = `-2146368472`;
export const COMAdminErrCompFileNotInstallable = `-2146368471`;
export const COMAdminErrNotChangeable = `-2146368470`;
export const COMAdminErrNotDeletable = `-2146368469`;
export const COMAdminErrSession = `-2146368468`;
export const COMAdminErrCompMoveLocked = `-2146368467`;
export const COMAdminErrCompMoveBadDest = `-2146368466`;
export const COMAdminErrRegisterTLB = `-2146368464`;
export const COMAdminErrSystemApp = `-2146368461`;
export const COMAdminErrCompFileNoRegistrar = `-2146368460`;
export const COMAdminErrCoReqCompInstalled = `-2146368459`;
export const COMAdminErrServiceNotInstalled = `-2146368458`;
export const COMAdminErrPropertySaveFailed = `-2146368457`;
export const COMAdminErrObjectExists = `-2146368456`;
export const COMAdminErrComponentExists = `-2146368455`;
export const COMAdminErrRegFileCorrupt = `-2146368453`;
export const COMAdminErrPropertyOverflow = `-2146368452`;
export const COMAdminErrNotInRegistry = `-2146368450`;
export const COMAdminErrObjectNotPoolable = `-2146368449`;
export const COMAdminErrApplidMatchesClsid = `-2146368442`;
export const COMAdminErrRoleDoesNotExist = `-2146368441`;
export const COMAdminErrStartAppNeedsComponents = `-2146368440`;
export const COMAdminErrRequiresDifferentPlatform = `-2146368439`;
export const COMAdminErrQueuingServiceNotAvailable = `-2146367998`;
export const COMAdminErrObjectParentMissing = `-2146367480`;
export const COMAdminErrObjectDoesNotExist = `-2146367479`;
export const COMAdminErrCanNotExportAppProxy = `-2146368438`;
export const COMAdminErrCanNotStartApp = `-2146368437`;
export const COMAdminErrCanNotExportSystemApp = `-2146368436`;
export const COMAdminErrCanNotSubscribeToComponent = `-2146368435`;
export const COMAdminErrAppNotRunning = `-2146367478`;
export const COMAdminErrEventClassCannotBeSubscriber = `-2146368434`;
export const COMAdminErrLibAppProxyIncompatible = `-2146368433`;
export const COMAdminErrBasePartitionOnly = `-2146368432`;
export const COMAdminErrDuplicatePartitionName = `-2146368425`;
export const COMAdminErrPartitionInUse = `-2146368423`;
export const COMAdminErrImportedComponentsNotAllowed = `-2146368421`;
export const COMAdminErrRegdbNotInitialized = `-2146368398`;
export const COMAdminErrRegdbNotOpen = `-2146368397`;
export const COMAdminErrRegdbSystemErr = `-2146368396`;
export const COMAdminErrRegdbAlreadyRunning = `-2146368395`;
export const COMAdminErrMigVersionNotSupported = `-2146368384`;
export const COMAdminErrMigSchemaNotFound = `-2146368383`;
export const COMAdminErrCatBitnessMismatch = `-2146368382`;
export const COMAdminErrCatUnacceptableBitness = `-2146368381`;
export const COMAdminErrCatWrongAppBitnessBitness = `-2146368380`;
export const COMAdminErrCatPauseResumeNotSupported = `-2146368379`;
export const COMAdminErrCatServerFault = `-2146368378`;
export const COMAdminErrCantRecycleLibraryApps = `-2146367473`;
export const COMAdminErrCantRecycleServiceApps = `-2146367471`;
export const COMAdminErrProcessAlreadyRecycled = `-2146367470`;
export const COMAdminErrPausedProcessMayNotBeRecycled = `-2146367469`;
export const COMAdminErrInvalidPartition = `-2146367477`;
export const COMAdminErrPartitionMsiOnly = `-2146367463`;
export const COMAdminErrStartAppDisabled = `-2146368431`;
export const COMAdminErrCompMoveSource = `-2146367460`;
export const COMAdminErrCompMoveDest = `-2146367459`;
export const COMAdminErrCompMovePrivate = `-2146367458`;
export const COMAdminErrCannotCopyEventClass = `-2146367456`;
export const TRKCOLL_PROCESSES = 0;
export const TRKCOLL_APPLICATIONS = 1;
export const TRKCOLL_COMPONENTS = 2;
export const DUMPTYPE_FULL = 0;
export const DUMPTYPE_MINI = 1;
export const DUMPTYPE_NONE = 2;
export const APPTYPE_UNKNOWN = `-1`;
export const APPTYPE_SERVER = 1;
export const APPTYPE_LIBRARY = 0;
export const APPTYPE_SWC = 2;
export const GATD_INCLUDE_PROCESS_EXE_NAME = 1;
export const GATD_INCLUDE_LIBRARY_APPS = 2;
export const GATD_INCLUDE_SWC = 4;
export const GATD_INCLUDE_CLASS_NAME = 8;
export const GATD_INCLUDE_APPLICATION_NAME = 16;
export const TxCommit = 0;
export const TxAbort = 1;
export const TxState_Active = 0;
export const TxState_Committed = 1;
export const TxState_Aborted = 2;
export const TxState_Indoubt = 3;
export const CSC_Inherit = 0;
export const CSC_Ignore = 1;
export const CSC_ThreadPoolNone = 0;
export const CSC_ThreadPoolInherit = 1;
export const CSC_STAThreadPool = 2;
export const CSC_MTAThreadPool = 3;
export const CSC_NoBinding = 0;
export const CSC_BindToPoolThread = 1;
export const CSC_NoTransaction = 0;
export const CSC_IfContainerIsTransactional = 1;
export const CSC_CreateTransactionIfNecessary = 2;
export const CSC_NewTransaction = 3;
export const CSC_NoSynchronization = 0;
export const CSC_IfContainerIsSynchronized = 1;
export const CSC_NewSynchronizationIfNecessary = 2;
export const CSC_NewSynchronization = 3;
export const CSC_DontUseTracker = 0;
export const CSC_UseTracker = 1;
export const CSC_NoPartition = 0;
export const CSC_InheritPartition = 1;
export const CSC_NewPartition = 2;
export const CSC_NoIISIntrinsics = 0;
export const CSC_InheritIISIntrinsics = 1;
export const CSC_NoCOMTIIntrinsics = 0;
export const CSC_InheritCOMTIIntrinsics = 1;
export const CSC_NoSxs = 0;
export const CSC_InheritSxs = 1;
export const CSC_NewSxs = 2;
export const mtsErrCtxAborted = 2147803138;
export const mtsErrCtxAborting = 2147803139;
export const mtsErrCtxNoContext = 2147803140;
export const mtsErrCtxNotRegistered = 2147803141;
export const mtsErrCtxSynchTimeout = 2147803142;
export const mtsErrCtxOldReference = 2147803143;
export const mtsErrCtxRoleNotFound = 2147803148;
export const mtsErrCtxNoSecurity = 2147803149;
export const mtsErrCtxWrongThread = 2147803150;
export const mtsErrCtxTMNotAvailable = 2147803151;
export const comQCErrApplicationNotQueued = 2148599296;
export const comQCErrNoQueueableInterfaces = 2148599297;
export const comQCErrQueuingServiceNotAvailable = 2148599298;
export const comQCErrQueueTransactMismatch = 2148599299;
export const comqcErrRecorderMarshalled = 2148599300;
export const comqcErrOutParam = 2148599301;
export const comqcErrRecorderNotTrusted = 2148599302;
export const comqcErrPSLoad = 2148599303;
export const comqcErrMarshaledObjSameTxn = 2148599304;
export const comqcErrInvalidMessage = 2148599376;
export const comqcErrMsmqSidUnavailable = 2148599377;
export const comqcErrWrongMsgExtension = 2148599378;
export const comqcErrMsmqServiceUnavailable = 2148599379;
export const comqcErrMsgNotAuthenticated = 2148599380;
export const comqcErrMsmqConnectorUsed = 2148599381;
export const comqcErrBadMarshaledObject = 2148599382;
export const LockSetGet = 0;
export const LockMethod = 1;
export const Standard = 0;
export const Process = 1;
export const CRMFLAG_FORGETTARGET = 1;
export const CRMFLAG_WRITTENDURINGPREPARE = 2;
export const CRMFLAG_WRITTENDURINGCOMMIT = 4;
export const CRMFLAG_WRITTENDURINGABORT = 8;
export const CRMFLAG_WRITTENDURINGRECOVERY = 16;
export const CRMFLAG_WRITTENDURINGREPLAY = 32;
export const CRMFLAG_REPLAYINPROGRESS = 64;
export const CRMREGFLAG_PREPAREPHASE = 1;
export const CRMREGFLAG_COMMITPHASE = 2;
export const CRMREGFLAG_ABORTPHASE = 4;
export const CRMREGFLAG_ALLPHASES = 7;
export const CRMREGFLAG_FAILIFINDOUBTSREMAIN = 16;
export const APTTYPE_CURRENT = `-1`;
export const APTTYPE_STA = 0;
export const APTTYPE_MTA = 1;
export const APTTYPE_NA = 2;
export const APTTYPE_MAINSTA = 3;

// Structs

export type PWSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.System.ComponentServices.COMSVCSEVENTINFO (size: 48)
 */
export interface COMSVCSEVENTINFO {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwPid: number;
  /** i64 */
  lTime: bigint | number;
  /** i32 */
  lMicroTime: number;
  /** i64 */
  perfCount: bigint | number;
  /** System.Guid */
  guidApp: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  sMachineName: string | null | Uint8Array | Uint16Array;
}

export const sizeofCOMSVCSEVENTINFO = 48;

export function allocCOMSVCSEVENTINFO(data?: Partial<COMSVCSEVENTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCOMSVCSEVENTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwPid !== undefined) view.setUint32(4, Number(data.dwPid), true);
  // 0x08: i64
  if (data?.lTime !== undefined) view.setBigInt64(8, BigInt(data.lTime), true);
  // 0x10: i32
  if (data?.lMicroTime !== undefined) view.setInt32(16, Number(data.lMicroTime), true);
  // 0x14: pad4
  // 0x18: i64
  if (data?.perfCount !== undefined) view.setBigInt64(24, BigInt(data.perfCount), true);
  // 0x20: pointer
  if (data?.guidApp !== undefined) view.setBigUint64(32, data.guidApp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidApp))), true);
  // 0x28: buffer
  if (data?.sMachineName !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.sMachineName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  return buf;
}

export class COMSVCSEVENTINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwPid(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i64
  get lTime(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: i32
  get lMicroTime(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: i64
  get perfCount(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: pointer
  get guidApp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get sMachineName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwPid(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i64
  set lTime(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: i32
  set lMicroTime(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: i64
  set perfCount(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: pointer
  set guidApp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: buffer
  set sMachineName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }
}

/**
 * Windows.Win32.System.ComponentServices.RECYCLE_INFO (size: 32)
 */
export interface RECYCLE_INFO {
  /** System.Guid */
  guidCombaseProcessIdentifier: Uint8Array | Deno.PointerValue;
  /** i64 */
  ProcessStartTime: bigint | number;
  /** u32 */
  dwRecycleLifetimeLimit: number;
  /** u32 */
  dwRecycleMemoryLimit: number;
  /** u32 */
  dwRecycleExpirationTimeout: number;
}

export const sizeofRECYCLE_INFO = 32;

export function allocRECYCLE_INFO(data?: Partial<RECYCLE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRECYCLE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guidCombaseProcessIdentifier !== undefined) view.setBigUint64(0, data.guidCombaseProcessIdentifier === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidCombaseProcessIdentifier))), true);
  // 0x08: i64
  if (data?.ProcessStartTime !== undefined) view.setBigInt64(8, BigInt(data.ProcessStartTime), true);
  // 0x10: u32
  if (data?.dwRecycleLifetimeLimit !== undefined) view.setUint32(16, Number(data.dwRecycleLifetimeLimit), true);
  // 0x14: u32
  if (data?.dwRecycleMemoryLimit !== undefined) view.setUint32(20, Number(data.dwRecycleMemoryLimit), true);
  // 0x18: u32
  if (data?.dwRecycleExpirationTimeout !== undefined) view.setUint32(24, Number(data.dwRecycleExpirationTimeout), true);
  // 0x1c: pad4
  return buf;
}

export class RECYCLE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get guidCombaseProcessIdentifier(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i64
  get ProcessStartTime(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: u32
  get dwRecycleLifetimeLimit(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwRecycleMemoryLimit(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwRecycleExpirationTimeout(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set guidCombaseProcessIdentifier(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i64
  set ProcessStartTime(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: u32
  set dwRecycleLifetimeLimit(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwRecycleMemoryLimit(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwRecycleExpirationTimeout(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

export type BOOL = number;

/**
 * Windows.Win32.System.ComponentServices.HANG_INFO (size: 24)
 */
export interface HANG_INFO {
  /** Windows.Win32.Foundation.BOOL */
  fAppHangMonitorEnabled: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fTerminateOnHang: boolean;
  /** Windows.Win32.System.ComponentServices.DUMPTYPE */
  DumpType: DUMPTYPE;
  /** u32 */
  dwHangTimeout: number;
  /** u32 */
  dwDumpCount: number;
  /** u32 */
  dwInfoMsgCount: number;
}

export const sizeofHANG_INFO = 24;

export function allocHANG_INFO(data?: Partial<HANG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHANG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fAppHangMonitorEnabled !== undefined) view.setInt32(0, Number(data.fAppHangMonitorEnabled), true);
  // 0x04: i32
  if (data?.fTerminateOnHang !== undefined) view.setInt32(4, Number(data.fTerminateOnHang), true);
  // 0x08: i32
  if (data?.DumpType !== undefined) view.setInt32(8, Number(data.DumpType), true);
  // 0x0c: u32
  if (data?.dwHangTimeout !== undefined) view.setUint32(12, Number(data.dwHangTimeout), true);
  // 0x10: u32
  if (data?.dwDumpCount !== undefined) view.setUint32(16, Number(data.dwDumpCount), true);
  // 0x14: u32
  if (data?.dwInfoMsgCount !== undefined) view.setUint32(20, Number(data.dwInfoMsgCount), true);
  return buf;
}

export class HANG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get fAppHangMonitorEnabled(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get fTerminateOnHang(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get DumpType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get dwHangTimeout(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwDumpCount(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwInfoMsgCount(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: i32
  set fAppHangMonitorEnabled(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set fTerminateOnHang(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set DumpType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set dwHangTimeout(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwDumpCount(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwInfoMsgCount(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.System.ComponentServices.APPSTATISTICS (size: 16)
 */
export interface APPSTATISTICS {
  /** u32 */
  m_cTotalCalls: number;
  /** u32 */
  m_cTotalInstances: number;
  /** u32 */
  m_cTotalClasses: number;
  /** u32 */
  m_cCallsPerSecond: number;
}

export const sizeofAPPSTATISTICS = 16;

export function allocAPPSTATISTICS(data?: Partial<APPSTATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofAPPSTATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.m_cTotalCalls !== undefined) view.setUint32(0, Number(data.m_cTotalCalls), true);
  // 0x04: u32
  if (data?.m_cTotalInstances !== undefined) view.setUint32(4, Number(data.m_cTotalInstances), true);
  // 0x08: u32
  if (data?.m_cTotalClasses !== undefined) view.setUint32(8, Number(data.m_cTotalClasses), true);
  // 0x0c: u32
  if (data?.m_cCallsPerSecond !== undefined) view.setUint32(12, Number(data.m_cCallsPerSecond), true);
  return buf;
}

export class APPSTATISTICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get m_cTotalCalls(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get m_cTotalInstances(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get m_cTotalClasses(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get m_cCallsPerSecond(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set m_cTotalCalls(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set m_cTotalInstances(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set m_cTotalClasses(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set m_cCallsPerSecond(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.System.ComponentServices.APPDATA (size: 32)
 */
export interface APPDATA {
  /** u32 */
  m_idApp: number;
  /** array */
  m_szAppGuid: Deno.PointerValue;
  /** u32 */
  m_dwAppProcessId: number;
  /** Windows.Win32.System.ComponentServices.APPSTATISTICS */
  m_AppStatistics: Uint8Array | Deno.PointerValue;
}

export const sizeofAPPDATA = 32;

export function allocAPPDATA(data?: Partial<APPDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofAPPDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.m_idApp !== undefined) view.setUint32(0, Number(data.m_idApp), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.m_szAppGuid !== undefined) view.setBigUint64(8, data.m_szAppGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.m_szAppGuid))), true);
  // 0x10: u32
  if (data?.m_dwAppProcessId !== undefined) view.setUint32(16, Number(data.m_dwAppProcessId), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.m_AppStatistics !== undefined) view.setBigUint64(24, data.m_AppStatistics === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.m_AppStatistics))), true);
  return buf;
}

export class APPDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get m_idApp(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get m_szAppGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get m_dwAppProcessId(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get m_AppStatistics(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set m_idApp(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set m_szAppGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set m_dwAppProcessId(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set m_AppStatistics(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.ComponentServices.CLSIDDATA (size: 40)
 */
export interface CLSIDDATA {
  /** System.Guid */
  m_clsid: Uint8Array | Deno.PointerValue;
  /** u32 */
  m_cReferences: number;
  /** u32 */
  m_cBound: number;
  /** u32 */
  m_cPooled: number;
  /** u32 */
  m_cInCall: number;
  /** u32 */
  m_dwRespTime: number;
  /** u32 */
  m_cCallsCompleted: number;
  /** u32 */
  m_cCallsFailed: number;
}

export const sizeofCLSIDDATA = 40;

export function allocCLSIDDATA(data?: Partial<CLSIDDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofCLSIDDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.m_clsid !== undefined) view.setBigUint64(0, data.m_clsid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.m_clsid))), true);
  // 0x08: u32
  if (data?.m_cReferences !== undefined) view.setUint32(8, Number(data.m_cReferences), true);
  // 0x0c: u32
  if (data?.m_cBound !== undefined) view.setUint32(12, Number(data.m_cBound), true);
  // 0x10: u32
  if (data?.m_cPooled !== undefined) view.setUint32(16, Number(data.m_cPooled), true);
  // 0x14: u32
  if (data?.m_cInCall !== undefined) view.setUint32(20, Number(data.m_cInCall), true);
  // 0x18: u32
  if (data?.m_dwRespTime !== undefined) view.setUint32(24, Number(data.m_dwRespTime), true);
  // 0x1c: u32
  if (data?.m_cCallsCompleted !== undefined) view.setUint32(28, Number(data.m_cCallsCompleted), true);
  // 0x20: u32
  if (data?.m_cCallsFailed !== undefined) view.setUint32(32, Number(data.m_cCallsFailed), true);
  // 0x24: pad4
  return buf;
}

export class CLSIDDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get m_clsid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get m_cReferences(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get m_cBound(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get m_cPooled(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get m_cInCall(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get m_dwRespTime(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get m_cCallsCompleted(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get m_cCallsFailed(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: pointer
  set m_clsid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set m_cReferences(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set m_cBound(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set m_cPooled(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set m_cInCall(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set m_dwRespTime(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set m_cCallsCompleted(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set m_cCallsFailed(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.System.ComponentServices.CLSIDDATA2 (size: 72)
 */
export interface CLSIDDATA2 {
  /** System.Guid */
  m_clsid: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  m_appid: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  m_partid: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  m_pwszAppName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  m_pwszCtxName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.System.ComponentServices.COMPLUS_APPTYPE */
  m_eAppType: COMPLUS_APPTYPE;
  /** u32 */
  m_cReferences: number;
  /** u32 */
  m_cBound: number;
  /** u32 */
  m_cPooled: number;
  /** u32 */
  m_cInCall: number;
  /** u32 */
  m_dwRespTime: number;
  /** u32 */
  m_cCallsCompleted: number;
  /** u32 */
  m_cCallsFailed: number;
}

export const sizeofCLSIDDATA2 = 72;

export function allocCLSIDDATA2(data?: Partial<CLSIDDATA2>): Uint8Array {
  const buf = new Uint8Array(sizeofCLSIDDATA2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.m_clsid !== undefined) view.setBigUint64(0, data.m_clsid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.m_clsid))), true);
  // 0x08: pointer
  if (data?.m_appid !== undefined) view.setBigUint64(8, data.m_appid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.m_appid))), true);
  // 0x10: pointer
  if (data?.m_partid !== undefined) view.setBigUint64(16, data.m_partid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.m_partid))), true);
  // 0x18: buffer
  if (data?.m_pwszAppName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.m_pwszAppName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.m_pwszCtxName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.m_pwszCtxName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: i32
  if (data?.m_eAppType !== undefined) view.setInt32(40, Number(data.m_eAppType), true);
  // 0x2c: u32
  if (data?.m_cReferences !== undefined) view.setUint32(44, Number(data.m_cReferences), true);
  // 0x30: u32
  if (data?.m_cBound !== undefined) view.setUint32(48, Number(data.m_cBound), true);
  // 0x34: u32
  if (data?.m_cPooled !== undefined) view.setUint32(52, Number(data.m_cPooled), true);
  // 0x38: u32
  if (data?.m_cInCall !== undefined) view.setUint32(56, Number(data.m_cInCall), true);
  // 0x3c: u32
  if (data?.m_dwRespTime !== undefined) view.setUint32(60, Number(data.m_dwRespTime), true);
  // 0x40: u32
  if (data?.m_cCallsCompleted !== undefined) view.setUint32(64, Number(data.m_cCallsCompleted), true);
  // 0x44: u32
  if (data?.m_cCallsFailed !== undefined) view.setUint32(68, Number(data.m_cCallsFailed), true);
  return buf;
}

export class CLSIDDATA2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get m_clsid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get m_appid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get m_partid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get m_pwszAppName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get m_pwszCtxName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: i32
  get m_eAppType(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: u32
  get m_cReferences(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get m_cBound(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get m_cPooled(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get m_cInCall(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get m_dwRespTime(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get m_cCallsCompleted(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get m_cCallsFailed(): number {
    return this.view.getUint32(68, true);
  }

  // 0x00: pointer
  set m_clsid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set m_appid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set m_partid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: buffer
  set m_pwszAppName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set m_pwszCtxName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: i32
  set m_eAppType(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: u32
  set m_cReferences(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set m_cBound(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set m_cPooled(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set m_cInCall(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set m_dwRespTime(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set m_cCallsCompleted(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set m_cCallsFailed(value: number) {
    this.view.setUint32(68, value, true);
  }
}

/**
 * Windows.Win32.System.ComponentServices.ApplicationProcessSummary (size: 56)
 */
export interface ApplicationProcessSummary {
  /** System.Guid */
  PartitionIdPrimaryApplication: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  ApplicationIdPrimaryApplication: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  ApplicationInstanceId: Uint8Array | Deno.PointerValue;
  /** u32 */
  ProcessId: number;
  /** Windows.Win32.System.ComponentServices.COMPLUS_APPTYPE */
  Type: COMPLUS_APPTYPE;
  /** Windows.Win32.Foundation.PWSTR */
  ProcessExeName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.BOOL */
  IsService: boolean;
  /** Windows.Win32.Foundation.BOOL */
  IsPaused: boolean;
  /** Windows.Win32.Foundation.BOOL */
  IsRecycled: boolean;
}

export const sizeofApplicationProcessSummary = 56;

export function allocApplicationProcessSummary(data?: Partial<ApplicationProcessSummary>): Uint8Array {
  const buf = new Uint8Array(sizeofApplicationProcessSummary);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PartitionIdPrimaryApplication !== undefined) view.setBigUint64(0, data.PartitionIdPrimaryApplication === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PartitionIdPrimaryApplication))), true);
  // 0x08: pointer
  if (data?.ApplicationIdPrimaryApplication !== undefined) view.setBigUint64(8, data.ApplicationIdPrimaryApplication === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ApplicationIdPrimaryApplication))), true);
  // 0x10: pointer
  if (data?.ApplicationInstanceId !== undefined) view.setBigUint64(16, data.ApplicationInstanceId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ApplicationInstanceId))), true);
  // 0x18: u32
  if (data?.ProcessId !== undefined) view.setUint32(24, Number(data.ProcessId), true);
  // 0x1c: i32
  if (data?.Type !== undefined) view.setInt32(28, Number(data.Type), true);
  // 0x20: buffer
  if (data?.ProcessExeName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.ProcessExeName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: i32
  if (data?.IsService !== undefined) view.setInt32(40, Number(data.IsService), true);
  // 0x2c: i32
  if (data?.IsPaused !== undefined) view.setInt32(44, Number(data.IsPaused), true);
  // 0x30: i32
  if (data?.IsRecycled !== undefined) view.setInt32(48, Number(data.IsRecycled), true);
  // 0x34: pad4
  return buf;
}

export class ApplicationProcessSummaryView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PartitionIdPrimaryApplication(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ApplicationIdPrimaryApplication(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ApplicationInstanceId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get ProcessId(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: i32
  get Type(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: buffer
  get ProcessExeName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: i32
  get IsService(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: i32
  get IsPaused(): number {
    return this.view.getInt32(44, true);
  }

  // 0x30: i32
  get IsRecycled(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: pad4

  // 0x00: pointer
  set PartitionIdPrimaryApplication(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ApplicationIdPrimaryApplication(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ApplicationInstanceId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set ProcessId(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: i32
  set Type(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: buffer
  set ProcessExeName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: i32
  set IsService(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: i32
  set IsPaused(value: number) {
    this.view.setInt32(44, value, true);
  }

  // 0x30: i32
  set IsRecycled(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.System.ComponentServices.ApplicationProcessStatistics (size: 32)
 */
export interface ApplicationProcessStatistics {
  /** u32 */
  NumCallsOutstanding: number;
  /** u32 */
  NumTrackedComponents: number;
  /** u32 */
  NumComponentInstances: number;
  /** u32 */
  AvgCallsPerSecond: number;
  /** u32 */
  Reserved1: number;
  /** u32 */
  Reserved2: number;
  /** u32 */
  Reserved3: number;
  /** u32 */
  Reserved4: number;
}

export const sizeofApplicationProcessStatistics = 32;

export function allocApplicationProcessStatistics(data?: Partial<ApplicationProcessStatistics>): Uint8Array {
  const buf = new Uint8Array(sizeofApplicationProcessStatistics);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumCallsOutstanding !== undefined) view.setUint32(0, Number(data.NumCallsOutstanding), true);
  // 0x04: u32
  if (data?.NumTrackedComponents !== undefined) view.setUint32(4, Number(data.NumTrackedComponents), true);
  // 0x08: u32
  if (data?.NumComponentInstances !== undefined) view.setUint32(8, Number(data.NumComponentInstances), true);
  // 0x0c: u32
  if (data?.AvgCallsPerSecond !== undefined) view.setUint32(12, Number(data.AvgCallsPerSecond), true);
  // 0x10: u32
  if (data?.Reserved1 !== undefined) view.setUint32(16, Number(data.Reserved1), true);
  // 0x14: u32
  if (data?.Reserved2 !== undefined) view.setUint32(20, Number(data.Reserved2), true);
  // 0x18: u32
  if (data?.Reserved3 !== undefined) view.setUint32(24, Number(data.Reserved3), true);
  // 0x1c: u32
  if (data?.Reserved4 !== undefined) view.setUint32(28, Number(data.Reserved4), true);
  return buf;
}

export class ApplicationProcessStatisticsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumCallsOutstanding(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NumTrackedComponents(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get NumComponentInstances(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get AvgCallsPerSecond(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Reserved1(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Reserved2(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get Reserved3(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get Reserved4(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: u32
  set NumCallsOutstanding(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NumTrackedComponents(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set NumComponentInstances(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set AvgCallsPerSecond(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Reserved1(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Reserved2(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set Reserved3(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set Reserved4(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Foundation.FILETIME (size: 8)
 */
export interface FILETIME {
  /** u32 */
  dwLowDateTime: number;
  /** u32 */
  dwHighDateTime: number;
}

export const sizeofFILETIME = 8;

export function allocFILETIME(data?: Partial<FILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofFILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowDateTime !== undefined) view.setUint32(0, Number(data.dwLowDateTime), true);
  // 0x04: u32
  if (data?.dwHighDateTime !== undefined) view.setUint32(4, Number(data.dwHighDateTime), true);
  return buf;
}

export class FILETIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLowDateTime(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwHighDateTime(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwLowDateTime(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwHighDateTime(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.ComponentServices.ApplicationProcessRecycleInfo (size: 72)
 */
export interface ApplicationProcessRecycleInfo {
  /** Windows.Win32.Foundation.BOOL */
  IsRecyclable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  IsRecycled: boolean;
  /** Windows.Win32.Foundation.FILETIME */
  TimeRecycled: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.FILETIME */
  TimeToTerminate: Uint8Array | Deno.PointerValue;
  /** i32 */
  RecycleReasonCode: number;
  /** Windows.Win32.Foundation.BOOL */
  IsPendingRecycle: boolean;
  /** Windows.Win32.Foundation.BOOL */
  HasAutomaticLifetimeRecycling: boolean;
  /** Windows.Win32.Foundation.FILETIME */
  TimeForAutomaticRecycling: Uint8Array | Deno.PointerValue;
  /** u32 */
  MemoryLimitInKB: number;
  /** u32 */
  MemoryUsageInKBLastCheck: number;
  /** u32 */
  ActivationLimit: number;
  /** u32 */
  NumActivationsLastReported: number;
  /** u32 */
  CallLimit: number;
  /** u32 */
  NumCallsLastReported: number;
}

export const sizeofApplicationProcessRecycleInfo = 72;

export function allocApplicationProcessRecycleInfo(data?: Partial<ApplicationProcessRecycleInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofApplicationProcessRecycleInfo);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.IsRecyclable !== undefined) view.setInt32(0, Number(data.IsRecyclable), true);
  // 0x04: i32
  if (data?.IsRecycled !== undefined) view.setInt32(4, Number(data.IsRecycled), true);
  // 0x08: pointer
  if (data?.TimeRecycled !== undefined) view.setBigUint64(8, data.TimeRecycled === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TimeRecycled))), true);
  // 0x10: pointer
  if (data?.TimeToTerminate !== undefined) view.setBigUint64(16, data.TimeToTerminate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TimeToTerminate))), true);
  // 0x18: i32
  if (data?.RecycleReasonCode !== undefined) view.setInt32(24, Number(data.RecycleReasonCode), true);
  // 0x1c: i32
  if (data?.IsPendingRecycle !== undefined) view.setInt32(28, Number(data.IsPendingRecycle), true);
  // 0x20: i32
  if (data?.HasAutomaticLifetimeRecycling !== undefined) view.setInt32(32, Number(data.HasAutomaticLifetimeRecycling), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.TimeForAutomaticRecycling !== undefined) view.setBigUint64(40, data.TimeForAutomaticRecycling === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TimeForAutomaticRecycling))), true);
  // 0x30: u32
  if (data?.MemoryLimitInKB !== undefined) view.setUint32(48, Number(data.MemoryLimitInKB), true);
  // 0x34: u32
  if (data?.MemoryUsageInKBLastCheck !== undefined) view.setUint32(52, Number(data.MemoryUsageInKBLastCheck), true);
  // 0x38: u32
  if (data?.ActivationLimit !== undefined) view.setUint32(56, Number(data.ActivationLimit), true);
  // 0x3c: u32
  if (data?.NumActivationsLastReported !== undefined) view.setUint32(60, Number(data.NumActivationsLastReported), true);
  // 0x40: u32
  if (data?.CallLimit !== undefined) view.setUint32(64, Number(data.CallLimit), true);
  // 0x44: u32
  if (data?.NumCallsLastReported !== undefined) view.setUint32(68, Number(data.NumCallsLastReported), true);
  return buf;
}

export class ApplicationProcessRecycleInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get IsRecyclable(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get IsRecycled(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get TimeRecycled(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get TimeToTerminate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get RecycleReasonCode(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get IsPendingRecycle(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get HasAutomaticLifetimeRecycling(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get TimeForAutomaticRecycling(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get MemoryLimitInKB(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get MemoryUsageInKBLastCheck(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get ActivationLimit(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get NumActivationsLastReported(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get CallLimit(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get NumCallsLastReported(): number {
    return this.view.getUint32(68, true);
  }

  // 0x00: i32
  set IsRecyclable(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set IsRecycled(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set TimeRecycled(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set TimeToTerminate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set RecycleReasonCode(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set IsPendingRecycle(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set HasAutomaticLifetimeRecycling(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set TimeForAutomaticRecycling(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set MemoryLimitInKB(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set MemoryUsageInKBLastCheck(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set ActivationLimit(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set NumActivationsLastReported(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set CallLimit(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set NumCallsLastReported(value: number) {
    this.view.setUint32(68, value, true);
  }
}

/**
 * Windows.Win32.System.ComponentServices.ApplicationSummary (size: 48)
 */
export interface ApplicationSummary {
  /** System.Guid */
  ApplicationInstanceId: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  PartitionId: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  ApplicationId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.ComponentServices.COMPLUS_APPTYPE */
  Type: COMPLUS_APPTYPE;
  /** Windows.Win32.Foundation.PWSTR */
  ApplicationName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  NumTrackedComponents: number;
  /** u32 */
  NumComponentInstances: number;
}

export const sizeofApplicationSummary = 48;

export function allocApplicationSummary(data?: Partial<ApplicationSummary>): Uint8Array {
  const buf = new Uint8Array(sizeofApplicationSummary);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ApplicationInstanceId !== undefined) view.setBigUint64(0, data.ApplicationInstanceId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ApplicationInstanceId))), true);
  // 0x08: pointer
  if (data?.PartitionId !== undefined) view.setBigUint64(8, data.PartitionId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PartitionId))), true);
  // 0x10: pointer
  if (data?.ApplicationId !== undefined) view.setBigUint64(16, data.ApplicationId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ApplicationId))), true);
  // 0x18: i32
  if (data?.Type !== undefined) view.setInt32(24, Number(data.Type), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.ApplicationName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.ApplicationName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: u32
  if (data?.NumTrackedComponents !== undefined) view.setUint32(40, Number(data.NumTrackedComponents), true);
  // 0x2c: u32
  if (data?.NumComponentInstances !== undefined) view.setUint32(44, Number(data.NumComponentInstances), true);
  return buf;
}

export class ApplicationSummaryView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ApplicationInstanceId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get PartitionId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ApplicationId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get Type(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  get ApplicationName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get NumTrackedComponents(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get NumComponentInstances(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: pointer
  set ApplicationInstanceId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set PartitionId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ApplicationId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set Type(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  set ApplicationName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: u32
  set NumTrackedComponents(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set NumComponentInstances(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.System.ComponentServices.ComponentSummary (size: 48)
 */
export interface ComponentSummary {
  /** System.Guid */
  ApplicationInstanceId: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  PartitionId: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  ApplicationId: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  Clsid: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  ClassName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  ApplicationName: string | null | Uint8Array | Uint16Array;
}

export const sizeofComponentSummary = 48;

export function allocComponentSummary(data?: Partial<ComponentSummary>): Uint8Array {
  const buf = new Uint8Array(sizeofComponentSummary);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ApplicationInstanceId !== undefined) view.setBigUint64(0, data.ApplicationInstanceId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ApplicationInstanceId))), true);
  // 0x08: pointer
  if (data?.PartitionId !== undefined) view.setBigUint64(8, data.PartitionId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PartitionId))), true);
  // 0x10: pointer
  if (data?.ApplicationId !== undefined) view.setBigUint64(16, data.ApplicationId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ApplicationId))), true);
  // 0x18: pointer
  if (data?.Clsid !== undefined) view.setBigUint64(24, data.Clsid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Clsid))), true);
  // 0x20: buffer
  if (data?.ClassName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.ClassName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.ApplicationName !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.ApplicationName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  return buf;
}

export class ComponentSummaryView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ApplicationInstanceId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get PartitionId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ApplicationId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Clsid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get ClassName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get ApplicationName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ApplicationInstanceId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set PartitionId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ApplicationId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Clsid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: buffer
  set ClassName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set ApplicationName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }
}

/**
 * Windows.Win32.System.ComponentServices.ComponentStatistics (size: 56)
 */
export interface ComponentStatistics {
  /** u32 */
  NumInstances: number;
  /** u32 */
  NumBoundReferences: number;
  /** u32 */
  NumPooledObjects: number;
  /** u32 */
  NumObjectsInCall: number;
  /** u32 */
  AvgResponseTimeInMs: number;
  /** u32 */
  NumCallsCompletedRecent: number;
  /** u32 */
  NumCallsFailedRecent: number;
  /** u32 */
  NumCallsCompletedTotal: number;
  /** u32 */
  NumCallsFailedTotal: number;
  /** u32 */
  Reserved1: number;
  /** u32 */
  Reserved2: number;
  /** u32 */
  Reserved3: number;
  /** u32 */
  Reserved4: number;
}

export const sizeofComponentStatistics = 56;

export function allocComponentStatistics(data?: Partial<ComponentStatistics>): Uint8Array {
  const buf = new Uint8Array(sizeofComponentStatistics);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumInstances !== undefined) view.setUint32(0, Number(data.NumInstances), true);
  // 0x04: u32
  if (data?.NumBoundReferences !== undefined) view.setUint32(4, Number(data.NumBoundReferences), true);
  // 0x08: u32
  if (data?.NumPooledObjects !== undefined) view.setUint32(8, Number(data.NumPooledObjects), true);
  // 0x0c: u32
  if (data?.NumObjectsInCall !== undefined) view.setUint32(12, Number(data.NumObjectsInCall), true);
  // 0x10: u32
  if (data?.AvgResponseTimeInMs !== undefined) view.setUint32(16, Number(data.AvgResponseTimeInMs), true);
  // 0x14: u32
  if (data?.NumCallsCompletedRecent !== undefined) view.setUint32(20, Number(data.NumCallsCompletedRecent), true);
  // 0x18: u32
  if (data?.NumCallsFailedRecent !== undefined) view.setUint32(24, Number(data.NumCallsFailedRecent), true);
  // 0x1c: u32
  if (data?.NumCallsCompletedTotal !== undefined) view.setUint32(28, Number(data.NumCallsCompletedTotal), true);
  // 0x20: u32
  if (data?.NumCallsFailedTotal !== undefined) view.setUint32(32, Number(data.NumCallsFailedTotal), true);
  // 0x24: u32
  if (data?.Reserved1 !== undefined) view.setUint32(36, Number(data.Reserved1), true);
  // 0x28: u32
  if (data?.Reserved2 !== undefined) view.setUint32(40, Number(data.Reserved2), true);
  // 0x2c: u32
  if (data?.Reserved3 !== undefined) view.setUint32(44, Number(data.Reserved3), true);
  // 0x30: u32
  if (data?.Reserved4 !== undefined) view.setUint32(48, Number(data.Reserved4), true);
  // 0x34: pad4
  return buf;
}

export class ComponentStatisticsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumInstances(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NumBoundReferences(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get NumPooledObjects(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get NumObjectsInCall(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get AvgResponseTimeInMs(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get NumCallsCompletedRecent(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get NumCallsFailedRecent(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get NumCallsCompletedTotal(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get NumCallsFailedTotal(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get Reserved1(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get Reserved2(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get Reserved3(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get Reserved4(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x00: u32
  set NumInstances(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NumBoundReferences(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set NumPooledObjects(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set NumObjectsInCall(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set AvgResponseTimeInMs(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set NumCallsCompletedRecent(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set NumCallsFailedRecent(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set NumCallsCompletedTotal(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set NumCallsFailedTotal(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set Reserved1(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set Reserved2(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set Reserved3(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set Reserved4(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.System.ComponentServices.ComponentHangMonitorInfo (size: 16)
 */
export interface ComponentHangMonitorInfo {
  /** Windows.Win32.Foundation.BOOL */
  IsMonitored: boolean;
  /** Windows.Win32.Foundation.BOOL */
  TerminateOnHang: boolean;
  /** u32 */
  AvgCallThresholdInMs: number;
}

export const sizeofComponentHangMonitorInfo = 16;

export function allocComponentHangMonitorInfo(data?: Partial<ComponentHangMonitorInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofComponentHangMonitorInfo);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.IsMonitored !== undefined) view.setInt32(0, Number(data.IsMonitored), true);
  // 0x04: i32
  if (data?.TerminateOnHang !== undefined) view.setInt32(4, Number(data.TerminateOnHang), true);
  // 0x08: u32
  if (data?.AvgCallThresholdInMs !== undefined) view.setUint32(8, Number(data.AvgCallThresholdInMs), true);
  // 0x0c: pad4
  return buf;
}

export class ComponentHangMonitorInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get IsMonitored(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get TerminateOnHang(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get AvgCallThresholdInMs(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i32
  set IsMonitored(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set TerminateOnHang(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set AvgCallThresholdInMs(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Com.BLOB (size: 16)
 */
export interface BLOB {
  /** u32 */
  cbSize: number;
  /** ptr */
  pBlobData: Deno.PointerValue | Uint8Array;
}

export const sizeofBLOB = 16;

export function allocBLOB(data?: Partial<BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofBLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pBlobData !== undefined) view.setBigUint64(8, data.pBlobData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pBlobData))), true);
  return buf;
}

export class BLOBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pBlobData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pBlobData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.ComponentServices.CrmLogRecordRead (size: 16)
 */
export interface CrmLogRecordRead {
  /** u32 */
  dwCrmFlags: number;
  /** u32 */
  dwSequenceNumber: number;
  /** Windows.Win32.System.Com.BLOB */
  blobUserData: Uint8Array | Deno.PointerValue;
}

export const sizeofCrmLogRecordRead = 16;

export function allocCrmLogRecordRead(data?: Partial<CrmLogRecordRead>): Uint8Array {
  const buf = new Uint8Array(sizeofCrmLogRecordRead);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwCrmFlags !== undefined) view.setUint32(0, Number(data.dwCrmFlags), true);
  // 0x04: u32
  if (data?.dwSequenceNumber !== undefined) view.setUint32(4, Number(data.dwSequenceNumber), true);
  // 0x08: pointer
  if (data?.blobUserData !== undefined) view.setBigUint64(8, data.blobUserData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.blobUserData))), true);
  return buf;
}

export class CrmLogRecordReadView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwCrmFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwSequenceNumber(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get blobUserData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwCrmFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwSequenceNumber(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set blobUserData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type HRESULT = number;

// Native Libraries

try {
  var libOLE32_dll = Deno.dlopen("OLE32.dll", {
    CoGetDefaultContext: {
      parameters: ["i32", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libcomsvcs_dll = Deno.dlopen("comsvcs.dll", {
    CoCreateActivity: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    CoEnterServiceDomain: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    CoLeaveServiceDomain: {
      parameters: ["pointer"],
      result: "void",
      optional: true,
    },
    GetManagedExtensions: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    SafeRef: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    RecycleSurrogate: {
      parameters: ["i32"],
      result: "pointer",
      optional: true,
    },
    MTSCreateActivity: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libMTxDM_dll = Deno.dlopen("MTxDM.dll", {
    GetDispenserManager: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function CoGetDefaultContext(
  aptType: APTTYPE /* Windows.Win32.System.Com.APTTYPE */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppv: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libOLE32_dll.CoGetDefaultContext!(aptType, util.toPointer(riid), util.toPointer(ppv));
}

export function CoCreateActivity(
  pIUnknown: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppObj: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libcomsvcs_dll.CoCreateActivity!(util.toPointer(pIUnknown), util.toPointer(riid), util.toPointer(ppObj));
}

export function CoEnterServiceDomain(
  pConfigObject: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libcomsvcs_dll.CoEnterServiceDomain!(util.toPointer(pConfigObject));
}

export function CoLeaveServiceDomain(
  pUnkStatus: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
): void /* void */ {
  return libcomsvcs_dll.CoLeaveServiceDomain!(util.toPointer(pUnkStatus));
}

export function GetManagedExtensions(
  dwExts: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libcomsvcs_dll.GetManagedExtensions!(util.toPointer(dwExts));
}

export function SafeRef(
  rid: Deno.PointerValue | Uint8Array /* ptr */,
  pUnk: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
): Deno.PointerValue /* ptr */ {
  return libcomsvcs_dll.SafeRef!(util.toPointer(rid), util.toPointer(pUnk));
}

export function RecycleSurrogate(
  lReasonCode: number /* i32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libcomsvcs_dll.RecycleSurrogate!(lReasonCode);
}

export function MTSCreateActivity(
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppobj: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libcomsvcs_dll.MTSCreateActivity!(util.toPointer(riid), util.toPointer(ppobj));
}

export function GetDispenserManager(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMTxDM_dll.GetDispenserManager!(util.toPointer(param0));
}

