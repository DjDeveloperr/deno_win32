/// Auto-generated by Deno Win32: Windows.Win32.System.EventLog.Apis

import * as util from "../../util.ts";

// Enums
export type REPORT_EVENT_TYPE = number;
export type READ_EVENT_LOG_READ_FLAGS = number;
export type EVT_VARIANT_TYPE = number;
export type EVT_LOGIN_CLASS = number;
export type EVT_RPC_LOGIN_FLAGS = number;
export type EVT_QUERY_FLAGS = number;
export type EVT_SEEK_FLAGS = number;
export type EVT_SUBSCRIBE_FLAGS = number;
export type EVT_SUBSCRIBE_NOTIFY_ACTION = number;
export type EVT_SYSTEM_PROPERTY_ID = number;
export type EVT_RENDER_CONTEXT_FLAGS = number;
export type EVT_RENDER_FLAGS = number;
export type EVT_FORMAT_MESSAGE_FLAGS = number;
export type EVT_OPEN_LOG_FLAGS = number;
export type EVT_LOG_PROPERTY_ID = number;
export type EVT_EXPORTLOG_FLAGS = number;
export type EVT_CHANNEL_CONFIG_PROPERTY_ID = number;
export type EVT_CHANNEL_TYPE = number;
export type EVT_CHANNEL_ISOLATION_TYPE = number;
export type EVT_CHANNEL_CLOCK_TYPE = number;
export type EVT_CHANNEL_SID_TYPE = number;
export type EVT_CHANNEL_REFERENCE_FLAGS = number;
export type EVT_PUBLISHER_METADATA_PROPERTY_ID = number;
export type EVT_EVENT_METADATA_PROPERTY_ID = number;
export type EVT_QUERY_PROPERTY_ID = number;
export type EVT_EVENT_PROPERTY_ID = number;

// Constants
export const EVENTLOG_SUCCESS = 0;
export const EVENTLOG_AUDIT_FAILURE = 16;
export const EVENTLOG_AUDIT_SUCCESS = 8;
export const EVENTLOG_ERROR_TYPE = 1;
export const EVENTLOG_INFORMATION_TYPE = 4;
export const EVENTLOG_WARNING_TYPE = 2;
export const EVENTLOG_SEEK_READ = 2;
export const EVENTLOG_SEQUENTIAL_READ = 1;
export const EVT_VARIANT_TYPE_MASK = 127;
export const EVT_VARIANT_TYPE_ARRAY = 128;
export const EVT_READ_ACCESS = 1;
export const EVT_WRITE_ACCESS = 2;
export const EVT_CLEAR_ACCESS = 4;
export const EVT_ALL_ACCESS = 7;
export const EvtVarTypeNull = 0;
export const EvtVarTypeString = 1;
export const EvtVarTypeAnsiString = 2;
export const EvtVarTypeSByte = 3;
export const EvtVarTypeByte = 4;
export const EvtVarTypeInt16 = 5;
export const EvtVarTypeUInt16 = 6;
export const EvtVarTypeInt32 = 7;
export const EvtVarTypeUInt32 = 8;
export const EvtVarTypeInt64 = 9;
export const EvtVarTypeUInt64 = 10;
export const EvtVarTypeSingle = 11;
export const EvtVarTypeDouble = 12;
export const EvtVarTypeBoolean = 13;
export const EvtVarTypeBinary = 14;
export const EvtVarTypeGuid = 15;
export const EvtVarTypeSizeT = 16;
export const EvtVarTypeFileTime = 17;
export const EvtVarTypeSysTime = 18;
export const EvtVarTypeSid = 19;
export const EvtVarTypeHexInt32 = 20;
export const EvtVarTypeHexInt64 = 21;
export const EvtVarTypeEvtHandle = 32;
export const EvtVarTypeEvtXml = 35;
export const EvtRpcLogin = 1;
export const EvtRpcLoginAuthDefault = 0;
export const EvtRpcLoginAuthNegotiate = 1;
export const EvtRpcLoginAuthKerberos = 2;
export const EvtRpcLoginAuthNTLM = 3;
export const EvtQueryChannelPath = 1;
export const EvtQueryFilePath = 2;
export const EvtQueryForwardDirection = 256;
export const EvtQueryReverseDirection = 512;
export const EvtQueryTolerateQueryErrors = 4096;
export const EvtSeekRelativeToFirst = 1;
export const EvtSeekRelativeToLast = 2;
export const EvtSeekRelativeToCurrent = 3;
export const EvtSeekRelativeToBookmark = 4;
export const EvtSeekOriginMask = 7;
export const EvtSeekStrict = 65536;
export const EvtSubscribeToFutureEvents = 1;
export const EvtSubscribeStartAtOldestRecord = 2;
export const EvtSubscribeStartAfterBookmark = 3;
export const EvtSubscribeOriginMask = 3;
export const EvtSubscribeTolerateQueryErrors = 4096;
export const EvtSubscribeStrict = 65536;
export const EvtSubscribeActionError = 0;
export const EvtSubscribeActionDeliver = 1;
export const EvtSystemProviderName = 0;
export const EvtSystemProviderGuid = 1;
export const EvtSystemEventID = 2;
export const EvtSystemQualifiers = 3;
export const EvtSystemLevel = 4;
export const EvtSystemTask = 5;
export const EvtSystemOpcode = 6;
export const EvtSystemKeywords = 7;
export const EvtSystemTimeCreated = 8;
export const EvtSystemEventRecordId = 9;
export const EvtSystemActivityID = 10;
export const EvtSystemRelatedActivityID = 11;
export const EvtSystemProcessID = 12;
export const EvtSystemThreadID = 13;
export const EvtSystemChannel = 14;
export const EvtSystemComputer = 15;
export const EvtSystemUserID = 16;
export const EvtSystemVersion = 17;
export const EvtSystemPropertyIdEND = 18;
export const EvtRenderContextValues = 0;
export const EvtRenderContextSystem = 1;
export const EvtRenderContextUser = 2;
export const EvtRenderEventValues = 0;
export const EvtRenderEventXml = 1;
export const EvtRenderBookmark = 2;
export const EvtFormatMessageEvent = 1;
export const EvtFormatMessageLevel = 2;
export const EvtFormatMessageTask = 3;
export const EvtFormatMessageOpcode = 4;
export const EvtFormatMessageKeyword = 5;
export const EvtFormatMessageChannel = 6;
export const EvtFormatMessageProvider = 7;
export const EvtFormatMessageId = 8;
export const EvtFormatMessageXml = 9;
export const EvtOpenChannelPath = 1;
export const EvtOpenFilePath = 2;
export const EvtLogCreationTime = 0;
export const EvtLogLastAccessTime = 1;
export const EvtLogLastWriteTime = 2;
export const EvtLogFileSize = 3;
export const EvtLogAttributes = 4;
export const EvtLogNumberOfLogRecords = 5;
export const EvtLogOldestRecordNumber = 6;
export const EvtLogFull = 7;
export const EvtExportLogChannelPath = 1;
export const EvtExportLogFilePath = 2;
export const EvtExportLogTolerateQueryErrors = 4096;
export const EvtExportLogOverwrite = 8192;
export const EvtChannelConfigEnabled = 0;
export const EvtChannelConfigIsolation = 1;
export const EvtChannelConfigType = 2;
export const EvtChannelConfigOwningPublisher = 3;
export const EvtChannelConfigClassicEventlog = 4;
export const EvtChannelConfigAccess = 5;
export const EvtChannelLoggingConfigRetention = 6;
export const EvtChannelLoggingConfigAutoBackup = 7;
export const EvtChannelLoggingConfigMaxSize = 8;
export const EvtChannelLoggingConfigLogFilePath = 9;
export const EvtChannelPublishingConfigLevel = 10;
export const EvtChannelPublishingConfigKeywords = 11;
export const EvtChannelPublishingConfigControlGuid = 12;
export const EvtChannelPublishingConfigBufferSize = 13;
export const EvtChannelPublishingConfigMinBuffers = 14;
export const EvtChannelPublishingConfigMaxBuffers = 15;
export const EvtChannelPublishingConfigLatency = 16;
export const EvtChannelPublishingConfigClockType = 17;
export const EvtChannelPublishingConfigSidType = 18;
export const EvtChannelPublisherList = 19;
export const EvtChannelPublishingConfigFileMax = 20;
export const EvtChannelConfigPropertyIdEND = 21;
export const EvtChannelTypeAdmin = 0;
export const EvtChannelTypeOperational = 1;
export const EvtChannelTypeAnalytic = 2;
export const EvtChannelTypeDebug = 3;
export const EvtChannelIsolationTypeApplication = 0;
export const EvtChannelIsolationTypeSystem = 1;
export const EvtChannelIsolationTypeCustom = 2;
export const EvtChannelClockTypeSystemTime = 0;
export const EvtChannelClockTypeQPC = 1;
export const EvtChannelSidTypeNone = 0;
export const EvtChannelSidTypePublishing = 1;
export const EvtChannelReferenceImported = 1;
export const EvtPublisherMetadataPublisherGuid = 0;
export const EvtPublisherMetadataResourceFilePath = 1;
export const EvtPublisherMetadataParameterFilePath = 2;
export const EvtPublisherMetadataMessageFilePath = 3;
export const EvtPublisherMetadataHelpLink = 4;
export const EvtPublisherMetadataPublisherMessageID = 5;
export const EvtPublisherMetadataChannelReferences = 6;
export const EvtPublisherMetadataChannelReferencePath = 7;
export const EvtPublisherMetadataChannelReferenceIndex = 8;
export const EvtPublisherMetadataChannelReferenceID = 9;
export const EvtPublisherMetadataChannelReferenceFlags = 10;
export const EvtPublisherMetadataChannelReferenceMessageID = 11;
export const EvtPublisherMetadataLevels = 12;
export const EvtPublisherMetadataLevelName = 13;
export const EvtPublisherMetadataLevelValue = 14;
export const EvtPublisherMetadataLevelMessageID = 15;
export const EvtPublisherMetadataTasks = 16;
export const EvtPublisherMetadataTaskName = 17;
export const EvtPublisherMetadataTaskEventGuid = 18;
export const EvtPublisherMetadataTaskValue = 19;
export const EvtPublisherMetadataTaskMessageID = 20;
export const EvtPublisherMetadataOpcodes = 21;
export const EvtPublisherMetadataOpcodeName = 22;
export const EvtPublisherMetadataOpcodeValue = 23;
export const EvtPublisherMetadataOpcodeMessageID = 24;
export const EvtPublisherMetadataKeywords = 25;
export const EvtPublisherMetadataKeywordName = 26;
export const EvtPublisherMetadataKeywordValue = 27;
export const EvtPublisherMetadataKeywordMessageID = 28;
export const EvtPublisherMetadataPropertyIdEND = 29;
export const EventMetadataEventID = 0;
export const EventMetadataEventVersion = 1;
export const EventMetadataEventChannel = 2;
export const EventMetadataEventLevel = 3;
export const EventMetadataEventOpcode = 4;
export const EventMetadataEventTask = 5;
export const EventMetadataEventKeyword = 6;
export const EventMetadataEventMessageID = 7;
export const EventMetadataEventTemplate = 8;
export const EvtEventMetadataPropertyIdEND = 9;
export const EvtQueryNames = 0;
export const EvtQueryStatuses = 1;
export const EvtQueryPropertyIdEND = 2;
export const EvtEventQueryIDs = 0;
export const EvtEventPath = 1;
export const EvtEventPropertyIdEND = 2;

// Structs

export type EventLogHandle = number | bigint;

export type EventSourceHandle = number | bigint;

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: number | bigint;
  /** u64 */
  Region: number | bigint;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, util.toBigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, util.toBigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get Region(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u64
  set Alignment(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set Region(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : util.toBigInt(util.toPointer(data.X)), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.EventLog.EVT_VARIANT (size: 16)
 */
export interface EVT_VARIANT {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Count: number;
  /** u32 */
  Type: number;
}

export const sizeofEVT_VARIANT = 16;

export function allocEVT_VARIANT(data?: Partial<EVT_VARIANT>): Uint8Array {
  const buf = new Uint8Array(sizeofEVT_VARIANT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u32
  if (data?.Count !== undefined) view.setUint32(8, Number(data.Count), true);
  // 0x0c: u32
  if (data?.Type !== undefined) view.setUint32(12, Number(data.Type), true);
  return buf;
}

export class EVT_VARIANTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Count(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Type(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set Count(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Type(value: number) {
    this.view.setUint32(12, value, true);
  }
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.System.EventLog.EVT_RPC_LOGIN (size: 40)
 */
export interface EVT_RPC_LOGIN {
  /** Windows.Win32.Foundation.PWSTR */
  Server: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  User: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  Domain: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  Password: string | null | Uint8Array | Uint16Array;
  /** u32 */
  Flags: number;
}

export const sizeofEVT_RPC_LOGIN = 40;

export function allocEVT_RPC_LOGIN(data?: Partial<EVT_RPC_LOGIN>): Uint8Array {
  const buf = new Uint8Array(sizeofEVT_RPC_LOGIN);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Server !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.Server);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.User !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.User);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.Domain !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.Domain);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.Password !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.Password);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.Flags !== undefined) view.setUint32(32, Number(data.Flags), true);
  // 0x24: pad4
  return buf;
}

export class EVT_RPC_LOGINView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Server(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get User(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get Domain(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get Password(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get Flags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: buffer
  set Server(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set User(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set Domain(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, util.toBigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: buffer
  set Password(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, util.toBigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: u32
  set Flags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.System.EventLog.EVENTLOGRECORD (size: 56)
 */
export interface EVENTLOGRECORD {
  /** u32 */
  Length: number;
  /** u32 */
  Reserved: number;
  /** u32 */
  RecordNumber: number;
  /** u32 */
  TimeGenerated: number;
  /** u32 */
  TimeWritten: number;
  /** u32 */
  EventID: number;
  /** Windows.Win32.System.EventLog.REPORT_EVENT_TYPE */
  EventType: REPORT_EVENT_TYPE;
  /** u16 */
  NumStrings: number;
  /** u16 */
  EventCategory: number;
  /** u16 */
  ReservedFlags: number;
  /** u32 */
  ClosingRecordNumber: number;
  /** u32 */
  StringOffset: number;
  /** u32 */
  UserSidLength: number;
  /** u32 */
  UserSidOffset: number;
  /** u32 */
  DataLength: number;
  /** u32 */
  DataOffset: number;
}

export const sizeofEVENTLOGRECORD = 56;

export function allocEVENTLOGRECORD(data?: Partial<EVENTLOGRECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofEVENTLOGRECORD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  // 0x08: u32
  if (data?.RecordNumber !== undefined) view.setUint32(8, Number(data.RecordNumber), true);
  // 0x0c: u32
  if (data?.TimeGenerated !== undefined) view.setUint32(12, Number(data.TimeGenerated), true);
  // 0x10: u32
  if (data?.TimeWritten !== undefined) view.setUint32(16, Number(data.TimeWritten), true);
  // 0x14: u32
  if (data?.EventID !== undefined) view.setUint32(20, Number(data.EventID), true);
  // 0x18: u16
  if (data?.EventType !== undefined) view.setUint16(24, Number(data.EventType), true);
  // 0x1a: u16
  if (data?.NumStrings !== undefined) view.setUint16(26, Number(data.NumStrings), true);
  // 0x1c: u16
  if (data?.EventCategory !== undefined) view.setUint16(28, Number(data.EventCategory), true);
  // 0x1e: u16
  if (data?.ReservedFlags !== undefined) view.setUint16(30, Number(data.ReservedFlags), true);
  // 0x20: u32
  if (data?.ClosingRecordNumber !== undefined) view.setUint32(32, Number(data.ClosingRecordNumber), true);
  // 0x24: u32
  if (data?.StringOffset !== undefined) view.setUint32(36, Number(data.StringOffset), true);
  // 0x28: u32
  if (data?.UserSidLength !== undefined) view.setUint32(40, Number(data.UserSidLength), true);
  // 0x2c: u32
  if (data?.UserSidOffset !== undefined) view.setUint32(44, Number(data.UserSidOffset), true);
  // 0x30: u32
  if (data?.DataLength !== undefined) view.setUint32(48, Number(data.DataLength), true);
  // 0x34: u32
  if (data?.DataOffset !== undefined) view.setUint32(52, Number(data.DataOffset), true);
  return buf;
}

export class EVENTLOGRECORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Length(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Reserved(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get RecordNumber(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get TimeGenerated(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get TimeWritten(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get EventID(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u16
  get EventType(): number {
    return this.view.getUint16(24, true);
  }

  // 0x1a: u16
  get NumStrings(): number {
    return this.view.getUint16(26, true);
  }

  // 0x1c: u16
  get EventCategory(): number {
    return this.view.getUint16(28, true);
  }

  // 0x1e: u16
  get ReservedFlags(): number {
    return this.view.getUint16(30, true);
  }

  // 0x20: u32
  get ClosingRecordNumber(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get StringOffset(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get UserSidLength(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get UserSidOffset(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get DataLength(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get DataOffset(): number {
    return this.view.getUint32(52, true);
  }

  // 0x00: u32
  set Length(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Reserved(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set RecordNumber(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set TimeGenerated(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set TimeWritten(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set EventID(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u16
  set EventType(value: number) {
    this.view.setUint16(24, value, true);
  }

  // 0x1a: u16
  set NumStrings(value: number) {
    this.view.setUint16(26, value, true);
  }

  // 0x1c: u16
  set EventCategory(value: number) {
    this.view.setUint16(28, value, true);
  }

  // 0x1e: u16
  set ReservedFlags(value: number) {
    this.view.setUint16(30, value, true);
  }

  // 0x20: u32
  set ClosingRecordNumber(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set StringOffset(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set UserSidLength(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set UserSidOffset(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set DataLength(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set DataOffset(value: number) {
    this.view.setUint32(52, value, true);
  }
}

/**
 * Windows.Win32.System.EventLog.EVENTSFORLOGFILE (size: 32)
 */
export interface EVENTSFORLOGFILE {
  /** u32 */
  ulSize: number;
  /** array */
  szLogicalLogFile: Deno.PointerValue | null;
  /** u32 */
  ulNumRecords: number;
  /** array */
  pEventLogRecords: Deno.PointerValue | null;
}

export const sizeofEVENTSFORLOGFILE = 32;

export function allocEVENTSFORLOGFILE(data?: Partial<EVENTSFORLOGFILE>): Uint8Array {
  const buf = new Uint8Array(sizeofEVENTSFORLOGFILE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulSize !== undefined) view.setUint32(0, Number(data.ulSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.szLogicalLogFile !== undefined) view.setBigUint64(8, data.szLogicalLogFile === null ? 0n : util.toBigInt(util.toPointer(data.szLogicalLogFile)), true);
  // 0x10: u32
  if (data?.ulNumRecords !== undefined) view.setUint32(16, Number(data.ulNumRecords), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pEventLogRecords !== undefined) view.setBigUint64(24, data.pEventLogRecords === null ? 0n : util.toBigInt(util.toPointer(data.pEventLogRecords)), true);
  return buf;
}

export class EVENTSFORLOGFILEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get szLogicalLogFile(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get ulNumRecords(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pEventLogRecords(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ulSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set szLogicalLogFile(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set ulNumRecords(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pEventLogRecords(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.EventLog.EVENTLOG_FULL_INFORMATION (size: 8)
 */
export interface EVENTLOG_FULL_INFORMATION {
  /** u32 */
  dwFull: number;
}

export const sizeofEVENTLOG_FULL_INFORMATION = 8;

export function allocEVENTLOG_FULL_INFORMATION(data?: Partial<EVENTLOG_FULL_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofEVENTLOG_FULL_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFull !== undefined) view.setUint32(0, Number(data.dwFull), true);
  // 0x04: pad4
  return buf;
}

export class EVENTLOG_FULL_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFull(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set dwFull(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

export type BOOL = number;

export type HANDLE = number | bigint;

export type PSTR = Deno.PointerValue | Uint8Array | null;

export type PSID = Deno.PointerValue | Uint8Array | null;

// Native Libraries

try {
  var libwevtapi_dll = Deno.dlopen("wevtapi.dll", {
    EvtOpenSession: {
      parameters: ["i32", "pointer", "u32", "u32"],
      result: "isize",
    },
    EvtClose: {
      parameters: ["isize"],
      result: "i32",
    },
    EvtCancel: {
      parameters: ["isize"],
      result: "i32",
    },
    EvtGetExtendedStatus: {
      parameters: ["u32", "buffer", "pointer"],
      result: "u32",
    },
    EvtQuery: {
      parameters: ["isize", "buffer", "buffer", "u32"],
      result: "isize",
    },
    EvtNext: {
      parameters: ["isize", "u32", "pointer", "u32", "u32", "pointer"],
      result: "i32",
    },
    EvtSeek: {
      parameters: ["isize", "i64", "isize", "u32", "u32"],
      result: "i32",
    },
    EvtSubscribe: {
      parameters: ["isize", "pointer", "buffer", "buffer", "isize", "pointer", "pointer", "u32"],
      result: "isize",
    },
    EvtCreateRenderContext: {
      parameters: ["u32", "pointer", "u32"],
      result: "isize",
    },
    EvtRender: {
      parameters: ["isize", "isize", "u32", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    EvtFormatMessage: {
      parameters: ["isize", "isize", "u32", "u32", "pointer", "u32", "u32", "buffer", "pointer"],
      result: "i32",
    },
    EvtOpenLog: {
      parameters: ["isize", "buffer", "u32"],
      result: "isize",
    },
    EvtGetLogInfo: {
      parameters: ["isize", "i32", "u32", "pointer", "pointer"],
      result: "i32",
    },
    EvtClearLog: {
      parameters: ["isize", "buffer", "buffer", "u32"],
      result: "i32",
    },
    EvtExportLog: {
      parameters: ["isize", "buffer", "buffer", "buffer", "u32"],
      result: "i32",
    },
    EvtArchiveExportedLog: {
      parameters: ["isize", "buffer", "u32", "u32"],
      result: "i32",
    },
    EvtOpenChannelEnum: {
      parameters: ["isize", "u32"],
      result: "isize",
    },
    EvtNextChannelPath: {
      parameters: ["isize", "u32", "buffer", "pointer"],
      result: "i32",
    },
    EvtOpenChannelConfig: {
      parameters: ["isize", "buffer", "u32"],
      result: "isize",
    },
    EvtSaveChannelConfig: {
      parameters: ["isize", "u32"],
      result: "i32",
    },
    EvtSetChannelConfigProperty: {
      parameters: ["isize", "i32", "u32", "pointer"],
      result: "i32",
    },
    EvtGetChannelConfigProperty: {
      parameters: ["isize", "i32", "u32", "u32", "pointer", "pointer"],
      result: "i32",
    },
    EvtOpenPublisherEnum: {
      parameters: ["isize", "u32"],
      result: "isize",
    },
    EvtNextPublisherId: {
      parameters: ["isize", "u32", "buffer", "pointer"],
      result: "i32",
    },
    EvtOpenPublisherMetadata: {
      parameters: ["isize", "buffer", "buffer", "u32", "u32"],
      result: "isize",
    },
    EvtGetPublisherMetadataProperty: {
      parameters: ["isize", "i32", "u32", "u32", "pointer", "pointer"],
      result: "i32",
    },
    EvtOpenEventMetadataEnum: {
      parameters: ["isize", "u32"],
      result: "isize",
    },
    EvtNextEventMetadata: {
      parameters: ["isize", "u32"],
      result: "isize",
    },
    EvtGetEventMetadataProperty: {
      parameters: ["isize", "i32", "u32", "u32", "pointer", "pointer"],
      result: "i32",
    },
    EvtGetObjectArraySize: {
      parameters: ["isize", "pointer"],
      result: "i32",
    },
    EvtGetObjectArrayProperty: {
      parameters: ["isize", "u32", "u32", "u32", "u32", "pointer", "pointer"],
      result: "i32",
    },
    EvtGetQueryInfo: {
      parameters: ["isize", "i32", "u32", "pointer", "pointer"],
      result: "i32",
    },
    EvtCreateBookmark: {
      parameters: ["buffer"],
      result: "isize",
    },
    EvtUpdateBookmark: {
      parameters: ["isize", "isize"],
      result: "i32",
    },
    EvtGetEventInfo: {
      parameters: ["isize", "i32", "u32", "pointer", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libADVAPI32_dll = Deno.dlopen("ADVAPI32.dll", {
    ClearEventLogA: {
      parameters: ["pointer", "buffer"],
      result: "i32",
    },
    ClearEventLogW: {
      parameters: ["pointer", "buffer"],
      result: "i32",
    },
    BackupEventLogA: {
      parameters: ["pointer", "buffer"],
      result: "i32",
    },
    BackupEventLogW: {
      parameters: ["pointer", "buffer"],
      result: "i32",
    },
    CloseEventLog: {
      parameters: ["pointer"],
      result: "i32",
    },
    DeregisterEventSource: {
      parameters: ["pointer"],
      result: "i32",
    },
    NotifyChangeEventLog: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetNumberOfEventLogRecords: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetOldestEventLogRecord: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    OpenEventLogA: {
      parameters: ["buffer", "buffer"],
      result: "pointer",
    },
    OpenEventLogW: {
      parameters: ["buffer", "buffer"],
      result: "pointer",
    },
    RegisterEventSourceA: {
      parameters: ["buffer", "buffer"],
      result: "pointer",
    },
    RegisterEventSourceW: {
      parameters: ["buffer", "buffer"],
      result: "pointer",
    },
    OpenBackupEventLogA: {
      parameters: ["buffer", "buffer"],
      result: "pointer",
    },
    OpenBackupEventLogW: {
      parameters: ["buffer", "buffer"],
      result: "pointer",
    },
    ReadEventLogA: {
      parameters: ["pointer", "u32", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    ReadEventLogW: {
      parameters: ["pointer", "u32", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    ReportEventA: {
      parameters: ["pointer", "u16", "u16", "u32", "pointer", "u16", "u32", "pointer", "pointer"],
      result: "i32",
    },
    ReportEventW: {
      parameters: ["pointer", "u16", "u16", "u32", "pointer", "u16", "u32", "pointer", "pointer"],
      result: "i32",
    },
    GetEventLogInformation: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function EvtOpenSession(
  LoginClass: EVT_LOGIN_CLASS /* Windows.Win32.System.EventLog.EVT_LOGIN_CLASS */,
  Login: Deno.PointerValue | Uint8Array | null /* ptr */,
  Timeout: number /* u32 */,
  Flags: number /* u32 */,
): number | bigint /* isize */ {
  return libwevtapi_dll.EvtOpenSession(LoginClass, util.toPointer(Login), Timeout, Flags);
}

export function EvtClose(
  Object: number | bigint /* isize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwevtapi_dll.EvtClose(util.toBigInt(util.toPointer(Object))));
}

export function EvtCancel(
  Object: number | bigint /* isize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwevtapi_dll.EvtCancel(util.toBigInt(util.toPointer(Object))));
}

export function EvtGetExtendedStatus(
  BufferSize: number /* u32 */,
  Buffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  BufferUsed: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libwevtapi_dll.EvtGetExtendedStatus(BufferSize, util.pwstrToFfi(Buffer), util.toPointer(BufferUsed));
}

export function EvtQuery(
  Session: number | bigint /* isize */,
  Path: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Query: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
): number | bigint /* isize */ {
  return libwevtapi_dll.EvtQuery(util.toBigInt(util.toPointer(Session)), util.pwstrToFfi(Path), util.pwstrToFfi(Query), Flags);
}

export function EvtNext(
  ResultSet: number | bigint /* isize */,
  EventsSize: number /* u32 */,
  Events: Deno.PointerValue | Uint8Array | null /* ptr */,
  Timeout: number /* u32 */,
  Flags: number /* u32 */,
  Returned: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwevtapi_dll.EvtNext(util.toBigInt(util.toPointer(ResultSet)), EventsSize, util.toPointer(Events), Timeout, Flags, util.toPointer(Returned)));
}

export function EvtSeek(
  ResultSet: number | bigint /* isize */,
  Position: number | bigint /* i64 */,
  Bookmark: number | bigint /* isize */,
  Timeout: number /* u32 */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwevtapi_dll.EvtSeek(util.toBigInt(util.toPointer(ResultSet)), util.toBigInt(util.toPointer(Position)), util.toBigInt(util.toPointer(Bookmark)), Timeout, Flags));
}

export function EvtSubscribe(
  Session: number | bigint /* isize */,
  SignalEvent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ChannelPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Query: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Bookmark: number | bigint /* isize */,
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
  Callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.EventLog.EVT_SUBSCRIBE_CALLBACK */,
  Flags: number /* u32 */,
): number | bigint /* isize */ {
  return libwevtapi_dll.EvtSubscribe(util.toBigInt(util.toPointer(Session)), util.toPointer(SignalEvent), util.pwstrToFfi(ChannelPath), util.pwstrToFfi(Query), util.toBigInt(util.toPointer(Bookmark)), util.toPointer(Context), util.toPointer(Callback), Flags);
}

export function EvtCreateRenderContext(
  ValuePathsCount: number /* u32 */,
  ValuePaths: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
): number | bigint /* isize */ {
  return libwevtapi_dll.EvtCreateRenderContext(ValuePathsCount, util.toPointer(ValuePaths), Flags);
}

export function EvtRender(
  Context: number | bigint /* isize */,
  Fragment: number | bigint /* isize */,
  Flags: number /* u32 */,
  BufferSize: number /* u32 */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferUsed: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwevtapi_dll.EvtRender(util.toBigInt(util.toPointer(Context)), util.toBigInt(util.toPointer(Fragment)), Flags, BufferSize, util.toPointer(Buffer), util.toPointer(BufferUsed), util.toPointer(PropertyCount)));
}

export function EvtFormatMessage(
  PublisherMetadata: number | bigint /* isize */,
  Event: number | bigint /* isize */,
  MessageId: number /* u32 */,
  ValueCount: number /* u32 */,
  Values: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
  BufferSize: number /* u32 */,
  Buffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  BufferUsed: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwevtapi_dll.EvtFormatMessage(util.toBigInt(util.toPointer(PublisherMetadata)), util.toBigInt(util.toPointer(Event)), MessageId, ValueCount, util.toPointer(Values), Flags, BufferSize, util.pwstrToFfi(Buffer), util.toPointer(BufferUsed)));
}

export function EvtOpenLog(
  Session: number | bigint /* isize */,
  Path: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
): number | bigint /* isize */ {
  return libwevtapi_dll.EvtOpenLog(util.toBigInt(util.toPointer(Session)), util.pwstrToFfi(Path), Flags);
}

export function EvtGetLogInfo(
  Log: number | bigint /* isize */,
  PropertyId: EVT_LOG_PROPERTY_ID /* Windows.Win32.System.EventLog.EVT_LOG_PROPERTY_ID */,
  PropertyValueBufferSize: number /* u32 */,
  PropertyValueBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyValueBufferUsed: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwevtapi_dll.EvtGetLogInfo(util.toBigInt(util.toPointer(Log)), PropertyId, PropertyValueBufferSize, util.toPointer(PropertyValueBuffer), util.toPointer(PropertyValueBufferUsed)));
}

export function EvtClearLog(
  Session: number | bigint /* isize */,
  ChannelPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  TargetFilePath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwevtapi_dll.EvtClearLog(util.toBigInt(util.toPointer(Session)), util.pwstrToFfi(ChannelPath), util.pwstrToFfi(TargetFilePath), Flags));
}

export function EvtExportLog(
  Session: number | bigint /* isize */,
  Path: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Query: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  TargetFilePath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwevtapi_dll.EvtExportLog(util.toBigInt(util.toPointer(Session)), util.pwstrToFfi(Path), util.pwstrToFfi(Query), util.pwstrToFfi(TargetFilePath), Flags));
}

export function EvtArchiveExportedLog(
  Session: number | bigint /* isize */,
  LogFilePath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Locale: number /* u32 */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwevtapi_dll.EvtArchiveExportedLog(util.toBigInt(util.toPointer(Session)), util.pwstrToFfi(LogFilePath), Locale, Flags));
}

export function EvtOpenChannelEnum(
  Session: number | bigint /* isize */,
  Flags: number /* u32 */,
): number | bigint /* isize */ {
  return libwevtapi_dll.EvtOpenChannelEnum(util.toBigInt(util.toPointer(Session)), Flags);
}

export function EvtNextChannelPath(
  ChannelEnum: number | bigint /* isize */,
  ChannelPathBufferSize: number /* u32 */,
  ChannelPathBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ChannelPathBufferUsed: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwevtapi_dll.EvtNextChannelPath(util.toBigInt(util.toPointer(ChannelEnum)), ChannelPathBufferSize, util.pwstrToFfi(ChannelPathBuffer), util.toPointer(ChannelPathBufferUsed)));
}

export function EvtOpenChannelConfig(
  Session: number | bigint /* isize */,
  ChannelPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
): number | bigint /* isize */ {
  return libwevtapi_dll.EvtOpenChannelConfig(util.toBigInt(util.toPointer(Session)), util.pwstrToFfi(ChannelPath), Flags);
}

export function EvtSaveChannelConfig(
  ChannelConfig: number | bigint /* isize */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwevtapi_dll.EvtSaveChannelConfig(util.toBigInt(util.toPointer(ChannelConfig)), Flags));
}

export function EvtSetChannelConfigProperty(
  ChannelConfig: number | bigint /* isize */,
  PropertyId: EVT_CHANNEL_CONFIG_PROPERTY_ID /* Windows.Win32.System.EventLog.EVT_CHANNEL_CONFIG_PROPERTY_ID */,
  Flags: number /* u32 */,
  PropertyValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwevtapi_dll.EvtSetChannelConfigProperty(util.toBigInt(util.toPointer(ChannelConfig)), PropertyId, Flags, util.toPointer(PropertyValue)));
}

export function EvtGetChannelConfigProperty(
  ChannelConfig: number | bigint /* isize */,
  PropertyId: EVT_CHANNEL_CONFIG_PROPERTY_ID /* Windows.Win32.System.EventLog.EVT_CHANNEL_CONFIG_PROPERTY_ID */,
  Flags: number /* u32 */,
  PropertyValueBufferSize: number /* u32 */,
  PropertyValueBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyValueBufferUsed: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwevtapi_dll.EvtGetChannelConfigProperty(util.toBigInt(util.toPointer(ChannelConfig)), PropertyId, Flags, PropertyValueBufferSize, util.toPointer(PropertyValueBuffer), util.toPointer(PropertyValueBufferUsed)));
}

export function EvtOpenPublisherEnum(
  Session: number | bigint /* isize */,
  Flags: number /* u32 */,
): number | bigint /* isize */ {
  return libwevtapi_dll.EvtOpenPublisherEnum(util.toBigInt(util.toPointer(Session)), Flags);
}

export function EvtNextPublisherId(
  PublisherEnum: number | bigint /* isize */,
  PublisherIdBufferSize: number /* u32 */,
  PublisherIdBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  PublisherIdBufferUsed: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwevtapi_dll.EvtNextPublisherId(util.toBigInt(util.toPointer(PublisherEnum)), PublisherIdBufferSize, util.pwstrToFfi(PublisherIdBuffer), util.toPointer(PublisherIdBufferUsed)));
}

export function EvtOpenPublisherMetadata(
  Session: number | bigint /* isize */,
  PublisherId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  LogFilePath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Locale: number /* u32 */,
  Flags: number /* u32 */,
): number | bigint /* isize */ {
  return libwevtapi_dll.EvtOpenPublisherMetadata(util.toBigInt(util.toPointer(Session)), util.pwstrToFfi(PublisherId), util.pwstrToFfi(LogFilePath), Locale, Flags);
}

export function EvtGetPublisherMetadataProperty(
  PublisherMetadata: number | bigint /* isize */,
  PropertyId: EVT_PUBLISHER_METADATA_PROPERTY_ID /* Windows.Win32.System.EventLog.EVT_PUBLISHER_METADATA_PROPERTY_ID */,
  Flags: number /* u32 */,
  PublisherMetadataPropertyBufferSize: number /* u32 */,
  PublisherMetadataPropertyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PublisherMetadataPropertyBufferUsed: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwevtapi_dll.EvtGetPublisherMetadataProperty(util.toBigInt(util.toPointer(PublisherMetadata)), PropertyId, Flags, PublisherMetadataPropertyBufferSize, util.toPointer(PublisherMetadataPropertyBuffer), util.toPointer(PublisherMetadataPropertyBufferUsed)));
}

export function EvtOpenEventMetadataEnum(
  PublisherMetadata: number | bigint /* isize */,
  Flags: number /* u32 */,
): number | bigint /* isize */ {
  return libwevtapi_dll.EvtOpenEventMetadataEnum(util.toBigInt(util.toPointer(PublisherMetadata)), Flags);
}

export function EvtNextEventMetadata(
  EventMetadataEnum: number | bigint /* isize */,
  Flags: number /* u32 */,
): number | bigint /* isize */ {
  return libwevtapi_dll.EvtNextEventMetadata(util.toBigInt(util.toPointer(EventMetadataEnum)), Flags);
}

export function EvtGetEventMetadataProperty(
  EventMetadata: number | bigint /* isize */,
  PropertyId: EVT_EVENT_METADATA_PROPERTY_ID /* Windows.Win32.System.EventLog.EVT_EVENT_METADATA_PROPERTY_ID */,
  Flags: number /* u32 */,
  EventMetadataPropertyBufferSize: number /* u32 */,
  EventMetadataPropertyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  EventMetadataPropertyBufferUsed: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwevtapi_dll.EvtGetEventMetadataProperty(util.toBigInt(util.toPointer(EventMetadata)), PropertyId, Flags, EventMetadataPropertyBufferSize, util.toPointer(EventMetadataPropertyBuffer), util.toPointer(EventMetadataPropertyBufferUsed)));
}

export function EvtGetObjectArraySize(
  ObjectArray: number | bigint /* isize */,
  ObjectArraySize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwevtapi_dll.EvtGetObjectArraySize(util.toBigInt(util.toPointer(ObjectArray)), util.toPointer(ObjectArraySize)));
}

export function EvtGetObjectArrayProperty(
  ObjectArray: number | bigint /* isize */,
  PropertyId: number /* u32 */,
  ArrayIndex: number /* u32 */,
  Flags: number /* u32 */,
  PropertyValueBufferSize: number /* u32 */,
  PropertyValueBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyValueBufferUsed: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwevtapi_dll.EvtGetObjectArrayProperty(util.toBigInt(util.toPointer(ObjectArray)), PropertyId, ArrayIndex, Flags, PropertyValueBufferSize, util.toPointer(PropertyValueBuffer), util.toPointer(PropertyValueBufferUsed)));
}

export function EvtGetQueryInfo(
  QueryOrSubscription: number | bigint /* isize */,
  PropertyId: EVT_QUERY_PROPERTY_ID /* Windows.Win32.System.EventLog.EVT_QUERY_PROPERTY_ID */,
  PropertyValueBufferSize: number /* u32 */,
  PropertyValueBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyValueBufferUsed: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwevtapi_dll.EvtGetQueryInfo(util.toBigInt(util.toPointer(QueryOrSubscription)), PropertyId, PropertyValueBufferSize, util.toPointer(PropertyValueBuffer), util.toPointer(PropertyValueBufferUsed)));
}

export function EvtCreateBookmark(
  BookmarkXml: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number | bigint /* isize */ {
  return libwevtapi_dll.EvtCreateBookmark(util.pwstrToFfi(BookmarkXml));
}

export function EvtUpdateBookmark(
  Bookmark: number | bigint /* isize */,
  Event: number | bigint /* isize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwevtapi_dll.EvtUpdateBookmark(util.toBigInt(util.toPointer(Bookmark)), util.toBigInt(util.toPointer(Event))));
}

export function EvtGetEventInfo(
  Event: number | bigint /* isize */,
  PropertyId: EVT_EVENT_PROPERTY_ID /* Windows.Win32.System.EventLog.EVT_EVENT_PROPERTY_ID */,
  PropertyValueBufferSize: number /* u32 */,
  PropertyValueBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyValueBufferUsed: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwevtapi_dll.EvtGetEventInfo(util.toBigInt(util.toPointer(Event)), PropertyId, PropertyValueBufferSize, util.toPointer(PropertyValueBuffer), util.toPointer(PropertyValueBufferUsed)));
}

export function ClearEventLogA(
  hEventLog: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.EventLog.EventLogHandle */,
  lpBackupFileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.ClearEventLogA(util.toPointer(hEventLog), util.pstrToFfi(lpBackupFileName)));
}

export function ClearEventLogW(
  hEventLog: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.EventLog.EventLogHandle */,
  lpBackupFileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.ClearEventLogW(util.toPointer(hEventLog), util.pwstrToFfi(lpBackupFileName)));
}

export function BackupEventLogA(
  hEventLog: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.EventLog.EventLogHandle */,
  lpBackupFileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.BackupEventLogA(util.toPointer(hEventLog), util.pstrToFfi(lpBackupFileName)));
}

export function BackupEventLogW(
  hEventLog: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.EventLog.EventLogHandle */,
  lpBackupFileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.BackupEventLogW(util.toPointer(hEventLog), util.pwstrToFfi(lpBackupFileName)));
}

export function CloseEventLog(
  hEventLog: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.EventLog.EventLogHandle */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CloseEventLog(util.toPointer(hEventLog)));
}

export function DeregisterEventSource(
  hEventLog: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.EventLog.EventSourceHandle */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.DeregisterEventSource(util.toPointer(hEventLog)));
}

export function NotifyChangeEventLog(
  hEventLog: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.EventLog.EventLogHandle */,
  hEvent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.NotifyChangeEventLog(util.toPointer(hEventLog), util.toPointer(hEvent)));
}

export function GetNumberOfEventLogRecords(
  hEventLog: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.EventLog.EventLogHandle */,
  NumberOfRecords: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.GetNumberOfEventLogRecords(util.toPointer(hEventLog), util.toPointer(NumberOfRecords)));
}

export function GetOldestEventLogRecord(
  hEventLog: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.EventLog.EventLogHandle */,
  OldestRecord: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.GetOldestEventLogRecord(util.toPointer(hEventLog), util.toPointer(OldestRecord)));
}

export function OpenEventLogA(
  lpUNCServerName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpSourceName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.System.EventLog.EventLogHandle */ {
  return util.pointerFromFfi(libADVAPI32_dll.OpenEventLogA(util.pstrToFfi(lpUNCServerName), util.pstrToFfi(lpSourceName)));
}

export function OpenEventLogW(
  lpUNCServerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpSourceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.System.EventLog.EventLogHandle */ {
  return util.pointerFromFfi(libADVAPI32_dll.OpenEventLogW(util.pwstrToFfi(lpUNCServerName), util.pwstrToFfi(lpSourceName)));
}

export function RegisterEventSourceA(
  lpUNCServerName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpSourceName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.System.EventLog.EventSourceHandle */ {
  return util.pointerFromFfi(libADVAPI32_dll.RegisterEventSourceA(util.pstrToFfi(lpUNCServerName), util.pstrToFfi(lpSourceName)));
}

export function RegisterEventSourceW(
  lpUNCServerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpSourceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.System.EventLog.EventSourceHandle */ {
  return util.pointerFromFfi(libADVAPI32_dll.RegisterEventSourceW(util.pwstrToFfi(lpUNCServerName), util.pwstrToFfi(lpSourceName)));
}

export function OpenBackupEventLogA(
  lpUNCServerName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpFileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.System.EventLog.EventLogHandle */ {
  return util.pointerFromFfi(libADVAPI32_dll.OpenBackupEventLogA(util.pstrToFfi(lpUNCServerName), util.pstrToFfi(lpFileName)));
}

export function OpenBackupEventLogW(
  lpUNCServerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpFileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.System.EventLog.EventLogHandle */ {
  return util.pointerFromFfi(libADVAPI32_dll.OpenBackupEventLogW(util.pwstrToFfi(lpUNCServerName), util.pwstrToFfi(lpFileName)));
}

export function ReadEventLogA(
  hEventLog: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.EventLog.EventLogHandle */,
  dwReadFlags: READ_EVENT_LOG_READ_FLAGS /* Windows.Win32.System.EventLog.READ_EVENT_LOG_READ_FLAGS */,
  dwRecordOffset: number /* u32 */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  nNumberOfBytesToRead: number /* u32 */,
  pnBytesRead: Deno.PointerValue | Uint8Array | null /* ptr */,
  pnMinNumberOfBytesNeeded: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.ReadEventLogA(util.toPointer(hEventLog), dwReadFlags, dwRecordOffset, util.toPointer(lpBuffer), nNumberOfBytesToRead, util.toPointer(pnBytesRead), util.toPointer(pnMinNumberOfBytesNeeded)));
}

export function ReadEventLogW(
  hEventLog: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.EventLog.EventLogHandle */,
  dwReadFlags: READ_EVENT_LOG_READ_FLAGS /* Windows.Win32.System.EventLog.READ_EVENT_LOG_READ_FLAGS */,
  dwRecordOffset: number /* u32 */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  nNumberOfBytesToRead: number /* u32 */,
  pnBytesRead: Deno.PointerValue | Uint8Array | null /* ptr */,
  pnMinNumberOfBytesNeeded: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.ReadEventLogW(util.toPointer(hEventLog), dwReadFlags, dwRecordOffset, util.toPointer(lpBuffer), nNumberOfBytesToRead, util.toPointer(pnBytesRead), util.toPointer(pnMinNumberOfBytesNeeded)));
}

export function ReportEventA(
  hEventLog: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.EventLog.EventSourceHandle */,
  wType: REPORT_EVENT_TYPE /* Windows.Win32.System.EventLog.REPORT_EVENT_TYPE */,
  wCategory: number /* u16 */,
  dwEventID: number /* u32 */,
  lpUserSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  wNumStrings: number /* u16 */,
  dwDataSize: number /* u32 */,
  lpStrings: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpRawData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.ReportEventA(util.toPointer(hEventLog), wType, wCategory, dwEventID, util.toPointer(lpUserSid), wNumStrings, dwDataSize, util.toPointer(lpStrings), util.toPointer(lpRawData)));
}

export function ReportEventW(
  hEventLog: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.EventLog.EventSourceHandle */,
  wType: REPORT_EVENT_TYPE /* Windows.Win32.System.EventLog.REPORT_EVENT_TYPE */,
  wCategory: number /* u16 */,
  dwEventID: number /* u32 */,
  lpUserSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  wNumStrings: number /* u16 */,
  dwDataSize: number /* u32 */,
  lpStrings: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpRawData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.ReportEventW(util.toPointer(hEventLog), wType, wCategory, dwEventID, util.toPointer(lpUserSid), wNumStrings, dwDataSize, util.toPointer(lpStrings), util.toPointer(lpRawData)));
}

export function GetEventLogInformation(
  hEventLog: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.EventLog.EventLogHandle */,
  dwInfoLevel: number /* u32 */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbBufSize: number /* u32 */,
  pcbBytesNeeded: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.GetEventLogInformation(util.toPointer(hEventLog), dwInfoLevel, util.toPointer(lpBuffer), cbBufSize, util.toPointer(pcbBytesNeeded)));
}

