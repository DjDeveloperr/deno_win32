/// Auto-generated by Deno Win32: Windows.Win32.System.SystemServices.Apis

import * as util from "../../util.ts";

// Enums
export type ALERT_SYSTEM_SEV = number;
export type APPCOMMAND_ID = number;
export type ATF_FLAGS = number;
export type CLIPBOARD_FORMATS = number;
export type GESTURECONFIG_FLAGS = number;
export type CFE_UNDERLINE = number;
export type IGP_ID = number;
export type SECTION_FLAGS = number;
export type TAPE_GET_DRIVE_PARAMETERS_FEATURES_HIGH = number;
export type DEV_BROADCAST_HDR_DEVICE_TYPE = number;
export type DEV_BROADCAST_VOLUME_FLAGS = number;
export type MODIFIERKEYS_FLAGS = number;
export type STATIC_STYLES = number;
export type RECO_FLAGS = number;
export type SFGAO_FLAGS = Deno.PointerValue;
export type DESKTOP_ACCESS_FLAGS = number;
export type ACCESS_REASON_TYPE = number;
export type SE_IMAGE_SIGNATURE_TYPE = number;
export type SE_LEARNING_MODE_DATA_TYPE = number;
export type JOB_OBJECT_IO_RATE_CONTROL_FLAGS = number;
export type SERVERSILO_STATE = number;
export type MEM_DEDICATED_ATTRIBUTE_TYPE = number;
export type MEM_SECTION_EXTENDED_PARAMETER_TYPE = number;
export type SharedVirtualDiskSupportType = number;
export type SharedVirtualDiskHandleState = number;
export type MONITOR_DISPLAY_STATE = number;
export type USER_ACTIVITY_PRESENCE = number;
export type POWER_USER_PRESENCE_TYPE = number;
export type POWER_MONITOR_REQUEST_REASON = number;
export type POWER_MONITOR_REQUEST_TYPE = number;
export type POWER_SETTING_ALTITUDE = number;
export type HIBERFILE_BUCKET_SIZE = number;
export type IMAGE_AUX_SYMBOL_TYPE = number;
export type ARM64_FNPDATA_FLAGS = number;
export type ARM64_FNPDATA_CR = number;
export type IMPORT_OBJECT_TYPE = number;
export type IMPORT_OBJECT_NAME_TYPE = number;
export type ReplacesCorHdrNumericDefines = number;
export type RTL_UMS_SCHEDULER_REASON = number;
export type IMAGE_POLICY_ENTRY_TYPE = number;
export type IMAGE_POLICY_ID = number;
export type RIP_INFO_TYPE = number;
export type ACTIVATION_CONTEXT_INFO_CLASS = number;
export type SERVICE_NODE_TYPE = number;
export type SERVICE_LOAD_TYPE = number;
export type SERVICE_ERROR_TYPE = number;
export type TAPE_DRIVE_PROBLEM_TYPE = number;
export type TRANSACTION_STATE = number;
export type TRANSACTION_INFORMATION_CLASS = number;
export type TRANSACTIONMANAGER_INFORMATION_CLASS = number;
export type RESOURCEMANAGER_INFORMATION_CLASS = number;
export type ENLISTMENT_INFORMATION_CLASS = number;
export type KTMOBJECT_TYPE = number;

// Constants
export const ALERT_SYSTEM_INFORMATIONAL = 1;
export const ALERT_SYSTEM_WARNING = 2;
export const ALERT_SYSTEM_ERROR = 3;
export const ALERT_SYSTEM_QUERY = 4;
export const ALERT_SYSTEM_CRITICAL = 5;
export const APPCOMMAND_BROWSER_BACKWARD = 1;
export const APPCOMMAND_BROWSER_FORWARD = 2;
export const APPCOMMAND_BROWSER_REFRESH = 3;
export const APPCOMMAND_BROWSER_STOP = 4;
export const APPCOMMAND_BROWSER_SEARCH = 5;
export const APPCOMMAND_BROWSER_FAVORITES = 6;
export const APPCOMMAND_BROWSER_HOME = 7;
export const APPCOMMAND_VOLUME_MUTE = 8;
export const APPCOMMAND_VOLUME_DOWN = 9;
export const APPCOMMAND_VOLUME_UP = 10;
export const APPCOMMAND_MEDIA_NEXTTRACK = 11;
export const APPCOMMAND_MEDIA_PREVIOUSTRACK = 12;
export const APPCOMMAND_MEDIA_STOP = 13;
export const APPCOMMAND_MEDIA_PLAY_PAUSE = 14;
export const APPCOMMAND_LAUNCH_MAIL = 15;
export const APPCOMMAND_LAUNCH_MEDIA_SELECT = 16;
export const APPCOMMAND_LAUNCH_APP1 = 17;
export const APPCOMMAND_LAUNCH_APP2 = 18;
export const APPCOMMAND_BASS_DOWN = 19;
export const APPCOMMAND_BASS_BOOST = 20;
export const APPCOMMAND_BASS_UP = 21;
export const APPCOMMAND_TREBLE_DOWN = 22;
export const APPCOMMAND_TREBLE_UP = 23;
export const APPCOMMAND_MICROPHONE_VOLUME_MUTE = 24;
export const APPCOMMAND_MICROPHONE_VOLUME_DOWN = 25;
export const APPCOMMAND_MICROPHONE_VOLUME_UP = 26;
export const APPCOMMAND_HELP = 27;
export const APPCOMMAND_FIND = 28;
export const APPCOMMAND_NEW = 29;
export const APPCOMMAND_OPEN = 30;
export const APPCOMMAND_CLOSE = 31;
export const APPCOMMAND_SAVE = 32;
export const APPCOMMAND_PRINT = 33;
export const APPCOMMAND_UNDO = 34;
export const APPCOMMAND_REDO = 35;
export const APPCOMMAND_COPY = 36;
export const APPCOMMAND_CUT = 37;
export const APPCOMMAND_PASTE = 38;
export const APPCOMMAND_REPLY_TO_MAIL = 39;
export const APPCOMMAND_FORWARD_MAIL = 40;
export const APPCOMMAND_SEND_MAIL = 41;
export const APPCOMMAND_SPELL_CHECK = 42;
export const APPCOMMAND_DICTATE_OR_COMMAND_CONTROL_TOGGLE = 43;
export const APPCOMMAND_MIC_ON_OFF_TOGGLE = 44;
export const APPCOMMAND_CORRECTION_LIST = 45;
export const APPCOMMAND_MEDIA_PLAY = 46;
export const APPCOMMAND_MEDIA_PAUSE = 47;
export const APPCOMMAND_MEDIA_RECORD = 48;
export const APPCOMMAND_MEDIA_FAST_FORWARD = 49;
export const APPCOMMAND_MEDIA_REWIND = 50;
export const APPCOMMAND_MEDIA_CHANNEL_UP = 51;
export const APPCOMMAND_MEDIA_CHANNEL_DOWN = 52;
export const APPCOMMAND_DELETE = 53;
export const APPCOMMAND_DWM_FLIP3D = 54;
export const ATF_TIMEOUTON = 1;
export const ATF_ONOFFFEEDBACK = 2;
export const CF_TEXT = 1;
export const CF_BITMAP = 2;
export const CF_METAFILEPICT = 3;
export const CF_SYLK = 4;
export const CF_DIF = 5;
export const CF_TIFF = 6;
export const CF_OEMTEXT = 7;
export const CF_DIB = 8;
export const CF_PALETTE = 9;
export const CF_PENDATA = 10;
export const CF_RIFF = 11;
export const CF_WAVE = 12;
export const CF_UNICODETEXT = 13;
export const CF_ENHMETAFILE = 14;
export const CF_HDROP = 15;
export const CF_LOCALE = 16;
export const CF_DIBV5 = 17;
export const CF_MAX = 18;
export const CF_OWNERDISPLAY = 128;
export const CF_DSPTEXT = 129;
export const CF_DSPBITMAP = 130;
export const CF_DSPMETAFILEPICT = 131;
export const CF_DSPENHMETAFILE = 142;
export const CF_PRIVATEFIRST = 512;
export const CF_PRIVATELAST = 767;
export const CF_GDIOBJFIRST = 768;
export const CF_GDIOBJLAST = 1023;
export const GC_ALLGESTURES = 1;
export const GC_ZOOM = 1;
export const GC_PAN = 1;
export const GC_PAN_WITH_SINGLE_FINGER_VERTICALLY = 2;
export const GC_PAN_WITH_SINGLE_FINGER_HORIZONTALLY = 4;
export const GC_PAN_WITH_GUTTER = 8;
export const GC_PAN_WITH_INERTIA = 16;
export const GC_ROTATE = 1;
export const GC_TWOFINGERTAP = 1;
export const GC_PRESSANDTAP = 1;
export const GC_ROLLOVER = 1;
export const CFU_CF1UNDERLINE = 255;
export const CFU_INVERT = 254;
export const CFU_UNDERLINETHICKLONGDASH = 18;
export const CFU_UNDERLINETHICKDOTTED = 17;
export const CFU_UNDERLINETHICKDASHDOTDOT = 16;
export const CFU_UNDERLINETHICKDASHDOT = 15;
export const CFU_UNDERLINETHICKDASH = 14;
export const CFU_UNDERLINELONGDASH = 13;
export const CFU_UNDERLINEHEAVYWAVE = 12;
export const CFU_UNDERLINEDOUBLEWAVE = 11;
export const CFU_UNDERLINEHAIRLINE = 10;
export const CFU_UNDERLINETHICK = 9;
export const CFU_UNDERLINEWAVE = 8;
export const CFU_UNDERLINEDASHDOTDOT = 7;
export const CFU_UNDERLINEDASHDOT = 6;
export const CFU_UNDERLINEDASH = 5;
export const CFU_UNDERLINEDOTTED = 4;
export const CFU_UNDERLINEDOUBLE = 3;
export const CFU_UNDERLINEWORD = 2;
export const CFU_UNDERLINE = 1;
export const CFU_UNDERLINENONE = 0;
export const IGP_GETIMEVERSION = 4294967292;
export const IGP_PROPERTY = 4;
export const IGP_CONVERSION = 8;
export const IGP_SENTENCE = 12;
export const IGP_UI = 16;
export const IGP_SETCOMPSTR = 20;
export const IGP_SELECT = 24;
export const SECTION_ALL_ACCESS = 983071;
export const SECTION_QUERY = 1;
export const SECTION_MAP_WRITE = 2;
export const SECTION_MAP_READ = 4;
export const SECTION_MAP_EXECUTE = 8;
export const SECTION_EXTEND_SIZE = 16;
export const SECTION_MAP_EXECUTE_EXPLICIT = 32;
export const TAPE_DRIVE_ABS_BLK_IMMED = 2147491840;
export const TAPE_DRIVE_ABSOLUTE_BLK = 2147487744;
export const TAPE_DRIVE_END_OF_DATA = 2147549184;
export const TAPE_DRIVE_FILEMARKS = 2147745792;
export const TAPE_DRIVE_LOAD_UNLOAD = 2147483649;
export const TAPE_DRIVE_LOAD_UNLD_IMMED = 2147483680;
export const TAPE_DRIVE_LOCK_UNLOCK = 2147483652;
export const TAPE_DRIVE_LOCK_UNLK_IMMED = 2147483776;
export const TAPE_DRIVE_LOG_BLK_IMMED = 2147516416;
export const TAPE_DRIVE_LOGICAL_BLK = 2147500032;
export const TAPE_DRIVE_RELATIVE_BLKS = 2147614720;
export const TAPE_DRIVE_REVERSE_POSITION = 2151677952;
export const TAPE_DRIVE_REWIND_IMMEDIATE = 2147483656;
export const TAPE_DRIVE_SEQUENTIAL_FMKS = 2148007936;
export const TAPE_DRIVE_SEQUENTIAL_SMKS = 2149580800;
export const TAPE_DRIVE_SET_BLOCK_SIZE = 2147483664;
export const TAPE_DRIVE_SET_COMPRESSION = 2147484160;
export const TAPE_DRIVE_SET_ECC = 2147483904;
export const TAPE_DRIVE_SET_PADDING = 2147484672;
export const TAPE_DRIVE_SET_REPORT_SMKS = 2147485696;
export const TAPE_DRIVE_SETMARKS = 2148532224;
export const TAPE_DRIVE_SPACE_IMMEDIATE = 2155872256;
export const TAPE_DRIVE_TENSION = 2147483650;
export const TAPE_DRIVE_TENSION_IMMED = 2147483712;
export const TAPE_DRIVE_WRITE_FILEMARKS = 2181038080;
export const TAPE_DRIVE_WRITE_LONG_FMKS = 2281701376;
export const TAPE_DRIVE_WRITE_MARK_IMMED = 2415919104;
export const TAPE_DRIVE_WRITE_SETMARKS = 2164260864;
export const TAPE_DRIVE_WRITE_SHORT_FMKS = 2214592512;
export const DBT_DEVTYP_DEVICEINTERFACE = 5;
export const DBT_DEVTYP_HANDLE = 6;
export const DBT_DEVTYP_OEM = 0;
export const DBT_DEVTYP_PORT = 3;
export const DBT_DEVTYP_VOLUME = 2;
export const DBTF_MEDIA = 1;
export const DBTF_NET = 2;
export const MK_LBUTTON = 1;
export const MK_RBUTTON = 2;
export const MK_SHIFT = 4;
export const MK_CONTROL = 8;
export const MK_MBUTTON = 16;
export const MK_XBUTTON1 = 32;
export const MK_XBUTTON2 = 64;
export const SS_LEFT = 0;
export const SS_CENTER = 1;
export const SS_RIGHT = 2;
export const SS_ICON = 3;
export const SS_BLACKRECT = 4;
export const SS_GRAYRECT = 5;
export const SS_WHITERECT = 6;
export const SS_BLACKFRAME = 7;
export const SS_GRAYFRAME = 8;
export const SS_WHITEFRAME = 9;
export const SS_USERITEM = 10;
export const SS_SIMPLE = 11;
export const SS_LEFTNOWORDWRAP = 12;
export const SS_OWNERDRAW = 13;
export const SS_BITMAP = 14;
export const SS_ENHMETAFILE = 15;
export const SS_ETCHEDHORZ = 16;
export const SS_ETCHEDVERT = 17;
export const SS_ETCHEDFRAME = 18;
export const SS_TYPEMASK = 31;
export const SS_REALSIZECONTROL = 64;
export const SS_NOPREFIX = 128;
export const SS_NOTIFY = 256;
export const SS_CENTERIMAGE = 512;
export const SS_RIGHTJUST = 1024;
export const SS_REALSIZEIMAGE = 2048;
export const SS_SUNKEN = 4096;
export const SS_EDITCONTROL = 8192;
export const SS_ENDELLIPSIS = 16384;
export const SS_PATHELLIPSIS = 32768;
export const SS_WORDELLIPSIS = 49152;
export const SS_ELLIPSISMASK = 49152;
export const RECO_PASTE = 0;
export const RECO_DROP = 1;
export const RECO_COPY = 2;
export const RECO_CUT = 3;
export const RECO_DRAG = 4;
export const SFGAO_CANCOPY = 1;
export const SFGAO_CANMOVE = 2;
export const SFGAO_CANLINK = 4;
export const SFGAO_STORAGE = 8;
export const SFGAO_CANRENAME = 16;
export const SFGAO_CANDELETE = 32;
export const SFGAO_HASPROPSHEET = 64;
export const SFGAO_DROPTARGET = 256;
export const SFGAO_CAPABILITYMASK = 375;
export const SFGAO_PLACEHOLDER = 2048;
export const SFGAO_SYSTEM = 4096;
export const SFGAO_ENCRYPTED = 8192;
export const SFGAO_ISSLOW = 16384;
export const SFGAO_GHOSTED = 32768;
export const SFGAO_LINK = 65536;
export const SFGAO_SHARE = 131072;
export const SFGAO_READONLY = 262144;
export const SFGAO_HIDDEN = 524288;
export const SFGAO_DISPLAYATTRMASK = 1032192;
export const SFGAO_FILESYSANCESTOR = 268435456;
export const SFGAO_FOLDER = 536870912;
export const SFGAO_FILESYSTEM = 1073741824;
export const SFGAO_HASSUBFOLDER = 2147483648;
export const SFGAO_CONTENTSMASK = 2147483648;
export const SFGAO_VALIDATE = 16777216;
export const SFGAO_REMOVABLE = 33554432;
export const SFGAO_COMPRESSED = 67108864;
export const SFGAO_BROWSABLE = 134217728;
export const SFGAO_NONENUMERATED = 1048576;
export const SFGAO_NEWCONTENT = 2097152;
export const SFGAO_CANMONIKER = 4194304;
export const SFGAO_HASSTORAGE = 4194304;
export const SFGAO_STREAM = 4194304;
export const SFGAO_STORAGEANCESTOR = 8388608;
export const SFGAO_STORAGECAPMASK = 1891958792;
export const SFGAO_PKEYSFGAOMASK = 2164539392;
export const DESKTOP_READOBJECTS = 1;
export const DESKTOP_CREATEWINDOW = 2;
export const DESKTOP_CREATEMENU = 4;
export const DESKTOP_HOOKCONTROL = 8;
export const DESKTOP_JOURNALRECORD = 16;
export const DESKTOP_JOURNALPLAYBACK = 32;
export const DESKTOP_ENUMERATE = 64;
export const DESKTOP_WRITEOBJECTS = 128;
export const DESKTOP_SWITCHDESKTOP = 256;
export const _MM_HINT_T0 = 1;
export const _MM_HINT_T1 = 2;
export const _MM_HINT_T2 = 3;
export const _MM_HINT_NTA = 0;
export const ANYSIZE_ARRAY = 1;
export const MEMORY_ALLOCATION_ALIGNMENT = 16;
export const X86_CACHE_ALIGNMENT_SIZE = 64;
export const ARM_CACHE_ALIGNMENT_SIZE = 128;
export const SYSTEM_CACHE_ALIGNMENT_SIZE = 64;
export const PRAGMA_DEPRECATED_DDK = 1;
export const UCSCHAR_INVALID_CHARACTER = 4294967295;
export const MIN_UCSCHAR = 0;
export const MAX_UCSCHAR = 1114111;
export const ALL_PROCESSOR_GROUPS = 65535;
export const MAXIMUM_PROC_PER_GROUP = 64;
export const MAXIMUM_PROCESSORS = 64;
export const APPLICATION_ERROR_MASK = 536870912;
export const ERROR_SEVERITY_SUCCESS = 0;
export const ERROR_SEVERITY_INFORMATIONAL = 1073741824;
export const ERROR_SEVERITY_WARNING = 2147483648;
export const ERROR_SEVERITY_ERROR = 3221225472;
export const MAXLONGLONG = 9223372036854775807n;
export const UNICODE_STRING_MAX_CHARS = 32767;
export const MINCHAR = 128;
export const MAXCHAR = 127;
export const MINSHORT = 32768;
export const MAXSHORT = 32767;
export const MINLONG = 2147483648;
export const MAXLONG = 2147483647;
export const MAXBYTE = 255;
export const MAXWORD = 65535;
export const MAXDWORD = 4294967295;
export const ENCLAVE_SHORT_ID_LENGTH = 16;
export const ENCLAVE_LONG_ID_LENGTH = 32;
export const VER_SERVER_NT = 2147483648;
export const VER_WORKSTATION_NT = 1073741824;
export const VER_SUITE_SMALLBUSINESS = 1;
export const VER_SUITE_ENTERPRISE = 2;
export const VER_SUITE_BACKOFFICE = 4;
export const VER_SUITE_COMMUNICATIONS = 8;
export const VER_SUITE_TERMINAL = 16;
export const VER_SUITE_SMALLBUSINESS_RESTRICTED = 32;
export const VER_SUITE_EMBEDDEDNT = 64;
export const VER_SUITE_DATACENTER = 128;
export const VER_SUITE_SINGLEUSERTS = 256;
export const VER_SUITE_PERSONAL = 512;
export const VER_SUITE_BLADE = 1024;
export const VER_SUITE_EMBEDDED_RESTRICTED = 2048;
export const VER_SUITE_SECURITY_APPLIANCE = 4096;
export const VER_SUITE_STORAGE_SERVER = 8192;
export const VER_SUITE_COMPUTE_SERVER = 16384;
export const VER_SUITE_WH_SERVER = 32768;
export const VER_SUITE_MULTIUSERTS = 131072;
export const PRODUCT_STANDARD_SERVER_CORE = 13;
export const PRODUCT_SOLUTION_EMBEDDEDSERVER_CORE = 57;
export const PRODUCT_PROFESSIONAL_EMBEDDED = 58;
export const PRODUCT_EMBEDDED = 65;
export const PRODUCT_EMBEDDED_AUTOMOTIVE = 85;
export const PRODUCT_EMBEDDED_INDUSTRY_A = 86;
export const PRODUCT_THINPC = 87;
export const PRODUCT_EMBEDDED_A = 88;
export const PRODUCT_EMBEDDED_INDUSTRY = 89;
export const PRODUCT_EMBEDDED_E = 90;
export const PRODUCT_EMBEDDED_INDUSTRY_E = 91;
export const PRODUCT_EMBEDDED_INDUSTRY_A_E = 92;
export const PRODUCT_CORE_ARM = 97;
export const PRODUCT_EMBEDDED_INDUSTRY_EVAL = 105;
export const PRODUCT_EMBEDDED_INDUSTRY_E_EVAL = 106;
export const PRODUCT_EMBEDDED_EVAL = 107;
export const PRODUCT_EMBEDDED_E_EVAL = 108;
export const PRODUCT_NANO_SERVER = 109;
export const PRODUCT_CLOUD_STORAGE_SERVER = 110;
export const PRODUCT_CORE_CONNECTED = 111;
export const PRODUCT_PROFESSIONAL_STUDENT = 112;
export const PRODUCT_CORE_CONNECTED_N = 113;
export const PRODUCT_PROFESSIONAL_STUDENT_N = 114;
export const PRODUCT_CORE_CONNECTED_SINGLELANGUAGE = 115;
export const PRODUCT_CORE_CONNECTED_COUNTRYSPECIFIC = 116;
export const PRODUCT_CONNECTED_CAR = 117;
export const PRODUCT_INDUSTRY_HANDHELD = 118;
export const PRODUCT_PPI_PRO = 119;
export const PRODUCT_ARM64_SERVER = 120;
export const PRODUCT_CLOUD_HOST_INFRASTRUCTURE_SERVER = 124;
export const PRODUCT_PROFESSIONAL_S = 127;
export const PRODUCT_PROFESSIONAL_S_N = 128;
export const PRODUCT_HOLOGRAPHIC = 135;
export const PRODUCT_HOLOGRAPHIC_BUSINESS = 136;
export const PRODUCT_PRO_SINGLE_LANGUAGE = 138;
export const PRODUCT_PRO_CHINA = 139;
export const PRODUCT_ENTERPRISE_SUBSCRIPTION = 140;
export const PRODUCT_ENTERPRISE_SUBSCRIPTION_N = 141;
export const PRODUCT_DATACENTER_NANO_SERVER = 143;
export const PRODUCT_STANDARD_NANO_SERVER = 144;
export const PRODUCT_DATACENTER_WS_SERVER_CORE = 147;
export const PRODUCT_STANDARD_WS_SERVER_CORE = 148;
export const PRODUCT_UTILITY_VM = 149;
export const PRODUCT_DATACENTER_EVALUATION_SERVER_CORE = 159;
export const PRODUCT_STANDARD_EVALUATION_SERVER_CORE = 160;
export const PRODUCT_PRO_FOR_EDUCATION = 164;
export const PRODUCT_PRO_FOR_EDUCATION_N = 165;
export const PRODUCT_AZURE_SERVER_CORE = 168;
export const PRODUCT_AZURE_NANO_SERVER = 169;
export const PRODUCT_ENTERPRISEG = 171;
export const PRODUCT_ENTERPRISEGN = 172;
export const PRODUCT_SERVERRDSH = 175;
export const PRODUCT_CLOUD = 178;
export const PRODUCT_CLOUDN = 179;
export const PRODUCT_HUBOS = 180;
export const PRODUCT_ONECOREUPDATEOS = 182;
export const PRODUCT_CLOUDE = 183;
export const PRODUCT_IOTOS = 185;
export const PRODUCT_CLOUDEN = 186;
export const PRODUCT_IOTEDGEOS = 187;
export const PRODUCT_IOTENTERPRISE = 188;
export const PRODUCT_LITE = 189;
export const PRODUCT_IOTENTERPRISES = 191;
export const PRODUCT_XBOX_SYSTEMOS = 192;
export const PRODUCT_XBOX_NATIVEOS = 193;
export const PRODUCT_XBOX_GAMEOS = 194;
export const PRODUCT_XBOX_ERAOS = 195;
export const PRODUCT_XBOX_DURANGOHOSTOS = 196;
export const PRODUCT_XBOX_SCARLETTHOSTOS = 197;
export const PRODUCT_AZURE_SERVER_CLOUDHOST = 199;
export const PRODUCT_AZURE_SERVER_CLOUDMOS = 200;
export const PRODUCT_CLOUDEDITIONN = 202;
export const PRODUCT_CLOUDEDITION = 203;
export const PRODUCT_AZURESTACKHCI_SERVER_CORE = 406;
export const PRODUCT_DATACENTER_SERVER_AZURE_EDITION = 407;
export const PRODUCT_DATACENTER_SERVER_CORE_AZURE_EDITION = 408;
export const PRODUCT_UNLICENSED = 2882382797;
export const LANG_NEUTRAL = 0;
export const LANG_INVARIANT = 127;
export const LANG_AFRIKAANS = 54;
export const LANG_ALBANIAN = 28;
export const LANG_ALSATIAN = 132;
export const LANG_AMHARIC = 94;
export const LANG_ARABIC = 1;
export const LANG_ARMENIAN = 43;
export const LANG_ASSAMESE = 77;
export const LANG_AZERI = 44;
export const LANG_AZERBAIJANI = 44;
export const LANG_BANGLA = 69;
export const LANG_BASHKIR = 109;
export const LANG_BASQUE = 45;
export const LANG_BELARUSIAN = 35;
export const LANG_BENGALI = 69;
export const LANG_BRETON = 126;
export const LANG_BOSNIAN = 26;
export const LANG_BOSNIAN_NEUTRAL = 30746;
export const LANG_BULGARIAN = 2;
export const LANG_CATALAN = 3;
export const LANG_CENTRAL_KURDISH = 146;
export const LANG_CHEROKEE = 92;
export const LANG_CHINESE = 4;
export const LANG_CHINESE_SIMPLIFIED = 4;
export const LANG_CHINESE_TRADITIONAL = 31748;
export const LANG_CORSICAN = 131;
export const LANG_CROATIAN = 26;
export const LANG_CZECH = 5;
export const LANG_DANISH = 6;
export const LANG_DARI = 140;
export const LANG_DIVEHI = 101;
export const LANG_DUTCH = 19;
export const LANG_ENGLISH = 9;
export const LANG_ESTONIAN = 37;
export const LANG_FAEROESE = 56;
export const LANG_FARSI = 41;
export const LANG_FILIPINO = 100;
export const LANG_FINNISH = 11;
export const LANG_FRENCH = 12;
export const LANG_FRISIAN = 98;
export const LANG_FULAH = 103;
export const LANG_GALICIAN = 86;
export const LANG_GEORGIAN = 55;
export const LANG_GERMAN = 7;
export const LANG_GREEK = 8;
export const LANG_GREENLANDIC = 111;
export const LANG_GUJARATI = 71;
export const LANG_HAUSA = 104;
export const LANG_HAWAIIAN = 117;
export const LANG_HEBREW = 13;
export const LANG_HINDI = 57;
export const LANG_HUNGARIAN = 14;
export const LANG_ICELANDIC = 15;
export const LANG_IGBO = 112;
export const LANG_INDONESIAN = 33;
export const LANG_INUKTITUT = 93;
export const LANG_IRISH = 60;
export const LANG_ITALIAN = 16;
export const LANG_JAPANESE = 17;
export const LANG_KANNADA = 75;
export const LANG_KASHMIRI = 96;
export const LANG_KAZAK = 63;
export const LANG_KHMER = 83;
export const LANG_KICHE = 134;
export const LANG_KINYARWANDA = 135;
export const LANG_KONKANI = 87;
export const LANG_KOREAN = 18;
export const LANG_KYRGYZ = 64;
export const LANG_LAO = 84;
export const LANG_LATVIAN = 38;
export const LANG_LITHUANIAN = 39;
export const LANG_LOWER_SORBIAN = 46;
export const LANG_LUXEMBOURGISH = 110;
export const LANG_MACEDONIAN = 47;
export const LANG_MALAY = 62;
export const LANG_MALAYALAM = 76;
export const LANG_MALTESE = 58;
export const LANG_MANIPURI = 88;
export const LANG_MAORI = 129;
export const LANG_MAPUDUNGUN = 122;
export const LANG_MARATHI = 78;
export const LANG_MOHAWK = 124;
export const LANG_MONGOLIAN = 80;
export const LANG_NEPALI = 97;
export const LANG_NORWEGIAN = 20;
export const LANG_OCCITAN = 130;
export const LANG_ODIA = 72;
export const LANG_ORIYA = 72;
export const LANG_PASHTO = 99;
export const LANG_PERSIAN = 41;
export const LANG_POLISH = 21;
export const LANG_PORTUGUESE = 22;
export const LANG_PULAR = 103;
export const LANG_PUNJABI = 70;
export const LANG_QUECHUA = 107;
export const LANG_ROMANIAN = 24;
export const LANG_ROMANSH = 23;
export const LANG_RUSSIAN = 25;
export const LANG_SAKHA = 133;
export const LANG_SAMI = 59;
export const LANG_SANSKRIT = 79;
export const LANG_SCOTTISH_GAELIC = 145;
export const LANG_SERBIAN = 26;
export const LANG_SERBIAN_NEUTRAL = 31770;
export const LANG_SINDHI = 89;
export const LANG_SINHALESE = 91;
export const LANG_SLOVAK = 27;
export const LANG_SLOVENIAN = 36;
export const LANG_SOTHO = 108;
export const LANG_SPANISH = 10;
export const LANG_SWAHILI = 65;
export const LANG_SWEDISH = 29;
export const LANG_SYRIAC = 90;
export const LANG_TAJIK = 40;
export const LANG_TAMAZIGHT = 95;
export const LANG_TAMIL = 73;
export const LANG_TATAR = 68;
export const LANG_TELUGU = 74;
export const LANG_THAI = 30;
export const LANG_TIBETAN = 81;
export const LANG_TIGRIGNA = 115;
export const LANG_TIGRINYA = 115;
export const LANG_TSWANA = 50;
export const LANG_TURKISH = 31;
export const LANG_TURKMEN = 66;
export const LANG_UIGHUR = 128;
export const LANG_UKRAINIAN = 34;
export const LANG_UPPER_SORBIAN = 46;
export const LANG_URDU = 32;
export const LANG_UZBEK = 67;
export const LANG_VALENCIAN = 3;
export const LANG_VIETNAMESE = 42;
export const LANG_WELSH = 82;
export const LANG_WOLOF = 136;
export const LANG_XHOSA = 52;
export const LANG_YAKUT = 133;
export const LANG_YI = 120;
export const LANG_YORUBA = 106;
export const LANG_ZULU = 53;
export const SUBLANG_NEUTRAL = 0;
export const SUBLANG_DEFAULT = 1;
export const SUBLANG_SYS_DEFAULT = 2;
export const SUBLANG_CUSTOM_DEFAULT = 3;
export const SUBLANG_CUSTOM_UNSPECIFIED = 4;
export const SUBLANG_UI_CUSTOM_DEFAULT = 5;
export const SUBLANG_AFRIKAANS_SOUTH_AFRICA = 1;
export const SUBLANG_ALBANIAN_ALBANIA = 1;
export const SUBLANG_ALSATIAN_FRANCE = 1;
export const SUBLANG_AMHARIC_ETHIOPIA = 1;
export const SUBLANG_ARABIC_SAUDI_ARABIA = 1;
export const SUBLANG_ARABIC_IRAQ = 2;
export const SUBLANG_ARABIC_EGYPT = 3;
export const SUBLANG_ARABIC_LIBYA = 4;
export const SUBLANG_ARABIC_ALGERIA = 5;
export const SUBLANG_ARABIC_MOROCCO = 6;
export const SUBLANG_ARABIC_TUNISIA = 7;
export const SUBLANG_ARABIC_OMAN = 8;
export const SUBLANG_ARABIC_YEMEN = 9;
export const SUBLANG_ARABIC_SYRIA = 10;
export const SUBLANG_ARABIC_JORDAN = 11;
export const SUBLANG_ARABIC_LEBANON = 12;
export const SUBLANG_ARABIC_KUWAIT = 13;
export const SUBLANG_ARABIC_UAE = 14;
export const SUBLANG_ARABIC_BAHRAIN = 15;
export const SUBLANG_ARABIC_QATAR = 16;
export const SUBLANG_ARMENIAN_ARMENIA = 1;
export const SUBLANG_ASSAMESE_INDIA = 1;
export const SUBLANG_AZERI_LATIN = 1;
export const SUBLANG_AZERI_CYRILLIC = 2;
export const SUBLANG_AZERBAIJANI_AZERBAIJAN_LATIN = 1;
export const SUBLANG_AZERBAIJANI_AZERBAIJAN_CYRILLIC = 2;
export const SUBLANG_BANGLA_INDIA = 1;
export const SUBLANG_BANGLA_BANGLADESH = 2;
export const SUBLANG_BASHKIR_RUSSIA = 1;
export const SUBLANG_BASQUE_BASQUE = 1;
export const SUBLANG_BELARUSIAN_BELARUS = 1;
export const SUBLANG_BENGALI_INDIA = 1;
export const SUBLANG_BENGALI_BANGLADESH = 2;
export const SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_LATIN = 5;
export const SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_CYRILLIC = 8;
export const SUBLANG_BRETON_FRANCE = 1;
export const SUBLANG_BULGARIAN_BULGARIA = 1;
export const SUBLANG_CATALAN_CATALAN = 1;
export const SUBLANG_CENTRAL_KURDISH_IRAQ = 1;
export const SUBLANG_CHEROKEE_CHEROKEE = 1;
export const SUBLANG_CHINESE_TRADITIONAL = 1;
export const SUBLANG_CHINESE_SIMPLIFIED = 2;
export const SUBLANG_CHINESE_HONGKONG = 3;
export const SUBLANG_CHINESE_SINGAPORE = 4;
export const SUBLANG_CHINESE_MACAU = 5;
export const SUBLANG_CORSICAN_FRANCE = 1;
export const SUBLANG_CZECH_CZECH_REPUBLIC = 1;
export const SUBLANG_CROATIAN_CROATIA = 1;
export const SUBLANG_CROATIAN_BOSNIA_HERZEGOVINA_LATIN = 4;
export const SUBLANG_DANISH_DENMARK = 1;
export const SUBLANG_DARI_AFGHANISTAN = 1;
export const SUBLANG_DIVEHI_MALDIVES = 1;
export const SUBLANG_DUTCH = 1;
export const SUBLANG_DUTCH_BELGIAN = 2;
export const SUBLANG_ENGLISH_US = 1;
export const SUBLANG_ENGLISH_UK = 2;
export const SUBLANG_ENGLISH_AUS = 3;
export const SUBLANG_ENGLISH_CAN = 4;
export const SUBLANG_ENGLISH_NZ = 5;
export const SUBLANG_ENGLISH_EIRE = 6;
export const SUBLANG_ENGLISH_SOUTH_AFRICA = 7;
export const SUBLANG_ENGLISH_JAMAICA = 8;
export const SUBLANG_ENGLISH_CARIBBEAN = 9;
export const SUBLANG_ENGLISH_BELIZE = 10;
export const SUBLANG_ENGLISH_TRINIDAD = 11;
export const SUBLANG_ENGLISH_ZIMBABWE = 12;
export const SUBLANG_ENGLISH_PHILIPPINES = 13;
export const SUBLANG_ENGLISH_INDIA = 16;
export const SUBLANG_ENGLISH_MALAYSIA = 17;
export const SUBLANG_ENGLISH_SINGAPORE = 18;
export const SUBLANG_ESTONIAN_ESTONIA = 1;
export const SUBLANG_FAEROESE_FAROE_ISLANDS = 1;
export const SUBLANG_FILIPINO_PHILIPPINES = 1;
export const SUBLANG_FINNISH_FINLAND = 1;
export const SUBLANG_FRENCH = 1;
export const SUBLANG_FRENCH_BELGIAN = 2;
export const SUBLANG_FRENCH_CANADIAN = 3;
export const SUBLANG_FRENCH_SWISS = 4;
export const SUBLANG_FRENCH_LUXEMBOURG = 5;
export const SUBLANG_FRENCH_MONACO = 6;
export const SUBLANG_FRISIAN_NETHERLANDS = 1;
export const SUBLANG_FULAH_SENEGAL = 2;
export const SUBLANG_GALICIAN_GALICIAN = 1;
export const SUBLANG_GEORGIAN_GEORGIA = 1;
export const SUBLANG_GERMAN = 1;
export const SUBLANG_GERMAN_SWISS = 2;
export const SUBLANG_GERMAN_AUSTRIAN = 3;
export const SUBLANG_GERMAN_LUXEMBOURG = 4;
export const SUBLANG_GERMAN_LIECHTENSTEIN = 5;
export const SUBLANG_GREEK_GREECE = 1;
export const SUBLANG_GREENLANDIC_GREENLAND = 1;
export const SUBLANG_GUJARATI_INDIA = 1;
export const SUBLANG_HAUSA_NIGERIA_LATIN = 1;
export const SUBLANG_HAWAIIAN_US = 1;
export const SUBLANG_HEBREW_ISRAEL = 1;
export const SUBLANG_HINDI_INDIA = 1;
export const SUBLANG_HUNGARIAN_HUNGARY = 1;
export const SUBLANG_ICELANDIC_ICELAND = 1;
export const SUBLANG_IGBO_NIGERIA = 1;
export const SUBLANG_INDONESIAN_INDONESIA = 1;
export const SUBLANG_INUKTITUT_CANADA = 1;
export const SUBLANG_INUKTITUT_CANADA_LATIN = 2;
export const SUBLANG_IRISH_IRELAND = 2;
export const SUBLANG_ITALIAN = 1;
export const SUBLANG_ITALIAN_SWISS = 2;
export const SUBLANG_JAPANESE_JAPAN = 1;
export const SUBLANG_KANNADA_INDIA = 1;
export const SUBLANG_KASHMIRI_SASIA = 2;
export const SUBLANG_KASHMIRI_INDIA = 2;
export const SUBLANG_KAZAK_KAZAKHSTAN = 1;
export const SUBLANG_KHMER_CAMBODIA = 1;
export const SUBLANG_KICHE_GUATEMALA = 1;
export const SUBLANG_KINYARWANDA_RWANDA = 1;
export const SUBLANG_KONKANI_INDIA = 1;
export const SUBLANG_KOREAN = 1;
export const SUBLANG_KYRGYZ_KYRGYZSTAN = 1;
export const SUBLANG_LAO_LAO = 1;
export const SUBLANG_LATVIAN_LATVIA = 1;
export const SUBLANG_LITHUANIAN = 1;
export const SUBLANG_LOWER_SORBIAN_GERMANY = 2;
export const SUBLANG_LUXEMBOURGISH_LUXEMBOURG = 1;
export const SUBLANG_MACEDONIAN_MACEDONIA = 1;
export const SUBLANG_MALAY_MALAYSIA = 1;
export const SUBLANG_MALAY_BRUNEI_DARUSSALAM = 2;
export const SUBLANG_MALAYALAM_INDIA = 1;
export const SUBLANG_MALTESE_MALTA = 1;
export const SUBLANG_MAORI_NEW_ZEALAND = 1;
export const SUBLANG_MAPUDUNGUN_CHILE = 1;
export const SUBLANG_MARATHI_INDIA = 1;
export const SUBLANG_MOHAWK_MOHAWK = 1;
export const SUBLANG_MONGOLIAN_CYRILLIC_MONGOLIA = 1;
export const SUBLANG_MONGOLIAN_PRC = 2;
export const SUBLANG_NEPALI_INDIA = 2;
export const SUBLANG_NEPALI_NEPAL = 1;
export const SUBLANG_NORWEGIAN_BOKMAL = 1;
export const SUBLANG_NORWEGIAN_NYNORSK = 2;
export const SUBLANG_OCCITAN_FRANCE = 1;
export const SUBLANG_ODIA_INDIA = 1;
export const SUBLANG_ORIYA_INDIA = 1;
export const SUBLANG_PASHTO_AFGHANISTAN = 1;
export const SUBLANG_PERSIAN_IRAN = 1;
export const SUBLANG_POLISH_POLAND = 1;
export const SUBLANG_PORTUGUESE = 2;
export const SUBLANG_PORTUGUESE_BRAZILIAN = 1;
export const SUBLANG_PULAR_SENEGAL = 2;
export const SUBLANG_PUNJABI_INDIA = 1;
export const SUBLANG_PUNJABI_PAKISTAN = 2;
export const SUBLANG_QUECHUA_BOLIVIA = 1;
export const SUBLANG_QUECHUA_ECUADOR = 2;
export const SUBLANG_QUECHUA_PERU = 3;
export const SUBLANG_ROMANIAN_ROMANIA = 1;
export const SUBLANG_ROMANSH_SWITZERLAND = 1;
export const SUBLANG_RUSSIAN_RUSSIA = 1;
export const SUBLANG_SAKHA_RUSSIA = 1;
export const SUBLANG_SAMI_NORTHERN_NORWAY = 1;
export const SUBLANG_SAMI_NORTHERN_SWEDEN = 2;
export const SUBLANG_SAMI_NORTHERN_FINLAND = 3;
export const SUBLANG_SAMI_LULE_NORWAY = 4;
export const SUBLANG_SAMI_LULE_SWEDEN = 5;
export const SUBLANG_SAMI_SOUTHERN_NORWAY = 6;
export const SUBLANG_SAMI_SOUTHERN_SWEDEN = 7;
export const SUBLANG_SAMI_SKOLT_FINLAND = 8;
export const SUBLANG_SAMI_INARI_FINLAND = 9;
export const SUBLANG_SANSKRIT_INDIA = 1;
export const SUBLANG_SCOTTISH_GAELIC = 1;
export const SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_LATIN = 6;
export const SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_CYRILLIC = 7;
export const SUBLANG_SERBIAN_MONTENEGRO_LATIN = 11;
export const SUBLANG_SERBIAN_MONTENEGRO_CYRILLIC = 12;
export const SUBLANG_SERBIAN_SERBIA_LATIN = 9;
export const SUBLANG_SERBIAN_SERBIA_CYRILLIC = 10;
export const SUBLANG_SERBIAN_CROATIA = 1;
export const SUBLANG_SERBIAN_LATIN = 2;
export const SUBLANG_SERBIAN_CYRILLIC = 3;
export const SUBLANG_SINDHI_INDIA = 1;
export const SUBLANG_SINDHI_PAKISTAN = 2;
export const SUBLANG_SINDHI_AFGHANISTAN = 2;
export const SUBLANG_SINHALESE_SRI_LANKA = 1;
export const SUBLANG_SOTHO_NORTHERN_SOUTH_AFRICA = 1;
export const SUBLANG_SLOVAK_SLOVAKIA = 1;
export const SUBLANG_SLOVENIAN_SLOVENIA = 1;
export const SUBLANG_SPANISH = 1;
export const SUBLANG_SPANISH_MEXICAN = 2;
export const SUBLANG_SPANISH_MODERN = 3;
export const SUBLANG_SPANISH_GUATEMALA = 4;
export const SUBLANG_SPANISH_COSTA_RICA = 5;
export const SUBLANG_SPANISH_PANAMA = 6;
export const SUBLANG_SPANISH_DOMINICAN_REPUBLIC = 7;
export const SUBLANG_SPANISH_VENEZUELA = 8;
export const SUBLANG_SPANISH_COLOMBIA = 9;
export const SUBLANG_SPANISH_PERU = 10;
export const SUBLANG_SPANISH_ARGENTINA = 11;
export const SUBLANG_SPANISH_ECUADOR = 12;
export const SUBLANG_SPANISH_CHILE = 13;
export const SUBLANG_SPANISH_URUGUAY = 14;
export const SUBLANG_SPANISH_PARAGUAY = 15;
export const SUBLANG_SPANISH_BOLIVIA = 16;
export const SUBLANG_SPANISH_EL_SALVADOR = 17;
export const SUBLANG_SPANISH_HONDURAS = 18;
export const SUBLANG_SPANISH_NICARAGUA = 19;
export const SUBLANG_SPANISH_PUERTO_RICO = 20;
export const SUBLANG_SPANISH_US = 21;
export const SUBLANG_SWAHILI_KENYA = 1;
export const SUBLANG_SWEDISH = 1;
export const SUBLANG_SWEDISH_FINLAND = 2;
export const SUBLANG_SYRIAC_SYRIA = 1;
export const SUBLANG_TAJIK_TAJIKISTAN = 1;
export const SUBLANG_TAMAZIGHT_ALGERIA_LATIN = 2;
export const SUBLANG_TAMAZIGHT_MOROCCO_TIFINAGH = 4;
export const SUBLANG_TAMIL_INDIA = 1;
export const SUBLANG_TAMIL_SRI_LANKA = 2;
export const SUBLANG_TATAR_RUSSIA = 1;
export const SUBLANG_TELUGU_INDIA = 1;
export const SUBLANG_THAI_THAILAND = 1;
export const SUBLANG_TIBETAN_PRC = 1;
export const SUBLANG_TIGRIGNA_ERITREA = 2;
export const SUBLANG_TIGRINYA_ERITREA = 2;
export const SUBLANG_TIGRINYA_ETHIOPIA = 1;
export const SUBLANG_TSWANA_BOTSWANA = 2;
export const SUBLANG_TSWANA_SOUTH_AFRICA = 1;
export const SUBLANG_TURKISH_TURKEY = 1;
export const SUBLANG_TURKMEN_TURKMENISTAN = 1;
export const SUBLANG_UIGHUR_PRC = 1;
export const SUBLANG_UKRAINIAN_UKRAINE = 1;
export const SUBLANG_UPPER_SORBIAN_GERMANY = 1;
export const SUBLANG_URDU_PAKISTAN = 1;
export const SUBLANG_URDU_INDIA = 2;
export const SUBLANG_UZBEK_LATIN = 1;
export const SUBLANG_UZBEK_CYRILLIC = 2;
export const SUBLANG_VALENCIAN_VALENCIA = 2;
export const SUBLANG_VIETNAMESE_VIETNAM = 1;
export const SUBLANG_WELSH_UNITED_KINGDOM = 1;
export const SUBLANG_WOLOF_SENEGAL = 1;
export const SUBLANG_XHOSA_SOUTH_AFRICA = 1;
export const SUBLANG_YAKUT_RUSSIA = 1;
export const SUBLANG_YI_PRC = 1;
export const SUBLANG_YORUBA_NIGERIA = 1;
export const SUBLANG_ZULU_SOUTH_AFRICA = 1;
export const SORT_DEFAULT = 0;
export const SORT_INVARIANT_MATH = 1;
export const SORT_JAPANESE_XJIS = 0;
export const SORT_JAPANESE_UNICODE = 1;
export const SORT_JAPANESE_RADICALSTROKE = 4;
export const SORT_CHINESE_BIG5 = 0;
export const SORT_CHINESE_PRCP = 0;
export const SORT_CHINESE_UNICODE = 1;
export const SORT_CHINESE_PRC = 2;
export const SORT_CHINESE_BOPOMOFO = 3;
export const SORT_CHINESE_RADICALSTROKE = 4;
export const SORT_KOREAN_KSC = 0;
export const SORT_KOREAN_UNICODE = 1;
export const SORT_GERMAN_PHONE_BOOK = 1;
export const SORT_HUNGARIAN_DEFAULT = 0;
export const SORT_HUNGARIAN_TECHNICAL = 1;
export const SORT_GEORGIAN_TRADITIONAL = 0;
export const SORT_GEORGIAN_MODERN = 1;
export const NLS_VALID_LOCALE_MASK = 1048575;
export const LOCALE_NAME_MAX_LENGTH = 85;
export const LOCALE_TRANSIENT_KEYBOARD1 = 8192;
export const LOCALE_TRANSIENT_KEYBOARD2 = 9216;
export const LOCALE_TRANSIENT_KEYBOARD3 = 10240;
export const LOCALE_TRANSIENT_KEYBOARD4 = 11264;
export const MAXIMUM_WAIT_OBJECTS = 64;
export const MAXIMUM_SUSPEND_COUNT = 127;
export const PF_TEMPORAL_LEVEL_1 = 1;
export const PF_TEMPORAL_LEVEL_2 = 2;
export const PF_TEMPORAL_LEVEL_3 = 3;
export const PF_NON_TEMPORAL_LEVEL_ALL = 0;
export const EXCEPTION_READ_FAULT = 0;
export const EXCEPTION_WRITE_FAULT = 1;
export const EXCEPTION_EXECUTE_FAULT = 8;
export const CONTEXT_AMD64 = 1048576;
export const CONTEXT_KERNEL_DEBUGGER = 67108864;
export const CONTEXT_EXCEPTION_ACTIVE = 134217728;
export const CONTEXT_SERVICE_ACTIVE = 268435456;
export const CONTEXT_EXCEPTION_REQUEST = 1073741824;
export const CONTEXT_EXCEPTION_REPORTING = `-2147483648`;
export const CONTEXT_UNWOUND_TO_CALL = 536870912;
export const INITIAL_MXCSR = 8064;
export const INITIAL_FPCSR = 639;
export const RUNTIME_FUNCTION_INDIRECT = 1;
export const UNW_FLAG_NO_EPILOGUE = 2147483648;
export const UNWIND_CHAIN_LIMIT = 32;
export const OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK_EXPORT_NAME = `OutOfProcessFunctionTableCallback`;
export const CONTEXT_ARM = 2097152;
export const INITIAL_CPSR = 16;
export const INITIAL_FPSCR = 0;
export const ARM_MAX_BREAKPOINTS = 8;
export const ARM_MAX_WATCHPOINTS = 1;
export const ARM64_PREFETCH_PLD = 0;
export const ARM64_PREFETCH_PLI = 8;
export const ARM64_PREFETCH_PST = 16;
export const ARM64_PREFETCH_L1 = 0;
export const ARM64_PREFETCH_L2 = 2;
export const ARM64_PREFETCH_L3 = 4;
export const ARM64_PREFETCH_KEEP = 0;
export const ARM64_PREFETCH_STRM = 1;
export const ARM64_MULT_INTRINSICS_SUPPORTED = 1;
export const CONTEXT_ARM64 = 4194304;
export const CONTEXT_ARM64_UNWOUND_TO_CALL = 536870912;
export const CONTEXT_ARM64_RET_TO_GUEST = 67108864;
export const CONTEXT_RET_TO_GUEST = 67108864;
export const ARM64_MAX_BREAKPOINTS = 8;
export const ARM64_MAX_WATCHPOINTS = 2;
export const NONVOL_INT_NUMREG_ARM64 = 11;
export const NONVOL_FP_NUMREG_ARM64 = 8;
export const BREAK_DEBUG_BASE = 524288;
export const ASSERT_BREAKPOINT = 524291;
export const SIZE_OF_80387_REGISTERS = 80;
export const CONTEXT_i386 = 65536;
export const CONTEXT_i486 = 65536;
export const MAXIMUM_SUPPORTED_EXTENSION = 512;
export const EXCEPTION_NONCONTINUABLE = 1;
export const EXCEPTION_UNWINDING = 2;
export const EXCEPTION_EXIT_UNWIND = 4;
export const EXCEPTION_STACK_INVALID = 8;
export const EXCEPTION_NESTED_CALL = 16;
export const EXCEPTION_TARGET_UNWIND = 32;
export const EXCEPTION_COLLIDED_UNWIND = 64;
export const EXCEPTION_SOFTWARE_ORIGINATE = 128;
export const EXCEPTION_MAXIMUM_PARAMETERS = 15;
export const ACCESS_SYSTEM_SECURITY = 16777216;
export const MAXIMUM_ALLOWED = 33554432;
export const GENERIC_READ = 2147483648;
export const GENERIC_WRITE = 1073741824;
export const GENERIC_EXECUTE = 536870912;
export const GENERIC_ALL = 268435456;
export const SID_REVISION = 1;
export const SID_MAX_SUB_AUTHORITIES = 15;
export const SID_RECOMMENDED_SUB_AUTHORITIES = 1;
export const SID_HASH_SIZE = 32;
export const SECURITY_NULL_RID = 0;
export const SECURITY_WORLD_RID = 0;
export const SECURITY_LOCAL_RID = 0;
export const SECURITY_LOCAL_LOGON_RID = 1;
export const SECURITY_CREATOR_OWNER_RID = 0;
export const SECURITY_CREATOR_GROUP_RID = 1;
export const SECURITY_CREATOR_OWNER_SERVER_RID = 2;
export const SECURITY_CREATOR_GROUP_SERVER_RID = 3;
export const SECURITY_CREATOR_OWNER_RIGHTS_RID = 4;
export const SECURITY_DIALUP_RID = 1;
export const SECURITY_NETWORK_RID = 2;
export const SECURITY_BATCH_RID = 3;
export const SECURITY_INTERACTIVE_RID = 4;
export const SECURITY_LOGON_IDS_RID = 5;
export const SECURITY_LOGON_IDS_RID_COUNT = 3;
export const SECURITY_SERVICE_RID = 6;
export const SECURITY_ANONYMOUS_LOGON_RID = 7;
export const SECURITY_PROXY_RID = 8;
export const SECURITY_ENTERPRISE_CONTROLLERS_RID = 9;
export const SECURITY_SERVER_LOGON_RID = 9;
export const SECURITY_PRINCIPAL_SELF_RID = 10;
export const SECURITY_AUTHENTICATED_USER_RID = 11;
export const SECURITY_RESTRICTED_CODE_RID = 12;
export const SECURITY_TERMINAL_SERVER_RID = 13;
export const SECURITY_REMOTE_LOGON_RID = 14;
export const SECURITY_THIS_ORGANIZATION_RID = 15;
export const SECURITY_IUSER_RID = 17;
export const SECURITY_LOCAL_SYSTEM_RID = 18;
export const SECURITY_LOCAL_SERVICE_RID = 19;
export const SECURITY_NETWORK_SERVICE_RID = 20;
export const SECURITY_NT_NON_UNIQUE = 21;
export const SECURITY_NT_NON_UNIQUE_SUB_AUTH_COUNT = 3;
export const SECURITY_ENTERPRISE_READONLY_CONTROLLERS_RID = 22;
export const SECURITY_BUILTIN_DOMAIN_RID = 32;
export const SECURITY_WRITE_RESTRICTED_CODE_RID = 33;
export const SECURITY_PACKAGE_BASE_RID = 64;
export const SECURITY_PACKAGE_RID_COUNT = 2;
export const SECURITY_PACKAGE_NTLM_RID = 10;
export const SECURITY_PACKAGE_SCHANNEL_RID = 14;
export const SECURITY_PACKAGE_DIGEST_RID = 21;
export const SECURITY_CRED_TYPE_BASE_RID = 65;
export const SECURITY_CRED_TYPE_RID_COUNT = 2;
export const SECURITY_CRED_TYPE_THIS_ORG_CERT_RID = 1;
export const SECURITY_MIN_BASE_RID = 80;
export const SECURITY_SERVICE_ID_BASE_RID = 80;
export const SECURITY_SERVICE_ID_RID_COUNT = 6;
export const SECURITY_RESERVED_ID_BASE_RID = 81;
export const SECURITY_APPPOOL_ID_BASE_RID = 82;
export const SECURITY_APPPOOL_ID_RID_COUNT = 6;
export const SECURITY_VIRTUALSERVER_ID_BASE_RID = 83;
export const SECURITY_VIRTUALSERVER_ID_RID_COUNT = 6;
export const SECURITY_USERMODEDRIVERHOST_ID_BASE_RID = 84;
export const SECURITY_USERMODEDRIVERHOST_ID_RID_COUNT = 6;
export const SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_BASE_RID = 85;
export const SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_RID_COUNT = 6;
export const SECURITY_WMIHOST_ID_BASE_RID = 86;
export const SECURITY_WMIHOST_ID_RID_COUNT = 6;
export const SECURITY_TASK_ID_BASE_RID = 87;
export const SECURITY_NFS_ID_BASE_RID = 88;
export const SECURITY_COM_ID_BASE_RID = 89;
export const SECURITY_WINDOW_MANAGER_BASE_RID = 90;
export const SECURITY_RDV_GFX_BASE_RID = 91;
export const SECURITY_DASHOST_ID_BASE_RID = 92;
export const SECURITY_DASHOST_ID_RID_COUNT = 6;
export const SECURITY_USERMANAGER_ID_BASE_RID = 93;
export const SECURITY_USERMANAGER_ID_RID_COUNT = 6;
export const SECURITY_WINRM_ID_BASE_RID = 94;
export const SECURITY_WINRM_ID_RID_COUNT = 6;
export const SECURITY_CCG_ID_BASE_RID = 95;
export const SECURITY_UMFD_BASE_RID = 96;
export const SECURITY_VIRTUALACCOUNT_ID_RID_COUNT = 6;
export const SECURITY_MAX_BASE_RID = 111;
export const SECURITY_MAX_ALWAYS_FILTERED = 999;
export const SECURITY_MIN_NEVER_FILTERED = 1000;
export const SECURITY_OTHER_ORGANIZATION_RID = 1000;
export const SECURITY_WINDOWSMOBILE_ID_BASE_RID = 112;
export const SECURITY_INSTALLER_GROUP_CAPABILITY_BASE = 32;
export const SECURITY_INSTALLER_GROUP_CAPABILITY_RID_COUNT = 9;
export const SECURITY_INSTALLER_CAPABILITY_RID_COUNT = 10;
export const SECURITY_LOCAL_ACCOUNT_RID = 113;
export const SECURITY_LOCAL_ACCOUNT_AND_ADMIN_RID = 114;
export const DOMAIN_GROUP_RID_AUTHORIZATION_DATA_IS_COMPOUNDED = 496;
export const DOMAIN_GROUP_RID_AUTHORIZATION_DATA_CONTAINS_CLAIMS = 497;
export const DOMAIN_GROUP_RID_ENTERPRISE_READONLY_DOMAIN_CONTROLLERS = 498;
export const FOREST_USER_RID_MAX = 499;
export const DOMAIN_USER_RID_ADMIN = 500;
export const DOMAIN_USER_RID_GUEST = 501;
export const DOMAIN_USER_RID_KRBTGT = 502;
export const DOMAIN_USER_RID_DEFAULT_ACCOUNT = 503;
export const DOMAIN_USER_RID_WDAG_ACCOUNT = 504;
export const DOMAIN_USER_RID_MAX = 999;
export const DOMAIN_GROUP_RID_ADMINS = 512;
export const DOMAIN_GROUP_RID_USERS = 513;
export const DOMAIN_GROUP_RID_GUESTS = 514;
export const DOMAIN_GROUP_RID_COMPUTERS = 515;
export const DOMAIN_GROUP_RID_CONTROLLERS = 516;
export const DOMAIN_GROUP_RID_CERT_ADMINS = 517;
export const DOMAIN_GROUP_RID_SCHEMA_ADMINS = 518;
export const DOMAIN_GROUP_RID_ENTERPRISE_ADMINS = 519;
export const DOMAIN_GROUP_RID_POLICY_ADMINS = 520;
export const DOMAIN_GROUP_RID_READONLY_CONTROLLERS = 521;
export const DOMAIN_GROUP_RID_CLONEABLE_CONTROLLERS = 522;
export const DOMAIN_GROUP_RID_CDC_RESERVED = 524;
export const DOMAIN_GROUP_RID_PROTECTED_USERS = 525;
export const DOMAIN_GROUP_RID_KEY_ADMINS = 526;
export const DOMAIN_GROUP_RID_ENTERPRISE_KEY_ADMINS = 527;
export const DOMAIN_ALIAS_RID_ADMINS = 544;
export const DOMAIN_ALIAS_RID_USERS = 545;
export const DOMAIN_ALIAS_RID_GUESTS = 546;
export const DOMAIN_ALIAS_RID_POWER_USERS = 547;
export const DOMAIN_ALIAS_RID_ACCOUNT_OPS = 548;
export const DOMAIN_ALIAS_RID_SYSTEM_OPS = 549;
export const DOMAIN_ALIAS_RID_PRINT_OPS = 550;
export const DOMAIN_ALIAS_RID_BACKUP_OPS = 551;
export const DOMAIN_ALIAS_RID_REPLICATOR = 552;
export const DOMAIN_ALIAS_RID_RAS_SERVERS = 553;
export const DOMAIN_ALIAS_RID_PREW2KCOMPACCESS = 554;
export const DOMAIN_ALIAS_RID_REMOTE_DESKTOP_USERS = 555;
export const DOMAIN_ALIAS_RID_NETWORK_CONFIGURATION_OPS = 556;
export const DOMAIN_ALIAS_RID_INCOMING_FOREST_TRUST_BUILDERS = 557;
export const DOMAIN_ALIAS_RID_MONITORING_USERS = 558;
export const DOMAIN_ALIAS_RID_LOGGING_USERS = 559;
export const DOMAIN_ALIAS_RID_AUTHORIZATIONACCESS = 560;
export const DOMAIN_ALIAS_RID_TS_LICENSE_SERVERS = 561;
export const DOMAIN_ALIAS_RID_DCOM_USERS = 562;
export const DOMAIN_ALIAS_RID_IUSERS = 568;
export const DOMAIN_ALIAS_RID_CRYPTO_OPERATORS = 569;
export const DOMAIN_ALIAS_RID_CACHEABLE_PRINCIPALS_GROUP = 571;
export const DOMAIN_ALIAS_RID_NON_CACHEABLE_PRINCIPALS_GROUP = 572;
export const DOMAIN_ALIAS_RID_EVENT_LOG_READERS_GROUP = 573;
export const DOMAIN_ALIAS_RID_CERTSVC_DCOM_ACCESS_GROUP = 574;
export const DOMAIN_ALIAS_RID_RDS_REMOTE_ACCESS_SERVERS = 575;
export const DOMAIN_ALIAS_RID_RDS_ENDPOINT_SERVERS = 576;
export const DOMAIN_ALIAS_RID_RDS_MANAGEMENT_SERVERS = 577;
export const DOMAIN_ALIAS_RID_HYPER_V_ADMINS = 578;
export const DOMAIN_ALIAS_RID_ACCESS_CONTROL_ASSISTANCE_OPS = 579;
export const DOMAIN_ALIAS_RID_REMOTE_MANAGEMENT_USERS = 580;
export const DOMAIN_ALIAS_RID_DEFAULT_ACCOUNT = 581;
export const DOMAIN_ALIAS_RID_STORAGE_REPLICA_ADMINS = 582;
export const DOMAIN_ALIAS_RID_DEVICE_OWNERS = 583;
export const SECURITY_APP_PACKAGE_BASE_RID = 2;
export const SECURITY_BUILTIN_APP_PACKAGE_RID_COUNT = 2;
export const SECURITY_APP_PACKAGE_RID_COUNT = 8;
export const SECURITY_CAPABILITY_BASE_RID = 3;
export const SECURITY_CAPABILITY_APP_RID = 1024;
export const SECURITY_BUILTIN_CAPABILITY_RID_COUNT = 2;
export const SECURITY_CAPABILITY_RID_COUNT = 5;
export const SECURITY_PARENT_PACKAGE_RID_COUNT = 8;
export const SECURITY_CHILD_PACKAGE_RID_COUNT = 12;
export const SECURITY_BUILTIN_PACKAGE_ANY_PACKAGE = 1;
export const SECURITY_BUILTIN_PACKAGE_ANY_RESTRICTED_PACKAGE = 2;
export const SECURITY_CAPABILITY_INTERNET_CLIENT = 1;
export const SECURITY_CAPABILITY_INTERNET_CLIENT_SERVER = 2;
export const SECURITY_CAPABILITY_PRIVATE_NETWORK_CLIENT_SERVER = 3;
export const SECURITY_CAPABILITY_PICTURES_LIBRARY = 4;
export const SECURITY_CAPABILITY_VIDEOS_LIBRARY = 5;
export const SECURITY_CAPABILITY_MUSIC_LIBRARY = 6;
export const SECURITY_CAPABILITY_DOCUMENTS_LIBRARY = 7;
export const SECURITY_CAPABILITY_ENTERPRISE_AUTHENTICATION = 8;
export const SECURITY_CAPABILITY_SHARED_USER_CERTIFICATES = 9;
export const SECURITY_CAPABILITY_REMOVABLE_STORAGE = 10;
export const SECURITY_CAPABILITY_APPOINTMENTS = 11;
export const SECURITY_CAPABILITY_CONTACTS = 12;
export const SECURITY_CAPABILITY_INTERNET_EXPLORER = 4096;
export const SECURITY_MANDATORY_UNTRUSTED_RID = 0;
export const SECURITY_MANDATORY_LOW_RID = 4096;
export const SECURITY_MANDATORY_MEDIUM_RID = 8192;
export const SECURITY_MANDATORY_MEDIUM_PLUS_RID = 8448;
export const SECURITY_MANDATORY_HIGH_RID = 12288;
export const SECURITY_MANDATORY_SYSTEM_RID = 16384;
export const SECURITY_MANDATORY_PROTECTED_PROCESS_RID = 20480;
export const SECURITY_MANDATORY_MAXIMUM_USER_RID = 16384;
export const SECURITY_AUTHENTICATION_AUTHORITY_RID_COUNT = 1;
export const SECURITY_AUTHENTICATION_AUTHORITY_ASSERTED_RID = 1;
export const SECURITY_AUTHENTICATION_SERVICE_ASSERTED_RID = 2;
export const SECURITY_AUTHENTICATION_FRESH_KEY_AUTH_RID = 3;
export const SECURITY_AUTHENTICATION_KEY_TRUST_RID = 4;
export const SECURITY_AUTHENTICATION_KEY_PROPERTY_MFA_RID = 5;
export const SECURITY_AUTHENTICATION_KEY_PROPERTY_ATTESTATION_RID = 6;
export const SECURITY_PROCESS_TRUST_AUTHORITY_RID_COUNT = 2;
export const SECURITY_PROCESS_PROTECTION_TYPE_FULL_RID = 1024;
export const SECURITY_PROCESS_PROTECTION_TYPE_LITE_RID = 512;
export const SECURITY_PROCESS_PROTECTION_TYPE_NONE_RID = 0;
export const SECURITY_PROCESS_PROTECTION_LEVEL_WINTCB_RID = 8192;
export const SECURITY_PROCESS_PROTECTION_LEVEL_WINDOWS_RID = 4096;
export const SECURITY_PROCESS_PROTECTION_LEVEL_APP_RID = 2048;
export const SECURITY_PROCESS_PROTECTION_LEVEL_ANTIMALWARE_RID = 1536;
export const SECURITY_PROCESS_PROTECTION_LEVEL_AUTHENTICODE_RID = 1024;
export const SECURITY_PROCESS_PROTECTION_LEVEL_NONE_RID = 0;
export const SECURITY_TRUSTED_INSTALLER_RID1 = 956008885;
export const SECURITY_TRUSTED_INSTALLER_RID2 = 3418522649;
export const SECURITY_TRUSTED_INSTALLER_RID3 = 1831038044;
export const SECURITY_TRUSTED_INSTALLER_RID4 = 1853292631;
export const SECURITY_TRUSTED_INSTALLER_RID5 = 2271478464;
export const SE_GROUP_MANDATORY = 1;
export const SE_GROUP_ENABLED_BY_DEFAULT = 2;
export const SE_GROUP_ENABLED = 4;
export const SE_GROUP_OWNER = 8;
export const SE_GROUP_USE_FOR_DENY_ONLY = 16;
export const SE_GROUP_INTEGRITY = 32;
export const SE_GROUP_INTEGRITY_ENABLED = 64;
export const SE_GROUP_LOGON_ID = `-1073741824`;
export const SE_GROUP_RESOURCE = 536870912;
export const ACL_REVISION1 = 1;
export const ACL_REVISION2 = 2;
export const ACL_REVISION3 = 3;
export const ACL_REVISION4 = 4;
export const MAX_ACL_REVISION = 4;
export const ACCESS_MIN_MS_ACE_TYPE = 0;
export const ACCESS_ALLOWED_ACE_TYPE = 0;
export const ACCESS_DENIED_ACE_TYPE = 1;
export const SYSTEM_AUDIT_ACE_TYPE = 2;
export const SYSTEM_ALARM_ACE_TYPE = 3;
export const ACCESS_MAX_MS_V2_ACE_TYPE = 3;
export const ACCESS_ALLOWED_COMPOUND_ACE_TYPE = 4;
export const ACCESS_MAX_MS_V3_ACE_TYPE = 4;
export const ACCESS_MIN_MS_OBJECT_ACE_TYPE = 5;
export const ACCESS_ALLOWED_OBJECT_ACE_TYPE = 5;
export const ACCESS_DENIED_OBJECT_ACE_TYPE = 6;
export const SYSTEM_AUDIT_OBJECT_ACE_TYPE = 7;
export const SYSTEM_ALARM_OBJECT_ACE_TYPE = 8;
export const ACCESS_MAX_MS_OBJECT_ACE_TYPE = 8;
export const ACCESS_MAX_MS_V4_ACE_TYPE = 8;
export const ACCESS_MAX_MS_ACE_TYPE = 8;
export const ACCESS_ALLOWED_CALLBACK_ACE_TYPE = 9;
export const ACCESS_DENIED_CALLBACK_ACE_TYPE = 10;
export const ACCESS_ALLOWED_CALLBACK_OBJECT_ACE_TYPE = 11;
export const ACCESS_DENIED_CALLBACK_OBJECT_ACE_TYPE = 12;
export const SYSTEM_AUDIT_CALLBACK_ACE_TYPE = 13;
export const SYSTEM_ALARM_CALLBACK_ACE_TYPE = 14;
export const SYSTEM_AUDIT_CALLBACK_OBJECT_ACE_TYPE = 15;
export const SYSTEM_ALARM_CALLBACK_OBJECT_ACE_TYPE = 16;
export const SYSTEM_MANDATORY_LABEL_ACE_TYPE = 17;
export const SYSTEM_RESOURCE_ATTRIBUTE_ACE_TYPE = 18;
export const SYSTEM_SCOPED_POLICY_ID_ACE_TYPE = 19;
export const SYSTEM_PROCESS_TRUST_LABEL_ACE_TYPE = 20;
export const SYSTEM_ACCESS_FILTER_ACE_TYPE = 21;
export const ACCESS_MAX_MS_V5_ACE_TYPE = 21;
export const VALID_INHERIT_FLAGS = 31;
export const CRITICAL_ACE_FLAG = 32;
export const TRUST_PROTECTED_FILTER_ACE_FLAG = 64;
export const SYSTEM_MANDATORY_LABEL_NO_WRITE_UP = 1;
export const SYSTEM_MANDATORY_LABEL_NO_READ_UP = 2;
export const SYSTEM_MANDATORY_LABEL_NO_EXECUTE_UP = 4;
export const SYSTEM_PROCESS_TRUST_LABEL_VALID_MASK = 16777215;
export const SYSTEM_PROCESS_TRUST_NOCONSTRAINT_MASK = 4294967295;
export const SYSTEM_ACCESS_FILTER_VALID_MASK = 16777215;
export const SYSTEM_ACCESS_FILTER_NOCONSTRAINT_MASK = 4294967295;
export const SECURITY_DESCRIPTOR_REVISION = 1;
export const SECURITY_DESCRIPTOR_REVISION1 = 1;
export const SE_OWNER_DEFAULTED = 1;
export const SE_GROUP_DEFAULTED = 2;
export const SE_DACL_PRESENT = 4;
export const SE_DACL_DEFAULTED = 8;
export const SE_SACL_PRESENT = 16;
export const SE_SACL_DEFAULTED = 32;
export const SE_DACL_AUTO_INHERIT_REQ = 256;
export const SE_SACL_AUTO_INHERIT_REQ = 512;
export const SE_DACL_AUTO_INHERITED = 1024;
export const SE_SACL_AUTO_INHERITED = 2048;
export const SE_DACL_PROTECTED = 4096;
export const SE_SACL_PROTECTED = 8192;
export const SE_RM_CONTROL_VALID = 16384;
export const SE_SELF_RELATIVE = 32768;
export const ACCESS_OBJECT_GUID = 0;
export const ACCESS_PROPERTY_SET_GUID = 1;
export const ACCESS_PROPERTY_GUID = 2;
export const ACCESS_MAX_LEVEL = 4;
export const AUDIT_ALLOW_NO_PRIVILEGE = 1;
export const ACCESS_DS_SOURCE_A = `DS`;
export const ACCESS_DS_SOURCE_W = `DS`;
export const ACCESS_DS_OBJECT_TYPE_NAME_A = `Directory Service Object`;
export const ACCESS_DS_OBJECT_TYPE_NAME_W = `Directory Service Object`;
export const PRIVILEGE_SET_ALL_NECESSARY = 1;
export const ACCESS_REASON_TYPE_MASK = 16711680;
export const ACCESS_REASON_DATA_MASK = 65535;
export const ACCESS_REASON_STAGING_MASK = 2147483648;
export const ACCESS_REASON_EXDATA_MASK = 2130706432;
export const SE_SECURITY_DESCRIPTOR_FLAG_NO_OWNER_ACE = 1;
export const SE_SECURITY_DESCRIPTOR_FLAG_NO_LABEL_ACE = 2;
export const SE_SECURITY_DESCRIPTOR_FLAG_NO_ACCESS_FILTER_ACE = 4;
export const SE_SECURITY_DESCRIPTOR_VALID_FLAGS = 7;
export const SE_ACCESS_CHECK_FLAG_NO_LEARNING_MODE_LOGGING = 8;
export const SE_ACCESS_CHECK_VALID_FLAGS = 8;
export const SE_CREATE_TOKEN_NAME = `SeCreateTokenPrivilege`;
export const SE_ASSIGNPRIMARYTOKEN_NAME = `SeAssignPrimaryTokenPrivilege`;
export const SE_LOCK_MEMORY_NAME = `SeLockMemoryPrivilege`;
export const SE_INCREASE_QUOTA_NAME = `SeIncreaseQuotaPrivilege`;
export const SE_UNSOLICITED_INPUT_NAME = `SeUnsolicitedInputPrivilege`;
export const SE_MACHINE_ACCOUNT_NAME = `SeMachineAccountPrivilege`;
export const SE_TCB_NAME = `SeTcbPrivilege`;
export const SE_SECURITY_NAME = `SeSecurityPrivilege`;
export const SE_TAKE_OWNERSHIP_NAME = `SeTakeOwnershipPrivilege`;
export const SE_LOAD_DRIVER_NAME = `SeLoadDriverPrivilege`;
export const SE_SYSTEM_PROFILE_NAME = `SeSystemProfilePrivilege`;
export const SE_SYSTEMTIME_NAME = `SeSystemtimePrivilege`;
export const SE_PROF_SINGLE_PROCESS_NAME = `SeProfileSingleProcessPrivilege`;
export const SE_INC_BASE_PRIORITY_NAME = `SeIncreaseBasePriorityPrivilege`;
export const SE_CREATE_PAGEFILE_NAME = `SeCreatePagefilePrivilege`;
export const SE_CREATE_PERMANENT_NAME = `SeCreatePermanentPrivilege`;
export const SE_BACKUP_NAME = `SeBackupPrivilege`;
export const SE_RESTORE_NAME = `SeRestorePrivilege`;
export const SE_SHUTDOWN_NAME = `SeShutdownPrivilege`;
export const SE_DEBUG_NAME = `SeDebugPrivilege`;
export const SE_AUDIT_NAME = `SeAuditPrivilege`;
export const SE_SYSTEM_ENVIRONMENT_NAME = `SeSystemEnvironmentPrivilege`;
export const SE_CHANGE_NOTIFY_NAME = `SeChangeNotifyPrivilege`;
export const SE_REMOTE_SHUTDOWN_NAME = `SeRemoteShutdownPrivilege`;
export const SE_UNDOCK_NAME = `SeUndockPrivilege`;
export const SE_SYNC_AGENT_NAME = `SeSyncAgentPrivilege`;
export const SE_ENABLE_DELEGATION_NAME = `SeEnableDelegationPrivilege`;
export const SE_MANAGE_VOLUME_NAME = `SeManageVolumePrivilege`;
export const SE_IMPERSONATE_NAME = `SeImpersonatePrivilege`;
export const SE_CREATE_GLOBAL_NAME = `SeCreateGlobalPrivilege`;
export const SE_TRUSTED_CREDMAN_ACCESS_NAME = `SeTrustedCredManAccessPrivilege`;
export const SE_RELABEL_NAME = `SeRelabelPrivilege`;
export const SE_INC_WORKING_SET_NAME = `SeIncreaseWorkingSetPrivilege`;
export const SE_TIME_ZONE_NAME = `SeTimeZonePrivilege`;
export const SE_CREATE_SYMBOLIC_LINK_NAME = `SeCreateSymbolicLinkPrivilege`;
export const SE_DELEGATE_SESSION_USER_IMPERSONATE_NAME = `SeDelegateSessionUserImpersonatePrivilege`;
export const SE_ACTIVATE_AS_USER_CAPABILITY = `activateAsUser`;
export const SE_CONSTRAINED_IMPERSONATION_CAPABILITY = `constrainedImpersonation`;
export const SE_SESSION_IMPERSONATION_CAPABILITY = `sessionImpersonation`;
export const SE_MUMA_CAPABILITY = `muma`;
export const SE_DEVELOPMENT_MODE_NETWORK_CAPABILITY = `developmentModeNetwork`;
export const SE_PERMISSIVE_LEARNING_MODE_CAPABILITY = `permissiveLearningMode`;
export const POLICY_AUDIT_SUBCATEGORY_COUNT = 59;
export const TOKEN_SOURCE_LENGTH = 8;
export const CLAIM_SECURITY_ATTRIBUTE_TYPE_INVALID = 0;
export const CLAIM_SECURITY_ATTRIBUTE_CUSTOM_FLAGS = 4294901760;
export const CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION_V1 = 1;
export const CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION = 1;
export const PROCESS_TRUST_LABEL_SECURITY_INFORMATION = 128;
export const ACCESS_FILTER_SECURITY_INFORMATION = 256;
export const SE_SIGNING_LEVEL_UNCHECKED = 0;
export const SE_SIGNING_LEVEL_UNSIGNED = 1;
export const SE_SIGNING_LEVEL_ENTERPRISE = 2;
export const SE_SIGNING_LEVEL_CUSTOM_1 = 3;
export const SE_SIGNING_LEVEL_DEVELOPER = 3;
export const SE_SIGNING_LEVEL_AUTHENTICODE = 4;
export const SE_SIGNING_LEVEL_CUSTOM_2 = 5;
export const SE_SIGNING_LEVEL_STORE = 6;
export const SE_SIGNING_LEVEL_CUSTOM_3 = 7;
export const SE_SIGNING_LEVEL_ANTIMALWARE = 7;
export const SE_SIGNING_LEVEL_MICROSOFT = 8;
export const SE_SIGNING_LEVEL_CUSTOM_4 = 9;
export const SE_SIGNING_LEVEL_CUSTOM_5 = 10;
export const SE_SIGNING_LEVEL_DYNAMIC_CODEGEN = 11;
export const SE_SIGNING_LEVEL_WINDOWS = 12;
export const SE_SIGNING_LEVEL_CUSTOM_7 = 13;
export const SE_SIGNING_LEVEL_WINDOWS_TCB = 14;
export const SE_SIGNING_LEVEL_CUSTOM_6 = 15;
export const SE_LEARNING_MODE_FLAG_PERMISSIVE = 1;
export const JOB_OBJECT_ASSIGN_PROCESS = 1;
export const JOB_OBJECT_SET_ATTRIBUTES = 2;
export const JOB_OBJECT_QUERY = 4;
export const JOB_OBJECT_TERMINATE = 8;
export const JOB_OBJECT_SET_SECURITY_ATTRIBUTES = 16;
export const JOB_OBJECT_IMPERSONATE = 32;
export const FLS_MAXIMUM_AVAILABLE = 4080;
export const TLS_MINIMUM_AVAILABLE = 64;
export const THREAD_DYNAMIC_CODE_ALLOW = 1;
export const THREAD_BASE_PRIORITY_LOWRT = 15;
export const THREAD_BASE_PRIORITY_MAX = 2;
export const THREAD_BASE_PRIORITY_MIN = `-2`;
export const THREAD_BASE_PRIORITY_IDLE = `-15`;
export const COMPONENT_KTM = 1;
export const COMPONENT_VALID_FLAGS = 1;
export const MEMORY_PRIORITY_LOWEST = 0;
export const DYNAMIC_EH_CONTINUATION_TARGET_ADD = 1;
export const DYNAMIC_EH_CONTINUATION_TARGET_PROCESSED = 2;
export const DYNAMIC_ENFORCED_ADDRESS_RANGE_ADD = 1;
export const DYNAMIC_ENFORCED_ADDRESS_RANGE_PROCESSED = 2;
export const QUOTA_LIMITS_HARDWS_MIN_ENABLE = 1;
export const QUOTA_LIMITS_HARDWS_MIN_DISABLE = 2;
export const QUOTA_LIMITS_HARDWS_MAX_ENABLE = 4;
export const QUOTA_LIMITS_HARDWS_MAX_DISABLE = 8;
export const QUOTA_LIMITS_USE_DEFAULT_LIMITS = 16;
export const MAX_HW_COUNTERS = 16;
export const THREAD_PROFILING_FLAG_DISPATCH = 1;
export const JOB_OBJECT_NET_RATE_CONTROL_MAX_DSCP_TAG = 64;
export const JOB_OBJECT_MSG_END_OF_JOB_TIME = 1;
export const JOB_OBJECT_MSG_END_OF_PROCESS_TIME = 2;
export const JOB_OBJECT_MSG_ACTIVE_PROCESS_LIMIT = 3;
export const JOB_OBJECT_MSG_ACTIVE_PROCESS_ZERO = 4;
export const JOB_OBJECT_MSG_NEW_PROCESS = 6;
export const JOB_OBJECT_MSG_EXIT_PROCESS = 7;
export const JOB_OBJECT_MSG_ABNORMAL_EXIT_PROCESS = 8;
export const JOB_OBJECT_MSG_PROCESS_MEMORY_LIMIT = 9;
export const JOB_OBJECT_MSG_JOB_MEMORY_LIMIT = 10;
export const JOB_OBJECT_MSG_NOTIFICATION_LIMIT = 11;
export const JOB_OBJECT_MSG_JOB_CYCLE_TIME_LIMIT = 12;
export const JOB_OBJECT_MSG_SILO_TERMINATED = 13;
export const JOB_OBJECT_MSG_MINIMUM = 1;
export const JOB_OBJECT_MSG_MAXIMUM = 13;
export const JOB_OBJECT_UILIMIT_ALL = 255;
export const JOB_OBJECT_UI_VALID_FLAGS = 255;
export const MEMORY_PARTITION_QUERY_ACCESS = 1;
export const MEMORY_PARTITION_MODIFY_ACCESS = 2;
export const MUTANT_QUERY_STATE = 1;
export const TIME_ZONE_ID_UNKNOWN = 0;
export const TIME_ZONE_ID_STANDARD = 1;
export const TIME_ZONE_ID_DAYLIGHT = 2;
export const LTP_PC_SMT = 1;
export const CACHE_FULLY_ASSOCIATIVE = 255;
export const PROCESSOR_INTEL_386 = 386;
export const PROCESSOR_INTEL_486 = 486;
export const PROCESSOR_INTEL_PENTIUM = 586;
export const PROCESSOR_INTEL_IA64 = 2200;
export const PROCESSOR_AMD_X8664 = 8664;
export const PROCESSOR_MIPS_R4000 = 4000;
export const PROCESSOR_ALPHA_21064 = 21064;
export const PROCESSOR_PPC_601 = 601;
export const PROCESSOR_PPC_603 = 603;
export const PROCESSOR_PPC_604 = 604;
export const PROCESSOR_PPC_620 = 620;
export const PROCESSOR_HITACHI_SH3 = 10003;
export const PROCESSOR_HITACHI_SH3E = 10004;
export const PROCESSOR_HITACHI_SH4 = 10005;
export const PROCESSOR_MOTOROLA_821 = 821;
export const PROCESSOR_SHx_SH3 = 103;
export const PROCESSOR_SHx_SH4 = 104;
export const PROCESSOR_STRONGARM = 2577;
export const PROCESSOR_ARM720 = 1824;
export const PROCESSOR_ARM820 = 2080;
export const PROCESSOR_ARM920 = 2336;
export const PROCESSOR_ARM_7TDMI = 70001;
export const PROCESSOR_OPTIL = 18767;
export const PROCESSOR_ARCHITECTURE_MIPS = 1;
export const PROCESSOR_ARCHITECTURE_ALPHA = 2;
export const PROCESSOR_ARCHITECTURE_PPC = 3;
export const PROCESSOR_ARCHITECTURE_SHX = 4;
export const PROCESSOR_ARCHITECTURE_ALPHA64 = 7;
export const PROCESSOR_ARCHITECTURE_MSIL = 8;
export const PROCESSOR_ARCHITECTURE_IA32_ON_WIN64 = 10;
export const PROCESSOR_ARCHITECTURE_NEUTRAL = 11;
export const PROCESSOR_ARCHITECTURE_ARM64 = 12;
export const PROCESSOR_ARCHITECTURE_ARM32_ON_WIN64 = 13;
export const PROCESSOR_ARCHITECTURE_IA32_ON_ARM64 = 14;
export const PF_PPC_MOVEMEM_64BIT_OK = 4;
export const PF_ALPHA_BYTE_INSTRUCTIONS = 5;
export const PF_SSE_DAZ_MODE_AVAILABLE = 11;
export const PF_ARM_NEON_INSTRUCTIONS_AVAILABLE = 19;
export const PF_RDRAND_INSTRUCTION_AVAILABLE = 28;
export const PF_RDTSCP_INSTRUCTION_AVAILABLE = 32;
export const PF_RDPID_INSTRUCTION_AVAILABLE = 33;
export const PF_MONITORX_INSTRUCTION_AVAILABLE = 35;
export const PF_SSSE3_INSTRUCTIONS_AVAILABLE = 36;
export const PF_SSE4_1_INSTRUCTIONS_AVAILABLE = 37;
export const PF_SSE4_2_INSTRUCTIONS_AVAILABLE = 38;
export const PF_AVX_INSTRUCTIONS_AVAILABLE = 39;
export const PF_AVX2_INSTRUCTIONS_AVAILABLE = 40;
export const PF_AVX512F_INSTRUCTIONS_AVAILABLE = 41;
export const PF_ERMS_AVAILABLE = 42;
export const PF_ARM_V82_DP_INSTRUCTIONS_AVAILABLE = 43;
export const PF_ARM_V83_JSCVT_INSTRUCTIONS_AVAILABLE = 44;
export const XSTATE_LEGACY_FLOATING_POINT = 0;
export const XSTATE_LEGACY_SSE = 1;
export const XSTATE_GSSE = 2;
export const XSTATE_AVX = 2;
export const XSTATE_MPX_BNDREGS = 3;
export const XSTATE_MPX_BNDCSR = 4;
export const XSTATE_AVX512_KMASK = 5;
export const XSTATE_AVX512_ZMM_H = 6;
export const XSTATE_AVX512_ZMM = 7;
export const XSTATE_IPT = 8;
export const XSTATE_PASID = 10;
export const XSTATE_CET_U = 11;
export const XSTATE_CET_S = 12;
export const XSTATE_AMX_TILE_CONFIG = 17;
export const XSTATE_AMX_TILE_DATA = 18;
export const XSTATE_LWP = 62;
export const MAXIMUM_XSTATE_FEATURES = 64;
export const XSTATE_COMPACTION_ENABLE = 63;
export const XSTATE_ALIGN_BIT = 1;
export const XSTATE_XFD_BIT = 2;
export const XSTATE_CONTROLFLAG_XSAVEOPT_MASK = 1;
export const XSTATE_CONTROLFLAG_XSAVEC_MASK = 2;
export const XSTATE_CONTROLFLAG_XFD_MASK = 4;
export const CFG_CALL_TARGET_VALID = 1;
export const CFG_CALL_TARGET_PROCESSED = 2;
export const CFG_CALL_TARGET_CONVERT_EXPORT_SUPPRESSED_TO_VALID = 4;
export const CFG_CALL_TARGET_VALID_XFG = 8;
export const CFG_CALL_TARGET_CONVERT_XFG_TO_CFG = 16;
export const SESSION_QUERY_ACCESS = 1;
export const SESSION_MODIFY_ACCESS = 2;
export const MEM_TOP_DOWN = 1048576;
export const MEM_WRITE_WATCH = 2097152;
export const MEM_PHYSICAL = 4194304;
export const MEM_ROTATE = 8388608;
export const MEM_DIFFERENT_IMAGE_BASE_OK = 8388608;
export const MEM_4MB_PAGES = 2147483648;
export const MEM_COALESCE_PLACEHOLDERS = 1;
export const MEM_EXTENDED_PARAMETER_GRAPHICS = 1;
export const MEM_EXTENDED_PARAMETER_NONPAGED = 2;
export const MEM_EXTENDED_PARAMETER_ZERO_PAGES_OPTIONAL = 4;
export const MEM_EXTENDED_PARAMETER_NONPAGED_LARGE = 8;
export const MEM_EXTENDED_PARAMETER_NONPAGED_HUGE = 16;
export const MEM_EXTENDED_PARAMETER_SOFT_FAULT_PAGES = 32;
export const MEM_EXTENDED_PARAMETER_EC_CODE = 64;
export const MEM_EXTENDED_PARAMETER_TYPE_BITS = 8;
export const SEC_HUGE_PAGES = 131072;
export const WRITE_WATCH_FLAG_RESET = 1;
export const ENCLAVE_TYPE_SGX = 1;
export const ENCLAVE_TYPE_SGX2 = 2;
export const ENCLAVE_TYPE_VBS = 16;
export const ENCLAVE_VBS_FLAG_DEBUG = 1;
export const ENCLAVE_TYPE_VBS_BASIC = 17;
export const VBS_BASIC_PAGE_MEASURED_DATA = 1;
export const VBS_BASIC_PAGE_UNMEASURED_DATA = 2;
export const VBS_BASIC_PAGE_ZERO_FILL = 3;
export const VBS_BASIC_PAGE_THREAD_DESCRIPTOR = 4;
export const VBS_BASIC_PAGE_SYSTEM_CALL = 5;
export const DEDICATED_MEMORY_CACHE_ELIGIBLE = 1;
export const TREE_CONNECT_ATTRIBUTE_PRIVACY = 16384;
export const TREE_CONNECT_ATTRIBUTE_INTEGRITY = 32768;
export const TREE_CONNECT_ATTRIBUTE_GLOBAL = 4;
export const TREE_CONNECT_ATTRIBUTE_PINNED = 2;
export const FILE_ATTRIBUTE_STRICTLY_SEQUENTIAL = 536870912;
export const MAILSLOT_NO_MESSAGE = 4294967295;
export const MAILSLOT_WAIT_FOREVER = 4294967295;
export const FILE_CASE_SENSITIVE_SEARCH = 1;
export const FILE_CASE_PRESERVED_NAMES = 2;
export const FILE_UNICODE_ON_DISK = 4;
export const FILE_PERSISTENT_ACLS = 8;
export const FILE_FILE_COMPRESSION = 16;
export const FILE_VOLUME_QUOTAS = 32;
export const FILE_SUPPORTS_SPARSE_FILES = 64;
export const FILE_SUPPORTS_REPARSE_POINTS = 128;
export const FILE_SUPPORTS_REMOTE_STORAGE = 256;
export const FILE_RETURNS_CLEANUP_RESULT_INFO = 512;
export const FILE_SUPPORTS_POSIX_UNLINK_RENAME = 1024;
export const FILE_SUPPORTS_BYPASS_IO = 2048;
export const FILE_VOLUME_IS_COMPRESSED = 32768;
export const FILE_SUPPORTS_OBJECT_IDS = 65536;
export const FILE_SUPPORTS_ENCRYPTION = 131072;
export const FILE_NAMED_STREAMS = 262144;
export const FILE_READ_ONLY_VOLUME = 524288;
export const FILE_SEQUENTIAL_WRITE_ONCE = 1048576;
export const FILE_SUPPORTS_TRANSACTIONS = 2097152;
export const FILE_SUPPORTS_HARD_LINKS = 4194304;
export const FILE_SUPPORTS_EXTENDED_ATTRIBUTES = 8388608;
export const FILE_SUPPORTS_OPEN_BY_FILE_ID = 16777216;
export const FILE_SUPPORTS_USN_JOURNAL = 33554432;
export const FILE_SUPPORTS_INTEGRITY_STREAMS = 67108864;
export const FILE_SUPPORTS_BLOCK_REFCOUNTING = 134217728;
export const FILE_SUPPORTS_SPARSE_VDL = 268435456;
export const FILE_DAX_VOLUME = 536870912;
export const FILE_SUPPORTS_GHOSTING = 1073741824;
export const FILE_CS_FLAG_CASE_SENSITIVE_DIR = 1;
export const FLUSH_FLAGS_FILE_DATA_ONLY = 1;
export const FLUSH_FLAGS_NO_SYNC = 2;
export const FLUSH_FLAGS_FILE_DATA_SYNC_ONLY = 4;
export const IO_REPARSE_TAG_RESERVED_ZERO = 0;
export const IO_REPARSE_TAG_RESERVED_ONE = 1;
export const IO_REPARSE_TAG_RESERVED_TWO = 2;
export const IO_REPARSE_TAG_RESERVED_RANGE = 2;
export const IO_REPARSE_TAG_MOUNT_POINT = 2684354563;
export const IO_REPARSE_TAG_HSM = 3221225476;
export const IO_REPARSE_TAG_HSM2 = 2147483654;
export const IO_REPARSE_TAG_SIS = 2147483655;
export const IO_REPARSE_TAG_WIM = 2147483656;
export const IO_REPARSE_TAG_CSV = 2147483657;
export const IO_REPARSE_TAG_DFS = 2147483658;
export const IO_REPARSE_TAG_SYMLINK = 2684354572;
export const IO_REPARSE_TAG_DFSR = 2147483666;
export const IO_REPARSE_TAG_DEDUP = 2147483667;
export const IO_REPARSE_TAG_NFS = 2147483668;
export const IO_REPARSE_TAG_FILE_PLACEHOLDER = 2147483669;
export const IO_REPARSE_TAG_WOF = 2147483671;
export const IO_REPARSE_TAG_WCI = 2147483672;
export const IO_REPARSE_TAG_WCI_1 = 2415923224;
export const IO_REPARSE_TAG_GLOBAL_REPARSE = 2684354585;
export const IO_REPARSE_TAG_CLOUD = 2415919130;
export const IO_REPARSE_TAG_CLOUD_1 = 2415923226;
export const IO_REPARSE_TAG_CLOUD_2 = 2415927322;
export const IO_REPARSE_TAG_CLOUD_3 = 2415931418;
export const IO_REPARSE_TAG_CLOUD_4 = 2415935514;
export const IO_REPARSE_TAG_CLOUD_5 = 2415939610;
export const IO_REPARSE_TAG_CLOUD_6 = 2415943706;
export const IO_REPARSE_TAG_CLOUD_7 = 2415947802;
export const IO_REPARSE_TAG_CLOUD_8 = 2415951898;
export const IO_REPARSE_TAG_CLOUD_9 = 2415955994;
export const IO_REPARSE_TAG_CLOUD_A = 2415960090;
export const IO_REPARSE_TAG_CLOUD_B = 2415964186;
export const IO_REPARSE_TAG_CLOUD_C = 2415968282;
export const IO_REPARSE_TAG_CLOUD_D = 2415972378;
export const IO_REPARSE_TAG_CLOUD_E = 2415976474;
export const IO_REPARSE_TAG_CLOUD_F = 2415980570;
export const IO_REPARSE_TAG_CLOUD_MASK = 61440;
export const IO_REPARSE_TAG_APPEXECLINK = 2147483675;
export const IO_REPARSE_TAG_PROJFS = 2415919132;
export const IO_REPARSE_TAG_STORAGE_SYNC = 2147483678;
export const IO_REPARSE_TAG_WCI_TOMBSTONE = 2684354591;
export const IO_REPARSE_TAG_UNHANDLED = 2147483680;
export const IO_REPARSE_TAG_ONEDRIVE = 2147483681;
export const IO_REPARSE_TAG_PROJFS_TOMBSTONE = 2684354594;
export const IO_REPARSE_TAG_AF_UNIX = 2147483683;
export const IO_REPARSE_TAG_WCI_LINK = 2684354599;
export const IO_REPARSE_TAG_WCI_LINK_1 = 2684358695;
export const IO_REPARSE_TAG_DATALESS_CIM = 2684354600;
export const SCRUB_DATA_INPUT_FLAG_RESUME = 1;
export const SCRUB_DATA_INPUT_FLAG_SKIP_IN_SYNC = 2;
export const SCRUB_DATA_INPUT_FLAG_SKIP_NON_INTEGRITY_DATA = 4;
export const SCRUB_DATA_INPUT_FLAG_IGNORE_REDUNDANCY = 8;
export const SCRUB_DATA_INPUT_FLAG_SKIP_DATA = 16;
export const SCRUB_DATA_INPUT_FLAG_SCRUB_BY_OBJECT_ID = 32;
export const SCRUB_DATA_INPUT_FLAG_OPLOCK_NOT_ACQUIRED = 64;
export const SCRUB_DATA_OUTPUT_FLAG_INCOMPLETE = 1;
export const SCRUB_DATA_OUTPUT_FLAG_NON_USER_DATA_RANGE = 65536;
export const SCRUB_DATA_OUTPUT_FLAG_PARITY_EXTENT_DATA_RETURNED = 131072;
export const SCRUB_DATA_OUTPUT_FLAG_RESUME_CONTEXT_LENGTH_SPECIFIED = 262144;
export const SHUFFLE_FILE_FLAG_SKIP_INITIALIZING_NEW_CLUSTERS = 1;
export const IO_COMPLETION_MODIFY_STATE = 2;
export const SMB_CCF_APP_INSTANCE_EA_NAME = `ClusteredApplicationInstance`;
export const NETWORK_APP_INSTANCE_CSV_FLAGS_VALID_ONLY_IF_CSV_COORDINATOR = 1;
export const POWERBUTTON_ACTION_INDEX_NOTHING = 0;
export const POWERBUTTON_ACTION_INDEX_SLEEP = 1;
export const POWERBUTTON_ACTION_INDEX_HIBERNATE = 2;
export const POWERBUTTON_ACTION_INDEX_SHUTDOWN = 3;
export const POWERBUTTON_ACTION_INDEX_TURN_OFF_THE_DISPLAY = 4;
export const POWERBUTTON_ACTION_VALUE_NOTHING = 0;
export const POWERBUTTON_ACTION_VALUE_SLEEP = 2;
export const POWERBUTTON_ACTION_VALUE_HIBERNATE = 3;
export const POWERBUTTON_ACTION_VALUE_SHUTDOWN = 6;
export const POWERBUTTON_ACTION_VALUE_TURN_OFF_THE_DISPLAY = 8;
export const PERFSTATE_POLICY_CHANGE_IDEAL = 0;
export const PERFSTATE_POLICY_CHANGE_SINGLE = 1;
export const PERFSTATE_POLICY_CHANGE_ROCKET = 2;
export const PERFSTATE_POLICY_CHANGE_IDEAL_AGGRESSIVE = 3;
export const PERFSTATE_POLICY_CHANGE_DECREASE_MAX = 2;
export const PERFSTATE_POLICY_CHANGE_INCREASE_MAX = 3;
export const PROCESSOR_THROTTLE_DISABLED = 0;
export const PROCESSOR_THROTTLE_ENABLED = 1;
export const PROCESSOR_THROTTLE_AUTOMATIC = 2;
export const PROCESSOR_PERF_BOOST_POLICY_DISABLED = 0;
export const PROCESSOR_PERF_BOOST_POLICY_MAX = 100;
export const PROCESSOR_PERF_BOOST_MODE_DISABLED = 0;
export const PROCESSOR_PERF_BOOST_MODE_ENABLED = 1;
export const PROCESSOR_PERF_BOOST_MODE_AGGRESSIVE = 2;
export const PROCESSOR_PERF_BOOST_MODE_EFFICIENT_ENABLED = 3;
export const PROCESSOR_PERF_BOOST_MODE_EFFICIENT_AGGRESSIVE = 4;
export const PROCESSOR_PERF_BOOST_MODE_AGGRESSIVE_AT_GUARANTEED = 5;
export const PROCESSOR_PERF_BOOST_MODE_EFFICIENT_AGGRESSIVE_AT_GUARANTEED = 6;
export const PROCESSOR_PERF_BOOST_MODE_MAX = 6;
export const PROCESSOR_PERF_AUTONOMOUS_MODE_DISABLED = 0;
export const PROCESSOR_PERF_AUTONOMOUS_MODE_ENABLED = 1;
export const PROCESSOR_PERF_PERFORMANCE_PREFERENCE = 255;
export const PROCESSOR_PERF_ENERGY_PREFERENCE = 0;
export const PROCESSOR_PERF_MINIMUM_ACTIVITY_WINDOW = 0;
export const PROCESSOR_PERF_MAXIMUM_ACTIVITY_WINDOW = 1270000000;
export const PROCESSOR_DUTY_CYCLING_DISABLED = 0;
export const PROCESSOR_DUTY_CYCLING_ENABLED = 1;
export const CORE_PARKING_POLICY_CHANGE_IDEAL = 0;
export const CORE_PARKING_POLICY_CHANGE_SINGLE = 1;
export const CORE_PARKING_POLICY_CHANGE_ROCKET = 2;
export const CORE_PARKING_POLICY_CHANGE_MULTISTEP = 3;
export const CORE_PARKING_POLICY_CHANGE_MAX = 3;
export const POWER_DEVICE_IDLE_POLICY_PERFORMANCE = 0;
export const POWER_DEVICE_IDLE_POLICY_CONSERVATIVE = 1;
export const POWER_CONNECTIVITY_IN_STANDBY_DISABLED = 0;
export const POWER_CONNECTIVITY_IN_STANDBY_ENABLED = 1;
export const POWER_CONNECTIVITY_IN_STANDBY_SYSTEM_MANAGED = 2;
export const POWER_DISCONNECTED_STANDBY_MODE_NORMAL = 0;
export const POWER_DISCONNECTED_STANDBY_MODE_AGGRESSIVE = 1;
export const POWER_SYSTEM_MAXIMUM = 7;
export const DIAGNOSTIC_REASON_VERSION = 0;
export const DIAGNOSTIC_REASON_SIMPLE_STRING = 1;
export const DIAGNOSTIC_REASON_DETAILED_STRING = 2;
export const DIAGNOSTIC_REASON_NOT_SPECIFIED = 2147483648;
export const POWER_REQUEST_CONTEXT_VERSION = 0;
export const PDCAP_D0_SUPPORTED = 1;
export const PDCAP_D1_SUPPORTED = 2;
export const PDCAP_D2_SUPPORTED = 4;
export const PDCAP_D3_SUPPORTED = 8;
export const PDCAP_WAKE_FROM_D0_SUPPORTED = 16;
export const PDCAP_WAKE_FROM_D1_SUPPORTED = 32;
export const PDCAP_WAKE_FROM_D2_SUPPORTED = 64;
export const PDCAP_WAKE_FROM_D3_SUPPORTED = 128;
export const PDCAP_WARM_EJECT_SUPPORTED = 256;
export const POWER_SETTING_VALUE_VERSION = 1;
export const PROC_IDLE_BUCKET_COUNT = 6;
export const PROC_IDLE_BUCKET_COUNT_EX = 16;
export const ACPI_PPM_SOFTWARE_ALL = 252;
export const ACPI_PPM_SOFTWARE_ANY = 253;
export const ACPI_PPM_HARDWARE_ALL = 254;
export const MS_PPM_SOFTWARE_ALL = 1;
export const PPM_FIRMWARE_ACPI1C2 = 1;
export const PPM_FIRMWARE_ACPI1C3 = 2;
export const PPM_FIRMWARE_ACPI1TSTATES = 4;
export const PPM_FIRMWARE_CST = 8;
export const PPM_FIRMWARE_CSD = 16;
export const PPM_FIRMWARE_PCT = 32;
export const PPM_FIRMWARE_PSS = 64;
export const PPM_FIRMWARE_XPSS = 128;
export const PPM_FIRMWARE_PPC = 256;
export const PPM_FIRMWARE_PSD = 512;
export const PPM_FIRMWARE_PTC = 1024;
export const PPM_FIRMWARE_TSS = 2048;
export const PPM_FIRMWARE_TPC = 4096;
export const PPM_FIRMWARE_TSD = 8192;
export const PPM_FIRMWARE_PCCH = 16384;
export const PPM_FIRMWARE_PCCP = 32768;
export const PPM_FIRMWARE_OSC = 65536;
export const PPM_FIRMWARE_PDC = 131072;
export const PPM_FIRMWARE_CPC = 262144;
export const PPM_FIRMWARE_LPI = 524288;
export const PPM_PERFORMANCE_IMPLEMENTATION_NONE = 0;
export const PPM_PERFORMANCE_IMPLEMENTATION_PSTATES = 1;
export const PPM_PERFORMANCE_IMPLEMENTATION_PCCV1 = 2;
export const PPM_PERFORMANCE_IMPLEMENTATION_CPPC = 3;
export const PPM_PERFORMANCE_IMPLEMENTATION_PEP = 4;
export const PPM_IDLE_IMPLEMENTATION_NONE = 0;
export const PPM_IDLE_IMPLEMENTATION_CSTATES = 1;
export const PPM_IDLE_IMPLEMENTATION_PEP = 2;
export const PPM_IDLE_IMPLEMENTATION_MICROPEP = 3;
export const PPM_IDLE_IMPLEMENTATION_LPISTATES = 4;
export const POWER_ACTION_QUERY_ALLOWED = 1;
export const POWER_ACTION_UI_ALLOWED = 2;
export const POWER_ACTION_OVERRIDE_APPS = 4;
export const POWER_ACTION_HIBERBOOT = 8;
export const POWER_ACTION_USER_NOTIFY = 16;
export const POWER_ACTION_DOZE_TO_HIBERNATE = 32;
export const POWER_ACTION_ACPI_CRITICAL = 16777216;
export const POWER_ACTION_ACPI_USER_NOTIFY = 33554432;
export const POWER_ACTION_DIRECTED_DRIPS = 67108864;
export const POWER_ACTION_PSEUDO_TRANSITION = 134217728;
export const POWER_ACTION_LIGHTEST_FIRST = 268435456;
export const POWER_ACTION_LOCK_CONSOLE = 536870912;
export const POWER_ACTION_DISABLE_WAKES = 1073741824;
export const POWER_ACTION_CRITICAL = 2147483648;
export const POWER_USER_NOTIFY_FORCED_SHUTDOWN = 32;
export const BATTERY_DISCHARGE_FLAGS_EVENTCODE_MASK = 7;
export const BATTERY_DISCHARGE_FLAGS_ENABLE = 2147483648;
export const NUM_DISCHARGE_POLICIES = 4;
export const DISCHARGE_POLICY_CRITICAL = 0;
export const DISCHARGE_POLICY_LOW = 1;
export const PROCESSOR_IDLESTATE_POLICY_COUNT = 3;
export const PO_THROTTLE_NONE = 0;
export const PO_THROTTLE_CONSTANT = 1;
export const PO_THROTTLE_DEGRADE = 2;
export const PO_THROTTLE_ADAPTIVE = 3;
export const PO_THROTTLE_MAXIMUM = 4;
export const HIBERFILE_TYPE_NONE = 0;
export const HIBERFILE_TYPE_REDUCED = 1;
export const HIBERFILE_TYPE_FULL = 2;
export const HIBERFILE_TYPE_MAX = 3;
export const IMAGE_DOS_SIGNATURE = 23117;
export const IMAGE_OS2_SIGNATURE = 17742;
export const IMAGE_OS2_SIGNATURE_LE = 17740;
export const IMAGE_VXD_SIGNATURE = 17740;
export const IMAGE_NT_SIGNATURE = 17744;
export const IMAGE_SIZEOF_FILE_HEADER = 20;
export const IMAGE_NUMBEROF_DIRECTORY_ENTRIES = 16;
export const IMAGE_SIZEOF_SHORT_NAME = 8;
export const IMAGE_SIZEOF_SECTION_HEADER = 40;
export const IMAGE_SIZEOF_SYMBOL = 18;
export const IMAGE_SYM_SECTION_MAX = 65279;
export const IMAGE_SYM_SECTION_MAX_EX = 2147483647;
export const IMAGE_SYM_TYPE_NULL = 0;
export const IMAGE_SYM_TYPE_VOID = 1;
export const IMAGE_SYM_TYPE_CHAR = 2;
export const IMAGE_SYM_TYPE_SHORT = 3;
export const IMAGE_SYM_TYPE_INT = 4;
export const IMAGE_SYM_TYPE_LONG = 5;
export const IMAGE_SYM_TYPE_FLOAT = 6;
export const IMAGE_SYM_TYPE_DOUBLE = 7;
export const IMAGE_SYM_TYPE_STRUCT = 8;
export const IMAGE_SYM_TYPE_UNION = 9;
export const IMAGE_SYM_TYPE_ENUM = 10;
export const IMAGE_SYM_TYPE_MOE = 11;
export const IMAGE_SYM_TYPE_BYTE = 12;
export const IMAGE_SYM_TYPE_WORD = 13;
export const IMAGE_SYM_TYPE_UINT = 14;
export const IMAGE_SYM_TYPE_DWORD = 15;
export const IMAGE_SYM_TYPE_PCODE = 32768;
export const IMAGE_SYM_DTYPE_NULL = 0;
export const IMAGE_SYM_DTYPE_POINTER = 1;
export const IMAGE_SYM_DTYPE_FUNCTION = 2;
export const IMAGE_SYM_DTYPE_ARRAY = 3;
export const IMAGE_SYM_CLASS_NULL = 0;
export const IMAGE_SYM_CLASS_AUTOMATIC = 1;
export const IMAGE_SYM_CLASS_EXTERNAL = 2;
export const IMAGE_SYM_CLASS_STATIC = 3;
export const IMAGE_SYM_CLASS_REGISTER = 4;
export const IMAGE_SYM_CLASS_EXTERNAL_DEF = 5;
export const IMAGE_SYM_CLASS_LABEL = 6;
export const IMAGE_SYM_CLASS_UNDEFINED_LABEL = 7;
export const IMAGE_SYM_CLASS_MEMBER_OF_STRUCT = 8;
export const IMAGE_SYM_CLASS_ARGUMENT = 9;
export const IMAGE_SYM_CLASS_STRUCT_TAG = 10;
export const IMAGE_SYM_CLASS_MEMBER_OF_UNION = 11;
export const IMAGE_SYM_CLASS_UNION_TAG = 12;
export const IMAGE_SYM_CLASS_TYPE_DEFINITION = 13;
export const IMAGE_SYM_CLASS_UNDEFINED_STATIC = 14;
export const IMAGE_SYM_CLASS_ENUM_TAG = 15;
export const IMAGE_SYM_CLASS_MEMBER_OF_ENUM = 16;
export const IMAGE_SYM_CLASS_REGISTER_PARAM = 17;
export const IMAGE_SYM_CLASS_BIT_FIELD = 18;
export const IMAGE_SYM_CLASS_FAR_EXTERNAL = 68;
export const IMAGE_SYM_CLASS_BLOCK = 100;
export const IMAGE_SYM_CLASS_FUNCTION = 101;
export const IMAGE_SYM_CLASS_END_OF_STRUCT = 102;
export const IMAGE_SYM_CLASS_FILE = 103;
export const IMAGE_SYM_CLASS_SECTION = 104;
export const IMAGE_SYM_CLASS_WEAK_EXTERNAL = 105;
export const IMAGE_SYM_CLASS_CLR_TOKEN = 107;
export const N_BTMASK = 15;
export const N_TMASK = 48;
export const N_TMASK1 = 192;
export const N_TMASK2 = 240;
export const N_BTSHFT = 4;
export const N_TSHIFT = 2;
export const IMAGE_COMDAT_SELECT_NODUPLICATES = 1;
export const IMAGE_COMDAT_SELECT_ANY = 2;
export const IMAGE_COMDAT_SELECT_SAME_SIZE = 3;
export const IMAGE_COMDAT_SELECT_EXACT_MATCH = 4;
export const IMAGE_COMDAT_SELECT_ASSOCIATIVE = 5;
export const IMAGE_COMDAT_SELECT_LARGEST = 6;
export const IMAGE_COMDAT_SELECT_NEWEST = 7;
export const IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY = 1;
export const IMAGE_WEAK_EXTERN_SEARCH_LIBRARY = 2;
export const IMAGE_WEAK_EXTERN_SEARCH_ALIAS = 3;
export const IMAGE_WEAK_EXTERN_ANTI_DEPENDENCY = 4;
export const IMAGE_REL_I386_ABSOLUTE = 0;
export const IMAGE_REL_I386_DIR16 = 1;
export const IMAGE_REL_I386_REL16 = 2;
export const IMAGE_REL_I386_DIR32 = 6;
export const IMAGE_REL_I386_DIR32NB = 7;
export const IMAGE_REL_I386_SEG12 = 9;
export const IMAGE_REL_I386_SECTION = 10;
export const IMAGE_REL_I386_SECREL = 11;
export const IMAGE_REL_I386_TOKEN = 12;
export const IMAGE_REL_I386_SECREL7 = 13;
export const IMAGE_REL_I386_REL32 = 20;
export const IMAGE_REL_MIPS_ABSOLUTE = 0;
export const IMAGE_REL_MIPS_REFHALF = 1;
export const IMAGE_REL_MIPS_REFWORD = 2;
export const IMAGE_REL_MIPS_JMPADDR = 3;
export const IMAGE_REL_MIPS_REFHI = 4;
export const IMAGE_REL_MIPS_REFLO = 5;
export const IMAGE_REL_MIPS_GPREL = 6;
export const IMAGE_REL_MIPS_LITERAL = 7;
export const IMAGE_REL_MIPS_SECTION = 10;
export const IMAGE_REL_MIPS_SECREL = 11;
export const IMAGE_REL_MIPS_SECRELLO = 12;
export const IMAGE_REL_MIPS_SECRELHI = 13;
export const IMAGE_REL_MIPS_TOKEN = 14;
export const IMAGE_REL_MIPS_JMPADDR16 = 16;
export const IMAGE_REL_MIPS_REFWORDNB = 34;
export const IMAGE_REL_MIPS_PAIR = 37;
export const IMAGE_REL_ALPHA_ABSOLUTE = 0;
export const IMAGE_REL_ALPHA_REFLONG = 1;
export const IMAGE_REL_ALPHA_REFQUAD = 2;
export const IMAGE_REL_ALPHA_GPREL32 = 3;
export const IMAGE_REL_ALPHA_LITERAL = 4;
export const IMAGE_REL_ALPHA_LITUSE = 5;
export const IMAGE_REL_ALPHA_GPDISP = 6;
export const IMAGE_REL_ALPHA_BRADDR = 7;
export const IMAGE_REL_ALPHA_HINT = 8;
export const IMAGE_REL_ALPHA_INLINE_REFLONG = 9;
export const IMAGE_REL_ALPHA_REFHI = 10;
export const IMAGE_REL_ALPHA_REFLO = 11;
export const IMAGE_REL_ALPHA_PAIR = 12;
export const IMAGE_REL_ALPHA_MATCH = 13;
export const IMAGE_REL_ALPHA_SECTION = 14;
export const IMAGE_REL_ALPHA_SECREL = 15;
export const IMAGE_REL_ALPHA_REFLONGNB = 16;
export const IMAGE_REL_ALPHA_SECRELLO = 17;
export const IMAGE_REL_ALPHA_SECRELHI = 18;
export const IMAGE_REL_ALPHA_REFQ3 = 19;
export const IMAGE_REL_ALPHA_REFQ2 = 20;
export const IMAGE_REL_ALPHA_REFQ1 = 21;
export const IMAGE_REL_ALPHA_GPRELLO = 22;
export const IMAGE_REL_ALPHA_GPRELHI = 23;
export const IMAGE_REL_PPC_ABSOLUTE = 0;
export const IMAGE_REL_PPC_ADDR64 = 1;
export const IMAGE_REL_PPC_ADDR32 = 2;
export const IMAGE_REL_PPC_ADDR24 = 3;
export const IMAGE_REL_PPC_ADDR16 = 4;
export const IMAGE_REL_PPC_ADDR14 = 5;
export const IMAGE_REL_PPC_REL24 = 6;
export const IMAGE_REL_PPC_REL14 = 7;
export const IMAGE_REL_PPC_TOCREL16 = 8;
export const IMAGE_REL_PPC_TOCREL14 = 9;
export const IMAGE_REL_PPC_ADDR32NB = 10;
export const IMAGE_REL_PPC_SECREL = 11;
export const IMAGE_REL_PPC_SECTION = 12;
export const IMAGE_REL_PPC_IFGLUE = 13;
export const IMAGE_REL_PPC_IMGLUE = 14;
export const IMAGE_REL_PPC_SECREL16 = 15;
export const IMAGE_REL_PPC_REFHI = 16;
export const IMAGE_REL_PPC_REFLO = 17;
export const IMAGE_REL_PPC_PAIR = 18;
export const IMAGE_REL_PPC_SECRELLO = 19;
export const IMAGE_REL_PPC_SECRELHI = 20;
export const IMAGE_REL_PPC_GPREL = 21;
export const IMAGE_REL_PPC_TOKEN = 22;
export const IMAGE_REL_PPC_TYPEMASK = 255;
export const IMAGE_REL_PPC_NEG = 256;
export const IMAGE_REL_PPC_BRTAKEN = 512;
export const IMAGE_REL_PPC_BRNTAKEN = 1024;
export const IMAGE_REL_PPC_TOCDEFN = 2048;
export const IMAGE_REL_SH3_ABSOLUTE = 0;
export const IMAGE_REL_SH3_DIRECT16 = 1;
export const IMAGE_REL_SH3_DIRECT32 = 2;
export const IMAGE_REL_SH3_DIRECT8 = 3;
export const IMAGE_REL_SH3_DIRECT8_WORD = 4;
export const IMAGE_REL_SH3_DIRECT8_LONG = 5;
export const IMAGE_REL_SH3_DIRECT4 = 6;
export const IMAGE_REL_SH3_DIRECT4_WORD = 7;
export const IMAGE_REL_SH3_DIRECT4_LONG = 8;
export const IMAGE_REL_SH3_PCREL8_WORD = 9;
export const IMAGE_REL_SH3_PCREL8_LONG = 10;
export const IMAGE_REL_SH3_PCREL12_WORD = 11;
export const IMAGE_REL_SH3_STARTOF_SECTION = 12;
export const IMAGE_REL_SH3_SIZEOF_SECTION = 13;
export const IMAGE_REL_SH3_SECTION = 14;
export const IMAGE_REL_SH3_SECREL = 15;
export const IMAGE_REL_SH3_DIRECT32_NB = 16;
export const IMAGE_REL_SH3_GPREL4_LONG = 17;
export const IMAGE_REL_SH3_TOKEN = 18;
export const IMAGE_REL_SHM_PCRELPT = 19;
export const IMAGE_REL_SHM_REFLO = 20;
export const IMAGE_REL_SHM_REFHALF = 21;
export const IMAGE_REL_SHM_RELLO = 22;
export const IMAGE_REL_SHM_RELHALF = 23;
export const IMAGE_REL_SHM_PAIR = 24;
export const IMAGE_REL_SH_NOMODE = 32768;
export const IMAGE_REL_ARM_ABSOLUTE = 0;
export const IMAGE_REL_ARM_ADDR32 = 1;
export const IMAGE_REL_ARM_ADDR32NB = 2;
export const IMAGE_REL_ARM_BRANCH24 = 3;
export const IMAGE_REL_ARM_BRANCH11 = 4;
export const IMAGE_REL_ARM_TOKEN = 5;
export const IMAGE_REL_ARM_GPREL12 = 6;
export const IMAGE_REL_ARM_GPREL7 = 7;
export const IMAGE_REL_ARM_BLX24 = 8;
export const IMAGE_REL_ARM_BLX11 = 9;
export const IMAGE_REL_ARM_SECTION = 14;
export const IMAGE_REL_ARM_SECREL = 15;
export const IMAGE_REL_ARM_MOV32A = 16;
export const IMAGE_REL_ARM_MOV32 = 16;
export const IMAGE_REL_ARM_MOV32T = 17;
export const IMAGE_REL_THUMB_MOV32 = 17;
export const IMAGE_REL_ARM_BRANCH20T = 18;
export const IMAGE_REL_THUMB_BRANCH20 = 18;
export const IMAGE_REL_ARM_BRANCH24T = 20;
export const IMAGE_REL_THUMB_BRANCH24 = 20;
export const IMAGE_REL_ARM_BLX23T = 21;
export const IMAGE_REL_THUMB_BLX23 = 21;
export const IMAGE_REL_AM_ABSOLUTE = 0;
export const IMAGE_REL_AM_ADDR32 = 1;
export const IMAGE_REL_AM_ADDR32NB = 2;
export const IMAGE_REL_AM_CALL32 = 3;
export const IMAGE_REL_AM_FUNCINFO = 4;
export const IMAGE_REL_AM_REL32_1 = 5;
export const IMAGE_REL_AM_REL32_2 = 6;
export const IMAGE_REL_AM_SECREL = 7;
export const IMAGE_REL_AM_SECTION = 8;
export const IMAGE_REL_AM_TOKEN = 9;
export const IMAGE_REL_ARM64_ABSOLUTE = 0;
export const IMAGE_REL_ARM64_ADDR32 = 1;
export const IMAGE_REL_ARM64_ADDR32NB = 2;
export const IMAGE_REL_ARM64_BRANCH26 = 3;
export const IMAGE_REL_ARM64_PAGEBASE_REL21 = 4;
export const IMAGE_REL_ARM64_REL21 = 5;
export const IMAGE_REL_ARM64_PAGEOFFSET_12A = 6;
export const IMAGE_REL_ARM64_PAGEOFFSET_12L = 7;
export const IMAGE_REL_ARM64_SECREL = 8;
export const IMAGE_REL_ARM64_SECREL_LOW12A = 9;
export const IMAGE_REL_ARM64_SECREL_HIGH12A = 10;
export const IMAGE_REL_ARM64_SECREL_LOW12L = 11;
export const IMAGE_REL_ARM64_TOKEN = 12;
export const IMAGE_REL_ARM64_SECTION = 13;
export const IMAGE_REL_ARM64_ADDR64 = 14;
export const IMAGE_REL_ARM64_BRANCH19 = 15;
export const IMAGE_REL_AMD64_ABSOLUTE = 0;
export const IMAGE_REL_AMD64_ADDR64 = 1;
export const IMAGE_REL_AMD64_ADDR32 = 2;
export const IMAGE_REL_AMD64_ADDR32NB = 3;
export const IMAGE_REL_AMD64_REL32 = 4;
export const IMAGE_REL_AMD64_REL32_1 = 5;
export const IMAGE_REL_AMD64_REL32_2 = 6;
export const IMAGE_REL_AMD64_REL32_3 = 7;
export const IMAGE_REL_AMD64_REL32_4 = 8;
export const IMAGE_REL_AMD64_REL32_5 = 9;
export const IMAGE_REL_AMD64_SECTION = 10;
export const IMAGE_REL_AMD64_SECREL = 11;
export const IMAGE_REL_AMD64_SECREL7 = 12;
export const IMAGE_REL_AMD64_TOKEN = 13;
export const IMAGE_REL_AMD64_SREL32 = 14;
export const IMAGE_REL_AMD64_PAIR = 15;
export const IMAGE_REL_AMD64_SSPAN32 = 16;
export const IMAGE_REL_AMD64_EHANDLER = 17;
export const IMAGE_REL_AMD64_IMPORT_BR = 18;
export const IMAGE_REL_AMD64_IMPORT_CALL = 19;
export const IMAGE_REL_AMD64_CFG_BR = 20;
export const IMAGE_REL_AMD64_CFG_BR_REX = 21;
export const IMAGE_REL_AMD64_CFG_CALL = 22;
export const IMAGE_REL_AMD64_INDIR_BR = 23;
export const IMAGE_REL_AMD64_INDIR_BR_REX = 24;
export const IMAGE_REL_AMD64_INDIR_CALL = 25;
export const IMAGE_REL_AMD64_INDIR_BR_SWITCHTABLE_FIRST = 32;
export const IMAGE_REL_AMD64_INDIR_BR_SWITCHTABLE_LAST = 47;
export const IMAGE_REL_IA64_ABSOLUTE = 0;
export const IMAGE_REL_IA64_IMM14 = 1;
export const IMAGE_REL_IA64_IMM22 = 2;
export const IMAGE_REL_IA64_IMM64 = 3;
export const IMAGE_REL_IA64_DIR32 = 4;
export const IMAGE_REL_IA64_DIR64 = 5;
export const IMAGE_REL_IA64_PCREL21B = 6;
export const IMAGE_REL_IA64_PCREL21M = 7;
export const IMAGE_REL_IA64_PCREL21F = 8;
export const IMAGE_REL_IA64_GPREL22 = 9;
export const IMAGE_REL_IA64_LTOFF22 = 10;
export const IMAGE_REL_IA64_SECTION = 11;
export const IMAGE_REL_IA64_SECREL22 = 12;
export const IMAGE_REL_IA64_SECREL64I = 13;
export const IMAGE_REL_IA64_SECREL32 = 14;
export const IMAGE_REL_IA64_DIR32NB = 16;
export const IMAGE_REL_IA64_SREL14 = 17;
export const IMAGE_REL_IA64_SREL22 = 18;
export const IMAGE_REL_IA64_SREL32 = 19;
export const IMAGE_REL_IA64_UREL32 = 20;
export const IMAGE_REL_IA64_PCREL60X = 21;
export const IMAGE_REL_IA64_PCREL60B = 22;
export const IMAGE_REL_IA64_PCREL60F = 23;
export const IMAGE_REL_IA64_PCREL60I = 24;
export const IMAGE_REL_IA64_PCREL60M = 25;
export const IMAGE_REL_IA64_IMMGPREL64 = 26;
export const IMAGE_REL_IA64_TOKEN = 27;
export const IMAGE_REL_IA64_GPREL32 = 28;
export const IMAGE_REL_IA64_ADDEND = 31;
export const IMAGE_REL_CEF_ABSOLUTE = 0;
export const IMAGE_REL_CEF_ADDR32 = 1;
export const IMAGE_REL_CEF_ADDR64 = 2;
export const IMAGE_REL_CEF_ADDR32NB = 3;
export const IMAGE_REL_CEF_SECTION = 4;
export const IMAGE_REL_CEF_SECREL = 5;
export const IMAGE_REL_CEF_TOKEN = 6;
export const IMAGE_REL_CEE_ABSOLUTE = 0;
export const IMAGE_REL_CEE_ADDR32 = 1;
export const IMAGE_REL_CEE_ADDR64 = 2;
export const IMAGE_REL_CEE_ADDR32NB = 3;
export const IMAGE_REL_CEE_SECTION = 4;
export const IMAGE_REL_CEE_SECREL = 5;
export const IMAGE_REL_CEE_TOKEN = 6;
export const IMAGE_REL_M32R_ABSOLUTE = 0;
export const IMAGE_REL_M32R_ADDR32 = 1;
export const IMAGE_REL_M32R_ADDR32NB = 2;
export const IMAGE_REL_M32R_ADDR24 = 3;
export const IMAGE_REL_M32R_GPREL16 = 4;
export const IMAGE_REL_M32R_PCREL24 = 5;
export const IMAGE_REL_M32R_PCREL16 = 6;
export const IMAGE_REL_M32R_PCREL8 = 7;
export const IMAGE_REL_M32R_REFHALF = 8;
export const IMAGE_REL_M32R_REFHI = 9;
export const IMAGE_REL_M32R_REFLO = 10;
export const IMAGE_REL_M32R_PAIR = 11;
export const IMAGE_REL_M32R_SECTION = 12;
export const IMAGE_REL_M32R_SECREL32 = 13;
export const IMAGE_REL_M32R_TOKEN = 14;
export const IMAGE_REL_EBC_ABSOLUTE = 0;
export const IMAGE_REL_EBC_ADDR32NB = 1;
export const IMAGE_REL_EBC_REL32 = 2;
export const IMAGE_REL_EBC_SECTION = 3;
export const IMAGE_REL_EBC_SECREL = 4;
export const EMARCH_ENC_I17_IMM7B_INST_WORD_X = 3;
export const EMARCH_ENC_I17_IMM7B_SIZE_X = 7;
export const EMARCH_ENC_I17_IMM7B_INST_WORD_POS_X = 4;
export const EMARCH_ENC_I17_IMM7B_VAL_POS_X = 0;
export const EMARCH_ENC_I17_IMM9D_INST_WORD_X = 3;
export const EMARCH_ENC_I17_IMM9D_SIZE_X = 9;
export const EMARCH_ENC_I17_IMM9D_INST_WORD_POS_X = 18;
export const EMARCH_ENC_I17_IMM9D_VAL_POS_X = 7;
export const EMARCH_ENC_I17_IMM5C_INST_WORD_X = 3;
export const EMARCH_ENC_I17_IMM5C_SIZE_X = 5;
export const EMARCH_ENC_I17_IMM5C_INST_WORD_POS_X = 13;
export const EMARCH_ENC_I17_IMM5C_VAL_POS_X = 16;
export const EMARCH_ENC_I17_IC_INST_WORD_X = 3;
export const EMARCH_ENC_I17_IC_SIZE_X = 1;
export const EMARCH_ENC_I17_IC_INST_WORD_POS_X = 12;
export const EMARCH_ENC_I17_IC_VAL_POS_X = 21;
export const EMARCH_ENC_I17_IMM41a_INST_WORD_X = 1;
export const EMARCH_ENC_I17_IMM41a_SIZE_X = 10;
export const EMARCH_ENC_I17_IMM41a_INST_WORD_POS_X = 14;
export const EMARCH_ENC_I17_IMM41a_VAL_POS_X = 22;
export const EMARCH_ENC_I17_IMM41b_INST_WORD_X = 1;
export const EMARCH_ENC_I17_IMM41b_SIZE_X = 8;
export const EMARCH_ENC_I17_IMM41b_INST_WORD_POS_X = 24;
export const EMARCH_ENC_I17_IMM41b_VAL_POS_X = 32;
export const EMARCH_ENC_I17_IMM41c_INST_WORD_X = 2;
export const EMARCH_ENC_I17_IMM41c_SIZE_X = 23;
export const EMARCH_ENC_I17_IMM41c_INST_WORD_POS_X = 0;
export const EMARCH_ENC_I17_IMM41c_VAL_POS_X = 40;
export const EMARCH_ENC_I17_SIGN_INST_WORD_X = 3;
export const EMARCH_ENC_I17_SIGN_SIZE_X = 1;
export const EMARCH_ENC_I17_SIGN_INST_WORD_POS_X = 27;
export const EMARCH_ENC_I17_SIGN_VAL_POS_X = 63;
export const X3_OPCODE_INST_WORD_X = 3;
export const X3_OPCODE_SIZE_X = 4;
export const X3_OPCODE_INST_WORD_POS_X = 28;
export const X3_OPCODE_SIGN_VAL_POS_X = 0;
export const X3_I_INST_WORD_X = 3;
export const X3_I_SIZE_X = 1;
export const X3_I_INST_WORD_POS_X = 27;
export const X3_I_SIGN_VAL_POS_X = 59;
export const X3_D_WH_INST_WORD_X = 3;
export const X3_D_WH_SIZE_X = 3;
export const X3_D_WH_INST_WORD_POS_X = 24;
export const X3_D_WH_SIGN_VAL_POS_X = 0;
export const X3_IMM20_INST_WORD_X = 3;
export const X3_IMM20_SIZE_X = 20;
export const X3_IMM20_INST_WORD_POS_X = 4;
export const X3_IMM20_SIGN_VAL_POS_X = 0;
export const X3_IMM39_1_INST_WORD_X = 2;
export const X3_IMM39_1_SIZE_X = 23;
export const X3_IMM39_1_INST_WORD_POS_X = 0;
export const X3_IMM39_1_SIGN_VAL_POS_X = 36;
export const X3_IMM39_2_INST_WORD_X = 1;
export const X3_IMM39_2_SIZE_X = 16;
export const X3_IMM39_2_INST_WORD_POS_X = 16;
export const X3_IMM39_2_SIGN_VAL_POS_X = 20;
export const X3_P_INST_WORD_X = 3;
export const X3_P_SIZE_X = 4;
export const X3_P_INST_WORD_POS_X = 0;
export const X3_P_SIGN_VAL_POS_X = 0;
export const X3_TMPLT_INST_WORD_X = 0;
export const X3_TMPLT_SIZE_X = 4;
export const X3_TMPLT_INST_WORD_POS_X = 0;
export const X3_TMPLT_SIGN_VAL_POS_X = 0;
export const X3_BTYPE_QP_INST_WORD_X = 2;
export const X3_BTYPE_QP_SIZE_X = 9;
export const X3_BTYPE_QP_INST_WORD_POS_X = 23;
export const X3_BTYPE_QP_INST_VAL_POS_X = 0;
export const X3_EMPTY_INST_WORD_X = 1;
export const X3_EMPTY_SIZE_X = 2;
export const X3_EMPTY_INST_WORD_POS_X = 14;
export const X3_EMPTY_INST_VAL_POS_X = 0;
export const IMAGE_REL_BASED_ABSOLUTE = 0;
export const IMAGE_REL_BASED_HIGH = 1;
export const IMAGE_REL_BASED_LOW = 2;
export const IMAGE_REL_BASED_HIGHLOW = 3;
export const IMAGE_REL_BASED_HIGHADJ = 4;
export const IMAGE_REL_BASED_MACHINE_SPECIFIC_5 = 5;
export const IMAGE_REL_BASED_RESERVED = 6;
export const IMAGE_REL_BASED_MACHINE_SPECIFIC_7 = 7;
export const IMAGE_REL_BASED_MACHINE_SPECIFIC_8 = 8;
export const IMAGE_REL_BASED_MACHINE_SPECIFIC_9 = 9;
export const IMAGE_REL_BASED_DIR64 = 10;
export const IMAGE_REL_BASED_IA64_IMM64 = 9;
export const IMAGE_REL_BASED_MIPS_JMPADDR = 5;
export const IMAGE_REL_BASED_MIPS_JMPADDR16 = 9;
export const IMAGE_REL_BASED_ARM_MOV32 = 5;
export const IMAGE_REL_BASED_THUMB_MOV32 = 7;
export const IMAGE_ARCHIVE_START_SIZE = 8;
export const IMAGE_ARCHIVE_START = `!<arch>\n`;
export const IMAGE_ARCHIVE_END = ``\n`;
export const IMAGE_ARCHIVE_PAD = `\n`;
export const IMAGE_ARCHIVE_LINKER_MEMBER = `/               `;
export const IMAGE_ARCHIVE_LONGNAMES_MEMBER = `//              `;
export const IMAGE_ARCHIVE_HYBRIDMAP_MEMBER = `/<HYBRIDMAP>/   `;
export const IMAGE_SIZEOF_ARCHIVE_MEMBER_HDR = 60;
export const IMAGE_ORDINAL_FLAG64 = 9223372036854775808n;
export const IMAGE_ORDINAL_FLAG32 = 2147483648;
export const IMAGE_ORDINAL_FLAG = 9223372036854775808n;
export const IMAGE_RESOURCE_NAME_IS_STRING = 2147483648;
export const IMAGE_RESOURCE_DATA_IS_DIRECTORY = 2147483648;
export const IMAGE_DYNAMIC_RELOCATION_GUARD_RF_PROLOGUE = 1;
export const IMAGE_DYNAMIC_RELOCATION_GUARD_RF_EPILOGUE = 2;
export const IMAGE_DYNAMIC_RELOCATION_GUARD_IMPORT_CONTROL_TRANSFER = 3;
export const IMAGE_DYNAMIC_RELOCATION_GUARD_INDIR_CONTROL_TRANSFER = 4;
export const IMAGE_DYNAMIC_RELOCATION_GUARD_SWITCHTABLE_BRANCH = 5;
export const IMAGE_HOT_PATCH_BASE_OBLIGATORY = 1;
export const IMAGE_HOT_PATCH_BASE_CAN_ROLL_BACK = 2;
export const IMAGE_HOT_PATCH_CHUNK_INVERSE = 2147483648;
export const IMAGE_HOT_PATCH_CHUNK_OBLIGATORY = 1073741824;
export const IMAGE_HOT_PATCH_CHUNK_RESERVED = 1072705536;
export const IMAGE_HOT_PATCH_CHUNK_TYPE = 1032192;
export const IMAGE_HOT_PATCH_CHUNK_SOURCE_RVA = 32768;
export const IMAGE_HOT_PATCH_CHUNK_TARGET_RVA = 16384;
export const IMAGE_HOT_PATCH_CHUNK_SIZE = 4095;
export const IMAGE_HOT_PATCH_NONE = 0;
export const IMAGE_HOT_PATCH_FUNCTION = 114688;
export const IMAGE_HOT_PATCH_ABSOLUTE = 180224;
export const IMAGE_HOT_PATCH_REL32 = 245760;
export const IMAGE_HOT_PATCH_CALL_TARGET = 278528;
export const IMAGE_HOT_PATCH_INDIRECT = 376832;
export const IMAGE_HOT_PATCH_NO_CALL_TARGET = 409600;
export const IMAGE_HOT_PATCH_DYNAMIC_VALUE = 491520;
export const IMAGE_GUARD_CF_INSTRUMENTED = 256;
export const IMAGE_GUARD_CFW_INSTRUMENTED = 512;
export const IMAGE_GUARD_CF_FUNCTION_TABLE_PRESENT = 1024;
export const IMAGE_GUARD_SECURITY_COOKIE_UNUSED = 2048;
export const IMAGE_GUARD_PROTECT_DELAYLOAD_IAT = 4096;
export const IMAGE_GUARD_DELAYLOAD_IAT_IN_ITS_OWN_SECTION = 8192;
export const IMAGE_GUARD_CF_EXPORT_SUPPRESSION_INFO_PRESENT = 16384;
export const IMAGE_GUARD_CF_ENABLE_EXPORT_SUPPRESSION = 32768;
export const IMAGE_GUARD_CF_LONGJUMP_TABLE_PRESENT = 65536;
export const IMAGE_GUARD_RF_INSTRUMENTED = 131072;
export const IMAGE_GUARD_RF_ENABLE = 262144;
export const IMAGE_GUARD_RF_STRICT = 524288;
export const IMAGE_GUARD_RETPOLINE_PRESENT = 1048576;
export const IMAGE_GUARD_EH_CONTINUATION_TABLE_PRESENT = 4194304;
export const IMAGE_GUARD_XFG_ENABLED = 8388608;
export const IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_MASK = 4026531840;
export const IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_SHIFT = 28;
export const IMAGE_GUARD_FLAG_FID_SUPPRESSED = 1;
export const IMAGE_GUARD_FLAG_EXPORT_SUPPRESSED = 2;
export const IMAGE_GUARD_FLAG_FID_LANGEXCPTHANDLER = 4;
export const IMAGE_GUARD_FLAG_FID_XFG = 8;
export const IMAGE_ENCLAVE_LONG_ID_LENGTH = 32;
export const IMAGE_ENCLAVE_SHORT_ID_LENGTH = 16;
export const IMAGE_ENCLAVE_POLICY_DEBUGGABLE = 1;
export const IMAGE_ENCLAVE_FLAG_PRIMARY_IMAGE = 1;
export const IMAGE_ENCLAVE_IMPORT_MATCH_NONE = 0;
export const IMAGE_ENCLAVE_IMPORT_MATCH_UNIQUE_ID = 1;
export const IMAGE_ENCLAVE_IMPORT_MATCH_AUTHOR_ID = 2;
export const IMAGE_ENCLAVE_IMPORT_MATCH_FAMILY_ID = 3;
export const IMAGE_ENCLAVE_IMPORT_MATCH_IMAGE_ID = 4;
export const IMAGE_DEBUG_TYPE_OMAP_TO_SRC = 7;
export const IMAGE_DEBUG_TYPE_OMAP_FROM_SRC = 8;
export const IMAGE_DEBUG_TYPE_RESERVED10 = 10;
export const IMAGE_DEBUG_TYPE_CLSID = 11;
export const IMAGE_DEBUG_TYPE_VC_FEATURE = 12;
export const IMAGE_DEBUG_TYPE_POGO = 13;
export const IMAGE_DEBUG_TYPE_ILTCG = 14;
export const IMAGE_DEBUG_TYPE_MPX = 15;
export const IMAGE_DEBUG_TYPE_REPRO = 16;
export const IMAGE_DEBUG_TYPE_EX_DLLCHARACTERISTICS = 20;
export const FRAME_FPO = 0;
export const FRAME_TRAP = 1;
export const FRAME_TSS = 2;
export const FRAME_NONFPO = 3;
export const SIZEOF_RFPO_DATA = 16;
export const IMAGE_DEBUG_MISC_EXENAME = 1;
export const IMAGE_SEPARATE_DEBUG_SIGNATURE = 18756;
export const NON_PAGED_DEBUG_SIGNATURE = 18766;
export const IMAGE_SEPARATE_DEBUG_FLAGS_MASK = 32768;
export const IMAGE_SEPARATE_DEBUG_MISMATCH = 32768;
export const IMPORT_OBJECT_HDR_SIG2 = 65535;
export const UNWIND_HISTORY_TABLE_SIZE = 12;
export const RTL_RUN_ONCE_CHECK_ONLY = 1;
export const RTL_RUN_ONCE_ASYNC = 2;
export const RTL_RUN_ONCE_INIT_FAILED = 4;
export const RTL_RUN_ONCE_CTX_RESERVED_BITS = 2;
export const FAST_FAIL_LEGACY_GS_VIOLATION = 0;
export const FAST_FAIL_VTGUARD_CHECK_FAILURE = 1;
export const FAST_FAIL_STACK_COOKIE_CHECK_FAILURE = 2;
export const FAST_FAIL_CORRUPT_LIST_ENTRY = 3;
export const FAST_FAIL_INCORRECT_STACK = 4;
export const FAST_FAIL_INVALID_ARG = 5;
export const FAST_FAIL_GS_COOKIE_INIT = 6;
export const FAST_FAIL_FATAL_APP_EXIT = 7;
export const FAST_FAIL_RANGE_CHECK_FAILURE = 8;
export const FAST_FAIL_UNSAFE_REGISTRY_ACCESS = 9;
export const FAST_FAIL_GUARD_ICALL_CHECK_FAILURE = 10;
export const FAST_FAIL_GUARD_WRITE_CHECK_FAILURE = 11;
export const FAST_FAIL_INVALID_FIBER_SWITCH = 12;
export const FAST_FAIL_INVALID_SET_OF_CONTEXT = 13;
export const FAST_FAIL_INVALID_REFERENCE_COUNT = 14;
export const FAST_FAIL_INVALID_JUMP_BUFFER = 18;
export const FAST_FAIL_MRDATA_MODIFIED = 19;
export const FAST_FAIL_CERTIFICATION_FAILURE = 20;
export const FAST_FAIL_INVALID_EXCEPTION_CHAIN = 21;
export const FAST_FAIL_CRYPTO_LIBRARY = 22;
export const FAST_FAIL_INVALID_CALL_IN_DLL_CALLOUT = 23;
export const FAST_FAIL_INVALID_IMAGE_BASE = 24;
export const FAST_FAIL_DLOAD_PROTECTION_FAILURE = 25;
export const FAST_FAIL_UNSAFE_EXTENSION_CALL = 26;
export const FAST_FAIL_DEPRECATED_SERVICE_INVOKED = 27;
export const FAST_FAIL_INVALID_BUFFER_ACCESS = 28;
export const FAST_FAIL_INVALID_BALANCED_TREE = 29;
export const FAST_FAIL_INVALID_NEXT_THREAD = 30;
export const FAST_FAIL_GUARD_ICALL_CHECK_SUPPRESSED = 31;
export const FAST_FAIL_APCS_DISABLED = 32;
export const FAST_FAIL_INVALID_IDLE_STATE = 33;
export const FAST_FAIL_MRDATA_PROTECTION_FAILURE = 34;
export const FAST_FAIL_UNEXPECTED_HEAP_EXCEPTION = 35;
export const FAST_FAIL_INVALID_LOCK_STATE = 36;
export const FAST_FAIL_GUARD_JUMPTABLE = 37;
export const FAST_FAIL_INVALID_LONGJUMP_TARGET = 38;
export const FAST_FAIL_INVALID_DISPATCH_CONTEXT = 39;
export const FAST_FAIL_INVALID_THREAD = 40;
export const FAST_FAIL_INVALID_SYSCALL_NUMBER = 41;
export const FAST_FAIL_INVALID_FILE_OPERATION = 42;
export const FAST_FAIL_LPAC_ACCESS_DENIED = 43;
export const FAST_FAIL_GUARD_SS_FAILURE = 44;
export const FAST_FAIL_LOADER_CONTINUITY_FAILURE = 45;
export const FAST_FAIL_GUARD_EXPORT_SUPPRESSION_FAILURE = 46;
export const FAST_FAIL_INVALID_CONTROL_STACK = 47;
export const FAST_FAIL_SET_CONTEXT_DENIED = 48;
export const FAST_FAIL_INVALID_IAT = 49;
export const FAST_FAIL_HEAP_METADATA_CORRUPTION = 50;
export const FAST_FAIL_PAYLOAD_RESTRICTION_VIOLATION = 51;
export const FAST_FAIL_LOW_LABEL_ACCESS_DENIED = 52;
export const FAST_FAIL_ENCLAVE_CALL_FAILURE = 53;
export const FAST_FAIL_UNHANDLED_LSS_EXCEPTON = 54;
export const FAST_FAIL_ADMINLESS_ACCESS_DENIED = 55;
export const FAST_FAIL_UNEXPECTED_CALL = 56;
export const FAST_FAIL_CONTROL_INVALID_RETURN_ADDRESS = 57;
export const FAST_FAIL_UNEXPECTED_HOST_BEHAVIOR = 58;
export const FAST_FAIL_FLAGS_CORRUPTION = 59;
export const FAST_FAIL_VEH_CORRUPTION = 60;
export const FAST_FAIL_ETW_CORRUPTION = 61;
export const FAST_FAIL_RIO_ABORT = 62;
export const FAST_FAIL_INVALID_PFN = 63;
export const FAST_FAIL_GUARD_ICALL_CHECK_FAILURE_XFG = 64;
export const FAST_FAIL_CAST_GUARD = 65;
export const FAST_FAIL_HOST_VISIBILITY_CHANGE = 66;
export const FAST_FAIL_KERNEL_CET_SHADOW_STACK_ASSIST = 67;
export const FAST_FAIL_PATCH_CALLBACK_FAILED = 68;
export const FAST_FAIL_NTDLL_PATCH_FAILED = 69;
export const FAST_FAIL_INVALID_FLS_DATA = 70;
export const FAST_FAIL_INVALID_FAST_FAIL_CODE = 4294967295;
export const IS_TEXT_UNICODE_DBCS_LEADBYTE = 1024;
export const IS_TEXT_UNICODE_UTF8 = 2048;
export const COMPRESSION_FORMAT_NONE = 0;
export const COMPRESSION_FORMAT_DEFAULT = 1;
export const COMPRESSION_FORMAT_LZNT1 = 2;
export const COMPRESSION_FORMAT_XPRESS = 3;
export const COMPRESSION_FORMAT_XPRESS_HUFF = 4;
export const COMPRESSION_FORMAT_XP10 = 5;
export const COMPRESSION_ENGINE_STANDARD = 0;
export const COMPRESSION_ENGINE_MAXIMUM = 256;
export const COMPRESSION_ENGINE_HIBER = 512;
export const SEF_AI_USE_EXTRA_PARAMS = 2048;
export const SEF_FORCE_USER_MODE = 8192;
export const MESSAGE_RESOURCE_UNICODE = 1;
export const MESSAGE_RESOURCE_UTF8 = 2;
export const VER_EQUAL = 1;
export const VER_GREATER = 2;
export const VER_GREATER_EQUAL = 3;
export const VER_LESS = 4;
export const VER_LESS_EQUAL = 5;
export const VER_AND = 6;
export const VER_OR = 7;
export const VER_CONDITION_MASK = 7;
export const VER_NUM_BITS_PER_CONDITION_MASK = 3;
export const VER_NT_WORKSTATION = 1;
export const VER_NT_DOMAIN_CONTROLLER = 2;
export const VER_NT_SERVER = 3;
export const RTL_UMS_VERSION = 256;
export const VRL_PREDEFINED_CLASS_BEGIN = 1;
export const VRL_CUSTOM_CLASS_BEGIN = 256;
export const VRL_ENABLE_KERNEL_BREAKS = 2147483648;
export const CTMF_INCLUDE_APPCONTAINER = 1;
export const CTMF_INCLUDE_LPAC = 2;
export const FLUSH_NV_MEMORY_IN_FLAG_NO_DRAIN = 1;
export const WRITE_NV_MEMORY_FLAG_FLUSH = 1;
export const WRITE_NV_MEMORY_FLAG_NON_TEMPORAL = 2;
export const WRITE_NV_MEMORY_FLAG_NO_DRAIN = 256;
export const FILL_NV_MEMORY_FLAG_FLUSH = 1;
export const FILL_NV_MEMORY_FLAG_NON_TEMPORAL = 2;
export const FILL_NV_MEMORY_FLAG_NO_DRAIN = 256;
export const IMAGE_POLICY_METADATA_VERSION = 1;
export const IMAGE_POLICY_SECTION_NAME = `.tPolicy`;
export const RTL_VIRTUAL_UNWIND2_VALIDATE_PAC = 1;
export const RTL_CRITICAL_SECTION_FLAG_NO_DEBUG_INFO = 16777216;
export const RTL_CRITICAL_SECTION_FLAG_DYNAMIC_SPIN = 33554432;
export const RTL_CRITICAL_SECTION_FLAG_STATIC_INIT = 67108864;
export const RTL_CRITICAL_SECTION_FLAG_RESOURCE_TYPE = 134217728;
export const RTL_CRITICAL_SECTION_FLAG_FORCE_DEBUG_INFO = 268435456;
export const RTL_CRITICAL_SECTION_ALL_FLAG_BITS = 4278190080;
export const RTL_CRITICAL_SECTION_DEBUG_FLAG_STATIC_INIT = 1;
export const RTL_CONDITION_VARIABLE_LOCKMODE_SHARED = 1;
export const HEAP_OPTIMIZE_RESOURCES_CURRENT_VERSION = 1;
export const WT_EXECUTEINUITHREAD = 2;
export const WT_EXECUTEINPERSISTENTIOTHREAD = 64;
export const WT_EXECUTEINLONGTHREAD = 16;
export const WT_EXECUTEDELETEWAIT = 8;
export const ACTIVATION_CONTEXT_PATH_TYPE_NONE = 1;
export const ACTIVATION_CONTEXT_PATH_TYPE_WIN32_FILE = 2;
export const ACTIVATION_CONTEXT_PATH_TYPE_URL = 3;
export const ACTIVATION_CONTEXT_PATH_TYPE_ASSEMBLYREF = 4;
export const CREATE_BOUNDARY_DESCRIPTOR_ADD_APPCONTAINER_SID = 1;
export const PERFORMANCE_DATA_VERSION = 1;
export const READ_THREAD_PROFILING_FLAG_DISPATCHING = 1;
export const READ_THREAD_PROFILING_FLAG_HARDWARE_COUNTERS = 2;
export const UNIFIEDBUILDREVISION_KEY = `\\Registry\\Machine\\Software\\Microsoft\\Windows NT\\CurrentVersion`;
export const UNIFIEDBUILDREVISION_VALUE = `UBR`;
export const UNIFIEDBUILDREVISION_MIN = 0;
export const DEVICEFAMILYDEVICEFORM_KEY = `\\Registry\\Machine\\Software\\Microsoft\\Windows NT\\CurrentVersion\\OEM`;
export const DEVICEFAMILYDEVICEFORM_VALUE = `DeviceForm`;
export const DLL_PROCESS_ATTACH = 1;
export const DLL_THREAD_ATTACH = 2;
export const DLL_THREAD_DETACH = 3;
export const DLL_PROCESS_DETACH = 0;
export const EVENTLOG_FORWARDS_READ = 4;
export const EVENTLOG_BACKWARDS_READ = 8;
export const EVENTLOG_START_PAIRED_EVENT = 1;
export const EVENTLOG_END_PAIRED_EVENT = 2;
export const EVENTLOG_END_ALL_PAIRED_EVENTS = 4;
export const EVENTLOG_PAIRED_EVENT_ACTIVE = 8;
export const EVENTLOG_PAIRED_EVENT_INACTIVE = 16;
export const MAXLOGICALLOGNAMESIZE = 256;
export const REG_REFRESH_HIVE = 2;
export const REG_NO_LAZY_FLUSH = 4;
export const REG_APP_HIVE = 16;
export const REG_PROCESS_PRIVATE = 32;
export const REG_START_JOURNAL = 64;
export const REG_HIVE_EXACT_FILE_GROWTH = 128;
export const REG_HIVE_NO_RM = 256;
export const REG_HIVE_SINGLE_LOG = 512;
export const REG_BOOT_HIVE = 1024;
export const REG_LOAD_HIVE_OPEN_HANDLE = 2048;
export const REG_FLUSH_HIVE_FILE_GROWTH = 4096;
export const REG_OPEN_READ_ONLY = 8192;
export const REG_IMMUTABLE = 16384;
export const REG_NO_IMPERSONATION_FALLBACK = 32768;
export const REG_APP_HIVE_OPEN_READ_ONLY = 8192;
export const REG_FORCE_UNLOAD = 1;
export const REG_UNLOAD_LEGAL_FLAGS = 1;
export const SERVICE_USER_SERVICE = 64;
export const SERVICE_USERSERVICE_INSTANCE = 128;
export const SERVICE_INTERACTIVE_PROCESS = 256;
export const SERVICE_PKG_SERVICE = 512;
export const CM_SERVICE_NETWORK_BOOT_LOAD = 1;
export const CM_SERVICE_VIRTUAL_DISK_BOOT_LOAD = 2;
export const CM_SERVICE_USB_DISK_BOOT_LOAD = 4;
export const CM_SERVICE_SD_DISK_BOOT_LOAD = 8;
export const CM_SERVICE_USB3_DISK_BOOT_LOAD = 16;
export const CM_SERVICE_MEASURED_BOOT_LOAD = 32;
export const CM_SERVICE_VERIFIER_BOOT_LOAD = 64;
export const CM_SERVICE_WINPE_BOOT_LOAD = 128;
export const CM_SERVICE_RAM_DISK_BOOT_LOAD = 256;
export const TAPE_PSEUDO_LOGICAL_POSITION = 2;
export const TAPE_PSEUDO_LOGICAL_BLOCK = 3;
export const TAPE_DRIVE_FIXED = 1;
export const TAPE_DRIVE_SELECT = 2;
export const TAPE_DRIVE_INITIATOR = 4;
export const TAPE_DRIVE_ERASE_SHORT = 16;
export const TAPE_DRIVE_ERASE_LONG = 32;
export const TAPE_DRIVE_ERASE_BOP_ONLY = 64;
export const TAPE_DRIVE_ERASE_IMMEDIATE = 128;
export const TAPE_DRIVE_TAPE_CAPACITY = 256;
export const TAPE_DRIVE_TAPE_REMAINING = 512;
export const TAPE_DRIVE_FIXED_BLOCK = 1024;
export const TAPE_DRIVE_VARIABLE_BLOCK = 2048;
export const TAPE_DRIVE_WRITE_PROTECT = 4096;
export const TAPE_DRIVE_EOT_WZ_SIZE = 8192;
export const TAPE_DRIVE_ECC = 65536;
export const TAPE_DRIVE_COMPRESSION = 131072;
export const TAPE_DRIVE_PADDING = 262144;
export const TAPE_DRIVE_REPORT_SMKS = 524288;
export const TAPE_DRIVE_GET_ABSOLUTE_BLK = 1048576;
export const TAPE_DRIVE_GET_LOGICAL_BLK = 2097152;
export const TAPE_DRIVE_SET_EOT_WZ_SIZE = 4194304;
export const TAPE_DRIVE_EJECT_MEDIA = 16777216;
export const TAPE_DRIVE_CLEAN_REQUESTS = 33554432;
export const TAPE_DRIVE_SET_CMP_BOP_ONLY = 67108864;
export const TAPE_DRIVE_RESERVED_BIT = 2147483648;
export const TAPE_DRIVE_FORMAT = 2684354560;
export const TAPE_DRIVE_FORMAT_IMMEDIATE = 3221225472;
export const TAPE_DRIVE_HIGH_FEATURES = 2147483648;
export const TAPE_QUERY_DRIVE_PARAMETERS = 0;
export const TAPE_QUERY_MEDIA_CAPACITY = 1;
export const TAPE_CHECK_FOR_DRIVE_PROBLEM = 2;
export const TAPE_QUERY_IO_ERROR_DATA = 3;
export const TAPE_QUERY_DEVICE_ERROR_DATA = 4;
export const TRANSACTIONMANAGER_QUERY_INFORMATION = 1;
export const TRANSACTIONMANAGER_SET_INFORMATION = 2;
export const TRANSACTIONMANAGER_RECOVER = 4;
export const TRANSACTIONMANAGER_RENAME = 8;
export const TRANSACTIONMANAGER_CREATE_RM = 16;
export const TRANSACTIONMANAGER_BIND_TRANSACTION = 32;
export const TRANSACTION_QUERY_INFORMATION = 1;
export const TRANSACTION_SET_INFORMATION = 2;
export const TRANSACTION_ENLIST = 4;
export const TRANSACTION_COMMIT = 8;
export const TRANSACTION_ROLLBACK = 16;
export const TRANSACTION_PROPAGATE = 32;
export const TRANSACTION_RIGHT_RESERVED1 = 64;
export const RESOURCEMANAGER_QUERY_INFORMATION = 1;
export const RESOURCEMANAGER_SET_INFORMATION = 2;
export const RESOURCEMANAGER_RECOVER = 4;
export const RESOURCEMANAGER_ENLIST = 8;
export const RESOURCEMANAGER_GET_NOTIFICATION = 16;
export const RESOURCEMANAGER_REGISTER_PROTOCOL = 32;
export const RESOURCEMANAGER_COMPLETE_PROPAGATION = 64;
export const ENLISTMENT_QUERY_INFORMATION = 1;
export const ENLISTMENT_SET_INFORMATION = 2;
export const ENLISTMENT_RECOVER = 4;
export const ENLISTMENT_SUBORDINATE_RIGHTS = 8;
export const ENLISTMENT_SUPERIOR_RIGHTS = 16;
export const PcTeb = 24;
export const ACTIVATION_CONTEXT_SECTION_ASSEMBLY_INFORMATION = 1;
export const ACTIVATION_CONTEXT_SECTION_DLL_REDIRECTION = 2;
export const ACTIVATION_CONTEXT_SECTION_WINDOW_CLASS_REDIRECTION = 3;
export const ACTIVATION_CONTEXT_SECTION_COM_SERVER_REDIRECTION = 4;
export const ACTIVATION_CONTEXT_SECTION_COM_INTERFACE_REDIRECTION = 5;
export const ACTIVATION_CONTEXT_SECTION_COM_TYPE_LIBRARY_REDIRECTION = 6;
export const ACTIVATION_CONTEXT_SECTION_COM_PROGID_REDIRECTION = 7;
export const ACTIVATION_CONTEXT_SECTION_GLOBAL_OBJECT_RENAME_TABLE = 8;
export const ACTIVATION_CONTEXT_SECTION_CLR_SURROGATES = 9;
export const ACTIVATION_CONTEXT_SECTION_APPLICATION_SETTINGS = 10;
export const ACTIVATION_CONTEXT_SECTION_COMPATIBILITY_INFO = 11;
export const ACTIVATION_CONTEXT_SECTION_WINRT_ACTIVATABLE_CLASSES = 12;
export const BSF_MSGSRV32ISOK = 2147483648;
export const BSF_MSGSRV32ISOK_BIT = 31;
export const DBT_APPYBEGIN = 0;
export const DBT_APPYEND = 1;
export const DBT_DEVNODES_CHANGED = 7;
export const DBT_QUERYCHANGECONFIG = 23;
export const DBT_CONFIGCHANGED = 24;
export const DBT_CONFIGCHANGECANCELED = 25;
export const DBT_MONITORCHANGE = 27;
export const DBT_SHELLLOGGEDON = 32;
export const DBT_CONFIGMGAPI32 = 34;
export const DBT_VXDINITCOMPLETE = 35;
export const DBT_VOLLOCKQUERYLOCK = 32833;
export const DBT_VOLLOCKLOCKTAKEN = 32834;
export const DBT_VOLLOCKLOCKFAILED = 32835;
export const DBT_VOLLOCKQUERYUNLOCK = 32836;
export const DBT_VOLLOCKLOCKRELEASED = 32837;
export const DBT_VOLLOCKUNLOCKFAILED = 32838;
export const LOCKP_ALLOW_WRITES = 1;
export const LOCKP_FAIL_WRITES = 0;
export const LOCKP_FAIL_MEM_MAPPING = 2;
export const LOCKP_ALLOW_MEM_MAPPING = 0;
export const LOCKP_USER_MASK = 3;
export const LOCKP_LOCK_FOR_FORMAT = 4;
export const LOCKF_LOGICAL_LOCK = 0;
export const LOCKF_PHYSICAL_LOCK = 1;
export const DBT_NO_DISK_SPACE = 71;
export const DBT_LOW_DISK_SPACE = 72;
export const DBT_CONFIGMGPRIVATE = 32767;
export const DBT_DEVICEARRIVAL = 32768;
export const DBT_DEVICEQUERYREMOVE = 32769;
export const DBT_DEVICEQUERYREMOVEFAILED = 32770;
export const DBT_DEVICEREMOVEPENDING = 32771;
export const DBT_DEVICEREMOVECOMPLETE = 32772;
export const DBT_DEVICETYPESPECIFIC = 32773;
export const DBT_CUSTOMEVENT = 32774;
export const DBT_DEVTYP_DEVNODE = 1;
export const DBT_DEVTYP_NET = 4;
export const DBTF_RESOURCE = 1;
export const DBTF_XPORT = 2;
export const DBTF_SLOWNET = 4;
export const DBT_VPOWERDAPI = 33024;
export const DBT_USERDEFINED = 65535;
export const D3DNTHAL_NUMCLIPVERTICES = 20;
export const D3DNTHAL_SCENE_CAPTURE_START = 0;
export const D3DNTHAL_SCENE_CAPTURE_END = 1;
export const D3DNTHAL_CONTEXT_BAD = 512;
export const D3DNTHAL_OUTOFCONTEXTS = 513;
export const D3DNTHAL2_CB32_SETRENDERTARGET = 1;
export const D3DHAL_STATESETBEGIN = 0;
export const D3DHAL_STATESETEND = 1;
export const D3DHAL_STATESETDELETE = 2;
export const D3DHAL_STATESETEXECUTE = 3;
export const D3DHAL_STATESETCAPTURE = 4;
export const D3DNTHALDP2_USERMEMVERTICES = 1;
export const D3DNTHALDP2_EXECUTEBUFFER = 2;
export const D3DNTHALDP2_SWAPVERTEXBUFFER = 4;
export const D3DNTHALDP2_SWAPCOMMANDBUFFER = 8;
export const D3DNTHALDP2_REQVERTEXBUFSIZE = 16;
export const D3DNTHALDP2_REQCOMMANDBUFSIZE = 32;
export const D3DNTHALDP2_VIDMEMVERTEXBUF = 64;
export const D3DNTHALDP2_VIDMEMCOMMANDBUF = 128;
export const D3DNTHAL3_CB32_CLEAR2 = 1;
export const D3DNTHAL3_CB32_RESERVED = 2;
export const D3DNTHAL3_CB32_VALIDATETEXTURESTAGESTATE = 4;
export const D3DNTHAL3_CB32_DRAWPRIMITIVES2 = 8;
export const D3DNTHAL_TSS_RENDERSTATEBASE = 256;
export const D3DNTHAL_TSS_MAXSTAGES = 8;
export const D3DNTHAL_TSS_STATESPERSTAGE = 64;
export const D3DTSS_TEXTUREMAP = 0;
export const D3DHAL_SAMPLER_MAXSAMP = 16;
export const D3DHAL_SAMPLER_MAXVERTEXSAMP = 4;
export const D3DPMISCCAPS_LINEPATTERNREP = 4;
export const D3DRS_MAXVERTEXSHADERINST = 196;
export const D3DRS_MAXPIXELSHADERINST = 197;
export const D3DRENDERSTATE_EVICTMANAGEDTEXTURES = 61;
export const D3DRENDERSTATE_SCENECAPTURE = 62;
export const _NT_D3DRS_DELETERTPATCH = 169;
export const D3DINFINITEINSTRUCTIONS = 4294967295;
export const D3DNTHAL_STATESETCREATE = 5;
export const D3DNTCLEAR_COMPUTERECTS = 8;
export const _NT_RTPATCHFLAG_HASSEGS = 1;
export const _NT_RTPATCHFLAG_HASINFO = 2;
export const D3DNTHAL_ROW_WEIGHTS = 1;
export const D3DNTHAL_COL_WEIGHTS = 2;
export const DP2BLT_POINT = 1;
export const DP2BLT_LINEAR = 2;
export const DDBLT_EXTENDED_PRESENTATION_STRETCHFACTOR = 16;
export const _NT_D3DGDI2_MAGIC = 4294967295;
export const _NT_D3DGDI2_TYPE_GETD3DCAPS8 = 1;
export const _NT_D3DGDI2_TYPE_GETFORMATCOUNT = 2;
export const _NT_D3DGDI2_TYPE_GETFORMAT = 3;
export const _NT_D3DGDI2_TYPE_DXVERSION = 4;
export const _NT_D3DGDI2_TYPE_DEFERRED_AGP_AWARE = 24;
export const _NT_D3DGDI2_TYPE_FREE_DEFERRED_AGP = 25;
export const _NT_D3DGDI2_TYPE_DEFER_AGP_FREES = 32;
export const _NT_D3DGDI2_TYPE_GETD3DCAPS9 = 16;
export const _NT_D3DGDI2_TYPE_GETEXTENDEDMODECOUNT = 17;
export const _NT_D3DGDI2_TYPE_GETEXTENDEDMODE = 18;
export const _NT_D3DGDI2_TYPE_GETADAPTERGROUP = 19;
export const _NT_D3DGDI2_TYPE_GETMULTISAMPLEQUALITYLEVELS = 22;
export const _NT_D3DGDI2_TYPE_GETD3DQUERYCOUNT = 33;
export const _NT_D3DGDI2_TYPE_GETD3DQUERY = 34;
export const _NT_D3DGDI2_TYPE_GETDDIVERSION = 35;
export const DX9_DDI_VERSION = 4;
export const _NT_D3DDEVCAPS_HWVERTEXBUFFER = 33554432;
export const _NT_D3DDEVCAPS_HWINDEXBUFFER = 67108864;
export const _NT_D3DDEVCAPS_SUBVOLUMELOCK = 134217728;
export const _NT_D3DPMISCCAPS_FOGINFVF = 8192;
export const _NT_D3DFVF_FOG = 8192;
export const D3DPRASTERCAPS_STRETCHBLTMULTISAMPLE = 8388608;
export const _NT_D3DVS_MAXINSTRUCTIONCOUNT_V1_1 = 128;
export const _NT_D3DVS_LABEL_MAX_V3_0 = 2048;
export const _NT_D3DVS_TCRDOUTREG_MAX_V1_1 = 8;
export const _NT_D3DVS_TCRDOUTREG_MAX_V2_0 = 8;
export const _NT_D3DVS_TCRDOUTREG_MAX_V2_1 = 8;
export const _NT_D3DVS_OUTPUTREG_MAX_V3_0 = 12;
export const _NT_D3DVS_OUTPUTREG_MAX_SW_DX9 = 16;
export const _NT_D3DVS_ATTROUTREG_MAX_V1_1 = 2;
export const _NT_D3DVS_ATTROUTREG_MAX_V2_0 = 2;
export const _NT_D3DVS_ATTROUTREG_MAX_V2_1 = 2;
export const _NT_D3DVS_INPUTREG_MAX_V1_1 = 16;
export const _NT_D3DVS_INPUTREG_MAX_V2_0 = 16;
export const _NT_D3DVS_INPUTREG_MAX_V2_1 = 16;
export const _NT_D3DVS_INPUTREG_MAX_V3_0 = 16;
export const _NT_D3DVS_TEMPREG_MAX_V1_1 = 12;
export const _NT_D3DVS_TEMPREG_MAX_V2_0 = 12;
export const _NT_D3DVS_TEMPREG_MAX_V2_1 = 32;
export const _NT_D3DVS_TEMPREG_MAX_V3_0 = 32;
export const _NT_D3DVS_CONSTREG_MAX_V1_1 = 96;
export const _NT_D3DVS_CONSTREG_MAX_V2_0 = 8192;
export const _NT_D3DVS_CONSTREG_MAX_V2_1 = 8192;
export const _NT_D3DVS_CONSTREG_MAX_V3_0 = 8192;
export const _NT_D3DVS_CONSTINTREG_MAX_SW_DX9 = 2048;
export const _NT_D3DVS_CONSTINTREG_MAX_V2_0 = 16;
export const _NT_D3DVS_CONSTINTREG_MAX_V2_1 = 16;
export const _NT_D3DVS_CONSTINTREG_MAX_V3_0 = 16;
export const _NT_D3DVS_CONSTBOOLREG_MAX_SW_DX9 = 2048;
export const _NT_D3DVS_CONSTBOOLREG_MAX_V2_0 = 16;
export const _NT_D3DVS_CONSTBOOLREG_MAX_V2_1 = 16;
export const _NT_D3DVS_CONSTBOOLREG_MAX_V3_0 = 16;
export const _NT_D3DVS_ADDRREG_MAX_V1_1 = 1;
export const _NT_D3DVS_ADDRREG_MAX_V2_0 = 1;
export const _NT_D3DVS_ADDRREG_MAX_V2_1 = 1;
export const _NT_D3DVS_ADDRREG_MAX_V3_0 = 1;
export const _NT_D3DVS_MAXLOOPSTEP_V2_0 = 128;
export const _NT_D3DVS_MAXLOOPSTEP_V2_1 = 128;
export const _NT_D3DVS_MAXLOOPSTEP_V3_0 = 128;
export const _NT_D3DVS_MAXLOOPINITVALUE_V2_0 = 255;
export const _NT_D3DVS_MAXLOOPINITVALUE_V2_1 = 255;
export const _NT_D3DVS_MAXLOOPINITVALUE_V3_0 = 255;
export const _NT_D3DVS_MAXLOOPITERATIONCOUNT_V2_0 = 255;
export const _NT_D3DVS_MAXLOOPITERATIONCOUNT_V2_1 = 255;
export const _NT_D3DVS_MAXLOOPITERATIONCOUNT_V3_0 = 255;
export const _NT_D3DVS_PREDICATE_MAX_V2_1 = 1;
export const _NT_D3DVS_PREDICATE_MAX_V3_0 = 1;
export const _NT_D3DPS_INPUTREG_MAX_V1_1 = 2;
export const _NT_D3DPS_INPUTREG_MAX_V1_2 = 2;
export const _NT_D3DPS_INPUTREG_MAX_V1_3 = 2;
export const _NT_D3DPS_INPUTREG_MAX_V1_4 = 2;
export const _NT_D3DPS_INPUTREG_MAX_V2_0 = 2;
export const _NT_D3DPS_INPUTREG_MAX_V2_1 = 2;
export const _NT_D3DPS_INPUTREG_MAX_V3_0 = 12;
export const _NT_D3DPS_TEMPREG_MAX_V1_1 = 2;
export const _NT_D3DPS_TEMPREG_MAX_V1_2 = 2;
export const _NT_D3DPS_TEMPREG_MAX_V1_3 = 2;
export const _NT_D3DPS_TEMPREG_MAX_V1_4 = 6;
export const _NT_D3DPS_TEMPREG_MAX_V2_0 = 12;
export const _NT_D3DPS_TEMPREG_MAX_V2_1 = 32;
export const _NT_D3DPS_TEMPREG_MAX_V3_0 = 32;
export const _NT_D3DPS_TEXTUREREG_MAX_V1_1 = 4;
export const _NT_D3DPS_TEXTUREREG_MAX_V1_2 = 4;
export const _NT_D3DPS_TEXTUREREG_MAX_V1_3 = 4;
export const _NT_D3DPS_TEXTUREREG_MAX_V1_4 = 6;
export const _NT_D3DPS_TEXTUREREG_MAX_V2_0 = 8;
export const _NT_D3DPS_TEXTUREREG_MAX_V2_1 = 8;
export const _NT_D3DPS_TEXTUREREG_MAX_V3_0 = 0;
export const _NT_D3DPS_COLOROUT_MAX_V2_0 = 4;
export const _NT_D3DPS_COLOROUT_MAX_V2_1 = 4;
export const _NT_D3DPS_COLOROUT_MAX_V3_0 = 4;
export const _NT_D3DPS_PREDICATE_MAX_V2_1 = 1;
export const _NT_D3DPS_PREDICATE_MAX_V3_0 = 1;
export const _NT_D3DPS_CONSTREG_MAX_SW_DX9 = 8192;
export const _NT_D3DPS_CONSTREG_MAX_V1_1 = 8;
export const _NT_D3DPS_CONSTREG_MAX_V1_2 = 8;
export const _NT_D3DPS_CONSTREG_MAX_V1_3 = 8;
export const _NT_D3DPS_CONSTREG_MAX_V1_4 = 8;
export const _NT_D3DPS_CONSTREG_MAX_V2_0 = 32;
export const _NT_D3DPS_CONSTREG_MAX_V2_1 = 32;
export const _NT_D3DPS_CONSTREG_MAX_V3_0 = 224;
export const _NT_D3DPS_CONSTBOOLREG_MAX_SW_DX9 = 2048;
export const _NT_D3DPS_CONSTBOOLREG_MAX_V2_1 = 16;
export const _NT_D3DPS_CONSTBOOLREG_MAX_V3_0 = 16;
export const _NT_D3DPS_CONSTINTREG_MAX_SW_DX9 = 2048;
export const _NT_D3DPS_CONSTINTREG_MAX_V2_1 = 16;
export const _NT_D3DPS_CONSTINTREG_MAX_V3_0 = 16;
export const _NT_D3DPS_MAXLOOPSTEP_V2_1 = 128;
export const _NT_D3DPS_MAXLOOPSTEP_V3_0 = 128;
export const _NT_D3DPS_MAXLOOPINITVALUE_V2_1 = 255;
export const _NT_D3DPS_MAXLOOPINITVALUE_V3_0 = 255;
export const _NT_D3DPS_MAXLOOPITERATIONCOUNT_V2_1 = 255;
export const _NT_D3DPS_MAXLOOPITERATIONCOUNT_V3_0 = 255;
export const _NT_D3DPS_INPUTREG_MAX_DX8 = 8;
export const _NT_D3DPS_TEMPREG_MAX_DX8 = 8;
export const _NT_D3DPS_CONSTREG_MAX_DX8 = 8;
export const _NT_D3DPS_TEXTUREREG_MAX_DX8 = 8;
export const D3DVSDT_FLOAT1 = 0;
export const D3DVSDT_FLOAT2 = 1;
export const D3DVSDT_FLOAT3 = 2;
export const D3DVSDT_FLOAT4 = 3;
export const D3DVSDT_D3DCOLOR = 4;
export const D3DVSDT_UBYTE4 = 5;
export const D3DVSDT_SHORT2 = 6;
export const D3DVSDT_SHORT4 = 7;
export const D3DVSDE_POSITION = 0;
export const D3DVSDE_BLENDWEIGHT = 1;
export const D3DVSDE_BLENDINDICES = 2;
export const D3DVSDE_NORMAL = 3;
export const D3DVSDE_PSIZE = 4;
export const D3DVSDE_DIFFUSE = 5;
export const D3DVSDE_SPECULAR = 6;
export const D3DVSDE_TEXCOORD0 = 7;
export const D3DVSDE_TEXCOORD1 = 8;
export const D3DVSDE_TEXCOORD2 = 9;
export const D3DVSDE_TEXCOORD3 = 10;
export const D3DVSDE_TEXCOORD4 = 11;
export const D3DVSDE_TEXCOORD5 = 12;
export const D3DVSDE_TEXCOORD6 = 13;
export const D3DVSDE_TEXCOORD7 = 14;
export const D3DVSDE_POSITION2 = 15;
export const D3DVSDE_NORMAL2 = 16;
export const D3DVSD_TOKENTYPESHIFT = 29;
export const D3DVSD_STREAMNUMBERSHIFT = 0;
export const D3DVSD_DATALOADTYPESHIFT = 28;
export const D3DVSD_DATATYPESHIFT = 16;
export const D3DVSD_SKIPCOUNTSHIFT = 16;
export const D3DVSD_VERTEXREGSHIFT = 0;
export const D3DVSD_VERTEXREGINSHIFT = 20;
export const D3DVSD_CONSTCOUNTSHIFT = 25;
export const D3DVSD_CONSTADDRESSSHIFT = 0;
export const D3DVSD_CONSTRSSHIFT = 16;
export const D3DVSD_EXTCOUNTSHIFT = 24;
export const D3DVSD_EXTINFOSHIFT = 0;
export const D3DVSD_STREAMTESSSHIFT = 28;
export const DIRECT3D_VERSION = 1792;
export const D3DTRANSFORMCAPS_CLIP = 1;
export const D3DLIGHTINGMODEL_RGB = 1;
export const D3DLIGHTINGMODEL_MONO = 2;
export const D3DLIGHTCAPS_POINT = 1;
export const D3DLIGHTCAPS_SPOT = 2;
export const D3DLIGHTCAPS_DIRECTIONAL = 4;
export const D3DLIGHTCAPS_PARALLELPOINT = 8;
export const D3DLIGHTCAPS_GLSPOT = 16;
export const D3DPMISCCAPS_MASKPLANES = 1;
export const D3DPMISCCAPS_MASKZ = 2;
export const D3DPMISCCAPS_CONFORMANT = 8;
export const D3DPMISCCAPS_CULLNONE = 16;
export const D3DPMISCCAPS_CULLCW = 32;
export const D3DPMISCCAPS_CULLCCW = 64;
export const D3DPRASTERCAPS_DITHER = 1;
export const D3DPRASTERCAPS_ROP2 = 2;
export const D3DPRASTERCAPS_XOR = 4;
export const D3DPRASTERCAPS_PAT = 8;
export const D3DPRASTERCAPS_ZTEST = 16;
export const D3DPRASTERCAPS_SUBPIXEL = 32;
export const D3DPRASTERCAPS_SUBPIXELX = 64;
export const D3DPRASTERCAPS_FOGVERTEX = 128;
export const D3DPRASTERCAPS_FOGTABLE = 256;
export const D3DPRASTERCAPS_STIPPLE = 512;
export const D3DPRASTERCAPS_ANTIALIASSORTDEPENDENT = 1024;
export const D3DPRASTERCAPS_ANTIALIASSORTINDEPENDENT = 2048;
export const D3DPRASTERCAPS_ANTIALIASEDGES = 4096;
export const D3DPRASTERCAPS_MIPMAPLODBIAS = 8192;
export const D3DPRASTERCAPS_ZBIAS = 16384;
export const D3DPRASTERCAPS_ZBUFFERLESSHSR = 32768;
export const D3DPRASTERCAPS_FOGRANGE = 65536;
export const D3DPRASTERCAPS_ANISOTROPY = 131072;
export const D3DPRASTERCAPS_WBUFFER = 262144;
export const D3DPRASTERCAPS_TRANSLUCENTSORTINDEPENDENT = 524288;
export const D3DPRASTERCAPS_WFOG = 1048576;
export const D3DPRASTERCAPS_ZFOG = 2097152;
export const D3DPCMPCAPS_NEVER = 1;
export const D3DPCMPCAPS_LESS = 2;
export const D3DPCMPCAPS_EQUAL = 4;
export const D3DPCMPCAPS_LESSEQUAL = 8;
export const D3DPCMPCAPS_GREATER = 16;
export const D3DPCMPCAPS_NOTEQUAL = 32;
export const D3DPCMPCAPS_GREATEREQUAL = 64;
export const D3DPCMPCAPS_ALWAYS = 128;
export const D3DPBLENDCAPS_ZERO = 1;
export const D3DPBLENDCAPS_ONE = 2;
export const D3DPBLENDCAPS_SRCCOLOR = 4;
export const D3DPBLENDCAPS_INVSRCCOLOR = 8;
export const D3DPBLENDCAPS_SRCALPHA = 16;
export const D3DPBLENDCAPS_INVSRCALPHA = 32;
export const D3DPBLENDCAPS_DESTALPHA = 64;
export const D3DPBLENDCAPS_INVDESTALPHA = 128;
export const D3DPBLENDCAPS_DESTCOLOR = 256;
export const D3DPBLENDCAPS_INVDESTCOLOR = 512;
export const D3DPBLENDCAPS_SRCALPHASAT = 1024;
export const D3DPBLENDCAPS_BOTHSRCALPHA = 2048;
export const D3DPBLENDCAPS_BOTHINVSRCALPHA = 4096;
export const D3DPSHADECAPS_COLORFLATMONO = 1;
export const D3DPSHADECAPS_COLORFLATRGB = 2;
export const D3DPSHADECAPS_COLORGOURAUDMONO = 4;
export const D3DPSHADECAPS_COLORGOURAUDRGB = 8;
export const D3DPSHADECAPS_COLORPHONGMONO = 16;
export const D3DPSHADECAPS_COLORPHONGRGB = 32;
export const D3DPSHADECAPS_SPECULARFLATMONO = 64;
export const D3DPSHADECAPS_SPECULARFLATRGB = 128;
export const D3DPSHADECAPS_SPECULARGOURAUDMONO = 256;
export const D3DPSHADECAPS_SPECULARGOURAUDRGB = 512;
export const D3DPSHADECAPS_SPECULARPHONGMONO = 1024;
export const D3DPSHADECAPS_SPECULARPHONGRGB = 2048;
export const D3DPSHADECAPS_ALPHAFLATBLEND = 4096;
export const D3DPSHADECAPS_ALPHAFLATSTIPPLED = 8192;
export const D3DPSHADECAPS_ALPHAGOURAUDBLEND = 16384;
export const D3DPSHADECAPS_ALPHAGOURAUDSTIPPLED = 32768;
export const D3DPSHADECAPS_ALPHAPHONGBLEND = 65536;
export const D3DPSHADECAPS_ALPHAPHONGSTIPPLED = 131072;
export const D3DPSHADECAPS_FOGFLAT = 262144;
export const D3DPSHADECAPS_FOGGOURAUD = 524288;
export const D3DPSHADECAPS_FOGPHONG = 1048576;
export const D3DPTEXTURECAPS_PERSPECTIVE = 1;
export const D3DPTEXTURECAPS_POW2 = 2;
export const D3DPTEXTURECAPS_ALPHA = 4;
export const D3DPTEXTURECAPS_TRANSPARENCY = 8;
export const D3DPTEXTURECAPS_BORDER = 16;
export const D3DPTEXTURECAPS_SQUAREONLY = 32;
export const D3DPTEXTURECAPS_TEXREPEATNOTSCALEDBYSIZE = 64;
export const D3DPTEXTURECAPS_ALPHAPALETTE = 128;
export const D3DPTEXTURECAPS_NONPOW2CONDITIONAL = 256;
export const D3DPTEXTURECAPS_PROJECTED = 1024;
export const D3DPTEXTURECAPS_CUBEMAP = 2048;
export const D3DPTEXTURECAPS_COLORKEYBLEND = 4096;
export const D3DPTFILTERCAPS_NEAREST = 1;
export const D3DPTFILTERCAPS_LINEAR = 2;
export const D3DPTFILTERCAPS_MIPNEAREST = 4;
export const D3DPTFILTERCAPS_MIPLINEAR = 8;
export const D3DPTFILTERCAPS_LINEARMIPNEAREST = 16;
export const D3DPTFILTERCAPS_LINEARMIPLINEAR = 32;
export const D3DPTFILTERCAPS_MINFPOINT = 256;
export const D3DPTFILTERCAPS_MINFLINEAR = 512;
export const D3DPTFILTERCAPS_MINFANISOTROPIC = 1024;
export const D3DPTFILTERCAPS_MIPFPOINT = 65536;
export const D3DPTFILTERCAPS_MIPFLINEAR = 131072;
export const D3DPTFILTERCAPS_MAGFPOINT = 16777216;
export const D3DPTFILTERCAPS_MAGFLINEAR = 33554432;
export const D3DPTFILTERCAPS_MAGFANISOTROPIC = 67108864;
export const D3DPTFILTERCAPS_MAGFAFLATCUBIC = 134217728;
export const D3DPTFILTERCAPS_MAGFGAUSSIANCUBIC = 268435456;
export const D3DPTBLENDCAPS_DECAL = 1;
export const D3DPTBLENDCAPS_MODULATE = 2;
export const D3DPTBLENDCAPS_DECALALPHA = 4;
export const D3DPTBLENDCAPS_MODULATEALPHA = 8;
export const D3DPTBLENDCAPS_DECALMASK = 16;
export const D3DPTBLENDCAPS_MODULATEMASK = 32;
export const D3DPTBLENDCAPS_COPY = 64;
export const D3DPTBLENDCAPS_ADD = 128;
export const D3DPTADDRESSCAPS_WRAP = 1;
export const D3DPTADDRESSCAPS_MIRROR = 2;
export const D3DPTADDRESSCAPS_CLAMP = 4;
export const D3DPTADDRESSCAPS_BORDER = 8;
export const D3DPTADDRESSCAPS_INDEPENDENTUV = 16;
export const D3DSTENCILCAPS_KEEP = 1;
export const D3DSTENCILCAPS_ZERO = 2;
export const D3DSTENCILCAPS_REPLACE = 4;
export const D3DSTENCILCAPS_INCRSAT = 8;
export const D3DSTENCILCAPS_DECRSAT = 16;
export const D3DSTENCILCAPS_INVERT = 32;
export const D3DSTENCILCAPS_INCR = 64;
export const D3DSTENCILCAPS_DECR = 128;
export const D3DTEXOPCAPS_DISABLE = 1;
export const D3DTEXOPCAPS_SELECTARG1 = 2;
export const D3DTEXOPCAPS_SELECTARG2 = 4;
export const D3DTEXOPCAPS_MODULATE = 8;
export const D3DTEXOPCAPS_MODULATE2X = 16;
export const D3DTEXOPCAPS_MODULATE4X = 32;
export const D3DTEXOPCAPS_ADD = 64;
export const D3DTEXOPCAPS_ADDSIGNED = 128;
export const D3DTEXOPCAPS_ADDSIGNED2X = 256;
export const D3DTEXOPCAPS_SUBTRACT = 512;
export const D3DTEXOPCAPS_ADDSMOOTH = 1024;
export const D3DTEXOPCAPS_BLENDDIFFUSEALPHA = 2048;
export const D3DTEXOPCAPS_BLENDTEXTUREALPHA = 4096;
export const D3DTEXOPCAPS_BLENDFACTORALPHA = 8192;
export const D3DTEXOPCAPS_BLENDTEXTUREALPHAPM = 16384;
export const D3DTEXOPCAPS_BLENDCURRENTALPHA = 32768;
export const D3DTEXOPCAPS_PREMODULATE = 65536;
export const D3DTEXOPCAPS_MODULATEALPHA_ADDCOLOR = 131072;
export const D3DTEXOPCAPS_MODULATECOLOR_ADDALPHA = 262144;
export const D3DTEXOPCAPS_MODULATEINVALPHA_ADDCOLOR = 524288;
export const D3DTEXOPCAPS_MODULATEINVCOLOR_ADDALPHA = 1048576;
export const D3DTEXOPCAPS_BUMPENVMAP = 2097152;
export const D3DTEXOPCAPS_BUMPENVMAPLUMINANCE = 4194304;
export const D3DTEXOPCAPS_DOTPRODUCT3 = 8388608;
export const D3DFVFCAPS_TEXCOORDCOUNTMASK = 65535;
export const D3DFVFCAPS_DONOTSTRIPELEMENTS = 524288;
export const D3DDD_COLORMODEL = 1;
export const D3DDD_DEVCAPS = 2;
export const D3DDD_TRANSFORMCAPS = 4;
export const D3DDD_LIGHTINGCAPS = 8;
export const D3DDD_BCLIPPING = 16;
export const D3DDD_LINECAPS = 32;
export const D3DDD_TRICAPS = 64;
export const D3DDD_DEVICERENDERBITDEPTH = 128;
export const D3DDD_DEVICEZBUFFERBITDEPTH = 256;
export const D3DDD_MAXBUFFERSIZE = 512;
export const D3DDD_MAXVERTEXCOUNT = 1024;
export const D3DDEVCAPS_FLOATTLVERTEX = 1;
export const D3DDEVCAPS_SORTINCREASINGZ = 2;
export const D3DDEVCAPS_SORTDECREASINGZ = 4;
export const D3DDEVCAPS_SORTEXACT = 8;
export const D3DDEVCAPS_EXECUTESYSTEMMEMORY = 16;
export const D3DDEVCAPS_EXECUTEVIDEOMEMORY = 32;
export const D3DDEVCAPS_TLVERTEXSYSTEMMEMORY = 64;
export const D3DDEVCAPS_TLVERTEXVIDEOMEMORY = 128;
export const D3DDEVCAPS_TEXTURESYSTEMMEMORY = 256;
export const D3DDEVCAPS_TEXTUREVIDEOMEMORY = 512;
export const D3DDEVCAPS_DRAWPRIMTLVERTEX = 1024;
export const D3DDEVCAPS_CANRENDERAFTERFLIP = 2048;
export const D3DDEVCAPS_TEXTURENONLOCALVIDMEM = 4096;
export const D3DDEVCAPS_DRAWPRIMITIVES2 = 8192;
export const D3DDEVCAPS_SEPARATETEXTUREMEMORIES = 16384;
export const D3DDEVCAPS_DRAWPRIMITIVES2EX = 32768;
export const D3DDEVCAPS_HWTRANSFORMANDLIGHT = 65536;
export const D3DDEVCAPS_CANBLTSYSTONONLOCAL = 131072;
export const D3DDEVCAPS_HWRASTERIZATION = 524288;
export const D3DVTXPCAPS_TEXGEN = 1;
export const D3DVTXPCAPS_MATERIALSOURCE7 = 2;
export const D3DVTXPCAPS_VERTEXFOG = 4;
export const D3DVTXPCAPS_DIRECTIONALLIGHTS = 8;
export const D3DVTXPCAPS_POSITIONALLIGHTS = 16;
export const D3DVTXPCAPS_LOCALVIEWER = 32;
export const D3DFDS_COLORMODEL = 1;
export const D3DFDS_GUID = 2;
export const D3DFDS_HARDWARE = 4;
export const D3DFDS_TRIANGLES = 8;
export const D3DFDS_LINES = 16;
export const D3DFDS_MISCCAPS = 32;
export const D3DFDS_RASTERCAPS = 64;
export const D3DFDS_ZCMPCAPS = 128;
export const D3DFDS_ALPHACMPCAPS = 256;
export const D3DFDS_SRCBLENDCAPS = 512;
export const D3DFDS_DSTBLENDCAPS = 1024;
export const D3DFDS_SHADECAPS = 2048;
export const D3DFDS_TEXTURECAPS = 4096;
export const D3DFDS_TEXTUREFILTERCAPS = 8192;
export const D3DFDS_TEXTUREBLENDCAPS = 16384;
export const D3DFDS_TEXTUREADDRESSCAPS = 32768;
export const D3DDEB_BUFSIZE = 1;
export const D3DDEB_CAPS = 2;
export const D3DDEB_LPDATA = 4;
export const D3DDEBCAPS_SYSTEMMEMORY = 1;
export const D3DDEBCAPS_VIDEOMEMORY = 2;
export const D3DMAXUSERCLIPPLANES = 32;
export const D3DCLIPPLANE0 = 1;
export const D3DCLIPPLANE1 = 2;
export const D3DCLIPPLANE2 = 4;
export const D3DCLIPPLANE3 = 8;
export const D3DCLIPPLANE4 = 16;
export const D3DCLIPPLANE5 = 32;
export const D3DCLIP_LEFT = 1;
export const D3DCLIP_RIGHT = 2;
export const D3DCLIP_TOP = 4;
export const D3DCLIP_BOTTOM = 8;
export const D3DCLIP_FRONT = 16;
export const D3DCLIP_BACK = 32;
export const D3DCLIP_GEN0 = 64;
export const D3DCLIP_GEN1 = 128;
export const D3DCLIP_GEN2 = 256;
export const D3DCLIP_GEN3 = 512;
export const D3DCLIP_GEN4 = 1024;
export const D3DCLIP_GEN5 = 2048;
export const D3DSTATUS_CLIPUNIONLEFT = 1;
export const D3DSTATUS_CLIPUNIONRIGHT = 2;
export const D3DSTATUS_CLIPUNIONTOP = 4;
export const D3DSTATUS_CLIPUNIONBOTTOM = 8;
export const D3DSTATUS_CLIPUNIONFRONT = 16;
export const D3DSTATUS_CLIPUNIONBACK = 32;
export const D3DSTATUS_CLIPUNIONGEN0 = 64;
export const D3DSTATUS_CLIPUNIONGEN1 = 128;
export const D3DSTATUS_CLIPUNIONGEN2 = 256;
export const D3DSTATUS_CLIPUNIONGEN3 = 512;
export const D3DSTATUS_CLIPUNIONGEN4 = 1024;
export const D3DSTATUS_CLIPUNIONGEN5 = 2048;
export const D3DSTATUS_CLIPINTERSECTIONLEFT = 4096;
export const D3DSTATUS_CLIPINTERSECTIONRIGHT = 8192;
export const D3DSTATUS_CLIPINTERSECTIONTOP = 16384;
export const D3DSTATUS_CLIPINTERSECTIONBOTTOM = 32768;
export const D3DSTATUS_CLIPINTERSECTIONFRONT = 65536;
export const D3DSTATUS_CLIPINTERSECTIONBACK = 131072;
export const D3DSTATUS_CLIPINTERSECTIONGEN0 = 262144;
export const D3DSTATUS_CLIPINTERSECTIONGEN1 = 524288;
export const D3DSTATUS_CLIPINTERSECTIONGEN2 = 1048576;
export const D3DSTATUS_CLIPINTERSECTIONGEN3 = 2097152;
export const D3DSTATUS_CLIPINTERSECTIONGEN4 = 4194304;
export const D3DSTATUS_CLIPINTERSECTIONGEN5 = 8388608;
export const D3DSTATUS_ZNOTVISIBLE = 16777216;
export const D3DTRANSFORM_CLIPPED = 1;
export const D3DTRANSFORM_UNCLIPPED = 2;
export const D3DLIGHT_ACTIVE = 1;
export const D3DLIGHT_NO_SPECULAR = 2;
export const D3DCOLOR_MONO = 1;
export const D3DCOLOR_RGB = 2;
export const D3DCLEAR_TARGET = 1;
export const D3DCLEAR_ZBUFFER = 2;
export const D3DCLEAR_STENCIL = 4;
export const D3DSTATE_OVERRIDE_BIAS = 256;
export const D3DRENDERSTATE_WRAPBIAS = 128;
export const D3DWRAP_U = 1;
export const D3DWRAP_V = 2;
export const D3DWRAPCOORD_0 = 1;
export const D3DWRAPCOORD_1 = 2;
export const D3DWRAPCOORD_2 = 4;
export const D3DWRAPCOORD_3 = 8;
export const D3DPROCESSVERTICES_TRANSFORMLIGHT = 0;
export const D3DPROCESSVERTICES_TRANSFORM = 1;
export const D3DPROCESSVERTICES_COPY = 2;
export const D3DPROCESSVERTICES_OPMASK = 7;
export const D3DPROCESSVERTICES_UPDATEEXTENTS = 8;
export const D3DPROCESSVERTICES_NOCOLOR = 16;
export const D3DTSS_TCI_PASSTHRU = 0;
export const D3DTSS_TCI_CAMERASPACENORMAL = 65536;
export const D3DTSS_TCI_CAMERASPACEPOSITION = 131072;
export const D3DTSS_TCI_CAMERASPACEREFLECTIONVECTOR = 196608;
export const D3DTA_SELECTMASK = 15;
export const D3DTA_DIFFUSE = 0;
export const D3DTA_CURRENT = 1;
export const D3DTA_TEXTURE = 2;
export const D3DTA_TFACTOR = 3;
export const D3DTA_SPECULAR = 4;
export const D3DTA_COMPLEMENT = 16;
export const D3DTA_ALPHAREPLICATE = 32;
export const D3DTRIFLAG_START = 0;
export const D3DTRIFLAG_ODD = 30;
export const D3DTRIFLAG_EVEN = 31;
export const D3DTRIFLAG_EDGEENABLE1 = 256;
export const D3DTRIFLAG_EDGEENABLE2 = 512;
export const D3DTRIFLAG_EDGEENABLE3 = 1024;
export const D3DSETSTATUS_STATUS = 1;
export const D3DSETSTATUS_EXTENTS = 2;
export const D3DCLIPSTATUS_STATUS = 1;
export const D3DCLIPSTATUS_EXTENTS2 = 2;
export const D3DCLIPSTATUS_EXTENTS3 = 4;
export const D3DEXECUTE_CLIPPED = 1;
export const D3DEXECUTE_UNCLIPPED = 2;
export const D3DPAL_FREE = 0;
export const D3DPAL_READONLY = 64;
export const D3DPAL_RESERVED = 128;
export const D3DVBCAPS_SYSTEMMEMORY = 2048;
export const D3DVBCAPS_WRITEONLY = 65536;
export const D3DVBCAPS_OPTIMIZED = `-2147483648`;
export const D3DVBCAPS_DONOTCLIP = 1;
export const D3DVOP_LIGHT = 1024;
export const D3DVOP_TRANSFORM = 1;
export const D3DVOP_CLIP = 4;
export const D3DVOP_EXTENTS = 8;
export const D3DPV_DONOTCOPYDATA = 1;
export const D3DFVF_RESERVED0 = 1;
export const D3DFVF_POSITION_MASK = 14;
export const D3DFVF_XYZ = 2;
export const D3DFVF_XYZRHW = 4;
export const D3DFVF_XYZB1 = 6;
export const D3DFVF_XYZB2 = 8;
export const D3DFVF_XYZB3 = 10;
export const D3DFVF_XYZB4 = 12;
export const D3DFVF_XYZB5 = 14;
export const D3DFVF_NORMAL = 16;
export const D3DFVF_RESERVED1 = 32;
export const D3DFVF_DIFFUSE = 64;
export const D3DFVF_SPECULAR = 128;
export const D3DFVF_TEXCOUNT_MASK = 3840;
export const D3DFVF_TEXCOUNT_SHIFT = 8;
export const D3DFVF_TEX0 = 0;
export const D3DFVF_TEX1 = 256;
export const D3DFVF_TEX2 = 512;
export const D3DFVF_TEX3 = 768;
export const D3DFVF_TEX4 = 1024;
export const D3DFVF_TEX5 = 1280;
export const D3DFVF_TEX6 = 1536;
export const D3DFVF_TEX7 = 1792;
export const D3DFVF_TEX8 = 2048;
export const D3DFVF_RESERVED2 = 61440;
export const D3DDP_MAXTEXCOORD = 8;
export const D3DVIS_INSIDE_FRUSTUM = 0;
export const D3DVIS_INTERSECT_FRUSTUM = 1;
export const D3DVIS_OUTSIDE_FRUSTUM = 2;
export const D3DVIS_INSIDE_LEFT = 0;
export const D3DVIS_INTERSECT_LEFT = 4;
export const D3DVIS_OUTSIDE_LEFT = 8;
export const D3DVIS_INSIDE_RIGHT = 0;
export const D3DVIS_INTERSECT_RIGHT = 16;
export const D3DVIS_OUTSIDE_RIGHT = 32;
export const D3DVIS_INSIDE_TOP = 0;
export const D3DVIS_INTERSECT_TOP = 64;
export const D3DVIS_OUTSIDE_TOP = 128;
export const D3DVIS_INSIDE_BOTTOM = 0;
export const D3DVIS_INTERSECT_BOTTOM = 256;
export const D3DVIS_OUTSIDE_BOTTOM = 512;
export const D3DVIS_INSIDE_NEAR = 0;
export const D3DVIS_INTERSECT_NEAR = 1024;
export const D3DVIS_OUTSIDE_NEAR = 2048;
export const D3DVIS_INSIDE_FAR = 0;
export const D3DVIS_INTERSECT_FAR = 4096;
export const D3DVIS_OUTSIDE_FAR = 8192;
export const D3DVIS_MASK_FRUSTUM = 3;
export const D3DVIS_MASK_LEFT = 12;
export const D3DVIS_MASK_RIGHT = 48;
export const D3DVIS_MASK_TOP = 192;
export const D3DVIS_MASK_BOTTOM = 768;
export const D3DVIS_MASK_NEAR = 3072;
export const D3DVIS_MASK_FAR = 12288;
export const D3DDEVINFOID_TEXTUREMANAGER = 1;
export const D3DDEVINFOID_D3DTEXTUREMANAGER = 2;
export const D3DDEVINFOID_TEXTURING = 3;
export const D3DFVF_TEXTUREFORMAT2 = 0;
export const D3DFVF_TEXTUREFORMAT1 = 3;
export const D3DFVF_TEXTUREFORMAT3 = 1;
export const D3DFVF_TEXTUREFORMAT4 = 2;
export const ROT_COMPARE_MAX = 2048;
export const WDT_INPROC_CALL = 1215587415;
export const WDT_REMOTE_CALL = 1383359575;
export const WDT_INPROC64_CALL = 1349805143;
export const PROCESS_HEAP_REGION = 1;
export const PROCESS_HEAP_UNCOMMITTED_RANGE = 2;
export const PROCESS_HEAP_ENTRY_BUSY = 4;
export const PROCESS_HEAP_SEG_ALLOC = 8;
export const PROCESS_HEAP_ENTRY_MOVEABLE = 16;
export const PROCESS_HEAP_ENTRY_DDESHARE = 32;
export const LMEM_NOCOMPACT = 16;
export const LMEM_NODISCARD = 32;
export const LMEM_MODIFY = 128;
export const LMEM_DISCARDABLE = 3840;
export const LMEM_VALID_FLAGS = 3954;
export const LMEM_INVALID_HANDLE = 32768;
export const LMEM_DISCARDED = 16384;
export const LMEM_LOCKCOUNT = 255;
export const NUMA_NO_PREFERRED_NODE = 4294967295;
export const REDBOOK_DIGITAL_AUDIO_EXTRACTION_INFO_VERSION = 1;
export const FACILITY_MCA_ERROR_CODE = 5;
export const IO_ERR_INSUFFICIENT_RESOURCES = 288234794599579650n;
export const IO_ERR_DRIVER_ERROR = 288236993622835204n;
export const IO_ERR_SEEK_ERROR = 288238093134462982n;
export const IO_ERR_BAD_BLOCK = 288240292157718535n;
export const IO_ERR_TIMEOUT = 288242491180974089n;
export const IO_ERR_CONTROLLER_ERROR = 288246889227485195n;
export const IO_ERR_NOT_READY = 288247988739112975n;
export const IO_ERR_INVALID_REQUEST = 288251287273996304n;
export const IO_ERR_RESET = 288257884343762963n;
export const IO_ERR_BAD_FIRMWARE = 288258983855390745n;
export const IO_WRN_BAD_FIRMWARE = 288265579851415578n;
export const IO_WRITE_CACHE_ENABLED = 288266679363043360n;
export const IO_RECOVERED_VIA_ECC = 288267778874671137n;
export const IO_WRITE_CACHE_DISABLED = 288286470572343330n;
export const IO_WARNING_PAGING_FAILURE = 288287570083971123n;
export const IO_WRN_FAILURE_PREDICTED = 288291968130482228n;
export const IO_WARNING_ALLOCATION_FAILED = 288294167153737784n;
export const IO_WARNING_DUPLICATE_SIGNATURE = 288295266665365562n;
export const IO_WARNING_DUPLICATE_PATH = 288375531014193211n;
export const IO_WARNING_WRITE_FUA_PROBLEM = 288386526130471044n;
export const IO_WARNING_VOLUME_LOST_DISK_EXTENT = 288387625642098830n;
export const IO_WARNING_DEVICE_HAS_INTERNAL_DUMP = 288388725153726607n;
export const IO_WARNING_SOFT_THRESHOLD_REACHED = 288389824665354384n;
export const IO_WARNING_SOFT_THRESHOLD_REACHED_EX = 288390924176982161n;
export const IO_WARNING_SOFT_THRESHOLD_REACHED_EX_LUN_LUN = 288392023688609938n;
export const IO_WARNING_SOFT_THRESHOLD_REACHED_EX_LUN_POOL = 288393123200237715n;
export const IO_WARNING_SOFT_THRESHOLD_REACHED_EX_POOL_LUN = 288394222711865492n;
export const IO_WARNING_SOFT_THRESHOLD_REACHED_EX_POOL_POOL = 288395322223493269n;
export const IO_ERROR_DISK_RESOURCES_EXHAUSTED = 288396422808862870n;
export const IO_WARNING_DISK_CAPACITY_CHANGED = 288397521246748823n;
export const IO_WARNING_DISK_PROVISIONING_TYPE_CHANGED = 288398620758376600n;
export const IO_WARNING_IO_OPERATION_RETRIED = 288399720270004377n;
export const IO_ERROR_IO_HARDWARE_ERROR = 288400820855373978n;
export const IO_WARNING_COMPLETION_TIME = 288403018804887707n;
export const IO_WARNING_DISK_SURPRISE_REMOVED = 288404118316515485n;
export const IO_WARNING_REPEATED_DISK_GUID = 288405217828143262n;
export const IO_WARNING_DISK_FIRMWARE_UPDATED = 288408515289284767n;
export const IO_ERR_RETRY_SUCCEEDED = 288232592355098625n;
export const IO_DUMP_CREATION_SUCCESS = 288269975750443170n;
export const IO_FILE_QUOTA_THRESHOLD = 288271076335812644n;
export const IO_FILE_QUOTA_LIMIT = 288272175847440421n;
export const IO_FILE_QUOTA_STARTED = 288273275359068198n;
export const IO_FILE_QUOTA_SUCCEEDED = 288361236289290279n;
export const IO_INFO_THROTTLE_COMPLETE = 288376629452079223n;
export const IO_CDROM_EXCLUSIVE_LOCK = 288406316266029189n;
export const IO_WARNING_ADAPTER_FIRMWARE_UPDATED = 288274374870696096n;
export const IO_FILE_QUOTA_FAILED = 288285371060715560n;
export const IO_LOST_DELAYED_WRITE = 288288669595598898n;
export const IO_WARNING_INTERRUPT_STILL_PENDING = 288289769107226677n;
export const IO_DRIVER_CANCEL_TIMEOUT = 288293067642110006n;
export const IO_WARNING_LOG_FLUSH_FAILED = 288360137851404345n;
export const IO_WARNING_BUS_RESET = 288372232479309942n;
export const IO_WARNING_RESET = 288383227595587713n;
export const IO_LOST_DELAYED_WRITE_NETWORK_DISCONNECTED = 288384327107215499n;
export const IO_LOST_DELAYED_WRITE_NETWORK_SERVER_ERROR = 288385426618843276n;
export const IO_LOST_DELAYED_WRITE_NETWORK_LOCAL_DISK_ERROR = 288401919293259917n;
export const IO_WARNING_DUMP_DISABLED_DEVICE_GONE = 288233694014210204n;
export const IO_ERR_CONFIGURATION_ERROR = 288235894111207427n;
export const IO_ERR_PARITY = 288239192646090757n;
export const IO_ERR_OVERRUN_ERROR = 288241391669346312n;
export const IO_ERR_SEQUENCE = 288243590692601866n;
export const IO_ERR_INTERNAL_ERROR = 288244690204229644n;
export const IO_ERR_INCORRECT_IRQL = 288245789715857421n;
export const IO_ERR_INVALID_IOBASE = 288249088250740750n;
export const IO_ERR_VERSION = 288250187762368529n;
export const IO_ERR_LAYERED_FAILURE = 288252386785624082n;
export const IO_ERR_PROTOCOL = 288253486297251860n;
export const IO_ERR_MEMORY_CONFLICT_DETECTED = 288254585808879637n;
export const IO_ERR_PORT_CONFLICT_DETECTED = 288255685320507414n;
export const IO_ERR_DMA_CONFLICT_DETECTED = 288256784832135191n;
export const IO_ERR_IRQ_CONFLICT_DETECTED = 288260083367018520n;
export const IO_ERR_DMA_RESOURCE_CONFLICT = 288261182878646299n;
export const IO_ERR_INTERRUPT_RESOURCE_CONFLICT = 288262282390274076n;
export const IO_ERR_MEMORY_RESOURCE_CONFLICT = 288263381901901853n;
export const IO_ERR_PORT_RESOURCE_CONFLICT = 288264481413529630n;
export const IO_BAD_BLOCK_WITH_NAME = 288275476529807391n;
export const IO_FILE_SYSTEM_CORRUPT = 288276576041435177n;
export const IO_FILE_QUOTA_CORRUPT = 288277675553062954n;
export const IO_SYSTEM_SLEEP_FAILED = 288278775064690731n;
export const IO_DUMP_POINTER_FAILURE = 288279874576318508n;
export const IO_DUMP_DRIVER_LOAD_FAILURE = 288280974087946285n;
export const IO_DUMP_INITIALIZATION_FAILURE = 288282073599574062n;
export const IO_DUMP_DUMPFILE_CONFLICT = 288283173111201839n;
export const IO_DUMP_DIRECT_CONFIG_FAILED = 288284272622829616n;
export const IO_DUMP_PAGE_CONFIG_FAILED = 288349143808868401n;
export const IO_FILE_SYSTEM_CORRUPT_WITH_NAME = 288291969204224055n;
export const IO_ERR_THREAD_STUCK_IN_DEVICE_DRIVER = 288359039413518444n;
export const IO_ERR_PORT_TIMEOUT = 288407417925140597n;
export const IO_ERROR_DUMP_CREATION_ERROR = 288409616948396193n;
export const IO_DUMP_CALLBACK_EXCEPTION = 360411135893307555n;
export const MCA_INFO_CPU_THERMAL_THROTTLING_REMOVED = 360414432280772720n;
export const MCA_INFO_NO_MORE_CORRECTED_ERROR_LOGS = 360415531792400499n;
export const MCA_INFO_MEMORY_PAGE_MARKED_BAD = 360353959141245044n;
export const MCA_WARNING_CACHE = 360356159238242364n;
export const MCA_WARNING_TLB = 360358358261497918n;
export const MCA_WARNING_CPU_BUS = 360360557284753472n;
export const MCA_WARNING_REGISTER_FILE = 360362756308009026n;
export const MCA_WARNING_MAS = 360364955331264580n;
export const MCA_WARNING_MEM_UNKNOWN = 360367154354520134n;
export const MCA_WARNING_MEM_1_2 = 360369353377775688n;
export const MCA_WARNING_MEM_1_2_5 = 360371552401031242n;
export const MCA_WARNING_MEM_1_2_5_4 = 360373751424286796n;
export const MCA_WARNING_SYSTEM_EVENT = 360375950447542350n;
export const MCA_WARNING_PCI_BUS_PARITY = 360378149470797904n;
export const MCA_WARNING_PCI_BUS_PARITY_NO_INFO = 360380348494053458n;
export const MCA_WARNING_PCI_BUS_SERR = 360382547517309012n;
export const MCA_WARNING_PCI_BUS_SERR_NO_INFO = 360384746540564566n;
export const MCA_WARNING_PCI_BUS_MASTER_ABORT = 360386945563820120n;
export const MCA_WARNING_PCI_BUS_MASTER_ABORT_NO_INFO = 360389144587075674n;
export const MCA_WARNING_PCI_BUS_TIMEOUT = 360391343610331228n;
export const MCA_WARNING_PCI_BUS_TIMEOUT_NO_INFO = 360393542633586782n;
export const MCA_WARNING_PCI_BUS_UNKNOWN = 360395741656842336n;
export const MCA_WARNING_PCI_DEVICE = 360397940680097890n;
export const MCA_WARNING_SMBIOS = 360400139703353444n;
export const MCA_WARNING_PLATFORM_SPECIFIC = 360402338726608998n;
export const MCA_WARNING_UNKNOWN = 360404537749864552n;
export const MCA_WARNING_UNKNOWN_NO_CPU = 360407836284747882n;
export const MCA_WARNING_CMC_THRESHOLD_EXCEEDED = 360408935796375661n;
export const MCA_WARNING_CPE_THRESHOLD_EXCEEDED = 360410035308003438n;
export const MCA_WARNING_CPU_THERMAL_THROTTLED = 360412234331258991n;
export const MCA_WARNING_CPU = 360355059726614641n;
export const MCA_ERROR_CACHE = 360357259823611965n;
export const MCA_ERROR_TLB = 360359458846867519n;
export const MCA_ERROR_CPU_BUS = 360361657870123073n;
export const MCA_ERROR_REGISTER_FILE = 360363856893378627n;
export const MCA_ERROR_MAS = 360366055916634181n;
export const MCA_ERROR_MEM_UNKNOWN = 360368254939889735n;
export const MCA_ERROR_MEM_1_2 = 360370453963145289n;
export const MCA_ERROR_MEM_1_2_5 = 360372652986400843n;
export const MCA_ERROR_MEM_1_2_5_4 = 360374852009656397n;
export const MCA_ERROR_SYSTEM_EVENT = 360377051032911951n;
export const MCA_ERROR_PCI_BUS_PARITY = 360379250056167505n;
export const MCA_ERROR_PCI_BUS_PARITY_NO_INFO = 360381449079423059n;
export const MCA_ERROR_PCI_BUS_SERR = 360383648102678613n;
export const MCA_ERROR_PCI_BUS_SERR_NO_INFO = 360385847125934167n;
export const MCA_ERROR_PCI_BUS_MASTER_ABORT = 360388046149189721n;
export const MCA_ERROR_PCI_BUS_MASTER_ABORT_NO_INFO = 360390245172445275n;
export const MCA_ERROR_PCI_BUS_TIMEOUT = 360392444195700829n;
export const MCA_ERROR_PCI_BUS_TIMEOUT_NO_INFO = 360394643218956383n;
export const MCA_ERROR_PCI_BUS_UNKNOWN = 360396842242211937n;
export const MCA_ERROR_PCI_DEVICE = 360399041265467491n;
export const MCA_ERROR_SMBIOS = 360401240288723045n;
export const MCA_ERROR_PLATFORM_SPECIFIC = 360403439311978599n;
export const MCA_ERROR_UNKNOWN = 360405638335234153n;
export const MCA_ERROR_UNKNOWN_NO_CPU = 360413334916628587n;
export const MCA_ERROR_CPU = 360419931986395250n;
export const MCA_MEMORYHIERARCHY_ERROR = 360421031498023032n;
export const MCA_TLB_ERROR = 360422131009650809n;
export const MCA_BUS_ERROR = 360423230521278586n;
export const MCA_BUS_TIMEOUT_ERROR = 360424330032906363n;
export const MCA_INTERNALTIMER_ERROR = 360426529056161916n;
export const MCA_MICROCODE_ROM_PARITY_ERROR = 360427628567789694n;
export const MCA_EXTERNAL_ERROR = 360428728079417471n;
export const MCA_FRC_ERROR = 4035228585060270208n;
export const VOLMGR_KSR_ERROR = 4035227484478242817n;
export const VOLMGR_KSR_READ_ERROR = 4035226384966615042n;
export const VOLMGR_KSR_BYPASS = 12970368114389155843n;
export const AccessReasonNone = 0;
export const AccessReasonAllowedAce = 65536;
export const AccessReasonDeniedAce = 131072;
export const AccessReasonAllowedParentAce = 196608;
export const AccessReasonDeniedParentAce = 262144;
export const AccessReasonNotGrantedByCape = 327680;
export const AccessReasonNotGrantedByParentCape = 393216;
export const AccessReasonNotGrantedToAppContainer = 458752;
export const AccessReasonMissingPrivilege = 1048576;
export const AccessReasonFromPrivilege = 2097152;
export const AccessReasonIntegrityLevel = 3145728;
export const AccessReasonOwnership = 4194304;
export const AccessReasonNullDacl = 5242880;
export const AccessReasonEmptyDacl = 6291456;
export const AccessReasonNoSD = 7340032;
export const AccessReasonNoGrant = 8388608;
export const AccessReasonTrustLabel = 9437184;
export const AccessReasonFilterAce = 10485760;
export const SeImageSignatureNone = 0;
export const SeImageSignatureEmbedded = 1;
export const SeImageSignatureCache = 2;
export const SeImageSignatureCatalogCached = 3;
export const SeImageSignatureCatalogNotCached = 4;
export const SeImageSignatureCatalogHint = 5;
export const SeImageSignaturePackageCatalog = 6;
export const SeImageSignaturePplMitigated = 7;
export const SeLearningModeInvalidType = 0;
export const SeLearningModeSettings = 1;
export const SeLearningModeMax = 2;
export const JOB_OBJECT_IO_RATE_CONTROL_ENABLE = 1;
export const JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME = 2;
export const JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL = 4;
export const JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP = 8;
export const JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS = 15;
export const SERVERSILO_INITING = 0;
export const SERVERSILO_STARTED = 1;
export const SERVERSILO_SHUTTING_DOWN = 2;
export const SERVERSILO_TERMINATING = 3;
export const SERVERSILO_TERMINATED = 4;
export const MemDedicatedAttributeReadBandwidth = 0;
export const MemDedicatedAttributeReadLatency = 1;
export const MemDedicatedAttributeWriteBandwidth = 2;
export const MemDedicatedAttributeWriteLatency = 3;
export const MemDedicatedAttributeMax = 4;
export const MemSectionExtendedParameterInvalidType = 0;
export const MemSectionExtendedParameterUserPhysicalFlags = 1;
export const MemSectionExtendedParameterNumaNode = 2;
export const MemSectionExtendedParameterSigningLevel = 3;
export const MemSectionExtendedParameterMax = 4;
export const SharedVirtualDisksUnsupported = 0;
export const SharedVirtualDisksSupported = 1;
export const SharedVirtualDiskSnapshotsSupported = 3;
export const SharedVirtualDiskCDPSnapshotsSupported = 7;
export const SharedVirtualDiskHandleStateNone = 0;
export const SharedVirtualDiskHandleStateFileShared = 1;
export const SharedVirtualDiskHandleStateHandleShared = 3;
export const PowerMonitorOff = 0;
export const PowerMonitorOn = 1;
export const PowerMonitorDim = 2;
export const PowerUserPresent = 0;
export const PowerUserNotPresent = 1;
export const PowerUserInactive = 2;
export const PowerUserMaximum = 3;
export const PowerUserInvalid = 3;
export const UserNotPresent = 0;
export const UserPresent = 1;
export const UserUnknown = 255;
export const MonitorRequestReasonUnknown = 0;
export const MonitorRequestReasonPowerButton = 1;
export const MonitorRequestReasonRemoteConnection = 2;
export const MonitorRequestReasonScMonitorpower = 3;
export const MonitorRequestReasonUserInput = 4;
export const MonitorRequestReasonAcDcDisplayBurst = 5;
export const MonitorRequestReasonUserDisplayBurst = 6;
export const MonitorRequestReasonPoSetSystemState = 7;
export const MonitorRequestReasonSetThreadExecutionState = 8;
export const MonitorRequestReasonFullWake = 9;
export const MonitorRequestReasonSessionUnlock = 10;
export const MonitorRequestReasonScreenOffRequest = 11;
export const MonitorRequestReasonIdleTimeout = 12;
export const MonitorRequestReasonPolicyChange = 13;
export const MonitorRequestReasonSleepButton = 14;
export const MonitorRequestReasonLid = 15;
export const MonitorRequestReasonBatteryCountChange = 16;
export const MonitorRequestReasonGracePeriod = 17;
export const MonitorRequestReasonPnP = 18;
export const MonitorRequestReasonDP = 19;
export const MonitorRequestReasonSxTransition = 20;
export const MonitorRequestReasonSystemIdle = 21;
export const MonitorRequestReasonNearProximity = 22;
export const MonitorRequestReasonThermalStandby = 23;
export const MonitorRequestReasonResumePdc = 24;
export const MonitorRequestReasonResumeS4 = 25;
export const MonitorRequestReasonTerminal = 26;
export const MonitorRequestReasonPdcSignal = 27;
export const MonitorRequestReasonAcDcDisplayBurstSuppressed = 28;
export const MonitorRequestReasonSystemStateEntered = 29;
export const MonitorRequestReasonWinrt = 30;
export const MonitorRequestReasonUserInputKeyboard = 31;
export const MonitorRequestReasonUserInputMouse = 32;
export const MonitorRequestReasonUserInputTouchpad = 33;
export const MonitorRequestReasonUserInputPen = 34;
export const MonitorRequestReasonUserInputAccelerometer = 35;
export const MonitorRequestReasonUserInputHid = 36;
export const MonitorRequestReasonUserInputPoUserPresent = 37;
export const MonitorRequestReasonUserInputSessionSwitch = 38;
export const MonitorRequestReasonUserInputInitialization = 39;
export const MonitorRequestReasonPdcSignalWindowsMobilePwrNotif = 40;
export const MonitorRequestReasonPdcSignalWindowsMobileShell = 41;
export const MonitorRequestReasonPdcSignalHeyCortana = 42;
export const MonitorRequestReasonPdcSignalHolographicShell = 43;
export const MonitorRequestReasonPdcSignalFingerprint = 44;
export const MonitorRequestReasonDirectedDrips = 45;
export const MonitorRequestReasonDim = 46;
export const MonitorRequestReasonBuiltinPanel = 47;
export const MonitorRequestReasonDisplayRequiredUnDim = 48;
export const MonitorRequestReasonBatteryCountChangeSuppressed = 49;
export const MonitorRequestReasonResumeModernStandby = 50;
export const MonitorRequestReasonTerminalInit = 51;
export const MonitorRequestReasonPdcSignalSensorsHumanPresence = 52;
export const MonitorRequestReasonBatteryPreCritical = 53;
export const MonitorRequestReasonUserInputTouch = 54;
export const MonitorRequestReasonMax = 55;
export const MonitorRequestTypeOff = 0;
export const MonitorRequestTypeOnAndPresent = 1;
export const MonitorRequestTypeToggleOn = 2;
export const ALTITUDE_GROUP_POLICY = 0;
export const ALTITUDE_USER = 1;
export const ALTITUDE_RUNTIME_OVERRIDE = 2;
export const ALTITUDE_PROVISIONING = 3;
export const ALTITUDE_OEM_CUSTOMIZATION = 4;
export const ALTITUDE_INTERNAL_OVERRIDE = 5;
export const ALTITUDE_OS_DEFAULT = 6;
export const HiberFileBucket1GB = 0;
export const HiberFileBucket2GB = 1;
export const HiberFileBucket4GB = 2;
export const HiberFileBucket8GB = 3;
export const HiberFileBucket16GB = 4;
export const HiberFileBucket32GB = 5;
export const HiberFileBucketUnlimited = 6;
export const HiberFileBucketMax = 7;
export const IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1;
export const PdataRefToFullXdata = 0;
export const PdataPackedUnwindFunction = 1;
export const PdataPackedUnwindFragment = 2;
export const PdataCrUnchained = 0;
export const PdataCrUnchainedSavedLr = 1;
export const PdataCrChainedWithPac = 2;
export const PdataCrChained = 3;
export const IMPORT_OBJECT_CODE = 0;
export const IMPORT_OBJECT_DATA = 1;
export const IMPORT_OBJECT_CONST = 2;
export const IMPORT_OBJECT_ORDINAL = 0;
export const IMPORT_OBJECT_NAME = 1;
export const IMPORT_OBJECT_NAME_NO_PREFIX = 2;
export const IMPORT_OBJECT_NAME_UNDECORATE = 3;
export const IMPORT_OBJECT_NAME_EXPORTAS = 4;
export const COMIMAGE_FLAGS_ILONLY = 1;
export const COMIMAGE_FLAGS_32BITREQUIRED = 2;
export const COMIMAGE_FLAGS_IL_LIBRARY = 4;
export const COMIMAGE_FLAGS_STRONGNAMESIGNED = 8;
export const COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = 16;
export const COMIMAGE_FLAGS_TRACKDEBUGDATA = 65536;
export const COMIMAGE_FLAGS_32BITPREFERRED = 131072;
export const COR_VERSION_MAJOR_V2 = 2;
export const COR_VERSION_MAJOR = 2;
export const COR_VERSION_MINOR = 5;
export const COR_DELETED_NAME_LENGTH = 8;
export const COR_VTABLEGAP_NAME_LENGTH = 8;
export const NATIVE_TYPE_MAX_CB = 1;
export const COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 255;
export const IMAGE_COR_MIH_METHODRVA = 1;
export const IMAGE_COR_MIH_EHRVA = 2;
export const IMAGE_COR_MIH_BASICBLOCK = 8;
export const COR_VTABLE_32BIT = 1;
export const COR_VTABLE_64BIT = 2;
export const COR_VTABLE_FROM_UNMANAGED = 4;
export const COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 8;
export const COR_VTABLE_CALL_MOST_DERIVED = 16;
export const IMAGE_COR_EATJ_THUNK_SIZE = 32;
export const MAX_CLASS_NAME = 1024;
export const MAX_PACKAGE_NAME = 1024;
export const UmsSchedulerStartup = 0;
export const UmsSchedulerThreadBlocked = 1;
export const UmsSchedulerThreadYield = 2;
export const ImagePolicyEntryTypeNone = 0;
export const ImagePolicyEntryTypeBool = 1;
export const ImagePolicyEntryTypeInt8 = 2;
export const ImagePolicyEntryTypeUInt8 = 3;
export const ImagePolicyEntryTypeInt16 = 4;
export const ImagePolicyEntryTypeUInt16 = 5;
export const ImagePolicyEntryTypeInt32 = 6;
export const ImagePolicyEntryTypeUInt32 = 7;
export const ImagePolicyEntryTypeInt64 = 8;
export const ImagePolicyEntryTypeUInt64 = 9;
export const ImagePolicyEntryTypeAnsiString = 10;
export const ImagePolicyEntryTypeUnicodeString = 11;
export const ImagePolicyEntryTypeOverride = 12;
export const ImagePolicyEntryTypeMaximum = 13;
export const ImagePolicyIdNone = 0;
export const ImagePolicyIdEtw = 1;
export const ImagePolicyIdDebug = 2;
export const ImagePolicyIdCrashDump = 3;
export const ImagePolicyIdCrashDumpKey = 4;
export const ImagePolicyIdCrashDumpKeyGuid = 5;
export const ImagePolicyIdParentSd = 6;
export const ImagePolicyIdParentSdRev = 7;
export const ImagePolicyIdSvn = 8;
export const ImagePolicyIdDeviceId = 9;
export const ImagePolicyIdCapability = 10;
export const ImagePolicyIdScenarioId = 11;
export const ImagePolicyIdMaximum = 12;
export const SLE_ERROR = 1;
export const SLE_MINORERROR = 2;
export const SLE_WARNING = 3;
export const ActivationContextBasicInformation = 1;
export const ActivationContextDetailedInformation = 2;
export const AssemblyDetailedInformationInActivationContext = 3;
export const FileInformationInAssemblyOfAssemblyInActivationContext = 4;
export const RunlevelInformationInActivationContext = 5;
export const CompatibilityInformationInActivationContext = 6;
export const ActivationContextManifestResourceName = 7;
export const MaxActivationContextInfoClass = 8;
export const AssemblyDetailedInformationInActivationContxt = 3;
export const FileInformationInAssemblyOfAssemblyInActivationContxt = 4;
export const DriverType = 1;
export const FileSystemType = 2;
export const Win32ServiceOwnProcess = 16;
export const Win32ServiceShareProcess = 32;
export const AdapterType = 4;
export const RecognizerType = 8;
export const BootLoad = 0;
export const SystemLoad = 1;
export const AutoLoad = 2;
export const DemandLoad = 3;
export const DisableLoad = 4;
export const IgnoreError = 0;
export const NormalError = 1;
export const SevereError = 2;
export const CriticalError = 3;
export const TapeDriveProblemNone = 0;
export const TapeDriveReadWriteWarning = 1;
export const TapeDriveReadWriteError = 2;
export const TapeDriveReadWarning = 3;
export const TapeDriveWriteWarning = 4;
export const TapeDriveReadError = 5;
export const TapeDriveWriteError = 6;
export const TapeDriveHardwareError = 7;
export const TapeDriveUnsupportedMedia = 8;
export const TapeDriveScsiConnectionError = 9;
export const TapeDriveTimetoClean = 10;
export const TapeDriveCleanDriveNow = 11;
export const TapeDriveMediaLifeExpired = 12;
export const TapeDriveSnappedTape = 13;
export const TransactionStateNormal = 1;
export const TransactionStateIndoubt = 2;
export const TransactionStateCommittedNotify = 3;
export const TransactionBasicInformation = 0;
export const TransactionPropertiesInformation = 1;
export const TransactionEnlistmentInformation = 2;
export const TransactionSuperiorEnlistmentInformation = 3;
export const TransactionBindInformation = 4;
export const TransactionDTCPrivateInformation = 5;
export const TransactionManagerBasicInformation = 0;
export const TransactionManagerLogInformation = 1;
export const TransactionManagerLogPathInformation = 2;
export const TransactionManagerRecoveryInformation = 4;
export const TransactionManagerOnlineProbeInformation = 3;
export const TransactionManagerOldestTransactionInformation = 5;
export const ResourceManagerBasicInformation = 0;
export const ResourceManagerCompletionInformation = 1;
export const EnlistmentBasicInformation = 0;
export const EnlistmentRecoveryInformation = 1;
export const EnlistmentCrmInformation = 2;
export const KTMOBJECT_TRANSACTION = 0;
export const KTMOBJECT_TRANSACTION_MANAGER = 1;
export const KTMOBJECT_RESOURCE_MANAGER = 2;
export const KTMOBJECT_ENLISTMENT = 3;
export const KTMOBJECT_INVALID = 4;

// Structs

/**
 * Windows.Win32.System.SystemServices.RemHGLOBAL (size: 16)
 */
export interface RemHGLOBAL {
  /** i32 */
  fNullHGlobal: number;
  /** u32 */
  cbData: number;
  /** array */
  data: Deno.PointerValue | null;
}

export const sizeofRemHGLOBAL = 16;

export function allocRemHGLOBAL(data?: Partial<RemHGLOBAL>): Uint8Array {
  const buf = new Uint8Array(sizeofRemHGLOBAL);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fNullHGlobal !== undefined) view.setInt32(0, Number(data.fNullHGlobal), true);
  // 0x04: u32
  if (data?.cbData !== undefined) view.setUint32(4, Number(data.cbData), true);
  // 0x08: pointer
  if (data?.data !== undefined) view.setBigUint64(8, data.data === null ? 0n : BigInt(util.toPointer(data.data)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.RemHMETAFILEPICT (size: 24)
 */
export interface RemHMETAFILEPICT {
  /** i32 */
  mm: number;
  /** i32 */
  xExt: number;
  /** i32 */
  yExt: number;
  /** u32 */
  cbData: number;
  /** array */
  data: Deno.PointerValue | null;
}

export const sizeofRemHMETAFILEPICT = 24;

export function allocRemHMETAFILEPICT(data?: Partial<RemHMETAFILEPICT>): Uint8Array {
  const buf = new Uint8Array(sizeofRemHMETAFILEPICT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.mm !== undefined) view.setInt32(0, Number(data.mm), true);
  // 0x04: i32
  if (data?.xExt !== undefined) view.setInt32(4, Number(data.xExt), true);
  // 0x08: i32
  if (data?.yExt !== undefined) view.setInt32(8, Number(data.yExt), true);
  // 0x0c: u32
  if (data?.cbData !== undefined) view.setUint32(12, Number(data.cbData), true);
  // 0x10: pointer
  if (data?.data !== undefined) view.setBigUint64(16, data.data === null ? 0n : BigInt(util.toPointer(data.data)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.RemHENHMETAFILE (size: 16)
 */
export interface RemHENHMETAFILE {
  /** u32 */
  cbData: number;
  /** array */
  data: Deno.PointerValue | null;
}

export const sizeofRemHENHMETAFILE = 16;

export function allocRemHENHMETAFILE(data?: Partial<RemHENHMETAFILE>): Uint8Array {
  const buf = new Uint8Array(sizeofRemHENHMETAFILE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbData !== undefined) view.setUint32(0, Number(data.cbData), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.data !== undefined) view.setBigUint64(8, data.data === null ? 0n : BigInt(util.toPointer(data.data)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.RemHBITMAP (size: 16)
 */
export interface RemHBITMAP {
  /** u32 */
  cbData: number;
  /** array */
  data: Deno.PointerValue | null;
}

export const sizeofRemHBITMAP = 16;

export function allocRemHBITMAP(data?: Partial<RemHBITMAP>): Uint8Array {
  const buf = new Uint8Array(sizeofRemHBITMAP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbData !== undefined) view.setUint32(0, Number(data.cbData), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.data !== undefined) view.setBigUint64(8, data.data === null ? 0n : BigInt(util.toPointer(data.data)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.RemHPALETTE (size: 16)
 */
export interface RemHPALETTE {
  /** u32 */
  cbData: number;
  /** array */
  data: Deno.PointerValue | null;
}

export const sizeofRemHPALETTE = 16;

export function allocRemHPALETTE(data?: Partial<RemHPALETTE>): Uint8Array {
  const buf = new Uint8Array(sizeofRemHPALETTE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbData !== undefined) view.setUint32(0, Number(data.cbData), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.data !== undefined) view.setBigUint64(8, data.data === null ? 0n : BigInt(util.toPointer(data.data)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.RemHBRUSH (size: 16)
 */
export interface RemHBRUSH {
  /** u32 */
  cbData: number;
  /** array */
  data: Deno.PointerValue | null;
}

export const sizeofRemHBRUSH = 16;

export function allocRemHBRUSH(data?: Partial<RemHBRUSH>): Uint8Array {
  const buf = new Uint8Array(sizeofRemHBRUSH);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbData !== undefined) view.setUint32(0, Number(data.cbData), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.data !== undefined) view.setBigUint64(8, data.data === null ? 0n : BigInt(util.toPointer(data.data)), true);
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null | Uint8Array | Uint16Array;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.userCLIPFORMAT (size: 16)
 */
export interface userCLIPFORMAT {
  /** i32 */
  fContext: number;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUserCLIPFORMAT = 16;

export function allocUserCLIPFORMAT(data?: Partial<userCLIPFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofUserCLIPFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fContext !== undefined) view.setInt32(0, Number(data.fContext), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.GDI_NONREMOTE (size: 16)
 */
export interface GDI_NONREMOTE {
  /** i32 */
  fContext: number;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
}

export const sizeofGDI_NONREMOTE = 16;

export function allocGDI_NONREMOTE(data?: Partial<GDI_NONREMOTE>): Uint8Array {
  const buf = new Uint8Array(sizeofGDI_NONREMOTE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fContext !== undefined) view.setInt32(0, Number(data.fContext), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.userHGLOBAL (size: 16)
 */
export interface userHGLOBAL {
  /** i32 */
  fContext: number;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUserHGLOBAL = 16;

export function allocUserHGLOBAL(data?: Partial<userHGLOBAL>): Uint8Array {
  const buf = new Uint8Array(sizeofUserHGLOBAL);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fContext !== undefined) view.setInt32(0, Number(data.fContext), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.userHMETAFILE (size: 16)
 */
export interface userHMETAFILE {
  /** i32 */
  fContext: number;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUserHMETAFILE = 16;

export function allocUserHMETAFILE(data?: Partial<userHMETAFILE>): Uint8Array {
  const buf = new Uint8Array(sizeofUserHMETAFILE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fContext !== undefined) view.setInt32(0, Number(data.fContext), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.remoteMETAFILEPICT (size: 24)
 */
export interface remoteMETAFILEPICT {
  /** i32 */
  mm: number;
  /** i32 */
  xExt: number;
  /** i32 */
  yExt: number;
  /** ptr */
  hMF: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRemoteMETAFILEPICT = 24;

export function allocRemoteMETAFILEPICT(data?: Partial<remoteMETAFILEPICT>): Uint8Array {
  const buf = new Uint8Array(sizeofRemoteMETAFILEPICT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.mm !== undefined) view.setInt32(0, Number(data.mm), true);
  // 0x04: i32
  if (data?.xExt !== undefined) view.setInt32(4, Number(data.xExt), true);
  // 0x08: i32
  if (data?.yExt !== undefined) view.setInt32(8, Number(data.yExt), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.hMF !== undefined) view.setBigUint64(16, data.hMF === null ? 0n : BigInt(util.toPointer(data.hMF)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.userHMETAFILEPICT (size: 16)
 */
export interface userHMETAFILEPICT {
  /** i32 */
  fContext: number;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUserHMETAFILEPICT = 16;

export function allocUserHMETAFILEPICT(data?: Partial<userHMETAFILEPICT>): Uint8Array {
  const buf = new Uint8Array(sizeofUserHMETAFILEPICT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fContext !== undefined) view.setInt32(0, Number(data.fContext), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.userHENHMETAFILE (size: 16)
 */
export interface userHENHMETAFILE {
  /** i32 */
  fContext: number;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUserHENHMETAFILE = 16;

export function allocUserHENHMETAFILE(data?: Partial<userHENHMETAFILE>): Uint8Array {
  const buf = new Uint8Array(sizeofUserHENHMETAFILE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fContext !== undefined) view.setInt32(0, Number(data.fContext), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.userBITMAP (size: 32)
 */
export interface userBITMAP {
  /** i32 */
  bmType: number;
  /** i32 */
  bmWidth: number;
  /** i32 */
  bmHeight: number;
  /** i32 */
  bmWidthBytes: number;
  /** u16 */
  bmPlanes: number;
  /** u16 */
  bmBitsPixel: number;
  /** u32 */
  cbSize: number;
  /** array */
  pBuffer: Deno.PointerValue | null;
}

export const sizeofUserBITMAP = 32;

export function allocUserBITMAP(data?: Partial<userBITMAP>): Uint8Array {
  const buf = new Uint8Array(sizeofUserBITMAP);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.bmType !== undefined) view.setInt32(0, Number(data.bmType), true);
  // 0x04: i32
  if (data?.bmWidth !== undefined) view.setInt32(4, Number(data.bmWidth), true);
  // 0x08: i32
  if (data?.bmHeight !== undefined) view.setInt32(8, Number(data.bmHeight), true);
  // 0x0c: i32
  if (data?.bmWidthBytes !== undefined) view.setInt32(12, Number(data.bmWidthBytes), true);
  // 0x10: u16
  if (data?.bmPlanes !== undefined) view.setUint16(16, Number(data.bmPlanes), true);
  // 0x12: u16
  if (data?.bmBitsPixel !== undefined) view.setUint16(18, Number(data.bmBitsPixel), true);
  // 0x14: u32
  if (data?.cbSize !== undefined) view.setUint32(20, Number(data.cbSize), true);
  // 0x18: pointer
  if (data?.pBuffer !== undefined) view.setBigUint64(24, data.pBuffer === null ? 0n : BigInt(util.toPointer(data.pBuffer)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.userHBITMAP (size: 16)
 */
export interface userHBITMAP {
  /** i32 */
  fContext: number;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUserHBITMAP = 16;

export function allocUserHBITMAP(data?: Partial<userHBITMAP>): Uint8Array {
  const buf = new Uint8Array(sizeofUserHBITMAP);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fContext !== undefined) view.setInt32(0, Number(data.fContext), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.userHPALETTE (size: 16)
 */
export interface userHPALETTE {
  /** i32 */
  fContext: number;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUserHPALETTE = 16;

export function allocUserHPALETTE(data?: Partial<userHPALETTE>): Uint8Array {
  const buf = new Uint8Array(sizeofUserHPALETTE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fContext !== undefined) view.setInt32(0, Number(data.fContext), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.RemotableHandle (size: 16)
 */
export interface RemotableHandle {
  /** i32 */
  fContext: number;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRemotableHandle = 16;

export function allocRemotableHandle(data?: Partial<RemotableHandle>): Uint8Array {
  const buf = new Uint8Array(sizeofRemotableHandle);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fContext !== undefined) view.setInt32(0, Number(data.fContext), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.DEVICE_EVENT_MOUNT (size: 16)
 */
export interface DEVICE_EVENT_MOUNT {
  /** u32 */
  Version: number;
  /** u32 */
  Flags: number;
  /** u32 */
  FileSystemNameLength: number;
  /** u32 */
  FileSystemNameOffset: number;
}

export const sizeofDEVICE_EVENT_MOUNT = 16;

export function allocDEVICE_EVENT_MOUNT(data?: Partial<DEVICE_EVENT_MOUNT>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_EVENT_MOUNT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.FileSystemNameLength !== undefined) view.setUint32(8, Number(data.FileSystemNameLength), true);
  // 0x0c: u32
  if (data?.FileSystemNameOffset !== undefined) view.setUint32(12, Number(data.FileSystemNameOffset), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.DEVICE_EVENT_BECOMING_READY (size: 16)
 */
export interface DEVICE_EVENT_BECOMING_READY {
  /** u32 */
  Version: number;
  /** u32 */
  Reason: number;
  /** u32 */
  Estimated100msToReady: number;
}

export const sizeofDEVICE_EVENT_BECOMING_READY = 16;

export function allocDEVICE_EVENT_BECOMING_READY(data?: Partial<DEVICE_EVENT_BECOMING_READY>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_EVENT_BECOMING_READY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Reason !== undefined) view.setUint32(4, Number(data.Reason), true);
  // 0x08: u32
  if (data?.Estimated100msToReady !== undefined) view.setUint32(8, Number(data.Estimated100msToReady), true);
  // 0x0c: pad4
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.LARGE_INTEGER (size: 24)
 */
export interface LARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  QuadPart: Deno.PointerValue;
}

export const sizeofLARGE_INTEGER = 24;

export function allocLARGE_INTEGER(data?: Partial<LARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofLARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  // 0x10: i64
  if (data?.QuadPart !== undefined) view.setBigInt64(16, BigInt(data.QuadPart), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.DEVICE_EVENT_EXTERNAL_REQUEST (size: 24)
 */
export interface DEVICE_EVENT_EXTERNAL_REQUEST {
  /** u32 */
  Version: number;
  /** u32 */
  DeviceClass: number;
  /** u16 */
  ButtonStatus: number;
  /** u16 */
  Request: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  SystemTime: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDEVICE_EVENT_EXTERNAL_REQUEST = 24;

export function allocDEVICE_EVENT_EXTERNAL_REQUEST(data?: Partial<DEVICE_EVENT_EXTERNAL_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_EVENT_EXTERNAL_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.DeviceClass !== undefined) view.setUint32(4, Number(data.DeviceClass), true);
  // 0x08: u16
  if (data?.ButtonStatus !== undefined) view.setUint16(8, Number(data.ButtonStatus), true);
  // 0x0a: u16
  if (data?.Request !== undefined) view.setUint16(10, Number(data.Request), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.SystemTime !== undefined) view.setBigUint64(16, data.SystemTime === null ? 0n : BigInt(util.toPointer(data.SystemTime)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.DEVICE_EVENT_GENERIC_DATA (size: 8)
 */
export interface DEVICE_EVENT_GENERIC_DATA {
  /** u32 */
  EventNumber: number;
}

export const sizeofDEVICE_EVENT_GENERIC_DATA = 8;

export function allocDEVICE_EVENT_GENERIC_DATA(data?: Partial<DEVICE_EVENT_GENERIC_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_EVENT_GENERIC_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.EventNumber !== undefined) view.setUint32(0, Number(data.EventNumber), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.DEVICE_EVENT_RBC_DATA (size: 16)
 */
export interface DEVICE_EVENT_RBC_DATA {
  /** u32 */
  EventNumber: number;
  /** u8 */
  SenseQualifier: number;
  /** u8 */
  SenseCode: number;
  /** u8 */
  SenseKey: number;
  /** u8 */
  Reserved: number;
  /** u32 */
  Information: number;
}

export const sizeofDEVICE_EVENT_RBC_DATA = 16;

export function allocDEVICE_EVENT_RBC_DATA(data?: Partial<DEVICE_EVENT_RBC_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_EVENT_RBC_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.EventNumber !== undefined) view.setUint32(0, Number(data.EventNumber), true);
  // 0x04: u8
  if (data?.SenseQualifier !== undefined) view.setUint8(4, Number(data.SenseQualifier));
  // 0x05: u8
  if (data?.SenseCode !== undefined) view.setUint8(5, Number(data.SenseCode));
  // 0x06: u8
  if (data?.SenseKey !== undefined) view.setUint8(6, Number(data.SenseKey));
  // 0x07: u8
  if (data?.Reserved !== undefined) view.setUint8(7, Number(data.Reserved));
  // 0x08: u32
  if (data?.Information !== undefined) view.setUint32(8, Number(data.Information), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.GUID_IO_DISK_CLONE_ARRIVAL_INFORMATION (size: 8)
 */
export interface GUID_IO_DISK_CLONE_ARRIVAL_INFORMATION {
  /** u32 */
  DiskNumber: number;
}

export const sizeofGUID_IO_DISK_CLONE_ARRIVAL_INFORMATION = 8;

export function allocGUID_IO_DISK_CLONE_ARRIVAL_INFORMATION(data?: Partial<GUID_IO_DISK_CLONE_ARRIVAL_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofGUID_IO_DISK_CLONE_ARRIVAL_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DiskNumber !== undefined) view.setUint32(0, Number(data.DiskNumber), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.DISK_HEALTH_NOTIFICATION_DATA (size: 8)
 */
export interface DISK_HEALTH_NOTIFICATION_DATA {
  /** System.Guid */
  DeviceGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDISK_HEALTH_NOTIFICATION_DATA = 8;

export function allocDISK_HEALTH_NOTIFICATION_DATA(data?: Partial<DISK_HEALTH_NOTIFICATION_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDISK_HEALTH_NOTIFICATION_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DeviceGuid !== undefined) view.setBigUint64(0, data.DeviceGuid === null ? 0n : BigInt(util.toPointer(data.DeviceGuid)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.REDBOOK_DIGITAL_AUDIO_EXTRACTION_INFO (size: 16)
 */
export interface REDBOOK_DIGITAL_AUDIO_EXTRACTION_INFO {
  /** u32 */
  Version: number;
  /** u32 */
  Accurate: number;
  /** u32 */
  Supported: number;
  /** u32 */
  AccurateMask0: number;
}

export const sizeofREDBOOK_DIGITAL_AUDIO_EXTRACTION_INFO = 16;

export function allocREDBOOK_DIGITAL_AUDIO_EXTRACTION_INFO(data?: Partial<REDBOOK_DIGITAL_AUDIO_EXTRACTION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofREDBOOK_DIGITAL_AUDIO_EXTRACTION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Accurate !== undefined) view.setUint32(4, Number(data.Accurate), true);
  // 0x08: u32
  if (data?.Supported !== undefined) view.setUint32(8, Number(data.Supported), true);
  // 0x0c: u32
  if (data?.AccurateMask0 !== undefined) view.setUint32(12, Number(data.AccurateMask0), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.DEV_BROADCAST_HDR (size: 16)
 */
export interface DEV_BROADCAST_HDR {
  /** u32 */
  dbch_size: number;
  /** Windows.Win32.System.SystemServices.DEV_BROADCAST_HDR_DEVICE_TYPE */
  dbch_devicetype: DEV_BROADCAST_HDR_DEVICE_TYPE;
  /** u32 */
  dbch_reserved: number;
}

export const sizeofDEV_BROADCAST_HDR = 16;

export function allocDEV_BROADCAST_HDR(data?: Partial<DEV_BROADCAST_HDR>): Uint8Array {
  const buf = new Uint8Array(sizeofDEV_BROADCAST_HDR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dbch_size !== undefined) view.setUint32(0, Number(data.dbch_size), true);
  // 0x04: u32
  if (data?.dbch_devicetype !== undefined) view.setUint32(4, Number(data.dbch_devicetype), true);
  // 0x08: u32
  if (data?.dbch_reserved !== undefined) view.setUint32(8, Number(data.dbch_reserved), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.VolLockBroadcast (size: 16)
 */
export interface VolLockBroadcast {
  /** Windows.Win32.System.SystemServices.DEV_BROADCAST_HDR */
  vlb_dbh: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  vlb_owner: number;
  /** u8 */
  vlb_perms: number;
  /** u8 */
  vlb_lockType: number;
  /** u8 */
  vlb_drive: number;
  /** u8 */
  vlb_flags: number;
}

export const sizeofVolLockBroadcast = 16;

export function allocVolLockBroadcast(data?: Partial<VolLockBroadcast>): Uint8Array {
  const buf = new Uint8Array(sizeofVolLockBroadcast);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.vlb_dbh !== undefined) view.setBigUint64(0, data.vlb_dbh === null ? 0n : BigInt(util.toPointer(data.vlb_dbh)), true);
  // 0x08: u32
  if (data?.vlb_owner !== undefined) view.setUint32(8, Number(data.vlb_owner), true);
  // 0x0c: u8
  if (data?.vlb_perms !== undefined) view.setUint8(12, Number(data.vlb_perms));
  // 0x0d: u8
  if (data?.vlb_lockType !== undefined) view.setUint8(13, Number(data.vlb_lockType));
  // 0x0e: u8
  if (data?.vlb_drive !== undefined) view.setUint8(14, Number(data.vlb_drive));
  // 0x0f: u8
  if (data?.vlb_flags !== undefined) view.setUint8(15, Number(data.vlb_flags));
  return buf;
}

/**
 * Windows.Win32.System.SystemServices._DEV_BROADCAST_HEADER (size: 16)
 */
export interface _DEV_BROADCAST_HEADER {
  /** u32 */
  dbcd_size: number;
  /** u32 */
  dbcd_devicetype: number;
  /** u32 */
  dbcd_reserved: number;
}

export const sizeof_DEV_BROADCAST_HEADER = 16;

export function alloc_DEV_BROADCAST_HEADER(data?: Partial<_DEV_BROADCAST_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeof_DEV_BROADCAST_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dbcd_size !== undefined) view.setUint32(0, Number(data.dbcd_size), true);
  // 0x04: u32
  if (data?.dbcd_devicetype !== undefined) view.setUint32(4, Number(data.dbcd_devicetype), true);
  // 0x08: u32
  if (data?.dbcd_reserved !== undefined) view.setUint32(8, Number(data.dbcd_reserved), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.DEV_BROADCAST_OEM (size: 24)
 */
export interface DEV_BROADCAST_OEM {
  /** u32 */
  dbco_size: number;
  /** u32 */
  dbco_devicetype: number;
  /** u32 */
  dbco_reserved: number;
  /** u32 */
  dbco_identifier: number;
  /** u32 */
  dbco_suppfunc: number;
}

export const sizeofDEV_BROADCAST_OEM = 24;

export function allocDEV_BROADCAST_OEM(data?: Partial<DEV_BROADCAST_OEM>): Uint8Array {
  const buf = new Uint8Array(sizeofDEV_BROADCAST_OEM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dbco_size !== undefined) view.setUint32(0, Number(data.dbco_size), true);
  // 0x04: u32
  if (data?.dbco_devicetype !== undefined) view.setUint32(4, Number(data.dbco_devicetype), true);
  // 0x08: u32
  if (data?.dbco_reserved !== undefined) view.setUint32(8, Number(data.dbco_reserved), true);
  // 0x0c: u32
  if (data?.dbco_identifier !== undefined) view.setUint32(12, Number(data.dbco_identifier), true);
  // 0x10: u32
  if (data?.dbco_suppfunc !== undefined) view.setUint32(16, Number(data.dbco_suppfunc), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.DEV_BROADCAST_DEVNODE (size: 16)
 */
export interface DEV_BROADCAST_DEVNODE {
  /** u32 */
  dbcd_size: number;
  /** u32 */
  dbcd_devicetype: number;
  /** u32 */
  dbcd_reserved: number;
  /** u32 */
  dbcd_devnode: number;
}

export const sizeofDEV_BROADCAST_DEVNODE = 16;

export function allocDEV_BROADCAST_DEVNODE(data?: Partial<DEV_BROADCAST_DEVNODE>): Uint8Array {
  const buf = new Uint8Array(sizeofDEV_BROADCAST_DEVNODE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dbcd_size !== undefined) view.setUint32(0, Number(data.dbcd_size), true);
  // 0x04: u32
  if (data?.dbcd_devicetype !== undefined) view.setUint32(4, Number(data.dbcd_devicetype), true);
  // 0x08: u32
  if (data?.dbcd_reserved !== undefined) view.setUint32(8, Number(data.dbcd_reserved), true);
  // 0x0c: u32
  if (data?.dbcd_devnode !== undefined) view.setUint32(12, Number(data.dbcd_devnode), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.DEV_BROADCAST_VOLUME (size: 24)
 */
export interface DEV_BROADCAST_VOLUME {
  /** u32 */
  dbcv_size: number;
  /** u32 */
  dbcv_devicetype: number;
  /** u32 */
  dbcv_reserved: number;
  /** u32 */
  dbcv_unitmask: number;
  /** Windows.Win32.System.SystemServices.DEV_BROADCAST_VOLUME_FLAGS */
  dbcv_flags: DEV_BROADCAST_VOLUME_FLAGS;
}

export const sizeofDEV_BROADCAST_VOLUME = 24;

export function allocDEV_BROADCAST_VOLUME(data?: Partial<DEV_BROADCAST_VOLUME>): Uint8Array {
  const buf = new Uint8Array(sizeofDEV_BROADCAST_VOLUME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dbcv_size !== undefined) view.setUint32(0, Number(data.dbcv_size), true);
  // 0x04: u32
  if (data?.dbcv_devicetype !== undefined) view.setUint32(4, Number(data.dbcv_devicetype), true);
  // 0x08: u32
  if (data?.dbcv_reserved !== undefined) view.setUint32(8, Number(data.dbcv_reserved), true);
  // 0x0c: u32
  if (data?.dbcv_unitmask !== undefined) view.setUint32(12, Number(data.dbcv_unitmask), true);
  // 0x10: u16
  if (data?.dbcv_flags !== undefined) view.setUint16(16, Number(data.dbcv_flags), true);
  // 0x12: pad6
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.DEV_BROADCAST_PORT_A (size: 24)
 */
export interface DEV_BROADCAST_PORT_A {
  /** u32 */
  dbcp_size: number;
  /** u32 */
  dbcp_devicetype: number;
  /** u32 */
  dbcp_reserved: number;
  /** array */
  dbcp_name: Deno.PointerValue | null;
}

export const sizeofDEV_BROADCAST_PORT_A = 24;

export function allocDEV_BROADCAST_PORT_A(data?: Partial<DEV_BROADCAST_PORT_A>): Uint8Array {
  const buf = new Uint8Array(sizeofDEV_BROADCAST_PORT_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dbcp_size !== undefined) view.setUint32(0, Number(data.dbcp_size), true);
  // 0x04: u32
  if (data?.dbcp_devicetype !== undefined) view.setUint32(4, Number(data.dbcp_devicetype), true);
  // 0x08: u32
  if (data?.dbcp_reserved !== undefined) view.setUint32(8, Number(data.dbcp_reserved), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.dbcp_name !== undefined) view.setBigUint64(16, data.dbcp_name === null ? 0n : BigInt(util.toPointer(data.dbcp_name)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.DEV_BROADCAST_PORT_W (size: 24)
 */
export interface DEV_BROADCAST_PORT_W {
  /** u32 */
  dbcp_size: number;
  /** u32 */
  dbcp_devicetype: number;
  /** u32 */
  dbcp_reserved: number;
  /** array */
  dbcp_name: Deno.PointerValue | null;
}

export const sizeofDEV_BROADCAST_PORT_W = 24;

export function allocDEV_BROADCAST_PORT_W(data?: Partial<DEV_BROADCAST_PORT_W>): Uint8Array {
  const buf = new Uint8Array(sizeofDEV_BROADCAST_PORT_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dbcp_size !== undefined) view.setUint32(0, Number(data.dbcp_size), true);
  // 0x04: u32
  if (data?.dbcp_devicetype !== undefined) view.setUint32(4, Number(data.dbcp_devicetype), true);
  // 0x08: u32
  if (data?.dbcp_reserved !== undefined) view.setUint32(8, Number(data.dbcp_reserved), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.dbcp_name !== undefined) view.setBigUint64(16, data.dbcp_name === null ? 0n : BigInt(util.toPointer(data.dbcp_name)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.DEV_BROADCAST_NET (size: 24)
 */
export interface DEV_BROADCAST_NET {
  /** u32 */
  dbcn_size: number;
  /** u32 */
  dbcn_devicetype: number;
  /** u32 */
  dbcn_reserved: number;
  /** u32 */
  dbcn_resource: number;
  /** u32 */
  dbcn_flags: number;
}

export const sizeofDEV_BROADCAST_NET = 24;

export function allocDEV_BROADCAST_NET(data?: Partial<DEV_BROADCAST_NET>): Uint8Array {
  const buf = new Uint8Array(sizeofDEV_BROADCAST_NET);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dbcn_size !== undefined) view.setUint32(0, Number(data.dbcn_size), true);
  // 0x04: u32
  if (data?.dbcn_devicetype !== undefined) view.setUint32(4, Number(data.dbcn_devicetype), true);
  // 0x08: u32
  if (data?.dbcn_reserved !== undefined) view.setUint32(8, Number(data.dbcn_reserved), true);
  // 0x0c: u32
  if (data?.dbcn_resource !== undefined) view.setUint32(12, Number(data.dbcn_resource), true);
  // 0x10: u32
  if (data?.dbcn_flags !== undefined) view.setUint32(16, Number(data.dbcn_flags), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.DEV_BROADCAST_DEVICEINTERFACE_A (size: 32)
 */
export interface DEV_BROADCAST_DEVICEINTERFACE_A {
  /** u32 */
  dbcc_size: number;
  /** u32 */
  dbcc_devicetype: number;
  /** u32 */
  dbcc_reserved: number;
  /** System.Guid */
  dbcc_classguid: Uint8Array | Deno.PointerValue | null;
  /** array */
  dbcc_name: Deno.PointerValue | null;
}

export const sizeofDEV_BROADCAST_DEVICEINTERFACE_A = 32;

export function allocDEV_BROADCAST_DEVICEINTERFACE_A(data?: Partial<DEV_BROADCAST_DEVICEINTERFACE_A>): Uint8Array {
  const buf = new Uint8Array(sizeofDEV_BROADCAST_DEVICEINTERFACE_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dbcc_size !== undefined) view.setUint32(0, Number(data.dbcc_size), true);
  // 0x04: u32
  if (data?.dbcc_devicetype !== undefined) view.setUint32(4, Number(data.dbcc_devicetype), true);
  // 0x08: u32
  if (data?.dbcc_reserved !== undefined) view.setUint32(8, Number(data.dbcc_reserved), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.dbcc_classguid !== undefined) view.setBigUint64(16, data.dbcc_classguid === null ? 0n : BigInt(util.toPointer(data.dbcc_classguid)), true);
  // 0x18: pointer
  if (data?.dbcc_name !== undefined) view.setBigUint64(24, data.dbcc_name === null ? 0n : BigInt(util.toPointer(data.dbcc_name)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.DEV_BROADCAST_DEVICEINTERFACE_W (size: 32)
 */
export interface DEV_BROADCAST_DEVICEINTERFACE_W {
  /** u32 */
  dbcc_size: number;
  /** u32 */
  dbcc_devicetype: number;
  /** u32 */
  dbcc_reserved: number;
  /** System.Guid */
  dbcc_classguid: Uint8Array | Deno.PointerValue | null;
  /** array */
  dbcc_name: Deno.PointerValue | null;
}

export const sizeofDEV_BROADCAST_DEVICEINTERFACE_W = 32;

export function allocDEV_BROADCAST_DEVICEINTERFACE_W(data?: Partial<DEV_BROADCAST_DEVICEINTERFACE_W>): Uint8Array {
  const buf = new Uint8Array(sizeofDEV_BROADCAST_DEVICEINTERFACE_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dbcc_size !== undefined) view.setUint32(0, Number(data.dbcc_size), true);
  // 0x04: u32
  if (data?.dbcc_devicetype !== undefined) view.setUint32(4, Number(data.dbcc_devicetype), true);
  // 0x08: u32
  if (data?.dbcc_reserved !== undefined) view.setUint32(8, Number(data.dbcc_reserved), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.dbcc_classguid !== undefined) view.setBigUint64(16, data.dbcc_classguid === null ? 0n : BigInt(util.toPointer(data.dbcc_classguid)), true);
  // 0x18: pointer
  if (data?.dbcc_name !== undefined) view.setBigUint64(24, data.dbcc_name === null ? 0n : BigInt(util.toPointer(data.dbcc_name)), true);
  return buf;
}

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.System.SystemServices.DEV_BROADCAST_HANDLE (size: 56)
 */
export interface DEV_BROADCAST_HANDLE {
  /** u32 */
  dbch_size: number;
  /** u32 */
  dbch_devicetype: number;
  /** u32 */
  dbch_reserved: number;
  /** Windows.Win32.Foundation.HANDLE */
  dbch_handle: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  dbch_hdevnotify: Deno.PointerValue | Uint8Array | null;
  /** System.Guid */
  dbch_eventguid: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  dbch_nameoffset: number;
  /** array */
  dbch_data: Deno.PointerValue | null;
}

export const sizeofDEV_BROADCAST_HANDLE = 56;

export function allocDEV_BROADCAST_HANDLE(data?: Partial<DEV_BROADCAST_HANDLE>): Uint8Array {
  const buf = new Uint8Array(sizeofDEV_BROADCAST_HANDLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dbch_size !== undefined) view.setUint32(0, Number(data.dbch_size), true);
  // 0x04: u32
  if (data?.dbch_devicetype !== undefined) view.setUint32(4, Number(data.dbch_devicetype), true);
  // 0x08: u32
  if (data?.dbch_reserved !== undefined) view.setUint32(8, Number(data.dbch_reserved), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.dbch_handle !== undefined) view.setBigUint64(16, data.dbch_handle === null ? 0n : BigInt(util.toPointer(data.dbch_handle)), true);
  // 0x18: pointer
  if (data?.dbch_hdevnotify !== undefined) view.setBigUint64(24, data.dbch_hdevnotify === null ? 0n : BigInt(util.toPointer(data.dbch_hdevnotify)), true);
  // 0x20: pointer
  if (data?.dbch_eventguid !== undefined) view.setBigUint64(32, data.dbch_eventguid === null ? 0n : BigInt(util.toPointer(data.dbch_eventguid)), true);
  // 0x28: i32
  if (data?.dbch_nameoffset !== undefined) view.setInt32(40, Number(data.dbch_nameoffset), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.dbch_data !== undefined) view.setBigUint64(48, data.dbch_data === null ? 0n : BigInt(util.toPointer(data.dbch_data)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.DEV_BROADCAST_HANDLE32 (size: 48)
 */
export interface DEV_BROADCAST_HANDLE32 {
  /** u32 */
  dbch_size: number;
  /** u32 */
  dbch_devicetype: number;
  /** u32 */
  dbch_reserved: number;
  /** u32 */
  dbch_handle: number;
  /** u32 */
  dbch_hdevnotify: number;
  /** System.Guid */
  dbch_eventguid: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  dbch_nameoffset: number;
  /** array */
  dbch_data: Deno.PointerValue | null;
}

export const sizeofDEV_BROADCAST_HANDLE32 = 48;

export function allocDEV_BROADCAST_HANDLE32(data?: Partial<DEV_BROADCAST_HANDLE32>): Uint8Array {
  const buf = new Uint8Array(sizeofDEV_BROADCAST_HANDLE32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dbch_size !== undefined) view.setUint32(0, Number(data.dbch_size), true);
  // 0x04: u32
  if (data?.dbch_devicetype !== undefined) view.setUint32(4, Number(data.dbch_devicetype), true);
  // 0x08: u32
  if (data?.dbch_reserved !== undefined) view.setUint32(8, Number(data.dbch_reserved), true);
  // 0x0c: u32
  if (data?.dbch_handle !== undefined) view.setUint32(12, Number(data.dbch_handle), true);
  // 0x10: u32
  if (data?.dbch_hdevnotify !== undefined) view.setUint32(16, Number(data.dbch_hdevnotify), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.dbch_eventguid !== undefined) view.setBigUint64(24, data.dbch_eventguid === null ? 0n : BigInt(util.toPointer(data.dbch_eventguid)), true);
  // 0x20: i32
  if (data?.dbch_nameoffset !== undefined) view.setInt32(32, Number(data.dbch_nameoffset), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.dbch_data !== undefined) view.setBigUint64(40, data.dbch_data === null ? 0n : BigInt(util.toPointer(data.dbch_data)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.DEV_BROADCAST_HANDLE64 (size: 56)
 */
export interface DEV_BROADCAST_HANDLE64 {
  /** u32 */
  dbch_size: number;
  /** u32 */
  dbch_devicetype: number;
  /** u32 */
  dbch_reserved: number;
  /** u64 */
  dbch_handle: Deno.PointerValue;
  /** u64 */
  dbch_hdevnotify: Deno.PointerValue;
  /** System.Guid */
  dbch_eventguid: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  dbch_nameoffset: number;
  /** array */
  dbch_data: Deno.PointerValue | null;
}

export const sizeofDEV_BROADCAST_HANDLE64 = 56;

export function allocDEV_BROADCAST_HANDLE64(data?: Partial<DEV_BROADCAST_HANDLE64>): Uint8Array {
  const buf = new Uint8Array(sizeofDEV_BROADCAST_HANDLE64);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dbch_size !== undefined) view.setUint32(0, Number(data.dbch_size), true);
  // 0x04: u32
  if (data?.dbch_devicetype !== undefined) view.setUint32(4, Number(data.dbch_devicetype), true);
  // 0x08: u32
  if (data?.dbch_reserved !== undefined) view.setUint32(8, Number(data.dbch_reserved), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.dbch_handle !== undefined) view.setBigUint64(16, BigInt(data.dbch_handle), true);
  // 0x18: u64
  if (data?.dbch_hdevnotify !== undefined) view.setBigUint64(24, BigInt(data.dbch_hdevnotify), true);
  // 0x20: pointer
  if (data?.dbch_eventguid !== undefined) view.setBigUint64(32, data.dbch_eventguid === null ? 0n : BigInt(util.toPointer(data.dbch_eventguid)), true);
  // 0x28: i32
  if (data?.dbch_nameoffset !== undefined) view.setInt32(40, Number(data.dbch_nameoffset), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.dbch_data !== undefined) view.setBigUint64(48, data.dbch_data === null ? 0n : BigInt(util.toPointer(data.dbch_data)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices._DEV_BROADCAST_USERDEFINED (size: 16)
 */
export interface _DEV_BROADCAST_USERDEFINED {
  /** Windows.Win32.System.SystemServices.DEV_BROADCAST_HDR */
  dbud_dbh: Uint8Array | Deno.PointerValue | null;
  /** array */
  dbud_szName: Deno.PointerValue | null;
}

export const sizeof_DEV_BROADCAST_USERDEFINED = 16;

export function alloc_DEV_BROADCAST_USERDEFINED(data?: Partial<_DEV_BROADCAST_USERDEFINED>): Uint8Array {
  const buf = new Uint8Array(sizeof_DEV_BROADCAST_USERDEFINED);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.dbud_dbh !== undefined) view.setBigUint64(0, data.dbud_dbh === null ? 0n : BigInt(util.toPointer(data.dbud_dbh)), true);
  // 0x08: pointer
  if (data?.dbud_szName !== undefined) view.setBigUint64(8, data.dbud_szName === null ? 0n : BigInt(util.toPointer(data.dbud_szName)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.REARRANGE_FILE_DATA32 (size: 32)
 */
export interface REARRANGE_FILE_DATA32 {
  /** u64 */
  SourceStartingOffset: Deno.PointerValue;
  /** u64 */
  TargetOffset: Deno.PointerValue;
  /** u32 */
  SourceFileHandle: number;
  /** u32 */
  Length: number;
  /** u32 */
  Flags: number;
}

export const sizeofREARRANGE_FILE_DATA32 = 32;

export function allocREARRANGE_FILE_DATA32(data?: Partial<REARRANGE_FILE_DATA32>): Uint8Array {
  const buf = new Uint8Array(sizeofREARRANGE_FILE_DATA32);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.SourceStartingOffset !== undefined) view.setBigUint64(0, BigInt(data.SourceStartingOffset), true);
  // 0x08: u64
  if (data?.TargetOffset !== undefined) view.setBigUint64(8, BigInt(data.TargetOffset), true);
  // 0x10: u32
  if (data?.SourceFileHandle !== undefined) view.setUint32(16, Number(data.SourceFileHandle), true);
  // 0x14: u32
  if (data?.Length !== undefined) view.setUint32(20, Number(data.Length), true);
  // 0x18: u32
  if (data?.Flags !== undefined) view.setUint32(24, Number(data.Flags), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.XSAVE_CET_U_FORMAT (size: 16)
 */
export interface XSAVE_CET_U_FORMAT {
  /** u64 */
  Ia32CetUMsr: Deno.PointerValue;
  /** u64 */
  Ia32Pl3SspMsr: Deno.PointerValue;
}

export const sizeofXSAVE_CET_U_FORMAT = 16;

export function allocXSAVE_CET_U_FORMAT(data?: Partial<XSAVE_CET_U_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofXSAVE_CET_U_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Ia32CetUMsr !== undefined) view.setBigUint64(0, BigInt(data.Ia32CetUMsr), true);
  // 0x08: u64
  if (data?.Ia32Pl3SspMsr !== undefined) view.setBigUint64(8, BigInt(data.Ia32Pl3SspMsr), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.KERNEL_CET_CONTEXT (size: 40)
 */
export interface KERNEL_CET_CONTEXT {
  /** u64 */
  Ssp: Deno.PointerValue;
  /** u64 */
  Rip: Deno.PointerValue;
  /** u16 */
  SegCs: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  Fill: Deno.PointerValue | null;
}

export const sizeofKERNEL_CET_CONTEXT = 40;

export function allocKERNEL_CET_CONTEXT(data?: Partial<KERNEL_CET_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofKERNEL_CET_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Ssp !== undefined) view.setBigUint64(0, BigInt(data.Ssp), true);
  // 0x08: u64
  if (data?.Rip !== undefined) view.setBigUint64(8, BigInt(data.Rip), true);
  // 0x10: u16
  if (data?.SegCs !== undefined) view.setUint16(16, Number(data.SegCs), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(24, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x20: pointer
  if (data?.Fill !== undefined) view.setBigUint64(32, data.Fill === null ? 0n : BigInt(util.toPointer(data.Fill)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.SCOPE_TABLE_AMD64 (size: 16)
 */
export interface SCOPE_TABLE_AMD64 {
  /** u32 */
  Count: number;
  /** array */
  ScopeRecord: Deno.PointerValue | null;
}

export const sizeofSCOPE_TABLE_AMD64 = 16;

export function allocSCOPE_TABLE_AMD64(data?: Partial<SCOPE_TABLE_AMD64>): Uint8Array {
  const buf = new Uint8Array(sizeofSCOPE_TABLE_AMD64);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Count !== undefined) view.setUint32(0, Number(data.Count), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ScopeRecord !== undefined) view.setBigUint64(8, data.ScopeRecord === null ? 0n : BigInt(util.toPointer(data.ScopeRecord)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.SCOPE_TABLE_ARM (size: 16)
 */
export interface SCOPE_TABLE_ARM {
  /** u32 */
  Count: number;
  /** array */
  ScopeRecord: Deno.PointerValue | null;
}

export const sizeofSCOPE_TABLE_ARM = 16;

export function allocSCOPE_TABLE_ARM(data?: Partial<SCOPE_TABLE_ARM>): Uint8Array {
  const buf = new Uint8Array(sizeofSCOPE_TABLE_ARM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Count !== undefined) view.setUint32(0, Number(data.Count), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ScopeRecord !== undefined) view.setBigUint64(8, data.ScopeRecord === null ? 0n : BigInt(util.toPointer(data.ScopeRecord)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.SCOPE_TABLE_ARM64 (size: 16)
 */
export interface SCOPE_TABLE_ARM64 {
  /** u32 */
  Count: number;
  /** array */
  ScopeRecord: Deno.PointerValue | null;
}

export const sizeofSCOPE_TABLE_ARM64 = 16;

export function allocSCOPE_TABLE_ARM64(data?: Partial<SCOPE_TABLE_ARM64>): Uint8Array {
  const buf = new Uint8Array(sizeofSCOPE_TABLE_ARM64);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Count !== undefined) view.setUint32(0, Number(data.Count), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ScopeRecord !== undefined) view.setBigUint64(8, data.ScopeRecord === null ? 0n : BigInt(util.toPointer(data.ScopeRecord)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.DISPATCHER_CONTEXT_NONVOLREG_ARM64 (size: 16)
 */
export interface DISPATCHER_CONTEXT_NONVOLREG_ARM64 {
  /** array */
  Buffer: Deno.PointerValue | null;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDISPATCHER_CONTEXT_NONVOLREG_ARM64 = 16;

export function allocDISPATCHER_CONTEXT_NONVOLREG_ARM64(data?: Partial<DISPATCHER_CONTEXT_NONVOLREG_ARM64>): Uint8Array {
  const buf = new Uint8Array(sizeofDISPATCHER_CONTEXT_NONVOLREG_ARM64);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Buffer !== undefined) view.setBigUint64(0, data.Buffer === null ? 0n : BigInt(util.toPointer(data.Buffer)), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.SECURITY_DESCRIPTOR_RELATIVE (size: 24)
 */
export interface SECURITY_DESCRIPTOR_RELATIVE {
  /** u8 */
  Revision: number;
  /** u8 */
  Sbz1: number;
  /** u16 */
  Control: number;
  /** u32 */
  Owner: number;
  /** u32 */
  Group: number;
  /** u32 */
  Sacl: number;
  /** u32 */
  Dacl: number;
}

export const sizeofSECURITY_DESCRIPTOR_RELATIVE = 24;

export function allocSECURITY_DESCRIPTOR_RELATIVE(data?: Partial<SECURITY_DESCRIPTOR_RELATIVE>): Uint8Array {
  const buf = new Uint8Array(sizeofSECURITY_DESCRIPTOR_RELATIVE);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Revision !== undefined) view.setUint8(0, Number(data.Revision));
  // 0x01: u8
  if (data?.Sbz1 !== undefined) view.setUint8(1, Number(data.Sbz1));
  // 0x02: u16
  if (data?.Control !== undefined) view.setUint16(2, Number(data.Control), true);
  // 0x04: u32
  if (data?.Owner !== undefined) view.setUint32(4, Number(data.Owner), true);
  // 0x08: u32
  if (data?.Group !== undefined) view.setUint32(8, Number(data.Group), true);
  // 0x0c: u32
  if (data?.Sacl !== undefined) view.setUint32(12, Number(data.Sacl), true);
  // 0x10: u32
  if (data?.Dacl !== undefined) view.setUint32(16, Number(data.Dacl), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.SECURITY_OBJECT_AI_PARAMS (size: 8)
 */
export interface SECURITY_OBJECT_AI_PARAMS {
  /** u32 */
  Size: number;
  /** u32 */
  ConstraintMask: number;
}

export const sizeofSECURITY_OBJECT_AI_PARAMS = 8;

export function allocSECURITY_OBJECT_AI_PARAMS(data?: Partial<SECURITY_OBJECT_AI_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofSECURITY_OBJECT_AI_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.ConstraintMask !== undefined) view.setUint32(4, Number(data.ConstraintMask), true);
  return buf;
}

/**
 * _Anonymous1_e__Union (size: 64)
 */
export interface _Anonymous1_e__Union {
  /** usize */
  Data0: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  String: string | null | Uint8Array | Uint16Array;
  /** usize */
  u: Deno.PointerValue;
  /** ptr */
  psid: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pguid: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  LogonId_LowPart: number;
  /** ptr */
  pObjectTypes: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pIpAddress: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_Anonymous1_e__Union = 64;

export function alloc_Anonymous1_e__Union(data?: Partial<_Anonymous1_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous1_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data0 !== undefined) view.setBigUint64(0, BigInt(data.Data0), true);
  // 0x08: buffer
  if (data?.String !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.String);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: usize
  if (data?.u !== undefined) view.setBigUint64(16, BigInt(data.u), true);
  // 0x18: pointer
  if (data?.psid !== undefined) view.setBigUint64(24, data.psid === null ? 0n : BigInt(util.toPointer(data.psid)), true);
  // 0x20: pointer
  if (data?.pguid !== undefined) view.setBigUint64(32, data.pguid === null ? 0n : BigInt(util.toPointer(data.pguid)), true);
  // 0x28: u32
  if (data?.LogonId_LowPart !== undefined) view.setUint32(40, Number(data.LogonId_LowPart), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pObjectTypes !== undefined) view.setBigUint64(48, data.pObjectTypes === null ? 0n : BigInt(util.toPointer(data.pObjectTypes)), true);
  // 0x38: pointer
  if (data?.pIpAddress !== undefined) view.setBigUint64(56, data.pIpAddress === null ? 0n : BigInt(util.toPointer(data.pIpAddress)), true);
  return buf;
}

/**
 * _Anonymous2_e__Union (size: 16)
 */
export interface _Anonymous2_e__Union {
  /** usize */
  Data1: Deno.PointerValue;
  /** i32 */
  LogonId_HighPart: number;
}

export const sizeof_Anonymous2_e__Union = 16;

export function alloc_Anonymous2_e__Union(data?: Partial<_Anonymous2_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous2_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data1 !== undefined) view.setBigUint64(0, BigInt(data.Data1), true);
  // 0x08: i32
  if (data?.LogonId_HighPart !== undefined) view.setInt32(8, Number(data.LogonId_HighPart), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.SE_TOKEN_USER (size: 16)
 */
export interface SE_TOKEN_USER {
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSE_TOKEN_USER = 16;

export function allocSE_TOKEN_USER(data?: Partial<SE_TOKEN_USER>): Uint8Array {
  const buf = new Uint8Array(sizeofSE_TOKEN_USER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(0, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x08: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(8, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  return buf;
}

export type PSID = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.System.SystemServices.TOKEN_SID_INFORMATION (size: 8)
 */
export interface TOKEN_SID_INFORMATION {
  /** Windows.Win32.Foundation.PSID */
  Sid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTOKEN_SID_INFORMATION = 8;

export function allocTOKEN_SID_INFORMATION(data?: Partial<TOKEN_SID_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofTOKEN_SID_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Sid !== undefined) view.setBigUint64(0, data.Sid === null ? 0n : BigInt(util.toPointer(data.Sid)), true);
  return buf;
}

export type BOOLEAN = number;

/**
 * Windows.Win32.System.SystemServices.TOKEN_BNO_ISOLATION_INFORMATION (size: 16)
 */
export interface TOKEN_BNO_ISOLATION_INFORMATION {
  /** Windows.Win32.Foundation.PWSTR */
  IsolationPrefix: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.BOOLEAN */
  IsolationEnabled: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTOKEN_BNO_ISOLATION_INFORMATION = 16;

export function allocTOKEN_BNO_ISOLATION_INFORMATION(data?: Partial<TOKEN_BNO_ISOLATION_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofTOKEN_BNO_ISOLATION_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.IsolationPrefix !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.IsolationPrefix);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.IsolationEnabled !== undefined) view.setBigUint64(8, data.IsolationEnabled === null ? 0n : BigInt(util.toPointer(data.IsolationEnabled)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.NT_TIB32 (size: 32)
 */
export interface NT_TIB32 {
  /** u32 */
  ExceptionList: number;
  /** u32 */
  StackBase: number;
  /** u32 */
  StackLimit: number;
  /** u32 */
  SubSystemTib: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ArbitraryUserPointer: number;
  /** u32 */
  Self: number;
}

export const sizeofNT_TIB32 = 32;

export function allocNT_TIB32(data?: Partial<NT_TIB32>): Uint8Array {
  const buf = new Uint8Array(sizeofNT_TIB32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ExceptionList !== undefined) view.setUint32(0, Number(data.ExceptionList), true);
  // 0x04: u32
  if (data?.StackBase !== undefined) view.setUint32(4, Number(data.StackBase), true);
  // 0x08: u32
  if (data?.StackLimit !== undefined) view.setUint32(8, Number(data.StackLimit), true);
  // 0x0c: u32
  if (data?.SubSystemTib !== undefined) view.setUint32(12, Number(data.SubSystemTib), true);
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x18: u32
  if (data?.ArbitraryUserPointer !== undefined) view.setUint32(24, Number(data.ArbitraryUserPointer), true);
  // 0x1c: u32
  if (data?.Self !== undefined) view.setUint32(28, Number(data.Self), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.NT_TIB64 (size: 56)
 */
export interface NT_TIB64 {
  /** u64 */
  ExceptionList: Deno.PointerValue;
  /** u64 */
  StackBase: Deno.PointerValue;
  /** u64 */
  StackLimit: Deno.PointerValue;
  /** u64 */
  SubSystemTib: Deno.PointerValue;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  ArbitraryUserPointer: Deno.PointerValue;
  /** u64 */
  Self: Deno.PointerValue;
}

export const sizeofNT_TIB64 = 56;

export function allocNT_TIB64(data?: Partial<NT_TIB64>): Uint8Array {
  const buf = new Uint8Array(sizeofNT_TIB64);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.ExceptionList !== undefined) view.setBigUint64(0, BigInt(data.ExceptionList), true);
  // 0x08: u64
  if (data?.StackBase !== undefined) view.setBigUint64(8, BigInt(data.StackBase), true);
  // 0x10: u64
  if (data?.StackLimit !== undefined) view.setBigUint64(16, BigInt(data.StackLimit), true);
  // 0x18: u64
  if (data?.SubSystemTib !== undefined) view.setBigUint64(24, BigInt(data.SubSystemTib), true);
  // 0x20: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(32, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x28: u64
  if (data?.ArbitraryUserPointer !== undefined) view.setBigUint64(40, BigInt(data.ArbitraryUserPointer), true);
  // 0x30: u64
  if (data?.Self !== undefined) view.setBigUint64(48, BigInt(data.Self), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.UMS_CREATE_THREAD_ATTRIBUTES (size: 24)
 */
export interface UMS_CREATE_THREAD_ATTRIBUTES {
  /** u32 */
  UmsVersion: number;
  /** ptr */
  UmsContext: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  UmsCompletionList: Deno.PointerValue | Uint8Array | null;
}

export const sizeofUMS_CREATE_THREAD_ATTRIBUTES = 24;

export function allocUMS_CREATE_THREAD_ATTRIBUTES(data?: Partial<UMS_CREATE_THREAD_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofUMS_CREATE_THREAD_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UmsVersion !== undefined) view.setUint32(0, Number(data.UmsVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.UmsContext !== undefined) view.setBigUint64(8, data.UmsContext === null ? 0n : BigInt(util.toPointer(data.UmsContext)), true);
  // 0x10: pointer
  if (data?.UmsCompletionList !== undefined) view.setBigUint64(16, data.UmsCompletionList === null ? 0n : BigInt(util.toPointer(data.UmsCompletionList)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.COMPONENT_FILTER (size: 8)
 */
export interface COMPONENT_FILTER {
  /** u32 */
  ComponentFlags: number;
}

export const sizeofCOMPONENT_FILTER = 8;

export function allocCOMPONENT_FILTER(data?: Partial<COMPONENT_FILTER>): Uint8Array {
  const buf = new Uint8Array(sizeofCOMPONENT_FILTER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ComponentFlags !== undefined) view.setUint32(0, Number(data.ComponentFlags), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.RATE_QUOTA_LIMIT (size: 16)
 */
export interface RATE_QUOTA_LIMIT {
  /** u32 */
  RateData: number;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRATE_QUOTA_LIMIT = 16;

export function allocRATE_QUOTA_LIMIT(data?: Partial<RATE_QUOTA_LIMIT>): Uint8Array {
  const buf = new Uint8Array(sizeofRATE_QUOTA_LIMIT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.RateData !== undefined) view.setUint32(0, Number(data.RateData), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.QUOTA_LIMITS_EX (size: 96)
 */
export interface QUOTA_LIMITS_EX {
  /** usize */
  PagedPoolLimit: Deno.PointerValue;
  /** usize */
  NonPagedPoolLimit: Deno.PointerValue;
  /** usize */
  MinimumWorkingSetSize: Deno.PointerValue;
  /** usize */
  MaximumWorkingSetSize: Deno.PointerValue;
  /** usize */
  PagefileLimit: Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TimeLimit: Uint8Array | Deno.PointerValue | null;
  /** usize */
  WorkingSetLimit: Deno.PointerValue;
  /** usize */
  Reserved2: Deno.PointerValue;
  /** usize */
  Reserved3: Deno.PointerValue;
  /** usize */
  Reserved4: Deno.PointerValue;
  /** u32 */
  Flags: number;
  /** Windows.Win32.System.SystemServices.RATE_QUOTA_LIMIT */
  CpuRateLimit: Uint8Array | Deno.PointerValue | null;
}

export const sizeofQUOTA_LIMITS_EX = 96;

export function allocQUOTA_LIMITS_EX(data?: Partial<QUOTA_LIMITS_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofQUOTA_LIMITS_EX);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.PagedPoolLimit !== undefined) view.setBigUint64(0, BigInt(data.PagedPoolLimit), true);
  // 0x08: usize
  if (data?.NonPagedPoolLimit !== undefined) view.setBigUint64(8, BigInt(data.NonPagedPoolLimit), true);
  // 0x10: usize
  if (data?.MinimumWorkingSetSize !== undefined) view.setBigUint64(16, BigInt(data.MinimumWorkingSetSize), true);
  // 0x18: usize
  if (data?.MaximumWorkingSetSize !== undefined) view.setBigUint64(24, BigInt(data.MaximumWorkingSetSize), true);
  // 0x20: usize
  if (data?.PagefileLimit !== undefined) view.setBigUint64(32, BigInt(data.PagefileLimit), true);
  // 0x28: pointer
  if (data?.TimeLimit !== undefined) view.setBigUint64(40, data.TimeLimit === null ? 0n : BigInt(util.toPointer(data.TimeLimit)), true);
  // 0x30: usize
  if (data?.WorkingSetLimit !== undefined) view.setBigUint64(48, BigInt(data.WorkingSetLimit), true);
  // 0x38: usize
  if (data?.Reserved2 !== undefined) view.setBigUint64(56, BigInt(data.Reserved2), true);
  // 0x40: usize
  if (data?.Reserved3 !== undefined) view.setBigUint64(64, BigInt(data.Reserved3), true);
  // 0x48: usize
  if (data?.Reserved4 !== undefined) view.setBigUint64(72, BigInt(data.Reserved4), true);
  // 0x50: u32
  if (data?.Flags !== undefined) view.setUint32(80, Number(data.Flags), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.CpuRateLimit !== undefined) view.setBigUint64(88, data.CpuRateLimit === null ? 0n : BigInt(util.toPointer(data.CpuRateLimit)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.PROCESS_MITIGATION_ASLR_POLICY (size: 8)
 */
export interface PROCESS_MITIGATION_ASLR_POLICY {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPROCESS_MITIGATION_ASLR_POLICY = 8;

export function allocPROCESS_MITIGATION_ASLR_POLICY(data?: Partial<PROCESS_MITIGATION_ASLR_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_MITIGATION_ASLR_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.PROCESS_MITIGATION_DEP_POLICY (size: 16)
 */
export interface PROCESS_MITIGATION_DEP_POLICY {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  Permanent: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPROCESS_MITIGATION_DEP_POLICY = 16;

export function allocPROCESS_MITIGATION_DEP_POLICY(data?: Partial<PROCESS_MITIGATION_DEP_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_MITIGATION_DEP_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.Permanent !== undefined) view.setBigUint64(8, data.Permanent === null ? 0n : BigInt(util.toPointer(data.Permanent)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY (size: 8)
 */
export interface PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY = 8;

export function allocPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY(data?: Partial<PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY (size: 8)
 */
export interface PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY = 8;

export function allocPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY(data?: Partial<PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY (size: 8)
 */
export interface PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY = 8;

export function allocPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY(data?: Partial<PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.PROCESS_MITIGATION_DYNAMIC_CODE_POLICY (size: 8)
 */
export interface PROCESS_MITIGATION_DYNAMIC_CODE_POLICY {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPROCESS_MITIGATION_DYNAMIC_CODE_POLICY = 8;

export function allocPROCESS_MITIGATION_DYNAMIC_CODE_POLICY(data?: Partial<PROCESS_MITIGATION_DYNAMIC_CODE_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_MITIGATION_DYNAMIC_CODE_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY (size: 8)
 */
export interface PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY = 8;

export function allocPROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY(data?: Partial<PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY (size: 8)
 */
export interface PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPROCESS_MITIGATION_BINARY_SIGNATURE_POLICY = 8;

export function allocPROCESS_MITIGATION_BINARY_SIGNATURE_POLICY(data?: Partial<PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_MITIGATION_BINARY_SIGNATURE_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.PROCESS_MITIGATION_FONT_DISABLE_POLICY (size: 8)
 */
export interface PROCESS_MITIGATION_FONT_DISABLE_POLICY {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPROCESS_MITIGATION_FONT_DISABLE_POLICY = 8;

export function allocPROCESS_MITIGATION_FONT_DISABLE_POLICY(data?: Partial<PROCESS_MITIGATION_FONT_DISABLE_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_MITIGATION_FONT_DISABLE_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.PROCESS_MITIGATION_IMAGE_LOAD_POLICY (size: 8)
 */
export interface PROCESS_MITIGATION_IMAGE_LOAD_POLICY {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPROCESS_MITIGATION_IMAGE_LOAD_POLICY = 8;

export function allocPROCESS_MITIGATION_IMAGE_LOAD_POLICY(data?: Partial<PROCESS_MITIGATION_IMAGE_LOAD_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_MITIGATION_IMAGE_LOAD_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY (size: 8)
 */
export interface PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY = 8;

export function allocPROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY(data?: Partial<PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY (size: 8)
 */
export interface PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY = 8;

export function allocPROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY(data?: Partial<PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.PROCESS_MITIGATION_CHILD_PROCESS_POLICY (size: 8)
 */
export interface PROCESS_MITIGATION_CHILD_PROCESS_POLICY {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPROCESS_MITIGATION_CHILD_PROCESS_POLICY = 8;

export function allocPROCESS_MITIGATION_CHILD_PROCESS_POLICY(data?: Partial<PROCESS_MITIGATION_CHILD_PROCESS_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_MITIGATION_CHILD_PROCESS_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY (size: 8)
 */
export interface PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY = 8;

export function allocPROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY(data?: Partial<PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY (size: 8)
 */
export interface PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPROCESS_MITIGATION_USER_SHADOW_STACK_POLICY = 8;

export function allocPROCESS_MITIGATION_USER_SHADOW_STACK_POLICY(data?: Partial<PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_MITIGATION_USER_SHADOW_STACK_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY (size: 8)
 */
export interface PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPROCESS_MITIGATION_REDIRECTION_TRUST_POLICY = 8;

export function allocPROCESS_MITIGATION_REDIRECTION_TRUST_POLICY(data?: Partial<PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_MITIGATION_REDIRECTION_TRUST_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V1 (size: 48)
 */
export interface JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V1 {
  /** i64 */
  MaxIops: Deno.PointerValue;
  /** i64 */
  MaxBandwidth: Deno.PointerValue;
  /** i64 */
  ReservationIops: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  VolumeName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  BaseIoSize: number;
  /** Windows.Win32.System.JobObjects.JOB_OBJECT_IO_RATE_CONTROL_FLAGS */
  ControlFlags: JOB_OBJECT_IO_RATE_CONTROL_FLAGS;
  /** u16 */
  VolumeNameLength: number;
}

export const sizeofJOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V1 = 48;

export function allocJOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V1(data?: Partial<JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V1>): Uint8Array {
  const buf = new Uint8Array(sizeofJOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V1);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.MaxIops !== undefined) view.setBigInt64(0, BigInt(data.MaxIops), true);
  // 0x08: i64
  if (data?.MaxBandwidth !== undefined) view.setBigInt64(8, BigInt(data.MaxBandwidth), true);
  // 0x10: i64
  if (data?.ReservationIops !== undefined) view.setBigInt64(16, BigInt(data.ReservationIops), true);
  // 0x18: buffer
  if (data?.VolumeName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.VolumeName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.BaseIoSize !== undefined) view.setUint32(32, Number(data.BaseIoSize), true);
  // 0x24: i32
  if (data?.ControlFlags !== undefined) view.setInt32(36, Number(data.ControlFlags), true);
  // 0x28: u16
  if (data?.VolumeNameLength !== undefined) view.setUint16(40, Number(data.VolumeNameLength), true);
  // 0x2a: pad6
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.SILOOBJECT_BASIC_INFORMATION (size: 32)
 */
export interface SILOOBJECT_BASIC_INFORMATION {
  /** u32 */
  SiloId: number;
  /** u32 */
  SiloParentId: number;
  /** u32 */
  NumberOfProcesses: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  IsInServerSilo: Uint8Array | Deno.PointerValue | null;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofSILOOBJECT_BASIC_INFORMATION = 32;

export function allocSILOOBJECT_BASIC_INFORMATION(data?: Partial<SILOOBJECT_BASIC_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSILOOBJECT_BASIC_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SiloId !== undefined) view.setUint32(0, Number(data.SiloId), true);
  // 0x04: u32
  if (data?.SiloParentId !== undefined) view.setUint32(4, Number(data.SiloParentId), true);
  // 0x08: u32
  if (data?.NumberOfProcesses !== undefined) view.setUint32(8, Number(data.NumberOfProcesses), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.IsInServerSilo !== undefined) view.setBigUint64(16, data.IsInServerSilo === null ? 0n : BigInt(util.toPointer(data.IsInServerSilo)), true);
  // 0x18: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(24, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.SERVERSILO_BASIC_INFORMATION (size: 40)
 */
export interface SERVERSILO_BASIC_INFORMATION {
  /** u32 */
  ServiceSessionId: number;
  /** Windows.Win32.System.SystemServices.SERVERSILO_STATE */
  State: SERVERSILO_STATE;
  /** u32 */
  ExitStatus: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  IsDownlevelContainer: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  ApiSetSchema: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  HostApiSetSchema: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSERVERSILO_BASIC_INFORMATION = 40;

export function allocSERVERSILO_BASIC_INFORMATION(data?: Partial<SERVERSILO_BASIC_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVERSILO_BASIC_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ServiceSessionId !== undefined) view.setUint32(0, Number(data.ServiceSessionId), true);
  // 0x04: i32
  if (data?.State !== undefined) view.setInt32(4, Number(data.State), true);
  // 0x08: u32
  if (data?.ExitStatus !== undefined) view.setUint32(8, Number(data.ExitStatus), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.IsDownlevelContainer !== undefined) view.setBigUint64(16, data.IsDownlevelContainer === null ? 0n : BigInt(util.toPointer(data.IsDownlevelContainer)), true);
  // 0x18: pointer
  if (data?.ApiSetSchema !== undefined) view.setBigUint64(24, data.ApiSetSchema === null ? 0n : BigInt(util.toPointer(data.ApiSetSchema)), true);
  // 0x20: pointer
  if (data?.HostApiSetSchema !== undefined) view.setBigUint64(32, data.HostApiSetSchema === null ? 0n : BigInt(util.toPointer(data.HostApiSetSchema)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE (size: 16)
 */
export interface MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE {
  /** Windows.Win32.System.SystemServices.MEM_DEDICATED_ATTRIBUTE_TYPE */
  Type: MEM_DEDICATED_ATTRIBUTE_TYPE;
  /** u32 */
  Reserved: number;
  /** u64 */
  Value: Deno.PointerValue;
}

export const sizeofMEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE = 16;

export function allocMEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE(data?: Partial<MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE>): Uint8Array {
  const buf = new Uint8Array(sizeofMEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  // 0x08: u64
  if (data?.Value !== undefined) view.setBigUint64(8, BigInt(data.Value), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION (size: 32)
 */
export interface MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION {
  /** u32 */
  NextEntryOffset: number;
  /** u32 */
  SizeOfInformation: number;
  /** u32 */
  Flags: number;
  /** u32 */
  AttributesOffset: number;
  /** u32 */
  AttributeCount: number;
  /** u32 */
  Reserved: number;
  /** u64 */
  TypeId: Deno.PointerValue;
}

export const sizeofMEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION = 32;

export function allocMEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION(data?: Partial<MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofMEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NextEntryOffset !== undefined) view.setUint32(0, Number(data.NextEntryOffset), true);
  // 0x04: u32
  if (data?.SizeOfInformation !== undefined) view.setUint32(4, Number(data.SizeOfInformation), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.AttributesOffset !== undefined) view.setUint32(12, Number(data.AttributesOffset), true);
  // 0x10: u32
  if (data?.AttributeCount !== undefined) view.setUint32(16, Number(data.AttributeCount), true);
  // 0x14: u32
  if (data?.Reserved !== undefined) view.setUint32(20, Number(data.Reserved), true);
  // 0x18: u64
  if (data?.TypeId !== undefined) view.setBigUint64(24, BigInt(data.TypeId), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.SCRUB_DATA_INPUT (size: 40)
 */
export interface SCRUB_DATA_INPUT {
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
  /** u32 */
  MaximumIos: number;
  /** array */
  ObjectId: Deno.PointerValue | null;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** array */
  ResumeContext: Deno.PointerValue | null;
}

export const sizeofSCRUB_DATA_INPUT = 40;

export function allocSCRUB_DATA_INPUT(data?: Partial<SCRUB_DATA_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofSCRUB_DATA_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.MaximumIos !== undefined) view.setUint32(8, Number(data.MaximumIos), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ObjectId !== undefined) view.setBigUint64(16, data.ObjectId === null ? 0n : BigInt(util.toPointer(data.ObjectId)), true);
  // 0x18: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(24, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  // 0x20: pointer
  if (data?.ResumeContext !== undefined) view.setBigUint64(32, data.ResumeContext === null ? 0n : BigInt(util.toPointer(data.ResumeContext)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.SCRUB_PARITY_EXTENT (size: 16)
 */
export interface SCRUB_PARITY_EXTENT {
  /** i64 */
  Offset: Deno.PointerValue;
  /** u64 */
  Length: Deno.PointerValue;
}

export const sizeofSCRUB_PARITY_EXTENT = 16;

export function allocSCRUB_PARITY_EXTENT(data?: Partial<SCRUB_PARITY_EXTENT>): Uint8Array {
  const buf = new Uint8Array(sizeofSCRUB_PARITY_EXTENT);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.Offset !== undefined) view.setBigInt64(0, BigInt(data.Offset), true);
  // 0x08: u64
  if (data?.Length !== undefined) view.setBigUint64(8, BigInt(data.Length), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.SCRUB_PARITY_EXTENT_DATA (size: 16)
 */
export interface SCRUB_PARITY_EXTENT_DATA {
  /** u16 */
  Size: number;
  /** u16 */
  Flags: number;
  /** u16 */
  NumberOfParityExtents: number;
  /** u16 */
  MaximumNumberOfParityExtents: number;
  /** array */
  ParityExtents: Deno.PointerValue | null;
}

export const sizeofSCRUB_PARITY_EXTENT_DATA = 16;

export function allocSCRUB_PARITY_EXTENT_DATA(data?: Partial<SCRUB_PARITY_EXTENT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSCRUB_PARITY_EXTENT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Size !== undefined) view.setUint16(0, Number(data.Size), true);
  // 0x02: u16
  if (data?.Flags !== undefined) view.setUint16(2, Number(data.Flags), true);
  // 0x04: u16
  if (data?.NumberOfParityExtents !== undefined) view.setUint16(4, Number(data.NumberOfParityExtents), true);
  // 0x06: u16
  if (data?.MaximumNumberOfParityExtents !== undefined) view.setUint16(6, Number(data.MaximumNumberOfParityExtents), true);
  // 0x08: pointer
  if (data?.ParityExtents !== undefined) view.setBigUint64(8, data.ParityExtents === null ? 0n : BigInt(util.toPointer(data.ParityExtents)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.SCRUB_DATA_OUTPUT (size: 176)
 */
export interface SCRUB_DATA_OUTPUT {
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Status: number;
  /** u64 */
  ErrorFileOffset: Deno.PointerValue;
  /** u64 */
  ErrorLength: Deno.PointerValue;
  /** u64 */
  NumberOfBytesRepaired: Deno.PointerValue;
  /** u64 */
  NumberOfBytesFailed: Deno.PointerValue;
  /** u64 */
  InternalFileReference: Deno.PointerValue;
  /** u16 */
  ResumeContextLength: number;
  /** u16 */
  ParityExtentDataOffset: number;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** u64 */
  NumberOfMetadataBytesProcessed: Deno.PointerValue;
  /** u64 */
  NumberOfDataBytesProcessed: Deno.PointerValue;
  /** u64 */
  TotalNumberOfMetadataBytesInUse: Deno.PointerValue;
  /** u64 */
  TotalNumberOfDataBytesInUse: Deno.PointerValue;
  /** u64 */
  DataBytesSkippedDueToNoAllocation: Deno.PointerValue;
  /** u64 */
  DataBytesSkippedDueToInvalidRun: Deno.PointerValue;
  /** u64 */
  DataBytesSkippedDueToIntegrityStream: Deno.PointerValue;
  /** u64 */
  DataBytesSkippedDueToRegionBeingClean: Deno.PointerValue;
  /** u64 */
  DataBytesSkippedDueToLockConflict: Deno.PointerValue;
  /** u64 */
  DataBytesSkippedDueToNoScrubDataFlag: Deno.PointerValue;
  /** u64 */
  DataBytesSkippedDueToNoScrubNonIntegrityStreamFlag: Deno.PointerValue;
  /** u64 */
  DataBytesScrubbed: Deno.PointerValue;
  /** array */
  ResumeContext: Deno.PointerValue | null;
}

export const sizeofSCRUB_DATA_OUTPUT = 176;

export function allocSCRUB_DATA_OUTPUT(data?: Partial<SCRUB_DATA_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofSCRUB_DATA_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.Status !== undefined) view.setUint32(8, Number(data.Status), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.ErrorFileOffset !== undefined) view.setBigUint64(16, BigInt(data.ErrorFileOffset), true);
  // 0x18: u64
  if (data?.ErrorLength !== undefined) view.setBigUint64(24, BigInt(data.ErrorLength), true);
  // 0x20: u64
  if (data?.NumberOfBytesRepaired !== undefined) view.setBigUint64(32, BigInt(data.NumberOfBytesRepaired), true);
  // 0x28: u64
  if (data?.NumberOfBytesFailed !== undefined) view.setBigUint64(40, BigInt(data.NumberOfBytesFailed), true);
  // 0x30: u64
  if (data?.InternalFileReference !== undefined) view.setBigUint64(48, BigInt(data.InternalFileReference), true);
  // 0x38: u16
  if (data?.ResumeContextLength !== undefined) view.setUint16(56, Number(data.ResumeContextLength), true);
  // 0x3a: u16
  if (data?.ParityExtentDataOffset !== undefined) view.setUint16(58, Number(data.ParityExtentDataOffset), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(64, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  // 0x48: u64
  if (data?.NumberOfMetadataBytesProcessed !== undefined) view.setBigUint64(72, BigInt(data.NumberOfMetadataBytesProcessed), true);
  // 0x50: u64
  if (data?.NumberOfDataBytesProcessed !== undefined) view.setBigUint64(80, BigInt(data.NumberOfDataBytesProcessed), true);
  // 0x58: u64
  if (data?.TotalNumberOfMetadataBytesInUse !== undefined) view.setBigUint64(88, BigInt(data.TotalNumberOfMetadataBytesInUse), true);
  // 0x60: u64
  if (data?.TotalNumberOfDataBytesInUse !== undefined) view.setBigUint64(96, BigInt(data.TotalNumberOfDataBytesInUse), true);
  // 0x68: u64
  if (data?.DataBytesSkippedDueToNoAllocation !== undefined) view.setBigUint64(104, BigInt(data.DataBytesSkippedDueToNoAllocation), true);
  // 0x70: u64
  if (data?.DataBytesSkippedDueToInvalidRun !== undefined) view.setBigUint64(112, BigInt(data.DataBytesSkippedDueToInvalidRun), true);
  // 0x78: u64
  if (data?.DataBytesSkippedDueToIntegrityStream !== undefined) view.setBigUint64(120, BigInt(data.DataBytesSkippedDueToIntegrityStream), true);
  // 0x80: u64
  if (data?.DataBytesSkippedDueToRegionBeingClean !== undefined) view.setBigUint64(128, BigInt(data.DataBytesSkippedDueToRegionBeingClean), true);
  // 0x88: u64
  if (data?.DataBytesSkippedDueToLockConflict !== undefined) view.setBigUint64(136, BigInt(data.DataBytesSkippedDueToLockConflict), true);
  // 0x90: u64
  if (data?.DataBytesSkippedDueToNoScrubDataFlag !== undefined) view.setBigUint64(144, BigInt(data.DataBytesSkippedDueToNoScrubDataFlag), true);
  // 0x98: u64
  if (data?.DataBytesSkippedDueToNoScrubNonIntegrityStreamFlag !== undefined) view.setBigUint64(152, BigInt(data.DataBytesSkippedDueToNoScrubNonIntegrityStreamFlag), true);
  // 0xa0: u64
  if (data?.DataBytesScrubbed !== undefined) view.setBigUint64(160, BigInt(data.DataBytesScrubbed), true);
  // 0xa8: pointer
  if (data?.ResumeContext !== undefined) view.setBigUint64(168, data.ResumeContext === null ? 0n : BigInt(util.toPointer(data.ResumeContext)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.SHARED_VIRTUAL_DISK_SUPPORT (size: 8)
 */
export interface SHARED_VIRTUAL_DISK_SUPPORT {
  /** Windows.Win32.System.SystemServices.SharedVirtualDiskSupportType */
  SharedVirtualDiskSupport: SharedVirtualDiskSupportType;
  /** Windows.Win32.System.SystemServices.SharedVirtualDiskHandleState */
  HandleState: SharedVirtualDiskHandleState;
}

export const sizeofSHARED_VIRTUAL_DISK_SUPPORT = 8;

export function allocSHARED_VIRTUAL_DISK_SUPPORT(data?: Partial<SHARED_VIRTUAL_DISK_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofSHARED_VIRTUAL_DISK_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.SharedVirtualDiskSupport !== undefined) view.setInt32(0, Number(data.SharedVirtualDiskSupport), true);
  // 0x04: i32
  if (data?.HandleState !== undefined) view.setInt32(4, Number(data.HandleState), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.REARRANGE_FILE_DATA (size: 32)
 */
export interface REARRANGE_FILE_DATA {
  /** u64 */
  SourceStartingOffset: Deno.PointerValue;
  /** u64 */
  TargetOffset: Deno.PointerValue;
  /** Windows.Win32.Foundation.HANDLE */
  SourceFileHandle: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Length: number;
  /** u32 */
  Flags: number;
}

export const sizeofREARRANGE_FILE_DATA = 32;

export function allocREARRANGE_FILE_DATA(data?: Partial<REARRANGE_FILE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofREARRANGE_FILE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.SourceStartingOffset !== undefined) view.setBigUint64(0, BigInt(data.SourceStartingOffset), true);
  // 0x08: u64
  if (data?.TargetOffset !== undefined) view.setBigUint64(8, BigInt(data.TargetOffset), true);
  // 0x10: pointer
  if (data?.SourceFileHandle !== undefined) view.setBigUint64(16, data.SourceFileHandle === null ? 0n : BigInt(util.toPointer(data.SourceFileHandle)), true);
  // 0x18: u32
  if (data?.Length !== undefined) view.setUint32(24, Number(data.Length), true);
  // 0x1c: u32
  if (data?.Flags !== undefined) view.setUint32(28, Number(data.Flags), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.SHUFFLE_FILE_DATA (size: 24)
 */
export interface SHUFFLE_FILE_DATA {
  /** i64 */
  StartingOffset: Deno.PointerValue;
  /** i64 */
  Length: Deno.PointerValue;
  /** u32 */
  Flags: number;
}

export const sizeofSHUFFLE_FILE_DATA = 24;

export function allocSHUFFLE_FILE_DATA(data?: Partial<SHUFFLE_FILE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSHUFFLE_FILE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.StartingOffset !== undefined) view.setBigInt64(0, BigInt(data.StartingOffset), true);
  // 0x08: i64
  if (data?.Length !== undefined) view.setBigInt64(8, BigInt(data.Length), true);
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.NETWORK_APP_INSTANCE_EA (size: 16)
 */
export interface NETWORK_APP_INSTANCE_EA {
  /** System.Guid */
  AppInstanceID: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  CsvFlags: number;
}

export const sizeofNETWORK_APP_INSTANCE_EA = 16;

export function allocNETWORK_APP_INSTANCE_EA(data?: Partial<NETWORK_APP_INSTANCE_EA>): Uint8Array {
  const buf = new Uint8Array(sizeofNETWORK_APP_INSTANCE_EA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AppInstanceID !== undefined) view.setBigUint64(0, data.AppInstanceID === null ? 0n : BigInt(util.toPointer(data.AppInstanceID)), true);
  // 0x08: u32
  if (data?.CsvFlags !== undefined) view.setUint32(8, Number(data.CsvFlags), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.POWER_USER_PRESENCE (size: 8)
 */
export interface POWER_USER_PRESENCE {
  /** Windows.Win32.System.SystemServices.POWER_USER_PRESENCE_TYPE */
  UserPresence: POWER_USER_PRESENCE_TYPE;
}

export const sizeofPOWER_USER_PRESENCE = 8;

export function allocPOWER_USER_PRESENCE(data?: Partial<POWER_USER_PRESENCE>): Uint8Array {
  const buf = new Uint8Array(sizeofPOWER_USER_PRESENCE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.UserPresence !== undefined) view.setInt32(0, Number(data.UserPresence), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.POWER_SESSION_CONNECT (size: 16)
 */
export interface POWER_SESSION_CONNECT {
  /** Windows.Win32.Foundation.BOOLEAN */
  Connected: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  Console: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPOWER_SESSION_CONNECT = 16;

export function allocPOWER_SESSION_CONNECT(data?: Partial<POWER_SESSION_CONNECT>): Uint8Array {
  const buf = new Uint8Array(sizeofPOWER_SESSION_CONNECT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Connected !== undefined) view.setBigUint64(0, data.Connected === null ? 0n : BigInt(util.toPointer(data.Connected)), true);
  // 0x08: pointer
  if (data?.Console !== undefined) view.setBigUint64(8, data.Console === null ? 0n : BigInt(util.toPointer(data.Console)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.POWER_SESSION_TIMEOUTS (size: 8)
 */
export interface POWER_SESSION_TIMEOUTS {
  /** u32 */
  InputTimeout: number;
  /** u32 */
  DisplayTimeout: number;
}

export const sizeofPOWER_SESSION_TIMEOUTS = 8;

export function allocPOWER_SESSION_TIMEOUTS(data?: Partial<POWER_SESSION_TIMEOUTS>): Uint8Array {
  const buf = new Uint8Array(sizeofPOWER_SESSION_TIMEOUTS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.InputTimeout !== undefined) view.setUint32(0, Number(data.InputTimeout), true);
  // 0x04: u32
  if (data?.DisplayTimeout !== undefined) view.setUint32(4, Number(data.DisplayTimeout), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.POWER_SESSION_RIT_STATE (size: 16)
 */
export interface POWER_SESSION_RIT_STATE {
  /** Windows.Win32.Foundation.BOOLEAN */
  Active: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  LastInputTime: Deno.PointerValue;
}

export const sizeofPOWER_SESSION_RIT_STATE = 16;

export function allocPOWER_SESSION_RIT_STATE(data?: Partial<POWER_SESSION_RIT_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofPOWER_SESSION_RIT_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Active !== undefined) view.setBigUint64(0, data.Active === null ? 0n : BigInt(util.toPointer(data.Active)), true);
  // 0x08: u64
  if (data?.LastInputTime !== undefined) view.setBigUint64(8, BigInt(data.LastInputTime), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.POWER_SESSION_WINLOGON (size: 24)
 */
export interface POWER_SESSION_WINLOGON {
  /** u32 */
  SessionId: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  Console: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  Locked: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPOWER_SESSION_WINLOGON = 24;

export function allocPOWER_SESSION_WINLOGON(data?: Partial<POWER_SESSION_WINLOGON>): Uint8Array {
  const buf = new Uint8Array(sizeofPOWER_SESSION_WINLOGON);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SessionId !== undefined) view.setUint32(0, Number(data.SessionId), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Console !== undefined) view.setBigUint64(8, data.Console === null ? 0n : BigInt(util.toPointer(data.Console)), true);
  // 0x10: pointer
  if (data?.Locked !== undefined) view.setBigUint64(16, data.Locked === null ? 0n : BigInt(util.toPointer(data.Locked)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES (size: 8)
 */
export interface POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES {
  /** Windows.Win32.Foundation.BOOLEAN */
  IsAllowed: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPOWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES = 8;

export function allocPOWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES(data?: Partial<POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES>): Uint8Array {
  const buf = new Uint8Array(sizeofPOWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.IsAllowed !== undefined) view.setBigUint64(0, data.IsAllowed === null ? 0n : BigInt(util.toPointer(data.IsAllowed)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.POWER_IDLE_RESILIENCY (size: 8)
 */
export interface POWER_IDLE_RESILIENCY {
  /** u32 */
  CoalescingTimeout: number;
  /** u32 */
  IdleResiliencyPeriod: number;
}

export const sizeofPOWER_IDLE_RESILIENCY = 8;

export function allocPOWER_IDLE_RESILIENCY(data?: Partial<POWER_IDLE_RESILIENCY>): Uint8Array {
  const buf = new Uint8Array(sizeofPOWER_IDLE_RESILIENCY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CoalescingTimeout !== undefined) view.setUint32(0, Number(data.CoalescingTimeout), true);
  // 0x04: u32
  if (data?.IdleResiliencyPeriod !== undefined) view.setUint32(4, Number(data.IdleResiliencyPeriod), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.POWER_MONITOR_INVOCATION (size: 16)
 */
export interface POWER_MONITOR_INVOCATION {
  /** Windows.Win32.Foundation.BOOLEAN */
  Console: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.SystemServices.POWER_MONITOR_REQUEST_REASON */
  RequestReason: POWER_MONITOR_REQUEST_REASON;
}

export const sizeofPOWER_MONITOR_INVOCATION = 16;

export function allocPOWER_MONITOR_INVOCATION(data?: Partial<POWER_MONITOR_INVOCATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPOWER_MONITOR_INVOCATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Console !== undefined) view.setBigUint64(0, data.Console === null ? 0n : BigInt(util.toPointer(data.Console)), true);
  // 0x08: i32
  if (data?.RequestReason !== undefined) view.setInt32(8, Number(data.RequestReason), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.RESUME_PERFORMANCE (size: 24)
 */
export interface RESUME_PERFORMANCE {
  /** u32 */
  PostTimeMs: number;
  /** u64 */
  TotalResumeTimeMs: Deno.PointerValue;
  /** u64 */
  ResumeCompleteTimestamp: Deno.PointerValue;
}

export const sizeofRESUME_PERFORMANCE = 24;

export function allocRESUME_PERFORMANCE(data?: Partial<RESUME_PERFORMANCE>): Uint8Array {
  const buf = new Uint8Array(sizeofRESUME_PERFORMANCE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PostTimeMs !== undefined) view.setUint32(0, Number(data.PostTimeMs), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.TotalResumeTimeMs !== undefined) view.setBigUint64(8, BigInt(data.TotalResumeTimeMs), true);
  // 0x10: u64
  if (data?.ResumeCompleteTimestamp !== undefined) view.setBigUint64(16, BigInt(data.ResumeCompleteTimestamp), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.NOTIFY_USER_POWER_SETTING (size: 8)
 */
export interface NOTIFY_USER_POWER_SETTING {
  /** System.Guid */
  Guid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNOTIFY_USER_POWER_SETTING = 8;

export function allocNOTIFY_USER_POWER_SETTING(data?: Partial<NOTIFY_USER_POWER_SETTING>): Uint8Array {
  const buf = new Uint8Array(sizeofNOTIFY_USER_POWER_SETTING);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Guid !== undefined) view.setBigUint64(0, data.Guid === null ? 0n : BigInt(util.toPointer(data.Guid)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.APPLICATIONLAUNCH_SETTING_VALUE (size: 16)
 */
export interface APPLICATIONLAUNCH_SETTING_VALUE {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ActivationTime: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
  /** u32 */
  ButtonInstanceID: number;
}

export const sizeofAPPLICATIONLAUNCH_SETTING_VALUE = 16;

export function allocAPPLICATIONLAUNCH_SETTING_VALUE(data?: Partial<APPLICATIONLAUNCH_SETTING_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofAPPLICATIONLAUNCH_SETTING_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ActivationTime !== undefined) view.setBigUint64(0, data.ActivationTime === null ? 0n : BigInt(util.toPointer(data.ActivationTime)), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.ButtonInstanceID !== undefined) view.setUint32(12, Number(data.ButtonInstanceID), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.POWER_PLATFORM_INFORMATION (size: 8)
 */
export interface POWER_PLATFORM_INFORMATION {
  /** Windows.Win32.Foundation.BOOLEAN */
  AoAc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPOWER_PLATFORM_INFORMATION = 8;

export function allocPOWER_PLATFORM_INFORMATION(data?: Partial<POWER_PLATFORM_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPOWER_PLATFORM_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AoAc !== undefined) view.setBigUint64(0, data.AoAc === null ? 0n : BigInt(util.toPointer(data.AoAc)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.PPM_WMI_LEGACY_PERFSTATE (size: 16)
 */
export interface PPM_WMI_LEGACY_PERFSTATE {
  /** u32 */
  Frequency: number;
  /** u32 */
  Flags: number;
  /** u32 */
  PercentFrequency: number;
}

export const sizeofPPM_WMI_LEGACY_PERFSTATE = 16;

export function allocPPM_WMI_LEGACY_PERFSTATE(data?: Partial<PPM_WMI_LEGACY_PERFSTATE>): Uint8Array {
  const buf = new Uint8Array(sizeofPPM_WMI_LEGACY_PERFSTATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Frequency !== undefined) view.setUint32(0, Number(data.Frequency), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.PercentFrequency !== undefined) view.setUint32(8, Number(data.PercentFrequency), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.PPM_WMI_IDLE_STATE (size: 32)
 */
export interface PPM_WMI_IDLE_STATE {
  /** u32 */
  Latency: number;
  /** u32 */
  Power: number;
  /** u32 */
  TimeCheck: number;
  /** u8 */
  PromotePercent: number;
  /** u8 */
  DemotePercent: number;
  /** u8 */
  StateType: number;
  /** u8 */
  Reserved: number;
  /** u32 */
  StateFlags: number;
  /** u32 */
  Context: number;
  /** u32 */
  IdleHandler: number;
  /** u32 */
  Reserved1: number;
}

export const sizeofPPM_WMI_IDLE_STATE = 32;

export function allocPPM_WMI_IDLE_STATE(data?: Partial<PPM_WMI_IDLE_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofPPM_WMI_IDLE_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Latency !== undefined) view.setUint32(0, Number(data.Latency), true);
  // 0x04: u32
  if (data?.Power !== undefined) view.setUint32(4, Number(data.Power), true);
  // 0x08: u32
  if (data?.TimeCheck !== undefined) view.setUint32(8, Number(data.TimeCheck), true);
  // 0x0c: u8
  if (data?.PromotePercent !== undefined) view.setUint8(12, Number(data.PromotePercent));
  // 0x0d: u8
  if (data?.DemotePercent !== undefined) view.setUint8(13, Number(data.DemotePercent));
  // 0x0e: u8
  if (data?.StateType !== undefined) view.setUint8(14, Number(data.StateType));
  // 0x0f: u8
  if (data?.Reserved !== undefined) view.setUint8(15, Number(data.Reserved));
  // 0x10: u32
  if (data?.StateFlags !== undefined) view.setUint32(16, Number(data.StateFlags), true);
  // 0x14: u32
  if (data?.Context !== undefined) view.setUint32(20, Number(data.Context), true);
  // 0x18: u32
  if (data?.IdleHandler !== undefined) view.setUint32(24, Number(data.IdleHandler), true);
  // 0x1c: u32
  if (data?.Reserved1 !== undefined) view.setUint32(28, Number(data.Reserved1), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.PPM_WMI_IDLE_STATES (size: 32)
 */
export interface PPM_WMI_IDLE_STATES {
  /** u32 */
  Type: number;
  /** u32 */
  Count: number;
  /** u32 */
  TargetState: number;
  /** u32 */
  OldState: number;
  /** u64 */
  TargetProcessors: Deno.PointerValue;
  /** array */
  State: Deno.PointerValue | null;
}

export const sizeofPPM_WMI_IDLE_STATES = 32;

export function allocPPM_WMI_IDLE_STATES(data?: Partial<PPM_WMI_IDLE_STATES>): Uint8Array {
  const buf = new Uint8Array(sizeofPPM_WMI_IDLE_STATES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Type !== undefined) view.setUint32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Count !== undefined) view.setUint32(4, Number(data.Count), true);
  // 0x08: u32
  if (data?.TargetState !== undefined) view.setUint32(8, Number(data.TargetState), true);
  // 0x0c: u32
  if (data?.OldState !== undefined) view.setUint32(12, Number(data.OldState), true);
  // 0x10: u64
  if (data?.TargetProcessors !== undefined) view.setBigUint64(16, BigInt(data.TargetProcessors), true);
  // 0x18: pointer
  if (data?.State !== undefined) view.setBigUint64(24, data.State === null ? 0n : BigInt(util.toPointer(data.State)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.PPM_WMI_IDLE_STATES_EX (size: 32)
 */
export interface PPM_WMI_IDLE_STATES_EX {
  /** u32 */
  Type: number;
  /** u32 */
  Count: number;
  /** u32 */
  TargetState: number;
  /** u32 */
  OldState: number;
  /** ptr */
  TargetProcessors: Deno.PointerValue | Uint8Array | null;
  /** array */
  State: Deno.PointerValue | null;
}

export const sizeofPPM_WMI_IDLE_STATES_EX = 32;

export function allocPPM_WMI_IDLE_STATES_EX(data?: Partial<PPM_WMI_IDLE_STATES_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofPPM_WMI_IDLE_STATES_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Type !== undefined) view.setUint32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Count !== undefined) view.setUint32(4, Number(data.Count), true);
  // 0x08: u32
  if (data?.TargetState !== undefined) view.setUint32(8, Number(data.TargetState), true);
  // 0x0c: u32
  if (data?.OldState !== undefined) view.setUint32(12, Number(data.OldState), true);
  // 0x10: pointer
  if (data?.TargetProcessors !== undefined) view.setBigUint64(16, data.TargetProcessors === null ? 0n : BigInt(util.toPointer(data.TargetProcessors)), true);
  // 0x18: pointer
  if (data?.State !== undefined) view.setBigUint64(24, data.State === null ? 0n : BigInt(util.toPointer(data.State)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.PPM_WMI_PERF_STATE (size: 64)
 */
export interface PPM_WMI_PERF_STATE {
  /** u32 */
  Frequency: number;
  /** u32 */
  Power: number;
  /** u8 */
  PercentFrequency: number;
  /** u8 */
  IncreaseLevel: number;
  /** u8 */
  DecreaseLevel: number;
  /** u8 */
  Type: number;
  /** u32 */
  IncreaseTime: number;
  /** u32 */
  DecreaseTime: number;
  /** u64 */
  Control: Deno.PointerValue;
  /** u64 */
  Status: Deno.PointerValue;
  /** u32 */
  HitCount: number;
  /** u32 */
  Reserved1: number;
  /** u64 */
  Reserved2: Deno.PointerValue;
  /** u64 */
  Reserved3: Deno.PointerValue;
}

export const sizeofPPM_WMI_PERF_STATE = 64;

export function allocPPM_WMI_PERF_STATE(data?: Partial<PPM_WMI_PERF_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofPPM_WMI_PERF_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Frequency !== undefined) view.setUint32(0, Number(data.Frequency), true);
  // 0x04: u32
  if (data?.Power !== undefined) view.setUint32(4, Number(data.Power), true);
  // 0x08: u8
  if (data?.PercentFrequency !== undefined) view.setUint8(8, Number(data.PercentFrequency));
  // 0x09: u8
  if (data?.IncreaseLevel !== undefined) view.setUint8(9, Number(data.IncreaseLevel));
  // 0x0a: u8
  if (data?.DecreaseLevel !== undefined) view.setUint8(10, Number(data.DecreaseLevel));
  // 0x0b: u8
  if (data?.Type !== undefined) view.setUint8(11, Number(data.Type));
  // 0x0c: u32
  if (data?.IncreaseTime !== undefined) view.setUint32(12, Number(data.IncreaseTime), true);
  // 0x10: u32
  if (data?.DecreaseTime !== undefined) view.setUint32(16, Number(data.DecreaseTime), true);
  // 0x14: pad4
  // 0x18: u64
  if (data?.Control !== undefined) view.setBigUint64(24, BigInt(data.Control), true);
  // 0x20: u64
  if (data?.Status !== undefined) view.setBigUint64(32, BigInt(data.Status), true);
  // 0x28: u32
  if (data?.HitCount !== undefined) view.setUint32(40, Number(data.HitCount), true);
  // 0x2c: u32
  if (data?.Reserved1 !== undefined) view.setUint32(44, Number(data.Reserved1), true);
  // 0x30: u64
  if (data?.Reserved2 !== undefined) view.setBigUint64(48, BigInt(data.Reserved2), true);
  // 0x38: u64
  if (data?.Reserved3 !== undefined) view.setBigUint64(56, BigInt(data.Reserved3), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.PPM_WMI_PERF_STATES (size: 88)
 */
export interface PPM_WMI_PERF_STATES {
  /** u32 */
  Count: number;
  /** u32 */
  MaxFrequency: number;
  /** u32 */
  CurrentState: number;
  /** u32 */
  MaxPerfState: number;
  /** u32 */
  MinPerfState: number;
  /** u32 */
  LowestPerfState: number;
  /** u32 */
  ThermalConstraint: number;
  /** u8 */
  BusyAdjThreshold: number;
  /** u8 */
  PolicyType: number;
  /** u8 */
  Type: number;
  /** u8 */
  Reserved: number;
  /** u32 */
  TimerInterval: number;
  /** u64 */
  TargetProcessors: Deno.PointerValue;
  /** u32 */
  PStateHandler: number;
  /** u32 */
  PStateContext: number;
  /** u32 */
  TStateHandler: number;
  /** u32 */
  TStateContext: number;
  /** u32 */
  FeedbackHandler: number;
  /** u32 */
  Reserved1: number;
  /** u64 */
  Reserved2: Deno.PointerValue;
  /** array */
  State: Deno.PointerValue | null;
}

export const sizeofPPM_WMI_PERF_STATES = 88;

export function allocPPM_WMI_PERF_STATES(data?: Partial<PPM_WMI_PERF_STATES>): Uint8Array {
  const buf = new Uint8Array(sizeofPPM_WMI_PERF_STATES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Count !== undefined) view.setUint32(0, Number(data.Count), true);
  // 0x04: u32
  if (data?.MaxFrequency !== undefined) view.setUint32(4, Number(data.MaxFrequency), true);
  // 0x08: u32
  if (data?.CurrentState !== undefined) view.setUint32(8, Number(data.CurrentState), true);
  // 0x0c: u32
  if (data?.MaxPerfState !== undefined) view.setUint32(12, Number(data.MaxPerfState), true);
  // 0x10: u32
  if (data?.MinPerfState !== undefined) view.setUint32(16, Number(data.MinPerfState), true);
  // 0x14: u32
  if (data?.LowestPerfState !== undefined) view.setUint32(20, Number(data.LowestPerfState), true);
  // 0x18: u32
  if (data?.ThermalConstraint !== undefined) view.setUint32(24, Number(data.ThermalConstraint), true);
  // 0x1c: u8
  if (data?.BusyAdjThreshold !== undefined) view.setUint8(28, Number(data.BusyAdjThreshold));
  // 0x1d: u8
  if (data?.PolicyType !== undefined) view.setUint8(29, Number(data.PolicyType));
  // 0x1e: u8
  if (data?.Type !== undefined) view.setUint8(30, Number(data.Type));
  // 0x1f: u8
  if (data?.Reserved !== undefined) view.setUint8(31, Number(data.Reserved));
  // 0x20: u32
  if (data?.TimerInterval !== undefined) view.setUint32(32, Number(data.TimerInterval), true);
  // 0x24: pad4
  // 0x28: u64
  if (data?.TargetProcessors !== undefined) view.setBigUint64(40, BigInt(data.TargetProcessors), true);
  // 0x30: u32
  if (data?.PStateHandler !== undefined) view.setUint32(48, Number(data.PStateHandler), true);
  // 0x34: u32
  if (data?.PStateContext !== undefined) view.setUint32(52, Number(data.PStateContext), true);
  // 0x38: u32
  if (data?.TStateHandler !== undefined) view.setUint32(56, Number(data.TStateHandler), true);
  // 0x3c: u32
  if (data?.TStateContext !== undefined) view.setUint32(60, Number(data.TStateContext), true);
  // 0x40: u32
  if (data?.FeedbackHandler !== undefined) view.setUint32(64, Number(data.FeedbackHandler), true);
  // 0x44: u32
  if (data?.Reserved1 !== undefined) view.setUint32(68, Number(data.Reserved1), true);
  // 0x48: u64
  if (data?.Reserved2 !== undefined) view.setBigUint64(72, BigInt(data.Reserved2), true);
  // 0x50: pointer
  if (data?.State !== undefined) view.setBigUint64(80, data.State === null ? 0n : BigInt(util.toPointer(data.State)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.PPM_WMI_PERF_STATES_EX (size: 88)
 */
export interface PPM_WMI_PERF_STATES_EX {
  /** u32 */
  Count: number;
  /** u32 */
  MaxFrequency: number;
  /** u32 */
  CurrentState: number;
  /** u32 */
  MaxPerfState: number;
  /** u32 */
  MinPerfState: number;
  /** u32 */
  LowestPerfState: number;
  /** u32 */
  ThermalConstraint: number;
  /** u8 */
  BusyAdjThreshold: number;
  /** u8 */
  PolicyType: number;
  /** u8 */
  Type: number;
  /** u8 */
  Reserved: number;
  /** u32 */
  TimerInterval: number;
  /** ptr */
  TargetProcessors: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  PStateHandler: number;
  /** u32 */
  PStateContext: number;
  /** u32 */
  TStateHandler: number;
  /** u32 */
  TStateContext: number;
  /** u32 */
  FeedbackHandler: number;
  /** u32 */
  Reserved1: number;
  /** u64 */
  Reserved2: Deno.PointerValue;
  /** array */
  State: Deno.PointerValue | null;
}

export const sizeofPPM_WMI_PERF_STATES_EX = 88;

export function allocPPM_WMI_PERF_STATES_EX(data?: Partial<PPM_WMI_PERF_STATES_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofPPM_WMI_PERF_STATES_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Count !== undefined) view.setUint32(0, Number(data.Count), true);
  // 0x04: u32
  if (data?.MaxFrequency !== undefined) view.setUint32(4, Number(data.MaxFrequency), true);
  // 0x08: u32
  if (data?.CurrentState !== undefined) view.setUint32(8, Number(data.CurrentState), true);
  // 0x0c: u32
  if (data?.MaxPerfState !== undefined) view.setUint32(12, Number(data.MaxPerfState), true);
  // 0x10: u32
  if (data?.MinPerfState !== undefined) view.setUint32(16, Number(data.MinPerfState), true);
  // 0x14: u32
  if (data?.LowestPerfState !== undefined) view.setUint32(20, Number(data.LowestPerfState), true);
  // 0x18: u32
  if (data?.ThermalConstraint !== undefined) view.setUint32(24, Number(data.ThermalConstraint), true);
  // 0x1c: u8
  if (data?.BusyAdjThreshold !== undefined) view.setUint8(28, Number(data.BusyAdjThreshold));
  // 0x1d: u8
  if (data?.PolicyType !== undefined) view.setUint8(29, Number(data.PolicyType));
  // 0x1e: u8
  if (data?.Type !== undefined) view.setUint8(30, Number(data.Type));
  // 0x1f: u8
  if (data?.Reserved !== undefined) view.setUint8(31, Number(data.Reserved));
  // 0x20: u32
  if (data?.TimerInterval !== undefined) view.setUint32(32, Number(data.TimerInterval), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.TargetProcessors !== undefined) view.setBigUint64(40, data.TargetProcessors === null ? 0n : BigInt(util.toPointer(data.TargetProcessors)), true);
  // 0x30: u32
  if (data?.PStateHandler !== undefined) view.setUint32(48, Number(data.PStateHandler), true);
  // 0x34: u32
  if (data?.PStateContext !== undefined) view.setUint32(52, Number(data.PStateContext), true);
  // 0x38: u32
  if (data?.TStateHandler !== undefined) view.setUint32(56, Number(data.TStateHandler), true);
  // 0x3c: u32
  if (data?.TStateContext !== undefined) view.setUint32(60, Number(data.TStateContext), true);
  // 0x40: u32
  if (data?.FeedbackHandler !== undefined) view.setUint32(64, Number(data.FeedbackHandler), true);
  // 0x44: u32
  if (data?.Reserved1 !== undefined) view.setUint32(68, Number(data.Reserved1), true);
  // 0x48: u64
  if (data?.Reserved2 !== undefined) view.setBigUint64(72, BigInt(data.Reserved2), true);
  // 0x50: pointer
  if (data?.State !== undefined) view.setBigUint64(80, data.State === null ? 0n : BigInt(util.toPointer(data.State)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.PPM_IDLE_STATE_ACCOUNTING (size: 32)
 */
export interface PPM_IDLE_STATE_ACCOUNTING {
  /** u32 */
  IdleTransitions: number;
  /** u32 */
  FailedTransitions: number;
  /** u32 */
  InvalidBucketIndex: number;
  /** u64 */
  TotalTime: Deno.PointerValue;
  /** array */
  IdleTimeBuckets: Deno.PointerValue | null;
}

export const sizeofPPM_IDLE_STATE_ACCOUNTING = 32;

export function allocPPM_IDLE_STATE_ACCOUNTING(data?: Partial<PPM_IDLE_STATE_ACCOUNTING>): Uint8Array {
  const buf = new Uint8Array(sizeofPPM_IDLE_STATE_ACCOUNTING);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.IdleTransitions !== undefined) view.setUint32(0, Number(data.IdleTransitions), true);
  // 0x04: u32
  if (data?.FailedTransitions !== undefined) view.setUint32(4, Number(data.FailedTransitions), true);
  // 0x08: u32
  if (data?.InvalidBucketIndex !== undefined) view.setUint32(8, Number(data.InvalidBucketIndex), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.TotalTime !== undefined) view.setBigUint64(16, BigInt(data.TotalTime), true);
  // 0x18: pointer
  if (data?.IdleTimeBuckets !== undefined) view.setBigUint64(24, data.IdleTimeBuckets === null ? 0n : BigInt(util.toPointer(data.IdleTimeBuckets)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.PPM_IDLE_ACCOUNTING (size: 32)
 */
export interface PPM_IDLE_ACCOUNTING {
  /** u32 */
  StateCount: number;
  /** u32 */
  TotalTransitions: number;
  /** u32 */
  ResetCount: number;
  /** u64 */
  StartTime: Deno.PointerValue;
  /** array */
  State: Deno.PointerValue | null;
}

export const sizeofPPM_IDLE_ACCOUNTING = 32;

export function allocPPM_IDLE_ACCOUNTING(data?: Partial<PPM_IDLE_ACCOUNTING>): Uint8Array {
  const buf = new Uint8Array(sizeofPPM_IDLE_ACCOUNTING);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.StateCount !== undefined) view.setUint32(0, Number(data.StateCount), true);
  // 0x04: u32
  if (data?.TotalTransitions !== undefined) view.setUint32(4, Number(data.TotalTransitions), true);
  // 0x08: u32
  if (data?.ResetCount !== undefined) view.setUint32(8, Number(data.ResetCount), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.StartTime !== undefined) view.setBigUint64(16, BigInt(data.StartTime), true);
  // 0x18: pointer
  if (data?.State !== undefined) view.setBigUint64(24, data.State === null ? 0n : BigInt(util.toPointer(data.State)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.PPM_IDLE_STATE_BUCKET_EX (size: 24)
 */
export interface PPM_IDLE_STATE_BUCKET_EX {
  /** u64 */
  TotalTimeUs: Deno.PointerValue;
  /** u32 */
  MinTimeUs: number;
  /** u32 */
  MaxTimeUs: number;
  /** u32 */
  Count: number;
}

export const sizeofPPM_IDLE_STATE_BUCKET_EX = 24;

export function allocPPM_IDLE_STATE_BUCKET_EX(data?: Partial<PPM_IDLE_STATE_BUCKET_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofPPM_IDLE_STATE_BUCKET_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.TotalTimeUs !== undefined) view.setBigUint64(0, BigInt(data.TotalTimeUs), true);
  // 0x08: u32
  if (data?.MinTimeUs !== undefined) view.setUint32(8, Number(data.MinTimeUs), true);
  // 0x0c: u32
  if (data?.MaxTimeUs !== undefined) view.setUint32(12, Number(data.MaxTimeUs), true);
  // 0x10: u32
  if (data?.Count !== undefined) view.setUint32(16, Number(data.Count), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.PPM_IDLE_STATE_ACCOUNTING_EX (size: 40)
 */
export interface PPM_IDLE_STATE_ACCOUNTING_EX {
  /** u64 */
  TotalTime: Deno.PointerValue;
  /** u32 */
  IdleTransitions: number;
  /** u32 */
  FailedTransitions: number;
  /** u32 */
  InvalidBucketIndex: number;
  /** u32 */
  MinTimeUs: number;
  /** u32 */
  MaxTimeUs: number;
  /** u32 */
  CancelledTransitions: number;
  /** array */
  IdleTimeBuckets: Deno.PointerValue | null;
}

export const sizeofPPM_IDLE_STATE_ACCOUNTING_EX = 40;

export function allocPPM_IDLE_STATE_ACCOUNTING_EX(data?: Partial<PPM_IDLE_STATE_ACCOUNTING_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofPPM_IDLE_STATE_ACCOUNTING_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.TotalTime !== undefined) view.setBigUint64(0, BigInt(data.TotalTime), true);
  // 0x08: u32
  if (data?.IdleTransitions !== undefined) view.setUint32(8, Number(data.IdleTransitions), true);
  // 0x0c: u32
  if (data?.FailedTransitions !== undefined) view.setUint32(12, Number(data.FailedTransitions), true);
  // 0x10: u32
  if (data?.InvalidBucketIndex !== undefined) view.setUint32(16, Number(data.InvalidBucketIndex), true);
  // 0x14: u32
  if (data?.MinTimeUs !== undefined) view.setUint32(20, Number(data.MinTimeUs), true);
  // 0x18: u32
  if (data?.MaxTimeUs !== undefined) view.setUint32(24, Number(data.MaxTimeUs), true);
  // 0x1c: u32
  if (data?.CancelledTransitions !== undefined) view.setUint32(28, Number(data.CancelledTransitions), true);
  // 0x20: pointer
  if (data?.IdleTimeBuckets !== undefined) view.setBigUint64(32, data.IdleTimeBuckets === null ? 0n : BigInt(util.toPointer(data.IdleTimeBuckets)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.PPM_IDLE_ACCOUNTING_EX (size: 32)
 */
export interface PPM_IDLE_ACCOUNTING_EX {
  /** u32 */
  StateCount: number;
  /** u32 */
  TotalTransitions: number;
  /** u32 */
  ResetCount: number;
  /** u32 */
  AbortCount: number;
  /** u64 */
  StartTime: Deno.PointerValue;
  /** array */
  State: Deno.PointerValue | null;
}

export const sizeofPPM_IDLE_ACCOUNTING_EX = 32;

export function allocPPM_IDLE_ACCOUNTING_EX(data?: Partial<PPM_IDLE_ACCOUNTING_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofPPM_IDLE_ACCOUNTING_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.StateCount !== undefined) view.setUint32(0, Number(data.StateCount), true);
  // 0x04: u32
  if (data?.TotalTransitions !== undefined) view.setUint32(4, Number(data.TotalTransitions), true);
  // 0x08: u32
  if (data?.ResetCount !== undefined) view.setUint32(8, Number(data.ResetCount), true);
  // 0x0c: u32
  if (data?.AbortCount !== undefined) view.setUint32(12, Number(data.AbortCount), true);
  // 0x10: u64
  if (data?.StartTime !== undefined) view.setBigUint64(16, BigInt(data.StartTime), true);
  // 0x18: pointer
  if (data?.State !== undefined) view.setBigUint64(24, data.State === null ? 0n : BigInt(util.toPointer(data.State)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.PPM_PERFSTATE_EVENT (size: 24)
 */
export interface PPM_PERFSTATE_EVENT {
  /** u32 */
  State: number;
  /** u32 */
  Status: number;
  /** u32 */
  Latency: number;
  /** u32 */
  Speed: number;
  /** u32 */
  Processor: number;
}

export const sizeofPPM_PERFSTATE_EVENT = 24;

export function allocPPM_PERFSTATE_EVENT(data?: Partial<PPM_PERFSTATE_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofPPM_PERFSTATE_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.State !== undefined) view.setUint32(0, Number(data.State), true);
  // 0x04: u32
  if (data?.Status !== undefined) view.setUint32(4, Number(data.Status), true);
  // 0x08: u32
  if (data?.Latency !== undefined) view.setUint32(8, Number(data.Latency), true);
  // 0x0c: u32
  if (data?.Speed !== undefined) view.setUint32(12, Number(data.Speed), true);
  // 0x10: u32
  if (data?.Processor !== undefined) view.setUint32(16, Number(data.Processor), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.PPM_PERFSTATE_DOMAIN_EVENT (size: 24)
 */
export interface PPM_PERFSTATE_DOMAIN_EVENT {
  /** u32 */
  State: number;
  /** u32 */
  Latency: number;
  /** u32 */
  Speed: number;
  /** u64 */
  Processors: Deno.PointerValue;
}

export const sizeofPPM_PERFSTATE_DOMAIN_EVENT = 24;

export function allocPPM_PERFSTATE_DOMAIN_EVENT(data?: Partial<PPM_PERFSTATE_DOMAIN_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofPPM_PERFSTATE_DOMAIN_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.State !== undefined) view.setUint32(0, Number(data.State), true);
  // 0x04: u32
  if (data?.Latency !== undefined) view.setUint32(4, Number(data.Latency), true);
  // 0x08: u32
  if (data?.Speed !== undefined) view.setUint32(8, Number(data.Speed), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.Processors !== undefined) view.setBigUint64(16, BigInt(data.Processors), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.PPM_IDLESTATE_EVENT (size: 16)
 */
export interface PPM_IDLESTATE_EVENT {
  /** u32 */
  NewState: number;
  /** u32 */
  OldState: number;
  /** u64 */
  Processors: Deno.PointerValue;
}

export const sizeofPPM_IDLESTATE_EVENT = 16;

export function allocPPM_IDLESTATE_EVENT(data?: Partial<PPM_IDLESTATE_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofPPM_IDLESTATE_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NewState !== undefined) view.setUint32(0, Number(data.NewState), true);
  // 0x04: u32
  if (data?.OldState !== undefined) view.setUint32(4, Number(data.OldState), true);
  // 0x08: u64
  if (data?.Processors !== undefined) view.setBigUint64(8, BigInt(data.Processors), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.PPM_THERMALCHANGE_EVENT (size: 16)
 */
export interface PPM_THERMALCHANGE_EVENT {
  /** u32 */
  ThermalConstraint: number;
  /** u64 */
  Processors: Deno.PointerValue;
}

export const sizeofPPM_THERMALCHANGE_EVENT = 16;

export function allocPPM_THERMALCHANGE_EVENT(data?: Partial<PPM_THERMALCHANGE_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofPPM_THERMALCHANGE_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ThermalConstraint !== undefined) view.setUint32(0, Number(data.ThermalConstraint), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.Processors !== undefined) view.setBigUint64(8, BigInt(data.Processors), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.PPM_THERMAL_POLICY_EVENT (size: 16)
 */
export interface PPM_THERMAL_POLICY_EVENT {
  /** u8 */
  Mode: number;
  /** u64 */
  Processors: Deno.PointerValue;
}

export const sizeofPPM_THERMAL_POLICY_EVENT = 16;

export function allocPPM_THERMAL_POLICY_EVENT(data?: Partial<PPM_THERMAL_POLICY_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofPPM_THERMAL_POLICY_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Mode !== undefined) view.setUint8(0, Number(data.Mode));
  // 0x01: pad7
  // 0x08: u64
  if (data?.Processors !== undefined) view.setBigUint64(8, BigInt(data.Processors), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.PROCESSOR_IDLESTATE_INFO (size: 16)
 */
export interface PROCESSOR_IDLESTATE_INFO {
  /** u32 */
  TimeCheck: number;
  /** u8 */
  DemotePercent: number;
  /** u8 */
  PromotePercent: number;
  /** array */
  Spare: Deno.PointerValue | null;
}

export const sizeofPROCESSOR_IDLESTATE_INFO = 16;

export function allocPROCESSOR_IDLESTATE_INFO(data?: Partial<PROCESSOR_IDLESTATE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESSOR_IDLESTATE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TimeCheck !== undefined) view.setUint32(0, Number(data.TimeCheck), true);
  // 0x04: u8
  if (data?.DemotePercent !== undefined) view.setUint8(4, Number(data.DemotePercent));
  // 0x05: u8
  if (data?.PromotePercent !== undefined) view.setUint8(5, Number(data.PromotePercent));
  // 0x06: pad2
  // 0x08: pointer
  if (data?.Spare !== undefined) view.setBigUint64(8, data.Spare === null ? 0n : BigInt(util.toPointer(data.Spare)), true);
  return buf;
}

/**
 * _Flags_e__Union (size: 16)
 */
export interface _Flags_e__Union {
  /** u16 */
  AsWORD: number;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Flags_e__Union = 16;

export function alloc_Flags_e__Union(data?: Partial<_Flags_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Flags_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.AsWORD !== undefined) view.setUint16(0, Number(data.AsWORD), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.PROCESSOR_IDLESTATE_POLICY (size: 32)
 */
export interface PROCESSOR_IDLESTATE_POLICY {
  /** u16 */
  Revision: number;
  /** _Flags_e__Union */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  PolicyCount: number;
  /** array */
  Policy: Deno.PointerValue | null;
}

export const sizeofPROCESSOR_IDLESTATE_POLICY = 32;

export function allocPROCESSOR_IDLESTATE_POLICY(data?: Partial<PROCESSOR_IDLESTATE_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESSOR_IDLESTATE_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Revision !== undefined) view.setUint16(0, Number(data.Revision), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Flags !== undefined) view.setBigUint64(8, data.Flags === null ? 0n : BigInt(util.toPointer(data.Flags)), true);
  // 0x10: u32
  if (data?.PolicyCount !== undefined) view.setUint32(16, Number(data.PolicyCount), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Policy !== undefined) view.setBigUint64(24, data.Policy === null ? 0n : BigInt(util.toPointer(data.Policy)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.PROCESSOR_PERFSTATE_POLICY (size: 40)
 */
export interface PROCESSOR_PERFSTATE_POLICY {
  /** u32 */
  Revision: number;
  /** u8 */
  MaxThrottle: number;
  /** u8 */
  MinThrottle: number;
  /** u8 */
  BusyAdjThreshold: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  TimeCheck: number;
  /** u32 */
  IncreaseTime: number;
  /** u32 */
  DecreaseTime: number;
  /** u32 */
  IncreasePercent: number;
  /** u32 */
  DecreasePercent: number;
}

export const sizeofPROCESSOR_PERFSTATE_POLICY = 40;

export function allocPROCESSOR_PERFSTATE_POLICY(data?: Partial<PROCESSOR_PERFSTATE_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESSOR_PERFSTATE_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Revision !== undefined) view.setUint32(0, Number(data.Revision), true);
  // 0x04: u8
  if (data?.MaxThrottle !== undefined) view.setUint8(4, Number(data.MaxThrottle));
  // 0x05: u8
  if (data?.MinThrottle !== undefined) view.setUint8(5, Number(data.MinThrottle));
  // 0x06: u8
  if (data?.BusyAdjThreshold !== undefined) view.setUint8(6, Number(data.BusyAdjThreshold));
  // 0x07: pad1
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: u32
  if (data?.TimeCheck !== undefined) view.setUint32(16, Number(data.TimeCheck), true);
  // 0x14: u32
  if (data?.IncreaseTime !== undefined) view.setUint32(20, Number(data.IncreaseTime), true);
  // 0x18: u32
  if (data?.DecreaseTime !== undefined) view.setUint32(24, Number(data.DecreaseTime), true);
  // 0x1c: u32
  if (data?.IncreasePercent !== undefined) view.setUint32(28, Number(data.IncreasePercent), true);
  // 0x20: u32
  if (data?.DecreasePercent !== undefined) view.setUint32(32, Number(data.DecreasePercent), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.HIBERFILE_BUCKET (size: 16)
 */
export interface HIBERFILE_BUCKET {
  /** u64 */
  MaxPhysicalMemory: Deno.PointerValue;
  /** array */
  PhysicalMemoryPercent: Deno.PointerValue | null;
}

export const sizeofHIBERFILE_BUCKET = 16;

export function allocHIBERFILE_BUCKET(data?: Partial<HIBERFILE_BUCKET>): Uint8Array {
  const buf = new Uint8Array(sizeofHIBERFILE_BUCKET);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.MaxPhysicalMemory !== undefined) view.setBigUint64(0, BigInt(data.MaxPhysicalMemory), true);
  // 0x08: pointer
  if (data?.PhysicalMemoryPercent !== undefined) view.setBigUint64(8, data.PhysicalMemoryPercent === null ? 0n : BigInt(util.toPointer(data.PhysicalMemoryPercent)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_DOS_HEADER (size: 64)
 */
export interface IMAGE_DOS_HEADER {
  /** u16 */
  e_magic: number;
  /** u16 */
  e_cblp: number;
  /** u16 */
  e_cp: number;
  /** u16 */
  e_crlc: number;
  /** u16 */
  e_cparhdr: number;
  /** u16 */
  e_minalloc: number;
  /** u16 */
  e_maxalloc: number;
  /** u16 */
  e_ss: number;
  /** u16 */
  e_sp: number;
  /** u16 */
  e_csum: number;
  /** u16 */
  e_ip: number;
  /** u16 */
  e_cs: number;
  /** u16 */
  e_lfarlc: number;
  /** u16 */
  e_ovno: number;
  /** array */
  e_res: Deno.PointerValue | null;
  /** u16 */
  e_oemid: number;
  /** u16 */
  e_oeminfo: number;
  /** array */
  e_res2: Deno.PointerValue | null;
  /** i32 */
  e_lfanew: number;
}

export const sizeofIMAGE_DOS_HEADER = 64;

export function allocIMAGE_DOS_HEADER(data?: Partial<IMAGE_DOS_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_DOS_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.e_magic !== undefined) view.setUint16(0, Number(data.e_magic), true);
  // 0x02: u16
  if (data?.e_cblp !== undefined) view.setUint16(2, Number(data.e_cblp), true);
  // 0x04: u16
  if (data?.e_cp !== undefined) view.setUint16(4, Number(data.e_cp), true);
  // 0x06: u16
  if (data?.e_crlc !== undefined) view.setUint16(6, Number(data.e_crlc), true);
  // 0x08: u16
  if (data?.e_cparhdr !== undefined) view.setUint16(8, Number(data.e_cparhdr), true);
  // 0x0a: u16
  if (data?.e_minalloc !== undefined) view.setUint16(10, Number(data.e_minalloc), true);
  // 0x0c: u16
  if (data?.e_maxalloc !== undefined) view.setUint16(12, Number(data.e_maxalloc), true);
  // 0x0e: u16
  if (data?.e_ss !== undefined) view.setUint16(14, Number(data.e_ss), true);
  // 0x10: u16
  if (data?.e_sp !== undefined) view.setUint16(16, Number(data.e_sp), true);
  // 0x12: u16
  if (data?.e_csum !== undefined) view.setUint16(18, Number(data.e_csum), true);
  // 0x14: u16
  if (data?.e_ip !== undefined) view.setUint16(20, Number(data.e_ip), true);
  // 0x16: u16
  if (data?.e_cs !== undefined) view.setUint16(22, Number(data.e_cs), true);
  // 0x18: u16
  if (data?.e_lfarlc !== undefined) view.setUint16(24, Number(data.e_lfarlc), true);
  // 0x1a: u16
  if (data?.e_ovno !== undefined) view.setUint16(26, Number(data.e_ovno), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.e_res !== undefined) view.setBigUint64(32, data.e_res === null ? 0n : BigInt(util.toPointer(data.e_res)), true);
  // 0x28: u16
  if (data?.e_oemid !== undefined) view.setUint16(40, Number(data.e_oemid), true);
  // 0x2a: u16
  if (data?.e_oeminfo !== undefined) view.setUint16(42, Number(data.e_oeminfo), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.e_res2 !== undefined) view.setBigUint64(48, data.e_res2 === null ? 0n : BigInt(util.toPointer(data.e_res2)), true);
  // 0x38: i32
  if (data?.e_lfanew !== undefined) view.setInt32(56, Number(data.e_lfanew), true);
  // 0x3c: pad4
  return buf;
}

export type CHAR = number;

/**
 * Windows.Win32.System.SystemServices.IMAGE_OS2_HEADER (size: 88)
 */
export interface IMAGE_OS2_HEADER {
  /** u16 */
  ne_magic: number;
  /** Windows.Win32.Foundation.CHAR */
  ne_ver: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.CHAR */
  ne_rev: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  ne_enttab: number;
  /** u16 */
  ne_cbenttab: number;
  /** i32 */
  ne_crc: number;
  /** u16 */
  ne_flags: number;
  /** u16 */
  ne_autodata: number;
  /** u16 */
  ne_heap: number;
  /** u16 */
  ne_stack: number;
  /** i32 */
  ne_csip: number;
  /** i32 */
  ne_sssp: number;
  /** u16 */
  ne_cseg: number;
  /** u16 */
  ne_cmod: number;
  /** u16 */
  ne_cbnrestab: number;
  /** u16 */
  ne_segtab: number;
  /** u16 */
  ne_rsrctab: number;
  /** u16 */
  ne_restab: number;
  /** u16 */
  ne_modtab: number;
  /** u16 */
  ne_imptab: number;
  /** i32 */
  ne_nrestab: number;
  /** u16 */
  ne_cmovent: number;
  /** u16 */
  ne_align: number;
  /** u16 */
  ne_cres: number;
  /** u8 */
  ne_exetyp: number;
  /** u8 */
  ne_flagsothers: number;
  /** u16 */
  ne_pretthunks: number;
  /** u16 */
  ne_psegrefbytes: number;
  /** u16 */
  ne_swaparea: number;
  /** u16 */
  ne_expver: number;
}

export const sizeofIMAGE_OS2_HEADER = 88;

export function allocIMAGE_OS2_HEADER(data?: Partial<IMAGE_OS2_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_OS2_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ne_magic !== undefined) view.setUint16(0, Number(data.ne_magic), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.ne_ver !== undefined) view.setBigUint64(8, data.ne_ver === null ? 0n : BigInt(util.toPointer(data.ne_ver)), true);
  // 0x10: pointer
  if (data?.ne_rev !== undefined) view.setBigUint64(16, data.ne_rev === null ? 0n : BigInt(util.toPointer(data.ne_rev)), true);
  // 0x18: u16
  if (data?.ne_enttab !== undefined) view.setUint16(24, Number(data.ne_enttab), true);
  // 0x1a: u16
  if (data?.ne_cbenttab !== undefined) view.setUint16(26, Number(data.ne_cbenttab), true);
  // 0x1c: i32
  if (data?.ne_crc !== undefined) view.setInt32(28, Number(data.ne_crc), true);
  // 0x20: u16
  if (data?.ne_flags !== undefined) view.setUint16(32, Number(data.ne_flags), true);
  // 0x22: u16
  if (data?.ne_autodata !== undefined) view.setUint16(34, Number(data.ne_autodata), true);
  // 0x24: u16
  if (data?.ne_heap !== undefined) view.setUint16(36, Number(data.ne_heap), true);
  // 0x26: u16
  if (data?.ne_stack !== undefined) view.setUint16(38, Number(data.ne_stack), true);
  // 0x28: i32
  if (data?.ne_csip !== undefined) view.setInt32(40, Number(data.ne_csip), true);
  // 0x2c: i32
  if (data?.ne_sssp !== undefined) view.setInt32(44, Number(data.ne_sssp), true);
  // 0x30: u16
  if (data?.ne_cseg !== undefined) view.setUint16(48, Number(data.ne_cseg), true);
  // 0x32: u16
  if (data?.ne_cmod !== undefined) view.setUint16(50, Number(data.ne_cmod), true);
  // 0x34: u16
  if (data?.ne_cbnrestab !== undefined) view.setUint16(52, Number(data.ne_cbnrestab), true);
  // 0x36: u16
  if (data?.ne_segtab !== undefined) view.setUint16(54, Number(data.ne_segtab), true);
  // 0x38: u16
  if (data?.ne_rsrctab !== undefined) view.setUint16(56, Number(data.ne_rsrctab), true);
  // 0x3a: u16
  if (data?.ne_restab !== undefined) view.setUint16(58, Number(data.ne_restab), true);
  // 0x3c: u16
  if (data?.ne_modtab !== undefined) view.setUint16(60, Number(data.ne_modtab), true);
  // 0x3e: u16
  if (data?.ne_imptab !== undefined) view.setUint16(62, Number(data.ne_imptab), true);
  // 0x40: i32
  if (data?.ne_nrestab !== undefined) view.setInt32(64, Number(data.ne_nrestab), true);
  // 0x44: u16
  if (data?.ne_cmovent !== undefined) view.setUint16(68, Number(data.ne_cmovent), true);
  // 0x46: u16
  if (data?.ne_align !== undefined) view.setUint16(70, Number(data.ne_align), true);
  // 0x48: u16
  if (data?.ne_cres !== undefined) view.setUint16(72, Number(data.ne_cres), true);
  // 0x4a: u8
  if (data?.ne_exetyp !== undefined) view.setUint8(74, Number(data.ne_exetyp));
  // 0x4b: u8
  if (data?.ne_flagsothers !== undefined) view.setUint8(75, Number(data.ne_flagsothers));
  // 0x4c: u16
  if (data?.ne_pretthunks !== undefined) view.setUint16(76, Number(data.ne_pretthunks), true);
  // 0x4e: u16
  if (data?.ne_psegrefbytes !== undefined) view.setUint16(78, Number(data.ne_psegrefbytes), true);
  // 0x50: u16
  if (data?.ne_swaparea !== undefined) view.setUint16(80, Number(data.ne_swaparea), true);
  // 0x52: u16
  if (data?.ne_expver !== undefined) view.setUint16(82, Number(data.ne_expver), true);
  // 0x54: pad4
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_VXD_HEADER (size: 200)
 */
export interface IMAGE_VXD_HEADER {
  /** u16 */
  e32_magic: number;
  /** u8 */
  e32_border: number;
  /** u8 */
  e32_worder: number;
  /** u32 */
  e32_level: number;
  /** u16 */
  e32_cpu: number;
  /** u16 */
  e32_os: number;
  /** u32 */
  e32_ver: number;
  /** u32 */
  e32_mflags: number;
  /** u32 */
  e32_mpages: number;
  /** u32 */
  e32_startobj: number;
  /** u32 */
  e32_eip: number;
  /** u32 */
  e32_stackobj: number;
  /** u32 */
  e32_esp: number;
  /** u32 */
  e32_pagesize: number;
  /** u32 */
  e32_lastpagesize: number;
  /** u32 */
  e32_fixupsize: number;
  /** u32 */
  e32_fixupsum: number;
  /** u32 */
  e32_ldrsize: number;
  /** u32 */
  e32_ldrsum: number;
  /** u32 */
  e32_objtab: number;
  /** u32 */
  e32_objcnt: number;
  /** u32 */
  e32_objmap: number;
  /** u32 */
  e32_itermap: number;
  /** u32 */
  e32_rsrctab: number;
  /** u32 */
  e32_rsrccnt: number;
  /** u32 */
  e32_restab: number;
  /** u32 */
  e32_enttab: number;
  /** u32 */
  e32_dirtab: number;
  /** u32 */
  e32_dircnt: number;
  /** u32 */
  e32_fpagetab: number;
  /** u32 */
  e32_frectab: number;
  /** u32 */
  e32_impmod: number;
  /** u32 */
  e32_impmodcnt: number;
  /** u32 */
  e32_impproc: number;
  /** u32 */
  e32_pagesum: number;
  /** u32 */
  e32_datapage: number;
  /** u32 */
  e32_preload: number;
  /** u32 */
  e32_nrestab: number;
  /** u32 */
  e32_cbnrestab: number;
  /** u32 */
  e32_nressum: number;
  /** u32 */
  e32_autodata: number;
  /** u32 */
  e32_debuginfo: number;
  /** u32 */
  e32_debuglen: number;
  /** u32 */
  e32_instpreload: number;
  /** u32 */
  e32_instdemand: number;
  /** u32 */
  e32_heapsize: number;
  /** array */
  e32_res3: Deno.PointerValue | null;
  /** u32 */
  e32_winresoff: number;
  /** u32 */
  e32_winreslen: number;
  /** u16 */
  e32_devid: number;
  /** u16 */
  e32_ddkver: number;
}

export const sizeofIMAGE_VXD_HEADER = 200;

export function allocIMAGE_VXD_HEADER(data?: Partial<IMAGE_VXD_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_VXD_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.e32_magic !== undefined) view.setUint16(0, Number(data.e32_magic), true);
  // 0x02: u8
  if (data?.e32_border !== undefined) view.setUint8(2, Number(data.e32_border));
  // 0x03: u8
  if (data?.e32_worder !== undefined) view.setUint8(3, Number(data.e32_worder));
  // 0x04: u32
  if (data?.e32_level !== undefined) view.setUint32(4, Number(data.e32_level), true);
  // 0x08: u16
  if (data?.e32_cpu !== undefined) view.setUint16(8, Number(data.e32_cpu), true);
  // 0x0a: u16
  if (data?.e32_os !== undefined) view.setUint16(10, Number(data.e32_os), true);
  // 0x0c: u32
  if (data?.e32_ver !== undefined) view.setUint32(12, Number(data.e32_ver), true);
  // 0x10: u32
  if (data?.e32_mflags !== undefined) view.setUint32(16, Number(data.e32_mflags), true);
  // 0x14: u32
  if (data?.e32_mpages !== undefined) view.setUint32(20, Number(data.e32_mpages), true);
  // 0x18: u32
  if (data?.e32_startobj !== undefined) view.setUint32(24, Number(data.e32_startobj), true);
  // 0x1c: u32
  if (data?.e32_eip !== undefined) view.setUint32(28, Number(data.e32_eip), true);
  // 0x20: u32
  if (data?.e32_stackobj !== undefined) view.setUint32(32, Number(data.e32_stackobj), true);
  // 0x24: u32
  if (data?.e32_esp !== undefined) view.setUint32(36, Number(data.e32_esp), true);
  // 0x28: u32
  if (data?.e32_pagesize !== undefined) view.setUint32(40, Number(data.e32_pagesize), true);
  // 0x2c: u32
  if (data?.e32_lastpagesize !== undefined) view.setUint32(44, Number(data.e32_lastpagesize), true);
  // 0x30: u32
  if (data?.e32_fixupsize !== undefined) view.setUint32(48, Number(data.e32_fixupsize), true);
  // 0x34: u32
  if (data?.e32_fixupsum !== undefined) view.setUint32(52, Number(data.e32_fixupsum), true);
  // 0x38: u32
  if (data?.e32_ldrsize !== undefined) view.setUint32(56, Number(data.e32_ldrsize), true);
  // 0x3c: u32
  if (data?.e32_ldrsum !== undefined) view.setUint32(60, Number(data.e32_ldrsum), true);
  // 0x40: u32
  if (data?.e32_objtab !== undefined) view.setUint32(64, Number(data.e32_objtab), true);
  // 0x44: u32
  if (data?.e32_objcnt !== undefined) view.setUint32(68, Number(data.e32_objcnt), true);
  // 0x48: u32
  if (data?.e32_objmap !== undefined) view.setUint32(72, Number(data.e32_objmap), true);
  // 0x4c: u32
  if (data?.e32_itermap !== undefined) view.setUint32(76, Number(data.e32_itermap), true);
  // 0x50: u32
  if (data?.e32_rsrctab !== undefined) view.setUint32(80, Number(data.e32_rsrctab), true);
  // 0x54: u32
  if (data?.e32_rsrccnt !== undefined) view.setUint32(84, Number(data.e32_rsrccnt), true);
  // 0x58: u32
  if (data?.e32_restab !== undefined) view.setUint32(88, Number(data.e32_restab), true);
  // 0x5c: u32
  if (data?.e32_enttab !== undefined) view.setUint32(92, Number(data.e32_enttab), true);
  // 0x60: u32
  if (data?.e32_dirtab !== undefined) view.setUint32(96, Number(data.e32_dirtab), true);
  // 0x64: u32
  if (data?.e32_dircnt !== undefined) view.setUint32(100, Number(data.e32_dircnt), true);
  // 0x68: u32
  if (data?.e32_fpagetab !== undefined) view.setUint32(104, Number(data.e32_fpagetab), true);
  // 0x6c: u32
  if (data?.e32_frectab !== undefined) view.setUint32(108, Number(data.e32_frectab), true);
  // 0x70: u32
  if (data?.e32_impmod !== undefined) view.setUint32(112, Number(data.e32_impmod), true);
  // 0x74: u32
  if (data?.e32_impmodcnt !== undefined) view.setUint32(116, Number(data.e32_impmodcnt), true);
  // 0x78: u32
  if (data?.e32_impproc !== undefined) view.setUint32(120, Number(data.e32_impproc), true);
  // 0x7c: u32
  if (data?.e32_pagesum !== undefined) view.setUint32(124, Number(data.e32_pagesum), true);
  // 0x80: u32
  if (data?.e32_datapage !== undefined) view.setUint32(128, Number(data.e32_datapage), true);
  // 0x84: u32
  if (data?.e32_preload !== undefined) view.setUint32(132, Number(data.e32_preload), true);
  // 0x88: u32
  if (data?.e32_nrestab !== undefined) view.setUint32(136, Number(data.e32_nrestab), true);
  // 0x8c: u32
  if (data?.e32_cbnrestab !== undefined) view.setUint32(140, Number(data.e32_cbnrestab), true);
  // 0x90: u32
  if (data?.e32_nressum !== undefined) view.setUint32(144, Number(data.e32_nressum), true);
  // 0x94: u32
  if (data?.e32_autodata !== undefined) view.setUint32(148, Number(data.e32_autodata), true);
  // 0x98: u32
  if (data?.e32_debuginfo !== undefined) view.setUint32(152, Number(data.e32_debuginfo), true);
  // 0x9c: u32
  if (data?.e32_debuglen !== undefined) view.setUint32(156, Number(data.e32_debuglen), true);
  // 0xa0: u32
  if (data?.e32_instpreload !== undefined) view.setUint32(160, Number(data.e32_instpreload), true);
  // 0xa4: u32
  if (data?.e32_instdemand !== undefined) view.setUint32(164, Number(data.e32_instdemand), true);
  // 0xa8: u32
  if (data?.e32_heapsize !== undefined) view.setUint32(168, Number(data.e32_heapsize), true);
  // 0xac: pad4
  // 0xb0: pointer
  if (data?.e32_res3 !== undefined) view.setBigUint64(176, data.e32_res3 === null ? 0n : BigInt(util.toPointer(data.e32_res3)), true);
  // 0xb8: u32
  if (data?.e32_winresoff !== undefined) view.setUint32(184, Number(data.e32_winresoff), true);
  // 0xbc: u32
  if (data?.e32_winreslen !== undefined) view.setUint32(188, Number(data.e32_winreslen), true);
  // 0xc0: u16
  if (data?.e32_devid !== undefined) view.setUint16(192, Number(data.e32_devid), true);
  // 0xc2: u16
  if (data?.e32_ddkver !== undefined) view.setUint16(194, Number(data.e32_ddkver), true);
  // 0xc4: pad4
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.ANON_OBJECT_HEADER (size: 32)
 */
export interface ANON_OBJECT_HEADER {
  /** u16 */
  Sig1: number;
  /** u16 */
  Sig2: number;
  /** u16 */
  Version: number;
  /** u16 */
  Machine: number;
  /** u32 */
  TimeDateStamp: number;
  /** System.Guid */
  ClassID: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SizeOfData: number;
}

export const sizeofANON_OBJECT_HEADER = 32;

export function allocANON_OBJECT_HEADER(data?: Partial<ANON_OBJECT_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofANON_OBJECT_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Sig1 !== undefined) view.setUint16(0, Number(data.Sig1), true);
  // 0x02: u16
  if (data?.Sig2 !== undefined) view.setUint16(2, Number(data.Sig2), true);
  // 0x04: u16
  if (data?.Version !== undefined) view.setUint16(4, Number(data.Version), true);
  // 0x06: u16
  if (data?.Machine !== undefined) view.setUint16(6, Number(data.Machine), true);
  // 0x08: u32
  if (data?.TimeDateStamp !== undefined) view.setUint32(8, Number(data.TimeDateStamp), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ClassID !== undefined) view.setBigUint64(16, data.ClassID === null ? 0n : BigInt(util.toPointer(data.ClassID)), true);
  // 0x18: u32
  if (data?.SizeOfData !== undefined) view.setUint32(24, Number(data.SizeOfData), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.ANON_OBJECT_HEADER_V2 (size: 40)
 */
export interface ANON_OBJECT_HEADER_V2 {
  /** u16 */
  Sig1: number;
  /** u16 */
  Sig2: number;
  /** u16 */
  Version: number;
  /** u16 */
  Machine: number;
  /** u32 */
  TimeDateStamp: number;
  /** System.Guid */
  ClassID: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SizeOfData: number;
  /** u32 */
  Flags: number;
  /** u32 */
  MetaDataSize: number;
  /** u32 */
  MetaDataOffset: number;
}

export const sizeofANON_OBJECT_HEADER_V2 = 40;

export function allocANON_OBJECT_HEADER_V2(data?: Partial<ANON_OBJECT_HEADER_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofANON_OBJECT_HEADER_V2);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Sig1 !== undefined) view.setUint16(0, Number(data.Sig1), true);
  // 0x02: u16
  if (data?.Sig2 !== undefined) view.setUint16(2, Number(data.Sig2), true);
  // 0x04: u16
  if (data?.Version !== undefined) view.setUint16(4, Number(data.Version), true);
  // 0x06: u16
  if (data?.Machine !== undefined) view.setUint16(6, Number(data.Machine), true);
  // 0x08: u32
  if (data?.TimeDateStamp !== undefined) view.setUint32(8, Number(data.TimeDateStamp), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ClassID !== undefined) view.setBigUint64(16, data.ClassID === null ? 0n : BigInt(util.toPointer(data.ClassID)), true);
  // 0x18: u32
  if (data?.SizeOfData !== undefined) view.setUint32(24, Number(data.SizeOfData), true);
  // 0x1c: u32
  if (data?.Flags !== undefined) view.setUint32(28, Number(data.Flags), true);
  // 0x20: u32
  if (data?.MetaDataSize !== undefined) view.setUint32(32, Number(data.MetaDataSize), true);
  // 0x24: u32
  if (data?.MetaDataOffset !== undefined) view.setUint32(36, Number(data.MetaDataOffset), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.ANON_OBJECT_HEADER_BIGOBJ (size: 56)
 */
export interface ANON_OBJECT_HEADER_BIGOBJ {
  /** u16 */
  Sig1: number;
  /** u16 */
  Sig2: number;
  /** u16 */
  Version: number;
  /** u16 */
  Machine: number;
  /** u32 */
  TimeDateStamp: number;
  /** System.Guid */
  ClassID: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SizeOfData: number;
  /** u32 */
  Flags: number;
  /** u32 */
  MetaDataSize: number;
  /** u32 */
  MetaDataOffset: number;
  /** u32 */
  NumberOfSections: number;
  /** u32 */
  PointerToSymbolTable: number;
  /** u32 */
  NumberOfSymbols: number;
}

export const sizeofANON_OBJECT_HEADER_BIGOBJ = 56;

export function allocANON_OBJECT_HEADER_BIGOBJ(data?: Partial<ANON_OBJECT_HEADER_BIGOBJ>): Uint8Array {
  const buf = new Uint8Array(sizeofANON_OBJECT_HEADER_BIGOBJ);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Sig1 !== undefined) view.setUint16(0, Number(data.Sig1), true);
  // 0x02: u16
  if (data?.Sig2 !== undefined) view.setUint16(2, Number(data.Sig2), true);
  // 0x04: u16
  if (data?.Version !== undefined) view.setUint16(4, Number(data.Version), true);
  // 0x06: u16
  if (data?.Machine !== undefined) view.setUint16(6, Number(data.Machine), true);
  // 0x08: u32
  if (data?.TimeDateStamp !== undefined) view.setUint32(8, Number(data.TimeDateStamp), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ClassID !== undefined) view.setBigUint64(16, data.ClassID === null ? 0n : BigInt(util.toPointer(data.ClassID)), true);
  // 0x18: u32
  if (data?.SizeOfData !== undefined) view.setUint32(24, Number(data.SizeOfData), true);
  // 0x1c: u32
  if (data?.Flags !== undefined) view.setUint32(28, Number(data.Flags), true);
  // 0x20: u32
  if (data?.MetaDataSize !== undefined) view.setUint32(32, Number(data.MetaDataSize), true);
  // 0x24: u32
  if (data?.MetaDataOffset !== undefined) view.setUint32(36, Number(data.MetaDataOffset), true);
  // 0x28: u32
  if (data?.NumberOfSections !== undefined) view.setUint32(40, Number(data.NumberOfSections), true);
  // 0x2c: u32
  if (data?.PointerToSymbolTable !== undefined) view.setUint32(44, Number(data.PointerToSymbolTable), true);
  // 0x30: u32
  if (data?.NumberOfSymbols !== undefined) view.setUint32(48, Number(data.NumberOfSymbols), true);
  // 0x34: pad4
  return buf;
}

/**
 * _Name_e__Struct (size: 8)
 */
export interface _Name_e__Struct {
  /** u32 */
  Short: number;
  /** u32 */
  Long: number;
}

export const sizeof_Name_e__Struct = 8;

export function alloc_Name_e__Struct(data?: Partial<_Name_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Name_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Short !== undefined) view.setUint32(0, Number(data.Short), true);
  // 0x04: u32
  if (data?.Long !== undefined) view.setUint32(4, Number(data.Long), true);
  return buf;
}

/**
 * _N_e__Union (size: 24)
 */
export interface _N_e__Union {
  /** array */
  ShortName: Deno.PointerValue | null;
  /** _Name_e__Struct */
  Name: Uint8Array | Deno.PointerValue | null;
  /** array */
  LongName: Deno.PointerValue | null;
}

export const sizeof_N_e__Union = 24;

export function alloc_N_e__Union(data?: Partial<_N_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_N_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ShortName !== undefined) view.setBigUint64(0, data.ShortName === null ? 0n : BigInt(util.toPointer(data.ShortName)), true);
  // 0x08: pointer
  if (data?.Name !== undefined) view.setBigUint64(8, data.Name === null ? 0n : BigInt(util.toPointer(data.Name)), true);
  // 0x10: pointer
  if (data?.LongName !== undefined) view.setBigUint64(16, data.LongName === null ? 0n : BigInt(util.toPointer(data.LongName)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_SYMBOL (size: 24)
 */
export interface IMAGE_SYMBOL {
  /** _N_e__Union */
  N: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Value: number;
  /** i16 */
  SectionNumber: number;
  /** u16 */
  Type: number;
  /** u8 */
  StorageClass: number;
  /** u8 */
  NumberOfAuxSymbols: number;
}

export const sizeofIMAGE_SYMBOL = 24;

export function allocIMAGE_SYMBOL(data?: Partial<IMAGE_SYMBOL>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_SYMBOL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.N !== undefined) view.setBigUint64(0, data.N === null ? 0n : BigInt(util.toPointer(data.N)), true);
  // 0x08: u32
  if (data?.Value !== undefined) view.setUint32(8, Number(data.Value), true);
  // 0x0c: i16
  if (data?.SectionNumber !== undefined) view.setInt16(12, Number(data.SectionNumber), true);
  // 0x0e: u16
  if (data?.Type !== undefined) view.setUint16(14, Number(data.Type), true);
  // 0x10: u8
  if (data?.StorageClass !== undefined) view.setUint8(16, Number(data.StorageClass));
  // 0x11: u8
  if (data?.NumberOfAuxSymbols !== undefined) view.setUint8(17, Number(data.NumberOfAuxSymbols));
  // 0x12: pad6
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_SYMBOL_EX (size: 24)
 */
export interface IMAGE_SYMBOL_EX {
  /** _N_e__Union */
  N: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Value: number;
  /** i32 */
  SectionNumber: number;
  /** u16 */
  Type: number;
  /** u8 */
  StorageClass: number;
  /** u8 */
  NumberOfAuxSymbols: number;
}

export const sizeofIMAGE_SYMBOL_EX = 24;

export function allocIMAGE_SYMBOL_EX(data?: Partial<IMAGE_SYMBOL_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_SYMBOL_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.N !== undefined) view.setBigUint64(0, data.N === null ? 0n : BigInt(util.toPointer(data.N)), true);
  // 0x08: u32
  if (data?.Value !== undefined) view.setUint32(8, Number(data.Value), true);
  // 0x0c: i32
  if (data?.SectionNumber !== undefined) view.setInt32(12, Number(data.SectionNumber), true);
  // 0x10: u16
  if (data?.Type !== undefined) view.setUint16(16, Number(data.Type), true);
  // 0x12: u8
  if (data?.StorageClass !== undefined) view.setUint8(18, Number(data.StorageClass));
  // 0x13: u8
  if (data?.NumberOfAuxSymbols !== undefined) view.setUint8(19, Number(data.NumberOfAuxSymbols));
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_AUX_SYMBOL_TOKEN_DEF (size: 16)
 */
export interface IMAGE_AUX_SYMBOL_TOKEN_DEF {
  /** u8 */
  bAuxType: number;
  /** u8 */
  bReserved: number;
  /** u32 */
  SymbolTableIndex: number;
  /** array */
  rgbReserved: Deno.PointerValue | null;
}

export const sizeofIMAGE_AUX_SYMBOL_TOKEN_DEF = 16;

export function allocIMAGE_AUX_SYMBOL_TOKEN_DEF(data?: Partial<IMAGE_AUX_SYMBOL_TOKEN_DEF>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_AUX_SYMBOL_TOKEN_DEF);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bAuxType !== undefined) view.setUint8(0, Number(data.bAuxType));
  // 0x01: u8
  if (data?.bReserved !== undefined) view.setUint8(1, Number(data.bReserved));
  // 0x02: u32
  if (data?.SymbolTableIndex !== undefined) view.setUint32(2, Number(data.SymbolTableIndex), true);
  // 0x06: pad2
  // 0x08: pointer
  if (data?.rgbReserved !== undefined) view.setBigUint64(8, data.rgbReserved === null ? 0n : BigInt(util.toPointer(data.rgbReserved)), true);
  return buf;
}

/**
 * _LnSz_e__Struct (size: 8)
 */
export interface _LnSz_e__Struct {
  /** u16 */
  Linenumber: number;
  /** u16 */
  Size: number;
}

export const sizeof_LnSz_e__Struct = 8;

export function alloc_LnSz_e__Struct(data?: Partial<_LnSz_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_LnSz_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Linenumber !== undefined) view.setUint16(0, Number(data.Linenumber), true);
  // 0x02: u16
  if (data?.Size !== undefined) view.setUint16(2, Number(data.Size), true);
  // 0x04: pad4
  return buf;
}

/**
 * _Misc_e__Union (size: 16)
 */
export interface _Misc_e__Union {
  /** _LnSz_e__Struct */
  LnSz: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  TotalSize: number;
}

export const sizeof_Misc_e__Union = 16;

export function alloc_Misc_e__Union(data?: Partial<_Misc_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Misc_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LnSz !== undefined) view.setBigUint64(0, data.LnSz === null ? 0n : BigInt(util.toPointer(data.LnSz)), true);
  // 0x08: u32
  if (data?.TotalSize !== undefined) view.setUint32(8, Number(data.TotalSize), true);
  // 0x0c: pad4
  return buf;
}

/**
 * _Function_e__Struct (size: 8)
 */
export interface _Function_e__Struct {
  /** u32 */
  PointerToLinenumber: number;
  /** u32 */
  PointerToNextFunction: number;
}

export const sizeof_Function_e__Struct = 8;

export function alloc_Function_e__Struct(data?: Partial<_Function_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Function_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PointerToLinenumber !== undefined) view.setUint32(0, Number(data.PointerToLinenumber), true);
  // 0x04: u32
  if (data?.PointerToNextFunction !== undefined) view.setUint32(4, Number(data.PointerToNextFunction), true);
  return buf;
}

/**
 * _Array_e__Struct (size: 8)
 */
export interface _Array_e__Struct {
  /** array */
  Dimension: Deno.PointerValue | null;
}

export const sizeof_Array_e__Struct = 8;

export function alloc_Array_e__Struct(data?: Partial<_Array_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Array_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Dimension !== undefined) view.setBigUint64(0, data.Dimension === null ? 0n : BigInt(util.toPointer(data.Dimension)), true);
  return buf;
}

/**
 * _FcnAry_e__Union (size: 16)
 */
export interface _FcnAry_e__Union {
  /** _Function_e__Struct */
  Function: Uint8Array | Deno.PointerValue | null;
  /** _Array_e__Struct */
  Array: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_FcnAry_e__Union = 16;

export function alloc_FcnAry_e__Union(data?: Partial<_FcnAry_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_FcnAry_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Function !== undefined) view.setBigUint64(0, data.Function === null ? 0n : BigInt(util.toPointer(data.Function)), true);
  // 0x08: pointer
  if (data?.Array !== undefined) view.setBigUint64(8, data.Array === null ? 0n : BigInt(util.toPointer(data.Array)), true);
  return buf;
}

/**
 * _Sym_e__Struct (size: 32)
 */
export interface _Sym_e__Struct {
  /** u32 */
  TagIndex: number;
  /** _Misc_e__Union */
  Misc: Uint8Array | Deno.PointerValue | null;
  /** _FcnAry_e__Union */
  FcnAry: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  TvIndex: number;
}

export const sizeof_Sym_e__Struct = 32;

export function alloc_Sym_e__Struct(data?: Partial<_Sym_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Sym_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TagIndex !== undefined) view.setUint32(0, Number(data.TagIndex), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Misc !== undefined) view.setBigUint64(8, data.Misc === null ? 0n : BigInt(util.toPointer(data.Misc)), true);
  // 0x10: pointer
  if (data?.FcnAry !== undefined) view.setBigUint64(16, data.FcnAry === null ? 0n : BigInt(util.toPointer(data.FcnAry)), true);
  // 0x18: u16
  if (data?.TvIndex !== undefined) view.setUint16(24, Number(data.TvIndex), true);
  // 0x1a: pad6
  return buf;
}

/**
 * _File_e__Struct (size: 8)
 */
export interface _File_e__Struct {
  /** array */
  Name: Deno.PointerValue | null;
}

export const sizeof_File_e__Struct = 8;

export function alloc_File_e__Struct(data?: Partial<_File_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_File_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Name !== undefined) view.setBigUint64(0, data.Name === null ? 0n : BigInt(util.toPointer(data.Name)), true);
  return buf;
}

/**
 * _Section_e__Struct (size: 24)
 */
export interface _Section_e__Struct {
  /** ptr */
  BaseAddress: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  AllocationAttributes: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  MaximumSize: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Section_e__Struct = 24;

export function alloc_Section_e__Struct(data?: Partial<_Section_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Section_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.BaseAddress !== undefined) view.setBigUint64(0, data.BaseAddress === null ? 0n : BigInt(util.toPointer(data.BaseAddress)), true);
  // 0x08: u32
  if (data?.AllocationAttributes !== undefined) view.setUint32(8, Number(data.AllocationAttributes), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.MaximumSize !== undefined) view.setBigUint64(16, data.MaximumSize === null ? 0n : BigInt(util.toPointer(data.MaximumSize)), true);
  return buf;
}

/**
 * _CRC_e__Struct (size: 16)
 */
export interface _CRC_e__Struct {
  /** u32 */
  crc: number;
  /** array */
  rgbReserved: Deno.PointerValue | null;
}

export const sizeof_CRC_e__Struct = 16;

export function alloc_CRC_e__Struct(data?: Partial<_CRC_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_CRC_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.crc !== undefined) view.setUint32(0, Number(data.crc), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgbReserved !== undefined) view.setBigUint64(8, data.rgbReserved === null ? 0n : BigInt(util.toPointer(data.rgbReserved)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_AUX_SYMBOL (size: 40)
 */
export interface IMAGE_AUX_SYMBOL {
  /** _Sym_e__Struct */
  Sym: Uint8Array | Deno.PointerValue | null;
  /** _File_e__Struct */
  File: Uint8Array | Deno.PointerValue | null;
  /** _Section_e__Struct */
  Section: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.SystemServices.IMAGE_AUX_SYMBOL_TOKEN_DEF */
  TokenDef: Uint8Array | Deno.PointerValue | null;
  /** _CRC_e__Struct */
  CRC: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIMAGE_AUX_SYMBOL = 40;

export function allocIMAGE_AUX_SYMBOL(data?: Partial<IMAGE_AUX_SYMBOL>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_AUX_SYMBOL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Sym !== undefined) view.setBigUint64(0, data.Sym === null ? 0n : BigInt(util.toPointer(data.Sym)), true);
  // 0x08: pointer
  if (data?.File !== undefined) view.setBigUint64(8, data.File === null ? 0n : BigInt(util.toPointer(data.File)), true);
  // 0x10: pointer
  if (data?.Section !== undefined) view.setBigUint64(16, data.Section === null ? 0n : BigInt(util.toPointer(data.Section)), true);
  // 0x18: pointer
  if (data?.TokenDef !== undefined) view.setBigUint64(24, data.TokenDef === null ? 0n : BigInt(util.toPointer(data.TokenDef)), true);
  // 0x20: pointer
  if (data?.CRC !== undefined) view.setBigUint64(32, data.CRC === null ? 0n : BigInt(util.toPointer(data.CRC)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_AUX_SYMBOL_EX (size: 40)
 */
export interface IMAGE_AUX_SYMBOL_EX {
  /** _Sym_e__Struct */
  Sym: Uint8Array | Deno.PointerValue | null;
  /** _File_e__Struct */
  File: Uint8Array | Deno.PointerValue | null;
  /** _Section_e__Struct */
  Section: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** _CRC_e__Struct */
  CRC: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIMAGE_AUX_SYMBOL_EX = 40;

export function allocIMAGE_AUX_SYMBOL_EX(data?: Partial<IMAGE_AUX_SYMBOL_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_AUX_SYMBOL_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Sym !== undefined) view.setBigUint64(0, data.Sym === null ? 0n : BigInt(util.toPointer(data.Sym)), true);
  // 0x08: pointer
  if (data?.File !== undefined) view.setBigUint64(8, data.File === null ? 0n : BigInt(util.toPointer(data.File)), true);
  // 0x10: pointer
  if (data?.Section !== undefined) view.setBigUint64(16, data.Section === null ? 0n : BigInt(util.toPointer(data.Section)), true);
  // 0x18: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(24, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x20: pointer
  if (data?.CRC !== undefined) view.setBigUint64(32, data.CRC === null ? 0n : BigInt(util.toPointer(data.CRC)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_RELOCATION (size: 16)
 */
export interface IMAGE_RELOCATION {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SymbolTableIndex: number;
  /** u16 */
  Type: number;
}

export const sizeofIMAGE_RELOCATION = 16;

export function allocIMAGE_RELOCATION(data?: Partial<IMAGE_RELOCATION>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_RELOCATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u32
  if (data?.SymbolTableIndex !== undefined) view.setUint32(8, Number(data.SymbolTableIndex), true);
  // 0x0c: u16
  if (data?.Type !== undefined) view.setUint16(12, Number(data.Type), true);
  // 0x0e: pad2
  return buf;
}

/**
 * _MiniFilter_e__Struct (size: 16)
 */
export interface _MiniFilter_e__Struct {
  /** u32 */
  FrameID: number;
  /** u32 */
  NumberOfInstances: number;
  /** u16 */
  FilterNameLength: number;
  /** u16 */
  FilterNameBufferOffset: number;
  /** u16 */
  FilterAltitudeLength: number;
  /** u16 */
  FilterAltitudeBufferOffset: number;
}

export const sizeof_MiniFilter_e__Struct = 16;

export function alloc_MiniFilter_e__Struct(data?: Partial<_MiniFilter_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_MiniFilter_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FrameID !== undefined) view.setUint32(0, Number(data.FrameID), true);
  // 0x04: u32
  if (data?.NumberOfInstances !== undefined) view.setUint32(4, Number(data.NumberOfInstances), true);
  // 0x08: u16
  if (data?.FilterNameLength !== undefined) view.setUint16(8, Number(data.FilterNameLength), true);
  // 0x0a: u16
  if (data?.FilterNameBufferOffset !== undefined) view.setUint16(10, Number(data.FilterNameBufferOffset), true);
  // 0x0c: u16
  if (data?.FilterAltitudeLength !== undefined) view.setUint16(12, Number(data.FilterAltitudeLength), true);
  // 0x0e: u16
  if (data?.FilterAltitudeBufferOffset !== undefined) view.setUint16(14, Number(data.FilterAltitudeBufferOffset), true);
  return buf;
}

/**
 * _LegacyFilter_e__Struct (size: 8)
 */
export interface _LegacyFilter_e__Struct {
  /** u16 */
  FilterNameLength: number;
  /** u16 */
  FilterNameBufferOffset: number;
}

export const sizeof_LegacyFilter_e__Struct = 8;

export function alloc_LegacyFilter_e__Struct(data?: Partial<_LegacyFilter_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_LegacyFilter_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.FilterNameLength !== undefined) view.setUint16(0, Number(data.FilterNameLength), true);
  // 0x02: u16
  if (data?.FilterNameBufferOffset !== undefined) view.setUint16(2, Number(data.FilterNameBufferOffset), true);
  // 0x04: pad4
  return buf;
}

/**
 * _Type_e__Union (size: 16)
 */
export interface _Type_e__Union {
  /** _MiniFilter_e__Struct */
  MiniFilter: Uint8Array | Deno.PointerValue | null;
  /** _LegacyFilter_e__Struct */
  LegacyFilter: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Type_e__Union = 16;

export function alloc_Type_e__Union(data?: Partial<_Type_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Type_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.MiniFilter !== undefined) view.setBigUint64(0, data.MiniFilter === null ? 0n : BigInt(util.toPointer(data.MiniFilter)), true);
  // 0x08: pointer
  if (data?.LegacyFilter !== undefined) view.setBigUint64(8, data.LegacyFilter === null ? 0n : BigInt(util.toPointer(data.LegacyFilter)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_LINENUMBER (size: 16)
 */
export interface IMAGE_LINENUMBER {
  /** _Type_e__Union */
  Type: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  Linenumber: number;
}

export const sizeofIMAGE_LINENUMBER = 16;

export function allocIMAGE_LINENUMBER(data?: Partial<IMAGE_LINENUMBER>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_LINENUMBER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Type !== undefined) view.setBigUint64(0, data.Type === null ? 0n : BigInt(util.toPointer(data.Type)), true);
  // 0x08: u16
  if (data?.Linenumber !== undefined) view.setUint16(8, Number(data.Linenumber), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_BASE_RELOCATION (size: 8)
 */
export interface IMAGE_BASE_RELOCATION {
  /** u32 */
  VirtualAddress: number;
  /** u32 */
  SizeOfBlock: number;
}

export const sizeofIMAGE_BASE_RELOCATION = 8;

export function allocIMAGE_BASE_RELOCATION(data?: Partial<IMAGE_BASE_RELOCATION>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_BASE_RELOCATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.VirtualAddress !== undefined) view.setUint32(0, Number(data.VirtualAddress), true);
  // 0x04: u32
  if (data?.SizeOfBlock !== undefined) view.setUint32(4, Number(data.SizeOfBlock), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_ARCHIVE_MEMBER_HEADER (size: 56)
 */
export interface IMAGE_ARCHIVE_MEMBER_HEADER {
  /** array */
  Name: Deno.PointerValue | null;
  /** array */
  Date: Deno.PointerValue | null;
  /** array */
  UserID: Deno.PointerValue | null;
  /** array */
  GroupID: Deno.PointerValue | null;
  /** array */
  Mode: Deno.PointerValue | null;
  /** array */
  Size: Deno.PointerValue | null;
  /** array */
  EndHeader: Deno.PointerValue | null;
}

export const sizeofIMAGE_ARCHIVE_MEMBER_HEADER = 56;

export function allocIMAGE_ARCHIVE_MEMBER_HEADER(data?: Partial<IMAGE_ARCHIVE_MEMBER_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_ARCHIVE_MEMBER_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Name !== undefined) view.setBigUint64(0, data.Name === null ? 0n : BigInt(util.toPointer(data.Name)), true);
  // 0x08: pointer
  if (data?.Date !== undefined) view.setBigUint64(8, data.Date === null ? 0n : BigInt(util.toPointer(data.Date)), true);
  // 0x10: pointer
  if (data?.UserID !== undefined) view.setBigUint64(16, data.UserID === null ? 0n : BigInt(util.toPointer(data.UserID)), true);
  // 0x18: pointer
  if (data?.GroupID !== undefined) view.setBigUint64(24, data.GroupID === null ? 0n : BigInt(util.toPointer(data.GroupID)), true);
  // 0x20: pointer
  if (data?.Mode !== undefined) view.setBigUint64(32, data.Mode === null ? 0n : BigInt(util.toPointer(data.Mode)), true);
  // 0x28: pointer
  if (data?.Size !== undefined) view.setBigUint64(40, data.Size === null ? 0n : BigInt(util.toPointer(data.Size)), true);
  // 0x30: pointer
  if (data?.EndHeader !== undefined) view.setBigUint64(48, data.EndHeader === null ? 0n : BigInt(util.toPointer(data.EndHeader)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_EXPORT_DIRECTORY (size: 40)
 */
export interface IMAGE_EXPORT_DIRECTORY {
  /** u32 */
  Characteristics: number;
  /** u32 */
  TimeDateStamp: number;
  /** u16 */
  MajorVersion: number;
  /** u16 */
  MinorVersion: number;
  /** u32 */
  Name: number;
  /** u32 */
  Base: number;
  /** u32 */
  NumberOfFunctions: number;
  /** u32 */
  NumberOfNames: number;
  /** u32 */
  AddressOfFunctions: number;
  /** u32 */
  AddressOfNames: number;
  /** u32 */
  AddressOfNameOrdinals: number;
}

export const sizeofIMAGE_EXPORT_DIRECTORY = 40;

export function allocIMAGE_EXPORT_DIRECTORY(data?: Partial<IMAGE_EXPORT_DIRECTORY>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_EXPORT_DIRECTORY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Characteristics !== undefined) view.setUint32(0, Number(data.Characteristics), true);
  // 0x04: u32
  if (data?.TimeDateStamp !== undefined) view.setUint32(4, Number(data.TimeDateStamp), true);
  // 0x08: u16
  if (data?.MajorVersion !== undefined) view.setUint16(8, Number(data.MajorVersion), true);
  // 0x0a: u16
  if (data?.MinorVersion !== undefined) view.setUint16(10, Number(data.MinorVersion), true);
  // 0x0c: u32
  if (data?.Name !== undefined) view.setUint32(12, Number(data.Name), true);
  // 0x10: u32
  if (data?.Base !== undefined) view.setUint32(16, Number(data.Base), true);
  // 0x14: u32
  if (data?.NumberOfFunctions !== undefined) view.setUint32(20, Number(data.NumberOfFunctions), true);
  // 0x18: u32
  if (data?.NumberOfNames !== undefined) view.setUint32(24, Number(data.NumberOfNames), true);
  // 0x1c: u32
  if (data?.AddressOfFunctions !== undefined) view.setUint32(28, Number(data.AddressOfFunctions), true);
  // 0x20: u32
  if (data?.AddressOfNames !== undefined) view.setUint32(32, Number(data.AddressOfNames), true);
  // 0x24: u32
  if (data?.AddressOfNameOrdinals !== undefined) view.setUint32(36, Number(data.AddressOfNameOrdinals), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_IMPORT_BY_NAME (size: 16)
 */
export interface IMAGE_IMPORT_BY_NAME {
  /** u16 */
  Hint: number;
  /** array */
  Name: Deno.PointerValue | null;
}

export const sizeofIMAGE_IMPORT_BY_NAME = 16;

export function allocIMAGE_IMPORT_BY_NAME(data?: Partial<IMAGE_IMPORT_BY_NAME>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_IMPORT_BY_NAME);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Hint !== undefined) view.setUint16(0, Number(data.Hint), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Name !== undefined) view.setBigUint64(8, data.Name === null ? 0n : BigInt(util.toPointer(data.Name)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_TLS_DIRECTORY64 (size: 48)
 */
export interface IMAGE_TLS_DIRECTORY64 {
  /** u64 */
  StartAddressOfRawData: Deno.PointerValue;
  /** u64 */
  EndAddressOfRawData: Deno.PointerValue;
  /** u64 */
  AddressOfIndex: Deno.PointerValue;
  /** u64 */
  AddressOfCallBacks: Deno.PointerValue;
  /** u32 */
  SizeOfZeroFill: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIMAGE_TLS_DIRECTORY64 = 48;

export function allocIMAGE_TLS_DIRECTORY64(data?: Partial<IMAGE_TLS_DIRECTORY64>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_TLS_DIRECTORY64);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.StartAddressOfRawData !== undefined) view.setBigUint64(0, BigInt(data.StartAddressOfRawData), true);
  // 0x08: u64
  if (data?.EndAddressOfRawData !== undefined) view.setBigUint64(8, BigInt(data.EndAddressOfRawData), true);
  // 0x10: u64
  if (data?.AddressOfIndex !== undefined) view.setBigUint64(16, BigInt(data.AddressOfIndex), true);
  // 0x18: u64
  if (data?.AddressOfCallBacks !== undefined) view.setBigUint64(24, BigInt(data.AddressOfCallBacks), true);
  // 0x20: u32
  if (data?.SizeOfZeroFill !== undefined) view.setUint32(32, Number(data.SizeOfZeroFill), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(40, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_TLS_DIRECTORY32 (size: 32)
 */
export interface IMAGE_TLS_DIRECTORY32 {
  /** u32 */
  StartAddressOfRawData: number;
  /** u32 */
  EndAddressOfRawData: number;
  /** u32 */
  AddressOfIndex: number;
  /** u32 */
  AddressOfCallBacks: number;
  /** u32 */
  SizeOfZeroFill: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIMAGE_TLS_DIRECTORY32 = 32;

export function allocIMAGE_TLS_DIRECTORY32(data?: Partial<IMAGE_TLS_DIRECTORY32>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_TLS_DIRECTORY32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.StartAddressOfRawData !== undefined) view.setUint32(0, Number(data.StartAddressOfRawData), true);
  // 0x04: u32
  if (data?.EndAddressOfRawData !== undefined) view.setUint32(4, Number(data.EndAddressOfRawData), true);
  // 0x08: u32
  if (data?.AddressOfIndex !== undefined) view.setUint32(8, Number(data.AddressOfIndex), true);
  // 0x0c: u32
  if (data?.AddressOfCallBacks !== undefined) view.setUint32(12, Number(data.AddressOfCallBacks), true);
  // 0x10: u32
  if (data?.SizeOfZeroFill !== undefined) view.setUint32(16, Number(data.SizeOfZeroFill), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(24, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_IMPORT_DESCRIPTOR (size: 24)
 */
export interface IMAGE_IMPORT_DESCRIPTOR {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  TimeDateStamp: number;
  /** u32 */
  ForwarderChain: number;
  /** u32 */
  Name: number;
  /** u32 */
  FirstThunk: number;
}

export const sizeofIMAGE_IMPORT_DESCRIPTOR = 24;

export function allocIMAGE_IMPORT_DESCRIPTOR(data?: Partial<IMAGE_IMPORT_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_IMPORT_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u32
  if (data?.TimeDateStamp !== undefined) view.setUint32(8, Number(data.TimeDateStamp), true);
  // 0x0c: u32
  if (data?.ForwarderChain !== undefined) view.setUint32(12, Number(data.ForwarderChain), true);
  // 0x10: u32
  if (data?.Name !== undefined) view.setUint32(16, Number(data.Name), true);
  // 0x14: u32
  if (data?.FirstThunk !== undefined) view.setUint32(20, Number(data.FirstThunk), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_BOUND_IMPORT_DESCRIPTOR (size: 8)
 */
export interface IMAGE_BOUND_IMPORT_DESCRIPTOR {
  /** u32 */
  TimeDateStamp: number;
  /** u16 */
  OffsetModuleName: number;
  /** u16 */
  NumberOfModuleForwarderRefs: number;
}

export const sizeofIMAGE_BOUND_IMPORT_DESCRIPTOR = 8;

export function allocIMAGE_BOUND_IMPORT_DESCRIPTOR(data?: Partial<IMAGE_BOUND_IMPORT_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_BOUND_IMPORT_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TimeDateStamp !== undefined) view.setUint32(0, Number(data.TimeDateStamp), true);
  // 0x04: u16
  if (data?.OffsetModuleName !== undefined) view.setUint16(4, Number(data.OffsetModuleName), true);
  // 0x06: u16
  if (data?.NumberOfModuleForwarderRefs !== undefined) view.setUint16(6, Number(data.NumberOfModuleForwarderRefs), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_BOUND_FORWARDER_REF (size: 8)
 */
export interface IMAGE_BOUND_FORWARDER_REF {
  /** u32 */
  TimeDateStamp: number;
  /** u16 */
  OffsetModuleName: number;
  /** u16 */
  Reserved: number;
}

export const sizeofIMAGE_BOUND_FORWARDER_REF = 8;

export function allocIMAGE_BOUND_FORWARDER_REF(data?: Partial<IMAGE_BOUND_FORWARDER_REF>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_BOUND_FORWARDER_REF);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TimeDateStamp !== undefined) view.setUint32(0, Number(data.TimeDateStamp), true);
  // 0x04: u16
  if (data?.OffsetModuleName !== undefined) view.setUint16(4, Number(data.OffsetModuleName), true);
  // 0x06: u16
  if (data?.Reserved !== undefined) view.setUint16(6, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_RESOURCE_DIRECTORY (size: 16)
 */
export interface IMAGE_RESOURCE_DIRECTORY {
  /** u32 */
  Characteristics: number;
  /** u32 */
  TimeDateStamp: number;
  /** u16 */
  MajorVersion: number;
  /** u16 */
  MinorVersion: number;
  /** u16 */
  NumberOfNamedEntries: number;
  /** u16 */
  NumberOfIdEntries: number;
}

export const sizeofIMAGE_RESOURCE_DIRECTORY = 16;

export function allocIMAGE_RESOURCE_DIRECTORY(data?: Partial<IMAGE_RESOURCE_DIRECTORY>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_RESOURCE_DIRECTORY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Characteristics !== undefined) view.setUint32(0, Number(data.Characteristics), true);
  // 0x04: u32
  if (data?.TimeDateStamp !== undefined) view.setUint32(4, Number(data.TimeDateStamp), true);
  // 0x08: u16
  if (data?.MajorVersion !== undefined) view.setUint16(8, Number(data.MajorVersion), true);
  // 0x0a: u16
  if (data?.MinorVersion !== undefined) view.setUint16(10, Number(data.MinorVersion), true);
  // 0x0c: u16
  if (data?.NumberOfNamedEntries !== undefined) view.setUint16(12, Number(data.NumberOfNamedEntries), true);
  // 0x0e: u16
  if (data?.NumberOfIdEntries !== undefined) view.setUint16(14, Number(data.NumberOfIdEntries), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_RESOURCE_DIRECTORY_ENTRY (size: 16)
 */
export interface IMAGE_RESOURCE_DIRECTORY_ENTRY {
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIMAGE_RESOURCE_DIRECTORY_ENTRY = 16;

export function allocIMAGE_RESOURCE_DIRECTORY_ENTRY(data?: Partial<IMAGE_RESOURCE_DIRECTORY_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_RESOURCE_DIRECTORY_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(0, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x08: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(8, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_RESOURCE_DIRECTORY_STRING (size: 16)
 */
export interface IMAGE_RESOURCE_DIRECTORY_STRING {
  /** u16 */
  Length: number;
  /** array */
  NameString: Deno.PointerValue | null;
}

export const sizeofIMAGE_RESOURCE_DIRECTORY_STRING = 16;

export function allocIMAGE_RESOURCE_DIRECTORY_STRING(data?: Partial<IMAGE_RESOURCE_DIRECTORY_STRING>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_RESOURCE_DIRECTORY_STRING);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Length !== undefined) view.setUint16(0, Number(data.Length), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.NameString !== undefined) view.setBigUint64(8, data.NameString === null ? 0n : BigInt(util.toPointer(data.NameString)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_RESOURCE_DIR_STRING_U (size: 16)
 */
export interface IMAGE_RESOURCE_DIR_STRING_U {
  /** u16 */
  Length: number;
  /** array */
  NameString: Deno.PointerValue | null;
}

export const sizeofIMAGE_RESOURCE_DIR_STRING_U = 16;

export function allocIMAGE_RESOURCE_DIR_STRING_U(data?: Partial<IMAGE_RESOURCE_DIR_STRING_U>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_RESOURCE_DIR_STRING_U);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Length !== undefined) view.setUint16(0, Number(data.Length), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.NameString !== undefined) view.setBigUint64(8, data.NameString === null ? 0n : BigInt(util.toPointer(data.NameString)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_RESOURCE_DATA_ENTRY (size: 16)
 */
export interface IMAGE_RESOURCE_DATA_ENTRY {
  /** u32 */
  OffsetToData: number;
  /** u32 */
  Size: number;
  /** u32 */
  CodePage: number;
  /** u32 */
  Reserved: number;
}

export const sizeofIMAGE_RESOURCE_DATA_ENTRY = 16;

export function allocIMAGE_RESOURCE_DATA_ENTRY(data?: Partial<IMAGE_RESOURCE_DATA_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_RESOURCE_DATA_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.OffsetToData !== undefined) view.setUint32(0, Number(data.OffsetToData), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.CodePage !== undefined) view.setUint32(8, Number(data.CodePage), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_DYNAMIC_RELOCATION_TABLE (size: 8)
 */
export interface IMAGE_DYNAMIC_RELOCATION_TABLE {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
}

export const sizeofIMAGE_DYNAMIC_RELOCATION_TABLE = 8;

export function allocIMAGE_DYNAMIC_RELOCATION_TABLE(data?: Partial<IMAGE_DYNAMIC_RELOCATION_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_DYNAMIC_RELOCATION_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_DYNAMIC_RELOCATION32 (size: 8)
 */
export interface IMAGE_DYNAMIC_RELOCATION32 {
  /** u32 */
  Symbol: number;
  /** u32 */
  BaseRelocSize: number;
}

export const sizeofIMAGE_DYNAMIC_RELOCATION32 = 8;

export function allocIMAGE_DYNAMIC_RELOCATION32(data?: Partial<IMAGE_DYNAMIC_RELOCATION32>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_DYNAMIC_RELOCATION32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Symbol !== undefined) view.setUint32(0, Number(data.Symbol), true);
  // 0x04: u32
  if (data?.BaseRelocSize !== undefined) view.setUint32(4, Number(data.BaseRelocSize), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_DYNAMIC_RELOCATION64 (size: 16)
 */
export interface IMAGE_DYNAMIC_RELOCATION64 {
  /** u64 */
  Symbol: Deno.PointerValue;
  /** u32 */
  BaseRelocSize: number;
}

export const sizeofIMAGE_DYNAMIC_RELOCATION64 = 16;

export function allocIMAGE_DYNAMIC_RELOCATION64(data?: Partial<IMAGE_DYNAMIC_RELOCATION64>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_DYNAMIC_RELOCATION64);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Symbol !== undefined) view.setBigUint64(0, BigInt(data.Symbol), true);
  // 0x08: u32
  if (data?.BaseRelocSize !== undefined) view.setUint32(8, Number(data.BaseRelocSize), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_DYNAMIC_RELOCATION32_V2 (size: 24)
 */
export interface IMAGE_DYNAMIC_RELOCATION32_V2 {
  /** u32 */
  HeaderSize: number;
  /** u32 */
  FixupInfoSize: number;
  /** u32 */
  Symbol: number;
  /** u32 */
  SymbolGroup: number;
  /** u32 */
  Flags: number;
}

export const sizeofIMAGE_DYNAMIC_RELOCATION32_V2 = 24;

export function allocIMAGE_DYNAMIC_RELOCATION32_V2(data?: Partial<IMAGE_DYNAMIC_RELOCATION32_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_DYNAMIC_RELOCATION32_V2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.HeaderSize !== undefined) view.setUint32(0, Number(data.HeaderSize), true);
  // 0x04: u32
  if (data?.FixupInfoSize !== undefined) view.setUint32(4, Number(data.FixupInfoSize), true);
  // 0x08: u32
  if (data?.Symbol !== undefined) view.setUint32(8, Number(data.Symbol), true);
  // 0x0c: u32
  if (data?.SymbolGroup !== undefined) view.setUint32(12, Number(data.SymbolGroup), true);
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_DYNAMIC_RELOCATION64_V2 (size: 24)
 */
export interface IMAGE_DYNAMIC_RELOCATION64_V2 {
  /** u32 */
  HeaderSize: number;
  /** u32 */
  FixupInfoSize: number;
  /** u64 */
  Symbol: Deno.PointerValue;
  /** u32 */
  SymbolGroup: number;
  /** u32 */
  Flags: number;
}

export const sizeofIMAGE_DYNAMIC_RELOCATION64_V2 = 24;

export function allocIMAGE_DYNAMIC_RELOCATION64_V2(data?: Partial<IMAGE_DYNAMIC_RELOCATION64_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_DYNAMIC_RELOCATION64_V2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.HeaderSize !== undefined) view.setUint32(0, Number(data.HeaderSize), true);
  // 0x04: u32
  if (data?.FixupInfoSize !== undefined) view.setUint32(4, Number(data.FixupInfoSize), true);
  // 0x08: u64
  if (data?.Symbol !== undefined) view.setBigUint64(8, BigInt(data.Symbol), true);
  // 0x10: u32
  if (data?.SymbolGroup !== undefined) view.setUint32(16, Number(data.SymbolGroup), true);
  // 0x14: u32
  if (data?.Flags !== undefined) view.setUint32(20, Number(data.Flags), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER (size: 8)
 */
export interface IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER {
  /** u8 */
  PrologueByteCount: number;
}

export const sizeofIMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER = 8;

export function allocIMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER(data?: Partial<IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.PrologueByteCount !== undefined) view.setUint8(0, Number(data.PrologueByteCount));
  // 0x01: pad7
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER (size: 8)
 */
export interface IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER {
  /** u32 */
  EpilogueCount: number;
  /** u8 */
  EpilogueByteCount: number;
  /** u8 */
  BranchDescriptorElementSize: number;
  /** u16 */
  BranchDescriptorCount: number;
}

export const sizeofIMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER = 8;

export function allocIMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER(data?: Partial<IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.EpilogueCount !== undefined) view.setUint32(0, Number(data.EpilogueCount), true);
  // 0x04: u8
  if (data?.EpilogueByteCount !== undefined) view.setUint8(4, Number(data.EpilogueByteCount));
  // 0x05: u8
  if (data?.BranchDescriptorElementSize !== undefined) view.setUint8(5, Number(data.BranchDescriptorElementSize));
  // 0x06: u16
  if (data?.BranchDescriptorCount !== undefined) view.setUint16(6, Number(data.BranchDescriptorCount), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION (size: 8)
 */
export interface IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION {
  /** u32 */
  _bitfield: number;
}

export const sizeofIMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION = 8;

export function allocIMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION(data?: Partial<IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?._bitfield !== undefined) view.setUint32(0, Number(data._bitfield), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION (size: 8)
 */
export interface IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION {
  /** u16 */
  _bitfield: number;
}

export const sizeofIMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION = 8;

export function allocIMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION(data?: Partial<IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?._bitfield !== undefined) view.setUint16(0, Number(data._bitfield), true);
  // 0x02: pad6
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION (size: 8)
 */
export interface IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION {
  /** u16 */
  _bitfield: number;
}

export const sizeofIMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION = 8;

export function allocIMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION(data?: Partial<IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?._bitfield !== undefined) view.setUint16(0, Number(data._bitfield), true);
  // 0x02: pad6
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_HOT_PATCH_INFO (size: 32)
 */
export interface IMAGE_HOT_PATCH_INFO {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  SequenceNumber: number;
  /** u32 */
  BaseImageList: number;
  /** u32 */
  BaseImageCount: number;
  /** u32 */
  BufferOffset: number;
  /** u32 */
  ExtraPatchSize: number;
}

export const sizeofIMAGE_HOT_PATCH_INFO = 32;

export function allocIMAGE_HOT_PATCH_INFO(data?: Partial<IMAGE_HOT_PATCH_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_HOT_PATCH_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.SequenceNumber !== undefined) view.setUint32(8, Number(data.SequenceNumber), true);
  // 0x0c: u32
  if (data?.BaseImageList !== undefined) view.setUint32(12, Number(data.BaseImageList), true);
  // 0x10: u32
  if (data?.BaseImageCount !== undefined) view.setUint32(16, Number(data.BaseImageCount), true);
  // 0x14: u32
  if (data?.BufferOffset !== undefined) view.setUint32(20, Number(data.BufferOffset), true);
  // 0x18: u32
  if (data?.ExtraPatchSize !== undefined) view.setUint32(24, Number(data.ExtraPatchSize), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_HOT_PATCH_BASE (size: 32)
 */
export interface IMAGE_HOT_PATCH_BASE {
  /** u32 */
  SequenceNumber: number;
  /** u32 */
  Flags: number;
  /** u32 */
  OriginalTimeDateStamp: number;
  /** u32 */
  OriginalCheckSum: number;
  /** u32 */
  CodeIntegrityInfo: number;
  /** u32 */
  CodeIntegritySize: number;
  /** u32 */
  PatchTable: number;
  /** u32 */
  BufferOffset: number;
}

export const sizeofIMAGE_HOT_PATCH_BASE = 32;

export function allocIMAGE_HOT_PATCH_BASE(data?: Partial<IMAGE_HOT_PATCH_BASE>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_HOT_PATCH_BASE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SequenceNumber !== undefined) view.setUint32(0, Number(data.SequenceNumber), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.OriginalTimeDateStamp !== undefined) view.setUint32(8, Number(data.OriginalTimeDateStamp), true);
  // 0x0c: u32
  if (data?.OriginalCheckSum !== undefined) view.setUint32(12, Number(data.OriginalCheckSum), true);
  // 0x10: u32
  if (data?.CodeIntegrityInfo !== undefined) view.setUint32(16, Number(data.CodeIntegrityInfo), true);
  // 0x14: u32
  if (data?.CodeIntegritySize !== undefined) view.setUint32(20, Number(data.CodeIntegritySize), true);
  // 0x18: u32
  if (data?.PatchTable !== undefined) view.setUint32(24, Number(data.PatchTable), true);
  // 0x1c: u32
  if (data?.BufferOffset !== undefined) view.setUint32(28, Number(data.BufferOffset), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_HOT_PATCH_HASHES (size: 16)
 */
export interface IMAGE_HOT_PATCH_HASHES {
  /** array */
  SHA256: Deno.PointerValue | null;
  /** array */
  SHA1: Deno.PointerValue | null;
}

export const sizeofIMAGE_HOT_PATCH_HASHES = 16;

export function allocIMAGE_HOT_PATCH_HASHES(data?: Partial<IMAGE_HOT_PATCH_HASHES>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_HOT_PATCH_HASHES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SHA256 !== undefined) view.setBigUint64(0, data.SHA256 === null ? 0n : BigInt(util.toPointer(data.SHA256)), true);
  // 0x08: pointer
  if (data?.SHA1 !== undefined) view.setBigUint64(8, data.SHA1 === null ? 0n : BigInt(util.toPointer(data.SHA1)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_CE_RUNTIME_FUNCTION_ENTRY (size: 8)
 */
export interface IMAGE_CE_RUNTIME_FUNCTION_ENTRY {
  /** u32 */
  FuncStart: number;
  /** u32 */
  _bitfield: number;
}

export const sizeofIMAGE_CE_RUNTIME_FUNCTION_ENTRY = 8;

export function allocIMAGE_CE_RUNTIME_FUNCTION_ENTRY(data?: Partial<IMAGE_CE_RUNTIME_FUNCTION_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_CE_RUNTIME_FUNCTION_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FuncStart !== undefined) view.setUint32(0, Number(data.FuncStart), true);
  // 0x04: u32
  if (data?._bitfield !== undefined) view.setUint32(4, Number(data._bitfield), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_ARM_RUNTIME_FUNCTION_ENTRY (size: 16)
 */
export interface IMAGE_ARM_RUNTIME_FUNCTION_ENTRY {
  /** u32 */
  BeginAddress: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIMAGE_ARM_RUNTIME_FUNCTION_ENTRY = 16;

export function allocIMAGE_ARM_RUNTIME_FUNCTION_ENTRY(data?: Partial<IMAGE_ARM_RUNTIME_FUNCTION_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_ARM_RUNTIME_FUNCTION_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BeginAddress !== undefined) view.setUint32(0, Number(data.BeginAddress), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA (size: 16)
 */
export interface IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA {
  /** u32 */
  HeaderData: number;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA = 16;

export function allocIMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA(data?: Partial<IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.HeaderData !== undefined) view.setUint32(0, Number(data.HeaderData), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY (size: 40)
 */
export interface IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {
  /** u64 */
  BeginAddress: Deno.PointerValue;
  /** u64 */
  EndAddress: Deno.PointerValue;
  /** u64 */
  ExceptionHandler: Deno.PointerValue;
  /** u64 */
  HandlerData: Deno.PointerValue;
  /** u64 */
  PrologEndAddress: Deno.PointerValue;
}

export const sizeofIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY = 40;

export function allocIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY(data?: Partial<IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.BeginAddress !== undefined) view.setBigUint64(0, BigInt(data.BeginAddress), true);
  // 0x08: u64
  if (data?.EndAddress !== undefined) view.setBigUint64(8, BigInt(data.EndAddress), true);
  // 0x10: u64
  if (data?.ExceptionHandler !== undefined) view.setBigUint64(16, BigInt(data.ExceptionHandler), true);
  // 0x18: u64
  if (data?.HandlerData !== undefined) view.setBigUint64(24, BigInt(data.HandlerData), true);
  // 0x20: u64
  if (data?.PrologEndAddress !== undefined) view.setBigUint64(32, BigInt(data.PrologEndAddress), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY (size: 24)
 */
export interface IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {
  /** u32 */
  BeginAddress: number;
  /** u32 */
  EndAddress: number;
  /** u32 */
  ExceptionHandler: number;
  /** u32 */
  HandlerData: number;
  /** u32 */
  PrologEndAddress: number;
}

export const sizeofIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY = 24;

export function allocIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY(data?: Partial<IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BeginAddress !== undefined) view.setUint32(0, Number(data.BeginAddress), true);
  // 0x04: u32
  if (data?.EndAddress !== undefined) view.setUint32(4, Number(data.EndAddress), true);
  // 0x08: u32
  if (data?.ExceptionHandler !== undefined) view.setUint32(8, Number(data.ExceptionHandler), true);
  // 0x0c: u32
  if (data?.HandlerData !== undefined) view.setUint32(12, Number(data.HandlerData), true);
  // 0x10: u32
  if (data?.PrologEndAddress !== undefined) view.setUint32(16, Number(data.PrologEndAddress), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_DEBUG_MISC (size: 32)
 */
export interface IMAGE_DEBUG_MISC {
  /** u32 */
  DataType: number;
  /** u32 */
  Length: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  Unicode: Uint8Array | Deno.PointerValue | null;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** array */
  Data: Deno.PointerValue | null;
}

export const sizeofIMAGE_DEBUG_MISC = 32;

export function allocIMAGE_DEBUG_MISC(data?: Partial<IMAGE_DEBUG_MISC>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_DEBUG_MISC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DataType !== undefined) view.setUint32(0, Number(data.DataType), true);
  // 0x04: u32
  if (data?.Length !== undefined) view.setUint32(4, Number(data.Length), true);
  // 0x08: pointer
  if (data?.Unicode !== undefined) view.setBigUint64(8, data.Unicode === null ? 0n : BigInt(util.toPointer(data.Unicode)), true);
  // 0x10: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(16, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  // 0x18: pointer
  if (data?.Data !== undefined) view.setBigUint64(24, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_SEPARATE_DEBUG_HEADER (size: 48)
 */
export interface IMAGE_SEPARATE_DEBUG_HEADER {
  /** u16 */
  Signature: number;
  /** u16 */
  Flags: number;
  /** u16 */
  Machine: number;
  /** u16 */
  Characteristics: number;
  /** u32 */
  TimeDateStamp: number;
  /** u32 */
  CheckSum: number;
  /** u32 */
  ImageBase: number;
  /** u32 */
  SizeOfImage: number;
  /** u32 */
  NumberOfSections: number;
  /** u32 */
  ExportedNamesSize: number;
  /** u32 */
  DebugDirectorySize: number;
  /** u32 */
  SectionAlignment: number;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofIMAGE_SEPARATE_DEBUG_HEADER = 48;

export function allocIMAGE_SEPARATE_DEBUG_HEADER(data?: Partial<IMAGE_SEPARATE_DEBUG_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_SEPARATE_DEBUG_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Signature !== undefined) view.setUint16(0, Number(data.Signature), true);
  // 0x02: u16
  if (data?.Flags !== undefined) view.setUint16(2, Number(data.Flags), true);
  // 0x04: u16
  if (data?.Machine !== undefined) view.setUint16(4, Number(data.Machine), true);
  // 0x06: u16
  if (data?.Characteristics !== undefined) view.setUint16(6, Number(data.Characteristics), true);
  // 0x08: u32
  if (data?.TimeDateStamp !== undefined) view.setUint32(8, Number(data.TimeDateStamp), true);
  // 0x0c: u32
  if (data?.CheckSum !== undefined) view.setUint32(12, Number(data.CheckSum), true);
  // 0x10: u32
  if (data?.ImageBase !== undefined) view.setUint32(16, Number(data.ImageBase), true);
  // 0x14: u32
  if (data?.SizeOfImage !== undefined) view.setUint32(20, Number(data.SizeOfImage), true);
  // 0x18: u32
  if (data?.NumberOfSections !== undefined) view.setUint32(24, Number(data.NumberOfSections), true);
  // 0x1c: u32
  if (data?.ExportedNamesSize !== undefined) view.setUint32(28, Number(data.ExportedNamesSize), true);
  // 0x20: u32
  if (data?.DebugDirectorySize !== undefined) view.setUint32(32, Number(data.DebugDirectorySize), true);
  // 0x24: u32
  if (data?.SectionAlignment !== undefined) view.setUint32(36, Number(data.SectionAlignment), true);
  // 0x28: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(40, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.NON_PAGED_DEBUG_INFO (size: 32)
 */
export interface NON_PAGED_DEBUG_INFO {
  /** u16 */
  Signature: number;
  /** u16 */
  Flags: number;
  /** u32 */
  Size: number;
  /** u16 */
  Machine: number;
  /** u16 */
  Characteristics: number;
  /** u32 */
  TimeDateStamp: number;
  /** u32 */
  CheckSum: number;
  /** u32 */
  SizeOfImage: number;
  /** u64 */
  ImageBase: Deno.PointerValue;
}

export const sizeofNON_PAGED_DEBUG_INFO = 32;

export function allocNON_PAGED_DEBUG_INFO(data?: Partial<NON_PAGED_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofNON_PAGED_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Signature !== undefined) view.setUint16(0, Number(data.Signature), true);
  // 0x02: u16
  if (data?.Flags !== undefined) view.setUint16(2, Number(data.Flags), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u16
  if (data?.Machine !== undefined) view.setUint16(8, Number(data.Machine), true);
  // 0x0a: u16
  if (data?.Characteristics !== undefined) view.setUint16(10, Number(data.Characteristics), true);
  // 0x0c: u32
  if (data?.TimeDateStamp !== undefined) view.setUint32(12, Number(data.TimeDateStamp), true);
  // 0x10: u32
  if (data?.CheckSum !== undefined) view.setUint32(16, Number(data.CheckSum), true);
  // 0x14: u32
  if (data?.SizeOfImage !== undefined) view.setUint32(20, Number(data.SizeOfImage), true);
  // 0x18: u64
  if (data?.ImageBase !== undefined) view.setBigUint64(24, BigInt(data.ImageBase), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_ARCHITECTURE_HEADER (size: 8)
 */
export interface IMAGE_ARCHITECTURE_HEADER {
  /** u32 */
  _bitfield: number;
  /** u32 */
  FirstEntryRVA: number;
}

export const sizeofIMAGE_ARCHITECTURE_HEADER = 8;

export function allocIMAGE_ARCHITECTURE_HEADER(data?: Partial<IMAGE_ARCHITECTURE_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_ARCHITECTURE_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?._bitfield !== undefined) view.setUint32(0, Number(data._bitfield), true);
  // 0x04: u32
  if (data?.FirstEntryRVA !== undefined) view.setUint32(4, Number(data.FirstEntryRVA), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_ARCHITECTURE_ENTRY (size: 8)
 */
export interface IMAGE_ARCHITECTURE_ENTRY {
  /** u32 */
  FixupInstRVA: number;
  /** u32 */
  NewInst: number;
}

export const sizeofIMAGE_ARCHITECTURE_ENTRY = 8;

export function allocIMAGE_ARCHITECTURE_ENTRY(data?: Partial<IMAGE_ARCHITECTURE_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_ARCHITECTURE_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FixupInstRVA !== undefined) view.setUint32(0, Number(data.FixupInstRVA), true);
  // 0x04: u32
  if (data?.NewInst !== undefined) view.setUint32(4, Number(data.NewInst), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMPORT_OBJECT_HEADER (size: 32)
 */
export interface IMPORT_OBJECT_HEADER {
  /** u16 */
  Sig1: number;
  /** u16 */
  Sig2: number;
  /** u16 */
  Version: number;
  /** u16 */
  Machine: number;
  /** u32 */
  TimeDateStamp: number;
  /** u32 */
  SizeOfData: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  _bitfield: number;
}

export const sizeofIMPORT_OBJECT_HEADER = 32;

export function allocIMPORT_OBJECT_HEADER(data?: Partial<IMPORT_OBJECT_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofIMPORT_OBJECT_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Sig1 !== undefined) view.setUint16(0, Number(data.Sig1), true);
  // 0x02: u16
  if (data?.Sig2 !== undefined) view.setUint16(2, Number(data.Sig2), true);
  // 0x04: u16
  if (data?.Version !== undefined) view.setUint16(4, Number(data.Version), true);
  // 0x06: u16
  if (data?.Machine !== undefined) view.setUint16(6, Number(data.Machine), true);
  // 0x08: u32
  if (data?.TimeDateStamp !== undefined) view.setUint32(8, Number(data.TimeDateStamp), true);
  // 0x0c: u32
  if (data?.SizeOfData !== undefined) view.setUint32(12, Number(data.SizeOfData), true);
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x18: u16
  if (data?._bitfield !== undefined) view.setUint16(24, Number(data._bitfield), true);
  // 0x1a: pad6
  return buf;
}

export type NTSTATUS = number;

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD (size: 48)
 */
export interface EXCEPTION_RECORD {
  /** Windows.Win32.Foundation.NTSTATUS */
  ExceptionCode: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ExceptionFlags: number;
  /** ptr */
  ExceptionRecord: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ExceptionAddress: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumberParameters: number;
  /** array */
  ExceptionInformation: Deno.PointerValue | null;
}

export const sizeofEXCEPTION_RECORD = 48;

export function allocEXCEPTION_RECORD(data?: Partial<EXCEPTION_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionCode !== undefined) view.setBigUint64(0, data.ExceptionCode === null ? 0n : BigInt(util.toPointer(data.ExceptionCode)), true);
  // 0x08: u32
  if (data?.ExceptionFlags !== undefined) view.setUint32(8, Number(data.ExceptionFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(16, data.ExceptionRecord === null ? 0n : BigInt(util.toPointer(data.ExceptionRecord)), true);
  // 0x18: pointer
  if (data?.ExceptionAddress !== undefined) view.setBigUint64(24, data.ExceptionAddress === null ? 0n : BigInt(util.toPointer(data.ExceptionAddress)), true);
  // 0x20: u32
  if (data?.NumberParameters !== undefined) view.setUint32(32, Number(data.NumberParameters), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ExceptionInformation !== undefined) view.setBigUint64(40, data.ExceptionInformation === null ? 0n : BigInt(util.toPointer(data.ExceptionInformation)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_DEBUG_INFO (size: 16)
 */
export interface EXCEPTION_DEBUG_INFO {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD */
  ExceptionRecord: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFirstChance: number;
}

export const sizeofEXCEPTION_DEBUG_INFO = 16;

export function allocEXCEPTION_DEBUG_INFO(data?: Partial<EXCEPTION_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(0, data.ExceptionRecord === null ? 0n : BigInt(util.toPointer(data.ExceptionRecord)), true);
  // 0x08: u32
  if (data?.dwFirstChance !== undefined) view.setUint32(8, Number(data.dwFirstChance), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.CREATE_THREAD_DEBUG_INFO (size: 24)
 */
export interface CREATE_THREAD_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpThreadLocalBase: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */
  lpStartAddress: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCREATE_THREAD_DEBUG_INFO = 24;

export function allocCREATE_THREAD_DEBUG_INFO(data?: Partial<CREATE_THREAD_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_THREAD_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hThread !== undefined) view.setBigUint64(0, data.hThread === null ? 0n : BigInt(util.toPointer(data.hThread)), true);
  // 0x08: pointer
  if (data?.lpThreadLocalBase !== undefined) view.setBigUint64(8, data.lpThreadLocalBase === null ? 0n : BigInt(util.toPointer(data.lpThreadLocalBase)), true);
  // 0x10: pointer
  if (data?.lpStartAddress !== undefined) view.setBigUint64(16, data.lpStartAddress === null ? 0n : BigInt(util.toPointer(data.lpStartAddress)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.CREATE_PROCESS_DEBUG_INFO (size: 72)
 */
export interface CREATE_PROCESS_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hProcess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpBaseOfImage: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwDebugInfoFileOffset: number;
  /** u32 */
  nDebugInfoSize: number;
  /** ptr */
  lpThreadLocalBase: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */
  lpStartAddress: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpImageName: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  fUnicode: number;
}

export const sizeofCREATE_PROCESS_DEBUG_INFO = 72;

export function allocCREATE_PROCESS_DEBUG_INFO(data?: Partial<CREATE_PROCESS_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_PROCESS_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(util.toPointer(data.hFile)), true);
  // 0x08: pointer
  if (data?.hProcess !== undefined) view.setBigUint64(8, data.hProcess === null ? 0n : BigInt(util.toPointer(data.hProcess)), true);
  // 0x10: pointer
  if (data?.hThread !== undefined) view.setBigUint64(16, data.hThread === null ? 0n : BigInt(util.toPointer(data.hThread)), true);
  // 0x18: pointer
  if (data?.lpBaseOfImage !== undefined) view.setBigUint64(24, data.lpBaseOfImage === null ? 0n : BigInt(util.toPointer(data.lpBaseOfImage)), true);
  // 0x20: u32
  if (data?.dwDebugInfoFileOffset !== undefined) view.setUint32(32, Number(data.dwDebugInfoFileOffset), true);
  // 0x24: u32
  if (data?.nDebugInfoSize !== undefined) view.setUint32(36, Number(data.nDebugInfoSize), true);
  // 0x28: pointer
  if (data?.lpThreadLocalBase !== undefined) view.setBigUint64(40, data.lpThreadLocalBase === null ? 0n : BigInt(util.toPointer(data.lpThreadLocalBase)), true);
  // 0x30: pointer
  if (data?.lpStartAddress !== undefined) view.setBigUint64(48, data.lpStartAddress === null ? 0n : BigInt(util.toPointer(data.lpStartAddress)), true);
  // 0x38: pointer
  if (data?.lpImageName !== undefined) view.setBigUint64(56, data.lpImageName === null ? 0n : BigInt(util.toPointer(data.lpImageName)), true);
  // 0x40: u16
  if (data?.fUnicode !== undefined) view.setUint16(64, Number(data.fUnicode), true);
  // 0x42: pad6
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXIT_THREAD_DEBUG_INFO (size: 8)
 */
export interface EXIT_THREAD_DEBUG_INFO {
  /** u32 */
  dwExitCode: number;
}

export const sizeofEXIT_THREAD_DEBUG_INFO = 8;

export function allocEXIT_THREAD_DEBUG_INFO(data?: Partial<EXIT_THREAD_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXIT_THREAD_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExitCode !== undefined) view.setUint32(0, Number(data.dwExitCode), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXIT_PROCESS_DEBUG_INFO (size: 8)
 */
export interface EXIT_PROCESS_DEBUG_INFO {
  /** u32 */
  dwExitCode: number;
}

export const sizeofEXIT_PROCESS_DEBUG_INFO = 8;

export function allocEXIT_PROCESS_DEBUG_INFO(data?: Partial<EXIT_PROCESS_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXIT_PROCESS_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExitCode !== undefined) view.setUint32(0, Number(data.dwExitCode), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.LOAD_DLL_DEBUG_INFO (size: 40)
 */
export interface LOAD_DLL_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwDebugInfoFileOffset: number;
  /** u32 */
  nDebugInfoSize: number;
  /** ptr */
  lpImageName: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  fUnicode: number;
}

export const sizeofLOAD_DLL_DEBUG_INFO = 40;

export function allocLOAD_DLL_DEBUG_INFO(data?: Partial<LOAD_DLL_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofLOAD_DLL_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(util.toPointer(data.hFile)), true);
  // 0x08: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(8, data.lpBaseOfDll === null ? 0n : BigInt(util.toPointer(data.lpBaseOfDll)), true);
  // 0x10: u32
  if (data?.dwDebugInfoFileOffset !== undefined) view.setUint32(16, Number(data.dwDebugInfoFileOffset), true);
  // 0x14: u32
  if (data?.nDebugInfoSize !== undefined) view.setUint32(20, Number(data.nDebugInfoSize), true);
  // 0x18: pointer
  if (data?.lpImageName !== undefined) view.setBigUint64(24, data.lpImageName === null ? 0n : BigInt(util.toPointer(data.lpImageName)), true);
  // 0x20: u16
  if (data?.fUnicode !== undefined) view.setUint16(32, Number(data.fUnicode), true);
  // 0x22: pad6
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.UNLOAD_DLL_DEBUG_INFO (size: 8)
 */
export interface UNLOAD_DLL_DEBUG_INFO {
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array | null;
}

export const sizeofUNLOAD_DLL_DEBUG_INFO = 8;

export function allocUNLOAD_DLL_DEBUG_INFO(data?: Partial<UNLOAD_DLL_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofUNLOAD_DLL_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(0, data.lpBaseOfDll === null ? 0n : BigInt(util.toPointer(data.lpBaseOfDll)), true);
  return buf;
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.System.Diagnostics.Debug.OUTPUT_DEBUG_STRING_INFO (size: 16)
 */
export interface OUTPUT_DEBUG_STRING_INFO {
  /** Windows.Win32.Foundation.PSTR */
  lpDebugStringData: string | null | Uint8Array;
  /** u16 */
  fUnicode: number;
  /** u16 */
  nDebugStringLength: number;
}

export const sizeofOUTPUT_DEBUG_STRING_INFO = 16;

export function allocOUTPUT_DEBUG_STRING_INFO(data?: Partial<OUTPUT_DEBUG_STRING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofOUTPUT_DEBUG_STRING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpDebugStringData !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpDebugStringData);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u16
  if (data?.fUnicode !== undefined) view.setUint16(8, Number(data.fUnicode), true);
  // 0x0a: u16
  if (data?.nDebugStringLength !== undefined) view.setUint16(10, Number(data.nDebugStringLength), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.RIP_INFO (size: 8)
 */
export interface RIP_INFO {
  /** u32 */
  dwError: number;
  /** Windows.Win32.System.Diagnostics.Debug.RIP_INFO_TYPE */
  dwType: RIP_INFO_TYPE;
}

export const sizeofRIP_INFO = 8;

export function allocRIP_INFO(data?: Partial<RIP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRIP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwError !== undefined) view.setUint32(0, Number(data.dwError), true);
  // 0x04: u32
  if (data?.dwType !== undefined) view.setUint32(4, Number(data.dwType), true);
  return buf;
}

/**
 * _u_e__Union (size: 72)
 */
export interface _u_e__Union {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_DEBUG_INFO */
  Exception: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.CREATE_THREAD_DEBUG_INFO */
  CreateThread: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.CREATE_PROCESS_DEBUG_INFO */
  CreateProcessInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.EXIT_THREAD_DEBUG_INFO */
  ExitThread: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.EXIT_PROCESS_DEBUG_INFO */
  ExitProcess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.LOAD_DLL_DEBUG_INFO */
  LoadDll: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.UNLOAD_DLL_DEBUG_INFO */
  UnloadDll: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.OUTPUT_DEBUG_STRING_INFO */
  DebugString: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.RIP_INFO */
  RipInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_u_e__Union = 72;

export function alloc_u_e__Union(data?: Partial<_u_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Exception !== undefined) view.setBigUint64(0, data.Exception === null ? 0n : BigInt(util.toPointer(data.Exception)), true);
  // 0x08: pointer
  if (data?.CreateThread !== undefined) view.setBigUint64(8, data.CreateThread === null ? 0n : BigInt(util.toPointer(data.CreateThread)), true);
  // 0x10: pointer
  if (data?.CreateProcessInfo !== undefined) view.setBigUint64(16, data.CreateProcessInfo === null ? 0n : BigInt(util.toPointer(data.CreateProcessInfo)), true);
  // 0x18: pointer
  if (data?.ExitThread !== undefined) view.setBigUint64(24, data.ExitThread === null ? 0n : BigInt(util.toPointer(data.ExitThread)), true);
  // 0x20: pointer
  if (data?.ExitProcess !== undefined) view.setBigUint64(32, data.ExitProcess === null ? 0n : BigInt(util.toPointer(data.ExitProcess)), true);
  // 0x28: pointer
  if (data?.LoadDll !== undefined) view.setBigUint64(40, data.LoadDll === null ? 0n : BigInt(util.toPointer(data.LoadDll)), true);
  // 0x30: pointer
  if (data?.UnloadDll !== undefined) view.setBigUint64(48, data.UnloadDll === null ? 0n : BigInt(util.toPointer(data.UnloadDll)), true);
  // 0x38: pointer
  if (data?.DebugString !== undefined) view.setBigUint64(56, data.DebugString === null ? 0n : BigInt(util.toPointer(data.DebugString)), true);
  // 0x40: pointer
  if (data?.RipInfo !== undefined) view.setBigUint64(64, data.RipInfo === null ? 0n : BigInt(util.toPointer(data.RipInfo)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_POLICY_ENTRY (size: 16)
 */
export interface IMAGE_POLICY_ENTRY {
  /** Windows.Win32.System.SystemServices.IMAGE_POLICY_ENTRY_TYPE */
  Type: IMAGE_POLICY_ENTRY_TYPE;
  /** Windows.Win32.System.SystemServices.IMAGE_POLICY_ID */
  PolicyId: IMAGE_POLICY_ID;
  /** _u_e__Union */
  u: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIMAGE_POLICY_ENTRY = 16;

export function allocIMAGE_POLICY_ENTRY(data?: Partial<IMAGE_POLICY_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_POLICY_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: i32
  if (data?.PolicyId !== undefined) view.setInt32(4, Number(data.PolicyId), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.IMAGE_POLICY_METADATA (size: 32)
 */
export interface IMAGE_POLICY_METADATA {
  /** u8 */
  Version: number;
  /** array */
  Reserved0: Deno.PointerValue | null;
  /** u64 */
  ApplicationId: Deno.PointerValue;
  /** array */
  Policies: Deno.PointerValue | null;
}

export const sizeofIMAGE_POLICY_METADATA = 32;

export function allocIMAGE_POLICY_METADATA(data?: Partial<IMAGE_POLICY_METADATA>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_POLICY_METADATA);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Version !== undefined) view.setUint8(0, Number(data.Version));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.Reserved0 !== undefined) view.setBigUint64(8, data.Reserved0 === null ? 0n : BigInt(util.toPointer(data.Reserved0)), true);
  // 0x10: u64
  if (data?.ApplicationId !== undefined) view.setBigUint64(16, BigInt(data.ApplicationId), true);
  // 0x18: pointer
  if (data?.Policies !== undefined) view.setBigUint64(24, data.Policies === null ? 0n : BigInt(util.toPointer(data.Policies)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.HEAP_OPTIMIZE_RESOURCES_INFORMATION (size: 8)
 */
export interface HEAP_OPTIMIZE_RESOURCES_INFORMATION {
  /** u32 */
  Version: number;
  /** u32 */
  Flags: number;
}

export const sizeofHEAP_OPTIMIZE_RESOURCES_INFORMATION = 8;

export function allocHEAP_OPTIMIZE_RESOURCES_INFORMATION(data?: Partial<HEAP_OPTIMIZE_RESOURCES_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofHEAP_OPTIMIZE_RESOURCES_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.SUPPORTED_OS_INFO (size: 8)
 */
export interface SUPPORTED_OS_INFO {
  /** u16 */
  MajorVersion: number;
  /** u16 */
  MinorVersion: number;
}

export const sizeofSUPPORTED_OS_INFO = 8;

export function allocSUPPORTED_OS_INFO(data?: Partial<SUPPORTED_OS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSUPPORTED_OS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.MajorVersion !== undefined) view.setUint16(0, Number(data.MajorVersion), true);
  // 0x02: u16
  if (data?.MinorVersion !== undefined) view.setUint16(2, Number(data.MinorVersion), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.MAXVERSIONTESTED_INFO (size: 8)
 */
export interface MAXVERSIONTESTED_INFO {
  /** u64 */
  MaxVersionTested: Deno.PointerValue;
}

export const sizeofMAXVERSIONTESTED_INFO = 8;

export function allocMAXVERSIONTESTED_INFO(data?: Partial<MAXVERSIONTESTED_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMAXVERSIONTESTED_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.MaxVersionTested !== undefined) view.setBigUint64(0, BigInt(data.MaxVersionTested), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.PACKEDEVENTINFO (size: 16)
 */
export interface PACKEDEVENTINFO {
  /** u32 */
  ulSize: number;
  /** u32 */
  ulNumEventsForLogFile: number;
  /** array */
  ulOffsets: Deno.PointerValue | null;
}

export const sizeofPACKEDEVENTINFO = 16;

export function allocPACKEDEVENTINFO(data?: Partial<PACKEDEVENTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPACKEDEVENTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulSize !== undefined) view.setUint32(0, Number(data.ulSize), true);
  // 0x04: u32
  if (data?.ulNumEventsForLogFile !== undefined) view.setUint32(4, Number(data.ulNumEventsForLogFile), true);
  // 0x08: pointer
  if (data?.ulOffsets !== undefined) view.setBigUint64(8, data.ulOffsets === null ? 0n : BigInt(util.toPointer(data.ulOffsets)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.TAPE_GET_DRIVE_PARAMETERS (size: 64)
 */
export interface TAPE_GET_DRIVE_PARAMETERS {
  /** Windows.Win32.Foundation.BOOLEAN */
  ECC: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  Compression: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  DataPadding: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  ReportSetmarks: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  DefaultBlockSize: number;
  /** u32 */
  MaximumBlockSize: number;
  /** u32 */
  MinimumBlockSize: number;
  /** u32 */
  MaximumPartitionCount: number;
  /** u32 */
  FeaturesLow: number;
  /** Windows.Win32.System.SystemServices.TAPE_GET_DRIVE_PARAMETERS_FEATURES_HIGH */
  FeaturesHigh: TAPE_GET_DRIVE_PARAMETERS_FEATURES_HIGH;
  /** u32 */
  EOTWarningZoneSize: number;
}

export const sizeofTAPE_GET_DRIVE_PARAMETERS = 64;

export function allocTAPE_GET_DRIVE_PARAMETERS(data?: Partial<TAPE_GET_DRIVE_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofTAPE_GET_DRIVE_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ECC !== undefined) view.setBigUint64(0, data.ECC === null ? 0n : BigInt(util.toPointer(data.ECC)), true);
  // 0x08: pointer
  if (data?.Compression !== undefined) view.setBigUint64(8, data.Compression === null ? 0n : BigInt(util.toPointer(data.Compression)), true);
  // 0x10: pointer
  if (data?.DataPadding !== undefined) view.setBigUint64(16, data.DataPadding === null ? 0n : BigInt(util.toPointer(data.DataPadding)), true);
  // 0x18: pointer
  if (data?.ReportSetmarks !== undefined) view.setBigUint64(24, data.ReportSetmarks === null ? 0n : BigInt(util.toPointer(data.ReportSetmarks)), true);
  // 0x20: u32
  if (data?.DefaultBlockSize !== undefined) view.setUint32(32, Number(data.DefaultBlockSize), true);
  // 0x24: u32
  if (data?.MaximumBlockSize !== undefined) view.setUint32(36, Number(data.MaximumBlockSize), true);
  // 0x28: u32
  if (data?.MinimumBlockSize !== undefined) view.setUint32(40, Number(data.MinimumBlockSize), true);
  // 0x2c: u32
  if (data?.MaximumPartitionCount !== undefined) view.setUint32(44, Number(data.MaximumPartitionCount), true);
  // 0x30: u32
  if (data?.FeaturesLow !== undefined) view.setUint32(48, Number(data.FeaturesLow), true);
  // 0x34: u32
  if (data?.FeaturesHigh !== undefined) view.setUint32(52, Number(data.FeaturesHigh), true);
  // 0x38: u32
  if (data?.EOTWarningZoneSize !== undefined) view.setUint32(56, Number(data.EOTWarningZoneSize), true);
  // 0x3c: pad4
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.TAPE_SET_DRIVE_PARAMETERS (size: 40)
 */
export interface TAPE_SET_DRIVE_PARAMETERS {
  /** Windows.Win32.Foundation.BOOLEAN */
  ECC: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  Compression: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  DataPadding: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  ReportSetmarks: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  EOTWarningZoneSize: number;
}

export const sizeofTAPE_SET_DRIVE_PARAMETERS = 40;

export function allocTAPE_SET_DRIVE_PARAMETERS(data?: Partial<TAPE_SET_DRIVE_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofTAPE_SET_DRIVE_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ECC !== undefined) view.setBigUint64(0, data.ECC === null ? 0n : BigInt(util.toPointer(data.ECC)), true);
  // 0x08: pointer
  if (data?.Compression !== undefined) view.setBigUint64(8, data.Compression === null ? 0n : BigInt(util.toPointer(data.Compression)), true);
  // 0x10: pointer
  if (data?.DataPadding !== undefined) view.setBigUint64(16, data.DataPadding === null ? 0n : BigInt(util.toPointer(data.DataPadding)), true);
  // 0x18: pointer
  if (data?.ReportSetmarks !== undefined) view.setBigUint64(24, data.ReportSetmarks === null ? 0n : BigInt(util.toPointer(data.ReportSetmarks)), true);
  // 0x20: u32
  if (data?.EOTWarningZoneSize !== undefined) view.setUint32(32, Number(data.EOTWarningZoneSize), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.TAPE_GET_MEDIA_PARAMETERS (size: 32)
 */
export interface TAPE_GET_MEDIA_PARAMETERS {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  Capacity: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  Remaining: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  BlockSize: number;
  /** u32 */
  PartitionCount: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  WriteProtected: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTAPE_GET_MEDIA_PARAMETERS = 32;

export function allocTAPE_GET_MEDIA_PARAMETERS(data?: Partial<TAPE_GET_MEDIA_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofTAPE_GET_MEDIA_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Capacity !== undefined) view.setBigUint64(0, data.Capacity === null ? 0n : BigInt(util.toPointer(data.Capacity)), true);
  // 0x08: pointer
  if (data?.Remaining !== undefined) view.setBigUint64(8, data.Remaining === null ? 0n : BigInt(util.toPointer(data.Remaining)), true);
  // 0x10: u32
  if (data?.BlockSize !== undefined) view.setUint32(16, Number(data.BlockSize), true);
  // 0x14: u32
  if (data?.PartitionCount !== undefined) view.setUint32(20, Number(data.PartitionCount), true);
  // 0x18: pointer
  if (data?.WriteProtected !== undefined) view.setBigUint64(24, data.WriteProtected === null ? 0n : BigInt(util.toPointer(data.WriteProtected)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.TAPE_SET_MEDIA_PARAMETERS (size: 8)
 */
export interface TAPE_SET_MEDIA_PARAMETERS {
  /** u32 */
  BlockSize: number;
}

export const sizeofTAPE_SET_MEDIA_PARAMETERS = 8;

export function allocTAPE_SET_MEDIA_PARAMETERS(data?: Partial<TAPE_SET_MEDIA_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofTAPE_SET_MEDIA_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BlockSize !== undefined) view.setUint32(0, Number(data.BlockSize), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.TAPE_CREATE_PARTITION (size: 16)
 */
export interface TAPE_CREATE_PARTITION {
  /** u32 */
  Method: number;
  /** u32 */
  Count: number;
  /** u32 */
  Size: number;
}

export const sizeofTAPE_CREATE_PARTITION = 16;

export function allocTAPE_CREATE_PARTITION(data?: Partial<TAPE_CREATE_PARTITION>): Uint8Array {
  const buf = new Uint8Array(sizeofTAPE_CREATE_PARTITION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Method !== undefined) view.setUint32(0, Number(data.Method), true);
  // 0x04: u32
  if (data?.Count !== undefined) view.setUint32(4, Number(data.Count), true);
  // 0x08: u32
  if (data?.Size !== undefined) view.setUint32(8, Number(data.Size), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.TAPE_WMI_OPERATIONS (size: 16)
 */
export interface TAPE_WMI_OPERATIONS {
  /** u32 */
  Method: number;
  /** u32 */
  DataBufferSize: number;
  /** ptr */
  DataBuffer: Deno.PointerValue | Uint8Array | null;
}

export const sizeofTAPE_WMI_OPERATIONS = 16;

export function allocTAPE_WMI_OPERATIONS(data?: Partial<TAPE_WMI_OPERATIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofTAPE_WMI_OPERATIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Method !== undefined) view.setUint32(0, Number(data.Method), true);
  // 0x04: u32
  if (data?.DataBufferSize !== undefined) view.setUint32(4, Number(data.DataBufferSize), true);
  // 0x08: pointer
  if (data?.DataBuffer !== undefined) view.setBigUint64(8, data.DataBuffer === null ? 0n : BigInt(util.toPointer(data.DataBuffer)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.TRANSACTION_BASIC_INFORMATION (size: 16)
 */
export interface TRANSACTION_BASIC_INFORMATION {
  /** System.Guid */
  TransactionId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  State: number;
  /** u32 */
  Outcome: number;
}

export const sizeofTRANSACTION_BASIC_INFORMATION = 16;

export function allocTRANSACTION_BASIC_INFORMATION(data?: Partial<TRANSACTION_BASIC_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofTRANSACTION_BASIC_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TransactionId !== undefined) view.setBigUint64(0, data.TransactionId === null ? 0n : BigInt(util.toPointer(data.TransactionId)), true);
  // 0x08: u32
  if (data?.State !== undefined) view.setUint32(8, Number(data.State), true);
  // 0x0c: u32
  if (data?.Outcome !== undefined) view.setUint32(12, Number(data.Outcome), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.TRANSACTIONMANAGER_BASIC_INFORMATION (size: 16)
 */
export interface TRANSACTIONMANAGER_BASIC_INFORMATION {
  /** System.Guid */
  TmIdentity: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  VirtualClock: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTRANSACTIONMANAGER_BASIC_INFORMATION = 16;

export function allocTRANSACTIONMANAGER_BASIC_INFORMATION(data?: Partial<TRANSACTIONMANAGER_BASIC_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofTRANSACTIONMANAGER_BASIC_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TmIdentity !== undefined) view.setBigUint64(0, data.TmIdentity === null ? 0n : BigInt(util.toPointer(data.TmIdentity)), true);
  // 0x08: pointer
  if (data?.VirtualClock !== undefined) view.setBigUint64(8, data.VirtualClock === null ? 0n : BigInt(util.toPointer(data.VirtualClock)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.TRANSACTIONMANAGER_LOG_INFORMATION (size: 8)
 */
export interface TRANSACTIONMANAGER_LOG_INFORMATION {
  /** System.Guid */
  LogIdentity: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTRANSACTIONMANAGER_LOG_INFORMATION = 8;

export function allocTRANSACTIONMANAGER_LOG_INFORMATION(data?: Partial<TRANSACTIONMANAGER_LOG_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofTRANSACTIONMANAGER_LOG_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LogIdentity !== undefined) view.setBigUint64(0, data.LogIdentity === null ? 0n : BigInt(util.toPointer(data.LogIdentity)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.TRANSACTIONMANAGER_LOGPATH_INFORMATION (size: 16)
 */
export interface TRANSACTIONMANAGER_LOGPATH_INFORMATION {
  /** u32 */
  LogPathLength: number;
  /** array */
  LogPath: Deno.PointerValue | null;
}

export const sizeofTRANSACTIONMANAGER_LOGPATH_INFORMATION = 16;

export function allocTRANSACTIONMANAGER_LOGPATH_INFORMATION(data?: Partial<TRANSACTIONMANAGER_LOGPATH_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofTRANSACTIONMANAGER_LOGPATH_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.LogPathLength !== undefined) view.setUint32(0, Number(data.LogPathLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LogPath !== undefined) view.setBigUint64(8, data.LogPath === null ? 0n : BigInt(util.toPointer(data.LogPath)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.TRANSACTIONMANAGER_RECOVERY_INFORMATION (size: 8)
 */
export interface TRANSACTIONMANAGER_RECOVERY_INFORMATION {
  /** u64 */
  LastRecoveredLsn: Deno.PointerValue;
}

export const sizeofTRANSACTIONMANAGER_RECOVERY_INFORMATION = 8;

export function allocTRANSACTIONMANAGER_RECOVERY_INFORMATION(data?: Partial<TRANSACTIONMANAGER_RECOVERY_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofTRANSACTIONMANAGER_RECOVERY_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.LastRecoveredLsn !== undefined) view.setBigUint64(0, BigInt(data.LastRecoveredLsn), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.TRANSACTIONMANAGER_OLDEST_INFORMATION (size: 8)
 */
export interface TRANSACTIONMANAGER_OLDEST_INFORMATION {
  /** System.Guid */
  OldestTransactionGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTRANSACTIONMANAGER_OLDEST_INFORMATION = 8;

export function allocTRANSACTIONMANAGER_OLDEST_INFORMATION(data?: Partial<TRANSACTIONMANAGER_OLDEST_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofTRANSACTIONMANAGER_OLDEST_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.OldestTransactionGuid !== undefined) view.setBigUint64(0, data.OldestTransactionGuid === null ? 0n : BigInt(util.toPointer(data.OldestTransactionGuid)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.TRANSACTION_PROPERTIES_INFORMATION (size: 32)
 */
export interface TRANSACTION_PROPERTIES_INFORMATION {
  /** u32 */
  IsolationLevel: number;
  /** u32 */
  IsolationFlags: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  Timeout: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Outcome: number;
  /** u32 */
  DescriptionLength: number;
  /** array */
  Description: Deno.PointerValue | null;
}

export const sizeofTRANSACTION_PROPERTIES_INFORMATION = 32;

export function allocTRANSACTION_PROPERTIES_INFORMATION(data?: Partial<TRANSACTION_PROPERTIES_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofTRANSACTION_PROPERTIES_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.IsolationLevel !== undefined) view.setUint32(0, Number(data.IsolationLevel), true);
  // 0x04: u32
  if (data?.IsolationFlags !== undefined) view.setUint32(4, Number(data.IsolationFlags), true);
  // 0x08: pointer
  if (data?.Timeout !== undefined) view.setBigUint64(8, data.Timeout === null ? 0n : BigInt(util.toPointer(data.Timeout)), true);
  // 0x10: u32
  if (data?.Outcome !== undefined) view.setUint32(16, Number(data.Outcome), true);
  // 0x14: u32
  if (data?.DescriptionLength !== undefined) view.setUint32(20, Number(data.DescriptionLength), true);
  // 0x18: pointer
  if (data?.Description !== undefined) view.setBigUint64(24, data.Description === null ? 0n : BigInt(util.toPointer(data.Description)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.TRANSACTION_BIND_INFORMATION (size: 8)
 */
export interface TRANSACTION_BIND_INFORMATION {
  /** Windows.Win32.Foundation.HANDLE */
  TmHandle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTRANSACTION_BIND_INFORMATION = 8;

export function allocTRANSACTION_BIND_INFORMATION(data?: Partial<TRANSACTION_BIND_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofTRANSACTION_BIND_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TmHandle !== undefined) view.setBigUint64(0, data.TmHandle === null ? 0n : BigInt(util.toPointer(data.TmHandle)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.TRANSACTION_ENLISTMENT_PAIR (size: 16)
 */
export interface TRANSACTION_ENLISTMENT_PAIR {
  /** System.Guid */
  EnlistmentId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ResourceManagerId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTRANSACTION_ENLISTMENT_PAIR = 16;

export function allocTRANSACTION_ENLISTMENT_PAIR(data?: Partial<TRANSACTION_ENLISTMENT_PAIR>): Uint8Array {
  const buf = new Uint8Array(sizeofTRANSACTION_ENLISTMENT_PAIR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.EnlistmentId !== undefined) view.setBigUint64(0, data.EnlistmentId === null ? 0n : BigInt(util.toPointer(data.EnlistmentId)), true);
  // 0x08: pointer
  if (data?.ResourceManagerId !== undefined) view.setBigUint64(8, data.ResourceManagerId === null ? 0n : BigInt(util.toPointer(data.ResourceManagerId)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.TRANSACTION_ENLISTMENTS_INFORMATION (size: 16)
 */
export interface TRANSACTION_ENLISTMENTS_INFORMATION {
  /** u32 */
  NumberOfEnlistments: number;
  /** array */
  EnlistmentPair: Deno.PointerValue | null;
}

export const sizeofTRANSACTION_ENLISTMENTS_INFORMATION = 16;

export function allocTRANSACTION_ENLISTMENTS_INFORMATION(data?: Partial<TRANSACTION_ENLISTMENTS_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofTRANSACTION_ENLISTMENTS_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumberOfEnlistments !== undefined) view.setUint32(0, Number(data.NumberOfEnlistments), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.EnlistmentPair !== undefined) view.setBigUint64(8, data.EnlistmentPair === null ? 0n : BigInt(util.toPointer(data.EnlistmentPair)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION (size: 8)
 */
export interface TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION {
  /** Windows.Win32.System.SystemServices.TRANSACTION_ENLISTMENT_PAIR */
  SuperiorEnlistmentPair: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION = 8;

export function allocTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION(data?: Partial<TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SuperiorEnlistmentPair !== undefined) view.setBigUint64(0, data.SuperiorEnlistmentPair === null ? 0n : BigInt(util.toPointer(data.SuperiorEnlistmentPair)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.RESOURCEMANAGER_BASIC_INFORMATION (size: 24)
 */
export interface RESOURCEMANAGER_BASIC_INFORMATION {
  /** System.Guid */
  ResourceManagerId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  DescriptionLength: number;
  /** array */
  Description: Deno.PointerValue | null;
}

export const sizeofRESOURCEMANAGER_BASIC_INFORMATION = 24;

export function allocRESOURCEMANAGER_BASIC_INFORMATION(data?: Partial<RESOURCEMANAGER_BASIC_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofRESOURCEMANAGER_BASIC_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ResourceManagerId !== undefined) view.setBigUint64(0, data.ResourceManagerId === null ? 0n : BigInt(util.toPointer(data.ResourceManagerId)), true);
  // 0x08: u32
  if (data?.DescriptionLength !== undefined) view.setUint32(8, Number(data.DescriptionLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Description !== undefined) view.setBigUint64(16, data.Description === null ? 0n : BigInt(util.toPointer(data.Description)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.RESOURCEMANAGER_COMPLETION_INFORMATION (size: 16)
 */
export interface RESOURCEMANAGER_COMPLETION_INFORMATION {
  /** Windows.Win32.Foundation.HANDLE */
  IoCompletionPortHandle: Uint8Array | Deno.PointerValue | null;
  /** usize */
  CompletionKey: Deno.PointerValue;
}

export const sizeofRESOURCEMANAGER_COMPLETION_INFORMATION = 16;

export function allocRESOURCEMANAGER_COMPLETION_INFORMATION(data?: Partial<RESOURCEMANAGER_COMPLETION_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofRESOURCEMANAGER_COMPLETION_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.IoCompletionPortHandle !== undefined) view.setBigUint64(0, data.IoCompletionPortHandle === null ? 0n : BigInt(util.toPointer(data.IoCompletionPortHandle)), true);
  // 0x08: usize
  if (data?.CompletionKey !== undefined) view.setBigUint64(8, BigInt(data.CompletionKey), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.ENLISTMENT_BASIC_INFORMATION (size: 24)
 */
export interface ENLISTMENT_BASIC_INFORMATION {
  /** System.Guid */
  EnlistmentId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  TransactionId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ResourceManagerId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofENLISTMENT_BASIC_INFORMATION = 24;

export function allocENLISTMENT_BASIC_INFORMATION(data?: Partial<ENLISTMENT_BASIC_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofENLISTMENT_BASIC_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.EnlistmentId !== undefined) view.setBigUint64(0, data.EnlistmentId === null ? 0n : BigInt(util.toPointer(data.EnlistmentId)), true);
  // 0x08: pointer
  if (data?.TransactionId !== undefined) view.setBigUint64(8, data.TransactionId === null ? 0n : BigInt(util.toPointer(data.TransactionId)), true);
  // 0x10: pointer
  if (data?.ResourceManagerId !== undefined) view.setBigUint64(16, data.ResourceManagerId === null ? 0n : BigInt(util.toPointer(data.ResourceManagerId)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.ENLISTMENT_CRM_INFORMATION (size: 24)
 */
export interface ENLISTMENT_CRM_INFORMATION {
  /** System.Guid */
  CrmTransactionManagerId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  CrmResourceManagerId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  CrmEnlistmentId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofENLISTMENT_CRM_INFORMATION = 24;

export function allocENLISTMENT_CRM_INFORMATION(data?: Partial<ENLISTMENT_CRM_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofENLISTMENT_CRM_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CrmTransactionManagerId !== undefined) view.setBigUint64(0, data.CrmTransactionManagerId === null ? 0n : BigInt(util.toPointer(data.CrmTransactionManagerId)), true);
  // 0x08: pointer
  if (data?.CrmResourceManagerId !== undefined) view.setBigUint64(8, data.CrmResourceManagerId === null ? 0n : BigInt(util.toPointer(data.CrmResourceManagerId)), true);
  // 0x10: pointer
  if (data?.CrmEnlistmentId !== undefined) view.setBigUint64(16, data.CrmEnlistmentId === null ? 0n : BigInt(util.toPointer(data.CrmEnlistmentId)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.TRANSACTION_LIST_ENTRY (size: 8)
 */
export interface TRANSACTION_LIST_ENTRY {
  /** System.Guid */
  UOW: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTRANSACTION_LIST_ENTRY = 8;

export function allocTRANSACTION_LIST_ENTRY(data?: Partial<TRANSACTION_LIST_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofTRANSACTION_LIST_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.UOW !== undefined) view.setBigUint64(0, data.UOW === null ? 0n : BigInt(util.toPointer(data.UOW)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.TRANSACTION_LIST_INFORMATION (size: 16)
 */
export interface TRANSACTION_LIST_INFORMATION {
  /** u32 */
  NumberOfTransactions: number;
  /** array */
  TransactionInformation: Deno.PointerValue | null;
}

export const sizeofTRANSACTION_LIST_INFORMATION = 16;

export function allocTRANSACTION_LIST_INFORMATION(data?: Partial<TRANSACTION_LIST_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofTRANSACTION_LIST_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumberOfTransactions !== undefined) view.setUint32(0, Number(data.NumberOfTransactions), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.TransactionInformation !== undefined) view.setBigUint64(8, data.TransactionInformation === null ? 0n : BigInt(util.toPointer(data.TransactionInformation)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemServices.KTMOBJECT_CURSOR (size: 24)
 */
export interface KTMOBJECT_CURSOR {
  /** System.Guid */
  LastQuery: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ObjectIdCount: number;
  /** array */
  ObjectIds: Deno.PointerValue | null;
}

export const sizeofKTMOBJECT_CURSOR = 24;

export function allocKTMOBJECT_CURSOR(data?: Partial<KTMOBJECT_CURSOR>): Uint8Array {
  const buf = new Uint8Array(sizeofKTMOBJECT_CURSOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LastQuery !== undefined) view.setBigUint64(0, data.LastQuery === null ? 0n : BigInt(util.toPointer(data.LastQuery)), true);
  // 0x08: u32
  if (data?.ObjectIdCount !== undefined) view.setUint32(8, Number(data.ObjectIdCount), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ObjectIds !== undefined) view.setBigUint64(16, data.ObjectIds === null ? 0n : BigInt(util.toPointer(data.ObjectIds)), true);
  return buf;
}

export type BOOL = number;

// Native Libraries

try {
  var libUSER32_dll = Deno.dlopen("USER32.dll", {
    UnregisterDeviceNotification: {
      parameters: ["pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function UnregisterDeviceNotification(
  Handle: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.UnregisterDeviceNotification(util.toPointer(Handle)));
}

