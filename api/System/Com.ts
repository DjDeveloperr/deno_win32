/// Auto-generated by Deno Win32: Windows.Win32.System.Com.Apis

import * as util from "../../util.ts";

// Enums
export type URI_CREATE_FLAGS = number;
export type RPC_C_AUTHN_LEVEL = number;
export type RPC_C_IMP_LEVEL = number;
export type PROPSPEC_KIND = number;
export type STGM = number;
export type STGFMT = number;
export type DVASPECT = number;
export type TYSPEC = number;
export type STGC = number;
export type STGMOVE = number;
export type STATFLAG = number;
export type CALLFRAME_COPY = number;
export type CALLFRAME_FREE = number;
export type CALLFRAME_NULL = number;
export type CALLFRAME_WALK = number;
export type REGCLS = number;
export type COINITBASE = number;
export type MEMCTX = number;
export type CLSCTX = number;
export type MSHLFLAGS = number;
export type MSHCTX = number;
export type EXTCONN = number;
export type STGTY = number;
export type STREAM_SEEK = number;
export type EOLE_AUTHENTICATION_CAPABILITIES = number;
export type RPCOPT_PROPERTIES = number;
export type RPCOPT_SERVER_LOCALITY_VALUES = number;
export type GLOBALOPT_PROPERTIES = number;
export type GLOBALOPT_EH_VALUES = number;
export type GLOBALOPT_RPCTP_VALUES = number;
export type GLOBALOPT_RO_FLAGS = number;
export type GLOBALOPT_UNMARSHALING_POLICY_VALUES = number;
export type DCOM_CALL_STATE = number;
export type APTTYPEQUALIFIER = number;
export type APTTYPE = number;
export type THDTYPE = number;
export type CO_MARSHALING_CONTEXT_ATTRIBUTES = number;
export type BIND_FLAGS = number;
export type MKSYS = number;
export type MKREDUCE = number;
export type ADVF = number;
export type TYMED = number;
export type DATADIR = number;
export type CALLTYPE = number;
export type SERVERCALL = number;
export type PENDINGTYPE = number;
export type PENDINGMSG = number;
export type ApplicationType = number;
export type ShutdownType = number;
export type COINIT = number;
export type COMSD = number;
export type COWAIT_FLAGS = number;
export type CWMO_FLAGS = number;
export type STDMSHLFLAGS = number;
export type LOCKTYPE = number;
export type EOC_ChangeType = number;
export type PIDMSI_STATUS_VALUE = number;
export type IEObjectType = number;
export type MONIKERPROPERTY = number;
export type BINDVERB = number;
export type BINDF = number;
export type URL_ENCODING = number;
export type BINDINFO_OPTIONS = number;
export type BSCF = number;
export type BINDSTATUS = number;
export type BINDF2 = number;
export type AUTHENTICATEF = number;
export type CIP_STATUS = number;
export type Uri_HOST_TYPE = number;
export type BINDSTRING = number;
export type PI_FLAGS = number;
export type OIBDG_FLAGS = number;
export type PARSEACTION = number;
export type PSUACTION = number;
export type QUERYOPTION = number;
export type INTERNETFEATURELIST = number;
export type PUAF = number;
export type PUAFOUT = number;
export type SZM_FLAGS = number;
export type URLZONE = number;
export type URLTEMPLATE = number;
export type INET_ZONE_MANAGER_CONSTANTS = number;
export type ZAFLAGS = number;
export type URLZONEREG = number;
export type BINDHANDLETYPES = number;
export type BINDINFOF = number;
export type Uri_PROPERTY = number;
export type TYPEKIND = number;
export type CALLCONV = number;
export type FUNCKIND = number;
export type INVOKEKIND = number;
export type VARKIND = number;
export type DESCKIND = number;
export type SYSKIND = number;
export type COMAdminInUse = number;
export type COMAdminComponentType = number;
export type COMAdminApplicationInstallOptions = number;
export type COMAdminApplicationExportOptions = number;
export type COMAdminThreadingModels = number;
export type COMAdminTransactionOptions = number;
export type COMAdminTxIsolationLevelOptions = number;
export type COMAdminSynchronizationOptions = number;
export type COMAdminActivationOptions = number;
export type COMAdminAccessChecksLevelOptions = number;
export type COMAdminAuthenticationLevelOptions = number;
export type COMAdminImpersonationLevelOptions = number;
export type COMAdminAuthenticationCapabilitiesOptions = number;
export type COMAdminOS = number;
export type COMAdminServiceOptions = number;
export type COMAdminServiceStatusOptions = number;
export type COMAdminQCMessageAuthenticateOptions = number;
export type COMAdminFileFlags = number;
export type COMAdminComponentFlags = number;
export type COMAdminErrorCodes = number;
export type TRACKING_COLL_TYPE = number;
export type DUMPTYPE = number;
export type COMPLUS_APPTYPE = number;
export type GetAppTrackerDataFlags = number;
export type TransactionVote = number;
export type CrmTransactionState = number;
export type CSC_InheritanceConfig = number;
export type CSC_ThreadPool = number;
export type CSC_Binding = number;
export type CSC_TransactionConfig = number;
export type CSC_SynchronizationConfig = number;
export type CSC_TrackerConfig = number;
export type CSC_PartitionConfig = number;
export type CSC_IISIntrinsicsConfig = number;
export type CSC_COMTIIntrinsicsConfig = number;
export type CSC_SxsConfig = number;
export type AutoSvcs_Error_Constants = number;
export type LockModes = number;
export type ReleaseModes = number;
export type CRMFLAGS = number;
export type CRMREGFLAGS = number;

// Constants
export const Uri_CREATE_ALLOW_RELATIVE = 1;
export const Uri_CREATE_ALLOW_IMPLICIT_WILDCARD_SCHEME = 2;
export const Uri_CREATE_ALLOW_IMPLICIT_FILE_SCHEME = 4;
export const Uri_CREATE_NOFRAG = 8;
export const Uri_CREATE_NO_CANONICALIZE = 16;
export const Uri_CREATE_CANONICALIZE = 256;
export const Uri_CREATE_FILE_USE_DOS_PATH = 32;
export const Uri_CREATE_DECODE_EXTRA_INFO = 64;
export const Uri_CREATE_NO_DECODE_EXTRA_INFO = 128;
export const Uri_CREATE_CRACK_UNKNOWN_SCHEMES = 512;
export const Uri_CREATE_NO_CRACK_UNKNOWN_SCHEMES = 1024;
export const Uri_CREATE_PRE_PROCESS_HTML_URI = 2048;
export const Uri_CREATE_NO_PRE_PROCESS_HTML_URI = 4096;
export const Uri_CREATE_IE_SETTINGS = 8192;
export const Uri_CREATE_NO_IE_SETTINGS = 16384;
export const Uri_CREATE_NO_ENCODE_FORBIDDEN_CHARACTERS = 32768;
export const Uri_CREATE_NORMALIZE_INTL_CHARACTERS = 65536;
export const Uri_CREATE_CANONICALIZE_ABSOLUTE = 131072;
export const RPC_C_AUTHN_LEVEL_DEFAULT = 0;
export const RPC_C_AUTHN_LEVEL_NONE = 1;
export const RPC_C_AUTHN_LEVEL_CONNECT = 2;
export const RPC_C_AUTHN_LEVEL_CALL = 3;
export const RPC_C_AUTHN_LEVEL_PKT = 4;
export const RPC_C_AUTHN_LEVEL_PKT_INTEGRITY = 5;
export const RPC_C_AUTHN_LEVEL_PKT_PRIVACY = 6;
export const RPC_C_IMP_LEVEL_DEFAULT = 0;
export const RPC_C_IMP_LEVEL_ANONYMOUS = 1;
export const RPC_C_IMP_LEVEL_IDENTIFY = 2;
export const RPC_C_IMP_LEVEL_IMPERSONATE = 3;
export const RPC_C_IMP_LEVEL_DELEGATE = 4;
export const PRSPEC_LPWSTR = 0;
export const PRSPEC_PROPID = 1;
export const STGM_DIRECT = 0;
export const STGM_TRANSACTED = 65536;
export const STGM_SIMPLE = 134217728;
export const STGM_READ = 0;
export const STGM_WRITE = 1;
export const STGM_READWRITE = 2;
export const STGM_SHARE_DENY_NONE = 64;
export const STGM_SHARE_DENY_READ = 48;
export const STGM_SHARE_DENY_WRITE = 32;
export const STGM_SHARE_EXCLUSIVE = 16;
export const STGM_PRIORITY = 262144;
export const STGM_DELETEONRELEASE = 67108864;
export const STGM_NOSCRATCH = 1048576;
export const STGM_CREATE = 4096;
export const STGM_CONVERT = 131072;
export const STGM_FAILIFTHERE = 0;
export const STGM_NOSNAPSHOT = 2097152;
export const STGM_DIRECT_SWMR = 4194304;
export const STGFMT_STORAGE = 0;
export const STGFMT_NATIVE = 1;
export const STGFMT_FILE = 3;
export const STGFMT_ANY = 4;
export const STGFMT_DOCFILE = 5;
export const STGFMT_DOCUMENT = 0;
export const MARSHALINTERFACE_MIN = 500;
export const ASYNC_MODE_COMPATIBILITY = 1;
export const ASYNC_MODE_DEFAULT = 0;
export const STGTY_REPEAT = 256;
export const STG_TOEND = "-1";
export const STG_LAYOUT_SEQUENTIAL = 0;
export const STG_LAYOUT_INTERLEAVED = 1;
export const COM_RIGHTS_EXECUTE = 1;
export const COM_RIGHTS_EXECUTE_LOCAL = 2;
export const COM_RIGHTS_EXECUTE_REMOTE = 4;
export const COM_RIGHTS_ACTIVATE_LOCAL = 8;
export const COM_RIGHTS_ACTIVATE_REMOTE = 16;
export const COM_RIGHTS_RESERVED1 = 32;
export const COM_RIGHTS_RESERVED2 = 64;
export const CWMO_MAX_HANDLES = 56;
export const ROTREGFLAGS_ALLOWANYCLIENT = 1;
export const APPIDREGFLAGS_ACTIVATE_IUSERVER_INDESKTOP = 1;
export const APPIDREGFLAGS_SECURE_SERVER_PROCESS_SD_AND_BIND = 2;
export const APPIDREGFLAGS_ISSUE_ACTIVATION_RPC_AT_IDENTIFY = 4;
export const APPIDREGFLAGS_IUSERVER_UNMODIFIED_LOGON_TOKEN = 8;
export const APPIDREGFLAGS_IUSERVER_SELF_SID_IN_LAUNCH_PERMISSION = 16;
export const APPIDREGFLAGS_IUSERVER_ACTIVATE_IN_CLIENT_SESSION_ONLY = 32;
export const APPIDREGFLAGS_RESERVED1 = 64;
export const APPIDREGFLAGS_RESERVED2 = 128;
export const APPIDREGFLAGS_RESERVED3 = 256;
export const APPIDREGFLAGS_RESERVED4 = 512;
export const APPIDREGFLAGS_RESERVED5 = 1024;
export const APPIDREGFLAGS_AAA_NO_IMPLICIT_ACTIVATE_AS_IU = 2048;
export const APPIDREGFLAGS_RESERVED7 = 4096;
export const APPIDREGFLAGS_RESERVED8 = 8192;
export const APPIDREGFLAGS_RESERVED9 = 16384;
export const DCOMSCM_ACTIVATION_USE_ALL_AUTHNSERVICES = 1;
export const DCOMSCM_ACTIVATION_DISALLOW_UNSECURE_CALL = 2;
export const DCOMSCM_RESOLVE_USE_ALL_AUTHNSERVICES = 4;
export const DCOMSCM_RESOLVE_DISALLOW_UNSECURE_CALL = 8;
export const DCOMSCM_PING_USE_MID_AUTHNSERVICE = 16;
export const DCOMSCM_PING_DISALLOW_UNSECURE_CALL = 32;
export const MAXLSN = 9223372036854775807n;
export const DMUS_ERRBASE = 4096;
export const PROPSETFLAG_DEFAULT = 0;
export const PROPSETFLAG_NONSIMPLE = 1;
export const PROPSETFLAG_ANSI = 2;
export const PROPSETFLAG_UNBUFFERED = 4;
export const PROPSETFLAG_CASE_SENSITIVE = 8;
export const PROPSET_BEHAVIOR_CASE_SENSITIVE = 1;
export const PID_DICTIONARY = 0;
export const PID_CODEPAGE = 1;
export const PID_FIRST_USABLE = 2;
export const PID_FIRST_NAME_DEFAULT = 4095;
export const PID_LOCALE = 2147483648;
export const PID_MODIFY_TIME = 2147483649;
export const PID_SECURITY = 2147483650;
export const PID_BEHAVIOR = 2147483651;
export const PID_ILLEGAL = 4294967295;
export const PID_MIN_READONLY = 2147483648;
export const PID_MAX_READONLY = 3221225471;
export const PRSPEC_INVALID = 4294967295;
export const PROPSETHDR_OSVERSION_UNKNOWN = 4294967295;
export const PIDDI_THUMBNAIL = 2;
export const PIDSI_TITLE = 2;
export const PIDSI_SUBJECT = 3;
export const PIDSI_AUTHOR = 4;
export const PIDSI_KEYWORDS = 5;
export const PIDSI_COMMENTS = 6;
export const PIDSI_TEMPLATE = 7;
export const PIDSI_LASTAUTHOR = 8;
export const PIDSI_REVNUMBER = 9;
export const PIDSI_EDITTIME = 10;
export const PIDSI_LASTPRINTED = 11;
export const PIDSI_CREATE_DTM = 12;
export const PIDSI_LASTSAVE_DTM = 13;
export const PIDSI_PAGECOUNT = 14;
export const PIDSI_WORDCOUNT = 15;
export const PIDSI_CHARCOUNT = 16;
export const PIDSI_THUMBNAIL = 17;
export const PIDSI_APPNAME = 18;
export const PIDSI_DOC_SECURITY = 19;
export const PIDDSI_CATEGORY = 2;
export const PIDDSI_PRESFORMAT = 3;
export const PIDDSI_BYTECOUNT = 4;
export const PIDDSI_LINECOUNT = 5;
export const PIDDSI_PARCOUNT = 6;
export const PIDDSI_SLIDECOUNT = 7;
export const PIDDSI_NOTECOUNT = 8;
export const PIDDSI_HIDDENCOUNT = 9;
export const PIDDSI_MMCLIPCOUNT = 10;
export const PIDDSI_SCALE = 11;
export const PIDDSI_HEADINGPAIR = 12;
export const PIDDSI_DOCPARTS = 13;
export const PIDDSI_MANAGER = 14;
export const PIDDSI_COMPANY = 15;
export const PIDDSI_LINKSDIRTY = 16;
export const PIDMSI_EDITOR = 2;
export const PIDMSI_SUPPLIER = 3;
export const PIDMSI_SOURCE = 4;
export const PIDMSI_SEQUENCE_NO = 5;
export const PIDMSI_PROJECT = 6;
export const PIDMSI_STATUS = 7;
export const PIDMSI_OWNER = 8;
export const PIDMSI_RATING = 9;
export const PIDMSI_PRODUCTION = 10;
export const PIDMSI_COPYRIGHT = 11;
export const CWCSTORAGENAME = 32;
export const STGOPTIONS_VERSION = 1;
export const CCH_MAX_PROPSTG_NAME = 31;
export const MKSYS_URLMONIKER = 6;
export const URL_MK_LEGACY = 0;
export const URL_MK_UNIFORM = 1;
export const URL_MK_NO_CANONICALIZE = 2;
export const FIEF_FLAG_FORCE_JITUI = 1;
export const FIEF_FLAG_PEEK = 2;
export const FIEF_FLAG_SKIP_INSTALLED_VERSION_CHECK = 4;
export const FIEF_FLAG_RESERVED_0 = 8;
export const FMFD_DEFAULT = 0;
export const FMFD_URLASFILENAME = 1;
export const FMFD_ENABLEMIMESNIFFING = 2;
export const FMFD_IGNOREMIMETEXTPLAIN = 4;
export const FMFD_SERVERMIME = 8;
export const FMFD_RESPECTTEXTPLAIN = 16;
export const FMFD_RETURNUPDATEDIMGMIMES = 32;
export const FMFD_RESERVED_1 = 64;
export const FMFD_RESERVED_2 = 128;
export const UAS_EXACTLEGACY = 4096;
export const URLMON_OPTION_USERAGENT = 268435457;
export const URLMON_OPTION_USERAGENT_REFRESH = 268435458;
export const URLMON_OPTION_URL_ENCODING = 268435460;
export const URLMON_OPTION_USE_BINDSTRINGCREDS = 268435464;
export const URLMON_OPTION_USE_BROWSERAPPSDOCUMENTS = 268435472;
export const CF_NULL = 0;
export const MK_S_ASYNCHRONOUS = 864693344658522600n;
export const S_ASYNCHRONOUS = 262632;
export const E_PENDING = 12113955258378;
export const INET_E_INVALID_URL = 864694446318157826n;
export const INET_E_NO_SESSION = 864695545829785603n;
export const INET_E_CANNOT_CONNECT = 864696645341413380n;
export const INET_E_RESOURCE_NOT_FOUND = 864697744853041157n;
export const INET_E_OBJECT_NOT_FOUND = 864698844364668934n;
export const INET_E_DATA_NOT_AVAILABLE = 864699943876296711n;
export const INET_E_DOWNLOAD_FAILURE = 864701043387924488n;
export const INET_E_AUTHENTICATION_REQUIRED = 864702142899552265n;
export const INET_E_NO_VALID_MEDIA = 864703242411180042n;
export const INET_E_CONNECTION_TIMEOUT = 864704341922807819n;
export const INET_E_INVALID_REQUEST = 864705441434435596n;
export const INET_E_UNKNOWN_PROTOCOL = 864706540946063373n;
export const INET_E_SECURITY_PROBLEM = 864707640457691150n;
export const INET_E_CANNOT_LOAD_DATA = 864708739969318927n;
export const INET_E_CANNOT_INSTANTIATE_OBJECT = 864718635573968912n;
export const INET_E_INVALID_CERTIFICATE = 864713138015830041n;
export const INET_E_REDIRECT_FAILED = 864714237527457812n;
export const INET_E_REDIRECT_TO_DIR = 864715337039085589n;
export const INET_E_CANNOT_LOCK_REQUEST = 864716436550713366n;
export const INET_E_USE_EXTEND_BINDING = 864717536062341143n;
export const INET_E_TERMINATED_BIND = 864719735085596696n;
export const INET_E_RESERVED_1 = 864720834597224474n;
export const INET_E_BLOCKED_REDIRECT_XSECURITYID = 864721934108852251n;
export const INET_E_DOMINJECTIONVALIDATION = 864723033620480028n;
export const INET_E_VTAB_SWITCH_FORCE_ENGINE = 864724133132107805n;
export const INET_E_HSTS_CERTIFICATE_ERROR = 864725232643735582n;
export const INET_E_RESERVED_2 = 864726332155363359n;
export const INET_E_RESERVED_3 = 864727431666991136n;
export const INET_E_RESERVED_4 = 864728531178618913n;
export const INET_E_RESERVED_5 = 864972622759985186n;
export const INET_E_ERROR_FIRST = 864694446318157826n;
export const INET_E_CODE_DOWNLOAD_DECLINED = 865254097736696064n;
export const INET_E_RESULT_DISPATCHED = 865535572713406976n;
export const INET_E_CANNOT_REPLACE_SFP_FILE = 865817047690117888n;
export const INET_E_CODE_INSTALL_SUPPRESSED = 866098522666828800n;
export const INET_E_CODE_INSTALL_BLOCKED_BY_HASH_POLICY = 866099622178456832n;
export const INET_E_DOWNLOAD_BLOCKED_BY_INPRIVATE = 866100721690084609n;
export const INET_E_CODE_INSTALL_BLOCKED_IMMERSIVE = 866101821201712386n;
export const INET_E_FORBIDFRAMING = 866102920713340163n;
export const INET_E_CODE_INSTALL_BLOCKED_ARM = 866104020224967940n;
export const INET_E_BLOCKED_PLUGGABLE_PROTOCOL = 866105119736595717n;
export const INET_E_BLOCKED_ENHANCEDPROTECTEDMODE = 866106219248223494n;
export const INET_E_CODE_INSTALL_BLOCKED_BITNESS = 866107318759851271n;
export const INET_E_DOWNLOAD_BLOCKED_BY_CSP = 864709839480947976n;
export const INET_E_ERROR_LAST = "-2146695928";
export const Uri_DISPLAY_NO_FRAGMENT = 1;
export const Uri_PUNYCODE_IDN_HOST = 2;
export const Uri_DISPLAY_IDN_HOST = 4;
export const Uri_DISPLAY_NO_PUNYCODE = 8;
export const Uri_ENCODING_USER_INFO_AND_PATH_IS_PERCENT_ENCODED_UTF8 = 1;
export const Uri_ENCODING_USER_INFO_AND_PATH_IS_CP = 2;
export const Uri_ENCODING_HOST_IS_IDN = 4;
export const Uri_ENCODING_HOST_IS_PERCENT_ENCODED_UTF8 = 8;
export const Uri_ENCODING_HOST_IS_PERCENT_ENCODED_CP = 16;
export const Uri_ENCODING_QUERY_AND_FRAGMENT_IS_PERCENT_ENCODED_UTF8 = 32;
export const Uri_ENCODING_QUERY_AND_FRAGMENT_IS_CP = 64;
export const UriBuilder_USE_ORIGINAL_FLAGS = 1;
export const WININETINFO_OPTION_LOCK_HANDLE = 65534;
export const URLOSTRM_USECACHEDCOPY_ONLY = 1;
export const URLOSTRM_USECACHEDCOPY = 2;
export const URLOSTRM_GETNEWESTVERSION = 3;
export const SET_FEATURE_ON_THREAD = 1;
export const SET_FEATURE_ON_PROCESS = 2;
export const SET_FEATURE_IN_REGISTRY = 4;
export const SET_FEATURE_ON_THREAD_LOCALMACHINE = 8;
export const SET_FEATURE_ON_THREAD_INTRANET = 16;
export const SET_FEATURE_ON_THREAD_TRUSTED = 32;
export const SET_FEATURE_ON_THREAD_INTERNET = 64;
export const SET_FEATURE_ON_THREAD_RESTRICTED = 128;
export const GET_FEATURE_FROM_THREAD = 1;
export const GET_FEATURE_FROM_PROCESS = 2;
export const GET_FEATURE_FROM_REGISTRY = 4;
export const GET_FEATURE_FROM_THREAD_LOCALMACHINE = 8;
export const GET_FEATURE_FROM_THREAD_INTRANET = 16;
export const GET_FEATURE_FROM_THREAD_TRUSTED = 32;
export const GET_FEATURE_FROM_THREAD_INTERNET = 64;
export const GET_FEATURE_FROM_THREAD_RESTRICTED = 128;
export const INET_E_USE_DEFAULT_PROTOCOLHANDLER = 864710938992574481n;
export const INET_E_USE_DEFAULT_SETTING = 864712038504202258n;
export const INET_E_DEFAULT_ACTION = "-2146697199";
export const INET_E_QUERYOPTION_UNKNOWN = 5628419350724627;
export const INET_E_REDIRECTING = 864714237527457812n;
export const PROTOCOLFLAG_NO_PICS_CHECK = 1;
export const MUTZ_NOSAVEDFILECHECK = 1;
export const MUTZ_ISFILE = 2;
export const MUTZ_ACCEPT_WILDCARD_SCHEME = 128;
export const MUTZ_ENFORCERESTRICTED = 256;
export const MUTZ_RESERVED = 512;
export const MUTZ_REQUIRESAVEDFILECHECK = 1024;
export const MUTZ_DONT_UNESCAPE = 2048;
export const MUTZ_DONT_USE_CACHE = 4096;
export const MUTZ_FORCE_INTRANET_FLAGS = 8192;
export const MUTZ_IGNORE_ZONE_MAPPINGS = 16384;
export const MAX_SIZE_SECURITY_ID = 512;
export const URLACTION_MIN = 4096;
export const URLACTION_DOWNLOAD_MIN = 4096;
export const URLACTION_DOWNLOAD_SIGNED_ACTIVEX = 4097;
export const URLACTION_DOWNLOAD_UNSIGNED_ACTIVEX = 4100;
export const URLACTION_DOWNLOAD_CURR_MAX = 4100;
export const URLACTION_DOWNLOAD_MAX = 4607;
export const URLACTION_ACTIVEX_MIN = 4608;
export const URLACTION_ACTIVEX_RUN = 4608;
export const URLPOLICY_ACTIVEX_CHECK_LIST = 65536;
export const URLACTION_ACTIVEX_OVERRIDE_OBJECT_SAFETY = 4609;
export const URLACTION_ACTIVEX_OVERRIDE_DATA_SAFETY = 4610;
export const URLACTION_ACTIVEX_OVERRIDE_SCRIPT_SAFETY = 4611;
export const URLACTION_SCRIPT_OVERRIDE_SAFETY = 5121;
export const URLACTION_ACTIVEX_CONFIRM_NOOBJECTSAFETY = 4612;
export const URLACTION_ACTIVEX_TREATASUNTRUSTED = 4613;
export const URLACTION_ACTIVEX_NO_WEBOC_SCRIPT = 4614;
export const URLACTION_ACTIVEX_OVERRIDE_REPURPOSEDETECTION = 4615;
export const URLACTION_ACTIVEX_OVERRIDE_OPTIN = 4616;
export const URLACTION_ACTIVEX_SCRIPTLET_RUN = 4617;
export const URLACTION_ACTIVEX_DYNSRC_VIDEO_AND_ANIMATION = 4618;
export const URLACTION_ACTIVEX_OVERRIDE_DOMAINLIST = 4619;
export const URLACTION_ACTIVEX_ALLOW_TDC = 4620;
export const URLACTION_ACTIVEX_CURR_MAX = 4620;
export const URLACTION_ACTIVEX_MAX = 5119;
export const URLACTION_SCRIPT_MIN = 5120;
export const URLACTION_SCRIPT_RUN = 5120;
export const URLACTION_SCRIPT_JAVA_USE = 5122;
export const URLACTION_SCRIPT_SAFE_ACTIVEX = 5125;
export const URLACTION_CROSS_DOMAIN_DATA = 5126;
export const URLACTION_SCRIPT_PASTE = 5127;
export const URLACTION_ALLOW_XDOMAIN_SUBFRAME_RESIZE = 5128;
export const URLACTION_SCRIPT_XSSFILTER = 5129;
export const URLACTION_SCRIPT_NAVIGATE = 5130;
export const URLACTION_PLUGGABLE_PROTOCOL_XHR = 5131;
export const URLACTION_ALLOW_VBSCRIPT_IE = 5132;
export const URLACTION_ALLOW_JSCRIPT_IE = 5133;
export const URLACTION_SCRIPT_CURR_MAX = 5133;
export const URLACTION_SCRIPT_MAX = 5631;
export const URLACTION_HTML_MIN = 5632;
export const URLACTION_HTML_SUBMIT_FORMS = 5633;
export const URLACTION_HTML_SUBMIT_FORMS_FROM = 5634;
export const URLACTION_HTML_SUBMIT_FORMS_TO = 5635;
export const URLACTION_HTML_FONT_DOWNLOAD = 5636;
export const URLACTION_HTML_JAVA_RUN = 5637;
export const URLACTION_HTML_USERDATA_SAVE = 5638;
export const URLACTION_HTML_SUBFRAME_NAVIGATE = 5639;
export const URLACTION_HTML_META_REFRESH = 5640;
export const URLACTION_HTML_MIXED_CONTENT = 5641;
export const URLACTION_HTML_INCLUDE_FILE_PATH = 5642;
export const URLACTION_HTML_ALLOW_INJECTED_DYNAMIC_HTML = 5643;
export const URLACTION_HTML_REQUIRE_UTF8_DOCUMENT_CODEPAGE = 5644;
export const URLACTION_HTML_ALLOW_CROSS_DOMAIN_CANVAS = 5645;
export const URLACTION_HTML_ALLOW_WINDOW_CLOSE = 5646;
export const URLACTION_HTML_ALLOW_CROSS_DOMAIN_WEBWORKER = 5647;
export const URLACTION_HTML_ALLOW_CROSS_DOMAIN_TEXTTRACK = 5648;
export const URLACTION_HTML_ALLOW_INDEXEDDB = 5649;
export const URLACTION_HTML_MAX = 6143;
export const URLACTION_SHELL_MIN = 6144;
export const URLACTION_SHELL_INSTALL_DTITEMS = 6144;
export const URLACTION_SHELL_MOVE_OR_COPY = 6146;
export const URLACTION_SHELL_FILE_DOWNLOAD = 6147;
export const URLACTION_SHELL_VERB = 6148;
export const URLACTION_SHELL_WEBVIEW_VERB = 6149;
export const URLACTION_SHELL_SHELLEXECUTE = 6150;
export const URLACTION_SHELL_EXECUTE_HIGHRISK = 6150;
export const URLACTION_SHELL_EXECUTE_MODRISK = 6151;
export const URLACTION_SHELL_EXECUTE_LOWRISK = 6152;
export const URLACTION_SHELL_POPUPMGR = 6153;
export const URLACTION_SHELL_RTF_OBJECTS_LOAD = 6154;
export const URLACTION_SHELL_ENHANCED_DRAGDROP_SECURITY = 6155;
export const URLACTION_SHELL_EXTENSIONSECURITY = 6156;
export const URLACTION_SHELL_SECURE_DRAGSOURCE = 6157;
export const URLACTION_SHELL_REMOTEQUERY = 6158;
export const URLACTION_SHELL_PREVIEW = 6159;
export const URLACTION_SHELL_SHARE = 6160;
export const URLACTION_SHELL_ALLOW_CROSS_SITE_SHARE = 6161;
export const URLACTION_SHELL_TOCTOU_RISK = 6162;
export const URLACTION_SHELL_CURR_MAX = 6162;
export const URLACTION_SHELL_MAX = 6655;
export const URLACTION_NETWORK_MIN = 6656;
export const URLACTION_CREDENTIALS_USE = 6656;
export const URLPOLICY_CREDENTIALS_SILENT_LOGON_OK = 0;
export const URLPOLICY_CREDENTIALS_MUST_PROMPT_USER = 65536;
export const URLPOLICY_CREDENTIALS_CONDITIONAL_PROMPT = 131072;
export const URLPOLICY_CREDENTIALS_ANONYMOUS_ONLY = 196608;
export const URLACTION_AUTHENTICATE_CLIENT = 6657;
export const URLPOLICY_AUTHENTICATE_CLEARTEXT_OK = 0;
export const URLPOLICY_AUTHENTICATE_CHALLENGE_RESPONSE = 65536;
export const URLPOLICY_AUTHENTICATE_MUTUAL_ONLY = 196608;
export const URLACTION_COOKIES = 6658;
export const URLACTION_COOKIES_SESSION = 6659;
export const URLACTION_CLIENT_CERT_PROMPT = 6660;
export const URLACTION_COOKIES_THIRD_PARTY = 6661;
export const URLACTION_COOKIES_SESSION_THIRD_PARTY = 6662;
export const URLACTION_COOKIES_ENABLED = 6672;
export const URLACTION_NETWORK_CURR_MAX = 6672;
export const URLACTION_NETWORK_MAX = 7167;
export const URLACTION_JAVA_MIN = 7168;
export const URLACTION_JAVA_PERMISSIONS = 7168;
export const URLPOLICY_JAVA_PROHIBIT = 0;
export const URLPOLICY_JAVA_HIGH = 65536;
export const URLPOLICY_JAVA_MEDIUM = 131072;
export const URLPOLICY_JAVA_LOW = 196608;
export const URLPOLICY_JAVA_CUSTOM = 8388608;
export const URLACTION_JAVA_CURR_MAX = 7168;
export const URLACTION_JAVA_MAX = 7423;
export const URLACTION_INFODELIVERY_MIN = 7424;
export const URLACTION_INFODELIVERY_NO_ADDING_CHANNELS = 7424;
export const URLACTION_INFODELIVERY_NO_EDITING_CHANNELS = 7425;
export const URLACTION_INFODELIVERY_NO_REMOVING_CHANNELS = 7426;
export const URLACTION_INFODELIVERY_NO_ADDING_SUBSCRIPTIONS = 7427;
export const URLACTION_INFODELIVERY_NO_EDITING_SUBSCRIPTIONS = 7428;
export const URLACTION_INFODELIVERY_NO_REMOVING_SUBSCRIPTIONS = 7429;
export const URLACTION_INFODELIVERY_NO_CHANNEL_LOGGING = 7430;
export const URLACTION_INFODELIVERY_CURR_MAX = 7430;
export const URLACTION_INFODELIVERY_MAX = 7679;
export const URLACTION_CHANNEL_SOFTDIST_MIN = 7680;
export const URLACTION_CHANNEL_SOFTDIST_PERMISSIONS = 7685;
export const URLPOLICY_CHANNEL_SOFTDIST_PROHIBIT = 65536;
export const URLPOLICY_CHANNEL_SOFTDIST_PRECACHE = 131072;
export const URLPOLICY_CHANNEL_SOFTDIST_AUTOINSTALL = 196608;
export const URLACTION_CHANNEL_SOFTDIST_MAX = 7935;
export const URLACTION_DOTNET_USERCONTROLS = 8197;
export const URLACTION_BEHAVIOR_MIN = 8192;
export const URLACTION_BEHAVIOR_RUN = 8192;
export const URLPOLICY_BEHAVIOR_CHECK_LIST = 65536;
export const URLACTION_FEATURE_MIN = 8448;
export const URLACTION_FEATURE_MIME_SNIFFING = 8448;
export const URLACTION_FEATURE_ZONE_ELEVATION = 8449;
export const URLACTION_FEATURE_WINDOW_RESTRICTIONS = 8450;
export const URLACTION_FEATURE_SCRIPT_STATUS_BAR = 8451;
export const URLACTION_FEATURE_FORCE_ADDR_AND_STATUS = 8452;
export const URLACTION_FEATURE_BLOCK_INPUT_PROMPTS = 8453;
export const URLACTION_FEATURE_DATA_BINDING = 8454;
export const URLACTION_FEATURE_CROSSDOMAIN_FOCUS_CHANGE = 8455;
export const URLACTION_AUTOMATIC_DOWNLOAD_UI_MIN = 8704;
export const URLACTION_AUTOMATIC_DOWNLOAD_UI = 8704;
export const URLACTION_AUTOMATIC_ACTIVEX_UI = 8705;
export const URLACTION_ALLOW_RESTRICTEDPROTOCOLS = 8960;
export const URLACTION_ALLOW_APEVALUATION = 8961;
export const URLACTION_ALLOW_XHR_EVALUATION = 8962;
export const URLACTION_WINDOWS_BROWSER_APPLICATIONS = 9216;
export const URLACTION_XPS_DOCUMENTS = 9217;
export const URLACTION_LOOSE_XAML = 9218;
export const URLACTION_LOWRIGHTS = 9472;
export const URLACTION_WINFX_SETUP = 9728;
export const URLACTION_INPRIVATE_BLOCKING = 9984;
export const URLACTION_ALLOW_AUDIO_VIDEO = 9985;
export const URLACTION_ALLOW_ACTIVEX_FILTERING = 9986;
export const URLACTION_ALLOW_STRUCTURED_STORAGE_SNIFFING = 9987;
export const URLACTION_ALLOW_AUDIO_VIDEO_PLUGINS = 9988;
export const URLACTION_ALLOW_ZONE_ELEVATION_VIA_OPT_OUT = 9989;
export const URLACTION_ALLOW_ZONE_ELEVATION_OPT_OUT_ADDITION = 9990;
export const URLACTION_ALLOW_CROSSDOMAIN_DROP_WITHIN_WINDOW = 9992;
export const URLACTION_ALLOW_CROSSDOMAIN_DROP_ACROSS_WINDOWS = 9993;
export const URLACTION_ALLOW_CROSSDOMAIN_APPCACHE_MANIFEST = 9994;
export const URLACTION_ALLOW_RENDER_LEGACY_DXTFILTERS = 9995;
export const URLACTION_ALLOW_ANTIMALWARE_SCANNING_OF_ACTIVEX = 9996;
export const URLACTION_ALLOW_CSS_EXPRESSIONS = 9997;
export const URLPOLICY_ALLOW = 0;
export const URLPOLICY_QUERY = 1;
export const URLPOLICY_DISALLOW = 3;
export const URLPOLICY_NOTIFY_ON_ALLOW = 16;
export const URLPOLICY_NOTIFY_ON_DISALLOW = 32;
export const URLPOLICY_LOG_ON_ALLOW = 64;
export const URLPOLICY_LOG_ON_DISALLOW = 128;
export const URLPOLICY_MASK_PERMISSIONS = 15;
export const URLPOLICY_DONTCHECKDLGBOX = 256;
export const URLZONE_ESC_FLAG = 256;
export const SECURITY_IE_STATE_GREEN = 0;
export const SECURITY_IE_STATE_RED = 1;
export const SOFTDIST_FLAG_USAGE_EMAIL = 1;
export const SOFTDIST_FLAG_USAGE_PRECACHE = 2;
export const SOFTDIST_FLAG_USAGE_AUTOINSTALL = 4;
export const SOFTDIST_FLAG_DELETE_SUBSCRIPTION = 8;
export const SOFTDIST_ADSTATE_NONE = 0;
export const SOFTDIST_ADSTATE_AVAILABLE = 1;
export const SOFTDIST_ADSTATE_DOWNLOADED = 2;
export const SOFTDIST_ADSTATE_INSTALLED = 3;
export const CONFIRMSAFETYACTION_LOADOBJECT = 1;
export const GUID_STRING_SIZE = 40;
export const DATA_NOT_AVAILABLE = 4294967295;
export const MTXDM_E_ENLISTRESOURCEFAILED = 2147803392;
export const CRR_NO_REASON_SUPPLIED = 0;
export const CRR_LIFETIME_LIMIT = 4294967295;
export const CRR_ACTIVATION_LIMIT = 4294967294;
export const CRR_CALL_LIMIT = 4294967293;
export const CRR_MEMORY_LIMIT = 4294967292;
export const CRR_RECYCLED_FROM_UI = 4294967291;
export const DVASPECT_CONTENT = 1;
export const DVASPECT_THUMBNAIL = 2;
export const DVASPECT_ICON = 4;
export const DVASPECT_DOCPRINT = 8;
export const TYSPEC_CLSID = 0;
export const TYSPEC_FILEEXT = 1;
export const TYSPEC_MIMETYPE = 2;
export const TYSPEC_FILENAME = 3;
export const TYSPEC_PROGID = 4;
export const TYSPEC_PACKAGENAME = 5;
export const TYSPEC_OBJECTID = 6;
export const STGC_DEFAULT = 0;
export const STGC_OVERWRITE = 1;
export const STGC_ONLYIFCURRENT = 2;
export const STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 4;
export const STGC_CONSOLIDATE = 8;
export const STGMOVE_MOVE = 0;
export const STGMOVE_COPY = 1;
export const STGMOVE_SHALLOWCOPY = 2;
export const STATFLAG_DEFAULT = 0;
export const STATFLAG_NONAME = 1;
export const STATFLAG_NOOPEN = 2;
export const CALLFRAME_COPY_NESTED = 1;
export const CALLFRAME_COPY_INDEPENDENT = 2;
export const CALLFRAME_FREE_NONE = 0;
export const CALLFRAME_FREE_IN = 1;
export const CALLFRAME_FREE_INOUT = 2;
export const CALLFRAME_FREE_OUT = 4;
export const CALLFRAME_FREE_TOP_INOUT = 8;
export const CALLFRAME_FREE_TOP_OUT = 16;
export const CALLFRAME_FREE_ALL = 31;
export const CALLFRAME_NULL_NONE = 0;
export const CALLFRAME_NULL_INOUT = 2;
export const CALLFRAME_NULL_OUT = 4;
export const CALLFRAME_NULL_ALL = 6;
export const CALLFRAME_WALK_IN = 1;
export const CALLFRAME_WALK_INOUT = 2;
export const CALLFRAME_WALK_OUT = 4;
export const REGCLS_SINGLEUSE = 0;
export const REGCLS_MULTIPLEUSE = 1;
export const REGCLS_MULTI_SEPARATE = 2;
export const REGCLS_SUSPENDED = 4;
export const REGCLS_SURROGATE = 8;
export const REGCLS_AGILE = 16;
export const COINITBASE_MULTITHREADED = 0;
export const MEMCTX_TASK = 1;
export const MEMCTX_SHARED = 2;
export const MEMCTX_MACSYSTEM = 3;
export const MEMCTX_UNKNOWN = "-1";
export const MEMCTX_SAME = "-2";
export const CLSCTX_INPROC_SERVER = 1;
export const CLSCTX_INPROC_HANDLER = 2;
export const CLSCTX_LOCAL_SERVER = 4;
export const CLSCTX_INPROC_SERVER16 = 8;
export const CLSCTX_REMOTE_SERVER = 16;
export const CLSCTX_INPROC_HANDLER16 = 32;
export const CLSCTX_RESERVED1 = 64;
export const CLSCTX_RESERVED2 = 128;
export const CLSCTX_RESERVED3 = 256;
export const CLSCTX_RESERVED4 = 512;
export const CLSCTX_NO_CODE_DOWNLOAD = 1024;
export const CLSCTX_RESERVED5 = 2048;
export const CLSCTX_NO_CUSTOM_MARSHAL = 4096;
export const CLSCTX_ENABLE_CODE_DOWNLOAD = 8192;
export const CLSCTX_NO_FAILURE_LOG = 16384;
export const CLSCTX_DISABLE_AAA = 32768;
export const CLSCTX_ENABLE_AAA = 65536;
export const CLSCTX_FROM_DEFAULT_CONTEXT = 131072;
export const CLSCTX_ACTIVATE_X86_SERVER = 262144;
export const CLSCTX_ACTIVATE_32_BIT_SERVER = 262144;
export const CLSCTX_ACTIVATE_64_BIT_SERVER = 524288;
export const CLSCTX_ENABLE_CLOAKING = 1048576;
export const CLSCTX_APPCONTAINER = 4194304;
export const CLSCTX_ACTIVATE_AAA_AS_IU = 8388608;
export const CLSCTX_RESERVED6 = 16777216;
export const CLSCTX_ACTIVATE_ARM32_SERVER = 33554432;
export const CLSCTX_PS_DLL = 2147483648;
export const CLSCTX_ALL = 23;
export const CLSCTX_SERVER = 21;
export const MSHLFLAGS_NORMAL = 0;
export const MSHLFLAGS_TABLESTRONG = 1;
export const MSHLFLAGS_TABLEWEAK = 2;
export const MSHLFLAGS_NOPING = 4;
export const MSHLFLAGS_RESERVED1 = 8;
export const MSHLFLAGS_RESERVED2 = 16;
export const MSHLFLAGS_RESERVED3 = 32;
export const MSHLFLAGS_RESERVED4 = 64;
export const MSHCTX_LOCAL = 0;
export const MSHCTX_NOSHAREDMEM = 1;
export const MSHCTX_DIFFERENTMACHINE = 2;
export const MSHCTX_INPROC = 3;
export const MSHCTX_CROSSCTX = 4;
export const MSHCTX_CONTAINER = 5;
export const EXTCONN_STRONG = 1;
export const EXTCONN_WEAK = 2;
export const EXTCONN_CALLABLE = 4;
export const STGTY_STORAGE = 1;
export const STGTY_STREAM = 2;
export const STGTY_LOCKBYTES = 3;
export const STGTY_PROPERTY = 4;
export const STREAM_SEEK_SET = 0;
export const STREAM_SEEK_CUR = 1;
export const STREAM_SEEK_END = 2;
export const EOAC_NONE = 0;
export const EOAC_MUTUAL_AUTH = 1;
export const EOAC_STATIC_CLOAKING = 32;
export const EOAC_DYNAMIC_CLOAKING = 64;
export const EOAC_ANY_AUTHORITY = 128;
export const EOAC_MAKE_FULLSIC = 256;
export const EOAC_DEFAULT = 2048;
export const EOAC_SECURE_REFS = 2;
export const EOAC_ACCESS_CONTROL = 4;
export const EOAC_APPID = 8;
export const EOAC_DYNAMIC = 16;
export const EOAC_REQUIRE_FULLSIC = 512;
export const EOAC_AUTO_IMPERSONATE = 1024;
export const EOAC_DISABLE_AAA = 4096;
export const EOAC_NO_CUSTOM_MARSHAL = 8192;
export const EOAC_RESERVED1 = 16384;
export const COMBND_RPCTIMEOUT = 1;
export const COMBND_SERVER_LOCALITY = 2;
export const COMBND_RESERVED1 = 4;
export const COMBND_RESERVED2 = 5;
export const COMBND_RESERVED3 = 8;
export const COMBND_RESERVED4 = 16;
export const SERVER_LOCALITY_PROCESS_LOCAL = 0;
export const SERVER_LOCALITY_MACHINE_LOCAL = 1;
export const SERVER_LOCALITY_REMOTE = 2;
export const COMGLB_EXCEPTION_HANDLING = 1;
export const COMGLB_APPID = 2;
export const COMGLB_RPC_THREADPOOL_SETTING = 3;
export const COMGLB_RO_SETTINGS = 4;
export const COMGLB_UNMARSHALING_POLICY = 5;
export const COMGLB_PROPERTIES_RESERVED1 = 6;
export const COMGLB_PROPERTIES_RESERVED2 = 7;
export const COMGLB_PROPERTIES_RESERVED3 = 8;
export const COMGLB_EXCEPTION_HANDLE = 0;
export const COMGLB_EXCEPTION_DONOT_HANDLE_FATAL = 1;
export const COMGLB_EXCEPTION_DONOT_HANDLE = 1;
export const COMGLB_EXCEPTION_DONOT_HANDLE_ANY = 2;
export const COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL = 0;
export const COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL = 1;
export const COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES = 1;
export const COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES = 2;
export const COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES = 4;
export const COMGLB_FAST_RUNDOWN = 8;
export const COMGLB_RESERVED1 = 16;
export const COMGLB_RESERVED2 = 32;
export const COMGLB_RESERVED3 = 64;
export const COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES = 128;
export const COMGLB_RESERVED4 = 256;
export const COMGLB_RESERVED5 = 512;
export const COMGLB_RESERVED6 = 1024;
export const COMGLB_UNMARSHALING_POLICY_NORMAL = 0;
export const COMGLB_UNMARSHALING_POLICY_STRONG = 1;
export const COMGLB_UNMARSHALING_POLICY_HYBRID = 2;
export const DCOM_NONE = 0;
export const DCOM_CALL_COMPLETE = 1;
export const DCOM_CALL_CANCELED = 2;
export const APTTYPEQUALIFIER_NONE = 0;
export const APTTYPEQUALIFIER_IMPLICIT_MTA = 1;
export const APTTYPEQUALIFIER_NA_ON_MTA = 2;
export const APTTYPEQUALIFIER_NA_ON_STA = 3;
export const APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA = 4;
export const APTTYPEQUALIFIER_NA_ON_MAINSTA = 5;
export const APTTYPEQUALIFIER_APPLICATION_STA = 6;
export const APTTYPEQUALIFIER_RESERVED_1 = 7;
export const APTTYPE_CURRENT = "-1";
export const APTTYPE_STA = 0;
export const APTTYPE_MTA = 1;
export const APTTYPE_NA = 2;
export const APTTYPE_MAINSTA = 3;
export const THDTYPE_BLOCKMESSAGES = 0;
export const THDTYPE_PROCESSMESSAGES = 1;
export const CO_MARSHALING_SOURCE_IS_APP_CONTAINER = 0;
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_1 = "-2147483648";
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_2 = "-2147483647";
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_3 = "-2147483646";
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_4 = "-2147483645";
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_5 = "-2147483644";
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_6 = "-2147483643";
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_7 = "-2147483642";
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_8 = "-2147483641";
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_9 = "-2147483640";
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_10 = "-2147483639";
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_11 = "-2147483638";
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_12 = "-2147483637";
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_13 = "-2147483636";
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_14 = "-2147483635";
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_15 = "-2147483634";
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_16 = "-2147483633";
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_17 = "-2147483632";
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_18 = "-2147483631";
export const BIND_MAYBOTHERUSER = 1;
export const BIND_JUSTTESTEXISTENCE = 2;
export const MKSYS_NONE = 0;
export const MKSYS_GENERICCOMPOSITE = 1;
export const MKSYS_FILEMONIKER = 2;
export const MKSYS_ANTIMONIKER = 3;
export const MKSYS_ITEMMONIKER = 4;
export const MKSYS_POINTERMONIKER = 5;
export const MKSYS_CLASSMONIKER = 7;
export const MKSYS_OBJREFMONIKER = 8;
export const MKSYS_SESSIONMONIKER = 9;
export const MKSYS_LUAMONIKER = 10;
export const MKRREDUCE_ONE = 196608;
export const MKRREDUCE_TOUSER = 131072;
export const MKRREDUCE_THROUGHUSER = 65536;
export const MKRREDUCE_ALL = 0;
export const ADVF_NODATA = 1;
export const ADVF_PRIMEFIRST = 2;
export const ADVF_ONLYONCE = 4;
export const ADVF_DATAONSTOP = 64;
export const ADVFCACHE_NOHANDLER = 8;
export const ADVFCACHE_FORCEBUILTIN = 16;
export const ADVFCACHE_ONSAVE = 32;
export const TYMED_HGLOBAL = 1;
export const TYMED_FILE = 2;
export const TYMED_ISTREAM = 4;
export const TYMED_ISTORAGE = 8;
export const TYMED_GDI = 16;
export const TYMED_MFPICT = 32;
export const TYMED_ENHMF = 64;
export const TYMED_NULL = 0;
export const DATADIR_GET = 1;
export const DATADIR_SET = 2;
export const CALLTYPE_TOPLEVEL = 1;
export const CALLTYPE_NESTED = 2;
export const CALLTYPE_ASYNC = 3;
export const CALLTYPE_TOPLEVEL_CALLPENDING = 4;
export const CALLTYPE_ASYNC_CALLPENDING = 5;
export const SERVERCALL_ISHANDLED = 0;
export const SERVERCALL_REJECTED = 1;
export const SERVERCALL_RETRYLATER = 2;
export const PENDINGTYPE_TOPLEVEL = 1;
export const PENDINGTYPE_NESTED = 2;
export const PENDINGMSG_CANCELCALL = 0;
export const PENDINGMSG_WAITNOPROCESS = 1;
export const PENDINGMSG_WAITDEFPROCESS = 2;
export const ServerApplication = 0;
export const LibraryApplication = 1;
export const IdleShutdown = 0;
export const ForcedShutdown = 1;
export const COINIT_APARTMENTTHREADED = 2;
export const COINIT_MULTITHREADED = 0;
export const COINIT_DISABLE_OLE1DDE = 4;
export const COINIT_SPEED_OVER_MEMORY = 8;
export const SD_LAUNCHPERMISSIONS = 0;
export const SD_ACCESSPERMISSIONS = 1;
export const SD_LAUNCHRESTRICTIONS = 2;
export const SD_ACCESSRESTRICTIONS = 3;
export const COWAIT_DEFAULT = 0;
export const COWAIT_WAITALL = 1;
export const COWAIT_ALERTABLE = 2;
export const COWAIT_INPUTAVAILABLE = 4;
export const COWAIT_DISPATCH_CALLS = 8;
export const COWAIT_DISPATCH_WINDOW_MESSAGES = 16;
export const CWMO_DEFAULT = 0;
export const CWMO_DISPATCH_CALLS = 1;
export const CWMO_DISPATCH_WINDOW_MESSAGES = 2;
export const SMEXF_SERVER = 1;
export const SMEXF_HANDLER = 2;
export const LOCK_WRITE = 1;
export const LOCK_EXCLUSIVE = 2;
export const LOCK_ONLYONCE = 4;
export const EOC_NewObject = 0;
export const EOC_ModifiedObject = 1;
export const EOC_DeletedObject = 2;
export const PIDMSI_STATUS_NORMAL = 0;
export const PIDMSI_STATUS_NEW = 1;
export const PIDMSI_STATUS_PRELIM = 2;
export const PIDMSI_STATUS_DRAFT = 3;
export const PIDMSI_STATUS_INPROGRESS = 4;
export const PIDMSI_STATUS_EDIT = 5;
export const PIDMSI_STATUS_REVIEW = 6;
export const PIDMSI_STATUS_PROOF = 7;
export const PIDMSI_STATUS_FINAL = 8;
export const PIDMSI_STATUS_OTHER = 32767;
export const IE_EPM_OBJECT_EVENT = 0;
export const IE_EPM_OBJECT_MUTEX = 1;
export const IE_EPM_OBJECT_SEMAPHORE = 2;
export const IE_EPM_OBJECT_SHARED_MEMORY = 3;
export const IE_EPM_OBJECT_WAITABLE_TIMER = 4;
export const IE_EPM_OBJECT_FILE = 5;
export const IE_EPM_OBJECT_NAMED_PIPE = 6;
export const IE_EPM_OBJECT_REGISTRY = 7;
export const MIMETYPEPROP = 0;
export const USE_SRC_URL = 1;
export const CLASSIDPROP = 2;
export const TRUSTEDDOWNLOADPROP = 3;
export const POPUPLEVELPROP = 4;
export const BINDVERB_GET = 0;
export const BINDVERB_POST = 1;
export const BINDVERB_PUT = 2;
export const BINDVERB_CUSTOM = 3;
export const BINDVERB_RESERVED1 = 4;
export const BINDF_ASYNCHRONOUS = 1;
export const BINDF_ASYNCSTORAGE = 2;
export const BINDF_NOPROGRESSIVERENDERING = 4;
export const BINDF_OFFLINEOPERATION = 8;
export const BINDF_GETNEWESTVERSION = 16;
export const BINDF_NOWRITECACHE = 32;
export const BINDF_NEEDFILE = 64;
export const BINDF_PULLDATA = 128;
export const BINDF_IGNORESECURITYPROBLEM = 256;
export const BINDF_RESYNCHRONIZE = 512;
export const BINDF_HYPERLINK = 1024;
export const BINDF_NO_UI = 2048;
export const BINDF_SILENTOPERATION = 4096;
export const BINDF_PRAGMA_NO_CACHE = 8192;
export const BINDF_GETCLASSOBJECT = 16384;
export const BINDF_RESERVED_1 = 32768;
export const BINDF_FREE_THREADED = 65536;
export const BINDF_DIRECT_READ = 131072;
export const BINDF_FORMS_SUBMIT = 262144;
export const BINDF_GETFROMCACHE_IF_NET_FAIL = 524288;
export const BINDF_FROMURLMON = 1048576;
export const BINDF_FWD_BACK = 2097152;
export const BINDF_PREFERDEFAULTHANDLER = 4194304;
export const BINDF_ENFORCERESTRICTED = 8388608;
export const BINDF_RESERVED_2 = "-2147483648";
export const BINDF_RESERVED_3 = 16777216;
export const BINDF_RESERVED_4 = 33554432;
export const BINDF_RESERVED_5 = 67108864;
export const BINDF_RESERVED_6 = 134217728;
export const BINDF_RESERVED_7 = 1073741824;
export const BINDF_RESERVED_8 = 536870912;
export const URL_ENCODING_NONE = 0;
export const URL_ENCODING_ENABLE_UTF8 = 268435456;
export const URL_ENCODING_DISABLE_UTF8 = 536870912;
export const BINDINFO_OPTIONS_WININETFLAG = 65536;
export const BINDINFO_OPTIONS_ENABLE_UTF8 = 131072;
export const BINDINFO_OPTIONS_DISABLE_UTF8 = 262144;
export const BINDINFO_OPTIONS_USE_IE_ENCODING = 524288;
export const BINDINFO_OPTIONS_BINDTOOBJECT = 1048576;
export const BINDINFO_OPTIONS_SECURITYOPTOUT = 2097152;
export const BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN = 4194304;
export const BINDINFO_OPTIONS_USEBINDSTRINGCREDS = 8388608;
export const BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS = 16777216;
export const BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE = 33554432;
export const BINDINFO_WPC_DOWNLOADBLOCKED = 134217728;
export const BINDINFO_WPC_LOGGING_ENABLED = 268435456;
export const BINDINFO_OPTIONS_ALLOWCONNECTDATA = 536870912;
export const BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS = 1073741824;
export const BINDINFO_OPTIONS_SHDOCVW_NAVIGATE = "-2147483648";
export const BSCF_FIRSTDATANOTIFICATION = 1;
export const BSCF_INTERMEDIATEDATANOTIFICATION = 2;
export const BSCF_LASTDATANOTIFICATION = 4;
export const BSCF_DATAFULLYAVAILABLE = 8;
export const BSCF_AVAILABLEDATASIZEUNKNOWN = 16;
export const BSCF_SKIPDRAINDATAFORFILEURLS = 32;
export const BSCF_64BITLENGTHDOWNLOAD = 64;
export const BINDSTATUS_FINDINGRESOURCE = 1;
export const BINDSTATUS_CONNECTING = 2;
export const BINDSTATUS_REDIRECTING = 3;
export const BINDSTATUS_BEGINDOWNLOADDATA = 4;
export const BINDSTATUS_DOWNLOADINGDATA = 5;
export const BINDSTATUS_ENDDOWNLOADDATA = 6;
export const BINDSTATUS_BEGINDOWNLOADCOMPONENTS = 7;
export const BINDSTATUS_INSTALLINGCOMPONENTS = 8;
export const BINDSTATUS_ENDDOWNLOADCOMPONENTS = 9;
export const BINDSTATUS_USINGCACHEDCOPY = 10;
export const BINDSTATUS_SENDINGREQUEST = 11;
export const BINDSTATUS_CLASSIDAVAILABLE = 12;
export const BINDSTATUS_MIMETYPEAVAILABLE = 13;
export const BINDSTATUS_CACHEFILENAMEAVAILABLE = 14;
export const BINDSTATUS_BEGINSYNCOPERATION = 15;
export const BINDSTATUS_ENDSYNCOPERATION = 16;
export const BINDSTATUS_BEGINUPLOADDATA = 17;
export const BINDSTATUS_UPLOADINGDATA = 18;
export const BINDSTATUS_ENDUPLOADDATA = 19;
export const BINDSTATUS_PROTOCOLCLASSID = 20;
export const BINDSTATUS_ENCODING = 21;
export const BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE = 22;
export const BINDSTATUS_CLASSINSTALLLOCATION = 23;
export const BINDSTATUS_DECODING = 24;
export const BINDSTATUS_LOADINGMIMEHANDLER = 25;
export const BINDSTATUS_CONTENTDISPOSITIONATTACH = 26;
export const BINDSTATUS_FILTERREPORTMIMETYPE = 27;
export const BINDSTATUS_CLSIDCANINSTANTIATE = 28;
export const BINDSTATUS_IUNKNOWNAVAILABLE = 29;
export const BINDSTATUS_DIRECTBIND = 30;
export const BINDSTATUS_RAWMIMETYPE = 31;
export const BINDSTATUS_PROXYDETECTING = 32;
export const BINDSTATUS_ACCEPTRANGES = 33;
export const BINDSTATUS_COOKIE_SENT = 34;
export const BINDSTATUS_COMPACT_POLICY_RECEIVED = 35;
export const BINDSTATUS_COOKIE_SUPPRESSED = 36;
export const BINDSTATUS_COOKIE_STATE_UNKNOWN = 37;
export const BINDSTATUS_COOKIE_STATE_ACCEPT = 38;
export const BINDSTATUS_COOKIE_STATE_REJECT = 39;
export const BINDSTATUS_COOKIE_STATE_PROMPT = 40;
export const BINDSTATUS_COOKIE_STATE_LEASH = 41;
export const BINDSTATUS_COOKIE_STATE_DOWNGRADE = 42;
export const BINDSTATUS_POLICY_HREF = 43;
export const BINDSTATUS_P3P_HEADER = 44;
export const BINDSTATUS_SESSION_COOKIE_RECEIVED = 45;
export const BINDSTATUS_PERSISTENT_COOKIE_RECEIVED = 46;
export const BINDSTATUS_SESSION_COOKIES_ALLOWED = 47;
export const BINDSTATUS_CACHECONTROL = 48;
export const BINDSTATUS_CONTENTDISPOSITIONFILENAME = 49;
export const BINDSTATUS_MIMETEXTPLAINMISMATCH = 50;
export const BINDSTATUS_PUBLISHERAVAILABLE = 51;
export const BINDSTATUS_DISPLAYNAMEAVAILABLE = 52;
export const BINDSTATUS_SSLUX_NAVBLOCKED = 53;
export const BINDSTATUS_SERVER_MIMETYPEAVAILABLE = 54;
export const BINDSTATUS_SNIFFED_CLASSIDAVAILABLE = 55;
export const BINDSTATUS_64BIT_PROGRESS = 56;
export const BINDSTATUS_LAST = 56;
export const BINDSTATUS_RESERVED_0 = 57;
export const BINDSTATUS_RESERVED_1 = 58;
export const BINDSTATUS_RESERVED_2 = 59;
export const BINDSTATUS_RESERVED_3 = 60;
export const BINDSTATUS_RESERVED_4 = 61;
export const BINDSTATUS_RESERVED_5 = 62;
export const BINDSTATUS_RESERVED_6 = 63;
export const BINDSTATUS_RESERVED_7 = 64;
export const BINDSTATUS_RESERVED_8 = 65;
export const BINDSTATUS_RESERVED_9 = 66;
export const BINDSTATUS_RESERVED_A = 67;
export const BINDSTATUS_RESERVED_B = 68;
export const BINDSTATUS_RESERVED_C = 69;
export const BINDSTATUS_RESERVED_D = 70;
export const BINDSTATUS_RESERVED_E = 71;
export const BINDSTATUS_RESERVED_F = 72;
export const BINDSTATUS_RESERVED_10 = 73;
export const BINDSTATUS_RESERVED_11 = 74;
export const BINDSTATUS_RESERVED_12 = 75;
export const BINDSTATUS_RESERVED_13 = 76;
export const BINDSTATUS_RESERVED_14 = 77;
export const BINDSTATUS_LAST_PRIVATE = 77;
export const BINDF2_DISABLEBASICOVERHTTP = 1;
export const BINDF2_DISABLEAUTOCOOKIEHANDLING = 2;
export const BINDF2_READ_DATA_GREATER_THAN_4GB = 4;
export const BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID = 8;
export const BINDF2_SETDOWNLOADMODE = 32;
export const BINDF2_DISABLE_HTTP_REDIRECT_CACHING = 64;
export const BINDF2_KEEP_CALLBACK_MODULE_LOADED = 128;
export const BINDF2_ALLOW_PROXY_CRED_PROMPT = 256;
export const BINDF2_RESERVED_17 = 512;
export const BINDF2_RESERVED_16 = 1024;
export const BINDF2_RESERVED_15 = 2048;
export const BINDF2_RESERVED_14 = 4096;
export const BINDF2_RESERVED_13 = 8192;
export const BINDF2_RESERVED_12 = 16384;
export const BINDF2_RESERVED_11 = 32768;
export const BINDF2_RESERVED_10 = 65536;
export const BINDF2_RESERVED_F = 131072;
export const BINDF2_RESERVED_E = 262144;
export const BINDF2_RESERVED_D = 524288;
export const BINDF2_RESERVED_C = 1048576;
export const BINDF2_RESERVED_B = 2097152;
export const BINDF2_RESERVED_A = 4194304;
export const BINDF2_RESERVED_9 = 8388608;
export const BINDF2_RESERVED_8 = 16777216;
export const BINDF2_RESERVED_7 = 33554432;
export const BINDF2_RESERVED_6 = 67108864;
export const BINDF2_RESERVED_5 = 134217728;
export const BINDF2_RESERVED_4 = 268435456;
export const BINDF2_RESERVED_3 = 536870912;
export const BINDF2_RESERVED_2 = 1073741824;
export const BINDF2_RESERVED_1 = "-2147483648";
export const AUTHENTICATEF_PROXY = 1;
export const AUTHENTICATEF_BASIC = 2;
export const AUTHENTICATEF_HTTP = 4;
export const CIP_DISK_FULL = 0;
export const CIP_ACCESS_DENIED = 1;
export const CIP_NEWER_VERSION_EXISTS = 2;
export const CIP_OLDER_VERSION_EXISTS = 3;
export const CIP_NAME_CONFLICT = 4;
export const CIP_TRUST_VERIFICATION_COMPONENT_MISSING = 5;
export const CIP_EXE_SELF_REGISTERATION_TIMEOUT = 6;
export const CIP_UNSAFE_TO_ABORT = 7;
export const CIP_NEED_REBOOT = 8;
export const CIP_NEED_REBOOT_UI_PERMISSION = 9;
export const Uri_HOST_UNKNOWN = 0;
export const Uri_HOST_DNS = 1;
export const Uri_HOST_IPV4 = 2;
export const Uri_HOST_IPV6 = 3;
export const Uri_HOST_IDN = 4;
export const BINDSTRING_HEADERS = 1;
export const BINDSTRING_ACCEPT_MIMES = 2;
export const BINDSTRING_EXTRA_URL = 3;
export const BINDSTRING_LANGUAGE = 4;
export const BINDSTRING_USERNAME = 5;
export const BINDSTRING_PASSWORD = 6;
export const BINDSTRING_UA_PIXELS = 7;
export const BINDSTRING_UA_COLOR = 8;
export const BINDSTRING_OS = 9;
export const BINDSTRING_USER_AGENT = 10;
export const BINDSTRING_ACCEPT_ENCODINGS = 11;
export const BINDSTRING_POST_COOKIE = 12;
export const BINDSTRING_POST_DATA_MIME = 13;
export const BINDSTRING_URL = 14;
export const BINDSTRING_IID = 15;
export const BINDSTRING_FLAG_BIND_TO_OBJECT = 16;
export const BINDSTRING_PTR_BIND_CONTEXT = 17;
export const BINDSTRING_XDR_ORIGIN = 18;
export const BINDSTRING_DOWNLOADPATH = 19;
export const BINDSTRING_ROOTDOC_URL = 20;
export const BINDSTRING_INITIAL_FILENAME = 21;
export const BINDSTRING_PROXY_USERNAME = 22;
export const BINDSTRING_PROXY_PASSWORD = 23;
export const BINDSTRING_ENTERPRISE_ID = 24;
export const BINDSTRING_DOC_URL = 25;
export const BINDSTRING_SAMESITE_COOKIE_LEVEL = 26;
export const PI_PARSE_URL = 1;
export const PI_FILTER_MODE = 2;
export const PI_FORCE_ASYNC = 4;
export const PI_USE_WORKERTHREAD = 8;
export const PI_MIMEVERIFICATION = 16;
export const PI_CLSIDLOOKUP = 32;
export const PI_DATAPROGRESS = 64;
export const PI_SYNCHRONOUS = 128;
export const PI_APARTMENTTHREADED = 256;
export const PI_CLASSINSTALL = 512;
export const PI_PASSONBINDCTX = 8192;
export const PI_NOMIMEHANDLER = 32768;
export const PI_LOADAPPDIRECT = 16384;
export const PD_FORCE_SWITCH = 65536;
export const PI_PREFERDEFAULTHANDLER = 131072;
export const OIBDG_APARTMENTTHREADED = 256;
export const OIBDG_DATAONLY = 4096;
export const PARSE_CANONICALIZE = 1;
export const PARSE_FRIENDLY = 2;
export const PARSE_SECURITY_URL = 3;
export const PARSE_ROOTDOCUMENT = 4;
export const PARSE_DOCUMENT = 5;
export const PARSE_ANCHOR = 6;
export const PARSE_ENCODE_IS_UNESCAPE = 7;
export const PARSE_DECODE_IS_ESCAPE = 8;
export const PARSE_PATH_FROM_URL = 9;
export const PARSE_URL_FROM_PATH = 10;
export const PARSE_MIME = 11;
export const PARSE_SERVER = 12;
export const PARSE_SCHEMA = 13;
export const PARSE_SITE = 14;
export const PARSE_DOMAIN = 15;
export const PARSE_LOCATION = 16;
export const PARSE_SECURITY_DOMAIN = 17;
export const PARSE_ESCAPE = 18;
export const PARSE_UNESCAPE = 19;
export const PSU_DEFAULT = 1;
export const PSU_SECURITY_URL_ONLY = 2;
export const QUERY_EXPIRATION_DATE = 1;
export const QUERY_TIME_OF_LAST_CHANGE = 2;
export const QUERY_CONTENT_ENCODING = 3;
export const QUERY_CONTENT_TYPE = 4;
export const QUERY_REFRESH = 5;
export const QUERY_RECOMBINE = 6;
export const QUERY_CAN_NAVIGATE = 7;
export const QUERY_USES_NETWORK = 8;
export const QUERY_IS_CACHED = 9;
export const QUERY_IS_INSTALLEDENTRY = 10;
export const QUERY_IS_CACHED_OR_MAPPED = 11;
export const QUERY_USES_CACHE = 12;
export const QUERY_IS_SECURE = 13;
export const QUERY_IS_SAFE = 14;
export const QUERY_USES_HISTORYFOLDER = 15;
export const QUERY_IS_CACHED_AND_USABLE_OFFLINE = 16;
export const FEATURE_OBJECT_CACHING = 0;
export const FEATURE_ZONE_ELEVATION = 1;
export const FEATURE_MIME_HANDLING = 2;
export const FEATURE_MIME_SNIFFING = 3;
export const FEATURE_WINDOW_RESTRICTIONS = 4;
export const FEATURE_WEBOC_POPUPMANAGEMENT = 5;
export const FEATURE_BEHAVIORS = 6;
export const FEATURE_DISABLE_MK_PROTOCOL = 7;
export const FEATURE_LOCALMACHINE_LOCKDOWN = 8;
export const FEATURE_SECURITYBAND = 9;
export const FEATURE_RESTRICT_ACTIVEXINSTALL = 10;
export const FEATURE_VALIDATE_NAVIGATE_URL = 11;
export const FEATURE_RESTRICT_FILEDOWNLOAD = 12;
export const FEATURE_ADDON_MANAGEMENT = 13;
export const FEATURE_PROTOCOL_LOCKDOWN = 14;
export const FEATURE_HTTP_USERNAME_PASSWORD_DISABLE = 15;
export const FEATURE_SAFE_BINDTOOBJECT = 16;
export const FEATURE_UNC_SAVEDFILECHECK = 17;
export const FEATURE_GET_URL_DOM_FILEPATH_UNENCODED = 18;
export const FEATURE_TABBED_BROWSING = 19;
export const FEATURE_SSLUX = 20;
export const FEATURE_DISABLE_NAVIGATION_SOUNDS = 21;
export const FEATURE_DISABLE_LEGACY_COMPRESSION = 22;
export const FEATURE_FORCE_ADDR_AND_STATUS = 23;
export const FEATURE_XMLHTTP = 24;
export const FEATURE_DISABLE_TELNET_PROTOCOL = 25;
export const FEATURE_FEEDS = 26;
export const FEATURE_BLOCK_INPUT_PROMPTS = 27;
export const FEATURE_ENTRY_COUNT = 28;
export const PUAF_DEFAULT = 0;
export const PUAF_NOUI = 1;
export const PUAF_ISFILE = 2;
export const PUAF_WARN_IF_DENIED = 4;
export const PUAF_FORCEUI_FOREGROUND = 8;
export const PUAF_CHECK_TIFS = 16;
export const PUAF_DONTCHECKBOXINDIALOG = 32;
export const PUAF_TRUSTED = 64;
export const PUAF_ACCEPT_WILDCARD_SCHEME = 128;
export const PUAF_ENFORCERESTRICTED = 256;
export const PUAF_NOSAVEDFILECHECK = 512;
export const PUAF_REQUIRESAVEDFILECHECK = 1024;
export const PUAF_DONT_USE_CACHE = 4096;
export const PUAF_RESERVED1 = 8192;
export const PUAF_RESERVED2 = 16384;
export const PUAF_LMZ_UNLOCKED = 65536;
export const PUAF_LMZ_LOCKED = 131072;
export const PUAF_DEFAULTZONEPOL = 262144;
export const PUAF_NPL_USE_LOCKED_IF_RESTRICTED = 524288;
export const PUAF_NOUIIFLOCKED = 1048576;
export const PUAF_DRAGPROTOCOLCHECK = 2097152;
export const PUAFOUT_DEFAULT = 0;
export const PUAFOUT_ISLOCKZONEPOLICY = 1;
export const SZM_CREATE = 0;
export const SZM_DELETE = 1;
export const URLZONE_INVALID = "-1";
export const URLZONE_PREDEFINED_MIN = 0;
export const URLZONE_LOCAL_MACHINE = 0;
export const URLZONE_INTRANET = 1;
export const URLZONE_TRUSTED = 2;
export const URLZONE_INTERNET = 3;
export const URLZONE_UNTRUSTED = 4;
export const URLZONE_PREDEFINED_MAX = 999;
export const URLZONE_USER_MIN = 1000;
export const URLZONE_USER_MAX = 10000;
export const URLTEMPLATE_CUSTOM = 0;
export const URLTEMPLATE_PREDEFINED_MIN = 65536;
export const URLTEMPLATE_LOW = 65536;
export const URLTEMPLATE_MEDLOW = 66816;
export const URLTEMPLATE_MEDIUM = 69632;
export const URLTEMPLATE_MEDHIGH = 70912;
export const URLTEMPLATE_HIGH = 73728;
export const URLTEMPLATE_PREDEFINED_MAX = 131072;
export const MAX_ZONE_PATH = 260;
export const MAX_ZONE_DESCRIPTION = 200;
export const ZAFLAGS_CUSTOM_EDIT = 1;
export const ZAFLAGS_ADD_SITES = 2;
export const ZAFLAGS_REQUIRE_VERIFICATION = 4;
export const ZAFLAGS_INCLUDE_PROXY_OVERRIDE = 8;
export const ZAFLAGS_INCLUDE_INTRANET_SITES = 16;
export const ZAFLAGS_NO_UI = 32;
export const ZAFLAGS_SUPPORTS_VERIFICATION = 64;
export const ZAFLAGS_UNC_AS_INTRANET = 128;
export const ZAFLAGS_DETECT_INTRANET = 256;
export const ZAFLAGS_USE_LOCKED_ZONES = 65536;
export const ZAFLAGS_VERIFY_TEMPLATE_SETTINGS = 131072;
export const ZAFLAGS_NO_CACHE = 262144;
export const URLZONEREG_DEFAULT = 0;
export const URLZONEREG_HKLM = 1;
export const URLZONEREG_HKCU = 2;
export const BINDHANDLETYPES_APPCACHE = 0;
export const BINDHANDLETYPES_DEPENDENCY = 1;
export const BINDHANDLETYPES_COUNT = 2;
export const BINDINFOF_URLENCODESTGMEDDATA = 1;
export const BINDINFOF_URLENCODEDEXTRAINFO = 2;
export const Uri_PROPERTY_ABSOLUTE_URI = 0;
export const Uri_PROPERTY_STRING_START = 0;
export const Uri_PROPERTY_AUTHORITY = 1;
export const Uri_PROPERTY_DISPLAY_URI = 2;
export const Uri_PROPERTY_DOMAIN = 3;
export const Uri_PROPERTY_EXTENSION = 4;
export const Uri_PROPERTY_FRAGMENT = 5;
export const Uri_PROPERTY_HOST = 6;
export const Uri_PROPERTY_PASSWORD = 7;
export const Uri_PROPERTY_PATH = 8;
export const Uri_PROPERTY_PATH_AND_QUERY = 9;
export const Uri_PROPERTY_QUERY = 10;
export const Uri_PROPERTY_RAW_URI = 11;
export const Uri_PROPERTY_SCHEME_NAME = 12;
export const Uri_PROPERTY_USER_INFO = 13;
export const Uri_PROPERTY_USER_NAME = 14;
export const Uri_PROPERTY_STRING_LAST = 14;
export const Uri_PROPERTY_HOST_TYPE = 15;
export const Uri_PROPERTY_DWORD_START = 15;
export const Uri_PROPERTY_PORT = 16;
export const Uri_PROPERTY_SCHEME = 17;
export const Uri_PROPERTY_ZONE = 18;
export const Uri_PROPERTY_DWORD_LAST = 18;
export const TKIND_ENUM = 0;
export const TKIND_RECORD = 1;
export const TKIND_MODULE = 2;
export const TKIND_INTERFACE = 3;
export const TKIND_DISPATCH = 4;
export const TKIND_COCLASS = 5;
export const TKIND_ALIAS = 6;
export const TKIND_UNION = 7;
export const TKIND_MAX = 8;
export const CC_FASTCALL = 0;
export const CC_CDECL = 1;
export const CC_MSCPASCAL = 2;
export const CC_PASCAL = 2;
export const CC_MACPASCAL = 3;
export const CC_STDCALL = 4;
export const CC_FPFASTCALL = 5;
export const CC_SYSCALL = 6;
export const CC_MPWCDECL = 7;
export const CC_MPWPASCAL = 8;
export const CC_MAX = 9;
export const FUNC_VIRTUAL = 0;
export const FUNC_PUREVIRTUAL = 1;
export const FUNC_NONVIRTUAL = 2;
export const FUNC_STATIC = 3;
export const FUNC_DISPATCH = 4;
export const INVOKE_FUNC = 1;
export const INVOKE_PROPERTYGET = 2;
export const INVOKE_PROPERTYPUT = 4;
export const INVOKE_PROPERTYPUTREF = 8;
export const VAR_PERINSTANCE = 0;
export const VAR_STATIC = 1;
export const VAR_CONST = 2;
export const VAR_DISPATCH = 3;
export const DESCKIND_NONE = 0;
export const DESCKIND_FUNCDESC = 1;
export const DESCKIND_VARDESC = 2;
export const DESCKIND_TYPECOMP = 3;
export const DESCKIND_IMPLICITAPPOBJ = 4;
export const DESCKIND_MAX = 5;
export const SYS_WIN16 = 0;
export const SYS_WIN32 = 1;
export const SYS_MAC = 2;
export const SYS_WIN64 = 3;
export const COMAdminNotInUse = 0;
export const COMAdminInUseByCatalog = 1;
export const COMAdminInUseByRegistryUnknown = 2;
export const COMAdminInUseByRegistryProxyStub = 3;
export const COMAdminInUseByRegistryTypeLib = 4;
export const COMAdminInUseByRegistryClsid = 5;
export const COMAdmin32BitComponent = 1;
export const COMAdmin64BitComponent = 2;
export const COMAdminInstallNoUsers = 0;
export const COMAdminInstallUsers = 1;
export const COMAdminInstallForceOverwriteOfFiles = 2;
export const COMAdminExportNoUsers = 0;
export const COMAdminExportUsers = 1;
export const COMAdminExportApplicationProxy = 2;
export const COMAdminExportForceOverwriteOfFiles = 4;
export const COMAdminExportIn10Format = 16;
export const COMAdminThreadingModelApartment = 0;
export const COMAdminThreadingModelFree = 1;
export const COMAdminThreadingModelMain = 2;
export const COMAdminThreadingModelBoth = 3;
export const COMAdminThreadingModelNeutral = 4;
export const COMAdminThreadingModelNotSpecified = 5;
export const COMAdminTransactionIgnored = 0;
export const COMAdminTransactionNone = 1;
export const COMAdminTransactionSupported = 2;
export const COMAdminTransactionRequired = 3;
export const COMAdminTransactionRequiresNew = 4;
export const COMAdminTxIsolationLevelAny = 0;
export const COMAdminTxIsolationLevelReadUnCommitted = 1;
export const COMAdminTxIsolationLevelReadCommitted = 2;
export const COMAdminTxIsolationLevelRepeatableRead = 3;
export const COMAdminTxIsolationLevelSerializable = 4;
export const COMAdminSynchronizationIgnored = 0;
export const COMAdminSynchronizationNone = 1;
export const COMAdminSynchronizationSupported = 2;
export const COMAdminSynchronizationRequired = 3;
export const COMAdminSynchronizationRequiresNew = 4;
export const COMAdminActivationInproc = 0;
export const COMAdminActivationLocal = 1;
export const COMAdminAccessChecksApplicationLevel = 0;
export const COMAdminAccessChecksApplicationComponentLevel = 1;
export const COMAdminAuthenticationDefault = 0;
export const COMAdminAuthenticationNone = 1;
export const COMAdminAuthenticationConnect = 2;
export const COMAdminAuthenticationCall = 3;
export const COMAdminAuthenticationPacket = 4;
export const COMAdminAuthenticationIntegrity = 5;
export const COMAdminAuthenticationPrivacy = 6;
export const COMAdminImpersonationAnonymous = 1;
export const COMAdminImpersonationIdentify = 2;
export const COMAdminImpersonationImpersonate = 3;
export const COMAdminImpersonationDelegate = 4;
export const COMAdminAuthenticationCapabilitiesNone = 0;
export const COMAdminAuthenticationCapabilitiesSecureReference = 2;
export const COMAdminAuthenticationCapabilitiesStaticCloaking = 32;
export const COMAdminAuthenticationCapabilitiesDynamicCloaking = 64;
export const COMAdminOSNotInitialized = 0;
export const COMAdminOSWindows3_1 = 1;
export const COMAdminOSWindows9x = 2;
export const COMAdminOSWindows2000 = 3;
export const COMAdminOSWindows2000AdvancedServer = 4;
export const COMAdminOSWindows2000Unknown = 5;
export const COMAdminOSUnknown = 6;
export const COMAdminOSWindowsXPPersonal = 11;
export const COMAdminOSWindowsXPProfessional = 12;
export const COMAdminOSWindowsNETStandardServer = 13;
export const COMAdminOSWindowsNETEnterpriseServer = 14;
export const COMAdminOSWindowsNETDatacenterServer = 15;
export const COMAdminOSWindowsNETWebServer = 16;
export const COMAdminOSWindowsLonghornPersonal = 17;
export const COMAdminOSWindowsLonghornProfessional = 18;
export const COMAdminOSWindowsLonghornStandardServer = 19;
export const COMAdminOSWindowsLonghornEnterpriseServer = 20;
export const COMAdminOSWindowsLonghornDatacenterServer = 21;
export const COMAdminOSWindowsLonghornWebServer = 22;
export const COMAdminOSWindows7Personal = 23;
export const COMAdminOSWindows7Professional = 24;
export const COMAdminOSWindows7StandardServer = 25;
export const COMAdminOSWindows7EnterpriseServer = 26;
export const COMAdminOSWindows7DatacenterServer = 27;
export const COMAdminOSWindows7WebServer = 28;
export const COMAdminOSWindows8Personal = 29;
export const COMAdminOSWindows8Professional = 30;
export const COMAdminOSWindows8StandardServer = 31;
export const COMAdminOSWindows8EnterpriseServer = 32;
export const COMAdminOSWindows8DatacenterServer = 33;
export const COMAdminOSWindows8WebServer = 34;
export const COMAdminOSWindowsBluePersonal = 35;
export const COMAdminOSWindowsBlueProfessional = 36;
export const COMAdminOSWindowsBlueStandardServer = 37;
export const COMAdminOSWindowsBlueEnterpriseServer = 38;
export const COMAdminOSWindowsBlueDatacenterServer = 39;
export const COMAdminOSWindowsBlueWebServer = 40;
export const COMAdminServiceLoadBalanceRouter = 1;
export const COMAdminServiceStopped = 0;
export const COMAdminServiceStartPending = 1;
export const COMAdminServiceStopPending = 2;
export const COMAdminServiceRunning = 3;
export const COMAdminServiceContinuePending = 4;
export const COMAdminServicePausePending = 5;
export const COMAdminServicePaused = 6;
export const COMAdminServiceUnknownState = 7;
export const COMAdminQCMessageAuthenticateSecureApps = 0;
export const COMAdminQCMessageAuthenticateOff = 1;
export const COMAdminQCMessageAuthenticateOn = 2;
export const COMAdminFileFlagLoadable = 1;
export const COMAdminFileFlagCOM = 2;
export const COMAdminFileFlagContainsPS = 4;
export const COMAdminFileFlagContainsComp = 8;
export const COMAdminFileFlagContainsTLB = 16;
export const COMAdminFileFlagSelfReg = 32;
export const COMAdminFileFlagSelfUnReg = 64;
export const COMAdminFileFlagUnloadableDLL = 128;
export const COMAdminFileFlagDoesNotExist = 256;
export const COMAdminFileFlagAlreadyInstalled = 512;
export const COMAdminFileFlagBadTLB = 1024;
export const COMAdminFileFlagGetClassObjFailed = 2048;
export const COMAdminFileFlagClassNotAvailable = 4096;
export const COMAdminFileFlagRegistrar = 8192;
export const COMAdminFileFlagNoRegistrar = 16384;
export const COMAdminFileFlagDLLRegsvrFailed = 32768;
export const COMAdminFileFlagRegTLBFailed = 65536;
export const COMAdminFileFlagRegistrarFailed = 131072;
export const COMAdminFileFlagError = 262144;
export const COMAdminCompFlagTypeInfoFound = 1;
export const COMAdminCompFlagCOMPlusPropertiesFound = 2;
export const COMAdminCompFlagProxyFound = 4;
export const COMAdminCompFlagInterfacesFound = 8;
export const COMAdminCompFlagAlreadyInstalled = 16;
export const COMAdminCompFlagNotInApplication = 32;
export const COMAdminErrObjectErrors = "-2146368511";
export const COMAdminErrObjectInvalid = "-2146368510";
export const COMAdminErrKeyMissing = "-2146368509";
export const COMAdminErrAlreadyInstalled = "-2146368508";
export const COMAdminErrAppFileWriteFail = "-2146368505";
export const COMAdminErrAppFileReadFail = "-2146368504";
export const COMAdminErrAppFileVersion = "-2146368503";
export const COMAdminErrBadPath = "-2146368502";
export const COMAdminErrApplicationExists = "-2146368501";
export const COMAdminErrRoleExists = "-2146368500";
export const COMAdminErrCantCopyFile = "-2146368499";
export const COMAdminErrNoUser = "-2146368497";
export const COMAdminErrInvalidUserids = "-2146368496";
export const COMAdminErrNoRegistryCLSID = "-2146368495";
export const COMAdminErrBadRegistryProgID = "-2146368494";
export const COMAdminErrAuthenticationLevel = "-2146368493";
export const COMAdminErrUserPasswdNotValid = "-2146368492";
export const COMAdminErrCLSIDOrIIDMismatch = "-2146368488";
export const COMAdminErrRemoteInterface = "-2146368487";
export const COMAdminErrDllRegisterServer = "-2146368486";
export const COMAdminErrNoServerShare = "-2146368485";
export const COMAdminErrDllLoadFailed = "-2146368483";
export const COMAdminErrBadRegistryLibID = "-2146368482";
export const COMAdminErrAppDirNotFound = "-2146368481";
export const COMAdminErrRegistrarFailed = "-2146368477";
export const COMAdminErrCompFileDoesNotExist = "-2146368476";
export const COMAdminErrCompFileLoadDLLFail = "-2146368475";
export const COMAdminErrCompFileGetClassObj = "-2146368474";
export const COMAdminErrCompFileClassNotAvail = "-2146368473";
export const COMAdminErrCompFileBadTLB = "-2146368472";
export const COMAdminErrCompFileNotInstallable = "-2146368471";
export const COMAdminErrNotChangeable = "-2146368470";
export const COMAdminErrNotDeletable = "-2146368469";
export const COMAdminErrSession = "-2146368468";
export const COMAdminErrCompMoveLocked = "-2146368467";
export const COMAdminErrCompMoveBadDest = "-2146368466";
export const COMAdminErrRegisterTLB = "-2146368464";
export const COMAdminErrSystemApp = "-2146368461";
export const COMAdminErrCompFileNoRegistrar = "-2146368460";
export const COMAdminErrCoReqCompInstalled = "-2146368459";
export const COMAdminErrServiceNotInstalled = "-2146368458";
export const COMAdminErrPropertySaveFailed = "-2146368457";
export const COMAdminErrObjectExists = "-2146368456";
export const COMAdminErrComponentExists = "-2146368455";
export const COMAdminErrRegFileCorrupt = "-2146368453";
export const COMAdminErrPropertyOverflow = "-2146368452";
export const COMAdminErrNotInRegistry = "-2146368450";
export const COMAdminErrObjectNotPoolable = "-2146368449";
export const COMAdminErrApplidMatchesClsid = "-2146368442";
export const COMAdminErrRoleDoesNotExist = "-2146368441";
export const COMAdminErrStartAppNeedsComponents = "-2146368440";
export const COMAdminErrRequiresDifferentPlatform = "-2146368439";
export const COMAdminErrQueuingServiceNotAvailable = "-2146367998";
export const COMAdminErrObjectParentMissing = "-2146367480";
export const COMAdminErrObjectDoesNotExist = "-2146367479";
export const COMAdminErrCanNotExportAppProxy = "-2146368438";
export const COMAdminErrCanNotStartApp = "-2146368437";
export const COMAdminErrCanNotExportSystemApp = "-2146368436";
export const COMAdminErrCanNotSubscribeToComponent = "-2146368435";
export const COMAdminErrAppNotRunning = "-2146367478";
export const COMAdminErrEventClassCannotBeSubscriber = "-2146368434";
export const COMAdminErrLibAppProxyIncompatible = "-2146368433";
export const COMAdminErrBasePartitionOnly = "-2146368432";
export const COMAdminErrDuplicatePartitionName = "-2146368425";
export const COMAdminErrPartitionInUse = "-2146368423";
export const COMAdminErrImportedComponentsNotAllowed = "-2146368421";
export const COMAdminErrRegdbNotInitialized = "-2146368398";
export const COMAdminErrRegdbNotOpen = "-2146368397";
export const COMAdminErrRegdbSystemErr = "-2146368396";
export const COMAdminErrRegdbAlreadyRunning = "-2146368395";
export const COMAdminErrMigVersionNotSupported = "-2146368384";
export const COMAdminErrMigSchemaNotFound = "-2146368383";
export const COMAdminErrCatBitnessMismatch = "-2146368382";
export const COMAdminErrCatUnacceptableBitness = "-2146368381";
export const COMAdminErrCatWrongAppBitnessBitness = "-2146368380";
export const COMAdminErrCatPauseResumeNotSupported = "-2146368379";
export const COMAdminErrCatServerFault = "-2146368378";
export const COMAdminErrCantRecycleLibraryApps = "-2146367473";
export const COMAdminErrCantRecycleServiceApps = "-2146367471";
export const COMAdminErrProcessAlreadyRecycled = "-2146367470";
export const COMAdminErrPausedProcessMayNotBeRecycled = "-2146367469";
export const COMAdminErrInvalidPartition = "-2146367477";
export const COMAdminErrPartitionMsiOnly = "-2146367463";
export const COMAdminErrStartAppDisabled = "-2146368431";
export const COMAdminErrCompMoveSource = "-2146367460";
export const COMAdminErrCompMoveDest = "-2146367459";
export const COMAdminErrCompMovePrivate = "-2146367458";
export const COMAdminErrCannotCopyEventClass = "-2146367456";
export const TRKCOLL_PROCESSES = 0;
export const TRKCOLL_APPLICATIONS = 1;
export const TRKCOLL_COMPONENTS = 2;
export const DUMPTYPE_FULL = 0;
export const DUMPTYPE_MINI = 1;
export const DUMPTYPE_NONE = 2;
export const APPTYPE_UNKNOWN = "-1";
export const APPTYPE_SERVER = 1;
export const APPTYPE_LIBRARY = 0;
export const APPTYPE_SWC = 2;
export const GATD_INCLUDE_PROCESS_EXE_NAME = 1;
export const GATD_INCLUDE_LIBRARY_APPS = 2;
export const GATD_INCLUDE_SWC = 4;
export const GATD_INCLUDE_CLASS_NAME = 8;
export const GATD_INCLUDE_APPLICATION_NAME = 16;
export const TxCommit = 0;
export const TxAbort = 1;
export const TxState_Active = 0;
export const TxState_Committed = 1;
export const TxState_Aborted = 2;
export const TxState_Indoubt = 3;
export const CSC_Inherit = 0;
export const CSC_Ignore = 1;
export const CSC_ThreadPoolNone = 0;
export const CSC_ThreadPoolInherit = 1;
export const CSC_STAThreadPool = 2;
export const CSC_MTAThreadPool = 3;
export const CSC_NoBinding = 0;
export const CSC_BindToPoolThread = 1;
export const CSC_NoTransaction = 0;
export const CSC_IfContainerIsTransactional = 1;
export const CSC_CreateTransactionIfNecessary = 2;
export const CSC_NewTransaction = 3;
export const CSC_NoSynchronization = 0;
export const CSC_IfContainerIsSynchronized = 1;
export const CSC_NewSynchronizationIfNecessary = 2;
export const CSC_NewSynchronization = 3;
export const CSC_DontUseTracker = 0;
export const CSC_UseTracker = 1;
export const CSC_NoPartition = 0;
export const CSC_InheritPartition = 1;
export const CSC_NewPartition = 2;
export const CSC_NoIISIntrinsics = 0;
export const CSC_InheritIISIntrinsics = 1;
export const CSC_NoCOMTIIntrinsics = 0;
export const CSC_InheritCOMTIIntrinsics = 1;
export const CSC_NoSxs = 0;
export const CSC_InheritSxs = 1;
export const CSC_NewSxs = 2;
export const mtsErrCtxAborted = 2147803138;
export const mtsErrCtxAborting = 2147803139;
export const mtsErrCtxNoContext = 2147803140;
export const mtsErrCtxNotRegistered = 2147803141;
export const mtsErrCtxSynchTimeout = 2147803142;
export const mtsErrCtxOldReference = 2147803143;
export const mtsErrCtxRoleNotFound = 2147803148;
export const mtsErrCtxNoSecurity = 2147803149;
export const mtsErrCtxWrongThread = 2147803150;
export const mtsErrCtxTMNotAvailable = 2147803151;
export const comQCErrApplicationNotQueued = 2148599296;
export const comQCErrNoQueueableInterfaces = 2148599297;
export const comQCErrQueuingServiceNotAvailable = 2148599298;
export const comQCErrQueueTransactMismatch = 2148599299;
export const comqcErrRecorderMarshalled = 2148599300;
export const comqcErrOutParam = 2148599301;
export const comqcErrRecorderNotTrusted = 2148599302;
export const comqcErrPSLoad = 2148599303;
export const comqcErrMarshaledObjSameTxn = 2148599304;
export const comqcErrInvalidMessage = 2148599376;
export const comqcErrMsmqSidUnavailable = 2148599377;
export const comqcErrWrongMsgExtension = 2148599378;
export const comqcErrMsmqServiceUnavailable = 2148599379;
export const comqcErrMsgNotAuthenticated = 2148599380;
export const comqcErrMsmqConnectorUsed = 2148599381;
export const comqcErrBadMarshaledObject = 2148599382;
export const LockSetGet = 0;
export const LockMethod = 1;
export const Standard = 0;
export const Process = 1;
export const CRMFLAG_FORGETTARGET = 1;
export const CRMFLAG_WRITTENDURINGPREPARE = 2;
export const CRMFLAG_WRITTENDURINGCOMMIT = 4;
export const CRMFLAG_WRITTENDURINGABORT = 8;
export const CRMFLAG_WRITTENDURINGRECOVERY = 16;
export const CRMFLAG_WRITTENDURINGREPLAY = 32;
export const CRMFLAG_REPLAYINPROGRESS = 64;
export const CRMREGFLAG_PREPAREPHASE = 1;
export const CRMREGFLAG_COMMITPHASE = 2;
export const CRMREGFLAG_ABORTPHASE = 4;
export const CRMREGFLAG_ALLPHASES = 7;
export const CRMREGFLAG_FAILIFINDOUBTSREMAIN = 16;

// Structs

export type CO_MTA_USAGE_COOKIE = Deno.PointerValue;

export type CO_DEVICE_CATALOG_COOKIE = Deno.PointerValue;

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.CY (size: 16)
 */
export interface CY {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  int64: Deno.PointerValue;
}

export const sizeofCY = 16;

export function allocCY(data?: Partial<CY>): Uint8Array {
  const buf = new Uint8Array(sizeofCY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: i64
  if (data?.int64 !== undefined) view.setBigInt64(8, BigInt(data.int64), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.CSPLATFORM (size: 16)
 */
export interface CSPLATFORM {
  /** u32 */
  dwPlatformId: number;
  /** u32 */
  dwVersionHi: number;
  /** u32 */
  dwVersionLo: number;
  /** u32 */
  dwProcessorArch: number;
}

export const sizeofCSPLATFORM = 16;

export function allocCSPLATFORM(data?: Partial<CSPLATFORM>): Uint8Array {
  const buf = new Uint8Array(sizeofCSPLATFORM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwPlatformId !== undefined) view.setUint32(0, Number(data.dwPlatformId), true);
  // 0x04: u32
  if (data?.dwVersionHi !== undefined) view.setUint32(4, Number(data.dwVersionHi), true);
  // 0x08: u32
  if (data?.dwVersionLo !== undefined) view.setUint32(8, Number(data.dwVersionLo), true);
  // 0x0c: u32
  if (data?.dwProcessorArch !== undefined) view.setUint32(12, Number(data.dwProcessorArch), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.QUERYCONTEXT (size: 32)
 */
export interface QUERYCONTEXT {
  /** u32 */
  dwContext: number;
  /** Windows.Win32.System.Com.CSPLATFORM */
  Platform: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Locale: number;
  /** u32 */
  dwVersionHi: number;
  /** u32 */
  dwVersionLo: number;
}

export const sizeofQUERYCONTEXT = 32;

export function allocQUERYCONTEXT(data?: Partial<QUERYCONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofQUERYCONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwContext !== undefined) view.setUint32(0, Number(data.dwContext), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Platform !== undefined) view.setBigUint64(8, data.Platform === null ? 0n : BigInt(util.toPointer(data.Platform)), true);
  // 0x10: u32
  if (data?.Locale !== undefined) view.setUint32(16, Number(data.Locale), true);
  // 0x14: u32
  if (data?.dwVersionHi !== undefined) view.setUint32(20, Number(data.dwVersionHi), true);
  // 0x18: u32
  if (data?.dwVersionLo !== undefined) view.setUint32(24, Number(data.dwVersionLo), true);
  // 0x1c: pad4
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * _ByName_e__Struct (size: 16)
 */
export interface _ByName_e__Struct {
  /** Windows.Win32.Foundation.PWSTR */
  pPackageName: string | null;
  /** System.Guid */
  PolicyId: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_ByName_e__Struct = 16;

export function alloc_ByName_e__Struct(data?: Partial<_ByName_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_ByName_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pPackageName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pPackageName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.PolicyId !== undefined) view.setBigUint64(8, data.PolicyId === null ? 0n : BigInt(util.toPointer(data.PolicyId)), true);
  return buf;
}

/**
 * _ByObjectId_e__Struct (size: 16)
 */
export interface _ByObjectId_e__Struct {
  /** System.Guid */
  ObjectId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  PolicyId: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_ByObjectId_e__Struct = 16;

export function alloc_ByObjectId_e__Struct(data?: Partial<_ByObjectId_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_ByObjectId_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ObjectId !== undefined) view.setBigUint64(0, data.ObjectId === null ? 0n : BigInt(util.toPointer(data.ObjectId)), true);
  // 0x08: pointer
  if (data?.PolicyId !== undefined) view.setBigUint64(8, data.PolicyId === null ? 0n : BigInt(util.toPointer(data.PolicyId)), true);
  return buf;
}

/**
 * _tagged_union_e__Struct (size: 56)
 */
export interface _tagged_union_e__Struct {
  /** System.Guid */
  clsid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pFileExt: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pMimeType: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pProgId: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pFileName: string | null;
  /** _ByName_e__Struct */
  ByName: Uint8Array | Deno.PointerValue | null;
  /** _ByObjectId_e__Struct */
  ByObjectId: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_tagged_union_e__Struct = 56;

export function alloc_tagged_union_e__Struct(data?: Partial<_tagged_union_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_tagged_union_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.clsid !== undefined) view.setBigUint64(0, data.clsid === null ? 0n : BigInt(util.toPointer(data.clsid)), true);
  // 0x08: buffer
  if (data?.pFileExt !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pFileExt);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pMimeType !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pMimeType);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pProgId !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pProgId);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pFileName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pFileName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: pointer
  if (data?.ByName !== undefined) view.setBigUint64(40, data.ByName === null ? 0n : BigInt(util.toPointer(data.ByName)), true);
  // 0x30: pointer
  if (data?.ByObjectId !== undefined) view.setBigUint64(48, data.ByObjectId === null ? 0n : BigInt(util.toPointer(data.ByObjectId)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.uCLSSPEC (size: 16)
 */
export interface uCLSSPEC {
  /** u32 */
  tyspec: number;
  /** _tagged_union_e__Struct */
  tagged_union: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUCLSSPEC = 16;

export function allocUCLSSPEC(data?: Partial<uCLSSPEC>): Uint8Array {
  const buf = new Uint8Array(sizeofUCLSSPEC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.tyspec !== undefined) view.setUint32(0, Number(data.tyspec), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.tagged_union !== undefined) view.setBigUint64(8, data.tagged_union === null ? 0n : BigInt(util.toPointer(data.tagged_union)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.BSTRBLOB (size: 16)
 */
export interface BSTRBLOB {
  /** u32 */
  cbSize: number;
  /** ptr */
  pData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofBSTRBLOB = 16;

export function allocBSTRBLOB(data?: Partial<BSTRBLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofBSTRBLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pData !== undefined) view.setBigUint64(8, data.pData === null ? 0n : BigInt(util.toPointer(data.pData)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CLIPDATA (size: 16)
 */
export interface CLIPDATA {
  /** u32 */
  cbSize: number;
  /** i32 */
  ulClipFmt: number;
  /** ptr */
  pClipData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCLIPDATA = 16;

export function allocCLIPDATA(data?: Partial<CLIPDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofCLIPDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: i32
  if (data?.ulClipFmt !== undefined) view.setInt32(4, Number(data.ulClipFmt), true);
  // 0x08: pointer
  if (data?.pClipData !== undefined) view.setBigUint64(8, data.pClipData === null ? 0n : BigInt(util.toPointer(data.pClipData)), true);
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.System.Com.CallObj.CALLFRAMEINFO (size: 56)
 */
export interface CALLFRAMEINFO {
  /** u32 */
  iMethod: number;
  /** Windows.Win32.Foundation.BOOL */
  fHasInValues: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fHasInOutValues: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fHasOutValues: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fDerivesFromIDispatch: boolean;
  /** i32 */
  cInInterfacesMax: number;
  /** i32 */
  cInOutInterfacesMax: number;
  /** i32 */
  cOutInterfacesMax: number;
  /** i32 */
  cTopLevelInInterfaces: number;
  /** System.Guid */
  iid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cMethod: number;
  /** u32 */
  cParams: number;
}

export const sizeofCALLFRAMEINFO = 56;

export function allocCALLFRAMEINFO(data?: Partial<CALLFRAMEINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCALLFRAMEINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.iMethod !== undefined) view.setUint32(0, Number(data.iMethod), true);
  // 0x04: i32
  if (data?.fHasInValues !== undefined) view.setInt32(4, Number(data.fHasInValues), true);
  // 0x08: i32
  if (data?.fHasInOutValues !== undefined) view.setInt32(8, Number(data.fHasInOutValues), true);
  // 0x0c: i32
  if (data?.fHasOutValues !== undefined) view.setInt32(12, Number(data.fHasOutValues), true);
  // 0x10: i32
  if (data?.fDerivesFromIDispatch !== undefined) view.setInt32(16, Number(data.fDerivesFromIDispatch), true);
  // 0x14: i32
  if (data?.cInInterfacesMax !== undefined) view.setInt32(20, Number(data.cInInterfacesMax), true);
  // 0x18: i32
  if (data?.cInOutInterfacesMax !== undefined) view.setInt32(24, Number(data.cInOutInterfacesMax), true);
  // 0x1c: i32
  if (data?.cOutInterfacesMax !== undefined) view.setInt32(28, Number(data.cOutInterfacesMax), true);
  // 0x20: i32
  if (data?.cTopLevelInInterfaces !== undefined) view.setInt32(32, Number(data.cTopLevelInInterfaces), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.iid !== undefined) view.setBigUint64(40, data.iid === null ? 0n : BigInt(util.toPointer(data.iid)), true);
  // 0x30: u32
  if (data?.cMethod !== undefined) view.setUint32(48, Number(data.cMethod), true);
  // 0x34: u32
  if (data?.cParams !== undefined) view.setUint32(52, Number(data.cParams), true);
  return buf;
}

export type BOOLEAN = number;

/**
 * Windows.Win32.System.Com.CallObj.CALLFRAMEPARAMINFO (size: 24)
 */
export interface CALLFRAMEPARAMINFO {
  /** Windows.Win32.Foundation.BOOLEAN */
  fIn: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  fOut: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  stackOffset: number;
  /** u32 */
  cbParam: number;
}

export const sizeofCALLFRAMEPARAMINFO = 24;

export function allocCALLFRAMEPARAMINFO(data?: Partial<CALLFRAMEPARAMINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCALLFRAMEPARAMINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fIn !== undefined) view.setBigUint64(0, data.fIn === null ? 0n : BigInt(util.toPointer(data.fIn)), true);
  // 0x08: pointer
  if (data?.fOut !== undefined) view.setBigUint64(8, data.fOut === null ? 0n : BigInt(util.toPointer(data.fOut)), true);
  // 0x10: u32
  if (data?.stackOffset !== undefined) view.setUint32(16, Number(data.stackOffset), true);
  // 0x14: u32
  if (data?.cbParam !== undefined) view.setUint32(20, Number(data.cbParam), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.CallObj.CALLFRAME_MARSHALCONTEXT (size: 40)
 */
export interface CALLFRAME_MARSHALCONTEXT {
  /** Windows.Win32.Foundation.BOOLEAN */
  fIn: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwDestContext: number;
  /** ptr */
  pvDestContext: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Com.IUnknown */
  punkReserved: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidTransferSyntax: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCALLFRAME_MARSHALCONTEXT = 40;

export function allocCALLFRAME_MARSHALCONTEXT(data?: Partial<CALLFRAME_MARSHALCONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofCALLFRAME_MARSHALCONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fIn !== undefined) view.setBigUint64(0, data.fIn === null ? 0n : BigInt(util.toPointer(data.fIn)), true);
  // 0x08: u32
  if (data?.dwDestContext !== undefined) view.setUint32(8, Number(data.dwDestContext), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pvDestContext !== undefined) view.setBigUint64(16, data.pvDestContext === null ? 0n : BigInt(util.toPointer(data.pvDestContext)), true);
  // 0x18: pointer
  if (data?.punkReserved !== undefined) view.setBigUint64(24, data.punkReserved === null ? 0n : BigInt(util.toPointer(data.punkReserved)), true);
  // 0x20: pointer
  if (data?.guidTransferSyntax !== undefined) view.setBigUint64(32, data.guidTransferSyntax === null ? 0n : BigInt(util.toPointer(data.guidTransferSyntax)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.COAUTHIDENTITY (size: 48)
 */
export interface COAUTHIDENTITY {
  /** ptr */
  User: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  UserLength: number;
  /** ptr */
  Domain: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  DomainLength: number;
  /** ptr */
  Password: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  PasswordLength: number;
  /** u32 */
  Flags: number;
}

export const sizeofCOAUTHIDENTITY = 48;

export function allocCOAUTHIDENTITY(data?: Partial<COAUTHIDENTITY>): Uint8Array {
  const buf = new Uint8Array(sizeofCOAUTHIDENTITY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.User !== undefined) view.setBigUint64(0, data.User === null ? 0n : BigInt(util.toPointer(data.User)), true);
  // 0x08: u32
  if (data?.UserLength !== undefined) view.setUint32(8, Number(data.UserLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Domain !== undefined) view.setBigUint64(16, data.Domain === null ? 0n : BigInt(util.toPointer(data.Domain)), true);
  // 0x18: u32
  if (data?.DomainLength !== undefined) view.setUint32(24, Number(data.DomainLength), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Password !== undefined) view.setBigUint64(32, data.Password === null ? 0n : BigInt(util.toPointer(data.Password)), true);
  // 0x28: u32
  if (data?.PasswordLength !== undefined) view.setUint32(40, Number(data.PasswordLength), true);
  // 0x2c: u32
  if (data?.Flags !== undefined) view.setUint32(44, Number(data.Flags), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.COAUTHINFO (size: 40)
 */
export interface COAUTHINFO {
  /** u32 */
  dwAuthnSvc: number;
  /** u32 */
  dwAuthzSvc: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszServerPrincName: string | null;
  /** u32 */
  dwAuthnLevel: number;
  /** u32 */
  dwImpersonationLevel: number;
  /** ptr */
  pAuthIdentityData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwCapabilities: number;
}

export const sizeofCOAUTHINFO = 40;

export function allocCOAUTHINFO(data?: Partial<COAUTHINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCOAUTHINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwAuthnSvc !== undefined) view.setUint32(0, Number(data.dwAuthnSvc), true);
  // 0x04: u32
  if (data?.dwAuthzSvc !== undefined) view.setUint32(4, Number(data.dwAuthzSvc), true);
  // 0x08: buffer
  if (data?.pwszServerPrincName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszServerPrincName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwAuthnLevel !== undefined) view.setUint32(16, Number(data.dwAuthnLevel), true);
  // 0x14: u32
  if (data?.dwImpersonationLevel !== undefined) view.setUint32(20, Number(data.dwImpersonationLevel), true);
  // 0x18: pointer
  if (data?.pAuthIdentityData !== undefined) view.setBigUint64(24, data.pAuthIdentityData === null ? 0n : BigInt(util.toPointer(data.pAuthIdentityData)), true);
  // 0x20: u32
  if (data?.dwCapabilities !== undefined) view.setUint32(32, Number(data.dwCapabilities), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.System.Com.BYTE_BLOB (size: 16)
 */
export interface BYTE_BLOB {
  /** u32 */
  clSize: number;
  /** array */
  abData: Deno.PointerValue | null;
}

export const sizeofBYTE_BLOB = 16;

export function allocBYTE_BLOB(data?: Partial<BYTE_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofBYTE_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.clSize !== undefined) view.setUint32(0, Number(data.clSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.abData !== undefined) view.setBigUint64(8, data.abData === null ? 0n : BigInt(util.toPointer(data.abData)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.WORD_BLOB (size: 16)
 */
export interface WORD_BLOB {
  /** u32 */
  clSize: number;
  /** array */
  asData: Deno.PointerValue | null;
}

export const sizeofWORD_BLOB = 16;

export function allocWORD_BLOB(data?: Partial<WORD_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofWORD_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.clSize !== undefined) view.setUint32(0, Number(data.clSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.asData !== undefined) view.setBigUint64(8, data.asData === null ? 0n : BigInt(util.toPointer(data.asData)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.DWORD_BLOB (size: 16)
 */
export interface DWORD_BLOB {
  /** u32 */
  clSize: number;
  /** array */
  alData: Deno.PointerValue | null;
}

export const sizeofDWORD_BLOB = 16;

export function allocDWORD_BLOB(data?: Partial<DWORD_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofDWORD_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.clSize !== undefined) view.setUint32(0, Number(data.clSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.alData !== undefined) view.setBigUint64(8, data.alData === null ? 0n : BigInt(util.toPointer(data.alData)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.FLAGGED_BYTE_BLOB (size: 16)
 */
export interface FLAGGED_BYTE_BLOB {
  /** u32 */
  fFlags: number;
  /** u32 */
  clSize: number;
  /** array */
  abData: Deno.PointerValue | null;
}

export const sizeofFLAGGED_BYTE_BLOB = 16;

export function allocFLAGGED_BYTE_BLOB(data?: Partial<FLAGGED_BYTE_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofFLAGGED_BYTE_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fFlags !== undefined) view.setUint32(0, Number(data.fFlags), true);
  // 0x04: u32
  if (data?.clSize !== undefined) view.setUint32(4, Number(data.clSize), true);
  // 0x08: pointer
  if (data?.abData !== undefined) view.setBigUint64(8, data.abData === null ? 0n : BigInt(util.toPointer(data.abData)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.FLAGGED_WORD_BLOB (size: 16)
 */
export interface FLAGGED_WORD_BLOB {
  /** u32 */
  fFlags: number;
  /** u32 */
  clSize: number;
  /** array */
  asData: Deno.PointerValue | null;
}

export const sizeofFLAGGED_WORD_BLOB = 16;

export function allocFLAGGED_WORD_BLOB(data?: Partial<FLAGGED_WORD_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofFLAGGED_WORD_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fFlags !== undefined) view.setUint32(0, Number(data.fFlags), true);
  // 0x04: u32
  if (data?.clSize !== undefined) view.setUint32(4, Number(data.clSize), true);
  // 0x08: pointer
  if (data?.asData !== undefined) view.setBigUint64(8, data.asData === null ? 0n : BigInt(util.toPointer(data.asData)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.BYTE_SIZEDARR (size: 16)
 */
export interface BYTE_SIZEDARR {
  /** u32 */
  clSize: number;
  /** ptr */
  pData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofBYTE_SIZEDARR = 16;

export function allocBYTE_SIZEDARR(data?: Partial<BYTE_SIZEDARR>): Uint8Array {
  const buf = new Uint8Array(sizeofBYTE_SIZEDARR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.clSize !== undefined) view.setUint32(0, Number(data.clSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pData !== undefined) view.setBigUint64(8, data.pData === null ? 0n : BigInt(util.toPointer(data.pData)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.SHORT_SIZEDARR (size: 16)
 */
export interface SHORT_SIZEDARR {
  /** u32 */
  clSize: number;
  /** ptr */
  pData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSHORT_SIZEDARR = 16;

export function allocSHORT_SIZEDARR(data?: Partial<SHORT_SIZEDARR>): Uint8Array {
  const buf = new Uint8Array(sizeofSHORT_SIZEDARR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.clSize !== undefined) view.setUint32(0, Number(data.clSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pData !== undefined) view.setBigUint64(8, data.pData === null ? 0n : BigInt(util.toPointer(data.pData)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.LONG_SIZEDARR (size: 16)
 */
export interface LONG_SIZEDARR {
  /** u32 */
  clSize: number;
  /** ptr */
  pData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofLONG_SIZEDARR = 16;

export function allocLONG_SIZEDARR(data?: Partial<LONG_SIZEDARR>): Uint8Array {
  const buf = new Uint8Array(sizeofLONG_SIZEDARR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.clSize !== undefined) view.setUint32(0, Number(data.clSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pData !== undefined) view.setBigUint64(8, data.pData === null ? 0n : BigInt(util.toPointer(data.pData)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.HYPER_SIZEDARR (size: 16)
 */
export interface HYPER_SIZEDARR {
  /** u32 */
  clSize: number;
  /** ptr */
  pData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofHYPER_SIZEDARR = 16;

export function allocHYPER_SIZEDARR(data?: Partial<HYPER_SIZEDARR>): Uint8Array {
  const buf = new Uint8Array(sizeofHYPER_SIZEDARR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.clSize !== undefined) view.setUint32(0, Number(data.clSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pData !== undefined) view.setBigUint64(8, data.pData === null ? 0n : BigInt(util.toPointer(data.pData)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.BLOB (size: 16)
 */
export interface BLOB {
  /** u32 */
  cbSize: number;
  /** ptr */
  pBlobData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofBLOB = 16;

export function allocBLOB(data?: Partial<BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofBLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pBlobData !== undefined) view.setBigUint64(8, data.pBlobData === null ? 0n : BigInt(util.toPointer(data.pBlobData)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.COSERVERINFO (size: 32)
 */
export interface COSERVERINFO {
  /** u32 */
  dwReserved1: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null;
  /** ptr */
  pAuthInfo: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwReserved2: number;
}

export const sizeofCOSERVERINFO = 32;

export function allocCOSERVERINFO(data?: Partial<COSERVERINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCOSERVERINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(0, Number(data.dwReserved1), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.pAuthInfo !== undefined) view.setBigUint64(16, data.pAuthInfo === null ? 0n : BigInt(util.toPointer(data.pAuthInfo)), true);
  // 0x18: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(24, Number(data.dwReserved2), true);
  // 0x1c: pad4
  return buf;
}

export type HRESULT = number;

/**
 * Windows.Win32.System.Com.MULTI_QI (size: 24)
 */
export interface MULTI_QI {
  /** ptr */
  pIID: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Com.IUnknown */
  pItf: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HRESULT */
  hr: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMULTI_QI = 24;

export function allocMULTI_QI(data?: Partial<MULTI_QI>): Uint8Array {
  const buf = new Uint8Array(sizeofMULTI_QI);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pIID !== undefined) view.setBigUint64(0, data.pIID === null ? 0n : BigInt(util.toPointer(data.pIID)), true);
  // 0x08: pointer
  if (data?.pItf !== undefined) view.setBigUint64(8, data.pItf === null ? 0n : BigInt(util.toPointer(data.pItf)), true);
  // 0x10: pointer
  if (data?.hr !== undefined) view.setBigUint64(16, data.hr === null ? 0n : BigInt(util.toPointer(data.hr)), true);
  return buf;
}

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Foundation.ULARGE_INTEGER (size: 24)
 */
export interface ULARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  QuadPart: Deno.PointerValue;
}

export const sizeofULARGE_INTEGER = 24;

export function allocULARGE_INTEGER(data?: Partial<ULARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofULARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  // 0x10: u64
  if (data?.QuadPart !== undefined) view.setBigUint64(16, BigInt(data.QuadPart), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.FILETIME (size: 8)
 */
export interface FILETIME {
  /** u32 */
  dwLowDateTime: number;
  /** u32 */
  dwHighDateTime: number;
}

export const sizeofFILETIME = 8;

export function allocFILETIME(data?: Partial<FILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofFILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowDateTime !== undefined) view.setUint32(0, Number(data.dwLowDateTime), true);
  // 0x04: u32
  if (data?.dwHighDateTime !== undefined) view.setUint32(4, Number(data.dwHighDateTime), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.STATSTG (size: 72)
 */
export interface STATSTG {
  /** Windows.Win32.Foundation.PWSTR */
  pwcsName: string | null;
  /** u32 */
  type: number;
  /** Windows.Win32.Foundation.ULARGE_INTEGER */
  cbSize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  mtime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  ctime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  atime: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  grfMode: number;
  /** u32 */
  grfLocksSupported: number;
  /** System.Guid */
  clsid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  grfStateBits: number;
  /** u32 */
  reserved: number;
}

export const sizeofSTATSTG = 72;

export function allocSTATSTG(data?: Partial<STATSTG>): Uint8Array {
  const buf = new Uint8Array(sizeofSTATSTG);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwcsName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwcsName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.type !== undefined) view.setUint32(8, Number(data.type), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.cbSize !== undefined) view.setBigUint64(16, data.cbSize === null ? 0n : BigInt(util.toPointer(data.cbSize)), true);
  // 0x18: pointer
  if (data?.mtime !== undefined) view.setBigUint64(24, data.mtime === null ? 0n : BigInt(util.toPointer(data.mtime)), true);
  // 0x20: pointer
  if (data?.ctime !== undefined) view.setBigUint64(32, data.ctime === null ? 0n : BigInt(util.toPointer(data.ctime)), true);
  // 0x28: pointer
  if (data?.atime !== undefined) view.setBigUint64(40, data.atime === null ? 0n : BigInt(util.toPointer(data.atime)), true);
  // 0x30: u32
  if (data?.grfMode !== undefined) view.setUint32(48, Number(data.grfMode), true);
  // 0x34: u32
  if (data?.grfLocksSupported !== undefined) view.setUint32(52, Number(data.grfLocksSupported), true);
  // 0x38: pointer
  if (data?.clsid !== undefined) view.setBigUint64(56, data.clsid === null ? 0n : BigInt(util.toPointer(data.clsid)), true);
  // 0x40: u32
  if (data?.grfStateBits !== undefined) view.setUint32(64, Number(data.grfStateBits), true);
  // 0x44: u32
  if (data?.reserved !== undefined) view.setUint32(68, Number(data.reserved), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.RPCOLEMESSAGE (size: 48)
 */
export interface RPCOLEMESSAGE {
  /** ptr */
  reserved1: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dataRepresentation: number;
  /** ptr */
  Buffer: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbBuffer: number;
  /** u32 */
  iMethod: number;
  /** array */
  reserved2: Deno.PointerValue | null;
  /** u32 */
  rpcFlags: number;
}

export const sizeofRPCOLEMESSAGE = 48;

export function allocRPCOLEMESSAGE(data?: Partial<RPCOLEMESSAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofRPCOLEMESSAGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.reserved1 !== undefined) view.setBigUint64(0, data.reserved1 === null ? 0n : BigInt(util.toPointer(data.reserved1)), true);
  // 0x08: u32
  if (data?.dataRepresentation !== undefined) view.setUint32(8, Number(data.dataRepresentation), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Buffer !== undefined) view.setBigUint64(16, data.Buffer === null ? 0n : BigInt(util.toPointer(data.Buffer)), true);
  // 0x18: u32
  if (data?.cbBuffer !== undefined) view.setUint32(24, Number(data.cbBuffer), true);
  // 0x1c: u32
  if (data?.iMethod !== undefined) view.setUint32(28, Number(data.iMethod), true);
  // 0x20: pointer
  if (data?.reserved2 !== undefined) view.setBigUint64(32, data.reserved2 === null ? 0n : BigInt(util.toPointer(data.reserved2)), true);
  // 0x28: u32
  if (data?.rpcFlags !== undefined) view.setUint32(40, Number(data.rpcFlags), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Com.SChannelHookCallInfo (size: 40)
 */
export interface SChannelHookCallInfo {
  /** System.Guid */
  iid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cbSize: number;
  /** System.Guid */
  uCausality: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwServerPid: number;
  /** u32 */
  iMethod: number;
  /** ptr */
  pObject: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSChannelHookCallInfo = 40;

export function allocSChannelHookCallInfo(data?: Partial<SChannelHookCallInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofSChannelHookCallInfo);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.iid !== undefined) view.setBigUint64(0, data.iid === null ? 0n : BigInt(util.toPointer(data.iid)), true);
  // 0x08: u32
  if (data?.cbSize !== undefined) view.setUint32(8, Number(data.cbSize), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.uCausality !== undefined) view.setBigUint64(16, data.uCausality === null ? 0n : BigInt(util.toPointer(data.uCausality)), true);
  // 0x18: u32
  if (data?.dwServerPid !== undefined) view.setUint32(24, Number(data.dwServerPid), true);
  // 0x1c: u32
  if (data?.iMethod !== undefined) view.setUint32(28, Number(data.iMethod), true);
  // 0x20: pointer
  if (data?.pObject !== undefined) view.setBigUint64(32, data.pObject === null ? 0n : BigInt(util.toPointer(data.pObject)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.SOLE_AUTHENTICATION_SERVICE (size: 24)
 */
export interface SOLE_AUTHENTICATION_SERVICE {
  /** u32 */
  dwAuthnSvc: number;
  /** u32 */
  dwAuthzSvc: number;
  /** Windows.Win32.Foundation.PWSTR */
  pPrincipalName: string | null;
  /** Windows.Win32.Foundation.HRESULT */
  hr: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSOLE_AUTHENTICATION_SERVICE = 24;

export function allocSOLE_AUTHENTICATION_SERVICE(data?: Partial<SOLE_AUTHENTICATION_SERVICE>): Uint8Array {
  const buf = new Uint8Array(sizeofSOLE_AUTHENTICATION_SERVICE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwAuthnSvc !== undefined) view.setUint32(0, Number(data.dwAuthnSvc), true);
  // 0x04: u32
  if (data?.dwAuthzSvc !== undefined) view.setUint32(4, Number(data.dwAuthzSvc), true);
  // 0x08: buffer
  if (data?.pPrincipalName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pPrincipalName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.hr !== undefined) view.setBigUint64(16, data.hr === null ? 0n : BigInt(util.toPointer(data.hr)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.SOLE_AUTHENTICATION_INFO (size: 16)
 */
export interface SOLE_AUTHENTICATION_INFO {
  /** u32 */
  dwAuthnSvc: number;
  /** u32 */
  dwAuthzSvc: number;
  /** ptr */
  pAuthInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSOLE_AUTHENTICATION_INFO = 16;

export function allocSOLE_AUTHENTICATION_INFO(data?: Partial<SOLE_AUTHENTICATION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSOLE_AUTHENTICATION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwAuthnSvc !== undefined) view.setUint32(0, Number(data.dwAuthnSvc), true);
  // 0x04: u32
  if (data?.dwAuthzSvc !== undefined) view.setUint32(4, Number(data.dwAuthzSvc), true);
  // 0x08: pointer
  if (data?.pAuthInfo !== undefined) view.setBigUint64(8, data.pAuthInfo === null ? 0n : BigInt(util.toPointer(data.pAuthInfo)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.SOLE_AUTHENTICATION_LIST (size: 16)
 */
export interface SOLE_AUTHENTICATION_LIST {
  /** u32 */
  cAuthInfo: number;
  /** ptr */
  aAuthInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSOLE_AUTHENTICATION_LIST = 16;

export function allocSOLE_AUTHENTICATION_LIST(data?: Partial<SOLE_AUTHENTICATION_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofSOLE_AUTHENTICATION_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cAuthInfo !== undefined) view.setUint32(0, Number(data.cAuthInfo), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.aAuthInfo !== undefined) view.setBigUint64(8, data.aAuthInfo === null ? 0n : BigInt(util.toPointer(data.aAuthInfo)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.MachineGlobalObjectTableRegistrationToken__ (size: 8)
 */
export interface MachineGlobalObjectTableRegistrationToken__ {
  /** i32 */
  unused: number;
}

export const sizeofMachineGlobalObjectTableRegistrationToken__ = 8;

export function allocMachineGlobalObjectTableRegistrationToken__(data?: Partial<MachineGlobalObjectTableRegistrationToken__>): Uint8Array {
  const buf = new Uint8Array(sizeofMachineGlobalObjectTableRegistrationToken__);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.unused !== undefined) view.setInt32(0, Number(data.unused), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Com.BIND_OPTS (size: 16)
 */
export interface BIND_OPTS {
  /** u32 */
  cbStruct: number;
  /** u32 */
  grfFlags: number;
  /** u32 */
  grfMode: number;
  /** u32 */
  dwTickCountDeadline: number;
}

export const sizeofBIND_OPTS = 16;

export function allocBIND_OPTS(data?: Partial<BIND_OPTS>): Uint8Array {
  const buf = new Uint8Array(sizeofBIND_OPTS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.grfFlags !== undefined) view.setUint32(4, Number(data.grfFlags), true);
  // 0x08: u32
  if (data?.grfMode !== undefined) view.setUint32(8, Number(data.grfMode), true);
  // 0x0c: u32
  if (data?.dwTickCountDeadline !== undefined) view.setUint32(12, Number(data.dwTickCountDeadline), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.BIND_OPTS2 (size: 32)
 */
export interface BIND_OPTS2 {
  /** Windows.Win32.System.Com.BIND_OPTS */
  __AnonymousBase_objidl_L9017_C36: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwTrackFlags: number;
  /** u32 */
  dwClassContext: number;
  /** u32 */
  locale: number;
  /** ptr */
  pServerInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofBIND_OPTS2 = 32;

export function allocBIND_OPTS2(data?: Partial<BIND_OPTS2>): Uint8Array {
  const buf = new Uint8Array(sizeofBIND_OPTS2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.__AnonymousBase_objidl_L9017_C36 !== undefined) view.setBigUint64(0, data.__AnonymousBase_objidl_L9017_C36 === null ? 0n : BigInt(util.toPointer(data.__AnonymousBase_objidl_L9017_C36)), true);
  // 0x08: u32
  if (data?.dwTrackFlags !== undefined) view.setUint32(8, Number(data.dwTrackFlags), true);
  // 0x0c: u32
  if (data?.dwClassContext !== undefined) view.setUint32(12, Number(data.dwClassContext), true);
  // 0x10: u32
  if (data?.locale !== undefined) view.setUint32(16, Number(data.locale), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pServerInfo !== undefined) view.setBigUint64(24, data.pServerInfo === null ? 0n : BigInt(util.toPointer(data.pServerInfo)), true);
  return buf;
}

export type HWND = Deno.PointerValue;

/**
 * Windows.Win32.System.Com.BIND_OPTS3 (size: 16)
 */
export interface BIND_OPTS3 {
  /** Windows.Win32.System.Com.BIND_OPTS2 */
  __AnonymousBase_objidl_L9041_C36: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HWND */
  hwnd: Deno.PointerValue | null;
}

export const sizeofBIND_OPTS3 = 16;

export function allocBIND_OPTS3(data?: Partial<BIND_OPTS3>): Uint8Array {
  const buf = new Uint8Array(sizeofBIND_OPTS3);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.__AnonymousBase_objidl_L9041_C36 !== undefined) view.setBigUint64(0, data.__AnonymousBase_objidl_L9041_C36 === null ? 0n : BigInt(util.toPointer(data.__AnonymousBase_objidl_L9041_C36)), true);
  // 0x08: pointer
  if (data?.hwnd !== undefined) view.setBigUint64(8, data.hwnd === null ? 0n : BigInt(util.toPointer(data.hwnd)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.DVTARGETDEVICE (size: 24)
 */
export interface DVTARGETDEVICE {
  /** u32 */
  tdSize: number;
  /** u16 */
  tdDriverNameOffset: number;
  /** u16 */
  tdDeviceNameOffset: number;
  /** u16 */
  tdPortNameOffset: number;
  /** u16 */
  tdExtDevmodeOffset: number;
  /** array */
  tdData: Deno.PointerValue | null;
}

export const sizeofDVTARGETDEVICE = 24;

export function allocDVTARGETDEVICE(data?: Partial<DVTARGETDEVICE>): Uint8Array {
  const buf = new Uint8Array(sizeofDVTARGETDEVICE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.tdSize !== undefined) view.setUint32(0, Number(data.tdSize), true);
  // 0x04: u16
  if (data?.tdDriverNameOffset !== undefined) view.setUint16(4, Number(data.tdDriverNameOffset), true);
  // 0x06: u16
  if (data?.tdDeviceNameOffset !== undefined) view.setUint16(6, Number(data.tdDeviceNameOffset), true);
  // 0x08: u16
  if (data?.tdPortNameOffset !== undefined) view.setUint16(8, Number(data.tdPortNameOffset), true);
  // 0x0a: u16
  if (data?.tdExtDevmodeOffset !== undefined) view.setUint16(10, Number(data.tdExtDevmodeOffset), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.tdData !== undefined) view.setBigUint64(16, data.tdData === null ? 0n : BigInt(util.toPointer(data.tdData)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.FORMATETC (size: 32)
 */
export interface FORMATETC {
  /** u16 */
  cfFormat: number;
  /** ptr */
  ptd: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwAspect: number;
  /** i32 */
  lindex: number;
  /** u32 */
  tymed: number;
}

export const sizeofFORMATETC = 32;

export function allocFORMATETC(data?: Partial<FORMATETC>): Uint8Array {
  const buf = new Uint8Array(sizeofFORMATETC);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cfFormat !== undefined) view.setUint16(0, Number(data.cfFormat), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.ptd !== undefined) view.setBigUint64(8, data.ptd === null ? 0n : BigInt(util.toPointer(data.ptd)), true);
  // 0x10: u32
  if (data?.dwAspect !== undefined) view.setUint32(16, Number(data.dwAspect), true);
  // 0x14: i32
  if (data?.lindex !== undefined) view.setInt32(20, Number(data.lindex), true);
  // 0x18: u32
  if (data?.tymed !== undefined) view.setUint32(24, Number(data.tymed), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Com.STATDATA (size: 32)
 */
export interface STATDATA {
  /** Windows.Win32.System.Com.FORMATETC */
  formatetc: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  advf: number;
  /** Windows.Win32.System.Com.IAdviseSink */
  pAdvSink: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwConnection: number;
}

export const sizeofSTATDATA = 32;

export function allocSTATDATA(data?: Partial<STATDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSTATDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.formatetc !== undefined) view.setBigUint64(0, data.formatetc === null ? 0n : BigInt(util.toPointer(data.formatetc)), true);
  // 0x08: u32
  if (data?.advf !== undefined) view.setUint32(8, Number(data.advf), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pAdvSink !== undefined) view.setBigUint64(16, data.pAdvSink === null ? 0n : BigInt(util.toPointer(data.pAdvSink)), true);
  // 0x18: u32
  if (data?.dwConnection !== undefined) view.setUint32(24, Number(data.dwConnection), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Com.RemSTGMEDIUM (size: 32)
 */
export interface RemSTGMEDIUM {
  /** u32 */
  tymed: number;
  /** u32 */
  dwHandleType: number;
  /** u32 */
  pData: number;
  /** u32 */
  pUnkForRelease: number;
  /** u32 */
  cbData: number;
  /** array */
  data: Deno.PointerValue | null;
}

export const sizeofRemSTGMEDIUM = 32;

export function allocRemSTGMEDIUM(data?: Partial<RemSTGMEDIUM>): Uint8Array {
  const buf = new Uint8Array(sizeofRemSTGMEDIUM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.tymed !== undefined) view.setUint32(0, Number(data.tymed), true);
  // 0x04: u32
  if (data?.dwHandleType !== undefined) view.setUint32(4, Number(data.dwHandleType), true);
  // 0x08: u32
  if (data?.pData !== undefined) view.setUint32(8, Number(data.pData), true);
  // 0x0c: u32
  if (data?.pUnkForRelease !== undefined) view.setUint32(12, Number(data.pUnkForRelease), true);
  // 0x10: u32
  if (data?.cbData !== undefined) view.setUint32(16, Number(data.cbData), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.data !== undefined) view.setBigUint64(24, data.data === null ? 0n : BigInt(util.toPointer(data.data)), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.STGMEDIUM (size: 24)
 */
export interface STGMEDIUM {
  /** u32 */
  tymed: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.IUnknown */
  pUnkForRelease: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSTGMEDIUM = 24;

export function allocSTGMEDIUM(data?: Partial<STGMEDIUM>): Uint8Array {
  const buf = new Uint8Array(sizeofSTGMEDIUM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.tymed !== undefined) view.setUint32(0, Number(data.tymed), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: pointer
  if (data?.pUnkForRelease !== undefined) view.setBigUint64(16, data.pUnkForRelease === null ? 0n : BigInt(util.toPointer(data.pUnkForRelease)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.GDI_OBJECT (size: 16)
 */
export interface GDI_OBJECT {
  /** u32 */
  ObjectType: number;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
}

export const sizeofGDI_OBJECT = 16;

export function allocGDI_OBJECT(data?: Partial<GDI_OBJECT>): Uint8Array {
  const buf = new Uint8Array(sizeofGDI_OBJECT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ObjectType !== undefined) view.setUint32(0, Number(data.ObjectType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.userSTGMEDIUM (size: 8)
 */
export interface userSTGMEDIUM {
  /** Windows.Win32.System.Com.IUnknown */
  pUnkForRelease: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUserSTGMEDIUM = 8;

export function allocUserSTGMEDIUM(data?: Partial<userSTGMEDIUM>): Uint8Array {
  const buf = new Uint8Array(sizeofUserSTGMEDIUM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pUnkForRelease !== undefined) view.setBigUint64(0, data.pUnkForRelease === null ? 0n : BigInt(util.toPointer(data.pUnkForRelease)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.userFLAG_STGMEDIUM (size: 16)
 */
export interface userFLAG_STGMEDIUM {
  /** i32 */
  ContextFlags: number;
  /** i32 */
  fPassOwnership: number;
  /** Windows.Win32.System.Com.userSTGMEDIUM */
  Stgmed: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUserFLAG_STGMEDIUM = 16;

export function allocUserFLAG_STGMEDIUM(data?: Partial<userFLAG_STGMEDIUM>): Uint8Array {
  const buf = new Uint8Array(sizeofUserFLAG_STGMEDIUM);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ContextFlags !== undefined) view.setInt32(0, Number(data.ContextFlags), true);
  // 0x04: i32
  if (data?.fPassOwnership !== undefined) view.setInt32(4, Number(data.fPassOwnership), true);
  // 0x08: pointer
  if (data?.Stgmed !== undefined) view.setBigUint64(8, data.Stgmed === null ? 0n : BigInt(util.toPointer(data.Stgmed)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.FLAG_STGMEDIUM (size: 16)
 */
export interface FLAG_STGMEDIUM {
  /** i32 */
  ContextFlags: number;
  /** i32 */
  fPassOwnership: number;
  /** Windows.Win32.System.Com.STGMEDIUM */
  Stgmed: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFLAG_STGMEDIUM = 16;

export function allocFLAG_STGMEDIUM(data?: Partial<FLAG_STGMEDIUM>): Uint8Array {
  const buf = new Uint8Array(sizeofFLAG_STGMEDIUM);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ContextFlags !== undefined) view.setInt32(0, Number(data.ContextFlags), true);
  // 0x04: i32
  if (data?.fPassOwnership !== undefined) view.setInt32(4, Number(data.fPassOwnership), true);
  // 0x08: pointer
  if (data?.Stgmed !== undefined) view.setBigUint64(8, data.Stgmed === null ? 0n : BigInt(util.toPointer(data.Stgmed)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.INTERFACEINFO (size: 24)
 */
export interface INTERFACEINFO {
  /** Windows.Win32.System.Com.IUnknown */
  pUnk: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  iid: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wMethod: number;
}

export const sizeofINTERFACEINFO = 24;

export function allocINTERFACEINFO(data?: Partial<INTERFACEINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERFACEINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pUnk !== undefined) view.setBigUint64(0, data.pUnk === null ? 0n : BigInt(util.toPointer(data.pUnk)), true);
  // 0x08: pointer
  if (data?.iid !== undefined) view.setBigUint64(8, data.iid === null ? 0n : BigInt(util.toPointer(data.iid)), true);
  // 0x10: u16
  if (data?.wMethod !== undefined) view.setUint16(16, Number(data.wMethod), true);
  // 0x12: pad6
  return buf;
}

/**
 * Windows.Win32.Foundation.LARGE_INTEGER (size: 24)
 */
export interface LARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  QuadPart: Deno.PointerValue;
}

export const sizeofLARGE_INTEGER = 24;

export function allocLARGE_INTEGER(data?: Partial<LARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofLARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  // 0x10: i64
  if (data?.QuadPart !== undefined) view.setBigInt64(16, BigInt(data.QuadPart), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StorageLayout (size: 32)
 */
export interface StorageLayout {
  /** u32 */
  LayoutType: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwcsElementName: string | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  cOffset: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  cBytes: Uint8Array | Deno.PointerValue | null;
}

export const sizeofStorageLayout = 32;

export function allocStorageLayout(data?: Partial<StorageLayout>): Uint8Array {
  const buf = new Uint8Array(sizeofStorageLayout);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.LayoutType !== undefined) view.setUint32(0, Number(data.LayoutType), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwcsElementName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwcsElementName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.cOffset !== undefined) view.setBigUint64(16, data.cOffset === null ? 0n : BigInt(util.toPointer(data.cOffset)), true);
  // 0x18: pointer
  if (data?.cBytes !== undefined) view.setBigUint64(24, data.cBytes === null ? 0n : BigInt(util.toPointer(data.cBytes)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.CATEGORYINFO (size: 24)
 */
export interface CATEGORYINFO {
  /** System.Guid */
  catid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  lcid: number;
  /** array */
  szDescription: Deno.PointerValue | null;
}

export const sizeofCATEGORYINFO = 24;

export function allocCATEGORYINFO(data?: Partial<CATEGORYINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCATEGORYINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.catid !== undefined) view.setBigUint64(0, data.catid === null ? 0n : BigInt(util.toPointer(data.catid)), true);
  // 0x08: u32
  if (data?.lcid !== undefined) view.setUint32(8, Number(data.lcid), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.szDescription !== undefined) view.setBigUint64(16, data.szDescription === null ? 0n : BigInt(util.toPointer(data.szDescription)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.ComCallData (size: 16)
 */
export interface ComCallData {
  /** u32 */
  dwDispid: number;
  /** u32 */
  dwReserved: number;
  /** ptr */
  pUserDefined: Deno.PointerValue | Uint8Array | null;
}

export const sizeofComCallData = 16;

export function allocComCallData(data?: Partial<ComCallData>): Uint8Array {
  const buf = new Uint8Array(sizeofComCallData);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwDispid !== undefined) view.setUint32(0, Number(data.dwDispid), true);
  // 0x04: u32
  if (data?.dwReserved !== undefined) view.setUint32(4, Number(data.dwReserved), true);
  // 0x08: pointer
  if (data?.pUserDefined !== undefined) view.setBigUint64(8, data.pUserDefined === null ? 0n : BigInt(util.toPointer(data.pUserDefined)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.RemSNB (size: 16)
 */
export interface RemSNB {
  /** u32 */
  ulCntStr: number;
  /** u32 */
  ulCntChar: number;
  /** array */
  rgString: Deno.PointerValue | null;
}

export const sizeofRemSNB = 16;

export function allocRemSNB(data?: Partial<RemSNB>): Uint8Array {
  const buf = new Uint8Array(sizeofRemSNB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulCntStr !== undefined) view.setUint32(0, Number(data.ulCntStr), true);
  // 0x04: u32
  if (data?.ulCntChar !== undefined) view.setUint32(4, Number(data.ulCntChar), true);
  // 0x08: pointer
  if (data?.rgString !== undefined) view.setBigUint64(8, data.rgString === null ? 0n : BigInt(util.toPointer(data.rgString)), true);
  return buf;
}

export type BSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.System.Com.Events.COMEVENTSYSCHANGEINFO (size: 40)
 */
export interface COMEVENTSYSCHANGEINFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.System.Com.Events.EOC_ChangeType */
  changeType: EOC_ChangeType;
  /** Windows.Win32.Foundation.BSTR */
  objectId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BSTR */
  partitionId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BSTR */
  applicationId: Uint8Array | Deno.PointerValue | null;
  /** array */
  reserved: Deno.PointerValue | null;
}

export const sizeofCOMEVENTSYSCHANGEINFO = 40;

export function allocCOMEVENTSYSCHANGEINFO(data?: Partial<COMEVENTSYSCHANGEINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCOMEVENTSYSCHANGEINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: i32
  if (data?.changeType !== undefined) view.setInt32(4, Number(data.changeType), true);
  // 0x08: pointer
  if (data?.objectId !== undefined) view.setBigUint64(8, data.objectId === null ? 0n : BigInt(util.toPointer(data.objectId)), true);
  // 0x10: pointer
  if (data?.partitionId !== undefined) view.setBigUint64(16, data.partitionId === null ? 0n : BigInt(util.toPointer(data.partitionId)), true);
  // 0x18: pointer
  if (data?.applicationId !== undefined) view.setBigUint64(24, data.applicationId === null ? 0n : BigInt(util.toPointer(data.applicationId)), true);
  // 0x20: pointer
  if (data?.reserved !== undefined) view.setBigUint64(32, data.reserved === null ? 0n : BigInt(util.toPointer(data.reserved)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.VERSIONEDSTREAM (size: 16)
 */
export interface VERSIONEDSTREAM {
  /** System.Guid */
  guidVersion: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.IStream */
  pStream: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVERSIONEDSTREAM = 16;

export function allocVERSIONEDSTREAM(data?: Partial<VERSIONEDSTREAM>): Uint8Array {
  const buf = new Uint8Array(sizeofVERSIONEDSTREAM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guidVersion !== undefined) view.setBigUint64(0, data.guidVersion === null ? 0n : BigInt(util.toPointer(data.guidVersion)), true);
  // 0x08: pointer
  if (data?.pStream !== undefined) view.setBigUint64(8, data.pStream === null ? 0n : BigInt(util.toPointer(data.pStream)), true);
  return buf;
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.System.Com.StructuredStorage.CAC (size: 16)
 */
export interface CAC {
  /** u32 */
  cElems: number;
  /** Windows.Win32.Foundation.PSTR */
  pElems: string | null;
}

export const sizeofCAC = 16;

export function allocCAC(data?: Partial<CAC>): Uint8Array {
  const buf = new Uint8Array(sizeofCAC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pElems !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pElems);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CAUB (size: 16)
 */
export interface CAUB {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCAUB = 16;

export function allocCAUB(data?: Partial<CAUB>): Uint8Array {
  const buf = new Uint8Array(sizeofCAUB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CAI (size: 16)
 */
export interface CAI {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCAI = 16;

export function allocCAI(data?: Partial<CAI>): Uint8Array {
  const buf = new Uint8Array(sizeofCAI);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CAUI (size: 16)
 */
export interface CAUI {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCAUI = 16;

export function allocCAUI(data?: Partial<CAUI>): Uint8Array {
  const buf = new Uint8Array(sizeofCAUI);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CAL (size: 16)
 */
export interface CAL {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCAL = 16;

export function allocCAL(data?: Partial<CAL>): Uint8Array {
  const buf = new Uint8Array(sizeofCAL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CAUL (size: 16)
 */
export interface CAUL {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCAUL = 16;

export function allocCAUL(data?: Partial<CAUL>): Uint8Array {
  const buf = new Uint8Array(sizeofCAUL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CAFLT (size: 16)
 */
export interface CAFLT {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCAFLT = 16;

export function allocCAFLT(data?: Partial<CAFLT>): Uint8Array {
  const buf = new Uint8Array(sizeofCAFLT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CADBL (size: 16)
 */
export interface CADBL {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCADBL = 16;

export function allocCADBL(data?: Partial<CADBL>): Uint8Array {
  const buf = new Uint8Array(sizeofCADBL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CACY (size: 16)
 */
export interface CACY {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCACY = 16;

export function allocCACY(data?: Partial<CACY>): Uint8Array {
  const buf = new Uint8Array(sizeofCACY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CADATE (size: 16)
 */
export interface CADATE {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCADATE = 16;

export function allocCADATE(data?: Partial<CADATE>): Uint8Array {
  const buf = new Uint8Array(sizeofCADATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CABSTR (size: 16)
 */
export interface CABSTR {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCABSTR = 16;

export function allocCABSTR(data?: Partial<CABSTR>): Uint8Array {
  const buf = new Uint8Array(sizeofCABSTR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CABSTRBLOB (size: 16)
 */
export interface CABSTRBLOB {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCABSTRBLOB = 16;

export function allocCABSTRBLOB(data?: Partial<CABSTRBLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofCABSTRBLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CABOOL (size: 16)
 */
export interface CABOOL {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCABOOL = 16;

export function allocCABOOL(data?: Partial<CABOOL>): Uint8Array {
  const buf = new Uint8Array(sizeofCABOOL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CASCODE (size: 16)
 */
export interface CASCODE {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCASCODE = 16;

export function allocCASCODE(data?: Partial<CASCODE>): Uint8Array {
  const buf = new Uint8Array(sizeofCASCODE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CAPROPVARIANT (size: 16)
 */
export interface CAPROPVARIANT {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCAPROPVARIANT = 16;

export function allocCAPROPVARIANT(data?: Partial<CAPROPVARIANT>): Uint8Array {
  const buf = new Uint8Array(sizeofCAPROPVARIANT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CAH (size: 16)
 */
export interface CAH {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCAH = 16;

export function allocCAH(data?: Partial<CAH>): Uint8Array {
  const buf = new Uint8Array(sizeofCAH);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CAUH (size: 16)
 */
export interface CAUH {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCAUH = 16;

export function allocCAUH(data?: Partial<CAUH>): Uint8Array {
  const buf = new Uint8Array(sizeofCAUH);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CALPSTR (size: 16)
 */
export interface CALPSTR {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCALPSTR = 16;

export function allocCALPSTR(data?: Partial<CALPSTR>): Uint8Array {
  const buf = new Uint8Array(sizeofCALPSTR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CALPWSTR (size: 16)
 */
export interface CALPWSTR {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCALPWSTR = 16;

export function allocCALPWSTR(data?: Partial<CALPWSTR>): Uint8Array {
  const buf = new Uint8Array(sizeofCALPWSTR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CAFILETIME (size: 16)
 */
export interface CAFILETIME {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCAFILETIME = 16;

export function allocCAFILETIME(data?: Partial<CAFILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofCAFILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CACLIPDATA (size: 16)
 */
export interface CACLIPDATA {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCACLIPDATA = 16;

export function allocCACLIPDATA(data?: Partial<CACLIPDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofCACLIPDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.CACLSID (size: 16)
 */
export interface CACLSID {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCACLSID = 16;

export function allocCACLSID(data?: Partial<CACLSID>): Uint8Array {
  const buf = new Uint8Array(sizeofCACLSID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.PROPVARIANT (size: 8)
 */
export interface PROPVARIANT {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPROPVARIANT = 8;

export function allocPROPVARIANT(data?: Partial<PROPVARIANT>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPVARIANT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.PROPSPEC (size: 16)
 */
export interface PROPSPEC {
  /** Windows.Win32.System.Com.StructuredStorage.PROPSPEC_KIND */
  ulKind: PROPSPEC_KIND;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPROPSPEC = 16;

export function allocPROPSPEC(data?: Partial<PROPSPEC>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPSPEC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulKind !== undefined) view.setUint32(0, Number(data.ulKind), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.STATPROPSTG (size: 16)
 */
export interface STATPROPSTG {
  /** Windows.Win32.Foundation.PWSTR */
  lpwstrName: string | null;
  /** u32 */
  propid: number;
  /** u16 */
  vt: number;
}

export const sizeofSTATPROPSTG = 16;

export function allocSTATPROPSTG(data?: Partial<STATPROPSTG>): Uint8Array {
  const buf = new Uint8Array(sizeofSTATPROPSTG);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpwstrName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.lpwstrName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.propid !== undefined) view.setUint32(8, Number(data.propid), true);
  // 0x0c: u16
  if (data?.vt !== undefined) view.setUint16(12, Number(data.vt), true);
  // 0x0e: pad2
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.STATPROPSETSTG (size: 56)
 */
export interface STATPROPSETSTG {
  /** System.Guid */
  fmtid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  clsid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  grfFlags: number;
  /** Windows.Win32.Foundation.FILETIME */
  mtime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  ctime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  atime: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwOSVersion: number;
}

export const sizeofSTATPROPSETSTG = 56;

export function allocSTATPROPSETSTG(data?: Partial<STATPROPSETSTG>): Uint8Array {
  const buf = new Uint8Array(sizeofSTATPROPSETSTG);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fmtid !== undefined) view.setBigUint64(0, data.fmtid === null ? 0n : BigInt(util.toPointer(data.fmtid)), true);
  // 0x08: pointer
  if (data?.clsid !== undefined) view.setBigUint64(8, data.clsid === null ? 0n : BigInt(util.toPointer(data.clsid)), true);
  // 0x10: u32
  if (data?.grfFlags !== undefined) view.setUint32(16, Number(data.grfFlags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.mtime !== undefined) view.setBigUint64(24, data.mtime === null ? 0n : BigInt(util.toPointer(data.mtime)), true);
  // 0x20: pointer
  if (data?.ctime !== undefined) view.setBigUint64(32, data.ctime === null ? 0n : BigInt(util.toPointer(data.ctime)), true);
  // 0x28: pointer
  if (data?.atime !== undefined) view.setBigUint64(40, data.atime === null ? 0n : BigInt(util.toPointer(data.atime)), true);
  // 0x30: u32
  if (data?.dwOSVersion !== undefined) view.setUint32(48, Number(data.dwOSVersion), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.STGOPTIONS (size: 16)
 */
export interface STGOPTIONS {
  /** u16 */
  usVersion: number;
  /** u16 */
  reserved: number;
  /** u32 */
  ulSectorSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwcsTemplateFile: string | null;
}

export const sizeofSTGOPTIONS = 16;

export function allocSTGOPTIONS(data?: Partial<STGOPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofSTGOPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.usVersion !== undefined) view.setUint16(0, Number(data.usVersion), true);
  // 0x02: u16
  if (data?.reserved !== undefined) view.setUint16(2, Number(data.reserved), true);
  // 0x04: u32
  if (data?.ulSectorSize !== undefined) view.setUint32(4, Number(data.ulSectorSize), true);
  // 0x08: buffer
  if (data?.pwcsTemplateFile !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwcsTemplateFile);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.SERIALIZEDPROPERTYVALUE (size: 16)
 */
export interface SERIALIZEDPROPERTYVALUE {
  /** u32 */
  dwType: number;
  /** array */
  rgb: Deno.PointerValue | null;
}

export const sizeofSERIALIZEDPROPERTYVALUE = 16;

export function allocSERIALIZEDPROPERTYVALUE(data?: Partial<SERIALIZEDPROPERTYVALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofSERIALIZEDPROPERTYVALUE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwType !== undefined) view.setUint32(0, Number(data.dwType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgb !== undefined) view.setBigUint64(8, data.rgb === null ? 0n : BigInt(util.toPointer(data.rgb)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.Urlmon.REMSECURITY_ATTRIBUTES (size: 16)
 */
export interface REMSECURITY_ATTRIBUTES {
  /** u32 */
  nLength: number;
  /** u32 */
  lpSecurityDescriptor: number;
  /** Windows.Win32.Foundation.BOOL */
  bInheritHandle: boolean;
}

export const sizeofREMSECURITY_ATTRIBUTES = 16;

export function allocREMSECURITY_ATTRIBUTES(data?: Partial<REMSECURITY_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofREMSECURITY_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.nLength !== undefined) view.setUint32(0, Number(data.nLength), true);
  // 0x04: u32
  if (data?.lpSecurityDescriptor !== undefined) view.setUint32(4, Number(data.lpSecurityDescriptor), true);
  // 0x08: i32
  if (data?.bInheritHandle !== undefined) view.setInt32(8, Number(data.bInheritHandle), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Com.Urlmon.RemBINDINFO (size: 80)
 */
export interface RemBINDINFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  szExtraInfo: string | null;
  /** u32 */
  grfBindInfoF: number;
  /** u32 */
  dwBindVerb: number;
  /** Windows.Win32.Foundation.PWSTR */
  szCustomVerb: string | null;
  /** u32 */
  cbstgmedData: number;
  /** u32 */
  dwOptions: number;
  /** u32 */
  dwOptionsFlags: number;
  /** u32 */
  dwCodePage: number;
  /** Windows.Win32.System.Com.Urlmon.REMSECURITY_ATTRIBUTES */
  securityAttributes: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  iid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.IUnknown */
  pUnk: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwReserved: number;
}

export const sizeofRemBINDINFO = 80;

export function allocRemBINDINFO(data?: Partial<RemBINDINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRemBINDINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.szExtraInfo !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.szExtraInfo);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.grfBindInfoF !== undefined) view.setUint32(16, Number(data.grfBindInfoF), true);
  // 0x14: u32
  if (data?.dwBindVerb !== undefined) view.setUint32(20, Number(data.dwBindVerb), true);
  // 0x18: buffer
  if (data?.szCustomVerb !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.szCustomVerb);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.cbstgmedData !== undefined) view.setUint32(32, Number(data.cbstgmedData), true);
  // 0x24: u32
  if (data?.dwOptions !== undefined) view.setUint32(36, Number(data.dwOptions), true);
  // 0x28: u32
  if (data?.dwOptionsFlags !== undefined) view.setUint32(40, Number(data.dwOptionsFlags), true);
  // 0x2c: u32
  if (data?.dwCodePage !== undefined) view.setUint32(44, Number(data.dwCodePage), true);
  // 0x30: pointer
  if (data?.securityAttributes !== undefined) view.setBigUint64(48, data.securityAttributes === null ? 0n : BigInt(util.toPointer(data.securityAttributes)), true);
  // 0x38: pointer
  if (data?.iid !== undefined) view.setBigUint64(56, data.iid === null ? 0n : BigInt(util.toPointer(data.iid)), true);
  // 0x40: pointer
  if (data?.pUnk !== undefined) view.setBigUint64(64, data.pUnk === null ? 0n : BigInt(util.toPointer(data.pUnk)), true);
  // 0x48: u32
  if (data?.dwReserved !== undefined) view.setUint32(72, Number(data.dwReserved), true);
  // 0x4c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Com.Urlmon.RemFORMATETC (size: 24)
 */
export interface RemFORMATETC {
  /** u32 */
  cfFormat: number;
  /** u32 */
  ptd: number;
  /** u32 */
  dwAspect: number;
  /** i32 */
  lindex: number;
  /** u32 */
  tymed: number;
}

export const sizeofRemFORMATETC = 24;

export function allocRemFORMATETC(data?: Partial<RemFORMATETC>): Uint8Array {
  const buf = new Uint8Array(sizeofRemFORMATETC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cfFormat !== undefined) view.setUint32(0, Number(data.cfFormat), true);
  // 0x04: u32
  if (data?.ptd !== undefined) view.setUint32(4, Number(data.ptd), true);
  // 0x08: u32
  if (data?.dwAspect !== undefined) view.setUint32(8, Number(data.dwAspect), true);
  // 0x0c: i32
  if (data?.lindex !== undefined) view.setInt32(12, Number(data.lindex), true);
  // 0x10: u32
  if (data?.tymed !== undefined) view.setUint32(16, Number(data.tymed), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.System.Com.Urlmon.PROTOCOLDATA (size: 24)
 */
export interface PROTOCOLDATA {
  /** u32 */
  grfFlags: number;
  /** u32 */
  dwState: number;
  /** ptr */
  pData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbData: number;
}

export const sizeofPROTOCOLDATA = 24;

export function allocPROTOCOLDATA(data?: Partial<PROTOCOLDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofPROTOCOLDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.grfFlags !== undefined) view.setUint32(0, Number(data.grfFlags), true);
  // 0x04: u32
  if (data?.dwState !== undefined) view.setUint32(4, Number(data.dwState), true);
  // 0x08: pointer
  if (data?.pData !== undefined) view.setBigUint64(8, data.pData === null ? 0n : BigInt(util.toPointer(data.pData)), true);
  // 0x10: u32
  if (data?.cbData !== undefined) view.setUint32(16, Number(data.cbData), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.System.Com.Urlmon.StartParam (size: 24)
 */
export interface StartParam {
  /** System.Guid */
  iid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.IBindCtx */
  pIBindCtx: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.IUnknown */
  pItf: Uint8Array | Deno.PointerValue | null;
}

export const sizeofStartParam = 24;

export function allocStartParam(data?: Partial<StartParam>): Uint8Array {
  const buf = new Uint8Array(sizeofStartParam);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.iid !== undefined) view.setBigUint64(0, data.iid === null ? 0n : BigInt(util.toPointer(data.iid)), true);
  // 0x08: pointer
  if (data?.pIBindCtx !== undefined) view.setBigUint64(8, data.pIBindCtx === null ? 0n : BigInt(util.toPointer(data.pIBindCtx)), true);
  // 0x10: pointer
  if (data?.pItf !== undefined) view.setBigUint64(16, data.pItf === null ? 0n : BigInt(util.toPointer(data.pItf)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.Urlmon.ZONEATTRIBUTES (size: 48)
 */
export interface ZONEATTRIBUTES {
  /** u32 */
  cbSize: number;
  /** array */
  szDisplayName: Deno.PointerValue | null;
  /** array */
  szDescription: Deno.PointerValue | null;
  /** array */
  szIconPath: Deno.PointerValue | null;
  /** u32 */
  dwTemplateMinLevel: number;
  /** u32 */
  dwTemplateRecommended: number;
  /** u32 */
  dwTemplateCurrentLevel: number;
  /** u32 */
  dwFlags: number;
}

export const sizeofZONEATTRIBUTES = 48;

export function allocZONEATTRIBUTES(data?: Partial<ZONEATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofZONEATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.szDisplayName !== undefined) view.setBigUint64(8, data.szDisplayName === null ? 0n : BigInt(util.toPointer(data.szDisplayName)), true);
  // 0x10: pointer
  if (data?.szDescription !== undefined) view.setBigUint64(16, data.szDescription === null ? 0n : BigInt(util.toPointer(data.szDescription)), true);
  // 0x18: pointer
  if (data?.szIconPath !== undefined) view.setBigUint64(24, data.szIconPath === null ? 0n : BigInt(util.toPointer(data.szIconPath)), true);
  // 0x20: u32
  if (data?.dwTemplateMinLevel !== undefined) view.setUint32(32, Number(data.dwTemplateMinLevel), true);
  // 0x24: u32
  if (data?.dwTemplateRecommended !== undefined) view.setUint32(36, Number(data.dwTemplateRecommended), true);
  // 0x28: u32
  if (data?.dwTemplateCurrentLevel !== undefined) view.setUint32(40, Number(data.dwTemplateCurrentLevel), true);
  // 0x2c: u32
  if (data?.dwFlags !== undefined) view.setUint32(44, Number(data.dwFlags), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.Urlmon.CODEBASEHOLD (size: 40)
 */
export interface CODEBASEHOLD {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  szDistUnit: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  szCodeBase: string | null;
  /** u32 */
  dwVersionMS: number;
  /** u32 */
  dwVersionLS: number;
  /** u32 */
  dwStyle: number;
}

export const sizeofCODEBASEHOLD = 40;

export function allocCODEBASEHOLD(data?: Partial<CODEBASEHOLD>): Uint8Array {
  const buf = new Uint8Array(sizeofCODEBASEHOLD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.szDistUnit !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.szDistUnit);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.szCodeBase !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.szCodeBase);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.dwVersionMS !== undefined) view.setUint32(24, Number(data.dwVersionMS), true);
  // 0x1c: u32
  if (data?.dwVersionLS !== undefined) view.setUint32(28, Number(data.dwVersionLS), true);
  // 0x20: u32
  if (data?.dwStyle !== undefined) view.setUint32(32, Number(data.dwStyle), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.System.Com.Urlmon.SOFTDISTINFO (size: 72)
 */
export interface SOFTDISTINFO {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwAdState: number;
  /** Windows.Win32.Foundation.PWSTR */
  szTitle: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  szAbstract: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  szHREF: string | null;
  /** u32 */
  dwInstalledVersionMS: number;
  /** u32 */
  dwInstalledVersionLS: number;
  /** u32 */
  dwUpdateVersionMS: number;
  /** u32 */
  dwUpdateVersionLS: number;
  /** u32 */
  dwAdvertisedVersionMS: number;
  /** u32 */
  dwAdvertisedVersionLS: number;
  /** u32 */
  dwReserved: number;
}

export const sizeofSOFTDISTINFO = 72;

export function allocSOFTDISTINFO(data?: Partial<SOFTDISTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSOFTDISTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwAdState !== undefined) view.setUint32(8, Number(data.dwAdState), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.szTitle !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.szTitle);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.szAbstract !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.szAbstract);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.szHREF !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.szHREF);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dwInstalledVersionMS !== undefined) view.setUint32(40, Number(data.dwInstalledVersionMS), true);
  // 0x2c: u32
  if (data?.dwInstalledVersionLS !== undefined) view.setUint32(44, Number(data.dwInstalledVersionLS), true);
  // 0x30: u32
  if (data?.dwUpdateVersionMS !== undefined) view.setUint32(48, Number(data.dwUpdateVersionMS), true);
  // 0x34: u32
  if (data?.dwUpdateVersionLS !== undefined) view.setUint32(52, Number(data.dwUpdateVersionLS), true);
  // 0x38: u32
  if (data?.dwAdvertisedVersionMS !== undefined) view.setUint32(56, Number(data.dwAdvertisedVersionMS), true);
  // 0x3c: u32
  if (data?.dwAdvertisedVersionLS !== undefined) view.setUint32(60, Number(data.dwAdvertisedVersionLS), true);
  // 0x40: u32
  if (data?.dwReserved !== undefined) view.setUint32(64, Number(data.dwReserved), true);
  // 0x44: pad4
  return buf;
}

/**
 * Windows.Win32.System.Com.Urlmon.PROTOCOLFILTERDATA (size: 40)
 */
export interface PROTOCOLFILTERDATA {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.System.Com.Urlmon.IInternetProtocolSink */
  pProtocolSink: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.Urlmon.IInternetProtocol */
  pProtocol: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.IUnknown */
  pUnk: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFilterFlags: number;
}

export const sizeofPROTOCOLFILTERDATA = 40;

export function allocPROTOCOLFILTERDATA(data?: Partial<PROTOCOLFILTERDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofPROTOCOLFILTERDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pProtocolSink !== undefined) view.setBigUint64(8, data.pProtocolSink === null ? 0n : BigInt(util.toPointer(data.pProtocolSink)), true);
  // 0x10: pointer
  if (data?.pProtocol !== undefined) view.setBigUint64(16, data.pProtocol === null ? 0n : BigInt(util.toPointer(data.pProtocol)), true);
  // 0x18: pointer
  if (data?.pUnk !== undefined) view.setBigUint64(24, data.pUnk === null ? 0n : BigInt(util.toPointer(data.pUnk)), true);
  // 0x20: u32
  if (data?.dwFilterFlags !== undefined) view.setUint32(32, Number(data.dwFilterFlags), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.System.Com.Urlmon.DATAINFO (size: 16)
 */
export interface DATAINFO {
  /** u32 */
  ulTotalSize: number;
  /** u32 */
  ulavrPacketSize: number;
  /** u32 */
  ulConnectSpeed: number;
  /** u32 */
  ulProcessorSpeed: number;
}

export const sizeofDATAINFO = 16;

export function allocDATAINFO(data?: Partial<DATAINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDATAINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulTotalSize !== undefined) view.setUint32(0, Number(data.ulTotalSize), true);
  // 0x04: u32
  if (data?.ulavrPacketSize !== undefined) view.setUint32(4, Number(data.ulavrPacketSize), true);
  // 0x08: u32
  if (data?.ulConnectSpeed !== undefined) view.setUint32(8, Number(data.ulConnectSpeed), true);
  // 0x0c: u32
  if (data?.ulProcessorSpeed !== undefined) view.setUint32(12, Number(data.ulProcessorSpeed), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.SYSTEMTIME (size: 16)
 */
export interface SYSTEMTIME {
  /** u16 */
  wYear: number;
  /** u16 */
  wMonth: number;
  /** u16 */
  wDayOfWeek: number;
  /** u16 */
  wDay: number;
  /** u16 */
  wHour: number;
  /** u16 */
  wMinute: number;
  /** u16 */
  wSecond: number;
  /** u16 */
  wMilliseconds: number;
}

export const sizeofSYSTEMTIME = 16;

export function allocSYSTEMTIME(data?: Partial<SYSTEMTIME>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEMTIME);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wYear !== undefined) view.setUint16(0, Number(data.wYear), true);
  // 0x02: u16
  if (data?.wMonth !== undefined) view.setUint16(2, Number(data.wMonth), true);
  // 0x04: u16
  if (data?.wDayOfWeek !== undefined) view.setUint16(4, Number(data.wDayOfWeek), true);
  // 0x06: u16
  if (data?.wDay !== undefined) view.setUint16(6, Number(data.wDay), true);
  // 0x08: u16
  if (data?.wHour !== undefined) view.setUint16(8, Number(data.wHour), true);
  // 0x0a: u16
  if (data?.wMinute !== undefined) view.setUint16(10, Number(data.wMinute), true);
  // 0x0c: u16
  if (data?.wSecond !== undefined) view.setUint16(12, Number(data.wSecond), true);
  // 0x0e: u16
  if (data?.wMilliseconds !== undefined) view.setUint16(14, Number(data.wMilliseconds), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.Urlmon.HIT_LOGGING_INFO (size: 40)
 */
export interface HIT_LOGGING_INFO {
  /** u32 */
  dwStructSize: number;
  /** Windows.Win32.Foundation.PSTR */
  lpszLoggedUrlName: string | null;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  StartTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  EndTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  lpszExtendedInfo: string | null;
}

export const sizeofHIT_LOGGING_INFO = 40;

export function allocHIT_LOGGING_INFO(data?: Partial<HIT_LOGGING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHIT_LOGGING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStructSize !== undefined) view.setUint32(0, Number(data.dwStructSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpszLoggedUrlName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpszLoggedUrlName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.StartTime !== undefined) view.setBigUint64(16, data.StartTime === null ? 0n : BigInt(util.toPointer(data.StartTime)), true);
  // 0x18: pointer
  if (data?.EndTime !== undefined) view.setBigUint64(24, data.EndTime === null ? 0n : BigInt(util.toPointer(data.EndTime)), true);
  // 0x20: buffer
  if (data?.lpszExtendedInfo !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpszExtendedInfo);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

/**
 * Windows.Win32.System.Com.Urlmon.CONFIRMSAFETY (size: 24)
 */
export interface CONFIRMSAFETY {
  /** System.Guid */
  clsid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.IUnknown */
  pUnk: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
}

export const sizeofCONFIRMSAFETY = 24;

export function allocCONFIRMSAFETY(data?: Partial<CONFIRMSAFETY>): Uint8Array {
  const buf = new Uint8Array(sizeofCONFIRMSAFETY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.clsid !== undefined) view.setBigUint64(0, data.clsid === null ? 0n : BigInt(util.toPointer(data.clsid)), true);
  // 0x08: pointer
  if (data?.pUnk !== undefined) view.setBigUint64(8, data.pUnk === null ? 0n : BigInt(util.toPointer(data.pUnk)), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.System.Com.Urlmon.PROTOCOL_ARGUMENT (size: 16)
 */
export interface PROTOCOL_ARGUMENT {
  /** Windows.Win32.Foundation.PWSTR */
  szMethod: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  szTargetUrl: string | null;
}

export const sizeofPROTOCOL_ARGUMENT = 16;

export function allocPROTOCOL_ARGUMENT(data?: Partial<PROTOCOL_ARGUMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofPROTOCOL_ARGUMENT);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.szMethod !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.szMethod);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.szTargetUrl !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.szTargetUrl);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Security.SECURITY_ATTRIBUTES (size: 24)
 */
export interface SECURITY_ATTRIBUTES {
  /** u32 */
  nLength: number;
  /** ptr */
  lpSecurityDescriptor: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  bInheritHandle: boolean;
}

export const sizeofSECURITY_ATTRIBUTES = 24;

export function allocSECURITY_ATTRIBUTES(data?: Partial<SECURITY_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofSECURITY_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.nLength !== undefined) view.setUint32(0, Number(data.nLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpSecurityDescriptor !== undefined) view.setBigUint64(8, data.lpSecurityDescriptor === null ? 0n : BigInt(util.toPointer(data.lpSecurityDescriptor)), true);
  // 0x10: i32
  if (data?.bInheritHandle !== undefined) view.setInt32(16, Number(data.bInheritHandle), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.System.Com.BINDINFO (size: 88)
 */
export interface BINDINFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  szExtraInfo: string | null;
  /** Windows.Win32.System.Com.STGMEDIUM */
  stgmedData: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  grfBindInfoF: number;
  /** u32 */
  dwBindVerb: number;
  /** Windows.Win32.Foundation.PWSTR */
  szCustomVerb: string | null;
  /** u32 */
  cbstgmedData: number;
  /** u32 */
  dwOptions: number;
  /** u32 */
  dwOptionsFlags: number;
  /** u32 */
  dwCodePage: number;
  /** Windows.Win32.Security.SECURITY_ATTRIBUTES */
  securityAttributes: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  iid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.IUnknown */
  pUnk: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwReserved: number;
}

export const sizeofBINDINFO = 88;

export function allocBINDINFO(data?: Partial<BINDINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofBINDINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.szExtraInfo !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.szExtraInfo);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.stgmedData !== undefined) view.setBigUint64(16, data.stgmedData === null ? 0n : BigInt(util.toPointer(data.stgmedData)), true);
  // 0x18: u32
  if (data?.grfBindInfoF !== undefined) view.setUint32(24, Number(data.grfBindInfoF), true);
  // 0x1c: u32
  if (data?.dwBindVerb !== undefined) view.setUint32(28, Number(data.dwBindVerb), true);
  // 0x20: buffer
  if (data?.szCustomVerb !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.szCustomVerb);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.cbstgmedData !== undefined) view.setUint32(40, Number(data.cbstgmedData), true);
  // 0x2c: u32
  if (data?.dwOptions !== undefined) view.setUint32(44, Number(data.dwOptions), true);
  // 0x30: u32
  if (data?.dwOptionsFlags !== undefined) view.setUint32(48, Number(data.dwOptionsFlags), true);
  // 0x34: u32
  if (data?.dwCodePage !== undefined) view.setUint32(52, Number(data.dwCodePage), true);
  // 0x38: pointer
  if (data?.securityAttributes !== undefined) view.setBigUint64(56, data.securityAttributes === null ? 0n : BigInt(util.toPointer(data.securityAttributes)), true);
  // 0x40: pointer
  if (data?.iid !== undefined) view.setBigUint64(64, data.iid === null ? 0n : BigInt(util.toPointer(data.iid)), true);
  // 0x48: pointer
  if (data?.pUnk !== undefined) view.setBigUint64(72, data.pUnk === null ? 0n : BigInt(util.toPointer(data.pUnk)), true);
  // 0x50: u32
  if (data?.dwReserved !== undefined) view.setUint32(80, Number(data.dwReserved), true);
  // 0x54: pad4
  return buf;
}

/**
 * Windows.Win32.System.Com.AUTHENTICATEINFO (size: 8)
 */
export interface AUTHENTICATEINFO {
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwReserved: number;
}

export const sizeofAUTHENTICATEINFO = 8;

export function allocAUTHENTICATEINFO(data?: Partial<AUTHENTICATEINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofAUTHENTICATEINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: u32
  if (data?.dwReserved !== undefined) view.setUint32(4, Number(data.dwReserved), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.SAFEARRAYBOUND (size: 8)
 */
export interface SAFEARRAYBOUND {
  /** u32 */
  cElements: number;
  /** i32 */
  lLbound: number;
}

export const sizeofSAFEARRAYBOUND = 8;

export function allocSAFEARRAYBOUND(data?: Partial<SAFEARRAYBOUND>): Uint8Array {
  const buf = new Uint8Array(sizeofSAFEARRAYBOUND);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElements !== undefined) view.setUint32(0, Number(data.cElements), true);
  // 0x04: i32
  if (data?.lLbound !== undefined) view.setInt32(4, Number(data.lLbound), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.SAFEARRAY (size: 32)
 */
export interface SAFEARRAY {
  /** u16 */
  cDims: number;
  /** u16 */
  fFeatures: number;
  /** u32 */
  cbElements: number;
  /** u32 */
  cLocks: number;
  /** ptr */
  pvData: Deno.PointerValue | Uint8Array | null;
  /** array */
  rgsabound: Deno.PointerValue | null;
}

export const sizeofSAFEARRAY = 32;

export function allocSAFEARRAY(data?: Partial<SAFEARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofSAFEARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cDims !== undefined) view.setUint16(0, Number(data.cDims), true);
  // 0x02: u16
  if (data?.fFeatures !== undefined) view.setUint16(2, Number(data.fFeatures), true);
  // 0x04: u32
  if (data?.cbElements !== undefined) view.setUint32(4, Number(data.cbElements), true);
  // 0x08: u32
  if (data?.cLocks !== undefined) view.setUint32(8, Number(data.cLocks), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pvData !== undefined) view.setBigUint64(16, data.pvData === null ? 0n : BigInt(util.toPointer(data.pvData)), true);
  // 0x18: pointer
  if (data?.rgsabound !== undefined) view.setBigUint64(24, data.rgsabound === null ? 0n : BigInt(util.toPointer(data.rgsabound)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.VARIANT (size: 8)
 */
export interface VARIANT {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVARIANT = 8;

export function allocVARIANT(data?: Partial<VARIANT>): Uint8Array {
  const buf = new Uint8Array(sizeofVARIANT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.TYPEDESC (size: 16)
 */
export interface TYPEDESC {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  vt: number;
}

export const sizeofTYPEDESC = 16;

export function allocTYPEDESC(data?: Partial<TYPEDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofTYPEDESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u16
  if (data?.vt !== undefined) view.setUint16(8, Number(data.vt), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.System.Com.IDLDESC (size: 16)
 */
export interface IDLDESC {
  /** usize */
  dwReserved: Deno.PointerValue;
  /** u16 */
  wIDLFlags: number;
}

export const sizeofIDLDESC = 16;

export function allocIDLDESC(data?: Partial<IDLDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofIDLDESC);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwReserved !== undefined) view.setBigUint64(0, BigInt(data.dwReserved), true);
  // 0x08: u16
  if (data?.wIDLFlags !== undefined) view.setUint16(8, Number(data.wIDLFlags), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.System.Com.ELEMDESC (size: 16)
 */
export interface ELEMDESC {
  /** Windows.Win32.System.Com.TYPEDESC */
  tdesc: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofELEMDESC = 16;

export function allocELEMDESC(data?: Partial<ELEMDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofELEMDESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.tdesc !== undefined) view.setBigUint64(0, data.tdesc === null ? 0n : BigInt(util.toPointer(data.tdesc)), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.TYPEATTR (size: 72)
 */
export interface TYPEATTR {
  /** System.Guid */
  guid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  lcid: number;
  /** u32 */
  dwReserved: number;
  /** i32 */
  memidConstructor: number;
  /** i32 */
  memidDestructor: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrSchema: string | null;
  /** u32 */
  cbSizeInstance: number;
  /** Windows.Win32.System.Com.TYPEKIND */
  typekind: TYPEKIND;
  /** u16 */
  cFuncs: number;
  /** u16 */
  cVars: number;
  /** u16 */
  cImplTypes: number;
  /** u16 */
  cbSizeVft: number;
  /** u16 */
  cbAlignment: number;
  /** u16 */
  wTypeFlags: number;
  /** u16 */
  wMajorVerNum: number;
  /** u16 */
  wMinorVerNum: number;
  /** Windows.Win32.System.Com.TYPEDESC */
  tdescAlias: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.IDLDESC */
  idldescType: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTYPEATTR = 72;

export function allocTYPEATTR(data?: Partial<TYPEATTR>): Uint8Array {
  const buf = new Uint8Array(sizeofTYPEATTR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guid !== undefined) view.setBigUint64(0, data.guid === null ? 0n : BigInt(util.toPointer(data.guid)), true);
  // 0x08: u32
  if (data?.lcid !== undefined) view.setUint32(8, Number(data.lcid), true);
  // 0x0c: u32
  if (data?.dwReserved !== undefined) view.setUint32(12, Number(data.dwReserved), true);
  // 0x10: i32
  if (data?.memidConstructor !== undefined) view.setInt32(16, Number(data.memidConstructor), true);
  // 0x14: i32
  if (data?.memidDestructor !== undefined) view.setInt32(20, Number(data.memidDestructor), true);
  // 0x18: buffer
  if (data?.lpstrSchema !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpstrSchema);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.cbSizeInstance !== undefined) view.setUint32(32, Number(data.cbSizeInstance), true);
  // 0x24: i32
  if (data?.typekind !== undefined) view.setInt32(36, Number(data.typekind), true);
  // 0x28: u16
  if (data?.cFuncs !== undefined) view.setUint16(40, Number(data.cFuncs), true);
  // 0x2a: u16
  if (data?.cVars !== undefined) view.setUint16(42, Number(data.cVars), true);
  // 0x2c: u16
  if (data?.cImplTypes !== undefined) view.setUint16(44, Number(data.cImplTypes), true);
  // 0x2e: u16
  if (data?.cbSizeVft !== undefined) view.setUint16(46, Number(data.cbSizeVft), true);
  // 0x30: u16
  if (data?.cbAlignment !== undefined) view.setUint16(48, Number(data.cbAlignment), true);
  // 0x32: u16
  if (data?.wTypeFlags !== undefined) view.setUint16(50, Number(data.wTypeFlags), true);
  // 0x34: u16
  if (data?.wMajorVerNum !== undefined) view.setUint16(52, Number(data.wMajorVerNum), true);
  // 0x36: u16
  if (data?.wMinorVerNum !== undefined) view.setUint16(54, Number(data.wMinorVerNum), true);
  // 0x38: pointer
  if (data?.tdescAlias !== undefined) view.setBigUint64(56, data.tdescAlias === null ? 0n : BigInt(util.toPointer(data.tdescAlias)), true);
  // 0x40: pointer
  if (data?.idldescType !== undefined) view.setBigUint64(64, data.idldescType === null ? 0n : BigInt(util.toPointer(data.idldescType)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.DISPPARAMS (size: 24)
 */
export interface DISPPARAMS {
  /** ptr */
  rgvarg: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  rgdispidNamedArgs: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cArgs: number;
  /** u32 */
  cNamedArgs: number;
}

export const sizeofDISPPARAMS = 24;

export function allocDISPPARAMS(data?: Partial<DISPPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofDISPPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rgvarg !== undefined) view.setBigUint64(0, data.rgvarg === null ? 0n : BigInt(util.toPointer(data.rgvarg)), true);
  // 0x08: pointer
  if (data?.rgdispidNamedArgs !== undefined) view.setBigUint64(8, data.rgdispidNamedArgs === null ? 0n : BigInt(util.toPointer(data.rgdispidNamedArgs)), true);
  // 0x10: u32
  if (data?.cArgs !== undefined) view.setUint32(16, Number(data.cArgs), true);
  // 0x14: u32
  if (data?.cNamedArgs !== undefined) view.setUint32(20, Number(data.cNamedArgs), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.EXCEPINFO (size: 64)
 */
export interface EXCEPINFO {
  /** u16 */
  wCode: number;
  /** u16 */
  wReserved: number;
  /** Windows.Win32.Foundation.BSTR */
  bstrSource: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BSTR */
  bstrDescription: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BSTR */
  bstrHelpFile: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwHelpContext: number;
  /** ptr */
  pvReserved: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Com.LPEXCEPFINO_DEFERRED_FILLIN */
  pfnDeferredFillIn: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  scode: number;
}

export const sizeofEXCEPINFO = 64;

export function allocEXCEPINFO(data?: Partial<EXCEPINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wCode !== undefined) view.setUint16(0, Number(data.wCode), true);
  // 0x02: u16
  if (data?.wReserved !== undefined) view.setUint16(2, Number(data.wReserved), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.bstrSource !== undefined) view.setBigUint64(8, data.bstrSource === null ? 0n : BigInt(util.toPointer(data.bstrSource)), true);
  // 0x10: pointer
  if (data?.bstrDescription !== undefined) view.setBigUint64(16, data.bstrDescription === null ? 0n : BigInt(util.toPointer(data.bstrDescription)), true);
  // 0x18: pointer
  if (data?.bstrHelpFile !== undefined) view.setBigUint64(24, data.bstrHelpFile === null ? 0n : BigInt(util.toPointer(data.bstrHelpFile)), true);
  // 0x20: u32
  if (data?.dwHelpContext !== undefined) view.setUint32(32, Number(data.dwHelpContext), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pvReserved !== undefined) view.setBigUint64(40, data.pvReserved === null ? 0n : BigInt(util.toPointer(data.pvReserved)), true);
  // 0x30: pointer
  if (data?.pfnDeferredFillIn !== undefined) view.setBigUint64(48, data.pfnDeferredFillIn === null ? 0n : BigInt(util.toPointer(data.pfnDeferredFillIn)), true);
  // 0x38: i32
  if (data?.scode !== undefined) view.setInt32(56, Number(data.scode), true);
  // 0x3c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Com.FUNCDESC (size: 64)
 */
export interface FUNCDESC {
  /** i32 */
  memid: number;
  /** ptr */
  lprgscode: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lprgelemdescParam: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Com.FUNCKIND */
  funckind: FUNCKIND;
  /** Windows.Win32.System.Com.INVOKEKIND */
  invkind: INVOKEKIND;
  /** Windows.Win32.System.Com.CALLCONV */
  callconv: CALLCONV;
  /** i16 */
  cParams: number;
  /** i16 */
  cParamsOpt: number;
  /** i16 */
  oVft: number;
  /** i16 */
  cScodes: number;
  /** Windows.Win32.System.Com.ELEMDESC */
  elemdescFunc: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wFuncFlags: number;
}

export const sizeofFUNCDESC = 64;

export function allocFUNCDESC(data?: Partial<FUNCDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofFUNCDESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.memid !== undefined) view.setInt32(0, Number(data.memid), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lprgscode !== undefined) view.setBigUint64(8, data.lprgscode === null ? 0n : BigInt(util.toPointer(data.lprgscode)), true);
  // 0x10: pointer
  if (data?.lprgelemdescParam !== undefined) view.setBigUint64(16, data.lprgelemdescParam === null ? 0n : BigInt(util.toPointer(data.lprgelemdescParam)), true);
  // 0x18: i32
  if (data?.funckind !== undefined) view.setInt32(24, Number(data.funckind), true);
  // 0x1c: i32
  if (data?.invkind !== undefined) view.setInt32(28, Number(data.invkind), true);
  // 0x20: i32
  if (data?.callconv !== undefined) view.setInt32(32, Number(data.callconv), true);
  // 0x24: i16
  if (data?.cParams !== undefined) view.setInt16(36, Number(data.cParams), true);
  // 0x26: i16
  if (data?.cParamsOpt !== undefined) view.setInt16(38, Number(data.cParamsOpt), true);
  // 0x28: i16
  if (data?.oVft !== undefined) view.setInt16(40, Number(data.oVft), true);
  // 0x2a: i16
  if (data?.cScodes !== undefined) view.setInt16(42, Number(data.cScodes), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.elemdescFunc !== undefined) view.setBigUint64(48, data.elemdescFunc === null ? 0n : BigInt(util.toPointer(data.elemdescFunc)), true);
  // 0x38: u16
  if (data?.wFuncFlags !== undefined) view.setUint16(56, Number(data.wFuncFlags), true);
  // 0x3a: pad6
  return buf;
}

/**
 * Windows.Win32.System.Com.VARDESC (size: 40)
 */
export interface VARDESC {
  /** i32 */
  memid: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrSchema: string | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.ELEMDESC */
  elemdescVar: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wVarFlags: number;
  /** Windows.Win32.System.Com.VARKIND */
  varkind: VARKIND;
}

export const sizeofVARDESC = 40;

export function allocVARDESC(data?: Partial<VARDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofVARDESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.memid !== undefined) view.setInt32(0, Number(data.memid), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpstrSchema !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpstrSchema);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x18: pointer
  if (data?.elemdescVar !== undefined) view.setBigUint64(24, data.elemdescVar === null ? 0n : BigInt(util.toPointer(data.elemdescVar)), true);
  // 0x20: u16
  if (data?.wVarFlags !== undefined) view.setUint16(32, Number(data.wVarFlags), true);
  // 0x22: i32
  if (data?.varkind !== undefined) view.setInt32(34, Number(data.varkind), true);
  // 0x26: pad2
  return buf;
}

/**
 * Windows.Win32.System.Com.CUSTDATAITEM (size: 16)
 */
export interface CUSTDATAITEM {
  /** System.Guid */
  guid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.VARIANT */
  varValue: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCUSTDATAITEM = 16;

export function allocCUSTDATAITEM(data?: Partial<CUSTDATAITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofCUSTDATAITEM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guid !== undefined) view.setBigUint64(0, data.guid === null ? 0n : BigInt(util.toPointer(data.guid)), true);
  // 0x08: pointer
  if (data?.varValue !== undefined) view.setBigUint64(8, data.varValue === null ? 0n : BigInt(util.toPointer(data.varValue)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.CUSTDATA (size: 16)
 */
export interface CUSTDATA {
  /** u32 */
  cCustData: number;
  /** ptr */
  prgCustData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCUSTDATA = 16;

export function allocCUSTDATA(data?: Partial<CUSTDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofCUSTDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cCustData !== undefined) view.setUint32(0, Number(data.cCustData), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.prgCustData !== undefined) view.setBigUint64(8, data.prgCustData === null ? 0n : BigInt(util.toPointer(data.prgCustData)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.BINDPTR (size: 24)
 */
export interface BINDPTR {
  /** ptr */
  lpfuncdesc: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpvardesc: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Com.ITypeComp */
  lptcomp: Uint8Array | Deno.PointerValue | null;
}

export const sizeofBINDPTR = 24;

export function allocBINDPTR(data?: Partial<BINDPTR>): Uint8Array {
  const buf = new Uint8Array(sizeofBINDPTR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpfuncdesc !== undefined) view.setBigUint64(0, data.lpfuncdesc === null ? 0n : BigInt(util.toPointer(data.lpfuncdesc)), true);
  // 0x08: pointer
  if (data?.lpvardesc !== undefined) view.setBigUint64(8, data.lpvardesc === null ? 0n : BigInt(util.toPointer(data.lpvardesc)), true);
  // 0x10: pointer
  if (data?.lptcomp !== undefined) view.setBigUint64(16, data.lptcomp === null ? 0n : BigInt(util.toPointer(data.lptcomp)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.TLIBATTR (size: 24)
 */
export interface TLIBATTR {
  /** System.Guid */
  guid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  lcid: number;
  /** Windows.Win32.System.Com.SYSKIND */
  syskind: SYSKIND;
  /** u16 */
  wMajorVerNum: number;
  /** u16 */
  wMinorVerNum: number;
  /** u16 */
  wLibFlags: number;
}

export const sizeofTLIBATTR = 24;

export function allocTLIBATTR(data?: Partial<TLIBATTR>): Uint8Array {
  const buf = new Uint8Array(sizeofTLIBATTR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guid !== undefined) view.setBigUint64(0, data.guid === null ? 0n : BigInt(util.toPointer(data.guid)), true);
  // 0x08: u32
  if (data?.lcid !== undefined) view.setUint32(8, Number(data.lcid), true);
  // 0x0c: i32
  if (data?.syskind !== undefined) view.setInt32(12, Number(data.syskind), true);
  // 0x10: u16
  if (data?.wMajorVerNum !== undefined) view.setUint16(16, Number(data.wMajorVerNum), true);
  // 0x12: u16
  if (data?.wMinorVerNum !== undefined) view.setUint16(18, Number(data.wMinorVerNum), true);
  // 0x14: u16
  if (data?.wLibFlags !== undefined) view.setUint16(20, Number(data.wLibFlags), true);
  // 0x16: pad2
  return buf;
}

/**
 * Windows.Win32.System.Com.CONNECTDATA (size: 16)
 */
export interface CONNECTDATA {
  /** Windows.Win32.System.Com.IUnknown */
  pUnk: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwCookie: number;
}

export const sizeofCONNECTDATA = 16;

export function allocCONNECTDATA(data?: Partial<CONNECTDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofCONNECTDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pUnk !== undefined) view.setBigUint64(0, data.pUnk === null ? 0n : BigInt(util.toPointer(data.pUnk)), true);
  // 0x08: u32
  if (data?.dwCookie !== undefined) view.setUint32(8, Number(data.dwCookie), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.OLESTREAMVTBL (size: 16)
 */
export interface OLESTREAMVTBL {
  /** isize */
  Get: Deno.PointerValue;
  /** isize */
  Put: Deno.PointerValue;
}

export const sizeofOLESTREAMVTBL = 16;

export function allocOLESTREAMVTBL(data?: Partial<OLESTREAMVTBL>): Uint8Array {
  const buf = new Uint8Array(sizeofOLESTREAMVTBL);
  const view = new DataView(buf.buffer);
  // 0x00: isize
  if (data?.Get !== undefined) view.setBigInt64(0, BigInt(data.Get), true);
  // 0x08: isize
  if (data?.Put !== undefined) view.setBigInt64(8, BigInt(data.Put), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.OLESTREAM (size: 8)
 */
export interface OLESTREAM {
  /** ptr */
  lpstbl: Deno.PointerValue | Uint8Array | null;
}

export const sizeofOLESTREAM = 8;

export function allocOLESTREAM(data?: Partial<OLESTREAM>): Uint8Array {
  const buf = new Uint8Array(sizeofOLESTREAM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpstbl !== undefined) view.setBigUint64(0, data.lpstbl === null ? 0n : BigInt(util.toPointer(data.lpstbl)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.PROPBAG2 (size: 32)
 */
export interface PROPBAG2 {
  /** u32 */
  dwType: number;
  /** u16 */
  vt: number;
  /** u16 */
  cfType: number;
  /** u32 */
  dwHint: number;
  /** Windows.Win32.Foundation.PWSTR */
  pstrName: string | null;
  /** System.Guid */
  clsid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPROPBAG2 = 32;

export function allocPROPBAG2(data?: Partial<PROPBAG2>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPBAG2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwType !== undefined) view.setUint32(0, Number(data.dwType), true);
  // 0x04: u16
  if (data?.vt !== undefined) view.setUint16(4, Number(data.vt), true);
  // 0x06: u16
  if (data?.cfType !== undefined) view.setUint16(6, Number(data.cfType), true);
  // 0x08: u32
  if (data?.dwHint !== undefined) view.setUint32(8, Number(data.dwHint), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pstrName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pstrName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.clsid !== undefined) view.setBigUint64(24, data.clsid === null ? 0n : BigInt(util.toPointer(data.clsid)), true);
  return buf;
}

/**
 * Windows.Win32.System.ComponentServices.COMSVCSEVENTINFO (size: 48)
 */
export interface COMSVCSEVENTINFO {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwPid: number;
  /** i64 */
  lTime: Deno.PointerValue;
  /** i32 */
  lMicroTime: number;
  /** i64 */
  perfCount: Deno.PointerValue;
  /** System.Guid */
  guidApp: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  sMachineName: string | null;
}

export const sizeofCOMSVCSEVENTINFO = 48;

export function allocCOMSVCSEVENTINFO(data?: Partial<COMSVCSEVENTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCOMSVCSEVENTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwPid !== undefined) view.setUint32(4, Number(data.dwPid), true);
  // 0x08: i64
  if (data?.lTime !== undefined) view.setBigInt64(8, BigInt(data.lTime), true);
  // 0x10: i32
  if (data?.lMicroTime !== undefined) view.setInt32(16, Number(data.lMicroTime), true);
  // 0x14: pad4
  // 0x18: i64
  if (data?.perfCount !== undefined) view.setBigInt64(24, BigInt(data.perfCount), true);
  // 0x20: pointer
  if (data?.guidApp !== undefined) view.setBigUint64(32, data.guidApp === null ? 0n : BigInt(util.toPointer(data.guidApp)), true);
  // 0x28: buffer
  if (data?.sMachineName !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.sMachineName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  return buf;
}

/**
 * Windows.Win32.System.ComponentServices.RECYCLE_INFO (size: 32)
 */
export interface RECYCLE_INFO {
  /** System.Guid */
  guidCombaseProcessIdentifier: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  ProcessStartTime: Deno.PointerValue;
  /** u32 */
  dwRecycleLifetimeLimit: number;
  /** u32 */
  dwRecycleMemoryLimit: number;
  /** u32 */
  dwRecycleExpirationTimeout: number;
}

export const sizeofRECYCLE_INFO = 32;

export function allocRECYCLE_INFO(data?: Partial<RECYCLE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRECYCLE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guidCombaseProcessIdentifier !== undefined) view.setBigUint64(0, data.guidCombaseProcessIdentifier === null ? 0n : BigInt(util.toPointer(data.guidCombaseProcessIdentifier)), true);
  // 0x08: i64
  if (data?.ProcessStartTime !== undefined) view.setBigInt64(8, BigInt(data.ProcessStartTime), true);
  // 0x10: u32
  if (data?.dwRecycleLifetimeLimit !== undefined) view.setUint32(16, Number(data.dwRecycleLifetimeLimit), true);
  // 0x14: u32
  if (data?.dwRecycleMemoryLimit !== undefined) view.setUint32(20, Number(data.dwRecycleMemoryLimit), true);
  // 0x18: u32
  if (data?.dwRecycleExpirationTimeout !== undefined) view.setUint32(24, Number(data.dwRecycleExpirationTimeout), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.System.ComponentServices.HANG_INFO (size: 24)
 */
export interface HANG_INFO {
  /** Windows.Win32.Foundation.BOOL */
  fAppHangMonitorEnabled: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fTerminateOnHang: boolean;
  /** Windows.Win32.System.ComponentServices.DUMPTYPE */
  DumpType: DUMPTYPE;
  /** u32 */
  dwHangTimeout: number;
  /** u32 */
  dwDumpCount: number;
  /** u32 */
  dwInfoMsgCount: number;
}

export const sizeofHANG_INFO = 24;

export function allocHANG_INFO(data?: Partial<HANG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHANG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fAppHangMonitorEnabled !== undefined) view.setInt32(0, Number(data.fAppHangMonitorEnabled), true);
  // 0x04: i32
  if (data?.fTerminateOnHang !== undefined) view.setInt32(4, Number(data.fTerminateOnHang), true);
  // 0x08: i32
  if (data?.DumpType !== undefined) view.setInt32(8, Number(data.DumpType), true);
  // 0x0c: u32
  if (data?.dwHangTimeout !== undefined) view.setUint32(12, Number(data.dwHangTimeout), true);
  // 0x10: u32
  if (data?.dwDumpCount !== undefined) view.setUint32(16, Number(data.dwDumpCount), true);
  // 0x14: u32
  if (data?.dwInfoMsgCount !== undefined) view.setUint32(20, Number(data.dwInfoMsgCount), true);
  return buf;
}

/**
 * Windows.Win32.System.ComponentServices.CAppStatistics (size: 16)
 */
export interface CAppStatistics {
  /** u32 */
  m_cTotalCalls: number;
  /** u32 */
  m_cTotalInstances: number;
  /** u32 */
  m_cTotalClasses: number;
  /** u32 */
  m_cCallsPerSecond: number;
}

export const sizeofCAppStatistics = 16;

export function allocCAppStatistics(data?: Partial<CAppStatistics>): Uint8Array {
  const buf = new Uint8Array(sizeofCAppStatistics);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.m_cTotalCalls !== undefined) view.setUint32(0, Number(data.m_cTotalCalls), true);
  // 0x04: u32
  if (data?.m_cTotalInstances !== undefined) view.setUint32(4, Number(data.m_cTotalInstances), true);
  // 0x08: u32
  if (data?.m_cTotalClasses !== undefined) view.setUint32(8, Number(data.m_cTotalClasses), true);
  // 0x0c: u32
  if (data?.m_cCallsPerSecond !== undefined) view.setUint32(12, Number(data.m_cCallsPerSecond), true);
  return buf;
}

/**
 * Windows.Win32.System.ComponentServices.CAppData (size: 32)
 */
export interface CAppData {
  /** u32 */
  m_idApp: number;
  /** array */
  m_szAppGuid: Deno.PointerValue | null;
  /** u32 */
  m_dwAppProcessId: number;
  /** Windows.Win32.System.ComponentServices.CAppStatistics */
  m_AppStatistics: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCAppData = 32;

export function allocCAppData(data?: Partial<CAppData>): Uint8Array {
  const buf = new Uint8Array(sizeofCAppData);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.m_idApp !== undefined) view.setUint32(0, Number(data.m_idApp), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.m_szAppGuid !== undefined) view.setBigUint64(8, data.m_szAppGuid === null ? 0n : BigInt(util.toPointer(data.m_szAppGuid)), true);
  // 0x10: u32
  if (data?.m_dwAppProcessId !== undefined) view.setUint32(16, Number(data.m_dwAppProcessId), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.m_AppStatistics !== undefined) view.setBigUint64(24, data.m_AppStatistics === null ? 0n : BigInt(util.toPointer(data.m_AppStatistics)), true);
  return buf;
}

/**
 * Windows.Win32.System.ComponentServices.CCLSIDData (size: 40)
 */
export interface CCLSIDData {
  /** System.Guid */
  m_clsid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  m_cReferences: number;
  /** u32 */
  m_cBound: number;
  /** u32 */
  m_cPooled: number;
  /** u32 */
  m_cInCall: number;
  /** u32 */
  m_dwRespTime: number;
  /** u32 */
  m_cCallsCompleted: number;
  /** u32 */
  m_cCallsFailed: number;
}

export const sizeofCCLSIDData = 40;

export function allocCCLSIDData(data?: Partial<CCLSIDData>): Uint8Array {
  const buf = new Uint8Array(sizeofCCLSIDData);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.m_clsid !== undefined) view.setBigUint64(0, data.m_clsid === null ? 0n : BigInt(util.toPointer(data.m_clsid)), true);
  // 0x08: u32
  if (data?.m_cReferences !== undefined) view.setUint32(8, Number(data.m_cReferences), true);
  // 0x0c: u32
  if (data?.m_cBound !== undefined) view.setUint32(12, Number(data.m_cBound), true);
  // 0x10: u32
  if (data?.m_cPooled !== undefined) view.setUint32(16, Number(data.m_cPooled), true);
  // 0x14: u32
  if (data?.m_cInCall !== undefined) view.setUint32(20, Number(data.m_cInCall), true);
  // 0x18: u32
  if (data?.m_dwRespTime !== undefined) view.setUint32(24, Number(data.m_dwRespTime), true);
  // 0x1c: u32
  if (data?.m_cCallsCompleted !== undefined) view.setUint32(28, Number(data.m_cCallsCompleted), true);
  // 0x20: u32
  if (data?.m_cCallsFailed !== undefined) view.setUint32(32, Number(data.m_cCallsFailed), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.System.ComponentServices.CCLSIDData2 (size: 72)
 */
export interface CCLSIDData2 {
  /** System.Guid */
  m_clsid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  m_appid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  m_partid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  m_pwszAppName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  m_pwszCtxName: string | null;
  /** Windows.Win32.System.ComponentServices.COMPLUS_APPTYPE */
  m_eAppType: COMPLUS_APPTYPE;
  /** u32 */
  m_cReferences: number;
  /** u32 */
  m_cBound: number;
  /** u32 */
  m_cPooled: number;
  /** u32 */
  m_cInCall: number;
  /** u32 */
  m_dwRespTime: number;
  /** u32 */
  m_cCallsCompleted: number;
  /** u32 */
  m_cCallsFailed: number;
}

export const sizeofCCLSIDData2 = 72;

export function allocCCLSIDData2(data?: Partial<CCLSIDData2>): Uint8Array {
  const buf = new Uint8Array(sizeofCCLSIDData2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.m_clsid !== undefined) view.setBigUint64(0, data.m_clsid === null ? 0n : BigInt(util.toPointer(data.m_clsid)), true);
  // 0x08: pointer
  if (data?.m_appid !== undefined) view.setBigUint64(8, data.m_appid === null ? 0n : BigInt(util.toPointer(data.m_appid)), true);
  // 0x10: pointer
  if (data?.m_partid !== undefined) view.setBigUint64(16, data.m_partid === null ? 0n : BigInt(util.toPointer(data.m_partid)), true);
  // 0x18: buffer
  if (data?.m_pwszAppName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.m_pwszAppName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.m_pwszCtxName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.m_pwszCtxName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: i32
  if (data?.m_eAppType !== undefined) view.setInt32(40, Number(data.m_eAppType), true);
  // 0x2c: u32
  if (data?.m_cReferences !== undefined) view.setUint32(44, Number(data.m_cReferences), true);
  // 0x30: u32
  if (data?.m_cBound !== undefined) view.setUint32(48, Number(data.m_cBound), true);
  // 0x34: u32
  if (data?.m_cPooled !== undefined) view.setUint32(52, Number(data.m_cPooled), true);
  // 0x38: u32
  if (data?.m_cInCall !== undefined) view.setUint32(56, Number(data.m_cInCall), true);
  // 0x3c: u32
  if (data?.m_dwRespTime !== undefined) view.setUint32(60, Number(data.m_dwRespTime), true);
  // 0x40: u32
  if (data?.m_cCallsCompleted !== undefined) view.setUint32(64, Number(data.m_cCallsCompleted), true);
  // 0x44: u32
  if (data?.m_cCallsFailed !== undefined) view.setUint32(68, Number(data.m_cCallsFailed), true);
  return buf;
}

/**
 * Windows.Win32.System.ComponentServices.ApplicationProcessSummary (size: 56)
 */
export interface ApplicationProcessSummary {
  /** System.Guid */
  PartitionIdPrimaryApplication: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ApplicationIdPrimaryApplication: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ApplicationInstanceId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ProcessId: number;
  /** Windows.Win32.System.ComponentServices.COMPLUS_APPTYPE */
  Type: COMPLUS_APPTYPE;
  /** Windows.Win32.Foundation.PWSTR */
  ProcessExeName: string | null;
  /** Windows.Win32.Foundation.BOOL */
  IsService: boolean;
  /** Windows.Win32.Foundation.BOOL */
  IsPaused: boolean;
  /** Windows.Win32.Foundation.BOOL */
  IsRecycled: boolean;
}

export const sizeofApplicationProcessSummary = 56;

export function allocApplicationProcessSummary(data?: Partial<ApplicationProcessSummary>): Uint8Array {
  const buf = new Uint8Array(sizeofApplicationProcessSummary);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PartitionIdPrimaryApplication !== undefined) view.setBigUint64(0, data.PartitionIdPrimaryApplication === null ? 0n : BigInt(util.toPointer(data.PartitionIdPrimaryApplication)), true);
  // 0x08: pointer
  if (data?.ApplicationIdPrimaryApplication !== undefined) view.setBigUint64(8, data.ApplicationIdPrimaryApplication === null ? 0n : BigInt(util.toPointer(data.ApplicationIdPrimaryApplication)), true);
  // 0x10: pointer
  if (data?.ApplicationInstanceId !== undefined) view.setBigUint64(16, data.ApplicationInstanceId === null ? 0n : BigInt(util.toPointer(data.ApplicationInstanceId)), true);
  // 0x18: u32
  if (data?.ProcessId !== undefined) view.setUint32(24, Number(data.ProcessId), true);
  // 0x1c: i32
  if (data?.Type !== undefined) view.setInt32(28, Number(data.Type), true);
  // 0x20: buffer
  if (data?.ProcessExeName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.ProcessExeName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: i32
  if (data?.IsService !== undefined) view.setInt32(40, Number(data.IsService), true);
  // 0x2c: i32
  if (data?.IsPaused !== undefined) view.setInt32(44, Number(data.IsPaused), true);
  // 0x30: i32
  if (data?.IsRecycled !== undefined) view.setInt32(48, Number(data.IsRecycled), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.System.ComponentServices.ApplicationProcessStatistics (size: 32)
 */
export interface ApplicationProcessStatistics {
  /** u32 */
  NumCallsOutstanding: number;
  /** u32 */
  NumTrackedComponents: number;
  /** u32 */
  NumComponentInstances: number;
  /** u32 */
  AvgCallsPerSecond: number;
  /** u32 */
  Reserved1: number;
  /** u32 */
  Reserved2: number;
  /** u32 */
  Reserved3: number;
  /** u32 */
  Reserved4: number;
}

export const sizeofApplicationProcessStatistics = 32;

export function allocApplicationProcessStatistics(data?: Partial<ApplicationProcessStatistics>): Uint8Array {
  const buf = new Uint8Array(sizeofApplicationProcessStatistics);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumCallsOutstanding !== undefined) view.setUint32(0, Number(data.NumCallsOutstanding), true);
  // 0x04: u32
  if (data?.NumTrackedComponents !== undefined) view.setUint32(4, Number(data.NumTrackedComponents), true);
  // 0x08: u32
  if (data?.NumComponentInstances !== undefined) view.setUint32(8, Number(data.NumComponentInstances), true);
  // 0x0c: u32
  if (data?.AvgCallsPerSecond !== undefined) view.setUint32(12, Number(data.AvgCallsPerSecond), true);
  // 0x10: u32
  if (data?.Reserved1 !== undefined) view.setUint32(16, Number(data.Reserved1), true);
  // 0x14: u32
  if (data?.Reserved2 !== undefined) view.setUint32(20, Number(data.Reserved2), true);
  // 0x18: u32
  if (data?.Reserved3 !== undefined) view.setUint32(24, Number(data.Reserved3), true);
  // 0x1c: u32
  if (data?.Reserved4 !== undefined) view.setUint32(28, Number(data.Reserved4), true);
  return buf;
}

/**
 * Windows.Win32.System.ComponentServices.ApplicationProcessRecycleInfo (size: 72)
 */
export interface ApplicationProcessRecycleInfo {
  /** Windows.Win32.Foundation.BOOL */
  IsRecyclable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  IsRecycled: boolean;
  /** Windows.Win32.Foundation.FILETIME */
  TimeRecycled: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  TimeToTerminate: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  RecycleReasonCode: number;
  /** Windows.Win32.Foundation.BOOL */
  IsPendingRecycle: boolean;
  /** Windows.Win32.Foundation.BOOL */
  HasAutomaticLifetimeRecycling: boolean;
  /** Windows.Win32.Foundation.FILETIME */
  TimeForAutomaticRecycling: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  MemoryLimitInKB: number;
  /** u32 */
  MemoryUsageInKBLastCheck: number;
  /** u32 */
  ActivationLimit: number;
  /** u32 */
  NumActivationsLastReported: number;
  /** u32 */
  CallLimit: number;
  /** u32 */
  NumCallsLastReported: number;
}

export const sizeofApplicationProcessRecycleInfo = 72;

export function allocApplicationProcessRecycleInfo(data?: Partial<ApplicationProcessRecycleInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofApplicationProcessRecycleInfo);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.IsRecyclable !== undefined) view.setInt32(0, Number(data.IsRecyclable), true);
  // 0x04: i32
  if (data?.IsRecycled !== undefined) view.setInt32(4, Number(data.IsRecycled), true);
  // 0x08: pointer
  if (data?.TimeRecycled !== undefined) view.setBigUint64(8, data.TimeRecycled === null ? 0n : BigInt(util.toPointer(data.TimeRecycled)), true);
  // 0x10: pointer
  if (data?.TimeToTerminate !== undefined) view.setBigUint64(16, data.TimeToTerminate === null ? 0n : BigInt(util.toPointer(data.TimeToTerminate)), true);
  // 0x18: i32
  if (data?.RecycleReasonCode !== undefined) view.setInt32(24, Number(data.RecycleReasonCode), true);
  // 0x1c: i32
  if (data?.IsPendingRecycle !== undefined) view.setInt32(28, Number(data.IsPendingRecycle), true);
  // 0x20: i32
  if (data?.HasAutomaticLifetimeRecycling !== undefined) view.setInt32(32, Number(data.HasAutomaticLifetimeRecycling), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.TimeForAutomaticRecycling !== undefined) view.setBigUint64(40, data.TimeForAutomaticRecycling === null ? 0n : BigInt(util.toPointer(data.TimeForAutomaticRecycling)), true);
  // 0x30: u32
  if (data?.MemoryLimitInKB !== undefined) view.setUint32(48, Number(data.MemoryLimitInKB), true);
  // 0x34: u32
  if (data?.MemoryUsageInKBLastCheck !== undefined) view.setUint32(52, Number(data.MemoryUsageInKBLastCheck), true);
  // 0x38: u32
  if (data?.ActivationLimit !== undefined) view.setUint32(56, Number(data.ActivationLimit), true);
  // 0x3c: u32
  if (data?.NumActivationsLastReported !== undefined) view.setUint32(60, Number(data.NumActivationsLastReported), true);
  // 0x40: u32
  if (data?.CallLimit !== undefined) view.setUint32(64, Number(data.CallLimit), true);
  // 0x44: u32
  if (data?.NumCallsLastReported !== undefined) view.setUint32(68, Number(data.NumCallsLastReported), true);
  return buf;
}

/**
 * Windows.Win32.System.ComponentServices.ApplicationSummary (size: 48)
 */
export interface ApplicationSummary {
  /** System.Guid */
  ApplicationInstanceId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  PartitionId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ApplicationId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.ComponentServices.COMPLUS_APPTYPE */
  Type: COMPLUS_APPTYPE;
  /** Windows.Win32.Foundation.PWSTR */
  ApplicationName: string | null;
  /** u32 */
  NumTrackedComponents: number;
  /** u32 */
  NumComponentInstances: number;
}

export const sizeofApplicationSummary = 48;

export function allocApplicationSummary(data?: Partial<ApplicationSummary>): Uint8Array {
  const buf = new Uint8Array(sizeofApplicationSummary);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ApplicationInstanceId !== undefined) view.setBigUint64(0, data.ApplicationInstanceId === null ? 0n : BigInt(util.toPointer(data.ApplicationInstanceId)), true);
  // 0x08: pointer
  if (data?.PartitionId !== undefined) view.setBigUint64(8, data.PartitionId === null ? 0n : BigInt(util.toPointer(data.PartitionId)), true);
  // 0x10: pointer
  if (data?.ApplicationId !== undefined) view.setBigUint64(16, data.ApplicationId === null ? 0n : BigInt(util.toPointer(data.ApplicationId)), true);
  // 0x18: i32
  if (data?.Type !== undefined) view.setInt32(24, Number(data.Type), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.ApplicationName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.ApplicationName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.NumTrackedComponents !== undefined) view.setUint32(40, Number(data.NumTrackedComponents), true);
  // 0x2c: u32
  if (data?.NumComponentInstances !== undefined) view.setUint32(44, Number(data.NumComponentInstances), true);
  return buf;
}

/**
 * Windows.Win32.System.ComponentServices.ComponentSummary (size: 48)
 */
export interface ComponentSummary {
  /** System.Guid */
  ApplicationInstanceId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  PartitionId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ApplicationId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  Clsid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  ClassName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  ApplicationName: string | null;
}

export const sizeofComponentSummary = 48;

export function allocComponentSummary(data?: Partial<ComponentSummary>): Uint8Array {
  const buf = new Uint8Array(sizeofComponentSummary);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ApplicationInstanceId !== undefined) view.setBigUint64(0, data.ApplicationInstanceId === null ? 0n : BigInt(util.toPointer(data.ApplicationInstanceId)), true);
  // 0x08: pointer
  if (data?.PartitionId !== undefined) view.setBigUint64(8, data.PartitionId === null ? 0n : BigInt(util.toPointer(data.PartitionId)), true);
  // 0x10: pointer
  if (data?.ApplicationId !== undefined) view.setBigUint64(16, data.ApplicationId === null ? 0n : BigInt(util.toPointer(data.ApplicationId)), true);
  // 0x18: pointer
  if (data?.Clsid !== undefined) view.setBigUint64(24, data.Clsid === null ? 0n : BigInt(util.toPointer(data.Clsid)), true);
  // 0x20: buffer
  if (data?.ClassName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.ClassName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.ApplicationName !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.ApplicationName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  return buf;
}

/**
 * Windows.Win32.System.ComponentServices.ComponentStatistics (size: 56)
 */
export interface ComponentStatistics {
  /** u32 */
  NumInstances: number;
  /** u32 */
  NumBoundReferences: number;
  /** u32 */
  NumPooledObjects: number;
  /** u32 */
  NumObjectsInCall: number;
  /** u32 */
  AvgResponseTimeInMs: number;
  /** u32 */
  NumCallsCompletedRecent: number;
  /** u32 */
  NumCallsFailedRecent: number;
  /** u32 */
  NumCallsCompletedTotal: number;
  /** u32 */
  NumCallsFailedTotal: number;
  /** u32 */
  Reserved1: number;
  /** u32 */
  Reserved2: number;
  /** u32 */
  Reserved3: number;
  /** u32 */
  Reserved4: number;
}

export const sizeofComponentStatistics = 56;

export function allocComponentStatistics(data?: Partial<ComponentStatistics>): Uint8Array {
  const buf = new Uint8Array(sizeofComponentStatistics);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumInstances !== undefined) view.setUint32(0, Number(data.NumInstances), true);
  // 0x04: u32
  if (data?.NumBoundReferences !== undefined) view.setUint32(4, Number(data.NumBoundReferences), true);
  // 0x08: u32
  if (data?.NumPooledObjects !== undefined) view.setUint32(8, Number(data.NumPooledObjects), true);
  // 0x0c: u32
  if (data?.NumObjectsInCall !== undefined) view.setUint32(12, Number(data.NumObjectsInCall), true);
  // 0x10: u32
  if (data?.AvgResponseTimeInMs !== undefined) view.setUint32(16, Number(data.AvgResponseTimeInMs), true);
  // 0x14: u32
  if (data?.NumCallsCompletedRecent !== undefined) view.setUint32(20, Number(data.NumCallsCompletedRecent), true);
  // 0x18: u32
  if (data?.NumCallsFailedRecent !== undefined) view.setUint32(24, Number(data.NumCallsFailedRecent), true);
  // 0x1c: u32
  if (data?.NumCallsCompletedTotal !== undefined) view.setUint32(28, Number(data.NumCallsCompletedTotal), true);
  // 0x20: u32
  if (data?.NumCallsFailedTotal !== undefined) view.setUint32(32, Number(data.NumCallsFailedTotal), true);
  // 0x24: u32
  if (data?.Reserved1 !== undefined) view.setUint32(36, Number(data.Reserved1), true);
  // 0x28: u32
  if (data?.Reserved2 !== undefined) view.setUint32(40, Number(data.Reserved2), true);
  // 0x2c: u32
  if (data?.Reserved3 !== undefined) view.setUint32(44, Number(data.Reserved3), true);
  // 0x30: u32
  if (data?.Reserved4 !== undefined) view.setUint32(48, Number(data.Reserved4), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.System.ComponentServices.ComponentHangMonitorInfo (size: 16)
 */
export interface ComponentHangMonitorInfo {
  /** Windows.Win32.Foundation.BOOL */
  IsMonitored: boolean;
  /** Windows.Win32.Foundation.BOOL */
  TerminateOnHang: boolean;
  /** u32 */
  AvgCallThresholdInMs: number;
}

export const sizeofComponentHangMonitorInfo = 16;

export function allocComponentHangMonitorInfo(data?: Partial<ComponentHangMonitorInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofComponentHangMonitorInfo);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.IsMonitored !== undefined) view.setInt32(0, Number(data.IsMonitored), true);
  // 0x04: i32
  if (data?.TerminateOnHang !== undefined) view.setInt32(4, Number(data.TerminateOnHang), true);
  // 0x08: u32
  if (data?.AvgCallThresholdInMs !== undefined) view.setUint32(8, Number(data.AvgCallThresholdInMs), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.ComponentServices.CrmLogRecordRead (size: 16)
 */
export interface CrmLogRecordRead {
  /** u32 */
  dwCrmFlags: number;
  /** u32 */
  dwSequenceNumber: number;
  /** Windows.Win32.System.Com.BLOB */
  blobUserData: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCrmLogRecordRead = 16;

export function allocCrmLogRecordRead(data?: Partial<CrmLogRecordRead>): Uint8Array {
  const buf = new Uint8Array(sizeofCrmLogRecordRead);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwCrmFlags !== undefined) view.setUint32(0, Number(data.dwCrmFlags), true);
  // 0x04: u32
  if (data?.dwSequenceNumber !== undefined) view.setUint32(4, Number(data.dwSequenceNumber), true);
  // 0x08: pointer
  if (data?.blobUserData !== undefined) view.setBigUint64(8, data.blobUserData === null ? 0n : BigInt(util.toPointer(data.blobUserData)), true);
  return buf;
}

export type HINSTANCE = Deno.PointerValue;

// Native Libraries

try {
  var libole32 = Deno.dlopen("ole32", {
    CoBuildVersion: {
      parameters: [],
      result: "u32",
    },
    DcomChannelSetHResult: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    CoIsOle1Class: {
      parameters: ["pointer"],
      result: "i32",
    },
    CoRegisterChannelHook: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    CoInstall: {
      parameters: ["pointer", "u32", "pointer", "pointer", "buffer"],
      result: "pointer",
    },
    MonikerRelativePathTo: {
      parameters: ["pointer", "pointer", "pointer", "i32"],
      result: "pointer",
    },
    MonikerCommonPrefixWith: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    CreateStdProgressIndicator: {
      parameters: ["pointer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libOLE32 = Deno.dlopen("OLE32", {
    CoInitialize: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CoRegisterMallocSpy: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CoRevokeMallocSpy: {
      parameters: [],
      result: "pointer",
    },
    CoRegisterInitializeSpy: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    CoRevokeInitializeSpy: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CoGetSystemSecurityPermissions: {
      parameters: ["i32", "pointer"],
      result: "pointer",
    },
    CoLoadLibrary: {
      parameters: ["buffer", "i32"],
      result: "pointer",
    },
    CoFreeLibrary: {
      parameters: ["pointer"],
      result: "void",
    },
    CoFreeAllLibraries: {
      parameters: [],
      result: "void",
    },
    CoAllowSetForegroundWindow: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    CLSIDFromProgIDEx: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    CoFileTimeToDosDateTime: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    CoDosDateTimeToFileTime: {
      parameters: ["u16", "u16", "pointer"],
      result: "i32",
    },
    CoFileTimeNow: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CoTreatAsClass: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    CreateDataAdviseHolder: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CreateDataCache: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    BindMoniker: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    CoGetObject: {
      parameters: ["buffer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    MkParseDisplayName: {
      parameters: ["pointer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    CreateBindCtx: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    CreateGenericComposite: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    GetClassFile: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    CreateClassMoniker: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    CreateFileMoniker: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    CreateItemMoniker: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "pointer",
    },
    CreateAntiMoniker: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CreatePointerMoniker: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    CreateObjrefMoniker: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    GetRunningObjectTable: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    CoGetMalloc: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    CoUninitialize: {
      parameters: [],
      result: "void",
    },
    CoGetCurrentProcess: {
      parameters: [],
      result: "u32",
    },
    CoInitializeEx: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    CoGetCallerTID: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CoGetCurrentLogicalThreadId: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CoGetContextToken: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CoGetApartmentType: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    CoIncrementMTAUsage: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CoDecrementMTAUsage: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CoAllowUnmarshalerCLSID: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CoGetObjectContext: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    CoGetClassObject: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    CoRegisterClassObject: {
      parameters: ["pointer", "pointer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    CoRevokeClassObject: {
      parameters: ["u32"],
      result: "pointer",
    },
    CoResumeClassObjects: {
      parameters: [],
      result: "pointer",
    },
    CoSuspendClassObjects: {
      parameters: [],
      result: "pointer",
    },
    CoAddRefServerProcess: {
      parameters: [],
      result: "u32",
    },
    CoReleaseServerProcess: {
      parameters: [],
      result: "u32",
    },
    CoGetPSClsid: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    CoRegisterPSClsid: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    CoRegisterSurrogate: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CoDisconnectObject: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    CoLockObjectExternal: {
      parameters: ["pointer", "i32", "i32"],
      result: "pointer",
    },
    CoIsHandlerConnected: {
      parameters: ["pointer"],
      result: "i32",
    },
    CoCreateFreeThreadedMarshaler: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    CoFreeUnusedLibraries: {
      parameters: [],
      result: "void",
    },
    CoFreeUnusedLibrariesEx: {
      parameters: ["u32", "u32"],
      result: "void",
    },
    CoDisconnectContext: {
      parameters: ["u32"],
      result: "pointer",
    },
    CoInitializeSecurity: {
      parameters: ["pointer", "i32", "pointer", "pointer", "u32", "u32", "pointer", "i32", "pointer"],
      result: "pointer",
    },
    CoGetCallContext: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    CoQueryProxyBlanket: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    CoSetProxyBlanket: {
      parameters: ["pointer", "u32", "u32", "buffer", "u32", "u32", "pointer", "i32"],
      result: "pointer",
    },
    CoCopyProxy: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    CoQueryClientBlanket: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    CoImpersonateClient: {
      parameters: [],
      result: "pointer",
    },
    CoRevertToSelf: {
      parameters: [],
      result: "pointer",
    },
    CoQueryAuthenticationServices: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    CoSwitchCallContext: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    CoCreateInstance: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    CoCreateInstanceEx: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    CoCreateInstanceFromApp: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    CoRegisterActivationFilter: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CoGetCancelObject: {
      parameters: ["u32", "pointer", "pointer"],
      result: "pointer",
    },
    CoSetCancelObject: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CoCancelCall: {
      parameters: ["u32", "u32"],
      result: "pointer",
    },
    CoTestCancel: {
      parameters: [],
      result: "pointer",
    },
    CoEnableCallCancellation: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CoDisableCallCancellation: {
      parameters: ["pointer"],
      result: "pointer",
    },
    StringFromCLSID: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    CLSIDFromString: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    StringFromIID: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    IIDFromString: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    ProgIDFromCLSID: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    CLSIDFromProgID: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    StringFromGUID2: {
      parameters: ["pointer", "buffer", "i32"],
      result: "i32",
    },
    CoCreateGuid: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CoWaitForMultipleHandles: {
      parameters: ["u32", "u32", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    CoWaitForMultipleObjects: {
      parameters: ["u32", "u32", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    CoGetTreatAsClass: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    CoInvalidateRemoteMachineBindings: {
      parameters: ["buffer"],
      result: "pointer",
    },
    CoTaskMemAlloc: {
      parameters: ["usize"],
      result: "pointer",
    },
    CoTaskMemRealloc: {
      parameters: ["pointer", "usize"],
      result: "pointer",
    },
    CoTaskMemFree: {
      parameters: ["pointer"],
      result: "void",
    },
    CoRegisterDeviceCatalog: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    CoRevokeDeviceCatalog: {
      parameters: ["pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libURLMON = Deno.dlopen("URLMON", {
    CreateUri: {
      parameters: ["buffer", "u32", "usize", "pointer"],
      result: "pointer",
    },
    CreateUriWithFragment: {
      parameters: ["buffer", "buffer", "u32", "usize", "pointer"],
      result: "pointer",
    },
    CreateIUriBuilder: {
      parameters: ["pointer", "u32", "usize", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var liburlmon = Deno.dlopen("urlmon", {
    CreateUriFromMultiByteString: {
      parameters: ["buffer", "u32", "u32", "u32", "usize", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libOLEAUT32 = Deno.dlopen("OLEAUT32", {
    SetErrorInfo: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    GetErrorInfo: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function CoBuildVersion(): number /* u32 */ {
  return libole32.CoBuildVersion();
}

export function CoInitialize(
  pvReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoInitialize(util.toPointer(pvReserved)));
}

export function CoRegisterMallocSpy(
  pMallocSpy: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IMallocSpy */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoRegisterMallocSpy(util.toPointer(pMallocSpy)));
}

export function CoRevokeMallocSpy(): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoRevokeMallocSpy());
}

export function CoRegisterInitializeSpy(
  pSpy: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IInitializeSpy */,
  puliCookie: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoRegisterInitializeSpy(util.toPointer(pSpy), util.toPointer(puliCookie)));
}

export function CoRevokeInitializeSpy(
  uliCookie: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.ULARGE_INTEGER */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoRevokeInitializeSpy(util.toPointer(uliCookie)));
}

export function CoGetSystemSecurityPermissions(
  comSDType: COMSD /* Windows.Win32.System.Com.COMSD */,
  ppSD: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoGetSystemSecurityPermissions(comSDType, util.toPointer(ppSD)));
}

export function CoLoadLibrary(
  lpszLibName: string | null /* Windows.Win32.Foundation.PWSTR */,
  bAutoFree: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */ {
  return util.pointerFromFfi(libOLE32.CoLoadLibrary(util.pwstrToFfi(lpszLibName), util.boolToFfi(bAutoFree)));
}

export function CoFreeLibrary(
  hInst: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
): void /* void */ {
  return libOLE32.CoFreeLibrary(util.toPointer(hInst));
}

export function CoFreeAllLibraries(): void /* void */ {
  return libOLE32.CoFreeAllLibraries();
}

export function CoAllowSetForegroundWindow(
  pUnk: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  lpvReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoAllowSetForegroundWindow(util.toPointer(pUnk), util.toPointer(lpvReserved)));
}

export function DcomChannelSetHResult(
  pvReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
  pulReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
  appsHR: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libole32.DcomChannelSetHResult(util.toPointer(pvReserved), util.toPointer(pulReserved), util.toPointer(appsHR)));
}

export function CoIsOle1Class(
  rclsid: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libole32.CoIsOle1Class(util.toPointer(rclsid)));
}

export function CLSIDFromProgIDEx(
  lpszProgID: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpclsid: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CLSIDFromProgIDEx(util.pwstrToFfi(lpszProgID), util.toPointer(lpclsid)));
}

export function CoFileTimeToDosDateTime(
  lpFileTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpDosDate: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpDosTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libOLE32.CoFileTimeToDosDateTime(util.toPointer(lpFileTime), util.toPointer(lpDosDate), util.toPointer(lpDosTime)));
}

export function CoDosDateTimeToFileTime(
  nDosDate: number /* u16 */,
  nDosTime: number /* u16 */,
  lpFileTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libOLE32.CoDosDateTimeToFileTime(nDosDate, nDosTime, util.toPointer(lpFileTime)));
}

export function CoFileTimeNow(
  lpFileTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoFileTimeNow(util.toPointer(lpFileTime)));
}

export function CoRegisterChannelHook(
  ExtensionUuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pChannelHook: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IChannelHook */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libole32.CoRegisterChannelHook(util.toPointer(ExtensionUuid), util.toPointer(pChannelHook)));
}

export function CoTreatAsClass(
  clsidOld: Deno.PointerValue | Uint8Array | null /* ptr */,
  clsidNew: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoTreatAsClass(util.toPointer(clsidOld), util.toPointer(clsidNew)));
}

export function CreateDataAdviseHolder(
  ppDAHolder: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CreateDataAdviseHolder(util.toPointer(ppDAHolder)));
}

export function CreateDataCache(
  pUnkOuter: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  rclsid: Deno.PointerValue | Uint8Array | null /* ptr */,
  iid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppv: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CreateDataCache(util.toPointer(pUnkOuter), util.toPointer(rclsid), util.toPointer(iid), util.toPointer(ppv)));
}

export function CoInstall(
  pbc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindCtx */,
  dwFlags: number /* u32 */,
  pClassSpec: Deno.PointerValue | Uint8Array | null /* ptr */,
  pQuery: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszCodeBase: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libole32.CoInstall(util.toPointer(pbc), dwFlags, util.toPointer(pClassSpec), util.toPointer(pQuery), util.pwstrToFfi(pszCodeBase)));
}

export function BindMoniker(
  pmk: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IMoniker */,
  grfOpt: number /* u32 */,
  iidResult: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppvResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.BindMoniker(util.toPointer(pmk), grfOpt, util.toPointer(iidResult), util.toPointer(ppvResult)));
}

export function CoGetObject(
  pszName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pBindOptions: Deno.PointerValue | Uint8Array | null /* ptr */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppv: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoGetObject(util.pwstrToFfi(pszName), util.toPointer(pBindOptions), util.toPointer(riid), util.toPointer(ppv)));
}

export function MkParseDisplayName(
  pbc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindCtx */,
  szUserName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pchEaten: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppmk: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.MkParseDisplayName(util.toPointer(pbc), util.pwstrToFfi(szUserName), util.toPointer(pchEaten), util.toPointer(ppmk)));
}

export function MonikerRelativePathTo(
  pmkSrc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IMoniker */,
  pmkDest: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IMoniker */,
  ppmkRelPath: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReserved: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libole32.MonikerRelativePathTo(util.toPointer(pmkSrc), util.toPointer(pmkDest), util.toPointer(ppmkRelPath), util.boolToFfi(dwReserved)));
}

export function MonikerCommonPrefixWith(
  pmkThis: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IMoniker */,
  pmkOther: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IMoniker */,
  ppmkCommon: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libole32.MonikerCommonPrefixWith(util.toPointer(pmkThis), util.toPointer(pmkOther), util.toPointer(ppmkCommon)));
}

export function CreateBindCtx(
  reserved: number /* u32 */,
  ppbc: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CreateBindCtx(reserved, util.toPointer(ppbc)));
}

export function CreateGenericComposite(
  pmkFirst: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IMoniker */,
  pmkRest: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IMoniker */,
  ppmkComposite: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CreateGenericComposite(util.toPointer(pmkFirst), util.toPointer(pmkRest), util.toPointer(ppmkComposite)));
}

export function GetClassFile(
  szFilename: string | null /* Windows.Win32.Foundation.PWSTR */,
  pclsid: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.GetClassFile(util.pwstrToFfi(szFilename), util.toPointer(pclsid)));
}

export function CreateClassMoniker(
  rclsid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppmk: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CreateClassMoniker(util.toPointer(rclsid), util.toPointer(ppmk)));
}

export function CreateFileMoniker(
  lpszPathName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ppmk: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CreateFileMoniker(util.pwstrToFfi(lpszPathName), util.toPointer(ppmk)));
}

export function CreateItemMoniker(
  lpszDelim: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszItem: string | null /* Windows.Win32.Foundation.PWSTR */,
  ppmk: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CreateItemMoniker(util.pwstrToFfi(lpszDelim), util.pwstrToFfi(lpszItem), util.toPointer(ppmk)));
}

export function CreateAntiMoniker(
  ppmk: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CreateAntiMoniker(util.toPointer(ppmk)));
}

export function CreatePointerMoniker(
  punk: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  ppmk: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CreatePointerMoniker(util.toPointer(punk), util.toPointer(ppmk)));
}

export function CreateObjrefMoniker(
  punk: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  ppmk: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CreateObjrefMoniker(util.toPointer(punk), util.toPointer(ppmk)));
}

export function GetRunningObjectTable(
  reserved: number /* u32 */,
  pprot: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.GetRunningObjectTable(reserved, util.toPointer(pprot)));
}

export function CreateStdProgressIndicator(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pszTitle: string | null /* Windows.Win32.Foundation.PWSTR */,
  pIbscCaller: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindStatusCallback */,
  ppIbsc: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libole32.CreateStdProgressIndicator(util.hwndToFfi(hwndParent), util.pwstrToFfi(pszTitle), util.toPointer(pIbscCaller), util.toPointer(ppIbsc)));
}

export function CoGetMalloc(
  dwMemContext: number /* u32 */,
  ppMalloc: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoGetMalloc(dwMemContext, util.toPointer(ppMalloc)));
}

export function CoUninitialize(): void /* void */ {
  return libOLE32.CoUninitialize();
}

export function CoGetCurrentProcess(): number /* u32 */ {
  return libOLE32.CoGetCurrentProcess();
}

export function CoInitializeEx(
  pvReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwCoInit: COINIT /* Windows.Win32.System.Com.COINIT */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoInitializeEx(util.toPointer(pvReserved), dwCoInit));
}

export function CoGetCallerTID(
  lpdwTID: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoGetCallerTID(util.toPointer(lpdwTID)));
}

export function CoGetCurrentLogicalThreadId(
  pguid: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoGetCurrentLogicalThreadId(util.toPointer(pguid)));
}

export function CoGetContextToken(
  pToken: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoGetContextToken(util.toPointer(pToken)));
}

export function CoGetApartmentType(
  pAptType: Deno.PointerValue | Uint8Array | null /* ptr */,
  pAptQualifier: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoGetApartmentType(util.toPointer(pAptType), util.toPointer(pAptQualifier)));
}

export function CoIncrementMTAUsage(
  pCookie: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoIncrementMTAUsage(util.toPointer(pCookie)));
}

export function CoDecrementMTAUsage(
  Cookie: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.CO_MTA_USAGE_COOKIE */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoDecrementMTAUsage(util.toPointer(Cookie)));
}

export function CoAllowUnmarshalerCLSID(
  clsid: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoAllowUnmarshalerCLSID(util.toPointer(clsid)));
}

export function CoGetObjectContext(
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppv: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoGetObjectContext(util.toPointer(riid), util.toPointer(ppv)));
}

export function CoGetClassObject(
  rclsid: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwClsContext: CLSCTX /* Windows.Win32.System.Com.CLSCTX */,
  pvReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppv: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoGetClassObject(util.toPointer(rclsid), dwClsContext, util.toPointer(pvReserved), util.toPointer(riid), util.toPointer(ppv)));
}

export function CoRegisterClassObject(
  rclsid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pUnk: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  dwClsContext: CLSCTX /* Windows.Win32.System.Com.CLSCTX */,
  flags: number /* u32 */,
  lpdwRegister: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoRegisterClassObject(util.toPointer(rclsid), util.toPointer(pUnk), dwClsContext, flags, util.toPointer(lpdwRegister)));
}

export function CoRevokeClassObject(
  dwRegister: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoRevokeClassObject(dwRegister));
}

export function CoResumeClassObjects(): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoResumeClassObjects());
}

export function CoSuspendClassObjects(): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoSuspendClassObjects());
}

export function CoAddRefServerProcess(): number /* u32 */ {
  return libOLE32.CoAddRefServerProcess();
}

export function CoReleaseServerProcess(): number /* u32 */ {
  return libOLE32.CoReleaseServerProcess();
}

export function CoGetPSClsid(
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pClsid: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoGetPSClsid(util.toPointer(riid), util.toPointer(pClsid)));
}

export function CoRegisterPSClsid(
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  rclsid: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoRegisterPSClsid(util.toPointer(riid), util.toPointer(rclsid)));
}

export function CoRegisterSurrogate(
  pSurrogate: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.ISurrogate */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoRegisterSurrogate(util.toPointer(pSurrogate)));
}

export function CoDisconnectObject(
  pUnk: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  dwReserved: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoDisconnectObject(util.toPointer(pUnk), dwReserved));
}

export function CoLockObjectExternal(
  pUnk: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  fLock: boolean /* Windows.Win32.Foundation.BOOL */,
  fLastUnlockReleases: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoLockObjectExternal(util.toPointer(pUnk), util.boolToFfi(fLock), util.boolToFfi(fLastUnlockReleases)));
}

export function CoIsHandlerConnected(
  pUnk: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libOLE32.CoIsHandlerConnected(util.toPointer(pUnk)));
}

export function CoCreateFreeThreadedMarshaler(
  punkOuter: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  ppunkMarshal: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoCreateFreeThreadedMarshaler(util.toPointer(punkOuter), util.toPointer(ppunkMarshal)));
}

export function CoFreeUnusedLibraries(): void /* void */ {
  return libOLE32.CoFreeUnusedLibraries();
}

export function CoFreeUnusedLibrariesEx(
  dwUnloadDelay: number /* u32 */,
  dwReserved: number /* u32 */,
): void /* void */ {
  return libOLE32.CoFreeUnusedLibrariesEx(dwUnloadDelay, dwReserved);
}

export function CoDisconnectContext(
  dwTimeout: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoDisconnectContext(dwTimeout));
}

export function CoInitializeSecurity(
  pSecDesc: Deno.PointerValue | Uint8Array | null /* ptr */,
  cAuthSvc: number /* i32 */,
  asAuthSvc: Deno.PointerValue | Uint8Array | null /* ptr */,
  pReserved1: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwAuthnLevel: RPC_C_AUTHN_LEVEL /* Windows.Win32.System.Com.RPC_C_AUTHN_LEVEL */,
  dwImpLevel: RPC_C_IMP_LEVEL /* Windows.Win32.System.Com.RPC_C_IMP_LEVEL */,
  pAuthList: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwCapabilities: EOLE_AUTHENTICATION_CAPABILITIES /* Windows.Win32.System.Com.EOLE_AUTHENTICATION_CAPABILITIES */,
  pReserved3: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoInitializeSecurity(util.toPointer(pSecDesc), cAuthSvc, util.toPointer(asAuthSvc), util.toPointer(pReserved1), dwAuthnLevel, dwImpLevel, util.toPointer(pAuthList), dwCapabilities, util.toPointer(pReserved3)));
}

export function CoGetCallContext(
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppInterface: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoGetCallContext(util.toPointer(riid), util.toPointer(ppInterface)));
}

export function CoQueryProxyBlanket(
  pProxy: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  pwAuthnSvc: Deno.PointerValue | Uint8Array | null /* ptr */,
  pAuthzSvc: Deno.PointerValue | Uint8Array | null /* ptr */,
  pServerPrincName: Deno.PointerValue | Uint8Array | null /* ptr */,
  pAuthnLevel: Deno.PointerValue | Uint8Array | null /* ptr */,
  pImpLevel: Deno.PointerValue | Uint8Array | null /* ptr */,
  pAuthInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pCapabilites: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoQueryProxyBlanket(util.toPointer(pProxy), util.toPointer(pwAuthnSvc), util.toPointer(pAuthzSvc), util.toPointer(pServerPrincName), util.toPointer(pAuthnLevel), util.toPointer(pImpLevel), util.toPointer(pAuthInfo), util.toPointer(pCapabilites)));
}

export function CoSetProxyBlanket(
  pProxy: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  dwAuthnSvc: number /* u32 */,
  dwAuthzSvc: number /* u32 */,
  pServerPrincName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwAuthnLevel: RPC_C_AUTHN_LEVEL /* Windows.Win32.System.Com.RPC_C_AUTHN_LEVEL */,
  dwImpLevel: RPC_C_IMP_LEVEL /* Windows.Win32.System.Com.RPC_C_IMP_LEVEL */,
  pAuthInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwCapabilities: EOLE_AUTHENTICATION_CAPABILITIES /* Windows.Win32.System.Com.EOLE_AUTHENTICATION_CAPABILITIES */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoSetProxyBlanket(util.toPointer(pProxy), dwAuthnSvc, dwAuthzSvc, util.pwstrToFfi(pServerPrincName), dwAuthnLevel, dwImpLevel, util.toPointer(pAuthInfo), dwCapabilities));
}

export function CoCopyProxy(
  pProxy: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  ppCopy: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoCopyProxy(util.toPointer(pProxy), util.toPointer(ppCopy)));
}

export function CoQueryClientBlanket(
  pAuthnSvc: Deno.PointerValue | Uint8Array | null /* ptr */,
  pAuthzSvc: Deno.PointerValue | Uint8Array | null /* ptr */,
  pServerPrincName: Deno.PointerValue | Uint8Array | null /* ptr */,
  pAuthnLevel: Deno.PointerValue | Uint8Array | null /* ptr */,
  pImpLevel: Deno.PointerValue | Uint8Array | null /* ptr */,
  pPrivs: Deno.PointerValue | Uint8Array | null /* ptr */,
  pCapabilities: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoQueryClientBlanket(util.toPointer(pAuthnSvc), util.toPointer(pAuthzSvc), util.toPointer(pServerPrincName), util.toPointer(pAuthnLevel), util.toPointer(pImpLevel), util.toPointer(pPrivs), util.toPointer(pCapabilities)));
}

export function CoImpersonateClient(): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoImpersonateClient());
}

export function CoRevertToSelf(): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoRevertToSelf());
}

export function CoQueryAuthenticationServices(
  pcAuthSvc: Deno.PointerValue | Uint8Array | null /* ptr */,
  asAuthSvc: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoQueryAuthenticationServices(util.toPointer(pcAuthSvc), util.toPointer(asAuthSvc)));
}

export function CoSwitchCallContext(
  pNewObject: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  ppOldObject: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoSwitchCallContext(util.toPointer(pNewObject), util.toPointer(ppOldObject)));
}

export function CoCreateInstance(
  rclsid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pUnkOuter: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  dwClsContext: CLSCTX /* Windows.Win32.System.Com.CLSCTX */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppv: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoCreateInstance(util.toPointer(rclsid), util.toPointer(pUnkOuter), dwClsContext, util.toPointer(riid), util.toPointer(ppv)));
}

export function CoCreateInstanceEx(
  Clsid: Deno.PointerValue | Uint8Array | null /* ptr */,
  punkOuter: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  dwClsCtx: CLSCTX /* Windows.Win32.System.Com.CLSCTX */,
  pServerInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwCount: number /* u32 */,
  pResults: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoCreateInstanceEx(util.toPointer(Clsid), util.toPointer(punkOuter), dwClsCtx, util.toPointer(pServerInfo), dwCount, util.toPointer(pResults)));
}

export function CoCreateInstanceFromApp(
  Clsid: Deno.PointerValue | Uint8Array | null /* ptr */,
  punkOuter: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  dwClsCtx: CLSCTX /* Windows.Win32.System.Com.CLSCTX */,
  reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwCount: number /* u32 */,
  pResults: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoCreateInstanceFromApp(util.toPointer(Clsid), util.toPointer(punkOuter), dwClsCtx, util.toPointer(reserved), dwCount, util.toPointer(pResults)));
}

export function CoRegisterActivationFilter(
  pActivationFilter: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IActivationFilter */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoRegisterActivationFilter(util.toPointer(pActivationFilter)));
}

export function CoGetCancelObject(
  dwThreadId: number /* u32 */,
  iid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppUnk: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoGetCancelObject(dwThreadId, util.toPointer(iid), util.toPointer(ppUnk)));
}

export function CoSetCancelObject(
  pUnk: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoSetCancelObject(util.toPointer(pUnk)));
}

export function CoCancelCall(
  dwThreadId: number /* u32 */,
  ulTimeout: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoCancelCall(dwThreadId, ulTimeout));
}

export function CoTestCancel(): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoTestCancel());
}

export function CoEnableCallCancellation(
  pReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoEnableCallCancellation(util.toPointer(pReserved)));
}

export function CoDisableCallCancellation(
  pReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoDisableCallCancellation(util.toPointer(pReserved)));
}

export function StringFromCLSID(
  rclsid: Deno.PointerValue | Uint8Array | null /* ptr */,
  lplpsz: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.StringFromCLSID(util.toPointer(rclsid), util.toPointer(lplpsz)));
}

export function CLSIDFromString(
  lpsz: string | null /* Windows.Win32.Foundation.PWSTR */,
  pclsid: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CLSIDFromString(util.pwstrToFfi(lpsz), util.toPointer(pclsid)));
}

export function StringFromIID(
  rclsid: Deno.PointerValue | Uint8Array | null /* ptr */,
  lplpsz: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.StringFromIID(util.toPointer(rclsid), util.toPointer(lplpsz)));
}

export function IIDFromString(
  lpsz: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpiid: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.IIDFromString(util.pwstrToFfi(lpsz), util.toPointer(lpiid)));
}

export function ProgIDFromCLSID(
  clsid: Deno.PointerValue | Uint8Array | null /* ptr */,
  lplpszProgID: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.ProgIDFromCLSID(util.toPointer(clsid), util.toPointer(lplpszProgID)));
}

export function CLSIDFromProgID(
  lpszProgID: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpclsid: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CLSIDFromProgID(util.pwstrToFfi(lpszProgID), util.toPointer(lpclsid)));
}

export function StringFromGUID2(
  rguid: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpsz: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchMax: number /* i32 */,
): number /* i32 */ {
  return libOLE32.StringFromGUID2(util.toPointer(rguid), util.pwstrToFfi(lpsz), cchMax);
}

export function CoCreateGuid(
  pguid: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoCreateGuid(util.toPointer(pguid)));
}

export function CoWaitForMultipleHandles(
  dwFlags: number /* u32 */,
  dwTimeout: number /* u32 */,
  cHandles: number /* u32 */,
  pHandles: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwindex: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoWaitForMultipleHandles(dwFlags, dwTimeout, cHandles, util.toPointer(pHandles), util.toPointer(lpdwindex)));
}

export function CoWaitForMultipleObjects(
  dwFlags: number /* u32 */,
  dwTimeout: number /* u32 */,
  cHandles: number /* u32 */,
  pHandles: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwindex: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoWaitForMultipleObjects(dwFlags, dwTimeout, cHandles, util.toPointer(pHandles), util.toPointer(lpdwindex)));
}

export function CoGetTreatAsClass(
  clsidOld: Deno.PointerValue | Uint8Array | null /* ptr */,
  pClsidNew: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoGetTreatAsClass(util.toPointer(clsidOld), util.toPointer(pClsidNew)));
}

export function CoInvalidateRemoteMachineBindings(
  pszMachineName: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoInvalidateRemoteMachineBindings(util.pwstrToFfi(pszMachineName)));
}

export function CoTaskMemAlloc(
  cb: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.CoTaskMemAlloc(cb));
}

export function CoTaskMemRealloc(
  pv: Deno.PointerValue | Uint8Array | null /* ptr */,
  cb: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.CoTaskMemRealloc(util.toPointer(pv), cb));
}

export function CoTaskMemFree(
  pv: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOLE32.CoTaskMemFree(util.toPointer(pv));
}

export function CoRegisterDeviceCatalog(
  deviceInstanceId: string | null /* Windows.Win32.Foundation.PWSTR */,
  cookie: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoRegisterDeviceCatalog(util.pwstrToFfi(deviceInstanceId), util.toPointer(cookie)));
}

export function CoRevokeDeviceCatalog(
  cookie: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.CO_DEVICE_CATALOG_COOKIE */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CoRevokeDeviceCatalog(util.toPointer(cookie)));
}

export function CreateUri(
  pwzURI: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: URI_CREATE_FLAGS /* Windows.Win32.System.Com.URI_CREATE_FLAGS */,
  dwReserved: Deno.PointerValue /* usize */,
  ppURI: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libURLMON.CreateUri(util.pwstrToFfi(pwzURI), dwFlags, dwReserved, util.toPointer(ppURI)));
}

export function CreateUriWithFragment(
  pwzURI: string | null /* Windows.Win32.Foundation.PWSTR */,
  pwzFragment: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  dwReserved: Deno.PointerValue /* usize */,
  ppURI: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libURLMON.CreateUriWithFragment(util.pwstrToFfi(pwzURI), util.pwstrToFfi(pwzFragment), dwFlags, dwReserved, util.toPointer(ppURI)));
}

export function CreateUriFromMultiByteString(
  pszANSIInputUri: string | null /* Windows.Win32.Foundation.PSTR */,
  dwEncodingFlags: number /* u32 */,
  dwCodePage: number /* u32 */,
  dwCreateFlags: number /* u32 */,
  dwReserved: Deno.PointerValue /* usize */,
  ppUri: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(liburlmon.CreateUriFromMultiByteString(util.pstrToFfi(pszANSIInputUri), dwEncodingFlags, dwCodePage, dwCreateFlags, dwReserved, util.toPointer(ppUri)));
}

export function CreateIUriBuilder(
  pIUri: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUri */,
  dwFlags: number /* u32 */,
  dwReserved: Deno.PointerValue /* usize */,
  ppIUriBuilder: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libURLMON.CreateIUriBuilder(util.toPointer(pIUri), dwFlags, dwReserved, util.toPointer(ppIUriBuilder)));
}

export function SetErrorInfo(
  dwReserved: number /* u32 */,
  perrinfo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IErrorInfo */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.SetErrorInfo(dwReserved, util.toPointer(perrinfo)));
}

export function GetErrorInfo(
  dwReserved: number /* u32 */,
  pperrinfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.GetErrorInfo(dwReserved, util.toPointer(pperrinfo)));
}

