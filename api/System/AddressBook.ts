/// Auto-generated by Deno Win32: Windows.Win32.System.AddressBook.Apis

import * as util from "../../util.ts";

// Enums
export type Gender = number;

// Constants
export const PROP_ID_SECURE_MIN = 26608;
export const PROP_ID_SECURE_MAX = 26623;
export const MAPI_DIM = 1;
export const fMapiUnicode = 0;
export const hrSuccess = 0;
export const MAPI_P1 = 268435456;
export const MAPI_SUBMITTED = 2147483648;
export const MAPI_SHORTTERM = 128;
export const MAPI_NOTRECIP = 64;
export const MAPI_THISSESSION = 32;
export const MAPI_NOW = 16;
export const MAPI_NOTRESERVED = 8;
export const MAPI_COMPOUND = 128;
export const cchProfileNameMax = 64;
export const cchProfilePassMax = 64;
export const MV_FLAG = 4096;
export const PROP_ID_NULL = 0;
export const PROP_ID_INVALID = 65535;
export const MV_INSTANCE = 8192;
export const TABLE_CHANGED = 1;
export const TABLE_ERROR = 2;
export const TABLE_ROW_ADDED = 3;
export const TABLE_ROW_DELETED = 4;
export const TABLE_ROW_MODIFIED = 5;
export const TABLE_SORT_DONE = 6;
export const TABLE_RESTRICT_DONE = 7;
export const TABLE_SETCOL_DONE = 8;
export const TABLE_RELOAD = 9;
export const szMAPINotificationMsg = "MAPI Notify window message";
export const MAPI_ERROR_VERSION = 0;
export const MAPI_USE_DEFAULT = 64;
export const MNID_ID = 0;
export const MNID_STRING = 1;
export const WAB_LOCAL_CONTAINERS = 1048576;
export const WAB_PROFILE_CONTENTS = 2097152;
export const WAB_IGNORE_PROFILES = 8388608;
export const MAPI_ONE_OFF_NO_RICH_INFO = 1;
export const UI_SERVICE = 2;
export const SERVICE_UI_ALWAYS = 2;
export const SERVICE_UI_ALLOWED = 16;
export const UI_CURRENT_PROVIDER_FIRST = 4;
export const WABOBJECT_LDAPURL_RETURN_MAILUSER = 1;
export const WABOBJECT_ME_NEW = 1;
export const WABOBJECT_ME_NOCREATE = 2;
export const WAB_VCARD_FILE = 0;
export const WAB_VCARD_STREAM = 1;
export const WAB_USE_OE_SENDMAIL = 1;
export const WAB_ENABLE_PROFILES = 4194304;
export const WAB_DISPLAY_LDAPURL = 1;
export const WAB_CONTEXT_ADRLIST = 2;
export const WAB_DISPLAY_ISNTDS = 4;
export const WAB_DLL_NAME = "WAB32.DLL";
export const WAB_DLL_PATH_KEY = "Software\Microsoft\WAB\DLLPath";
export const E_IMAPI_REQUEST_CANCELLED = 12249794305394868226n;
export const E_IMAPI_RECORDER_REQUIRED = 12249795404906496003n;
export const S_IMAPI_SPEEDADJUSTED = 12249796501196898308n;
export const S_IMAPI_ROTATIONADJUSTED = 12249797600708526085n;
export const S_IMAPI_BOTHADJUSTED = 12249798700220153862n;
export const E_IMAPI_BURN_VERIFICATION_FAILED = 12250353956813406215n;
export const S_IMAPI_COMMAND_HAS_SENSE_DATA = 12250355053103809024n;
export const E_IMAPI_RECORDER_NO_SUCH_MODE_PAGE = 12250356155836662273n;
export const E_IMAPI_RECORDER_MEDIA_NO_MEDIA = 12250357255348290050n;
export const E_IMAPI_RECORDER_MEDIA_INCOMPATIBLE = 12250358354859917827n;
export const E_IMAPI_RECORDER_MEDIA_UPSIDE_DOWN = 12250359454371545604n;
export const E_IMAPI_RECORDER_MEDIA_BECOMING_READY = 12250360553883173381n;
export const E_IMAPI_RECORDER_MEDIA_FORMAT_IN_PROGRESS = 12250361653394801158n;
export const E_IMAPI_RECORDER_MEDIA_BUSY = 12250362752906428935n;
export const E_IMAPI_RECORDER_INVALID_MODE_PARAMETERS = 12250363852418056712n;
export const E_IMAPI_RECORDER_MEDIA_WRITE_PROTECTED = 12250364951929684489n;
export const E_IMAPI_RECORDER_NO_SUCH_FEATURE = 12250366051441312266n;
export const E_IMAPI_RECORDER_FEATURE_IS_NOT_CURRENT = 12250367150952940043n;
export const E_IMAPI_RECORDER_GET_CONFIGURATION_NOT_SUPPORTED = 12250368250464567820n;
export const E_IMAPI_RECORDER_COMMAND_TIMEOUT = 12250369349976195597n;
export const E_IMAPI_RECORDER_DVD_STRUCTURE_NOT_PRESENT = 12250370449487823374n;
export const E_IMAPI_RECORDER_MEDIA_SPEED_MISMATCH = 12250371548999451151n;
export const E_IMAPI_RECORDER_LOCKED = 12250372648511078928n;
export const E_IMAPI_RECORDER_CLIENT_NAME_IS_NOT_VALID = 12250373748022706705n;
export const E_IMAPI_RECORDER_MEDIA_NOT_FORMATTED = 12250634332278489618n;
export const E_IMAPI_RECORDER_INVALID_RESPONSE_FROM_DEVICE = 12250635431790117631n;
export const E_IMAPI_LOSS_OF_STREAMING = 12250636531301745408n;
export const E_IMAPI_UNEXPECTED_RESPONSE_FROM_DEVICE = 12250637630813373185n;
export const S_IMAPI_WRITE_NOT_IN_PROGRESS = 12250916903545602818n;
export const E_IMAPI_DF2DATA_WRITE_IN_PROGRESS = 12250918006278456320n;
export const E_IMAPI_DF2DATA_WRITE_NOT_IN_PROGRESS = 12250919105790084097n;
export const E_IMAPI_DF2DATA_INVALID_MEDIA_STATE = 12250920205301711874n;
export const E_IMAPI_DF2DATA_STREAM_NOT_SUPPORTED = 12250921304813339651n;
export const E_IMAPI_DF2DATA_STREAM_TOO_LARGE_FOR_CURRENT_MEDIA = 12250922404324967428n;
export const E_IMAPI_DF2DATA_MEDIA_NOT_BLANK = 12250923503836595205n;
export const E_IMAPI_DF2DATA_MEDIA_IS_NOT_SUPPORTED = 12250924603348222982n;
export const E_IMAPI_DF2DATA_RECORDER_NOT_SUPPORTED = 12250925702859850759n;
export const E_IMAPI_DF2DATA_CLIENT_NAME_IS_NOT_VALID = 12251198381743539208n;
export const E_IMAPI_DF2TAO_WRITE_IN_PROGRESS = 12251199481255167232n;
export const E_IMAPI_DF2TAO_WRITE_NOT_IN_PROGRESS = 12251200580766795009n;
export const E_IMAPI_DF2TAO_MEDIA_IS_NOT_PREPARED = 12251201680278422786n;
export const E_IMAPI_DF2TAO_MEDIA_IS_PREPARED = 12251202779790050563n;
export const E_IMAPI_DF2TAO_PROPERTY_FOR_BLANK_MEDIA_ONLY = 12251203879301678340n;
export const E_IMAPI_DF2TAO_TABLE_OF_CONTENTS_EMPTY_DISC = 12251204978813306117n;
export const E_IMAPI_DF2TAO_MEDIA_IS_NOT_BLANK = 12251206078324933894n;
export const E_IMAPI_DF2TAO_MEDIA_IS_NOT_SUPPORTED = 12251207177836561671n;
export const E_IMAPI_DF2TAO_TRACK_LIMIT_REACHED = 12251208277348189448n;
export const E_IMAPI_DF2TAO_NOT_ENOUGH_SPACE = 12251209376859817225n;
export const E_IMAPI_DF2TAO_NO_RECORDER_SPECIFIED = 12251210476371445002n;
export const E_IMAPI_DF2TAO_INVALID_ISRC = 12251211575883072779n;
export const E_IMAPI_DF2TAO_INVALID_MCN = 12251212675394700556n;
export const E_IMAPI_DF2TAO_STREAM_NOT_SUPPORTED = 12251213774906328333n;
export const E_IMAPI_DF2TAO_RECORDER_NOT_SUPPORTED = 12251214874417956110n;
export const E_IMAPI_DF2TAO_CLIENT_NAME_IS_NOT_VALID = 12251479856720250127n;
export const E_IMAPI_DF2RAW_WRITE_IN_PROGRESS = 12251480956231878144n;
export const E_IMAPI_DF2RAW_WRITE_NOT_IN_PROGRESS = 12251482055743505921n;
export const E_IMAPI_DF2RAW_MEDIA_IS_NOT_PREPARED = 12251483155255133698n;
export const E_IMAPI_DF2RAW_MEDIA_IS_PREPARED = 12251484254766761475n;
export const E_IMAPI_DF2RAW_CLIENT_NAME_IS_NOT_VALID = 12251486453790017028n;
export const E_IMAPI_DF2RAW_MEDIA_IS_NOT_BLANK = 12251487553301644806n;
export const E_IMAPI_DF2RAW_MEDIA_IS_NOT_SUPPORTED = 12251489752324900359n;
export const E_IMAPI_DF2RAW_NOT_ENOUGH_SPACE = 12251490851836528137n;
export const E_IMAPI_DF2RAW_NO_RECORDER_SPECIFIED = 12251494150371411466n;
export const E_IMAPI_DF2RAW_STREAM_NOT_SUPPORTED = 12251495249883039245n;
export const E_IMAPI_DF2RAW_DATA_BLOCK_TYPE_NOT_SUPPORTED = 12251496349394667022n;
export const E_IMAPI_DF2RAW_STREAM_LEADIN_TOO_SHORT = 12251497448906294799n;
export const E_IMAPI_DF2RAW_RECORDER_NOT_SUPPORTED = 12252324281650382352n;
export const E_IMAPI_ERASE_RECORDER_IN_USE = 12252325380088269056n;
export const E_IMAPI_ERASE_ONLY_ONE_RECORDER_SUPPORTED = 12252326479599896833n;
export const E_IMAPI_ERASE_DISC_INFORMATION_TOO_SMALL = 12252327579111524610n;
export const E_IMAPI_ERASE_MODE_PAGE_2A_TOO_SMALL = 12252328678623152387n;
export const E_IMAPI_ERASE_MEDIA_IS_NOT_ERASABLE = 12252329778134780164n;
export const E_IMAPI_ERASE_DRIVE_FAILED_ERASE_COMMAND = 12252330877646407941n;
export const E_IMAPI_ERASE_TOOK_LONGER_THAN_ONE_HOUR = 12252331977158035718n;
export const E_IMAPI_ERASE_UNEXPECTED_DRIVE_RESPONSE_DURING_ERASE = 12252333076669663495n;
export const E_IMAPI_ERASE_DRIVE_FAILED_SPINUP_COMMAND = 12252334176181291272n;
export const E_IMAPI_ERASE_MEDIA_IS_NOT_SUPPORTED = 12252335276766660873n;
export const E_IMAPI_ERASE_RECORDER_NOT_SUPPORTED = 12252336376278288650n;
export const E_IMAPI_ERASE_CLIENT_NAME_IS_NOT_VALID = 12252605756627093771n;
export const E_IMAPI_RAW_IMAGE_IS_READ_ONLY = 12252606855064979968n;
export const E_IMAPI_RAW_IMAGE_TOO_MANY_TRACKS = 12252607954576607745n;
export const E_IMAPI_RAW_IMAGE_SECTOR_TYPE_NOT_SUPPORTED = 12252609054088235522n;
export const E_IMAPI_RAW_IMAGE_NO_TRACKS = 12252610153599863299n;
export const E_IMAPI_RAW_IMAGE_TRACKS_ALREADY_ADDED = 12252611253111491076n;
export const E_IMAPI_RAW_IMAGE_INSUFFICIENT_SPACE = 12252612352623118853n;
export const E_IMAPI_RAW_IMAGE_TOO_MANY_TRACK_INDEXES = 12252613452134746630n;
export const E_IMAPI_RAW_IMAGE_TRACK_INDEX_NOT_FOUND = 12252614551646374407n;
export const S_IMAPI_RAW_IMAGE_TRACK_INDEX_ALREADY_EXISTS = 12252615649010518536n;
export const E_IMAPI_RAW_IMAGE_TRACK_INDEX_OFFSET_ZERO_CANNOT_BE_CLEARED = 12252616750669629961n;
export const E_IMAPI_RAW_IMAGE_TRACK_INDEX_TOO_CLOSE_TO_OTHER_INDEX = 12299612076664031754n;
export const FACILITY_IMAPI2 = 170;
export const IMAPI_E_FSI_INTERNAL_ERROR = 12299613177249444096n;
export const IMAPI_E_INVALID_PARAM = 12299614276761071873n;
export const IMAPI_E_READONLY = 12299615376272699650n;
export const IMAPI_E_NO_OUTPUT = 12299616475784327427n;
export const IMAPI_E_INVALID_VOLUME_NAME = 12299617575295955204n;
export const IMAPI_E_INVALID_DATE = 12299618674807582981n;
export const IMAPI_E_FILE_SYSTEM_NOT_EMPTY = 12299620873830838534n;
export const IMAPI_E_NOT_FILE = 12299621973342466312n;
export const IMAPI_E_NOT_DIR = 12299623072854094089n;
export const IMAPI_E_DIR_NOT_EMPTY = 12299624172365721866n;
export const IMAPI_E_NOT_IN_FILE_SYSTEM = 12299629669923860747n;
export const IMAPI_E_INVALID_PATH = 12299630769435488528n;
export const IMAPI_E_RESTRICTED_NAME_VIOLATION = 12299631868947116305n;
export const IMAPI_E_DUP_NAME = 12299632968458744082n;
export const IMAPI_E_NO_UNIQUE_NAME = 12299638466016882963n;
export const IMAPI_E_ITEM_NOT_FOUND = 12299639565528510744n;
export const IMAPI_E_FILE_NOT_FOUND = 12299640665040138521n;
export const IMAPI_E_DIR_NOT_FOUND = 12299647262109905178n;
export const IMAPI_E_IMAGE_SIZE_LIMIT = 12299648361621532960n;
export const IMAPI_E_IMAGE_TOO_BIG = 12299656058202927393n;
export const IMAPI_E_DATA_STREAM_INCONSISTENCY = 12299657157714555176n;
export const IMAPI_E_DATA_STREAM_READ_FAILURE = 12299658257226182953n;
export const IMAPI_E_DATA_STREAM_CREATE_FAILURE = 12299659356737810730n;
export const IMAPI_E_DIRECTORY_READ_FAILURE = 12299664854295949611n;
export const IMAPI_E_TOO_MANY_DIRS = 12299665953807577392n;
export const IMAPI_E_ISO9660_LEVELS = 12299667053319205169n;
export const IMAPI_E_DATA_TOO_BIG = 12299668152830832946n;
export const IMAPI_E_INCOMPATIBLE_PREVIOUS_SESSION = 12299673650388971827n;
export const IMAPI_E_STASHFILE_OPEN_FAILURE = 12299674749900599608n;
export const IMAPI_E_STASHFILE_SEEK_FAILURE = 12299675849412227385n;
export const IMAPI_E_STASHFILE_WRITE_FAILURE = 12299676948923855162n;
export const IMAPI_E_STASHFILE_READ_FAILURE = 12299682446481994043n;
export const IMAPI_E_INVALID_WORKING_DIRECTORY = 12299683545993621824n;
export const IMAPI_E_WORKING_DIRECTORY_SPACE = 12299684645505249601n;
export const IMAPI_E_STASHFILE_MOVE = 12299691242575016258n;
export const IMAPI_E_BOOT_IMAGE_DATA = 12299692342086644040n;
export const IMAPI_E_BOOT_OBJECT_CONFLICT = 12299693441598271817n;
export const IMAPI_E_BOOT_EMULATION_IMAGE_SIZE_MISMATCH = 12299700038668038474n;
export const IMAPI_E_EMPTY_DISC = 12299701138179666256n;
export const IMAPI_E_NO_SUPPORTED_FILE_SYSTEM = 12299702237691294033n;
export const IMAPI_E_FILE_SYSTEM_NOT_FOUND = 12299703337202921810n;
export const IMAPI_E_FILE_SYSTEM_READ_CONSISTENCY_ERROR = 12299704436714549587n;
export const IMAPI_E_FILE_SYSTEM_FEATURE_NOT_SUPPORTED = 12299705536226177364n;
export const IMAPI_E_IMPORT_TYPE_COLLISION_FILE_EXISTS_AS_DIRECTORY = 12299706635737805141n;
export const IMAPI_E_IMPORT_SEEK_FAILURE = 12299707735249432918n;
export const IMAPI_E_IMPORT_READ_FAILURE = 12299708834761060695n;
export const IMAPI_E_DISC_MISMATCH = 12299709934272688472n;
export const IMAPI_E_IMPORT_MEDIA_NOT_ALLOWED = 12299711033784316249n;
export const IMAPI_E_UDF_NOT_WRITE_COMPATIBLE = 12299712133295944026n;
export const IMAPI_E_INCOMPATIBLE_MULTISESSION_TYPE = 12299713232807571803n;
export const IMAPI_E_NO_COMPATIBLE_MULTISESSION_TYPE = 12299714332319199580n;
export const IMAPI_E_MULTISESSION_NOT_SET = 12299715431830827357n;
export const IMAPI_E_IMPORT_TYPE_COLLISION_DIRECTORY_EXISTS_AS_FILE = 12299716531342455134n;
export const IMAPI_S_IMAGE_FEATURE_NOT_SUPPORTED = 12299717627632857439n;
export const IMAPI_E_PROPERTY_NOT_ACCESSIBLE = 12299718730365710688n;
export const IMAPI_E_UDF_REVISION_CHANGE_NOT_ALLOWED = 12299719829877338465n;
export const IMAPI_E_BAD_MULTISESSION_PARAMETER = 12299720929388966242n;
export const IMAPI_E_FILE_SYSTEM_CHANGE_NOT_ALLOWED = 12299893552714527075n;
export const IMAPI_E_IMAGEMANAGER_IMAGE_NOT_ALIGNED = 12299894652226155008n;
export const IMAPI_E_IMAGEMANAGER_NO_VALID_VD_FOUND = 12299895751737782785n;
export const IMAPI_E_IMAGEMANAGER_NO_IMAGE = 12299896851249410562n;
export const IMAPI_E_IMAGEMANAGER_IMAGE_TOO_BIG = 8070537534337888771n;
export const MAPI_E_CALL_FAILED = "-2147467259";
export const MAPI_E_NOT_ENOUGH_MEMORY = "-2147024882";
export const MAPI_E_INVALID_PARAMETER = "-2147024809";
export const MAPI_E_INTERFACE_NOT_SUPPORTED = "-2147467262";
export const MAPI_E_NO_ACCESS = "-2147024891";
export const TAD_ALL_ROWS = 1;
export const PRILOWEST = "-32768";
export const PRIHIGHEST = 32767;
export const PRIUSER = 0;
export const OPENSTREAMONFILE = "OpenStreamOnFile";
export const szHrDispatchNotifications = "HrDispatchNotifications";
export const szScCreateConversationIndex = "ScCreateConversationIndex";
export const genderUnspecified = 0;
export const genderFemale = 1;
export const genderMale = 2;

// Structs

/**
 * Windows.Win32.System.AddressBook.ENTRYID (size: 16)
 */
export interface ENTRYID {
  /** array */
  abFlags: Deno.PointerValue | null;
  /** array */
  ab: Deno.PointerValue | null;
}

export const sizeofENTRYID = 16;

export function allocENTRYID(data?: Partial<ENTRYID>): Uint8Array {
  const buf = new Uint8Array(sizeofENTRYID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.abFlags !== undefined) view.setBigUint64(0, data.abFlags === null ? 0n : BigInt(util.toPointer(data.abFlags)), true);
  // 0x08: pointer
  if (data?.ab !== undefined) view.setBigUint64(8, data.ab === null ? 0n : BigInt(util.toPointer(data.ab)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.MAPIUID (size: 8)
 */
export interface MAPIUID {
  /** array */
  ab: Deno.PointerValue | null;
}

export const sizeofMAPIUID = 8;

export function allocMAPIUID(data?: Partial<MAPIUID>): Uint8Array {
  const buf = new Uint8Array(sizeofMAPIUID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ab !== undefined) view.setBigUint64(0, data.ab === null ? 0n : BigInt(util.toPointer(data.ab)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.SPropTagArray (size: 16)
 */
export interface SPropTagArray {
  /** u32 */
  cValues: number;
  /** array */
  aulPropTag: Deno.PointerValue | null;
}

export const sizeofSPropTagArray = 16;

export function allocSPropTagArray(data?: Partial<SPropTagArray>): Uint8Array {
  const buf = new Uint8Array(sizeofSPropTagArray);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cValues !== undefined) view.setUint32(0, Number(data.cValues), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.aulPropTag !== undefined) view.setBigUint64(8, data.aulPropTag === null ? 0n : BigInt(util.toPointer(data.aulPropTag)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.SBinary (size: 16)
 */
export interface SBinary {
  /** u32 */
  cb: number;
  /** ptr */
  lpb: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSBinary = 16;

export function allocSBinary(data?: Partial<SBinary>): Uint8Array {
  const buf = new Uint8Array(sizeofSBinary);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cb !== undefined) view.setUint32(0, Number(data.cb), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpb !== undefined) view.setBigUint64(8, data.lpb === null ? 0n : BigInt(util.toPointer(data.lpb)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.SShortArray (size: 16)
 */
export interface SShortArray {
  /** u32 */
  cValues: number;
  /** ptr */
  lpi: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSShortArray = 16;

export function allocSShortArray(data?: Partial<SShortArray>): Uint8Array {
  const buf = new Uint8Array(sizeofSShortArray);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cValues !== undefined) view.setUint32(0, Number(data.cValues), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpi !== undefined) view.setBigUint64(8, data.lpi === null ? 0n : BigInt(util.toPointer(data.lpi)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.SGuidArray (size: 16)
 */
export interface SGuidArray {
  /** u32 */
  cValues: number;
  /** ptr */
  lpguid: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSGuidArray = 16;

export function allocSGuidArray(data?: Partial<SGuidArray>): Uint8Array {
  const buf = new Uint8Array(sizeofSGuidArray);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cValues !== undefined) view.setUint32(0, Number(data.cValues), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpguid !== undefined) view.setBigUint64(8, data.lpguid === null ? 0n : BigInt(util.toPointer(data.lpguid)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.SRealArray (size: 16)
 */
export interface SRealArray {
  /** u32 */
  cValues: number;
  /** ptr */
  lpflt: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSRealArray = 16;

export function allocSRealArray(data?: Partial<SRealArray>): Uint8Array {
  const buf = new Uint8Array(sizeofSRealArray);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cValues !== undefined) view.setUint32(0, Number(data.cValues), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpflt !== undefined) view.setBigUint64(8, data.lpflt === null ? 0n : BigInt(util.toPointer(data.lpflt)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.SLongArray (size: 16)
 */
export interface SLongArray {
  /** u32 */
  cValues: number;
  /** ptr */
  lpl: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSLongArray = 16;

export function allocSLongArray(data?: Partial<SLongArray>): Uint8Array {
  const buf = new Uint8Array(sizeofSLongArray);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cValues !== undefined) view.setUint32(0, Number(data.cValues), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpl !== undefined) view.setBigUint64(8, data.lpl === null ? 0n : BigInt(util.toPointer(data.lpl)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.SLargeIntegerArray (size: 16)
 */
export interface SLargeIntegerArray {
  /** u32 */
  cValues: number;
  /** ptr */
  lpli: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSLargeIntegerArray = 16;

export function allocSLargeIntegerArray(data?: Partial<SLargeIntegerArray>): Uint8Array {
  const buf = new Uint8Array(sizeofSLargeIntegerArray);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cValues !== undefined) view.setUint32(0, Number(data.cValues), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpli !== undefined) view.setBigUint64(8, data.lpli === null ? 0n : BigInt(util.toPointer(data.lpli)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.SDateTimeArray (size: 16)
 */
export interface SDateTimeArray {
  /** u32 */
  cValues: number;
  /** ptr */
  lpft: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSDateTimeArray = 16;

export function allocSDateTimeArray(data?: Partial<SDateTimeArray>): Uint8Array {
  const buf = new Uint8Array(sizeofSDateTimeArray);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cValues !== undefined) view.setUint32(0, Number(data.cValues), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpft !== undefined) view.setBigUint64(8, data.lpft === null ? 0n : BigInt(util.toPointer(data.lpft)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.SAppTimeArray (size: 16)
 */
export interface SAppTimeArray {
  /** u32 */
  cValues: number;
  /** ptr */
  lpat: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSAppTimeArray = 16;

export function allocSAppTimeArray(data?: Partial<SAppTimeArray>): Uint8Array {
  const buf = new Uint8Array(sizeofSAppTimeArray);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cValues !== undefined) view.setUint32(0, Number(data.cValues), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpat !== undefined) view.setBigUint64(8, data.lpat === null ? 0n : BigInt(util.toPointer(data.lpat)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.SCurrencyArray (size: 16)
 */
export interface SCurrencyArray {
  /** u32 */
  cValues: number;
  /** ptr */
  lpcur: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSCurrencyArray = 16;

export function allocSCurrencyArray(data?: Partial<SCurrencyArray>): Uint8Array {
  const buf = new Uint8Array(sizeofSCurrencyArray);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cValues !== undefined) view.setUint32(0, Number(data.cValues), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpcur !== undefined) view.setBigUint64(8, data.lpcur === null ? 0n : BigInt(util.toPointer(data.lpcur)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.SBinaryArray (size: 16)
 */
export interface SBinaryArray {
  /** u32 */
  cValues: number;
  /** ptr */
  lpbin: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSBinaryArray = 16;

export function allocSBinaryArray(data?: Partial<SBinaryArray>): Uint8Array {
  const buf = new Uint8Array(sizeofSBinaryArray);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cValues !== undefined) view.setUint32(0, Number(data.cValues), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpbin !== undefined) view.setBigUint64(8, data.lpbin === null ? 0n : BigInt(util.toPointer(data.lpbin)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.SDoubleArray (size: 16)
 */
export interface SDoubleArray {
  /** u32 */
  cValues: number;
  /** ptr */
  lpdbl: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSDoubleArray = 16;

export function allocSDoubleArray(data?: Partial<SDoubleArray>): Uint8Array {
  const buf = new Uint8Array(sizeofSDoubleArray);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cValues !== undefined) view.setUint32(0, Number(data.cValues), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpdbl !== undefined) view.setBigUint64(8, data.lpdbl === null ? 0n : BigInt(util.toPointer(data.lpdbl)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.SWStringArray (size: 16)
 */
export interface SWStringArray {
  /** u32 */
  cValues: number;
  /** ptr */
  lppszW: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSWStringArray = 16;

export function allocSWStringArray(data?: Partial<SWStringArray>): Uint8Array {
  const buf = new Uint8Array(sizeofSWStringArray);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cValues !== undefined) view.setUint32(0, Number(data.cValues), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lppszW !== undefined) view.setBigUint64(8, data.lppszW === null ? 0n : BigInt(util.toPointer(data.lppszW)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.SLPSTRArray (size: 16)
 */
export interface SLPSTRArray {
  /** u32 */
  cValues: number;
  /** ptr */
  lppszA: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSLPSTRArray = 16;

export function allocSLPSTRArray(data?: Partial<SLPSTRArray>): Uint8Array {
  const buf = new Uint8Array(sizeofSLPSTRArray);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cValues !== undefined) view.setUint32(0, Number(data.cValues), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lppszA !== undefined) view.setBigUint64(8, data.lppszA === null ? 0n : BigInt(util.toPointer(data.lppszA)), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.CY (size: 16)
 */
export interface CY {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  int64: Deno.PointerValue;
}

export const sizeofCY = 16;

export function allocCY(data?: Partial<CY>): Uint8Array {
  const buf = new Uint8Array(sizeofCY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: i64
  if (data?.int64 !== undefined) view.setBigInt64(8, BigInt(data.int64), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.FILETIME (size: 8)
 */
export interface FILETIME {
  /** u32 */
  dwLowDateTime: number;
  /** u32 */
  dwHighDateTime: number;
}

export const sizeofFILETIME = 8;

export function allocFILETIME(data?: Partial<FILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofFILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowDateTime !== undefined) view.setUint32(0, Number(data.dwLowDateTime), true);
  // 0x04: u32
  if (data?.dwHighDateTime !== undefined) view.setUint32(4, Number(data.dwHighDateTime), true);
  return buf;
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Foundation.LARGE_INTEGER (size: 24)
 */
export interface LARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  QuadPart: Deno.PointerValue;
}

export const sizeofLARGE_INTEGER = 24;

export function allocLARGE_INTEGER(data?: Partial<LARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofLARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  // 0x10: i64
  if (data?.QuadPart !== undefined) view.setBigInt64(16, BigInt(data.QuadPart), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.__UPV (size: 200)
 */
export interface __UPV {
  /** i16 */
  i: number;
  /** i32 */
  l: number;
  /** u32 */
  ul: number;
  /** f32 */
  flt: number;
  /** f64 */
  dbl: number;
  /** u16 */
  b: number;
  /** Windows.Win32.System.Com.CY */
  cur: Uint8Array | Deno.PointerValue | null;
  /** f64 */
  at: number;
  /** Windows.Win32.Foundation.FILETIME */
  ft: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  lpszA: string | null;
  /** Windows.Win32.System.AddressBook.SBinary */
  bin: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpszW: string | null;
  /** ptr */
  lpguid: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  li: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.AddressBook.SShortArray */
  MVi: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.AddressBook.SLongArray */
  MVl: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.AddressBook.SRealArray */
  MVflt: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.AddressBook.SDoubleArray */
  MVdbl: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.AddressBook.SCurrencyArray */
  MVcur: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.AddressBook.SAppTimeArray */
  MVat: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.AddressBook.SDateTimeArray */
  MVft: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.AddressBook.SBinaryArray */
  MVbin: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.AddressBook.SLPSTRArray */
  MVszA: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.AddressBook.SWStringArray */
  MVszW: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.AddressBook.SGuidArray */
  MVguid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.AddressBook.SLargeIntegerArray */
  MVli: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  err: number;
  /** i32 */
  x: number;
}

export const sizeof__UPV = 200;

export function alloc__UPV(data?: Partial<__UPV>): Uint8Array {
  const buf = new Uint8Array(sizeof__UPV);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.i !== undefined) view.setInt16(0, Number(data.i), true);
  // 0x02: i32
  if (data?.l !== undefined) view.setInt32(2, Number(data.l), true);
  // 0x06: u32
  if (data?.ul !== undefined) view.setUint32(6, Number(data.ul), true);
  // 0x0a: f32
  if (data?.flt !== undefined) view.setFloat32(10, Number(data.flt), true);
  // 0x0e: pad2
  // 0x10: f64
  if (data?.dbl !== undefined) view.setFloat64(16, Number(data.dbl), true);
  // 0x18: u16
  if (data?.b !== undefined) view.setUint16(24, Number(data.b), true);
  // 0x1a: pad6
  // 0x20: pointer
  if (data?.cur !== undefined) view.setBigUint64(32, data.cur === null ? 0n : BigInt(util.toPointer(data.cur)), true);
  // 0x28: f64
  if (data?.at !== undefined) view.setFloat64(40, Number(data.at), true);
  // 0x30: pointer
  if (data?.ft !== undefined) view.setBigUint64(48, data.ft === null ? 0n : BigInt(util.toPointer(data.ft)), true);
  // 0x38: buffer
  if (data?.lpszA !== undefined) {
    (buf as any)._f56 = util.pstrToFfi(data.lpszA);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: pointer
  if (data?.bin !== undefined) view.setBigUint64(64, data.bin === null ? 0n : BigInt(util.toPointer(data.bin)), true);
  // 0x48: buffer
  if (data?.lpszW !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.lpszW);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: pointer
  if (data?.lpguid !== undefined) view.setBigUint64(80, data.lpguid === null ? 0n : BigInt(util.toPointer(data.lpguid)), true);
  // 0x58: pointer
  if (data?.li !== undefined) view.setBigUint64(88, data.li === null ? 0n : BigInt(util.toPointer(data.li)), true);
  // 0x60: pointer
  if (data?.MVi !== undefined) view.setBigUint64(96, data.MVi === null ? 0n : BigInt(util.toPointer(data.MVi)), true);
  // 0x68: pointer
  if (data?.MVl !== undefined) view.setBigUint64(104, data.MVl === null ? 0n : BigInt(util.toPointer(data.MVl)), true);
  // 0x70: pointer
  if (data?.MVflt !== undefined) view.setBigUint64(112, data.MVflt === null ? 0n : BigInt(util.toPointer(data.MVflt)), true);
  // 0x78: pointer
  if (data?.MVdbl !== undefined) view.setBigUint64(120, data.MVdbl === null ? 0n : BigInt(util.toPointer(data.MVdbl)), true);
  // 0x80: pointer
  if (data?.MVcur !== undefined) view.setBigUint64(128, data.MVcur === null ? 0n : BigInt(util.toPointer(data.MVcur)), true);
  // 0x88: pointer
  if (data?.MVat !== undefined) view.setBigUint64(136, data.MVat === null ? 0n : BigInt(util.toPointer(data.MVat)), true);
  // 0x90: pointer
  if (data?.MVft !== undefined) view.setBigUint64(144, data.MVft === null ? 0n : BigInt(util.toPointer(data.MVft)), true);
  // 0x98: pointer
  if (data?.MVbin !== undefined) view.setBigUint64(152, data.MVbin === null ? 0n : BigInt(util.toPointer(data.MVbin)), true);
  // 0xa0: pointer
  if (data?.MVszA !== undefined) view.setBigUint64(160, data.MVszA === null ? 0n : BigInt(util.toPointer(data.MVszA)), true);
  // 0xa8: pointer
  if (data?.MVszW !== undefined) view.setBigUint64(168, data.MVszW === null ? 0n : BigInt(util.toPointer(data.MVszW)), true);
  // 0xb0: pointer
  if (data?.MVguid !== undefined) view.setBigUint64(176, data.MVguid === null ? 0n : BigInt(util.toPointer(data.MVguid)), true);
  // 0xb8: pointer
  if (data?.MVli !== undefined) view.setBigUint64(184, data.MVli === null ? 0n : BigInt(util.toPointer(data.MVli)), true);
  // 0xc0: i32
  if (data?.err !== undefined) view.setInt32(192, Number(data.err), true);
  // 0xc4: i32
  if (data?.x !== undefined) view.setInt32(196, Number(data.x), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.SPropValue (size: 16)
 */
export interface SPropValue {
  /** u32 */
  ulPropTag: number;
  /** u32 */
  dwAlignPad: number;
  /** Windows.Win32.System.AddressBook.__UPV */
  Value: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSPropValue = 16;

export function allocSPropValue(data?: Partial<SPropValue>): Uint8Array {
  const buf = new Uint8Array(sizeofSPropValue);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulPropTag !== undefined) view.setUint32(0, Number(data.ulPropTag), true);
  // 0x04: u32
  if (data?.dwAlignPad !== undefined) view.setUint32(4, Number(data.dwAlignPad), true);
  // 0x08: pointer
  if (data?.Value !== undefined) view.setBigUint64(8, data.Value === null ? 0n : BigInt(util.toPointer(data.Value)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.SPropProblem (size: 16)
 */
export interface SPropProblem {
  /** u32 */
  ulIndex: number;
  /** u32 */
  ulPropTag: number;
  /** i32 */
  scode: number;
}

export const sizeofSPropProblem = 16;

export function allocSPropProblem(data?: Partial<SPropProblem>): Uint8Array {
  const buf = new Uint8Array(sizeofSPropProblem);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulIndex !== undefined) view.setUint32(0, Number(data.ulIndex), true);
  // 0x04: u32
  if (data?.ulPropTag !== undefined) view.setUint32(4, Number(data.ulPropTag), true);
  // 0x08: i32
  if (data?.scode !== undefined) view.setInt32(8, Number(data.scode), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.SPropProblemArray (size: 16)
 */
export interface SPropProblemArray {
  /** u32 */
  cProblem: number;
  /** array */
  aProblem: Deno.PointerValue | null;
}

export const sizeofSPropProblemArray = 16;

export function allocSPropProblemArray(data?: Partial<SPropProblemArray>): Uint8Array {
  const buf = new Uint8Array(sizeofSPropProblemArray);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cProblem !== undefined) view.setUint32(0, Number(data.cProblem), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.aProblem !== undefined) view.setBigUint64(8, data.aProblem === null ? 0n : BigInt(util.toPointer(data.aProblem)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.FLATENTRY (size: 16)
 */
export interface FLATENTRY {
  /** u32 */
  cb: number;
  /** array */
  abEntry: Deno.PointerValue | null;
}

export const sizeofFLATENTRY = 16;

export function allocFLATENTRY(data?: Partial<FLATENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofFLATENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cb !== undefined) view.setUint32(0, Number(data.cb), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.abEntry !== undefined) view.setBigUint64(8, data.abEntry === null ? 0n : BigInt(util.toPointer(data.abEntry)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.FLATENTRYLIST (size: 16)
 */
export interface FLATENTRYLIST {
  /** u32 */
  cEntries: number;
  /** u32 */
  cbEntries: number;
  /** array */
  abEntries: Deno.PointerValue | null;
}

export const sizeofFLATENTRYLIST = 16;

export function allocFLATENTRYLIST(data?: Partial<FLATENTRYLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofFLATENTRYLIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cEntries !== undefined) view.setUint32(0, Number(data.cEntries), true);
  // 0x04: u32
  if (data?.cbEntries !== undefined) view.setUint32(4, Number(data.cbEntries), true);
  // 0x08: pointer
  if (data?.abEntries !== undefined) view.setBigUint64(8, data.abEntries === null ? 0n : BigInt(util.toPointer(data.abEntries)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.MTSID (size: 16)
 */
export interface MTSID {
  /** u32 */
  cb: number;
  /** array */
  ab: Deno.PointerValue | null;
}

export const sizeofMTSID = 16;

export function allocMTSID(data?: Partial<MTSID>): Uint8Array {
  const buf = new Uint8Array(sizeofMTSID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cb !== undefined) view.setUint32(0, Number(data.cb), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ab !== undefined) view.setBigUint64(8, data.ab === null ? 0n : BigInt(util.toPointer(data.ab)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.FLATMTSIDLIST (size: 16)
 */
export interface FLATMTSIDLIST {
  /** u32 */
  cMTSIDs: number;
  /** u32 */
  cbMTSIDs: number;
  /** array */
  abMTSIDs: Deno.PointerValue | null;
}

export const sizeofFLATMTSIDLIST = 16;

export function allocFLATMTSIDLIST(data?: Partial<FLATMTSIDLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofFLATMTSIDLIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cMTSIDs !== undefined) view.setUint32(0, Number(data.cMTSIDs), true);
  // 0x04: u32
  if (data?.cbMTSIDs !== undefined) view.setUint32(4, Number(data.cbMTSIDs), true);
  // 0x08: pointer
  if (data?.abMTSIDs !== undefined) view.setBigUint64(8, data.abMTSIDs === null ? 0n : BigInt(util.toPointer(data.abMTSIDs)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.ADRENTRY (size: 16)
 */
export interface ADRENTRY {
  /** u32 */
  ulReserved1: number;
  /** u32 */
  cValues: number;
  /** ptr */
  rgPropVals: Deno.PointerValue | Uint8Array | null;
}

export const sizeofADRENTRY = 16;

export function allocADRENTRY(data?: Partial<ADRENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofADRENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulReserved1 !== undefined) view.setUint32(0, Number(data.ulReserved1), true);
  // 0x04: u32
  if (data?.cValues !== undefined) view.setUint32(4, Number(data.cValues), true);
  // 0x08: pointer
  if (data?.rgPropVals !== undefined) view.setBigUint64(8, data.rgPropVals === null ? 0n : BigInt(util.toPointer(data.rgPropVals)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.ADRLIST (size: 16)
 */
export interface ADRLIST {
  /** u32 */
  cEntries: number;
  /** array */
  aEntries: Deno.PointerValue | null;
}

export const sizeofADRLIST = 16;

export function allocADRLIST(data?: Partial<ADRLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofADRLIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cEntries !== undefined) view.setUint32(0, Number(data.cEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.aEntries !== undefined) view.setBigUint64(8, data.aEntries === null ? 0n : BigInt(util.toPointer(data.aEntries)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.SRow (size: 16)
 */
export interface SRow {
  /** u32 */
  ulAdrEntryPad: number;
  /** u32 */
  cValues: number;
  /** ptr */
  lpProps: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSRow = 16;

export function allocSRow(data?: Partial<SRow>): Uint8Array {
  const buf = new Uint8Array(sizeofSRow);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulAdrEntryPad !== undefined) view.setUint32(0, Number(data.ulAdrEntryPad), true);
  // 0x04: u32
  if (data?.cValues !== undefined) view.setUint32(4, Number(data.cValues), true);
  // 0x08: pointer
  if (data?.lpProps !== undefined) view.setBigUint64(8, data.lpProps === null ? 0n : BigInt(util.toPointer(data.lpProps)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.SRowSet (size: 16)
 */
export interface SRowSet {
  /** u32 */
  cRows: number;
  /** array */
  aRow: Deno.PointerValue | null;
}

export const sizeofSRowSet = 16;

export function allocSRowSet(data?: Partial<SRowSet>): Uint8Array {
  const buf = new Uint8Array(sizeofSRowSet);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cRows !== undefined) view.setUint32(0, Number(data.cRows), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.aRow !== undefined) view.setBigUint64(8, data.aRow === null ? 0n : BigInt(util.toPointer(data.aRow)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.MAPIERROR (size: 32)
 */
export interface MAPIERROR {
  /** u32 */
  ulVersion: number;
  /** ptr */
  lpszError: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpszComponent: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ulLowLevelError: number;
  /** u32 */
  ulContext: number;
}

export const sizeofMAPIERROR = 32;

export function allocMAPIERROR(data?: Partial<MAPIERROR>): Uint8Array {
  const buf = new Uint8Array(sizeofMAPIERROR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulVersion !== undefined) view.setUint32(0, Number(data.ulVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpszError !== undefined) view.setBigUint64(8, data.lpszError === null ? 0n : BigInt(util.toPointer(data.lpszError)), true);
  // 0x10: pointer
  if (data?.lpszComponent !== undefined) view.setBigUint64(16, data.lpszComponent === null ? 0n : BigInt(util.toPointer(data.lpszComponent)), true);
  // 0x18: u32
  if (data?.ulLowLevelError !== undefined) view.setUint32(24, Number(data.ulLowLevelError), true);
  // 0x1c: u32
  if (data?.ulContext !== undefined) view.setUint32(28, Number(data.ulContext), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.ERROR_NOTIFICATION (size: 32)
 */
export interface ERROR_NOTIFICATION {
  /** u32 */
  cbEntryID: number;
  /** ptr */
  lpEntryID: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  scode: number;
  /** u32 */
  ulFlags: number;
  /** ptr */
  lpMAPIError: Deno.PointerValue | Uint8Array | null;
}

export const sizeofERROR_NOTIFICATION = 32;

export function allocERROR_NOTIFICATION(data?: Partial<ERROR_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofERROR_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbEntryID !== undefined) view.setUint32(0, Number(data.cbEntryID), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpEntryID !== undefined) view.setBigUint64(8, data.lpEntryID === null ? 0n : BigInt(util.toPointer(data.lpEntryID)), true);
  // 0x10: i32
  if (data?.scode !== undefined) view.setInt32(16, Number(data.scode), true);
  // 0x14: u32
  if (data?.ulFlags !== undefined) view.setUint32(20, Number(data.ulFlags), true);
  // 0x18: pointer
  if (data?.lpMAPIError !== undefined) view.setBigUint64(24, data.lpMAPIError === null ? 0n : BigInt(util.toPointer(data.lpMAPIError)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.NEWMAIL_NOTIFICATION (size: 56)
 */
export interface NEWMAIL_NOTIFICATION {
  /** u32 */
  cbEntryID: number;
  /** ptr */
  lpEntryID: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbParentID: number;
  /** ptr */
  lpParentID: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ulFlags: number;
  /** ptr */
  lpszMessageClass: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ulMessageFlags: number;
}

export const sizeofNEWMAIL_NOTIFICATION = 56;

export function allocNEWMAIL_NOTIFICATION(data?: Partial<NEWMAIL_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofNEWMAIL_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbEntryID !== undefined) view.setUint32(0, Number(data.cbEntryID), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpEntryID !== undefined) view.setBigUint64(8, data.lpEntryID === null ? 0n : BigInt(util.toPointer(data.lpEntryID)), true);
  // 0x10: u32
  if (data?.cbParentID !== undefined) view.setUint32(16, Number(data.cbParentID), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lpParentID !== undefined) view.setBigUint64(24, data.lpParentID === null ? 0n : BigInt(util.toPointer(data.lpParentID)), true);
  // 0x20: u32
  if (data?.ulFlags !== undefined) view.setUint32(32, Number(data.ulFlags), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.lpszMessageClass !== undefined) view.setBigUint64(40, data.lpszMessageClass === null ? 0n : BigInt(util.toPointer(data.lpszMessageClass)), true);
  // 0x30: u32
  if (data?.ulMessageFlags !== undefined) view.setUint32(48, Number(data.ulMessageFlags), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.OBJECT_NOTIFICATION (size: 72)
 */
export interface OBJECT_NOTIFICATION {
  /** u32 */
  cbEntryID: number;
  /** ptr */
  lpEntryID: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ulObjType: number;
  /** u32 */
  cbParentID: number;
  /** ptr */
  lpParentID: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbOldID: number;
  /** ptr */
  lpOldID: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbOldParentID: number;
  /** ptr */
  lpOldParentID: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpPropTagArray: Deno.PointerValue | Uint8Array | null;
}

export const sizeofOBJECT_NOTIFICATION = 72;

export function allocOBJECT_NOTIFICATION(data?: Partial<OBJECT_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofOBJECT_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbEntryID !== undefined) view.setUint32(0, Number(data.cbEntryID), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpEntryID !== undefined) view.setBigUint64(8, data.lpEntryID === null ? 0n : BigInt(util.toPointer(data.lpEntryID)), true);
  // 0x10: u32
  if (data?.ulObjType !== undefined) view.setUint32(16, Number(data.ulObjType), true);
  // 0x14: u32
  if (data?.cbParentID !== undefined) view.setUint32(20, Number(data.cbParentID), true);
  // 0x18: pointer
  if (data?.lpParentID !== undefined) view.setBigUint64(24, data.lpParentID === null ? 0n : BigInt(util.toPointer(data.lpParentID)), true);
  // 0x20: u32
  if (data?.cbOldID !== undefined) view.setUint32(32, Number(data.cbOldID), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.lpOldID !== undefined) view.setBigUint64(40, data.lpOldID === null ? 0n : BigInt(util.toPointer(data.lpOldID)), true);
  // 0x30: u32
  if (data?.cbOldParentID !== undefined) view.setUint32(48, Number(data.cbOldParentID), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.lpOldParentID !== undefined) view.setBigUint64(56, data.lpOldParentID === null ? 0n : BigInt(util.toPointer(data.lpOldParentID)), true);
  // 0x40: pointer
  if (data?.lpPropTagArray !== undefined) view.setBigUint64(64, data.lpPropTagArray === null ? 0n : BigInt(util.toPointer(data.lpPropTagArray)), true);
  return buf;
}

export type HRESULT = number;

/**
 * Windows.Win32.System.AddressBook.TABLE_NOTIFICATION (size: 48)
 */
export interface TABLE_NOTIFICATION {
  /** u32 */
  ulTableEvent: number;
  /** Windows.Win32.Foundation.HRESULT */
  hResult: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.AddressBook.SPropValue */
  propIndex: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.AddressBook.SPropValue */
  propPrior: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.AddressBook.SRow */
  row: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulPad: number;
}

export const sizeofTABLE_NOTIFICATION = 48;

export function allocTABLE_NOTIFICATION(data?: Partial<TABLE_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofTABLE_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulTableEvent !== undefined) view.setUint32(0, Number(data.ulTableEvent), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hResult !== undefined) view.setBigUint64(8, data.hResult === null ? 0n : BigInt(util.toPointer(data.hResult)), true);
  // 0x10: pointer
  if (data?.propIndex !== undefined) view.setBigUint64(16, data.propIndex === null ? 0n : BigInt(util.toPointer(data.propIndex)), true);
  // 0x18: pointer
  if (data?.propPrior !== undefined) view.setBigUint64(24, data.propPrior === null ? 0n : BigInt(util.toPointer(data.propPrior)), true);
  // 0x20: pointer
  if (data?.row !== undefined) view.setBigUint64(32, data.row === null ? 0n : BigInt(util.toPointer(data.row)), true);
  // 0x28: u32
  if (data?.ulPad !== undefined) view.setUint32(40, Number(data.ulPad), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.EXTENDED_NOTIFICATION (size: 16)
 */
export interface EXTENDED_NOTIFICATION {
  /** u32 */
  ulEvent: number;
  /** u32 */
  cb: number;
  /** ptr */
  pbEventParameters: Deno.PointerValue | Uint8Array | null;
}

export const sizeofEXTENDED_NOTIFICATION = 16;

export function allocEXTENDED_NOTIFICATION(data?: Partial<EXTENDED_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofEXTENDED_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulEvent !== undefined) view.setUint32(0, Number(data.ulEvent), true);
  // 0x04: u32
  if (data?.cb !== undefined) view.setUint32(4, Number(data.cb), true);
  // 0x08: pointer
  if (data?.pbEventParameters !== undefined) view.setBigUint64(8, data.pbEventParameters === null ? 0n : BigInt(util.toPointer(data.pbEventParameters)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.STATUS_OBJECT_NOTIFICATION (size: 32)
 */
export interface STATUS_OBJECT_NOTIFICATION {
  /** u32 */
  cbEntryID: number;
  /** ptr */
  lpEntryID: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cValues: number;
  /** ptr */
  lpPropVals: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSTATUS_OBJECT_NOTIFICATION = 32;

export function allocSTATUS_OBJECT_NOTIFICATION(data?: Partial<STATUS_OBJECT_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSTATUS_OBJECT_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbEntryID !== undefined) view.setUint32(0, Number(data.cbEntryID), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpEntryID !== undefined) view.setBigUint64(8, data.lpEntryID === null ? 0n : BigInt(util.toPointer(data.lpEntryID)), true);
  // 0x10: u32
  if (data?.cValues !== undefined) view.setUint32(16, Number(data.cValues), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lpPropVals !== undefined) view.setBigUint64(24, data.lpPropVals === null ? 0n : BigInt(util.toPointer(data.lpPropVals)), true);
  return buf;
}

/**
 * _info_e__Union (size: 48)
 */
export interface _info_e__Union {
  /** Windows.Win32.System.AddressBook.ERROR_NOTIFICATION */
  err: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.AddressBook.NEWMAIL_NOTIFICATION */
  newmail: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.AddressBook.OBJECT_NOTIFICATION */
  obj: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.AddressBook.TABLE_NOTIFICATION */
  tab: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.AddressBook.EXTENDED_NOTIFICATION */
  ext: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.AddressBook.STATUS_OBJECT_NOTIFICATION */
  statobj: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_info_e__Union = 48;

export function alloc_info_e__Union(data?: Partial<_info_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_info_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.err !== undefined) view.setBigUint64(0, data.err === null ? 0n : BigInt(util.toPointer(data.err)), true);
  // 0x08: pointer
  if (data?.newmail !== undefined) view.setBigUint64(8, data.newmail === null ? 0n : BigInt(util.toPointer(data.newmail)), true);
  // 0x10: pointer
  if (data?.obj !== undefined) view.setBigUint64(16, data.obj === null ? 0n : BigInt(util.toPointer(data.obj)), true);
  // 0x18: pointer
  if (data?.tab !== undefined) view.setBigUint64(24, data.tab === null ? 0n : BigInt(util.toPointer(data.tab)), true);
  // 0x20: pointer
  if (data?.ext !== undefined) view.setBigUint64(32, data.ext === null ? 0n : BigInt(util.toPointer(data.ext)), true);
  // 0x28: pointer
  if (data?.statobj !== undefined) view.setBigUint64(40, data.statobj === null ? 0n : BigInt(util.toPointer(data.statobj)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.NOTIFICATION (size: 16)
 */
export interface NOTIFICATION {
  /** u32 */
  ulEventType: number;
  /** u32 */
  ulAlignPad: number;
  /** _info_e__Union */
  info: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNOTIFICATION = 16;

export function allocNOTIFICATION(data?: Partial<NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofNOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulEventType !== undefined) view.setUint32(0, Number(data.ulEventType), true);
  // 0x04: u32
  if (data?.ulAlignPad !== undefined) view.setUint32(4, Number(data.ulAlignPad), true);
  // 0x08: pointer
  if (data?.info !== undefined) view.setBigUint64(8, data.info === null ? 0n : BigInt(util.toPointer(data.info)), true);
  return buf;
}

/**
 * _Kind_e__Union (size: 16)
 */
export interface _Kind_e__Union {
  /** i32 */
  lID: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpwstrName: string | null;
}

export const sizeof_Kind_e__Union = 16;

export function alloc_Kind_e__Union(data?: Partial<_Kind_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Kind_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lID !== undefined) view.setInt32(0, Number(data.lID), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpwstrName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpwstrName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.MAPINAMEID (size: 24)
 */
export interface MAPINAMEID {
  /** ptr */
  lpguid: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ulKind: number;
  /** _Kind_e__Union */
  Kind: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMAPINAMEID = 24;

export function allocMAPINAMEID(data?: Partial<MAPINAMEID>): Uint8Array {
  const buf = new Uint8Array(sizeofMAPINAMEID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpguid !== undefined) view.setBigUint64(0, data.lpguid === null ? 0n : BigInt(util.toPointer(data.lpguid)), true);
  // 0x08: u32
  if (data?.ulKind !== undefined) view.setUint32(8, Number(data.ulKind), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Kind !== undefined) view.setBigUint64(16, data.Kind === null ? 0n : BigInt(util.toPointer(data.Kind)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.SSortOrder (size: 8)
 */
export interface SSortOrder {
  /** u32 */
  ulPropTag: number;
  /** u32 */
  ulOrder: number;
}

export const sizeofSSortOrder = 8;

export function allocSSortOrder(data?: Partial<SSortOrder>): Uint8Array {
  const buf = new Uint8Array(sizeofSSortOrder);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulPropTag !== undefined) view.setUint32(0, Number(data.ulPropTag), true);
  // 0x04: u32
  if (data?.ulOrder !== undefined) view.setUint32(4, Number(data.ulOrder), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.SSortOrderSet (size: 24)
 */
export interface SSortOrderSet {
  /** u32 */
  cSorts: number;
  /** u32 */
  cCategories: number;
  /** u32 */
  cExpanded: number;
  /** array */
  aSort: Deno.PointerValue | null;
}

export const sizeofSSortOrderSet = 24;

export function allocSSortOrderSet(data?: Partial<SSortOrderSet>): Uint8Array {
  const buf = new Uint8Array(sizeofSSortOrderSet);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cSorts !== undefined) view.setUint32(0, Number(data.cSorts), true);
  // 0x04: u32
  if (data?.cCategories !== undefined) view.setUint32(4, Number(data.cCategories), true);
  // 0x08: u32
  if (data?.cExpanded !== undefined) view.setUint32(8, Number(data.cExpanded), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.aSort !== undefined) view.setBigUint64(16, data.aSort === null ? 0n : BigInt(util.toPointer(data.aSort)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.SAndRestriction (size: 16)
 */
export interface SAndRestriction {
  /** u32 */
  cRes: number;
  /** ptr */
  lpRes: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSAndRestriction = 16;

export function allocSAndRestriction(data?: Partial<SAndRestriction>): Uint8Array {
  const buf = new Uint8Array(sizeofSAndRestriction);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cRes !== undefined) view.setUint32(0, Number(data.cRes), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpRes !== undefined) view.setBigUint64(8, data.lpRes === null ? 0n : BigInt(util.toPointer(data.lpRes)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.SOrRestriction (size: 16)
 */
export interface SOrRestriction {
  /** u32 */
  cRes: number;
  /** ptr */
  lpRes: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSOrRestriction = 16;

export function allocSOrRestriction(data?: Partial<SOrRestriction>): Uint8Array {
  const buf = new Uint8Array(sizeofSOrRestriction);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cRes !== undefined) view.setUint32(0, Number(data.cRes), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpRes !== undefined) view.setBigUint64(8, data.lpRes === null ? 0n : BigInt(util.toPointer(data.lpRes)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.SNotRestriction (size: 16)
 */
export interface SNotRestriction {
  /** u32 */
  ulReserved: number;
  /** ptr */
  lpRes: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSNotRestriction = 16;

export function allocSNotRestriction(data?: Partial<SNotRestriction>): Uint8Array {
  const buf = new Uint8Array(sizeofSNotRestriction);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulReserved !== undefined) view.setUint32(0, Number(data.ulReserved), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpRes !== undefined) view.setBigUint64(8, data.lpRes === null ? 0n : BigInt(util.toPointer(data.lpRes)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.SContentRestriction (size: 16)
 */
export interface SContentRestriction {
  /** u32 */
  ulFuzzyLevel: number;
  /** u32 */
  ulPropTag: number;
  /** ptr */
  lpProp: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSContentRestriction = 16;

export function allocSContentRestriction(data?: Partial<SContentRestriction>): Uint8Array {
  const buf = new Uint8Array(sizeofSContentRestriction);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulFuzzyLevel !== undefined) view.setUint32(0, Number(data.ulFuzzyLevel), true);
  // 0x04: u32
  if (data?.ulPropTag !== undefined) view.setUint32(4, Number(data.ulPropTag), true);
  // 0x08: pointer
  if (data?.lpProp !== undefined) view.setBigUint64(8, data.lpProp === null ? 0n : BigInt(util.toPointer(data.lpProp)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.SBitMaskRestriction (size: 16)
 */
export interface SBitMaskRestriction {
  /** u32 */
  relBMR: number;
  /** u32 */
  ulPropTag: number;
  /** u32 */
  ulMask: number;
}

export const sizeofSBitMaskRestriction = 16;

export function allocSBitMaskRestriction(data?: Partial<SBitMaskRestriction>): Uint8Array {
  const buf = new Uint8Array(sizeofSBitMaskRestriction);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.relBMR !== undefined) view.setUint32(0, Number(data.relBMR), true);
  // 0x04: u32
  if (data?.ulPropTag !== undefined) view.setUint32(4, Number(data.ulPropTag), true);
  // 0x08: u32
  if (data?.ulMask !== undefined) view.setUint32(8, Number(data.ulMask), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.SPropertyRestriction (size: 16)
 */
export interface SPropertyRestriction {
  /** u32 */
  relop: number;
  /** u32 */
  ulPropTag: number;
  /** ptr */
  lpProp: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSPropertyRestriction = 16;

export function allocSPropertyRestriction(data?: Partial<SPropertyRestriction>): Uint8Array {
  const buf = new Uint8Array(sizeofSPropertyRestriction);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.relop !== undefined) view.setUint32(0, Number(data.relop), true);
  // 0x04: u32
  if (data?.ulPropTag !== undefined) view.setUint32(4, Number(data.ulPropTag), true);
  // 0x08: pointer
  if (data?.lpProp !== undefined) view.setBigUint64(8, data.lpProp === null ? 0n : BigInt(util.toPointer(data.lpProp)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.SComparePropsRestriction (size: 16)
 */
export interface SComparePropsRestriction {
  /** u32 */
  relop: number;
  /** u32 */
  ulPropTag1: number;
  /** u32 */
  ulPropTag2: number;
}

export const sizeofSComparePropsRestriction = 16;

export function allocSComparePropsRestriction(data?: Partial<SComparePropsRestriction>): Uint8Array {
  const buf = new Uint8Array(sizeofSComparePropsRestriction);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.relop !== undefined) view.setUint32(0, Number(data.relop), true);
  // 0x04: u32
  if (data?.ulPropTag1 !== undefined) view.setUint32(4, Number(data.ulPropTag1), true);
  // 0x08: u32
  if (data?.ulPropTag2 !== undefined) view.setUint32(8, Number(data.ulPropTag2), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.SSizeRestriction (size: 16)
 */
export interface SSizeRestriction {
  /** u32 */
  relop: number;
  /** u32 */
  ulPropTag: number;
  /** u32 */
  cb: number;
}

export const sizeofSSizeRestriction = 16;

export function allocSSizeRestriction(data?: Partial<SSizeRestriction>): Uint8Array {
  const buf = new Uint8Array(sizeofSSizeRestriction);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.relop !== undefined) view.setUint32(0, Number(data.relop), true);
  // 0x04: u32
  if (data?.ulPropTag !== undefined) view.setUint32(4, Number(data.ulPropTag), true);
  // 0x08: u32
  if (data?.cb !== undefined) view.setUint32(8, Number(data.cb), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.SExistRestriction (size: 16)
 */
export interface SExistRestriction {
  /** u32 */
  ulReserved1: number;
  /** u32 */
  ulPropTag: number;
  /** u32 */
  ulReserved2: number;
}

export const sizeofSExistRestriction = 16;

export function allocSExistRestriction(data?: Partial<SExistRestriction>): Uint8Array {
  const buf = new Uint8Array(sizeofSExistRestriction);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulReserved1 !== undefined) view.setUint32(0, Number(data.ulReserved1), true);
  // 0x04: u32
  if (data?.ulPropTag !== undefined) view.setUint32(4, Number(data.ulPropTag), true);
  // 0x08: u32
  if (data?.ulReserved2 !== undefined) view.setUint32(8, Number(data.ulReserved2), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.SSubRestriction (size: 16)
 */
export interface SSubRestriction {
  /** u32 */
  ulSubObject: number;
  /** ptr */
  lpRes: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSSubRestriction = 16;

export function allocSSubRestriction(data?: Partial<SSubRestriction>): Uint8Array {
  const buf = new Uint8Array(sizeofSSubRestriction);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulSubObject !== undefined) view.setUint32(0, Number(data.ulSubObject), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpRes !== undefined) view.setBigUint64(8, data.lpRes === null ? 0n : BigInt(util.toPointer(data.lpRes)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.SCommentRestriction (size: 24)
 */
export interface SCommentRestriction {
  /** u32 */
  cValues: number;
  /** ptr */
  lpRes: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpProp: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSCommentRestriction = 24;

export function allocSCommentRestriction(data?: Partial<SCommentRestriction>): Uint8Array {
  const buf = new Uint8Array(sizeofSCommentRestriction);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cValues !== undefined) view.setUint32(0, Number(data.cValues), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpRes !== undefined) view.setBigUint64(8, data.lpRes === null ? 0n : BigInt(util.toPointer(data.lpRes)), true);
  // 0x10: pointer
  if (data?.lpProp !== undefined) view.setBigUint64(16, data.lpProp === null ? 0n : BigInt(util.toPointer(data.lpProp)), true);
  return buf;
}

/**
 * _res_e__Union (size: 88)
 */
export interface _res_e__Union {
  /** Windows.Win32.System.AddressBook.SComparePropsRestriction */
  resCompareProps: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.AddressBook.SAndRestriction */
  resAnd: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.AddressBook.SOrRestriction */
  resOr: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.AddressBook.SNotRestriction */
  resNot: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.AddressBook.SContentRestriction */
  resContent: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.AddressBook.SPropertyRestriction */
  resProperty: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.AddressBook.SBitMaskRestriction */
  resBitMask: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.AddressBook.SSizeRestriction */
  resSize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.AddressBook.SExistRestriction */
  resExist: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.AddressBook.SSubRestriction */
  resSub: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.AddressBook.SCommentRestriction */
  resComment: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_res_e__Union = 88;

export function alloc_res_e__Union(data?: Partial<_res_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_res_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.resCompareProps !== undefined) view.setBigUint64(0, data.resCompareProps === null ? 0n : BigInt(util.toPointer(data.resCompareProps)), true);
  // 0x08: pointer
  if (data?.resAnd !== undefined) view.setBigUint64(8, data.resAnd === null ? 0n : BigInt(util.toPointer(data.resAnd)), true);
  // 0x10: pointer
  if (data?.resOr !== undefined) view.setBigUint64(16, data.resOr === null ? 0n : BigInt(util.toPointer(data.resOr)), true);
  // 0x18: pointer
  if (data?.resNot !== undefined) view.setBigUint64(24, data.resNot === null ? 0n : BigInt(util.toPointer(data.resNot)), true);
  // 0x20: pointer
  if (data?.resContent !== undefined) view.setBigUint64(32, data.resContent === null ? 0n : BigInt(util.toPointer(data.resContent)), true);
  // 0x28: pointer
  if (data?.resProperty !== undefined) view.setBigUint64(40, data.resProperty === null ? 0n : BigInt(util.toPointer(data.resProperty)), true);
  // 0x30: pointer
  if (data?.resBitMask !== undefined) view.setBigUint64(48, data.resBitMask === null ? 0n : BigInt(util.toPointer(data.resBitMask)), true);
  // 0x38: pointer
  if (data?.resSize !== undefined) view.setBigUint64(56, data.resSize === null ? 0n : BigInt(util.toPointer(data.resSize)), true);
  // 0x40: pointer
  if (data?.resExist !== undefined) view.setBigUint64(64, data.resExist === null ? 0n : BigInt(util.toPointer(data.resExist)), true);
  // 0x48: pointer
  if (data?.resSub !== undefined) view.setBigUint64(72, data.resSub === null ? 0n : BigInt(util.toPointer(data.resSub)), true);
  // 0x50: pointer
  if (data?.resComment !== undefined) view.setBigUint64(80, data.resComment === null ? 0n : BigInt(util.toPointer(data.resComment)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.SRestriction (size: 16)
 */
export interface SRestriction {
  /** u32 */
  rt: number;
  /** _res_e__Union */
  res: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSRestriction = 16;

export function allocSRestriction(data?: Partial<SRestriction>): Uint8Array {
  const buf = new Uint8Array(sizeofSRestriction);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.rt !== undefined) view.setUint32(0, Number(data.rt), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.res !== undefined) view.setBigUint64(8, data.res === null ? 0n : BigInt(util.toPointer(data.res)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.FlagList (size: 16)
 */
export interface FlagList {
  /** u32 */
  cFlags: number;
  /** array */
  ulFlag: Deno.PointerValue | null;
}

export const sizeofFlagList = 16;

export function allocFlagList(data?: Partial<FlagList>): Uint8Array {
  const buf = new Uint8Array(sizeofFlagList);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cFlags !== undefined) view.setUint32(0, Number(data.cFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ulFlag !== undefined) view.setBigUint64(8, data.ulFlag === null ? 0n : BigInt(util.toPointer(data.ulFlag)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.ADRPARM (size: 136)
 */
export interface ADRPARM {
  /** u32 */
  cbABContEntryID: number;
  /** ptr */
  lpABContEntryID: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ulFlags: number;
  /** ptr */
  lpReserved: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ulHelpContext: number;
  /** ptr */
  lpszHelpFileName: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.AddressBook.LPFNABSDI */
  lpfnABSDI: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.AddressBook.LPFNDISMISS */
  lpfnDismiss: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpvDismissContext: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpszCaption: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpszNewEntryTitle: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpszDestWellsTitle: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cDestFields: number;
  /** u32 */
  nDestFieldFocus: number;
  /** ptr */
  lppszDestTitles: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpulDestComps: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpContRestriction: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpHierRestriction: Deno.PointerValue | Uint8Array | null;
}

export const sizeofADRPARM = 136;

export function allocADRPARM(data?: Partial<ADRPARM>): Uint8Array {
  const buf = new Uint8Array(sizeofADRPARM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbABContEntryID !== undefined) view.setUint32(0, Number(data.cbABContEntryID), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpABContEntryID !== undefined) view.setBigUint64(8, data.lpABContEntryID === null ? 0n : BigInt(util.toPointer(data.lpABContEntryID)), true);
  // 0x10: u32
  if (data?.ulFlags !== undefined) view.setUint32(16, Number(data.ulFlags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lpReserved !== undefined) view.setBigUint64(24, data.lpReserved === null ? 0n : BigInt(util.toPointer(data.lpReserved)), true);
  // 0x20: u32
  if (data?.ulHelpContext !== undefined) view.setUint32(32, Number(data.ulHelpContext), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.lpszHelpFileName !== undefined) view.setBigUint64(40, data.lpszHelpFileName === null ? 0n : BigInt(util.toPointer(data.lpszHelpFileName)), true);
  // 0x30: pointer
  if (data?.lpfnABSDI !== undefined) view.setBigUint64(48, data.lpfnABSDI === null ? 0n : BigInt(util.toPointer(data.lpfnABSDI)), true);
  // 0x38: pointer
  if (data?.lpfnDismiss !== undefined) view.setBigUint64(56, data.lpfnDismiss === null ? 0n : BigInt(util.toPointer(data.lpfnDismiss)), true);
  // 0x40: pointer
  if (data?.lpvDismissContext !== undefined) view.setBigUint64(64, data.lpvDismissContext === null ? 0n : BigInt(util.toPointer(data.lpvDismissContext)), true);
  // 0x48: pointer
  if (data?.lpszCaption !== undefined) view.setBigUint64(72, data.lpszCaption === null ? 0n : BigInt(util.toPointer(data.lpszCaption)), true);
  // 0x50: pointer
  if (data?.lpszNewEntryTitle !== undefined) view.setBigUint64(80, data.lpszNewEntryTitle === null ? 0n : BigInt(util.toPointer(data.lpszNewEntryTitle)), true);
  // 0x58: pointer
  if (data?.lpszDestWellsTitle !== undefined) view.setBigUint64(88, data.lpszDestWellsTitle === null ? 0n : BigInt(util.toPointer(data.lpszDestWellsTitle)), true);
  // 0x60: u32
  if (data?.cDestFields !== undefined) view.setUint32(96, Number(data.cDestFields), true);
  // 0x64: u32
  if (data?.nDestFieldFocus !== undefined) view.setUint32(100, Number(data.nDestFieldFocus), true);
  // 0x68: pointer
  if (data?.lppszDestTitles !== undefined) view.setBigUint64(104, data.lppszDestTitles === null ? 0n : BigInt(util.toPointer(data.lppszDestTitles)), true);
  // 0x70: pointer
  if (data?.lpulDestComps !== undefined) view.setBigUint64(112, data.lpulDestComps === null ? 0n : BigInt(util.toPointer(data.lpulDestComps)), true);
  // 0x78: pointer
  if (data?.lpContRestriction !== undefined) view.setBigUint64(120, data.lpContRestriction === null ? 0n : BigInt(util.toPointer(data.lpContRestriction)), true);
  // 0x80: pointer
  if (data?.lpHierRestriction !== undefined) view.setBigUint64(128, data.lpHierRestriction === null ? 0n : BigInt(util.toPointer(data.lpHierRestriction)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.DTBLLABEL (size: 8)
 */
export interface DTBLLABEL {
  /** u32 */
  ulbLpszLabelName: number;
  /** u32 */
  ulFlags: number;
}

export const sizeofDTBLLABEL = 8;

export function allocDTBLLABEL(data?: Partial<DTBLLABEL>): Uint8Array {
  const buf = new Uint8Array(sizeofDTBLLABEL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulbLpszLabelName !== undefined) view.setUint32(0, Number(data.ulbLpszLabelName), true);
  // 0x04: u32
  if (data?.ulFlags !== undefined) view.setUint32(4, Number(data.ulFlags), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.DTBLEDIT (size: 16)
 */
export interface DTBLEDIT {
  /** u32 */
  ulbLpszCharsAllowed: number;
  /** u32 */
  ulFlags: number;
  /** u32 */
  ulNumCharsAllowed: number;
  /** u32 */
  ulPropTag: number;
}

export const sizeofDTBLEDIT = 16;

export function allocDTBLEDIT(data?: Partial<DTBLEDIT>): Uint8Array {
  const buf = new Uint8Array(sizeofDTBLEDIT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulbLpszCharsAllowed !== undefined) view.setUint32(0, Number(data.ulbLpszCharsAllowed), true);
  // 0x04: u32
  if (data?.ulFlags !== undefined) view.setUint32(4, Number(data.ulFlags), true);
  // 0x08: u32
  if (data?.ulNumCharsAllowed !== undefined) view.setUint32(8, Number(data.ulNumCharsAllowed), true);
  // 0x0c: u32
  if (data?.ulPropTag !== undefined) view.setUint32(12, Number(data.ulPropTag), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.DTBLLBX (size: 16)
 */
export interface DTBLLBX {
  /** u32 */
  ulFlags: number;
  /** u32 */
  ulPRSetProperty: number;
  /** u32 */
  ulPRTableName: number;
}

export const sizeofDTBLLBX = 16;

export function allocDTBLLBX(data?: Partial<DTBLLBX>): Uint8Array {
  const buf = new Uint8Array(sizeofDTBLLBX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulFlags !== undefined) view.setUint32(0, Number(data.ulFlags), true);
  // 0x04: u32
  if (data?.ulPRSetProperty !== undefined) view.setUint32(4, Number(data.ulPRSetProperty), true);
  // 0x08: u32
  if (data?.ulPRTableName !== undefined) view.setUint32(8, Number(data.ulPRTableName), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.DTBLCOMBOBOX (size: 24)
 */
export interface DTBLCOMBOBOX {
  /** u32 */
  ulbLpszCharsAllowed: number;
  /** u32 */
  ulFlags: number;
  /** u32 */
  ulNumCharsAllowed: number;
  /** u32 */
  ulPRPropertyName: number;
  /** u32 */
  ulPRTableName: number;
}

export const sizeofDTBLCOMBOBOX = 24;

export function allocDTBLCOMBOBOX(data?: Partial<DTBLCOMBOBOX>): Uint8Array {
  const buf = new Uint8Array(sizeofDTBLCOMBOBOX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulbLpszCharsAllowed !== undefined) view.setUint32(0, Number(data.ulbLpszCharsAllowed), true);
  // 0x04: u32
  if (data?.ulFlags !== undefined) view.setUint32(4, Number(data.ulFlags), true);
  // 0x08: u32
  if (data?.ulNumCharsAllowed !== undefined) view.setUint32(8, Number(data.ulNumCharsAllowed), true);
  // 0x0c: u32
  if (data?.ulPRPropertyName !== undefined) view.setUint32(12, Number(data.ulPRPropertyName), true);
  // 0x10: u32
  if (data?.ulPRTableName !== undefined) view.setUint32(16, Number(data.ulPRTableName), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.DTBLDDLBX (size: 16)
 */
export interface DTBLDDLBX {
  /** u32 */
  ulFlags: number;
  /** u32 */
  ulPRDisplayProperty: number;
  /** u32 */
  ulPRSetProperty: number;
  /** u32 */
  ulPRTableName: number;
}

export const sizeofDTBLDDLBX = 16;

export function allocDTBLDDLBX(data?: Partial<DTBLDDLBX>): Uint8Array {
  const buf = new Uint8Array(sizeofDTBLDDLBX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulFlags !== undefined) view.setUint32(0, Number(data.ulFlags), true);
  // 0x04: u32
  if (data?.ulPRDisplayProperty !== undefined) view.setUint32(4, Number(data.ulPRDisplayProperty), true);
  // 0x08: u32
  if (data?.ulPRSetProperty !== undefined) view.setUint32(8, Number(data.ulPRSetProperty), true);
  // 0x0c: u32
  if (data?.ulPRTableName !== undefined) view.setUint32(12, Number(data.ulPRTableName), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.DTBLCHECKBOX (size: 16)
 */
export interface DTBLCHECKBOX {
  /** u32 */
  ulbLpszLabel: number;
  /** u32 */
  ulFlags: number;
  /** u32 */
  ulPRPropertyName: number;
}

export const sizeofDTBLCHECKBOX = 16;

export function allocDTBLCHECKBOX(data?: Partial<DTBLCHECKBOX>): Uint8Array {
  const buf = new Uint8Array(sizeofDTBLCHECKBOX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulbLpszLabel !== undefined) view.setUint32(0, Number(data.ulbLpszLabel), true);
  // 0x04: u32
  if (data?.ulFlags !== undefined) view.setUint32(4, Number(data.ulFlags), true);
  // 0x08: u32
  if (data?.ulPRPropertyName !== undefined) view.setUint32(8, Number(data.ulPRPropertyName), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.DTBLGROUPBOX (size: 8)
 */
export interface DTBLGROUPBOX {
  /** u32 */
  ulbLpszLabel: number;
  /** u32 */
  ulFlags: number;
}

export const sizeofDTBLGROUPBOX = 8;

export function allocDTBLGROUPBOX(data?: Partial<DTBLGROUPBOX>): Uint8Array {
  const buf = new Uint8Array(sizeofDTBLGROUPBOX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulbLpszLabel !== undefined) view.setUint32(0, Number(data.ulbLpszLabel), true);
  // 0x04: u32
  if (data?.ulFlags !== undefined) view.setUint32(4, Number(data.ulFlags), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.DTBLBUTTON (size: 16)
 */
export interface DTBLBUTTON {
  /** u32 */
  ulbLpszLabel: number;
  /** u32 */
  ulFlags: number;
  /** u32 */
  ulPRControl: number;
}

export const sizeofDTBLBUTTON = 16;

export function allocDTBLBUTTON(data?: Partial<DTBLBUTTON>): Uint8Array {
  const buf = new Uint8Array(sizeofDTBLBUTTON);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulbLpszLabel !== undefined) view.setUint32(0, Number(data.ulbLpszLabel), true);
  // 0x04: u32
  if (data?.ulFlags !== undefined) view.setUint32(4, Number(data.ulFlags), true);
  // 0x08: u32
  if (data?.ulPRControl !== undefined) view.setUint32(8, Number(data.ulPRControl), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.DTBLPAGE (size: 16)
 */
export interface DTBLPAGE {
  /** u32 */
  ulbLpszLabel: number;
  /** u32 */
  ulFlags: number;
  /** u32 */
  ulbLpszComponent: number;
  /** u32 */
  ulContext: number;
}

export const sizeofDTBLPAGE = 16;

export function allocDTBLPAGE(data?: Partial<DTBLPAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofDTBLPAGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulbLpszLabel !== undefined) view.setUint32(0, Number(data.ulbLpszLabel), true);
  // 0x04: u32
  if (data?.ulFlags !== undefined) view.setUint32(4, Number(data.ulFlags), true);
  // 0x08: u32
  if (data?.ulbLpszComponent !== undefined) view.setUint32(8, Number(data.ulbLpszComponent), true);
  // 0x0c: u32
  if (data?.ulContext !== undefined) view.setUint32(12, Number(data.ulContext), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.DTBLRADIOBUTTON (size: 24)
 */
export interface DTBLRADIOBUTTON {
  /** u32 */
  ulbLpszLabel: number;
  /** u32 */
  ulFlags: number;
  /** u32 */
  ulcButtons: number;
  /** u32 */
  ulPropTag: number;
  /** i32 */
  lReturnValue: number;
}

export const sizeofDTBLRADIOBUTTON = 24;

export function allocDTBLRADIOBUTTON(data?: Partial<DTBLRADIOBUTTON>): Uint8Array {
  const buf = new Uint8Array(sizeofDTBLRADIOBUTTON);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulbLpszLabel !== undefined) view.setUint32(0, Number(data.ulbLpszLabel), true);
  // 0x04: u32
  if (data?.ulFlags !== undefined) view.setUint32(4, Number(data.ulFlags), true);
  // 0x08: u32
  if (data?.ulcButtons !== undefined) view.setUint32(8, Number(data.ulcButtons), true);
  // 0x0c: u32
  if (data?.ulPropTag !== undefined) view.setUint32(12, Number(data.ulPropTag), true);
  // 0x10: i32
  if (data?.lReturnValue !== undefined) view.setInt32(16, Number(data.lReturnValue), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.DTBLMVLISTBOX (size: 8)
 */
export interface DTBLMVLISTBOX {
  /** u32 */
  ulFlags: number;
  /** u32 */
  ulMVPropTag: number;
}

export const sizeofDTBLMVLISTBOX = 8;

export function allocDTBLMVLISTBOX(data?: Partial<DTBLMVLISTBOX>): Uint8Array {
  const buf = new Uint8Array(sizeofDTBLMVLISTBOX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulFlags !== undefined) view.setUint32(0, Number(data.ulFlags), true);
  // 0x04: u32
  if (data?.ulMVPropTag !== undefined) view.setUint32(4, Number(data.ulMVPropTag), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.DTBLMVDDLBX (size: 8)
 */
export interface DTBLMVDDLBX {
  /** u32 */
  ulFlags: number;
  /** u32 */
  ulMVPropTag: number;
}

export const sizeofDTBLMVDDLBX = 8;

export function allocDTBLMVDDLBX(data?: Partial<DTBLMVDDLBX>): Uint8Array {
  const buf = new Uint8Array(sizeofDTBLMVDDLBX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulFlags !== undefined) view.setUint32(0, Number(data.ulFlags), true);
  // 0x04: u32
  if (data?.ulMVPropTag !== undefined) view.setUint32(4, Number(data.ulMVPropTag), true);
  return buf;
}

/**
 * _ctl_e__Union (size: 104)
 */
export interface _ctl_e__Union {
  /** ptr */
  lpv: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lplabel: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpedit: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lplbx: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpcombobox: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpddlbx: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpcheckbox: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpgroupbox: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpbutton: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpradiobutton: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpmvlbx: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpmvddlbx: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lppage: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_ctl_e__Union = 104;

export function alloc_ctl_e__Union(data?: Partial<_ctl_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_ctl_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpv !== undefined) view.setBigUint64(0, data.lpv === null ? 0n : BigInt(util.toPointer(data.lpv)), true);
  // 0x08: pointer
  if (data?.lplabel !== undefined) view.setBigUint64(8, data.lplabel === null ? 0n : BigInt(util.toPointer(data.lplabel)), true);
  // 0x10: pointer
  if (data?.lpedit !== undefined) view.setBigUint64(16, data.lpedit === null ? 0n : BigInt(util.toPointer(data.lpedit)), true);
  // 0x18: pointer
  if (data?.lplbx !== undefined) view.setBigUint64(24, data.lplbx === null ? 0n : BigInt(util.toPointer(data.lplbx)), true);
  // 0x20: pointer
  if (data?.lpcombobox !== undefined) view.setBigUint64(32, data.lpcombobox === null ? 0n : BigInt(util.toPointer(data.lpcombobox)), true);
  // 0x28: pointer
  if (data?.lpddlbx !== undefined) view.setBigUint64(40, data.lpddlbx === null ? 0n : BigInt(util.toPointer(data.lpddlbx)), true);
  // 0x30: pointer
  if (data?.lpcheckbox !== undefined) view.setBigUint64(48, data.lpcheckbox === null ? 0n : BigInt(util.toPointer(data.lpcheckbox)), true);
  // 0x38: pointer
  if (data?.lpgroupbox !== undefined) view.setBigUint64(56, data.lpgroupbox === null ? 0n : BigInt(util.toPointer(data.lpgroupbox)), true);
  // 0x40: pointer
  if (data?.lpbutton !== undefined) view.setBigUint64(64, data.lpbutton === null ? 0n : BigInt(util.toPointer(data.lpbutton)), true);
  // 0x48: pointer
  if (data?.lpradiobutton !== undefined) view.setBigUint64(72, data.lpradiobutton === null ? 0n : BigInt(util.toPointer(data.lpradiobutton)), true);
  // 0x50: pointer
  if (data?.lpmvlbx !== undefined) view.setBigUint64(80, data.lpmvlbx === null ? 0n : BigInt(util.toPointer(data.lpmvlbx)), true);
  // 0x58: pointer
  if (data?.lpmvddlbx !== undefined) view.setBigUint64(88, data.lpmvddlbx === null ? 0n : BigInt(util.toPointer(data.lpmvddlbx)), true);
  // 0x60: pointer
  if (data?.lppage !== undefined) view.setBigUint64(96, data.lppage === null ? 0n : BigInt(util.toPointer(data.lppage)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.DTCTL (size: 48)
 */
export interface DTCTL {
  /** u32 */
  ulCtlType: number;
  /** u32 */
  ulCtlFlags: number;
  /** ptr */
  lpbNotif: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbNotif: number;
  /** ptr */
  lpszFilter: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ulItemID: number;
  /** _ctl_e__Union */
  ctl: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDTCTL = 48;

export function allocDTCTL(data?: Partial<DTCTL>): Uint8Array {
  const buf = new Uint8Array(sizeofDTCTL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulCtlType !== undefined) view.setUint32(0, Number(data.ulCtlType), true);
  // 0x04: u32
  if (data?.ulCtlFlags !== undefined) view.setUint32(4, Number(data.ulCtlFlags), true);
  // 0x08: pointer
  if (data?.lpbNotif !== undefined) view.setBigUint64(8, data.lpbNotif === null ? 0n : BigInt(util.toPointer(data.lpbNotif)), true);
  // 0x10: u32
  if (data?.cbNotif !== undefined) view.setUint32(16, Number(data.cbNotif), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lpszFilter !== undefined) view.setBigUint64(24, data.lpszFilter === null ? 0n : BigInt(util.toPointer(data.lpszFilter)), true);
  // 0x20: u32
  if (data?.ulItemID !== undefined) view.setUint32(32, Number(data.ulItemID), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ctl !== undefined) view.setBigUint64(40, data.ctl === null ? 0n : BigInt(util.toPointer(data.ctl)), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.DTPAGE (size: 32)
 */
export interface DTPAGE {
  /** u32 */
  cctl: number;
  /** ptr */
  lpszResourceName: Deno.PointerValue | Uint8Array | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpctl: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDTPAGE = 32;

export function allocDTPAGE(data?: Partial<DTPAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofDTPAGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cctl !== undefined) view.setUint32(0, Number(data.cctl), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpszResourceName !== undefined) view.setBigUint64(8, data.lpszResourceName === null ? 0n : BigInt(util.toPointer(data.lpszResourceName)), true);
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x18: pointer
  if (data?.lpctl !== undefined) view.setBigUint64(24, data.lpctl === null ? 0n : BigInt(util.toPointer(data.lpctl)), true);
  return buf;
}

export type HWND = Deno.PointerValue;

/**
 * Windows.Win32.System.AddressBook.WAB_PARAM (size: 40)
 */
export interface WAB_PARAM {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwnd: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  szFileName: string | null;
  /** u32 */
  ulFlags: number;
  /** System.Guid */
  guidPSExt: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWAB_PARAM = 40;

export function allocWAB_PARAM(data?: Partial<WAB_PARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofWAB_PARAM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwnd !== undefined) view.setBigUint64(8, data.hwnd === null ? 0n : BigInt(util.toPointer(data.hwnd)), true);
  // 0x10: buffer
  if (data?.szFileName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.szFileName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.ulFlags !== undefined) view.setUint32(24, Number(data.ulFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.guidPSExt !== undefined) view.setBigUint64(32, data.guidPSExt === null ? 0n : BigInt(util.toPointer(data.guidPSExt)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.WABIMPORTPARAM (size: 40)
 */
export interface WABIMPORTPARAM {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.System.AddressBook.IAddrBook */
  lpAdrBook: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HWND */
  hWnd: Deno.PointerValue | null;
  /** u32 */
  ulFlags: number;
  /** Windows.Win32.Foundation.PSTR */
  lpszFileName: string | null;
}

export const sizeofWABIMPORTPARAM = 40;

export function allocWABIMPORTPARAM(data?: Partial<WABIMPORTPARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofWABIMPORTPARAM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpAdrBook !== undefined) view.setBigUint64(8, data.lpAdrBook === null ? 0n : BigInt(util.toPointer(data.lpAdrBook)), true);
  // 0x10: pointer
  if (data?.hWnd !== undefined) view.setBigUint64(16, data.hWnd === null ? 0n : BigInt(util.toPointer(data.hWnd)), true);
  // 0x18: u32
  if (data?.ulFlags !== undefined) view.setUint32(24, Number(data.ulFlags), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.lpszFileName !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpszFileName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.System.AddressBook.WABEXTDISPLAY (size: 64)
 */
export interface WABEXTDISPLAY {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.System.AddressBook.IWABObject */
  lpWABObject: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.AddressBook.IAddrBook */
  lpAdrBook: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.AddressBook.IMAPIProp */
  lpPropObj: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fReadOnly: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fDataChanged: boolean;
  /** u32 */
  ulFlags: number;
  /** ptr */
  lpv: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpsz: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWABEXTDISPLAY = 64;

export function allocWABEXTDISPLAY(data?: Partial<WABEXTDISPLAY>): Uint8Array {
  const buf = new Uint8Array(sizeofWABEXTDISPLAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpWABObject !== undefined) view.setBigUint64(8, data.lpWABObject === null ? 0n : BigInt(util.toPointer(data.lpWABObject)), true);
  // 0x10: pointer
  if (data?.lpAdrBook !== undefined) view.setBigUint64(16, data.lpAdrBook === null ? 0n : BigInt(util.toPointer(data.lpAdrBook)), true);
  // 0x18: pointer
  if (data?.lpPropObj !== undefined) view.setBigUint64(24, data.lpPropObj === null ? 0n : BigInt(util.toPointer(data.lpPropObj)), true);
  // 0x20: i32
  if (data?.fReadOnly !== undefined) view.setInt32(32, Number(data.fReadOnly), true);
  // 0x24: i32
  if (data?.fDataChanged !== undefined) view.setInt32(36, Number(data.fDataChanged), true);
  // 0x28: u32
  if (data?.ulFlags !== undefined) view.setUint32(40, Number(data.ulFlags), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.lpv !== undefined) view.setBigUint64(48, data.lpv === null ? 0n : BigInt(util.toPointer(data.lpv)), true);
  // 0x38: pointer
  if (data?.lpsz !== undefined) view.setBigUint64(56, data.lpsz === null ? 0n : BigInt(util.toPointer(data.lpsz)), true);
  return buf;
}

/**
 * Windows.Win32.System.AddressBook.NOTIFKEY (size: 16)
 */
export interface NOTIFKEY {
  /** u32 */
  cb: number;
  /** array */
  ab: Deno.PointerValue | null;
}

export const sizeofNOTIFKEY = 16;

export function allocNOTIFKEY(data?: Partial<NOTIFKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofNOTIFKEY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cb !== undefined) view.setUint32(0, Number(data.cb), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ab !== undefined) view.setBigUint64(8, data.ab === null ? 0n : BigInt(util.toPointer(data.ab)), true);
  return buf;
}

export type HINSTANCE = Deno.PointerValue;

// Native Libraries

try {
  var librtm_dll = Deno.dlopen("rtm.dll", {
    CreateTable: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "u32", "u32", "pointer", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libMAPI32_dll = Deno.dlopen("MAPI32.dll", {
    CreateIProp: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    MAPIInitIdle: {
      parameters: ["pointer"],
      result: "i32",
    },
    MAPIDeinitIdle: {
      parameters: [],
      result: "void",
    },
    FtgRegisterIdleRoutine: {
      parameters: ["pointer", "pointer", "i16", "u32", "u16"],
      result: "pointer",
    },
    DeregisterIdleRoutine: {
      parameters: ["pointer"],
      result: "void",
    },
    EnableIdleRoutine: {
      parameters: ["pointer", "i32"],
      result: "void",
    },
    ChangeIdleRoutine: {
      parameters: ["pointer", "pointer", "pointer", "i16", "u32", "u16", "u16"],
      result: "void",
    },
    MAPIGetDefaultMalloc: {
      parameters: [],
      result: "pointer",
    },
    OpenStreamOnFile: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PropCopyMore: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    UlPropSize: {
      parameters: ["pointer"],
      result: "u32",
    },
    FEqualNames: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    FPropContainsProp: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    FPropCompareProp: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    LPropCompareProp: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    HrAddColumns: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HrAddColumnsEx: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "isize"],
      result: "pointer",
    },
    HrAllocAdviseSink: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HrThisThreadAdviseSink: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    HrDispatchNotifications: {
      parameters: ["u32"],
      result: "pointer",
    },
    BuildDisplayTable: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    ScCountNotifications: {
      parameters: ["i32", "pointer", "pointer"],
      result: "i32",
    },
    ScCopyNotifications: {
      parameters: ["i32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    ScRelocNotifications: {
      parameters: ["i32", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    ScCountProps: {
      parameters: ["i32", "pointer", "pointer"],
      result: "i32",
    },
    LpValFindProp: {
      parameters: ["u32", "u32", "pointer"],
      result: "pointer",
    },
    ScCopyProps: {
      parameters: ["i32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    ScRelocProps: {
      parameters: ["i32", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    ScDupPropset: {
      parameters: ["i32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    UlAddRef: {
      parameters: ["pointer"],
      result: "u32",
    },
    UlRelease: {
      parameters: ["pointer"],
      result: "u32",
    },
    HrGetOneProp: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    HrSetOneProp: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    FPropExists: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    PpropFindProp: {
      parameters: ["pointer", "u32", "u32"],
      result: "pointer",
    },
    FreePadrlist: {
      parameters: ["pointer"],
      result: "void",
    },
    FreeProws: {
      parameters: ["pointer"],
      result: "void",
    },
    HrQueryAllRows: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "i32", "pointer"],
      result: "pointer",
    },
    SzFindCh: {
      parameters: ["pointer", "u16"],
      result: "pointer",
    },
    SzFindLastCh: {
      parameters: ["pointer", "u16"],
      result: "pointer",
    },
    SzFindSz: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    UFromSz: {
      parameters: ["pointer"],
      result: "u32",
    },
    ScUNCFromLocalPath: {
      parameters: ["buffer", "buffer", "u32"],
      result: "i32",
    },
    ScLocalPathFromUNC: {
      parameters: ["buffer", "buffer", "u32"],
      result: "i32",
    },
    FtAddFt: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    FtMulDwDw: {
      parameters: ["u32", "u32"],
      result: "pointer",
    },
    FtMulDw: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    FtSubFt: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    FtNegFt: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ScCreateConversationIndex: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    WrapStoreEntryID: {
      parameters: ["u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    RTFSync: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    WrapCompressedRTFStream: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    HrIStorageFromStream: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    ScInitMapiUtil: {
      parameters: ["u32"],
      result: "i32",
    },
    DeinitMapiUtil: {
      parameters: [],
      result: "void",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function CreateTable(
  lpInterface: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpAllocateBuffer: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.AddressBook.LPALLOCATEBUFFER */,
  lpAllocateMore: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.AddressBook.LPALLOCATEMORE */,
  lpFreeBuffer: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.AddressBook.LPFREEBUFFER */,
  lpvReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulTableType: number /* u32 */,
  ulPropTagIndexColumn: number /* u32 */,
  lpSPropTagArrayColumns: Deno.PointerValue | Uint8Array | null /* ptr */,
  lppTableData: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return librtm_dll.CreateTable(util.toPointer(lpInterface), util.toPointer(lpAllocateBuffer), util.toPointer(lpAllocateMore), util.toPointer(lpFreeBuffer), util.toPointer(lpvReserved), ulTableType, ulPropTagIndexColumn, util.toPointer(lpSPropTagArrayColumns), util.toPointer(lppTableData));
}

export function CreateIProp(
  lpInterface: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpAllocateBuffer: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.AddressBook.LPALLOCATEBUFFER */,
  lpAllocateMore: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.AddressBook.LPALLOCATEMORE */,
  lpFreeBuffer: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.AddressBook.LPFREEBUFFER */,
  lpvReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
  lppPropData: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libMAPI32_dll.CreateIProp(util.toPointer(lpInterface), util.toPointer(lpAllocateBuffer), util.toPointer(lpAllocateMore), util.toPointer(lpFreeBuffer), util.toPointer(lpvReserved), util.toPointer(lppPropData));
}

export function MAPIInitIdle(
  lpvReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libMAPI32_dll.MAPIInitIdle(util.toPointer(lpvReserved));
}

export function MAPIDeinitIdle(): void /* void */ {
  return libMAPI32_dll.MAPIDeinitIdle();
}

export function FtgRegisterIdleRoutine(
  lpfnIdle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.AddressBook.PFNIDLE */,
  lpvIdleParam: Deno.PointerValue | Uint8Array | null /* ptr */,
  priIdle: number /* i16 */,
  csecIdle: number /* u32 */,
  iroIdle: number /* u16 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libMAPI32_dll.FtgRegisterIdleRoutine(util.toPointer(lpfnIdle), util.toPointer(lpvIdleParam), priIdle, csecIdle, iroIdle));
}

export function DeregisterIdleRoutine(
  ftg: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libMAPI32_dll.DeregisterIdleRoutine(util.toPointer(ftg));
}

export function EnableIdleRoutine(
  ftg: Deno.PointerValue | Uint8Array | null /* ptr */,
  fEnable: boolean /* Windows.Win32.Foundation.BOOL */,
): void /* void */ {
  return libMAPI32_dll.EnableIdleRoutine(util.toPointer(ftg), util.boolToFfi(fEnable));
}

export function ChangeIdleRoutine(
  ftg: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpfnIdle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.AddressBook.PFNIDLE */,
  lpvIdleParam: Deno.PointerValue | Uint8Array | null /* ptr */,
  priIdle: number /* i16 */,
  csecIdle: number /* u32 */,
  iroIdle: number /* u16 */,
  ircIdle: number /* u16 */,
): void /* void */ {
  return libMAPI32_dll.ChangeIdleRoutine(util.toPointer(ftg), util.toPointer(lpfnIdle), util.toPointer(lpvIdleParam), priIdle, csecIdle, iroIdle, ircIdle);
}

export function MAPIGetDefaultMalloc(): Deno.PointerValue | null /* Windows.Win32.System.Com.IMalloc */ {
  return util.pointerFromFfi(libMAPI32_dll.MAPIGetDefaultMalloc());
}

export function OpenStreamOnFile(
  lpAllocateBuffer: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.AddressBook.LPALLOCATEBUFFER */,
  lpFreeBuffer: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.AddressBook.LPFREEBUFFER */,
  ulFlags: number /* u32 */,
  lpszFileName: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszPrefix: Deno.PointerValue | Uint8Array | null /* ptr */,
  lppStream: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libMAPI32_dll.OpenStreamOnFile(util.toPointer(lpAllocateBuffer), util.toPointer(lpFreeBuffer), ulFlags, util.toPointer(lpszFileName), util.toPointer(lpszPrefix), util.toPointer(lppStream)));
}

export function PropCopyMore(
  lpSPropValueDest: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpSPropValueSrc: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpfAllocMore: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.AddressBook.LPALLOCATEMORE */,
  lpvObject: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libMAPI32_dll.PropCopyMore(util.toPointer(lpSPropValueDest), util.toPointer(lpSPropValueSrc), util.toPointer(lpfAllocMore), util.toPointer(lpvObject));
}

export function UlPropSize(
  lpSPropValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMAPI32_dll.UlPropSize(util.toPointer(lpSPropValue));
}

export function FEqualNames(
  lpName1: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpName2: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libMAPI32_dll.FEqualNames(util.toPointer(lpName1), util.toPointer(lpName2)));
}

export function FPropContainsProp(
  lpSPropValueDst: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpSPropValueSrc: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFuzzyLevel: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libMAPI32_dll.FPropContainsProp(util.toPointer(lpSPropValueDst), util.toPointer(lpSPropValueSrc), ulFuzzyLevel));
}

export function FPropCompareProp(
  lpSPropValue1: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulRelOp: number /* u32 */,
  lpSPropValue2: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libMAPI32_dll.FPropCompareProp(util.toPointer(lpSPropValue1), ulRelOp, util.toPointer(lpSPropValue2)));
}

export function LPropCompareProp(
  lpSPropValueA: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpSPropValueB: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libMAPI32_dll.LPropCompareProp(util.toPointer(lpSPropValueA), util.toPointer(lpSPropValueB));
}

export function HrAddColumns(
  lptbl: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.AddressBook.IMAPITable */,
  lpproptagColumnsNew: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpAllocateBuffer: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.AddressBook.LPALLOCATEBUFFER */,
  lpFreeBuffer: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.AddressBook.LPFREEBUFFER */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libMAPI32_dll.HrAddColumns(util.toPointer(lptbl), util.toPointer(lpproptagColumnsNew), util.toPointer(lpAllocateBuffer), util.toPointer(lpFreeBuffer)));
}

export function HrAddColumnsEx(
  lptbl: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.AddressBook.IMAPITable */,
  lpproptagColumnsNew: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpAllocateBuffer: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.AddressBook.LPALLOCATEBUFFER */,
  lpFreeBuffer: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.AddressBook.LPFREEBUFFER */,
  lpfnFilterColumns: Deno.PointerValue /* isize */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libMAPI32_dll.HrAddColumnsEx(util.toPointer(lptbl), util.toPointer(lpproptagColumnsNew), util.toPointer(lpAllocateBuffer), util.toPointer(lpFreeBuffer), lpfnFilterColumns));
}

export function HrAllocAdviseSink(
  lpfnCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.AddressBook.LPNOTIFCALLBACK */,
  lpvContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  lppAdviseSink: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libMAPI32_dll.HrAllocAdviseSink(util.toPointer(lpfnCallback), util.toPointer(lpvContext), util.toPointer(lppAdviseSink)));
}

export function HrThisThreadAdviseSink(
  lpAdviseSink: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.AddressBook.IMAPIAdviseSink */,
  lppAdviseSink: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libMAPI32_dll.HrThisThreadAdviseSink(util.toPointer(lpAdviseSink), util.toPointer(lppAdviseSink)));
}

export function HrDispatchNotifications(
  ulFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libMAPI32_dll.HrDispatchNotifications(ulFlags));
}

export function BuildDisplayTable(
  lpAllocateBuffer: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.AddressBook.LPALLOCATEBUFFER */,
  lpAllocateMore: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.AddressBook.LPALLOCATEMORE */,
  lpFreeBuffer: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.AddressBook.LPFREEBUFFER */,
  lpMalloc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IMalloc */,
  hInstance: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  cPages: number /* u32 */,
  lpPage: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  lppTable: Deno.PointerValue | Uint8Array | null /* ptr */,
  lppTblData: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libMAPI32_dll.BuildDisplayTable(util.toPointer(lpAllocateBuffer), util.toPointer(lpAllocateMore), util.toPointer(lpFreeBuffer), util.toPointer(lpMalloc), util.toPointer(hInstance), cPages, util.toPointer(lpPage), ulFlags, util.toPointer(lppTable), util.toPointer(lppTblData)));
}

export function ScCountNotifications(
  cNotifications: number /* i32 */,
  lpNotifications: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcb: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libMAPI32_dll.ScCountNotifications(cNotifications, util.toPointer(lpNotifications), util.toPointer(lpcb));
}

export function ScCopyNotifications(
  cNotification: number /* i32 */,
  lpNotifications: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpvDst: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcb: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libMAPI32_dll.ScCopyNotifications(cNotification, util.toPointer(lpNotifications), util.toPointer(lpvDst), util.toPointer(lpcb));
}

export function ScRelocNotifications(
  cNotification: number /* i32 */,
  lpNotifications: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpvBaseOld: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpvBaseNew: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcb: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libMAPI32_dll.ScRelocNotifications(cNotification, util.toPointer(lpNotifications), util.toPointer(lpvBaseOld), util.toPointer(lpvBaseNew), util.toPointer(lpcb));
}

export function ScCountProps(
  cValues: number /* i32 */,
  lpPropArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcb: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libMAPI32_dll.ScCountProps(cValues, util.toPointer(lpPropArray), util.toPointer(lpcb));
}

export function LpValFindProp(
  ulPropTag: number /* u32 */,
  cValues: number /* u32 */,
  lpPropArray: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libMAPI32_dll.LpValFindProp(ulPropTag, cValues, util.toPointer(lpPropArray)));
}

export function ScCopyProps(
  cValues: number /* i32 */,
  lpPropArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpvDst: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcb: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libMAPI32_dll.ScCopyProps(cValues, util.toPointer(lpPropArray), util.toPointer(lpvDst), util.toPointer(lpcb));
}

export function ScRelocProps(
  cValues: number /* i32 */,
  lpPropArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpvBaseOld: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpvBaseNew: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcb: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libMAPI32_dll.ScRelocProps(cValues, util.toPointer(lpPropArray), util.toPointer(lpvBaseOld), util.toPointer(lpvBaseNew), util.toPointer(lpcb));
}

export function ScDupPropset(
  cValues: number /* i32 */,
  lpPropArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpAllocateBuffer: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.AddressBook.LPALLOCATEBUFFER */,
  lppPropArray: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libMAPI32_dll.ScDupPropset(cValues, util.toPointer(lpPropArray), util.toPointer(lpAllocateBuffer), util.toPointer(lppPropArray));
}

export function UlAddRef(
  lpunk: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMAPI32_dll.UlAddRef(util.toPointer(lpunk));
}

export function UlRelease(
  lpunk: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMAPI32_dll.UlRelease(util.toPointer(lpunk));
}

export function HrGetOneProp(
  lpMapiProp: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.AddressBook.IMAPIProp */,
  ulPropTag: number /* u32 */,
  lppProp: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libMAPI32_dll.HrGetOneProp(util.toPointer(lpMapiProp), ulPropTag, util.toPointer(lppProp)));
}

export function HrSetOneProp(
  lpMapiProp: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.AddressBook.IMAPIProp */,
  lpProp: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libMAPI32_dll.HrSetOneProp(util.toPointer(lpMapiProp), util.toPointer(lpProp)));
}

export function FPropExists(
  lpMapiProp: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.AddressBook.IMAPIProp */,
  ulPropTag: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libMAPI32_dll.FPropExists(util.toPointer(lpMapiProp), ulPropTag));
}

export function PpropFindProp(
  lpPropArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  cValues: number /* u32 */,
  ulPropTag: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libMAPI32_dll.PpropFindProp(util.toPointer(lpPropArray), cValues, ulPropTag));
}

export function FreePadrlist(
  lpAdrlist: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libMAPI32_dll.FreePadrlist(util.toPointer(lpAdrlist));
}

export function FreeProws(
  lpRows: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libMAPI32_dll.FreeProws(util.toPointer(lpRows));
}

export function HrQueryAllRows(
  lpTable: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.AddressBook.IMAPITable */,
  lpPropTags: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpRestriction: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpSortOrderSet: Deno.PointerValue | Uint8Array | null /* ptr */,
  crowsMax: number /* i32 */,
  lppRows: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libMAPI32_dll.HrQueryAllRows(util.toPointer(lpTable), util.toPointer(lpPropTags), util.toPointer(lpRestriction), util.toPointer(lpSortOrderSet), crowsMax, util.toPointer(lppRows)));
}

export function SzFindCh(
  lpsz: Deno.PointerValue | Uint8Array | null /* ptr */,
  ch: number /* u16 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libMAPI32_dll.SzFindCh(util.toPointer(lpsz), ch));
}

export function SzFindLastCh(
  lpsz: Deno.PointerValue | Uint8Array | null /* ptr */,
  ch: number /* u16 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libMAPI32_dll.SzFindLastCh(util.toPointer(lpsz), ch));
}

export function SzFindSz(
  lpsz: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszKey: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libMAPI32_dll.SzFindSz(util.toPointer(lpsz), util.toPointer(lpszKey)));
}

export function UFromSz(
  lpsz: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMAPI32_dll.UFromSz(util.toPointer(lpsz));
}

export function ScUNCFromLocalPath(
  lpszLocal: string | null /* Windows.Win32.Foundation.PSTR */,
  lpszUNC: string | null /* Windows.Win32.Foundation.PSTR */,
  cchUNC: number /* u32 */,
): number /* i32 */ {
  return libMAPI32_dll.ScUNCFromLocalPath(util.pstrToFfi(lpszLocal), util.pstrToFfi(lpszUNC), cchUNC);
}

export function ScLocalPathFromUNC(
  lpszUNC: string | null /* Windows.Win32.Foundation.PSTR */,
  lpszLocal: string | null /* Windows.Win32.Foundation.PSTR */,
  cchLocal: number /* u32 */,
): number /* i32 */ {
  return libMAPI32_dll.ScLocalPathFromUNC(util.pstrToFfi(lpszUNC), util.pstrToFfi(lpszLocal), cchLocal);
}

export function FtAddFt(
  ftAddend1: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.FILETIME */,
  ftAddend2: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.FILETIME */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.FILETIME */ {
  return util.pointerFromFfi(libMAPI32_dll.FtAddFt(util.toPointer(ftAddend1), util.toPointer(ftAddend2)));
}

export function FtMulDwDw(
  ftMultiplicand: number /* u32 */,
  ftMultiplier: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.FILETIME */ {
  return util.pointerFromFfi(libMAPI32_dll.FtMulDwDw(ftMultiplicand, ftMultiplier));
}

export function FtMulDw(
  ftMultiplier: number /* u32 */,
  ftMultiplicand: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.FILETIME */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.FILETIME */ {
  return util.pointerFromFfi(libMAPI32_dll.FtMulDw(ftMultiplier, util.toPointer(ftMultiplicand)));
}

export function FtSubFt(
  ftMinuend: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.FILETIME */,
  ftSubtrahend: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.FILETIME */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.FILETIME */ {
  return util.pointerFromFfi(libMAPI32_dll.FtSubFt(util.toPointer(ftMinuend), util.toPointer(ftSubtrahend)));
}

export function FtNegFt(
  ft: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.FILETIME */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.FILETIME */ {
  return util.pointerFromFfi(libMAPI32_dll.FtNegFt(util.toPointer(ft)));
}

export function ScCreateConversationIndex(
  cbParent: number /* u32 */,
  lpbParent: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbConvIndex: Deno.PointerValue | Uint8Array | null /* ptr */,
  lppbConvIndex: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libMAPI32_dll.ScCreateConversationIndex(cbParent, util.toPointer(lpbParent), util.toPointer(lpcbConvIndex), util.toPointer(lppbConvIndex));
}

export function WrapStoreEntryID(
  ulFlags: number /* u32 */,
  lpszDLLName: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbOrigEntry: number /* u32 */,
  lpOrigEntry: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbWrappedEntry: Deno.PointerValue | Uint8Array | null /* ptr */,
  lppWrappedEntry: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libMAPI32_dll.WrapStoreEntryID(ulFlags, util.toPointer(lpszDLLName), cbOrigEntry, util.toPointer(lpOrigEntry), util.toPointer(lpcbWrappedEntry), util.toPointer(lppWrappedEntry)));
}

export function RTFSync(
  lpMessage: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.AddressBook.IMessage */,
  ulFlags: number /* u32 */,
  lpfMessageUpdated: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libMAPI32_dll.RTFSync(util.toPointer(lpMessage), ulFlags, util.toPointer(lpfMessageUpdated)));
}

export function WrapCompressedRTFStream(
  lpCompressedRTFStream: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IStream */,
  ulFlags: number /* u32 */,
  lpUncompressedRTFStream: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libMAPI32_dll.WrapCompressedRTFStream(util.toPointer(lpCompressedRTFStream), ulFlags, util.toPointer(lpUncompressedRTFStream)));
}

export function HrIStorageFromStream(
  lpUnkIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  lpInterface: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  lppStorageOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libMAPI32_dll.HrIStorageFromStream(util.toPointer(lpUnkIn), util.toPointer(lpInterface), ulFlags, util.toPointer(lppStorageOut)));
}

export function ScInitMapiUtil(
  ulFlags: number /* u32 */,
): number /* i32 */ {
  return libMAPI32_dll.ScInitMapiUtil(ulFlags);
}

export function DeinitMapiUtil(): void /* void */ {
  return libMAPI32_dll.DeinitMapiUtil();
}

