/// Auto-generated by Deno Win32: Windows.Win32.System.Ioctl.Apis

import * as util from "../../util.ts";

// Enums
export type GPT_ATTRIBUTES = number | bigint;
export type USN_DELETE_FLAGS = number;
export type CHANGER_FEATURES = number;
export type TXFS_RMF_LAGS = number;
export type FILESYSTEM_STATISTICS_TYPE = number;
export type USN_SOURCE_INFO_ID = number;
export type FILE_STORAGE_TIER_FLAGS = number;
export type CHANGER_ELEMENT_STATUS_FLAGS = number;
export type GET_CHANGER_PARAMETERS_FEATURES1 = number;
export type STORAGE_MEDIA_TYPE = number;
export type STORAGE_BUS_TYPE = number;
export type STORAGE_QUERY_TYPE = number;
export type STORAGE_SET_TYPE = number;
export type STORAGE_PROPERTY_ID = number;
export type STORAGE_PORT_CODE_SET = number;
export type STORAGE_IDENTIFIER_CODE_SET = number;
export type STORAGE_IDENTIFIER_TYPE = number;
export type STORAGE_ID_NAA_FORMAT = number;
export type STORAGE_ASSOCIATION_TYPE = number;
export type STORAGE_RPMB_FRAME_TYPE = number;
export type STORAGE_CRYPTO_ALGORITHM_ID = number;
export type STORAGE_CRYPTO_KEY_SIZE = number;
export type STORAGE_TIER_MEDIA_TYPE = number;
export type STORAGE_TIER_CLASS = number;
export type STORAGE_PROTOCOL_TYPE = number;
export type STORAGE_PROTOCOL_NVME_DATA_TYPE = number;
export type STORAGE_PROTOCOL_ATA_DATA_TYPE = number;
export type STORAGE_PROTOCOL_UFS_DATA_TYPE = number;
export type STORAGE_DEVICE_FORM_FACTOR = number;
export type STORAGE_COMPONENT_HEALTH_STATUS = number;
export type STORAGE_DISK_HEALTH_STATUS = number;
export type STORAGE_DISK_OPERATIONAL_STATUS = number;
export type STORAGE_OPERATIONAL_STATUS_REASON = number;
export type STORAGE_ZONED_DEVICE_TYPES = number;
export type STORAGE_ZONE_TYPES = number;
export type STORAGE_ZONES_ATTRIBUTES = number;
export type STORAGE_ZONE_CONDITION = number;
export type STORAGE_DIAGNOSTIC_LEVEL = number;
export type STORAGE_DIAGNOSTIC_TARGET_TYPE = number;
export type DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE = number;
export type DEVICE_INTERNAL_STATUS_DATA_SET = number;
export type STORAGE_SANITIZE_METHOD = number;
export type WRITE_CACHE_TYPE = number;
export type WRITE_CACHE_ENABLE = number;
export type WRITE_CACHE_CHANGE = number;
export type WRITE_THROUGH = number;
export type DEVICEDUMP_COLLECTION_TYPEIDE_NOTIFICATION_TYPE = number;
export type STORAGE_POWERUP_REASON_TYPE = number;
export type STORAGE_DEVICE_POWER_CAP_UNITS = number;
export type STORAGE_RPMB_COMMAND_TYPE = number;
export type STORAGE_COUNTER_TYPE = number;
export type STORAGE_ATTRIBUTE_MGMT_ACTION = number;
export type SCM_REGION_FLAG = number;
export type SCM_BUS_QUERY_TYPE = number;
export type SCM_BUS_SET_TYPE = number;
export type SCM_BUS_PROPERTY_ID = number;
export type SCM_BUS_FIRMWARE_ACTIVATION_STATE = number;
export type SCM_PD_QUERY_TYPE = number;
export type SCM_PD_SET_TYPE = number;
export type SCM_PD_PROPERTY_ID = number;
export type SCM_PD_HEALTH_STATUS = number;
export type SCM_PD_OPERATIONAL_STATUS = number;
export type SCM_PD_OPERATIONAL_STATUS_REASON = number;
export type SCM_PD_LAST_FW_ACTIVATION_STATUS = number;
export type SCM_PD_FIRMWARE_ACTIVATION_STATE = number;
export type SCM_PD_MEDIA_REINITIALIZATION_STATUS = number;
export type MEDIA_TYPE = number;
export type PARTITION_STYLE = number;
export type DETECTION_TYPE = number;
export type DISK_CACHE_RETENTION_PRIORITY = number;
export type BIN_TYPES = number;
export type ELEMENT_TYPE = number;
export type CHANGER_DEVICE_PROBLEM_TYPE = number;
export type SHRINK_VOLUME_REQUEST_TYPES = number;
export type CSV_CONTROL_OP = number;
export type CSVFS_DISK_CONNECTIVITY = number;
export type STORAGE_RESERVE_ID = number;
export type QUERY_FILE_LAYOUT_FILTER_TYPE = number;
export type FILE_STORAGE_TIER_MEDIA_TYPE = number;
export type FILE_STORAGE_TIER_CLASS = number;
export type DUPLICATE_EXTENTS_STATE = number;
export type REFS_SMR_VOLUME_GC_STATE = number;
export type REFS_SMR_VOLUME_GC_ACTION = number;
export type REFS_SMR_VOLUME_GC_METHOD = number;
export type VIRTUAL_STORAGE_BEHAVIOR_CODE = number;
export type FS_BPIO_OPERATIONS = number;
export type FS_BPIO_INFLAGS = number;
export type FS_BPIO_OUTFLAGS = number;

// Constants
export const IOCTL_STORAGE_BASE = 45;
export const IOCTL_SCMBUS_BASE = 89;
export const IOCTL_DISK_BASE = 7;
export const IOCTL_CHANGER_BASE = 48;
export const FILE_SPECIAL_ACCESS = 0;
export const FILE_DEVICE_UNKNOWN = 34;
export const IOCTL_STORAGE_CHECK_VERIFY = 2967552;
export const IOCTL_STORAGE_CHECK_VERIFY2 = 2951168;
export const IOCTL_STORAGE_MEDIA_REMOVAL = 2967556;
export const IOCTL_STORAGE_EJECT_MEDIA = 2967560;
export const IOCTL_STORAGE_LOAD_MEDIA = 2967564;
export const IOCTL_STORAGE_LOAD_MEDIA2 = 2951180;
export const IOCTL_STORAGE_RESERVE = 2967568;
export const IOCTL_STORAGE_RELEASE = 2967572;
export const IOCTL_STORAGE_FIND_NEW_DEVICES = 2967576;
export const IOCTL_STORAGE_MANAGE_BYPASS_IO = 2951360;
export const IOCTL_STORAGE_EJECTION_CONTROL = 2951488;
export const IOCTL_STORAGE_MCN_CONTROL = 2951492;
export const IOCTL_STORAGE_GET_MEDIA_TYPES = 2952192;
export const IOCTL_STORAGE_GET_MEDIA_TYPES_EX = 2952196;
export const IOCTL_STORAGE_GET_MEDIA_SERIAL_NUMBER = 2952208;
export const IOCTL_STORAGE_GET_HOTPLUG_INFO = 2952212;
export const IOCTL_STORAGE_SET_HOTPLUG_INFO = 3001368;
export const IOCTL_STORAGE_RESET_BUS = 2969600;
export const IOCTL_STORAGE_RESET_DEVICE = 2969604;
export const IOCTL_STORAGE_BREAK_RESERVATION = 2969620;
export const IOCTL_STORAGE_PERSISTENT_RESERVE_IN = 2969624;
export const IOCTL_STORAGE_PERSISTENT_RESERVE_OUT = 3002396;
export const IOCTL_STORAGE_GET_DEVICE_NUMBER = 2953344;
export const IOCTL_STORAGE_GET_DEVICE_NUMBER_EX = 2953348;
export const IOCTL_STORAGE_PREDICT_FAILURE = 2953472;
export const IOCTL_STORAGE_FAILURE_PREDICTION_CONFIG = 2953476;
export const IOCTL_STORAGE_GET_COUNTERS = 2953480;
export const IOCTL_STORAGE_READ_CAPACITY = 2969920;
export const IOCTL_STORAGE_GET_DEVICE_TELEMETRY = 3002816;
export const IOCTL_STORAGE_DEVICE_TELEMETRY_NOTIFY = 3002820;
export const IOCTL_STORAGE_DEVICE_TELEMETRY_QUERY_CAPS = 3002824;
export const IOCTL_STORAGE_GET_DEVICE_TELEMETRY_RAW = 3002828;
export const IOCTL_STORAGE_SET_TEMPERATURE_THRESHOLD = 3002880;
export const IOCTL_STORAGE_PROTOCOL_COMMAND = 3003328;
export const IOCTL_STORAGE_SET_PROPERTY = 2987004;
export const IOCTL_STORAGE_QUERY_PROPERTY = 2954240;
export const IOCTL_STORAGE_MANAGE_DATA_SET_ATTRIBUTES = 2987012;
export const IOCTL_STORAGE_GET_LB_PROVISIONING_MAP_RESOURCES = 2970632;
export const IOCTL_STORAGE_REINITIALIZE_MEDIA = 2987584;
export const IOCTL_STORAGE_GET_BC_PROPERTIES = 2971648;
export const IOCTL_STORAGE_ALLOCATE_BC_STREAM = 3004420;
export const IOCTL_STORAGE_FREE_BC_STREAM = 3004424;
export const IOCTL_STORAGE_CHECK_PRIORITY_HINT_SUPPORT = 2955392;
export const IOCTL_STORAGE_START_DATA_INTEGRITY_CHECK = 3004548;
export const IOCTL_STORAGE_STOP_DATA_INTEGRITY_CHECK = 3004552;
export const OBSOLETE_IOCTL_STORAGE_RESET_BUS = 3002368;
export const OBSOLETE_IOCTL_STORAGE_RESET_DEVICE = 3002372;
export const IOCTL_STORAGE_FIRMWARE_GET_INFO = 2956288;
export const IOCTL_STORAGE_FIRMWARE_DOWNLOAD = 3005444;
export const IOCTL_STORAGE_FIRMWARE_ACTIVATE = 3005448;
export const IOCTL_STORAGE_ENABLE_IDLE_POWER = 2956416;
export const IOCTL_STORAGE_GET_IDLE_POWERUP_REASON = 2956420;
export const IOCTL_STORAGE_POWER_ACTIVE = 2956424;
export const IOCTL_STORAGE_POWER_IDLE = 2956428;
export const IOCTL_STORAGE_EVENT_NOTIFICATION = 2956432;
export const IOCTL_STORAGE_DEVICE_POWER_CAP = 2956436;
export const IOCTL_STORAGE_RPMB_COMMAND = 2956440;
export const IOCTL_STORAGE_ATTRIBUTE_MANAGEMENT = 3005596;
export const IOCTL_STORAGE_DIAGNOSTIC = 2956448;
export const IOCTL_STORAGE_GET_PHYSICAL_ELEMENT_STATUS = 2956452;
export const IOCTL_STORAGE_REMOVE_ELEMENT_AND_TRUNCATE = 2956480;
export const IOCTL_STORAGE_GET_DEVICE_INTERNAL_LOG = 2956484;
export const STORAGE_DEVICE_FLAGS_RANDOM_DEVICEGUID_REASON_CONFLICT = 1;
export const STORAGE_DEVICE_FLAGS_RANDOM_DEVICEGUID_REASON_NOHWID = 2;
export const STORAGE_DEVICE_FLAGS_PAGE_83_DEVICEGUID = 4;
export const RECOVERED_WRITES_VALID = 1;
export const UNRECOVERED_WRITES_VALID = 2;
export const RECOVERED_READS_VALID = 4;
export const UNRECOVERED_READS_VALID = 8;
export const WRITE_COMPRESSION_INFO_VALID = 16;
export const READ_COMPRESSION_INFO_VALID = 32;
export const TAPE_RETURN_STATISTICS = 0;
export const TAPE_RETURN_ENV_INFO = 1;
export const TAPE_RESET_STATISTICS = 2;
export const MEDIA_ERASEABLE = 1;
export const MEDIA_WRITE_ONCE = 2;
export const MEDIA_READ_ONLY = 4;
export const MEDIA_READ_WRITE = 8;
export const MEDIA_WRITE_PROTECTED = 256;
export const MEDIA_CURRENTLY_MOUNTED = 2147483648;
export const STORAGE_FAILURE_PREDICTION_CONFIG_V1 = 1;
export const SRB_TYPE_SCSI_REQUEST_BLOCK = 0;
export const SRB_TYPE_STORAGE_REQUEST_BLOCK = 1;
export const STORAGE_ADDRESS_TYPE_BTL8 = 0;
export const STORAGE_RPMB_DESCRIPTOR_VERSION_1 = 1;
export const STORAGE_RPMB_MINIMUM_RELIABLE_WRITE_SIZE = 512;
export const STORAGE_CRYPTO_CAPABILITY_VERSION_1 = 1;
export const STORAGE_CRYPTO_DESCRIPTOR_VERSION_1 = 1;
export const STORAGE_TIER_NAME_LENGTH = 256;
export const STORAGE_TIER_DESCRIPTION_LENGTH = 512;
export const STORAGE_TIER_FLAG_NO_SEEK_PENALTY = 131072;
export const STORAGE_TIER_FLAG_WRITE_BACK_CACHE = 2097152;
export const STORAGE_TIER_FLAG_READ_CACHE = 4194304;
export const STORAGE_TIER_FLAG_PARITY = 8388608;
export const STORAGE_TIER_FLAG_SMR = 16777216;
export const STORAGE_TEMPERATURE_VALUE_NOT_REPORTED = 32768;
export const STORAGE_TEMPERATURE_THRESHOLD_FLAG_ADAPTER_REQUEST = 1;
export const STORAGE_COMPONENT_ROLE_CACHE = 1;
export const STORAGE_COMPONENT_ROLE_TIERING = 2;
export const STORAGE_COMPONENT_ROLE_DATA = 4;
export const STORAGE_ATTRIBUTE_BYTE_ADDRESSABLE_IO = 1;
export const STORAGE_ATTRIBUTE_BLOCK_IO = 2;
export const STORAGE_ATTRIBUTE_DYNAMIC_PERSISTENCE = 4;
export const STORAGE_ATTRIBUTE_VOLATILE = 8;
export const STORAGE_ATTRIBUTE_ASYNC_EVENT_NOTIFICATION = 16;
export const STORAGE_ATTRIBUTE_PERF_SIZE_INDEPENDENT = 32;
export const STORAGE_DEVICE_MAX_OPERATIONAL_STATUS = 16;
export const STORAGE_ADAPTER_SERIAL_NUMBER_V1_MAX_LENGTH = 128;
export const DeviceDsmActionFlag_NonDestructive = 2147483648;
export const DEVICE_DSM_FLAG_ENTIRE_DATA_SET_RANGE = 1;
export const DEVICE_DSM_FLAG_TRIM_NOT_FS_ALLOCATED = 2147483648;
export const DEVICE_DSM_FLAG_TRIM_BYPASS_RZAT = 1073741824;
export const DEVICE_DSM_NOTIFY_FLAG_BEGIN = 1;
export const DEVICE_DSM_NOTIFY_FLAG_END = 2;
export const STORAGE_OFFLOAD_MAX_TOKEN_LENGTH = 512;
export const STORAGE_OFFLOAD_TOKEN_ID_LENGTH = 504;
export const STORAGE_OFFLOAD_TOKEN_TYPE_ZERO_DATA = 4294901761;
export const STORAGE_OFFLOAD_READ_RANGE_TRUNCATED = 1;
export const STORAGE_OFFLOAD_WRITE_RANGE_TRUNCATED = 1;
export const STORAGE_OFFLOAD_TOKEN_INVALID = 2;
export const DEVICE_DSM_FLAG_ALLOCATION_CONSOLIDATEABLE_ONLY = 1073741824;
export const DEVICE_DSM_PARAMETERS_V1 = 1;
export const DEVICE_DATA_SET_LBP_STATE_PARAMETERS_VERSION_V1 = 1;
export const DEVICE_DSM_FLAG_REPAIR_INPUT_TOPOLOGY_ID_PRESENT = 1073741824;
export const DEVICE_DSM_FLAG_REPAIR_OUTPUT_PARITY_EXTENT = 536870912;
export const DEVICE_DSM_FLAG_SCRUB_SKIP_IN_SYNC = 268435456;
export const DEVICE_DSM_FLAG_SCRUB_OUTPUT_PARITY_EXTENT = 536870912;
export const DEVICE_DSM_FLAG_PHYSICAL_ADDRESSES_OMIT_TOTAL_RANGES = 268435456;
export const DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT_V1 = 1;
export const DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT_VERSION_V1 = 1;
export const DEVICE_STORAGE_NO_ERRORS = 1;
export const DEVICE_DSM_RANGE_ERROR_OUTPUT_V1 = 1;
export const DEVICE_DSM_RANGE_ERROR_INFO_VERSION_V1 = 1;
export const IOCTL_STORAGE_BC_VERSION = 1;
export const STORAGE_PRIORITY_HINT_SUPPORTED = 1;
export const STORAGE_DIAGNOSTIC_FLAG_ADAPTER_REQUEST = 1;
export const ERROR_HISTORY_DIRECTORY_ENTRY_DEFAULT_COUNT = 8;
export const DEVICEDUMP_STRUCTURE_VERSION_V1 = 1;
export const DEVICEDUMP_MAX_IDSTRING = 32;
export const MAX_FW_BUCKET_ID_LENGTH = 132;
export const STORAGE_CRASH_TELEMETRY_REGKEY = `\\Registry\\Machine\\System\\CurrentControlSet\\Control\\CrashControl\\StorageTelemetry`;
export const STORAGE_DEVICE_TELEMETRY_REGKEY = `\\Registry\\Machine\\System\\CurrentControlSet\\Control\\Storage\\StorageTelemetry`;
export const DDUMP_FLAG_DATA_READ_FROM_DEVICE = 1;
export const FW_ISSUEID_NO_ISSUE = 0;
export const FW_ISSUEID_UNKNOWN = 4294967295;
export const TC_PUBLIC_DEVICEDUMP_CONTENT_SMART = 1;
export const TC_PUBLIC_DEVICEDUMP_CONTENT_GPLOG = 2;
export const TC_PUBLIC_DEVICEDUMP_CONTENT_GPLOG_MAX = 16;
export const TC_DEVICEDUMP_SUBSECTION_DESC_LENGTH = 16;
export const TC_PUBLIC_DATA_TYPE_ATAGP = `ATAGPLogPages`;
export const TC_PUBLIC_DATA_TYPE_ATASMART = `ATASMARTPages`;
export const CDB_SIZE = 16;
export const TELEMETRY_COMMAND_SIZE = 16;
export const DEVICEDUMP_CAP_PRIVATE_SECTION = 1;
export const DEVICEDUMP_CAP_RESTRICTED_SECTION = 2;
export const STORAGE_IDLE_POWERUP_REASON_VERSION_V1 = 1;
export const STORAGE_DEVICE_POWER_CAP_VERSION_V1 = 1;
export const STORAGE_EVENT_NOTIFICATION_VERSION_V1 = 1;
export const STORAGE_EVENT_MEDIA_STATUS = 1;
export const STORAGE_EVENT_DEVICE_STATUS = 2;
export const STORAGE_EVENT_DEVICE_OPERATION = 4;
export const READ_COPY_NUMBER_KEY = 1380142592;
export const READ_COPY_NUMBER_BYPASS_CACHE_FLAG = 256;
export const STORAGE_HW_FIRMWARE_REQUEST_FLAG_CONTROLLER = 1;
export const STORAGE_HW_FIRMWARE_REQUEST_FLAG_LAST_SEGMENT = 2;
export const STORAGE_HW_FIRMWARE_REQUEST_FLAG_FIRST_SEGMENT = 4;
export const STORAGE_HW_FIRMWARE_REQUEST_FLAG_SWITCH_TO_EXISTING_FIRMWARE = 2147483648;
export const STORAGE_HW_FIRMWARE_INVALID_SLOT = 255;
export const STORAGE_HW_FIRMWARE_REVISION_LENGTH = 16;
export const STORAGE_PROTOCOL_STRUCTURE_VERSION = 1;
export const STORAGE_PROTOCOL_COMMAND_FLAG_ADAPTER_REQUEST = 2147483648;
export const STORAGE_PROTOCOL_STATUS_PENDING = 0;
export const STORAGE_PROTOCOL_STATUS_SUCCESS = 1;
export const STORAGE_PROTOCOL_STATUS_ERROR = 2;
export const STORAGE_PROTOCOL_STATUS_INVALID_REQUEST = 3;
export const STORAGE_PROTOCOL_STATUS_NO_DEVICE = 4;
export const STORAGE_PROTOCOL_STATUS_BUSY = 5;
export const STORAGE_PROTOCOL_STATUS_DATA_OVERRUN = 6;
export const STORAGE_PROTOCOL_STATUS_INSUFFICIENT_RESOURCES = 7;
export const STORAGE_PROTOCOL_STATUS_THROTTLED_REQUEST = 8;
export const STORAGE_PROTOCOL_STATUS_NOT_SUPPORTED = 255;
export const STORAGE_PROTOCOL_COMMAND_LENGTH_NVME = 64;
export const STORAGE_PROTOCOL_SPECIFIC_NVME_ADMIN_COMMAND = 1;
export const STORAGE_PROTOCOL_SPECIFIC_NVME_NVM_COMMAND = 2;
export const STORATTRIBUTE_NONE = 0;
export const STORATTRIBUTE_MANAGEMENT_STATE = 1;
export const STORAGE_SUPPORTED_FEATURES_BYPASS_IO = 1;
export const STORAGE_SUPPORTED_FEATURES_MASK = 1;
export const FILE_DEVICE_BEEP = 1;
export const FILE_DEVICE_CD_ROM_FILE_SYSTEM = 3;
export const FILE_DEVICE_CONTROLLER = 4;
export const FILE_DEVICE_DATALINK = 5;
export const FILE_DEVICE_DFS = 6;
export const FILE_DEVICE_DISK_FILE_SYSTEM = 8;
export const FILE_DEVICE_FILE_SYSTEM = 9;
export const FILE_DEVICE_INPORT_PORT = 10;
export const FILE_DEVICE_KEYBOARD = 11;
export const FILE_DEVICE_MAILSLOT = 12;
export const FILE_DEVICE_MIDI_IN = 13;
export const FILE_DEVICE_MIDI_OUT = 14;
export const FILE_DEVICE_MOUSE = 15;
export const FILE_DEVICE_MULTI_UNC_PROVIDER = 16;
export const FILE_DEVICE_NAMED_PIPE = 17;
export const FILE_DEVICE_NETWORK = 18;
export const FILE_DEVICE_NETWORK_BROWSER = 19;
export const FILE_DEVICE_NETWORK_FILE_SYSTEM = 20;
export const FILE_DEVICE_NULL = 21;
export const FILE_DEVICE_PARALLEL_PORT = 22;
export const FILE_DEVICE_PHYSICAL_NETCARD = 23;
export const FILE_DEVICE_PRINTER = 24;
export const FILE_DEVICE_SCANNER = 25;
export const FILE_DEVICE_SERIAL_MOUSE_PORT = 26;
export const FILE_DEVICE_SERIAL_PORT = 27;
export const FILE_DEVICE_SCREEN = 28;
export const FILE_DEVICE_SOUND = 29;
export const FILE_DEVICE_STREAMS = 30;
export const FILE_DEVICE_TAPE_FILE_SYSTEM = 32;
export const FILE_DEVICE_TRANSPORT = 33;
export const FILE_DEVICE_VIDEO = 35;
export const FILE_DEVICE_VIRTUAL_DISK = 36;
export const FILE_DEVICE_WAVE_IN = 37;
export const FILE_DEVICE_WAVE_OUT = 38;
export const FILE_DEVICE_8042_PORT = 39;
export const FILE_DEVICE_NETWORK_REDIRECTOR = 40;
export const FILE_DEVICE_BATTERY = 41;
export const FILE_DEVICE_BUS_EXTENDER = 42;
export const FILE_DEVICE_MODEM = 43;
export const FILE_DEVICE_VDM = 44;
export const FILE_DEVICE_MASS_STORAGE = 45;
export const FILE_DEVICE_SMB = 46;
export const FILE_DEVICE_KS = 47;
export const FILE_DEVICE_CHANGER = 48;
export const FILE_DEVICE_ACPI = 50;
export const FILE_DEVICE_FULLSCREEN_VIDEO = 52;
export const FILE_DEVICE_DFS_FILE_SYSTEM = 53;
export const FILE_DEVICE_DFS_VOLUME = 54;
export const FILE_DEVICE_SERENUM = 55;
export const FILE_DEVICE_TERMSRV = 56;
export const FILE_DEVICE_KSEC = 57;
export const FILE_DEVICE_FIPS = 58;
export const FILE_DEVICE_INFINIBAND = 59;
export const FILE_DEVICE_VMBUS = 62;
export const FILE_DEVICE_CRYPT_PROVIDER = 63;
export const FILE_DEVICE_WPD = 64;
export const FILE_DEVICE_BLUETOOTH = 65;
export const FILE_DEVICE_MT_COMPOSITE = 66;
export const FILE_DEVICE_MT_TRANSPORT = 67;
export const FILE_DEVICE_BIOMETRIC = 68;
export const FILE_DEVICE_PMI = 69;
export const FILE_DEVICE_EHSTOR = 70;
export const FILE_DEVICE_DEVAPI = 71;
export const FILE_DEVICE_GPIO = 72;
export const FILE_DEVICE_USBEX = 73;
export const FILE_DEVICE_CONSOLE = 80;
export const FILE_DEVICE_NFP = 81;
export const FILE_DEVICE_SYSENV = 82;
export const FILE_DEVICE_VIRTUAL_BLOCK = 83;
export const FILE_DEVICE_POINT_OF_SERVICE = 84;
export const FILE_DEVICE_STORAGE_REPLICATION = 85;
export const FILE_DEVICE_TRUST_ENV = 86;
export const FILE_DEVICE_UCM = 87;
export const FILE_DEVICE_UCMTCPCI = 88;
export const FILE_DEVICE_PERSISTENT_MEMORY = 89;
export const FILE_DEVICE_NVDIMM = 90;
export const FILE_DEVICE_HOLOGRAPHIC = 91;
export const FILE_DEVICE_SDFXHCI = 92;
export const FILE_DEVICE_UCMUCSI = 93;
export const FILE_DEVICE_PRM = 94;
export const FILE_DEVICE_EVENT_COLLECTOR = 95;
export const FILE_DEVICE_USB4 = 96;
export const FILE_DEVICE_SOUNDWIRE = 97;
export const METHOD_BUFFERED = 0;
export const METHOD_IN_DIRECT = 1;
export const METHOD_OUT_DIRECT = 2;
export const METHOD_NEITHER = 3;
export const METHOD_DIRECT_TO_HARDWARE = 1;
export const METHOD_DIRECT_FROM_HARDWARE = 2;
export const FILE_ANY_ACCESS = 0;
export const FILE_READ_ACCESS = 1;
export const FILE_WRITE_ACCESS = 2;
export const STORAGE_DEVICE_NUMA_NODE_UNKNOWN = 4294967295;
export const IOCTL_SCMBUS_DEVICE_FUNCTION_BASE = 0;
export const IOCTL_SCM_LOGICAL_DEVICE_FUNCTION_BASE = 768;
export const IOCTL_SCM_PHYSICAL_DEVICE_FUNCTION_BASE = 1536;
export const IOCTL_SCM_BUS_GET_LOGICAL_DEVICES = 5832704;
export const IOCTL_SCM_BUS_GET_PHYSICAL_DEVICES = 5832708;
export const IOCTL_SCM_BUS_GET_REGIONS = 5832712;
export const IOCTL_SCM_BUS_QUERY_PROPERTY = 5832716;
export const IOCTL_SCM_BUS_SET_PROPERTY = 5865492;
export const IOCTL_SCM_BUS_RUNTIME_FW_ACTIVATE = 5865488;
export const IOCTL_SCM_LD_GET_INTERLEAVE_SET = 5835776;
export const IOCTL_SCM_PD_QUERY_PROPERTY = 5838848;
export const IOCTL_SCM_PD_FIRMWARE_DOWNLOAD = 5871620;
export const IOCTL_SCM_PD_FIRMWARE_ACTIVATE = 5871624;
export const IOCTL_SCM_PD_PASSTHROUGH = 5888012;
export const IOCTL_SCM_PD_UPDATE_MANAGEMENT_STATUS = 5838864;
export const IOCTL_SCM_PD_REINITIALIZE_MEDIA = 5871636;
export const IOCTL_SCM_PD_SET_PROPERTY = 5871640;
export const SCM_MAX_SYMLINK_LEN_IN_CHARS = 256;
export const MAX_INTERFACE_CODES = 8;
export const SCM_PD_FIRMWARE_REVISION_LENGTH_BYTES = 32;
export const SCM_PD_PROPERTY_NAME_LENGTH_IN_CHARS = 128;
export const SCM_PD_MAX_OPERATIONAL_STATUS = 16;
export const SCM_PD_FIRMWARE_LAST_DOWNLOAD = 1;
export const IOCTL_DISK_GET_DRIVE_GEOMETRY = 458752;
export const IOCTL_DISK_GET_PARTITION_INFO = 475140;
export const IOCTL_DISK_SET_PARTITION_INFO = 507912;
export const IOCTL_DISK_GET_DRIVE_LAYOUT = 475148;
export const IOCTL_DISK_SET_DRIVE_LAYOUT = 507920;
export const IOCTL_DISK_VERIFY = 458772;
export const IOCTL_DISK_FORMAT_TRACKS = 507928;
export const IOCTL_DISK_REASSIGN_BLOCKS = 507932;
export const IOCTL_DISK_PERFORMANCE = 458784;
export const IOCTL_DISK_IS_WRITABLE = 458788;
export const IOCTL_DISK_LOGGING = 458792;
export const IOCTL_DISK_FORMAT_TRACKS_EX = 507948;
export const IOCTL_DISK_HISTOGRAM_STRUCTURE = 458800;
export const IOCTL_DISK_HISTOGRAM_DATA = 458804;
export const IOCTL_DISK_HISTOGRAM_RESET = 458808;
export const IOCTL_DISK_REQUEST_STRUCTURE = 458812;
export const IOCTL_DISK_REQUEST_DATA = 458816;
export const IOCTL_DISK_PERFORMANCE_OFF = 458848;
export const IOCTL_DISK_CONTROLLER_NUMBER = 458820;
export const SMART_GET_VERSION = 475264;
export const SMART_SEND_DRIVE_COMMAND = 508036;
export const SMART_RCV_DRIVE_DATA = 508040;
export const SMART_RCV_DRIVE_DATA_EX = 458892;
export const IOCTL_DISK_GET_PARTITION_INFO_EX = 458824;
export const IOCTL_DISK_SET_PARTITION_INFO_EX = 507980;
export const IOCTL_DISK_GET_DRIVE_LAYOUT_EX = 458832;
export const IOCTL_DISK_SET_DRIVE_LAYOUT_EX = 507988;
export const IOCTL_DISK_CREATE_DISK = 507992;
export const IOCTL_DISK_GET_LENGTH_INFO = 475228;
export const IOCTL_DISK_GET_DRIVE_GEOMETRY_EX = 458912;
export const IOCTL_DISK_REASSIGN_BLOCKS_EX = 508068;
export const IOCTL_DISK_UPDATE_DRIVE_SIZE = 508104;
export const IOCTL_DISK_GROW_PARTITION = 508112;
export const IOCTL_DISK_GET_CACHE_INFORMATION = 475348;
export const IOCTL_DISK_SET_CACHE_INFORMATION = 508120;
export const IOCTL_DISK_GET_WRITE_CACHE_STATE = 475356;
export const OBSOLETE_DISK_GET_WRITE_CACHE_STATE = 475356;
export const IOCTL_DISK_DELETE_DRIVE_LAYOUT = 508160;
export const IOCTL_DISK_UPDATE_PROPERTIES = 459072;
export const IOCTL_DISK_FORMAT_DRIVE = 508876;
export const IOCTL_DISK_SENSE_DEVICE = 459744;
export const IOCTL_DISK_CHECK_VERIFY = 477184;
export const IOCTL_DISK_MEDIA_REMOVAL = 477188;
export const IOCTL_DISK_EJECT_MEDIA = 477192;
export const IOCTL_DISK_LOAD_MEDIA = 477196;
export const IOCTL_DISK_RESERVE = 477200;
export const IOCTL_DISK_RELEASE = 477204;
export const IOCTL_DISK_FIND_NEW_DEVICES = 477208;
export const IOCTL_DISK_GET_MEDIA_TYPES = 461824;
export const PARTITION_ENTRY_UNUSED = 0;
export const PARTITION_FAT_12 = 1;
export const PARTITION_XENIX_1 = 2;
export const PARTITION_XENIX_2 = 3;
export const PARTITION_FAT_16 = 4;
export const PARTITION_EXTENDED = 5;
export const PARTITION_HUGE = 6;
export const PARTITION_IFS = 7;
export const PARTITION_OS2BOOTMGR = 10;
export const PARTITION_FAT32 = 11;
export const PARTITION_FAT32_XINT13 = 12;
export const PARTITION_XINT13 = 14;
export const PARTITION_XINT13_EXTENDED = 15;
export const PARTITION_MSFT_RECOVERY = 39;
export const PARTITION_MAIN_OS = 40;
export const PARTIITON_OS_DATA = 41;
export const PARTITION_PRE_INSTALLED = 42;
export const PARTITION_BSP = 43;
export const PARTITION_DPP = 44;
export const PARTITION_WINDOWS_SYSTEM = 45;
export const PARTITION_PREP = 65;
export const PARTITION_LDM = 66;
export const PARTITION_DM = 84;
export const PARTITION_EZDRIVE = 85;
export const PARTITION_UNIX = 99;
export const PARTITION_SPACES_DATA = 215;
export const PARTITION_SPACES = 231;
export const PARTITION_GPT = 238;
export const PARTITION_SYSTEM = 239;
export const VALID_NTFT = 192;
export const PARTITION_NTFT = 128;
export const GPT_ATTRIBUTE_NO_BLOCK_IO_PROTOCOL = 2;
export const GPT_ATTRIBUTE_LEGACY_BIOS_BOOTABLE = 4;
export const GPT_BASIC_DATA_ATTRIBUTE_OFFLINE = 576460752303423488n;
export const GPT_BASIC_DATA_ATTRIBUTE_DAX = 288230376151711744n;
export const GPT_BASIC_DATA_ATTRIBUTE_SERVICE = 144115188075855872n;
export const GPT_SPACES_ATTRIBUTE_NO_METADATA = 9223372036854775808n;
export const HIST_NO_OF_BUCKETS = 24;
export const DISK_LOGGING_START = 0;
export const DISK_LOGGING_STOP = 1;
export const DISK_LOGGING_DUMP = 2;
export const DISK_BINNING = 3;
export const CAP_ATA_ID_CMD = 1;
export const CAP_ATAPI_ID_CMD = 2;
export const CAP_SMART_CMD = 4;
export const ATAPI_ID_CMD = 161;
export const ID_CMD = 236;
export const SMART_CMD = 176;
export const SMART_CYL_LOW = 79;
export const SMART_CYL_HI = 194;
export const SMART_NO_ERROR = 0;
export const SMART_IDE_ERROR = 1;
export const SMART_INVALID_FLAG = 2;
export const SMART_INVALID_COMMAND = 3;
export const SMART_INVALID_BUFFER = 4;
export const SMART_INVALID_DRIVE = 5;
export const SMART_INVALID_IOCTL = 6;
export const SMART_ERROR_NO_MEM = 7;
export const SMART_INVALID_REGISTER = 8;
export const SMART_NOT_SUPPORTED = 9;
export const SMART_NO_IDE_DEVICE = 10;
export const SMART_OFFLINE_ROUTINE_OFFLINE = 0;
export const SMART_SHORT_SELFTEST_OFFLINE = 1;
export const SMART_EXTENDED_SELFTEST_OFFLINE = 2;
export const SMART_ABORT_OFFLINE_SELFTEST = 127;
export const SMART_SHORT_SELFTEST_CAPTIVE = 129;
export const SMART_EXTENDED_SELFTEST_CAPTIVE = 130;
export const READ_ATTRIBUTE_BUFFER_SIZE = 512;
export const IDENTIFY_BUFFER_SIZE = 512;
export const READ_THRESHOLD_BUFFER_SIZE = 512;
export const SMART_LOG_SECTOR_SIZE = 512;
export const READ_ATTRIBUTES = 208;
export const READ_THRESHOLDS = 209;
export const ENABLE_DISABLE_AUTOSAVE = 210;
export const SAVE_ATTRIBUTE_VALUES = 211;
export const EXECUTE_OFFLINE_DIAGS = 212;
export const SMART_READ_LOG = 213;
export const SMART_WRITE_LOG = 214;
export const ENABLE_SMART = 216;
export const DISABLE_SMART = 217;
export const RETURN_SMART_STATUS = 218;
export const ENABLE_DISABLE_AUTO_OFFLINE = 219;
export const IOCTL_DISK_GET_DISK_ATTRIBUTES = 458992;
export const IOCTL_DISK_SET_DISK_ATTRIBUTES = 508148;
export const DISK_ATTRIBUTE_OFFLINE = 1;
export const DISK_ATTRIBUTE_READ_ONLY = 2;
export const IOCTL_DISK_RESET_SNAPSHOT_INFO = 508432;
export const IOCTL_CHANGER_GET_PARAMETERS = 3162112;
export const IOCTL_CHANGER_GET_STATUS = 3162116;
export const IOCTL_CHANGER_GET_PRODUCT_DATA = 3162120;
export const IOCTL_CHANGER_SET_ACCESS = 3194896;
export const IOCTL_CHANGER_GET_ELEMENT_STATUS = 3194900;
export const IOCTL_CHANGER_INITIALIZE_ELEMENT_STATUS = 3162136;
export const IOCTL_CHANGER_SET_POSITION = 3162140;
export const IOCTL_CHANGER_EXCHANGE_MEDIUM = 3162144;
export const IOCTL_CHANGER_MOVE_MEDIUM = 3162148;
export const IOCTL_CHANGER_REINITIALIZE_TRANSPORT = 3162152;
export const IOCTL_CHANGER_QUERY_VOLUME_TAGS = 3194924;
export const MAX_VOLUME_ID_SIZE = 36;
export const MAX_VOLUME_TEMPLATE_SIZE = 40;
export const VENDOR_ID_LENGTH = 8;
export const PRODUCT_ID_LENGTH = 16;
export const REVISION_LENGTH = 4;
export const SERIAL_NUMBER_LENGTH = 32;
export const CHANGER_RESERVED_BIT = 2147483648;
export const CHANGER_TO_TRANSPORT = 1;
export const CHANGER_TO_SLOT = 2;
export const CHANGER_TO_IEPORT = 4;
export const CHANGER_TO_DRIVE = 8;
export const LOCK_UNLOCK_IEPORT = 1;
export const LOCK_UNLOCK_DOOR = 2;
export const LOCK_UNLOCK_KEYPAD = 4;
export const LOCK_ELEMENT = 0;
export const UNLOCK_ELEMENT = 1;
export const EXTEND_IEPORT = 2;
export const RETRACT_IEPORT = 3;
export const ERROR_LABEL_UNREADABLE = 1;
export const ERROR_LABEL_QUESTIONABLE = 2;
export const ERROR_SLOT_NOT_PRESENT = 4;
export const ERROR_DRIVE_NOT_INSTALLED = 8;
export const ERROR_TRAY_MALFUNCTION = 16;
export const ERROR_INIT_STATUS_NEEDED = 17;
export const ERROR_UNHANDLED_ERROR = 4294967295;
export const SEARCH_ALL = 0;
export const SEARCH_PRIMARY = 1;
export const SEARCH_ALTERNATE = 2;
export const SEARCH_ALL_NO_SEQ = 4;
export const SEARCH_PRI_NO_SEQ = 5;
export const SEARCH_ALT_NO_SEQ = 6;
export const ASSERT_PRIMARY = 8;
export const ASSERT_ALTERNATE = 9;
export const REPLACE_PRIMARY = 10;
export const REPLACE_ALTERNATE = 11;
export const UNDEFINE_PRIMARY = 12;
export const UNDEFINE_ALTERNATE = 13;
export const IOCTL_SERIAL_LSRMST_INSERT = 1769596;
export const IOCTL_SERENUM_EXPOSE_HARDWARE = 3604992;
export const IOCTL_SERENUM_REMOVE_HARDWARE = 3604996;
export const IOCTL_SERENUM_PORT_DESC = 3605000;
export const IOCTL_SERENUM_GET_PORT_NAME = 3605004;
export const FSCTL_REQUEST_OPLOCK_LEVEL_1 = 589824;
export const FSCTL_REQUEST_OPLOCK_LEVEL_2 = 589828;
export const FSCTL_REQUEST_BATCH_OPLOCK = 589832;
export const FSCTL_OPLOCK_BREAK_ACKNOWLEDGE = 589836;
export const FSCTL_OPBATCH_ACK_CLOSE_PENDING = 589840;
export const FSCTL_OPLOCK_BREAK_NOTIFY = 589844;
export const FSCTL_LOCK_VOLUME = 589848;
export const FSCTL_UNLOCK_VOLUME = 589852;
export const FSCTL_DISMOUNT_VOLUME = 589856;
export const FSCTL_IS_VOLUME_MOUNTED = 589864;
export const FSCTL_IS_PATHNAME_VALID = 589868;
export const FSCTL_MARK_VOLUME_DIRTY = 589872;
export const FSCTL_QUERY_RETRIEVAL_POINTERS = 589883;
export const FSCTL_GET_COMPRESSION = 589884;
export const FSCTL_SET_COMPRESSION = 639040;
export const FSCTL_SET_BOOTLOADER_ACCESSED = 589903;
export const FSCTL_MARK_AS_SYSTEM_HIVE = 589903;
export const FSCTL_OPLOCK_BREAK_ACK_NO_2 = 589904;
export const FSCTL_INVALIDATE_VOLUMES = 589908;
export const FSCTL_QUERY_FAT_BPB = 589912;
export const FSCTL_REQUEST_FILTER_OPLOCK = 589916;
export const FSCTL_FILESYSTEM_GET_STATISTICS = 589920;
export const FSCTL_GET_NTFS_VOLUME_DATA = 589924;
export const FSCTL_GET_NTFS_FILE_RECORD = 589928;
export const FSCTL_GET_VOLUME_BITMAP = 589935;
export const FSCTL_GET_RETRIEVAL_POINTERS = 589939;
export const FSCTL_MOVE_FILE = 589940;
export const FSCTL_IS_VOLUME_DIRTY = 589944;
export const FSCTL_ALLOW_EXTENDED_DASD_IO = 589955;
export const FSCTL_FIND_FILES_BY_SID = 589967;
export const FSCTL_SET_OBJECT_ID = 589976;
export const FSCTL_GET_OBJECT_ID = 589980;
export const FSCTL_DELETE_OBJECT_ID = 589984;
export const FSCTL_SET_REPARSE_POINT = 589988;
export const FSCTL_GET_REPARSE_POINT = 589992;
export const FSCTL_DELETE_REPARSE_POINT = 589996;
export const FSCTL_ENUM_USN_DATA = 590003;
export const FSCTL_SECURITY_ID_CHECK = 606391;
export const FSCTL_READ_USN_JOURNAL = 590011;
export const FSCTL_SET_OBJECT_ID_EXTENDED = 590012;
export const FSCTL_CREATE_OR_GET_OBJECT_ID = 590016;
export const FSCTL_SET_SPARSE = 590020;
export const FSCTL_SET_ZERO_DATA = 622792;
export const FSCTL_QUERY_ALLOCATED_RANGES = 606415;
export const FSCTL_ENABLE_UPGRADE = 622800;
export const FSCTL_SET_ENCRYPTION = 590039;
export const FSCTL_ENCRYPTION_FSCTL_IO = 590043;
export const FSCTL_WRITE_RAW_ENCRYPTED = 590047;
export const FSCTL_READ_RAW_ENCRYPTED = 590051;
export const FSCTL_CREATE_USN_JOURNAL = 590055;
export const FSCTL_READ_FILE_USN_DATA = 590059;
export const FSCTL_WRITE_USN_CLOSE_RECORD = 590063;
export const FSCTL_EXTEND_VOLUME = 590064;
export const FSCTL_QUERY_USN_JOURNAL = 590068;
export const FSCTL_DELETE_USN_JOURNAL = 590072;
export const FSCTL_MARK_HANDLE = 590076;
export const FSCTL_SIS_COPYFILE = 590080;
export const FSCTL_SIS_LINK_FILES = 639236;
export const FSCTL_RECALL_FILE = 590103;
export const FSCTL_READ_FROM_PLEX = 606494;
export const FSCTL_FILE_PREFETCH = 590112;
export const FSCTL_MAKE_MEDIA_COMPATIBLE = 622896;
export const FSCTL_SET_DEFECT_MANAGEMENT = 622900;
export const FSCTL_QUERY_SPARING_INFO = 590136;
export const FSCTL_QUERY_ON_DISK_VOLUME_INFO = 590140;
export const FSCTL_SET_VOLUME_COMPRESSION_STATE = 590144;
export const FSCTL_TXFS_MODIFY_RM = 622916;
export const FSCTL_TXFS_QUERY_RM_INFORMATION = 606536;
export const FSCTL_TXFS_ROLLFORWARD_REDO = 622928;
export const FSCTL_TXFS_ROLLFORWARD_UNDO = 622932;
export const FSCTL_TXFS_START_RM = 622936;
export const FSCTL_TXFS_SHUTDOWN_RM = 622940;
export const FSCTL_TXFS_READ_BACKUP_INFORMATION = 606560;
export const FSCTL_TXFS_WRITE_BACKUP_INFORMATION = 622948;
export const FSCTL_TXFS_CREATE_SECONDARY_RM = 622952;
export const FSCTL_TXFS_GET_METADATA_INFO = 606572;
export const FSCTL_TXFS_GET_TRANSACTED_VERSION = 606576;
export const FSCTL_TXFS_SAVEPOINT_INFORMATION = 622968;
export const FSCTL_TXFS_CREATE_MINIVERSION = 622972;
export const FSCTL_TXFS_TRANSACTION_ACTIVE = 606604;
export const FSCTL_SET_ZERO_ON_DEALLOCATION = 590228;
export const FSCTL_SET_REPAIR = 590232;
export const FSCTL_GET_REPAIR = 590236;
export const FSCTL_WAIT_FOR_REPAIR = 590240;
export const FSCTL_INITIATE_REPAIR = 590248;
export const FSCTL_CSC_INTERNAL = 590255;
export const FSCTL_SHRINK_VOLUME = 590256;
export const FSCTL_SET_SHORT_NAME_BEHAVIOR = 590260;
export const FSCTL_DFSR_SET_GHOST_HANDLE_STATE = 590264;
export const FSCTL_TXFS_LIST_TRANSACTION_LOCKED_FILES = 606688;
export const FSCTL_TXFS_LIST_TRANSACTIONS = 606692;
export const FSCTL_QUERY_PAGEFILE_ENCRYPTION = 590312;
export const FSCTL_RESET_VOLUME_ALLOCATION_HINTS = 590316;
export const FSCTL_QUERY_DEPENDENT_VOLUME = 590320;
export const FSCTL_SD_GLOBAL_CHANGE = 590324;
export const FSCTL_TXFS_READ_BACKUP_INFORMATION2 = 590328;
export const FSCTL_LOOKUP_STREAM_FROM_CLUSTER = 590332;
export const FSCTL_TXFS_WRITE_BACKUP_INFORMATION2 = 590336;
export const FSCTL_FILE_TYPE_NOTIFICATION = 590340;
export const FSCTL_FILE_LEVEL_TRIM = 623112;
export const FSCTL_GET_BOOT_AREA_INFO = 590384;
export const FSCTL_GET_RETRIEVAL_POINTER_BASE = 590388;
export const FSCTL_SET_PERSISTENT_VOLUME_STATE = 590392;
export const FSCTL_QUERY_PERSISTENT_VOLUME_STATE = 590396;
export const FSCTL_REQUEST_OPLOCK = 590400;
export const FSCTL_CSV_TUNNEL_REQUEST = 590404;
export const FSCTL_IS_CSV_FILE = 590408;
export const FSCTL_QUERY_FILE_SYSTEM_RECOGNITION = 590412;
export const FSCTL_CSV_GET_VOLUME_PATH_NAME = 590416;
export const FSCTL_CSV_GET_VOLUME_NAME_FOR_VOLUME_MOUNT_POINT = 590420;
export const FSCTL_CSV_GET_VOLUME_PATH_NAMES_FOR_VOLUME_NAME = 590424;
export const FSCTL_IS_FILE_ON_CSV_VOLUME = 590428;
export const FSCTL_CORRUPTION_HANDLING = 590432;
export const FSCTL_OFFLOAD_READ = 606820;
export const FSCTL_OFFLOAD_WRITE = 623208;
export const FSCTL_CSV_INTERNAL = 590444;
export const FSCTL_SET_PURGE_FAILURE_MODE = 590448;
export const FSCTL_QUERY_FILE_LAYOUT = 590455;
export const FSCTL_IS_VOLUME_OWNED_BYCSVFS = 590456;
export const FSCTL_GET_INTEGRITY_INFORMATION = 590460;
export const FSCTL_SET_INTEGRITY_INFORMATION = 639616;
export const FSCTL_QUERY_FILE_REGIONS = 590468;
export const FSCTL_RKF_INTERNAL = 590511;
export const FSCTL_SCRUB_DATA = 590512;
export const FSCTL_REPAIR_COPIES = 639668;
export const FSCTL_DISABLE_LOCAL_BUFFERING = 590520;
export const FSCTL_CSV_MGMT_LOCK = 590524;
export const FSCTL_CSV_QUERY_DOWN_LEVEL_FILE_SYSTEM_CHARACTERISTICS = 590528;
export const FSCTL_ADVANCE_FILE_ID = 590532;
export const FSCTL_CSV_SYNC_TUNNEL_REQUEST = 590536;
export const FSCTL_CSV_QUERY_VETO_FILE_DIRECT_IO = 590540;
export const FSCTL_WRITE_USN_REASON = 590544;
export const FSCTL_CSV_CONTROL = 590548;
export const FSCTL_GET_REFS_VOLUME_DATA = 590552;
export const FSCTL_CSV_H_BREAKING_SYNC_TUNNEL_REQUEST = 590564;
export const FSCTL_QUERY_STORAGE_CLASSES = 590572;
export const FSCTL_QUERY_REGION_INFO = 590576;
export const FSCTL_USN_TRACK_MODIFIED_RANGES = 590580;
export const FSCTL_QUERY_SHARED_VIRTUAL_DISK_SUPPORT = 590592;
export const FSCTL_SVHDX_SYNC_TUNNEL_REQUEST = 590596;
export const FSCTL_SVHDX_SET_INITIATOR_INFORMATION = 590600;
export const FSCTL_SET_EXTERNAL_BACKING = 590604;
export const FSCTL_GET_EXTERNAL_BACKING = 590608;
export const FSCTL_DELETE_EXTERNAL_BACKING = 590612;
export const FSCTL_ENUM_EXTERNAL_BACKING = 590616;
export const FSCTL_ENUM_OVERLAY = 590623;
export const FSCTL_ADD_OVERLAY = 623408;
export const FSCTL_REMOVE_OVERLAY = 623412;
export const FSCTL_UPDATE_OVERLAY = 623416;
export const FSCTL_SHUFFLE_FILE = 639808;
export const FSCTL_DUPLICATE_EXTENTS_TO_FILE = 623428;
export const FSCTL_SPARSE_OVERALLOCATE = 590668;
export const FSCTL_STORAGE_QOS_CONTROL = 590672;
export const FSCTL_INITIATE_FILE_METADATA_OPTIMIZATION = 590684;
export const FSCTL_QUERY_FILE_METADATA_OPTIMIZATION = 590688;
export const FSCTL_SVHDX_ASYNC_TUNNEL_REQUEST = 590692;
export const FSCTL_GET_WOF_VERSION = 590696;
export const FSCTL_HCS_SYNC_TUNNEL_REQUEST = 590700;
export const FSCTL_HCS_ASYNC_TUNNEL_REQUEST = 590704;
export const FSCTL_QUERY_EXTENT_READ_CACHE_INFO = 590711;
export const FSCTL_QUERY_REFS_VOLUME_COUNTER_INFO = 590715;
export const FSCTL_CLEAN_VOLUME_METADATA = 590716;
export const FSCTL_SET_INTEGRITY_INFORMATION_EX = 590720;
export const FSCTL_SUSPEND_OVERLAY = 590724;
export const FSCTL_VIRTUAL_STORAGE_QUERY_PROPERTY = 590728;
export const FSCTL_FILESYSTEM_GET_STATISTICS_EX = 590732;
export const FSCTL_QUERY_VOLUME_CONTAINER_STATE = 590736;
export const FSCTL_SET_LAYER_ROOT = 590740;
export const FSCTL_QUERY_DIRECT_ACCESS_EXTENTS = 590747;
export const FSCTL_NOTIFY_STORAGE_SPACE_ALLOCATION = 590748;
export const FSCTL_SSDI_STORAGE_REQUEST = 590752;
export const FSCTL_QUERY_DIRECT_IMAGE_ORIGINAL_BASE = 590756;
export const FSCTL_READ_UNPRIVILEGED_USN_JOURNAL = 590763;
export const FSCTL_GHOST_FILE_EXTENTS = 623532;
export const FSCTL_QUERY_GHOSTED_FILE_EXTENTS = 590768;
export const FSCTL_UNMAP_SPACE = 590772;
export const FSCTL_HCS_SYNC_NO_WRITE_TUNNEL_REQUEST = 590776;
export const FSCTL_START_VIRTUALIZATION_INSTANCE = 590784;
export const FSCTL_GET_FILTER_FILE_IDENTIFIER = 590788;
export const FSCTL_STREAMS_QUERY_PARAMETERS = 590788;
export const FSCTL_STREAMS_ASSOCIATE_ID = 590792;
export const FSCTL_STREAMS_QUERY_ID = 590796;
export const FSCTL_GET_RETRIEVAL_POINTERS_AND_REFCOUNT = 590803;
export const FSCTL_QUERY_VOLUME_NUMA_INFO = 590804;
export const FSCTL_REFS_DEALLOCATE_RANGES = 590808;
export const FSCTL_QUERY_REFS_SMR_VOLUME_INFO = 590812;
export const FSCTL_SET_REFS_SMR_VOLUME_GC_PARAMETERS = 590816;
export const FSCTL_SET_REFS_FILE_STRICTLY_SEQUENTIAL = 590820;
export const FSCTL_DUPLICATE_EXTENTS_TO_FILE_EX = 623592;
export const FSCTL_QUERY_BAD_RANGES = 590828;
export const FSCTL_SET_DAX_ALLOC_ALIGNMENT_HINT = 590832;
export const FSCTL_DELETE_CORRUPTED_REFS_CONTAINER = 590836;
export const FSCTL_SCRUB_UNDISCOVERABLE_ID = 590840;
export const FSCTL_NOTIFY_DATA_CHANGE = 590844;
export const FSCTL_START_VIRTUALIZATION_INSTANCE_EX = 590848;
export const FSCTL_ENCRYPTION_KEY_CONTROL = 590852;
export const FSCTL_VIRTUAL_STORAGE_SET_BEHAVIOR = 590856;
export const FSCTL_SET_REPARSE_POINT_EX = 590860;
export const FSCTL_REARRANGE_FILE = 640032;
export const FSCTL_VIRTUAL_STORAGE_PASSTHROUGH = 590884;
export const FSCTL_GET_RETRIEVAL_POINTER_COUNT = 590891;
export const FSCTL_ENABLE_PER_IO_FLAGS = 590892;
export const FSCTL_QUERY_ASYNC_DUPLICATE_EXTENTS_STATUS = 590896;
export const FSCTL_SMB_SHARE_FLUSH_AND_PURGE = 590908;
export const FSCTL_REFS_STREAM_SNAPSHOT_MANAGEMENT = 590912;
export const FSCTL_MANAGE_BYPASS_IO = 590920;
export const GET_VOLUME_BITMAP_FLAG_MASK_METADATA = 1;
export const FLAG_USN_TRACK_MODIFIED_RANGES_ENABLE = 1;
export const USN_PAGE_SIZE = 4096;
export const USN_REASON_DATA_OVERWRITE = 1;
export const USN_REASON_DATA_EXTEND = 2;
export const USN_REASON_DATA_TRUNCATION = 4;
export const USN_REASON_NAMED_DATA_OVERWRITE = 16;
export const USN_REASON_NAMED_DATA_EXTEND = 32;
export const USN_REASON_NAMED_DATA_TRUNCATION = 64;
export const USN_REASON_FILE_CREATE = 256;
export const USN_REASON_FILE_DELETE = 512;
export const USN_REASON_EA_CHANGE = 1024;
export const USN_REASON_SECURITY_CHANGE = 2048;
export const USN_REASON_RENAME_OLD_NAME = 4096;
export const USN_REASON_RENAME_NEW_NAME = 8192;
export const USN_REASON_INDEXABLE_CHANGE = 16384;
export const USN_REASON_BASIC_INFO_CHANGE = 32768;
export const USN_REASON_HARD_LINK_CHANGE = 65536;
export const USN_REASON_COMPRESSION_CHANGE = 131072;
export const USN_REASON_ENCRYPTION_CHANGE = 262144;
export const USN_REASON_OBJECT_ID_CHANGE = 524288;
export const USN_REASON_REPARSE_POINT_CHANGE = 1048576;
export const USN_REASON_STREAM_CHANGE = 2097152;
export const USN_REASON_TRANSACTED_CHANGE = 4194304;
export const USN_REASON_INTEGRITY_CHANGE = 8388608;
export const USN_REASON_DESIRED_STORAGE_CLASS_CHANGE = 16777216;
export const USN_REASON_CLOSE = 2147483648;
export const USN_DELETE_VALID_FLAGS = 3;
export const MARK_HANDLE_PROTECT_CLUSTERS = 1;
export const MARK_HANDLE_TXF_SYSTEM_LOG = 4;
export const MARK_HANDLE_NOT_TXF_SYSTEM_LOG = 8;
export const MARK_HANDLE_REALTIME = 32;
export const MARK_HANDLE_NOT_REALTIME = 64;
export const MARK_HANDLE_CLOUD_SYNC = 2048;
export const MARK_HANDLE_READ_COPY = 128;
export const MARK_HANDLE_NOT_READ_COPY = 256;
export const MARK_HANDLE_FILTER_METADATA = 512;
export const MARK_HANDLE_RETURN_PURGE_FAILURE = 1024;
export const MARK_HANDLE_DISABLE_FILE_METADATA_OPTIMIZATION = 4096;
export const MARK_HANDLE_ENABLE_USN_SOURCE_ON_PAGING_IO = 8192;
export const MARK_HANDLE_SKIP_COHERENCY_SYNC_DISALLOW_WRITES = 16384;
export const MARK_HANDLE_SUPPRESS_VOLUME_OPEN_FLUSH = 32768;
export const MARK_HANDLE_ENABLE_CPU_CACHE = 268435456;
export const VOLUME_IS_DIRTY = 1;
export const VOLUME_UPGRADE_SCHEDULED = 2;
export const VOLUME_SESSION_OPEN = 4;
export const FILE_PREFETCH_TYPE_FOR_CREATE = 1;
export const FILE_PREFETCH_TYPE_FOR_DIRENUM = 2;
export const FILE_PREFETCH_TYPE_FOR_CREATE_EX = 3;
export const FILE_PREFETCH_TYPE_FOR_DIRENUM_EX = 4;
export const FILE_PREFETCH_TYPE_MAX = 4;
export const FILESYSTEM_STATISTICS_TYPE_REFS = 4;
export const FILE_ZERO_DATA_INFORMATION_FLAG_PRESERVE_CACHED_DATA = 1;
export const FILE_SET_ENCRYPTION = 1;
export const FILE_CLEAR_ENCRYPTION = 2;
export const STREAM_SET_ENCRYPTION = 3;
export const STREAM_CLEAR_ENCRYPTION = 4;
export const MAXIMUM_ENCRYPTION_VALUE = 4;
export const ENCRYPTION_FORMAT_DEFAULT = 1;
export const ENCRYPTED_DATA_INFO_SPARSE_FILE = 1;
export const COPYFILE_SIS_LINK = 1;
export const COPYFILE_SIS_REPLACE = 2;
export const COPYFILE_SIS_FLAGS = 3;
export const SET_REPAIR_ENABLED = 1;
export const SET_REPAIR_WARN_ABOUT_DATA_LOSS = 8;
export const SET_REPAIR_DISABLED_AND_BUGCHECK_ON_CORRUPT = 16;
export const SET_REPAIR_VALID_MASK = 25;
export const FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_NOT_IN_USE = 1;
export const FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_REUSED = 2;
export const FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_NOT_EXIST = 4;
export const FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_NOT_BASE_RECORD = 8;
export const FILE_INITIATE_REPAIR_HINT1_SYSTEM_FILE = 16;
export const FILE_INITIATE_REPAIR_HINT1_NOT_IMPLEMENTED = 32;
export const FILE_INITIATE_REPAIR_HINT1_UNABLE_TO_REPAIR = 64;
export const FILE_INITIATE_REPAIR_HINT1_REPAIR_DISABLED = 128;
export const FILE_INITIATE_REPAIR_HINT1_RECURSIVELY_CORRUPTED = 256;
export const FILE_INITIATE_REPAIR_HINT1_ORPHAN_GENERATED = 512;
export const FILE_INITIATE_REPAIR_HINT1_REPAIRED = 1024;
export const FILE_INITIATE_REPAIR_HINT1_NOTHING_WRONG = 2048;
export const FILE_INITIATE_REPAIR_HINT1_ATTRIBUTE_NOT_FOUND = 4096;
export const FILE_INITIATE_REPAIR_HINT1_POTENTIAL_CROSSLINK = 8192;
export const FILE_INITIATE_REPAIR_HINT1_STALE_INFORMATION = 16384;
export const FILE_INITIATE_REPAIR_HINT1_CLUSTERS_ALREADY_IN_USE = 32768;
export const FILE_INITIATE_REPAIR_HINT1_LCN_NOT_EXIST = 65536;
export const FILE_INITIATE_REPAIR_HINT1_INVALID_RUN_LENGTH = 131072;
export const FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_NOT_ORPHAN = 262144;
export const FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_IS_BASE_RECORD = 524288;
export const FILE_INITIATE_REPAIR_HINT1_INVALID_ARRAY_LENGTH_COUNT = 1048576;
export const FILE_INITIATE_REPAIR_HINT1_SID_VALID = 2097152;
export const FILE_INITIATE_REPAIR_HINT1_SID_MISMATCH = 4194304;
export const FILE_INITIATE_REPAIR_HINT1_INVALID_PARENT = 8388608;
export const FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_NOT_IN_USE = 16777216;
export const FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_REUSED = 33554432;
export const FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_NOT_EXIST = 67108864;
export const FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_NOT_BASE_RECORD = 134217728;
export const FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_NOT_INDEX = 268435456;
export const FILE_INITIATE_REPAIR_HINT1_VALID_INDEX_ENTRY = 536870912;
export const FILE_INITIATE_REPAIR_HINT1_OUT_OF_GENERIC_NAMES = 1073741824;
export const FILE_INITIATE_REPAIR_HINT1_OUT_OF_RESOURCE = 2147483648;
export const FILE_INITIATE_REPAIR_HINT1_INVALID_LCN = 4294967296;
export const FILE_INITIATE_REPAIR_HINT1_INVALID_VCN = 8589934592;
export const FILE_INITIATE_REPAIR_HINT1_NAME_CONFLICT = 17179869184;
export const FILE_INITIATE_REPAIR_HINT1_ORPHAN = 34359738368;
export const FILE_INITIATE_REPAIR_HINT1_ATTRIBUTE_TOO_SMALL = 68719476736;
export const FILE_INITIATE_REPAIR_HINT1_ATTRIBUTE_NON_RESIDENT = 137438953472;
export const FILE_INITIATE_REPAIR_HINT1_DENY_DEFRAG = 274877906944;
export const FILE_INITIATE_REPAIR_HINT1_PREVIOUS_PARENT_STILL_VALID = 549755813888;
export const FILE_INITIATE_REPAIR_HINT1_INDEX_ENTRY_MISMATCH = 1099511627776;
export const FILE_INITIATE_REPAIR_HINT1_INVALID_ORPHAN_RECOVERY_NAME = 2199023255552;
export const FILE_INITIATE_REPAIR_HINT1_MULTIPLE_FILE_NAME_ATTRIBUTES = 4398046511104;
export const TXFS_LOGGING_MODE_SIMPLE = 1;
export const TXFS_LOGGING_MODE_FULL = 2;
export const TXFS_TRANSACTION_STATE_NONE = 0;
export const TXFS_TRANSACTION_STATE_ACTIVE = 1;
export const TXFS_TRANSACTION_STATE_PREPARED = 2;
export const TXFS_TRANSACTION_STATE_NOTACTIVE = 3;
export const TXFS_RM_STATE_NOT_STARTED = 0;
export const TXFS_RM_STATE_STARTING = 1;
export const TXFS_RM_STATE_ACTIVE = 2;
export const TXFS_RM_STATE_SHUTTING_DOWN = 3;
export const TXFS_ROLLFORWARD_REDO_FLAG_USE_LAST_REDO_LSN = 1;
export const TXFS_ROLLFORWARD_REDO_FLAG_USE_LAST_VIRTUAL_CLOCK = 2;
export const TXFS_START_RM_FLAG_LOG_CONTAINER_COUNT_MAX = 1;
export const TXFS_START_RM_FLAG_LOG_CONTAINER_COUNT_MIN = 2;
export const TXFS_START_RM_FLAG_LOG_CONTAINER_SIZE = 4;
export const TXFS_START_RM_FLAG_LOG_GROWTH_INCREMENT_NUM_CONTAINERS = 8;
export const TXFS_START_RM_FLAG_LOG_GROWTH_INCREMENT_PERCENT = 16;
export const TXFS_START_RM_FLAG_LOG_AUTO_SHRINK_PERCENTAGE = 32;
export const TXFS_START_RM_FLAG_LOG_NO_CONTAINER_COUNT_MAX = 64;
export const TXFS_START_RM_FLAG_LOG_NO_CONTAINER_COUNT_MIN = 128;
export const TXFS_START_RM_FLAG_RECOVER_BEST_EFFORT = 512;
export const TXFS_START_RM_FLAG_LOGGING_MODE = 1024;
export const TXFS_START_RM_FLAG_PRESERVE_CHANGES = 2048;
export const TXFS_START_RM_FLAG_PREFER_CONSISTENCY = 4096;
export const TXFS_START_RM_FLAG_PREFER_AVAILABILITY = 8192;
export const TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY_FLAG_CREATED = 1;
export const TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY_FLAG_DELETED = 2;
export const TXFS_TRANSACTED_VERSION_NONTRANSACTED = 4294967294;
export const TXFS_TRANSACTED_VERSION_UNCOMMITTED = 4294967295;
export const TXFS_SAVEPOINT_SET = 1;
export const TXFS_SAVEPOINT_ROLLBACK = 2;
export const TXFS_SAVEPOINT_CLEAR = 4;
export const TXFS_SAVEPOINT_CLEAR_ALL = 16;
export const PERSISTENT_VOLUME_STATE_SHORT_NAME_CREATION_DISABLED = 1;
export const PERSISTENT_VOLUME_STATE_VOLUME_SCRUB_DISABLED = 2;
export const PERSISTENT_VOLUME_STATE_GLOBAL_METADATA_NO_SEEK_PENALTY = 4;
export const PERSISTENT_VOLUME_STATE_LOCAL_METADATA_NO_SEEK_PENALTY = 8;
export const PERSISTENT_VOLUME_STATE_NO_HEAT_GATHERING = 16;
export const PERSISTENT_VOLUME_STATE_CONTAINS_BACKING_WIM = 32;
export const PERSISTENT_VOLUME_STATE_BACKED_BY_WIM = 64;
export const PERSISTENT_VOLUME_STATE_NO_WRITE_AUTO_TIERING = 128;
export const PERSISTENT_VOLUME_STATE_TXF_DISABLED = 256;
export const PERSISTENT_VOLUME_STATE_REALLOCATE_ALL_DATA_WRITES = 512;
export const PERSISTENT_VOLUME_STATE_CHKDSK_RAN_ONCE = 1024;
export const PERSISTENT_VOLUME_STATE_MODIFIED_BY_CHKDSK = 2048;
export const PERSISTENT_VOLUME_STATE_DAX_FORMATTED = 4096;
export const OPLOCK_LEVEL_CACHE_READ = 1;
export const OPLOCK_LEVEL_CACHE_HANDLE = 2;
export const OPLOCK_LEVEL_CACHE_WRITE = 4;
export const REQUEST_OPLOCK_INPUT_FLAG_REQUEST = 1;
export const REQUEST_OPLOCK_INPUT_FLAG_ACK = 2;
export const REQUEST_OPLOCK_INPUT_FLAG_COMPLETE_ACK_ON_CLOSE = 4;
export const REQUEST_OPLOCK_CURRENT_VERSION = 1;
export const REQUEST_OPLOCK_OUTPUT_FLAG_ACK_REQUIRED = 1;
export const REQUEST_OPLOCK_OUTPUT_FLAG_MODES_PROVIDED = 2;
export const QUERY_DEPENDENT_VOLUME_REQUEST_FLAG_HOST_VOLUMES = 1;
export const QUERY_DEPENDENT_VOLUME_REQUEST_FLAG_GUEST_VOLUMES = 2;
export const SD_GLOBAL_CHANGE_TYPE_MACHINE_SID = 1;
export const SD_GLOBAL_CHANGE_TYPE_QUERY_STATS = 65536;
export const SD_GLOBAL_CHANGE_TYPE_ENUM_SDS = 131072;
export const LOOKUP_STREAM_FROM_CLUSTER_ENTRY_FLAG_PAGE_FILE = 1;
export const LOOKUP_STREAM_FROM_CLUSTER_ENTRY_FLAG_DENY_DEFRAG_SET = 2;
export const LOOKUP_STREAM_FROM_CLUSTER_ENTRY_FLAG_FS_SYSTEM_FILE = 4;
export const LOOKUP_STREAM_FROM_CLUSTER_ENTRY_FLAG_TXF_SYSTEM_FILE = 8;
export const LOOKUP_STREAM_FROM_CLUSTER_ENTRY_ATTRIBUTE_MASK = 4278190080;
export const LOOKUP_STREAM_FROM_CLUSTER_ENTRY_ATTRIBUTE_DATA = 16777216;
export const LOOKUP_STREAM_FROM_CLUSTER_ENTRY_ATTRIBUTE_INDEX = 33554432;
export const LOOKUP_STREAM_FROM_CLUSTER_ENTRY_ATTRIBUTE_SYSTEM = 50331648;
export const FILE_TYPE_NOTIFICATION_FLAG_USAGE_BEGIN = 1;
export const FILE_TYPE_NOTIFICATION_FLAG_USAGE_END = 2;
export const CSV_MGMTLOCK_CHECK_VOLUME_REDIRECTED = 1;
export const CSV_INVALID_DEVICE_NUMBER = 4294967295;
export const CSV_QUERY_MDS_PATH_V2_VERSION_1 = 1;
export const CSV_QUERY_MDS_PATH_FLAG_STORAGE_ON_THIS_NODE_IS_CONNECTED = 1;
export const CSV_QUERY_MDS_PATH_FLAG_CSV_DIRECT_IO_ENABLED = 2;
export const CSV_QUERY_MDS_PATH_FLAG_SMB_BYPASS_CSV_ENABLED = 4;
export const QUERY_FILE_LAYOUT_RESTART = 1;
export const QUERY_FILE_LAYOUT_INCLUDE_NAMES = 2;
export const QUERY_FILE_LAYOUT_INCLUDE_STREAMS = 4;
export const QUERY_FILE_LAYOUT_INCLUDE_EXTENTS = 8;
export const QUERY_FILE_LAYOUT_INCLUDE_EXTRA_INFO = 16;
export const QUERY_FILE_LAYOUT_INCLUDE_STREAMS_WITH_NO_CLUSTERS_ALLOCATED = 32;
export const QUERY_FILE_LAYOUT_INCLUDE_FULL_PATH_IN_NAMES = 64;
export const QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION = 128;
export const QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_DSC_ATTRIBUTE = 256;
export const QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_TXF_ATTRIBUTE = 512;
export const QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_EFS_ATTRIBUTE = 1024;
export const QUERY_FILE_LAYOUT_INCLUDE_ONLY_FILES_WITH_SPECIFIC_ATTRIBUTES = 2048;
export const QUERY_FILE_LAYOUT_INCLUDE_FILES_WITH_DSC_ATTRIBUTE = 4096;
export const QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_DATA_ATTRIBUTE = 8192;
export const QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_REPARSE_ATTRIBUTE = 16384;
export const QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_EA_ATTRIBUTE = 32768;
export const QUERY_FILE_LAYOUT_SINGLE_INSTANCED = 1;
export const FILE_LAYOUT_NAME_ENTRY_PRIMARY = 1;
export const FILE_LAYOUT_NAME_ENTRY_DOS = 2;
export const STREAM_LAYOUT_ENTRY_IMMOVABLE = 1;
export const STREAM_LAYOUT_ENTRY_PINNED = 2;
export const STREAM_LAYOUT_ENTRY_RESIDENT = 4;
export const STREAM_LAYOUT_ENTRY_NO_CLUSTERS_ALLOCATED = 8;
export const STREAM_LAYOUT_ENTRY_HAS_INFORMATION = 16;
export const STREAM_EXTENT_ENTRY_AS_RETRIEVAL_POINTERS = 1;
export const STREAM_EXTENT_ENTRY_ALL_EXTENTS = 2;
export const CHECKSUM_TYPE_UNCHANGED = `-1`;
export const CHECKSUM_TYPE_NONE = 0;
export const CHECKSUM_TYPE_CRC32 = 1;
export const CHECKSUM_TYPE_CRC64 = 2;
export const CHECKSUM_TYPE_ECC = 3;
export const CHECKSUM_TYPE_FIRST_UNUSED_TYPE = 4;
export const FSCTL_INTEGRITY_FLAG_CHECKSUM_ENFORCEMENT_OFF = 1;
export const OFFLOAD_READ_FLAG_ALL_ZERO_BEYOND_CURRENT_RANGE = 1;
export const SET_PURGE_FAILURE_MODE_ENABLED = 1;
export const SET_PURGE_FAILURE_MODE_DISABLED = 2;
export const FILE_REGION_USAGE_VALID_CACHED_DATA = 1;
export const FILE_REGION_USAGE_VALID_NONCACHED_DATA = 2;
export const FILE_REGION_USAGE_OTHER_PAGE_ALIGNMENT = 4;
export const FILE_REGION_USAGE_LARGE_PAGE_ALIGNMENT = 8;
export const FILE_REGION_USAGE_HUGE_PAGE_ALIGNMENT = 16;
export const FILE_REGION_USAGE_QUERY_ALIGNMENT = 8;
export const FILE_STORAGE_TIER_NAME_LENGTH = 256;
export const FILE_STORAGE_TIER_DESCRIPTION_LENGTH = 512;
export const FILE_STORAGE_TIER_FLAG_WRITE_BACK_CACHE = 2097152;
export const FILE_STORAGE_TIER_FLAG_READ_CACHE = 4194304;
export const FILE_STORAGE_TIER_FLAG_PARITY = 8388608;
export const FILE_STORAGE_TIER_FLAG_SMR = 16777216;
export const QUERY_STORAGE_CLASSES_FLAGS_MEASURE_WRITE = 2147483648;
export const QUERY_STORAGE_CLASSES_FLAGS_MEASURE_READ = 1073741824;
export const QUERY_STORAGE_CLASSES_FLAGS_NO_DEFRAG_VOLUME = 536870912;
export const QUERY_FILE_LAYOUT_REPARSE_DATA_INVALID = 1;
export const QUERY_FILE_LAYOUT_REPARSE_TAG_INVALID = 2;
export const DUPLICATE_EXTENTS_DATA_EX_SOURCE_ATOMIC = 1;
export const DUPLICATE_EXTENTS_DATA_EX_ASYNC = 2;
export const REFS_SMR_VOLUME_INFO_OUTPUT_VERSION_V0 = 0;
export const REFS_SMR_VOLUME_INFO_OUTPUT_VERSION_V1 = 1;
export const REFS_SMR_VOLUME_GC_PARAMETERS_VERSION_V1 = 1;
export const STREAMS_INVALID_ID = 0;
export const STREAMS_MAX_ID = 65535;
export const STREAMS_ASSOCIATE_ID_CLEAR = 1;
export const STREAMS_ASSOCIATE_ID_SET = 2;
export const DAX_ALLOC_ALIGNMENT_FLAG_MANDATORY = 1;
export const DAX_ALLOC_ALIGNMENT_FLAG_FALLBACK_SPECIFIED = 2;
export const WOF_CURRENT_VERSION = 1;
export const WOF_PROVIDER_CLOUD = 3;
export const WIM_PROVIDER_CURRENT_VERSION = 1;
export const WIM_PROVIDER_EXTERNAL_FLAG_NOT_ACTIVE = 1;
export const WIM_PROVIDER_EXTERNAL_FLAG_SUSPENDED = 2;
export const FILE_PROVIDER_CURRENT_VERSION = 1;
export const FILE_PROVIDER_SINGLE_FILE = 1;
export const FILE_PROVIDER_COMPRESSION_MAXIMUM = 4;
export const FILE_PROVIDER_FLAG_COMPRESS_ON_WRITE = 1;
export const CONTAINER_VOLUME_STATE_HOSTING_CONTAINER = 1;
export const CONTAINER_ROOT_INFO_FLAG_SCRATCH_ROOT = 1;
export const CONTAINER_ROOT_INFO_FLAG_LAYER_ROOT = 2;
export const CONTAINER_ROOT_INFO_FLAG_VIRTUALIZATION_ROOT = 4;
export const CONTAINER_ROOT_INFO_FLAG_VIRTUALIZATION_TARGET_ROOT = 8;
export const CONTAINER_ROOT_INFO_FLAG_VIRTUALIZATION_EXCEPTION_ROOT = 16;
export const CONTAINER_ROOT_INFO_FLAG_BIND_ROOT = 32;
export const CONTAINER_ROOT_INFO_FLAG_BIND_TARGET_ROOT = 64;
export const CONTAINER_ROOT_INFO_FLAG_BIND_EXCEPTION_ROOT = 128;
export const CONTAINER_ROOT_INFO_FLAG_BIND_DO_NOT_MAP_NAME = 256;
export const CONTAINER_ROOT_INFO_FLAG_UNION_LAYER_ROOT = 512;
export const CONTAINER_ROOT_INFO_VALID_FLAGS = 1023;
export const PROJFS_PROTOCOL_VERSION = 3;
export const EFS_TRACKED_OFFSET_HEADER_FLAG = 1;
export const SPACES_TRACKED_OFFSET_HEADER_FLAG = 2;
export const GPT_ATTRIBUTE_PLATFORM_REQUIRED = 1;
export const GPT_BASIC_DATA_ATTRIBUTE_NO_DRIVE_LETTER = 9223372036854775808n;
export const GPT_BASIC_DATA_ATTRIBUTE_HIDDEN = 4611686018427387904n;
export const GPT_BASIC_DATA_ATTRIBUTE_SHADOW_COPY = 2305843009213693952n;
export const GPT_BASIC_DATA_ATTRIBUTE_READ_ONLY = 1152921504606846976n;
export const USN_DELETE_FLAG_DELETE = 1;
export const USN_DELETE_FLAG_NOTIFY = 2;
export const CHANGER_BAR_CODE_SCANNER_INSTALLED = 1;
export const CHANGER_CARTRIDGE_MAGAZINE = 256;
export const CHANGER_CLEANER_ACCESS_NOT_VALID = 262144;
export const CHANGER_CLEANER_SLOT = 64;
export const CHANGER_CLOSE_IEPORT = 4;
export const CHANGER_DEVICE_REINITIALIZE_CAPABLE = 134217728;
export const CHANGER_DRIVE_CLEANING_REQUIRED = 65536;
export const CHANGER_DRIVE_EMPTY_ON_DOOR_ACCESS = 536870912;
export const CHANGER_EXCHANGE_MEDIA = 32;
export const CHANGER_INIT_ELEM_STAT_WITH_RANGE = 2;
export const CHANGER_KEYPAD_ENABLE_DISABLE = 268435456;
export const CHANGER_LOCK_UNLOCK = 128;
export const CHANGER_MEDIUM_FLIP = 512;
export const CHANGER_OPEN_IEPORT = 8;
export const CHANGER_POSITION_TO_ELEMENT = 1024;
export const CHANGER_PREDISMOUNT_EJECT_REQUIRED = 131072;
export const CHANGER_PREMOUNT_EJECT_REQUIRED = 524288;
export const CHANGER_REPORT_IEPORT_STATE = 2048;
export const CHANGER_SERIAL_NUMBER_VALID = 67108864;
export const CHANGER_STATUS_NON_VOLATILE = 16;
export const CHANGER_STORAGE_DRIVE = 4096;
export const CHANGER_STORAGE_IEPORT = 8192;
export const CHANGER_STORAGE_SLOT = 16384;
export const CHANGER_STORAGE_TRANSPORT = 32768;
export const CHANGER_VOLUME_ASSERT = 4194304;
export const CHANGER_VOLUME_IDENTIFICATION = 1048576;
export const CHANGER_VOLUME_REPLACE = 8388608;
export const CHANGER_VOLUME_SEARCH = 2097152;
export const CHANGER_VOLUME_UNDEFINE = 16777216;
export const TXFS_RM_FLAG_LOGGING_MODE = 1;
export const TXFS_RM_FLAG_RENAME_RM = 2;
export const TXFS_RM_FLAG_LOG_CONTAINER_COUNT_MAX = 4;
export const TXFS_RM_FLAG_LOG_CONTAINER_COUNT_MIN = 8;
export const TXFS_RM_FLAG_LOG_GROWTH_INCREMENT_NUM_CONTAINERS = 16;
export const TXFS_RM_FLAG_LOG_GROWTH_INCREMENT_PERCENT = 32;
export const TXFS_RM_FLAG_LOG_AUTO_SHRINK_PERCENTAGE = 64;
export const TXFS_RM_FLAG_LOG_NO_CONTAINER_COUNT_MAX = 128;
export const TXFS_RM_FLAG_LOG_NO_CONTAINER_COUNT_MIN = 256;
export const TXFS_RM_FLAG_GROW_LOG = 1024;
export const TXFS_RM_FLAG_SHRINK_LOG = 2048;
export const TXFS_RM_FLAG_ENFORCE_MINIMUM_SIZE = 4096;
export const TXFS_RM_FLAG_PRESERVE_CHANGES = 8192;
export const TXFS_RM_FLAG_RESET_RM_AT_NEXT_START = 16384;
export const TXFS_RM_FLAG_DO_NOT_RESET_RM_AT_NEXT_START = 32768;
export const TXFS_RM_FLAG_PREFER_CONSISTENCY = 65536;
export const TXFS_RM_FLAG_PREFER_AVAILABILITY = 131072;
export const FILESYSTEM_STATISTICS_TYPE_EXFAT = 3;
export const FILESYSTEM_STATISTICS_TYPE_FAT = 2;
export const FILESYSTEM_STATISTICS_TYPE_NTFS = 1;
export const USN_SOURCE_AUXILIARY_DATA = 2;
export const USN_SOURCE_DATA_MANAGEMENT = 1;
export const USN_SOURCE_REPLICATION_MANAGEMENT = 4;
export const USN_SOURCE_CLIENT_REPLICATION_MANAGEMENT = 8;
export const FILE_STORAGE_TIER_FLAG_NO_SEEK_PENALTY = 131072;
export const ELEMENT_STATUS_ACCESS = 8;
export const ELEMENT_STATUS_AVOLTAG = 536870912;
export const ELEMENT_STATUS_EXCEPT = 4;
export const ELEMENT_STATUS_EXENAB = 16;
export const ELEMENT_STATUS_FULL = 1;
export const ELEMENT_STATUS_ID_VALID = 8192;
export const ELEMENT_STATUS_IMPEXP = 2;
export const ELEMENT_STATUS_INENAB = 32;
export const ELEMENT_STATUS_INVERT = 4194304;
export const ELEMENT_STATUS_LUN_VALID = 4096;
export const ELEMENT_STATUS_NOT_BUS = 32768;
export const ELEMENT_STATUS_PVOLTAG = 268435456;
export const ELEMENT_STATUS_SVALID = 8388608;
export const ELEMENT_STATUS_PRODUCT_DATA = 64;
export const CHANGER_CLEANER_AUTODISMOUNT = 2147483652;
export const CHANGER_CLEANER_OPS_NOT_SUPPORTED = 2147483712;
export const CHANGER_IEPORT_USER_CONTROL_CLOSE = 2147483904;
export const CHANGER_IEPORT_USER_CONTROL_OPEN = 2147483776;
export const CHANGER_MOVE_EXTENDS_IEPORT = 2147484160;
export const CHANGER_MOVE_RETRACTS_IEPORT = 2147484672;
export const CHANGER_PREDISMOUNT_ALIGN_TO_DRIVE = 2147483650;
export const CHANGER_PREDISMOUNT_ALIGN_TO_SLOT = 2147483649;
export const CHANGER_RTN_MEDIA_TO_ORIGINAL_ADDR = 2147483680;
export const CHANGER_SLOTS_USE_TRAYS = 2147483664;
export const CHANGER_TRUE_EXCHANGE_CAPABLE = 2147483656;
export const DDS_4mm = 32;
export const MiniQic = 33;
export const Travan = 34;
export const QIC = 35;
export const MP_8mm = 36;
export const AME_8mm = 37;
export const AIT1_8mm = 38;
export const DLT = 39;
export const NCTP = 40;
export const IBM_3480 = 41;
export const IBM_3490E = 42;
export const IBM_Magstar_3590 = 43;
export const IBM_Magstar_MP = 44;
export const STK_DATA_D3 = 45;
export const SONY_DTF = 46;
export const DV_6mm = 47;
export const DMI = 48;
export const SONY_D2 = 49;
export const CLEANER_CARTRIDGE = 50;
export const CD_ROM = 51;
export const CD_R = 52;
export const CD_RW = 53;
export const DVD_ROM = 54;
export const DVD_R = 55;
export const DVD_RW = 56;
export const MO_3_RW = 57;
export const MO_5_WO = 58;
export const MO_5_RW = 59;
export const MO_5_LIMDOW = 60;
export const PC_5_WO = 61;
export const PC_5_RW = 62;
export const PD_5_RW = 63;
export const ABL_5_WO = 64;
export const PINNACLE_APEX_5_RW = 65;
export const SONY_12_WO = 66;
export const PHILIPS_12_WO = 67;
export const HITACHI_12_WO = 68;
export const CYGNET_12_WO = 69;
export const KODAK_14_WO = 70;
export const MO_NFR_525 = 71;
export const NIKON_12_RW = 72;
export const IOMEGA_ZIP = 73;
export const IOMEGA_JAZ = 74;
export const SYQUEST_EZ135 = 75;
export const SYQUEST_EZFLYER = 76;
export const SYQUEST_SYJET = 77;
export const AVATAR_F2 = 78;
export const MP2_8mm = 79;
export const DST_S = 80;
export const DST_M = 81;
export const DST_L = 82;
export const VXATape_1 = 83;
export const VXATape_2 = 84;
export const STK_9840 = 85;
export const LTO_Ultrium = 86;
export const LTO_Accelis = 87;
export const DVD_RAM = 88;
export const AIT_8mm = 89;
export const ADR_1 = 90;
export const ADR_2 = 91;
export const STK_9940 = 92;
export const SAIT = 93;
export const VXATape = 94;
export const BusTypeUnknown = 0;
export const BusTypeScsi = 1;
export const BusTypeAtapi = 2;
export const BusTypeAta = 3;
export const BusType1394 = 4;
export const BusTypeSsa = 5;
export const BusTypeFibre = 6;
export const BusTypeUsb = 7;
export const BusTypeRAID = 8;
export const BusTypeiScsi = 9;
export const BusTypeSas = 10;
export const BusTypeSata = 11;
export const BusTypeSd = 12;
export const BusTypeMmc = 13;
export const BusTypeVirtual = 14;
export const BusTypeFileBackedVirtual = 15;
export const BusTypeSpaces = 16;
export const BusTypeNvme = 17;
export const BusTypeSCM = 18;
export const BusTypeUfs = 19;
export const BusTypeMax = 20;
export const BusTypeMaxReserved = 127;
export const PropertyStandardQuery = 0;
export const PropertyExistsQuery = 1;
export const PropertyMaskQuery = 2;
export const PropertyQueryMaxDefined = 3;
export const PropertyStandardSet = 0;
export const PropertyExistsSet = 1;
export const PropertySetMaxDefined = 2;
export const StorageDeviceProperty = 0;
export const StorageAdapterProperty = 1;
export const StorageDeviceIdProperty = 2;
export const StorageDeviceUniqueIdProperty = 3;
export const StorageDeviceWriteCacheProperty = 4;
export const StorageMiniportProperty = 5;
export const StorageAccessAlignmentProperty = 6;
export const StorageDeviceSeekPenaltyProperty = 7;
export const StorageDeviceTrimProperty = 8;
export const StorageDeviceWriteAggregationProperty = 9;
export const StorageDeviceDeviceTelemetryProperty = 10;
export const StorageDeviceLBProvisioningProperty = 11;
export const StorageDevicePowerProperty = 12;
export const StorageDeviceCopyOffloadProperty = 13;
export const StorageDeviceResiliencyProperty = 14;
export const StorageDeviceMediumProductType = 15;
export const StorageAdapterRpmbProperty = 16;
export const StorageAdapterCryptoProperty = 17;
export const StorageDeviceIoCapabilityProperty = 48;
export const StorageAdapterProtocolSpecificProperty = 49;
export const StorageDeviceProtocolSpecificProperty = 50;
export const StorageAdapterTemperatureProperty = 51;
export const StorageDeviceTemperatureProperty = 52;
export const StorageAdapterPhysicalTopologyProperty = 53;
export const StorageDevicePhysicalTopologyProperty = 54;
export const StorageDeviceAttributesProperty = 55;
export const StorageDeviceManagementStatus = 56;
export const StorageAdapterSerialNumberProperty = 57;
export const StorageDeviceLocationProperty = 58;
export const StorageDeviceNumaProperty = 59;
export const StorageDeviceZonedDeviceProperty = 60;
export const StorageDeviceUnsafeShutdownCount = 61;
export const StorageDeviceEnduranceProperty = 62;
export const StorageDeviceLedStateProperty = 63;
export const StorageDeviceSelfEncryptionProperty = 64;
export const StorageFruIdProperty = 65;
export const StoragePortCodeSetReserved = 0;
export const StoragePortCodeSetStorport = 1;
export const StoragePortCodeSetSCSIport = 2;
export const StoragePortCodeSetSpaceport = 3;
export const StoragePortCodeSetATAport = 4;
export const StoragePortCodeSetUSBport = 5;
export const StoragePortCodeSetSBP2port = 6;
export const StoragePortCodeSetSDport = 7;
export const StorageIdCodeSetReserved = 0;
export const StorageIdCodeSetBinary = 1;
export const StorageIdCodeSetAscii = 2;
export const StorageIdCodeSetUtf8 = 3;
export const StorageIdTypeVendorSpecific = 0;
export const StorageIdTypeVendorId = 1;
export const StorageIdTypeEUI64 = 2;
export const StorageIdTypeFCPHName = 3;
export const StorageIdTypePortRelative = 4;
export const StorageIdTypeTargetPortGroup = 5;
export const StorageIdTypeLogicalUnitGroup = 6;
export const StorageIdTypeMD5LogicalUnitIdentifier = 7;
export const StorageIdTypeScsiNameString = 8;
export const StorageIdNAAFormatIEEEExtended = 2;
export const StorageIdNAAFormatIEEERegistered = 3;
export const StorageIdNAAFormatIEEEERegisteredExtended = 5;
export const StorageIdAssocDevice = 0;
export const StorageIdAssocPort = 1;
export const StorageIdAssocTarget = 2;
export const StorageRpmbFrameTypeUnknown = 0;
export const StorageRpmbFrameTypeStandard = 1;
export const StorageRpmbFrameTypeMax = 2;
export const StorageCryptoAlgorithmUnknown = 0;
export const StorageCryptoAlgorithmXTSAES = 1;
export const StorageCryptoAlgorithmBitlockerAESCBC = 2;
export const StorageCryptoAlgorithmAESECB = 3;
export const StorageCryptoAlgorithmESSIVAESCBC = 4;
export const StorageCryptoAlgorithmMax = 5;
export const StorageCryptoKeySizeUnknown = 0;
export const StorageCryptoKeySize128Bits = 1;
export const StorageCryptoKeySize192Bits = 2;
export const StorageCryptoKeySize256Bits = 3;
export const StorageCryptoKeySize512Bits = 4;
export const StorageTierMediaTypeUnspecified = 0;
export const StorageTierMediaTypeDisk = 1;
export const StorageTierMediaTypeSsd = 2;
export const StorageTierMediaTypeScm = 4;
export const StorageTierMediaTypeMax = 5;
export const StorageTierClassUnspecified = 0;
export const StorageTierClassCapacity = 1;
export const StorageTierClassPerformance = 2;
export const StorageTierClassMax = 3;
export const ProtocolTypeUnknown = 0;
export const ProtocolTypeScsi = 1;
export const ProtocolTypeAta = 2;
export const ProtocolTypeNvme = 3;
export const ProtocolTypeSd = 4;
export const ProtocolTypeUfs = 5;
export const ProtocolTypeProprietary = 126;
export const ProtocolTypeMaxReserved = 127;
export const NVMeDataTypeUnknown = 0;
export const NVMeDataTypeIdentify = 1;
export const NVMeDataTypeLogPage = 2;
export const NVMeDataTypeFeature = 3;
export const AtaDataTypeUnknown = 0;
export const AtaDataTypeIdentify = 1;
export const AtaDataTypeLogPage = 2;
export const UfsDataTypeUnknown = 0;
export const UfsDataTypeQueryDescriptor = 1;
export const UfsDataTypeQueryAttribute = 2;
export const UfsDataTypeQueryFlag = 3;
export const UfsDataTypeQueryDmeAttribute = 4;
export const UfsDataTypeQueryDmePeerAttribute = 5;
export const UfsDataTypeMax = 6;
export const FormFactorUnknown = 0;
export const FormFactor3_5 = 1;
export const FormFactor2_5 = 2;
export const FormFactor1_8 = 3;
export const FormFactor1_8Less = 4;
export const FormFactorEmbedded = 5;
export const FormFactorMemoryCard = 6;
export const FormFactormSata = 7;
export const FormFactorM_2 = 8;
export const FormFactorPCIeBoard = 9;
export const FormFactorDimm = 10;
export const HealthStatusUnknown = 0;
export const HealthStatusNormal = 1;
export const HealthStatusThrottled = 2;
export const HealthStatusWarning = 3;
export const HealthStatusDisabled = 4;
export const HealthStatusFailed = 5;
export const DiskHealthUnknown = 0;
export const DiskHealthUnhealthy = 1;
export const DiskHealthWarning = 2;
export const DiskHealthHealthy = 3;
export const DiskHealthMax = 4;
export const DiskOpStatusNone = 0;
export const DiskOpStatusUnknown = 1;
export const DiskOpStatusOk = 2;
export const DiskOpStatusPredictingFailure = 3;
export const DiskOpStatusInService = 4;
export const DiskOpStatusHardwareError = 5;
export const DiskOpStatusNotUsable = 6;
export const DiskOpStatusTransientError = 7;
export const DiskOpStatusMissing = 8;
export const DiskOpReasonUnknown = 0;
export const DiskOpReasonScsiSenseCode = 1;
export const DiskOpReasonMedia = 2;
export const DiskOpReasonIo = 3;
export const DiskOpReasonThresholdExceeded = 4;
export const DiskOpReasonLostData = 5;
export const DiskOpReasonEnergySource = 6;
export const DiskOpReasonConfiguration = 7;
export const DiskOpReasonDeviceController = 8;
export const DiskOpReasonMediaController = 9;
export const DiskOpReasonComponent = 10;
export const DiskOpReasonNVDIMM_N = 11;
export const DiskOpReasonBackgroundOperation = 12;
export const DiskOpReasonInvalidFirmware = 13;
export const DiskOpReasonHealthCheck = 14;
export const DiskOpReasonLostDataPersistence = 15;
export const DiskOpReasonDisabledByPlatform = 16;
export const DiskOpReasonLostWritePersistence = 17;
export const DiskOpReasonDataPersistenceLossImminent = 18;
export const DiskOpReasonWritePersistenceLossImminent = 19;
export const DiskOpReasonMax = 20;
export const ZonedDeviceTypeUnknown = 0;
export const ZonedDeviceTypeHostManaged = 1;
export const ZonedDeviceTypeHostAware = 2;
export const ZonedDeviceTypeDeviceManaged = 3;
export const ZoneTypeUnknown = 0;
export const ZoneTypeConventional = 1;
export const ZoneTypeSequentialWriteRequired = 2;
export const ZoneTypeSequentialWritePreferred = 3;
export const ZoneTypeMax = 4;
export const ZonesAttributeTypeAndLengthMayDifferent = 0;
export const ZonesAttributeTypeSameLengthSame = 1;
export const ZonesAttributeTypeSameLastZoneLengthDifferent = 2;
export const ZonesAttributeTypeMayDifferentLengthSame = 3;
export const ZoneConditionConventional = 0;
export const ZoneConditionEmpty = 1;
export const ZoneConditionImplicitlyOpened = 2;
export const ZoneConditionExplicitlyOpened = 3;
export const ZoneConditionClosed = 4;
export const ZoneConditionReadOnly = 13;
export const ZoneConditionFull = 14;
export const ZoneConditionOffline = 15;
export const StorageDiagnosticLevelDefault = 0;
export const StorageDiagnosticLevelMax = 1;
export const StorageDiagnosticTargetTypeUndefined = 0;
export const StorageDiagnosticTargetTypePort = 1;
export const StorageDiagnosticTargetTypeMiniport = 2;
export const StorageDiagnosticTargetTypeHbaFirmware = 3;
export const StorageDiagnosticTargetTypeMax = 4;
export const DeviceInternalStatusDataRequestTypeUndefined = 0;
export const DeviceCurrentInternalStatusDataHeader = 1;
export const DeviceCurrentInternalStatusData = 2;
export const DeviceSavedInternalStatusDataHeader = 3;
export const DeviceSavedInternalStatusData = 4;
export const DeviceStatusDataSetUndefined = 0;
export const DeviceStatusDataSet1 = 1;
export const DeviceStatusDataSet2 = 2;
export const DeviceStatusDataSet3 = 3;
export const DeviceStatusDataSet4 = 4;
export const DeviceStatusDataSetMax = 5;
export const StorageSanitizeMethodDefault = 0;
export const StorageSanitizeMethodBlockErase = 1;
export const StorageSanitizeMethodCryptoErase = 2;
export const WriteCacheTypeUnknown = 0;
export const WriteCacheTypeNone = 1;
export const WriteCacheTypeWriteBack = 2;
export const WriteCacheTypeWriteThrough = 3;
export const WriteCacheEnableUnknown = 0;
export const WriteCacheDisabled = 1;
export const WriteCacheEnabled = 2;
export const WriteCacheChangeUnknown = 0;
export const WriteCacheNotChangeable = 1;
export const WriteCacheChangeable = 2;
export const WriteThroughUnknown = 0;
export const WriteThroughNotSupported = 1;
export const WriteThroughSupported = 2;
export const TCCollectionBugCheck = 1;
export const TCCollectionApplicationRequested = 2;
export const TCCollectionDeviceRequested = 3;
export const StoragePowerupUnknown = 0;
export const StoragePowerupIO = 1;
export const StoragePowerupDeviceAttention = 2;
export const StorageDevicePowerCapUnitsPercent = 0;
export const StorageDevicePowerCapUnitsMilliwatts = 1;
export const StorRpmbProgramAuthKey = 1;
export const StorRpmbQueryWriteCounter = 2;
export const StorRpmbAuthenticatedWrite = 3;
export const StorRpmbAuthenticatedRead = 4;
export const StorRpmbReadResultRequest = 5;
export const StorRpmbAuthenticatedDeviceConfigWrite = 6;
export const StorRpmbAuthenticatedDeviceConfigRead = 7;
export const StorageCounterTypeUnknown = 0;
export const StorageCounterTypeTemperatureCelsius = 1;
export const StorageCounterTypeTemperatureCelsiusMax = 2;
export const StorageCounterTypeReadErrorsTotal = 3;
export const StorageCounterTypeReadErrorsCorrected = 4;
export const StorageCounterTypeReadErrorsUncorrected = 5;
export const StorageCounterTypeWriteErrorsTotal = 6;
export const StorageCounterTypeWriteErrorsCorrected = 7;
export const StorageCounterTypeWriteErrorsUncorrected = 8;
export const StorageCounterTypeManufactureDate = 9;
export const StorageCounterTypeStartStopCycleCount = 10;
export const StorageCounterTypeStartStopCycleCountMax = 11;
export const StorageCounterTypeLoadUnloadCycleCount = 12;
export const StorageCounterTypeLoadUnloadCycleCountMax = 13;
export const StorageCounterTypeWearPercentage = 14;
export const StorageCounterTypeWearPercentageWarning = 15;
export const StorageCounterTypeWearPercentageMax = 16;
export const StorageCounterTypePowerOnHours = 17;
export const StorageCounterTypeReadLatency100NSMax = 18;
export const StorageCounterTypeWriteLatency100NSMax = 19;
export const StorageCounterTypeFlushLatency100NSMax = 20;
export const StorageCounterTypeMax = 21;
export const StorAttributeMgmt_ClearAttribute = 0;
export const StorAttributeMgmt_SetAttribute = 1;
export const StorAttributeMgmt_ResetAttribute = 2;
export const ScmRegionFlagNone = 0;
export const ScmRegionFlagLabel = 1;
export const ScmBusQuery_Descriptor = 0;
export const ScmBusQuery_IsSupported = 1;
export const ScmBusQuery_Max = 2;
export const ScmBusSet_Descriptor = 0;
export const ScmBusSet_IsSupported = 1;
export const ScmBusSet_Max = 2;
export const ScmBusProperty_RuntimeFwActivationInfo = 0;
export const ScmBusProperty_DedicatedMemoryInfo = 1;
export const ScmBusProperty_DedicatedMemoryState = 2;
export const ScmBusProperty_Max = 3;
export const ScmBusFirmwareActivationState_Idle = 0;
export const ScmBusFirmwareActivationState_Armed = 1;
export const ScmBusFirmwareActivationState_Busy = 2;
export const ScmPhysicalDeviceQuery_Descriptor = 0;
export const ScmPhysicalDeviceQuery_IsSupported = 1;
export const ScmPhysicalDeviceQuery_Max = 2;
export const ScmPhysicalDeviceSet_Descriptor = 0;
export const ScmPhysicalDeviceSet_IsSupported = 1;
export const ScmPhysicalDeviceSet_Max = 2;
export const ScmPhysicalDeviceProperty_DeviceInfo = 0;
export const ScmPhysicalDeviceProperty_ManagementStatus = 1;
export const ScmPhysicalDeviceProperty_FirmwareInfo = 2;
export const ScmPhysicalDeviceProperty_LocationString = 3;
export const ScmPhysicalDeviceProperty_DeviceSpecificInfo = 4;
export const ScmPhysicalDeviceProperty_DeviceHandle = 5;
export const ScmPhysicalDeviceProperty_FruIdString = 6;
export const ScmPhysicalDeviceProperty_RuntimeFwActivationInfo = 7;
export const ScmPhysicalDeviceProperty_RuntimeFwActivationArmState = 8;
export const ScmPhysicalDeviceProperty_Max = 9;
export const ScmPhysicalDeviceHealth_Unknown = 0;
export const ScmPhysicalDeviceHealth_Unhealthy = 1;
export const ScmPhysicalDeviceHealth_Warning = 2;
export const ScmPhysicalDeviceHealth_Healthy = 3;
export const ScmPhysicalDeviceHealth_Max = 4;
export const ScmPhysicalDeviceOpStatus_Unknown = 0;
export const ScmPhysicalDeviceOpStatus_Ok = 1;
export const ScmPhysicalDeviceOpStatus_PredictingFailure = 2;
export const ScmPhysicalDeviceOpStatus_InService = 3;
export const ScmPhysicalDeviceOpStatus_HardwareError = 4;
export const ScmPhysicalDeviceOpStatus_NotUsable = 5;
export const ScmPhysicalDeviceOpStatus_TransientError = 6;
export const ScmPhysicalDeviceOpStatus_Missing = 7;
export const ScmPhysicalDeviceOpStatus_Max = 8;
export const ScmPhysicalDeviceOpReason_Unknown = 0;
export const ScmPhysicalDeviceOpReason_Media = 1;
export const ScmPhysicalDeviceOpReason_ThresholdExceeded = 2;
export const ScmPhysicalDeviceOpReason_LostData = 3;
export const ScmPhysicalDeviceOpReason_EnergySource = 4;
export const ScmPhysicalDeviceOpReason_Configuration = 5;
export const ScmPhysicalDeviceOpReason_DeviceController = 6;
export const ScmPhysicalDeviceOpReason_MediaController = 7;
export const ScmPhysicalDeviceOpReason_Component = 8;
export const ScmPhysicalDeviceOpReason_BackgroundOperation = 9;
export const ScmPhysicalDeviceOpReason_InvalidFirmware = 10;
export const ScmPhysicalDeviceOpReason_HealthCheck = 11;
export const ScmPhysicalDeviceOpReason_LostDataPersistence = 12;
export const ScmPhysicalDeviceOpReason_DisabledByPlatform = 13;
export const ScmPhysicalDeviceOpReason_PermanentError = 14;
export const ScmPhysicalDeviceOpReason_LostWritePersistence = 15;
export const ScmPhysicalDeviceOpReason_FatalError = 16;
export const ScmPhysicalDeviceOpReason_DataPersistenceLossImminent = 17;
export const ScmPhysicalDeviceOpReason_WritePersistenceLossImminent = 18;
export const ScmPhysicalDeviceOpReason_MediaRemainingSpareBlock = 19;
export const ScmPhysicalDeviceOpReason_PerformanceDegradation = 20;
export const ScmPhysicalDeviceOpReason_ExcessiveTemperature = 21;
export const ScmPhysicalDeviceOpReason_InternalFailure = 22;
export const ScmPhysicalDeviceOpReason_Max = 23;
export const ScmPdLastFwActivationStatus_None = 0;
export const ScmPdLastFwActivationStatus_Success = 1;
export const ScmPdLastFwActivationStatus_FwNotFound = 2;
export const ScmPdLastFwActivationStatus_ColdRebootRequired = 3;
export const ScmPdLastFwActivaitonStatus_ActivationInProgress = 4;
export const ScmPdLastFwActivaitonStatus_Retry = 5;
export const ScmPdLastFwActivaitonStatus_FwUnsupported = 6;
export const ScmPdLastFwActivaitonStatus_UnknownError = 7;
export const ScmPdFirmwareActivationState_Idle = 0;
export const ScmPdFirmwareActivationState_Armed = 1;
export const ScmPdFirmwareActivationState_Busy = 2;
export const ScmPhysicalDeviceReinit_Success = 0;
export const ScmPhysicalDeviceReinit_RebootNeeded = 1;
export const ScmPhysicalDeviceReinit_ColdBootNeeded = 2;
export const ScmPhysicalDeviceReinit_Max = 3;
export const Unknown = 0;
export const F5_1Pt2_512 = 1;
export const F3_1Pt44_512 = 2;
export const F3_2Pt88_512 = 3;
export const F3_20Pt8_512 = 4;
export const F3_720_512 = 5;
export const F5_360_512 = 6;
export const F5_320_512 = 7;
export const F5_320_1024 = 8;
export const F5_180_512 = 9;
export const F5_160_512 = 10;
export const RemovableMedia = 11;
export const FixedMedia = 12;
export const F3_120M_512 = 13;
export const F3_640_512 = 14;
export const F5_640_512 = 15;
export const F5_720_512 = 16;
export const F3_1Pt2_512 = 17;
export const F3_1Pt23_1024 = 18;
export const F5_1Pt23_1024 = 19;
export const F3_128Mb_512 = 20;
export const F3_230Mb_512 = 21;
export const F8_256_128 = 22;
export const F3_200Mb_512 = 23;
export const F3_240M_512 = 24;
export const F3_32M_512 = 25;
export const PARTITION_STYLE_MBR = 0;
export const PARTITION_STYLE_GPT = 1;
export const PARTITION_STYLE_RAW = 2;
export const DetectNone = 0;
export const DetectInt13 = 1;
export const DetectExInt13 = 2;
export const EqualPriority = 0;
export const KeepPrefetchedData = 1;
export const KeepReadData = 2;
export const RequestSize = 0;
export const RequestLocation = 1;
export const AllElements = 0;
export const ChangerTransport = 1;
export const ChangerSlot = 2;
export const ChangerIEPort = 3;
export const ChangerDrive = 4;
export const ChangerDoor = 5;
export const ChangerKeypad = 6;
export const ChangerMaxElement = 7;
export const DeviceProblemNone = 0;
export const DeviceProblemHardware = 1;
export const DeviceProblemCHMError = 2;
export const DeviceProblemDoorOpen = 3;
export const DeviceProblemCalibrationError = 4;
export const DeviceProblemTargetFailure = 5;
export const DeviceProblemCHMMoveError = 6;
export const DeviceProblemCHMZeroError = 7;
export const DeviceProblemCartridgeInsertError = 8;
export const DeviceProblemPositionError = 9;
export const DeviceProblemSensorError = 10;
export const DeviceProblemCartridgeEjectError = 11;
export const DeviceProblemGripperError = 12;
export const DeviceProblemDriveError = 13;
export const ShrinkPrepare = 1;
export const ShrinkCommit = 2;
export const ShrinkAbort = 3;
export const CsvControlStartRedirectFile = 2;
export const CsvControlStopRedirectFile = 3;
export const CsvControlQueryRedirectState = 4;
export const CsvControlQueryFileRevision = 6;
export const CsvControlQueryMdsPath = 8;
export const CsvControlQueryFileRevisionFileId128 = 9;
export const CsvControlQueryVolumeRedirectState = 10;
export const CsvControlEnableUSNRangeModificationTracking = 13;
export const CsvControlMarkHandleLocalVolumeMount = 14;
export const CsvControlUnmarkHandleLocalVolumeMount = 15;
export const CsvControlGetCsvFsMdsPathV2 = 18;
export const CsvControlDisableCaching = 19;
export const CsvControlEnableCaching = 20;
export const CsvControlStartForceDFO = 21;
export const CsvControlStopForceDFO = 22;
export const CsvControlQueryMdsPathNoPause = 23;
export const CsvControlSetVolumeId = 24;
export const CsvControlQueryVolumeId = 25;
export const CsvFsDiskConnectivityNone = 0;
export const CsvFsDiskConnectivityMdsNodeOnly = 1;
export const CsvFsDiskConnectivitySubsetOfNodes = 2;
export const CsvFsDiskConnectivityAllNodes = 3;
export const StorageReserveIdNone = 0;
export const StorageReserveIdHard = 1;
export const StorageReserveIdSoft = 2;
export const StorageReserveIdUpdateScratch = 3;
export const StorageReserveIdMax = 4;
export const QUERY_FILE_LAYOUT_FILTER_TYPE_NONE = 0;
export const QUERY_FILE_LAYOUT_FILTER_TYPE_CLUSTERS = 1;
export const QUERY_FILE_LAYOUT_FILTER_TYPE_FILEID = 2;
export const QUERY_FILE_LAYOUT_FILTER_TYPE_STORAGE_RESERVE_ID = 3;
export const QUERY_FILE_LAYOUT_NUM_FILTER_TYPES = 4;
export const FileStorageTierMediaTypeUnspecified = 0;
export const FileStorageTierMediaTypeDisk = 1;
export const FileStorageTierMediaTypeSsd = 2;
export const FileStorageTierMediaTypeScm = 4;
export const FileStorageTierMediaTypeMax = 5;
export const FileStorageTierClassUnspecified = 0;
export const FileStorageTierClassCapacity = 1;
export const FileStorageTierClassPerformance = 2;
export const FileStorageTierClassMax = 3;
export const FileSnapStateInactive = 0;
export const FileSnapStateSource = 1;
export const FileSnapStateTarget = 2;
export const SmrGcStateInactive = 0;
export const SmrGcStatePaused = 1;
export const SmrGcStateActive = 2;
export const SmrGcStateActiveFullSpeed = 3;
export const SmrGcActionStart = 1;
export const SmrGcActionStartFullSpeed = 2;
export const SmrGcActionPause = 3;
export const SmrGcActionStop = 4;
export const SmrGcMethodCompaction = 1;
export const SmrGcMethodCompression = 2;
export const SmrGcMethodRotation = 3;
export const VirtualStorageBehaviorUndefined = 0;
export const VirtualStorageBehaviorCacheWriteThrough = 1;
export const VirtualStorageBehaviorCacheWriteBack = 2;
export const VirtualStorageBehaviorStopIoProcessing = 3;
export const VirtualStorageBehaviorRestartIoProcessing = 4;
export const FS_BPIO_OP_ENABLE = 1;
export const FS_BPIO_OP_DISABLE = 2;
export const FS_BPIO_OP_QUERY = 3;
export const FS_BPIO_OP_VOLUME_STACK_PAUSE = 4;
export const FS_BPIO_OP_VOLUME_STACK_RESUME = 5;
export const FS_BPIO_OP_STREAM_PAUSE = 6;
export const FS_BPIO_OP_STREAM_RESUME = 7;
export const FS_BPIO_OP_GET_INFO = 8;
export const FS_BPIO_OP_MAX_OPERATION = 9;
export const FSBPIO_INFL_None = 0;
export const FSBPIO_INFL_SKIP_STORAGE_STACK_QUERY = 1;
export const FSBPIO_OUTFL_None = 0;
export const FSBPIO_OUTFL_VOLUME_STACK_BYPASS_PAUSED = 1;
export const FSBPIO_OUTFL_STREAM_BYPASS_PAUSED = 2;
export const FSBPIO_OUTFL_FILTER_ATTACH_BLOCKED = 4;
export const FSBPIO_OUTFL_COMPATIBLE_STORAGE_DRIVER = 8;

// Structs

/**
 * Windows.Win32.Devices.Properties.DEVPROPKEY (size: 16)
 */
export interface DEVPROPKEY {
  /** System.Guid */
  fmtid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  pid: number;
}

export const sizeofDEVPROPKEY = 16;

export function allocDEVPROPKEY(data?: Partial<DEVPROPKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVPROPKEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fmtid !== undefined) view.setBigUint64(0, data.fmtid === null ? 0n : util.toBigInt(util.toPointer(data.fmtid)), true);
  // 0x08: u32
  if (data?.pid !== undefined) view.setUint32(8, Number(data.pid), true);
  // 0x0c: pad4
  return buf;
}

export class DEVPROPKEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get fmtid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get pid(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set fmtid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set pid(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: number | bigint;
  /** u64 */
  Region: number | bigint;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, util.toBigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, util.toBigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get Region(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u64
  set Alignment(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set Region(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null | Uint8Array | Uint16Array;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class _u_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwValue(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pwszName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwValue(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pwszName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Foundation.LARGE_INTEGER (size: 24)
 */
export interface LARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  QuadPart: number | bigint;
}

export const sizeofLARGE_INTEGER = 24;

export function allocLARGE_INTEGER(data?: Partial<LARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofLARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : util.toBigInt(util.toPointer(data.u)), true);
  // 0x10: i64
  if (data?.QuadPart !== undefined) view.setBigInt64(16, util.toBigInt(data.QuadPart), true);
  return buf;
}

export class LARGE_INTEGERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get u(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i64
  get QuadPart(): number | bigint {
    return this.view.getBigInt64(16, true);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set u(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: i64
  set QuadPart(value: number | bigint) {
    this.view.setBigInt64(16, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.MOVE_FILE_DATA32 (size: 32)
 */
export interface MOVE_FILE_DATA32 {
  /** u32 */
  FileHandle: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  StartingVcn: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  StartingLcn: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ClusterCount: number;
}

export const sizeofMOVE_FILE_DATA32 = 32;

export function allocMOVE_FILE_DATA32(data?: Partial<MOVE_FILE_DATA32>): Uint8Array {
  const buf = new Uint8Array(sizeofMOVE_FILE_DATA32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FileHandle !== undefined) view.setUint32(0, Number(data.FileHandle), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.StartingVcn !== undefined) view.setBigUint64(8, data.StartingVcn === null ? 0n : util.toBigInt(util.toPointer(data.StartingVcn)), true);
  // 0x10: pointer
  if (data?.StartingLcn !== undefined) view.setBigUint64(16, data.StartingLcn === null ? 0n : util.toBigInt(util.toPointer(data.StartingLcn)), true);
  // 0x18: u32
  if (data?.ClusterCount !== undefined) view.setUint32(24, Number(data.ClusterCount), true);
  // 0x1c: pad4
  return buf;
}

export class MOVE_FILE_DATA32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get FileHandle(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get StartingVcn(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get StartingLcn(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get ClusterCount(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set FileHandle(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set StartingVcn(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set StartingLcn(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set ClusterCount(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : util.toBigInt(util.toPointer(data.X)), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.MARK_HANDLE_INFO32 (size: 16)
 */
export interface MARK_HANDLE_INFO32 {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  VolumeHandle: number;
  /** u32 */
  HandleInfo: number;
}

export const sizeofMARK_HANDLE_INFO32 = 16;

export function allocMARK_HANDLE_INFO32(data?: Partial<MARK_HANDLE_INFO32>): Uint8Array {
  const buf = new Uint8Array(sizeofMARK_HANDLE_INFO32);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u32
  if (data?.VolumeHandle !== undefined) view.setUint32(8, Number(data.VolumeHandle), true);
  // 0x0c: u32
  if (data?.HandleInfo !== undefined) view.setUint32(12, Number(data.HandleInfo), true);
  return buf;
}

export class MARK_HANDLE_INFO32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get VolumeHandle(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get HandleInfo(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set VolumeHandle(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set HandleInfo(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DUPLICATE_EXTENTS_DATA32 (size: 32)
 */
export interface DUPLICATE_EXTENTS_DATA32 {
  /** u32 */
  FileHandle: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  SourceFileOffset: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TargetFileOffset: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ByteCount: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDUPLICATE_EXTENTS_DATA32 = 32;

export function allocDUPLICATE_EXTENTS_DATA32(data?: Partial<DUPLICATE_EXTENTS_DATA32>): Uint8Array {
  const buf = new Uint8Array(sizeofDUPLICATE_EXTENTS_DATA32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FileHandle !== undefined) view.setUint32(0, Number(data.FileHandle), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SourceFileOffset !== undefined) view.setBigUint64(8, data.SourceFileOffset === null ? 0n : util.toBigInt(util.toPointer(data.SourceFileOffset)), true);
  // 0x10: pointer
  if (data?.TargetFileOffset !== undefined) view.setBigUint64(16, data.TargetFileOffset === null ? 0n : util.toBigInt(util.toPointer(data.TargetFileOffset)), true);
  // 0x18: pointer
  if (data?.ByteCount !== undefined) view.setBigUint64(24, data.ByteCount === null ? 0n : util.toBigInt(util.toPointer(data.ByteCount)), true);
  return buf;
}

export class DUPLICATE_EXTENTS_DATA32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get FileHandle(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get SourceFileOffset(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get TargetFileOffset(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get ByteCount(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set FileHandle(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set SourceFileOffset(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set TargetFileOffset(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set ByteCount(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DUPLICATE_EXTENTS_DATA_EX32 (size: 40)
 */
export interface DUPLICATE_EXTENTS_DATA_EX32 {
  /** u32 */
  Size: number;
  /** u32 */
  FileHandle: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  SourceFileOffset: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TargetFileOffset: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ByteCount: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
}

export const sizeofDUPLICATE_EXTENTS_DATA_EX32 = 40;

export function allocDUPLICATE_EXTENTS_DATA_EX32(data?: Partial<DUPLICATE_EXTENTS_DATA_EX32>): Uint8Array {
  const buf = new Uint8Array(sizeofDUPLICATE_EXTENTS_DATA_EX32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.FileHandle !== undefined) view.setUint32(4, Number(data.FileHandle), true);
  // 0x08: pointer
  if (data?.SourceFileOffset !== undefined) view.setBigUint64(8, data.SourceFileOffset === null ? 0n : util.toBigInt(util.toPointer(data.SourceFileOffset)), true);
  // 0x10: pointer
  if (data?.TargetFileOffset !== undefined) view.setBigUint64(16, data.TargetFileOffset === null ? 0n : util.toBigInt(util.toPointer(data.TargetFileOffset)), true);
  // 0x18: pointer
  if (data?.ByteCount !== undefined) view.setBigUint64(24, data.ByteCount === null ? 0n : util.toBigInt(util.toPointer(data.ByteCount)), true);
  // 0x20: u32
  if (data?.Flags !== undefined) view.setUint32(32, Number(data.Flags), true);
  // 0x24: pad4
  return buf;
}

export class DUPLICATE_EXTENTS_DATA_EX32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get FileHandle(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get SourceFileOffset(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get TargetFileOffset(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get ByteCount(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get Flags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set FileHandle(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set SourceFileOffset(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set TargetFileOffset(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set ByteCount(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set Flags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

export type BOOLEAN = number;

/**
 * Windows.Win32.System.Ioctl.STORAGE_HOTPLUG_INFO (size: 40)
 */
export interface STORAGE_HOTPLUG_INFO {
  /** u32 */
  Size: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  MediaRemovable: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  MediaHotplug: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  DeviceHotplug: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  WriteCacheEnableOverride: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSTORAGE_HOTPLUG_INFO = 40;

export function allocSTORAGE_HOTPLUG_INFO(data?: Partial<STORAGE_HOTPLUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_HOTPLUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.MediaRemovable !== undefined) view.setBigUint64(8, data.MediaRemovable === null ? 0n : util.toBigInt(util.toPointer(data.MediaRemovable)), true);
  // 0x10: pointer
  if (data?.MediaHotplug !== undefined) view.setBigUint64(16, data.MediaHotplug === null ? 0n : util.toBigInt(util.toPointer(data.MediaHotplug)), true);
  // 0x18: pointer
  if (data?.DeviceHotplug !== undefined) view.setBigUint64(24, data.DeviceHotplug === null ? 0n : util.toBigInt(util.toPointer(data.DeviceHotplug)), true);
  // 0x20: pointer
  if (data?.WriteCacheEnableOverride !== undefined) view.setBigUint64(32, data.WriteCacheEnableOverride === null ? 0n : util.toBigInt(util.toPointer(data.WriteCacheEnableOverride)), true);
  return buf;
}

export class STORAGE_HOTPLUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get MediaRemovable(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get MediaHotplug(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get DeviceHotplug(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get WriteCacheEnableOverride(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set MediaRemovable(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set MediaHotplug(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set DeviceHotplug(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set WriteCacheEnableOverride(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_DEVICE_NUMBER (size: 16)
 */
export interface STORAGE_DEVICE_NUMBER {
  /** u32 */
  DeviceType: number;
  /** u32 */
  DeviceNumber: number;
  /** u32 */
  PartitionNumber: number;
}

export const sizeofSTORAGE_DEVICE_NUMBER = 16;

export function allocSTORAGE_DEVICE_NUMBER(data?: Partial<STORAGE_DEVICE_NUMBER>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_DEVICE_NUMBER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DeviceType !== undefined) view.setUint32(0, Number(data.DeviceType), true);
  // 0x04: u32
  if (data?.DeviceNumber !== undefined) view.setUint32(4, Number(data.DeviceNumber), true);
  // 0x08: u32
  if (data?.PartitionNumber !== undefined) view.setUint32(8, Number(data.PartitionNumber), true);
  // 0x0c: pad4
  return buf;
}

export class STORAGE_DEVICE_NUMBERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get DeviceType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get DeviceNumber(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get PartitionNumber(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set DeviceType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set DeviceNumber(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set PartitionNumber(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_DEVICE_NUMBERS (size: 24)
 */
export interface STORAGE_DEVICE_NUMBERS {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  NumberOfDevices: number;
  /** array */
  Devices: Deno.PointerValue | null;
}

export const sizeofSTORAGE_DEVICE_NUMBERS = 24;

export function allocSTORAGE_DEVICE_NUMBERS(data?: Partial<STORAGE_DEVICE_NUMBERS>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_DEVICE_NUMBERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.NumberOfDevices !== undefined) view.setUint32(8, Number(data.NumberOfDevices), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Devices !== undefined) view.setBigUint64(16, data.Devices === null ? 0n : util.toBigInt(util.toPointer(data.Devices)), true);
  return buf;
}

export class STORAGE_DEVICE_NUMBERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get NumberOfDevices(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Devices(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set NumberOfDevices(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Devices(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_DEVICE_NUMBER_EX (size: 40)
 */
export interface STORAGE_DEVICE_NUMBER_EX {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
  /** u32 */
  DeviceType: number;
  /** u32 */
  DeviceNumber: number;
  /** System.Guid */
  DeviceGuid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  PartitionNumber: number;
}

export const sizeofSTORAGE_DEVICE_NUMBER_EX = 40;

export function allocSTORAGE_DEVICE_NUMBER_EX(data?: Partial<STORAGE_DEVICE_NUMBER_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_DEVICE_NUMBER_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.DeviceType !== undefined) view.setUint32(12, Number(data.DeviceType), true);
  // 0x10: u32
  if (data?.DeviceNumber !== undefined) view.setUint32(16, Number(data.DeviceNumber), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.DeviceGuid !== undefined) view.setBigUint64(24, data.DeviceGuid === null ? 0n : util.toBigInt(util.toPointer(data.DeviceGuid)), true);
  // 0x20: u32
  if (data?.PartitionNumber !== undefined) view.setUint32(32, Number(data.PartitionNumber), true);
  // 0x24: pad4
  return buf;
}

export class STORAGE_DEVICE_NUMBER_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get DeviceType(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get DeviceNumber(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get DeviceGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get PartitionNumber(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set DeviceType(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set DeviceNumber(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set DeviceGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set PartitionNumber(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_BUS_RESET_REQUEST (size: 8)
 */
export interface STORAGE_BUS_RESET_REQUEST {
  /** u8 */
  PathId: number;
}

export const sizeofSTORAGE_BUS_RESET_REQUEST = 8;

export function allocSTORAGE_BUS_RESET_REQUEST(data?: Partial<STORAGE_BUS_RESET_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_BUS_RESET_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.PathId !== undefined) view.setUint8(0, Number(data.PathId));
  // 0x01: pad7
  return buf;
}

export class STORAGE_BUS_RESET_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get PathId(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x00: u8
  set PathId(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_BREAK_RESERVATION_REQUEST (size: 8)
 */
export interface STORAGE_BREAK_RESERVATION_REQUEST {
  /** u32 */
  Length: number;
  /** u8 */
  _unused: number;
  /** u8 */
  PathId: number;
  /** u8 */
  TargetId: number;
  /** u8 */
  Lun: number;
}

export const sizeofSTORAGE_BREAK_RESERVATION_REQUEST = 8;

export function allocSTORAGE_BREAK_RESERVATION_REQUEST(data?: Partial<STORAGE_BREAK_RESERVATION_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_BREAK_RESERVATION_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: u8
  if (data?._unused !== undefined) view.setUint8(4, Number(data._unused));
  // 0x05: u8
  if (data?.PathId !== undefined) view.setUint8(5, Number(data.PathId));
  // 0x06: u8
  if (data?.TargetId !== undefined) view.setUint8(6, Number(data.TargetId));
  // 0x07: u8
  if (data?.Lun !== undefined) view.setUint8(7, Number(data.Lun));
  return buf;
}

export class STORAGE_BREAK_RESERVATION_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Length(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u8
  get _unused(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get PathId(): number {
    return this.view.getUint8(5);
  }

  // 0x06: u8
  get TargetId(): number {
    return this.view.getUint8(6);
  }

  // 0x07: u8
  get Lun(): number {
    return this.view.getUint8(7);
  }

  // 0x00: u32
  set Length(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u8
  set _unused(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set PathId(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: u8
  set TargetId(value: number) {
    this.view.setUint8(6, value);
  }

  // 0x07: u8
  set Lun(value: number) {
    this.view.setUint8(7, value);
  }
}

/**
 * Windows.Win32.System.Ioctl.PREVENT_MEDIA_REMOVAL (size: 8)
 */
export interface PREVENT_MEDIA_REMOVAL {
  /** Windows.Win32.Foundation.BOOLEAN */
  PreventMediaRemoval: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPREVENT_MEDIA_REMOVAL = 8;

export function allocPREVENT_MEDIA_REMOVAL(data?: Partial<PREVENT_MEDIA_REMOVAL>): Uint8Array {
  const buf = new Uint8Array(sizeofPREVENT_MEDIA_REMOVAL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PreventMediaRemoval !== undefined) view.setBigUint64(0, data.PreventMediaRemoval === null ? 0n : util.toBigInt(util.toPointer(data.PreventMediaRemoval)), true);
  return buf;
}

export class PREVENT_MEDIA_REMOVALView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PreventMediaRemoval(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set PreventMediaRemoval(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.CLASS_MEDIA_CHANGE_CONTEXT (size: 8)
 */
export interface CLASS_MEDIA_CHANGE_CONTEXT {
  /** u32 */
  MediaChangeCount: number;
  /** u32 */
  NewState: number;
}

export const sizeofCLASS_MEDIA_CHANGE_CONTEXT = 8;

export function allocCLASS_MEDIA_CHANGE_CONTEXT(data?: Partial<CLASS_MEDIA_CHANGE_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofCLASS_MEDIA_CHANGE_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MediaChangeCount !== undefined) view.setUint32(0, Number(data.MediaChangeCount), true);
  // 0x04: u32
  if (data?.NewState !== undefined) view.setUint32(4, Number(data.NewState), true);
  return buf;
}

export class CLASS_MEDIA_CHANGE_CONTEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MediaChangeCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NewState(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set MediaChangeCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NewState(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.TAPE_STATISTICS (size: 48)
 */
export interface TAPE_STATISTICS {
  /** u32 */
  Version: number;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  RecoveredWrites: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  UnrecoveredWrites: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  RecoveredReads: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  UnrecoveredReads: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  CompressionRatioReads: number;
  /** u8 */
  CompressionRatioWrites: number;
}

export const sizeofTAPE_STATISTICS = 48;

export function allocTAPE_STATISTICS(data?: Partial<TAPE_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofTAPE_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.RecoveredWrites !== undefined) view.setBigUint64(8, data.RecoveredWrites === null ? 0n : util.toBigInt(util.toPointer(data.RecoveredWrites)), true);
  // 0x10: pointer
  if (data?.UnrecoveredWrites !== undefined) view.setBigUint64(16, data.UnrecoveredWrites === null ? 0n : util.toBigInt(util.toPointer(data.UnrecoveredWrites)), true);
  // 0x18: pointer
  if (data?.RecoveredReads !== undefined) view.setBigUint64(24, data.RecoveredReads === null ? 0n : util.toBigInt(util.toPointer(data.RecoveredReads)), true);
  // 0x20: pointer
  if (data?.UnrecoveredReads !== undefined) view.setBigUint64(32, data.UnrecoveredReads === null ? 0n : util.toBigInt(util.toPointer(data.UnrecoveredReads)), true);
  // 0x28: u8
  if (data?.CompressionRatioReads !== undefined) view.setUint8(40, Number(data.CompressionRatioReads));
  // 0x29: u8
  if (data?.CompressionRatioWrites !== undefined) view.setUint8(41, Number(data.CompressionRatioWrites));
  // 0x2a: pad6
  return buf;
}

export class TAPE_STATISTICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get RecoveredWrites(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get UnrecoveredWrites(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get RecoveredReads(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get UnrecoveredReads(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u8
  get CompressionRatioReads(): number {
    return this.view.getUint8(40);
  }

  // 0x29: u8
  get CompressionRatioWrites(): number {
    return this.view.getUint8(41);
  }

  // 0x2a: pad6

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set RecoveredWrites(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set UnrecoveredWrites(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set RecoveredReads(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set UnrecoveredReads(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: u8
  set CompressionRatioReads(value: number) {
    this.view.setUint8(40, value);
  }

  // 0x29: u8
  set CompressionRatioWrites(value: number) {
    this.view.setUint8(41, value);
  }

  // 0x2a: pad6
}

/**
 * Windows.Win32.System.Ioctl.TAPE_GET_STATISTICS (size: 8)
 */
export interface TAPE_GET_STATISTICS {
  /** u32 */
  Operation: number;
}

export const sizeofTAPE_GET_STATISTICS = 8;

export function allocTAPE_GET_STATISTICS(data?: Partial<TAPE_GET_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofTAPE_GET_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Operation !== undefined) view.setUint32(0, Number(data.Operation), true);
  // 0x04: pad4
  return buf;
}

export class TAPE_GET_STATISTICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Operation(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set Operation(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * _DiskInfo_e__Struct (size: 32)
 */
export interface _DiskInfo_e__Struct {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  Cylinders: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Ioctl.STORAGE_MEDIA_TYPE */
  MediaType: STORAGE_MEDIA_TYPE;
  /** u32 */
  TracksPerCylinder: number;
  /** u32 */
  SectorsPerTrack: number;
  /** u32 */
  BytesPerSector: number;
  /** u32 */
  NumberMediaSides: number;
  /** u32 */
  MediaCharacteristics: number;
}

export const sizeof_DiskInfo_e__Struct = 32;

export function alloc_DiskInfo_e__Struct(data?: Partial<_DiskInfo_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_DiskInfo_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Cylinders !== undefined) view.setBigUint64(0, data.Cylinders === null ? 0n : util.toBigInt(util.toPointer(data.Cylinders)), true);
  // 0x08: i32
  if (data?.MediaType !== undefined) view.setInt32(8, Number(data.MediaType), true);
  // 0x0c: u32
  if (data?.TracksPerCylinder !== undefined) view.setUint32(12, Number(data.TracksPerCylinder), true);
  // 0x10: u32
  if (data?.SectorsPerTrack !== undefined) view.setUint32(16, Number(data.SectorsPerTrack), true);
  // 0x14: u32
  if (data?.BytesPerSector !== undefined) view.setUint32(20, Number(data.BytesPerSector), true);
  // 0x18: u32
  if (data?.NumberMediaSides !== undefined) view.setUint32(24, Number(data.NumberMediaSides), true);
  // 0x1c: u32
  if (data?.MediaCharacteristics !== undefined) view.setUint32(28, Number(data.MediaCharacteristics), true);
  return buf;
}

export class _DiskInfo_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Cylinders(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get MediaType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get TracksPerCylinder(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get SectorsPerTrack(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get BytesPerSector(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get NumberMediaSides(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get MediaCharacteristics(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: pointer
  set Cylinders(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: i32
  set MediaType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set TracksPerCylinder(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set SectorsPerTrack(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set BytesPerSector(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set NumberMediaSides(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set MediaCharacteristics(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * _RemovableDiskInfo_e__Struct (size: 32)
 */
export interface _RemovableDiskInfo_e__Struct {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  Cylinders: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Ioctl.STORAGE_MEDIA_TYPE */
  MediaType: STORAGE_MEDIA_TYPE;
  /** u32 */
  TracksPerCylinder: number;
  /** u32 */
  SectorsPerTrack: number;
  /** u32 */
  BytesPerSector: number;
  /** u32 */
  NumberMediaSides: number;
  /** u32 */
  MediaCharacteristics: number;
}

export const sizeof_RemovableDiskInfo_e__Struct = 32;

export function alloc_RemovableDiskInfo_e__Struct(data?: Partial<_RemovableDiskInfo_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_RemovableDiskInfo_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Cylinders !== undefined) view.setBigUint64(0, data.Cylinders === null ? 0n : util.toBigInt(util.toPointer(data.Cylinders)), true);
  // 0x08: i32
  if (data?.MediaType !== undefined) view.setInt32(8, Number(data.MediaType), true);
  // 0x0c: u32
  if (data?.TracksPerCylinder !== undefined) view.setUint32(12, Number(data.TracksPerCylinder), true);
  // 0x10: u32
  if (data?.SectorsPerTrack !== undefined) view.setUint32(16, Number(data.SectorsPerTrack), true);
  // 0x14: u32
  if (data?.BytesPerSector !== undefined) view.setUint32(20, Number(data.BytesPerSector), true);
  // 0x18: u32
  if (data?.NumberMediaSides !== undefined) view.setUint32(24, Number(data.NumberMediaSides), true);
  // 0x1c: u32
  if (data?.MediaCharacteristics !== undefined) view.setUint32(28, Number(data.MediaCharacteristics), true);
  return buf;
}

export class _RemovableDiskInfo_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Cylinders(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get MediaType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get TracksPerCylinder(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get SectorsPerTrack(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get BytesPerSector(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get NumberMediaSides(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get MediaCharacteristics(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: pointer
  set Cylinders(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: i32
  set MediaType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set TracksPerCylinder(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set SectorsPerTrack(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set BytesPerSector(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set NumberMediaSides(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set MediaCharacteristics(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * _ScsiInformation_e__Struct (size: 8)
 */
export interface _ScsiInformation_e__Struct {
  /** u8 */
  MediumType: number;
  /** u8 */
  DensityCode: number;
}

export const sizeof_ScsiInformation_e__Struct = 8;

export function alloc_ScsiInformation_e__Struct(data?: Partial<_ScsiInformation_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_ScsiInformation_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.MediumType !== undefined) view.setUint8(0, Number(data.MediumType));
  // 0x01: u8
  if (data?.DensityCode !== undefined) view.setUint8(1, Number(data.DensityCode));
  // 0x02: pad6
  return buf;
}

export class _ScsiInformation_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get MediumType(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get DensityCode(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x00: u8
  set MediumType(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set DensityCode(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6
}

/**
 * _BusSpecificData_e__Union (size: 8)
 */
export interface _BusSpecificData_e__Union {
  /** _ScsiInformation_e__Struct */
  ScsiInformation: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_BusSpecificData_e__Union = 8;

export function alloc_BusSpecificData_e__Union(data?: Partial<_BusSpecificData_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_BusSpecificData_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ScsiInformation !== undefined) view.setBigUint64(0, data.ScsiInformation === null ? 0n : util.toBigInt(util.toPointer(data.ScsiInformation)), true);
  return buf;
}

export class _BusSpecificData_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ScsiInformation(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ScsiInformation(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * _TapeInfo_e__Struct (size: 24)
 */
export interface _TapeInfo_e__Struct {
  /** Windows.Win32.System.Ioctl.STORAGE_MEDIA_TYPE */
  MediaType: STORAGE_MEDIA_TYPE;
  /** u32 */
  MediaCharacteristics: number;
  /** u32 */
  CurrentBlockSize: number;
  /** Windows.Win32.Storage.FileSystem.STORAGE_BUS_TYPE */
  BusType: STORAGE_BUS_TYPE;
  /** _BusSpecificData_e__Union */
  BusSpecificData: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_TapeInfo_e__Struct = 24;

export function alloc_TapeInfo_e__Struct(data?: Partial<_TapeInfo_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_TapeInfo_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MediaType !== undefined) view.setInt32(0, Number(data.MediaType), true);
  // 0x04: u32
  if (data?.MediaCharacteristics !== undefined) view.setUint32(4, Number(data.MediaCharacteristics), true);
  // 0x08: u32
  if (data?.CurrentBlockSize !== undefined) view.setUint32(8, Number(data.CurrentBlockSize), true);
  // 0x0c: i32
  if (data?.BusType !== undefined) view.setInt32(12, Number(data.BusType), true);
  // 0x10: pointer
  if (data?.BusSpecificData !== undefined) view.setBigUint64(16, data.BusSpecificData === null ? 0n : util.toBigInt(util.toPointer(data.BusSpecificData)), true);
  return buf;
}

export class _TapeInfo_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MediaType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get MediaCharacteristics(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get CurrentBlockSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get BusType(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: pointer
  get BusSpecificData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MediaType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set MediaCharacteristics(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set CurrentBlockSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set BusType(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: pointer
  set BusSpecificData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * _DeviceSpecific_e__Union (size: 24)
 */
export interface _DeviceSpecific_e__Union {
  /** _DiskInfo_e__Struct */
  DiskInfo: Uint8Array | Deno.PointerValue | null;
  /** _RemovableDiskInfo_e__Struct */
  RemovableDiskInfo: Uint8Array | Deno.PointerValue | null;
  /** _TapeInfo_e__Struct */
  TapeInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_DeviceSpecific_e__Union = 24;

export function alloc_DeviceSpecific_e__Union(data?: Partial<_DeviceSpecific_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_DeviceSpecific_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DiskInfo !== undefined) view.setBigUint64(0, data.DiskInfo === null ? 0n : util.toBigInt(util.toPointer(data.DiskInfo)), true);
  // 0x08: pointer
  if (data?.RemovableDiskInfo !== undefined) view.setBigUint64(8, data.RemovableDiskInfo === null ? 0n : util.toBigInt(util.toPointer(data.RemovableDiskInfo)), true);
  // 0x10: pointer
  if (data?.TapeInfo !== undefined) view.setBigUint64(16, data.TapeInfo === null ? 0n : util.toBigInt(util.toPointer(data.TapeInfo)), true);
  return buf;
}

export class _DeviceSpecific_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DiskInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get RemovableDiskInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get TapeInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set DiskInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set RemovableDiskInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set TapeInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICE_MEDIA_INFO (size: 8)
 */
export interface DEVICE_MEDIA_INFO {
  /** _DeviceSpecific_e__Union */
  DeviceSpecific: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDEVICE_MEDIA_INFO = 8;

export function allocDEVICE_MEDIA_INFO(data?: Partial<DEVICE_MEDIA_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_MEDIA_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DeviceSpecific !== undefined) view.setBigUint64(0, data.DeviceSpecific === null ? 0n : util.toBigInt(util.toPointer(data.DeviceSpecific)), true);
  return buf;
}

export class DEVICE_MEDIA_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DeviceSpecific(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set DeviceSpecific(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.GET_MEDIA_TYPES (size: 16)
 */
export interface GET_MEDIA_TYPES {
  /** u32 */
  DeviceType: number;
  /** u32 */
  MediaInfoCount: number;
  /** array */
  MediaInfo: Deno.PointerValue | null;
}

export const sizeofGET_MEDIA_TYPES = 16;

export function allocGET_MEDIA_TYPES(data?: Partial<GET_MEDIA_TYPES>): Uint8Array {
  const buf = new Uint8Array(sizeofGET_MEDIA_TYPES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DeviceType !== undefined) view.setUint32(0, Number(data.DeviceType), true);
  // 0x04: u32
  if (data?.MediaInfoCount !== undefined) view.setUint32(4, Number(data.MediaInfoCount), true);
  // 0x08: pointer
  if (data?.MediaInfo !== undefined) view.setBigUint64(8, data.MediaInfo === null ? 0n : util.toBigInt(util.toPointer(data.MediaInfo)), true);
  return buf;
}

export class GET_MEDIA_TYPESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get DeviceType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MediaInfoCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get MediaInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set DeviceType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MediaInfoCount(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set MediaInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_PREDICT_FAILURE (size: 16)
 */
export interface STORAGE_PREDICT_FAILURE {
  /** u32 */
  PredictFailure: number;
  /** array */
  VendorSpecific: Deno.PointerValue | null;
}

export const sizeofSTORAGE_PREDICT_FAILURE = 16;

export function allocSTORAGE_PREDICT_FAILURE(data?: Partial<STORAGE_PREDICT_FAILURE>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_PREDICT_FAILURE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PredictFailure !== undefined) view.setUint32(0, Number(data.PredictFailure), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.VendorSpecific !== undefined) view.setBigUint64(8, data.VendorSpecific === null ? 0n : util.toBigInt(util.toPointer(data.VendorSpecific)), true);
  return buf;
}

export class STORAGE_PREDICT_FAILUREView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get PredictFailure(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get VendorSpecific(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set PredictFailure(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set VendorSpecific(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_FAILURE_PREDICTION_CONFIG (size: 32)
 */
export interface STORAGE_FAILURE_PREDICTION_CONFIG {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  Set: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  Enabled: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  Reserved: number;
}

export const sizeofSTORAGE_FAILURE_PREDICTION_CONFIG = 32;

export function allocSTORAGE_FAILURE_PREDICTION_CONFIG(data?: Partial<STORAGE_FAILURE_PREDICTION_CONFIG>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_FAILURE_PREDICTION_CONFIG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: pointer
  if (data?.Set !== undefined) view.setBigUint64(8, data.Set === null ? 0n : util.toBigInt(util.toPointer(data.Set)), true);
  // 0x10: pointer
  if (data?.Enabled !== undefined) view.setBigUint64(16, data.Enabled === null ? 0n : util.toBigInt(util.toPointer(data.Enabled)), true);
  // 0x18: u16
  if (data?.Reserved !== undefined) view.setUint16(24, Number(data.Reserved), true);
  // 0x1a: pad6
  return buf;
}

export class STORAGE_FAILURE_PREDICTION_CONFIGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Set(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Enabled(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u16
  get Reserved(): number {
    return this.view.getUint16(24, true);
  }

  // 0x1a: pad6

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Set(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Enabled(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u16
  set Reserved(value: number) {
    this.view.setUint16(24, value, true);
  }

  // 0x1a: pad6
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_PROPERTY_QUERY (size: 16)
 */
export interface STORAGE_PROPERTY_QUERY {
  /** Windows.Win32.System.Ioctl.STORAGE_PROPERTY_ID */
  PropertyId: STORAGE_PROPERTY_ID;
  /** Windows.Win32.System.Ioctl.STORAGE_QUERY_TYPE */
  QueryType: STORAGE_QUERY_TYPE;
  /** array */
  AdditionalParameters: Deno.PointerValue | null;
}

export const sizeofSTORAGE_PROPERTY_QUERY = 16;

export function allocSTORAGE_PROPERTY_QUERY(data?: Partial<STORAGE_PROPERTY_QUERY>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_PROPERTY_QUERY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.PropertyId !== undefined) view.setInt32(0, Number(data.PropertyId), true);
  // 0x04: i32
  if (data?.QueryType !== undefined) view.setInt32(4, Number(data.QueryType), true);
  // 0x08: pointer
  if (data?.AdditionalParameters !== undefined) view.setBigUint64(8, data.AdditionalParameters === null ? 0n : util.toBigInt(util.toPointer(data.AdditionalParameters)), true);
  return buf;
}

export class STORAGE_PROPERTY_QUERYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get PropertyId(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get QueryType(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get AdditionalParameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set PropertyId(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set QueryType(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set AdditionalParameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_PROPERTY_SET (size: 16)
 */
export interface STORAGE_PROPERTY_SET {
  /** Windows.Win32.System.Ioctl.STORAGE_PROPERTY_ID */
  PropertyId: STORAGE_PROPERTY_ID;
  /** Windows.Win32.System.Ioctl.STORAGE_SET_TYPE */
  SetType: STORAGE_SET_TYPE;
  /** array */
  AdditionalParameters: Deno.PointerValue | null;
}

export const sizeofSTORAGE_PROPERTY_SET = 16;

export function allocSTORAGE_PROPERTY_SET(data?: Partial<STORAGE_PROPERTY_SET>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_PROPERTY_SET);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.PropertyId !== undefined) view.setInt32(0, Number(data.PropertyId), true);
  // 0x04: i32
  if (data?.SetType !== undefined) view.setInt32(4, Number(data.SetType), true);
  // 0x08: pointer
  if (data?.AdditionalParameters !== undefined) view.setBigUint64(8, data.AdditionalParameters === null ? 0n : util.toBigInt(util.toPointer(data.AdditionalParameters)), true);
  return buf;
}

export class STORAGE_PROPERTY_SETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get PropertyId(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get SetType(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get AdditionalParameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set PropertyId(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set SetType(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set AdditionalParameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_DESCRIPTOR_HEADER (size: 8)
 */
export interface STORAGE_DESCRIPTOR_HEADER {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
}

export const sizeofSTORAGE_DESCRIPTOR_HEADER = 8;

export function allocSTORAGE_DESCRIPTOR_HEADER(data?: Partial<STORAGE_DESCRIPTOR_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_DESCRIPTOR_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  return buf;
}

export class STORAGE_DESCRIPTOR_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_DEVICE_DESCRIPTOR (size: 64)
 */
export interface STORAGE_DEVICE_DESCRIPTOR {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u8 */
  DeviceType: number;
  /** u8 */
  DeviceTypeModifier: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  RemovableMedia: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  CommandQueueing: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  VendorIdOffset: number;
  /** u32 */
  ProductIdOffset: number;
  /** u32 */
  ProductRevisionOffset: number;
  /** u32 */
  SerialNumberOffset: number;
  /** Windows.Win32.Storage.FileSystem.STORAGE_BUS_TYPE */
  BusType: STORAGE_BUS_TYPE;
  /** u32 */
  RawPropertiesLength: number;
  /** array */
  RawDeviceProperties: Deno.PointerValue | null;
}

export const sizeofSTORAGE_DEVICE_DESCRIPTOR = 64;

export function allocSTORAGE_DEVICE_DESCRIPTOR(data?: Partial<STORAGE_DEVICE_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_DEVICE_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u8
  if (data?.DeviceType !== undefined) view.setUint8(8, Number(data.DeviceType));
  // 0x09: u8
  if (data?.DeviceTypeModifier !== undefined) view.setUint8(9, Number(data.DeviceTypeModifier));
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.RemovableMedia !== undefined) view.setBigUint64(16, data.RemovableMedia === null ? 0n : util.toBigInt(util.toPointer(data.RemovableMedia)), true);
  // 0x18: pointer
  if (data?.CommandQueueing !== undefined) view.setBigUint64(24, data.CommandQueueing === null ? 0n : util.toBigInt(util.toPointer(data.CommandQueueing)), true);
  // 0x20: u32
  if (data?.VendorIdOffset !== undefined) view.setUint32(32, Number(data.VendorIdOffset), true);
  // 0x24: u32
  if (data?.ProductIdOffset !== undefined) view.setUint32(36, Number(data.ProductIdOffset), true);
  // 0x28: u32
  if (data?.ProductRevisionOffset !== undefined) view.setUint32(40, Number(data.ProductRevisionOffset), true);
  // 0x2c: u32
  if (data?.SerialNumberOffset !== undefined) view.setUint32(44, Number(data.SerialNumberOffset), true);
  // 0x30: i32
  if (data?.BusType !== undefined) view.setInt32(48, Number(data.BusType), true);
  // 0x34: u32
  if (data?.RawPropertiesLength !== undefined) view.setUint32(52, Number(data.RawPropertiesLength), true);
  // 0x38: pointer
  if (data?.RawDeviceProperties !== undefined) view.setBigUint64(56, data.RawDeviceProperties === null ? 0n : util.toBigInt(util.toPointer(data.RawDeviceProperties)), true);
  return buf;
}

export class STORAGE_DEVICE_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u8
  get DeviceType(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get DeviceTypeModifier(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x10: pointer
  get RemovableMedia(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get CommandQueueing(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get VendorIdOffset(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get ProductIdOffset(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get ProductRevisionOffset(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get SerialNumberOffset(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: i32
  get BusType(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: u32
  get RawPropertiesLength(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: pointer
  get RawDeviceProperties(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u8
  set DeviceType(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set DeviceTypeModifier(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6

  // 0x10: pointer
  set RemovableMedia(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set CommandQueueing(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set VendorIdOffset(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set ProductIdOffset(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set ProductRevisionOffset(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set SerialNumberOffset(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: i32
  set BusType(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: u32
  set RawPropertiesLength(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: pointer
  set RawDeviceProperties(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_ADAPTER_DESCRIPTOR (size: 64)
 */
export interface STORAGE_ADAPTER_DESCRIPTOR {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  MaximumTransferLength: number;
  /** u32 */
  MaximumPhysicalPages: number;
  /** u32 */
  AlignmentMask: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  AdapterUsesPio: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  AdapterScansDown: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  CommandQueueing: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  AcceleratedTransfer: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  BusType: number;
  /** u16 */
  BusMajorVersion: number;
  /** u16 */
  BusMinorVersion: number;
  /** u8 */
  SrbType: number;
  /** u8 */
  AddressType: number;
}

export const sizeofSTORAGE_ADAPTER_DESCRIPTOR = 64;

export function allocSTORAGE_ADAPTER_DESCRIPTOR(data?: Partial<STORAGE_ADAPTER_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_ADAPTER_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.MaximumTransferLength !== undefined) view.setUint32(8, Number(data.MaximumTransferLength), true);
  // 0x0c: u32
  if (data?.MaximumPhysicalPages !== undefined) view.setUint32(12, Number(data.MaximumPhysicalPages), true);
  // 0x10: u32
  if (data?.AlignmentMask !== undefined) view.setUint32(16, Number(data.AlignmentMask), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.AdapterUsesPio !== undefined) view.setBigUint64(24, data.AdapterUsesPio === null ? 0n : util.toBigInt(util.toPointer(data.AdapterUsesPio)), true);
  // 0x20: pointer
  if (data?.AdapterScansDown !== undefined) view.setBigUint64(32, data.AdapterScansDown === null ? 0n : util.toBigInt(util.toPointer(data.AdapterScansDown)), true);
  // 0x28: pointer
  if (data?.CommandQueueing !== undefined) view.setBigUint64(40, data.CommandQueueing === null ? 0n : util.toBigInt(util.toPointer(data.CommandQueueing)), true);
  // 0x30: pointer
  if (data?.AcceleratedTransfer !== undefined) view.setBigUint64(48, data.AcceleratedTransfer === null ? 0n : util.toBigInt(util.toPointer(data.AcceleratedTransfer)), true);
  // 0x38: u8
  if (data?.BusType !== undefined) view.setUint8(56, Number(data.BusType));
  // 0x39: u16
  if (data?.BusMajorVersion !== undefined) view.setUint16(57, Number(data.BusMajorVersion), true);
  // 0x3b: u16
  if (data?.BusMinorVersion !== undefined) view.setUint16(59, Number(data.BusMinorVersion), true);
  // 0x3d: u8
  if (data?.SrbType !== undefined) view.setUint8(61, Number(data.SrbType));
  // 0x3e: u8
  if (data?.AddressType !== undefined) view.setUint8(62, Number(data.AddressType));
  // 0x3f: pad1
  return buf;
}

export class STORAGE_ADAPTER_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get MaximumTransferLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get MaximumPhysicalPages(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get AlignmentMask(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get AdapterUsesPio(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get AdapterScansDown(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get CommandQueueing(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get AcceleratedTransfer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u8
  get BusType(): number {
    return this.view.getUint8(56);
  }

  // 0x39: u16
  get BusMajorVersion(): number {
    return this.view.getUint16(57, true);
  }

  // 0x3b: u16
  get BusMinorVersion(): number {
    return this.view.getUint16(59, true);
  }

  // 0x3d: u8
  get SrbType(): number {
    return this.view.getUint8(61);
  }

  // 0x3e: u8
  get AddressType(): number {
    return this.view.getUint8(62);
  }

  // 0x3f: pad1

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set MaximumTransferLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set MaximumPhysicalPages(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set AlignmentMask(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set AdapterUsesPio(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set AdapterScansDown(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set CommandQueueing(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set AcceleratedTransfer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: u8
  set BusType(value: number) {
    this.view.setUint8(56, value);
  }

  // 0x39: u16
  set BusMajorVersion(value: number) {
    this.view.setUint16(57, value, true);
  }

  // 0x3b: u16
  set BusMinorVersion(value: number) {
    this.view.setUint16(59, value, true);
  }

  // 0x3d: u8
  set SrbType(value: number) {
    this.view.setUint8(61, value);
  }

  // 0x3e: u8
  set AddressType(value: number) {
    this.view.setUint8(62, value);
  }

  // 0x3f: pad1
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR (size: 32)
 */
export interface STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  BytesPerCacheLine: number;
  /** u32 */
  BytesOffsetForCacheAlignment: number;
  /** u32 */
  BytesPerLogicalSector: number;
  /** u32 */
  BytesPerPhysicalSector: number;
  /** u32 */
  BytesOffsetForSectorAlignment: number;
}

export const sizeofSTORAGE_ACCESS_ALIGNMENT_DESCRIPTOR = 32;

export function allocSTORAGE_ACCESS_ALIGNMENT_DESCRIPTOR(data?: Partial<STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_ACCESS_ALIGNMENT_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.BytesPerCacheLine !== undefined) view.setUint32(8, Number(data.BytesPerCacheLine), true);
  // 0x0c: u32
  if (data?.BytesOffsetForCacheAlignment !== undefined) view.setUint32(12, Number(data.BytesOffsetForCacheAlignment), true);
  // 0x10: u32
  if (data?.BytesPerLogicalSector !== undefined) view.setUint32(16, Number(data.BytesPerLogicalSector), true);
  // 0x14: u32
  if (data?.BytesPerPhysicalSector !== undefined) view.setUint32(20, Number(data.BytesPerPhysicalSector), true);
  // 0x18: u32
  if (data?.BytesOffsetForSectorAlignment !== undefined) view.setUint32(24, Number(data.BytesOffsetForSectorAlignment), true);
  // 0x1c: pad4
  return buf;
}

export class STORAGE_ACCESS_ALIGNMENT_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get BytesPerCacheLine(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get BytesOffsetForCacheAlignment(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get BytesPerLogicalSector(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get BytesPerPhysicalSector(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get BytesOffsetForSectorAlignment(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set BytesPerCacheLine(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set BytesOffsetForCacheAlignment(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set BytesPerLogicalSector(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set BytesPerPhysicalSector(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set BytesOffsetForSectorAlignment(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR (size: 16)
 */
export interface STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  MediumProductType: number;
}

export const sizeofSTORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR = 16;

export function allocSTORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR(data?: Partial<STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.MediumProductType !== undefined) view.setUint32(8, Number(data.MediumProductType), true);
  // 0x0c: pad4
  return buf;
}

export class STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get MediumProductType(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set MediumProductType(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * _Flags_e__Union (size: 16)
 */
export interface _Flags_e__Union {
  /** u16 */
  AsWORD: number;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Flags_e__Union = 16;

export function alloc_Flags_e__Union(data?: Partial<_Flags_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Flags_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.AsWORD !== undefined) view.setUint16(0, Number(data.AsWORD), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class _Flags_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get AsWORD(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set AsWORD(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_MINIPORT_DESCRIPTOR (size: 72)
 */
export interface STORAGE_MINIPORT_DESCRIPTOR {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.System.Ioctl.STORAGE_PORT_CODE_SET */
  Portdriver: STORAGE_PORT_CODE_SET;
  /** Windows.Win32.Foundation.BOOLEAN */
  LUNResetSupported: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  TargetResetSupported: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  IoTimeoutValue: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  ExtraIoInfoSupported: Uint8Array | Deno.PointerValue | null;
  /** _Flags_e__Union */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** array */
  Reserved0: Deno.PointerValue | null;
  /** u32 */
  Reserved1: number;
}

export const sizeofSTORAGE_MINIPORT_DESCRIPTOR = 72;

export function allocSTORAGE_MINIPORT_DESCRIPTOR(data?: Partial<STORAGE_MINIPORT_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_MINIPORT_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: i32
  if (data?.Portdriver !== undefined) view.setInt32(8, Number(data.Portdriver), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.LUNResetSupported !== undefined) view.setBigUint64(16, data.LUNResetSupported === null ? 0n : util.toBigInt(util.toPointer(data.LUNResetSupported)), true);
  // 0x18: pointer
  if (data?.TargetResetSupported !== undefined) view.setBigUint64(24, data.TargetResetSupported === null ? 0n : util.toBigInt(util.toPointer(data.TargetResetSupported)), true);
  // 0x20: u16
  if (data?.IoTimeoutValue !== undefined) view.setUint16(32, Number(data.IoTimeoutValue), true);
  // 0x22: pad6
  // 0x28: pointer
  if (data?.ExtraIoInfoSupported !== undefined) view.setBigUint64(40, data.ExtraIoInfoSupported === null ? 0n : util.toBigInt(util.toPointer(data.ExtraIoInfoSupported)), true);
  // 0x30: pointer
  if (data?.Flags !== undefined) view.setBigUint64(48, data.Flags === null ? 0n : util.toBigInt(util.toPointer(data.Flags)), true);
  // 0x38: pointer
  if (data?.Reserved0 !== undefined) view.setBigUint64(56, data.Reserved0 === null ? 0n : util.toBigInt(util.toPointer(data.Reserved0)), true);
  // 0x40: u32
  if (data?.Reserved1 !== undefined) view.setUint32(64, Number(data.Reserved1), true);
  // 0x44: pad4
  return buf;
}

export class STORAGE_MINIPORT_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get Portdriver(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get LUNResetSupported(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get TargetResetSupported(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u16
  get IoTimeoutValue(): number {
    return this.view.getUint16(32, true);
  }

  // 0x22: pad6

  // 0x28: pointer
  get ExtraIoInfoSupported(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get Flags(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get Reserved0(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: u32
  get Reserved1(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set Portdriver(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set LUNResetSupported(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set TargetResetSupported(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u16
  set IoTimeoutValue(value: number) {
    this.view.setUint16(32, value, true);
  }

  // 0x22: pad6

  // 0x28: pointer
  set ExtraIoInfoSupported(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set Flags(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set Reserved0(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: u32
  set Reserved1(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_IDENTIFIER (size: 24)
 */
export interface STORAGE_IDENTIFIER {
  /** Windows.Win32.System.Ioctl.STORAGE_IDENTIFIER_CODE_SET */
  CodeSet: STORAGE_IDENTIFIER_CODE_SET;
  /** Windows.Win32.System.Ioctl.STORAGE_IDENTIFIER_TYPE */
  Type: STORAGE_IDENTIFIER_TYPE;
  /** u16 */
  IdentifierSize: number;
  /** u16 */
  NextOffset: number;
  /** Windows.Win32.System.Ioctl.STORAGE_ASSOCIATION_TYPE */
  Association: STORAGE_ASSOCIATION_TYPE;
  /** array */
  Identifier: Deno.PointerValue | null;
}

export const sizeofSTORAGE_IDENTIFIER = 24;

export function allocSTORAGE_IDENTIFIER(data?: Partial<STORAGE_IDENTIFIER>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_IDENTIFIER);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.CodeSet !== undefined) view.setInt32(0, Number(data.CodeSet), true);
  // 0x04: i32
  if (data?.Type !== undefined) view.setInt32(4, Number(data.Type), true);
  // 0x08: u16
  if (data?.IdentifierSize !== undefined) view.setUint16(8, Number(data.IdentifierSize), true);
  // 0x0a: u16
  if (data?.NextOffset !== undefined) view.setUint16(10, Number(data.NextOffset), true);
  // 0x0c: i32
  if (data?.Association !== undefined) view.setInt32(12, Number(data.Association), true);
  // 0x10: pointer
  if (data?.Identifier !== undefined) view.setBigUint64(16, data.Identifier === null ? 0n : util.toBigInt(util.toPointer(data.Identifier)), true);
  return buf;
}

export class STORAGE_IDENTIFIERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get CodeSet(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get Type(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u16
  get IdentifierSize(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get NextOffset(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: i32
  get Association(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: pointer
  get Identifier(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set CodeSet(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set Type(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u16
  set IdentifierSize(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set NextOffset(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: i32
  set Association(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: pointer
  set Identifier(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_DEVICE_ID_DESCRIPTOR (size: 24)
 */
export interface STORAGE_DEVICE_ID_DESCRIPTOR {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  NumberOfIdentifiers: number;
  /** array */
  Identifiers: Deno.PointerValue | null;
}

export const sizeofSTORAGE_DEVICE_ID_DESCRIPTOR = 24;

export function allocSTORAGE_DEVICE_ID_DESCRIPTOR(data?: Partial<STORAGE_DEVICE_ID_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_DEVICE_ID_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.NumberOfIdentifiers !== undefined) view.setUint32(8, Number(data.NumberOfIdentifiers), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Identifiers !== undefined) view.setBigUint64(16, data.Identifiers === null ? 0n : util.toBigInt(util.toPointer(data.Identifiers)), true);
  return buf;
}

export class STORAGE_DEVICE_ID_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get NumberOfIdentifiers(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Identifiers(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set NumberOfIdentifiers(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Identifiers(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICE_SEEK_PENALTY_DESCRIPTOR (size: 16)
 */
export interface DEVICE_SEEK_PENALTY_DESCRIPTOR {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  IncursSeekPenalty: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDEVICE_SEEK_PENALTY_DESCRIPTOR = 16;

export function allocDEVICE_SEEK_PENALTY_DESCRIPTOR(data?: Partial<DEVICE_SEEK_PENALTY_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_SEEK_PENALTY_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: pointer
  if (data?.IncursSeekPenalty !== undefined) view.setBigUint64(8, data.IncursSeekPenalty === null ? 0n : util.toBigInt(util.toPointer(data.IncursSeekPenalty)), true);
  return buf;
}

export class DEVICE_SEEK_PENALTY_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get IncursSeekPenalty(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set IncursSeekPenalty(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICE_WRITE_AGGREGATION_DESCRIPTOR (size: 16)
 */
export interface DEVICE_WRITE_AGGREGATION_DESCRIPTOR {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  BenefitsFromWriteAggregation: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDEVICE_WRITE_AGGREGATION_DESCRIPTOR = 16;

export function allocDEVICE_WRITE_AGGREGATION_DESCRIPTOR(data?: Partial<DEVICE_WRITE_AGGREGATION_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_WRITE_AGGREGATION_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: pointer
  if (data?.BenefitsFromWriteAggregation !== undefined) view.setBigUint64(8, data.BenefitsFromWriteAggregation === null ? 0n : util.toBigInt(util.toPointer(data.BenefitsFromWriteAggregation)), true);
  return buf;
}

export class DEVICE_WRITE_AGGREGATION_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get BenefitsFromWriteAggregation(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set BenefitsFromWriteAggregation(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICE_TRIM_DESCRIPTOR (size: 16)
 */
export interface DEVICE_TRIM_DESCRIPTOR {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  TrimEnabled: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDEVICE_TRIM_DESCRIPTOR = 16;

export function allocDEVICE_TRIM_DESCRIPTOR(data?: Partial<DEVICE_TRIM_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_TRIM_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: pointer
  if (data?.TrimEnabled !== undefined) view.setBigUint64(8, data.TrimEnabled === null ? 0n : util.toBigInt(util.toPointer(data.TrimEnabled)), true);
  return buf;
}

export class DEVICE_TRIM_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get TrimEnabled(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set TrimEnabled(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICE_LB_PROVISIONING_DESCRIPTOR (size: 48)
 */
export interface DEVICE_LB_PROVISIONING_DESCRIPTOR {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u8 */
  _bitfield: number;
  /** array */
  Reserved1: Deno.PointerValue | null;
  /** u64 */
  OptimalUnmapGranularity: number | bigint;
  /** u64 */
  UnmapGranularityAlignment: number | bigint;
  /** u32 */
  MaxUnmapLbaCount: number;
  /** u32 */
  MaxUnmapBlockDescriptorCount: number;
}

export const sizeofDEVICE_LB_PROVISIONING_DESCRIPTOR = 48;

export function allocDEVICE_LB_PROVISIONING_DESCRIPTOR(data?: Partial<DEVICE_LB_PROVISIONING_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_LB_PROVISIONING_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u8
  if (data?._bitfield !== undefined) view.setUint8(8, Number(data._bitfield));
  // 0x09: pad7
  // 0x10: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(16, data.Reserved1 === null ? 0n : util.toBigInt(util.toPointer(data.Reserved1)), true);
  // 0x18: u64
  if (data?.OptimalUnmapGranularity !== undefined) view.setBigUint64(24, util.toBigInt(data.OptimalUnmapGranularity), true);
  // 0x20: u64
  if (data?.UnmapGranularityAlignment !== undefined) view.setBigUint64(32, util.toBigInt(data.UnmapGranularityAlignment), true);
  // 0x28: u32
  if (data?.MaxUnmapLbaCount !== undefined) view.setUint32(40, Number(data.MaxUnmapLbaCount), true);
  // 0x2c: u32
  if (data?.MaxUnmapBlockDescriptorCount !== undefined) view.setUint32(44, Number(data.MaxUnmapBlockDescriptorCount), true);
  return buf;
}

export class DEVICE_LB_PROVISIONING_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u8
  get _bitfield(): number {
    return this.view.getUint8(8);
  }

  // 0x09: pad7

  // 0x10: pointer
  get Reserved1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u64
  get OptimalUnmapGranularity(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u64
  get UnmapGranularityAlignment(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: u32
  get MaxUnmapLbaCount(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get MaxUnmapBlockDescriptorCount(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u8
  set _bitfield(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: pad7

  // 0x10: pointer
  set Reserved1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u64
  set OptimalUnmapGranularity(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u64
  set UnmapGranularityAlignment(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: u32
  set MaxUnmapLbaCount(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set MaxUnmapBlockDescriptorCount(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_LB_PROVISIONING_MAP_RESOURCES (size: 56)
 */
export interface STORAGE_LB_PROVISIONING_MAP_RESOURCES {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** u8 */
  _bitfield1: number;
  /** array */
  Reserved1: Deno.PointerValue | null;
  /** u8 */
  _bitfield2: number;
  /** array */
  Reserved3: Deno.PointerValue | null;
  /** u64 */
  AvailableMappingResources: number | bigint;
  /** u64 */
  UsedMappingResources: number | bigint;
}

export const sizeofSTORAGE_LB_PROVISIONING_MAP_RESOURCES = 56;

export function allocSTORAGE_LB_PROVISIONING_MAP_RESOURCES(data?: Partial<STORAGE_LB_PROVISIONING_MAP_RESOURCES>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_LB_PROVISIONING_MAP_RESOURCES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u8
  if (data?._bitfield1 !== undefined) view.setUint8(8, Number(data._bitfield1));
  // 0x09: pad7
  // 0x10: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(16, data.Reserved1 === null ? 0n : util.toBigInt(util.toPointer(data.Reserved1)), true);
  // 0x18: u8
  if (data?._bitfield2 !== undefined) view.setUint8(24, Number(data._bitfield2));
  // 0x19: pad7
  // 0x20: pointer
  if (data?.Reserved3 !== undefined) view.setBigUint64(32, data.Reserved3 === null ? 0n : util.toBigInt(util.toPointer(data.Reserved3)), true);
  // 0x28: u64
  if (data?.AvailableMappingResources !== undefined) view.setBigUint64(40, util.toBigInt(data.AvailableMappingResources), true);
  // 0x30: u64
  if (data?.UsedMappingResources !== undefined) view.setBigUint64(48, util.toBigInt(data.UsedMappingResources), true);
  return buf;
}

export class STORAGE_LB_PROVISIONING_MAP_RESOURCESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Version(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u8
  get _bitfield1(): number {
    return this.view.getUint8(8);
  }

  // 0x09: pad7

  // 0x10: pointer
  get Reserved1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u8
  get _bitfield2(): number {
    return this.view.getUint8(24);
  }

  // 0x19: pad7

  // 0x20: pointer
  get Reserved3(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u64
  get AvailableMappingResources(): number | bigint {
    return this.view.getBigUint64(40, true);
  }

  // 0x30: u64
  get UsedMappingResources(): number | bigint {
    return this.view.getBigUint64(48, true);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Version(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u8
  set _bitfield1(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: pad7

  // 0x10: pointer
  set Reserved1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u8
  set _bitfield2(value: number) {
    this.view.setUint8(24, value);
  }

  // 0x19: pad7

  // 0x20: pointer
  set Reserved3(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: u64
  set AvailableMappingResources(value: number | bigint) {
    this.view.setBigUint64(40, util.toBigInt(value), true);
  }

  // 0x30: u64
  set UsedMappingResources(value: number | bigint) {
    this.view.setBigUint64(48, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICE_POWER_DESCRIPTOR (size: 72)
 */
export interface DEVICE_POWER_DESCRIPTOR {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  DeviceAttentionSupported: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  AsynchronousNotificationSupported: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  IdlePowerManagementEnabled: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  D3ColdEnabled: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  D3ColdSupported: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  NoVerifyDuringIdlePower: Uint8Array | Deno.PointerValue | null;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** u32 */
  IdleTimeoutInMS: number;
}

export const sizeofDEVICE_POWER_DESCRIPTOR = 72;

export function allocDEVICE_POWER_DESCRIPTOR(data?: Partial<DEVICE_POWER_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_POWER_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: pointer
  if (data?.DeviceAttentionSupported !== undefined) view.setBigUint64(8, data.DeviceAttentionSupported === null ? 0n : util.toBigInt(util.toPointer(data.DeviceAttentionSupported)), true);
  // 0x10: pointer
  if (data?.AsynchronousNotificationSupported !== undefined) view.setBigUint64(16, data.AsynchronousNotificationSupported === null ? 0n : util.toBigInt(util.toPointer(data.AsynchronousNotificationSupported)), true);
  // 0x18: pointer
  if (data?.IdlePowerManagementEnabled !== undefined) view.setBigUint64(24, data.IdlePowerManagementEnabled === null ? 0n : util.toBigInt(util.toPointer(data.IdlePowerManagementEnabled)), true);
  // 0x20: pointer
  if (data?.D3ColdEnabled !== undefined) view.setBigUint64(32, data.D3ColdEnabled === null ? 0n : util.toBigInt(util.toPointer(data.D3ColdEnabled)), true);
  // 0x28: pointer
  if (data?.D3ColdSupported !== undefined) view.setBigUint64(40, data.D3ColdSupported === null ? 0n : util.toBigInt(util.toPointer(data.D3ColdSupported)), true);
  // 0x30: pointer
  if (data?.NoVerifyDuringIdlePower !== undefined) view.setBigUint64(48, data.NoVerifyDuringIdlePower === null ? 0n : util.toBigInt(util.toPointer(data.NoVerifyDuringIdlePower)), true);
  // 0x38: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(56, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  // 0x40: u32
  if (data?.IdleTimeoutInMS !== undefined) view.setUint32(64, Number(data.IdleTimeoutInMS), true);
  // 0x44: pad4
  return buf;
}

export class DEVICE_POWER_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get DeviceAttentionSupported(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get AsynchronousNotificationSupported(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get IdlePowerManagementEnabled(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get D3ColdEnabled(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get D3ColdSupported(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get NoVerifyDuringIdlePower(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: u32
  get IdleTimeoutInMS(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set DeviceAttentionSupported(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set AsynchronousNotificationSupported(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set IdlePowerManagementEnabled(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set D3ColdEnabled(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set D3ColdSupported(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set NoVerifyDuringIdlePower(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: u32
  set IdleTimeoutInMS(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4
}

/**
 * Windows.Win32.System.Ioctl.DEVICE_COPY_OFFLOAD_DESCRIPTOR (size: 56)
 */
export interface DEVICE_COPY_OFFLOAD_DESCRIPTOR {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  MaximumTokenLifetime: number;
  /** u32 */
  DefaultTokenLifetime: number;
  /** u64 */
  MaximumTransferSize: number | bigint;
  /** u64 */
  OptimalTransferCount: number | bigint;
  /** u32 */
  MaximumDataDescriptors: number;
  /** u32 */
  MaximumTransferLengthPerDescriptor: number;
  /** u32 */
  OptimalTransferLengthPerDescriptor: number;
  /** u16 */
  OptimalTransferLengthGranularity: number;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofDEVICE_COPY_OFFLOAD_DESCRIPTOR = 56;

export function allocDEVICE_COPY_OFFLOAD_DESCRIPTOR(data?: Partial<DEVICE_COPY_OFFLOAD_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_COPY_OFFLOAD_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.MaximumTokenLifetime !== undefined) view.setUint32(8, Number(data.MaximumTokenLifetime), true);
  // 0x0c: u32
  if (data?.DefaultTokenLifetime !== undefined) view.setUint32(12, Number(data.DefaultTokenLifetime), true);
  // 0x10: u64
  if (data?.MaximumTransferSize !== undefined) view.setBigUint64(16, util.toBigInt(data.MaximumTransferSize), true);
  // 0x18: u64
  if (data?.OptimalTransferCount !== undefined) view.setBigUint64(24, util.toBigInt(data.OptimalTransferCount), true);
  // 0x20: u32
  if (data?.MaximumDataDescriptors !== undefined) view.setUint32(32, Number(data.MaximumDataDescriptors), true);
  // 0x24: u32
  if (data?.MaximumTransferLengthPerDescriptor !== undefined) view.setUint32(36, Number(data.MaximumTransferLengthPerDescriptor), true);
  // 0x28: u32
  if (data?.OptimalTransferLengthPerDescriptor !== undefined) view.setUint32(40, Number(data.OptimalTransferLengthPerDescriptor), true);
  // 0x2c: u16
  if (data?.OptimalTransferLengthGranularity !== undefined) view.setUint16(44, Number(data.OptimalTransferLengthGranularity), true);
  // 0x2e: pad2
  // 0x30: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(48, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

export class DEVICE_COPY_OFFLOAD_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get MaximumTokenLifetime(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get DefaultTokenLifetime(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u64
  get MaximumTransferSize(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get OptimalTransferCount(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u32
  get MaximumDataDescriptors(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get MaximumTransferLengthPerDescriptor(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get OptimalTransferLengthPerDescriptor(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u16
  get OptimalTransferLengthGranularity(): number {
    return this.view.getUint16(44, true);
  }

  // 0x2e: pad2

  // 0x30: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set MaximumTokenLifetime(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set DefaultTokenLifetime(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u64
  set MaximumTransferSize(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set OptimalTransferCount(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u32
  set MaximumDataDescriptors(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set MaximumTransferLengthPerDescriptor(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set OptimalTransferLengthPerDescriptor(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u16
  set OptimalTransferLengthGranularity(value: number) {
    this.view.setUint16(44, value, true);
  }

  // 0x2e: pad2

  // 0x30: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_DEVICE_RESILIENCY_DESCRIPTOR (size: 32)
 */
export interface STORAGE_DEVICE_RESILIENCY_DESCRIPTOR {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  NameOffset: number;
  /** u32 */
  NumberOfLogicalCopies: number;
  /** u32 */
  NumberOfPhysicalCopies: number;
  /** u32 */
  PhysicalDiskRedundancy: number;
  /** u32 */
  NumberOfColumns: number;
  /** u32 */
  Interleave: number;
}

export const sizeofSTORAGE_DEVICE_RESILIENCY_DESCRIPTOR = 32;

export function allocSTORAGE_DEVICE_RESILIENCY_DESCRIPTOR(data?: Partial<STORAGE_DEVICE_RESILIENCY_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_DEVICE_RESILIENCY_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.NameOffset !== undefined) view.setUint32(8, Number(data.NameOffset), true);
  // 0x0c: u32
  if (data?.NumberOfLogicalCopies !== undefined) view.setUint32(12, Number(data.NumberOfLogicalCopies), true);
  // 0x10: u32
  if (data?.NumberOfPhysicalCopies !== undefined) view.setUint32(16, Number(data.NumberOfPhysicalCopies), true);
  // 0x14: u32
  if (data?.PhysicalDiskRedundancy !== undefined) view.setUint32(20, Number(data.PhysicalDiskRedundancy), true);
  // 0x18: u32
  if (data?.NumberOfColumns !== undefined) view.setUint32(24, Number(data.NumberOfColumns), true);
  // 0x1c: u32
  if (data?.Interleave !== undefined) view.setUint32(28, Number(data.Interleave), true);
  return buf;
}

export class STORAGE_DEVICE_RESILIENCY_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get NameOffset(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get NumberOfLogicalCopies(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get NumberOfPhysicalCopies(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get PhysicalDiskRedundancy(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get NumberOfColumns(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get Interleave(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set NameOffset(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set NumberOfLogicalCopies(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set NumberOfPhysicalCopies(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set PhysicalDiskRedundancy(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set NumberOfColumns(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set Interleave(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_RPMB_DESCRIPTOR (size: 24)
 */
export interface STORAGE_RPMB_DESCRIPTOR {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  SizeInBytes: number;
  /** u32 */
  MaxReliableWriteSizeInBytes: number;
  /** Windows.Win32.System.Ioctl.STORAGE_RPMB_FRAME_TYPE */
  FrameFormat: STORAGE_RPMB_FRAME_TYPE;
}

export const sizeofSTORAGE_RPMB_DESCRIPTOR = 24;

export function allocSTORAGE_RPMB_DESCRIPTOR(data?: Partial<STORAGE_RPMB_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_RPMB_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.SizeInBytes !== undefined) view.setUint32(8, Number(data.SizeInBytes), true);
  // 0x0c: u32
  if (data?.MaxReliableWriteSizeInBytes !== undefined) view.setUint32(12, Number(data.MaxReliableWriteSizeInBytes), true);
  // 0x10: i32
  if (data?.FrameFormat !== undefined) view.setInt32(16, Number(data.FrameFormat), true);
  // 0x14: pad4
  return buf;
}

export class STORAGE_RPMB_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get SizeInBytes(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get MaxReliableWriteSizeInBytes(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: i32
  get FrameFormat(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set SizeInBytes(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set MaxReliableWriteSizeInBytes(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: i32
  set FrameFormat(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_CRYPTO_CAPABILITY (size: 24)
 */
export interface STORAGE_CRYPTO_CAPABILITY {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  CryptoCapabilityIndex: number;
  /** Windows.Win32.System.Ioctl.STORAGE_CRYPTO_ALGORITHM_ID */
  AlgorithmId: STORAGE_CRYPTO_ALGORITHM_ID;
  /** Windows.Win32.System.Ioctl.STORAGE_CRYPTO_KEY_SIZE */
  KeySize: STORAGE_CRYPTO_KEY_SIZE;
  /** u32 */
  DataUnitSizeBitmask: number;
}

export const sizeofSTORAGE_CRYPTO_CAPABILITY = 24;

export function allocSTORAGE_CRYPTO_CAPABILITY(data?: Partial<STORAGE_CRYPTO_CAPABILITY>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_CRYPTO_CAPABILITY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.CryptoCapabilityIndex !== undefined) view.setUint32(8, Number(data.CryptoCapabilityIndex), true);
  // 0x0c: i32
  if (data?.AlgorithmId !== undefined) view.setInt32(12, Number(data.AlgorithmId), true);
  // 0x10: i32
  if (data?.KeySize !== undefined) view.setInt32(16, Number(data.KeySize), true);
  // 0x14: u32
  if (data?.DataUnitSizeBitmask !== undefined) view.setUint32(20, Number(data.DataUnitSizeBitmask), true);
  return buf;
}

export class STORAGE_CRYPTO_CAPABILITYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get CryptoCapabilityIndex(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get AlgorithmId(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get KeySize(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u32
  get DataUnitSizeBitmask(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set CryptoCapabilityIndex(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set AlgorithmId(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set KeySize(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u32
  set DataUnitSizeBitmask(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_CRYPTO_DESCRIPTOR (size: 24)
 */
export interface STORAGE_CRYPTO_DESCRIPTOR {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  NumKeysSupported: number;
  /** u32 */
  NumCryptoCapabilities: number;
  /** array */
  CryptoCapabilities: Deno.PointerValue | null;
}

export const sizeofSTORAGE_CRYPTO_DESCRIPTOR = 24;

export function allocSTORAGE_CRYPTO_DESCRIPTOR(data?: Partial<STORAGE_CRYPTO_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_CRYPTO_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.NumKeysSupported !== undefined) view.setUint32(8, Number(data.NumKeysSupported), true);
  // 0x0c: u32
  if (data?.NumCryptoCapabilities !== undefined) view.setUint32(12, Number(data.NumCryptoCapabilities), true);
  // 0x10: pointer
  if (data?.CryptoCapabilities !== undefined) view.setBigUint64(16, data.CryptoCapabilities === null ? 0n : util.toBigInt(util.toPointer(data.CryptoCapabilities)), true);
  return buf;
}

export class STORAGE_CRYPTO_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get NumKeysSupported(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get NumCryptoCapabilities(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get CryptoCapabilities(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set NumKeysSupported(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set NumCryptoCapabilities(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set CryptoCapabilities(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_TIER (size: 48)
 */
export interface STORAGE_TIER {
  /** System.Guid */
  Id: Uint8Array | Deno.PointerValue | null;
  /** array */
  Name: Deno.PointerValue | null;
  /** array */
  Description: Deno.PointerValue | null;
  /** u64 */
  Flags: number | bigint;
  /** u64 */
  ProvisionedCapacity: number | bigint;
  /** Windows.Win32.System.Ioctl.STORAGE_TIER_MEDIA_TYPE */
  MediaType: STORAGE_TIER_MEDIA_TYPE;
  /** Windows.Win32.System.Ioctl.STORAGE_TIER_CLASS */
  Class: STORAGE_TIER_CLASS;
}

export const sizeofSTORAGE_TIER = 48;

export function allocSTORAGE_TIER(data?: Partial<STORAGE_TIER>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_TIER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Id !== undefined) view.setBigUint64(0, data.Id === null ? 0n : util.toBigInt(util.toPointer(data.Id)), true);
  // 0x08: pointer
  if (data?.Name !== undefined) view.setBigUint64(8, data.Name === null ? 0n : util.toBigInt(util.toPointer(data.Name)), true);
  // 0x10: pointer
  if (data?.Description !== undefined) view.setBigUint64(16, data.Description === null ? 0n : util.toBigInt(util.toPointer(data.Description)), true);
  // 0x18: u64
  if (data?.Flags !== undefined) view.setBigUint64(24, util.toBigInt(data.Flags), true);
  // 0x20: u64
  if (data?.ProvisionedCapacity !== undefined) view.setBigUint64(32, util.toBigInt(data.ProvisionedCapacity), true);
  // 0x28: i32
  if (data?.MediaType !== undefined) view.setInt32(40, Number(data.MediaType), true);
  // 0x2c: i32
  if (data?.Class !== undefined) view.setInt32(44, Number(data.Class), true);
  return buf;
}

export class STORAGE_TIERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Id(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Description(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u64
  get Flags(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u64
  get ProvisionedCapacity(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: i32
  get MediaType(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: i32
  get Class(): number {
    return this.view.getInt32(44, true);
  }

  // 0x00: pointer
  set Id(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Description(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u64
  set Flags(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u64
  set ProvisionedCapacity(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: i32
  set MediaType(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: i32
  set Class(value: number) {
    this.view.setInt32(44, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_DEVICE_TIERING_DESCRIPTOR (size: 32)
 */
export interface STORAGE_DEVICE_TIERING_DESCRIPTOR {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
  /** u32 */
  TotalNumberOfTiers: number;
  /** u32 */
  NumberOfTiersReturned: number;
  /** array */
  Tiers: Deno.PointerValue | null;
}

export const sizeofSTORAGE_DEVICE_TIERING_DESCRIPTOR = 32;

export function allocSTORAGE_DEVICE_TIERING_DESCRIPTOR(data?: Partial<STORAGE_DEVICE_TIERING_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_DEVICE_TIERING_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.TotalNumberOfTiers !== undefined) view.setUint32(12, Number(data.TotalNumberOfTiers), true);
  // 0x10: u32
  if (data?.NumberOfTiersReturned !== undefined) view.setUint32(16, Number(data.NumberOfTiersReturned), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Tiers !== undefined) view.setBigUint64(24, data.Tiers === null ? 0n : util.toBigInt(util.toPointer(data.Tiers)), true);
  return buf;
}

export class STORAGE_DEVICE_TIERING_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get TotalNumberOfTiers(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get NumberOfTiersReturned(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Tiers(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set TotalNumberOfTiers(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set NumberOfTiersReturned(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Tiers(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR (size: 24)
 */
export interface STORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  NumberOfFaultDomains: number;
  /** array */
  FaultDomainIds: Deno.PointerValue | null;
}

export const sizeofSTORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR = 24;

export function allocSTORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR(data?: Partial<STORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.NumberOfFaultDomains !== undefined) view.setUint32(8, Number(data.NumberOfFaultDomains), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.FaultDomainIds !== undefined) view.setBigUint64(16, data.FaultDomainIds === null ? 0n : util.toBigInt(util.toPointer(data.FaultDomainIds)), true);
  return buf;
}

export class STORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get NumberOfFaultDomains(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get FaultDomainIds(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set NumberOfFaultDomains(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set FaultDomainIds(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_PROTOCOL_DATA_SUBVALUE_GET_LOG_PAGE (size: 16)
 */
export interface STORAGE_PROTOCOL_DATA_SUBVALUE_GET_LOG_PAGE {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  AsUlong: number;
}

export const sizeofSTORAGE_PROTOCOL_DATA_SUBVALUE_GET_LOG_PAGE = 16;

export function allocSTORAGE_PROTOCOL_DATA_SUBVALUE_GET_LOG_PAGE(data?: Partial<STORAGE_PROTOCOL_DATA_SUBVALUE_GET_LOG_PAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_PROTOCOL_DATA_SUBVALUE_GET_LOG_PAGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u32
  if (data?.AsUlong !== undefined) view.setUint32(8, Number(data.AsUlong), true);
  // 0x0c: pad4
  return buf;
}

export class STORAGE_PROTOCOL_DATA_SUBVALUE_GET_LOG_PAGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get AsUlong(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set AsUlong(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_PROTOCOL_SPECIFIC_DATA (size: 40)
 */
export interface STORAGE_PROTOCOL_SPECIFIC_DATA {
  /** Windows.Win32.System.Ioctl.STORAGE_PROTOCOL_TYPE */
  ProtocolType: STORAGE_PROTOCOL_TYPE;
  /** u32 */
  DataType: number;
  /** u32 */
  ProtocolDataRequestValue: number;
  /** u32 */
  ProtocolDataRequestSubValue: number;
  /** u32 */
  ProtocolDataOffset: number;
  /** u32 */
  ProtocolDataLength: number;
  /** u32 */
  FixedProtocolReturnData: number;
  /** u32 */
  ProtocolDataRequestSubValue2: number;
  /** u32 */
  ProtocolDataRequestSubValue3: number;
  /** u32 */
  ProtocolDataRequestSubValue4: number;
}

export const sizeofSTORAGE_PROTOCOL_SPECIFIC_DATA = 40;

export function allocSTORAGE_PROTOCOL_SPECIFIC_DATA(data?: Partial<STORAGE_PROTOCOL_SPECIFIC_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_PROTOCOL_SPECIFIC_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ProtocolType !== undefined) view.setInt32(0, Number(data.ProtocolType), true);
  // 0x04: u32
  if (data?.DataType !== undefined) view.setUint32(4, Number(data.DataType), true);
  // 0x08: u32
  if (data?.ProtocolDataRequestValue !== undefined) view.setUint32(8, Number(data.ProtocolDataRequestValue), true);
  // 0x0c: u32
  if (data?.ProtocolDataRequestSubValue !== undefined) view.setUint32(12, Number(data.ProtocolDataRequestSubValue), true);
  // 0x10: u32
  if (data?.ProtocolDataOffset !== undefined) view.setUint32(16, Number(data.ProtocolDataOffset), true);
  // 0x14: u32
  if (data?.ProtocolDataLength !== undefined) view.setUint32(20, Number(data.ProtocolDataLength), true);
  // 0x18: u32
  if (data?.FixedProtocolReturnData !== undefined) view.setUint32(24, Number(data.FixedProtocolReturnData), true);
  // 0x1c: u32
  if (data?.ProtocolDataRequestSubValue2 !== undefined) view.setUint32(28, Number(data.ProtocolDataRequestSubValue2), true);
  // 0x20: u32
  if (data?.ProtocolDataRequestSubValue3 !== undefined) view.setUint32(32, Number(data.ProtocolDataRequestSubValue3), true);
  // 0x24: u32
  if (data?.ProtocolDataRequestSubValue4 !== undefined) view.setUint32(36, Number(data.ProtocolDataRequestSubValue4), true);
  return buf;
}

export class STORAGE_PROTOCOL_SPECIFIC_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get ProtocolType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get DataType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ProtocolDataRequestValue(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ProtocolDataRequestSubValue(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ProtocolDataOffset(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ProtocolDataLength(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get FixedProtocolReturnData(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get ProtocolDataRequestSubValue2(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get ProtocolDataRequestSubValue3(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get ProtocolDataRequestSubValue4(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: i32
  set ProtocolType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set DataType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ProtocolDataRequestValue(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ProtocolDataRequestSubValue(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ProtocolDataOffset(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ProtocolDataLength(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set FixedProtocolReturnData(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set ProtocolDataRequestSubValue2(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set ProtocolDataRequestSubValue3(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set ProtocolDataRequestSubValue4(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_PROTOCOL_SPECIFIC_DATA_EXT (size: 56)
 */
export interface STORAGE_PROTOCOL_SPECIFIC_DATA_EXT {
  /** Windows.Win32.System.Ioctl.STORAGE_PROTOCOL_TYPE */
  ProtocolType: STORAGE_PROTOCOL_TYPE;
  /** u32 */
  DataType: number;
  /** u32 */
  ProtocolDataValue: number;
  /** u32 */
  ProtocolDataSubValue: number;
  /** u32 */
  ProtocolDataOffset: number;
  /** u32 */
  ProtocolDataLength: number;
  /** u32 */
  FixedProtocolReturnData: number;
  /** u32 */
  ProtocolDataSubValue2: number;
  /** u32 */
  ProtocolDataSubValue3: number;
  /** u32 */
  ProtocolDataSubValue4: number;
  /** u32 */
  ProtocolDataSubValue5: number;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofSTORAGE_PROTOCOL_SPECIFIC_DATA_EXT = 56;

export function allocSTORAGE_PROTOCOL_SPECIFIC_DATA_EXT(data?: Partial<STORAGE_PROTOCOL_SPECIFIC_DATA_EXT>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_PROTOCOL_SPECIFIC_DATA_EXT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ProtocolType !== undefined) view.setInt32(0, Number(data.ProtocolType), true);
  // 0x04: u32
  if (data?.DataType !== undefined) view.setUint32(4, Number(data.DataType), true);
  // 0x08: u32
  if (data?.ProtocolDataValue !== undefined) view.setUint32(8, Number(data.ProtocolDataValue), true);
  // 0x0c: u32
  if (data?.ProtocolDataSubValue !== undefined) view.setUint32(12, Number(data.ProtocolDataSubValue), true);
  // 0x10: u32
  if (data?.ProtocolDataOffset !== undefined) view.setUint32(16, Number(data.ProtocolDataOffset), true);
  // 0x14: u32
  if (data?.ProtocolDataLength !== undefined) view.setUint32(20, Number(data.ProtocolDataLength), true);
  // 0x18: u32
  if (data?.FixedProtocolReturnData !== undefined) view.setUint32(24, Number(data.FixedProtocolReturnData), true);
  // 0x1c: u32
  if (data?.ProtocolDataSubValue2 !== undefined) view.setUint32(28, Number(data.ProtocolDataSubValue2), true);
  // 0x20: u32
  if (data?.ProtocolDataSubValue3 !== undefined) view.setUint32(32, Number(data.ProtocolDataSubValue3), true);
  // 0x24: u32
  if (data?.ProtocolDataSubValue4 !== undefined) view.setUint32(36, Number(data.ProtocolDataSubValue4), true);
  // 0x28: u32
  if (data?.ProtocolDataSubValue5 !== undefined) view.setUint32(40, Number(data.ProtocolDataSubValue5), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(48, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

export class STORAGE_PROTOCOL_SPECIFIC_DATA_EXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get ProtocolType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get DataType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ProtocolDataValue(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ProtocolDataSubValue(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ProtocolDataOffset(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ProtocolDataLength(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get FixedProtocolReturnData(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get ProtocolDataSubValue2(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get ProtocolDataSubValue3(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get ProtocolDataSubValue4(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get ProtocolDataSubValue5(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set ProtocolType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set DataType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ProtocolDataValue(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ProtocolDataSubValue(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ProtocolDataOffset(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ProtocolDataLength(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set FixedProtocolReturnData(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set ProtocolDataSubValue2(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set ProtocolDataSubValue3(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set ProtocolDataSubValue4(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set ProtocolDataSubValue5(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_PROTOCOL_DATA_DESCRIPTOR (size: 16)
 */
export interface STORAGE_PROTOCOL_DATA_DESCRIPTOR {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.System.Ioctl.STORAGE_PROTOCOL_SPECIFIC_DATA */
  ProtocolSpecificData: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSTORAGE_PROTOCOL_DATA_DESCRIPTOR = 16;

export function allocSTORAGE_PROTOCOL_DATA_DESCRIPTOR(data?: Partial<STORAGE_PROTOCOL_DATA_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_PROTOCOL_DATA_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: pointer
  if (data?.ProtocolSpecificData !== undefined) view.setBigUint64(8, data.ProtocolSpecificData === null ? 0n : util.toBigInt(util.toPointer(data.ProtocolSpecificData)), true);
  return buf;
}

export class STORAGE_PROTOCOL_DATA_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ProtocolSpecificData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ProtocolSpecificData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_PROTOCOL_DATA_DESCRIPTOR_EXT (size: 16)
 */
export interface STORAGE_PROTOCOL_DATA_DESCRIPTOR_EXT {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.System.Ioctl.STORAGE_PROTOCOL_SPECIFIC_DATA_EXT */
  ProtocolSpecificData: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSTORAGE_PROTOCOL_DATA_DESCRIPTOR_EXT = 16;

export function allocSTORAGE_PROTOCOL_DATA_DESCRIPTOR_EXT(data?: Partial<STORAGE_PROTOCOL_DATA_DESCRIPTOR_EXT>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_PROTOCOL_DATA_DESCRIPTOR_EXT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: pointer
  if (data?.ProtocolSpecificData !== undefined) view.setBigUint64(8, data.ProtocolSpecificData === null ? 0n : util.toBigInt(util.toPointer(data.ProtocolSpecificData)), true);
  return buf;
}

export class STORAGE_PROTOCOL_DATA_DESCRIPTOR_EXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ProtocolSpecificData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ProtocolSpecificData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_TEMPERATURE_INFO (size: 40)
 */
export interface STORAGE_TEMPERATURE_INFO {
  /** u16 */
  Index: number;
  /** i16 */
  Temperature: number;
  /** i16 */
  OverThreshold: number;
  /** i16 */
  UnderThreshold: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  OverThresholdChangable: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  UnderThresholdChangable: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  EventGenerated: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  Reserved0: number;
  /** u32 */
  Reserved1: number;
}

export const sizeofSTORAGE_TEMPERATURE_INFO = 40;

export function allocSTORAGE_TEMPERATURE_INFO(data?: Partial<STORAGE_TEMPERATURE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_TEMPERATURE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Index !== undefined) view.setUint16(0, Number(data.Index), true);
  // 0x02: i16
  if (data?.Temperature !== undefined) view.setInt16(2, Number(data.Temperature), true);
  // 0x04: i16
  if (data?.OverThreshold !== undefined) view.setInt16(4, Number(data.OverThreshold), true);
  // 0x06: i16
  if (data?.UnderThreshold !== undefined) view.setInt16(6, Number(data.UnderThreshold), true);
  // 0x08: pointer
  if (data?.OverThresholdChangable !== undefined) view.setBigUint64(8, data.OverThresholdChangable === null ? 0n : util.toBigInt(util.toPointer(data.OverThresholdChangable)), true);
  // 0x10: pointer
  if (data?.UnderThresholdChangable !== undefined) view.setBigUint64(16, data.UnderThresholdChangable === null ? 0n : util.toBigInt(util.toPointer(data.UnderThresholdChangable)), true);
  // 0x18: pointer
  if (data?.EventGenerated !== undefined) view.setBigUint64(24, data.EventGenerated === null ? 0n : util.toBigInt(util.toPointer(data.EventGenerated)), true);
  // 0x20: u8
  if (data?.Reserved0 !== undefined) view.setUint8(32, Number(data.Reserved0));
  // 0x21: u32
  if (data?.Reserved1 !== undefined) view.setUint32(33, Number(data.Reserved1), true);
  // 0x25: pad3
  return buf;
}

export class STORAGE_TEMPERATURE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Index(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: i16
  get Temperature(): number {
    return this.view.getInt16(2, true);
  }

  // 0x04: i16
  get OverThreshold(): number {
    return this.view.getInt16(4, true);
  }

  // 0x06: i16
  get UnderThreshold(): number {
    return this.view.getInt16(6, true);
  }

  // 0x08: pointer
  get OverThresholdChangable(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get UnderThresholdChangable(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get EventGenerated(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u8
  get Reserved0(): number {
    return this.view.getUint8(32);
  }

  // 0x21: u32
  get Reserved1(): number {
    return this.view.getUint32(33, true);
  }

  // 0x25: pad3

  // 0x00: u16
  set Index(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: i16
  set Temperature(value: number) {
    this.view.setInt16(2, value, true);
  }

  // 0x04: i16
  set OverThreshold(value: number) {
    this.view.setInt16(4, value, true);
  }

  // 0x06: i16
  set UnderThreshold(value: number) {
    this.view.setInt16(6, value, true);
  }

  // 0x08: pointer
  set OverThresholdChangable(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set UnderThresholdChangable(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set EventGenerated(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u8
  set Reserved0(value: number) {
    this.view.setUint8(32, value);
  }

  // 0x21: u32
  set Reserved1(value: number) {
    this.view.setUint32(33, value, true);
  }

  // 0x25: pad3
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_TEMPERATURE_DATA_DESCRIPTOR (size: 40)
 */
export interface STORAGE_TEMPERATURE_DATA_DESCRIPTOR {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** i16 */
  CriticalTemperature: number;
  /** i16 */
  WarningTemperature: number;
  /** u16 */
  InfoCount: number;
  /** array */
  Reserved0: Deno.PointerValue | null;
  /** array */
  Reserved1: Deno.PointerValue | null;
  /** array */
  TemperatureInfo: Deno.PointerValue | null;
}

export const sizeofSTORAGE_TEMPERATURE_DATA_DESCRIPTOR = 40;

export function allocSTORAGE_TEMPERATURE_DATA_DESCRIPTOR(data?: Partial<STORAGE_TEMPERATURE_DATA_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_TEMPERATURE_DATA_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: i16
  if (data?.CriticalTemperature !== undefined) view.setInt16(8, Number(data.CriticalTemperature), true);
  // 0x0a: i16
  if (data?.WarningTemperature !== undefined) view.setInt16(10, Number(data.WarningTemperature), true);
  // 0x0c: u16
  if (data?.InfoCount !== undefined) view.setUint16(12, Number(data.InfoCount), true);
  // 0x0e: pad2
  // 0x10: pointer
  if (data?.Reserved0 !== undefined) view.setBigUint64(16, data.Reserved0 === null ? 0n : util.toBigInt(util.toPointer(data.Reserved0)), true);
  // 0x18: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(24, data.Reserved1 === null ? 0n : util.toBigInt(util.toPointer(data.Reserved1)), true);
  // 0x20: pointer
  if (data?.TemperatureInfo !== undefined) view.setBigUint64(32, data.TemperatureInfo === null ? 0n : util.toBigInt(util.toPointer(data.TemperatureInfo)), true);
  return buf;
}

export class STORAGE_TEMPERATURE_DATA_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i16
  get CriticalTemperature(): number {
    return this.view.getInt16(8, true);
  }

  // 0x0a: i16
  get WarningTemperature(): number {
    return this.view.getInt16(10, true);
  }

  // 0x0c: u16
  get InfoCount(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: pad2

  // 0x10: pointer
  get Reserved0(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Reserved1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get TemperatureInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i16
  set CriticalTemperature(value: number) {
    this.view.setInt16(8, value, true);
  }

  // 0x0a: i16
  set WarningTemperature(value: number) {
    this.view.setInt16(10, value, true);
  }

  // 0x0c: u16
  set InfoCount(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: pad2

  // 0x10: pointer
  set Reserved0(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Reserved1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set TemperatureInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_TEMPERATURE_THRESHOLD (size: 32)
 */
export interface STORAGE_TEMPERATURE_THRESHOLD {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u16 */
  Flags: number;
  /** u16 */
  Index: number;
  /** i16 */
  Threshold: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  OverThreshold: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  Reserved: number;
}

export const sizeofSTORAGE_TEMPERATURE_THRESHOLD = 32;

export function allocSTORAGE_TEMPERATURE_THRESHOLD(data?: Partial<STORAGE_TEMPERATURE_THRESHOLD>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_TEMPERATURE_THRESHOLD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u16
  if (data?.Flags !== undefined) view.setUint16(8, Number(data.Flags), true);
  // 0x0a: u16
  if (data?.Index !== undefined) view.setUint16(10, Number(data.Index), true);
  // 0x0c: i16
  if (data?.Threshold !== undefined) view.setInt16(12, Number(data.Threshold), true);
  // 0x0e: pad2
  // 0x10: pointer
  if (data?.OverThreshold !== undefined) view.setBigUint64(16, data.OverThreshold === null ? 0n : util.toBigInt(util.toPointer(data.OverThreshold)), true);
  // 0x18: u8
  if (data?.Reserved !== undefined) view.setUint8(24, Number(data.Reserved));
  // 0x19: pad7
  return buf;
}

export class STORAGE_TEMPERATURE_THRESHOLDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u16
  get Flags(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get Index(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: i16
  get Threshold(): number {
    return this.view.getInt16(12, true);
  }

  // 0x0e: pad2

  // 0x10: pointer
  get OverThreshold(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u8
  get Reserved(): number {
    return this.view.getUint8(24);
  }

  // 0x19: pad7

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u16
  set Flags(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set Index(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: i16
  set Threshold(value: number) {
    this.view.setInt16(12, value, true);
  }

  // 0x0e: pad2

  // 0x10: pointer
  set OverThreshold(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u8
  set Reserved(value: number) {
    this.view.setUint8(24, value);
  }

  // 0x19: pad7
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_SPEC_VERSION (size: 16)
 */
export interface STORAGE_SPEC_VERSION {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  AsUlong: number;
}

export const sizeofSTORAGE_SPEC_VERSION = 16;

export function allocSTORAGE_SPEC_VERSION(data?: Partial<STORAGE_SPEC_VERSION>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_SPEC_VERSION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u32
  if (data?.AsUlong !== undefined) view.setUint32(8, Number(data.AsUlong), true);
  // 0x0c: pad4
  return buf;
}

export class STORAGE_SPEC_VERSIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get AsUlong(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set AsUlong(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_PHYSICAL_DEVICE_DATA (size: 80)
 */
export interface STORAGE_PHYSICAL_DEVICE_DATA {
  /** u32 */
  DeviceId: number;
  /** u32 */
  Role: number;
  /** Windows.Win32.System.Ioctl.STORAGE_COMPONENT_HEALTH_STATUS */
  HealthStatus: STORAGE_COMPONENT_HEALTH_STATUS;
  /** Windows.Win32.System.Ioctl.STORAGE_PROTOCOL_TYPE */
  CommandProtocol: STORAGE_PROTOCOL_TYPE;
  /** Windows.Win32.System.Ioctl.STORAGE_SPEC_VERSION */
  SpecVersion: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Ioctl.STORAGE_DEVICE_FORM_FACTOR */
  FormFactor: STORAGE_DEVICE_FORM_FACTOR;
  /** array */
  Vendor: Deno.PointerValue | null;
  /** array */
  Model: Deno.PointerValue | null;
  /** array */
  FirmwareRevision: Deno.PointerValue | null;
  /** u64 */
  Capacity: number | bigint;
  /** array */
  PhysicalLocation: Deno.PointerValue | null;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofSTORAGE_PHYSICAL_DEVICE_DATA = 80;

export function allocSTORAGE_PHYSICAL_DEVICE_DATA(data?: Partial<STORAGE_PHYSICAL_DEVICE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_PHYSICAL_DEVICE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DeviceId !== undefined) view.setUint32(0, Number(data.DeviceId), true);
  // 0x04: u32
  if (data?.Role !== undefined) view.setUint32(4, Number(data.Role), true);
  // 0x08: i32
  if (data?.HealthStatus !== undefined) view.setInt32(8, Number(data.HealthStatus), true);
  // 0x0c: i32
  if (data?.CommandProtocol !== undefined) view.setInt32(12, Number(data.CommandProtocol), true);
  // 0x10: pointer
  if (data?.SpecVersion !== undefined) view.setBigUint64(16, data.SpecVersion === null ? 0n : util.toBigInt(util.toPointer(data.SpecVersion)), true);
  // 0x18: i32
  if (data?.FormFactor !== undefined) view.setInt32(24, Number(data.FormFactor), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Vendor !== undefined) view.setBigUint64(32, data.Vendor === null ? 0n : util.toBigInt(util.toPointer(data.Vendor)), true);
  // 0x28: pointer
  if (data?.Model !== undefined) view.setBigUint64(40, data.Model === null ? 0n : util.toBigInt(util.toPointer(data.Model)), true);
  // 0x30: pointer
  if (data?.FirmwareRevision !== undefined) view.setBigUint64(48, data.FirmwareRevision === null ? 0n : util.toBigInt(util.toPointer(data.FirmwareRevision)), true);
  // 0x38: u64
  if (data?.Capacity !== undefined) view.setBigUint64(56, util.toBigInt(data.Capacity), true);
  // 0x40: pointer
  if (data?.PhysicalLocation !== undefined) view.setBigUint64(64, data.PhysicalLocation === null ? 0n : util.toBigInt(util.toPointer(data.PhysicalLocation)), true);
  // 0x48: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(72, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

export class STORAGE_PHYSICAL_DEVICE_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get DeviceId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Role(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get HealthStatus(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get CommandProtocol(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: pointer
  get SpecVersion(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: i32
  get FormFactor(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get Vendor(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get Model(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get FirmwareRevision(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u64
  get Capacity(): number | bigint {
    return this.view.getBigUint64(56, true);
  }

  // 0x40: pointer
  get PhysicalLocation(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set DeviceId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Role(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set HealthStatus(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set CommandProtocol(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: pointer
  set SpecVersion(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: i32
  set FormFactor(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set Vendor(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set Model(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set FirmwareRevision(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: u64
  set Capacity(value: number | bigint) {
    this.view.setBigUint64(56, util.toBigInt(value), true);
  }

  // 0x40: pointer
  set PhysicalLocation(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_PHYSICAL_ADAPTER_DATA (size: 80)
 */
export interface STORAGE_PHYSICAL_ADAPTER_DATA {
  /** u32 */
  AdapterId: number;
  /** Windows.Win32.System.Ioctl.STORAGE_COMPONENT_HEALTH_STATUS */
  HealthStatus: STORAGE_COMPONENT_HEALTH_STATUS;
  /** Windows.Win32.System.Ioctl.STORAGE_PROTOCOL_TYPE */
  CommandProtocol: STORAGE_PROTOCOL_TYPE;
  /** Windows.Win32.System.Ioctl.STORAGE_SPEC_VERSION */
  SpecVersion: Uint8Array | Deno.PointerValue | null;
  /** array */
  Vendor: Deno.PointerValue | null;
  /** array */
  Model: Deno.PointerValue | null;
  /** array */
  FirmwareRevision: Deno.PointerValue | null;
  /** array */
  PhysicalLocation: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  ExpanderConnected: Uint8Array | Deno.PointerValue | null;
  /** array */
  Reserved0: Deno.PointerValue | null;
  /** array */
  Reserved1: Deno.PointerValue | null;
}

export const sizeofSTORAGE_PHYSICAL_ADAPTER_DATA = 80;

export function allocSTORAGE_PHYSICAL_ADAPTER_DATA(data?: Partial<STORAGE_PHYSICAL_ADAPTER_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_PHYSICAL_ADAPTER_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AdapterId !== undefined) view.setUint32(0, Number(data.AdapterId), true);
  // 0x04: i32
  if (data?.HealthStatus !== undefined) view.setInt32(4, Number(data.HealthStatus), true);
  // 0x08: i32
  if (data?.CommandProtocol !== undefined) view.setInt32(8, Number(data.CommandProtocol), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.SpecVersion !== undefined) view.setBigUint64(16, data.SpecVersion === null ? 0n : util.toBigInt(util.toPointer(data.SpecVersion)), true);
  // 0x18: pointer
  if (data?.Vendor !== undefined) view.setBigUint64(24, data.Vendor === null ? 0n : util.toBigInt(util.toPointer(data.Vendor)), true);
  // 0x20: pointer
  if (data?.Model !== undefined) view.setBigUint64(32, data.Model === null ? 0n : util.toBigInt(util.toPointer(data.Model)), true);
  // 0x28: pointer
  if (data?.FirmwareRevision !== undefined) view.setBigUint64(40, data.FirmwareRevision === null ? 0n : util.toBigInt(util.toPointer(data.FirmwareRevision)), true);
  // 0x30: pointer
  if (data?.PhysicalLocation !== undefined) view.setBigUint64(48, data.PhysicalLocation === null ? 0n : util.toBigInt(util.toPointer(data.PhysicalLocation)), true);
  // 0x38: pointer
  if (data?.ExpanderConnected !== undefined) view.setBigUint64(56, data.ExpanderConnected === null ? 0n : util.toBigInt(util.toPointer(data.ExpanderConnected)), true);
  // 0x40: pointer
  if (data?.Reserved0 !== undefined) view.setBigUint64(64, data.Reserved0 === null ? 0n : util.toBigInt(util.toPointer(data.Reserved0)), true);
  // 0x48: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(72, data.Reserved1 === null ? 0n : util.toBigInt(util.toPointer(data.Reserved1)), true);
  return buf;
}

export class STORAGE_PHYSICAL_ADAPTER_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get AdapterId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get HealthStatus(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get CommandProtocol(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get SpecVersion(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Vendor(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get Model(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get FirmwareRevision(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get PhysicalLocation(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get ExpanderConnected(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get Reserved0(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get Reserved1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set AdapterId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set HealthStatus(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set CommandProtocol(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set SpecVersion(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Vendor(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set Model(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set FirmwareRevision(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set PhysicalLocation(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set ExpanderConnected(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set Reserved0(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set Reserved1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_PHYSICAL_NODE_DATA (size: 40)
 */
export interface STORAGE_PHYSICAL_NODE_DATA {
  /** u32 */
  NodeId: number;
  /** u32 */
  AdapterCount: number;
  /** u32 */
  AdapterDataLength: number;
  /** u32 */
  AdapterDataOffset: number;
  /** u32 */
  DeviceCount: number;
  /** u32 */
  DeviceDataLength: number;
  /** u32 */
  DeviceDataOffset: number;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofSTORAGE_PHYSICAL_NODE_DATA = 40;

export function allocSTORAGE_PHYSICAL_NODE_DATA(data?: Partial<STORAGE_PHYSICAL_NODE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_PHYSICAL_NODE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeId !== undefined) view.setUint32(0, Number(data.NodeId), true);
  // 0x04: u32
  if (data?.AdapterCount !== undefined) view.setUint32(4, Number(data.AdapterCount), true);
  // 0x08: u32
  if (data?.AdapterDataLength !== undefined) view.setUint32(8, Number(data.AdapterDataLength), true);
  // 0x0c: u32
  if (data?.AdapterDataOffset !== undefined) view.setUint32(12, Number(data.AdapterDataOffset), true);
  // 0x10: u32
  if (data?.DeviceCount !== undefined) view.setUint32(16, Number(data.DeviceCount), true);
  // 0x14: u32
  if (data?.DeviceDataLength !== undefined) view.setUint32(20, Number(data.DeviceDataLength), true);
  // 0x18: u32
  if (data?.DeviceDataOffset !== undefined) view.setUint32(24, Number(data.DeviceDataOffset), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(32, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

export class STORAGE_PHYSICAL_NODE_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get AdapterCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get AdapterDataLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get AdapterDataOffset(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get DeviceCount(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get DeviceDataLength(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get DeviceDataOffset(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set NodeId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set AdapterCount(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set AdapterDataLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set AdapterDataOffset(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set DeviceCount(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set DeviceDataLength(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set DeviceDataOffset(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR (size: 24)
 */
export interface STORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  NodeCount: number;
  /** u32 */
  Reserved: number;
  /** array */
  Node: Deno.PointerValue | null;
}

export const sizeofSTORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR = 24;

export function allocSTORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR(data?: Partial<STORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.NodeCount !== undefined) view.setUint32(8, Number(data.NodeCount), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  // 0x10: pointer
  if (data?.Node !== undefined) view.setBigUint64(16, data.Node === null ? 0n : util.toBigInt(util.toPointer(data.Node)), true);
  return buf;
}

export class STORAGE_PHYSICAL_TOPOLOGY_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get NodeCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Reserved(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get Node(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set NodeCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Reserved(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set Node(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR (size: 16)
 */
export interface STORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  LunMaxIoCount: number;
  /** u32 */
  AdapterMaxIoCount: number;
}

export const sizeofSTORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR = 16;

export function allocSTORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR(data?: Partial<STORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.LunMaxIoCount !== undefined) view.setUint32(8, Number(data.LunMaxIoCount), true);
  // 0x0c: u32
  if (data?.AdapterMaxIoCount !== undefined) view.setUint32(12, Number(data.AdapterMaxIoCount), true);
  return buf;
}

export class STORAGE_DEVICE_IO_CAPABILITY_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get LunMaxIoCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get AdapterMaxIoCount(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set LunMaxIoCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set AdapterMaxIoCount(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR (size: 16)
 */
export interface STORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u64 */
  Attributes: number | bigint;
}

export const sizeofSTORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR = 16;

export function allocSTORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR(data?: Partial<STORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u64
  if (data?.Attributes !== undefined) view.setBigUint64(8, util.toBigInt(data.Attributes), true);
  return buf;
}

export class STORAGE_DEVICE_ATTRIBUTES_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get Attributes(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set Attributes(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * _ScsiSenseKey_e__Struct (size: 8)
 */
export interface _ScsiSenseKey_e__Struct {
  /** u8 */
  SenseKey: number;
  /** u8 */
  ASC: number;
  /** u8 */
  ASCQ: number;
  /** u8 */
  Reserved: number;
}

export const sizeof_ScsiSenseKey_e__Struct = 8;

export function alloc_ScsiSenseKey_e__Struct(data?: Partial<_ScsiSenseKey_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_ScsiSenseKey_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.SenseKey !== undefined) view.setUint8(0, Number(data.SenseKey));
  // 0x01: u8
  if (data?.ASC !== undefined) view.setUint8(1, Number(data.ASC));
  // 0x02: u8
  if (data?.ASCQ !== undefined) view.setUint8(2, Number(data.ASCQ));
  // 0x03: u8
  if (data?.Reserved !== undefined) view.setUint8(3, Number(data.Reserved));
  // 0x04: pad4
  return buf;
}

export class _ScsiSenseKey_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get SenseKey(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get ASC(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get ASCQ(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get Reserved(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x00: u8
  set SenseKey(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set ASC(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set ASCQ(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set Reserved(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4
}

/**
 * _NVDIMM_N_e__Struct (size: 24)
 */
export interface _NVDIMM_N_e__Struct {
  /** u8 */
  CriticalHealth: number;
  /** array */
  ModuleHealth: Deno.PointerValue | null;
  /** u8 */
  ErrorThresholdStatus: number;
}

export const sizeof_NVDIMM_N_e__Struct = 24;

export function alloc_NVDIMM_N_e__Struct(data?: Partial<_NVDIMM_N_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_NVDIMM_N_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.CriticalHealth !== undefined) view.setUint8(0, Number(data.CriticalHealth));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.ModuleHealth !== undefined) view.setBigUint64(8, data.ModuleHealth === null ? 0n : util.toBigInt(util.toPointer(data.ModuleHealth)), true);
  // 0x10: u8
  if (data?.ErrorThresholdStatus !== undefined) view.setUint8(16, Number(data.ErrorThresholdStatus));
  // 0x11: pad7
  return buf;
}

export class _NVDIMM_N_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get CriticalHealth(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x08: pointer
  get ModuleHealth(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u8
  get ErrorThresholdStatus(): number {
    return this.view.getUint8(16);
  }

  // 0x11: pad7

  // 0x00: u8
  set CriticalHealth(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7

  // 0x08: pointer
  set ModuleHealth(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u8
  set ErrorThresholdStatus(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: pad7
}

/**
 * _RawBytes_e__Union (size: 24)
 */
export interface _RawBytes_e__Union {
  /** _ScsiSenseKey_e__Struct */
  ScsiSenseKey: Uint8Array | Deno.PointerValue | null;
  /** _NVDIMM_N_e__Struct */
  NVDIMM_N: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  AsUlong: number;
}

export const sizeof_RawBytes_e__Union = 24;

export function alloc_RawBytes_e__Union(data?: Partial<_RawBytes_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_RawBytes_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ScsiSenseKey !== undefined) view.setBigUint64(0, data.ScsiSenseKey === null ? 0n : util.toBigInt(util.toPointer(data.ScsiSenseKey)), true);
  // 0x08: pointer
  if (data?.NVDIMM_N !== undefined) view.setBigUint64(8, data.NVDIMM_N === null ? 0n : util.toBigInt(util.toPointer(data.NVDIMM_N)), true);
  // 0x10: u32
  if (data?.AsUlong !== undefined) view.setUint32(16, Number(data.AsUlong), true);
  // 0x14: pad4
  return buf;
}

export class _RawBytes_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ScsiSenseKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get NVDIMM_N(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get AsUlong(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set ScsiSenseKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set NVDIMM_N(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set AsUlong(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_OPERATIONAL_REASON (size: 24)
 */
export interface STORAGE_OPERATIONAL_REASON {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.System.Ioctl.STORAGE_OPERATIONAL_STATUS_REASON */
  Reason: STORAGE_OPERATIONAL_STATUS_REASON;
  /** _RawBytes_e__Union */
  RawBytes: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSTORAGE_OPERATIONAL_REASON = 24;

export function allocSTORAGE_OPERATIONAL_REASON(data?: Partial<STORAGE_OPERATIONAL_REASON>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_OPERATIONAL_REASON);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: i32
  if (data?.Reason !== undefined) view.setInt32(8, Number(data.Reason), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.RawBytes !== undefined) view.setBigUint64(16, data.RawBytes === null ? 0n : util.toBigInt(util.toPointer(data.RawBytes)), true);
  return buf;
}

export class STORAGE_OPERATIONAL_REASONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get Reason(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get RawBytes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set Reason(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set RawBytes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_DEVICE_MANAGEMENT_STATUS (size: 40)
 */
export interface STORAGE_DEVICE_MANAGEMENT_STATUS {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.System.Ioctl.STORAGE_DISK_HEALTH_STATUS */
  Health: STORAGE_DISK_HEALTH_STATUS;
  /** u32 */
  NumberOfOperationalStatus: number;
  /** u32 */
  NumberOfAdditionalReasons: number;
  /** array */
  OperationalStatus: Deno.PointerValue | null;
  /** array */
  AdditionalReasons: Deno.PointerValue | null;
}

export const sizeofSTORAGE_DEVICE_MANAGEMENT_STATUS = 40;

export function allocSTORAGE_DEVICE_MANAGEMENT_STATUS(data?: Partial<STORAGE_DEVICE_MANAGEMENT_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_DEVICE_MANAGEMENT_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: i32
  if (data?.Health !== undefined) view.setInt32(8, Number(data.Health), true);
  // 0x0c: u32
  if (data?.NumberOfOperationalStatus !== undefined) view.setUint32(12, Number(data.NumberOfOperationalStatus), true);
  // 0x10: u32
  if (data?.NumberOfAdditionalReasons !== undefined) view.setUint32(16, Number(data.NumberOfAdditionalReasons), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.OperationalStatus !== undefined) view.setBigUint64(24, data.OperationalStatus === null ? 0n : util.toBigInt(util.toPointer(data.OperationalStatus)), true);
  // 0x20: pointer
  if (data?.AdditionalReasons !== undefined) view.setBigUint64(32, data.AdditionalReasons === null ? 0n : util.toBigInt(util.toPointer(data.AdditionalReasons)), true);
  return buf;
}

export class STORAGE_DEVICE_MANAGEMENT_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get Health(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get NumberOfOperationalStatus(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get NumberOfAdditionalReasons(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get OperationalStatus(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get AdditionalReasons(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set Health(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set NumberOfOperationalStatus(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set NumberOfAdditionalReasons(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set OperationalStatus(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set AdditionalReasons(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_ADAPTER_SERIAL_NUMBER (size: 16)
 */
export interface STORAGE_ADAPTER_SERIAL_NUMBER {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** array */
  SerialNumber: Deno.PointerValue | null;
}

export const sizeofSTORAGE_ADAPTER_SERIAL_NUMBER = 16;

export function allocSTORAGE_ADAPTER_SERIAL_NUMBER(data?: Partial<STORAGE_ADAPTER_SERIAL_NUMBER>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_ADAPTER_SERIAL_NUMBER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: pointer
  if (data?.SerialNumber !== undefined) view.setBigUint64(8, data.SerialNumber === null ? 0n : util.toBigInt(util.toPointer(data.SerialNumber)), true);
  return buf;
}

export class STORAGE_ADAPTER_SERIAL_NUMBERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get SerialNumber(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set SerialNumber(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_ZONE_GROUP (size: 16)
 */
export interface STORAGE_ZONE_GROUP {
  /** u32 */
  ZoneCount: number;
  /** Windows.Win32.System.Ioctl.STORAGE_ZONE_TYPES */
  ZoneType: STORAGE_ZONE_TYPES;
  /** u64 */
  ZoneSize: number | bigint;
}

export const sizeofSTORAGE_ZONE_GROUP = 16;

export function allocSTORAGE_ZONE_GROUP(data?: Partial<STORAGE_ZONE_GROUP>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_ZONE_GROUP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ZoneCount !== undefined) view.setUint32(0, Number(data.ZoneCount), true);
  // 0x04: i32
  if (data?.ZoneType !== undefined) view.setInt32(4, Number(data.ZoneType), true);
  // 0x08: u64
  if (data?.ZoneSize !== undefined) view.setBigUint64(8, util.toBigInt(data.ZoneSize), true);
  return buf;
}

export class STORAGE_ZONE_GROUPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ZoneCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get ZoneType(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u64
  get ZoneSize(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u32
  set ZoneCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set ZoneType(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u64
  set ZoneSize(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * _SequentialRequiredZone_e__Struct (size: 24)
 */
export interface _SequentialRequiredZone_e__Struct {
  /** u32 */
  MaxOpenZoneCount: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  UnrestrictedRead: Uint8Array | Deno.PointerValue | null;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeof_SequentialRequiredZone_e__Struct = 24;

export function alloc_SequentialRequiredZone_e__Struct(data?: Partial<_SequentialRequiredZone_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_SequentialRequiredZone_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MaxOpenZoneCount !== undefined) view.setUint32(0, Number(data.MaxOpenZoneCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.UnrestrictedRead !== undefined) view.setBigUint64(8, data.UnrestrictedRead === null ? 0n : util.toBigInt(util.toPointer(data.UnrestrictedRead)), true);
  // 0x10: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(16, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

export class _SequentialRequiredZone_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MaxOpenZoneCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get UnrestrictedRead(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set MaxOpenZoneCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set UnrestrictedRead(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * _SequentialPreferredZone_e__Struct (size: 8)
 */
export interface _SequentialPreferredZone_e__Struct {
  /** u32 */
  OptimalOpenZoneCount: number;
  /** u32 */
  Reserved: number;
}

export const sizeof_SequentialPreferredZone_e__Struct = 8;

export function alloc_SequentialPreferredZone_e__Struct(data?: Partial<_SequentialPreferredZone_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_SequentialPreferredZone_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.OptimalOpenZoneCount !== undefined) view.setUint32(0, Number(data.OptimalOpenZoneCount), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  return buf;
}

export class _SequentialPreferredZone_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get OptimalOpenZoneCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Reserved(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set OptimalOpenZoneCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Reserved(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * _ZoneAttributes_e__Union (size: 16)
 */
export interface _ZoneAttributes_e__Union {
  /** _SequentialRequiredZone_e__Struct */
  SequentialRequiredZone: Uint8Array | Deno.PointerValue | null;
  /** _SequentialPreferredZone_e__Struct */
  SequentialPreferredZone: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_ZoneAttributes_e__Union = 16;

export function alloc_ZoneAttributes_e__Union(data?: Partial<_ZoneAttributes_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_ZoneAttributes_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SequentialRequiredZone !== undefined) view.setBigUint64(0, data.SequentialRequiredZone === null ? 0n : util.toBigInt(util.toPointer(data.SequentialRequiredZone)), true);
  // 0x08: pointer
  if (data?.SequentialPreferredZone !== undefined) view.setBigUint64(8, data.SequentialPreferredZone === null ? 0n : util.toBigInt(util.toPointer(data.SequentialPreferredZone)), true);
  return buf;
}

export class _ZoneAttributes_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get SequentialRequiredZone(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get SequentialPreferredZone(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set SequentialRequiredZone(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set SequentialPreferredZone(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_ZONED_DEVICE_DESCRIPTOR (size: 40)
 */
export interface STORAGE_ZONED_DEVICE_DESCRIPTOR {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.System.Ioctl.STORAGE_ZONED_DEVICE_TYPES */
  DeviceType: STORAGE_ZONED_DEVICE_TYPES;
  /** u32 */
  ZoneCount: number;
  /** _ZoneAttributes_e__Union */
  ZoneAttributes: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ZoneGroupCount: number;
  /** array */
  ZoneGroup: Deno.PointerValue | null;
}

export const sizeofSTORAGE_ZONED_DEVICE_DESCRIPTOR = 40;

export function allocSTORAGE_ZONED_DEVICE_DESCRIPTOR(data?: Partial<STORAGE_ZONED_DEVICE_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_ZONED_DEVICE_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: i32
  if (data?.DeviceType !== undefined) view.setInt32(8, Number(data.DeviceType), true);
  // 0x0c: u32
  if (data?.ZoneCount !== undefined) view.setUint32(12, Number(data.ZoneCount), true);
  // 0x10: pointer
  if (data?.ZoneAttributes !== undefined) view.setBigUint64(16, data.ZoneAttributes === null ? 0n : util.toBigInt(util.toPointer(data.ZoneAttributes)), true);
  // 0x18: u32
  if (data?.ZoneGroupCount !== undefined) view.setUint32(24, Number(data.ZoneGroupCount), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ZoneGroup !== undefined) view.setBigUint64(32, data.ZoneGroup === null ? 0n : util.toBigInt(util.toPointer(data.ZoneGroup)), true);
  return buf;
}

export class STORAGE_ZONED_DEVICE_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get DeviceType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get ZoneCount(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get ZoneAttributes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get ZoneGroupCount(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get ZoneGroup(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set DeviceType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set ZoneCount(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set ZoneAttributes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set ZoneGroupCount(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set ZoneGroup(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICE_LOCATION (size: 24)
 */
export interface DEVICE_LOCATION {
  /** u32 */
  Socket: number;
  /** u32 */
  Slot: number;
  /** u32 */
  Adapter: number;
  /** u32 */
  Port: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDEVICE_LOCATION = 24;

export function allocDEVICE_LOCATION(data?: Partial<DEVICE_LOCATION>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_LOCATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Socket !== undefined) view.setUint32(0, Number(data.Socket), true);
  // 0x04: u32
  if (data?.Slot !== undefined) view.setUint32(4, Number(data.Slot), true);
  // 0x08: u32
  if (data?.Adapter !== undefined) view.setUint32(8, Number(data.Adapter), true);
  // 0x0c: u32
  if (data?.Port !== undefined) view.setUint32(12, Number(data.Port), true);
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class DEVICE_LOCATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Socket(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Slot(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Adapter(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Port(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Socket(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Slot(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Adapter(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Port(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_DEVICE_LOCATION_DESCRIPTOR (size: 24)
 */
export interface STORAGE_DEVICE_LOCATION_DESCRIPTOR {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.System.Ioctl.DEVICE_LOCATION */
  Location: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  StringOffset: number;
}

export const sizeofSTORAGE_DEVICE_LOCATION_DESCRIPTOR = 24;

export function allocSTORAGE_DEVICE_LOCATION_DESCRIPTOR(data?: Partial<STORAGE_DEVICE_LOCATION_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_DEVICE_LOCATION_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: pointer
  if (data?.Location !== undefined) view.setBigUint64(8, data.Location === null ? 0n : util.toBigInt(util.toPointer(data.Location)), true);
  // 0x10: u32
  if (data?.StringOffset !== undefined) view.setUint32(16, Number(data.StringOffset), true);
  // 0x14: pad4
  return buf;
}

export class STORAGE_DEVICE_LOCATION_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Location(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get StringOffset(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Location(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set StringOffset(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_DEVICE_NUMA_PROPERTY (size: 16)
 */
export interface STORAGE_DEVICE_NUMA_PROPERTY {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  NumaNode: number;
}

export const sizeofSTORAGE_DEVICE_NUMA_PROPERTY = 16;

export function allocSTORAGE_DEVICE_NUMA_PROPERTY(data?: Partial<STORAGE_DEVICE_NUMA_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_DEVICE_NUMA_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.NumaNode !== undefined) view.setUint32(8, Number(data.NumaNode), true);
  // 0x0c: pad4
  return buf;
}

export class STORAGE_DEVICE_NUMA_PROPERTYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get NumaNode(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set NumaNode(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT (size: 16)
 */
export interface STORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  UnsafeShutdownCount: number;
}

export const sizeofSTORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT = 16;

export function allocSTORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT(data?: Partial<STORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.UnsafeShutdownCount !== undefined) view.setUint32(8, Number(data.UnsafeShutdownCount), true);
  // 0x0c: pad4
  return buf;
}

export class STORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get UnsafeShutdownCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set UnsafeShutdownCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * _Flags_e__Struct (size: 8)
 */
export interface _Flags_e__Struct {
  /** u32 */
  _bitfield: number;
}

export const sizeof_Flags_e__Struct = 8;

export function alloc_Flags_e__Struct(data?: Partial<_Flags_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Flags_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?._bitfield !== undefined) view.setUint32(0, Number(data._bitfield), true);
  // 0x04: pad4
  return buf;
}

export class _Flags_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get _bitfield(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set _bitfield(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_HW_ENDURANCE_INFO (size: 40)
 */
export interface STORAGE_HW_ENDURANCE_INFO {
  /** u32 */
  ValidFields: number;
  /** u32 */
  GroupId: number;
  /** _Flags_e__Struct */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  LifePercentage: number;
  /** array */
  BytesReadCount: Deno.PointerValue | null;
  /** array */
  ByteWriteCount: Deno.PointerValue | null;
}

export const sizeofSTORAGE_HW_ENDURANCE_INFO = 40;

export function allocSTORAGE_HW_ENDURANCE_INFO(data?: Partial<STORAGE_HW_ENDURANCE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_HW_ENDURANCE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ValidFields !== undefined) view.setUint32(0, Number(data.ValidFields), true);
  // 0x04: u32
  if (data?.GroupId !== undefined) view.setUint32(4, Number(data.GroupId), true);
  // 0x08: pointer
  if (data?.Flags !== undefined) view.setBigUint64(8, data.Flags === null ? 0n : util.toBigInt(util.toPointer(data.Flags)), true);
  // 0x10: u32
  if (data?.LifePercentage !== undefined) view.setUint32(16, Number(data.LifePercentage), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.BytesReadCount !== undefined) view.setBigUint64(24, data.BytesReadCount === null ? 0n : util.toBigInt(util.toPointer(data.BytesReadCount)), true);
  // 0x20: pointer
  if (data?.ByteWriteCount !== undefined) view.setBigUint64(32, data.ByteWriteCount === null ? 0n : util.toBigInt(util.toPointer(data.ByteWriteCount)), true);
  return buf;
}

export class STORAGE_HW_ENDURANCE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ValidFields(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get GroupId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Flags(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get LifePercentage(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get BytesReadCount(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get ByteWriteCount(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ValidFields(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set GroupId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Flags(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set LifePercentage(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set BytesReadCount(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set ByteWriteCount(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_HW_ENDURANCE_DATA_DESCRIPTOR (size: 16)
 */
export interface STORAGE_HW_ENDURANCE_DATA_DESCRIPTOR {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.System.Ioctl.STORAGE_HW_ENDURANCE_INFO */
  EnduranceInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSTORAGE_HW_ENDURANCE_DATA_DESCRIPTOR = 16;

export function allocSTORAGE_HW_ENDURANCE_DATA_DESCRIPTOR(data?: Partial<STORAGE_HW_ENDURANCE_DATA_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_HW_ENDURANCE_DATA_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: pointer
  if (data?.EnduranceInfo !== undefined) view.setBigUint64(8, data.EnduranceInfo === null ? 0n : util.toBigInt(util.toPointer(data.EnduranceInfo)), true);
  return buf;
}

export class STORAGE_HW_ENDURANCE_DATA_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get EnduranceInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set EnduranceInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_DEVICE_LED_STATE_DESCRIPTOR (size: 16)
 */
export interface STORAGE_DEVICE_LED_STATE_DESCRIPTOR {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u64 */
  State: number | bigint;
}

export const sizeofSTORAGE_DEVICE_LED_STATE_DESCRIPTOR = 16;

export function allocSTORAGE_DEVICE_LED_STATE_DESCRIPTOR(data?: Partial<STORAGE_DEVICE_LED_STATE_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_DEVICE_LED_STATE_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u64
  if (data?.State !== undefined) view.setBigUint64(8, util.toBigInt(data.State), true);
  return buf;
}

export class STORAGE_DEVICE_LED_STATE_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get State(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set State(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_DEVICE_SELF_ENCRYPTION_PROPERTY (size: 16)
 */
export interface STORAGE_DEVICE_SELF_ENCRYPTION_PROPERTY {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  SupportsSelfEncryption: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSTORAGE_DEVICE_SELF_ENCRYPTION_PROPERTY = 16;

export function allocSTORAGE_DEVICE_SELF_ENCRYPTION_PROPERTY(data?: Partial<STORAGE_DEVICE_SELF_ENCRYPTION_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_DEVICE_SELF_ENCRYPTION_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: pointer
  if (data?.SupportsSelfEncryption !== undefined) view.setBigUint64(8, data.SupportsSelfEncryption === null ? 0n : util.toBigInt(util.toPointer(data.SupportsSelfEncryption)), true);
  return buf;
}

export class STORAGE_DEVICE_SELF_ENCRYPTION_PROPERTYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get SupportsSelfEncryption(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set SupportsSelfEncryption(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_FRU_ID_DESCRIPTOR (size: 24)
 */
export interface STORAGE_FRU_ID_DESCRIPTOR {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  IdentifierSize: number;
  /** array */
  Identifier: Deno.PointerValue | null;
}

export const sizeofSTORAGE_FRU_ID_DESCRIPTOR = 24;

export function allocSTORAGE_FRU_ID_DESCRIPTOR(data?: Partial<STORAGE_FRU_ID_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_FRU_ID_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.IdentifierSize !== undefined) view.setUint32(8, Number(data.IdentifierSize), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Identifier !== undefined) view.setBigUint64(16, data.Identifier === null ? 0n : util.toBigInt(util.toPointer(data.Identifier)), true);
  return buf;
}

export class STORAGE_FRU_ID_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get IdentifierSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Identifier(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set IdentifierSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Identifier(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICE_DATA_SET_RANGE (size: 16)
 */
export interface DEVICE_DATA_SET_RANGE {
  /** i64 */
  StartingOffset: number | bigint;
  /** u64 */
  LengthInBytes: number | bigint;
}

export const sizeofDEVICE_DATA_SET_RANGE = 16;

export function allocDEVICE_DATA_SET_RANGE(data?: Partial<DEVICE_DATA_SET_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_DATA_SET_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.StartingOffset !== undefined) view.setBigInt64(0, util.toBigInt(data.StartingOffset), true);
  // 0x08: u64
  if (data?.LengthInBytes !== undefined) view.setBigUint64(8, util.toBigInt(data.LengthInBytes), true);
  return buf;
}

export class DEVICE_DATA_SET_RANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get StartingOffset(): number | bigint {
    return this.view.getBigInt64(0, true);
  }

  // 0x08: u64
  get LengthInBytes(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: i64
  set StartingOffset(value: number | bigint) {
    this.view.setBigInt64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set LengthInBytes(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICE_MANAGE_DATA_SET_ATTRIBUTES (size: 32)
 */
export interface DEVICE_MANAGE_DATA_SET_ATTRIBUTES {
  /** u32 */
  Size: number;
  /** u32 */
  Action: number;
  /** u32 */
  Flags: number;
  /** u32 */
  ParameterBlockOffset: number;
  /** u32 */
  ParameterBlockLength: number;
  /** u32 */
  DataSetRangesOffset: number;
  /** u32 */
  DataSetRangesLength: number;
}

export const sizeofDEVICE_MANAGE_DATA_SET_ATTRIBUTES = 32;

export function allocDEVICE_MANAGE_DATA_SET_ATTRIBUTES(data?: Partial<DEVICE_MANAGE_DATA_SET_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_MANAGE_DATA_SET_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Action !== undefined) view.setUint32(4, Number(data.Action), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.ParameterBlockOffset !== undefined) view.setUint32(12, Number(data.ParameterBlockOffset), true);
  // 0x10: u32
  if (data?.ParameterBlockLength !== undefined) view.setUint32(16, Number(data.ParameterBlockLength), true);
  // 0x14: u32
  if (data?.DataSetRangesOffset !== undefined) view.setUint32(20, Number(data.DataSetRangesOffset), true);
  // 0x18: u32
  if (data?.DataSetRangesLength !== undefined) view.setUint32(24, Number(data.DataSetRangesLength), true);
  // 0x1c: pad4
  return buf;
}

export class DEVICE_MANAGE_DATA_SET_ATTRIBUTESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Action(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ParameterBlockOffset(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ParameterBlockLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get DataSetRangesOffset(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get DataSetRangesLength(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Action(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ParameterBlockOffset(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ParameterBlockLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set DataSetRangesOffset(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set DataSetRangesLength(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.System.Ioctl.DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT (size: 40)
 */
export interface DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT {
  /** u32 */
  Size: number;
  /** u32 */
  Action: number;
  /** u32 */
  Flags: number;
  /** u32 */
  OperationStatus: number;
  /** u32 */
  ExtendedError: number;
  /** u32 */
  TargetDetailedError: number;
  /** u32 */
  ReservedStatus: number;
  /** u32 */
  OutputBlockOffset: number;
  /** u32 */
  OutputBlockLength: number;
}

export const sizeofDEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT = 40;

export function allocDEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT(data?: Partial<DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Action !== undefined) view.setUint32(4, Number(data.Action), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.OperationStatus !== undefined) view.setUint32(12, Number(data.OperationStatus), true);
  // 0x10: u32
  if (data?.ExtendedError !== undefined) view.setUint32(16, Number(data.ExtendedError), true);
  // 0x14: u32
  if (data?.TargetDetailedError !== undefined) view.setUint32(20, Number(data.TargetDetailedError), true);
  // 0x18: u32
  if (data?.ReservedStatus !== undefined) view.setUint32(24, Number(data.ReservedStatus), true);
  // 0x1c: u32
  if (data?.OutputBlockOffset !== undefined) view.setUint32(28, Number(data.OutputBlockOffset), true);
  // 0x20: u32
  if (data?.OutputBlockLength !== undefined) view.setUint32(32, Number(data.OutputBlockLength), true);
  // 0x24: pad4
  return buf;
}

export class DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Action(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get OperationStatus(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ExtendedError(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get TargetDetailedError(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get ReservedStatus(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get OutputBlockOffset(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get OutputBlockLength(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Action(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set OperationStatus(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ExtendedError(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set TargetDetailedError(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set ReservedStatus(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set OutputBlockOffset(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set OutputBlockLength(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.System.Ioctl.DEVICE_DSM_DEFINITION (size: 40)
 */
export interface DEVICE_DSM_DEFINITION {
  /** u32 */
  Action: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  SingleRange: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ParameterBlockAlignment: number;
  /** u32 */
  ParameterBlockLength: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  HasOutput: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  OutputBlockAlignment: number;
  /** u32 */
  OutputBlockLength: number;
}

export const sizeofDEVICE_DSM_DEFINITION = 40;

export function allocDEVICE_DSM_DEFINITION(data?: Partial<DEVICE_DSM_DEFINITION>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_DSM_DEFINITION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Action !== undefined) view.setUint32(0, Number(data.Action), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SingleRange !== undefined) view.setBigUint64(8, data.SingleRange === null ? 0n : util.toBigInt(util.toPointer(data.SingleRange)), true);
  // 0x10: u32
  if (data?.ParameterBlockAlignment !== undefined) view.setUint32(16, Number(data.ParameterBlockAlignment), true);
  // 0x14: u32
  if (data?.ParameterBlockLength !== undefined) view.setUint32(20, Number(data.ParameterBlockLength), true);
  // 0x18: pointer
  if (data?.HasOutput !== undefined) view.setBigUint64(24, data.HasOutput === null ? 0n : util.toBigInt(util.toPointer(data.HasOutput)), true);
  // 0x20: u32
  if (data?.OutputBlockAlignment !== undefined) view.setUint32(32, Number(data.OutputBlockAlignment), true);
  // 0x24: u32
  if (data?.OutputBlockLength !== undefined) view.setUint32(36, Number(data.OutputBlockLength), true);
  return buf;
}

export class DEVICE_DSM_DEFINITIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Action(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get SingleRange(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get ParameterBlockAlignment(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ParameterBlockLength(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get HasOutput(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get OutputBlockAlignment(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get OutputBlockLength(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: u32
  set Action(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set SingleRange(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set ParameterBlockAlignment(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ParameterBlockLength(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set HasOutput(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set OutputBlockAlignment(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set OutputBlockLength(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICE_DSM_NOTIFICATION_PARAMETERS (size: 24)
 */
export interface DEVICE_DSM_NOTIFICATION_PARAMETERS {
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
  /** u32 */
  NumFileTypeIDs: number;
  /** array */
  FileTypeID: Deno.PointerValue | null;
}

export const sizeofDEVICE_DSM_NOTIFICATION_PARAMETERS = 24;

export function allocDEVICE_DSM_NOTIFICATION_PARAMETERS(data?: Partial<DEVICE_DSM_NOTIFICATION_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_DSM_NOTIFICATION_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.NumFileTypeIDs !== undefined) view.setUint32(8, Number(data.NumFileTypeIDs), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.FileTypeID !== undefined) view.setBigUint64(16, data.FileTypeID === null ? 0n : util.toBigInt(util.toPointer(data.FileTypeID)), true);
  return buf;
}

export class DEVICE_DSM_NOTIFICATION_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get NumFileTypeIDs(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get FileTypeID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set NumFileTypeIDs(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set FileTypeID(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_OFFLOAD_TOKEN (size: 32)
 */
export interface STORAGE_OFFLOAD_TOKEN {
  /** array */
  TokenType: Deno.PointerValue | null;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** array */
  TokenIdLength: Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSTORAGE_OFFLOAD_TOKEN = 32;

export function allocSTORAGE_OFFLOAD_TOKEN(data?: Partial<STORAGE_OFFLOAD_TOKEN>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_OFFLOAD_TOKEN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TokenType !== undefined) view.setBigUint64(0, data.TokenType === null ? 0n : util.toBigInt(util.toPointer(data.TokenType)), true);
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  // 0x10: pointer
  if (data?.TokenIdLength !== undefined) view.setBigUint64(16, data.TokenIdLength === null ? 0n : util.toBigInt(util.toPointer(data.TokenIdLength)), true);
  // 0x18: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(24, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class STORAGE_OFFLOAD_TOKENView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get TokenType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get TokenIdLength(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set TokenType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set TokenIdLength(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICE_DSM_OFFLOAD_READ_PARAMETERS (size: 16)
 */
export interface DEVICE_DSM_OFFLOAD_READ_PARAMETERS {
  /** u32 */
  Flags: number;
  /** u32 */
  TimeToLive: number;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofDEVICE_DSM_OFFLOAD_READ_PARAMETERS = 16;

export function allocDEVICE_DSM_OFFLOAD_READ_PARAMETERS(data?: Partial<DEVICE_DSM_OFFLOAD_READ_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_DSM_OFFLOAD_READ_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.TimeToLive !== undefined) view.setUint32(4, Number(data.TimeToLive), true);
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

export class DEVICE_DSM_OFFLOAD_READ_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get TimeToLive(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set TimeToLive(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_OFFLOAD_READ_OUTPUT (size: 32)
 */
export interface STORAGE_OFFLOAD_READ_OUTPUT {
  /** u32 */
  OffloadReadFlags: number;
  /** u32 */
  Reserved: number;
  /** u64 */
  LengthProtected: number | bigint;
  /** u32 */
  TokenLength: number;
  /** Windows.Win32.System.Ioctl.STORAGE_OFFLOAD_TOKEN */
  Token: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSTORAGE_OFFLOAD_READ_OUTPUT = 32;

export function allocSTORAGE_OFFLOAD_READ_OUTPUT(data?: Partial<STORAGE_OFFLOAD_READ_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_OFFLOAD_READ_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.OffloadReadFlags !== undefined) view.setUint32(0, Number(data.OffloadReadFlags), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  // 0x08: u64
  if (data?.LengthProtected !== undefined) view.setBigUint64(8, util.toBigInt(data.LengthProtected), true);
  // 0x10: u32
  if (data?.TokenLength !== undefined) view.setUint32(16, Number(data.TokenLength), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Token !== undefined) view.setBigUint64(24, data.Token === null ? 0n : util.toBigInt(util.toPointer(data.Token)), true);
  return buf;
}

export class STORAGE_OFFLOAD_READ_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get OffloadReadFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Reserved(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get LengthProtected(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u32
  get TokenLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Token(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set OffloadReadFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Reserved(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set LengthProtected(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u32
  set TokenLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Token(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS (size: 24)
 */
export interface DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS {
  /** u32 */
  Flags: number;
  /** u32 */
  Reserved: number;
  /** u64 */
  TokenOffset: number | bigint;
  /** Windows.Win32.System.Ioctl.STORAGE_OFFLOAD_TOKEN */
  Token: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDEVICE_DSM_OFFLOAD_WRITE_PARAMETERS = 24;

export function allocDEVICE_DSM_OFFLOAD_WRITE_PARAMETERS(data?: Partial<DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_DSM_OFFLOAD_WRITE_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  // 0x08: u64
  if (data?.TokenOffset !== undefined) view.setBigUint64(8, util.toBigInt(data.TokenOffset), true);
  // 0x10: pointer
  if (data?.Token !== undefined) view.setBigUint64(16, data.Token === null ? 0n : util.toBigInt(util.toPointer(data.Token)), true);
  return buf;
}

export class DEVICE_DSM_OFFLOAD_WRITE_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Reserved(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get TokenOffset(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: pointer
  get Token(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Reserved(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set TokenOffset(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: pointer
  set Token(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_OFFLOAD_WRITE_OUTPUT (size: 16)
 */
export interface STORAGE_OFFLOAD_WRITE_OUTPUT {
  /** u32 */
  OffloadWriteFlags: number;
  /** u32 */
  Reserved: number;
  /** u64 */
  LengthCopied: number | bigint;
}

export const sizeofSTORAGE_OFFLOAD_WRITE_OUTPUT = 16;

export function allocSTORAGE_OFFLOAD_WRITE_OUTPUT(data?: Partial<STORAGE_OFFLOAD_WRITE_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_OFFLOAD_WRITE_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.OffloadWriteFlags !== undefined) view.setUint32(0, Number(data.OffloadWriteFlags), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  // 0x08: u64
  if (data?.LengthCopied !== undefined) view.setBigUint64(8, util.toBigInt(data.LengthCopied), true);
  return buf;
}

export class STORAGE_OFFLOAD_WRITE_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get OffloadWriteFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Reserved(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get LengthCopied(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u32
  set OffloadWriteFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Reserved(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set LengthCopied(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICE_DATA_SET_LBP_STATE_PARAMETERS (size: 16)
 */
export interface DEVICE_DATA_SET_LBP_STATE_PARAMETERS {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
  /** u32 */
  OutputVersion: number;
}

export const sizeofDEVICE_DATA_SET_LBP_STATE_PARAMETERS = 16;

export function allocDEVICE_DATA_SET_LBP_STATE_PARAMETERS(data?: Partial<DEVICE_DATA_SET_LBP_STATE_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_DATA_SET_LBP_STATE_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.OutputVersion !== undefined) view.setUint32(12, Number(data.OutputVersion), true);
  return buf;
}

export class DEVICE_DATA_SET_LBP_STATE_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get OutputVersion(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set OutputVersion(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICE_DATA_SET_LB_PROVISIONING_STATE (size: 40)
 */
export interface DEVICE_DATA_SET_LB_PROVISIONING_STATE {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** u64 */
  SlabSizeInBytes: number | bigint;
  /** u32 */
  SlabOffsetDeltaInBytes: number;
  /** u32 */
  SlabAllocationBitMapBitCount: number;
  /** u32 */
  SlabAllocationBitMapLength: number;
  /** array */
  SlabAllocationBitMap: Deno.PointerValue | null;
}

export const sizeofDEVICE_DATA_SET_LB_PROVISIONING_STATE = 40;

export function allocDEVICE_DATA_SET_LB_PROVISIONING_STATE(data?: Partial<DEVICE_DATA_SET_LB_PROVISIONING_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_DATA_SET_LB_PROVISIONING_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u64
  if (data?.SlabSizeInBytes !== undefined) view.setBigUint64(8, util.toBigInt(data.SlabSizeInBytes), true);
  // 0x10: u32
  if (data?.SlabOffsetDeltaInBytes !== undefined) view.setUint32(16, Number(data.SlabOffsetDeltaInBytes), true);
  // 0x14: u32
  if (data?.SlabAllocationBitMapBitCount !== undefined) view.setUint32(20, Number(data.SlabAllocationBitMapBitCount), true);
  // 0x18: u32
  if (data?.SlabAllocationBitMapLength !== undefined) view.setUint32(24, Number(data.SlabAllocationBitMapLength), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.SlabAllocationBitMap !== undefined) view.setBigUint64(32, data.SlabAllocationBitMap === null ? 0n : util.toBigInt(util.toPointer(data.SlabAllocationBitMap)), true);
  return buf;
}

export class DEVICE_DATA_SET_LB_PROVISIONING_STATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Version(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get SlabSizeInBytes(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u32
  get SlabOffsetDeltaInBytes(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get SlabAllocationBitMapBitCount(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get SlabAllocationBitMapLength(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get SlabAllocationBitMap(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Version(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set SlabSizeInBytes(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u32
  set SlabOffsetDeltaInBytes(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set SlabAllocationBitMapBitCount(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set SlabAllocationBitMapLength(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set SlabAllocationBitMap(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2 (size: 40)
 */
export interface DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2 {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** u64 */
  SlabSizeInBytes: number | bigint;
  /** u64 */
  SlabOffsetDeltaInBytes: number | bigint;
  /** u32 */
  SlabAllocationBitMapBitCount: number;
  /** u32 */
  SlabAllocationBitMapLength: number;
  /** array */
  SlabAllocationBitMap: Deno.PointerValue | null;
}

export const sizeofDEVICE_DATA_SET_LB_PROVISIONING_STATE_V2 = 40;

export function allocDEVICE_DATA_SET_LB_PROVISIONING_STATE_V2(data?: Partial<DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_DATA_SET_LB_PROVISIONING_STATE_V2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u64
  if (data?.SlabSizeInBytes !== undefined) view.setBigUint64(8, util.toBigInt(data.SlabSizeInBytes), true);
  // 0x10: u64
  if (data?.SlabOffsetDeltaInBytes !== undefined) view.setBigUint64(16, util.toBigInt(data.SlabOffsetDeltaInBytes), true);
  // 0x18: u32
  if (data?.SlabAllocationBitMapBitCount !== undefined) view.setUint32(24, Number(data.SlabAllocationBitMapBitCount), true);
  // 0x1c: u32
  if (data?.SlabAllocationBitMapLength !== undefined) view.setUint32(28, Number(data.SlabAllocationBitMapLength), true);
  // 0x20: pointer
  if (data?.SlabAllocationBitMap !== undefined) view.setBigUint64(32, data.SlabAllocationBitMap === null ? 0n : util.toBigInt(util.toPointer(data.SlabAllocationBitMap)), true);
  return buf;
}

export class DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Version(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get SlabSizeInBytes(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get SlabOffsetDeltaInBytes(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u32
  get SlabAllocationBitMapBitCount(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get SlabAllocationBitMapLength(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get SlabAllocationBitMap(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Version(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set SlabSizeInBytes(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set SlabOffsetDeltaInBytes(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u32
  set SlabAllocationBitMapBitCount(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set SlabAllocationBitMapLength(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set SlabAllocationBitMap(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICE_DATA_SET_REPAIR_PARAMETERS (size: 16)
 */
export interface DEVICE_DATA_SET_REPAIR_PARAMETERS {
  /** u32 */
  NumberOfRepairCopies: number;
  /** u32 */
  SourceCopy: number;
  /** array */
  RepairCopies: Deno.PointerValue | null;
}

export const sizeofDEVICE_DATA_SET_REPAIR_PARAMETERS = 16;

export function allocDEVICE_DATA_SET_REPAIR_PARAMETERS(data?: Partial<DEVICE_DATA_SET_REPAIR_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_DATA_SET_REPAIR_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumberOfRepairCopies !== undefined) view.setUint32(0, Number(data.NumberOfRepairCopies), true);
  // 0x04: u32
  if (data?.SourceCopy !== undefined) view.setUint32(4, Number(data.SourceCopy), true);
  // 0x08: pointer
  if (data?.RepairCopies !== undefined) view.setBigUint64(8, data.RepairCopies === null ? 0n : util.toBigInt(util.toPointer(data.RepairCopies)), true);
  return buf;
}

export class DEVICE_DATA_SET_REPAIR_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumberOfRepairCopies(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SourceCopy(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get RepairCopies(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set NumberOfRepairCopies(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SourceCopy(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set RepairCopies(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICE_DATA_SET_REPAIR_OUTPUT (size: 8)
 */
export interface DEVICE_DATA_SET_REPAIR_OUTPUT {
  /** Windows.Win32.System.Ioctl.DEVICE_DATA_SET_RANGE */
  ParityExtent: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDEVICE_DATA_SET_REPAIR_OUTPUT = 8;

export function allocDEVICE_DATA_SET_REPAIR_OUTPUT(data?: Partial<DEVICE_DATA_SET_REPAIR_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_DATA_SET_REPAIR_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ParityExtent !== undefined) view.setBigUint64(0, data.ParityExtent === null ? 0n : util.toBigInt(util.toPointer(data.ParityExtent)), true);
  return buf;
}

export class DEVICE_DATA_SET_REPAIR_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ParityExtent(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ParityExtent(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICE_DATA_SET_SCRUB_OUTPUT (size: 24)
 */
export interface DEVICE_DATA_SET_SCRUB_OUTPUT {
  /** u64 */
  BytesProcessed: number | bigint;
  /** u64 */
  BytesRepaired: number | bigint;
  /** u64 */
  BytesFailed: number | bigint;
}

export const sizeofDEVICE_DATA_SET_SCRUB_OUTPUT = 24;

export function allocDEVICE_DATA_SET_SCRUB_OUTPUT(data?: Partial<DEVICE_DATA_SET_SCRUB_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_DATA_SET_SCRUB_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.BytesProcessed !== undefined) view.setBigUint64(0, util.toBigInt(data.BytesProcessed), true);
  // 0x08: u64
  if (data?.BytesRepaired !== undefined) view.setBigUint64(8, util.toBigInt(data.BytesRepaired), true);
  // 0x10: u64
  if (data?.BytesFailed !== undefined) view.setBigUint64(16, util.toBigInt(data.BytesFailed), true);
  return buf;
}

export class DEVICE_DATA_SET_SCRUB_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get BytesProcessed(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get BytesRepaired(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get BytesFailed(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x00: u64
  set BytesProcessed(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set BytesRepaired(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set BytesFailed(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICE_DATA_SET_SCRUB_EX_OUTPUT (size: 40)
 */
export interface DEVICE_DATA_SET_SCRUB_EX_OUTPUT {
  /** u64 */
  BytesProcessed: number | bigint;
  /** u64 */
  BytesRepaired: number | bigint;
  /** u64 */
  BytesFailed: number | bigint;
  /** Windows.Win32.System.Ioctl.DEVICE_DATA_SET_RANGE */
  ParityExtent: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  BytesScrubbed: number | bigint;
}

export const sizeofDEVICE_DATA_SET_SCRUB_EX_OUTPUT = 40;

export function allocDEVICE_DATA_SET_SCRUB_EX_OUTPUT(data?: Partial<DEVICE_DATA_SET_SCRUB_EX_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_DATA_SET_SCRUB_EX_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.BytesProcessed !== undefined) view.setBigUint64(0, util.toBigInt(data.BytesProcessed), true);
  // 0x08: u64
  if (data?.BytesRepaired !== undefined) view.setBigUint64(8, util.toBigInt(data.BytesRepaired), true);
  // 0x10: u64
  if (data?.BytesFailed !== undefined) view.setBigUint64(16, util.toBigInt(data.BytesFailed), true);
  // 0x18: pointer
  if (data?.ParityExtent !== undefined) view.setBigUint64(24, data.ParityExtent === null ? 0n : util.toBigInt(util.toPointer(data.ParityExtent)), true);
  // 0x20: u64
  if (data?.BytesScrubbed !== undefined) view.setBigUint64(32, util.toBigInt(data.BytesScrubbed), true);
  return buf;
}

export class DEVICE_DATA_SET_SCRUB_EX_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get BytesProcessed(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get BytesRepaired(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get BytesFailed(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: pointer
  get ParityExtent(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u64
  get BytesScrubbed(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x00: u64
  set BytesProcessed(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set BytesRepaired(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set BytesFailed(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: pointer
  set ParityExtent(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u64
  set BytesScrubbed(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICE_DSM_TIERING_QUERY_INPUT (size: 24)
 */
export interface DEVICE_DSM_TIERING_QUERY_INPUT {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
  /** u32 */
  NumberOfTierIds: number;
  /** array */
  TierIds: Deno.PointerValue | null;
}

export const sizeofDEVICE_DSM_TIERING_QUERY_INPUT = 24;

export function allocDEVICE_DSM_TIERING_QUERY_INPUT(data?: Partial<DEVICE_DSM_TIERING_QUERY_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_DSM_TIERING_QUERY_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.NumberOfTierIds !== undefined) view.setUint32(12, Number(data.NumberOfTierIds), true);
  // 0x10: pointer
  if (data?.TierIds !== undefined) view.setBigUint64(16, data.TierIds === null ? 0n : util.toBigInt(util.toPointer(data.TierIds)), true);
  return buf;
}

export class DEVICE_DSM_TIERING_QUERY_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get NumberOfTierIds(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get TierIds(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set NumberOfTierIds(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set TierIds(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_TIER_REGION (size: 24)
 */
export interface STORAGE_TIER_REGION {
  /** System.Guid */
  TierId: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  Offset: number | bigint;
  /** u64 */
  Length: number | bigint;
}

export const sizeofSTORAGE_TIER_REGION = 24;

export function allocSTORAGE_TIER_REGION(data?: Partial<STORAGE_TIER_REGION>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_TIER_REGION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TierId !== undefined) view.setBigUint64(0, data.TierId === null ? 0n : util.toBigInt(util.toPointer(data.TierId)), true);
  // 0x08: u64
  if (data?.Offset !== undefined) view.setBigUint64(8, util.toBigInt(data.Offset), true);
  // 0x10: u64
  if (data?.Length !== undefined) view.setBigUint64(16, util.toBigInt(data.Length), true);
  return buf;
}

export class STORAGE_TIER_REGIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get TierId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u64
  get Offset(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get Length(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x00: pointer
  set TierId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u64
  set Offset(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set Length(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICE_DSM_TIERING_QUERY_OUTPUT (size: 40)
 */
export interface DEVICE_DSM_TIERING_QUERY_OUTPUT {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Reserved: number;
  /** u64 */
  Alignment: number | bigint;
  /** u32 */
  TotalNumberOfRegions: number;
  /** u32 */
  NumberOfRegionsReturned: number;
  /** array */
  Regions: Deno.PointerValue | null;
}

export const sizeofDEVICE_DSM_TIERING_QUERY_OUTPUT = 40;

export function allocDEVICE_DSM_TIERING_QUERY_OUTPUT(data?: Partial<DEVICE_DSM_TIERING_QUERY_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_DSM_TIERING_QUERY_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  // 0x10: u64
  if (data?.Alignment !== undefined) view.setBigUint64(16, util.toBigInt(data.Alignment), true);
  // 0x18: u32
  if (data?.TotalNumberOfRegions !== undefined) view.setUint32(24, Number(data.TotalNumberOfRegions), true);
  // 0x1c: u32
  if (data?.NumberOfRegionsReturned !== undefined) view.setUint32(28, Number(data.NumberOfRegionsReturned), true);
  // 0x20: pointer
  if (data?.Regions !== undefined) view.setBigUint64(32, data.Regions === null ? 0n : util.toBigInt(util.toPointer(data.Regions)), true);
  return buf;
}

export class DEVICE_DSM_TIERING_QUERY_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Reserved(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u64
  get Alignment(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u32
  get TotalNumberOfRegions(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get NumberOfRegionsReturned(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get Regions(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Reserved(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u64
  set Alignment(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u32
  set TotalNumberOfRegions(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set NumberOfRegionsReturned(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set Regions(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS (size: 16)
 */
export interface DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS {
  /** u32 */
  Size: number;
  /** u8 */
  TargetPriority: number;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofDEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS = 16;

export function allocDEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS(data?: Partial<DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u8
  if (data?.TargetPriority !== undefined) view.setUint8(4, Number(data.TargetPriority));
  // 0x05: pad3
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

export class DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u8
  get TargetPriority(): number {
    return this.view.getUint8(4);
  }

  // 0x05: pad3

  // 0x08: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u8
  set TargetPriority(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: pad3

  // 0x08: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT (size: 16)
 */
export interface DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT {
  /** u64 */
  TopologyRangeBytes: number | bigint;
  /** array */
  TopologyId: Deno.PointerValue | null;
}

export const sizeofDEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT = 16;

export function allocDEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT(data?: Partial<DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.TopologyRangeBytes !== undefined) view.setBigUint64(0, util.toBigInt(data.TopologyRangeBytes), true);
  // 0x08: pointer
  if (data?.TopologyId !== undefined) view.setBigUint64(8, data.TopologyId === null ? 0n : util.toBigInt(util.toPointer(data.TopologyId)), true);
  return buf;
}

export class DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get TopologyRangeBytes(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: pointer
  get TopologyId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u64
  set TopologyRangeBytes(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: pointer
  set TopologyId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICE_STORAGE_ADDRESS_RANGE (size: 16)
 */
export interface DEVICE_STORAGE_ADDRESS_RANGE {
  /** i64 */
  StartAddress: number | bigint;
  /** u64 */
  LengthInBytes: number | bigint;
}

export const sizeofDEVICE_STORAGE_ADDRESS_RANGE = 16;

export function allocDEVICE_STORAGE_ADDRESS_RANGE(data?: Partial<DEVICE_STORAGE_ADDRESS_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_STORAGE_ADDRESS_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.StartAddress !== undefined) view.setBigInt64(0, util.toBigInt(data.StartAddress), true);
  // 0x08: u64
  if (data?.LengthInBytes !== undefined) view.setBigUint64(8, util.toBigInt(data.LengthInBytes), true);
  return buf;
}

export class DEVICE_STORAGE_ADDRESS_RANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get StartAddress(): number | bigint {
    return this.view.getBigInt64(0, true);
  }

  // 0x08: u64
  get LengthInBytes(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: i64
  set StartAddress(value: number | bigint) {
    this.view.setBigInt64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set LengthInBytes(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT (size: 24)
 */
export interface DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT {
  /** u32 */
  Version: number;
  /** u32 */
  Flags: number;
  /** u32 */
  TotalNumberOfRanges: number;
  /** u32 */
  NumberOfRangesReturned: number;
  /** array */
  Ranges: Deno.PointerValue | null;
}

export const sizeofDEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT = 24;

export function allocDEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT(data?: Partial<DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.TotalNumberOfRanges !== undefined) view.setUint32(8, Number(data.TotalNumberOfRanges), true);
  // 0x0c: u32
  if (data?.NumberOfRangesReturned !== undefined) view.setUint32(12, Number(data.NumberOfRangesReturned), true);
  // 0x10: pointer
  if (data?.Ranges !== undefined) view.setBigUint64(16, data.Ranges === null ? 0n : util.toBigInt(util.toPointer(data.Ranges)), true);
  return buf;
}

export class DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get TotalNumberOfRanges(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get NumberOfRangesReturned(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get Ranges(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set TotalNumberOfRanges(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set NumberOfRangesReturned(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set Ranges(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICE_DSM_REPORT_ZONES_PARAMETERS (size: 16)
 */
export interface DEVICE_DSM_REPORT_ZONES_PARAMETERS {
  /** u32 */
  Size: number;
  /** u8 */
  ReportOption: number;
  /** u8 */
  Partial: number;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofDEVICE_DSM_REPORT_ZONES_PARAMETERS = 16;

export function allocDEVICE_DSM_REPORT_ZONES_PARAMETERS(data?: Partial<DEVICE_DSM_REPORT_ZONES_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_DSM_REPORT_ZONES_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u8
  if (data?.ReportOption !== undefined) view.setUint8(4, Number(data.ReportOption));
  // 0x05: u8
  if (data?.Partial !== undefined) view.setUint8(5, Number(data.Partial));
  // 0x06: pad2
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

export class DEVICE_DSM_REPORT_ZONES_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u8
  get ReportOption(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get Partial(): number {
    return this.view.getUint8(5);
  }

  // 0x06: pad2

  // 0x08: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u8
  set ReportOption(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set Partial(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: pad2

  // 0x08: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_ZONE_DESCRIPTOR (size: 48)
 */
export interface STORAGE_ZONE_DESCRIPTOR {
  /** u32 */
  Size: number;
  /** Windows.Win32.System.Ioctl.STORAGE_ZONE_TYPES */
  ZoneType: STORAGE_ZONE_TYPES;
  /** Windows.Win32.System.Ioctl.STORAGE_ZONE_CONDITION */
  ZoneCondition: STORAGE_ZONE_CONDITION;
  /** Windows.Win32.Foundation.BOOLEAN */
  ResetWritePointerRecommend: Uint8Array | Deno.PointerValue | null;
  /** array */
  Reserved0: Deno.PointerValue | null;
  /** u64 */
  ZoneSize: number | bigint;
  /** u64 */
  WritePointerOffset: number | bigint;
}

export const sizeofSTORAGE_ZONE_DESCRIPTOR = 48;

export function allocSTORAGE_ZONE_DESCRIPTOR(data?: Partial<STORAGE_ZONE_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_ZONE_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: i32
  if (data?.ZoneType !== undefined) view.setInt32(4, Number(data.ZoneType), true);
  // 0x08: i32
  if (data?.ZoneCondition !== undefined) view.setInt32(8, Number(data.ZoneCondition), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ResetWritePointerRecommend !== undefined) view.setBigUint64(16, data.ResetWritePointerRecommend === null ? 0n : util.toBigInt(util.toPointer(data.ResetWritePointerRecommend)), true);
  // 0x18: pointer
  if (data?.Reserved0 !== undefined) view.setBigUint64(24, data.Reserved0 === null ? 0n : util.toBigInt(util.toPointer(data.Reserved0)), true);
  // 0x20: u64
  if (data?.ZoneSize !== undefined) view.setBigUint64(32, util.toBigInt(data.ZoneSize), true);
  // 0x28: u64
  if (data?.WritePointerOffset !== undefined) view.setBigUint64(40, util.toBigInt(data.WritePointerOffset), true);
  return buf;
}

export class STORAGE_ZONE_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get ZoneType(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get ZoneCondition(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ResetWritePointerRecommend(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Reserved0(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u64
  get ZoneSize(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: u64
  get WritePointerOffset(): number | bigint {
    return this.view.getBigUint64(40, true);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set ZoneType(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set ZoneCondition(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ResetWritePointerRecommend(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Reserved0(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u64
  set ZoneSize(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: u64
  set WritePointerOffset(value: number | bigint) {
    this.view.setBigUint64(40, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICE_DSM_REPORT_ZONES_DATA (size: 24)
 */
export interface DEVICE_DSM_REPORT_ZONES_DATA {
  /** u32 */
  Size: number;
  /** u32 */
  ZoneCount: number;
  /** Windows.Win32.System.Ioctl.STORAGE_ZONES_ATTRIBUTES */
  Attributes: STORAGE_ZONES_ATTRIBUTES;
  /** u32 */
  Reserved0: number;
  /** array */
  ZoneDescriptors: Deno.PointerValue | null;
}

export const sizeofDEVICE_DSM_REPORT_ZONES_DATA = 24;

export function allocDEVICE_DSM_REPORT_ZONES_DATA(data?: Partial<DEVICE_DSM_REPORT_ZONES_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_DSM_REPORT_ZONES_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.ZoneCount !== undefined) view.setUint32(4, Number(data.ZoneCount), true);
  // 0x08: i32
  if (data?.Attributes !== undefined) view.setInt32(8, Number(data.Attributes), true);
  // 0x0c: u32
  if (data?.Reserved0 !== undefined) view.setUint32(12, Number(data.Reserved0), true);
  // 0x10: pointer
  if (data?.ZoneDescriptors !== undefined) view.setBigUint64(16, data.ZoneDescriptors === null ? 0n : util.toBigInt(util.toPointer(data.ZoneDescriptors)), true);
  return buf;
}

export class DEVICE_DSM_REPORT_ZONES_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ZoneCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get Attributes(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get Reserved0(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get ZoneDescriptors(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ZoneCount(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set Attributes(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set Reserved0(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set ZoneDescriptors(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICE_STORAGE_RANGE_ATTRIBUTES (size: 24)
 */
export interface DEVICE_STORAGE_RANGE_ATTRIBUTES {
  /** u64 */
  LengthInBytes: number | bigint;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Reserved: number;
}

export const sizeofDEVICE_STORAGE_RANGE_ATTRIBUTES = 24;

export function allocDEVICE_STORAGE_RANGE_ATTRIBUTES(data?: Partial<DEVICE_STORAGE_RANGE_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_STORAGE_RANGE_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.LengthInBytes !== undefined) view.setBigUint64(0, util.toBigInt(data.LengthInBytes), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: u32
  if (data?.Reserved !== undefined) view.setUint32(16, Number(data.Reserved), true);
  // 0x14: pad4
  return buf;
}

export class DEVICE_STORAGE_RANGE_ATTRIBUTESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get LengthInBytes(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get Reserved(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u64
  set LengthInBytes(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set Reserved(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.System.Ioctl.DEVICE_DSM_RANGE_ERROR_INFO (size: 24)
 */
export interface DEVICE_DSM_RANGE_ERROR_INFO {
  /** u32 */
  Version: number;
  /** u32 */
  Flags: number;
  /** u32 */
  TotalNumberOfRanges: number;
  /** u32 */
  NumberOfRangesReturned: number;
  /** array */
  Ranges: Deno.PointerValue | null;
}

export const sizeofDEVICE_DSM_RANGE_ERROR_INFO = 24;

export function allocDEVICE_DSM_RANGE_ERROR_INFO(data?: Partial<DEVICE_DSM_RANGE_ERROR_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_DSM_RANGE_ERROR_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.TotalNumberOfRanges !== undefined) view.setUint32(8, Number(data.TotalNumberOfRanges), true);
  // 0x0c: u32
  if (data?.NumberOfRangesReturned !== undefined) view.setUint32(12, Number(data.NumberOfRangesReturned), true);
  // 0x10: pointer
  if (data?.Ranges !== undefined) view.setBigUint64(16, data.Ranges === null ? 0n : util.toBigInt(util.toPointer(data.Ranges)), true);
  return buf;
}

export class DEVICE_DSM_RANGE_ERROR_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get TotalNumberOfRanges(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get NumberOfRangesReturned(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get Ranges(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set TotalNumberOfRanges(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set NumberOfRangesReturned(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set Ranges(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICE_DSM_LOST_QUERY_PARAMETERS (size: 16)
 */
export interface DEVICE_DSM_LOST_QUERY_PARAMETERS {
  /** u32 */
  Version: number;
  /** u64 */
  Granularity: number | bigint;
}

export const sizeofDEVICE_DSM_LOST_QUERY_PARAMETERS = 16;

export function allocDEVICE_DSM_LOST_QUERY_PARAMETERS(data?: Partial<DEVICE_DSM_LOST_QUERY_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_DSM_LOST_QUERY_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.Granularity !== undefined) view.setBigUint64(8, util.toBigInt(data.Granularity), true);
  return buf;
}

export class DEVICE_DSM_LOST_QUERY_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: u64
  get Granularity(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: u64
  set Granularity(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICE_DSM_LOST_QUERY_OUTPUT (size: 32)
 */
export interface DEVICE_DSM_LOST_QUERY_OUTPUT {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u64 */
  Alignment: number | bigint;
  /** u32 */
  NumberOfBits: number;
  /** array */
  BitMap: Deno.PointerValue | null;
}

export const sizeofDEVICE_DSM_LOST_QUERY_OUTPUT = 32;

export function allocDEVICE_DSM_LOST_QUERY_OUTPUT(data?: Partial<DEVICE_DSM_LOST_QUERY_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_DSM_LOST_QUERY_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u64
  if (data?.Alignment !== undefined) view.setBigUint64(8, util.toBigInt(data.Alignment), true);
  // 0x10: u32
  if (data?.NumberOfBits !== undefined) view.setUint32(16, Number(data.NumberOfBits), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.BitMap !== undefined) view.setBigUint64(24, data.BitMap === null ? 0n : util.toBigInt(util.toPointer(data.BitMap)), true);
  return buf;
}

export class DEVICE_DSM_LOST_QUERY_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get Alignment(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u32
  get NumberOfBits(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get BitMap(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set Alignment(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u32
  set NumberOfBits(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set BitMap(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICE_DSM_FREE_SPACE_OUTPUT (size: 16)
 */
export interface DEVICE_DSM_FREE_SPACE_OUTPUT {
  /** u32 */
  Version: number;
  /** u64 */
  FreeSpace: number | bigint;
}

export const sizeofDEVICE_DSM_FREE_SPACE_OUTPUT = 16;

export function allocDEVICE_DSM_FREE_SPACE_OUTPUT(data?: Partial<DEVICE_DSM_FREE_SPACE_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_DSM_FREE_SPACE_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.FreeSpace !== undefined) view.setBigUint64(8, util.toBigInt(data.FreeSpace), true);
  return buf;
}

export class DEVICE_DSM_FREE_SPACE_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: u64
  get FreeSpace(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: u64
  set FreeSpace(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICE_DSM_CONVERSION_OUTPUT (size: 16)
 */
export interface DEVICE_DSM_CONVERSION_OUTPUT {
  /** u32 */
  Version: number;
  /** System.Guid */
  Source: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDEVICE_DSM_CONVERSION_OUTPUT = 16;

export function allocDEVICE_DSM_CONVERSION_OUTPUT(data?: Partial<DEVICE_DSM_CONVERSION_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_DSM_CONVERSION_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Source !== undefined) view.setBigUint64(8, data.Source === null ? 0n : util.toBigInt(util.toPointer(data.Source)), true);
  return buf;
}

export class DEVICE_DSM_CONVERSION_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Source(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Source(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_GET_BC_PROPERTIES_OUTPUT (size: 32)
 */
export interface STORAGE_GET_BC_PROPERTIES_OUTPUT {
  /** u32 */
  MaximumRequestsPerPeriod: number;
  /** u32 */
  MinimumPeriod: number;
  /** u64 */
  MaximumRequestSize: number | bigint;
  /** u32 */
  EstimatedTimePerRequest: number;
  /** u32 */
  NumOutStandingRequests: number;
  /** u64 */
  RequestSize: number | bigint;
}

export const sizeofSTORAGE_GET_BC_PROPERTIES_OUTPUT = 32;

export function allocSTORAGE_GET_BC_PROPERTIES_OUTPUT(data?: Partial<STORAGE_GET_BC_PROPERTIES_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_GET_BC_PROPERTIES_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MaximumRequestsPerPeriod !== undefined) view.setUint32(0, Number(data.MaximumRequestsPerPeriod), true);
  // 0x04: u32
  if (data?.MinimumPeriod !== undefined) view.setUint32(4, Number(data.MinimumPeriod), true);
  // 0x08: u64
  if (data?.MaximumRequestSize !== undefined) view.setBigUint64(8, util.toBigInt(data.MaximumRequestSize), true);
  // 0x10: u32
  if (data?.EstimatedTimePerRequest !== undefined) view.setUint32(16, Number(data.EstimatedTimePerRequest), true);
  // 0x14: u32
  if (data?.NumOutStandingRequests !== undefined) view.setUint32(20, Number(data.NumOutStandingRequests), true);
  // 0x18: u64
  if (data?.RequestSize !== undefined) view.setBigUint64(24, util.toBigInt(data.RequestSize), true);
  return buf;
}

export class STORAGE_GET_BC_PROPERTIES_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MaximumRequestsPerPeriod(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MinimumPeriod(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get MaximumRequestSize(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u32
  get EstimatedTimePerRequest(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get NumOutStandingRequests(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u64
  get RequestSize(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x00: u32
  set MaximumRequestsPerPeriod(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MinimumPeriod(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set MaximumRequestSize(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u32
  set EstimatedTimePerRequest(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set NumOutStandingRequests(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u64
  set RequestSize(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_ALLOCATE_BC_STREAM_INPUT (size: 48)
 */
export interface STORAGE_ALLOCATE_BC_STREAM_INPUT {
  /** u32 */
  Version: number;
  /** u32 */
  RequestsPerPeriod: number;
  /** u32 */
  Period: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  RetryFailures: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  Discardable: Uint8Array | Deno.PointerValue | null;
  /** array */
  Reserved1: Deno.PointerValue | null;
  /** u32 */
  AccessType: number;
  /** u32 */
  AccessMode: number;
}

export const sizeofSTORAGE_ALLOCATE_BC_STREAM_INPUT = 48;

export function allocSTORAGE_ALLOCATE_BC_STREAM_INPUT(data?: Partial<STORAGE_ALLOCATE_BC_STREAM_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_ALLOCATE_BC_STREAM_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.RequestsPerPeriod !== undefined) view.setUint32(4, Number(data.RequestsPerPeriod), true);
  // 0x08: u32
  if (data?.Period !== undefined) view.setUint32(8, Number(data.Period), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.RetryFailures !== undefined) view.setBigUint64(16, data.RetryFailures === null ? 0n : util.toBigInt(util.toPointer(data.RetryFailures)), true);
  // 0x18: pointer
  if (data?.Discardable !== undefined) view.setBigUint64(24, data.Discardable === null ? 0n : util.toBigInt(util.toPointer(data.Discardable)), true);
  // 0x20: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(32, data.Reserved1 === null ? 0n : util.toBigInt(util.toPointer(data.Reserved1)), true);
  // 0x28: u32
  if (data?.AccessType !== undefined) view.setUint32(40, Number(data.AccessType), true);
  // 0x2c: u32
  if (data?.AccessMode !== undefined) view.setUint32(44, Number(data.AccessMode), true);
  return buf;
}

export class STORAGE_ALLOCATE_BC_STREAM_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get RequestsPerPeriod(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Period(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get RetryFailures(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Discardable(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get Reserved1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get AccessType(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get AccessMode(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set RequestsPerPeriod(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Period(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set RetryFailures(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Discardable(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set Reserved1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set AccessType(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set AccessMode(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_ALLOCATE_BC_STREAM_OUTPUT (size: 16)
 */
export interface STORAGE_ALLOCATE_BC_STREAM_OUTPUT {
  /** u64 */
  RequestSize: number | bigint;
  /** u32 */
  NumOutStandingRequests: number;
}

export const sizeofSTORAGE_ALLOCATE_BC_STREAM_OUTPUT = 16;

export function allocSTORAGE_ALLOCATE_BC_STREAM_OUTPUT(data?: Partial<STORAGE_ALLOCATE_BC_STREAM_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_ALLOCATE_BC_STREAM_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.RequestSize !== undefined) view.setBigUint64(0, util.toBigInt(data.RequestSize), true);
  // 0x08: u32
  if (data?.NumOutStandingRequests !== undefined) view.setUint32(8, Number(data.NumOutStandingRequests), true);
  // 0x0c: pad4
  return buf;
}

export class STORAGE_ALLOCATE_BC_STREAM_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get RequestSize(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u32
  get NumOutStandingRequests(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u64
  set RequestSize(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u32
  set NumOutStandingRequests(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_PRIORITY_HINT_SUPPORT (size: 8)
 */
export interface STORAGE_PRIORITY_HINT_SUPPORT {
  /** u32 */
  SupportFlags: number;
}

export const sizeofSTORAGE_PRIORITY_HINT_SUPPORT = 8;

export function allocSTORAGE_PRIORITY_HINT_SUPPORT(data?: Partial<STORAGE_PRIORITY_HINT_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_PRIORITY_HINT_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SupportFlags !== undefined) view.setUint32(0, Number(data.SupportFlags), true);
  // 0x04: pad4
  return buf;
}

export class STORAGE_PRIORITY_HINT_SUPPORTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SupportFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set SupportFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_DIAGNOSTIC_REQUEST (size: 24)
 */
export interface STORAGE_DIAGNOSTIC_REQUEST {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
  /** Windows.Win32.System.Ioctl.STORAGE_DIAGNOSTIC_TARGET_TYPE */
  TargetType: STORAGE_DIAGNOSTIC_TARGET_TYPE;
  /** Windows.Win32.System.Ioctl.STORAGE_DIAGNOSTIC_LEVEL */
  Level: STORAGE_DIAGNOSTIC_LEVEL;
}

export const sizeofSTORAGE_DIAGNOSTIC_REQUEST = 24;

export function allocSTORAGE_DIAGNOSTIC_REQUEST(data?: Partial<STORAGE_DIAGNOSTIC_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_DIAGNOSTIC_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: i32
  if (data?.TargetType !== undefined) view.setInt32(12, Number(data.TargetType), true);
  // 0x10: i32
  if (data?.Level !== undefined) view.setInt32(16, Number(data.Level), true);
  // 0x14: pad4
  return buf;
}

export class STORAGE_DIAGNOSTIC_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get TargetType(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get Level(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set TargetType(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set Level(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_DIAGNOSTIC_DATA (size: 32)
 */
export interface STORAGE_DIAGNOSTIC_DATA {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** System.Guid */
  ProviderId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  BufferSize: number;
  /** u32 */
  Reserved: number;
  /** array */
  DiagnosticDataBuffer: Deno.PointerValue | null;
}

export const sizeofSTORAGE_DIAGNOSTIC_DATA = 32;

export function allocSTORAGE_DIAGNOSTIC_DATA(data?: Partial<STORAGE_DIAGNOSTIC_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_DIAGNOSTIC_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: pointer
  if (data?.ProviderId !== undefined) view.setBigUint64(8, data.ProviderId === null ? 0n : util.toBigInt(util.toPointer(data.ProviderId)), true);
  // 0x10: u32
  if (data?.BufferSize !== undefined) view.setUint32(16, Number(data.BufferSize), true);
  // 0x14: u32
  if (data?.Reserved !== undefined) view.setUint32(20, Number(data.Reserved), true);
  // 0x18: pointer
  if (data?.DiagnosticDataBuffer !== undefined) view.setBigUint64(24, data.DiagnosticDataBuffer === null ? 0n : util.toBigInt(util.toPointer(data.DiagnosticDataBuffer)), true);
  return buf;
}

export class STORAGE_DIAGNOSTIC_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ProviderId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get BufferSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Reserved(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get DiagnosticDataBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ProviderId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set BufferSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Reserved(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set DiagnosticDataBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.PHYSICAL_ELEMENT_STATUS_REQUEST (size: 24)
 */
export interface PHYSICAL_ELEMENT_STATUS_REQUEST {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  StartingElement: number;
  /** u8 */
  Filter: number;
  /** u8 */
  ReportType: number;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofPHYSICAL_ELEMENT_STATUS_REQUEST = 24;

export function allocPHYSICAL_ELEMENT_STATUS_REQUEST(data?: Partial<PHYSICAL_ELEMENT_STATUS_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofPHYSICAL_ELEMENT_STATUS_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.StartingElement !== undefined) view.setUint32(8, Number(data.StartingElement), true);
  // 0x0c: u8
  if (data?.Filter !== undefined) view.setUint8(12, Number(data.Filter));
  // 0x0d: u8
  if (data?.ReportType !== undefined) view.setUint8(13, Number(data.ReportType));
  // 0x0e: pad2
  // 0x10: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(16, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

export class PHYSICAL_ELEMENT_STATUS_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get StartingElement(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u8
  get Filter(): number {
    return this.view.getUint8(12);
  }

  // 0x0d: u8
  get ReportType(): number {
    return this.view.getUint8(13);
  }

  // 0x0e: pad2

  // 0x10: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set StartingElement(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u8
  set Filter(value: number) {
    this.view.setUint8(12, value);
  }

  // 0x0d: u8
  set ReportType(value: number) {
    this.view.setUint8(13, value);
  }

  // 0x0e: pad2

  // 0x10: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.PHYSICAL_ELEMENT_STATUS_DESCRIPTOR (size: 40)
 */
export interface PHYSICAL_ELEMENT_STATUS_DESCRIPTOR {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  ElementIdentifier: number;
  /** u8 */
  PhysicalElementType: number;
  /** u8 */
  PhysicalElementHealth: number;
  /** array */
  Reserved1: Deno.PointerValue | null;
  /** u64 */
  AssociatedCapacity: number | bigint;
  /** array */
  Reserved2: Deno.PointerValue | null;
}

export const sizeofPHYSICAL_ELEMENT_STATUS_DESCRIPTOR = 40;

export function allocPHYSICAL_ELEMENT_STATUS_DESCRIPTOR(data?: Partial<PHYSICAL_ELEMENT_STATUS_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofPHYSICAL_ELEMENT_STATUS_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.ElementIdentifier !== undefined) view.setUint32(8, Number(data.ElementIdentifier), true);
  // 0x0c: u8
  if (data?.PhysicalElementType !== undefined) view.setUint8(12, Number(data.PhysicalElementType));
  // 0x0d: u8
  if (data?.PhysicalElementHealth !== undefined) view.setUint8(13, Number(data.PhysicalElementHealth));
  // 0x0e: pad2
  // 0x10: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(16, data.Reserved1 === null ? 0n : util.toBigInt(util.toPointer(data.Reserved1)), true);
  // 0x18: u64
  if (data?.AssociatedCapacity !== undefined) view.setBigUint64(24, util.toBigInt(data.AssociatedCapacity), true);
  // 0x20: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(32, data.Reserved2 === null ? 0n : util.toBigInt(util.toPointer(data.Reserved2)), true);
  return buf;
}

export class PHYSICAL_ELEMENT_STATUS_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ElementIdentifier(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u8
  get PhysicalElementType(): number {
    return this.view.getUint8(12);
  }

  // 0x0d: u8
  get PhysicalElementHealth(): number {
    return this.view.getUint8(13);
  }

  // 0x0e: pad2

  // 0x10: pointer
  get Reserved1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u64
  get AssociatedCapacity(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: pointer
  get Reserved2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ElementIdentifier(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u8
  set PhysicalElementType(value: number) {
    this.view.setUint8(12, value);
  }

  // 0x0d: u8
  set PhysicalElementHealth(value: number) {
    this.view.setUint8(13, value);
  }

  // 0x0e: pad2

  // 0x10: pointer
  set Reserved1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u64
  set AssociatedCapacity(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: pointer
  set Reserved2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.PHYSICAL_ELEMENT_STATUS (size: 32)
 */
export interface PHYSICAL_ELEMENT_STATUS {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  DescriptorCount: number;
  /** u32 */
  ReturnedDescriptorCount: number;
  /** u32 */
  ElementIdentifierBeingDepoped: number;
  /** u32 */
  Reserved: number;
  /** array */
  Descriptors: Deno.PointerValue | null;
}

export const sizeofPHYSICAL_ELEMENT_STATUS = 32;

export function allocPHYSICAL_ELEMENT_STATUS(data?: Partial<PHYSICAL_ELEMENT_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofPHYSICAL_ELEMENT_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.DescriptorCount !== undefined) view.setUint32(8, Number(data.DescriptorCount), true);
  // 0x0c: u32
  if (data?.ReturnedDescriptorCount !== undefined) view.setUint32(12, Number(data.ReturnedDescriptorCount), true);
  // 0x10: u32
  if (data?.ElementIdentifierBeingDepoped !== undefined) view.setUint32(16, Number(data.ElementIdentifierBeingDepoped), true);
  // 0x14: u32
  if (data?.Reserved !== undefined) view.setUint32(20, Number(data.Reserved), true);
  // 0x18: pointer
  if (data?.Descriptors !== undefined) view.setBigUint64(24, data.Descriptors === null ? 0n : util.toBigInt(util.toPointer(data.Descriptors)), true);
  return buf;
}

export class PHYSICAL_ELEMENT_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get DescriptorCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ReturnedDescriptorCount(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ElementIdentifierBeingDepoped(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Reserved(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get Descriptors(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set DescriptorCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ReturnedDescriptorCount(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ElementIdentifierBeingDepoped(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Reserved(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set Descriptors(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.REMOVE_ELEMENT_AND_TRUNCATE_REQUEST (size: 24)
 */
export interface REMOVE_ELEMENT_AND_TRUNCATE_REQUEST {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u64 */
  RequestCapacity: number | bigint;
  /** u32 */
  ElementIdentifier: number;
  /** u32 */
  Reserved: number;
}

export const sizeofREMOVE_ELEMENT_AND_TRUNCATE_REQUEST = 24;

export function allocREMOVE_ELEMENT_AND_TRUNCATE_REQUEST(data?: Partial<REMOVE_ELEMENT_AND_TRUNCATE_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofREMOVE_ELEMENT_AND_TRUNCATE_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u64
  if (data?.RequestCapacity !== undefined) view.setBigUint64(8, util.toBigInt(data.RequestCapacity), true);
  // 0x10: u32
  if (data?.ElementIdentifier !== undefined) view.setUint32(16, Number(data.ElementIdentifier), true);
  // 0x14: u32
  if (data?.Reserved !== undefined) view.setUint32(20, Number(data.Reserved), true);
  return buf;
}

export class REMOVE_ELEMENT_AND_TRUNCATE_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get RequestCapacity(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u32
  get ElementIdentifier(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Reserved(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set RequestCapacity(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u32
  set ElementIdentifier(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Reserved(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.GET_DEVICE_INTERNAL_STATUS_DATA_REQUEST (size: 16)
 */
export interface GET_DEVICE_INTERNAL_STATUS_DATA_REQUEST {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.System.Ioctl.DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE */
  RequestDataType: DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE;
  /** Windows.Win32.System.Ioctl.DEVICE_INTERNAL_STATUS_DATA_SET */
  RequestDataSet: DEVICE_INTERNAL_STATUS_DATA_SET;
}

export const sizeofGET_DEVICE_INTERNAL_STATUS_DATA_REQUEST = 16;

export function allocGET_DEVICE_INTERNAL_STATUS_DATA_REQUEST(data?: Partial<GET_DEVICE_INTERNAL_STATUS_DATA_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofGET_DEVICE_INTERNAL_STATUS_DATA_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: i32
  if (data?.RequestDataType !== undefined) view.setInt32(8, Number(data.RequestDataType), true);
  // 0x0c: i32
  if (data?.RequestDataSet !== undefined) view.setInt32(12, Number(data.RequestDataSet), true);
  return buf;
}

export class GET_DEVICE_INTERNAL_STATUS_DATA_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get RequestDataType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get RequestDataSet(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set RequestDataType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set RequestDataSet(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICE_INTERNAL_STATUS_DATA (size: 72)
 */
export interface DEVICE_INTERNAL_STATUS_DATA {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u64 */
  T10VendorId: number | bigint;
  /** u32 */
  DataSet1Length: number;
  /** u32 */
  DataSet2Length: number;
  /** u32 */
  DataSet3Length: number;
  /** u32 */
  DataSet4Length: number;
  /** u8 */
  StatusDataVersion: number;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** array */
  ReasonIdentifier: Deno.PointerValue | null;
  /** u32 */
  StatusDataLength: number;
  /** array */
  StatusData: Deno.PointerValue | null;
}

export const sizeofDEVICE_INTERNAL_STATUS_DATA = 72;

export function allocDEVICE_INTERNAL_STATUS_DATA(data?: Partial<DEVICE_INTERNAL_STATUS_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_INTERNAL_STATUS_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u64
  if (data?.T10VendorId !== undefined) view.setBigUint64(8, util.toBigInt(data.T10VendorId), true);
  // 0x10: u32
  if (data?.DataSet1Length !== undefined) view.setUint32(16, Number(data.DataSet1Length), true);
  // 0x14: u32
  if (data?.DataSet2Length !== undefined) view.setUint32(20, Number(data.DataSet2Length), true);
  // 0x18: u32
  if (data?.DataSet3Length !== undefined) view.setUint32(24, Number(data.DataSet3Length), true);
  // 0x1c: u32
  if (data?.DataSet4Length !== undefined) view.setUint32(28, Number(data.DataSet4Length), true);
  // 0x20: u8
  if (data?.StatusDataVersion !== undefined) view.setUint8(32, Number(data.StatusDataVersion));
  // 0x21: pad7
  // 0x28: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(40, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  // 0x30: pointer
  if (data?.ReasonIdentifier !== undefined) view.setBigUint64(48, data.ReasonIdentifier === null ? 0n : util.toBigInt(util.toPointer(data.ReasonIdentifier)), true);
  // 0x38: u32
  if (data?.StatusDataLength !== undefined) view.setUint32(56, Number(data.StatusDataLength), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.StatusData !== undefined) view.setBigUint64(64, data.StatusData === null ? 0n : util.toBigInt(util.toPointer(data.StatusData)), true);
  return buf;
}

export class DEVICE_INTERNAL_STATUS_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get T10VendorId(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u32
  get DataSet1Length(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get DataSet2Length(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get DataSet3Length(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get DataSet4Length(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u8
  get StatusDataVersion(): number {
    return this.view.getUint8(32);
  }

  // 0x21: pad7

  // 0x28: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get ReasonIdentifier(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get StatusDataLength(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get StatusData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set T10VendorId(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u32
  set DataSet1Length(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set DataSet2Length(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set DataSet3Length(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set DataSet4Length(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u8
  set StatusDataVersion(value: number) {
    this.view.setUint8(32, value);
  }

  // 0x21: pad7

  // 0x28: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set ReasonIdentifier(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set StatusDataLength(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set StatusData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * _SanitizeOption_e__Struct (size: 8)
 */
export interface _SanitizeOption_e__Struct {
  /** u32 */
  _bitfield: number;
}

export const sizeof_SanitizeOption_e__Struct = 8;

export function alloc_SanitizeOption_e__Struct(data?: Partial<_SanitizeOption_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_SanitizeOption_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?._bitfield !== undefined) view.setUint32(0, Number(data._bitfield), true);
  // 0x04: pad4
  return buf;
}

export class _SanitizeOption_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get _bitfield(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set _bitfield(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_REINITIALIZE_MEDIA (size: 24)
 */
export interface STORAGE_REINITIALIZE_MEDIA {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  TimeoutInSeconds: number;
  /** _SanitizeOption_e__Struct */
  SanitizeOption: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSTORAGE_REINITIALIZE_MEDIA = 24;

export function allocSTORAGE_REINITIALIZE_MEDIA(data?: Partial<STORAGE_REINITIALIZE_MEDIA>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_REINITIALIZE_MEDIA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.TimeoutInSeconds !== undefined) view.setUint32(8, Number(data.TimeoutInSeconds), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.SanitizeOption !== undefined) view.setBigUint64(16, data.SanitizeOption === null ? 0n : util.toBigInt(util.toPointer(data.SanitizeOption)), true);
  return buf;
}

export class STORAGE_REINITIALIZE_MEDIAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get TimeoutInSeconds(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get SanitizeOption(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set TimeoutInSeconds(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set SanitizeOption(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_MEDIA_SERIAL_NUMBER_DATA (size: 16)
 */
export interface STORAGE_MEDIA_SERIAL_NUMBER_DATA {
  /** u16 */
  Reserved: number;
  /** u16 */
  SerialNumberLength: number;
  /** array */
  SerialNumber: Deno.PointerValue | null;
}

export const sizeofSTORAGE_MEDIA_SERIAL_NUMBER_DATA = 16;

export function allocSTORAGE_MEDIA_SERIAL_NUMBER_DATA(data?: Partial<STORAGE_MEDIA_SERIAL_NUMBER_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_MEDIA_SERIAL_NUMBER_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Reserved !== undefined) view.setUint16(0, Number(data.Reserved), true);
  // 0x02: u16
  if (data?.SerialNumberLength !== undefined) view.setUint16(2, Number(data.SerialNumberLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SerialNumber !== undefined) view.setBigUint64(8, data.SerialNumber === null ? 0n : util.toBigInt(util.toPointer(data.SerialNumber)), true);
  return buf;
}

export class STORAGE_MEDIA_SERIAL_NUMBER_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Reserved(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get SerialNumberLength(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get SerialNumber(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set Reserved(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set SerialNumberLength(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set SerialNumber(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_READ_CAPACITY (size: 32)
 */
export interface STORAGE_READ_CAPACITY {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  BlockLength: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  NumberOfBlocks: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  DiskLength: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSTORAGE_READ_CAPACITY = 32;

export function allocSTORAGE_READ_CAPACITY(data?: Partial<STORAGE_READ_CAPACITY>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_READ_CAPACITY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.BlockLength !== undefined) view.setUint32(8, Number(data.BlockLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.NumberOfBlocks !== undefined) view.setBigUint64(16, data.NumberOfBlocks === null ? 0n : util.toBigInt(util.toPointer(data.NumberOfBlocks)), true);
  // 0x18: pointer
  if (data?.DiskLength !== undefined) view.setBigUint64(24, data.DiskLength === null ? 0n : util.toBigInt(util.toPointer(data.DiskLength)), true);
  return buf;
}

export class STORAGE_READ_CAPACITYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get BlockLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get NumberOfBlocks(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get DiskLength(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set BlockLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set NumberOfBlocks(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set DiskLength(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_WRITE_CACHE_PROPERTY (size: 48)
 */
export interface STORAGE_WRITE_CACHE_PROPERTY {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.System.Ioctl.WRITE_CACHE_TYPE */
  WriteCacheType: WRITE_CACHE_TYPE;
  /** Windows.Win32.System.Ioctl.WRITE_CACHE_ENABLE */
  WriteCacheEnabled: WRITE_CACHE_ENABLE;
  /** Windows.Win32.System.Ioctl.WRITE_CACHE_CHANGE */
  WriteCacheChangeable: WRITE_CACHE_CHANGE;
  /** Windows.Win32.System.Ioctl.WRITE_THROUGH */
  WriteThroughSupported: WRITE_THROUGH;
  /** Windows.Win32.Foundation.BOOLEAN */
  FlushCacheSupported: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  UserDefinedPowerProtection: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  NVCacheEnabled: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSTORAGE_WRITE_CACHE_PROPERTY = 48;

export function allocSTORAGE_WRITE_CACHE_PROPERTY(data?: Partial<STORAGE_WRITE_CACHE_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_WRITE_CACHE_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: i32
  if (data?.WriteCacheType !== undefined) view.setInt32(8, Number(data.WriteCacheType), true);
  // 0x0c: i32
  if (data?.WriteCacheEnabled !== undefined) view.setInt32(12, Number(data.WriteCacheEnabled), true);
  // 0x10: i32
  if (data?.WriteCacheChangeable !== undefined) view.setInt32(16, Number(data.WriteCacheChangeable), true);
  // 0x14: i32
  if (data?.WriteThroughSupported !== undefined) view.setInt32(20, Number(data.WriteThroughSupported), true);
  // 0x18: pointer
  if (data?.FlushCacheSupported !== undefined) view.setBigUint64(24, data.FlushCacheSupported === null ? 0n : util.toBigInt(util.toPointer(data.FlushCacheSupported)), true);
  // 0x20: pointer
  if (data?.UserDefinedPowerProtection !== undefined) view.setBigUint64(32, data.UserDefinedPowerProtection === null ? 0n : util.toBigInt(util.toPointer(data.UserDefinedPowerProtection)), true);
  // 0x28: pointer
  if (data?.NVCacheEnabled !== undefined) view.setBigUint64(40, data.NVCacheEnabled === null ? 0n : util.toBigInt(util.toPointer(data.NVCacheEnabled)), true);
  return buf;
}

export class STORAGE_WRITE_CACHE_PROPERTYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get WriteCacheType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get WriteCacheEnabled(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get WriteCacheChangeable(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get WriteThroughSupported(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: pointer
  get FlushCacheSupported(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get UserDefinedPowerProtection(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get NVCacheEnabled(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set WriteCacheType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set WriteCacheEnabled(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set WriteCacheChangeable(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set WriteThroughSupported(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: pointer
  set FlushCacheSupported(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set UserDefinedPowerProtection(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set NVCacheEnabled(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.PERSISTENT_RESERVE_COMMAND (size: 16)
 */
export interface PERSISTENT_RESERVE_COMMAND {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPERSISTENT_RESERVE_COMMAND = 16;

export function allocPERSISTENT_RESERVE_COMMAND(data?: Partial<PERSISTENT_RESERVE_COMMAND>): Uint8Array {
  const buf = new Uint8Array(sizeofPERSISTENT_RESERVE_COMMAND);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class PERSISTENT_RESERVE_COMMANDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICEDUMP_SUBSECTION_POINTER (size: 16)
 */
export interface DEVICEDUMP_SUBSECTION_POINTER {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwOffset: number;
}

export const sizeofDEVICEDUMP_SUBSECTION_POINTER = 16;

export function allocDEVICEDUMP_SUBSECTION_POINTER(data?: Partial<DEVICEDUMP_SUBSECTION_POINTER>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICEDUMP_SUBSECTION_POINTER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwOffset !== undefined) view.setUint32(8, Number(data.dwOffset), true);
  // 0x0c: pad4
  return buf;
}

export class DEVICEDUMP_SUBSECTION_POINTERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwOffset(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwOffset(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Ioctl.DEVICEDUMP_STRUCTURE_VERSION (size: 16)
 */
export interface DEVICEDUMP_STRUCTURE_VERSION {
  /** u32 */
  dwSignature: number;
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwSize: number;
}

export const sizeofDEVICEDUMP_STRUCTURE_VERSION = 16;

export function allocDEVICEDUMP_STRUCTURE_VERSION(data?: Partial<DEVICEDUMP_STRUCTURE_VERSION>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICEDUMP_STRUCTURE_VERSION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSignature !== undefined) view.setUint32(0, Number(data.dwSignature), true);
  // 0x04: u32
  if (data?.dwVersion !== undefined) view.setUint32(4, Number(data.dwVersion), true);
  // 0x08: u32
  if (data?.dwSize !== undefined) view.setUint32(8, Number(data.dwSize), true);
  // 0x0c: pad4
  return buf;
}

export class DEVICEDUMP_STRUCTURE_VERSIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSignature(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwVersion(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set dwSignature(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwVersion(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Ioctl.DEVICEDUMP_SECTION_HEADER (size: 64)
 */
export interface DEVICEDUMP_SECTION_HEADER {
  /** System.Guid */
  guidDeviceDataId: Uint8Array | Deno.PointerValue | null;
  /** array */
  sOrganizationID: Deno.PointerValue | null;
  /** u32 */
  dwFirmwareRevision: number;
  /** array */
  sModelNumber: Deno.PointerValue | null;
  /** array */
  szDeviceManufacturingID: Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** u32 */
  bRestrictedPrivateDataVersion: number;
  /** u32 */
  dwFirmwareIssueId: number;
  /** array */
  szIssueDescriptionString: Deno.PointerValue | null;
}

export const sizeofDEVICEDUMP_SECTION_HEADER = 64;

export function allocDEVICEDUMP_SECTION_HEADER(data?: Partial<DEVICEDUMP_SECTION_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICEDUMP_SECTION_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guidDeviceDataId !== undefined) view.setBigUint64(0, data.guidDeviceDataId === null ? 0n : util.toBigInt(util.toPointer(data.guidDeviceDataId)), true);
  // 0x08: pointer
  if (data?.sOrganizationID !== undefined) view.setBigUint64(8, data.sOrganizationID === null ? 0n : util.toBigInt(util.toPointer(data.sOrganizationID)), true);
  // 0x10: u32
  if (data?.dwFirmwareRevision !== undefined) view.setUint32(16, Number(data.dwFirmwareRevision), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.sModelNumber !== undefined) view.setBigUint64(24, data.sModelNumber === null ? 0n : util.toBigInt(util.toPointer(data.sModelNumber)), true);
  // 0x20: pointer
  if (data?.szDeviceManufacturingID !== undefined) view.setBigUint64(32, data.szDeviceManufacturingID === null ? 0n : util.toBigInt(util.toPointer(data.szDeviceManufacturingID)), true);
  // 0x28: u32
  if (data?.dwFlags !== undefined) view.setUint32(40, Number(data.dwFlags), true);
  // 0x2c: u32
  if (data?.bRestrictedPrivateDataVersion !== undefined) view.setUint32(44, Number(data.bRestrictedPrivateDataVersion), true);
  // 0x30: u32
  if (data?.dwFirmwareIssueId !== undefined) view.setUint32(48, Number(data.dwFirmwareIssueId), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.szIssueDescriptionString !== undefined) view.setBigUint64(56, data.szIssueDescriptionString === null ? 0n : util.toBigInt(util.toPointer(data.szIssueDescriptionString)), true);
  return buf;
}

export class DEVICEDUMP_SECTION_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get guidDeviceDataId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get sOrganizationID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwFirmwareRevision(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get sModelNumber(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get szDeviceManufacturingID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get dwFlags(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get bRestrictedPrivateDataVersion(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get dwFirmwareIssueId(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get szIssueDescriptionString(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set guidDeviceDataId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set sOrganizationID(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwFirmwareRevision(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set sModelNumber(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set szDeviceManufacturingID(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set dwFlags(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set bRestrictedPrivateDataVersion(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set dwFirmwareIssueId(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set szIssueDescriptionString(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.GP_LOG_PAGE_DESCRIPTOR (size: 8)
 */
export interface GP_LOG_PAGE_DESCRIPTOR {
  /** u16 */
  LogAddress: number;
  /** u16 */
  LogSectors: number;
}

export const sizeofGP_LOG_PAGE_DESCRIPTOR = 8;

export function allocGP_LOG_PAGE_DESCRIPTOR(data?: Partial<GP_LOG_PAGE_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofGP_LOG_PAGE_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.LogAddress !== undefined) view.setUint16(0, Number(data.LogAddress), true);
  // 0x02: u16
  if (data?.LogSectors !== undefined) view.setUint16(2, Number(data.LogSectors), true);
  // 0x04: pad4
  return buf;
}

export class GP_LOG_PAGE_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get LogAddress(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get LogSectors(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u16
  set LogAddress(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set LogSectors(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Ioctl.DEVICEDUMP_PUBLIC_SUBSECTION (size: 32)
 */
export interface DEVICEDUMP_PUBLIC_SUBSECTION {
  /** u32 */
  dwFlags: number;
  /** array */
  GPLogTable: Deno.PointerValue | null;
  /** array */
  szDescription: Deno.PointerValue | null;
  /** array */
  bData: Deno.PointerValue | null;
}

export const sizeofDEVICEDUMP_PUBLIC_SUBSECTION = 32;

export function allocDEVICEDUMP_PUBLIC_SUBSECTION(data?: Partial<DEVICEDUMP_PUBLIC_SUBSECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICEDUMP_PUBLIC_SUBSECTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.GPLogTable !== undefined) view.setBigUint64(8, data.GPLogTable === null ? 0n : util.toBigInt(util.toPointer(data.GPLogTable)), true);
  // 0x10: pointer
  if (data?.szDescription !== undefined) view.setBigUint64(16, data.szDescription === null ? 0n : util.toBigInt(util.toPointer(data.szDescription)), true);
  // 0x18: pointer
  if (data?.bData !== undefined) view.setBigUint64(24, data.bData === null ? 0n : util.toBigInt(util.toPointer(data.bData)), true);
  return buf;
}

export class DEVICEDUMP_PUBLIC_SUBSECTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get GPLogTable(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get szDescription(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get bData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set GPLogTable(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set szDescription(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set bData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICEDUMP_RESTRICTED_SUBSECTION (size: 8)
 */
export interface DEVICEDUMP_RESTRICTED_SUBSECTION {
  /** array */
  bData: Deno.PointerValue | null;
}

export const sizeofDEVICEDUMP_RESTRICTED_SUBSECTION = 8;

export function allocDEVICEDUMP_RESTRICTED_SUBSECTION(data?: Partial<DEVICEDUMP_RESTRICTED_SUBSECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICEDUMP_RESTRICTED_SUBSECTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.bData !== undefined) view.setBigUint64(0, data.bData === null ? 0n : util.toBigInt(util.toPointer(data.bData)), true);
  return buf;
}

export class DEVICEDUMP_RESTRICTED_SUBSECTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get bData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set bData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICEDUMP_PRIVATE_SUBSECTION (size: 24)
 */
export interface DEVICEDUMP_PRIVATE_SUBSECTION {
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.System.Ioctl.GP_LOG_PAGE_DESCRIPTOR */
  GPLogId: Uint8Array | Deno.PointerValue | null;
  /** array */
  bData: Deno.PointerValue | null;
}

export const sizeofDEVICEDUMP_PRIVATE_SUBSECTION = 24;

export function allocDEVICEDUMP_PRIVATE_SUBSECTION(data?: Partial<DEVICEDUMP_PRIVATE_SUBSECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICEDUMP_PRIVATE_SUBSECTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.GPLogId !== undefined) view.setBigUint64(8, data.GPLogId === null ? 0n : util.toBigInt(util.toPointer(data.GPLogId)), true);
  // 0x10: pointer
  if (data?.bData !== undefined) view.setBigUint64(16, data.bData === null ? 0n : util.toBigInt(util.toPointer(data.bData)), true);
  return buf;
}

export class DEVICEDUMP_PRIVATE_SUBSECTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get GPLogId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get bData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set GPLogId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set bData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICEDUMP_STORAGEDEVICE_DATA (size: 48)
 */
export interface DEVICEDUMP_STORAGEDEVICE_DATA {
  /** Windows.Win32.System.Ioctl.DEVICEDUMP_STRUCTURE_VERSION */
  Descriptor: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Ioctl.DEVICEDUMP_SECTION_HEADER */
  SectionHeader: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwBufferSize: number;
  /** u32 */
  dwReasonForCollection: number;
  /** Windows.Win32.System.Ioctl.DEVICEDUMP_SUBSECTION_POINTER */
  PublicData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Ioctl.DEVICEDUMP_SUBSECTION_POINTER */
  RestrictedData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Ioctl.DEVICEDUMP_SUBSECTION_POINTER */
  PrivateData: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDEVICEDUMP_STORAGEDEVICE_DATA = 48;

export function allocDEVICEDUMP_STORAGEDEVICE_DATA(data?: Partial<DEVICEDUMP_STORAGEDEVICE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICEDUMP_STORAGEDEVICE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Descriptor !== undefined) view.setBigUint64(0, data.Descriptor === null ? 0n : util.toBigInt(util.toPointer(data.Descriptor)), true);
  // 0x08: pointer
  if (data?.SectionHeader !== undefined) view.setBigUint64(8, data.SectionHeader === null ? 0n : util.toBigInt(util.toPointer(data.SectionHeader)), true);
  // 0x10: u32
  if (data?.dwBufferSize !== undefined) view.setUint32(16, Number(data.dwBufferSize), true);
  // 0x14: u32
  if (data?.dwReasonForCollection !== undefined) view.setUint32(20, Number(data.dwReasonForCollection), true);
  // 0x18: pointer
  if (data?.PublicData !== undefined) view.setBigUint64(24, data.PublicData === null ? 0n : util.toBigInt(util.toPointer(data.PublicData)), true);
  // 0x20: pointer
  if (data?.RestrictedData !== undefined) view.setBigUint64(32, data.RestrictedData === null ? 0n : util.toBigInt(util.toPointer(data.RestrictedData)), true);
  // 0x28: pointer
  if (data?.PrivateData !== undefined) view.setBigUint64(40, data.PrivateData === null ? 0n : util.toBigInt(util.toPointer(data.PrivateData)), true);
  return buf;
}

export class DEVICEDUMP_STORAGEDEVICE_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Descriptor(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get SectionHeader(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwBufferSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwReasonForCollection(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get PublicData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get RestrictedData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get PrivateData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Descriptor(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set SectionHeader(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwBufferSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwReasonForCollection(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set PublicData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set RestrictedData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set PrivateData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * _ExternalStack_e__Struct (size: 8)
 */
export interface _ExternalStack_e__Struct {
  /** u32 */
  dwReserved: number;
}

export const sizeof_ExternalStack_e__Struct = 8;

export function alloc_ExternalStack_e__Struct(data?: Partial<_ExternalStack_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_ExternalStack_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwReserved !== undefined) view.setUint32(0, Number(data.dwReserved), true);
  // 0x04: pad4
  return buf;
}

export class _ExternalStack_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwReserved(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set dwReserved(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * _AtaPort_e__Struct (size: 8)
 */
export interface _AtaPort_e__Struct {
  /** u32 */
  dwAtaPortSpecific: number;
}

export const sizeof_AtaPort_e__Struct = 8;

export function alloc_AtaPort_e__Struct(data?: Partial<_AtaPort_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_AtaPort_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwAtaPortSpecific !== undefined) view.setUint32(0, Number(data.dwAtaPortSpecific), true);
  // 0x04: pad4
  return buf;
}

export class _AtaPort_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwAtaPortSpecific(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set dwAtaPortSpecific(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * _StorPort_e__Struct (size: 8)
 */
export interface _StorPort_e__Struct {
  /** u32 */
  SrbTag: number;
}

export const sizeof_StorPort_e__Struct = 8;

export function alloc_StorPort_e__Struct(data?: Partial<_StorPort_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_StorPort_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SrbTag !== undefined) view.setUint32(0, Number(data.SrbTag), true);
  // 0x04: pad4
  return buf;
}

export class _StorPort_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SrbTag(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set SrbTag(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * _StackSpecific_e__Union (size: 24)
 */
export interface _StackSpecific_e__Union {
  /** _ExternalStack_e__Struct */
  ExternalStack: Uint8Array | Deno.PointerValue | null;
  /** _AtaPort_e__Struct */
  AtaPort: Uint8Array | Deno.PointerValue | null;
  /** _StorPort_e__Struct */
  StorPort: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_StackSpecific_e__Union = 24;

export function alloc_StackSpecific_e__Union(data?: Partial<_StackSpecific_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_StackSpecific_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExternalStack !== undefined) view.setBigUint64(0, data.ExternalStack === null ? 0n : util.toBigInt(util.toPointer(data.ExternalStack)), true);
  // 0x08: pointer
  if (data?.AtaPort !== undefined) view.setBigUint64(8, data.AtaPort === null ? 0n : util.toBigInt(util.toPointer(data.AtaPort)), true);
  // 0x10: pointer
  if (data?.StorPort !== undefined) view.setBigUint64(16, data.StorPort === null ? 0n : util.toBigInt(util.toPointer(data.StorPort)), true);
  return buf;
}

export class _StackSpecific_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ExternalStack(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get AtaPort(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get StorPort(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ExternalStack(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set AtaPort(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set StorPort(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD (size: 48)
 */
export interface DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD {
  /** array */
  Cdb: Deno.PointerValue | null;
  /** array */
  Command: Deno.PointerValue | null;
  /** u64 */
  StartTime: number | bigint;
  /** u64 */
  EndTime: number | bigint;
  /** u32 */
  OperationStatus: number;
  /** u32 */
  OperationError: number;
  /** _StackSpecific_e__Union */
  StackSpecific: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD = 48;

export function allocDEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD(data?: Partial<DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Cdb !== undefined) view.setBigUint64(0, data.Cdb === null ? 0n : util.toBigInt(util.toPointer(data.Cdb)), true);
  // 0x08: pointer
  if (data?.Command !== undefined) view.setBigUint64(8, data.Command === null ? 0n : util.toBigInt(util.toPointer(data.Command)), true);
  // 0x10: u64
  if (data?.StartTime !== undefined) view.setBigUint64(16, util.toBigInt(data.StartTime), true);
  // 0x18: u64
  if (data?.EndTime !== undefined) view.setBigUint64(24, util.toBigInt(data.EndTime), true);
  // 0x20: u32
  if (data?.OperationStatus !== undefined) view.setUint32(32, Number(data.OperationStatus), true);
  // 0x24: u32
  if (data?.OperationError !== undefined) view.setUint32(36, Number(data.OperationError), true);
  // 0x28: pointer
  if (data?.StackSpecific !== undefined) view.setBigUint64(40, data.StackSpecific === null ? 0n : util.toBigInt(util.toPointer(data.StackSpecific)), true);
  return buf;
}

export class DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Cdb(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Command(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u64
  get StartTime(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get EndTime(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u32
  get OperationStatus(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get OperationError(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get StackSpecific(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Cdb(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Command(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u64
  set StartTime(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set EndTime(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u32
  set OperationStatus(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set OperationError(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set StackSpecific(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP (size: 40)
 */
export interface DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP {
  /** Windows.Win32.System.Ioctl.DEVICEDUMP_STRUCTURE_VERSION */
  Descriptor: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwReasonForCollection: number;
  /** array */
  cDriverName: Deno.PointerValue | null;
  /** u32 */
  uiNumRecords: number;
  /** array */
  RecordArray: Deno.PointerValue | null;
}

export const sizeofDEVICEDUMP_STORAGESTACK_PUBLIC_DUMP = 40;

export function allocDEVICEDUMP_STORAGESTACK_PUBLIC_DUMP(data?: Partial<DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICEDUMP_STORAGESTACK_PUBLIC_DUMP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Descriptor !== undefined) view.setBigUint64(0, data.Descriptor === null ? 0n : util.toBigInt(util.toPointer(data.Descriptor)), true);
  // 0x08: u32
  if (data?.dwReasonForCollection !== undefined) view.setUint32(8, Number(data.dwReasonForCollection), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.cDriverName !== undefined) view.setBigUint64(16, data.cDriverName === null ? 0n : util.toBigInt(util.toPointer(data.cDriverName)), true);
  // 0x18: u32
  if (data?.uiNumRecords !== undefined) view.setUint32(24, Number(data.uiNumRecords), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.RecordArray !== undefined) view.setBigUint64(32, data.RecordArray === null ? 0n : util.toBigInt(util.toPointer(data.RecordArray)), true);
  return buf;
}

export class DEVICEDUMP_STORAGESTACK_PUBLIC_DUMPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Descriptor(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwReasonForCollection(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get cDriverName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get uiNumRecords(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get RecordArray(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Descriptor(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set dwReasonForCollection(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set cDriverName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set uiNumRecords(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set RecordArray(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_IDLE_POWER (size: 16)
 */
export interface STORAGE_IDLE_POWER {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  _bitfield: number;
  /** u32 */
  D3IdleTimeout: number;
}

export const sizeofSTORAGE_IDLE_POWER = 16;

export function allocSTORAGE_IDLE_POWER(data?: Partial<STORAGE_IDLE_POWER>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_IDLE_POWER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?._bitfield !== undefined) view.setUint32(8, Number(data._bitfield), true);
  // 0x0c: u32
  if (data?.D3IdleTimeout !== undefined) view.setUint32(12, Number(data.D3IdleTimeout), true);
  return buf;
}

export class STORAGE_IDLE_POWERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get _bitfield(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get D3IdleTimeout(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set _bitfield(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set D3IdleTimeout(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_IDLE_POWERUP_REASON (size: 16)
 */
export interface STORAGE_IDLE_POWERUP_REASON {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.System.Ioctl.STORAGE_POWERUP_REASON_TYPE */
  PowerupReason: STORAGE_POWERUP_REASON_TYPE;
}

export const sizeofSTORAGE_IDLE_POWERUP_REASON = 16;

export function allocSTORAGE_IDLE_POWERUP_REASON(data?: Partial<STORAGE_IDLE_POWERUP_REASON>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_IDLE_POWERUP_REASON);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: i32
  if (data?.PowerupReason !== undefined) view.setInt32(8, Number(data.PowerupReason), true);
  // 0x0c: pad4
  return buf;
}

export class STORAGE_IDLE_POWERUP_REASONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get PowerupReason(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set PowerupReason(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_DEVICE_POWER_CAP (size: 24)
 */
export interface STORAGE_DEVICE_POWER_CAP {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.System.Ioctl.STORAGE_DEVICE_POWER_CAP_UNITS */
  Units: STORAGE_DEVICE_POWER_CAP_UNITS;
  /** u64 */
  MaxPower: number | bigint;
}

export const sizeofSTORAGE_DEVICE_POWER_CAP = 24;

export function allocSTORAGE_DEVICE_POWER_CAP(data?: Partial<STORAGE_DEVICE_POWER_CAP>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_DEVICE_POWER_CAP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: i32
  if (data?.Units !== undefined) view.setInt32(8, Number(data.Units), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.MaxPower !== undefined) view.setBigUint64(16, util.toBigInt(data.MaxPower), true);
  return buf;
}

export class STORAGE_DEVICE_POWER_CAPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get Units(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: u64
  get MaxPower(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set Units(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: u64
  set MaxPower(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_RPMB_DATA_FRAME (size: 72)
 */
export interface STORAGE_RPMB_DATA_FRAME {
  /** array */
  Stuff: Deno.PointerValue | null;
  /** array */
  KeyOrMAC: Deno.PointerValue | null;
  /** array */
  Data: Deno.PointerValue | null;
  /** array */
  Nonce: Deno.PointerValue | null;
  /** array */
  WriteCounter: Deno.PointerValue | null;
  /** array */
  Address: Deno.PointerValue | null;
  /** array */
  BlockCount: Deno.PointerValue | null;
  /** array */
  OperationResult: Deno.PointerValue | null;
  /** array */
  RequestOrResponseType: Deno.PointerValue | null;
}

export const sizeofSTORAGE_RPMB_DATA_FRAME = 72;

export function allocSTORAGE_RPMB_DATA_FRAME(data?: Partial<STORAGE_RPMB_DATA_FRAME>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_RPMB_DATA_FRAME);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Stuff !== undefined) view.setBigUint64(0, data.Stuff === null ? 0n : util.toBigInt(util.toPointer(data.Stuff)), true);
  // 0x08: pointer
  if (data?.KeyOrMAC !== undefined) view.setBigUint64(8, data.KeyOrMAC === null ? 0n : util.toBigInt(util.toPointer(data.KeyOrMAC)), true);
  // 0x10: pointer
  if (data?.Data !== undefined) view.setBigUint64(16, data.Data === null ? 0n : util.toBigInt(util.toPointer(data.Data)), true);
  // 0x18: pointer
  if (data?.Nonce !== undefined) view.setBigUint64(24, data.Nonce === null ? 0n : util.toBigInt(util.toPointer(data.Nonce)), true);
  // 0x20: pointer
  if (data?.WriteCounter !== undefined) view.setBigUint64(32, data.WriteCounter === null ? 0n : util.toBigInt(util.toPointer(data.WriteCounter)), true);
  // 0x28: pointer
  if (data?.Address !== undefined) view.setBigUint64(40, data.Address === null ? 0n : util.toBigInt(util.toPointer(data.Address)), true);
  // 0x30: pointer
  if (data?.BlockCount !== undefined) view.setBigUint64(48, data.BlockCount === null ? 0n : util.toBigInt(util.toPointer(data.BlockCount)), true);
  // 0x38: pointer
  if (data?.OperationResult !== undefined) view.setBigUint64(56, data.OperationResult === null ? 0n : util.toBigInt(util.toPointer(data.OperationResult)), true);
  // 0x40: pointer
  if (data?.RequestOrResponseType !== undefined) view.setBigUint64(64, data.RequestOrResponseType === null ? 0n : util.toBigInt(util.toPointer(data.RequestOrResponseType)), true);
  return buf;
}

export class STORAGE_RPMB_DATA_FRAMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Stuff(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get KeyOrMAC(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Data(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Nonce(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get WriteCounter(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get Address(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get BlockCount(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get OperationResult(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get RequestOrResponseType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Stuff(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set KeyOrMAC(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Data(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Nonce(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set WriteCounter(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set Address(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set BlockCount(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set OperationResult(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set RequestOrResponseType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_EVENT_NOTIFICATION (size: 16)
 */
export interface STORAGE_EVENT_NOTIFICATION {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u64 */
  Events: number | bigint;
}

export const sizeofSTORAGE_EVENT_NOTIFICATION = 16;

export function allocSTORAGE_EVENT_NOTIFICATION(data?: Partial<STORAGE_EVENT_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_EVENT_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u64
  if (data?.Events !== undefined) view.setBigUint64(8, util.toBigInt(data.Events), true);
  return buf;
}

export class STORAGE_EVENT_NOTIFICATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get Events(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set Events(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * _Value_e__Union (size: 16)
 */
export interface _Value_e__Union {
  /** u16 */
  ShortUuid: number;
  /** System.Guid */
  LongUuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Value_e__Union = 16;

export function alloc_Value_e__Union(data?: Partial<_Value_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Value_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ShortUuid !== undefined) view.setUint16(0, Number(data.ShortUuid), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.LongUuid !== undefined) view.setBigUint64(8, data.LongUuid === null ? 0n : util.toBigInt(util.toPointer(data.LongUuid)), true);
  return buf;
}

export class _Value_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get ShortUuid(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get LongUuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set ShortUuid(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set LongUuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_COUNTER (size: 16)
 */
export interface STORAGE_COUNTER {
  /** Windows.Win32.System.Ioctl.STORAGE_COUNTER_TYPE */
  Type: STORAGE_COUNTER_TYPE;
  /** _Value_e__Union */
  Value: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSTORAGE_COUNTER = 16;

export function allocSTORAGE_COUNTER(data?: Partial<STORAGE_COUNTER>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_COUNTER);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Value !== undefined) view.setBigUint64(8, data.Value === null ? 0n : util.toBigInt(util.toPointer(data.Value)), true);
  return buf;
}

export class STORAGE_COUNTERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Value(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Value(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_COUNTERS (size: 24)
 */
export interface STORAGE_COUNTERS {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  NumberOfCounters: number;
  /** array */
  Counters: Deno.PointerValue | null;
}

export const sizeofSTORAGE_COUNTERS = 24;

export function allocSTORAGE_COUNTERS(data?: Partial<STORAGE_COUNTERS>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_COUNTERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.NumberOfCounters !== undefined) view.setUint32(8, Number(data.NumberOfCounters), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Counters !== undefined) view.setBigUint64(16, data.Counters === null ? 0n : util.toBigInt(util.toPointer(data.Counters)), true);
  return buf;
}

export class STORAGE_COUNTERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get NumberOfCounters(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Counters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set NumberOfCounters(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Counters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_HW_FIRMWARE_INFO_QUERY (size: 16)
 */
export interface STORAGE_HW_FIRMWARE_INFO_QUERY {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Reserved: number;
}

export const sizeofSTORAGE_HW_FIRMWARE_INFO_QUERY = 16;

export function allocSTORAGE_HW_FIRMWARE_INFO_QUERY(data?: Partial<STORAGE_HW_FIRMWARE_INFO_QUERY>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_HW_FIRMWARE_INFO_QUERY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

export class STORAGE_HW_FIRMWARE_INFO_QUERYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Reserved(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Reserved(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_HW_FIRMWARE_SLOT_INFO (size: 32)
 */
export interface STORAGE_HW_FIRMWARE_SLOT_INFO {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u8 */
  SlotNumber: number;
  /** u8 */
  _bitfield: number;
  /** array */
  Reserved1: Deno.PointerValue | null;
  /** array */
  Revision: Deno.PointerValue | null;
}

export const sizeofSTORAGE_HW_FIRMWARE_SLOT_INFO = 32;

export function allocSTORAGE_HW_FIRMWARE_SLOT_INFO(data?: Partial<STORAGE_HW_FIRMWARE_SLOT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_HW_FIRMWARE_SLOT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u8
  if (data?.SlotNumber !== undefined) view.setUint8(8, Number(data.SlotNumber));
  // 0x09: u8
  if (data?._bitfield !== undefined) view.setUint8(9, Number(data._bitfield));
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(16, data.Reserved1 === null ? 0n : util.toBigInt(util.toPointer(data.Reserved1)), true);
  // 0x18: pointer
  if (data?.Revision !== undefined) view.setBigUint64(24, data.Revision === null ? 0n : util.toBigInt(util.toPointer(data.Revision)), true);
  return buf;
}

export class STORAGE_HW_FIRMWARE_SLOT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u8
  get SlotNumber(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get _bitfield(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x10: pointer
  get Reserved1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Revision(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u8
  set SlotNumber(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set _bitfield(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6

  // 0x10: pointer
  set Reserved1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Revision(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_HW_FIRMWARE_INFO (size: 48)
 */
export interface STORAGE_HW_FIRMWARE_INFO {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u8 */
  _bitfield: number;
  /** u8 */
  SlotCount: number;
  /** u8 */
  ActiveSlot: number;
  /** u8 */
  PendingActivateSlot: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  FirmwareShared: Uint8Array | Deno.PointerValue | null;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** u32 */
  ImagePayloadAlignment: number;
  /** u32 */
  ImagePayloadMaxSize: number;
  /** array */
  Slot: Deno.PointerValue | null;
}

export const sizeofSTORAGE_HW_FIRMWARE_INFO = 48;

export function allocSTORAGE_HW_FIRMWARE_INFO(data?: Partial<STORAGE_HW_FIRMWARE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_HW_FIRMWARE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u8
  if (data?._bitfield !== undefined) view.setUint8(8, Number(data._bitfield));
  // 0x09: u8
  if (data?.SlotCount !== undefined) view.setUint8(9, Number(data.SlotCount));
  // 0x0a: u8
  if (data?.ActiveSlot !== undefined) view.setUint8(10, Number(data.ActiveSlot));
  // 0x0b: u8
  if (data?.PendingActivateSlot !== undefined) view.setUint8(11, Number(data.PendingActivateSlot));
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.FirmwareShared !== undefined) view.setBigUint64(16, data.FirmwareShared === null ? 0n : util.toBigInt(util.toPointer(data.FirmwareShared)), true);
  // 0x18: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(24, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  // 0x20: u32
  if (data?.ImagePayloadAlignment !== undefined) view.setUint32(32, Number(data.ImagePayloadAlignment), true);
  // 0x24: u32
  if (data?.ImagePayloadMaxSize !== undefined) view.setUint32(36, Number(data.ImagePayloadMaxSize), true);
  // 0x28: pointer
  if (data?.Slot !== undefined) view.setBigUint64(40, data.Slot === null ? 0n : util.toBigInt(util.toPointer(data.Slot)), true);
  return buf;
}

export class STORAGE_HW_FIRMWARE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u8
  get _bitfield(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get SlotCount(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: u8
  get ActiveSlot(): number {
    return this.view.getUint8(10);
  }

  // 0x0b: u8
  get PendingActivateSlot(): number {
    return this.view.getUint8(11);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get FirmwareShared(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get ImagePayloadAlignment(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get ImagePayloadMaxSize(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get Slot(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u8
  set _bitfield(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set SlotCount(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: u8
  set ActiveSlot(value: number) {
    this.view.setUint8(10, value);
  }

  // 0x0b: u8
  set PendingActivateSlot(value: number) {
    this.view.setUint8(11, value);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set FirmwareShared(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set ImagePayloadAlignment(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set ImagePayloadMaxSize(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set Slot(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_HW_FIRMWARE_DOWNLOAD (size: 48)
 */
export interface STORAGE_HW_FIRMWARE_DOWNLOAD {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
  /** u8 */
  Slot: number;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** u64 */
  Offset: number | bigint;
  /** u64 */
  BufferSize: number | bigint;
  /** array */
  ImageBuffer: Deno.PointerValue | null;
}

export const sizeofSTORAGE_HW_FIRMWARE_DOWNLOAD = 48;

export function allocSTORAGE_HW_FIRMWARE_DOWNLOAD(data?: Partial<STORAGE_HW_FIRMWARE_DOWNLOAD>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_HW_FIRMWARE_DOWNLOAD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u8
  if (data?.Slot !== undefined) view.setUint8(12, Number(data.Slot));
  // 0x0d: pad3
  // 0x10: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(16, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  // 0x18: u64
  if (data?.Offset !== undefined) view.setBigUint64(24, util.toBigInt(data.Offset), true);
  // 0x20: u64
  if (data?.BufferSize !== undefined) view.setBigUint64(32, util.toBigInt(data.BufferSize), true);
  // 0x28: pointer
  if (data?.ImageBuffer !== undefined) view.setBigUint64(40, data.ImageBuffer === null ? 0n : util.toBigInt(util.toPointer(data.ImageBuffer)), true);
  return buf;
}

export class STORAGE_HW_FIRMWARE_DOWNLOADView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u8
  get Slot(): number {
    return this.view.getUint8(12);
  }

  // 0x0d: pad3

  // 0x10: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u64
  get Offset(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u64
  get BufferSize(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: pointer
  get ImageBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u8
  set Slot(value: number) {
    this.view.setUint8(12, value);
  }

  // 0x0d: pad3

  // 0x10: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u64
  set Offset(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u64
  set BufferSize(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: pointer
  set ImageBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_HW_FIRMWARE_DOWNLOAD_V2 (size: 56)
 */
export interface STORAGE_HW_FIRMWARE_DOWNLOAD_V2 {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
  /** u8 */
  Slot: number;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** u64 */
  Offset: number | bigint;
  /** u64 */
  BufferSize: number | bigint;
  /** u32 */
  ImageSize: number;
  /** u32 */
  Reserved2: number;
  /** array */
  ImageBuffer: Deno.PointerValue | null;
}

export const sizeofSTORAGE_HW_FIRMWARE_DOWNLOAD_V2 = 56;

export function allocSTORAGE_HW_FIRMWARE_DOWNLOAD_V2(data?: Partial<STORAGE_HW_FIRMWARE_DOWNLOAD_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_HW_FIRMWARE_DOWNLOAD_V2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u8
  if (data?.Slot !== undefined) view.setUint8(12, Number(data.Slot));
  // 0x0d: pad3
  // 0x10: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(16, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  // 0x18: u64
  if (data?.Offset !== undefined) view.setBigUint64(24, util.toBigInt(data.Offset), true);
  // 0x20: u64
  if (data?.BufferSize !== undefined) view.setBigUint64(32, util.toBigInt(data.BufferSize), true);
  // 0x28: u32
  if (data?.ImageSize !== undefined) view.setUint32(40, Number(data.ImageSize), true);
  // 0x2c: u32
  if (data?.Reserved2 !== undefined) view.setUint32(44, Number(data.Reserved2), true);
  // 0x30: pointer
  if (data?.ImageBuffer !== undefined) view.setBigUint64(48, data.ImageBuffer === null ? 0n : util.toBigInt(util.toPointer(data.ImageBuffer)), true);
  return buf;
}

export class STORAGE_HW_FIRMWARE_DOWNLOAD_V2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u8
  get Slot(): number {
    return this.view.getUint8(12);
  }

  // 0x0d: pad3

  // 0x10: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u64
  get Offset(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u64
  get BufferSize(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: u32
  get ImageSize(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get Reserved2(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: pointer
  get ImageBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u8
  set Slot(value: number) {
    this.view.setUint8(12, value);
  }

  // 0x0d: pad3

  // 0x10: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u64
  set Offset(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u64
  set BufferSize(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: u32
  set ImageSize(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set Reserved2(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: pointer
  set ImageBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_HW_FIRMWARE_ACTIVATE (size: 24)
 */
export interface STORAGE_HW_FIRMWARE_ACTIVATE {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
  /** u8 */
  Slot: number;
  /** array */
  Reserved0: Deno.PointerValue | null;
}

export const sizeofSTORAGE_HW_FIRMWARE_ACTIVATE = 24;

export function allocSTORAGE_HW_FIRMWARE_ACTIVATE(data?: Partial<STORAGE_HW_FIRMWARE_ACTIVATE>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_HW_FIRMWARE_ACTIVATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u8
  if (data?.Slot !== undefined) view.setUint8(12, Number(data.Slot));
  // 0x0d: pad3
  // 0x10: pointer
  if (data?.Reserved0 !== undefined) view.setBigUint64(16, data.Reserved0 === null ? 0n : util.toBigInt(util.toPointer(data.Reserved0)), true);
  return buf;
}

export class STORAGE_HW_FIRMWARE_ACTIVATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u8
  get Slot(): number {
    return this.view.getUint8(12);
  }

  // 0x0d: pad3

  // 0x10: pointer
  get Reserved0(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u8
  set Slot(value: number) {
    this.view.setUint8(12, value);
  }

  // 0x0d: pad3

  // 0x10: pointer
  set Reserved0(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_PROTOCOL_COMMAND (size: 88)
 */
export interface STORAGE_PROTOCOL_COMMAND {
  /** u32 */
  Version: number;
  /** u32 */
  Length: number;
  /** Windows.Win32.System.Ioctl.STORAGE_PROTOCOL_TYPE */
  ProtocolType: STORAGE_PROTOCOL_TYPE;
  /** u32 */
  Flags: number;
  /** u32 */
  ReturnStatus: number;
  /** u32 */
  ErrorCode: number;
  /** u32 */
  CommandLength: number;
  /** u32 */
  ErrorInfoLength: number;
  /** u32 */
  DataToDeviceTransferLength: number;
  /** u32 */
  DataFromDeviceTransferLength: number;
  /** u32 */
  TimeOutValue: number;
  /** u32 */
  ErrorInfoOffset: number;
  /** u32 */
  DataToDeviceBufferOffset: number;
  /** u32 */
  DataFromDeviceBufferOffset: number;
  /** u32 */
  CommandSpecific: number;
  /** u32 */
  Reserved0: number;
  /** u32 */
  FixedProtocolReturnData: number;
  /** array */
  Reserved1: Deno.PointerValue | null;
  /** array */
  Command: Deno.PointerValue | null;
}

export const sizeofSTORAGE_PROTOCOL_COMMAND = 88;

export function allocSTORAGE_PROTOCOL_COMMAND(data?: Partial<STORAGE_PROTOCOL_COMMAND>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_PROTOCOL_COMMAND);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Length !== undefined) view.setUint32(4, Number(data.Length), true);
  // 0x08: i32
  if (data?.ProtocolType !== undefined) view.setInt32(8, Number(data.ProtocolType), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.ReturnStatus !== undefined) view.setUint32(16, Number(data.ReturnStatus), true);
  // 0x14: u32
  if (data?.ErrorCode !== undefined) view.setUint32(20, Number(data.ErrorCode), true);
  // 0x18: u32
  if (data?.CommandLength !== undefined) view.setUint32(24, Number(data.CommandLength), true);
  // 0x1c: u32
  if (data?.ErrorInfoLength !== undefined) view.setUint32(28, Number(data.ErrorInfoLength), true);
  // 0x20: u32
  if (data?.DataToDeviceTransferLength !== undefined) view.setUint32(32, Number(data.DataToDeviceTransferLength), true);
  // 0x24: u32
  if (data?.DataFromDeviceTransferLength !== undefined) view.setUint32(36, Number(data.DataFromDeviceTransferLength), true);
  // 0x28: u32
  if (data?.TimeOutValue !== undefined) view.setUint32(40, Number(data.TimeOutValue), true);
  // 0x2c: u32
  if (data?.ErrorInfoOffset !== undefined) view.setUint32(44, Number(data.ErrorInfoOffset), true);
  // 0x30: u32
  if (data?.DataToDeviceBufferOffset !== undefined) view.setUint32(48, Number(data.DataToDeviceBufferOffset), true);
  // 0x34: u32
  if (data?.DataFromDeviceBufferOffset !== undefined) view.setUint32(52, Number(data.DataFromDeviceBufferOffset), true);
  // 0x38: u32
  if (data?.CommandSpecific !== undefined) view.setUint32(56, Number(data.CommandSpecific), true);
  // 0x3c: u32
  if (data?.Reserved0 !== undefined) view.setUint32(60, Number(data.Reserved0), true);
  // 0x40: u32
  if (data?.FixedProtocolReturnData !== undefined) view.setUint32(64, Number(data.FixedProtocolReturnData), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(72, data.Reserved1 === null ? 0n : util.toBigInt(util.toPointer(data.Reserved1)), true);
  // 0x50: pointer
  if (data?.Command !== undefined) view.setBigUint64(80, data.Command === null ? 0n : util.toBigInt(util.toPointer(data.Command)), true);
  return buf;
}

export class STORAGE_PROTOCOL_COMMANDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Length(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get ProtocolType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get Flags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ReturnStatus(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ErrorCode(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get CommandLength(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get ErrorInfoLength(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get DataToDeviceTransferLength(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get DataFromDeviceTransferLength(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get TimeOutValue(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get ErrorInfoOffset(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get DataToDeviceBufferOffset(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get DataFromDeviceBufferOffset(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get CommandSpecific(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get Reserved0(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get FixedProtocolReturnData(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  get Reserved1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get Command(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Length(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set ProtocolType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set Flags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ReturnStatus(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ErrorCode(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set CommandLength(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set ErrorInfoLength(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set DataToDeviceTransferLength(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set DataFromDeviceTransferLength(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set TimeOutValue(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set ErrorInfoOffset(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set DataToDeviceBufferOffset(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set DataFromDeviceBufferOffset(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set CommandSpecific(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set Reserved0(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set FixedProtocolReturnData(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  set Reserved1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set Command(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_ATTRIBUTE_MGMT (size: 16)
 */
export interface STORAGE_ATTRIBUTE_MGMT {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.System.Ioctl.STORAGE_ATTRIBUTE_MGMT_ACTION */
  Action: STORAGE_ATTRIBUTE_MGMT_ACTION;
  /** u32 */
  Attribute: number;
}

export const sizeofSTORAGE_ATTRIBUTE_MGMT = 16;

export function allocSTORAGE_ATTRIBUTE_MGMT(data?: Partial<STORAGE_ATTRIBUTE_MGMT>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_ATTRIBUTE_MGMT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: i32
  if (data?.Action !== undefined) view.setInt32(8, Number(data.Action), true);
  // 0x0c: u32
  if (data?.Attribute !== undefined) view.setUint32(12, Number(data.Attribute), true);
  return buf;
}

export class STORAGE_ATTRIBUTE_MGMTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get Action(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get Attribute(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set Action(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set Attribute(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SCM_PD_HEALTH_NOTIFICATION_DATA (size: 8)
 */
export interface SCM_PD_HEALTH_NOTIFICATION_DATA {
  /** System.Guid */
  DeviceGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSCM_PD_HEALTH_NOTIFICATION_DATA = 8;

export function allocSCM_PD_HEALTH_NOTIFICATION_DATA(data?: Partial<SCM_PD_HEALTH_NOTIFICATION_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSCM_PD_HEALTH_NOTIFICATION_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DeviceGuid !== undefined) view.setBigUint64(0, data.DeviceGuid === null ? 0n : util.toBigInt(util.toPointer(data.DeviceGuid)), true);
  return buf;
}

export class SCM_PD_HEALTH_NOTIFICATION_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DeviceGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set DeviceGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SCM_LOGICAL_DEVICE_INSTANCE (size: 24)
 */
export interface SCM_LOGICAL_DEVICE_INSTANCE {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** System.Guid */
  DeviceGuid: Uint8Array | Deno.PointerValue | null;
  /** array */
  SymbolicLink: Deno.PointerValue | null;
}

export const sizeofSCM_LOGICAL_DEVICE_INSTANCE = 24;

export function allocSCM_LOGICAL_DEVICE_INSTANCE(data?: Partial<SCM_LOGICAL_DEVICE_INSTANCE>): Uint8Array {
  const buf = new Uint8Array(sizeofSCM_LOGICAL_DEVICE_INSTANCE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: pointer
  if (data?.DeviceGuid !== undefined) view.setBigUint64(8, data.DeviceGuid === null ? 0n : util.toBigInt(util.toPointer(data.DeviceGuid)), true);
  // 0x10: pointer
  if (data?.SymbolicLink !== undefined) view.setBigUint64(16, data.SymbolicLink === null ? 0n : util.toBigInt(util.toPointer(data.SymbolicLink)), true);
  return buf;
}

export class SCM_LOGICAL_DEVICE_INSTANCEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get DeviceGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get SymbolicLink(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set DeviceGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set SymbolicLink(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SCM_LOGICAL_DEVICES (size: 24)
 */
export interface SCM_LOGICAL_DEVICES {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  DeviceCount: number;
  /** array */
  Devices: Deno.PointerValue | null;
}

export const sizeofSCM_LOGICAL_DEVICES = 24;

export function allocSCM_LOGICAL_DEVICES(data?: Partial<SCM_LOGICAL_DEVICES>): Uint8Array {
  const buf = new Uint8Array(sizeofSCM_LOGICAL_DEVICES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.DeviceCount !== undefined) view.setUint32(8, Number(data.DeviceCount), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Devices !== undefined) view.setBigUint64(16, data.Devices === null ? 0n : util.toBigInt(util.toPointer(data.Devices)), true);
  return buf;
}

export class SCM_LOGICAL_DEVICESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get DeviceCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Devices(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set DeviceCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Devices(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SCM_PHYSICAL_DEVICE_INSTANCE (size: 24)
 */
export interface SCM_PHYSICAL_DEVICE_INSTANCE {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  NfitHandle: number;
  /** array */
  SymbolicLink: Deno.PointerValue | null;
}

export const sizeofSCM_PHYSICAL_DEVICE_INSTANCE = 24;

export function allocSCM_PHYSICAL_DEVICE_INSTANCE(data?: Partial<SCM_PHYSICAL_DEVICE_INSTANCE>): Uint8Array {
  const buf = new Uint8Array(sizeofSCM_PHYSICAL_DEVICE_INSTANCE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.NfitHandle !== undefined) view.setUint32(8, Number(data.NfitHandle), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.SymbolicLink !== undefined) view.setBigUint64(16, data.SymbolicLink === null ? 0n : util.toBigInt(util.toPointer(data.SymbolicLink)), true);
  return buf;
}

export class SCM_PHYSICAL_DEVICE_INSTANCEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get NfitHandle(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get SymbolicLink(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set NfitHandle(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set SymbolicLink(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SCM_PHYSICAL_DEVICES (size: 24)
 */
export interface SCM_PHYSICAL_DEVICES {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  DeviceCount: number;
  /** array */
  Devices: Deno.PointerValue | null;
}

export const sizeofSCM_PHYSICAL_DEVICES = 24;

export function allocSCM_PHYSICAL_DEVICES(data?: Partial<SCM_PHYSICAL_DEVICES>): Uint8Array {
  const buf = new Uint8Array(sizeofSCM_PHYSICAL_DEVICES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.DeviceCount !== undefined) view.setUint32(8, Number(data.DeviceCount), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Devices !== undefined) view.setBigUint64(16, data.Devices === null ? 0n : util.toBigInt(util.toPointer(data.Devices)), true);
  return buf;
}

export class SCM_PHYSICAL_DEVICESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get DeviceCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Devices(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set DeviceCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Devices(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SCM_REGION (size: 80)
 */
export interface SCM_REGION {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
  /** u32 */
  NfitHandle: number;
  /** System.Guid */
  LogicalDeviceGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  AddressRangeType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  AssociatedId: number;
  /** u64 */
  Length: number | bigint;
  /** u64 */
  StartingDPA: number | bigint;
  /** u64 */
  BaseSPA: number | bigint;
  /** u64 */
  SPAOffset: number | bigint;
  /** u64 */
  RegionOffset: number | bigint;
}

export const sizeofSCM_REGION = 80;

export function allocSCM_REGION(data?: Partial<SCM_REGION>): Uint8Array {
  const buf = new Uint8Array(sizeofSCM_REGION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.NfitHandle !== undefined) view.setUint32(12, Number(data.NfitHandle), true);
  // 0x10: pointer
  if (data?.LogicalDeviceGuid !== undefined) view.setBigUint64(16, data.LogicalDeviceGuid === null ? 0n : util.toBigInt(util.toPointer(data.LogicalDeviceGuid)), true);
  // 0x18: pointer
  if (data?.AddressRangeType !== undefined) view.setBigUint64(24, data.AddressRangeType === null ? 0n : util.toBigInt(util.toPointer(data.AddressRangeType)), true);
  // 0x20: u32
  if (data?.AssociatedId !== undefined) view.setUint32(32, Number(data.AssociatedId), true);
  // 0x24: pad4
  // 0x28: u64
  if (data?.Length !== undefined) view.setBigUint64(40, util.toBigInt(data.Length), true);
  // 0x30: u64
  if (data?.StartingDPA !== undefined) view.setBigUint64(48, util.toBigInt(data.StartingDPA), true);
  // 0x38: u64
  if (data?.BaseSPA !== undefined) view.setBigUint64(56, util.toBigInt(data.BaseSPA), true);
  // 0x40: u64
  if (data?.SPAOffset !== undefined) view.setBigUint64(64, util.toBigInt(data.SPAOffset), true);
  // 0x48: u64
  if (data?.RegionOffset !== undefined) view.setBigUint64(72, util.toBigInt(data.RegionOffset), true);
  return buf;
}

export class SCM_REGIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get NfitHandle(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get LogicalDeviceGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get AddressRangeType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get AssociatedId(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: u64
  get Length(): number | bigint {
    return this.view.getBigUint64(40, true);
  }

  // 0x30: u64
  get StartingDPA(): number | bigint {
    return this.view.getBigUint64(48, true);
  }

  // 0x38: u64
  get BaseSPA(): number | bigint {
    return this.view.getBigUint64(56, true);
  }

  // 0x40: u64
  get SPAOffset(): number | bigint {
    return this.view.getBigUint64(64, true);
  }

  // 0x48: u64
  get RegionOffset(): number | bigint {
    return this.view.getBigUint64(72, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set NfitHandle(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set LogicalDeviceGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set AddressRangeType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set AssociatedId(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: u64
  set Length(value: number | bigint) {
    this.view.setBigUint64(40, util.toBigInt(value), true);
  }

  // 0x30: u64
  set StartingDPA(value: number | bigint) {
    this.view.setBigUint64(48, util.toBigInt(value), true);
  }

  // 0x38: u64
  set BaseSPA(value: number | bigint) {
    this.view.setBigUint64(56, util.toBigInt(value), true);
  }

  // 0x40: u64
  set SPAOffset(value: number | bigint) {
    this.view.setBigUint64(64, util.toBigInt(value), true);
  }

  // 0x48: u64
  set RegionOffset(value: number | bigint) {
    this.view.setBigUint64(72, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SCM_REGIONS (size: 24)
 */
export interface SCM_REGIONS {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  RegionCount: number;
  /** array */
  Regions: Deno.PointerValue | null;
}

export const sizeofSCM_REGIONS = 24;

export function allocSCM_REGIONS(data?: Partial<SCM_REGIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofSCM_REGIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.RegionCount !== undefined) view.setUint32(8, Number(data.RegionCount), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Regions !== undefined) view.setBigUint64(16, data.Regions === null ? 0n : util.toBigInt(util.toPointer(data.Regions)), true);
  return buf;
}

export class SCM_REGIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get RegionCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Regions(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set RegionCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Regions(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SCM_BUS_PROPERTY_QUERY (size: 24)
 */
export interface SCM_BUS_PROPERTY_QUERY {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.System.Ioctl.SCM_BUS_PROPERTY_ID */
  PropertyId: SCM_BUS_PROPERTY_ID;
  /** Windows.Win32.System.Ioctl.SCM_BUS_QUERY_TYPE */
  QueryType: SCM_BUS_QUERY_TYPE;
  /** array */
  AdditionalParameters: Deno.PointerValue | null;
}

export const sizeofSCM_BUS_PROPERTY_QUERY = 24;

export function allocSCM_BUS_PROPERTY_QUERY(data?: Partial<SCM_BUS_PROPERTY_QUERY>): Uint8Array {
  const buf = new Uint8Array(sizeofSCM_BUS_PROPERTY_QUERY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: i32
  if (data?.PropertyId !== undefined) view.setInt32(8, Number(data.PropertyId), true);
  // 0x0c: i32
  if (data?.QueryType !== undefined) view.setInt32(12, Number(data.QueryType), true);
  // 0x10: pointer
  if (data?.AdditionalParameters !== undefined) view.setBigUint64(16, data.AdditionalParameters === null ? 0n : util.toBigInt(util.toPointer(data.AdditionalParameters)), true);
  return buf;
}

export class SCM_BUS_PROPERTY_QUERYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get PropertyId(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get QueryType(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: pointer
  get AdditionalParameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set PropertyId(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set QueryType(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: pointer
  set AdditionalParameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * _FirmwareActivationCapability_e__Struct (size: 8)
 */
export interface _FirmwareActivationCapability_e__Struct {
  /** u32 */
  _bitfield: number;
}

export const sizeof_FirmwareActivationCapability_e__Struct = 8;

export function alloc_FirmwareActivationCapability_e__Struct(data?: Partial<_FirmwareActivationCapability_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_FirmwareActivationCapability_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?._bitfield !== undefined) view.setUint32(0, Number(data._bitfield), true);
  // 0x04: pad4
  return buf;
}

export class _FirmwareActivationCapability_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get _bitfield(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set _bitfield(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Ioctl.SCM_BUS_RUNTIME_FW_ACTIVATION_INFO (size: 64)
 */
export interface SCM_BUS_RUNTIME_FW_ACTIVATION_INFO {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  RuntimeFwActivationSupported: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Ioctl.SCM_BUS_FIRMWARE_ACTIVATION_STATE */
  FirmwareActivationState: SCM_BUS_FIRMWARE_ACTIVATION_STATE;
  /** _FirmwareActivationCapability_e__Struct */
  FirmwareActivationCapability: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  EstimatedFirmwareActivationTimeInUSecs: number | bigint;
  /** u64 */
  EstimatedProcessorAccessQuiesceTimeInUSecs: number | bigint;
  /** u64 */
  EstimatedIOAccessQuiesceTimeInUSecs: number | bigint;
  /** u64 */
  PlatformSupportedMaxIOAccessQuiesceTimeInUSecs: number | bigint;
}

export const sizeofSCM_BUS_RUNTIME_FW_ACTIVATION_INFO = 64;

export function allocSCM_BUS_RUNTIME_FW_ACTIVATION_INFO(data?: Partial<SCM_BUS_RUNTIME_FW_ACTIVATION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSCM_BUS_RUNTIME_FW_ACTIVATION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: pointer
  if (data?.RuntimeFwActivationSupported !== undefined) view.setBigUint64(8, data.RuntimeFwActivationSupported === null ? 0n : util.toBigInt(util.toPointer(data.RuntimeFwActivationSupported)), true);
  // 0x10: i32
  if (data?.FirmwareActivationState !== undefined) view.setInt32(16, Number(data.FirmwareActivationState), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.FirmwareActivationCapability !== undefined) view.setBigUint64(24, data.FirmwareActivationCapability === null ? 0n : util.toBigInt(util.toPointer(data.FirmwareActivationCapability)), true);
  // 0x20: u64
  if (data?.EstimatedFirmwareActivationTimeInUSecs !== undefined) view.setBigUint64(32, util.toBigInt(data.EstimatedFirmwareActivationTimeInUSecs), true);
  // 0x28: u64
  if (data?.EstimatedProcessorAccessQuiesceTimeInUSecs !== undefined) view.setBigUint64(40, util.toBigInt(data.EstimatedProcessorAccessQuiesceTimeInUSecs), true);
  // 0x30: u64
  if (data?.EstimatedIOAccessQuiesceTimeInUSecs !== undefined) view.setBigUint64(48, util.toBigInt(data.EstimatedIOAccessQuiesceTimeInUSecs), true);
  // 0x38: u64
  if (data?.PlatformSupportedMaxIOAccessQuiesceTimeInUSecs !== undefined) view.setBigUint64(56, util.toBigInt(data.PlatformSupportedMaxIOAccessQuiesceTimeInUSecs), true);
  return buf;
}

export class SCM_BUS_RUNTIME_FW_ACTIVATION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get RuntimeFwActivationSupported(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i32
  get FirmwareActivationState(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get FirmwareActivationCapability(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u64
  get EstimatedFirmwareActivationTimeInUSecs(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: u64
  get EstimatedProcessorAccessQuiesceTimeInUSecs(): number | bigint {
    return this.view.getBigUint64(40, true);
  }

  // 0x30: u64
  get EstimatedIOAccessQuiesceTimeInUSecs(): number | bigint {
    return this.view.getBigUint64(48, true);
  }

  // 0x38: u64
  get PlatformSupportedMaxIOAccessQuiesceTimeInUSecs(): number | bigint {
    return this.view.getBigUint64(56, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set RuntimeFwActivationSupported(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: i32
  set FirmwareActivationState(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set FirmwareActivationCapability(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u64
  set EstimatedFirmwareActivationTimeInUSecs(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: u64
  set EstimatedProcessorAccessQuiesceTimeInUSecs(value: number | bigint) {
    this.view.setBigUint64(40, util.toBigInt(value), true);
  }

  // 0x30: u64
  set EstimatedIOAccessQuiesceTimeInUSecs(value: number | bigint) {
    this.view.setBigUint64(48, util.toBigInt(value), true);
  }

  // 0x38: u64
  set PlatformSupportedMaxIOAccessQuiesceTimeInUSecs(value: number | bigint) {
    this.view.setBigUint64(56, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SCM_BUS_DEDICATED_MEMORY_DEVICE_INFO (size: 32)
 */
export interface SCM_BUS_DEDICATED_MEMORY_DEVICE_INFO {
  /** System.Guid */
  DeviceGuid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  DeviceNumber: number;
  /** _Flags_e__Struct */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  DeviceSize: number | bigint;
}

export const sizeofSCM_BUS_DEDICATED_MEMORY_DEVICE_INFO = 32;

export function allocSCM_BUS_DEDICATED_MEMORY_DEVICE_INFO(data?: Partial<SCM_BUS_DEDICATED_MEMORY_DEVICE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSCM_BUS_DEDICATED_MEMORY_DEVICE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DeviceGuid !== undefined) view.setBigUint64(0, data.DeviceGuid === null ? 0n : util.toBigInt(util.toPointer(data.DeviceGuid)), true);
  // 0x08: u32
  if (data?.DeviceNumber !== undefined) view.setUint32(8, Number(data.DeviceNumber), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Flags !== undefined) view.setBigUint64(16, data.Flags === null ? 0n : util.toBigInt(util.toPointer(data.Flags)), true);
  // 0x18: u64
  if (data?.DeviceSize !== undefined) view.setBigUint64(24, util.toBigInt(data.DeviceSize), true);
  return buf;
}

export class SCM_BUS_DEDICATED_MEMORY_DEVICE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DeviceGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get DeviceNumber(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Flags(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u64
  get DeviceSize(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x00: pointer
  set DeviceGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set DeviceNumber(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Flags(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u64
  set DeviceSize(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SCM_BUS_DEDICATED_MEMORY_DEVICES_INFO (size: 24)
 */
export interface SCM_BUS_DEDICATED_MEMORY_DEVICES_INFO {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  DeviceCount: number;
  /** array */
  Devices: Deno.PointerValue | null;
}

export const sizeofSCM_BUS_DEDICATED_MEMORY_DEVICES_INFO = 24;

export function allocSCM_BUS_DEDICATED_MEMORY_DEVICES_INFO(data?: Partial<SCM_BUS_DEDICATED_MEMORY_DEVICES_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSCM_BUS_DEDICATED_MEMORY_DEVICES_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.DeviceCount !== undefined) view.setUint32(8, Number(data.DeviceCount), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Devices !== undefined) view.setBigUint64(16, data.Devices === null ? 0n : util.toBigInt(util.toPointer(data.Devices)), true);
  return buf;
}

export class SCM_BUS_DEDICATED_MEMORY_DEVICES_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get DeviceCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Devices(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set DeviceCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Devices(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SCM_BUS_PROPERTY_SET (size: 24)
 */
export interface SCM_BUS_PROPERTY_SET {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.System.Ioctl.SCM_BUS_PROPERTY_ID */
  PropertyId: SCM_BUS_PROPERTY_ID;
  /** Windows.Win32.System.Ioctl.SCM_BUS_SET_TYPE */
  SetType: SCM_BUS_SET_TYPE;
  /** array */
  AdditionalParameters: Deno.PointerValue | null;
}

export const sizeofSCM_BUS_PROPERTY_SET = 24;

export function allocSCM_BUS_PROPERTY_SET(data?: Partial<SCM_BUS_PROPERTY_SET>): Uint8Array {
  const buf = new Uint8Array(sizeofSCM_BUS_PROPERTY_SET);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: i32
  if (data?.PropertyId !== undefined) view.setInt32(8, Number(data.PropertyId), true);
  // 0x0c: i32
  if (data?.SetType !== undefined) view.setInt32(12, Number(data.SetType), true);
  // 0x10: pointer
  if (data?.AdditionalParameters !== undefined) view.setBigUint64(16, data.AdditionalParameters === null ? 0n : util.toBigInt(util.toPointer(data.AdditionalParameters)), true);
  return buf;
}

export class SCM_BUS_PROPERTY_SETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get PropertyId(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get SetType(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: pointer
  get AdditionalParameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set PropertyId(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set SetType(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: pointer
  set AdditionalParameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SCM_BUS_DEDICATED_MEMORY_STATE (size: 8)
 */
export interface SCM_BUS_DEDICATED_MEMORY_STATE {
  /** Windows.Win32.Foundation.BOOLEAN */
  ActivateState: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSCM_BUS_DEDICATED_MEMORY_STATE = 8;

export function allocSCM_BUS_DEDICATED_MEMORY_STATE(data?: Partial<SCM_BUS_DEDICATED_MEMORY_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofSCM_BUS_DEDICATED_MEMORY_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ActivateState !== undefined) view.setBigUint64(0, data.ActivateState === null ? 0n : util.toBigInt(util.toPointer(data.ActivateState)), true);
  return buf;
}

export class SCM_BUS_DEDICATED_MEMORY_STATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ActivateState(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ActivateState(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SCM_INTERLEAVED_PD_INFO (size: 16)
 */
export interface SCM_INTERLEAVED_PD_INFO {
  /** u32 */
  DeviceHandle: number;
  /** System.Guid */
  DeviceGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSCM_INTERLEAVED_PD_INFO = 16;

export function allocSCM_INTERLEAVED_PD_INFO(data?: Partial<SCM_INTERLEAVED_PD_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSCM_INTERLEAVED_PD_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DeviceHandle !== undefined) view.setUint32(0, Number(data.DeviceHandle), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.DeviceGuid !== undefined) view.setBigUint64(8, data.DeviceGuid === null ? 0n : util.toBigInt(util.toPointer(data.DeviceGuid)), true);
  return buf;
}

export class SCM_INTERLEAVED_PD_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get DeviceHandle(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get DeviceGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set DeviceHandle(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set DeviceGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SCM_LD_INTERLEAVE_SET_INFO (size: 24)
 */
export interface SCM_LD_INTERLEAVE_SET_INFO {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  InterleaveSetSize: number;
  /** array */
  InterleaveSet: Deno.PointerValue | null;
}

export const sizeofSCM_LD_INTERLEAVE_SET_INFO = 24;

export function allocSCM_LD_INTERLEAVE_SET_INFO(data?: Partial<SCM_LD_INTERLEAVE_SET_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSCM_LD_INTERLEAVE_SET_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.InterleaveSetSize !== undefined) view.setUint32(8, Number(data.InterleaveSetSize), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.InterleaveSet !== undefined) view.setBigUint64(16, data.InterleaveSet === null ? 0n : util.toBigInt(util.toPointer(data.InterleaveSet)), true);
  return buf;
}

export class SCM_LD_INTERLEAVE_SET_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get InterleaveSetSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get InterleaveSet(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set InterleaveSetSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set InterleaveSet(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SCM_PD_PROPERTY_QUERY (size: 24)
 */
export interface SCM_PD_PROPERTY_QUERY {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.System.Ioctl.SCM_PD_PROPERTY_ID */
  PropertyId: SCM_PD_PROPERTY_ID;
  /** Windows.Win32.System.Ioctl.SCM_PD_QUERY_TYPE */
  QueryType: SCM_PD_QUERY_TYPE;
  /** array */
  AdditionalParameters: Deno.PointerValue | null;
}

export const sizeofSCM_PD_PROPERTY_QUERY = 24;

export function allocSCM_PD_PROPERTY_QUERY(data?: Partial<SCM_PD_PROPERTY_QUERY>): Uint8Array {
  const buf = new Uint8Array(sizeofSCM_PD_PROPERTY_QUERY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: i32
  if (data?.PropertyId !== undefined) view.setInt32(8, Number(data.PropertyId), true);
  // 0x0c: i32
  if (data?.QueryType !== undefined) view.setInt32(12, Number(data.QueryType), true);
  // 0x10: pointer
  if (data?.AdditionalParameters !== undefined) view.setBigUint64(16, data.AdditionalParameters === null ? 0n : util.toBigInt(util.toPointer(data.AdditionalParameters)), true);
  return buf;
}

export class SCM_PD_PROPERTY_QUERYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get PropertyId(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get QueryType(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: pointer
  get AdditionalParameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set PropertyId(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set QueryType(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: pointer
  set AdditionalParameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SCM_PD_PROPERTY_SET (size: 24)
 */
export interface SCM_PD_PROPERTY_SET {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.System.Ioctl.SCM_PD_PROPERTY_ID */
  PropertyId: SCM_PD_PROPERTY_ID;
  /** Windows.Win32.System.Ioctl.SCM_PD_SET_TYPE */
  SetType: SCM_PD_SET_TYPE;
  /** array */
  AdditionalParameters: Deno.PointerValue | null;
}

export const sizeofSCM_PD_PROPERTY_SET = 24;

export function allocSCM_PD_PROPERTY_SET(data?: Partial<SCM_PD_PROPERTY_SET>): Uint8Array {
  const buf = new Uint8Array(sizeofSCM_PD_PROPERTY_SET);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: i32
  if (data?.PropertyId !== undefined) view.setInt32(8, Number(data.PropertyId), true);
  // 0x0c: i32
  if (data?.SetType !== undefined) view.setInt32(12, Number(data.SetType), true);
  // 0x10: pointer
  if (data?.AdditionalParameters !== undefined) view.setBigUint64(16, data.AdditionalParameters === null ? 0n : util.toBigInt(util.toPointer(data.AdditionalParameters)), true);
  return buf;
}

export class SCM_PD_PROPERTY_SETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get PropertyId(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get SetType(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: pointer
  get AdditionalParameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set PropertyId(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set SetType(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: pointer
  set AdditionalParameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SCM_PD_RUNTIME_FW_ACTIVATION_ARM_STATE (size: 8)
 */
export interface SCM_PD_RUNTIME_FW_ACTIVATION_ARM_STATE {
  /** Windows.Win32.Foundation.BOOLEAN */
  ArmState: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSCM_PD_RUNTIME_FW_ACTIVATION_ARM_STATE = 8;

export function allocSCM_PD_RUNTIME_FW_ACTIVATION_ARM_STATE(data?: Partial<SCM_PD_RUNTIME_FW_ACTIVATION_ARM_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofSCM_PD_RUNTIME_FW_ACTIVATION_ARM_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ArmState !== undefined) view.setBigUint64(0, data.ArmState === null ? 0n : util.toBigInt(util.toPointer(data.ArmState)), true);
  return buf;
}

export class SCM_PD_RUNTIME_FW_ACTIVATION_ARM_STATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ArmState(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ArmState(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SCM_PD_DESCRIPTOR_HEADER (size: 8)
 */
export interface SCM_PD_DESCRIPTOR_HEADER {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
}

export const sizeofSCM_PD_DESCRIPTOR_HEADER = 8;

export function allocSCM_PD_DESCRIPTOR_HEADER(data?: Partial<SCM_PD_DESCRIPTOR_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofSCM_PD_DESCRIPTOR_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  return buf;
}

export class SCM_PD_DESCRIPTOR_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SCM_PD_DEVICE_HANDLE (size: 24)
 */
export interface SCM_PD_DEVICE_HANDLE {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** System.Guid */
  DeviceGuid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  DeviceHandle: number;
}

export const sizeofSCM_PD_DEVICE_HANDLE = 24;

export function allocSCM_PD_DEVICE_HANDLE(data?: Partial<SCM_PD_DEVICE_HANDLE>): Uint8Array {
  const buf = new Uint8Array(sizeofSCM_PD_DEVICE_HANDLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: pointer
  if (data?.DeviceGuid !== undefined) view.setBigUint64(8, data.DeviceGuid === null ? 0n : util.toBigInt(util.toPointer(data.DeviceGuid)), true);
  // 0x10: u32
  if (data?.DeviceHandle !== undefined) view.setUint32(16, Number(data.DeviceHandle), true);
  // 0x14: pad4
  return buf;
}

export class SCM_PD_DEVICE_HANDLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get DeviceGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get DeviceHandle(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set DeviceGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set DeviceHandle(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.System.Ioctl.SCM_PD_DEVICE_INFO (size: 112)
 */
export interface SCM_PD_DEVICE_INFO {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** System.Guid */
  DeviceGuid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  UnsafeShutdownCount: number;
  /** u64 */
  PersistentMemorySizeInBytes: number | bigint;
  /** u64 */
  VolatileMemorySizeInBytes: number | bigint;
  /** u64 */
  TotalMemorySizeInBytes: number | bigint;
  /** u32 */
  SlotNumber: number;
  /** u32 */
  DeviceHandle: number;
  /** u16 */
  PhysicalId: number;
  /** u8 */
  NumberOfFormatInterfaceCodes: number;
  /** array */
  FormatInterfaceCodes: Deno.PointerValue | null;
  /** u32 */
  VendorId: number;
  /** u32 */
  ProductId: number;
  /** u32 */
  SubsystemDeviceId: number;
  /** u32 */
  SubsystemVendorId: number;
  /** u8 */
  ManufacturingLocation: number;
  /** u8 */
  ManufacturingWeek: number;
  /** u8 */
  ManufacturingYear: number;
  /** u32 */
  SerialNumber4Byte: number;
  /** u32 */
  SerialNumberLengthInChars: number;
  /** array */
  SerialNumber: Deno.PointerValue | null;
}

export const sizeofSCM_PD_DEVICE_INFO = 112;

export function allocSCM_PD_DEVICE_INFO(data?: Partial<SCM_PD_DEVICE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSCM_PD_DEVICE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: pointer
  if (data?.DeviceGuid !== undefined) view.setBigUint64(8, data.DeviceGuid === null ? 0n : util.toBigInt(util.toPointer(data.DeviceGuid)), true);
  // 0x10: u32
  if (data?.UnsafeShutdownCount !== undefined) view.setUint32(16, Number(data.UnsafeShutdownCount), true);
  // 0x14: pad4
  // 0x18: u64
  if (data?.PersistentMemorySizeInBytes !== undefined) view.setBigUint64(24, util.toBigInt(data.PersistentMemorySizeInBytes), true);
  // 0x20: u64
  if (data?.VolatileMemorySizeInBytes !== undefined) view.setBigUint64(32, util.toBigInt(data.VolatileMemorySizeInBytes), true);
  // 0x28: u64
  if (data?.TotalMemorySizeInBytes !== undefined) view.setBigUint64(40, util.toBigInt(data.TotalMemorySizeInBytes), true);
  // 0x30: u32
  if (data?.SlotNumber !== undefined) view.setUint32(48, Number(data.SlotNumber), true);
  // 0x34: u32
  if (data?.DeviceHandle !== undefined) view.setUint32(52, Number(data.DeviceHandle), true);
  // 0x38: u16
  if (data?.PhysicalId !== undefined) view.setUint16(56, Number(data.PhysicalId), true);
  // 0x3a: u8
  if (data?.NumberOfFormatInterfaceCodes !== undefined) view.setUint8(58, Number(data.NumberOfFormatInterfaceCodes));
  // 0x3b: pad5
  // 0x40: pointer
  if (data?.FormatInterfaceCodes !== undefined) view.setBigUint64(64, data.FormatInterfaceCodes === null ? 0n : util.toBigInt(util.toPointer(data.FormatInterfaceCodes)), true);
  // 0x48: u32
  if (data?.VendorId !== undefined) view.setUint32(72, Number(data.VendorId), true);
  // 0x4c: u32
  if (data?.ProductId !== undefined) view.setUint32(76, Number(data.ProductId), true);
  // 0x50: u32
  if (data?.SubsystemDeviceId !== undefined) view.setUint32(80, Number(data.SubsystemDeviceId), true);
  // 0x54: u32
  if (data?.SubsystemVendorId !== undefined) view.setUint32(84, Number(data.SubsystemVendorId), true);
  // 0x58: u8
  if (data?.ManufacturingLocation !== undefined) view.setUint8(88, Number(data.ManufacturingLocation));
  // 0x59: u8
  if (data?.ManufacturingWeek !== undefined) view.setUint8(89, Number(data.ManufacturingWeek));
  // 0x5a: u8
  if (data?.ManufacturingYear !== undefined) view.setUint8(90, Number(data.ManufacturingYear));
  // 0x5b: u32
  if (data?.SerialNumber4Byte !== undefined) view.setUint32(91, Number(data.SerialNumber4Byte), true);
  // 0x5f: u32
  if (data?.SerialNumberLengthInChars !== undefined) view.setUint32(95, Number(data.SerialNumberLengthInChars), true);
  // 0x63: pad5
  // 0x68: pointer
  if (data?.SerialNumber !== undefined) view.setBigUint64(104, data.SerialNumber === null ? 0n : util.toBigInt(util.toPointer(data.SerialNumber)), true);
  return buf;
}

export class SCM_PD_DEVICE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get DeviceGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get UnsafeShutdownCount(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: u64
  get PersistentMemorySizeInBytes(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u64
  get VolatileMemorySizeInBytes(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: u64
  get TotalMemorySizeInBytes(): number | bigint {
    return this.view.getBigUint64(40, true);
  }

  // 0x30: u32
  get SlotNumber(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get DeviceHandle(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u16
  get PhysicalId(): number {
    return this.view.getUint16(56, true);
  }

  // 0x3a: u8
  get NumberOfFormatInterfaceCodes(): number {
    return this.view.getUint8(58);
  }

  // 0x3b: pad5

  // 0x40: pointer
  get FormatInterfaceCodes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: u32
  get VendorId(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get ProductId(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get SubsystemDeviceId(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get SubsystemVendorId(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u8
  get ManufacturingLocation(): number {
    return this.view.getUint8(88);
  }

  // 0x59: u8
  get ManufacturingWeek(): number {
    return this.view.getUint8(89);
  }

  // 0x5a: u8
  get ManufacturingYear(): number {
    return this.view.getUint8(90);
  }

  // 0x5b: u32
  get SerialNumber4Byte(): number {
    return this.view.getUint32(91, true);
  }

  // 0x5f: u32
  get SerialNumberLengthInChars(): number {
    return this.view.getUint32(95, true);
  }

  // 0x63: pad5

  // 0x68: pointer
  get SerialNumber(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set DeviceGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set UnsafeShutdownCount(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: u64
  set PersistentMemorySizeInBytes(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u64
  set VolatileMemorySizeInBytes(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: u64
  set TotalMemorySizeInBytes(value: number | bigint) {
    this.view.setBigUint64(40, util.toBigInt(value), true);
  }

  // 0x30: u32
  set SlotNumber(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set DeviceHandle(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u16
  set PhysicalId(value: number) {
    this.view.setUint16(56, value, true);
  }

  // 0x3a: u8
  set NumberOfFormatInterfaceCodes(value: number) {
    this.view.setUint8(58, value);
  }

  // 0x3b: pad5

  // 0x40: pointer
  set FormatInterfaceCodes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: u32
  set VendorId(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set ProductId(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set SubsystemDeviceId(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set SubsystemVendorId(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u8
  set ManufacturingLocation(value: number) {
    this.view.setUint8(88, value);
  }

  // 0x59: u8
  set ManufacturingWeek(value: number) {
    this.view.setUint8(89, value);
  }

  // 0x5a: u8
  set ManufacturingYear(value: number) {
    this.view.setUint8(90, value);
  }

  // 0x5b: u32
  set SerialNumber4Byte(value: number) {
    this.view.setUint32(91, value, true);
  }

  // 0x5f: u32
  set SerialNumberLengthInChars(value: number) {
    this.view.setUint32(95, value, true);
  }

  // 0x63: pad5

  // 0x68: pointer
  set SerialNumber(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SCM_PD_DEVICE_SPECIFIC_PROPERTY (size: 16)
 */
export interface SCM_PD_DEVICE_SPECIFIC_PROPERTY {
  /** array */
  Name: Deno.PointerValue | null;
  /** i64 */
  Value: number | bigint;
}

export const sizeofSCM_PD_DEVICE_SPECIFIC_PROPERTY = 16;

export function allocSCM_PD_DEVICE_SPECIFIC_PROPERTY(data?: Partial<SCM_PD_DEVICE_SPECIFIC_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofSCM_PD_DEVICE_SPECIFIC_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Name !== undefined) view.setBigUint64(0, data.Name === null ? 0n : util.toBigInt(util.toPointer(data.Name)), true);
  // 0x08: i64
  if (data?.Value !== undefined) view.setBigInt64(8, util.toBigInt(data.Value), true);
  return buf;
}

export class SCM_PD_DEVICE_SPECIFIC_PROPERTYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i64
  get Value(): number | bigint {
    return this.view.getBigInt64(8, true);
  }

  // 0x00: pointer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: i64
  set Value(value: number | bigint) {
    this.view.setBigInt64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SCM_PD_DEVICE_SPECIFIC_INFO (size: 24)
 */
export interface SCM_PD_DEVICE_SPECIFIC_INFO {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  NumberOfProperties: number;
  /** array */
  DeviceSpecificProperties: Deno.PointerValue | null;
}

export const sizeofSCM_PD_DEVICE_SPECIFIC_INFO = 24;

export function allocSCM_PD_DEVICE_SPECIFIC_INFO(data?: Partial<SCM_PD_DEVICE_SPECIFIC_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSCM_PD_DEVICE_SPECIFIC_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.NumberOfProperties !== undefined) view.setUint32(8, Number(data.NumberOfProperties), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.DeviceSpecificProperties !== undefined) view.setBigUint64(16, data.DeviceSpecificProperties === null ? 0n : util.toBigInt(util.toPointer(data.DeviceSpecificProperties)), true);
  return buf;
}

export class SCM_PD_DEVICE_SPECIFIC_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get NumberOfProperties(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get DeviceSpecificProperties(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set NumberOfProperties(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set DeviceSpecificProperties(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SCM_PD_FIRMWARE_SLOT_INFO (size: 32)
 */
export interface SCM_PD_FIRMWARE_SLOT_INFO {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u8 */
  SlotNumber: number;
  /** u8 */
  _bitfield: number;
  /** array */
  Reserved1: Deno.PointerValue | null;
  /** array */
  Revision: Deno.PointerValue | null;
}

export const sizeofSCM_PD_FIRMWARE_SLOT_INFO = 32;

export function allocSCM_PD_FIRMWARE_SLOT_INFO(data?: Partial<SCM_PD_FIRMWARE_SLOT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSCM_PD_FIRMWARE_SLOT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u8
  if (data?.SlotNumber !== undefined) view.setUint8(8, Number(data.SlotNumber));
  // 0x09: u8
  if (data?._bitfield !== undefined) view.setUint8(9, Number(data._bitfield));
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(16, data.Reserved1 === null ? 0n : util.toBigInt(util.toPointer(data.Reserved1)), true);
  // 0x18: pointer
  if (data?.Revision !== undefined) view.setBigUint64(24, data.Revision === null ? 0n : util.toBigInt(util.toPointer(data.Revision)), true);
  return buf;
}

export class SCM_PD_FIRMWARE_SLOT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u8
  get SlotNumber(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get _bitfield(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x10: pointer
  get Reserved1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Revision(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u8
  set SlotNumber(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set _bitfield(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6

  // 0x10: pointer
  set Reserved1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Revision(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SCM_PD_FIRMWARE_INFO (size: 24)
 */
export interface SCM_PD_FIRMWARE_INFO {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u8 */
  ActiveSlot: number;
  /** u8 */
  NextActiveSlot: number;
  /** u8 */
  SlotCount: number;
  /** array */
  Slots: Deno.PointerValue | null;
}

export const sizeofSCM_PD_FIRMWARE_INFO = 24;

export function allocSCM_PD_FIRMWARE_INFO(data?: Partial<SCM_PD_FIRMWARE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSCM_PD_FIRMWARE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u8
  if (data?.ActiveSlot !== undefined) view.setUint8(8, Number(data.ActiveSlot));
  // 0x09: u8
  if (data?.NextActiveSlot !== undefined) view.setUint8(9, Number(data.NextActiveSlot));
  // 0x0a: u8
  if (data?.SlotCount !== undefined) view.setUint8(10, Number(data.SlotCount));
  // 0x0b: pad5
  // 0x10: pointer
  if (data?.Slots !== undefined) view.setBigUint64(16, data.Slots === null ? 0n : util.toBigInt(util.toPointer(data.Slots)), true);
  return buf;
}

export class SCM_PD_FIRMWARE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u8
  get ActiveSlot(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get NextActiveSlot(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: u8
  get SlotCount(): number {
    return this.view.getUint8(10);
  }

  // 0x0b: pad5

  // 0x10: pointer
  get Slots(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u8
  set ActiveSlot(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set NextActiveSlot(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: u8
  set SlotCount(value: number) {
    this.view.setUint8(10, value);
  }

  // 0x0b: pad5

  // 0x10: pointer
  set Slots(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SCM_PD_MANAGEMENT_STATUS (size: 40)
 */
export interface SCM_PD_MANAGEMENT_STATUS {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.System.Ioctl.SCM_PD_HEALTH_STATUS */
  Health: SCM_PD_HEALTH_STATUS;
  /** u32 */
  NumberOfOperationalStatus: number;
  /** u32 */
  NumberOfAdditionalReasons: number;
  /** array */
  OperationalStatus: Deno.PointerValue | null;
  /** array */
  AdditionalReasons: Deno.PointerValue | null;
}

export const sizeofSCM_PD_MANAGEMENT_STATUS = 40;

export function allocSCM_PD_MANAGEMENT_STATUS(data?: Partial<SCM_PD_MANAGEMENT_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofSCM_PD_MANAGEMENT_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: i32
  if (data?.Health !== undefined) view.setInt32(8, Number(data.Health), true);
  // 0x0c: u32
  if (data?.NumberOfOperationalStatus !== undefined) view.setUint32(12, Number(data.NumberOfOperationalStatus), true);
  // 0x10: u32
  if (data?.NumberOfAdditionalReasons !== undefined) view.setUint32(16, Number(data.NumberOfAdditionalReasons), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.OperationalStatus !== undefined) view.setBigUint64(24, data.OperationalStatus === null ? 0n : util.toBigInt(util.toPointer(data.OperationalStatus)), true);
  // 0x20: pointer
  if (data?.AdditionalReasons !== undefined) view.setBigUint64(32, data.AdditionalReasons === null ? 0n : util.toBigInt(util.toPointer(data.AdditionalReasons)), true);
  return buf;
}

export class SCM_PD_MANAGEMENT_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get Health(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get NumberOfOperationalStatus(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get NumberOfAdditionalReasons(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get OperationalStatus(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get AdditionalReasons(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set Health(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set NumberOfOperationalStatus(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set NumberOfAdditionalReasons(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set OperationalStatus(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set AdditionalReasons(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SCM_PD_LOCATION_STRING (size: 16)
 */
export interface SCM_PD_LOCATION_STRING {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** array */
  Location: Deno.PointerValue | null;
}

export const sizeofSCM_PD_LOCATION_STRING = 16;

export function allocSCM_PD_LOCATION_STRING(data?: Partial<SCM_PD_LOCATION_STRING>): Uint8Array {
  const buf = new Uint8Array(sizeofSCM_PD_LOCATION_STRING);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: pointer
  if (data?.Location !== undefined) view.setBigUint64(8, data.Location === null ? 0n : util.toBigInt(util.toPointer(data.Location)), true);
  return buf;
}

export class SCM_PD_LOCATION_STRINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Location(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Location(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SCM_PD_FRU_ID_STRING (size: 24)
 */
export interface SCM_PD_FRU_ID_STRING {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  IdentifierSize: number;
  /** array */
  Identifier: Deno.PointerValue | null;
}

export const sizeofSCM_PD_FRU_ID_STRING = 24;

export function allocSCM_PD_FRU_ID_STRING(data?: Partial<SCM_PD_FRU_ID_STRING>): Uint8Array {
  const buf = new Uint8Array(sizeofSCM_PD_FRU_ID_STRING);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.IdentifierSize !== undefined) view.setUint32(8, Number(data.IdentifierSize), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Identifier !== undefined) view.setBigUint64(16, data.Identifier === null ? 0n : util.toBigInt(util.toPointer(data.Identifier)), true);
  return buf;
}

export class SCM_PD_FRU_ID_STRINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get IdentifierSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Identifier(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set IdentifierSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Identifier(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SCM_PD_FIRMWARE_DOWNLOAD (size: 48)
 */
export interface SCM_PD_FIRMWARE_DOWNLOAD {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
  /** u8 */
  Slot: number;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** u64 */
  Offset: number | bigint;
  /** u32 */
  FirmwareImageSizeInBytes: number;
  /** array */
  FirmwareImage: Deno.PointerValue | null;
}

export const sizeofSCM_PD_FIRMWARE_DOWNLOAD = 48;

export function allocSCM_PD_FIRMWARE_DOWNLOAD(data?: Partial<SCM_PD_FIRMWARE_DOWNLOAD>): Uint8Array {
  const buf = new Uint8Array(sizeofSCM_PD_FIRMWARE_DOWNLOAD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u8
  if (data?.Slot !== undefined) view.setUint8(12, Number(data.Slot));
  // 0x0d: pad3
  // 0x10: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(16, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  // 0x18: u64
  if (data?.Offset !== undefined) view.setBigUint64(24, util.toBigInt(data.Offset), true);
  // 0x20: u32
  if (data?.FirmwareImageSizeInBytes !== undefined) view.setUint32(32, Number(data.FirmwareImageSizeInBytes), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.FirmwareImage !== undefined) view.setBigUint64(40, data.FirmwareImage === null ? 0n : util.toBigInt(util.toPointer(data.FirmwareImage)), true);
  return buf;
}

export class SCM_PD_FIRMWARE_DOWNLOADView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u8
  get Slot(): number {
    return this.view.getUint8(12);
  }

  // 0x0d: pad3

  // 0x10: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u64
  get Offset(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u32
  get FirmwareImageSizeInBytes(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get FirmwareImage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u8
  set Slot(value: number) {
    this.view.setUint8(12, value);
  }

  // 0x0d: pad3

  // 0x10: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u64
  set Offset(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u32
  set FirmwareImageSizeInBytes(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set FirmwareImage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SCM_PD_FIRMWARE_ACTIVATE (size: 16)
 */
export interface SCM_PD_FIRMWARE_ACTIVATE {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
  /** u8 */
  Slot: number;
}

export const sizeofSCM_PD_FIRMWARE_ACTIVATE = 16;

export function allocSCM_PD_FIRMWARE_ACTIVATE(data?: Partial<SCM_PD_FIRMWARE_ACTIVATE>): Uint8Array {
  const buf = new Uint8Array(sizeofSCM_PD_FIRMWARE_ACTIVATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u8
  if (data?.Slot !== undefined) view.setUint8(12, Number(data.Slot));
  // 0x0d: pad3
  return buf;
}

export class SCM_PD_FIRMWARE_ACTIVATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u8
  get Slot(): number {
    return this.view.getUint8(12);
  }

  // 0x0d: pad3

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u8
  set Slot(value: number) {
    this.view.setUint8(12, value);
  }

  // 0x0d: pad3
}

/**
 * Windows.Win32.System.Ioctl.SCM_PD_RUNTIME_FW_ACTIVATION_INFO (size: 16)
 */
export interface SCM_PD_RUNTIME_FW_ACTIVATION_INFO {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.System.Ioctl.SCM_PD_LAST_FW_ACTIVATION_STATUS */
  LastFirmwareActivationStatus: SCM_PD_LAST_FW_ACTIVATION_STATUS;
  /** Windows.Win32.System.Ioctl.SCM_PD_FIRMWARE_ACTIVATION_STATE */
  FirmwareActivationState: SCM_PD_FIRMWARE_ACTIVATION_STATE;
}

export const sizeofSCM_PD_RUNTIME_FW_ACTIVATION_INFO = 16;

export function allocSCM_PD_RUNTIME_FW_ACTIVATION_INFO(data?: Partial<SCM_PD_RUNTIME_FW_ACTIVATION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSCM_PD_RUNTIME_FW_ACTIVATION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: i32
  if (data?.LastFirmwareActivationStatus !== undefined) view.setInt32(8, Number(data.LastFirmwareActivationStatus), true);
  // 0x0c: i32
  if (data?.FirmwareActivationState !== undefined) view.setInt32(12, Number(data.FirmwareActivationState), true);
  return buf;
}

export class SCM_PD_RUNTIME_FW_ACTIVATION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get LastFirmwareActivationStatus(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get FirmwareActivationState(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set LastFirmwareActivationStatus(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set FirmwareActivationState(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SCM_PD_PASSTHROUGH_INPUT (size: 32)
 */
export interface SCM_PD_PASSTHROUGH_INPUT {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** System.Guid */
  ProtocolGuid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  DataSize: number;
  /** array */
  Data: Deno.PointerValue | null;
}

export const sizeofSCM_PD_PASSTHROUGH_INPUT = 32;

export function allocSCM_PD_PASSTHROUGH_INPUT(data?: Partial<SCM_PD_PASSTHROUGH_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofSCM_PD_PASSTHROUGH_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: pointer
  if (data?.ProtocolGuid !== undefined) view.setBigUint64(8, data.ProtocolGuid === null ? 0n : util.toBigInt(util.toPointer(data.ProtocolGuid)), true);
  // 0x10: u32
  if (data?.DataSize !== undefined) view.setUint32(16, Number(data.DataSize), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Data !== undefined) view.setBigUint64(24, data.Data === null ? 0n : util.toBigInt(util.toPointer(data.Data)), true);
  return buf;
}

export class SCM_PD_PASSTHROUGH_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ProtocolGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get DataSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Data(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ProtocolGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set DataSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Data(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SCM_PD_PASSTHROUGH_OUTPUT (size: 32)
 */
export interface SCM_PD_PASSTHROUGH_OUTPUT {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** System.Guid */
  ProtocolGuid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  DataSize: number;
  /** array */
  Data: Deno.PointerValue | null;
}

export const sizeofSCM_PD_PASSTHROUGH_OUTPUT = 32;

export function allocSCM_PD_PASSTHROUGH_OUTPUT(data?: Partial<SCM_PD_PASSTHROUGH_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofSCM_PD_PASSTHROUGH_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: pointer
  if (data?.ProtocolGuid !== undefined) view.setBigUint64(8, data.ProtocolGuid === null ? 0n : util.toBigInt(util.toPointer(data.ProtocolGuid)), true);
  // 0x10: u32
  if (data?.DataSize !== undefined) view.setUint32(16, Number(data.DataSize), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Data !== undefined) view.setBigUint64(24, data.Data === null ? 0n : util.toBigInt(util.toPointer(data.Data)), true);
  return buf;
}

export class SCM_PD_PASSTHROUGH_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ProtocolGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get DataSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Data(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ProtocolGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set DataSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Data(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SCM_PD_PASSTHROUGH_INVDIMM_INPUT (size: 16)
 */
export interface SCM_PD_PASSTHROUGH_INVDIMM_INPUT {
  /** u32 */
  Opcode: number;
  /** u32 */
  OpcodeParametersLength: number;
  /** array */
  OpcodeParameters: Deno.PointerValue | null;
}

export const sizeofSCM_PD_PASSTHROUGH_INVDIMM_INPUT = 16;

export function allocSCM_PD_PASSTHROUGH_INVDIMM_INPUT(data?: Partial<SCM_PD_PASSTHROUGH_INVDIMM_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofSCM_PD_PASSTHROUGH_INVDIMM_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Opcode !== undefined) view.setUint32(0, Number(data.Opcode), true);
  // 0x04: u32
  if (data?.OpcodeParametersLength !== undefined) view.setUint32(4, Number(data.OpcodeParametersLength), true);
  // 0x08: pointer
  if (data?.OpcodeParameters !== undefined) view.setBigUint64(8, data.OpcodeParameters === null ? 0n : util.toBigInt(util.toPointer(data.OpcodeParameters)), true);
  return buf;
}

export class SCM_PD_PASSTHROUGH_INVDIMM_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Opcode(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get OpcodeParametersLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get OpcodeParameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Opcode(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set OpcodeParametersLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set OpcodeParameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT (size: 16)
 */
export interface SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT {
  /** u16 */
  GeneralStatus: number;
  /** u16 */
  ExtendedStatus: number;
  /** u32 */
  OutputDataLength: number;
  /** array */
  OutputData: Deno.PointerValue | null;
}

export const sizeofSCM_PD_PASSTHROUGH_INVDIMM_OUTPUT = 16;

export function allocSCM_PD_PASSTHROUGH_INVDIMM_OUTPUT(data?: Partial<SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofSCM_PD_PASSTHROUGH_INVDIMM_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.GeneralStatus !== undefined) view.setUint16(0, Number(data.GeneralStatus), true);
  // 0x02: u16
  if (data?.ExtendedStatus !== undefined) view.setUint16(2, Number(data.ExtendedStatus), true);
  // 0x04: u32
  if (data?.OutputDataLength !== undefined) view.setUint32(4, Number(data.OutputDataLength), true);
  // 0x08: pointer
  if (data?.OutputData !== undefined) view.setBigUint64(8, data.OutputData === null ? 0n : util.toBigInt(util.toPointer(data.OutputData)), true);
  return buf;
}

export class SCM_PD_PASSTHROUGH_INVDIMM_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get GeneralStatus(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get ExtendedStatus(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get OutputDataLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get OutputData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set GeneralStatus(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set ExtendedStatus(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set OutputDataLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set OutputData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * _Options_e__Struct (size: 8)
 */
export interface _Options_e__Struct {
  /** u32 */
  _bitfield: number;
}

export const sizeof_Options_e__Struct = 8;

export function alloc_Options_e__Struct(data?: Partial<_Options_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Options_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?._bitfield !== undefined) view.setUint32(0, Number(data._bitfield), true);
  // 0x04: pad4
  return buf;
}

export class _Options_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get _bitfield(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set _bitfield(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Ioctl.SCM_PD_REINITIALIZE_MEDIA_INPUT (size: 16)
 */
export interface SCM_PD_REINITIALIZE_MEDIA_INPUT {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** _Options_e__Struct */
  Options: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSCM_PD_REINITIALIZE_MEDIA_INPUT = 16;

export function allocSCM_PD_REINITIALIZE_MEDIA_INPUT(data?: Partial<SCM_PD_REINITIALIZE_MEDIA_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofSCM_PD_REINITIALIZE_MEDIA_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: pointer
  if (data?.Options !== undefined) view.setBigUint64(8, data.Options === null ? 0n : util.toBigInt(util.toPointer(data.Options)), true);
  return buf;
}

export class SCM_PD_REINITIALIZE_MEDIA_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Options(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Options(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SCM_PD_REINITIALIZE_MEDIA_OUTPUT (size: 16)
 */
export interface SCM_PD_REINITIALIZE_MEDIA_OUTPUT {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.System.Ioctl.SCM_PD_MEDIA_REINITIALIZATION_STATUS */
  Status: SCM_PD_MEDIA_REINITIALIZATION_STATUS;
}

export const sizeofSCM_PD_REINITIALIZE_MEDIA_OUTPUT = 16;

export function allocSCM_PD_REINITIALIZE_MEDIA_OUTPUT(data?: Partial<SCM_PD_REINITIALIZE_MEDIA_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofSCM_PD_REINITIALIZE_MEDIA_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: i32
  if (data?.Status !== undefined) view.setInt32(8, Number(data.Status), true);
  // 0x0c: pad4
  return buf;
}

export class SCM_PD_REINITIALIZE_MEDIA_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get Status(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set Status(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Ioctl.FORMAT_PARAMETERS (size: 24)
 */
export interface FORMAT_PARAMETERS {
  /** Windows.Win32.System.Ioctl.MEDIA_TYPE */
  MediaType: MEDIA_TYPE;
  /** u32 */
  StartCylinderNumber: number;
  /** u32 */
  EndCylinderNumber: number;
  /** u32 */
  StartHeadNumber: number;
  /** u32 */
  EndHeadNumber: number;
}

export const sizeofFORMAT_PARAMETERS = 24;

export function allocFORMAT_PARAMETERS(data?: Partial<FORMAT_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofFORMAT_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MediaType !== undefined) view.setInt32(0, Number(data.MediaType), true);
  // 0x04: u32
  if (data?.StartCylinderNumber !== undefined) view.setUint32(4, Number(data.StartCylinderNumber), true);
  // 0x08: u32
  if (data?.EndCylinderNumber !== undefined) view.setUint32(8, Number(data.EndCylinderNumber), true);
  // 0x0c: u32
  if (data?.StartHeadNumber !== undefined) view.setUint32(12, Number(data.StartHeadNumber), true);
  // 0x10: u32
  if (data?.EndHeadNumber !== undefined) view.setUint32(16, Number(data.EndHeadNumber), true);
  // 0x14: pad4
  return buf;
}

export class FORMAT_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MediaType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get StartCylinderNumber(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get EndCylinderNumber(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get StartHeadNumber(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get EndHeadNumber(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: i32
  set MediaType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set StartCylinderNumber(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set EndCylinderNumber(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set StartHeadNumber(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set EndHeadNumber(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.System.Ioctl.FORMAT_EX_PARAMETERS (size: 32)
 */
export interface FORMAT_EX_PARAMETERS {
  /** Windows.Win32.System.Ioctl.MEDIA_TYPE */
  MediaType: MEDIA_TYPE;
  /** u32 */
  StartCylinderNumber: number;
  /** u32 */
  EndCylinderNumber: number;
  /** u32 */
  StartHeadNumber: number;
  /** u32 */
  EndHeadNumber: number;
  /** u16 */
  FormatGapLength: number;
  /** u16 */
  SectorsPerTrack: number;
  /** array */
  SectorNumber: Deno.PointerValue | null;
}

export const sizeofFORMAT_EX_PARAMETERS = 32;

export function allocFORMAT_EX_PARAMETERS(data?: Partial<FORMAT_EX_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofFORMAT_EX_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MediaType !== undefined) view.setInt32(0, Number(data.MediaType), true);
  // 0x04: u32
  if (data?.StartCylinderNumber !== undefined) view.setUint32(4, Number(data.StartCylinderNumber), true);
  // 0x08: u32
  if (data?.EndCylinderNumber !== undefined) view.setUint32(8, Number(data.EndCylinderNumber), true);
  // 0x0c: u32
  if (data?.StartHeadNumber !== undefined) view.setUint32(12, Number(data.StartHeadNumber), true);
  // 0x10: u32
  if (data?.EndHeadNumber !== undefined) view.setUint32(16, Number(data.EndHeadNumber), true);
  // 0x14: u16
  if (data?.FormatGapLength !== undefined) view.setUint16(20, Number(data.FormatGapLength), true);
  // 0x16: u16
  if (data?.SectorsPerTrack !== undefined) view.setUint16(22, Number(data.SectorsPerTrack), true);
  // 0x18: pointer
  if (data?.SectorNumber !== undefined) view.setBigUint64(24, data.SectorNumber === null ? 0n : util.toBigInt(util.toPointer(data.SectorNumber)), true);
  return buf;
}

export class FORMAT_EX_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MediaType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get StartCylinderNumber(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get EndCylinderNumber(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get StartHeadNumber(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get EndHeadNumber(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u16
  get FormatGapLength(): number {
    return this.view.getUint16(20, true);
  }

  // 0x16: u16
  get SectorsPerTrack(): number {
    return this.view.getUint16(22, true);
  }

  // 0x18: pointer
  get SectorNumber(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MediaType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set StartCylinderNumber(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set EndCylinderNumber(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set StartHeadNumber(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set EndHeadNumber(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u16
  set FormatGapLength(value: number) {
    this.view.setUint16(20, value, true);
  }

  // 0x16: u16
  set SectorsPerTrack(value: number) {
    this.view.setUint16(22, value, true);
  }

  // 0x18: pointer
  set SectorNumber(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DISK_GEOMETRY (size: 24)
 */
export interface DISK_GEOMETRY {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  Cylinders: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Ioctl.MEDIA_TYPE */
  MediaType: MEDIA_TYPE;
  /** u32 */
  TracksPerCylinder: number;
  /** u32 */
  SectorsPerTrack: number;
  /** u32 */
  BytesPerSector: number;
}

export const sizeofDISK_GEOMETRY = 24;

export function allocDISK_GEOMETRY(data?: Partial<DISK_GEOMETRY>): Uint8Array {
  const buf = new Uint8Array(sizeofDISK_GEOMETRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Cylinders !== undefined) view.setBigUint64(0, data.Cylinders === null ? 0n : util.toBigInt(util.toPointer(data.Cylinders)), true);
  // 0x08: i32
  if (data?.MediaType !== undefined) view.setInt32(8, Number(data.MediaType), true);
  // 0x0c: u32
  if (data?.TracksPerCylinder !== undefined) view.setUint32(12, Number(data.TracksPerCylinder), true);
  // 0x10: u32
  if (data?.SectorsPerTrack !== undefined) view.setUint32(16, Number(data.SectorsPerTrack), true);
  // 0x14: u32
  if (data?.BytesPerSector !== undefined) view.setUint32(20, Number(data.BytesPerSector), true);
  return buf;
}

export class DISK_GEOMETRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Cylinders(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get MediaType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get TracksPerCylinder(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get SectorsPerTrack(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get BytesPerSector(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: pointer
  set Cylinders(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: i32
  set MediaType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set TracksPerCylinder(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set SectorsPerTrack(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set BytesPerSector(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.PARTITION_INFORMATION (size: 56)
 */
export interface PARTITION_INFORMATION {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  StartingOffset: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PartitionLength: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  HiddenSectors: number;
  /** u32 */
  PartitionNumber: number;
  /** u8 */
  PartitionType: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  BootIndicator: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  RecognizedPartition: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  RewritePartition: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPARTITION_INFORMATION = 56;

export function allocPARTITION_INFORMATION(data?: Partial<PARTITION_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPARTITION_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.StartingOffset !== undefined) view.setBigUint64(0, data.StartingOffset === null ? 0n : util.toBigInt(util.toPointer(data.StartingOffset)), true);
  // 0x08: pointer
  if (data?.PartitionLength !== undefined) view.setBigUint64(8, data.PartitionLength === null ? 0n : util.toBigInt(util.toPointer(data.PartitionLength)), true);
  // 0x10: u32
  if (data?.HiddenSectors !== undefined) view.setUint32(16, Number(data.HiddenSectors), true);
  // 0x14: u32
  if (data?.PartitionNumber !== undefined) view.setUint32(20, Number(data.PartitionNumber), true);
  // 0x18: u8
  if (data?.PartitionType !== undefined) view.setUint8(24, Number(data.PartitionType));
  // 0x19: pad7
  // 0x20: pointer
  if (data?.BootIndicator !== undefined) view.setBigUint64(32, data.BootIndicator === null ? 0n : util.toBigInt(util.toPointer(data.BootIndicator)), true);
  // 0x28: pointer
  if (data?.RecognizedPartition !== undefined) view.setBigUint64(40, data.RecognizedPartition === null ? 0n : util.toBigInt(util.toPointer(data.RecognizedPartition)), true);
  // 0x30: pointer
  if (data?.RewritePartition !== undefined) view.setBigUint64(48, data.RewritePartition === null ? 0n : util.toBigInt(util.toPointer(data.RewritePartition)), true);
  return buf;
}

export class PARTITION_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get StartingOffset(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get PartitionLength(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get HiddenSectors(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get PartitionNumber(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u8
  get PartitionType(): number {
    return this.view.getUint8(24);
  }

  // 0x19: pad7

  // 0x20: pointer
  get BootIndicator(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get RecognizedPartition(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get RewritePartition(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set StartingOffset(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set PartitionLength(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set HiddenSectors(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set PartitionNumber(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u8
  set PartitionType(value: number) {
    this.view.setUint8(24, value);
  }

  // 0x19: pad7

  // 0x20: pointer
  set BootIndicator(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set RecognizedPartition(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set RewritePartition(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SET_PARTITION_INFORMATION (size: 8)
 */
export interface SET_PARTITION_INFORMATION {
  /** u8 */
  PartitionType: number;
}

export const sizeofSET_PARTITION_INFORMATION = 8;

export function allocSET_PARTITION_INFORMATION(data?: Partial<SET_PARTITION_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSET_PARTITION_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.PartitionType !== undefined) view.setUint8(0, Number(data.PartitionType));
  // 0x01: pad7
  return buf;
}

export class SET_PARTITION_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get PartitionType(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x00: u8
  set PartitionType(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7
}

/**
 * Windows.Win32.System.Ioctl.DRIVE_LAYOUT_INFORMATION (size: 16)
 */
export interface DRIVE_LAYOUT_INFORMATION {
  /** u32 */
  PartitionCount: number;
  /** u32 */
  Signature: number;
  /** array */
  PartitionEntry: Deno.PointerValue | null;
}

export const sizeofDRIVE_LAYOUT_INFORMATION = 16;

export function allocDRIVE_LAYOUT_INFORMATION(data?: Partial<DRIVE_LAYOUT_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofDRIVE_LAYOUT_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PartitionCount !== undefined) view.setUint32(0, Number(data.PartitionCount), true);
  // 0x04: u32
  if (data?.Signature !== undefined) view.setUint32(4, Number(data.Signature), true);
  // 0x08: pointer
  if (data?.PartitionEntry !== undefined) view.setBigUint64(8, data.PartitionEntry === null ? 0n : util.toBigInt(util.toPointer(data.PartitionEntry)), true);
  return buf;
}

export class DRIVE_LAYOUT_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get PartitionCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Signature(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get PartitionEntry(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set PartitionCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Signature(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set PartitionEntry(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.VERIFY_INFORMATION (size: 16)
 */
export interface VERIFY_INFORMATION {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  StartingOffset: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Length: number;
}

export const sizeofVERIFY_INFORMATION = 16;

export function allocVERIFY_INFORMATION(data?: Partial<VERIFY_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofVERIFY_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.StartingOffset !== undefined) view.setBigUint64(0, data.StartingOffset === null ? 0n : util.toBigInt(util.toPointer(data.StartingOffset)), true);
  // 0x08: u32
  if (data?.Length !== undefined) view.setUint32(8, Number(data.Length), true);
  // 0x0c: pad4
  return buf;
}

export class VERIFY_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get StartingOffset(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Length(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set StartingOffset(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set Length(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Ioctl.REASSIGN_BLOCKS (size: 16)
 */
export interface REASSIGN_BLOCKS {
  /** u16 */
  Reserved: number;
  /** u16 */
  Count: number;
  /** array */
  BlockNumber: Deno.PointerValue | null;
}

export const sizeofREASSIGN_BLOCKS = 16;

export function allocREASSIGN_BLOCKS(data?: Partial<REASSIGN_BLOCKS>): Uint8Array {
  const buf = new Uint8Array(sizeofREASSIGN_BLOCKS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Reserved !== undefined) view.setUint16(0, Number(data.Reserved), true);
  // 0x02: u16
  if (data?.Count !== undefined) view.setUint16(2, Number(data.Count), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.BlockNumber !== undefined) view.setBigUint64(8, data.BlockNumber === null ? 0n : util.toBigInt(util.toPointer(data.BlockNumber)), true);
  return buf;
}

export class REASSIGN_BLOCKSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Reserved(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Count(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get BlockNumber(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set Reserved(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Count(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set BlockNumber(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.REASSIGN_BLOCKS_EX (size: 16)
 */
export interface REASSIGN_BLOCKS_EX {
  /** u16 */
  Reserved: number;
  /** u16 */
  Count: number;
  /** array */
  BlockNumber: Deno.PointerValue | null;
}

export const sizeofREASSIGN_BLOCKS_EX = 16;

export function allocREASSIGN_BLOCKS_EX(data?: Partial<REASSIGN_BLOCKS_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofREASSIGN_BLOCKS_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Reserved !== undefined) view.setUint16(0, Number(data.Reserved), true);
  // 0x02: u16
  if (data?.Count !== undefined) view.setUint16(2, Number(data.Count), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.BlockNumber !== undefined) view.setBigUint64(8, data.BlockNumber === null ? 0n : util.toBigInt(util.toPointer(data.BlockNumber)), true);
  return buf;
}

export class REASSIGN_BLOCKS_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Reserved(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Count(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get BlockNumber(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set Reserved(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Count(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set BlockNumber(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.PARTITION_INFORMATION_GPT (size: 32)
 */
export interface PARTITION_INFORMATION_GPT {
  /** System.Guid */
  PartitionType: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  PartitionId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Ioctl.GPT_ATTRIBUTES */
  Attributes: GPT_ATTRIBUTES;
  /** array */
  Name: Deno.PointerValue | null;
}

export const sizeofPARTITION_INFORMATION_GPT = 32;

export function allocPARTITION_INFORMATION_GPT(data?: Partial<PARTITION_INFORMATION_GPT>): Uint8Array {
  const buf = new Uint8Array(sizeofPARTITION_INFORMATION_GPT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PartitionType !== undefined) view.setBigUint64(0, data.PartitionType === null ? 0n : util.toBigInt(util.toPointer(data.PartitionType)), true);
  // 0x08: pointer
  if (data?.PartitionId !== undefined) view.setBigUint64(8, data.PartitionId === null ? 0n : util.toBigInt(util.toPointer(data.PartitionId)), true);
  // 0x10: u64
  if (data?.Attributes !== undefined) view.setBigUint64(16, util.toBigInt(data.Attributes), true);
  // 0x18: pointer
  if (data?.Name !== undefined) view.setBigUint64(24, data.Name === null ? 0n : util.toBigInt(util.toPointer(data.Name)), true);
  return buf;
}

export class PARTITION_INFORMATION_GPTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PartitionType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get PartitionId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u64
  get Attributes(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: pointer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set PartitionType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set PartitionId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u64
  set Attributes(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: pointer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.PARTITION_INFORMATION_MBR (size: 40)
 */
export interface PARTITION_INFORMATION_MBR {
  /** u8 */
  PartitionType: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  BootIndicator: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  RecognizedPartition: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  HiddenSectors: number;
  /** System.Guid */
  PartitionId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPARTITION_INFORMATION_MBR = 40;

export function allocPARTITION_INFORMATION_MBR(data?: Partial<PARTITION_INFORMATION_MBR>): Uint8Array {
  const buf = new Uint8Array(sizeofPARTITION_INFORMATION_MBR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.PartitionType !== undefined) view.setUint8(0, Number(data.PartitionType));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.BootIndicator !== undefined) view.setBigUint64(8, data.BootIndicator === null ? 0n : util.toBigInt(util.toPointer(data.BootIndicator)), true);
  // 0x10: pointer
  if (data?.RecognizedPartition !== undefined) view.setBigUint64(16, data.RecognizedPartition === null ? 0n : util.toBigInt(util.toPointer(data.RecognizedPartition)), true);
  // 0x18: u32
  if (data?.HiddenSectors !== undefined) view.setUint32(24, Number(data.HiddenSectors), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.PartitionId !== undefined) view.setBigUint64(32, data.PartitionId === null ? 0n : util.toBigInt(util.toPointer(data.PartitionId)), true);
  return buf;
}

export class PARTITION_INFORMATION_MBRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get PartitionType(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x08: pointer
  get BootIndicator(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get RecognizedPartition(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get HiddenSectors(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get PartitionId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set PartitionType(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7

  // 0x08: pointer
  set BootIndicator(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set RecognizedPartition(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set HiddenSectors(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set PartitionId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SET_PARTITION_INFORMATION_EX (size: 16)
 */
export interface SET_PARTITION_INFORMATION_EX {
  /** Windows.Win32.System.Ioctl.PARTITION_STYLE */
  PartitionStyle: PARTITION_STYLE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSET_PARTITION_INFORMATION_EX = 16;

export function allocSET_PARTITION_INFORMATION_EX(data?: Partial<SET_PARTITION_INFORMATION_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofSET_PARTITION_INFORMATION_EX);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.PartitionStyle !== undefined) view.setInt32(0, Number(data.PartitionStyle), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class SET_PARTITION_INFORMATION_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get PartitionStyle(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set PartitionStyle(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.CREATE_DISK_GPT (size: 16)
 */
export interface CREATE_DISK_GPT {
  /** System.Guid */
  DiskId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  MaxPartitionCount: number;
}

export const sizeofCREATE_DISK_GPT = 16;

export function allocCREATE_DISK_GPT(data?: Partial<CREATE_DISK_GPT>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_DISK_GPT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DiskId !== undefined) view.setBigUint64(0, data.DiskId === null ? 0n : util.toBigInt(util.toPointer(data.DiskId)), true);
  // 0x08: u32
  if (data?.MaxPartitionCount !== undefined) view.setUint32(8, Number(data.MaxPartitionCount), true);
  // 0x0c: pad4
  return buf;
}

export class CREATE_DISK_GPTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DiskId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get MaxPartitionCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set DiskId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set MaxPartitionCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Ioctl.CREATE_DISK_MBR (size: 8)
 */
export interface CREATE_DISK_MBR {
  /** u32 */
  Signature: number;
}

export const sizeofCREATE_DISK_MBR = 8;

export function allocCREATE_DISK_MBR(data?: Partial<CREATE_DISK_MBR>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_DISK_MBR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Signature !== undefined) view.setUint32(0, Number(data.Signature), true);
  // 0x04: pad4
  return buf;
}

export class CREATE_DISK_MBRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Signature(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set Signature(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Ioctl.CREATE_DISK (size: 16)
 */
export interface CREATE_DISK {
  /** Windows.Win32.System.Ioctl.PARTITION_STYLE */
  PartitionStyle: PARTITION_STYLE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCREATE_DISK = 16;

export function allocCREATE_DISK(data?: Partial<CREATE_DISK>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_DISK);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.PartitionStyle !== undefined) view.setInt32(0, Number(data.PartitionStyle), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class CREATE_DISKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get PartitionStyle(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set PartitionStyle(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.GET_LENGTH_INFORMATION (size: 8)
 */
export interface GET_LENGTH_INFORMATION {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  Length: Uint8Array | Deno.PointerValue | null;
}

export const sizeofGET_LENGTH_INFORMATION = 8;

export function allocGET_LENGTH_INFORMATION(data?: Partial<GET_LENGTH_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofGET_LENGTH_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Length !== undefined) view.setBigUint64(0, data.Length === null ? 0n : util.toBigInt(util.toPointer(data.Length)), true);
  return buf;
}

export class GET_LENGTH_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Length(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Length(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.PARTITION_INFORMATION_EX (size: 56)
 */
export interface PARTITION_INFORMATION_EX {
  /** Windows.Win32.System.Ioctl.PARTITION_STYLE */
  PartitionStyle: PARTITION_STYLE;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  StartingOffset: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PartitionLength: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  PartitionNumber: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  RewritePartition: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  IsServicePartition: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPARTITION_INFORMATION_EX = 56;

export function allocPARTITION_INFORMATION_EX(data?: Partial<PARTITION_INFORMATION_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofPARTITION_INFORMATION_EX);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.PartitionStyle !== undefined) view.setInt32(0, Number(data.PartitionStyle), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.StartingOffset !== undefined) view.setBigUint64(8, data.StartingOffset === null ? 0n : util.toBigInt(util.toPointer(data.StartingOffset)), true);
  // 0x10: pointer
  if (data?.PartitionLength !== undefined) view.setBigUint64(16, data.PartitionLength === null ? 0n : util.toBigInt(util.toPointer(data.PartitionLength)), true);
  // 0x18: u32
  if (data?.PartitionNumber !== undefined) view.setUint32(24, Number(data.PartitionNumber), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.RewritePartition !== undefined) view.setBigUint64(32, data.RewritePartition === null ? 0n : util.toBigInt(util.toPointer(data.RewritePartition)), true);
  // 0x28: pointer
  if (data?.IsServicePartition !== undefined) view.setBigUint64(40, data.IsServicePartition === null ? 0n : util.toBigInt(util.toPointer(data.IsServicePartition)), true);
  // 0x30: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(48, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class PARTITION_INFORMATION_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get PartitionStyle(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get StartingOffset(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get PartitionLength(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get PartitionNumber(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get RewritePartition(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get IsServicePartition(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set PartitionStyle(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set StartingOffset(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set PartitionLength(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set PartitionNumber(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set RewritePartition(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set IsServicePartition(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DRIVE_LAYOUT_INFORMATION_GPT (size: 32)
 */
export interface DRIVE_LAYOUT_INFORMATION_GPT {
  /** System.Guid */
  DiskId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  StartingUsableOffset: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  UsableLength: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  MaxPartitionCount: number;
}

export const sizeofDRIVE_LAYOUT_INFORMATION_GPT = 32;

export function allocDRIVE_LAYOUT_INFORMATION_GPT(data?: Partial<DRIVE_LAYOUT_INFORMATION_GPT>): Uint8Array {
  const buf = new Uint8Array(sizeofDRIVE_LAYOUT_INFORMATION_GPT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DiskId !== undefined) view.setBigUint64(0, data.DiskId === null ? 0n : util.toBigInt(util.toPointer(data.DiskId)), true);
  // 0x08: pointer
  if (data?.StartingUsableOffset !== undefined) view.setBigUint64(8, data.StartingUsableOffset === null ? 0n : util.toBigInt(util.toPointer(data.StartingUsableOffset)), true);
  // 0x10: pointer
  if (data?.UsableLength !== undefined) view.setBigUint64(16, data.UsableLength === null ? 0n : util.toBigInt(util.toPointer(data.UsableLength)), true);
  // 0x18: u32
  if (data?.MaxPartitionCount !== undefined) view.setUint32(24, Number(data.MaxPartitionCount), true);
  // 0x1c: pad4
  return buf;
}

export class DRIVE_LAYOUT_INFORMATION_GPTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DiskId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get StartingUsableOffset(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get UsableLength(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get MaxPartitionCount(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set DiskId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set StartingUsableOffset(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set UsableLength(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set MaxPartitionCount(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.System.Ioctl.DRIVE_LAYOUT_INFORMATION_MBR (size: 8)
 */
export interface DRIVE_LAYOUT_INFORMATION_MBR {
  /** u32 */
  Signature: number;
  /** u32 */
  CheckSum: number;
}

export const sizeofDRIVE_LAYOUT_INFORMATION_MBR = 8;

export function allocDRIVE_LAYOUT_INFORMATION_MBR(data?: Partial<DRIVE_LAYOUT_INFORMATION_MBR>): Uint8Array {
  const buf = new Uint8Array(sizeofDRIVE_LAYOUT_INFORMATION_MBR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Signature !== undefined) view.setUint32(0, Number(data.Signature), true);
  // 0x04: u32
  if (data?.CheckSum !== undefined) view.setUint32(4, Number(data.CheckSum), true);
  return buf;
}

export class DRIVE_LAYOUT_INFORMATION_MBRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Signature(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get CheckSum(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set Signature(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set CheckSum(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DRIVE_LAYOUT_INFORMATION_EX (size: 24)
 */
export interface DRIVE_LAYOUT_INFORMATION_EX {
  /** u32 */
  PartitionStyle: number;
  /** u32 */
  PartitionCount: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  PartitionEntry: Deno.PointerValue | null;
}

export const sizeofDRIVE_LAYOUT_INFORMATION_EX = 24;

export function allocDRIVE_LAYOUT_INFORMATION_EX(data?: Partial<DRIVE_LAYOUT_INFORMATION_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofDRIVE_LAYOUT_INFORMATION_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PartitionStyle !== undefined) view.setUint32(0, Number(data.PartitionStyle), true);
  // 0x04: u32
  if (data?.PartitionCount !== undefined) view.setUint32(4, Number(data.PartitionCount), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: pointer
  if (data?.PartitionEntry !== undefined) view.setBigUint64(16, data.PartitionEntry === null ? 0n : util.toBigInt(util.toPointer(data.PartitionEntry)), true);
  return buf;
}

export class DRIVE_LAYOUT_INFORMATION_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get PartitionStyle(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get PartitionCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get PartitionEntry(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set PartitionStyle(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set PartitionCount(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set PartitionEntry(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DISK_INT13_INFO (size: 16)
 */
export interface DISK_INT13_INFO {
  /** u16 */
  DriveSelect: number;
  /** u32 */
  MaxCylinders: number;
  /** u16 */
  SectorsPerTrack: number;
  /** u16 */
  MaxHeads: number;
  /** u16 */
  NumberDrives: number;
}

export const sizeofDISK_INT13_INFO = 16;

export function allocDISK_INT13_INFO(data?: Partial<DISK_INT13_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDISK_INT13_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.DriveSelect !== undefined) view.setUint16(0, Number(data.DriveSelect), true);
  // 0x02: u32
  if (data?.MaxCylinders !== undefined) view.setUint32(2, Number(data.MaxCylinders), true);
  // 0x06: u16
  if (data?.SectorsPerTrack !== undefined) view.setUint16(6, Number(data.SectorsPerTrack), true);
  // 0x08: u16
  if (data?.MaxHeads !== undefined) view.setUint16(8, Number(data.MaxHeads), true);
  // 0x0a: u16
  if (data?.NumberDrives !== undefined) view.setUint16(10, Number(data.NumberDrives), true);
  // 0x0c: pad4
  return buf;
}

export class DISK_INT13_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get DriveSelect(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u32
  get MaxCylinders(): number {
    return this.view.getUint32(2, true);
  }

  // 0x06: u16
  get SectorsPerTrack(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u16
  get MaxHeads(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get NumberDrives(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: pad4

  // 0x00: u16
  set DriveSelect(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u32
  set MaxCylinders(value: number) {
    this.view.setUint32(2, value, true);
  }

  // 0x06: u16
  set SectorsPerTrack(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u16
  set MaxHeads(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set NumberDrives(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Ioctl.DISK_EX_INT13_INFO (size: 32)
 */
export interface DISK_EX_INT13_INFO {
  /** u16 */
  ExBufferSize: number;
  /** u16 */
  ExFlags: number;
  /** u32 */
  ExCylinders: number;
  /** u32 */
  ExHeads: number;
  /** u32 */
  ExSectorsPerTrack: number;
  /** u64 */
  ExSectorsPerDrive: number | bigint;
  /** u16 */
  ExSectorSize: number;
  /** u16 */
  ExReserved: number;
}

export const sizeofDISK_EX_INT13_INFO = 32;

export function allocDISK_EX_INT13_INFO(data?: Partial<DISK_EX_INT13_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDISK_EX_INT13_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ExBufferSize !== undefined) view.setUint16(0, Number(data.ExBufferSize), true);
  // 0x02: u16
  if (data?.ExFlags !== undefined) view.setUint16(2, Number(data.ExFlags), true);
  // 0x04: u32
  if (data?.ExCylinders !== undefined) view.setUint32(4, Number(data.ExCylinders), true);
  // 0x08: u32
  if (data?.ExHeads !== undefined) view.setUint32(8, Number(data.ExHeads), true);
  // 0x0c: u32
  if (data?.ExSectorsPerTrack !== undefined) view.setUint32(12, Number(data.ExSectorsPerTrack), true);
  // 0x10: u64
  if (data?.ExSectorsPerDrive !== undefined) view.setBigUint64(16, util.toBigInt(data.ExSectorsPerDrive), true);
  // 0x18: u16
  if (data?.ExSectorSize !== undefined) view.setUint16(24, Number(data.ExSectorSize), true);
  // 0x1a: u16
  if (data?.ExReserved !== undefined) view.setUint16(26, Number(data.ExReserved), true);
  // 0x1c: pad4
  return buf;
}

export class DISK_EX_INT13_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get ExBufferSize(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get ExFlags(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get ExCylinders(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ExHeads(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ExSectorsPerTrack(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u64
  get ExSectorsPerDrive(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u16
  get ExSectorSize(): number {
    return this.view.getUint16(24, true);
  }

  // 0x1a: u16
  get ExReserved(): number {
    return this.view.getUint16(26, true);
  }

  // 0x1c: pad4

  // 0x00: u16
  set ExBufferSize(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set ExFlags(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set ExCylinders(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ExHeads(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ExSectorsPerTrack(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u64
  set ExSectorsPerDrive(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u16
  set ExSectorSize(value: number) {
    this.view.setUint16(24, value, true);
  }

  // 0x1a: u16
  set ExReserved(value: number) {
    this.view.setUint16(26, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.System.Ioctl.DISK_DETECTION_INFO (size: 16)
 */
export interface DISK_DETECTION_INFO {
  /** u32 */
  SizeOfDetectInfo: number;
  /** Windows.Win32.System.Ioctl.DETECTION_TYPE */
  DetectionType: DETECTION_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDISK_DETECTION_INFO = 16;

export function allocDISK_DETECTION_INFO(data?: Partial<DISK_DETECTION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDISK_DETECTION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfDetectInfo !== undefined) view.setUint32(0, Number(data.SizeOfDetectInfo), true);
  // 0x04: i32
  if (data?.DetectionType !== undefined) view.setInt32(4, Number(data.DetectionType), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class DISK_DETECTION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SizeOfDetectInfo(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get DetectionType(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set SizeOfDetectInfo(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set DetectionType(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DISK_PARTITION_INFO (size: 16)
 */
export interface DISK_PARTITION_INFO {
  /** u32 */
  SizeOfPartitionInfo: number;
  /** Windows.Win32.System.Ioctl.PARTITION_STYLE */
  PartitionStyle: PARTITION_STYLE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDISK_PARTITION_INFO = 16;

export function allocDISK_PARTITION_INFO(data?: Partial<DISK_PARTITION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDISK_PARTITION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfPartitionInfo !== undefined) view.setUint32(0, Number(data.SizeOfPartitionInfo), true);
  // 0x04: i32
  if (data?.PartitionStyle !== undefined) view.setInt32(4, Number(data.PartitionStyle), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class DISK_PARTITION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SizeOfPartitionInfo(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get PartitionStyle(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set SizeOfPartitionInfo(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set PartitionStyle(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DISK_GEOMETRY_EX (size: 24)
 */
export interface DISK_GEOMETRY_EX {
  /** Windows.Win32.System.Ioctl.DISK_GEOMETRY */
  Geometry: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  DiskSize: Uint8Array | Deno.PointerValue | null;
  /** array */
  Data: Deno.PointerValue | null;
}

export const sizeofDISK_GEOMETRY_EX = 24;

export function allocDISK_GEOMETRY_EX(data?: Partial<DISK_GEOMETRY_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofDISK_GEOMETRY_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Geometry !== undefined) view.setBigUint64(0, data.Geometry === null ? 0n : util.toBigInt(util.toPointer(data.Geometry)), true);
  // 0x08: pointer
  if (data?.DiskSize !== undefined) view.setBigUint64(8, data.DiskSize === null ? 0n : util.toBigInt(util.toPointer(data.DiskSize)), true);
  // 0x10: pointer
  if (data?.Data !== undefined) view.setBigUint64(16, data.Data === null ? 0n : util.toBigInt(util.toPointer(data.Data)), true);
  return buf;
}

export class DISK_GEOMETRY_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Geometry(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get DiskSize(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Data(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Geometry(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set DiskSize(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Data(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DISK_CONTROLLER_NUMBER (size: 8)
 */
export interface DISK_CONTROLLER_NUMBER {
  /** u32 */
  ControllerNumber: number;
  /** u32 */
  DiskNumber: number;
}

export const sizeofDISK_CONTROLLER_NUMBER = 8;

export function allocDISK_CONTROLLER_NUMBER(data?: Partial<DISK_CONTROLLER_NUMBER>): Uint8Array {
  const buf = new Uint8Array(sizeofDISK_CONTROLLER_NUMBER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ControllerNumber !== undefined) view.setUint32(0, Number(data.ControllerNumber), true);
  // 0x04: u32
  if (data?.DiskNumber !== undefined) view.setUint32(4, Number(data.DiskNumber), true);
  return buf;
}

export class DISK_CONTROLLER_NUMBERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ControllerNumber(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get DiskNumber(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set ControllerNumber(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set DiskNumber(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DISK_CACHE_INFORMATION (size: 56)
 */
export interface DISK_CACHE_INFORMATION {
  /** Windows.Win32.Foundation.BOOLEAN */
  ParametersSavable: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  ReadCacheEnabled: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  WriteCacheEnabled: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Ioctl.DISK_CACHE_RETENTION_PRIORITY */
  ReadRetentionPriority: DISK_CACHE_RETENTION_PRIORITY;
  /** Windows.Win32.System.Ioctl.DISK_CACHE_RETENTION_PRIORITY */
  WriteRetentionPriority: DISK_CACHE_RETENTION_PRIORITY;
  /** u16 */
  DisablePrefetchTransferLength: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  PrefetchScalar: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDISK_CACHE_INFORMATION = 56;

export function allocDISK_CACHE_INFORMATION(data?: Partial<DISK_CACHE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofDISK_CACHE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ParametersSavable !== undefined) view.setBigUint64(0, data.ParametersSavable === null ? 0n : util.toBigInt(util.toPointer(data.ParametersSavable)), true);
  // 0x08: pointer
  if (data?.ReadCacheEnabled !== undefined) view.setBigUint64(8, data.ReadCacheEnabled === null ? 0n : util.toBigInt(util.toPointer(data.ReadCacheEnabled)), true);
  // 0x10: pointer
  if (data?.WriteCacheEnabled !== undefined) view.setBigUint64(16, data.WriteCacheEnabled === null ? 0n : util.toBigInt(util.toPointer(data.WriteCacheEnabled)), true);
  // 0x18: i32
  if (data?.ReadRetentionPriority !== undefined) view.setInt32(24, Number(data.ReadRetentionPriority), true);
  // 0x1c: i32
  if (data?.WriteRetentionPriority !== undefined) view.setInt32(28, Number(data.WriteRetentionPriority), true);
  // 0x20: u16
  if (data?.DisablePrefetchTransferLength !== undefined) view.setUint16(32, Number(data.DisablePrefetchTransferLength), true);
  // 0x22: pad6
  // 0x28: pointer
  if (data?.PrefetchScalar !== undefined) view.setBigUint64(40, data.PrefetchScalar === null ? 0n : util.toBigInt(util.toPointer(data.PrefetchScalar)), true);
  // 0x30: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(48, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class DISK_CACHE_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ParametersSavable(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get ReadCacheEnabled(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get WriteCacheEnabled(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: i32
  get ReadRetentionPriority(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get WriteRetentionPriority(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: u16
  get DisablePrefetchTransferLength(): number {
    return this.view.getUint16(32, true);
  }

  // 0x22: pad6

  // 0x28: pointer
  get PrefetchScalar(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ParametersSavable(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set ReadCacheEnabled(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set WriteCacheEnabled(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: i32
  set ReadRetentionPriority(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set WriteRetentionPriority(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: u16
  set DisablePrefetchTransferLength(value: number) {
    this.view.setUint16(32, value, true);
  }

  // 0x22: pad6

  // 0x28: pointer
  set PrefetchScalar(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DISK_GROW_PARTITION (size: 16)
 */
export interface DISK_GROW_PARTITION {
  /** u32 */
  PartitionNumber: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  BytesToGrow: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDISK_GROW_PARTITION = 16;

export function allocDISK_GROW_PARTITION(data?: Partial<DISK_GROW_PARTITION>): Uint8Array {
  const buf = new Uint8Array(sizeofDISK_GROW_PARTITION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PartitionNumber !== undefined) view.setUint32(0, Number(data.PartitionNumber), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.BytesToGrow !== undefined) view.setBigUint64(8, data.BytesToGrow === null ? 0n : util.toBigInt(util.toPointer(data.BytesToGrow)), true);
  return buf;
}

export class DISK_GROW_PARTITIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get PartitionNumber(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get BytesToGrow(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set PartitionNumber(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set BytesToGrow(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.HISTOGRAM_BUCKET (size: 8)
 */
export interface HISTOGRAM_BUCKET {
  /** u32 */
  Reads: number;
  /** u32 */
  Writes: number;
}

export const sizeofHISTOGRAM_BUCKET = 8;

export function allocHISTOGRAM_BUCKET(data?: Partial<HISTOGRAM_BUCKET>): Uint8Array {
  const buf = new Uint8Array(sizeofHISTOGRAM_BUCKET);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Reads !== undefined) view.setUint32(0, Number(data.Reads), true);
  // 0x04: u32
  if (data?.Writes !== undefined) view.setUint32(4, Number(data.Writes), true);
  return buf;
}

export class HISTOGRAM_BUCKETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Reads(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Writes(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set Reads(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Writes(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DISK_HISTOGRAM (size: 72)
 */
export interface DISK_HISTOGRAM {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  DiskSize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  Start: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  End: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  Average: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  AverageRead: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  AverageWrite: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Granularity: number;
  /** u32 */
  Size: number;
  /** u32 */
  ReadCount: number;
  /** u32 */
  WriteCount: number;
  /** ptr */
  Histogram: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDISK_HISTOGRAM = 72;

export function allocDISK_HISTOGRAM(data?: Partial<DISK_HISTOGRAM>): Uint8Array {
  const buf = new Uint8Array(sizeofDISK_HISTOGRAM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DiskSize !== undefined) view.setBigUint64(0, data.DiskSize === null ? 0n : util.toBigInt(util.toPointer(data.DiskSize)), true);
  // 0x08: pointer
  if (data?.Start !== undefined) view.setBigUint64(8, data.Start === null ? 0n : util.toBigInt(util.toPointer(data.Start)), true);
  // 0x10: pointer
  if (data?.End !== undefined) view.setBigUint64(16, data.End === null ? 0n : util.toBigInt(util.toPointer(data.End)), true);
  // 0x18: pointer
  if (data?.Average !== undefined) view.setBigUint64(24, data.Average === null ? 0n : util.toBigInt(util.toPointer(data.Average)), true);
  // 0x20: pointer
  if (data?.AverageRead !== undefined) view.setBigUint64(32, data.AverageRead === null ? 0n : util.toBigInt(util.toPointer(data.AverageRead)), true);
  // 0x28: pointer
  if (data?.AverageWrite !== undefined) view.setBigUint64(40, data.AverageWrite === null ? 0n : util.toBigInt(util.toPointer(data.AverageWrite)), true);
  // 0x30: u32
  if (data?.Granularity !== undefined) view.setUint32(48, Number(data.Granularity), true);
  // 0x34: u32
  if (data?.Size !== undefined) view.setUint32(52, Number(data.Size), true);
  // 0x38: u32
  if (data?.ReadCount !== undefined) view.setUint32(56, Number(data.ReadCount), true);
  // 0x3c: u32
  if (data?.WriteCount !== undefined) view.setUint32(60, Number(data.WriteCount), true);
  // 0x40: pointer
  if (data?.Histogram !== undefined) view.setBigUint64(64, data.Histogram === null ? 0n : util.toBigInt(util.toPointer(data.Histogram)), true);
  return buf;
}

export class DISK_HISTOGRAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DiskSize(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Start(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get End(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Average(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get AverageRead(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get AverageWrite(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get Granularity(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get Size(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get ReadCount(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get WriteCount(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: pointer
  get Histogram(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set DiskSize(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Start(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set End(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Average(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set AverageRead(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set AverageWrite(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set Granularity(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set Size(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set ReadCount(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set WriteCount(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: pointer
  set Histogram(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DISK_PERFORMANCE (size: 80)
 */
export interface DISK_PERFORMANCE {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  BytesRead: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  BytesWritten: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ReadTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  WriteTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  IdleTime: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ReadCount: number;
  /** u32 */
  WriteCount: number;
  /** u32 */
  QueueDepth: number;
  /** u32 */
  SplitCount: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  QueryTime: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  StorageDeviceNumber: number;
  /** array */
  StorageManagerName: Deno.PointerValue | null;
}

export const sizeofDISK_PERFORMANCE = 80;

export function allocDISK_PERFORMANCE(data?: Partial<DISK_PERFORMANCE>): Uint8Array {
  const buf = new Uint8Array(sizeofDISK_PERFORMANCE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.BytesRead !== undefined) view.setBigUint64(0, data.BytesRead === null ? 0n : util.toBigInt(util.toPointer(data.BytesRead)), true);
  // 0x08: pointer
  if (data?.BytesWritten !== undefined) view.setBigUint64(8, data.BytesWritten === null ? 0n : util.toBigInt(util.toPointer(data.BytesWritten)), true);
  // 0x10: pointer
  if (data?.ReadTime !== undefined) view.setBigUint64(16, data.ReadTime === null ? 0n : util.toBigInt(util.toPointer(data.ReadTime)), true);
  // 0x18: pointer
  if (data?.WriteTime !== undefined) view.setBigUint64(24, data.WriteTime === null ? 0n : util.toBigInt(util.toPointer(data.WriteTime)), true);
  // 0x20: pointer
  if (data?.IdleTime !== undefined) view.setBigUint64(32, data.IdleTime === null ? 0n : util.toBigInt(util.toPointer(data.IdleTime)), true);
  // 0x28: u32
  if (data?.ReadCount !== undefined) view.setUint32(40, Number(data.ReadCount), true);
  // 0x2c: u32
  if (data?.WriteCount !== undefined) view.setUint32(44, Number(data.WriteCount), true);
  // 0x30: u32
  if (data?.QueueDepth !== undefined) view.setUint32(48, Number(data.QueueDepth), true);
  // 0x34: u32
  if (data?.SplitCount !== undefined) view.setUint32(52, Number(data.SplitCount), true);
  // 0x38: pointer
  if (data?.QueryTime !== undefined) view.setBigUint64(56, data.QueryTime === null ? 0n : util.toBigInt(util.toPointer(data.QueryTime)), true);
  // 0x40: u32
  if (data?.StorageDeviceNumber !== undefined) view.setUint32(64, Number(data.StorageDeviceNumber), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.StorageManagerName !== undefined) view.setBigUint64(72, data.StorageManagerName === null ? 0n : util.toBigInt(util.toPointer(data.StorageManagerName)), true);
  return buf;
}

export class DISK_PERFORMANCEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get BytesRead(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get BytesWritten(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get ReadTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get WriteTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get IdleTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get ReadCount(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get WriteCount(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get QueueDepth(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get SplitCount(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: pointer
  get QueryTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: u32
  get StorageDeviceNumber(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  get StorageManagerName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set BytesRead(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set BytesWritten(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set ReadTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set WriteTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set IdleTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set ReadCount(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set WriteCount(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set QueueDepth(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set SplitCount(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: pointer
  set QueryTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: u32
  set StorageDeviceNumber(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  set StorageManagerName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DISK_RECORD (size: 48)
 */
export interface DISK_RECORD {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ByteOffset: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  StartTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  EndTime: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  VirtualAddress: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumberOfBytes: number;
  /** u8 */
  DeviceNumber: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  ReadRequest: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDISK_RECORD = 48;

export function allocDISK_RECORD(data?: Partial<DISK_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofDISK_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ByteOffset !== undefined) view.setBigUint64(0, data.ByteOffset === null ? 0n : util.toBigInt(util.toPointer(data.ByteOffset)), true);
  // 0x08: pointer
  if (data?.StartTime !== undefined) view.setBigUint64(8, data.StartTime === null ? 0n : util.toBigInt(util.toPointer(data.StartTime)), true);
  // 0x10: pointer
  if (data?.EndTime !== undefined) view.setBigUint64(16, data.EndTime === null ? 0n : util.toBigInt(util.toPointer(data.EndTime)), true);
  // 0x18: pointer
  if (data?.VirtualAddress !== undefined) view.setBigUint64(24, data.VirtualAddress === null ? 0n : util.toBigInt(util.toPointer(data.VirtualAddress)), true);
  // 0x20: u32
  if (data?.NumberOfBytes !== undefined) view.setUint32(32, Number(data.NumberOfBytes), true);
  // 0x24: u8
  if (data?.DeviceNumber !== undefined) view.setUint8(36, Number(data.DeviceNumber));
  // 0x25: pad3
  // 0x28: pointer
  if (data?.ReadRequest !== undefined) view.setBigUint64(40, data.ReadRequest === null ? 0n : util.toBigInt(util.toPointer(data.ReadRequest)), true);
  return buf;
}

export class DISK_RECORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ByteOffset(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get StartTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get EndTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get VirtualAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get NumberOfBytes(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u8
  get DeviceNumber(): number {
    return this.view.getUint8(36);
  }

  // 0x25: pad3

  // 0x28: pointer
  get ReadRequest(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ByteOffset(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set StartTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set EndTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set VirtualAddress(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set NumberOfBytes(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u8
  set DeviceNumber(value: number) {
    this.view.setUint8(36, value);
  }

  // 0x25: pad3

  // 0x28: pointer
  set ReadRequest(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DISK_LOGGING (size: 24)
 */
export interface DISK_LOGGING {
  /** u8 */
  Function: number;
  /** ptr */
  BufferAddress: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  BufferSize: number;
}

export const sizeofDISK_LOGGING = 24;

export function allocDISK_LOGGING(data?: Partial<DISK_LOGGING>): Uint8Array {
  const buf = new Uint8Array(sizeofDISK_LOGGING);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Function !== undefined) view.setUint8(0, Number(data.Function));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.BufferAddress !== undefined) view.setBigUint64(8, data.BufferAddress === null ? 0n : util.toBigInt(util.toPointer(data.BufferAddress)), true);
  // 0x10: u32
  if (data?.BufferSize !== undefined) view.setUint32(16, Number(data.BufferSize), true);
  // 0x14: pad4
  return buf;
}

export class DISK_LOGGINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get Function(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x08: pointer
  get BufferAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get BufferSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u8
  set Function(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7

  // 0x08: pointer
  set BufferAddress(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set BufferSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.System.Ioctl.BIN_RANGE (size: 16)
 */
export interface BIN_RANGE {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  StartValue: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  Length: Uint8Array | Deno.PointerValue | null;
}

export const sizeofBIN_RANGE = 16;

export function allocBIN_RANGE(data?: Partial<BIN_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofBIN_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.StartValue !== undefined) view.setBigUint64(0, data.StartValue === null ? 0n : util.toBigInt(util.toPointer(data.StartValue)), true);
  // 0x08: pointer
  if (data?.Length !== undefined) view.setBigUint64(8, data.Length === null ? 0n : util.toBigInt(util.toPointer(data.Length)), true);
  return buf;
}

export class BIN_RANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get StartValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Length(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set StartValue(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Length(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.PERF_BIN (size: 16)
 */
export interface PERF_BIN {
  /** u32 */
  NumberOfBins: number;
  /** u32 */
  TypeOfBin: number;
  /** array */
  BinsRanges: Deno.PointerValue | null;
}

export const sizeofPERF_BIN = 16;

export function allocPERF_BIN(data?: Partial<PERF_BIN>): Uint8Array {
  const buf = new Uint8Array(sizeofPERF_BIN);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumberOfBins !== undefined) view.setUint32(0, Number(data.NumberOfBins), true);
  // 0x04: u32
  if (data?.TypeOfBin !== undefined) view.setUint32(4, Number(data.TypeOfBin), true);
  // 0x08: pointer
  if (data?.BinsRanges !== undefined) view.setBigUint64(8, data.BinsRanges === null ? 0n : util.toBigInt(util.toPointer(data.BinsRanges)), true);
  return buf;
}

export class PERF_BINView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumberOfBins(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get TypeOfBin(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get BinsRanges(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set NumberOfBins(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set TypeOfBin(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set BinsRanges(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.BIN_COUNT (size: 16)
 */
export interface BIN_COUNT {
  /** Windows.Win32.System.Ioctl.BIN_RANGE */
  BinRange: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  BinCount: number;
}

export const sizeofBIN_COUNT = 16;

export function allocBIN_COUNT(data?: Partial<BIN_COUNT>): Uint8Array {
  const buf = new Uint8Array(sizeofBIN_COUNT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.BinRange !== undefined) view.setBigUint64(0, data.BinRange === null ? 0n : util.toBigInt(util.toPointer(data.BinRange)), true);
  // 0x08: u32
  if (data?.BinCount !== undefined) view.setUint32(8, Number(data.BinCount), true);
  // 0x0c: pad4
  return buf;
}

export class BIN_COUNTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get BinRange(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get BinCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set BinRange(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set BinCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Ioctl.BIN_RESULTS (size: 16)
 */
export interface BIN_RESULTS {
  /** u32 */
  NumberOfBins: number;
  /** array */
  BinCounts: Deno.PointerValue | null;
}

export const sizeofBIN_RESULTS = 16;

export function allocBIN_RESULTS(data?: Partial<BIN_RESULTS>): Uint8Array {
  const buf = new Uint8Array(sizeofBIN_RESULTS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumberOfBins !== undefined) view.setUint32(0, Number(data.NumberOfBins), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.BinCounts !== undefined) view.setBigUint64(8, data.BinCounts === null ? 0n : util.toBigInt(util.toPointer(data.BinCounts)), true);
  return buf;
}

export class BIN_RESULTSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumberOfBins(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get BinCounts(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set NumberOfBins(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set BinCounts(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.GETVERSIONINPARAMS (size: 16)
 */
export interface GETVERSIONINPARAMS {
  /** u8 */
  bVersion: number;
  /** u8 */
  bRevision: number;
  /** u8 */
  bReserved: number;
  /** u8 */
  bIDEDeviceMap: number;
  /** u32 */
  fCapabilities: number;
  /** array */
  dwReserved: Deno.PointerValue | null;
}

export const sizeofGETVERSIONINPARAMS = 16;

export function allocGETVERSIONINPARAMS(data?: Partial<GETVERSIONINPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofGETVERSIONINPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bVersion !== undefined) view.setUint8(0, Number(data.bVersion));
  // 0x01: u8
  if (data?.bRevision !== undefined) view.setUint8(1, Number(data.bRevision));
  // 0x02: u8
  if (data?.bReserved !== undefined) view.setUint8(2, Number(data.bReserved));
  // 0x03: u8
  if (data?.bIDEDeviceMap !== undefined) view.setUint8(3, Number(data.bIDEDeviceMap));
  // 0x04: u32
  if (data?.fCapabilities !== undefined) view.setUint32(4, Number(data.fCapabilities), true);
  // 0x08: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(8, data.dwReserved === null ? 0n : util.toBigInt(util.toPointer(data.dwReserved)), true);
  return buf;
}

export class GETVERSIONINPARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bVersion(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bRevision(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get bReserved(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get bIDEDeviceMap(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u32
  get fCapabilities(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get dwReserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set bVersion(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bRevision(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set bReserved(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set bIDEDeviceMap(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u32
  set fCapabilities(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set dwReserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.IDEREGS (size: 8)
 */
export interface IDEREGS {
  /** u8 */
  bFeaturesReg: number;
  /** u8 */
  bSectorCountReg: number;
  /** u8 */
  bSectorNumberReg: number;
  /** u8 */
  bCylLowReg: number;
  /** u8 */
  bCylHighReg: number;
  /** u8 */
  bDriveHeadReg: number;
  /** u8 */
  bCommandReg: number;
  /** u8 */
  bReserved: number;
}

export const sizeofIDEREGS = 8;

export function allocIDEREGS(data?: Partial<IDEREGS>): Uint8Array {
  const buf = new Uint8Array(sizeofIDEREGS);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bFeaturesReg !== undefined) view.setUint8(0, Number(data.bFeaturesReg));
  // 0x01: u8
  if (data?.bSectorCountReg !== undefined) view.setUint8(1, Number(data.bSectorCountReg));
  // 0x02: u8
  if (data?.bSectorNumberReg !== undefined) view.setUint8(2, Number(data.bSectorNumberReg));
  // 0x03: u8
  if (data?.bCylLowReg !== undefined) view.setUint8(3, Number(data.bCylLowReg));
  // 0x04: u8
  if (data?.bCylHighReg !== undefined) view.setUint8(4, Number(data.bCylHighReg));
  // 0x05: u8
  if (data?.bDriveHeadReg !== undefined) view.setUint8(5, Number(data.bDriveHeadReg));
  // 0x06: u8
  if (data?.bCommandReg !== undefined) view.setUint8(6, Number(data.bCommandReg));
  // 0x07: u8
  if (data?.bReserved !== undefined) view.setUint8(7, Number(data.bReserved));
  return buf;
}

export class IDEREGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bFeaturesReg(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bSectorCountReg(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get bSectorNumberReg(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get bCylLowReg(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u8
  get bCylHighReg(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get bDriveHeadReg(): number {
    return this.view.getUint8(5);
  }

  // 0x06: u8
  get bCommandReg(): number {
    return this.view.getUint8(6);
  }

  // 0x07: u8
  get bReserved(): number {
    return this.view.getUint8(7);
  }

  // 0x00: u8
  set bFeaturesReg(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bSectorCountReg(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set bSectorNumberReg(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set bCylLowReg(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u8
  set bCylHighReg(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set bDriveHeadReg(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: u8
  set bCommandReg(value: number) {
    this.view.setUint8(6, value);
  }

  // 0x07: u8
  set bReserved(value: number) {
    this.view.setUint8(7, value);
  }
}

/**
 * Windows.Win32.System.Ioctl.SENDCMDINPARAMS (size: 48)
 */
export interface SENDCMDINPARAMS {
  /** u32 */
  cBufferSize: number;
  /** Windows.Win32.System.Ioctl.IDEREGS */
  irDriveRegs: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  bDriveNumber: number;
  /** array */
  bReserved: Deno.PointerValue | null;
  /** array */
  dwReserved: Deno.PointerValue | null;
  /** array */
  bBuffer: Deno.PointerValue | null;
}

export const sizeofSENDCMDINPARAMS = 48;

export function allocSENDCMDINPARAMS(data?: Partial<SENDCMDINPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofSENDCMDINPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cBufferSize !== undefined) view.setUint32(0, Number(data.cBufferSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.irDriveRegs !== undefined) view.setBigUint64(8, data.irDriveRegs === null ? 0n : util.toBigInt(util.toPointer(data.irDriveRegs)), true);
  // 0x10: u8
  if (data?.bDriveNumber !== undefined) view.setUint8(16, Number(data.bDriveNumber));
  // 0x11: pad7
  // 0x18: pointer
  if (data?.bReserved !== undefined) view.setBigUint64(24, data.bReserved === null ? 0n : util.toBigInt(util.toPointer(data.bReserved)), true);
  // 0x20: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(32, data.dwReserved === null ? 0n : util.toBigInt(util.toPointer(data.dwReserved)), true);
  // 0x28: pointer
  if (data?.bBuffer !== undefined) view.setBigUint64(40, data.bBuffer === null ? 0n : util.toBigInt(util.toPointer(data.bBuffer)), true);
  return buf;
}

export class SENDCMDINPARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cBufferSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get irDriveRegs(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u8
  get bDriveNumber(): number {
    return this.view.getUint8(16);
  }

  // 0x11: pad7

  // 0x18: pointer
  get bReserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get dwReserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get bBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cBufferSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set irDriveRegs(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u8
  set bDriveNumber(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: pad7

  // 0x18: pointer
  set bReserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set dwReserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set bBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DRIVERSTATUS (size: 24)
 */
export interface DRIVERSTATUS {
  /** u8 */
  bDriverError: number;
  /** u8 */
  bIDEError: number;
  /** array */
  bReserved: Deno.PointerValue | null;
  /** array */
  dwReserved: Deno.PointerValue | null;
}

export const sizeofDRIVERSTATUS = 24;

export function allocDRIVERSTATUS(data?: Partial<DRIVERSTATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofDRIVERSTATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bDriverError !== undefined) view.setUint8(0, Number(data.bDriverError));
  // 0x01: u8
  if (data?.bIDEError !== undefined) view.setUint8(1, Number(data.bIDEError));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.bReserved !== undefined) view.setBigUint64(8, data.bReserved === null ? 0n : util.toBigInt(util.toPointer(data.bReserved)), true);
  // 0x10: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(16, data.dwReserved === null ? 0n : util.toBigInt(util.toPointer(data.dwReserved)), true);
  return buf;
}

export class DRIVERSTATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bDriverError(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bIDEError(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x08: pointer
  get bReserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get dwReserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set bDriverError(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bIDEError(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6

  // 0x08: pointer
  set bReserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set dwReserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SENDCMDOUTPARAMS (size: 24)
 */
export interface SENDCMDOUTPARAMS {
  /** u32 */
  cBufferSize: number;
  /** Windows.Win32.System.Ioctl.DRIVERSTATUS */
  DriverStatus: Uint8Array | Deno.PointerValue | null;
  /** array */
  bBuffer: Deno.PointerValue | null;
}

export const sizeofSENDCMDOUTPARAMS = 24;

export function allocSENDCMDOUTPARAMS(data?: Partial<SENDCMDOUTPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofSENDCMDOUTPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cBufferSize !== undefined) view.setUint32(0, Number(data.cBufferSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.DriverStatus !== undefined) view.setBigUint64(8, data.DriverStatus === null ? 0n : util.toBigInt(util.toPointer(data.DriverStatus)), true);
  // 0x10: pointer
  if (data?.bBuffer !== undefined) view.setBigUint64(16, data.bBuffer === null ? 0n : util.toBigInt(util.toPointer(data.bBuffer)), true);
  return buf;
}

export class SENDCMDOUTPARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cBufferSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get DriverStatus(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get bBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cBufferSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set DriverStatus(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set bBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.GET_DISK_ATTRIBUTES (size: 16)
 */
export interface GET_DISK_ATTRIBUTES {
  /** u32 */
  Version: number;
  /** u32 */
  Reserved1: number;
  /** u64 */
  Attributes: number | bigint;
}

export const sizeofGET_DISK_ATTRIBUTES = 16;

export function allocGET_DISK_ATTRIBUTES(data?: Partial<GET_DISK_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofGET_DISK_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Reserved1 !== undefined) view.setUint32(4, Number(data.Reserved1), true);
  // 0x08: u64
  if (data?.Attributes !== undefined) view.setBigUint64(8, util.toBigInt(data.Attributes), true);
  return buf;
}

export class GET_DISK_ATTRIBUTESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Reserved1(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get Attributes(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Reserved1(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set Attributes(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SET_DISK_ATTRIBUTES (size: 48)
 */
export interface SET_DISK_ATTRIBUTES {
  /** u32 */
  Version: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  Persist: Uint8Array | Deno.PointerValue | null;
  /** array */
  Reserved1: Deno.PointerValue | null;
  /** u64 */
  Attributes: number | bigint;
  /** u64 */
  AttributesMask: number | bigint;
  /** array */
  Reserved2: Deno.PointerValue | null;
}

export const sizeofSET_DISK_ATTRIBUTES = 48;

export function allocSET_DISK_ATTRIBUTES(data?: Partial<SET_DISK_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofSET_DISK_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Persist !== undefined) view.setBigUint64(8, data.Persist === null ? 0n : util.toBigInt(util.toPointer(data.Persist)), true);
  // 0x10: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(16, data.Reserved1 === null ? 0n : util.toBigInt(util.toPointer(data.Reserved1)), true);
  // 0x18: u64
  if (data?.Attributes !== undefined) view.setBigUint64(24, util.toBigInt(data.Attributes), true);
  // 0x20: u64
  if (data?.AttributesMask !== undefined) view.setBigUint64(32, util.toBigInt(data.AttributesMask), true);
  // 0x28: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(40, data.Reserved2 === null ? 0n : util.toBigInt(util.toPointer(data.Reserved2)), true);
  return buf;
}

export class SET_DISK_ATTRIBUTESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Persist(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Reserved1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u64
  get Attributes(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u64
  get AttributesMask(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: pointer
  get Reserved2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Persist(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Reserved1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u64
  set Attributes(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u64
  set AttributesMask(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: pointer
  set Reserved2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.CHANGER_ELEMENT (size: 8)
 */
export interface CHANGER_ELEMENT {
  /** Windows.Win32.System.Ioctl.ELEMENT_TYPE */
  ElementType: ELEMENT_TYPE;
  /** u32 */
  ElementAddress: number;
}

export const sizeofCHANGER_ELEMENT = 8;

export function allocCHANGER_ELEMENT(data?: Partial<CHANGER_ELEMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofCHANGER_ELEMENT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ElementType !== undefined) view.setInt32(0, Number(data.ElementType), true);
  // 0x04: u32
  if (data?.ElementAddress !== undefined) view.setUint32(4, Number(data.ElementAddress), true);
  return buf;
}

export class CHANGER_ELEMENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get ElementType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get ElementAddress(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set ElementType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set ElementAddress(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.CHANGER_ELEMENT_LIST (size: 16)
 */
export interface CHANGER_ELEMENT_LIST {
  /** Windows.Win32.System.Ioctl.CHANGER_ELEMENT */
  Element: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NumberOfElements: number;
}

export const sizeofCHANGER_ELEMENT_LIST = 16;

export function allocCHANGER_ELEMENT_LIST(data?: Partial<CHANGER_ELEMENT_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofCHANGER_ELEMENT_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Element !== undefined) view.setBigUint64(0, data.Element === null ? 0n : util.toBigInt(util.toPointer(data.Element)), true);
  // 0x08: u32
  if (data?.NumberOfElements !== undefined) view.setUint32(8, Number(data.NumberOfElements), true);
  // 0x0c: pad4
  return buf;
}

export class CHANGER_ELEMENT_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Element(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get NumberOfElements(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Element(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set NumberOfElements(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Ioctl.GET_CHANGER_PARAMETERS (size: 72)
 */
export interface GET_CHANGER_PARAMETERS {
  /** u32 */
  Size: number;
  /** u16 */
  NumberTransportElements: number;
  /** u16 */
  NumberStorageElements: number;
  /** u16 */
  NumberCleanerSlots: number;
  /** u16 */
  NumberIEElements: number;
  /** u16 */
  NumberDataTransferElements: number;
  /** u16 */
  NumberOfDoors: number;
  /** u16 */
  FirstSlotNumber: number;
  /** u16 */
  FirstDriveNumber: number;
  /** u16 */
  FirstTransportNumber: number;
  /** u16 */
  FirstIEPortNumber: number;
  /** u16 */
  FirstCleanerSlotAddress: number;
  /** u16 */
  MagazineSize: number;
  /** u32 */
  DriveCleanTimeout: number;
  /** Windows.Win32.System.Ioctl.CHANGER_FEATURES */
  Features0: CHANGER_FEATURES;
  /** Windows.Win32.System.Ioctl.GET_CHANGER_PARAMETERS_FEATURES1 */
  Features1: GET_CHANGER_PARAMETERS_FEATURES1;
  /** u8 */
  MoveFromTransport: number;
  /** u8 */
  MoveFromSlot: number;
  /** u8 */
  MoveFromIePort: number;
  /** u8 */
  MoveFromDrive: number;
  /** u8 */
  ExchangeFromTransport: number;
  /** u8 */
  ExchangeFromSlot: number;
  /** u8 */
  ExchangeFromIePort: number;
  /** u8 */
  ExchangeFromDrive: number;
  /** u8 */
  LockUnlockCapabilities: number;
  /** u8 */
  PositionCapabilities: number;
  /** array */
  Reserved1: Deno.PointerValue | null;
  /** array */
  Reserved2: Deno.PointerValue | null;
}

export const sizeofGET_CHANGER_PARAMETERS = 72;

export function allocGET_CHANGER_PARAMETERS(data?: Partial<GET_CHANGER_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofGET_CHANGER_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u16
  if (data?.NumberTransportElements !== undefined) view.setUint16(4, Number(data.NumberTransportElements), true);
  // 0x06: u16
  if (data?.NumberStorageElements !== undefined) view.setUint16(6, Number(data.NumberStorageElements), true);
  // 0x08: u16
  if (data?.NumberCleanerSlots !== undefined) view.setUint16(8, Number(data.NumberCleanerSlots), true);
  // 0x0a: u16
  if (data?.NumberIEElements !== undefined) view.setUint16(10, Number(data.NumberIEElements), true);
  // 0x0c: u16
  if (data?.NumberDataTransferElements !== undefined) view.setUint16(12, Number(data.NumberDataTransferElements), true);
  // 0x0e: u16
  if (data?.NumberOfDoors !== undefined) view.setUint16(14, Number(data.NumberOfDoors), true);
  // 0x10: u16
  if (data?.FirstSlotNumber !== undefined) view.setUint16(16, Number(data.FirstSlotNumber), true);
  // 0x12: u16
  if (data?.FirstDriveNumber !== undefined) view.setUint16(18, Number(data.FirstDriveNumber), true);
  // 0x14: u16
  if (data?.FirstTransportNumber !== undefined) view.setUint16(20, Number(data.FirstTransportNumber), true);
  // 0x16: u16
  if (data?.FirstIEPortNumber !== undefined) view.setUint16(22, Number(data.FirstIEPortNumber), true);
  // 0x18: u16
  if (data?.FirstCleanerSlotAddress !== undefined) view.setUint16(24, Number(data.FirstCleanerSlotAddress), true);
  // 0x1a: u16
  if (data?.MagazineSize !== undefined) view.setUint16(26, Number(data.MagazineSize), true);
  // 0x1c: u32
  if (data?.DriveCleanTimeout !== undefined) view.setUint32(28, Number(data.DriveCleanTimeout), true);
  // 0x20: u32
  if (data?.Features0 !== undefined) view.setUint32(32, Number(data.Features0), true);
  // 0x24: u32
  if (data?.Features1 !== undefined) view.setUint32(36, Number(data.Features1), true);
  // 0x28: u8
  if (data?.MoveFromTransport !== undefined) view.setUint8(40, Number(data.MoveFromTransport));
  // 0x29: u8
  if (data?.MoveFromSlot !== undefined) view.setUint8(41, Number(data.MoveFromSlot));
  // 0x2a: u8
  if (data?.MoveFromIePort !== undefined) view.setUint8(42, Number(data.MoveFromIePort));
  // 0x2b: u8
  if (data?.MoveFromDrive !== undefined) view.setUint8(43, Number(data.MoveFromDrive));
  // 0x2c: u8
  if (data?.ExchangeFromTransport !== undefined) view.setUint8(44, Number(data.ExchangeFromTransport));
  // 0x2d: u8
  if (data?.ExchangeFromSlot !== undefined) view.setUint8(45, Number(data.ExchangeFromSlot));
  // 0x2e: u8
  if (data?.ExchangeFromIePort !== undefined) view.setUint8(46, Number(data.ExchangeFromIePort));
  // 0x2f: u8
  if (data?.ExchangeFromDrive !== undefined) view.setUint8(47, Number(data.ExchangeFromDrive));
  // 0x30: u8
  if (data?.LockUnlockCapabilities !== undefined) view.setUint8(48, Number(data.LockUnlockCapabilities));
  // 0x31: u8
  if (data?.PositionCapabilities !== undefined) view.setUint8(49, Number(data.PositionCapabilities));
  // 0x32: pad6
  // 0x38: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(56, data.Reserved1 === null ? 0n : util.toBigInt(util.toPointer(data.Reserved1)), true);
  // 0x40: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(64, data.Reserved2 === null ? 0n : util.toBigInt(util.toPointer(data.Reserved2)), true);
  return buf;
}

export class GET_CHANGER_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get NumberTransportElements(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get NumberStorageElements(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u16
  get NumberCleanerSlots(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get NumberIEElements(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u16
  get NumberDataTransferElements(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get NumberOfDoors(): number {
    return this.view.getUint16(14, true);
  }

  // 0x10: u16
  get FirstSlotNumber(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: u16
  get FirstDriveNumber(): number {
    return this.view.getUint16(18, true);
  }

  // 0x14: u16
  get FirstTransportNumber(): number {
    return this.view.getUint16(20, true);
  }

  // 0x16: u16
  get FirstIEPortNumber(): number {
    return this.view.getUint16(22, true);
  }

  // 0x18: u16
  get FirstCleanerSlotAddress(): number {
    return this.view.getUint16(24, true);
  }

  // 0x1a: u16
  get MagazineSize(): number {
    return this.view.getUint16(26, true);
  }

  // 0x1c: u32
  get DriveCleanTimeout(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get Features0(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get Features1(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u8
  get MoveFromTransport(): number {
    return this.view.getUint8(40);
  }

  // 0x29: u8
  get MoveFromSlot(): number {
    return this.view.getUint8(41);
  }

  // 0x2a: u8
  get MoveFromIePort(): number {
    return this.view.getUint8(42);
  }

  // 0x2b: u8
  get MoveFromDrive(): number {
    return this.view.getUint8(43);
  }

  // 0x2c: u8
  get ExchangeFromTransport(): number {
    return this.view.getUint8(44);
  }

  // 0x2d: u8
  get ExchangeFromSlot(): number {
    return this.view.getUint8(45);
  }

  // 0x2e: u8
  get ExchangeFromIePort(): number {
    return this.view.getUint8(46);
  }

  // 0x2f: u8
  get ExchangeFromDrive(): number {
    return this.view.getUint8(47);
  }

  // 0x30: u8
  get LockUnlockCapabilities(): number {
    return this.view.getUint8(48);
  }

  // 0x31: u8
  get PositionCapabilities(): number {
    return this.view.getUint8(49);
  }

  // 0x32: pad6

  // 0x38: pointer
  get Reserved1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get Reserved2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set NumberTransportElements(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set NumberStorageElements(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u16
  set NumberCleanerSlots(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set NumberIEElements(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u16
  set NumberDataTransferElements(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set NumberOfDoors(value: number) {
    this.view.setUint16(14, value, true);
  }

  // 0x10: u16
  set FirstSlotNumber(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: u16
  set FirstDriveNumber(value: number) {
    this.view.setUint16(18, value, true);
  }

  // 0x14: u16
  set FirstTransportNumber(value: number) {
    this.view.setUint16(20, value, true);
  }

  // 0x16: u16
  set FirstIEPortNumber(value: number) {
    this.view.setUint16(22, value, true);
  }

  // 0x18: u16
  set FirstCleanerSlotAddress(value: number) {
    this.view.setUint16(24, value, true);
  }

  // 0x1a: u16
  set MagazineSize(value: number) {
    this.view.setUint16(26, value, true);
  }

  // 0x1c: u32
  set DriveCleanTimeout(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set Features0(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set Features1(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u8
  set MoveFromTransport(value: number) {
    this.view.setUint8(40, value);
  }

  // 0x29: u8
  set MoveFromSlot(value: number) {
    this.view.setUint8(41, value);
  }

  // 0x2a: u8
  set MoveFromIePort(value: number) {
    this.view.setUint8(42, value);
  }

  // 0x2b: u8
  set MoveFromDrive(value: number) {
    this.view.setUint8(43, value);
  }

  // 0x2c: u8
  set ExchangeFromTransport(value: number) {
    this.view.setUint8(44, value);
  }

  // 0x2d: u8
  set ExchangeFromSlot(value: number) {
    this.view.setUint8(45, value);
  }

  // 0x2e: u8
  set ExchangeFromIePort(value: number) {
    this.view.setUint8(46, value);
  }

  // 0x2f: u8
  set ExchangeFromDrive(value: number) {
    this.view.setUint8(47, value);
  }

  // 0x30: u8
  set LockUnlockCapabilities(value: number) {
    this.view.setUint8(48, value);
  }

  // 0x31: u8
  set PositionCapabilities(value: number) {
    this.view.setUint8(49, value);
  }

  // 0x32: pad6

  // 0x38: pointer
  set Reserved1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set Reserved2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.CHANGER_PRODUCT_DATA (size: 40)
 */
export interface CHANGER_PRODUCT_DATA {
  /** array */
  VendorId: Deno.PointerValue | null;
  /** array */
  ProductId: Deno.PointerValue | null;
  /** array */
  Revision: Deno.PointerValue | null;
  /** array */
  SerialNumber: Deno.PointerValue | null;
  /** u8 */
  DeviceType: number;
}

export const sizeofCHANGER_PRODUCT_DATA = 40;

export function allocCHANGER_PRODUCT_DATA(data?: Partial<CHANGER_PRODUCT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofCHANGER_PRODUCT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.VendorId !== undefined) view.setBigUint64(0, data.VendorId === null ? 0n : util.toBigInt(util.toPointer(data.VendorId)), true);
  // 0x08: pointer
  if (data?.ProductId !== undefined) view.setBigUint64(8, data.ProductId === null ? 0n : util.toBigInt(util.toPointer(data.ProductId)), true);
  // 0x10: pointer
  if (data?.Revision !== undefined) view.setBigUint64(16, data.Revision === null ? 0n : util.toBigInt(util.toPointer(data.Revision)), true);
  // 0x18: pointer
  if (data?.SerialNumber !== undefined) view.setBigUint64(24, data.SerialNumber === null ? 0n : util.toBigInt(util.toPointer(data.SerialNumber)), true);
  // 0x20: u8
  if (data?.DeviceType !== undefined) view.setUint8(32, Number(data.DeviceType));
  // 0x21: pad7
  return buf;
}

export class CHANGER_PRODUCT_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get VendorId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get ProductId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Revision(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get SerialNumber(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u8
  get DeviceType(): number {
    return this.view.getUint8(32);
  }

  // 0x21: pad7

  // 0x00: pointer
  set VendorId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set ProductId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Revision(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set SerialNumber(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u8
  set DeviceType(value: number) {
    this.view.setUint8(32, value);
  }

  // 0x21: pad7
}

/**
 * Windows.Win32.System.Ioctl.CHANGER_SET_ACCESS (size: 16)
 */
export interface CHANGER_SET_ACCESS {
  /** Windows.Win32.System.Ioctl.CHANGER_ELEMENT */
  Element: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Control: number;
}

export const sizeofCHANGER_SET_ACCESS = 16;

export function allocCHANGER_SET_ACCESS(data?: Partial<CHANGER_SET_ACCESS>): Uint8Array {
  const buf = new Uint8Array(sizeofCHANGER_SET_ACCESS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Element !== undefined) view.setBigUint64(0, data.Element === null ? 0n : util.toBigInt(util.toPointer(data.Element)), true);
  // 0x08: u32
  if (data?.Control !== undefined) view.setUint32(8, Number(data.Control), true);
  // 0x0c: pad4
  return buf;
}

export class CHANGER_SET_ACCESSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Element(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Control(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Element(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set Control(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Ioctl.CHANGER_READ_ELEMENT_STATUS (size: 16)
 */
export interface CHANGER_READ_ELEMENT_STATUS {
  /** Windows.Win32.System.Ioctl.CHANGER_ELEMENT_LIST */
  ElementList: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  VolumeTagInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCHANGER_READ_ELEMENT_STATUS = 16;

export function allocCHANGER_READ_ELEMENT_STATUS(data?: Partial<CHANGER_READ_ELEMENT_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofCHANGER_READ_ELEMENT_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ElementList !== undefined) view.setBigUint64(0, data.ElementList === null ? 0n : util.toBigInt(util.toPointer(data.ElementList)), true);
  // 0x08: pointer
  if (data?.VolumeTagInfo !== undefined) view.setBigUint64(8, data.VolumeTagInfo === null ? 0n : util.toBigInt(util.toPointer(data.VolumeTagInfo)), true);
  return buf;
}

export class CHANGER_READ_ELEMENT_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ElementList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get VolumeTagInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ElementList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set VolumeTagInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.CHANGER_ELEMENT_STATUS (size: 48)
 */
export interface CHANGER_ELEMENT_STATUS {
  /** Windows.Win32.System.Ioctl.CHANGER_ELEMENT */
  Element: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Ioctl.CHANGER_ELEMENT */
  SrcElementAddress: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Ioctl.CHANGER_ELEMENT_STATUS_FLAGS */
  Flags: CHANGER_ELEMENT_STATUS_FLAGS;
  /** u32 */
  ExceptionCode: number;
  /** u8 */
  TargetId: number;
  /** u8 */
  Lun: number;
  /** u16 */
  Reserved: number;
  /** array */
  PrimaryVolumeID: Deno.PointerValue | null;
  /** array */
  AlternateVolumeID: Deno.PointerValue | null;
}

export const sizeofCHANGER_ELEMENT_STATUS = 48;

export function allocCHANGER_ELEMENT_STATUS(data?: Partial<CHANGER_ELEMENT_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofCHANGER_ELEMENT_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Element !== undefined) view.setBigUint64(0, data.Element === null ? 0n : util.toBigInt(util.toPointer(data.Element)), true);
  // 0x08: pointer
  if (data?.SrcElementAddress !== undefined) view.setBigUint64(8, data.SrcElementAddress === null ? 0n : util.toBigInt(util.toPointer(data.SrcElementAddress)), true);
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: u32
  if (data?.ExceptionCode !== undefined) view.setUint32(20, Number(data.ExceptionCode), true);
  // 0x18: u8
  if (data?.TargetId !== undefined) view.setUint8(24, Number(data.TargetId));
  // 0x19: u8
  if (data?.Lun !== undefined) view.setUint8(25, Number(data.Lun));
  // 0x1a: u16
  if (data?.Reserved !== undefined) view.setUint16(26, Number(data.Reserved), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.PrimaryVolumeID !== undefined) view.setBigUint64(32, data.PrimaryVolumeID === null ? 0n : util.toBigInt(util.toPointer(data.PrimaryVolumeID)), true);
  // 0x28: pointer
  if (data?.AlternateVolumeID !== undefined) view.setBigUint64(40, data.AlternateVolumeID === null ? 0n : util.toBigInt(util.toPointer(data.AlternateVolumeID)), true);
  return buf;
}

export class CHANGER_ELEMENT_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Element(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get SrcElementAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get Flags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ExceptionCode(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u8
  get TargetId(): number {
    return this.view.getUint8(24);
  }

  // 0x19: u8
  get Lun(): number {
    return this.view.getUint8(25);
  }

  // 0x1a: u16
  get Reserved(): number {
    return this.view.getUint16(26, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get PrimaryVolumeID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get AlternateVolumeID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Element(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set SrcElementAddress(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set Flags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ExceptionCode(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u8
  set TargetId(value: number) {
    this.view.setUint8(24, value);
  }

  // 0x19: u8
  set Lun(value: number) {
    this.view.setUint8(25, value);
  }

  // 0x1a: u16
  set Reserved(value: number) {
    this.view.setUint16(26, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set PrimaryVolumeID(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set AlternateVolumeID(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.CHANGER_ELEMENT_STATUS_EX (size: 72)
 */
export interface CHANGER_ELEMENT_STATUS_EX {
  /** Windows.Win32.System.Ioctl.CHANGER_ELEMENT */
  Element: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Ioctl.CHANGER_ELEMENT */
  SrcElementAddress: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Ioctl.CHANGER_ELEMENT_STATUS_FLAGS */
  Flags: CHANGER_ELEMENT_STATUS_FLAGS;
  /** u32 */
  ExceptionCode: number;
  /** u8 */
  TargetId: number;
  /** u8 */
  Lun: number;
  /** u16 */
  Reserved: number;
  /** array */
  PrimaryVolumeID: Deno.PointerValue | null;
  /** array */
  AlternateVolumeID: Deno.PointerValue | null;
  /** array */
  VendorIdentification: Deno.PointerValue | null;
  /** array */
  ProductIdentification: Deno.PointerValue | null;
  /** array */
  SerialNumber: Deno.PointerValue | null;
}

export const sizeofCHANGER_ELEMENT_STATUS_EX = 72;

export function allocCHANGER_ELEMENT_STATUS_EX(data?: Partial<CHANGER_ELEMENT_STATUS_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofCHANGER_ELEMENT_STATUS_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Element !== undefined) view.setBigUint64(0, data.Element === null ? 0n : util.toBigInt(util.toPointer(data.Element)), true);
  // 0x08: pointer
  if (data?.SrcElementAddress !== undefined) view.setBigUint64(8, data.SrcElementAddress === null ? 0n : util.toBigInt(util.toPointer(data.SrcElementAddress)), true);
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: u32
  if (data?.ExceptionCode !== undefined) view.setUint32(20, Number(data.ExceptionCode), true);
  // 0x18: u8
  if (data?.TargetId !== undefined) view.setUint8(24, Number(data.TargetId));
  // 0x19: u8
  if (data?.Lun !== undefined) view.setUint8(25, Number(data.Lun));
  // 0x1a: u16
  if (data?.Reserved !== undefined) view.setUint16(26, Number(data.Reserved), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.PrimaryVolumeID !== undefined) view.setBigUint64(32, data.PrimaryVolumeID === null ? 0n : util.toBigInt(util.toPointer(data.PrimaryVolumeID)), true);
  // 0x28: pointer
  if (data?.AlternateVolumeID !== undefined) view.setBigUint64(40, data.AlternateVolumeID === null ? 0n : util.toBigInt(util.toPointer(data.AlternateVolumeID)), true);
  // 0x30: pointer
  if (data?.VendorIdentification !== undefined) view.setBigUint64(48, data.VendorIdentification === null ? 0n : util.toBigInt(util.toPointer(data.VendorIdentification)), true);
  // 0x38: pointer
  if (data?.ProductIdentification !== undefined) view.setBigUint64(56, data.ProductIdentification === null ? 0n : util.toBigInt(util.toPointer(data.ProductIdentification)), true);
  // 0x40: pointer
  if (data?.SerialNumber !== undefined) view.setBigUint64(64, data.SerialNumber === null ? 0n : util.toBigInt(util.toPointer(data.SerialNumber)), true);
  return buf;
}

export class CHANGER_ELEMENT_STATUS_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Element(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get SrcElementAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get Flags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ExceptionCode(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u8
  get TargetId(): number {
    return this.view.getUint8(24);
  }

  // 0x19: u8
  get Lun(): number {
    return this.view.getUint8(25);
  }

  // 0x1a: u16
  get Reserved(): number {
    return this.view.getUint16(26, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get PrimaryVolumeID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get AlternateVolumeID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get VendorIdentification(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get ProductIdentification(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get SerialNumber(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Element(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set SrcElementAddress(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set Flags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ExceptionCode(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u8
  set TargetId(value: number) {
    this.view.setUint8(24, value);
  }

  // 0x19: u8
  set Lun(value: number) {
    this.view.setUint8(25, value);
  }

  // 0x1a: u16
  set Reserved(value: number) {
    this.view.setUint16(26, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set PrimaryVolumeID(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set AlternateVolumeID(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set VendorIdentification(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set ProductIdentification(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set SerialNumber(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.CHANGER_INITIALIZE_ELEMENT_STATUS (size: 16)
 */
export interface CHANGER_INITIALIZE_ELEMENT_STATUS {
  /** Windows.Win32.System.Ioctl.CHANGER_ELEMENT_LIST */
  ElementList: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  BarCodeScan: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCHANGER_INITIALIZE_ELEMENT_STATUS = 16;

export function allocCHANGER_INITIALIZE_ELEMENT_STATUS(data?: Partial<CHANGER_INITIALIZE_ELEMENT_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofCHANGER_INITIALIZE_ELEMENT_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ElementList !== undefined) view.setBigUint64(0, data.ElementList === null ? 0n : util.toBigInt(util.toPointer(data.ElementList)), true);
  // 0x08: pointer
  if (data?.BarCodeScan !== undefined) view.setBigUint64(8, data.BarCodeScan === null ? 0n : util.toBigInt(util.toPointer(data.BarCodeScan)), true);
  return buf;
}

export class CHANGER_INITIALIZE_ELEMENT_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ElementList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get BarCodeScan(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ElementList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set BarCodeScan(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.CHANGER_SET_POSITION (size: 24)
 */
export interface CHANGER_SET_POSITION {
  /** Windows.Win32.System.Ioctl.CHANGER_ELEMENT */
  Transport: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Ioctl.CHANGER_ELEMENT */
  Destination: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  Flip: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCHANGER_SET_POSITION = 24;

export function allocCHANGER_SET_POSITION(data?: Partial<CHANGER_SET_POSITION>): Uint8Array {
  const buf = new Uint8Array(sizeofCHANGER_SET_POSITION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Transport !== undefined) view.setBigUint64(0, data.Transport === null ? 0n : util.toBigInt(util.toPointer(data.Transport)), true);
  // 0x08: pointer
  if (data?.Destination !== undefined) view.setBigUint64(8, data.Destination === null ? 0n : util.toBigInt(util.toPointer(data.Destination)), true);
  // 0x10: pointer
  if (data?.Flip !== undefined) view.setBigUint64(16, data.Flip === null ? 0n : util.toBigInt(util.toPointer(data.Flip)), true);
  return buf;
}

export class CHANGER_SET_POSITIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Transport(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Destination(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Flip(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Transport(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Destination(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Flip(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.CHANGER_EXCHANGE_MEDIUM (size: 48)
 */
export interface CHANGER_EXCHANGE_MEDIUM {
  /** Windows.Win32.System.Ioctl.CHANGER_ELEMENT */
  Transport: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Ioctl.CHANGER_ELEMENT */
  Source: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Ioctl.CHANGER_ELEMENT */
  Destination1: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Ioctl.CHANGER_ELEMENT */
  Destination2: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  Flip1: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  Flip2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCHANGER_EXCHANGE_MEDIUM = 48;

export function allocCHANGER_EXCHANGE_MEDIUM(data?: Partial<CHANGER_EXCHANGE_MEDIUM>): Uint8Array {
  const buf = new Uint8Array(sizeofCHANGER_EXCHANGE_MEDIUM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Transport !== undefined) view.setBigUint64(0, data.Transport === null ? 0n : util.toBigInt(util.toPointer(data.Transport)), true);
  // 0x08: pointer
  if (data?.Source !== undefined) view.setBigUint64(8, data.Source === null ? 0n : util.toBigInt(util.toPointer(data.Source)), true);
  // 0x10: pointer
  if (data?.Destination1 !== undefined) view.setBigUint64(16, data.Destination1 === null ? 0n : util.toBigInt(util.toPointer(data.Destination1)), true);
  // 0x18: pointer
  if (data?.Destination2 !== undefined) view.setBigUint64(24, data.Destination2 === null ? 0n : util.toBigInt(util.toPointer(data.Destination2)), true);
  // 0x20: pointer
  if (data?.Flip1 !== undefined) view.setBigUint64(32, data.Flip1 === null ? 0n : util.toBigInt(util.toPointer(data.Flip1)), true);
  // 0x28: pointer
  if (data?.Flip2 !== undefined) view.setBigUint64(40, data.Flip2 === null ? 0n : util.toBigInt(util.toPointer(data.Flip2)), true);
  return buf;
}

export class CHANGER_EXCHANGE_MEDIUMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Transport(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Source(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Destination1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Destination2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get Flip1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get Flip2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Transport(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Source(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Destination1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Destination2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set Flip1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set Flip2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.CHANGER_MOVE_MEDIUM (size: 32)
 */
export interface CHANGER_MOVE_MEDIUM {
  /** Windows.Win32.System.Ioctl.CHANGER_ELEMENT */
  Transport: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Ioctl.CHANGER_ELEMENT */
  Source: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Ioctl.CHANGER_ELEMENT */
  Destination: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  Flip: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCHANGER_MOVE_MEDIUM = 32;

export function allocCHANGER_MOVE_MEDIUM(data?: Partial<CHANGER_MOVE_MEDIUM>): Uint8Array {
  const buf = new Uint8Array(sizeofCHANGER_MOVE_MEDIUM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Transport !== undefined) view.setBigUint64(0, data.Transport === null ? 0n : util.toBigInt(util.toPointer(data.Transport)), true);
  // 0x08: pointer
  if (data?.Source !== undefined) view.setBigUint64(8, data.Source === null ? 0n : util.toBigInt(util.toPointer(data.Source)), true);
  // 0x10: pointer
  if (data?.Destination !== undefined) view.setBigUint64(16, data.Destination === null ? 0n : util.toBigInt(util.toPointer(data.Destination)), true);
  // 0x18: pointer
  if (data?.Flip !== undefined) view.setBigUint64(24, data.Flip === null ? 0n : util.toBigInt(util.toPointer(data.Flip)), true);
  return buf;
}

export class CHANGER_MOVE_MEDIUMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Transport(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Source(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Destination(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Flip(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Transport(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Source(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Destination(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Flip(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.CHANGER_SEND_VOLUME_TAG_INFORMATION (size: 24)
 */
export interface CHANGER_SEND_VOLUME_TAG_INFORMATION {
  /** Windows.Win32.System.Ioctl.CHANGER_ELEMENT */
  StartingElement: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ActionCode: number;
  /** array */
  VolumeIDTemplate: Deno.PointerValue | null;
}

export const sizeofCHANGER_SEND_VOLUME_TAG_INFORMATION = 24;

export function allocCHANGER_SEND_VOLUME_TAG_INFORMATION(data?: Partial<CHANGER_SEND_VOLUME_TAG_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofCHANGER_SEND_VOLUME_TAG_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.StartingElement !== undefined) view.setBigUint64(0, data.StartingElement === null ? 0n : util.toBigInt(util.toPointer(data.StartingElement)), true);
  // 0x08: u32
  if (data?.ActionCode !== undefined) view.setUint32(8, Number(data.ActionCode), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.VolumeIDTemplate !== undefined) view.setBigUint64(16, data.VolumeIDTemplate === null ? 0n : util.toBigInt(util.toPointer(data.VolumeIDTemplate)), true);
  return buf;
}

export class CHANGER_SEND_VOLUME_TAG_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get StartingElement(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ActionCode(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get VolumeIDTemplate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set StartingElement(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ActionCode(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set VolumeIDTemplate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.READ_ELEMENT_ADDRESS_INFO (size: 16)
 */
export interface READ_ELEMENT_ADDRESS_INFO {
  /** u32 */
  NumberOfElements: number;
  /** array */
  ElementStatus: Deno.PointerValue | null;
}

export const sizeofREAD_ELEMENT_ADDRESS_INFO = 16;

export function allocREAD_ELEMENT_ADDRESS_INFO(data?: Partial<READ_ELEMENT_ADDRESS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofREAD_ELEMENT_ADDRESS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumberOfElements !== undefined) view.setUint32(0, Number(data.NumberOfElements), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ElementStatus !== undefined) view.setBigUint64(8, data.ElementStatus === null ? 0n : util.toBigInt(util.toPointer(data.ElementStatus)), true);
  return buf;
}

export class READ_ELEMENT_ADDRESS_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumberOfElements(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ElementStatus(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set NumberOfElements(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ElementStatus(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.PATHNAME_BUFFER (size: 16)
 */
export interface PATHNAME_BUFFER {
  /** u32 */
  PathNameLength: number;
  /** array */
  Name: Deno.PointerValue | null;
}

export const sizeofPATHNAME_BUFFER = 16;

export function allocPATHNAME_BUFFER(data?: Partial<PATHNAME_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofPATHNAME_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PathNameLength !== undefined) view.setUint32(0, Number(data.PathNameLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Name !== undefined) view.setBigUint64(8, data.Name === null ? 0n : util.toBigInt(util.toPointer(data.Name)), true);
  return buf;
}

export class PATHNAME_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get PathNameLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set PathNameLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FSCTL_QUERY_FAT_BPB_BUFFER (size: 8)
 */
export interface FSCTL_QUERY_FAT_BPB_BUFFER {
  /** array */
  First0x24BytesOfBootSector: Deno.PointerValue | null;
}

export const sizeofFSCTL_QUERY_FAT_BPB_BUFFER = 8;

export function allocFSCTL_QUERY_FAT_BPB_BUFFER(data?: Partial<FSCTL_QUERY_FAT_BPB_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofFSCTL_QUERY_FAT_BPB_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.First0x24BytesOfBootSector !== undefined) view.setBigUint64(0, data.First0x24BytesOfBootSector === null ? 0n : util.toBigInt(util.toPointer(data.First0x24BytesOfBootSector)), true);
  return buf;
}

export class FSCTL_QUERY_FAT_BPB_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get First0x24BytesOfBootSector(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set First0x24BytesOfBootSector(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.NTFS_VOLUME_DATA_BUFFER (size: 96)
 */
export interface NTFS_VOLUME_DATA_BUFFER {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  VolumeSerialNumber: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  NumberSectors: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TotalClusters: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  FreeClusters: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TotalReserved: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  BytesPerSector: number;
  /** u32 */
  BytesPerCluster: number;
  /** u32 */
  BytesPerFileRecordSegment: number;
  /** u32 */
  ClustersPerFileRecordSegment: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  MftValidDataLength: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  MftStartLcn: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  Mft2StartLcn: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  MftZoneStart: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  MftZoneEnd: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNTFS_VOLUME_DATA_BUFFER = 96;

export function allocNTFS_VOLUME_DATA_BUFFER(data?: Partial<NTFS_VOLUME_DATA_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofNTFS_VOLUME_DATA_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.VolumeSerialNumber !== undefined) view.setBigUint64(0, data.VolumeSerialNumber === null ? 0n : util.toBigInt(util.toPointer(data.VolumeSerialNumber)), true);
  // 0x08: pointer
  if (data?.NumberSectors !== undefined) view.setBigUint64(8, data.NumberSectors === null ? 0n : util.toBigInt(util.toPointer(data.NumberSectors)), true);
  // 0x10: pointer
  if (data?.TotalClusters !== undefined) view.setBigUint64(16, data.TotalClusters === null ? 0n : util.toBigInt(util.toPointer(data.TotalClusters)), true);
  // 0x18: pointer
  if (data?.FreeClusters !== undefined) view.setBigUint64(24, data.FreeClusters === null ? 0n : util.toBigInt(util.toPointer(data.FreeClusters)), true);
  // 0x20: pointer
  if (data?.TotalReserved !== undefined) view.setBigUint64(32, data.TotalReserved === null ? 0n : util.toBigInt(util.toPointer(data.TotalReserved)), true);
  // 0x28: u32
  if (data?.BytesPerSector !== undefined) view.setUint32(40, Number(data.BytesPerSector), true);
  // 0x2c: u32
  if (data?.BytesPerCluster !== undefined) view.setUint32(44, Number(data.BytesPerCluster), true);
  // 0x30: u32
  if (data?.BytesPerFileRecordSegment !== undefined) view.setUint32(48, Number(data.BytesPerFileRecordSegment), true);
  // 0x34: u32
  if (data?.ClustersPerFileRecordSegment !== undefined) view.setUint32(52, Number(data.ClustersPerFileRecordSegment), true);
  // 0x38: pointer
  if (data?.MftValidDataLength !== undefined) view.setBigUint64(56, data.MftValidDataLength === null ? 0n : util.toBigInt(util.toPointer(data.MftValidDataLength)), true);
  // 0x40: pointer
  if (data?.MftStartLcn !== undefined) view.setBigUint64(64, data.MftStartLcn === null ? 0n : util.toBigInt(util.toPointer(data.MftStartLcn)), true);
  // 0x48: pointer
  if (data?.Mft2StartLcn !== undefined) view.setBigUint64(72, data.Mft2StartLcn === null ? 0n : util.toBigInt(util.toPointer(data.Mft2StartLcn)), true);
  // 0x50: pointer
  if (data?.MftZoneStart !== undefined) view.setBigUint64(80, data.MftZoneStart === null ? 0n : util.toBigInt(util.toPointer(data.MftZoneStart)), true);
  // 0x58: pointer
  if (data?.MftZoneEnd !== undefined) view.setBigUint64(88, data.MftZoneEnd === null ? 0n : util.toBigInt(util.toPointer(data.MftZoneEnd)), true);
  return buf;
}

export class NTFS_VOLUME_DATA_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get VolumeSerialNumber(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get NumberSectors(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get TotalClusters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get FreeClusters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get TotalReserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get BytesPerSector(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get BytesPerCluster(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get BytesPerFileRecordSegment(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get ClustersPerFileRecordSegment(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: pointer
  get MftValidDataLength(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get MftStartLcn(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get Mft2StartLcn(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get MftZoneStart(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get MftZoneEnd(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set VolumeSerialNumber(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set NumberSectors(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set TotalClusters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set FreeClusters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set TotalReserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set BytesPerSector(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set BytesPerCluster(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set BytesPerFileRecordSegment(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set ClustersPerFileRecordSegment(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: pointer
  set MftValidDataLength(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set MftStartLcn(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set Mft2StartLcn(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set MftZoneStart(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set MftZoneEnd(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.NTFS_EXTENDED_VOLUME_DATA (size: 32)
 */
export interface NTFS_EXTENDED_VOLUME_DATA {
  /** u32 */
  ByteCount: number;
  /** u16 */
  MajorVersion: number;
  /** u16 */
  MinorVersion: number;
  /** u32 */
  BytesPerPhysicalSector: number;
  /** u16 */
  LfsMajorVersion: number;
  /** u16 */
  LfsMinorVersion: number;
  /** u32 */
  MaxDeviceTrimExtentCount: number;
  /** u32 */
  MaxDeviceTrimByteCount: number;
  /** u32 */
  MaxVolumeTrimExtentCount: number;
  /** u32 */
  MaxVolumeTrimByteCount: number;
}

export const sizeofNTFS_EXTENDED_VOLUME_DATA = 32;

export function allocNTFS_EXTENDED_VOLUME_DATA(data?: Partial<NTFS_EXTENDED_VOLUME_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofNTFS_EXTENDED_VOLUME_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ByteCount !== undefined) view.setUint32(0, Number(data.ByteCount), true);
  // 0x04: u16
  if (data?.MajorVersion !== undefined) view.setUint16(4, Number(data.MajorVersion), true);
  // 0x06: u16
  if (data?.MinorVersion !== undefined) view.setUint16(6, Number(data.MinorVersion), true);
  // 0x08: u32
  if (data?.BytesPerPhysicalSector !== undefined) view.setUint32(8, Number(data.BytesPerPhysicalSector), true);
  // 0x0c: u16
  if (data?.LfsMajorVersion !== undefined) view.setUint16(12, Number(data.LfsMajorVersion), true);
  // 0x0e: u16
  if (data?.LfsMinorVersion !== undefined) view.setUint16(14, Number(data.LfsMinorVersion), true);
  // 0x10: u32
  if (data?.MaxDeviceTrimExtentCount !== undefined) view.setUint32(16, Number(data.MaxDeviceTrimExtentCount), true);
  // 0x14: u32
  if (data?.MaxDeviceTrimByteCount !== undefined) view.setUint32(20, Number(data.MaxDeviceTrimByteCount), true);
  // 0x18: u32
  if (data?.MaxVolumeTrimExtentCount !== undefined) view.setUint32(24, Number(data.MaxVolumeTrimExtentCount), true);
  // 0x1c: u32
  if (data?.MaxVolumeTrimByteCount !== undefined) view.setUint32(28, Number(data.MaxVolumeTrimByteCount), true);
  return buf;
}

export class NTFS_EXTENDED_VOLUME_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ByteCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get MajorVersion(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get MinorVersion(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u32
  get BytesPerPhysicalSector(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u16
  get LfsMajorVersion(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get LfsMinorVersion(): number {
    return this.view.getUint16(14, true);
  }

  // 0x10: u32
  get MaxDeviceTrimExtentCount(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get MaxDeviceTrimByteCount(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get MaxVolumeTrimExtentCount(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get MaxVolumeTrimByteCount(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: u32
  set ByteCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set MajorVersion(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set MinorVersion(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u32
  set BytesPerPhysicalSector(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u16
  set LfsMajorVersion(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set LfsMinorVersion(value: number) {
    this.view.setUint16(14, value, true);
  }

  // 0x10: u32
  set MaxDeviceTrimExtentCount(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set MaxDeviceTrimByteCount(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set MaxVolumeTrimExtentCount(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set MaxVolumeTrimByteCount(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.REFS_VOLUME_DATA_BUFFER (size: 88)
 */
export interface REFS_VOLUME_DATA_BUFFER {
  /** u32 */
  ByteCount: number;
  /** u32 */
  MajorVersion: number;
  /** u32 */
  MinorVersion: number;
  /** u32 */
  BytesPerPhysicalSector: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  VolumeSerialNumber: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  NumberSectors: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TotalClusters: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  FreeClusters: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TotalReserved: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  BytesPerSector: number;
  /** u32 */
  BytesPerCluster: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  MaximumSizeOfResidentFile: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  FastTierDataFillRatio: number;
  /** u16 */
  SlowTierDataFillRatio: number;
  /** u32 */
  DestagesFastTierToSlowTierRate: number;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofREFS_VOLUME_DATA_BUFFER = 88;

export function allocREFS_VOLUME_DATA_BUFFER(data?: Partial<REFS_VOLUME_DATA_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofREFS_VOLUME_DATA_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ByteCount !== undefined) view.setUint32(0, Number(data.ByteCount), true);
  // 0x04: u32
  if (data?.MajorVersion !== undefined) view.setUint32(4, Number(data.MajorVersion), true);
  // 0x08: u32
  if (data?.MinorVersion !== undefined) view.setUint32(8, Number(data.MinorVersion), true);
  // 0x0c: u32
  if (data?.BytesPerPhysicalSector !== undefined) view.setUint32(12, Number(data.BytesPerPhysicalSector), true);
  // 0x10: pointer
  if (data?.VolumeSerialNumber !== undefined) view.setBigUint64(16, data.VolumeSerialNumber === null ? 0n : util.toBigInt(util.toPointer(data.VolumeSerialNumber)), true);
  // 0x18: pointer
  if (data?.NumberSectors !== undefined) view.setBigUint64(24, data.NumberSectors === null ? 0n : util.toBigInt(util.toPointer(data.NumberSectors)), true);
  // 0x20: pointer
  if (data?.TotalClusters !== undefined) view.setBigUint64(32, data.TotalClusters === null ? 0n : util.toBigInt(util.toPointer(data.TotalClusters)), true);
  // 0x28: pointer
  if (data?.FreeClusters !== undefined) view.setBigUint64(40, data.FreeClusters === null ? 0n : util.toBigInt(util.toPointer(data.FreeClusters)), true);
  // 0x30: pointer
  if (data?.TotalReserved !== undefined) view.setBigUint64(48, data.TotalReserved === null ? 0n : util.toBigInt(util.toPointer(data.TotalReserved)), true);
  // 0x38: u32
  if (data?.BytesPerSector !== undefined) view.setUint32(56, Number(data.BytesPerSector), true);
  // 0x3c: u32
  if (data?.BytesPerCluster !== undefined) view.setUint32(60, Number(data.BytesPerCluster), true);
  // 0x40: pointer
  if (data?.MaximumSizeOfResidentFile !== undefined) view.setBigUint64(64, data.MaximumSizeOfResidentFile === null ? 0n : util.toBigInt(util.toPointer(data.MaximumSizeOfResidentFile)), true);
  // 0x48: u16
  if (data?.FastTierDataFillRatio !== undefined) view.setUint16(72, Number(data.FastTierDataFillRatio), true);
  // 0x4a: u16
  if (data?.SlowTierDataFillRatio !== undefined) view.setUint16(74, Number(data.SlowTierDataFillRatio), true);
  // 0x4c: u32
  if (data?.DestagesFastTierToSlowTierRate !== undefined) view.setUint32(76, Number(data.DestagesFastTierToSlowTierRate), true);
  // 0x50: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(80, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

export class REFS_VOLUME_DATA_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ByteCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MajorVersion(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get MinorVersion(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get BytesPerPhysicalSector(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get VolumeSerialNumber(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get NumberSectors(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get TotalClusters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get FreeClusters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get TotalReserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get BytesPerSector(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get BytesPerCluster(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: pointer
  get MaximumSizeOfResidentFile(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: u16
  get FastTierDataFillRatio(): number {
    return this.view.getUint16(72, true);
  }

  // 0x4a: u16
  get SlowTierDataFillRatio(): number {
    return this.view.getUint16(74, true);
  }

  // 0x4c: u32
  get DestagesFastTierToSlowTierRate(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ByteCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MajorVersion(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set MinorVersion(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set BytesPerPhysicalSector(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set VolumeSerialNumber(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set NumberSectors(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set TotalClusters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set FreeClusters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set TotalReserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set BytesPerSector(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set BytesPerCluster(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: pointer
  set MaximumSizeOfResidentFile(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: u16
  set FastTierDataFillRatio(value: number) {
    this.view.setUint16(72, value, true);
  }

  // 0x4a: u16
  set SlowTierDataFillRatio(value: number) {
    this.view.setUint16(74, value, true);
  }

  // 0x4c: u32
  set DestagesFastTierToSlowTierRate(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STARTING_LCN_INPUT_BUFFER (size: 8)
 */
export interface STARTING_LCN_INPUT_BUFFER {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  StartingLcn: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSTARTING_LCN_INPUT_BUFFER = 8;

export function allocSTARTING_LCN_INPUT_BUFFER(data?: Partial<STARTING_LCN_INPUT_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofSTARTING_LCN_INPUT_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.StartingLcn !== undefined) view.setBigUint64(0, data.StartingLcn === null ? 0n : util.toBigInt(util.toPointer(data.StartingLcn)), true);
  return buf;
}

export class STARTING_LCN_INPUT_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get StartingLcn(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set StartingLcn(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STARTING_LCN_INPUT_BUFFER_EX (size: 16)
 */
export interface STARTING_LCN_INPUT_BUFFER_EX {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  StartingLcn: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
}

export const sizeofSTARTING_LCN_INPUT_BUFFER_EX = 16;

export function allocSTARTING_LCN_INPUT_BUFFER_EX(data?: Partial<STARTING_LCN_INPUT_BUFFER_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofSTARTING_LCN_INPUT_BUFFER_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.StartingLcn !== undefined) view.setBigUint64(0, data.StartingLcn === null ? 0n : util.toBigInt(util.toPointer(data.StartingLcn)), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: pad4
  return buf;
}

export class STARTING_LCN_INPUT_BUFFER_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get StartingLcn(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set StartingLcn(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Ioctl.VOLUME_BITMAP_BUFFER (size: 24)
 */
export interface VOLUME_BITMAP_BUFFER {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  StartingLcn: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  BitmapSize: Uint8Array | Deno.PointerValue | null;
  /** array */
  Buffer: Deno.PointerValue | null;
}

export const sizeofVOLUME_BITMAP_BUFFER = 24;

export function allocVOLUME_BITMAP_BUFFER(data?: Partial<VOLUME_BITMAP_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofVOLUME_BITMAP_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.StartingLcn !== undefined) view.setBigUint64(0, data.StartingLcn === null ? 0n : util.toBigInt(util.toPointer(data.StartingLcn)), true);
  // 0x08: pointer
  if (data?.BitmapSize !== undefined) view.setBigUint64(8, data.BitmapSize === null ? 0n : util.toBigInt(util.toPointer(data.BitmapSize)), true);
  // 0x10: pointer
  if (data?.Buffer !== undefined) view.setBigUint64(16, data.Buffer === null ? 0n : util.toBigInt(util.toPointer(data.Buffer)), true);
  return buf;
}

export class VOLUME_BITMAP_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get StartingLcn(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get BitmapSize(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Buffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set StartingLcn(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set BitmapSize(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Buffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STARTING_VCN_INPUT_BUFFER (size: 8)
 */
export interface STARTING_VCN_INPUT_BUFFER {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  StartingVcn: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSTARTING_VCN_INPUT_BUFFER = 8;

export function allocSTARTING_VCN_INPUT_BUFFER(data?: Partial<STARTING_VCN_INPUT_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofSTARTING_VCN_INPUT_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.StartingVcn !== undefined) view.setBigUint64(0, data.StartingVcn === null ? 0n : util.toBigInt(util.toPointer(data.StartingVcn)), true);
  return buf;
}

export class STARTING_VCN_INPUT_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get StartingVcn(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set StartingVcn(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.RETRIEVAL_POINTERS_BUFFER (size: 24)
 */
export interface RETRIEVAL_POINTERS_BUFFER {
  /** u32 */
  ExtentCount: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  StartingVcn: Uint8Array | Deno.PointerValue | null;
  /** array */
  Extents: Deno.PointerValue | null;
}

export const sizeofRETRIEVAL_POINTERS_BUFFER = 24;

export function allocRETRIEVAL_POINTERS_BUFFER(data?: Partial<RETRIEVAL_POINTERS_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofRETRIEVAL_POINTERS_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ExtentCount !== undefined) view.setUint32(0, Number(data.ExtentCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.StartingVcn !== undefined) view.setBigUint64(8, data.StartingVcn === null ? 0n : util.toBigInt(util.toPointer(data.StartingVcn)), true);
  // 0x10: pointer
  if (data?.Extents !== undefined) view.setBigUint64(16, data.Extents === null ? 0n : util.toBigInt(util.toPointer(data.Extents)), true);
  return buf;
}

export class RETRIEVAL_POINTERS_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ExtentCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get StartingVcn(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Extents(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ExtentCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set StartingVcn(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Extents(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER (size: 24)
 */
export interface RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER {
  /** u32 */
  ExtentCount: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  StartingVcn: Uint8Array | Deno.PointerValue | null;
  /** array */
  Extents: Deno.PointerValue | null;
}

export const sizeofRETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER = 24;

export function allocRETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER(data?: Partial<RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofRETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ExtentCount !== undefined) view.setUint32(0, Number(data.ExtentCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.StartingVcn !== undefined) view.setBigUint64(8, data.StartingVcn === null ? 0n : util.toBigInt(util.toPointer(data.StartingVcn)), true);
  // 0x10: pointer
  if (data?.Extents !== undefined) view.setBigUint64(16, data.Extents === null ? 0n : util.toBigInt(util.toPointer(data.Extents)), true);
  return buf;
}

export class RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ExtentCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get StartingVcn(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Extents(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ExtentCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set StartingVcn(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Extents(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.RETRIEVAL_POINTER_COUNT (size: 8)
 */
export interface RETRIEVAL_POINTER_COUNT {
  /** u32 */
  ExtentCount: number;
}

export const sizeofRETRIEVAL_POINTER_COUNT = 8;

export function allocRETRIEVAL_POINTER_COUNT(data?: Partial<RETRIEVAL_POINTER_COUNT>): Uint8Array {
  const buf = new Uint8Array(sizeofRETRIEVAL_POINTER_COUNT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ExtentCount !== undefined) view.setUint32(0, Number(data.ExtentCount), true);
  // 0x04: pad4
  return buf;
}

export class RETRIEVAL_POINTER_COUNTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ExtentCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set ExtentCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Ioctl.NTFS_FILE_RECORD_INPUT_BUFFER (size: 8)
 */
export interface NTFS_FILE_RECORD_INPUT_BUFFER {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  FileReferenceNumber: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNTFS_FILE_RECORD_INPUT_BUFFER = 8;

export function allocNTFS_FILE_RECORD_INPUT_BUFFER(data?: Partial<NTFS_FILE_RECORD_INPUT_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofNTFS_FILE_RECORD_INPUT_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.FileReferenceNumber !== undefined) view.setBigUint64(0, data.FileReferenceNumber === null ? 0n : util.toBigInt(util.toPointer(data.FileReferenceNumber)), true);
  return buf;
}

export class NTFS_FILE_RECORD_INPUT_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get FileReferenceNumber(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set FileReferenceNumber(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.NTFS_FILE_RECORD_OUTPUT_BUFFER (size: 24)
 */
export interface NTFS_FILE_RECORD_OUTPUT_BUFFER {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  FileReferenceNumber: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  FileRecordLength: number;
  /** array */
  FileRecordBuffer: Deno.PointerValue | null;
}

export const sizeofNTFS_FILE_RECORD_OUTPUT_BUFFER = 24;

export function allocNTFS_FILE_RECORD_OUTPUT_BUFFER(data?: Partial<NTFS_FILE_RECORD_OUTPUT_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofNTFS_FILE_RECORD_OUTPUT_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.FileReferenceNumber !== undefined) view.setBigUint64(0, data.FileReferenceNumber === null ? 0n : util.toBigInt(util.toPointer(data.FileReferenceNumber)), true);
  // 0x08: u32
  if (data?.FileRecordLength !== undefined) view.setUint32(8, Number(data.FileRecordLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.FileRecordBuffer !== undefined) view.setBigUint64(16, data.FileRecordBuffer === null ? 0n : util.toBigInt(util.toPointer(data.FileRecordBuffer)), true);
  return buf;
}

export class NTFS_FILE_RECORD_OUTPUT_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get FileReferenceNumber(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get FileRecordLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get FileRecordBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set FileReferenceNumber(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set FileRecordLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set FileRecordBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

export type HANDLE = number | bigint;

/**
 * Windows.Win32.System.Ioctl.MOVE_FILE_DATA (size: 32)
 */
export interface MOVE_FILE_DATA {
  /** Windows.Win32.Foundation.HANDLE */
  FileHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  StartingVcn: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  StartingLcn: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ClusterCount: number;
}

export const sizeofMOVE_FILE_DATA = 32;

export function allocMOVE_FILE_DATA(data?: Partial<MOVE_FILE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofMOVE_FILE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.FileHandle !== undefined) view.setBigUint64(0, data.FileHandle === null ? 0n : util.toBigInt(util.toPointer(data.FileHandle)), true);
  // 0x08: pointer
  if (data?.StartingVcn !== undefined) view.setBigUint64(8, data.StartingVcn === null ? 0n : util.toBigInt(util.toPointer(data.StartingVcn)), true);
  // 0x10: pointer
  if (data?.StartingLcn !== undefined) view.setBigUint64(16, data.StartingLcn === null ? 0n : util.toBigInt(util.toPointer(data.StartingLcn)), true);
  // 0x18: u32
  if (data?.ClusterCount !== undefined) view.setUint32(24, Number(data.ClusterCount), true);
  // 0x1c: pad4
  return buf;
}

export class MOVE_FILE_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get FileHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get StartingVcn(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get StartingLcn(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get ClusterCount(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set FileHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set StartingVcn(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set StartingLcn(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set ClusterCount(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.System.Ioctl.MOVE_FILE_RECORD_DATA (size: 24)
 */
export interface MOVE_FILE_RECORD_DATA {
  /** Windows.Win32.Foundation.HANDLE */
  FileHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  SourceFileRecord: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TargetFileRecord: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMOVE_FILE_RECORD_DATA = 24;

export function allocMOVE_FILE_RECORD_DATA(data?: Partial<MOVE_FILE_RECORD_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofMOVE_FILE_RECORD_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.FileHandle !== undefined) view.setBigUint64(0, data.FileHandle === null ? 0n : util.toBigInt(util.toPointer(data.FileHandle)), true);
  // 0x08: pointer
  if (data?.SourceFileRecord !== undefined) view.setBigUint64(8, data.SourceFileRecord === null ? 0n : util.toBigInt(util.toPointer(data.SourceFileRecord)), true);
  // 0x10: pointer
  if (data?.TargetFileRecord !== undefined) view.setBigUint64(16, data.TargetFileRecord === null ? 0n : util.toBigInt(util.toPointer(data.TargetFileRecord)), true);
  return buf;
}

export class MOVE_FILE_RECORD_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get FileHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get SourceFileRecord(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get TargetFileRecord(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set FileHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set SourceFileRecord(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set TargetFileRecord(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

export type SID_IDENTIFIER_AUTHORITY = Deno.PointerValue | null;

/**
 * Windows.Win32.Security.SID (size: 24)
 */
export interface SID {
  /** u8 */
  Revision: number;
  /** u8 */
  SubAuthorityCount: number;
  /** Windows.Win32.Security.SID_IDENTIFIER_AUTHORITY */
  IdentifierAuthority: Uint8Array | Deno.PointerValue | null;
  /** array */
  SubAuthority: Deno.PointerValue | null;
}

export const sizeofSID = 24;

export function allocSID(data?: Partial<SID>): Uint8Array {
  const buf = new Uint8Array(sizeofSID);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Revision !== undefined) view.setUint8(0, Number(data.Revision));
  // 0x01: u8
  if (data?.SubAuthorityCount !== undefined) view.setUint8(1, Number(data.SubAuthorityCount));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.IdentifierAuthority !== undefined) view.setBigUint64(8, data.IdentifierAuthority === null ? 0n : util.toBigInt(util.toPointer(data.IdentifierAuthority)), true);
  // 0x10: pointer
  if (data?.SubAuthority !== undefined) view.setBigUint64(16, data.SubAuthority === null ? 0n : util.toBigInt(util.toPointer(data.SubAuthority)), true);
  return buf;
}

export class SIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get Revision(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get SubAuthorityCount(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x08: pointer
  get IdentifierAuthority(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get SubAuthority(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set Revision(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set SubAuthorityCount(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6

  // 0x08: pointer
  set IdentifierAuthority(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set SubAuthority(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FIND_BY_SID_DATA (size: 16)
 */
export interface FIND_BY_SID_DATA {
  /** u32 */
  Restart: number;
  /** Windows.Win32.Security.SID */
  Sid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFIND_BY_SID_DATA = 16;

export function allocFIND_BY_SID_DATA(data?: Partial<FIND_BY_SID_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofFIND_BY_SID_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Restart !== undefined) view.setUint32(0, Number(data.Restart), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Sid !== undefined) view.setBigUint64(8, data.Sid === null ? 0n : util.toBigInt(util.toPointer(data.Sid)), true);
  return buf;
}

export class FIND_BY_SID_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Restart(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Sid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Restart(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Sid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FIND_BY_SID_OUTPUT (size: 24)
 */
export interface FIND_BY_SID_OUTPUT {
  /** u32 */
  NextEntryOffset: number;
  /** u32 */
  FileIndex: number;
  /** u32 */
  FileNameLength: number;
  /** array */
  FileName: Deno.PointerValue | null;
}

export const sizeofFIND_BY_SID_OUTPUT = 24;

export function allocFIND_BY_SID_OUTPUT(data?: Partial<FIND_BY_SID_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofFIND_BY_SID_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NextEntryOffset !== undefined) view.setUint32(0, Number(data.NextEntryOffset), true);
  // 0x04: u32
  if (data?.FileIndex !== undefined) view.setUint32(4, Number(data.FileIndex), true);
  // 0x08: u32
  if (data?.FileNameLength !== undefined) view.setUint32(8, Number(data.FileNameLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.FileName !== undefined) view.setBigUint64(16, data.FileName === null ? 0n : util.toBigInt(util.toPointer(data.FileName)), true);
  return buf;
}

export class FIND_BY_SID_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NextEntryOffset(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get FileIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get FileNameLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get FileName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set NextEntryOffset(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set FileIndex(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set FileNameLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set FileName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.MFT_ENUM_DATA_V0 (size: 24)
 */
export interface MFT_ENUM_DATA_V0 {
  /** u64 */
  StartFileReferenceNumber: number | bigint;
  /** i64 */
  LowUsn: number | bigint;
  /** i64 */
  HighUsn: number | bigint;
}

export const sizeofMFT_ENUM_DATA_V0 = 24;

export function allocMFT_ENUM_DATA_V0(data?: Partial<MFT_ENUM_DATA_V0>): Uint8Array {
  const buf = new Uint8Array(sizeofMFT_ENUM_DATA_V0);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.StartFileReferenceNumber !== undefined) view.setBigUint64(0, util.toBigInt(data.StartFileReferenceNumber), true);
  // 0x08: i64
  if (data?.LowUsn !== undefined) view.setBigInt64(8, util.toBigInt(data.LowUsn), true);
  // 0x10: i64
  if (data?.HighUsn !== undefined) view.setBigInt64(16, util.toBigInt(data.HighUsn), true);
  return buf;
}

export class MFT_ENUM_DATA_V0View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get StartFileReferenceNumber(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: i64
  get LowUsn(): number | bigint {
    return this.view.getBigInt64(8, true);
  }

  // 0x10: i64
  get HighUsn(): number | bigint {
    return this.view.getBigInt64(16, true);
  }

  // 0x00: u64
  set StartFileReferenceNumber(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: i64
  set LowUsn(value: number | bigint) {
    this.view.setBigInt64(8, util.toBigInt(value), true);
  }

  // 0x10: i64
  set HighUsn(value: number | bigint) {
    this.view.setBigInt64(16, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.MFT_ENUM_DATA_V1 (size: 32)
 */
export interface MFT_ENUM_DATA_V1 {
  /** u64 */
  StartFileReferenceNumber: number | bigint;
  /** i64 */
  LowUsn: number | bigint;
  /** i64 */
  HighUsn: number | bigint;
  /** u16 */
  MinMajorVersion: number;
  /** u16 */
  MaxMajorVersion: number;
}

export const sizeofMFT_ENUM_DATA_V1 = 32;

export function allocMFT_ENUM_DATA_V1(data?: Partial<MFT_ENUM_DATA_V1>): Uint8Array {
  const buf = new Uint8Array(sizeofMFT_ENUM_DATA_V1);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.StartFileReferenceNumber !== undefined) view.setBigUint64(0, util.toBigInt(data.StartFileReferenceNumber), true);
  // 0x08: i64
  if (data?.LowUsn !== undefined) view.setBigInt64(8, util.toBigInt(data.LowUsn), true);
  // 0x10: i64
  if (data?.HighUsn !== undefined) view.setBigInt64(16, util.toBigInt(data.HighUsn), true);
  // 0x18: u16
  if (data?.MinMajorVersion !== undefined) view.setUint16(24, Number(data.MinMajorVersion), true);
  // 0x1a: u16
  if (data?.MaxMajorVersion !== undefined) view.setUint16(26, Number(data.MaxMajorVersion), true);
  // 0x1c: pad4
  return buf;
}

export class MFT_ENUM_DATA_V1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get StartFileReferenceNumber(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: i64
  get LowUsn(): number | bigint {
    return this.view.getBigInt64(8, true);
  }

  // 0x10: i64
  get HighUsn(): number | bigint {
    return this.view.getBigInt64(16, true);
  }

  // 0x18: u16
  get MinMajorVersion(): number {
    return this.view.getUint16(24, true);
  }

  // 0x1a: u16
  get MaxMajorVersion(): number {
    return this.view.getUint16(26, true);
  }

  // 0x1c: pad4

  // 0x00: u64
  set StartFileReferenceNumber(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: i64
  set LowUsn(value: number | bigint) {
    this.view.setBigInt64(8, util.toBigInt(value), true);
  }

  // 0x10: i64
  set HighUsn(value: number | bigint) {
    this.view.setBigInt64(16, util.toBigInt(value), true);
  }

  // 0x18: u16
  set MinMajorVersion(value: number) {
    this.view.setUint16(24, value, true);
  }

  // 0x1a: u16
  set MaxMajorVersion(value: number) {
    this.view.setUint16(26, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.System.Ioctl.CREATE_USN_JOURNAL_DATA (size: 16)
 */
export interface CREATE_USN_JOURNAL_DATA {
  /** u64 */
  MaximumSize: number | bigint;
  /** u64 */
  AllocationDelta: number | bigint;
}

export const sizeofCREATE_USN_JOURNAL_DATA = 16;

export function allocCREATE_USN_JOURNAL_DATA(data?: Partial<CREATE_USN_JOURNAL_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_USN_JOURNAL_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.MaximumSize !== undefined) view.setBigUint64(0, util.toBigInt(data.MaximumSize), true);
  // 0x08: u64
  if (data?.AllocationDelta !== undefined) view.setBigUint64(8, util.toBigInt(data.AllocationDelta), true);
  return buf;
}

export class CREATE_USN_JOURNAL_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get MaximumSize(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get AllocationDelta(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u64
  set MaximumSize(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set AllocationDelta(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.READ_FILE_USN_DATA (size: 8)
 */
export interface READ_FILE_USN_DATA {
  /** u16 */
  MinMajorVersion: number;
  /** u16 */
  MaxMajorVersion: number;
}

export const sizeofREAD_FILE_USN_DATA = 8;

export function allocREAD_FILE_USN_DATA(data?: Partial<READ_FILE_USN_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofREAD_FILE_USN_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.MinMajorVersion !== undefined) view.setUint16(0, Number(data.MinMajorVersion), true);
  // 0x02: u16
  if (data?.MaxMajorVersion !== undefined) view.setUint16(2, Number(data.MaxMajorVersion), true);
  // 0x04: pad4
  return buf;
}

export class READ_FILE_USN_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get MinMajorVersion(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get MaxMajorVersion(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u16
  set MinMajorVersion(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set MaxMajorVersion(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Ioctl.READ_USN_JOURNAL_DATA_V0 (size: 40)
 */
export interface READ_USN_JOURNAL_DATA_V0 {
  /** i64 */
  StartUsn: number | bigint;
  /** u32 */
  ReasonMask: number;
  /** u32 */
  ReturnOnlyOnClose: number;
  /** u64 */
  Timeout: number | bigint;
  /** u64 */
  BytesToWaitFor: number | bigint;
  /** u64 */
  UsnJournalID: number | bigint;
}

export const sizeofREAD_USN_JOURNAL_DATA_V0 = 40;

export function allocREAD_USN_JOURNAL_DATA_V0(data?: Partial<READ_USN_JOURNAL_DATA_V0>): Uint8Array {
  const buf = new Uint8Array(sizeofREAD_USN_JOURNAL_DATA_V0);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.StartUsn !== undefined) view.setBigInt64(0, util.toBigInt(data.StartUsn), true);
  // 0x08: u32
  if (data?.ReasonMask !== undefined) view.setUint32(8, Number(data.ReasonMask), true);
  // 0x0c: u32
  if (data?.ReturnOnlyOnClose !== undefined) view.setUint32(12, Number(data.ReturnOnlyOnClose), true);
  // 0x10: u64
  if (data?.Timeout !== undefined) view.setBigUint64(16, util.toBigInt(data.Timeout), true);
  // 0x18: u64
  if (data?.BytesToWaitFor !== undefined) view.setBigUint64(24, util.toBigInt(data.BytesToWaitFor), true);
  // 0x20: u64
  if (data?.UsnJournalID !== undefined) view.setBigUint64(32, util.toBigInt(data.UsnJournalID), true);
  return buf;
}

export class READ_USN_JOURNAL_DATA_V0View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get StartUsn(): number | bigint {
    return this.view.getBigInt64(0, true);
  }

  // 0x08: u32
  get ReasonMask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ReturnOnlyOnClose(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u64
  get Timeout(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get BytesToWaitFor(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u64
  get UsnJournalID(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x00: i64
  set StartUsn(value: number | bigint) {
    this.view.setBigInt64(0, util.toBigInt(value), true);
  }

  // 0x08: u32
  set ReasonMask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ReturnOnlyOnClose(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u64
  set Timeout(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set BytesToWaitFor(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u64
  set UsnJournalID(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.READ_USN_JOURNAL_DATA_V1 (size: 48)
 */
export interface READ_USN_JOURNAL_DATA_V1 {
  /** i64 */
  StartUsn: number | bigint;
  /** u32 */
  ReasonMask: number;
  /** u32 */
  ReturnOnlyOnClose: number;
  /** u64 */
  Timeout: number | bigint;
  /** u64 */
  BytesToWaitFor: number | bigint;
  /** u64 */
  UsnJournalID: number | bigint;
  /** u16 */
  MinMajorVersion: number;
  /** u16 */
  MaxMajorVersion: number;
}

export const sizeofREAD_USN_JOURNAL_DATA_V1 = 48;

export function allocREAD_USN_JOURNAL_DATA_V1(data?: Partial<READ_USN_JOURNAL_DATA_V1>): Uint8Array {
  const buf = new Uint8Array(sizeofREAD_USN_JOURNAL_DATA_V1);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.StartUsn !== undefined) view.setBigInt64(0, util.toBigInt(data.StartUsn), true);
  // 0x08: u32
  if (data?.ReasonMask !== undefined) view.setUint32(8, Number(data.ReasonMask), true);
  // 0x0c: u32
  if (data?.ReturnOnlyOnClose !== undefined) view.setUint32(12, Number(data.ReturnOnlyOnClose), true);
  // 0x10: u64
  if (data?.Timeout !== undefined) view.setBigUint64(16, util.toBigInt(data.Timeout), true);
  // 0x18: u64
  if (data?.BytesToWaitFor !== undefined) view.setBigUint64(24, util.toBigInt(data.BytesToWaitFor), true);
  // 0x20: u64
  if (data?.UsnJournalID !== undefined) view.setBigUint64(32, util.toBigInt(data.UsnJournalID), true);
  // 0x28: u16
  if (data?.MinMajorVersion !== undefined) view.setUint16(40, Number(data.MinMajorVersion), true);
  // 0x2a: u16
  if (data?.MaxMajorVersion !== undefined) view.setUint16(42, Number(data.MaxMajorVersion), true);
  // 0x2c: pad4
  return buf;
}

export class READ_USN_JOURNAL_DATA_V1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get StartUsn(): number | bigint {
    return this.view.getBigInt64(0, true);
  }

  // 0x08: u32
  get ReasonMask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ReturnOnlyOnClose(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u64
  get Timeout(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get BytesToWaitFor(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u64
  get UsnJournalID(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: u16
  get MinMajorVersion(): number {
    return this.view.getUint16(40, true);
  }

  // 0x2a: u16
  get MaxMajorVersion(): number {
    return this.view.getUint16(42, true);
  }

  // 0x2c: pad4

  // 0x00: i64
  set StartUsn(value: number | bigint) {
    this.view.setBigInt64(0, util.toBigInt(value), true);
  }

  // 0x08: u32
  set ReasonMask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ReturnOnlyOnClose(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u64
  set Timeout(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set BytesToWaitFor(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u64
  set UsnJournalID(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: u16
  set MinMajorVersion(value: number) {
    this.view.setUint16(40, value, true);
  }

  // 0x2a: u16
  set MaxMajorVersion(value: number) {
    this.view.setUint16(42, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.System.Ioctl.USN_TRACK_MODIFIED_RANGES (size: 24)
 */
export interface USN_TRACK_MODIFIED_RANGES {
  /** u32 */
  Flags: number;
  /** u32 */
  Unused: number;
  /** u64 */
  ChunkSize: number | bigint;
  /** i64 */
  FileSizeThreshold: number | bigint;
}

export const sizeofUSN_TRACK_MODIFIED_RANGES = 24;

export function allocUSN_TRACK_MODIFIED_RANGES(data?: Partial<USN_TRACK_MODIFIED_RANGES>): Uint8Array {
  const buf = new Uint8Array(sizeofUSN_TRACK_MODIFIED_RANGES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.Unused !== undefined) view.setUint32(4, Number(data.Unused), true);
  // 0x08: u64
  if (data?.ChunkSize !== undefined) view.setBigUint64(8, util.toBigInt(data.ChunkSize), true);
  // 0x10: i64
  if (data?.FileSizeThreshold !== undefined) view.setBigInt64(16, util.toBigInt(data.FileSizeThreshold), true);
  return buf;
}

export class USN_TRACK_MODIFIED_RANGESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Unused(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get ChunkSize(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: i64
  get FileSizeThreshold(): number | bigint {
    return this.view.getBigInt64(16, true);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Unused(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set ChunkSize(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: i64
  set FileSizeThreshold(value: number | bigint) {
    this.view.setBigInt64(16, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.USN_RANGE_TRACK_OUTPUT (size: 8)
 */
export interface USN_RANGE_TRACK_OUTPUT {
  /** i64 */
  Usn: number | bigint;
}

export const sizeofUSN_RANGE_TRACK_OUTPUT = 8;

export function allocUSN_RANGE_TRACK_OUTPUT(data?: Partial<USN_RANGE_TRACK_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofUSN_RANGE_TRACK_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.Usn !== undefined) view.setBigInt64(0, util.toBigInt(data.Usn), true);
  return buf;
}

export class USN_RANGE_TRACK_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get Usn(): number | bigint {
    return this.view.getBigInt64(0, true);
  }

  // 0x00: i64
  set Usn(value: number | bigint) {
    this.view.setBigInt64(0, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.USN_RECORD_V2 (size: 72)
 */
export interface USN_RECORD_V2 {
  /** u32 */
  RecordLength: number;
  /** u16 */
  MajorVersion: number;
  /** u16 */
  MinorVersion: number;
  /** u64 */
  FileReferenceNumber: number | bigint;
  /** u64 */
  ParentFileReferenceNumber: number | bigint;
  /** i64 */
  Usn: number | bigint;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TimeStamp: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Reason: number;
  /** u32 */
  SourceInfo: number;
  /** u32 */
  SecurityId: number;
  /** u32 */
  FileAttributes: number;
  /** u16 */
  FileNameLength: number;
  /** u16 */
  FileNameOffset: number;
  /** array */
  FileName: Deno.PointerValue | null;
}

export const sizeofUSN_RECORD_V2 = 72;

export function allocUSN_RECORD_V2(data?: Partial<USN_RECORD_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofUSN_RECORD_V2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.RecordLength !== undefined) view.setUint32(0, Number(data.RecordLength), true);
  // 0x04: u16
  if (data?.MajorVersion !== undefined) view.setUint16(4, Number(data.MajorVersion), true);
  // 0x06: u16
  if (data?.MinorVersion !== undefined) view.setUint16(6, Number(data.MinorVersion), true);
  // 0x08: u64
  if (data?.FileReferenceNumber !== undefined) view.setBigUint64(8, util.toBigInt(data.FileReferenceNumber), true);
  // 0x10: u64
  if (data?.ParentFileReferenceNumber !== undefined) view.setBigUint64(16, util.toBigInt(data.ParentFileReferenceNumber), true);
  // 0x18: i64
  if (data?.Usn !== undefined) view.setBigInt64(24, util.toBigInt(data.Usn), true);
  // 0x20: pointer
  if (data?.TimeStamp !== undefined) view.setBigUint64(32, data.TimeStamp === null ? 0n : util.toBigInt(util.toPointer(data.TimeStamp)), true);
  // 0x28: u32
  if (data?.Reason !== undefined) view.setUint32(40, Number(data.Reason), true);
  // 0x2c: u32
  if (data?.SourceInfo !== undefined) view.setUint32(44, Number(data.SourceInfo), true);
  // 0x30: u32
  if (data?.SecurityId !== undefined) view.setUint32(48, Number(data.SecurityId), true);
  // 0x34: u32
  if (data?.FileAttributes !== undefined) view.setUint32(52, Number(data.FileAttributes), true);
  // 0x38: u16
  if (data?.FileNameLength !== undefined) view.setUint16(56, Number(data.FileNameLength), true);
  // 0x3a: u16
  if (data?.FileNameOffset !== undefined) view.setUint16(58, Number(data.FileNameOffset), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.FileName !== undefined) view.setBigUint64(64, data.FileName === null ? 0n : util.toBigInt(util.toPointer(data.FileName)), true);
  return buf;
}

export class USN_RECORD_V2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get RecordLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get MajorVersion(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get MinorVersion(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u64
  get FileReferenceNumber(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get ParentFileReferenceNumber(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: i64
  get Usn(): number | bigint {
    return this.view.getBigInt64(24, true);
  }

  // 0x20: pointer
  get TimeStamp(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get Reason(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get SourceInfo(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get SecurityId(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get FileAttributes(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u16
  get FileNameLength(): number {
    return this.view.getUint16(56, true);
  }

  // 0x3a: u16
  get FileNameOffset(): number {
    return this.view.getUint16(58, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get FileName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set RecordLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set MajorVersion(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set MinorVersion(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u64
  set FileReferenceNumber(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set ParentFileReferenceNumber(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: i64
  set Usn(value: number | bigint) {
    this.view.setBigInt64(24, util.toBigInt(value), true);
  }

  // 0x20: pointer
  set TimeStamp(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set Reason(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set SourceInfo(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set SecurityId(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set FileAttributes(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u16
  set FileNameLength(value: number) {
    this.view.setUint16(56, value, true);
  }

  // 0x3a: u16
  set FileNameOffset(value: number) {
    this.view.setUint16(58, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set FileName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Storage.FileSystem.FILE_ID_128 (size: 8)
 */
export interface FILE_ID_128 {
  /** array */
  Identifier: Deno.PointerValue | null;
}

export const sizeofFILE_ID_128 = 8;

export function allocFILE_ID_128(data?: Partial<FILE_ID_128>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_ID_128);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Identifier !== undefined) view.setBigUint64(0, data.Identifier === null ? 0n : util.toBigInt(util.toPointer(data.Identifier)), true);
  return buf;
}

export class FILE_ID_128View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Identifier(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Identifier(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.USN_RECORD_V3 (size: 72)
 */
export interface USN_RECORD_V3 {
  /** u32 */
  RecordLength: number;
  /** u16 */
  MajorVersion: number;
  /** u16 */
  MinorVersion: number;
  /** Windows.Win32.Storage.FileSystem.FILE_ID_128 */
  FileReferenceNumber: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.FILE_ID_128 */
  ParentFileReferenceNumber: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  Usn: number | bigint;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TimeStamp: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Reason: number;
  /** u32 */
  SourceInfo: number;
  /** u32 */
  SecurityId: number;
  /** u32 */
  FileAttributes: number;
  /** u16 */
  FileNameLength: number;
  /** u16 */
  FileNameOffset: number;
  /** array */
  FileName: Deno.PointerValue | null;
}

export const sizeofUSN_RECORD_V3 = 72;

export function allocUSN_RECORD_V3(data?: Partial<USN_RECORD_V3>): Uint8Array {
  const buf = new Uint8Array(sizeofUSN_RECORD_V3);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.RecordLength !== undefined) view.setUint32(0, Number(data.RecordLength), true);
  // 0x04: u16
  if (data?.MajorVersion !== undefined) view.setUint16(4, Number(data.MajorVersion), true);
  // 0x06: u16
  if (data?.MinorVersion !== undefined) view.setUint16(6, Number(data.MinorVersion), true);
  // 0x08: pointer
  if (data?.FileReferenceNumber !== undefined) view.setBigUint64(8, data.FileReferenceNumber === null ? 0n : util.toBigInt(util.toPointer(data.FileReferenceNumber)), true);
  // 0x10: pointer
  if (data?.ParentFileReferenceNumber !== undefined) view.setBigUint64(16, data.ParentFileReferenceNumber === null ? 0n : util.toBigInt(util.toPointer(data.ParentFileReferenceNumber)), true);
  // 0x18: i64
  if (data?.Usn !== undefined) view.setBigInt64(24, util.toBigInt(data.Usn), true);
  // 0x20: pointer
  if (data?.TimeStamp !== undefined) view.setBigUint64(32, data.TimeStamp === null ? 0n : util.toBigInt(util.toPointer(data.TimeStamp)), true);
  // 0x28: u32
  if (data?.Reason !== undefined) view.setUint32(40, Number(data.Reason), true);
  // 0x2c: u32
  if (data?.SourceInfo !== undefined) view.setUint32(44, Number(data.SourceInfo), true);
  // 0x30: u32
  if (data?.SecurityId !== undefined) view.setUint32(48, Number(data.SecurityId), true);
  // 0x34: u32
  if (data?.FileAttributes !== undefined) view.setUint32(52, Number(data.FileAttributes), true);
  // 0x38: u16
  if (data?.FileNameLength !== undefined) view.setUint16(56, Number(data.FileNameLength), true);
  // 0x3a: u16
  if (data?.FileNameOffset !== undefined) view.setUint16(58, Number(data.FileNameOffset), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.FileName !== undefined) view.setBigUint64(64, data.FileName === null ? 0n : util.toBigInt(util.toPointer(data.FileName)), true);
  return buf;
}

export class USN_RECORD_V3View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get RecordLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get MajorVersion(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get MinorVersion(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: pointer
  get FileReferenceNumber(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get ParentFileReferenceNumber(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: i64
  get Usn(): number | bigint {
    return this.view.getBigInt64(24, true);
  }

  // 0x20: pointer
  get TimeStamp(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get Reason(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get SourceInfo(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get SecurityId(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get FileAttributes(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u16
  get FileNameLength(): number {
    return this.view.getUint16(56, true);
  }

  // 0x3a: u16
  get FileNameOffset(): number {
    return this.view.getUint16(58, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get FileName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set RecordLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set MajorVersion(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set MinorVersion(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: pointer
  set FileReferenceNumber(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set ParentFileReferenceNumber(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: i64
  set Usn(value: number | bigint) {
    this.view.setBigInt64(24, util.toBigInt(value), true);
  }

  // 0x20: pointer
  set TimeStamp(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set Reason(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set SourceInfo(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set SecurityId(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set FileAttributes(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u16
  set FileNameLength(value: number) {
    this.view.setUint16(56, value, true);
  }

  // 0x3a: u16
  set FileNameOffset(value: number) {
    this.view.setUint16(58, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set FileName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.USN_RECORD_COMMON_HEADER (size: 8)
 */
export interface USN_RECORD_COMMON_HEADER {
  /** u32 */
  RecordLength: number;
  /** u16 */
  MajorVersion: number;
  /** u16 */
  MinorVersion: number;
}

export const sizeofUSN_RECORD_COMMON_HEADER = 8;

export function allocUSN_RECORD_COMMON_HEADER(data?: Partial<USN_RECORD_COMMON_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofUSN_RECORD_COMMON_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.RecordLength !== undefined) view.setUint32(0, Number(data.RecordLength), true);
  // 0x04: u16
  if (data?.MajorVersion !== undefined) view.setUint16(4, Number(data.MajorVersion), true);
  // 0x06: u16
  if (data?.MinorVersion !== undefined) view.setUint16(6, Number(data.MinorVersion), true);
  return buf;
}

export class USN_RECORD_COMMON_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get RecordLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get MajorVersion(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get MinorVersion(): number {
    return this.view.getUint16(6, true);
  }

  // 0x00: u32
  set RecordLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set MajorVersion(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set MinorVersion(value: number) {
    this.view.setUint16(6, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.USN_RECORD_EXTENT (size: 16)
 */
export interface USN_RECORD_EXTENT {
  /** i64 */
  Offset: number | bigint;
  /** i64 */
  Length: number | bigint;
}

export const sizeofUSN_RECORD_EXTENT = 16;

export function allocUSN_RECORD_EXTENT(data?: Partial<USN_RECORD_EXTENT>): Uint8Array {
  const buf = new Uint8Array(sizeofUSN_RECORD_EXTENT);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.Offset !== undefined) view.setBigInt64(0, util.toBigInt(data.Offset), true);
  // 0x08: i64
  if (data?.Length !== undefined) view.setBigInt64(8, util.toBigInt(data.Length), true);
  return buf;
}

export class USN_RECORD_EXTENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get Offset(): number | bigint {
    return this.view.getBigInt64(0, true);
  }

  // 0x08: i64
  get Length(): number | bigint {
    return this.view.getBigInt64(8, true);
  }

  // 0x00: i64
  set Offset(value: number | bigint) {
    this.view.setBigInt64(0, util.toBigInt(value), true);
  }

  // 0x08: i64
  set Length(value: number | bigint) {
    this.view.setBigInt64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.USN_RECORD_V4 (size: 56)
 */
export interface USN_RECORD_V4 {
  /** Windows.Win32.System.Ioctl.USN_RECORD_COMMON_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.FILE_ID_128 */
  FileReferenceNumber: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.FILE_ID_128 */
  ParentFileReferenceNumber: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  Usn: number | bigint;
  /** u32 */
  Reason: number;
  /** Windows.Win32.System.Ioctl.USN_SOURCE_INFO_ID */
  SourceInfo: USN_SOURCE_INFO_ID;
  /** u32 */
  RemainingExtents: number;
  /** u16 */
  NumberOfExtents: number;
  /** u16 */
  ExtentSize: number;
  /** array */
  Extents: Deno.PointerValue | null;
}

export const sizeofUSN_RECORD_V4 = 56;

export function allocUSN_RECORD_V4(data?: Partial<USN_RECORD_V4>): Uint8Array {
  const buf = new Uint8Array(sizeofUSN_RECORD_V4);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : util.toBigInt(util.toPointer(data.Header)), true);
  // 0x08: pointer
  if (data?.FileReferenceNumber !== undefined) view.setBigUint64(8, data.FileReferenceNumber === null ? 0n : util.toBigInt(util.toPointer(data.FileReferenceNumber)), true);
  // 0x10: pointer
  if (data?.ParentFileReferenceNumber !== undefined) view.setBigUint64(16, data.ParentFileReferenceNumber === null ? 0n : util.toBigInt(util.toPointer(data.ParentFileReferenceNumber)), true);
  // 0x18: i64
  if (data?.Usn !== undefined) view.setBigInt64(24, util.toBigInt(data.Usn), true);
  // 0x20: u32
  if (data?.Reason !== undefined) view.setUint32(32, Number(data.Reason), true);
  // 0x24: u32
  if (data?.SourceInfo !== undefined) view.setUint32(36, Number(data.SourceInfo), true);
  // 0x28: u32
  if (data?.RemainingExtents !== undefined) view.setUint32(40, Number(data.RemainingExtents), true);
  // 0x2c: u16
  if (data?.NumberOfExtents !== undefined) view.setUint16(44, Number(data.NumberOfExtents), true);
  // 0x2e: u16
  if (data?.ExtentSize !== undefined) view.setUint16(46, Number(data.ExtentSize), true);
  // 0x30: pointer
  if (data?.Extents !== undefined) view.setBigUint64(48, data.Extents === null ? 0n : util.toBigInt(util.toPointer(data.Extents)), true);
  return buf;
}

export class USN_RECORD_V4View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get FileReferenceNumber(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get ParentFileReferenceNumber(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: i64
  get Usn(): number | bigint {
    return this.view.getBigInt64(24, true);
  }

  // 0x20: u32
  get Reason(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get SourceInfo(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get RemainingExtents(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u16
  get NumberOfExtents(): number {
    return this.view.getUint16(44, true);
  }

  // 0x2e: u16
  get ExtentSize(): number {
    return this.view.getUint16(46, true);
  }

  // 0x30: pointer
  get Extents(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set FileReferenceNumber(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set ParentFileReferenceNumber(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: i64
  set Usn(value: number | bigint) {
    this.view.setBigInt64(24, util.toBigInt(value), true);
  }

  // 0x20: u32
  set Reason(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set SourceInfo(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set RemainingExtents(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u16
  set NumberOfExtents(value: number) {
    this.view.setUint16(44, value, true);
  }

  // 0x2e: u16
  set ExtentSize(value: number) {
    this.view.setUint16(46, value, true);
  }

  // 0x30: pointer
  set Extents(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.USN_RECORD_UNION (size: 32)
 */
export interface USN_RECORD_UNION {
  /** Windows.Win32.System.Ioctl.USN_RECORD_COMMON_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Ioctl.USN_RECORD_V2 */
  V2: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Ioctl.USN_RECORD_V3 */
  V3: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Ioctl.USN_RECORD_V4 */
  V4: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSN_RECORD_UNION = 32;

export function allocUSN_RECORD_UNION(data?: Partial<USN_RECORD_UNION>): Uint8Array {
  const buf = new Uint8Array(sizeofUSN_RECORD_UNION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : util.toBigInt(util.toPointer(data.Header)), true);
  // 0x08: pointer
  if (data?.V2 !== undefined) view.setBigUint64(8, data.V2 === null ? 0n : util.toBigInt(util.toPointer(data.V2)), true);
  // 0x10: pointer
  if (data?.V3 !== undefined) view.setBigUint64(16, data.V3 === null ? 0n : util.toBigInt(util.toPointer(data.V3)), true);
  // 0x18: pointer
  if (data?.V4 !== undefined) view.setBigUint64(24, data.V4 === null ? 0n : util.toBigInt(util.toPointer(data.V4)), true);
  return buf;
}

export class USN_RECORD_UNIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get V2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get V3(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get V4(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set V2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set V3(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set V4(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.USN_JOURNAL_DATA_V0 (size: 56)
 */
export interface USN_JOURNAL_DATA_V0 {
  /** u64 */
  UsnJournalID: number | bigint;
  /** i64 */
  FirstUsn: number | bigint;
  /** i64 */
  NextUsn: number | bigint;
  /** i64 */
  LowestValidUsn: number | bigint;
  /** i64 */
  MaxUsn: number | bigint;
  /** u64 */
  MaximumSize: number | bigint;
  /** u64 */
  AllocationDelta: number | bigint;
}

export const sizeofUSN_JOURNAL_DATA_V0 = 56;

export function allocUSN_JOURNAL_DATA_V0(data?: Partial<USN_JOURNAL_DATA_V0>): Uint8Array {
  const buf = new Uint8Array(sizeofUSN_JOURNAL_DATA_V0);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.UsnJournalID !== undefined) view.setBigUint64(0, util.toBigInt(data.UsnJournalID), true);
  // 0x08: i64
  if (data?.FirstUsn !== undefined) view.setBigInt64(8, util.toBigInt(data.FirstUsn), true);
  // 0x10: i64
  if (data?.NextUsn !== undefined) view.setBigInt64(16, util.toBigInt(data.NextUsn), true);
  // 0x18: i64
  if (data?.LowestValidUsn !== undefined) view.setBigInt64(24, util.toBigInt(data.LowestValidUsn), true);
  // 0x20: i64
  if (data?.MaxUsn !== undefined) view.setBigInt64(32, util.toBigInt(data.MaxUsn), true);
  // 0x28: u64
  if (data?.MaximumSize !== undefined) view.setBigUint64(40, util.toBigInt(data.MaximumSize), true);
  // 0x30: u64
  if (data?.AllocationDelta !== undefined) view.setBigUint64(48, util.toBigInt(data.AllocationDelta), true);
  return buf;
}

export class USN_JOURNAL_DATA_V0View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get UsnJournalID(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: i64
  get FirstUsn(): number | bigint {
    return this.view.getBigInt64(8, true);
  }

  // 0x10: i64
  get NextUsn(): number | bigint {
    return this.view.getBigInt64(16, true);
  }

  // 0x18: i64
  get LowestValidUsn(): number | bigint {
    return this.view.getBigInt64(24, true);
  }

  // 0x20: i64
  get MaxUsn(): number | bigint {
    return this.view.getBigInt64(32, true);
  }

  // 0x28: u64
  get MaximumSize(): number | bigint {
    return this.view.getBigUint64(40, true);
  }

  // 0x30: u64
  get AllocationDelta(): number | bigint {
    return this.view.getBigUint64(48, true);
  }

  // 0x00: u64
  set UsnJournalID(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: i64
  set FirstUsn(value: number | bigint) {
    this.view.setBigInt64(8, util.toBigInt(value), true);
  }

  // 0x10: i64
  set NextUsn(value: number | bigint) {
    this.view.setBigInt64(16, util.toBigInt(value), true);
  }

  // 0x18: i64
  set LowestValidUsn(value: number | bigint) {
    this.view.setBigInt64(24, util.toBigInt(value), true);
  }

  // 0x20: i64
  set MaxUsn(value: number | bigint) {
    this.view.setBigInt64(32, util.toBigInt(value), true);
  }

  // 0x28: u64
  set MaximumSize(value: number | bigint) {
    this.view.setBigUint64(40, util.toBigInt(value), true);
  }

  // 0x30: u64
  set AllocationDelta(value: number | bigint) {
    this.view.setBigUint64(48, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.USN_JOURNAL_DATA_V1 (size: 64)
 */
export interface USN_JOURNAL_DATA_V1 {
  /** u64 */
  UsnJournalID: number | bigint;
  /** i64 */
  FirstUsn: number | bigint;
  /** i64 */
  NextUsn: number | bigint;
  /** i64 */
  LowestValidUsn: number | bigint;
  /** i64 */
  MaxUsn: number | bigint;
  /** u64 */
  MaximumSize: number | bigint;
  /** u64 */
  AllocationDelta: number | bigint;
  /** u16 */
  MinSupportedMajorVersion: number;
  /** u16 */
  MaxSupportedMajorVersion: number;
}

export const sizeofUSN_JOURNAL_DATA_V1 = 64;

export function allocUSN_JOURNAL_DATA_V1(data?: Partial<USN_JOURNAL_DATA_V1>): Uint8Array {
  const buf = new Uint8Array(sizeofUSN_JOURNAL_DATA_V1);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.UsnJournalID !== undefined) view.setBigUint64(0, util.toBigInt(data.UsnJournalID), true);
  // 0x08: i64
  if (data?.FirstUsn !== undefined) view.setBigInt64(8, util.toBigInt(data.FirstUsn), true);
  // 0x10: i64
  if (data?.NextUsn !== undefined) view.setBigInt64(16, util.toBigInt(data.NextUsn), true);
  // 0x18: i64
  if (data?.LowestValidUsn !== undefined) view.setBigInt64(24, util.toBigInt(data.LowestValidUsn), true);
  // 0x20: i64
  if (data?.MaxUsn !== undefined) view.setBigInt64(32, util.toBigInt(data.MaxUsn), true);
  // 0x28: u64
  if (data?.MaximumSize !== undefined) view.setBigUint64(40, util.toBigInt(data.MaximumSize), true);
  // 0x30: u64
  if (data?.AllocationDelta !== undefined) view.setBigUint64(48, util.toBigInt(data.AllocationDelta), true);
  // 0x38: u16
  if (data?.MinSupportedMajorVersion !== undefined) view.setUint16(56, Number(data.MinSupportedMajorVersion), true);
  // 0x3a: u16
  if (data?.MaxSupportedMajorVersion !== undefined) view.setUint16(58, Number(data.MaxSupportedMajorVersion), true);
  // 0x3c: pad4
  return buf;
}

export class USN_JOURNAL_DATA_V1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get UsnJournalID(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: i64
  get FirstUsn(): number | bigint {
    return this.view.getBigInt64(8, true);
  }

  // 0x10: i64
  get NextUsn(): number | bigint {
    return this.view.getBigInt64(16, true);
  }

  // 0x18: i64
  get LowestValidUsn(): number | bigint {
    return this.view.getBigInt64(24, true);
  }

  // 0x20: i64
  get MaxUsn(): number | bigint {
    return this.view.getBigInt64(32, true);
  }

  // 0x28: u64
  get MaximumSize(): number | bigint {
    return this.view.getBigUint64(40, true);
  }

  // 0x30: u64
  get AllocationDelta(): number | bigint {
    return this.view.getBigUint64(48, true);
  }

  // 0x38: u16
  get MinSupportedMajorVersion(): number {
    return this.view.getUint16(56, true);
  }

  // 0x3a: u16
  get MaxSupportedMajorVersion(): number {
    return this.view.getUint16(58, true);
  }

  // 0x3c: pad4

  // 0x00: u64
  set UsnJournalID(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: i64
  set FirstUsn(value: number | bigint) {
    this.view.setBigInt64(8, util.toBigInt(value), true);
  }

  // 0x10: i64
  set NextUsn(value: number | bigint) {
    this.view.setBigInt64(16, util.toBigInt(value), true);
  }

  // 0x18: i64
  set LowestValidUsn(value: number | bigint) {
    this.view.setBigInt64(24, util.toBigInt(value), true);
  }

  // 0x20: i64
  set MaxUsn(value: number | bigint) {
    this.view.setBigInt64(32, util.toBigInt(value), true);
  }

  // 0x28: u64
  set MaximumSize(value: number | bigint) {
    this.view.setBigUint64(40, util.toBigInt(value), true);
  }

  // 0x30: u64
  set AllocationDelta(value: number | bigint) {
    this.view.setBigUint64(48, util.toBigInt(value), true);
  }

  // 0x38: u16
  set MinSupportedMajorVersion(value: number) {
    this.view.setUint16(56, value, true);
  }

  // 0x3a: u16
  set MaxSupportedMajorVersion(value: number) {
    this.view.setUint16(58, value, true);
  }

  // 0x3c: pad4
}

/**
 * Windows.Win32.System.Ioctl.USN_JOURNAL_DATA_V2 (size: 80)
 */
export interface USN_JOURNAL_DATA_V2 {
  /** u64 */
  UsnJournalID: number | bigint;
  /** i64 */
  FirstUsn: number | bigint;
  /** i64 */
  NextUsn: number | bigint;
  /** i64 */
  LowestValidUsn: number | bigint;
  /** i64 */
  MaxUsn: number | bigint;
  /** u64 */
  MaximumSize: number | bigint;
  /** u64 */
  AllocationDelta: number | bigint;
  /** u16 */
  MinSupportedMajorVersion: number;
  /** u16 */
  MaxSupportedMajorVersion: number;
  /** u32 */
  Flags: number;
  /** u64 */
  RangeTrackChunkSize: number | bigint;
  /** i64 */
  RangeTrackFileSizeThreshold: number | bigint;
}

export const sizeofUSN_JOURNAL_DATA_V2 = 80;

export function allocUSN_JOURNAL_DATA_V2(data?: Partial<USN_JOURNAL_DATA_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofUSN_JOURNAL_DATA_V2);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.UsnJournalID !== undefined) view.setBigUint64(0, util.toBigInt(data.UsnJournalID), true);
  // 0x08: i64
  if (data?.FirstUsn !== undefined) view.setBigInt64(8, util.toBigInt(data.FirstUsn), true);
  // 0x10: i64
  if (data?.NextUsn !== undefined) view.setBigInt64(16, util.toBigInt(data.NextUsn), true);
  // 0x18: i64
  if (data?.LowestValidUsn !== undefined) view.setBigInt64(24, util.toBigInt(data.LowestValidUsn), true);
  // 0x20: i64
  if (data?.MaxUsn !== undefined) view.setBigInt64(32, util.toBigInt(data.MaxUsn), true);
  // 0x28: u64
  if (data?.MaximumSize !== undefined) view.setBigUint64(40, util.toBigInt(data.MaximumSize), true);
  // 0x30: u64
  if (data?.AllocationDelta !== undefined) view.setBigUint64(48, util.toBigInt(data.AllocationDelta), true);
  // 0x38: u16
  if (data?.MinSupportedMajorVersion !== undefined) view.setUint16(56, Number(data.MinSupportedMajorVersion), true);
  // 0x3a: u16
  if (data?.MaxSupportedMajorVersion !== undefined) view.setUint16(58, Number(data.MaxSupportedMajorVersion), true);
  // 0x3c: u32
  if (data?.Flags !== undefined) view.setUint32(60, Number(data.Flags), true);
  // 0x40: u64
  if (data?.RangeTrackChunkSize !== undefined) view.setBigUint64(64, util.toBigInt(data.RangeTrackChunkSize), true);
  // 0x48: i64
  if (data?.RangeTrackFileSizeThreshold !== undefined) view.setBigInt64(72, util.toBigInt(data.RangeTrackFileSizeThreshold), true);
  return buf;
}

export class USN_JOURNAL_DATA_V2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get UsnJournalID(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: i64
  get FirstUsn(): number | bigint {
    return this.view.getBigInt64(8, true);
  }

  // 0x10: i64
  get NextUsn(): number | bigint {
    return this.view.getBigInt64(16, true);
  }

  // 0x18: i64
  get LowestValidUsn(): number | bigint {
    return this.view.getBigInt64(24, true);
  }

  // 0x20: i64
  get MaxUsn(): number | bigint {
    return this.view.getBigInt64(32, true);
  }

  // 0x28: u64
  get MaximumSize(): number | bigint {
    return this.view.getBigUint64(40, true);
  }

  // 0x30: u64
  get AllocationDelta(): number | bigint {
    return this.view.getBigUint64(48, true);
  }

  // 0x38: u16
  get MinSupportedMajorVersion(): number {
    return this.view.getUint16(56, true);
  }

  // 0x3a: u16
  get MaxSupportedMajorVersion(): number {
    return this.view.getUint16(58, true);
  }

  // 0x3c: u32
  get Flags(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u64
  get RangeTrackChunkSize(): number | bigint {
    return this.view.getBigUint64(64, true);
  }

  // 0x48: i64
  get RangeTrackFileSizeThreshold(): number | bigint {
    return this.view.getBigInt64(72, true);
  }

  // 0x00: u64
  set UsnJournalID(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: i64
  set FirstUsn(value: number | bigint) {
    this.view.setBigInt64(8, util.toBigInt(value), true);
  }

  // 0x10: i64
  set NextUsn(value: number | bigint) {
    this.view.setBigInt64(16, util.toBigInt(value), true);
  }

  // 0x18: i64
  set LowestValidUsn(value: number | bigint) {
    this.view.setBigInt64(24, util.toBigInt(value), true);
  }

  // 0x20: i64
  set MaxUsn(value: number | bigint) {
    this.view.setBigInt64(32, util.toBigInt(value), true);
  }

  // 0x28: u64
  set MaximumSize(value: number | bigint) {
    this.view.setBigUint64(40, util.toBigInt(value), true);
  }

  // 0x30: u64
  set AllocationDelta(value: number | bigint) {
    this.view.setBigUint64(48, util.toBigInt(value), true);
  }

  // 0x38: u16
  set MinSupportedMajorVersion(value: number) {
    this.view.setUint16(56, value, true);
  }

  // 0x3a: u16
  set MaxSupportedMajorVersion(value: number) {
    this.view.setUint16(58, value, true);
  }

  // 0x3c: u32
  set Flags(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u64
  set RangeTrackChunkSize(value: number | bigint) {
    this.view.setBigUint64(64, util.toBigInt(value), true);
  }

  // 0x48: i64
  set RangeTrackFileSizeThreshold(value: number | bigint) {
    this.view.setBigInt64(72, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DELETE_USN_JOURNAL_DATA (size: 16)
 */
export interface DELETE_USN_JOURNAL_DATA {
  /** u64 */
  UsnJournalID: number | bigint;
  /** Windows.Win32.System.Ioctl.USN_DELETE_FLAGS */
  DeleteFlags: USN_DELETE_FLAGS;
}

export const sizeofDELETE_USN_JOURNAL_DATA = 16;

export function allocDELETE_USN_JOURNAL_DATA(data?: Partial<DELETE_USN_JOURNAL_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDELETE_USN_JOURNAL_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.UsnJournalID !== undefined) view.setBigUint64(0, util.toBigInt(data.UsnJournalID), true);
  // 0x08: u32
  if (data?.DeleteFlags !== undefined) view.setUint32(8, Number(data.DeleteFlags), true);
  // 0x0c: pad4
  return buf;
}

export class DELETE_USN_JOURNAL_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get UsnJournalID(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u32
  get DeleteFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u64
  set UsnJournalID(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u32
  set DeleteFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Ioctl.MARK_HANDLE_INFO (size: 24)
 */
export interface MARK_HANDLE_INFO {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  VolumeHandle: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  HandleInfo: number;
}

export const sizeofMARK_HANDLE_INFO = 24;

export function allocMARK_HANDLE_INFO(data?: Partial<MARK_HANDLE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMARK_HANDLE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.VolumeHandle !== undefined) view.setBigUint64(8, data.VolumeHandle === null ? 0n : util.toBigInt(util.toPointer(data.VolumeHandle)), true);
  // 0x10: u32
  if (data?.HandleInfo !== undefined) view.setUint32(16, Number(data.HandleInfo), true);
  // 0x14: pad4
  return buf;
}

export class MARK_HANDLE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get VolumeHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get HandleInfo(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set VolumeHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set HandleInfo(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.System.Ioctl.BULK_SECURITY_TEST_DATA (size: 16)
 */
export interface BULK_SECURITY_TEST_DATA {
  /** u32 */
  DesiredAccess: number;
  /** array */
  SecurityIds: Deno.PointerValue | null;
}

export const sizeofBULK_SECURITY_TEST_DATA = 16;

export function allocBULK_SECURITY_TEST_DATA(data?: Partial<BULK_SECURITY_TEST_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofBULK_SECURITY_TEST_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DesiredAccess !== undefined) view.setUint32(0, Number(data.DesiredAccess), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SecurityIds !== undefined) view.setBigUint64(8, data.SecurityIds === null ? 0n : util.toBigInt(util.toPointer(data.SecurityIds)), true);
  return buf;
}

export class BULK_SECURITY_TEST_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get DesiredAccess(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get SecurityIds(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set DesiredAccess(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set SecurityIds(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FILE_PREFETCH (size: 16)
 */
export interface FILE_PREFETCH {
  /** u32 */
  Type: number;
  /** u32 */
  Count: number;
  /** array */
  Prefetch: Deno.PointerValue | null;
}

export const sizeofFILE_PREFETCH = 16;

export function allocFILE_PREFETCH(data?: Partial<FILE_PREFETCH>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_PREFETCH);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Type !== undefined) view.setUint32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Count !== undefined) view.setUint32(4, Number(data.Count), true);
  // 0x08: pointer
  if (data?.Prefetch !== undefined) view.setBigUint64(8, data.Prefetch === null ? 0n : util.toBigInt(util.toPointer(data.Prefetch)), true);
  return buf;
}

export class FILE_PREFETCHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Type(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Count(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Prefetch(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Type(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Count(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Prefetch(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FILE_PREFETCH_EX (size: 24)
 */
export interface FILE_PREFETCH_EX {
  /** u32 */
  Type: number;
  /** u32 */
  Count: number;
  /** ptr */
  Context: Deno.PointerValue | Uint8Array | null;
  /** array */
  Prefetch: Deno.PointerValue | null;
}

export const sizeofFILE_PREFETCH_EX = 24;

export function allocFILE_PREFETCH_EX(data?: Partial<FILE_PREFETCH_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_PREFETCH_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Type !== undefined) view.setUint32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Count !== undefined) view.setUint32(4, Number(data.Count), true);
  // 0x08: pointer
  if (data?.Context !== undefined) view.setBigUint64(8, data.Context === null ? 0n : util.toBigInt(util.toPointer(data.Context)), true);
  // 0x10: pointer
  if (data?.Prefetch !== undefined) view.setBigUint64(16, data.Prefetch === null ? 0n : util.toBigInt(util.toPointer(data.Prefetch)), true);
  return buf;
}

export class FILE_PREFETCH_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Type(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Count(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Context(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Prefetch(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Type(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Count(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Context(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Prefetch(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FILESYSTEM_STATISTICS (size: 56)
 */
export interface FILESYSTEM_STATISTICS {
  /** Windows.Win32.System.Ioctl.FILESYSTEM_STATISTICS_TYPE */
  FileSystemType: FILESYSTEM_STATISTICS_TYPE;
  /** u16 */
  Version: number;
  /** u32 */
  SizeOfCompleteStructure: number;
  /** u32 */
  UserFileReads: number;
  /** u32 */
  UserFileReadBytes: number;
  /** u32 */
  UserDiskReads: number;
  /** u32 */
  UserFileWrites: number;
  /** u32 */
  UserFileWriteBytes: number;
  /** u32 */
  UserDiskWrites: number;
  /** u32 */
  MetaDataReads: number;
  /** u32 */
  MetaDataReadBytes: number;
  /** u32 */
  MetaDataDiskReads: number;
  /** u32 */
  MetaDataWrites: number;
  /** u32 */
  MetaDataWriteBytes: number;
  /** u32 */
  MetaDataDiskWrites: number;
}

export const sizeofFILESYSTEM_STATISTICS = 56;

export function allocFILESYSTEM_STATISTICS(data?: Partial<FILESYSTEM_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofFILESYSTEM_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.FileSystemType !== undefined) view.setUint16(0, Number(data.FileSystemType), true);
  // 0x02: u16
  if (data?.Version !== undefined) view.setUint16(2, Number(data.Version), true);
  // 0x04: u32
  if (data?.SizeOfCompleteStructure !== undefined) view.setUint32(4, Number(data.SizeOfCompleteStructure), true);
  // 0x08: u32
  if (data?.UserFileReads !== undefined) view.setUint32(8, Number(data.UserFileReads), true);
  // 0x0c: u32
  if (data?.UserFileReadBytes !== undefined) view.setUint32(12, Number(data.UserFileReadBytes), true);
  // 0x10: u32
  if (data?.UserDiskReads !== undefined) view.setUint32(16, Number(data.UserDiskReads), true);
  // 0x14: u32
  if (data?.UserFileWrites !== undefined) view.setUint32(20, Number(data.UserFileWrites), true);
  // 0x18: u32
  if (data?.UserFileWriteBytes !== undefined) view.setUint32(24, Number(data.UserFileWriteBytes), true);
  // 0x1c: u32
  if (data?.UserDiskWrites !== undefined) view.setUint32(28, Number(data.UserDiskWrites), true);
  // 0x20: u32
  if (data?.MetaDataReads !== undefined) view.setUint32(32, Number(data.MetaDataReads), true);
  // 0x24: u32
  if (data?.MetaDataReadBytes !== undefined) view.setUint32(36, Number(data.MetaDataReadBytes), true);
  // 0x28: u32
  if (data?.MetaDataDiskReads !== undefined) view.setUint32(40, Number(data.MetaDataDiskReads), true);
  // 0x2c: u32
  if (data?.MetaDataWrites !== undefined) view.setUint32(44, Number(data.MetaDataWrites), true);
  // 0x30: u32
  if (data?.MetaDataWriteBytes !== undefined) view.setUint32(48, Number(data.MetaDataWriteBytes), true);
  // 0x34: u32
  if (data?.MetaDataDiskWrites !== undefined) view.setUint32(52, Number(data.MetaDataDiskWrites), true);
  return buf;
}

export class FILESYSTEM_STATISTICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get FileSystemType(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Version(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get SizeOfCompleteStructure(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get UserFileReads(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get UserFileReadBytes(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get UserDiskReads(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get UserFileWrites(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get UserFileWriteBytes(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get UserDiskWrites(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get MetaDataReads(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get MetaDataReadBytes(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get MetaDataDiskReads(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get MetaDataWrites(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get MetaDataWriteBytes(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get MetaDataDiskWrites(): number {
    return this.view.getUint32(52, true);
  }

  // 0x00: u16
  set FileSystemType(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Version(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set SizeOfCompleteStructure(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set UserFileReads(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set UserFileReadBytes(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set UserDiskReads(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set UserFileWrites(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set UserFileWriteBytes(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set UserDiskWrites(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set MetaDataReads(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set MetaDataReadBytes(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set MetaDataDiskReads(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set MetaDataWrites(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set MetaDataWriteBytes(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set MetaDataDiskWrites(value: number) {
    this.view.setUint32(52, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FAT_STATISTICS (size: 40)
 */
export interface FAT_STATISTICS {
  /** u32 */
  CreateHits: number;
  /** u32 */
  SuccessfulCreates: number;
  /** u32 */
  FailedCreates: number;
  /** u32 */
  NonCachedReads: number;
  /** u32 */
  NonCachedReadBytes: number;
  /** u32 */
  NonCachedWrites: number;
  /** u32 */
  NonCachedWriteBytes: number;
  /** u32 */
  NonCachedDiskReads: number;
  /** u32 */
  NonCachedDiskWrites: number;
}

export const sizeofFAT_STATISTICS = 40;

export function allocFAT_STATISTICS(data?: Partial<FAT_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofFAT_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CreateHits !== undefined) view.setUint32(0, Number(data.CreateHits), true);
  // 0x04: u32
  if (data?.SuccessfulCreates !== undefined) view.setUint32(4, Number(data.SuccessfulCreates), true);
  // 0x08: u32
  if (data?.FailedCreates !== undefined) view.setUint32(8, Number(data.FailedCreates), true);
  // 0x0c: u32
  if (data?.NonCachedReads !== undefined) view.setUint32(12, Number(data.NonCachedReads), true);
  // 0x10: u32
  if (data?.NonCachedReadBytes !== undefined) view.setUint32(16, Number(data.NonCachedReadBytes), true);
  // 0x14: u32
  if (data?.NonCachedWrites !== undefined) view.setUint32(20, Number(data.NonCachedWrites), true);
  // 0x18: u32
  if (data?.NonCachedWriteBytes !== undefined) view.setUint32(24, Number(data.NonCachedWriteBytes), true);
  // 0x1c: u32
  if (data?.NonCachedDiskReads !== undefined) view.setUint32(28, Number(data.NonCachedDiskReads), true);
  // 0x20: u32
  if (data?.NonCachedDiskWrites !== undefined) view.setUint32(32, Number(data.NonCachedDiskWrites), true);
  // 0x24: pad4
  return buf;
}

export class FAT_STATISTICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get CreateHits(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SuccessfulCreates(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get FailedCreates(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get NonCachedReads(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get NonCachedReadBytes(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get NonCachedWrites(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get NonCachedWriteBytes(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get NonCachedDiskReads(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get NonCachedDiskWrites(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set CreateHits(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SuccessfulCreates(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set FailedCreates(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set NonCachedReads(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set NonCachedReadBytes(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set NonCachedWrites(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set NonCachedWriteBytes(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set NonCachedDiskReads(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set NonCachedDiskWrites(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.System.Ioctl.EXFAT_STATISTICS (size: 40)
 */
export interface EXFAT_STATISTICS {
  /** u32 */
  CreateHits: number;
  /** u32 */
  SuccessfulCreates: number;
  /** u32 */
  FailedCreates: number;
  /** u32 */
  NonCachedReads: number;
  /** u32 */
  NonCachedReadBytes: number;
  /** u32 */
  NonCachedWrites: number;
  /** u32 */
  NonCachedWriteBytes: number;
  /** u32 */
  NonCachedDiskReads: number;
  /** u32 */
  NonCachedDiskWrites: number;
}

export const sizeofEXFAT_STATISTICS = 40;

export function allocEXFAT_STATISTICS(data?: Partial<EXFAT_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofEXFAT_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CreateHits !== undefined) view.setUint32(0, Number(data.CreateHits), true);
  // 0x04: u32
  if (data?.SuccessfulCreates !== undefined) view.setUint32(4, Number(data.SuccessfulCreates), true);
  // 0x08: u32
  if (data?.FailedCreates !== undefined) view.setUint32(8, Number(data.FailedCreates), true);
  // 0x0c: u32
  if (data?.NonCachedReads !== undefined) view.setUint32(12, Number(data.NonCachedReads), true);
  // 0x10: u32
  if (data?.NonCachedReadBytes !== undefined) view.setUint32(16, Number(data.NonCachedReadBytes), true);
  // 0x14: u32
  if (data?.NonCachedWrites !== undefined) view.setUint32(20, Number(data.NonCachedWrites), true);
  // 0x18: u32
  if (data?.NonCachedWriteBytes !== undefined) view.setUint32(24, Number(data.NonCachedWriteBytes), true);
  // 0x1c: u32
  if (data?.NonCachedDiskReads !== undefined) view.setUint32(28, Number(data.NonCachedDiskReads), true);
  // 0x20: u32
  if (data?.NonCachedDiskWrites !== undefined) view.setUint32(32, Number(data.NonCachedDiskWrites), true);
  // 0x24: pad4
  return buf;
}

export class EXFAT_STATISTICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get CreateHits(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SuccessfulCreates(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get FailedCreates(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get NonCachedReads(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get NonCachedReadBytes(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get NonCachedWrites(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get NonCachedWriteBytes(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get NonCachedDiskReads(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get NonCachedDiskWrites(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set CreateHits(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SuccessfulCreates(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set FailedCreates(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set NonCachedReads(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set NonCachedReadBytes(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set NonCachedWrites(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set NonCachedWriteBytes(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set NonCachedDiskReads(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set NonCachedDiskWrites(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * _MftWritesUserLevel_e__Struct (size: 8)
 */
export interface _MftWritesUserLevel_e__Struct {
  /** u16 */
  Write: number;
  /** u16 */
  Create: number;
  /** u16 */
  SetInfo: number;
  /** u16 */
  Flush: number;
}

export const sizeof_MftWritesUserLevel_e__Struct = 8;

export function alloc_MftWritesUserLevel_e__Struct(data?: Partial<_MftWritesUserLevel_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_MftWritesUserLevel_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Write !== undefined) view.setUint16(0, Number(data.Write), true);
  // 0x02: u16
  if (data?.Create !== undefined) view.setUint16(2, Number(data.Create), true);
  // 0x04: u16
  if (data?.SetInfo !== undefined) view.setUint16(4, Number(data.SetInfo), true);
  // 0x06: u16
  if (data?.Flush !== undefined) view.setUint16(6, Number(data.Flush), true);
  return buf;
}

export class _MftWritesUserLevel_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Write(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Create(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get SetInfo(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get Flush(): number {
    return this.view.getUint16(6, true);
  }

  // 0x00: u16
  set Write(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Create(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set SetInfo(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set Flush(value: number) {
    this.view.setUint16(6, value, true);
  }
}

/**
 * _Mft2WritesUserLevel_e__Struct (size: 8)
 */
export interface _Mft2WritesUserLevel_e__Struct {
  /** u16 */
  Write: number;
  /** u16 */
  Create: number;
  /** u16 */
  SetInfo: number;
  /** u16 */
  Flush: number;
}

export const sizeof_Mft2WritesUserLevel_e__Struct = 8;

export function alloc_Mft2WritesUserLevel_e__Struct(data?: Partial<_Mft2WritesUserLevel_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Mft2WritesUserLevel_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Write !== undefined) view.setUint16(0, Number(data.Write), true);
  // 0x02: u16
  if (data?.Create !== undefined) view.setUint16(2, Number(data.Create), true);
  // 0x04: u16
  if (data?.SetInfo !== undefined) view.setUint16(4, Number(data.SetInfo), true);
  // 0x06: u16
  if (data?.Flush !== undefined) view.setUint16(6, Number(data.Flush), true);
  return buf;
}

export class _Mft2WritesUserLevel_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Write(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Create(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get SetInfo(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get Flush(): number {
    return this.view.getUint16(6, true);
  }

  // 0x00: u16
  set Write(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Create(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set SetInfo(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set Flush(value: number) {
    this.view.setUint16(6, value, true);
  }
}

/**
 * _BitmapWritesUserLevel_e__Struct (size: 8)
 */
export interface _BitmapWritesUserLevel_e__Struct {
  /** u16 */
  Write: number;
  /** u16 */
  Create: number;
  /** u16 */
  SetInfo: number;
}

export const sizeof_BitmapWritesUserLevel_e__Struct = 8;

export function alloc_BitmapWritesUserLevel_e__Struct(data?: Partial<_BitmapWritesUserLevel_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_BitmapWritesUserLevel_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Write !== undefined) view.setUint16(0, Number(data.Write), true);
  // 0x02: u16
  if (data?.Create !== undefined) view.setUint16(2, Number(data.Create), true);
  // 0x04: u16
  if (data?.SetInfo !== undefined) view.setUint16(4, Number(data.SetInfo), true);
  // 0x06: pad2
  return buf;
}

export class _BitmapWritesUserLevel_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Write(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Create(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get SetInfo(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: pad2

  // 0x00: u16
  set Write(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Create(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set SetInfo(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: pad2
}

/**
 * _MftBitmapWritesUserLevel_e__Struct (size: 8)
 */
export interface _MftBitmapWritesUserLevel_e__Struct {
  /** u16 */
  Write: number;
  /** u16 */
  Create: number;
  /** u16 */
  SetInfo: number;
  /** u16 */
  Flush: number;
}

export const sizeof_MftBitmapWritesUserLevel_e__Struct = 8;

export function alloc_MftBitmapWritesUserLevel_e__Struct(data?: Partial<_MftBitmapWritesUserLevel_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_MftBitmapWritesUserLevel_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Write !== undefined) view.setUint16(0, Number(data.Write), true);
  // 0x02: u16
  if (data?.Create !== undefined) view.setUint16(2, Number(data.Create), true);
  // 0x04: u16
  if (data?.SetInfo !== undefined) view.setUint16(4, Number(data.SetInfo), true);
  // 0x06: u16
  if (data?.Flush !== undefined) view.setUint16(6, Number(data.Flush), true);
  return buf;
}

export class _MftBitmapWritesUserLevel_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Write(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Create(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get SetInfo(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get Flush(): number {
    return this.view.getUint16(6, true);
  }

  // 0x00: u16
  set Write(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Create(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set SetInfo(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set Flush(value: number) {
    this.view.setUint16(6, value, true);
  }
}

/**
 * _Allocate_e__Struct (size: 40)
 */
export interface _Allocate_e__Struct {
  /** u32 */
  Calls: number;
  /** u32 */
  Clusters: number;
  /** u32 */
  Hints: number;
  /** u32 */
  RunsReturned: number;
  /** u32 */
  HintsHonored: number;
  /** u32 */
  HintsClusters: number;
  /** u32 */
  Cache: number;
  /** u32 */
  CacheClusters: number;
  /** u32 */
  CacheMiss: number;
  /** u32 */
  CacheMissClusters: number;
}

export const sizeof_Allocate_e__Struct = 40;

export function alloc_Allocate_e__Struct(data?: Partial<_Allocate_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Allocate_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Calls !== undefined) view.setUint32(0, Number(data.Calls), true);
  // 0x04: u32
  if (data?.Clusters !== undefined) view.setUint32(4, Number(data.Clusters), true);
  // 0x08: u32
  if (data?.Hints !== undefined) view.setUint32(8, Number(data.Hints), true);
  // 0x0c: u32
  if (data?.RunsReturned !== undefined) view.setUint32(12, Number(data.RunsReturned), true);
  // 0x10: u32
  if (data?.HintsHonored !== undefined) view.setUint32(16, Number(data.HintsHonored), true);
  // 0x14: u32
  if (data?.HintsClusters !== undefined) view.setUint32(20, Number(data.HintsClusters), true);
  // 0x18: u32
  if (data?.Cache !== undefined) view.setUint32(24, Number(data.Cache), true);
  // 0x1c: u32
  if (data?.CacheClusters !== undefined) view.setUint32(28, Number(data.CacheClusters), true);
  // 0x20: u32
  if (data?.CacheMiss !== undefined) view.setUint32(32, Number(data.CacheMiss), true);
  // 0x24: u32
  if (data?.CacheMissClusters !== undefined) view.setUint32(36, Number(data.CacheMissClusters), true);
  return buf;
}

export class _Allocate_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Calls(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Clusters(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Hints(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get RunsReturned(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get HintsHonored(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get HintsClusters(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get Cache(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get CacheClusters(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get CacheMiss(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get CacheMissClusters(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: u32
  set Calls(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Clusters(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Hints(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set RunsReturned(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set HintsHonored(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set HintsClusters(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set Cache(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set CacheClusters(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set CacheMiss(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set CacheMissClusters(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.NTFS_STATISTICS (size: 192)
 */
export interface NTFS_STATISTICS {
  /** u32 */
  LogFileFullExceptions: number;
  /** u32 */
  OtherExceptions: number;
  /** u32 */
  MftReads: number;
  /** u32 */
  MftReadBytes: number;
  /** u32 */
  MftWrites: number;
  /** u32 */
  MftWriteBytes: number;
  /** _MftWritesUserLevel_e__Struct */
  MftWritesUserLevel: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  MftWritesFlushForLogFileFull: number;
  /** u16 */
  MftWritesLazyWriter: number;
  /** u16 */
  MftWritesUserRequest: number;
  /** u32 */
  Mft2Writes: number;
  /** u32 */
  Mft2WriteBytes: number;
  /** _Mft2WritesUserLevel_e__Struct */
  Mft2WritesUserLevel: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  Mft2WritesFlushForLogFileFull: number;
  /** u16 */
  Mft2WritesLazyWriter: number;
  /** u16 */
  Mft2WritesUserRequest: number;
  /** u32 */
  RootIndexReads: number;
  /** u32 */
  RootIndexReadBytes: number;
  /** u32 */
  RootIndexWrites: number;
  /** u32 */
  RootIndexWriteBytes: number;
  /** u32 */
  BitmapReads: number;
  /** u32 */
  BitmapReadBytes: number;
  /** u32 */
  BitmapWrites: number;
  /** u32 */
  BitmapWriteBytes: number;
  /** u16 */
  BitmapWritesFlushForLogFileFull: number;
  /** u16 */
  BitmapWritesLazyWriter: number;
  /** u16 */
  BitmapWritesUserRequest: number;
  /** _BitmapWritesUserLevel_e__Struct */
  BitmapWritesUserLevel: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  MftBitmapReads: number;
  /** u32 */
  MftBitmapReadBytes: number;
  /** u32 */
  MftBitmapWrites: number;
  /** u32 */
  MftBitmapWriteBytes: number;
  /** u16 */
  MftBitmapWritesFlushForLogFileFull: number;
  /** u16 */
  MftBitmapWritesLazyWriter: number;
  /** u16 */
  MftBitmapWritesUserRequest: number;
  /** _MftBitmapWritesUserLevel_e__Struct */
  MftBitmapWritesUserLevel: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  UserIndexReads: number;
  /** u32 */
  UserIndexReadBytes: number;
  /** u32 */
  UserIndexWrites: number;
  /** u32 */
  UserIndexWriteBytes: number;
  /** u32 */
  LogFileReads: number;
  /** u32 */
  LogFileReadBytes: number;
  /** u32 */
  LogFileWrites: number;
  /** u32 */
  LogFileWriteBytes: number;
  /** _Allocate_e__Struct */
  Allocate: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  DiskResourcesExhausted: number;
}

export const sizeofNTFS_STATISTICS = 192;

export function allocNTFS_STATISTICS(data?: Partial<NTFS_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofNTFS_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.LogFileFullExceptions !== undefined) view.setUint32(0, Number(data.LogFileFullExceptions), true);
  // 0x04: u32
  if (data?.OtherExceptions !== undefined) view.setUint32(4, Number(data.OtherExceptions), true);
  // 0x08: u32
  if (data?.MftReads !== undefined) view.setUint32(8, Number(data.MftReads), true);
  // 0x0c: u32
  if (data?.MftReadBytes !== undefined) view.setUint32(12, Number(data.MftReadBytes), true);
  // 0x10: u32
  if (data?.MftWrites !== undefined) view.setUint32(16, Number(data.MftWrites), true);
  // 0x14: u32
  if (data?.MftWriteBytes !== undefined) view.setUint32(20, Number(data.MftWriteBytes), true);
  // 0x18: pointer
  if (data?.MftWritesUserLevel !== undefined) view.setBigUint64(24, data.MftWritesUserLevel === null ? 0n : util.toBigInt(util.toPointer(data.MftWritesUserLevel)), true);
  // 0x20: u16
  if (data?.MftWritesFlushForLogFileFull !== undefined) view.setUint16(32, Number(data.MftWritesFlushForLogFileFull), true);
  // 0x22: u16
  if (data?.MftWritesLazyWriter !== undefined) view.setUint16(34, Number(data.MftWritesLazyWriter), true);
  // 0x24: u16
  if (data?.MftWritesUserRequest !== undefined) view.setUint16(36, Number(data.MftWritesUserRequest), true);
  // 0x26: u32
  if (data?.Mft2Writes !== undefined) view.setUint32(38, Number(data.Mft2Writes), true);
  // 0x2a: u32
  if (data?.Mft2WriteBytes !== undefined) view.setUint32(42, Number(data.Mft2WriteBytes), true);
  // 0x2e: pad2
  // 0x30: pointer
  if (data?.Mft2WritesUserLevel !== undefined) view.setBigUint64(48, data.Mft2WritesUserLevel === null ? 0n : util.toBigInt(util.toPointer(data.Mft2WritesUserLevel)), true);
  // 0x38: u16
  if (data?.Mft2WritesFlushForLogFileFull !== undefined) view.setUint16(56, Number(data.Mft2WritesFlushForLogFileFull), true);
  // 0x3a: u16
  if (data?.Mft2WritesLazyWriter !== undefined) view.setUint16(58, Number(data.Mft2WritesLazyWriter), true);
  // 0x3c: u16
  if (data?.Mft2WritesUserRequest !== undefined) view.setUint16(60, Number(data.Mft2WritesUserRequest), true);
  // 0x3e: u32
  if (data?.RootIndexReads !== undefined) view.setUint32(62, Number(data.RootIndexReads), true);
  // 0x42: u32
  if (data?.RootIndexReadBytes !== undefined) view.setUint32(66, Number(data.RootIndexReadBytes), true);
  // 0x46: u32
  if (data?.RootIndexWrites !== undefined) view.setUint32(70, Number(data.RootIndexWrites), true);
  // 0x4a: u32
  if (data?.RootIndexWriteBytes !== undefined) view.setUint32(74, Number(data.RootIndexWriteBytes), true);
  // 0x4e: u32
  if (data?.BitmapReads !== undefined) view.setUint32(78, Number(data.BitmapReads), true);
  // 0x52: u32
  if (data?.BitmapReadBytes !== undefined) view.setUint32(82, Number(data.BitmapReadBytes), true);
  // 0x56: u32
  if (data?.BitmapWrites !== undefined) view.setUint32(86, Number(data.BitmapWrites), true);
  // 0x5a: u32
  if (data?.BitmapWriteBytes !== undefined) view.setUint32(90, Number(data.BitmapWriteBytes), true);
  // 0x5e: u16
  if (data?.BitmapWritesFlushForLogFileFull !== undefined) view.setUint16(94, Number(data.BitmapWritesFlushForLogFileFull), true);
  // 0x60: u16
  if (data?.BitmapWritesLazyWriter !== undefined) view.setUint16(96, Number(data.BitmapWritesLazyWriter), true);
  // 0x62: u16
  if (data?.BitmapWritesUserRequest !== undefined) view.setUint16(98, Number(data.BitmapWritesUserRequest), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.BitmapWritesUserLevel !== undefined) view.setBigUint64(104, data.BitmapWritesUserLevel === null ? 0n : util.toBigInt(util.toPointer(data.BitmapWritesUserLevel)), true);
  // 0x70: u32
  if (data?.MftBitmapReads !== undefined) view.setUint32(112, Number(data.MftBitmapReads), true);
  // 0x74: u32
  if (data?.MftBitmapReadBytes !== undefined) view.setUint32(116, Number(data.MftBitmapReadBytes), true);
  // 0x78: u32
  if (data?.MftBitmapWrites !== undefined) view.setUint32(120, Number(data.MftBitmapWrites), true);
  // 0x7c: u32
  if (data?.MftBitmapWriteBytes !== undefined) view.setUint32(124, Number(data.MftBitmapWriteBytes), true);
  // 0x80: u16
  if (data?.MftBitmapWritesFlushForLogFileFull !== undefined) view.setUint16(128, Number(data.MftBitmapWritesFlushForLogFileFull), true);
  // 0x82: u16
  if (data?.MftBitmapWritesLazyWriter !== undefined) view.setUint16(130, Number(data.MftBitmapWritesLazyWriter), true);
  // 0x84: u16
  if (data?.MftBitmapWritesUserRequest !== undefined) view.setUint16(132, Number(data.MftBitmapWritesUserRequest), true);
  // 0x86: pad2
  // 0x88: pointer
  if (data?.MftBitmapWritesUserLevel !== undefined) view.setBigUint64(136, data.MftBitmapWritesUserLevel === null ? 0n : util.toBigInt(util.toPointer(data.MftBitmapWritesUserLevel)), true);
  // 0x90: u32
  if (data?.UserIndexReads !== undefined) view.setUint32(144, Number(data.UserIndexReads), true);
  // 0x94: u32
  if (data?.UserIndexReadBytes !== undefined) view.setUint32(148, Number(data.UserIndexReadBytes), true);
  // 0x98: u32
  if (data?.UserIndexWrites !== undefined) view.setUint32(152, Number(data.UserIndexWrites), true);
  // 0x9c: u32
  if (data?.UserIndexWriteBytes !== undefined) view.setUint32(156, Number(data.UserIndexWriteBytes), true);
  // 0xa0: u32
  if (data?.LogFileReads !== undefined) view.setUint32(160, Number(data.LogFileReads), true);
  // 0xa4: u32
  if (data?.LogFileReadBytes !== undefined) view.setUint32(164, Number(data.LogFileReadBytes), true);
  // 0xa8: u32
  if (data?.LogFileWrites !== undefined) view.setUint32(168, Number(data.LogFileWrites), true);
  // 0xac: u32
  if (data?.LogFileWriteBytes !== undefined) view.setUint32(172, Number(data.LogFileWriteBytes), true);
  // 0xb0: pointer
  if (data?.Allocate !== undefined) view.setBigUint64(176, data.Allocate === null ? 0n : util.toBigInt(util.toPointer(data.Allocate)), true);
  // 0xb8: u32
  if (data?.DiskResourcesExhausted !== undefined) view.setUint32(184, Number(data.DiskResourcesExhausted), true);
  // 0xbc: pad4
  return buf;
}

export class NTFS_STATISTICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get LogFileFullExceptions(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get OtherExceptions(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get MftReads(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get MftReadBytes(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get MftWrites(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get MftWriteBytes(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get MftWritesUserLevel(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u16
  get MftWritesFlushForLogFileFull(): number {
    return this.view.getUint16(32, true);
  }

  // 0x22: u16
  get MftWritesLazyWriter(): number {
    return this.view.getUint16(34, true);
  }

  // 0x24: u16
  get MftWritesUserRequest(): number {
    return this.view.getUint16(36, true);
  }

  // 0x26: u32
  get Mft2Writes(): number {
    return this.view.getUint32(38, true);
  }

  // 0x2a: u32
  get Mft2WriteBytes(): number {
    return this.view.getUint32(42, true);
  }

  // 0x2e: pad2

  // 0x30: pointer
  get Mft2WritesUserLevel(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u16
  get Mft2WritesFlushForLogFileFull(): number {
    return this.view.getUint16(56, true);
  }

  // 0x3a: u16
  get Mft2WritesLazyWriter(): number {
    return this.view.getUint16(58, true);
  }

  // 0x3c: u16
  get Mft2WritesUserRequest(): number {
    return this.view.getUint16(60, true);
  }

  // 0x3e: u32
  get RootIndexReads(): number {
    return this.view.getUint32(62, true);
  }

  // 0x42: u32
  get RootIndexReadBytes(): number {
    return this.view.getUint32(66, true);
  }

  // 0x46: u32
  get RootIndexWrites(): number {
    return this.view.getUint32(70, true);
  }

  // 0x4a: u32
  get RootIndexWriteBytes(): number {
    return this.view.getUint32(74, true);
  }

  // 0x4e: u32
  get BitmapReads(): number {
    return this.view.getUint32(78, true);
  }

  // 0x52: u32
  get BitmapReadBytes(): number {
    return this.view.getUint32(82, true);
  }

  // 0x56: u32
  get BitmapWrites(): number {
    return this.view.getUint32(86, true);
  }

  // 0x5a: u32
  get BitmapWriteBytes(): number {
    return this.view.getUint32(90, true);
  }

  // 0x5e: u16
  get BitmapWritesFlushForLogFileFull(): number {
    return this.view.getUint16(94, true);
  }

  // 0x60: u16
  get BitmapWritesLazyWriter(): number {
    return this.view.getUint16(96, true);
  }

  // 0x62: u16
  get BitmapWritesUserRequest(): number {
    return this.view.getUint16(98, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  get BitmapWritesUserLevel(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: u32
  get MftBitmapReads(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: u32
  get MftBitmapReadBytes(): number {
    return this.view.getUint32(116, true);
  }

  // 0x78: u32
  get MftBitmapWrites(): number {
    return this.view.getUint32(120, true);
  }

  // 0x7c: u32
  get MftBitmapWriteBytes(): number {
    return this.view.getUint32(124, true);
  }

  // 0x80: u16
  get MftBitmapWritesFlushForLogFileFull(): number {
    return this.view.getUint16(128, true);
  }

  // 0x82: u16
  get MftBitmapWritesLazyWriter(): number {
    return this.view.getUint16(130, true);
  }

  // 0x84: u16
  get MftBitmapWritesUserRequest(): number {
    return this.view.getUint16(132, true);
  }

  // 0x86: pad2

  // 0x88: pointer
  get MftBitmapWritesUserLevel(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(136, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x90: u32
  get UserIndexReads(): number {
    return this.view.getUint32(144, true);
  }

  // 0x94: u32
  get UserIndexReadBytes(): number {
    return this.view.getUint32(148, true);
  }

  // 0x98: u32
  get UserIndexWrites(): number {
    return this.view.getUint32(152, true);
  }

  // 0x9c: u32
  get UserIndexWriteBytes(): number {
    return this.view.getUint32(156, true);
  }

  // 0xa0: u32
  get LogFileReads(): number {
    return this.view.getUint32(160, true);
  }

  // 0xa4: u32
  get LogFileReadBytes(): number {
    return this.view.getUint32(164, true);
  }

  // 0xa8: u32
  get LogFileWrites(): number {
    return this.view.getUint32(168, true);
  }

  // 0xac: u32
  get LogFileWriteBytes(): number {
    return this.view.getUint32(172, true);
  }

  // 0xb0: pointer
  get Allocate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(176, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xb8: u32
  get DiskResourcesExhausted(): number {
    return this.view.getUint32(184, true);
  }

  // 0xbc: pad4

  // 0x00: u32
  set LogFileFullExceptions(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set OtherExceptions(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set MftReads(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set MftReadBytes(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set MftWrites(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set MftWriteBytes(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set MftWritesUserLevel(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u16
  set MftWritesFlushForLogFileFull(value: number) {
    this.view.setUint16(32, value, true);
  }

  // 0x22: u16
  set MftWritesLazyWriter(value: number) {
    this.view.setUint16(34, value, true);
  }

  // 0x24: u16
  set MftWritesUserRequest(value: number) {
    this.view.setUint16(36, value, true);
  }

  // 0x26: u32
  set Mft2Writes(value: number) {
    this.view.setUint32(38, value, true);
  }

  // 0x2a: u32
  set Mft2WriteBytes(value: number) {
    this.view.setUint32(42, value, true);
  }

  // 0x2e: pad2

  // 0x30: pointer
  set Mft2WritesUserLevel(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: u16
  set Mft2WritesFlushForLogFileFull(value: number) {
    this.view.setUint16(56, value, true);
  }

  // 0x3a: u16
  set Mft2WritesLazyWriter(value: number) {
    this.view.setUint16(58, value, true);
  }

  // 0x3c: u16
  set Mft2WritesUserRequest(value: number) {
    this.view.setUint16(60, value, true);
  }

  // 0x3e: u32
  set RootIndexReads(value: number) {
    this.view.setUint32(62, value, true);
  }

  // 0x42: u32
  set RootIndexReadBytes(value: number) {
    this.view.setUint32(66, value, true);
  }

  // 0x46: u32
  set RootIndexWrites(value: number) {
    this.view.setUint32(70, value, true);
  }

  // 0x4a: u32
  set RootIndexWriteBytes(value: number) {
    this.view.setUint32(74, value, true);
  }

  // 0x4e: u32
  set BitmapReads(value: number) {
    this.view.setUint32(78, value, true);
  }

  // 0x52: u32
  set BitmapReadBytes(value: number) {
    this.view.setUint32(82, value, true);
  }

  // 0x56: u32
  set BitmapWrites(value: number) {
    this.view.setUint32(86, value, true);
  }

  // 0x5a: u32
  set BitmapWriteBytes(value: number) {
    this.view.setUint32(90, value, true);
  }

  // 0x5e: u16
  set BitmapWritesFlushForLogFileFull(value: number) {
    this.view.setUint16(94, value, true);
  }

  // 0x60: u16
  set BitmapWritesLazyWriter(value: number) {
    this.view.setUint16(96, value, true);
  }

  // 0x62: u16
  set BitmapWritesUserRequest(value: number) {
    this.view.setUint16(98, value, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  set BitmapWritesUserLevel(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x70: u32
  set MftBitmapReads(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: u32
  set MftBitmapReadBytes(value: number) {
    this.view.setUint32(116, value, true);
  }

  // 0x78: u32
  set MftBitmapWrites(value: number) {
    this.view.setUint32(120, value, true);
  }

  // 0x7c: u32
  set MftBitmapWriteBytes(value: number) {
    this.view.setUint32(124, value, true);
  }

  // 0x80: u16
  set MftBitmapWritesFlushForLogFileFull(value: number) {
    this.view.setUint16(128, value, true);
  }

  // 0x82: u16
  set MftBitmapWritesLazyWriter(value: number) {
    this.view.setUint16(130, value, true);
  }

  // 0x84: u16
  set MftBitmapWritesUserRequest(value: number) {
    this.view.setUint16(132, value, true);
  }

  // 0x86: pad2

  // 0x88: pointer
  set MftBitmapWritesUserLevel(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(136, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x90: u32
  set UserIndexReads(value: number) {
    this.view.setUint32(144, value, true);
  }

  // 0x94: u32
  set UserIndexReadBytes(value: number) {
    this.view.setUint32(148, value, true);
  }

  // 0x98: u32
  set UserIndexWrites(value: number) {
    this.view.setUint32(152, value, true);
  }

  // 0x9c: u32
  set UserIndexWriteBytes(value: number) {
    this.view.setUint32(156, value, true);
  }

  // 0xa0: u32
  set LogFileReads(value: number) {
    this.view.setUint32(160, value, true);
  }

  // 0xa4: u32
  set LogFileReadBytes(value: number) {
    this.view.setUint32(164, value, true);
  }

  // 0xa8: u32
  set LogFileWrites(value: number) {
    this.view.setUint32(168, value, true);
  }

  // 0xac: u32
  set LogFileWriteBytes(value: number) {
    this.view.setUint32(172, value, true);
  }

  // 0xb0: pointer
  set Allocate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(176, util.toBigInt(util.toPointer(value)), true);
  }

  // 0xb8: u32
  set DiskResourcesExhausted(value: number) {
    this.view.setUint32(184, value, true);
  }

  // 0xbc: pad4
}

/**
 * Windows.Win32.System.Ioctl.FILESYSTEM_STATISTICS_EX (size: 104)
 */
export interface FILESYSTEM_STATISTICS_EX {
  /** Windows.Win32.System.Ioctl.FILESYSTEM_STATISTICS_TYPE */
  FileSystemType: FILESYSTEM_STATISTICS_TYPE;
  /** u16 */
  Version: number;
  /** u32 */
  SizeOfCompleteStructure: number;
  /** u64 */
  UserFileReads: number | bigint;
  /** u64 */
  UserFileReadBytes: number | bigint;
  /** u64 */
  UserDiskReads: number | bigint;
  /** u64 */
  UserFileWrites: number | bigint;
  /** u64 */
  UserFileWriteBytes: number | bigint;
  /** u64 */
  UserDiskWrites: number | bigint;
  /** u64 */
  MetaDataReads: number | bigint;
  /** u64 */
  MetaDataReadBytes: number | bigint;
  /** u64 */
  MetaDataDiskReads: number | bigint;
  /** u64 */
  MetaDataWrites: number | bigint;
  /** u64 */
  MetaDataWriteBytes: number | bigint;
  /** u64 */
  MetaDataDiskWrites: number | bigint;
}

export const sizeofFILESYSTEM_STATISTICS_EX = 104;

export function allocFILESYSTEM_STATISTICS_EX(data?: Partial<FILESYSTEM_STATISTICS_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofFILESYSTEM_STATISTICS_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.FileSystemType !== undefined) view.setUint16(0, Number(data.FileSystemType), true);
  // 0x02: u16
  if (data?.Version !== undefined) view.setUint16(2, Number(data.Version), true);
  // 0x04: u32
  if (data?.SizeOfCompleteStructure !== undefined) view.setUint32(4, Number(data.SizeOfCompleteStructure), true);
  // 0x08: u64
  if (data?.UserFileReads !== undefined) view.setBigUint64(8, util.toBigInt(data.UserFileReads), true);
  // 0x10: u64
  if (data?.UserFileReadBytes !== undefined) view.setBigUint64(16, util.toBigInt(data.UserFileReadBytes), true);
  // 0x18: u64
  if (data?.UserDiskReads !== undefined) view.setBigUint64(24, util.toBigInt(data.UserDiskReads), true);
  // 0x20: u64
  if (data?.UserFileWrites !== undefined) view.setBigUint64(32, util.toBigInt(data.UserFileWrites), true);
  // 0x28: u64
  if (data?.UserFileWriteBytes !== undefined) view.setBigUint64(40, util.toBigInt(data.UserFileWriteBytes), true);
  // 0x30: u64
  if (data?.UserDiskWrites !== undefined) view.setBigUint64(48, util.toBigInt(data.UserDiskWrites), true);
  // 0x38: u64
  if (data?.MetaDataReads !== undefined) view.setBigUint64(56, util.toBigInt(data.MetaDataReads), true);
  // 0x40: u64
  if (data?.MetaDataReadBytes !== undefined) view.setBigUint64(64, util.toBigInt(data.MetaDataReadBytes), true);
  // 0x48: u64
  if (data?.MetaDataDiskReads !== undefined) view.setBigUint64(72, util.toBigInt(data.MetaDataDiskReads), true);
  // 0x50: u64
  if (data?.MetaDataWrites !== undefined) view.setBigUint64(80, util.toBigInt(data.MetaDataWrites), true);
  // 0x58: u64
  if (data?.MetaDataWriteBytes !== undefined) view.setBigUint64(88, util.toBigInt(data.MetaDataWriteBytes), true);
  // 0x60: u64
  if (data?.MetaDataDiskWrites !== undefined) view.setBigUint64(96, util.toBigInt(data.MetaDataDiskWrites), true);
  return buf;
}

export class FILESYSTEM_STATISTICS_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get FileSystemType(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Version(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get SizeOfCompleteStructure(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get UserFileReads(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get UserFileReadBytes(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get UserDiskReads(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u64
  get UserFileWrites(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: u64
  get UserFileWriteBytes(): number | bigint {
    return this.view.getBigUint64(40, true);
  }

  // 0x30: u64
  get UserDiskWrites(): number | bigint {
    return this.view.getBigUint64(48, true);
  }

  // 0x38: u64
  get MetaDataReads(): number | bigint {
    return this.view.getBigUint64(56, true);
  }

  // 0x40: u64
  get MetaDataReadBytes(): number | bigint {
    return this.view.getBigUint64(64, true);
  }

  // 0x48: u64
  get MetaDataDiskReads(): number | bigint {
    return this.view.getBigUint64(72, true);
  }

  // 0x50: u64
  get MetaDataWrites(): number | bigint {
    return this.view.getBigUint64(80, true);
  }

  // 0x58: u64
  get MetaDataWriteBytes(): number | bigint {
    return this.view.getBigUint64(88, true);
  }

  // 0x60: u64
  get MetaDataDiskWrites(): number | bigint {
    return this.view.getBigUint64(96, true);
  }

  // 0x00: u16
  set FileSystemType(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Version(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set SizeOfCompleteStructure(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set UserFileReads(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set UserFileReadBytes(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set UserDiskReads(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u64
  set UserFileWrites(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: u64
  set UserFileWriteBytes(value: number | bigint) {
    this.view.setBigUint64(40, util.toBigInt(value), true);
  }

  // 0x30: u64
  set UserDiskWrites(value: number | bigint) {
    this.view.setBigUint64(48, util.toBigInt(value), true);
  }

  // 0x38: u64
  set MetaDataReads(value: number | bigint) {
    this.view.setBigUint64(56, util.toBigInt(value), true);
  }

  // 0x40: u64
  set MetaDataReadBytes(value: number | bigint) {
    this.view.setBigUint64(64, util.toBigInt(value), true);
  }

  // 0x48: u64
  set MetaDataDiskReads(value: number | bigint) {
    this.view.setBigUint64(72, util.toBigInt(value), true);
  }

  // 0x50: u64
  set MetaDataWrites(value: number | bigint) {
    this.view.setBigUint64(80, util.toBigInt(value), true);
  }

  // 0x58: u64
  set MetaDataWriteBytes(value: number | bigint) {
    this.view.setBigUint64(88, util.toBigInt(value), true);
  }

  // 0x60: u64
  set MetaDataDiskWrites(value: number | bigint) {
    this.view.setBigUint64(96, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.NTFS_STATISTICS_EX (size: 416)
 */
export interface NTFS_STATISTICS_EX {
  /** u32 */
  LogFileFullExceptions: number;
  /** u32 */
  OtherExceptions: number;
  /** u64 */
  MftReads: number | bigint;
  /** u64 */
  MftReadBytes: number | bigint;
  /** u64 */
  MftWrites: number | bigint;
  /** u64 */
  MftWriteBytes: number | bigint;
  /** _MftWritesUserLevel_e__Struct */
  MftWritesUserLevel: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  MftWritesFlushForLogFileFull: number;
  /** u32 */
  MftWritesLazyWriter: number;
  /** u32 */
  MftWritesUserRequest: number;
  /** u64 */
  Mft2Writes: number | bigint;
  /** u64 */
  Mft2WriteBytes: number | bigint;
  /** _Mft2WritesUserLevel_e__Struct */
  Mft2WritesUserLevel: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Mft2WritesFlushForLogFileFull: number;
  /** u32 */
  Mft2WritesLazyWriter: number;
  /** u32 */
  Mft2WritesUserRequest: number;
  /** u64 */
  RootIndexReads: number | bigint;
  /** u64 */
  RootIndexReadBytes: number | bigint;
  /** u64 */
  RootIndexWrites: number | bigint;
  /** u64 */
  RootIndexWriteBytes: number | bigint;
  /** u64 */
  BitmapReads: number | bigint;
  /** u64 */
  BitmapReadBytes: number | bigint;
  /** u64 */
  BitmapWrites: number | bigint;
  /** u64 */
  BitmapWriteBytes: number | bigint;
  /** u32 */
  BitmapWritesFlushForLogFileFull: number;
  /** u32 */
  BitmapWritesLazyWriter: number;
  /** u32 */
  BitmapWritesUserRequest: number;
  /** _BitmapWritesUserLevel_e__Struct */
  BitmapWritesUserLevel: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  MftBitmapReads: number | bigint;
  /** u64 */
  MftBitmapReadBytes: number | bigint;
  /** u64 */
  MftBitmapWrites: number | bigint;
  /** u64 */
  MftBitmapWriteBytes: number | bigint;
  /** u32 */
  MftBitmapWritesFlushForLogFileFull: number;
  /** u32 */
  MftBitmapWritesLazyWriter: number;
  /** u32 */
  MftBitmapWritesUserRequest: number;
  /** _MftBitmapWritesUserLevel_e__Struct */
  MftBitmapWritesUserLevel: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  UserIndexReads: number | bigint;
  /** u64 */
  UserIndexReadBytes: number | bigint;
  /** u64 */
  UserIndexWrites: number | bigint;
  /** u64 */
  UserIndexWriteBytes: number | bigint;
  /** u64 */
  LogFileReads: number | bigint;
  /** u64 */
  LogFileReadBytes: number | bigint;
  /** u64 */
  LogFileWrites: number | bigint;
  /** u64 */
  LogFileWriteBytes: number | bigint;
  /** _Allocate_e__Struct */
  Allocate: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  DiskResourcesExhausted: number;
  /** u64 */
  VolumeTrimCount: number | bigint;
  /** u64 */
  VolumeTrimTime: number | bigint;
  /** u64 */
  VolumeTrimByteCount: number | bigint;
  /** u64 */
  FileLevelTrimCount: number | bigint;
  /** u64 */
  FileLevelTrimTime: number | bigint;
  /** u64 */
  FileLevelTrimByteCount: number | bigint;
  /** u64 */
  VolumeTrimSkippedCount: number | bigint;
  /** u64 */
  VolumeTrimSkippedByteCount: number | bigint;
  /** u64 */
  NtfsFillStatInfoFromMftRecordCalledCount: number | bigint;
  /** u64 */
  NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount: number | bigint;
  /** u64 */
  NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount: number | bigint;
}

export const sizeofNTFS_STATISTICS_EX = 416;

export function allocNTFS_STATISTICS_EX(data?: Partial<NTFS_STATISTICS_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofNTFS_STATISTICS_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.LogFileFullExceptions !== undefined) view.setUint32(0, Number(data.LogFileFullExceptions), true);
  // 0x04: u32
  if (data?.OtherExceptions !== undefined) view.setUint32(4, Number(data.OtherExceptions), true);
  // 0x08: u64
  if (data?.MftReads !== undefined) view.setBigUint64(8, util.toBigInt(data.MftReads), true);
  // 0x10: u64
  if (data?.MftReadBytes !== undefined) view.setBigUint64(16, util.toBigInt(data.MftReadBytes), true);
  // 0x18: u64
  if (data?.MftWrites !== undefined) view.setBigUint64(24, util.toBigInt(data.MftWrites), true);
  // 0x20: u64
  if (data?.MftWriteBytes !== undefined) view.setBigUint64(32, util.toBigInt(data.MftWriteBytes), true);
  // 0x28: pointer
  if (data?.MftWritesUserLevel !== undefined) view.setBigUint64(40, data.MftWritesUserLevel === null ? 0n : util.toBigInt(util.toPointer(data.MftWritesUserLevel)), true);
  // 0x30: u32
  if (data?.MftWritesFlushForLogFileFull !== undefined) view.setUint32(48, Number(data.MftWritesFlushForLogFileFull), true);
  // 0x34: u32
  if (data?.MftWritesLazyWriter !== undefined) view.setUint32(52, Number(data.MftWritesLazyWriter), true);
  // 0x38: u32
  if (data?.MftWritesUserRequest !== undefined) view.setUint32(56, Number(data.MftWritesUserRequest), true);
  // 0x3c: pad4
  // 0x40: u64
  if (data?.Mft2Writes !== undefined) view.setBigUint64(64, util.toBigInt(data.Mft2Writes), true);
  // 0x48: u64
  if (data?.Mft2WriteBytes !== undefined) view.setBigUint64(72, util.toBigInt(data.Mft2WriteBytes), true);
  // 0x50: pointer
  if (data?.Mft2WritesUserLevel !== undefined) view.setBigUint64(80, data.Mft2WritesUserLevel === null ? 0n : util.toBigInt(util.toPointer(data.Mft2WritesUserLevel)), true);
  // 0x58: u32
  if (data?.Mft2WritesFlushForLogFileFull !== undefined) view.setUint32(88, Number(data.Mft2WritesFlushForLogFileFull), true);
  // 0x5c: u32
  if (data?.Mft2WritesLazyWriter !== undefined) view.setUint32(92, Number(data.Mft2WritesLazyWriter), true);
  // 0x60: u32
  if (data?.Mft2WritesUserRequest !== undefined) view.setUint32(96, Number(data.Mft2WritesUserRequest), true);
  // 0x64: pad4
  // 0x68: u64
  if (data?.RootIndexReads !== undefined) view.setBigUint64(104, util.toBigInt(data.RootIndexReads), true);
  // 0x70: u64
  if (data?.RootIndexReadBytes !== undefined) view.setBigUint64(112, util.toBigInt(data.RootIndexReadBytes), true);
  // 0x78: u64
  if (data?.RootIndexWrites !== undefined) view.setBigUint64(120, util.toBigInt(data.RootIndexWrites), true);
  // 0x80: u64
  if (data?.RootIndexWriteBytes !== undefined) view.setBigUint64(128, util.toBigInt(data.RootIndexWriteBytes), true);
  // 0x88: u64
  if (data?.BitmapReads !== undefined) view.setBigUint64(136, util.toBigInt(data.BitmapReads), true);
  // 0x90: u64
  if (data?.BitmapReadBytes !== undefined) view.setBigUint64(144, util.toBigInt(data.BitmapReadBytes), true);
  // 0x98: u64
  if (data?.BitmapWrites !== undefined) view.setBigUint64(152, util.toBigInt(data.BitmapWrites), true);
  // 0xa0: u64
  if (data?.BitmapWriteBytes !== undefined) view.setBigUint64(160, util.toBigInt(data.BitmapWriteBytes), true);
  // 0xa8: u32
  if (data?.BitmapWritesFlushForLogFileFull !== undefined) view.setUint32(168, Number(data.BitmapWritesFlushForLogFileFull), true);
  // 0xac: u32
  if (data?.BitmapWritesLazyWriter !== undefined) view.setUint32(172, Number(data.BitmapWritesLazyWriter), true);
  // 0xb0: u32
  if (data?.BitmapWritesUserRequest !== undefined) view.setUint32(176, Number(data.BitmapWritesUserRequest), true);
  // 0xb4: pad4
  // 0xb8: pointer
  if (data?.BitmapWritesUserLevel !== undefined) view.setBigUint64(184, data.BitmapWritesUserLevel === null ? 0n : util.toBigInt(util.toPointer(data.BitmapWritesUserLevel)), true);
  // 0xc0: u64
  if (data?.MftBitmapReads !== undefined) view.setBigUint64(192, util.toBigInt(data.MftBitmapReads), true);
  // 0xc8: u64
  if (data?.MftBitmapReadBytes !== undefined) view.setBigUint64(200, util.toBigInt(data.MftBitmapReadBytes), true);
  // 0xd0: u64
  if (data?.MftBitmapWrites !== undefined) view.setBigUint64(208, util.toBigInt(data.MftBitmapWrites), true);
  // 0xd8: u64
  if (data?.MftBitmapWriteBytes !== undefined) view.setBigUint64(216, util.toBigInt(data.MftBitmapWriteBytes), true);
  // 0xe0: u32
  if (data?.MftBitmapWritesFlushForLogFileFull !== undefined) view.setUint32(224, Number(data.MftBitmapWritesFlushForLogFileFull), true);
  // 0xe4: u32
  if (data?.MftBitmapWritesLazyWriter !== undefined) view.setUint32(228, Number(data.MftBitmapWritesLazyWriter), true);
  // 0xe8: u32
  if (data?.MftBitmapWritesUserRequest !== undefined) view.setUint32(232, Number(data.MftBitmapWritesUserRequest), true);
  // 0xec: pad4
  // 0xf0: pointer
  if (data?.MftBitmapWritesUserLevel !== undefined) view.setBigUint64(240, data.MftBitmapWritesUserLevel === null ? 0n : util.toBigInt(util.toPointer(data.MftBitmapWritesUserLevel)), true);
  // 0xf8: u64
  if (data?.UserIndexReads !== undefined) view.setBigUint64(248, util.toBigInt(data.UserIndexReads), true);
  // 0x100: u64
  if (data?.UserIndexReadBytes !== undefined) view.setBigUint64(256, util.toBigInt(data.UserIndexReadBytes), true);
  // 0x108: u64
  if (data?.UserIndexWrites !== undefined) view.setBigUint64(264, util.toBigInt(data.UserIndexWrites), true);
  // 0x110: u64
  if (data?.UserIndexWriteBytes !== undefined) view.setBigUint64(272, util.toBigInt(data.UserIndexWriteBytes), true);
  // 0x118: u64
  if (data?.LogFileReads !== undefined) view.setBigUint64(280, util.toBigInt(data.LogFileReads), true);
  // 0x120: u64
  if (data?.LogFileReadBytes !== undefined) view.setBigUint64(288, util.toBigInt(data.LogFileReadBytes), true);
  // 0x128: u64
  if (data?.LogFileWrites !== undefined) view.setBigUint64(296, util.toBigInt(data.LogFileWrites), true);
  // 0x130: u64
  if (data?.LogFileWriteBytes !== undefined) view.setBigUint64(304, util.toBigInt(data.LogFileWriteBytes), true);
  // 0x138: pointer
  if (data?.Allocate !== undefined) view.setBigUint64(312, data.Allocate === null ? 0n : util.toBigInt(util.toPointer(data.Allocate)), true);
  // 0x140: u32
  if (data?.DiskResourcesExhausted !== undefined) view.setUint32(320, Number(data.DiskResourcesExhausted), true);
  // 0x144: pad4
  // 0x148: u64
  if (data?.VolumeTrimCount !== undefined) view.setBigUint64(328, util.toBigInt(data.VolumeTrimCount), true);
  // 0x150: u64
  if (data?.VolumeTrimTime !== undefined) view.setBigUint64(336, util.toBigInt(data.VolumeTrimTime), true);
  // 0x158: u64
  if (data?.VolumeTrimByteCount !== undefined) view.setBigUint64(344, util.toBigInt(data.VolumeTrimByteCount), true);
  // 0x160: u64
  if (data?.FileLevelTrimCount !== undefined) view.setBigUint64(352, util.toBigInt(data.FileLevelTrimCount), true);
  // 0x168: u64
  if (data?.FileLevelTrimTime !== undefined) view.setBigUint64(360, util.toBigInt(data.FileLevelTrimTime), true);
  // 0x170: u64
  if (data?.FileLevelTrimByteCount !== undefined) view.setBigUint64(368, util.toBigInt(data.FileLevelTrimByteCount), true);
  // 0x178: u64
  if (data?.VolumeTrimSkippedCount !== undefined) view.setBigUint64(376, util.toBigInt(data.VolumeTrimSkippedCount), true);
  // 0x180: u64
  if (data?.VolumeTrimSkippedByteCount !== undefined) view.setBigUint64(384, util.toBigInt(data.VolumeTrimSkippedByteCount), true);
  // 0x188: u64
  if (data?.NtfsFillStatInfoFromMftRecordCalledCount !== undefined) view.setBigUint64(392, util.toBigInt(data.NtfsFillStatInfoFromMftRecordCalledCount), true);
  // 0x190: u64
  if (data?.NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount !== undefined) view.setBigUint64(400, util.toBigInt(data.NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount), true);
  // 0x198: u64
  if (data?.NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount !== undefined) view.setBigUint64(408, util.toBigInt(data.NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount), true);
  return buf;
}

export class NTFS_STATISTICS_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get LogFileFullExceptions(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get OtherExceptions(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get MftReads(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get MftReadBytes(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get MftWrites(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u64
  get MftWriteBytes(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: pointer
  get MftWritesUserLevel(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get MftWritesFlushForLogFileFull(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get MftWritesLazyWriter(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get MftWritesUserRequest(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: u64
  get Mft2Writes(): number | bigint {
    return this.view.getBigUint64(64, true);
  }

  // 0x48: u64
  get Mft2WriteBytes(): number | bigint {
    return this.view.getBigUint64(72, true);
  }

  // 0x50: pointer
  get Mft2WritesUserLevel(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: u32
  get Mft2WritesFlushForLogFileFull(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get Mft2WritesLazyWriter(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: u32
  get Mft2WritesUserRequest(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: u64
  get RootIndexReads(): number | bigint {
    return this.view.getBigUint64(104, true);
  }

  // 0x70: u64
  get RootIndexReadBytes(): number | bigint {
    return this.view.getBigUint64(112, true);
  }

  // 0x78: u64
  get RootIndexWrites(): number | bigint {
    return this.view.getBigUint64(120, true);
  }

  // 0x80: u64
  get RootIndexWriteBytes(): number | bigint {
    return this.view.getBigUint64(128, true);
  }

  // 0x88: u64
  get BitmapReads(): number | bigint {
    return this.view.getBigUint64(136, true);
  }

  // 0x90: u64
  get BitmapReadBytes(): number | bigint {
    return this.view.getBigUint64(144, true);
  }

  // 0x98: u64
  get BitmapWrites(): number | bigint {
    return this.view.getBigUint64(152, true);
  }

  // 0xa0: u64
  get BitmapWriteBytes(): number | bigint {
    return this.view.getBigUint64(160, true);
  }

  // 0xa8: u32
  get BitmapWritesFlushForLogFileFull(): number {
    return this.view.getUint32(168, true);
  }

  // 0xac: u32
  get BitmapWritesLazyWriter(): number {
    return this.view.getUint32(172, true);
  }

  // 0xb0: u32
  get BitmapWritesUserRequest(): number {
    return this.view.getUint32(176, true);
  }

  // 0xb4: pad4

  // 0xb8: pointer
  get BitmapWritesUserLevel(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(184, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xc0: u64
  get MftBitmapReads(): number | bigint {
    return this.view.getBigUint64(192, true);
  }

  // 0xc8: u64
  get MftBitmapReadBytes(): number | bigint {
    return this.view.getBigUint64(200, true);
  }

  // 0xd0: u64
  get MftBitmapWrites(): number | bigint {
    return this.view.getBigUint64(208, true);
  }

  // 0xd8: u64
  get MftBitmapWriteBytes(): number | bigint {
    return this.view.getBigUint64(216, true);
  }

  // 0xe0: u32
  get MftBitmapWritesFlushForLogFileFull(): number {
    return this.view.getUint32(224, true);
  }

  // 0xe4: u32
  get MftBitmapWritesLazyWriter(): number {
    return this.view.getUint32(228, true);
  }

  // 0xe8: u32
  get MftBitmapWritesUserRequest(): number {
    return this.view.getUint32(232, true);
  }

  // 0xec: pad4

  // 0xf0: pointer
  get MftBitmapWritesUserLevel(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(240, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xf8: u64
  get UserIndexReads(): number | bigint {
    return this.view.getBigUint64(248, true);
  }

  // 0x100: u64
  get UserIndexReadBytes(): number | bigint {
    return this.view.getBigUint64(256, true);
  }

  // 0x108: u64
  get UserIndexWrites(): number | bigint {
    return this.view.getBigUint64(264, true);
  }

  // 0x110: u64
  get UserIndexWriteBytes(): number | bigint {
    return this.view.getBigUint64(272, true);
  }

  // 0x118: u64
  get LogFileReads(): number | bigint {
    return this.view.getBigUint64(280, true);
  }

  // 0x120: u64
  get LogFileReadBytes(): number | bigint {
    return this.view.getBigUint64(288, true);
  }

  // 0x128: u64
  get LogFileWrites(): number | bigint {
    return this.view.getBigUint64(296, true);
  }

  // 0x130: u64
  get LogFileWriteBytes(): number | bigint {
    return this.view.getBigUint64(304, true);
  }

  // 0x138: pointer
  get Allocate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(312, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x140: u32
  get DiskResourcesExhausted(): number {
    return this.view.getUint32(320, true);
  }

  // 0x144: pad4

  // 0x148: u64
  get VolumeTrimCount(): number | bigint {
    return this.view.getBigUint64(328, true);
  }

  // 0x150: u64
  get VolumeTrimTime(): number | bigint {
    return this.view.getBigUint64(336, true);
  }

  // 0x158: u64
  get VolumeTrimByteCount(): number | bigint {
    return this.view.getBigUint64(344, true);
  }

  // 0x160: u64
  get FileLevelTrimCount(): number | bigint {
    return this.view.getBigUint64(352, true);
  }

  // 0x168: u64
  get FileLevelTrimTime(): number | bigint {
    return this.view.getBigUint64(360, true);
  }

  // 0x170: u64
  get FileLevelTrimByteCount(): number | bigint {
    return this.view.getBigUint64(368, true);
  }

  // 0x178: u64
  get VolumeTrimSkippedCount(): number | bigint {
    return this.view.getBigUint64(376, true);
  }

  // 0x180: u64
  get VolumeTrimSkippedByteCount(): number | bigint {
    return this.view.getBigUint64(384, true);
  }

  // 0x188: u64
  get NtfsFillStatInfoFromMftRecordCalledCount(): number | bigint {
    return this.view.getBigUint64(392, true);
  }

  // 0x190: u64
  get NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount(): number | bigint {
    return this.view.getBigUint64(400, true);
  }

  // 0x198: u64
  get NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount(): number | bigint {
    return this.view.getBigUint64(408, true);
  }

  // 0x00: u32
  set LogFileFullExceptions(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set OtherExceptions(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set MftReads(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set MftReadBytes(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set MftWrites(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u64
  set MftWriteBytes(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: pointer
  set MftWritesUserLevel(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set MftWritesFlushForLogFileFull(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set MftWritesLazyWriter(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set MftWritesUserRequest(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: u64
  set Mft2Writes(value: number | bigint) {
    this.view.setBigUint64(64, util.toBigInt(value), true);
  }

  // 0x48: u64
  set Mft2WriteBytes(value: number | bigint) {
    this.view.setBigUint64(72, util.toBigInt(value), true);
  }

  // 0x50: pointer
  set Mft2WritesUserLevel(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x58: u32
  set Mft2WritesFlushForLogFileFull(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set Mft2WritesLazyWriter(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: u32
  set Mft2WritesUserRequest(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: u64
  set RootIndexReads(value: number | bigint) {
    this.view.setBigUint64(104, util.toBigInt(value), true);
  }

  // 0x70: u64
  set RootIndexReadBytes(value: number | bigint) {
    this.view.setBigUint64(112, util.toBigInt(value), true);
  }

  // 0x78: u64
  set RootIndexWrites(value: number | bigint) {
    this.view.setBigUint64(120, util.toBigInt(value), true);
  }

  // 0x80: u64
  set RootIndexWriteBytes(value: number | bigint) {
    this.view.setBigUint64(128, util.toBigInt(value), true);
  }

  // 0x88: u64
  set BitmapReads(value: number | bigint) {
    this.view.setBigUint64(136, util.toBigInt(value), true);
  }

  // 0x90: u64
  set BitmapReadBytes(value: number | bigint) {
    this.view.setBigUint64(144, util.toBigInt(value), true);
  }

  // 0x98: u64
  set BitmapWrites(value: number | bigint) {
    this.view.setBigUint64(152, util.toBigInt(value), true);
  }

  // 0xa0: u64
  set BitmapWriteBytes(value: number | bigint) {
    this.view.setBigUint64(160, util.toBigInt(value), true);
  }

  // 0xa8: u32
  set BitmapWritesFlushForLogFileFull(value: number) {
    this.view.setUint32(168, value, true);
  }

  // 0xac: u32
  set BitmapWritesLazyWriter(value: number) {
    this.view.setUint32(172, value, true);
  }

  // 0xb0: u32
  set BitmapWritesUserRequest(value: number) {
    this.view.setUint32(176, value, true);
  }

  // 0xb4: pad4

  // 0xb8: pointer
  set BitmapWritesUserLevel(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(184, util.toBigInt(util.toPointer(value)), true);
  }

  // 0xc0: u64
  set MftBitmapReads(value: number | bigint) {
    this.view.setBigUint64(192, util.toBigInt(value), true);
  }

  // 0xc8: u64
  set MftBitmapReadBytes(value: number | bigint) {
    this.view.setBigUint64(200, util.toBigInt(value), true);
  }

  // 0xd0: u64
  set MftBitmapWrites(value: number | bigint) {
    this.view.setBigUint64(208, util.toBigInt(value), true);
  }

  // 0xd8: u64
  set MftBitmapWriteBytes(value: number | bigint) {
    this.view.setBigUint64(216, util.toBigInt(value), true);
  }

  // 0xe0: u32
  set MftBitmapWritesFlushForLogFileFull(value: number) {
    this.view.setUint32(224, value, true);
  }

  // 0xe4: u32
  set MftBitmapWritesLazyWriter(value: number) {
    this.view.setUint32(228, value, true);
  }

  // 0xe8: u32
  set MftBitmapWritesUserRequest(value: number) {
    this.view.setUint32(232, value, true);
  }

  // 0xec: pad4

  // 0xf0: pointer
  set MftBitmapWritesUserLevel(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(240, util.toBigInt(util.toPointer(value)), true);
  }

  // 0xf8: u64
  set UserIndexReads(value: number | bigint) {
    this.view.setBigUint64(248, util.toBigInt(value), true);
  }

  // 0x100: u64
  set UserIndexReadBytes(value: number | bigint) {
    this.view.setBigUint64(256, util.toBigInt(value), true);
  }

  // 0x108: u64
  set UserIndexWrites(value: number | bigint) {
    this.view.setBigUint64(264, util.toBigInt(value), true);
  }

  // 0x110: u64
  set UserIndexWriteBytes(value: number | bigint) {
    this.view.setBigUint64(272, util.toBigInt(value), true);
  }

  // 0x118: u64
  set LogFileReads(value: number | bigint) {
    this.view.setBigUint64(280, util.toBigInt(value), true);
  }

  // 0x120: u64
  set LogFileReadBytes(value: number | bigint) {
    this.view.setBigUint64(288, util.toBigInt(value), true);
  }

  // 0x128: u64
  set LogFileWrites(value: number | bigint) {
    this.view.setBigUint64(296, util.toBigInt(value), true);
  }

  // 0x130: u64
  set LogFileWriteBytes(value: number | bigint) {
    this.view.setBigUint64(304, util.toBigInt(value), true);
  }

  // 0x138: pointer
  set Allocate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(312, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x140: u32
  set DiskResourcesExhausted(value: number) {
    this.view.setUint32(320, value, true);
  }

  // 0x144: pad4

  // 0x148: u64
  set VolumeTrimCount(value: number | bigint) {
    this.view.setBigUint64(328, util.toBigInt(value), true);
  }

  // 0x150: u64
  set VolumeTrimTime(value: number | bigint) {
    this.view.setBigUint64(336, util.toBigInt(value), true);
  }

  // 0x158: u64
  set VolumeTrimByteCount(value: number | bigint) {
    this.view.setBigUint64(344, util.toBigInt(value), true);
  }

  // 0x160: u64
  set FileLevelTrimCount(value: number | bigint) {
    this.view.setBigUint64(352, util.toBigInt(value), true);
  }

  // 0x168: u64
  set FileLevelTrimTime(value: number | bigint) {
    this.view.setBigUint64(360, util.toBigInt(value), true);
  }

  // 0x170: u64
  set FileLevelTrimByteCount(value: number | bigint) {
    this.view.setBigUint64(368, util.toBigInt(value), true);
  }

  // 0x178: u64
  set VolumeTrimSkippedCount(value: number | bigint) {
    this.view.setBigUint64(376, util.toBigInt(value), true);
  }

  // 0x180: u64
  set VolumeTrimSkippedByteCount(value: number | bigint) {
    this.view.setBigUint64(384, util.toBigInt(value), true);
  }

  // 0x188: u64
  set NtfsFillStatInfoFromMftRecordCalledCount(value: number | bigint) {
    this.view.setBigUint64(392, util.toBigInt(value), true);
  }

  // 0x190: u64
  set NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount(value: number | bigint) {
    this.view.setBigUint64(400, util.toBigInt(value), true);
  }

  // 0x198: u64
  set NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount(value: number | bigint) {
    this.view.setBigUint64(408, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FILE_OBJECTID_BUFFER (size: 16)
 */
export interface FILE_OBJECTID_BUFFER {
  /** array */
  ObjectId: Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFILE_OBJECTID_BUFFER = 16;

export function allocFILE_OBJECTID_BUFFER(data?: Partial<FILE_OBJECTID_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_OBJECTID_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ObjectId !== undefined) view.setBigUint64(0, data.ObjectId === null ? 0n : util.toBigInt(util.toPointer(data.ObjectId)), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class FILE_OBJECTID_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ObjectId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ObjectId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FILE_SET_SPARSE_BUFFER (size: 8)
 */
export interface FILE_SET_SPARSE_BUFFER {
  /** Windows.Win32.Foundation.BOOLEAN */
  SetSparse: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFILE_SET_SPARSE_BUFFER = 8;

export function allocFILE_SET_SPARSE_BUFFER(data?: Partial<FILE_SET_SPARSE_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_SET_SPARSE_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SetSparse !== undefined) view.setBigUint64(0, data.SetSparse === null ? 0n : util.toBigInt(util.toPointer(data.SetSparse)), true);
  return buf;
}

export class FILE_SET_SPARSE_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get SetSparse(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set SetSparse(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FILE_ZERO_DATA_INFORMATION (size: 16)
 */
export interface FILE_ZERO_DATA_INFORMATION {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  FileOffset: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  BeyondFinalZero: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFILE_ZERO_DATA_INFORMATION = 16;

export function allocFILE_ZERO_DATA_INFORMATION(data?: Partial<FILE_ZERO_DATA_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_ZERO_DATA_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.FileOffset !== undefined) view.setBigUint64(0, data.FileOffset === null ? 0n : util.toBigInt(util.toPointer(data.FileOffset)), true);
  // 0x08: pointer
  if (data?.BeyondFinalZero !== undefined) view.setBigUint64(8, data.BeyondFinalZero === null ? 0n : util.toBigInt(util.toPointer(data.BeyondFinalZero)), true);
  return buf;
}

export class FILE_ZERO_DATA_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get FileOffset(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get BeyondFinalZero(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set FileOffset(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set BeyondFinalZero(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FILE_ZERO_DATA_INFORMATION_EX (size: 24)
 */
export interface FILE_ZERO_DATA_INFORMATION_EX {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  FileOffset: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  BeyondFinalZero: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
}

export const sizeofFILE_ZERO_DATA_INFORMATION_EX = 24;

export function allocFILE_ZERO_DATA_INFORMATION_EX(data?: Partial<FILE_ZERO_DATA_INFORMATION_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_ZERO_DATA_INFORMATION_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.FileOffset !== undefined) view.setBigUint64(0, data.FileOffset === null ? 0n : util.toBigInt(util.toPointer(data.FileOffset)), true);
  // 0x08: pointer
  if (data?.BeyondFinalZero !== undefined) view.setBigUint64(8, data.BeyondFinalZero === null ? 0n : util.toBigInt(util.toPointer(data.BeyondFinalZero)), true);
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: pad4
  return buf;
}

export class FILE_ZERO_DATA_INFORMATION_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get FileOffset(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get BeyondFinalZero(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get Flags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set FileOffset(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set BeyondFinalZero(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set Flags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.System.Ioctl.FILE_ALLOCATED_RANGE_BUFFER (size: 16)
 */
export interface FILE_ALLOCATED_RANGE_BUFFER {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  FileOffset: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  Length: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFILE_ALLOCATED_RANGE_BUFFER = 16;

export function allocFILE_ALLOCATED_RANGE_BUFFER(data?: Partial<FILE_ALLOCATED_RANGE_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_ALLOCATED_RANGE_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.FileOffset !== undefined) view.setBigUint64(0, data.FileOffset === null ? 0n : util.toBigInt(util.toPointer(data.FileOffset)), true);
  // 0x08: pointer
  if (data?.Length !== undefined) view.setBigUint64(8, data.Length === null ? 0n : util.toBigInt(util.toPointer(data.Length)), true);
  return buf;
}

export class FILE_ALLOCATED_RANGE_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get FileOffset(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Length(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set FileOffset(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Length(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.ENCRYPTION_BUFFER (size: 16)
 */
export interface ENCRYPTION_BUFFER {
  /** u32 */
  EncryptionOperation: number;
  /** array */
  Private: Deno.PointerValue | null;
}

export const sizeofENCRYPTION_BUFFER = 16;

export function allocENCRYPTION_BUFFER(data?: Partial<ENCRYPTION_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofENCRYPTION_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.EncryptionOperation !== undefined) view.setUint32(0, Number(data.EncryptionOperation), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Private !== undefined) view.setBigUint64(8, data.Private === null ? 0n : util.toBigInt(util.toPointer(data.Private)), true);
  return buf;
}

export class ENCRYPTION_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get EncryptionOperation(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Private(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set EncryptionOperation(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Private(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DECRYPTION_STATUS_BUFFER (size: 8)
 */
export interface DECRYPTION_STATUS_BUFFER {
  /** Windows.Win32.Foundation.BOOLEAN */
  NoEncryptedStreams: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDECRYPTION_STATUS_BUFFER = 8;

export function allocDECRYPTION_STATUS_BUFFER(data?: Partial<DECRYPTION_STATUS_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofDECRYPTION_STATUS_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NoEncryptedStreams !== undefined) view.setBigUint64(0, data.NoEncryptedStreams === null ? 0n : util.toBigInt(util.toPointer(data.NoEncryptedStreams)), true);
  return buf;
}

export class DECRYPTION_STATUS_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get NoEncryptedStreams(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set NoEncryptedStreams(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.REQUEST_RAW_ENCRYPTED_DATA (size: 16)
 */
export interface REQUEST_RAW_ENCRYPTED_DATA {
  /** i64 */
  FileOffset: number | bigint;
  /** u32 */
  Length: number;
}

export const sizeofREQUEST_RAW_ENCRYPTED_DATA = 16;

export function allocREQUEST_RAW_ENCRYPTED_DATA(data?: Partial<REQUEST_RAW_ENCRYPTED_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofREQUEST_RAW_ENCRYPTED_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.FileOffset !== undefined) view.setBigInt64(0, util.toBigInt(data.FileOffset), true);
  // 0x08: u32
  if (data?.Length !== undefined) view.setUint32(8, Number(data.Length), true);
  // 0x0c: pad4
  return buf;
}

export class REQUEST_RAW_ENCRYPTED_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get FileOffset(): number | bigint {
    return this.view.getBigInt64(0, true);
  }

  // 0x08: u32
  get Length(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i64
  set FileOffset(value: number | bigint) {
    this.view.setBigInt64(0, util.toBigInt(value), true);
  }

  // 0x08: u32
  set Length(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Ioctl.ENCRYPTED_DATA_INFO (size: 40)
 */
export interface ENCRYPTED_DATA_INFO {
  /** u64 */
  StartingFileOffset: number | bigint;
  /** u32 */
  OutputBufferOffset: number;
  /** u32 */
  BytesWithinFileSize: number;
  /** u32 */
  BytesWithinValidDataLength: number;
  /** u16 */
  CompressionFormat: number;
  /** u8 */
  DataUnitShift: number;
  /** u8 */
  ChunkShift: number;
  /** u8 */
  ClusterShift: number;
  /** u8 */
  EncryptionFormat: number;
  /** u16 */
  NumberOfDataBlocks: number;
  /** array */
  DataBlockSize: Deno.PointerValue | null;
}

export const sizeofENCRYPTED_DATA_INFO = 40;

export function allocENCRYPTED_DATA_INFO(data?: Partial<ENCRYPTED_DATA_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofENCRYPTED_DATA_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.StartingFileOffset !== undefined) view.setBigUint64(0, util.toBigInt(data.StartingFileOffset), true);
  // 0x08: u32
  if (data?.OutputBufferOffset !== undefined) view.setUint32(8, Number(data.OutputBufferOffset), true);
  // 0x0c: u32
  if (data?.BytesWithinFileSize !== undefined) view.setUint32(12, Number(data.BytesWithinFileSize), true);
  // 0x10: u32
  if (data?.BytesWithinValidDataLength !== undefined) view.setUint32(16, Number(data.BytesWithinValidDataLength), true);
  // 0x14: u16
  if (data?.CompressionFormat !== undefined) view.setUint16(20, Number(data.CompressionFormat), true);
  // 0x16: u8
  if (data?.DataUnitShift !== undefined) view.setUint8(22, Number(data.DataUnitShift));
  // 0x17: u8
  if (data?.ChunkShift !== undefined) view.setUint8(23, Number(data.ChunkShift));
  // 0x18: u8
  if (data?.ClusterShift !== undefined) view.setUint8(24, Number(data.ClusterShift));
  // 0x19: u8
  if (data?.EncryptionFormat !== undefined) view.setUint8(25, Number(data.EncryptionFormat));
  // 0x1a: u16
  if (data?.NumberOfDataBlocks !== undefined) view.setUint16(26, Number(data.NumberOfDataBlocks), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.DataBlockSize !== undefined) view.setBigUint64(32, data.DataBlockSize === null ? 0n : util.toBigInt(util.toPointer(data.DataBlockSize)), true);
  return buf;
}

export class ENCRYPTED_DATA_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get StartingFileOffset(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u32
  get OutputBufferOffset(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get BytesWithinFileSize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get BytesWithinValidDataLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u16
  get CompressionFormat(): number {
    return this.view.getUint16(20, true);
  }

  // 0x16: u8
  get DataUnitShift(): number {
    return this.view.getUint8(22);
  }

  // 0x17: u8
  get ChunkShift(): number {
    return this.view.getUint8(23);
  }

  // 0x18: u8
  get ClusterShift(): number {
    return this.view.getUint8(24);
  }

  // 0x19: u8
  get EncryptionFormat(): number {
    return this.view.getUint8(25);
  }

  // 0x1a: u16
  get NumberOfDataBlocks(): number {
    return this.view.getUint16(26, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get DataBlockSize(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u64
  set StartingFileOffset(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u32
  set OutputBufferOffset(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set BytesWithinFileSize(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set BytesWithinValidDataLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u16
  set CompressionFormat(value: number) {
    this.view.setUint16(20, value, true);
  }

  // 0x16: u8
  set DataUnitShift(value: number) {
    this.view.setUint8(22, value);
  }

  // 0x17: u8
  set ChunkShift(value: number) {
    this.view.setUint8(23, value);
  }

  // 0x18: u8
  set ClusterShift(value: number) {
    this.view.setUint8(24, value);
  }

  // 0x19: u8
  set EncryptionFormat(value: number) {
    this.view.setUint8(25, value);
  }

  // 0x1a: u16
  set NumberOfDataBlocks(value: number) {
    this.view.setUint16(26, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set DataBlockSize(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.EXTENDED_ENCRYPTED_DATA_INFO (size: 16)
 */
export interface EXTENDED_ENCRYPTED_DATA_INFO {
  /** u32 */
  ExtendedCode: number;
  /** u32 */
  Length: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Reserved: number;
}

export const sizeofEXTENDED_ENCRYPTED_DATA_INFO = 16;

export function allocEXTENDED_ENCRYPTED_DATA_INFO(data?: Partial<EXTENDED_ENCRYPTED_DATA_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXTENDED_ENCRYPTED_DATA_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ExtendedCode !== undefined) view.setUint32(0, Number(data.ExtendedCode), true);
  // 0x04: u32
  if (data?.Length !== undefined) view.setUint32(4, Number(data.Length), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

export class EXTENDED_ENCRYPTED_DATA_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ExtendedCode(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Length(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Reserved(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set ExtendedCode(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Length(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Reserved(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.PLEX_READ_DATA_REQUEST (size: 16)
 */
export interface PLEX_READ_DATA_REQUEST {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ByteOffset: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ByteLength: number;
  /** u32 */
  PlexNumber: number;
}

export const sizeofPLEX_READ_DATA_REQUEST = 16;

export function allocPLEX_READ_DATA_REQUEST(data?: Partial<PLEX_READ_DATA_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofPLEX_READ_DATA_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ByteOffset !== undefined) view.setBigUint64(0, data.ByteOffset === null ? 0n : util.toBigInt(util.toPointer(data.ByteOffset)), true);
  // 0x08: u32
  if (data?.ByteLength !== undefined) view.setUint32(8, Number(data.ByteLength), true);
  // 0x0c: u32
  if (data?.PlexNumber !== undefined) view.setUint32(12, Number(data.PlexNumber), true);
  return buf;
}

export class PLEX_READ_DATA_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ByteOffset(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ByteLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get PlexNumber(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set ByteOffset(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ByteLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set PlexNumber(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SI_COPYFILE (size: 24)
 */
export interface SI_COPYFILE {
  /** u32 */
  SourceFileNameLength: number;
  /** u32 */
  DestinationFileNameLength: number;
  /** u32 */
  Flags: number;
  /** array */
  FileNameBuffer: Deno.PointerValue | null;
}

export const sizeofSI_COPYFILE = 24;

export function allocSI_COPYFILE(data?: Partial<SI_COPYFILE>): Uint8Array {
  const buf = new Uint8Array(sizeofSI_COPYFILE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SourceFileNameLength !== undefined) view.setUint32(0, Number(data.SourceFileNameLength), true);
  // 0x04: u32
  if (data?.DestinationFileNameLength !== undefined) view.setUint32(4, Number(data.DestinationFileNameLength), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.FileNameBuffer !== undefined) view.setBigUint64(16, data.FileNameBuffer === null ? 0n : util.toBigInt(util.toPointer(data.FileNameBuffer)), true);
  return buf;
}

export class SI_COPYFILEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SourceFileNameLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get DestinationFileNameLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get FileNameBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set SourceFileNameLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set DestinationFileNameLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set FileNameBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FILE_MAKE_COMPATIBLE_BUFFER (size: 8)
 */
export interface FILE_MAKE_COMPATIBLE_BUFFER {
  /** Windows.Win32.Foundation.BOOLEAN */
  CloseDisc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFILE_MAKE_COMPATIBLE_BUFFER = 8;

export function allocFILE_MAKE_COMPATIBLE_BUFFER(data?: Partial<FILE_MAKE_COMPATIBLE_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_MAKE_COMPATIBLE_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CloseDisc !== undefined) view.setBigUint64(0, data.CloseDisc === null ? 0n : util.toBigInt(util.toPointer(data.CloseDisc)), true);
  return buf;
}

export class FILE_MAKE_COMPATIBLE_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CloseDisc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set CloseDisc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FILE_SET_DEFECT_MGMT_BUFFER (size: 8)
 */
export interface FILE_SET_DEFECT_MGMT_BUFFER {
  /** Windows.Win32.Foundation.BOOLEAN */
  Disable: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFILE_SET_DEFECT_MGMT_BUFFER = 8;

export function allocFILE_SET_DEFECT_MGMT_BUFFER(data?: Partial<FILE_SET_DEFECT_MGMT_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_SET_DEFECT_MGMT_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Disable !== undefined) view.setBigUint64(0, data.Disable === null ? 0n : util.toBigInt(util.toPointer(data.Disable)), true);
  return buf;
}

export class FILE_SET_DEFECT_MGMT_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Disable(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Disable(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FILE_QUERY_SPARING_BUFFER (size: 24)
 */
export interface FILE_QUERY_SPARING_BUFFER {
  /** u32 */
  SparingUnitBytes: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  SoftwareSparing: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  TotalSpareBlocks: number;
  /** u32 */
  FreeSpareBlocks: number;
}

export const sizeofFILE_QUERY_SPARING_BUFFER = 24;

export function allocFILE_QUERY_SPARING_BUFFER(data?: Partial<FILE_QUERY_SPARING_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_QUERY_SPARING_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SparingUnitBytes !== undefined) view.setUint32(0, Number(data.SparingUnitBytes), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SoftwareSparing !== undefined) view.setBigUint64(8, data.SoftwareSparing === null ? 0n : util.toBigInt(util.toPointer(data.SoftwareSparing)), true);
  // 0x10: u32
  if (data?.TotalSpareBlocks !== undefined) view.setUint32(16, Number(data.TotalSpareBlocks), true);
  // 0x14: u32
  if (data?.FreeSpareBlocks !== undefined) view.setUint32(20, Number(data.FreeSpareBlocks), true);
  return buf;
}

export class FILE_QUERY_SPARING_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SparingUnitBytes(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get SoftwareSparing(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get TotalSpareBlocks(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get FreeSpareBlocks(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set SparingUnitBytes(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set SoftwareSparing(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set TotalSpareBlocks(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set FreeSpareBlocks(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FILE_QUERY_ON_DISK_VOL_INFO_BUFFER (size: 80)
 */
export interface FILE_QUERY_ON_DISK_VOL_INFO_BUFFER {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  DirectoryCount: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  FileCount: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  FsFormatMajVersion: number;
  /** u16 */
  FsFormatMinVersion: number;
  /** array */
  FsFormatName: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  FormatTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LastUpdateTime: Uint8Array | Deno.PointerValue | null;
  /** array */
  CopyrightInfo: Deno.PointerValue | null;
  /** array */
  AbstractInfo: Deno.PointerValue | null;
  /** array */
  FormattingImplementationInfo: Deno.PointerValue | null;
  /** array */
  LastModifyingImplementationInfo: Deno.PointerValue | null;
}

export const sizeofFILE_QUERY_ON_DISK_VOL_INFO_BUFFER = 80;

export function allocFILE_QUERY_ON_DISK_VOL_INFO_BUFFER(data?: Partial<FILE_QUERY_ON_DISK_VOL_INFO_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_QUERY_ON_DISK_VOL_INFO_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DirectoryCount !== undefined) view.setBigUint64(0, data.DirectoryCount === null ? 0n : util.toBigInt(util.toPointer(data.DirectoryCount)), true);
  // 0x08: pointer
  if (data?.FileCount !== undefined) view.setBigUint64(8, data.FileCount === null ? 0n : util.toBigInt(util.toPointer(data.FileCount)), true);
  // 0x10: u16
  if (data?.FsFormatMajVersion !== undefined) view.setUint16(16, Number(data.FsFormatMajVersion), true);
  // 0x12: u16
  if (data?.FsFormatMinVersion !== undefined) view.setUint16(18, Number(data.FsFormatMinVersion), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.FsFormatName !== undefined) view.setBigUint64(24, data.FsFormatName === null ? 0n : util.toBigInt(util.toPointer(data.FsFormatName)), true);
  // 0x20: pointer
  if (data?.FormatTime !== undefined) view.setBigUint64(32, data.FormatTime === null ? 0n : util.toBigInt(util.toPointer(data.FormatTime)), true);
  // 0x28: pointer
  if (data?.LastUpdateTime !== undefined) view.setBigUint64(40, data.LastUpdateTime === null ? 0n : util.toBigInt(util.toPointer(data.LastUpdateTime)), true);
  // 0x30: pointer
  if (data?.CopyrightInfo !== undefined) view.setBigUint64(48, data.CopyrightInfo === null ? 0n : util.toBigInt(util.toPointer(data.CopyrightInfo)), true);
  // 0x38: pointer
  if (data?.AbstractInfo !== undefined) view.setBigUint64(56, data.AbstractInfo === null ? 0n : util.toBigInt(util.toPointer(data.AbstractInfo)), true);
  // 0x40: pointer
  if (data?.FormattingImplementationInfo !== undefined) view.setBigUint64(64, data.FormattingImplementationInfo === null ? 0n : util.toBigInt(util.toPointer(data.FormattingImplementationInfo)), true);
  // 0x48: pointer
  if (data?.LastModifyingImplementationInfo !== undefined) view.setBigUint64(72, data.LastModifyingImplementationInfo === null ? 0n : util.toBigInt(util.toPointer(data.LastModifyingImplementationInfo)), true);
  return buf;
}

export class FILE_QUERY_ON_DISK_VOL_INFO_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DirectoryCount(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get FileCount(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u16
  get FsFormatMajVersion(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: u16
  get FsFormatMinVersion(): number {
    return this.view.getUint16(18, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get FsFormatName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get FormatTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get LastUpdateTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get CopyrightInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get AbstractInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get FormattingImplementationInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get LastModifyingImplementationInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set DirectoryCount(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set FileCount(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u16
  set FsFormatMajVersion(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: u16
  set FsFormatMinVersion(value: number) {
    this.view.setUint16(18, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set FsFormatName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set FormatTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set LastUpdateTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set CopyrightInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set AbstractInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set FormattingImplementationInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set LastModifyingImplementationInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FILE_INITIATE_REPAIR_OUTPUT_BUFFER (size: 32)
 */
export interface FILE_INITIATE_REPAIR_OUTPUT_BUFFER {
  /** u64 */
  Hint1: number | bigint;
  /** u64 */
  Hint2: number | bigint;
  /** u64 */
  Clsn: number | bigint;
  /** u32 */
  Status: number;
}

export const sizeofFILE_INITIATE_REPAIR_OUTPUT_BUFFER = 32;

export function allocFILE_INITIATE_REPAIR_OUTPUT_BUFFER(data?: Partial<FILE_INITIATE_REPAIR_OUTPUT_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_INITIATE_REPAIR_OUTPUT_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Hint1 !== undefined) view.setBigUint64(0, util.toBigInt(data.Hint1), true);
  // 0x08: u64
  if (data?.Hint2 !== undefined) view.setBigUint64(8, util.toBigInt(data.Hint2), true);
  // 0x10: u64
  if (data?.Clsn !== undefined) view.setBigUint64(16, util.toBigInt(data.Clsn), true);
  // 0x18: u32
  if (data?.Status !== undefined) view.setUint32(24, Number(data.Status), true);
  // 0x1c: pad4
  return buf;
}

export class FILE_INITIATE_REPAIR_OUTPUT_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Hint1(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get Hint2(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get Clsn(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u32
  get Status(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u64
  set Hint1(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set Hint2(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set Clsn(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u32
  set Status(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.System.Ioctl.SHRINK_VOLUME_INFORMATION (size: 24)
 */
export interface SHRINK_VOLUME_INFORMATION {
  /** Windows.Win32.System.Ioctl.SHRINK_VOLUME_REQUEST_TYPES */
  ShrinkRequestType: SHRINK_VOLUME_REQUEST_TYPES;
  /** u64 */
  Flags: number | bigint;
  /** i64 */
  NewNumberOfSectors: number | bigint;
}

export const sizeofSHRINK_VOLUME_INFORMATION = 24;

export function allocSHRINK_VOLUME_INFORMATION(data?: Partial<SHRINK_VOLUME_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSHRINK_VOLUME_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ShrinkRequestType !== undefined) view.setInt32(0, Number(data.ShrinkRequestType), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.Flags !== undefined) view.setBigUint64(8, util.toBigInt(data.Flags), true);
  // 0x10: i64
  if (data?.NewNumberOfSectors !== undefined) view.setBigInt64(16, util.toBigInt(data.NewNumberOfSectors), true);
  return buf;
}

export class SHRINK_VOLUME_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get ShrinkRequestType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: u64
  get Flags(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: i64
  get NewNumberOfSectors(): number | bigint {
    return this.view.getBigInt64(16, true);
  }

  // 0x00: i32
  set ShrinkRequestType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: u64
  set Flags(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: i64
  set NewNumberOfSectors(value: number | bigint) {
    this.view.setBigInt64(16, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.TXFS_MODIFY_RM (size: 40)
 */
export interface TXFS_MODIFY_RM {
  /** Windows.Win32.System.Ioctl.TXFS_RMF_LAGS */
  Flags: TXFS_RMF_LAGS;
  /** u32 */
  LogContainerCountMax: number;
  /** u32 */
  LogContainerCountMin: number;
  /** u32 */
  LogContainerCount: number;
  /** u32 */
  LogGrowthIncrement: number;
  /** u32 */
  LogAutoShrinkPercentage: number;
  /** u64 */
  Reserved: number | bigint;
  /** u16 */
  LoggingMode: number;
}

export const sizeofTXFS_MODIFY_RM = 40;

export function allocTXFS_MODIFY_RM(data?: Partial<TXFS_MODIFY_RM>): Uint8Array {
  const buf = new Uint8Array(sizeofTXFS_MODIFY_RM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.LogContainerCountMax !== undefined) view.setUint32(4, Number(data.LogContainerCountMax), true);
  // 0x08: u32
  if (data?.LogContainerCountMin !== undefined) view.setUint32(8, Number(data.LogContainerCountMin), true);
  // 0x0c: u32
  if (data?.LogContainerCount !== undefined) view.setUint32(12, Number(data.LogContainerCount), true);
  // 0x10: u32
  if (data?.LogGrowthIncrement !== undefined) view.setUint32(16, Number(data.LogGrowthIncrement), true);
  // 0x14: u32
  if (data?.LogAutoShrinkPercentage !== undefined) view.setUint32(20, Number(data.LogAutoShrinkPercentage), true);
  // 0x18: u64
  if (data?.Reserved !== undefined) view.setBigUint64(24, util.toBigInt(data.Reserved), true);
  // 0x20: u16
  if (data?.LoggingMode !== undefined) view.setUint16(32, Number(data.LoggingMode), true);
  // 0x22: pad6
  return buf;
}

export class TXFS_MODIFY_RMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get LogContainerCountMax(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get LogContainerCountMin(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get LogContainerCount(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get LogGrowthIncrement(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get LogAutoShrinkPercentage(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u64
  get Reserved(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u16
  get LoggingMode(): number {
    return this.view.getUint16(32, true);
  }

  // 0x22: pad6

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set LogContainerCountMax(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set LogContainerCountMin(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set LogContainerCount(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set LogGrowthIncrement(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set LogAutoShrinkPercentage(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u64
  set Reserved(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u16
  set LoggingMode(value: number) {
    this.view.setUint16(32, value, true);
  }

  // 0x22: pad6
}

/**
 * Windows.Win32.System.Ioctl.TXFS_QUERY_RM_INFORMATION (size: 168)
 */
export interface TXFS_QUERY_RM_INFORMATION {
  /** u32 */
  BytesRequired: number;
  /** u64 */
  TailLsn: number | bigint;
  /** u64 */
  CurrentLsn: number | bigint;
  /** u64 */
  ArchiveTailLsn: number | bigint;
  /** u64 */
  LogContainerSize: number | bigint;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  HighestVirtualClock: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  LogContainerCount: number;
  /** u32 */
  LogContainerCountMax: number;
  /** u32 */
  LogContainerCountMin: number;
  /** u32 */
  LogGrowthIncrement: number;
  /** u32 */
  LogAutoShrinkPercentage: number;
  /** Windows.Win32.System.Ioctl.TXFS_RMF_LAGS */
  Flags: TXFS_RMF_LAGS;
  /** u16 */
  LoggingMode: number;
  /** u16 */
  Reserved: number;
  /** u32 */
  RmState: number;
  /** u64 */
  LogCapacity: number | bigint;
  /** u64 */
  LogFree: number | bigint;
  /** u64 */
  TopsSize: number | bigint;
  /** u64 */
  TopsUsed: number | bigint;
  /** u64 */
  TransactionCount: number | bigint;
  /** u64 */
  OnePCCount: number | bigint;
  /** u64 */
  TwoPCCount: number | bigint;
  /** u64 */
  NumberLogFileFull: number | bigint;
  /** u64 */
  OldestTransactionAge: number | bigint;
  /** System.Guid */
  RMName: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  TmLogPathOffset: number;
}

export const sizeofTXFS_QUERY_RM_INFORMATION = 168;

export function allocTXFS_QUERY_RM_INFORMATION(data?: Partial<TXFS_QUERY_RM_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofTXFS_QUERY_RM_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BytesRequired !== undefined) view.setUint32(0, Number(data.BytesRequired), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.TailLsn !== undefined) view.setBigUint64(8, util.toBigInt(data.TailLsn), true);
  // 0x10: u64
  if (data?.CurrentLsn !== undefined) view.setBigUint64(16, util.toBigInt(data.CurrentLsn), true);
  // 0x18: u64
  if (data?.ArchiveTailLsn !== undefined) view.setBigUint64(24, util.toBigInt(data.ArchiveTailLsn), true);
  // 0x20: u64
  if (data?.LogContainerSize !== undefined) view.setBigUint64(32, util.toBigInt(data.LogContainerSize), true);
  // 0x28: pointer
  if (data?.HighestVirtualClock !== undefined) view.setBigUint64(40, data.HighestVirtualClock === null ? 0n : util.toBigInt(util.toPointer(data.HighestVirtualClock)), true);
  // 0x30: u32
  if (data?.LogContainerCount !== undefined) view.setUint32(48, Number(data.LogContainerCount), true);
  // 0x34: u32
  if (data?.LogContainerCountMax !== undefined) view.setUint32(52, Number(data.LogContainerCountMax), true);
  // 0x38: u32
  if (data?.LogContainerCountMin !== undefined) view.setUint32(56, Number(data.LogContainerCountMin), true);
  // 0x3c: u32
  if (data?.LogGrowthIncrement !== undefined) view.setUint32(60, Number(data.LogGrowthIncrement), true);
  // 0x40: u32
  if (data?.LogAutoShrinkPercentage !== undefined) view.setUint32(64, Number(data.LogAutoShrinkPercentage), true);
  // 0x44: u32
  if (data?.Flags !== undefined) view.setUint32(68, Number(data.Flags), true);
  // 0x48: u16
  if (data?.LoggingMode !== undefined) view.setUint16(72, Number(data.LoggingMode), true);
  // 0x4a: u16
  if (data?.Reserved !== undefined) view.setUint16(74, Number(data.Reserved), true);
  // 0x4c: u32
  if (data?.RmState !== undefined) view.setUint32(76, Number(data.RmState), true);
  // 0x50: u64
  if (data?.LogCapacity !== undefined) view.setBigUint64(80, util.toBigInt(data.LogCapacity), true);
  // 0x58: u64
  if (data?.LogFree !== undefined) view.setBigUint64(88, util.toBigInt(data.LogFree), true);
  // 0x60: u64
  if (data?.TopsSize !== undefined) view.setBigUint64(96, util.toBigInt(data.TopsSize), true);
  // 0x68: u64
  if (data?.TopsUsed !== undefined) view.setBigUint64(104, util.toBigInt(data.TopsUsed), true);
  // 0x70: u64
  if (data?.TransactionCount !== undefined) view.setBigUint64(112, util.toBigInt(data.TransactionCount), true);
  // 0x78: u64
  if (data?.OnePCCount !== undefined) view.setBigUint64(120, util.toBigInt(data.OnePCCount), true);
  // 0x80: u64
  if (data?.TwoPCCount !== undefined) view.setBigUint64(128, util.toBigInt(data.TwoPCCount), true);
  // 0x88: u64
  if (data?.NumberLogFileFull !== undefined) view.setBigUint64(136, util.toBigInt(data.NumberLogFileFull), true);
  // 0x90: u64
  if (data?.OldestTransactionAge !== undefined) view.setBigUint64(144, util.toBigInt(data.OldestTransactionAge), true);
  // 0x98: pointer
  if (data?.RMName !== undefined) view.setBigUint64(152, data.RMName === null ? 0n : util.toBigInt(util.toPointer(data.RMName)), true);
  // 0xa0: u32
  if (data?.TmLogPathOffset !== undefined) view.setUint32(160, Number(data.TmLogPathOffset), true);
  // 0xa4: pad4
  return buf;
}

export class TXFS_QUERY_RM_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get BytesRequired(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: u64
  get TailLsn(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get CurrentLsn(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get ArchiveTailLsn(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u64
  get LogContainerSize(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: pointer
  get HighestVirtualClock(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get LogContainerCount(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get LogContainerCountMax(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get LogContainerCountMin(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get LogGrowthIncrement(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get LogAutoShrinkPercentage(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get Flags(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u16
  get LoggingMode(): number {
    return this.view.getUint16(72, true);
  }

  // 0x4a: u16
  get Reserved(): number {
    return this.view.getUint16(74, true);
  }

  // 0x4c: u32
  get RmState(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u64
  get LogCapacity(): number | bigint {
    return this.view.getBigUint64(80, true);
  }

  // 0x58: u64
  get LogFree(): number | bigint {
    return this.view.getBigUint64(88, true);
  }

  // 0x60: u64
  get TopsSize(): number | bigint {
    return this.view.getBigUint64(96, true);
  }

  // 0x68: u64
  get TopsUsed(): number | bigint {
    return this.view.getBigUint64(104, true);
  }

  // 0x70: u64
  get TransactionCount(): number | bigint {
    return this.view.getBigUint64(112, true);
  }

  // 0x78: u64
  get OnePCCount(): number | bigint {
    return this.view.getBigUint64(120, true);
  }

  // 0x80: u64
  get TwoPCCount(): number | bigint {
    return this.view.getBigUint64(128, true);
  }

  // 0x88: u64
  get NumberLogFileFull(): number | bigint {
    return this.view.getBigUint64(136, true);
  }

  // 0x90: u64
  get OldestTransactionAge(): number | bigint {
    return this.view.getBigUint64(144, true);
  }

  // 0x98: pointer
  get RMName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(152, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xa0: u32
  get TmLogPathOffset(): number {
    return this.view.getUint32(160, true);
  }

  // 0xa4: pad4

  // 0x00: u32
  set BytesRequired(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: u64
  set TailLsn(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set CurrentLsn(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set ArchiveTailLsn(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u64
  set LogContainerSize(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: pointer
  set HighestVirtualClock(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set LogContainerCount(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set LogContainerCountMax(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set LogContainerCountMin(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set LogGrowthIncrement(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set LogAutoShrinkPercentage(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set Flags(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u16
  set LoggingMode(value: number) {
    this.view.setUint16(72, value, true);
  }

  // 0x4a: u16
  set Reserved(value: number) {
    this.view.setUint16(74, value, true);
  }

  // 0x4c: u32
  set RmState(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u64
  set LogCapacity(value: number | bigint) {
    this.view.setBigUint64(80, util.toBigInt(value), true);
  }

  // 0x58: u64
  set LogFree(value: number | bigint) {
    this.view.setBigUint64(88, util.toBigInt(value), true);
  }

  // 0x60: u64
  set TopsSize(value: number | bigint) {
    this.view.setBigUint64(96, util.toBigInt(value), true);
  }

  // 0x68: u64
  set TopsUsed(value: number | bigint) {
    this.view.setBigUint64(104, util.toBigInt(value), true);
  }

  // 0x70: u64
  set TransactionCount(value: number | bigint) {
    this.view.setBigUint64(112, util.toBigInt(value), true);
  }

  // 0x78: u64
  set OnePCCount(value: number | bigint) {
    this.view.setBigUint64(120, util.toBigInt(value), true);
  }

  // 0x80: u64
  set TwoPCCount(value: number | bigint) {
    this.view.setBigUint64(128, util.toBigInt(value), true);
  }

  // 0x88: u64
  set NumberLogFileFull(value: number | bigint) {
    this.view.setBigUint64(136, util.toBigInt(value), true);
  }

  // 0x90: u64
  set OldestTransactionAge(value: number | bigint) {
    this.view.setBigUint64(144, util.toBigInt(value), true);
  }

  // 0x98: pointer
  set RMName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(152, util.toBigInt(util.toPointer(value)), true);
  }

  // 0xa0: u32
  set TmLogPathOffset(value: number) {
    this.view.setUint32(160, value, true);
  }

  // 0xa4: pad4
}

/**
 * Windows.Win32.System.Ioctl.TXFS_ROLLFORWARD_REDO_INFORMATION (size: 32)
 */
export interface TXFS_ROLLFORWARD_REDO_INFORMATION {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LastVirtualClock: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  LastRedoLsn: number | bigint;
  /** u64 */
  HighestRecoveryLsn: number | bigint;
  /** u32 */
  Flags: number;
}

export const sizeofTXFS_ROLLFORWARD_REDO_INFORMATION = 32;

export function allocTXFS_ROLLFORWARD_REDO_INFORMATION(data?: Partial<TXFS_ROLLFORWARD_REDO_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofTXFS_ROLLFORWARD_REDO_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LastVirtualClock !== undefined) view.setBigUint64(0, data.LastVirtualClock === null ? 0n : util.toBigInt(util.toPointer(data.LastVirtualClock)), true);
  // 0x08: u64
  if (data?.LastRedoLsn !== undefined) view.setBigUint64(8, util.toBigInt(data.LastRedoLsn), true);
  // 0x10: u64
  if (data?.HighestRecoveryLsn !== undefined) view.setBigUint64(16, util.toBigInt(data.HighestRecoveryLsn), true);
  // 0x18: u32
  if (data?.Flags !== undefined) view.setUint32(24, Number(data.Flags), true);
  // 0x1c: pad4
  return buf;
}

export class TXFS_ROLLFORWARD_REDO_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get LastVirtualClock(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u64
  get LastRedoLsn(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get HighestRecoveryLsn(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u32
  get Flags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set LastVirtualClock(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u64
  set LastRedoLsn(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set HighestRecoveryLsn(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u32
  set Flags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.System.Ioctl.TXFS_START_RM_INFORMATION (size: 56)
 */
export interface TXFS_START_RM_INFORMATION {
  /** u32 */
  Flags: number;
  /** u64 */
  LogContainerSize: number | bigint;
  /** u32 */
  LogContainerCountMin: number;
  /** u32 */
  LogContainerCountMax: number;
  /** u32 */
  LogGrowthIncrement: number;
  /** u32 */
  LogAutoShrinkPercentage: number;
  /** u32 */
  TmLogPathOffset: number;
  /** u16 */
  TmLogPathLength: number;
  /** u16 */
  LoggingMode: number;
  /** u16 */
  LogPathLength: number;
  /** u16 */
  Reserved: number;
  /** array */
  LogPath: Deno.PointerValue | null;
}

export const sizeofTXFS_START_RM_INFORMATION = 56;

export function allocTXFS_START_RM_INFORMATION(data?: Partial<TXFS_START_RM_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofTXFS_START_RM_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.LogContainerSize !== undefined) view.setBigUint64(8, util.toBigInt(data.LogContainerSize), true);
  // 0x10: u32
  if (data?.LogContainerCountMin !== undefined) view.setUint32(16, Number(data.LogContainerCountMin), true);
  // 0x14: u32
  if (data?.LogContainerCountMax !== undefined) view.setUint32(20, Number(data.LogContainerCountMax), true);
  // 0x18: u32
  if (data?.LogGrowthIncrement !== undefined) view.setUint32(24, Number(data.LogGrowthIncrement), true);
  // 0x1c: u32
  if (data?.LogAutoShrinkPercentage !== undefined) view.setUint32(28, Number(data.LogAutoShrinkPercentage), true);
  // 0x20: u32
  if (data?.TmLogPathOffset !== undefined) view.setUint32(32, Number(data.TmLogPathOffset), true);
  // 0x24: u16
  if (data?.TmLogPathLength !== undefined) view.setUint16(36, Number(data.TmLogPathLength), true);
  // 0x26: u16
  if (data?.LoggingMode !== undefined) view.setUint16(38, Number(data.LoggingMode), true);
  // 0x28: u16
  if (data?.LogPathLength !== undefined) view.setUint16(40, Number(data.LogPathLength), true);
  // 0x2a: u16
  if (data?.Reserved !== undefined) view.setUint16(42, Number(data.Reserved), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.LogPath !== undefined) view.setBigUint64(48, data.LogPath === null ? 0n : util.toBigInt(util.toPointer(data.LogPath)), true);
  return buf;
}

export class TXFS_START_RM_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: u64
  get LogContainerSize(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u32
  get LogContainerCountMin(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get LogContainerCountMax(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get LogGrowthIncrement(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get LogAutoShrinkPercentage(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get TmLogPathOffset(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u16
  get TmLogPathLength(): number {
    return this.view.getUint16(36, true);
  }

  // 0x26: u16
  get LoggingMode(): number {
    return this.view.getUint16(38, true);
  }

  // 0x28: u16
  get LogPathLength(): number {
    return this.view.getUint16(40, true);
  }

  // 0x2a: u16
  get Reserved(): number {
    return this.view.getUint16(42, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get LogPath(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: u64
  set LogContainerSize(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u32
  set LogContainerCountMin(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set LogContainerCountMax(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set LogGrowthIncrement(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set LogAutoShrinkPercentage(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set TmLogPathOffset(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u16
  set TmLogPathLength(value: number) {
    this.view.setUint16(36, value, true);
  }

  // 0x26: u16
  set LoggingMode(value: number) {
    this.view.setUint16(38, value, true);
  }

  // 0x28: u16
  set LogPathLength(value: number) {
    this.view.setUint16(40, value, true);
  }

  // 0x2a: u16
  set Reserved(value: number) {
    this.view.setUint16(42, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set LogPath(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * _TxfFileId_e__Struct (size: 16)
 */
export interface _TxfFileId_e__Struct {
  /** i64 */
  LowPart: number | bigint;
  /** i64 */
  HighPart: number | bigint;
}

export const sizeof_TxfFileId_e__Struct = 16;

export function alloc_TxfFileId_e__Struct(data?: Partial<_TxfFileId_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_TxfFileId_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.LowPart !== undefined) view.setBigInt64(0, util.toBigInt(data.LowPart), true);
  // 0x08: i64
  if (data?.HighPart !== undefined) view.setBigInt64(8, util.toBigInt(data.HighPart), true);
  return buf;
}

export class _TxfFileId_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get LowPart(): number | bigint {
    return this.view.getBigInt64(0, true);
  }

  // 0x08: i64
  get HighPart(): number | bigint {
    return this.view.getBigInt64(8, true);
  }

  // 0x00: i64
  set LowPart(value: number | bigint) {
    this.view.setBigInt64(0, util.toBigInt(value), true);
  }

  // 0x08: i64
  set HighPart(value: number | bigint) {
    this.view.setBigInt64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.TXFS_GET_METADATA_INFO_OUT (size: 32)
 */
export interface TXFS_GET_METADATA_INFO_OUT {
  /** _TxfFileId_e__Struct */
  TxfFileId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  LockingTransaction: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  LastLsn: number | bigint;
  /** u32 */
  TransactionState: number;
}

export const sizeofTXFS_GET_METADATA_INFO_OUT = 32;

export function allocTXFS_GET_METADATA_INFO_OUT(data?: Partial<TXFS_GET_METADATA_INFO_OUT>): Uint8Array {
  const buf = new Uint8Array(sizeofTXFS_GET_METADATA_INFO_OUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TxfFileId !== undefined) view.setBigUint64(0, data.TxfFileId === null ? 0n : util.toBigInt(util.toPointer(data.TxfFileId)), true);
  // 0x08: pointer
  if (data?.LockingTransaction !== undefined) view.setBigUint64(8, data.LockingTransaction === null ? 0n : util.toBigInt(util.toPointer(data.LockingTransaction)), true);
  // 0x10: u64
  if (data?.LastLsn !== undefined) view.setBigUint64(16, util.toBigInt(data.LastLsn), true);
  // 0x18: u32
  if (data?.TransactionState !== undefined) view.setUint32(24, Number(data.TransactionState), true);
  // 0x1c: pad4
  return buf;
}

export class TXFS_GET_METADATA_INFO_OUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get TxfFileId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get LockingTransaction(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u64
  get LastLsn(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u32
  get TransactionState(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set TxfFileId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set LockingTransaction(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u64
  set LastLsn(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u32
  set TransactionState(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.System.Ioctl.TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY (size: 48)
 */
export interface TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY {
  /** u64 */
  Offset: number | bigint;
  /** u32 */
  NameFlags: number;
  /** i64 */
  FileId: number | bigint;
  /** u32 */
  Reserved1: number;
  /** u32 */
  Reserved2: number;
  /** i64 */
  Reserved3: number | bigint;
  /** array */
  FileName: Deno.PointerValue | null;
}

export const sizeofTXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY = 48;

export function allocTXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY(data?: Partial<TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofTXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Offset !== undefined) view.setBigUint64(0, util.toBigInt(data.Offset), true);
  // 0x08: u32
  if (data?.NameFlags !== undefined) view.setUint32(8, Number(data.NameFlags), true);
  // 0x0c: pad4
  // 0x10: i64
  if (data?.FileId !== undefined) view.setBigInt64(16, util.toBigInt(data.FileId), true);
  // 0x18: u32
  if (data?.Reserved1 !== undefined) view.setUint32(24, Number(data.Reserved1), true);
  // 0x1c: u32
  if (data?.Reserved2 !== undefined) view.setUint32(28, Number(data.Reserved2), true);
  // 0x20: i64
  if (data?.Reserved3 !== undefined) view.setBigInt64(32, util.toBigInt(data.Reserved3), true);
  // 0x28: pointer
  if (data?.FileName !== undefined) view.setBigUint64(40, data.FileName === null ? 0n : util.toBigInt(util.toPointer(data.FileName)), true);
  return buf;
}

export class TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Offset(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u32
  get NameFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: i64
  get FileId(): number | bigint {
    return this.view.getBigInt64(16, true);
  }

  // 0x18: u32
  get Reserved1(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get Reserved2(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: i64
  get Reserved3(): number | bigint {
    return this.view.getBigInt64(32, true);
  }

  // 0x28: pointer
  get FileName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u64
  set Offset(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u32
  set NameFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: i64
  set FileId(value: number | bigint) {
    this.view.setBigInt64(16, util.toBigInt(value), true);
  }

  // 0x18: u32
  set Reserved1(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set Reserved2(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: i64
  set Reserved3(value: number | bigint) {
    this.view.setBigInt64(32, util.toBigInt(value), true);
  }

  // 0x28: pointer
  set FileName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.TXFS_LIST_TRANSACTION_LOCKED_FILES (size: 32)
 */
export interface TXFS_LIST_TRANSACTION_LOCKED_FILES {
  /** System.Guid */
  KtmTransaction: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  NumberOfFiles: number | bigint;
  /** u64 */
  BufferSizeRequired: number | bigint;
  /** u64 */
  Offset: number | bigint;
}

export const sizeofTXFS_LIST_TRANSACTION_LOCKED_FILES = 32;

export function allocTXFS_LIST_TRANSACTION_LOCKED_FILES(data?: Partial<TXFS_LIST_TRANSACTION_LOCKED_FILES>): Uint8Array {
  const buf = new Uint8Array(sizeofTXFS_LIST_TRANSACTION_LOCKED_FILES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.KtmTransaction !== undefined) view.setBigUint64(0, data.KtmTransaction === null ? 0n : util.toBigInt(util.toPointer(data.KtmTransaction)), true);
  // 0x08: u64
  if (data?.NumberOfFiles !== undefined) view.setBigUint64(8, util.toBigInt(data.NumberOfFiles), true);
  // 0x10: u64
  if (data?.BufferSizeRequired !== undefined) view.setBigUint64(16, util.toBigInt(data.BufferSizeRequired), true);
  // 0x18: u64
  if (data?.Offset !== undefined) view.setBigUint64(24, util.toBigInt(data.Offset), true);
  return buf;
}

export class TXFS_LIST_TRANSACTION_LOCKED_FILESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get KtmTransaction(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u64
  get NumberOfFiles(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get BufferSizeRequired(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get Offset(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x00: pointer
  set KtmTransaction(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u64
  set NumberOfFiles(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set BufferSizeRequired(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set Offset(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.TXFS_LIST_TRANSACTIONS_ENTRY (size: 32)
 */
export interface TXFS_LIST_TRANSACTIONS_ENTRY {
  /** System.Guid */
  TransactionId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  TransactionState: number;
  /** u32 */
  Reserved1: number;
  /** u32 */
  Reserved2: number;
  /** i64 */
  Reserved3: number | bigint;
}

export const sizeofTXFS_LIST_TRANSACTIONS_ENTRY = 32;

export function allocTXFS_LIST_TRANSACTIONS_ENTRY(data?: Partial<TXFS_LIST_TRANSACTIONS_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofTXFS_LIST_TRANSACTIONS_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TransactionId !== undefined) view.setBigUint64(0, data.TransactionId === null ? 0n : util.toBigInt(util.toPointer(data.TransactionId)), true);
  // 0x08: u32
  if (data?.TransactionState !== undefined) view.setUint32(8, Number(data.TransactionState), true);
  // 0x0c: u32
  if (data?.Reserved1 !== undefined) view.setUint32(12, Number(data.Reserved1), true);
  // 0x10: u32
  if (data?.Reserved2 !== undefined) view.setUint32(16, Number(data.Reserved2), true);
  // 0x14: pad4
  // 0x18: i64
  if (data?.Reserved3 !== undefined) view.setBigInt64(24, util.toBigInt(data.Reserved3), true);
  return buf;
}

export class TXFS_LIST_TRANSACTIONS_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get TransactionId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get TransactionState(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Reserved1(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Reserved2(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: i64
  get Reserved3(): number | bigint {
    return this.view.getBigInt64(24, true);
  }

  // 0x00: pointer
  set TransactionId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set TransactionState(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Reserved1(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Reserved2(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: i64
  set Reserved3(value: number | bigint) {
    this.view.setBigInt64(24, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.TXFS_LIST_TRANSACTIONS (size: 16)
 */
export interface TXFS_LIST_TRANSACTIONS {
  /** u64 */
  NumberOfTransactions: number | bigint;
  /** u64 */
  BufferSizeRequired: number | bigint;
}

export const sizeofTXFS_LIST_TRANSACTIONS = 16;

export function allocTXFS_LIST_TRANSACTIONS(data?: Partial<TXFS_LIST_TRANSACTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofTXFS_LIST_TRANSACTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.NumberOfTransactions !== undefined) view.setBigUint64(0, util.toBigInt(data.NumberOfTransactions), true);
  // 0x08: u64
  if (data?.BufferSizeRequired !== undefined) view.setBigUint64(8, util.toBigInt(data.BufferSizeRequired), true);
  return buf;
}

export class TXFS_LIST_TRANSACTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get NumberOfTransactions(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get BufferSizeRequired(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u64
  set NumberOfTransactions(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set BufferSizeRequired(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.TXFS_READ_BACKUP_INFORMATION_OUT (size: 8)
 */
export interface TXFS_READ_BACKUP_INFORMATION_OUT {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTXFS_READ_BACKUP_INFORMATION_OUT = 8;

export function allocTXFS_READ_BACKUP_INFORMATION_OUT(data?: Partial<TXFS_READ_BACKUP_INFORMATION_OUT>): Uint8Array {
  const buf = new Uint8Array(sizeofTXFS_READ_BACKUP_INFORMATION_OUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class TXFS_READ_BACKUP_INFORMATION_OUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.TXFS_WRITE_BACKUP_INFORMATION (size: 8)
 */
export interface TXFS_WRITE_BACKUP_INFORMATION {
  /** array */
  Buffer: Deno.PointerValue | null;
}

export const sizeofTXFS_WRITE_BACKUP_INFORMATION = 8;

export function allocTXFS_WRITE_BACKUP_INFORMATION(data?: Partial<TXFS_WRITE_BACKUP_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofTXFS_WRITE_BACKUP_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Buffer !== undefined) view.setBigUint64(0, data.Buffer === null ? 0n : util.toBigInt(util.toPointer(data.Buffer)), true);
  return buf;
}

export class TXFS_WRITE_BACKUP_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Buffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Buffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.TXFS_GET_TRANSACTED_VERSION (size: 16)
 */
export interface TXFS_GET_TRANSACTED_VERSION {
  /** u32 */
  ThisBaseVersion: number;
  /** u32 */
  LatestVersion: number;
  /** u16 */
  ThisMiniVersion: number;
  /** u16 */
  FirstMiniVersion: number;
  /** u16 */
  LatestMiniVersion: number;
}

export const sizeofTXFS_GET_TRANSACTED_VERSION = 16;

export function allocTXFS_GET_TRANSACTED_VERSION(data?: Partial<TXFS_GET_TRANSACTED_VERSION>): Uint8Array {
  const buf = new Uint8Array(sizeofTXFS_GET_TRANSACTED_VERSION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ThisBaseVersion !== undefined) view.setUint32(0, Number(data.ThisBaseVersion), true);
  // 0x04: u32
  if (data?.LatestVersion !== undefined) view.setUint32(4, Number(data.LatestVersion), true);
  // 0x08: u16
  if (data?.ThisMiniVersion !== undefined) view.setUint16(8, Number(data.ThisMiniVersion), true);
  // 0x0a: u16
  if (data?.FirstMiniVersion !== undefined) view.setUint16(10, Number(data.FirstMiniVersion), true);
  // 0x0c: u16
  if (data?.LatestMiniVersion !== undefined) view.setUint16(12, Number(data.LatestMiniVersion), true);
  // 0x0e: pad2
  return buf;
}

export class TXFS_GET_TRANSACTED_VERSIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ThisBaseVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get LatestVersion(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u16
  get ThisMiniVersion(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get FirstMiniVersion(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u16
  get LatestMiniVersion(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: pad2

  // 0x00: u32
  set ThisBaseVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set LatestVersion(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u16
  set ThisMiniVersion(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set FirstMiniVersion(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u16
  set LatestMiniVersion(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: pad2
}

/**
 * Windows.Win32.System.Ioctl.TXFS_SAVEPOINT_INFORMATION (size: 16)
 */
export interface TXFS_SAVEPOINT_INFORMATION {
  /** Windows.Win32.Foundation.HANDLE */
  KtmTransaction: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ActionCode: number;
  /** u32 */
  SavepointId: number;
}

export const sizeofTXFS_SAVEPOINT_INFORMATION = 16;

export function allocTXFS_SAVEPOINT_INFORMATION(data?: Partial<TXFS_SAVEPOINT_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofTXFS_SAVEPOINT_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.KtmTransaction !== undefined) view.setBigUint64(0, data.KtmTransaction === null ? 0n : util.toBigInt(util.toPointer(data.KtmTransaction)), true);
  // 0x08: u32
  if (data?.ActionCode !== undefined) view.setUint32(8, Number(data.ActionCode), true);
  // 0x0c: u32
  if (data?.SavepointId !== undefined) view.setUint32(12, Number(data.SavepointId), true);
  return buf;
}

export class TXFS_SAVEPOINT_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get KtmTransaction(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ActionCode(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get SavepointId(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set KtmTransaction(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ActionCode(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set SavepointId(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.TXFS_CREATE_MINIVERSION_INFO (size: 16)
 */
export interface TXFS_CREATE_MINIVERSION_INFO {
  /** u16 */
  StructureVersion: number;
  /** u16 */
  StructureLength: number;
  /** u32 */
  BaseVersion: number;
  /** u16 */
  MiniVersion: number;
}

export const sizeofTXFS_CREATE_MINIVERSION_INFO = 16;

export function allocTXFS_CREATE_MINIVERSION_INFO(data?: Partial<TXFS_CREATE_MINIVERSION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofTXFS_CREATE_MINIVERSION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.StructureVersion !== undefined) view.setUint16(0, Number(data.StructureVersion), true);
  // 0x02: u16
  if (data?.StructureLength !== undefined) view.setUint16(2, Number(data.StructureLength), true);
  // 0x04: u32
  if (data?.BaseVersion !== undefined) view.setUint32(4, Number(data.BaseVersion), true);
  // 0x08: u16
  if (data?.MiniVersion !== undefined) view.setUint16(8, Number(data.MiniVersion), true);
  // 0x0a: pad6
  return buf;
}

export class TXFS_CREATE_MINIVERSION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get StructureVersion(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get StructureLength(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get BaseVersion(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u16
  get MiniVersion(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x00: u16
  set StructureVersion(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set StructureLength(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set BaseVersion(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u16
  set MiniVersion(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Ioctl.TXFS_TRANSACTION_ACTIVE_INFO (size: 8)
 */
export interface TXFS_TRANSACTION_ACTIVE_INFO {
  /** Windows.Win32.Foundation.BOOLEAN */
  TransactionsActiveAtSnapshot: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTXFS_TRANSACTION_ACTIVE_INFO = 8;

export function allocTXFS_TRANSACTION_ACTIVE_INFO(data?: Partial<TXFS_TRANSACTION_ACTIVE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofTXFS_TRANSACTION_ACTIVE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TransactionsActiveAtSnapshot !== undefined) view.setBigUint64(0, data.TransactionsActiveAtSnapshot === null ? 0n : util.toBigInt(util.toPointer(data.TransactionsActiveAtSnapshot)), true);
  return buf;
}

export class TXFS_TRANSACTION_ACTIVE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get TransactionsActiveAtSnapshot(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set TransactionsActiveAtSnapshot(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.BOOT_AREA_INFO (size: 16)
 */
export interface BOOT_AREA_INFO {
  /** u32 */
  BootSectorCount: number;
  /** array */
  BootSectors: Deno.PointerValue | null;
}

export const sizeofBOOT_AREA_INFO = 16;

export function allocBOOT_AREA_INFO(data?: Partial<BOOT_AREA_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofBOOT_AREA_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BootSectorCount !== undefined) view.setUint32(0, Number(data.BootSectorCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.BootSectors !== undefined) view.setBigUint64(8, data.BootSectors === null ? 0n : util.toBigInt(util.toPointer(data.BootSectors)), true);
  return buf;
}

export class BOOT_AREA_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get BootSectorCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get BootSectors(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set BootSectorCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set BootSectors(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.RETRIEVAL_POINTER_BASE (size: 8)
 */
export interface RETRIEVAL_POINTER_BASE {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  FileAreaOffset: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRETRIEVAL_POINTER_BASE = 8;

export function allocRETRIEVAL_POINTER_BASE(data?: Partial<RETRIEVAL_POINTER_BASE>): Uint8Array {
  const buf = new Uint8Array(sizeofRETRIEVAL_POINTER_BASE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.FileAreaOffset !== undefined) view.setBigUint64(0, data.FileAreaOffset === null ? 0n : util.toBigInt(util.toPointer(data.FileAreaOffset)), true);
  return buf;
}

export class RETRIEVAL_POINTER_BASEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get FileAreaOffset(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set FileAreaOffset(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FILE_FS_PERSISTENT_VOLUME_INFORMATION (size: 16)
 */
export interface FILE_FS_PERSISTENT_VOLUME_INFORMATION {
  /** u32 */
  VolumeFlags: number;
  /** u32 */
  FlagMask: number;
  /** u32 */
  Version: number;
  /** u32 */
  Reserved: number;
}

export const sizeofFILE_FS_PERSISTENT_VOLUME_INFORMATION = 16;

export function allocFILE_FS_PERSISTENT_VOLUME_INFORMATION(data?: Partial<FILE_FS_PERSISTENT_VOLUME_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_FS_PERSISTENT_VOLUME_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.VolumeFlags !== undefined) view.setUint32(0, Number(data.VolumeFlags), true);
  // 0x04: u32
  if (data?.FlagMask !== undefined) view.setUint32(4, Number(data.FlagMask), true);
  // 0x08: u32
  if (data?.Version !== undefined) view.setUint32(8, Number(data.Version), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

export class FILE_FS_PERSISTENT_VOLUME_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get VolumeFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get FlagMask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Version(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Reserved(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set VolumeFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set FlagMask(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Version(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Reserved(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FILE_SYSTEM_RECOGNITION_INFORMATION (size: 8)
 */
export interface FILE_SYSTEM_RECOGNITION_INFORMATION {
  /** array */
  FileSystem: Deno.PointerValue | null;
}

export const sizeofFILE_SYSTEM_RECOGNITION_INFORMATION = 8;

export function allocFILE_SYSTEM_RECOGNITION_INFORMATION(data?: Partial<FILE_SYSTEM_RECOGNITION_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_SYSTEM_RECOGNITION_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.FileSystem !== undefined) view.setBigUint64(0, data.FileSystem === null ? 0n : util.toBigInt(util.toPointer(data.FileSystem)), true);
  return buf;
}

export class FILE_SYSTEM_RECOGNITION_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get FileSystem(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set FileSystem(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.REQUEST_OPLOCK_INPUT_BUFFER (size: 16)
 */
export interface REQUEST_OPLOCK_INPUT_BUFFER {
  /** u16 */
  StructureVersion: number;
  /** u16 */
  StructureLength: number;
  /** u32 */
  RequestedOplockLevel: number;
  /** u32 */
  Flags: number;
}

export const sizeofREQUEST_OPLOCK_INPUT_BUFFER = 16;

export function allocREQUEST_OPLOCK_INPUT_BUFFER(data?: Partial<REQUEST_OPLOCK_INPUT_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofREQUEST_OPLOCK_INPUT_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.StructureVersion !== undefined) view.setUint16(0, Number(data.StructureVersion), true);
  // 0x02: u16
  if (data?.StructureLength !== undefined) view.setUint16(2, Number(data.StructureLength), true);
  // 0x04: u32
  if (data?.RequestedOplockLevel !== undefined) view.setUint32(4, Number(data.RequestedOplockLevel), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: pad4
  return buf;
}

export class REQUEST_OPLOCK_INPUT_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get StructureVersion(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get StructureLength(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get RequestedOplockLevel(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u16
  set StructureVersion(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set StructureLength(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set RequestedOplockLevel(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Ioctl.REQUEST_OPLOCK_OUTPUT_BUFFER (size: 24)
 */
export interface REQUEST_OPLOCK_OUTPUT_BUFFER {
  /** u16 */
  StructureVersion: number;
  /** u16 */
  StructureLength: number;
  /** u32 */
  OriginalOplockLevel: number;
  /** u32 */
  NewOplockLevel: number;
  /** u32 */
  Flags: number;
  /** u32 */
  AccessMode: number;
  /** u16 */
  ShareMode: number;
}

export const sizeofREQUEST_OPLOCK_OUTPUT_BUFFER = 24;

export function allocREQUEST_OPLOCK_OUTPUT_BUFFER(data?: Partial<REQUEST_OPLOCK_OUTPUT_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofREQUEST_OPLOCK_OUTPUT_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.StructureVersion !== undefined) view.setUint16(0, Number(data.StructureVersion), true);
  // 0x02: u16
  if (data?.StructureLength !== undefined) view.setUint16(2, Number(data.StructureLength), true);
  // 0x04: u32
  if (data?.OriginalOplockLevel !== undefined) view.setUint32(4, Number(data.OriginalOplockLevel), true);
  // 0x08: u32
  if (data?.NewOplockLevel !== undefined) view.setUint32(8, Number(data.NewOplockLevel), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.AccessMode !== undefined) view.setUint32(16, Number(data.AccessMode), true);
  // 0x14: u16
  if (data?.ShareMode !== undefined) view.setUint16(20, Number(data.ShareMode), true);
  // 0x16: pad2
  return buf;
}

export class REQUEST_OPLOCK_OUTPUT_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get StructureVersion(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get StructureLength(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get OriginalOplockLevel(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get NewOplockLevel(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Flags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get AccessMode(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u16
  get ShareMode(): number {
    return this.view.getUint16(20, true);
  }

  // 0x16: pad2

  // 0x00: u16
  set StructureVersion(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set StructureLength(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set OriginalOplockLevel(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set NewOplockLevel(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Flags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set AccessMode(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u16
  set ShareMode(value: number) {
    this.view.setUint16(20, value, true);
  }

  // 0x16: pad2
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST (size: 8)
 */
export interface STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST {
  /** u32 */
  RequestLevel: number;
  /** u32 */
  RequestFlags: number;
}

export const sizeofSTORAGE_QUERY_DEPENDENT_VOLUME_REQUEST = 8;

export function allocSTORAGE_QUERY_DEPENDENT_VOLUME_REQUEST(data?: Partial<STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_QUERY_DEPENDENT_VOLUME_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.RequestLevel !== undefined) view.setUint32(0, Number(data.RequestLevel), true);
  // 0x04: u32
  if (data?.RequestFlags !== undefined) view.setUint32(4, Number(data.RequestFlags), true);
  return buf;
}

export class STORAGE_QUERY_DEPENDENT_VOLUME_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get RequestLevel(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get RequestFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set RequestLevel(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set RequestFlags(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Storage.Vhd.VIRTUAL_STORAGE_TYPE (size: 16)
 */
export interface VIRTUAL_STORAGE_TYPE {
  /** u32 */
  DeviceId: number;
  /** System.Guid */
  VendorId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVIRTUAL_STORAGE_TYPE = 16;

export function allocVIRTUAL_STORAGE_TYPE(data?: Partial<VIRTUAL_STORAGE_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofVIRTUAL_STORAGE_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DeviceId !== undefined) view.setUint32(0, Number(data.DeviceId), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.VendorId !== undefined) view.setBigUint64(8, data.VendorId === null ? 0n : util.toBigInt(util.toPointer(data.VendorId)), true);
  return buf;
}

export class VIRTUAL_STORAGE_TYPEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get DeviceId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get VendorId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set DeviceId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set VendorId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY (size: 24)
 */
export interface STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY {
  /** u32 */
  EntryLength: number;
  /** u32 */
  DependencyTypeFlags: number;
  /** u32 */
  ProviderSpecificFlags: number;
  /** Windows.Win32.Storage.Vhd.VIRTUAL_STORAGE_TYPE */
  VirtualStorageType: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSTORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY = 24;

export function allocSTORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY(data?: Partial<STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.EntryLength !== undefined) view.setUint32(0, Number(data.EntryLength), true);
  // 0x04: u32
  if (data?.DependencyTypeFlags !== undefined) view.setUint32(4, Number(data.DependencyTypeFlags), true);
  // 0x08: u32
  if (data?.ProviderSpecificFlags !== undefined) view.setUint32(8, Number(data.ProviderSpecificFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.VirtualStorageType !== undefined) view.setBigUint64(16, data.VirtualStorageType === null ? 0n : util.toBigInt(util.toPointer(data.VirtualStorageType)), true);
  return buf;
}

export class STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get EntryLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get DependencyTypeFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ProviderSpecificFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get VirtualStorageType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set EntryLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set DependencyTypeFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ProviderSpecificFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set VirtualStorageType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY (size: 64)
 */
export interface STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY {
  /** u32 */
  EntryLength: number;
  /** u32 */
  DependencyTypeFlags: number;
  /** u32 */
  ProviderSpecificFlags: number;
  /** Windows.Win32.Storage.Vhd.VIRTUAL_STORAGE_TYPE */
  VirtualStorageType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  AncestorLevel: number;
  /** u32 */
  HostVolumeNameOffset: number;
  /** u32 */
  HostVolumeNameSize: number;
  /** u32 */
  DependentVolumeNameOffset: number;
  /** u32 */
  DependentVolumeNameSize: number;
  /** u32 */
  RelativePathOffset: number;
  /** u32 */
  RelativePathSize: number;
  /** u32 */
  DependentDeviceNameOffset: number;
  /** u32 */
  DependentDeviceNameSize: number;
}

export const sizeofSTORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY = 64;

export function allocSTORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY(data?: Partial<STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.EntryLength !== undefined) view.setUint32(0, Number(data.EntryLength), true);
  // 0x04: u32
  if (data?.DependencyTypeFlags !== undefined) view.setUint32(4, Number(data.DependencyTypeFlags), true);
  // 0x08: u32
  if (data?.ProviderSpecificFlags !== undefined) view.setUint32(8, Number(data.ProviderSpecificFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.VirtualStorageType !== undefined) view.setBigUint64(16, data.VirtualStorageType === null ? 0n : util.toBigInt(util.toPointer(data.VirtualStorageType)), true);
  // 0x18: u32
  if (data?.AncestorLevel !== undefined) view.setUint32(24, Number(data.AncestorLevel), true);
  // 0x1c: u32
  if (data?.HostVolumeNameOffset !== undefined) view.setUint32(28, Number(data.HostVolumeNameOffset), true);
  // 0x20: u32
  if (data?.HostVolumeNameSize !== undefined) view.setUint32(32, Number(data.HostVolumeNameSize), true);
  // 0x24: u32
  if (data?.DependentVolumeNameOffset !== undefined) view.setUint32(36, Number(data.DependentVolumeNameOffset), true);
  // 0x28: u32
  if (data?.DependentVolumeNameSize !== undefined) view.setUint32(40, Number(data.DependentVolumeNameSize), true);
  // 0x2c: u32
  if (data?.RelativePathOffset !== undefined) view.setUint32(44, Number(data.RelativePathOffset), true);
  // 0x30: u32
  if (data?.RelativePathSize !== undefined) view.setUint32(48, Number(data.RelativePathSize), true);
  // 0x34: u32
  if (data?.DependentDeviceNameOffset !== undefined) view.setUint32(52, Number(data.DependentDeviceNameOffset), true);
  // 0x38: u32
  if (data?.DependentDeviceNameSize !== undefined) view.setUint32(56, Number(data.DependentDeviceNameSize), true);
  // 0x3c: pad4
  return buf;
}

export class STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get EntryLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get DependencyTypeFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ProviderSpecificFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get VirtualStorageType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get AncestorLevel(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get HostVolumeNameOffset(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get HostVolumeNameSize(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get DependentVolumeNameOffset(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get DependentVolumeNameSize(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get RelativePathOffset(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get RelativePathSize(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get DependentDeviceNameOffset(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get DependentDeviceNameSize(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x00: u32
  set EntryLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set DependencyTypeFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ProviderSpecificFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set VirtualStorageType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set AncestorLevel(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set HostVolumeNameOffset(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set HostVolumeNameSize(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set DependentVolumeNameOffset(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set DependentVolumeNameSize(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set RelativePathOffset(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set RelativePathSize(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set DependentDeviceNameOffset(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set DependentDeviceNameSize(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4
}

/**
 * Windows.Win32.System.Ioctl.STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE (size: 16)
 */
export interface STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE {
  /** u32 */
  ResponseLevel: number;
  /** u32 */
  NumberEntries: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSTORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE = 16;

export function allocSTORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE(data?: Partial<STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofSTORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ResponseLevel !== undefined) view.setUint32(0, Number(data.ResponseLevel), true);
  // 0x04: u32
  if (data?.NumberEntries !== undefined) view.setUint32(4, Number(data.NumberEntries), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ResponseLevel(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NumberEntries(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ResponseLevel(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NumberEntries(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SD_CHANGE_MACHINE_SID_INPUT (size: 8)
 */
export interface SD_CHANGE_MACHINE_SID_INPUT {
  /** u16 */
  CurrentMachineSIDOffset: number;
  /** u16 */
  CurrentMachineSIDLength: number;
  /** u16 */
  NewMachineSIDOffset: number;
  /** u16 */
  NewMachineSIDLength: number;
}

export const sizeofSD_CHANGE_MACHINE_SID_INPUT = 8;

export function allocSD_CHANGE_MACHINE_SID_INPUT(data?: Partial<SD_CHANGE_MACHINE_SID_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofSD_CHANGE_MACHINE_SID_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.CurrentMachineSIDOffset !== undefined) view.setUint16(0, Number(data.CurrentMachineSIDOffset), true);
  // 0x02: u16
  if (data?.CurrentMachineSIDLength !== undefined) view.setUint16(2, Number(data.CurrentMachineSIDLength), true);
  // 0x04: u16
  if (data?.NewMachineSIDOffset !== undefined) view.setUint16(4, Number(data.NewMachineSIDOffset), true);
  // 0x06: u16
  if (data?.NewMachineSIDLength !== undefined) view.setUint16(6, Number(data.NewMachineSIDLength), true);
  return buf;
}

export class SD_CHANGE_MACHINE_SID_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get CurrentMachineSIDOffset(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get CurrentMachineSIDLength(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get NewMachineSIDOffset(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get NewMachineSIDLength(): number {
    return this.view.getUint16(6, true);
  }

  // 0x00: u16
  set CurrentMachineSIDOffset(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set CurrentMachineSIDLength(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set NewMachineSIDOffset(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set NewMachineSIDLength(value: number) {
    this.view.setUint16(6, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SD_CHANGE_MACHINE_SID_OUTPUT (size: 56)
 */
export interface SD_CHANGE_MACHINE_SID_OUTPUT {
  /** u64 */
  NumSDChangedSuccess: number | bigint;
  /** u64 */
  NumSDChangedFail: number | bigint;
  /** u64 */
  NumSDUnused: number | bigint;
  /** u64 */
  NumSDTotal: number | bigint;
  /** u64 */
  NumMftSDChangedSuccess: number | bigint;
  /** u64 */
  NumMftSDChangedFail: number | bigint;
  /** u64 */
  NumMftSDTotal: number | bigint;
}

export const sizeofSD_CHANGE_MACHINE_SID_OUTPUT = 56;

export function allocSD_CHANGE_MACHINE_SID_OUTPUT(data?: Partial<SD_CHANGE_MACHINE_SID_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofSD_CHANGE_MACHINE_SID_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.NumSDChangedSuccess !== undefined) view.setBigUint64(0, util.toBigInt(data.NumSDChangedSuccess), true);
  // 0x08: u64
  if (data?.NumSDChangedFail !== undefined) view.setBigUint64(8, util.toBigInt(data.NumSDChangedFail), true);
  // 0x10: u64
  if (data?.NumSDUnused !== undefined) view.setBigUint64(16, util.toBigInt(data.NumSDUnused), true);
  // 0x18: u64
  if (data?.NumSDTotal !== undefined) view.setBigUint64(24, util.toBigInt(data.NumSDTotal), true);
  // 0x20: u64
  if (data?.NumMftSDChangedSuccess !== undefined) view.setBigUint64(32, util.toBigInt(data.NumMftSDChangedSuccess), true);
  // 0x28: u64
  if (data?.NumMftSDChangedFail !== undefined) view.setBigUint64(40, util.toBigInt(data.NumMftSDChangedFail), true);
  // 0x30: u64
  if (data?.NumMftSDTotal !== undefined) view.setBigUint64(48, util.toBigInt(data.NumMftSDTotal), true);
  return buf;
}

export class SD_CHANGE_MACHINE_SID_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get NumSDChangedSuccess(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get NumSDChangedFail(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get NumSDUnused(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get NumSDTotal(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u64
  get NumMftSDChangedSuccess(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: u64
  get NumMftSDChangedFail(): number | bigint {
    return this.view.getBigUint64(40, true);
  }

  // 0x30: u64
  get NumMftSDTotal(): number | bigint {
    return this.view.getBigUint64(48, true);
  }

  // 0x00: u64
  set NumSDChangedSuccess(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set NumSDChangedFail(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set NumSDUnused(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set NumSDTotal(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u64
  set NumMftSDChangedSuccess(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: u64
  set NumMftSDChangedFail(value: number | bigint) {
    this.view.setBigUint64(40, util.toBigInt(value), true);
  }

  // 0x30: u64
  set NumMftSDTotal(value: number | bigint) {
    this.view.setBigUint64(48, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SD_QUERY_STATS_INPUT (size: 8)
 */
export interface SD_QUERY_STATS_INPUT {
  /** u32 */
  Reserved: number;
}

export const sizeofSD_QUERY_STATS_INPUT = 8;

export function allocSD_QUERY_STATS_INPUT(data?: Partial<SD_QUERY_STATS_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofSD_QUERY_STATS_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Reserved !== undefined) view.setUint32(0, Number(data.Reserved), true);
  // 0x04: pad4
  return buf;
}

export class SD_QUERY_STATS_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Reserved(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set Reserved(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Ioctl.SD_QUERY_STATS_OUTPUT (size: 64)
 */
export interface SD_QUERY_STATS_OUTPUT {
  /** u64 */
  SdsStreamSize: number | bigint;
  /** u64 */
  SdsAllocationSize: number | bigint;
  /** u64 */
  SiiStreamSize: number | bigint;
  /** u64 */
  SiiAllocationSize: number | bigint;
  /** u64 */
  SdhStreamSize: number | bigint;
  /** u64 */
  SdhAllocationSize: number | bigint;
  /** u64 */
  NumSDTotal: number | bigint;
  /** u64 */
  NumSDUnused: number | bigint;
}

export const sizeofSD_QUERY_STATS_OUTPUT = 64;

export function allocSD_QUERY_STATS_OUTPUT(data?: Partial<SD_QUERY_STATS_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofSD_QUERY_STATS_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.SdsStreamSize !== undefined) view.setBigUint64(0, util.toBigInt(data.SdsStreamSize), true);
  // 0x08: u64
  if (data?.SdsAllocationSize !== undefined) view.setBigUint64(8, util.toBigInt(data.SdsAllocationSize), true);
  // 0x10: u64
  if (data?.SiiStreamSize !== undefined) view.setBigUint64(16, util.toBigInt(data.SiiStreamSize), true);
  // 0x18: u64
  if (data?.SiiAllocationSize !== undefined) view.setBigUint64(24, util.toBigInt(data.SiiAllocationSize), true);
  // 0x20: u64
  if (data?.SdhStreamSize !== undefined) view.setBigUint64(32, util.toBigInt(data.SdhStreamSize), true);
  // 0x28: u64
  if (data?.SdhAllocationSize !== undefined) view.setBigUint64(40, util.toBigInt(data.SdhAllocationSize), true);
  // 0x30: u64
  if (data?.NumSDTotal !== undefined) view.setBigUint64(48, util.toBigInt(data.NumSDTotal), true);
  // 0x38: u64
  if (data?.NumSDUnused !== undefined) view.setBigUint64(56, util.toBigInt(data.NumSDUnused), true);
  return buf;
}

export class SD_QUERY_STATS_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get SdsStreamSize(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get SdsAllocationSize(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get SiiStreamSize(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get SiiAllocationSize(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u64
  get SdhStreamSize(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: u64
  get SdhAllocationSize(): number | bigint {
    return this.view.getBigUint64(40, true);
  }

  // 0x30: u64
  get NumSDTotal(): number | bigint {
    return this.view.getBigUint64(48, true);
  }

  // 0x38: u64
  get NumSDUnused(): number | bigint {
    return this.view.getBigUint64(56, true);
  }

  // 0x00: u64
  set SdsStreamSize(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set SdsAllocationSize(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set SiiStreamSize(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set SiiAllocationSize(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u64
  set SdhStreamSize(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: u64
  set SdhAllocationSize(value: number | bigint) {
    this.view.setBigUint64(40, util.toBigInt(value), true);
  }

  // 0x30: u64
  set NumSDTotal(value: number | bigint) {
    this.view.setBigUint64(48, util.toBigInt(value), true);
  }

  // 0x38: u64
  set NumSDUnused(value: number | bigint) {
    this.view.setBigUint64(56, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SD_ENUM_SDS_INPUT (size: 16)
 */
export interface SD_ENUM_SDS_INPUT {
  /** u64 */
  StartingOffset: number | bigint;
  /** u64 */
  MaxSDEntriesToReturn: number | bigint;
}

export const sizeofSD_ENUM_SDS_INPUT = 16;

export function allocSD_ENUM_SDS_INPUT(data?: Partial<SD_ENUM_SDS_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofSD_ENUM_SDS_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.StartingOffset !== undefined) view.setBigUint64(0, util.toBigInt(data.StartingOffset), true);
  // 0x08: u64
  if (data?.MaxSDEntriesToReturn !== undefined) view.setBigUint64(8, util.toBigInt(data.MaxSDEntriesToReturn), true);
  return buf;
}

export class SD_ENUM_SDS_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get StartingOffset(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get MaxSDEntriesToReturn(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u64
  set StartingOffset(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set MaxSDEntriesToReturn(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SD_ENUM_SDS_ENTRY (size: 32)
 */
export interface SD_ENUM_SDS_ENTRY {
  /** u32 */
  Hash: number;
  /** u32 */
  SecurityId: number;
  /** u64 */
  Offset: number | bigint;
  /** u32 */
  Length: number;
  /** array */
  Descriptor: Deno.PointerValue | null;
}

export const sizeofSD_ENUM_SDS_ENTRY = 32;

export function allocSD_ENUM_SDS_ENTRY(data?: Partial<SD_ENUM_SDS_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofSD_ENUM_SDS_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Hash !== undefined) view.setUint32(0, Number(data.Hash), true);
  // 0x04: u32
  if (data?.SecurityId !== undefined) view.setUint32(4, Number(data.SecurityId), true);
  // 0x08: u64
  if (data?.Offset !== undefined) view.setBigUint64(8, util.toBigInt(data.Offset), true);
  // 0x10: u32
  if (data?.Length !== undefined) view.setUint32(16, Number(data.Length), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Descriptor !== undefined) view.setBigUint64(24, data.Descriptor === null ? 0n : util.toBigInt(util.toPointer(data.Descriptor)), true);
  return buf;
}

export class SD_ENUM_SDS_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Hash(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SecurityId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get Offset(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u32
  get Length(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Descriptor(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Hash(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SecurityId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set Offset(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u32
  set Length(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Descriptor(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SD_ENUM_SDS_OUTPUT (size: 32)
 */
export interface SD_ENUM_SDS_OUTPUT {
  /** u64 */
  NextOffset: number | bigint;
  /** u64 */
  NumSDEntriesReturned: number | bigint;
  /** u64 */
  NumSDBytesReturned: number | bigint;
  /** array */
  SDEntry: Deno.PointerValue | null;
}

export const sizeofSD_ENUM_SDS_OUTPUT = 32;

export function allocSD_ENUM_SDS_OUTPUT(data?: Partial<SD_ENUM_SDS_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofSD_ENUM_SDS_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.NextOffset !== undefined) view.setBigUint64(0, util.toBigInt(data.NextOffset), true);
  // 0x08: u64
  if (data?.NumSDEntriesReturned !== undefined) view.setBigUint64(8, util.toBigInt(data.NumSDEntriesReturned), true);
  // 0x10: u64
  if (data?.NumSDBytesReturned !== undefined) view.setBigUint64(16, util.toBigInt(data.NumSDBytesReturned), true);
  // 0x18: pointer
  if (data?.SDEntry !== undefined) view.setBigUint64(24, data.SDEntry === null ? 0n : util.toBigInt(util.toPointer(data.SDEntry)), true);
  return buf;
}

export class SD_ENUM_SDS_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get NextOffset(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get NumSDEntriesReturned(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get NumSDBytesReturned(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: pointer
  get SDEntry(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u64
  set NextOffset(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set NumSDEntriesReturned(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set NumSDBytesReturned(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: pointer
  set SDEntry(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SD_GLOBAL_CHANGE_INPUT (size: 16)
 */
export interface SD_GLOBAL_CHANGE_INPUT {
  /** u32 */
  Flags: number;
  /** u32 */
  ChangeType: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSD_GLOBAL_CHANGE_INPUT = 16;

export function allocSD_GLOBAL_CHANGE_INPUT(data?: Partial<SD_GLOBAL_CHANGE_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofSD_GLOBAL_CHANGE_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.ChangeType !== undefined) view.setUint32(4, Number(data.ChangeType), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class SD_GLOBAL_CHANGE_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ChangeType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ChangeType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SD_GLOBAL_CHANGE_OUTPUT (size: 16)
 */
export interface SD_GLOBAL_CHANGE_OUTPUT {
  /** u32 */
  Flags: number;
  /** u32 */
  ChangeType: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSD_GLOBAL_CHANGE_OUTPUT = 16;

export function allocSD_GLOBAL_CHANGE_OUTPUT(data?: Partial<SD_GLOBAL_CHANGE_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofSD_GLOBAL_CHANGE_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.ChangeType !== undefined) view.setUint32(4, Number(data.ChangeType), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class SD_GLOBAL_CHANGE_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ChangeType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ChangeType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.LOOKUP_STREAM_FROM_CLUSTER_INPUT (size: 16)
 */
export interface LOOKUP_STREAM_FROM_CLUSTER_INPUT {
  /** u32 */
  Flags: number;
  /** u32 */
  NumberOfClusters: number;
  /** array */
  Cluster: Deno.PointerValue | null;
}

export const sizeofLOOKUP_STREAM_FROM_CLUSTER_INPUT = 16;

export function allocLOOKUP_STREAM_FROM_CLUSTER_INPUT(data?: Partial<LOOKUP_STREAM_FROM_CLUSTER_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofLOOKUP_STREAM_FROM_CLUSTER_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.NumberOfClusters !== undefined) view.setUint32(4, Number(data.NumberOfClusters), true);
  // 0x08: pointer
  if (data?.Cluster !== undefined) view.setBigUint64(8, data.Cluster === null ? 0n : util.toBigInt(util.toPointer(data.Cluster)), true);
  return buf;
}

export class LOOKUP_STREAM_FROM_CLUSTER_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NumberOfClusters(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Cluster(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NumberOfClusters(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Cluster(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.LOOKUP_STREAM_FROM_CLUSTER_OUTPUT (size: 16)
 */
export interface LOOKUP_STREAM_FROM_CLUSTER_OUTPUT {
  /** u32 */
  Offset: number;
  /** u32 */
  NumberOfMatches: number;
  /** u32 */
  BufferSizeRequired: number;
}

export const sizeofLOOKUP_STREAM_FROM_CLUSTER_OUTPUT = 16;

export function allocLOOKUP_STREAM_FROM_CLUSTER_OUTPUT(data?: Partial<LOOKUP_STREAM_FROM_CLUSTER_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofLOOKUP_STREAM_FROM_CLUSTER_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Offset !== undefined) view.setUint32(0, Number(data.Offset), true);
  // 0x04: u32
  if (data?.NumberOfMatches !== undefined) view.setUint32(4, Number(data.NumberOfMatches), true);
  // 0x08: u32
  if (data?.BufferSizeRequired !== undefined) view.setUint32(8, Number(data.BufferSizeRequired), true);
  // 0x0c: pad4
  return buf;
}

export class LOOKUP_STREAM_FROM_CLUSTER_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Offset(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NumberOfMatches(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get BufferSizeRequired(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set Offset(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NumberOfMatches(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set BufferSizeRequired(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Ioctl.LOOKUP_STREAM_FROM_CLUSTER_ENTRY (size: 32)
 */
export interface LOOKUP_STREAM_FROM_CLUSTER_ENTRY {
  /** u32 */
  OffsetToNext: number;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  Reserved: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  Cluster: Uint8Array | Deno.PointerValue | null;
  /** array */
  FileName: Deno.PointerValue | null;
}

export const sizeofLOOKUP_STREAM_FROM_CLUSTER_ENTRY = 32;

export function allocLOOKUP_STREAM_FROM_CLUSTER_ENTRY(data?: Partial<LOOKUP_STREAM_FROM_CLUSTER_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofLOOKUP_STREAM_FROM_CLUSTER_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.OffsetToNext !== undefined) view.setUint32(0, Number(data.OffsetToNext), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  // 0x10: pointer
  if (data?.Cluster !== undefined) view.setBigUint64(16, data.Cluster === null ? 0n : util.toBigInt(util.toPointer(data.Cluster)), true);
  // 0x18: pointer
  if (data?.FileName !== undefined) view.setBigUint64(24, data.FileName === null ? 0n : util.toBigInt(util.toPointer(data.FileName)), true);
  return buf;
}

export class LOOKUP_STREAM_FROM_CLUSTER_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get OffsetToNext(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Cluster(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get FileName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set OffsetToNext(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Cluster(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set FileName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FILE_TYPE_NOTIFICATION_INPUT (size: 16)
 */
export interface FILE_TYPE_NOTIFICATION_INPUT {
  /** u32 */
  Flags: number;
  /** u32 */
  NumFileTypeIDs: number;
  /** array */
  FileTypeID: Deno.PointerValue | null;
}

export const sizeofFILE_TYPE_NOTIFICATION_INPUT = 16;

export function allocFILE_TYPE_NOTIFICATION_INPUT(data?: Partial<FILE_TYPE_NOTIFICATION_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_TYPE_NOTIFICATION_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.NumFileTypeIDs !== undefined) view.setUint32(4, Number(data.NumFileTypeIDs), true);
  // 0x08: pointer
  if (data?.FileTypeID !== undefined) view.setBigUint64(8, data.FileTypeID === null ? 0n : util.toBigInt(util.toPointer(data.FileTypeID)), true);
  return buf;
}

export class FILE_TYPE_NOTIFICATION_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NumFileTypeIDs(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get FileTypeID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NumFileTypeIDs(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set FileTypeID(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.CSV_MGMT_LOCK (size: 8)
 */
export interface CSV_MGMT_LOCK {
  /** u32 */
  Flags: number;
}

export const sizeofCSV_MGMT_LOCK = 8;

export function allocCSV_MGMT_LOCK(data?: Partial<CSV_MGMT_LOCK>): Uint8Array {
  const buf = new Uint8Array(sizeofCSV_MGMT_LOCK);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  return buf;
}

export class CSV_MGMT_LOCKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Ioctl.CSV_NAMESPACE_INFO (size: 24)
 */
export interface CSV_NAMESPACE_INFO {
  /** u32 */
  Version: number;
  /** u32 */
  DeviceNumber: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  StartingOffset: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SectorSize: number;
}

export const sizeofCSV_NAMESPACE_INFO = 24;

export function allocCSV_NAMESPACE_INFO(data?: Partial<CSV_NAMESPACE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCSV_NAMESPACE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.DeviceNumber !== undefined) view.setUint32(4, Number(data.DeviceNumber), true);
  // 0x08: pointer
  if (data?.StartingOffset !== undefined) view.setBigUint64(8, data.StartingOffset === null ? 0n : util.toBigInt(util.toPointer(data.StartingOffset)), true);
  // 0x10: u32
  if (data?.SectorSize !== undefined) view.setUint32(16, Number(data.SectorSize), true);
  // 0x14: pad4
  return buf;
}

export class CSV_NAMESPACE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get DeviceNumber(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get StartingOffset(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get SectorSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set DeviceNumber(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set StartingOffset(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set SectorSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.System.Ioctl.CSV_CONTROL_PARAM (size: 16)
 */
export interface CSV_CONTROL_PARAM {
  /** Windows.Win32.System.Ioctl.CSV_CONTROL_OP */
  Operation: CSV_CONTROL_OP;
  /** i64 */
  Unused: number | bigint;
}

export const sizeofCSV_CONTROL_PARAM = 16;

export function allocCSV_CONTROL_PARAM(data?: Partial<CSV_CONTROL_PARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofCSV_CONTROL_PARAM);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Operation !== undefined) view.setInt32(0, Number(data.Operation), true);
  // 0x04: pad4
  // 0x08: i64
  if (data?.Unused !== undefined) view.setBigInt64(8, util.toBigInt(data.Unused), true);
  return buf;
}

export class CSV_CONTROL_PARAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Operation(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: i64
  get Unused(): number | bigint {
    return this.view.getBigInt64(8, true);
  }

  // 0x00: i32
  set Operation(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: i64
  set Unused(value: number | bigint) {
    this.view.setBigInt64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.CSV_QUERY_REDIRECT_STATE (size: 16)
 */
export interface CSV_QUERY_REDIRECT_STATE {
  /** u32 */
  MdsNodeId: number;
  /** u32 */
  DsNodeId: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  FileRedirected: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCSV_QUERY_REDIRECT_STATE = 16;

export function allocCSV_QUERY_REDIRECT_STATE(data?: Partial<CSV_QUERY_REDIRECT_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofCSV_QUERY_REDIRECT_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MdsNodeId !== undefined) view.setUint32(0, Number(data.MdsNodeId), true);
  // 0x04: u32
  if (data?.DsNodeId !== undefined) view.setUint32(4, Number(data.DsNodeId), true);
  // 0x08: pointer
  if (data?.FileRedirected !== undefined) view.setBigUint64(8, data.FileRedirected === null ? 0n : util.toBigInt(util.toPointer(data.FileRedirected)), true);
  return buf;
}

export class CSV_QUERY_REDIRECT_STATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MdsNodeId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get DsNodeId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get FileRedirected(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set MdsNodeId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set DsNodeId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set FileRedirected(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.CSV_QUERY_FILE_REVISION (size: 16)
 */
export interface CSV_QUERY_FILE_REVISION {
  /** i64 */
  FileId: number | bigint;
  /** array */
  FileRevision: Deno.PointerValue | null;
}

export const sizeofCSV_QUERY_FILE_REVISION = 16;

export function allocCSV_QUERY_FILE_REVISION(data?: Partial<CSV_QUERY_FILE_REVISION>): Uint8Array {
  const buf = new Uint8Array(sizeofCSV_QUERY_FILE_REVISION);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.FileId !== undefined) view.setBigInt64(0, util.toBigInt(data.FileId), true);
  // 0x08: pointer
  if (data?.FileRevision !== undefined) view.setBigUint64(8, data.FileRevision === null ? 0n : util.toBigInt(util.toPointer(data.FileRevision)), true);
  return buf;
}

export class CSV_QUERY_FILE_REVISIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get FileId(): number | bigint {
    return this.view.getBigInt64(0, true);
  }

  // 0x08: pointer
  get FileRevision(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i64
  set FileId(value: number | bigint) {
    this.view.setBigInt64(0, util.toBigInt(value), true);
  }

  // 0x08: pointer
  set FileRevision(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.CSV_QUERY_FILE_REVISION_FILE_ID_128 (size: 16)
 */
export interface CSV_QUERY_FILE_REVISION_FILE_ID_128 {
  /** Windows.Win32.Storage.FileSystem.FILE_ID_128 */
  FileId: Uint8Array | Deno.PointerValue | null;
  /** array */
  FileRevision: Deno.PointerValue | null;
}

export const sizeofCSV_QUERY_FILE_REVISION_FILE_ID_128 = 16;

export function allocCSV_QUERY_FILE_REVISION_FILE_ID_128(data?: Partial<CSV_QUERY_FILE_REVISION_FILE_ID_128>): Uint8Array {
  const buf = new Uint8Array(sizeofCSV_QUERY_FILE_REVISION_FILE_ID_128);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.FileId !== undefined) view.setBigUint64(0, data.FileId === null ? 0n : util.toBigInt(util.toPointer(data.FileId)), true);
  // 0x08: pointer
  if (data?.FileRevision !== undefined) view.setBigUint64(8, data.FileRevision === null ? 0n : util.toBigInt(util.toPointer(data.FileRevision)), true);
  return buf;
}

export class CSV_QUERY_FILE_REVISION_FILE_ID_128View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get FileId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get FileRevision(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set FileId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set FileRevision(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.CSV_QUERY_MDS_PATH (size: 24)
 */
export interface CSV_QUERY_MDS_PATH {
  /** u32 */
  MdsNodeId: number;
  /** u32 */
  DsNodeId: number;
  /** u32 */
  PathLength: number;
  /** array */
  Path: Deno.PointerValue | null;
}

export const sizeofCSV_QUERY_MDS_PATH = 24;

export function allocCSV_QUERY_MDS_PATH(data?: Partial<CSV_QUERY_MDS_PATH>): Uint8Array {
  const buf = new Uint8Array(sizeofCSV_QUERY_MDS_PATH);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MdsNodeId !== undefined) view.setUint32(0, Number(data.MdsNodeId), true);
  // 0x04: u32
  if (data?.DsNodeId !== undefined) view.setUint32(4, Number(data.DsNodeId), true);
  // 0x08: u32
  if (data?.PathLength !== undefined) view.setUint32(8, Number(data.PathLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Path !== undefined) view.setBigUint64(16, data.Path === null ? 0n : util.toBigInt(util.toPointer(data.Path)), true);
  return buf;
}

export class CSV_QUERY_MDS_PATHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MdsNodeId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get DsNodeId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get PathLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Path(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set MdsNodeId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set DsNodeId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set PathLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Path(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.CSV_QUERY_VOLUME_REDIRECT_STATE (size: 32)
 */
export interface CSV_QUERY_VOLUME_REDIRECT_STATE {
  /** u32 */
  MdsNodeId: number;
  /** u32 */
  DsNodeId: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  IsDiskConnected: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  ClusterEnableDirectIo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Ioctl.CSVFS_DISK_CONNECTIVITY */
  DiskConnectivity: CSVFS_DISK_CONNECTIVITY;
}

export const sizeofCSV_QUERY_VOLUME_REDIRECT_STATE = 32;

export function allocCSV_QUERY_VOLUME_REDIRECT_STATE(data?: Partial<CSV_QUERY_VOLUME_REDIRECT_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofCSV_QUERY_VOLUME_REDIRECT_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MdsNodeId !== undefined) view.setUint32(0, Number(data.MdsNodeId), true);
  // 0x04: u32
  if (data?.DsNodeId !== undefined) view.setUint32(4, Number(data.DsNodeId), true);
  // 0x08: pointer
  if (data?.IsDiskConnected !== undefined) view.setBigUint64(8, data.IsDiskConnected === null ? 0n : util.toBigInt(util.toPointer(data.IsDiskConnected)), true);
  // 0x10: pointer
  if (data?.ClusterEnableDirectIo !== undefined) view.setBigUint64(16, data.ClusterEnableDirectIo === null ? 0n : util.toBigInt(util.toPointer(data.ClusterEnableDirectIo)), true);
  // 0x18: i32
  if (data?.DiskConnectivity !== undefined) view.setInt32(24, Number(data.DiskConnectivity), true);
  // 0x1c: pad4
  return buf;
}

export class CSV_QUERY_VOLUME_REDIRECT_STATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MdsNodeId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get DsNodeId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get IsDiskConnected(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get ClusterEnableDirectIo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: i32
  get DiskConnectivity(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set MdsNodeId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set DsNodeId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set IsDiskConnected(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set ClusterEnableDirectIo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: i32
  set DiskConnectivity(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.System.Ioctl.CSV_QUERY_MDS_PATH_V2 (size: 56)
 */
export interface CSV_QUERY_MDS_PATH_V2 {
  /** i64 */
  Version: number | bigint;
  /** u32 */
  RequiredSize: number;
  /** u32 */
  MdsNodeId: number;
  /** u32 */
  DsNodeId: number;
  /** u32 */
  Flags: number;
  /** Windows.Win32.System.Ioctl.CSVFS_DISK_CONNECTIVITY */
  DiskConnectivity: CSVFS_DISK_CONNECTIVITY;
  /** System.Guid */
  VolumeId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  IpAddressOffset: number;
  /** u32 */
  IpAddressLength: number;
  /** u32 */
  PathOffset: number;
  /** u32 */
  PathLength: number;
}

export const sizeofCSV_QUERY_MDS_PATH_V2 = 56;

export function allocCSV_QUERY_MDS_PATH_V2(data?: Partial<CSV_QUERY_MDS_PATH_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofCSV_QUERY_MDS_PATH_V2);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.Version !== undefined) view.setBigInt64(0, util.toBigInt(data.Version), true);
  // 0x08: u32
  if (data?.RequiredSize !== undefined) view.setUint32(8, Number(data.RequiredSize), true);
  // 0x0c: u32
  if (data?.MdsNodeId !== undefined) view.setUint32(12, Number(data.MdsNodeId), true);
  // 0x10: u32
  if (data?.DsNodeId !== undefined) view.setUint32(16, Number(data.DsNodeId), true);
  // 0x14: u32
  if (data?.Flags !== undefined) view.setUint32(20, Number(data.Flags), true);
  // 0x18: i32
  if (data?.DiskConnectivity !== undefined) view.setInt32(24, Number(data.DiskConnectivity), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.VolumeId !== undefined) view.setBigUint64(32, data.VolumeId === null ? 0n : util.toBigInt(util.toPointer(data.VolumeId)), true);
  // 0x28: u32
  if (data?.IpAddressOffset !== undefined) view.setUint32(40, Number(data.IpAddressOffset), true);
  // 0x2c: u32
  if (data?.IpAddressLength !== undefined) view.setUint32(44, Number(data.IpAddressLength), true);
  // 0x30: u32
  if (data?.PathOffset !== undefined) view.setUint32(48, Number(data.PathOffset), true);
  // 0x34: u32
  if (data?.PathLength !== undefined) view.setUint32(52, Number(data.PathLength), true);
  return buf;
}

export class CSV_QUERY_MDS_PATH_V2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get Version(): number | bigint {
    return this.view.getBigInt64(0, true);
  }

  // 0x08: u32
  get RequiredSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get MdsNodeId(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get DsNodeId(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Flags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: i32
  get DiskConnectivity(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get VolumeId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get IpAddressOffset(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get IpAddressLength(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get PathOffset(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get PathLength(): number {
    return this.view.getUint32(52, true);
  }

  // 0x00: i64
  set Version(value: number | bigint) {
    this.view.setBigInt64(0, util.toBigInt(value), true);
  }

  // 0x08: u32
  set RequiredSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set MdsNodeId(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set DsNodeId(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Flags(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: i32
  set DiskConnectivity(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set VolumeId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set IpAddressOffset(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set IpAddressLength(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set PathOffset(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set PathLength(value: number) {
    this.view.setUint32(52, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.CSV_SET_VOLUME_ID (size: 8)
 */
export interface CSV_SET_VOLUME_ID {
  /** System.Guid */
  VolumeId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCSV_SET_VOLUME_ID = 8;

export function allocCSV_SET_VOLUME_ID(data?: Partial<CSV_SET_VOLUME_ID>): Uint8Array {
  const buf = new Uint8Array(sizeofCSV_SET_VOLUME_ID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.VolumeId !== undefined) view.setBigUint64(0, data.VolumeId === null ? 0n : util.toBigInt(util.toPointer(data.VolumeId)), true);
  return buf;
}

export class CSV_SET_VOLUME_IDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get VolumeId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set VolumeId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.CSV_QUERY_VOLUME_ID (size: 8)
 */
export interface CSV_QUERY_VOLUME_ID {
  /** System.Guid */
  VolumeId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCSV_QUERY_VOLUME_ID = 8;

export function allocCSV_QUERY_VOLUME_ID(data?: Partial<CSV_QUERY_VOLUME_ID>): Uint8Array {
  const buf = new Uint8Array(sizeofCSV_QUERY_VOLUME_ID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.VolumeId !== undefined) view.setBigUint64(0, data.VolumeId === null ? 0n : util.toBigInt(util.toPointer(data.VolumeId)), true);
  return buf;
}

export class CSV_QUERY_VOLUME_IDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get VolumeId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set VolumeId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT (size: 24)
 */
export interface CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT {
  /** u64 */
  VetoedFromAltitudeIntegral: number | bigint;
  /** u64 */
  VetoedFromAltitudeDecimal: number | bigint;
  /** array */
  Reason: Deno.PointerValue | null;
}

export const sizeofCSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT = 24;

export function allocCSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT(data?: Partial<CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofCSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.VetoedFromAltitudeIntegral !== undefined) view.setBigUint64(0, util.toBigInt(data.VetoedFromAltitudeIntegral), true);
  // 0x08: u64
  if (data?.VetoedFromAltitudeDecimal !== undefined) view.setBigUint64(8, util.toBigInt(data.VetoedFromAltitudeDecimal), true);
  // 0x10: pointer
  if (data?.Reason !== undefined) view.setBigUint64(16, data.Reason === null ? 0n : util.toBigInt(util.toPointer(data.Reason)), true);
  return buf;
}

export class CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get VetoedFromAltitudeIntegral(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get VetoedFromAltitudeDecimal(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: pointer
  get Reason(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u64
  set VetoedFromAltitudeIntegral(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set VetoedFromAltitudeDecimal(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: pointer
  set Reason(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.CSV_IS_OWNED_BY_CSVFS (size: 8)
 */
export interface CSV_IS_OWNED_BY_CSVFS {
  /** Windows.Win32.Foundation.BOOLEAN */
  OwnedByCSVFS: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCSV_IS_OWNED_BY_CSVFS = 8;

export function allocCSV_IS_OWNED_BY_CSVFS(data?: Partial<CSV_IS_OWNED_BY_CSVFS>): Uint8Array {
  const buf = new Uint8Array(sizeofCSV_IS_OWNED_BY_CSVFS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.OwnedByCSVFS !== undefined) view.setBigUint64(0, data.OwnedByCSVFS === null ? 0n : util.toBigInt(util.toPointer(data.OwnedByCSVFS)), true);
  return buf;
}

export class CSV_IS_OWNED_BY_CSVFSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get OwnedByCSVFS(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set OwnedByCSVFS(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FILE_LEVEL_TRIM_RANGE (size: 16)
 */
export interface FILE_LEVEL_TRIM_RANGE {
  /** u64 */
  Offset: number | bigint;
  /** u64 */
  Length: number | bigint;
}

export const sizeofFILE_LEVEL_TRIM_RANGE = 16;

export function allocFILE_LEVEL_TRIM_RANGE(data?: Partial<FILE_LEVEL_TRIM_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_LEVEL_TRIM_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Offset !== undefined) view.setBigUint64(0, util.toBigInt(data.Offset), true);
  // 0x08: u64
  if (data?.Length !== undefined) view.setBigUint64(8, util.toBigInt(data.Length), true);
  return buf;
}

export class FILE_LEVEL_TRIM_RANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Offset(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get Length(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u64
  set Offset(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set Length(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FILE_LEVEL_TRIM (size: 16)
 */
export interface FILE_LEVEL_TRIM {
  /** u32 */
  Key: number;
  /** u32 */
  NumRanges: number;
  /** array */
  Ranges: Deno.PointerValue | null;
}

export const sizeofFILE_LEVEL_TRIM = 16;

export function allocFILE_LEVEL_TRIM(data?: Partial<FILE_LEVEL_TRIM>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_LEVEL_TRIM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Key !== undefined) view.setUint32(0, Number(data.Key), true);
  // 0x04: u32
  if (data?.NumRanges !== undefined) view.setUint32(4, Number(data.NumRanges), true);
  // 0x08: pointer
  if (data?.Ranges !== undefined) view.setBigUint64(8, data.Ranges === null ? 0n : util.toBigInt(util.toPointer(data.Ranges)), true);
  return buf;
}

export class FILE_LEVEL_TRIMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Key(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NumRanges(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Ranges(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Key(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NumRanges(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Ranges(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FILE_LEVEL_TRIM_OUTPUT (size: 8)
 */
export interface FILE_LEVEL_TRIM_OUTPUT {
  /** u32 */
  NumRangesProcessed: number;
}

export const sizeofFILE_LEVEL_TRIM_OUTPUT = 8;

export function allocFILE_LEVEL_TRIM_OUTPUT(data?: Partial<FILE_LEVEL_TRIM_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_LEVEL_TRIM_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumRangesProcessed !== undefined) view.setUint32(0, Number(data.NumRangesProcessed), true);
  // 0x04: pad4
  return buf;
}

export class FILE_LEVEL_TRIM_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumRangesProcessed(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set NumRangesProcessed(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Ioctl.CLUSTER_RANGE (size: 16)
 */
export interface CLUSTER_RANGE {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  StartingCluster: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ClusterCount: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCLUSTER_RANGE = 16;

export function allocCLUSTER_RANGE(data?: Partial<CLUSTER_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSTER_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.StartingCluster !== undefined) view.setBigUint64(0, data.StartingCluster === null ? 0n : util.toBigInt(util.toPointer(data.StartingCluster)), true);
  // 0x08: pointer
  if (data?.ClusterCount !== undefined) view.setBigUint64(8, data.ClusterCount === null ? 0n : util.toBigInt(util.toPointer(data.ClusterCount)), true);
  return buf;
}

export class CLUSTER_RANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get StartingCluster(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get ClusterCount(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set StartingCluster(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set ClusterCount(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FILE_REFERENCE_RANGE (size: 16)
 */
export interface FILE_REFERENCE_RANGE {
  /** u64 */
  StartingFileReferenceNumber: number | bigint;
  /** u64 */
  EndingFileReferenceNumber: number | bigint;
}

export const sizeofFILE_REFERENCE_RANGE = 16;

export function allocFILE_REFERENCE_RANGE(data?: Partial<FILE_REFERENCE_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_REFERENCE_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.StartingFileReferenceNumber !== undefined) view.setBigUint64(0, util.toBigInt(data.StartingFileReferenceNumber), true);
  // 0x08: u64
  if (data?.EndingFileReferenceNumber !== undefined) view.setBigUint64(8, util.toBigInt(data.EndingFileReferenceNumber), true);
  return buf;
}

export class FILE_REFERENCE_RANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get StartingFileReferenceNumber(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get EndingFileReferenceNumber(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u64
  set StartingFileReferenceNumber(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set EndingFileReferenceNumber(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * _Filter_e__Union (size: 24)
 */
export interface _Filter_e__Union {
  /** array */
  ClusterRanges: Deno.PointerValue | null;
  /** array */
  FileReferenceRanges: Deno.PointerValue | null;
  /** array */
  StorageReserveIds: Deno.PointerValue | null;
}

export const sizeof_Filter_e__Union = 24;

export function alloc_Filter_e__Union(data?: Partial<_Filter_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Filter_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ClusterRanges !== undefined) view.setBigUint64(0, data.ClusterRanges === null ? 0n : util.toBigInt(util.toPointer(data.ClusterRanges)), true);
  // 0x08: pointer
  if (data?.FileReferenceRanges !== undefined) view.setBigUint64(8, data.FileReferenceRanges === null ? 0n : util.toBigInt(util.toPointer(data.FileReferenceRanges)), true);
  // 0x10: pointer
  if (data?.StorageReserveIds !== undefined) view.setBigUint64(16, data.StorageReserveIds === null ? 0n : util.toBigInt(util.toPointer(data.StorageReserveIds)), true);
  return buf;
}

export class _Filter_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ClusterRanges(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get FileReferenceRanges(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get StorageReserveIds(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ClusterRanges(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set FileReferenceRanges(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set StorageReserveIds(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.QUERY_FILE_LAYOUT_INPUT (size: 32)
 */
export interface QUERY_FILE_LAYOUT_INPUT {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
  /** Windows.Win32.System.Ioctl.QUERY_FILE_LAYOUT_FILTER_TYPE */
  FilterType: QUERY_FILE_LAYOUT_FILTER_TYPE;
  /** u32 */
  Reserved: number;
  /** _Filter_e__Union */
  Filter: Uint8Array | Deno.PointerValue | null;
}

export const sizeofQUERY_FILE_LAYOUT_INPUT = 32;

export function allocQUERY_FILE_LAYOUT_INPUT(data?: Partial<QUERY_FILE_LAYOUT_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofQUERY_FILE_LAYOUT_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: i32
  if (data?.FilterType !== undefined) view.setInt32(12, Number(data.FilterType), true);
  // 0x10: u32
  if (data?.Reserved !== undefined) view.setUint32(16, Number(data.Reserved), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Filter !== undefined) view.setBigUint64(24, data.Filter === null ? 0n : util.toBigInt(util.toPointer(data.Filter)), true);
  return buf;
}

export class QUERY_FILE_LAYOUT_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get FilterType(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get Reserved(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Filter(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set FilterType(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set Reserved(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Filter(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.QUERY_FILE_LAYOUT_OUTPUT (size: 16)
 */
export interface QUERY_FILE_LAYOUT_OUTPUT {
  /** u32 */
  FileEntryCount: number;
  /** u32 */
  FirstFileOffset: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Reserved: number;
}

export const sizeofQUERY_FILE_LAYOUT_OUTPUT = 16;

export function allocQUERY_FILE_LAYOUT_OUTPUT(data?: Partial<QUERY_FILE_LAYOUT_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofQUERY_FILE_LAYOUT_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FileEntryCount !== undefined) view.setUint32(0, Number(data.FileEntryCount), true);
  // 0x04: u32
  if (data?.FirstFileOffset !== undefined) view.setUint32(4, Number(data.FirstFileOffset), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

export class QUERY_FILE_LAYOUT_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get FileEntryCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get FirstFileOffset(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Reserved(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set FileEntryCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set FirstFileOffset(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Reserved(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FILE_LAYOUT_ENTRY (size: 40)
 */
export interface FILE_LAYOUT_ENTRY {
  /** u32 */
  Version: number;
  /** u32 */
  NextFileOffset: number;
  /** u32 */
  Flags: number;
  /** u32 */
  FileAttributes: number;
  /** u64 */
  FileReferenceNumber: number | bigint;
  /** u32 */
  FirstNameOffset: number;
  /** u32 */
  FirstStreamOffset: number;
  /** u32 */
  ExtraInfoOffset: number;
  /** u32 */
  ExtraInfoLength: number;
}

export const sizeofFILE_LAYOUT_ENTRY = 40;

export function allocFILE_LAYOUT_ENTRY(data?: Partial<FILE_LAYOUT_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_LAYOUT_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.NextFileOffset !== undefined) view.setUint32(4, Number(data.NextFileOffset), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.FileAttributes !== undefined) view.setUint32(12, Number(data.FileAttributes), true);
  // 0x10: u64
  if (data?.FileReferenceNumber !== undefined) view.setBigUint64(16, util.toBigInt(data.FileReferenceNumber), true);
  // 0x18: u32
  if (data?.FirstNameOffset !== undefined) view.setUint32(24, Number(data.FirstNameOffset), true);
  // 0x1c: u32
  if (data?.FirstStreamOffset !== undefined) view.setUint32(28, Number(data.FirstStreamOffset), true);
  // 0x20: u32
  if (data?.ExtraInfoOffset !== undefined) view.setUint32(32, Number(data.ExtraInfoOffset), true);
  // 0x24: u32
  if (data?.ExtraInfoLength !== undefined) view.setUint32(36, Number(data.ExtraInfoLength), true);
  return buf;
}

export class FILE_LAYOUT_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NextFileOffset(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get FileAttributes(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u64
  get FileReferenceNumber(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u32
  get FirstNameOffset(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get FirstStreamOffset(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get ExtraInfoOffset(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get ExtraInfoLength(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NextFileOffset(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set FileAttributes(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u64
  set FileReferenceNumber(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u32
  set FirstNameOffset(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set FirstStreamOffset(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set ExtraInfoOffset(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set ExtraInfoLength(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FILE_LAYOUT_NAME_ENTRY (size: 32)
 */
export interface FILE_LAYOUT_NAME_ENTRY {
  /** u32 */
  NextNameOffset: number;
  /** u32 */
  Flags: number;
  /** u64 */
  ParentFileReferenceNumber: number | bigint;
  /** u32 */
  FileNameLength: number;
  /** u32 */
  Reserved: number;
  /** array */
  FileName: Deno.PointerValue | null;
}

export const sizeofFILE_LAYOUT_NAME_ENTRY = 32;

export function allocFILE_LAYOUT_NAME_ENTRY(data?: Partial<FILE_LAYOUT_NAME_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_LAYOUT_NAME_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NextNameOffset !== undefined) view.setUint32(0, Number(data.NextNameOffset), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u64
  if (data?.ParentFileReferenceNumber !== undefined) view.setBigUint64(8, util.toBigInt(data.ParentFileReferenceNumber), true);
  // 0x10: u32
  if (data?.FileNameLength !== undefined) view.setUint32(16, Number(data.FileNameLength), true);
  // 0x14: u32
  if (data?.Reserved !== undefined) view.setUint32(20, Number(data.Reserved), true);
  // 0x18: pointer
  if (data?.FileName !== undefined) view.setBigUint64(24, data.FileName === null ? 0n : util.toBigInt(util.toPointer(data.FileName)), true);
  return buf;
}

export class FILE_LAYOUT_NAME_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NextNameOffset(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get ParentFileReferenceNumber(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u32
  get FileNameLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Reserved(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get FileName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set NextNameOffset(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set ParentFileReferenceNumber(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u32
  set FileNameLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Reserved(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set FileName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * _BasicInformation_e__Struct (size: 40)
 */
export interface _BasicInformation_e__Struct {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  CreationTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LastAccessTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LastWriteTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ChangeTime: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  FileAttributes: number;
}

export const sizeof_BasicInformation_e__Struct = 40;

export function alloc_BasicInformation_e__Struct(data?: Partial<_BasicInformation_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_BasicInformation_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CreationTime !== undefined) view.setBigUint64(0, data.CreationTime === null ? 0n : util.toBigInt(util.toPointer(data.CreationTime)), true);
  // 0x08: pointer
  if (data?.LastAccessTime !== undefined) view.setBigUint64(8, data.LastAccessTime === null ? 0n : util.toBigInt(util.toPointer(data.LastAccessTime)), true);
  // 0x10: pointer
  if (data?.LastWriteTime !== undefined) view.setBigUint64(16, data.LastWriteTime === null ? 0n : util.toBigInt(util.toPointer(data.LastWriteTime)), true);
  // 0x18: pointer
  if (data?.ChangeTime !== undefined) view.setBigUint64(24, data.ChangeTime === null ? 0n : util.toBigInt(util.toPointer(data.ChangeTime)), true);
  // 0x20: u32
  if (data?.FileAttributes !== undefined) view.setUint32(32, Number(data.FileAttributes), true);
  // 0x24: pad4
  return buf;
}

export class _BasicInformation_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CreationTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get LastAccessTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get LastWriteTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get ChangeTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get FileAttributes(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: pointer
  set CreationTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set LastAccessTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set LastWriteTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set ChangeTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set FileAttributes(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.System.Ioctl.FILE_LAYOUT_INFO_ENTRY (size: 32)
 */
export interface FILE_LAYOUT_INFO_ENTRY {
  /** _BasicInformation_e__Struct */
  BasicInformation: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  OwnerId: number;
  /** u32 */
  SecurityId: number;
  /** i64 */
  Usn: number | bigint;
  /** Windows.Win32.System.Ioctl.STORAGE_RESERVE_ID */
  StorageReserveId: STORAGE_RESERVE_ID;
}

export const sizeofFILE_LAYOUT_INFO_ENTRY = 32;

export function allocFILE_LAYOUT_INFO_ENTRY(data?: Partial<FILE_LAYOUT_INFO_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_LAYOUT_INFO_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.BasicInformation !== undefined) view.setBigUint64(0, data.BasicInformation === null ? 0n : util.toBigInt(util.toPointer(data.BasicInformation)), true);
  // 0x08: u32
  if (data?.OwnerId !== undefined) view.setUint32(8, Number(data.OwnerId), true);
  // 0x0c: u32
  if (data?.SecurityId !== undefined) view.setUint32(12, Number(data.SecurityId), true);
  // 0x10: i64
  if (data?.Usn !== undefined) view.setBigInt64(16, util.toBigInt(data.Usn), true);
  // 0x18: i32
  if (data?.StorageReserveId !== undefined) view.setInt32(24, Number(data.StorageReserveId), true);
  // 0x1c: pad4
  return buf;
}

export class FILE_LAYOUT_INFO_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get BasicInformation(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get OwnerId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get SecurityId(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: i64
  get Usn(): number | bigint {
    return this.view.getBigInt64(16, true);
  }

  // 0x18: i32
  get StorageReserveId(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set BasicInformation(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set OwnerId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set SecurityId(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: i64
  set Usn(value: number | bigint) {
    this.view.setBigInt64(16, util.toBigInt(value), true);
  }

  // 0x18: i32
  set StorageReserveId(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.System.Ioctl.STREAM_LAYOUT_ENTRY (size: 56)
 */
export interface STREAM_LAYOUT_ENTRY {
  /** u32 */
  Version: number;
  /** u32 */
  NextStreamOffset: number;
  /** u32 */
  Flags: number;
  /** u32 */
  ExtentInformationOffset: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  AllocationSize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  EndOfFile: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  StreamInformationOffset: number;
  /** u32 */
  AttributeTypeCode: number;
  /** u32 */
  AttributeFlags: number;
  /** u32 */
  StreamIdentifierLength: number;
  /** array */
  StreamIdentifier: Deno.PointerValue | null;
}

export const sizeofSTREAM_LAYOUT_ENTRY = 56;

export function allocSTREAM_LAYOUT_ENTRY(data?: Partial<STREAM_LAYOUT_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofSTREAM_LAYOUT_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.NextStreamOffset !== undefined) view.setUint32(4, Number(data.NextStreamOffset), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.ExtentInformationOffset !== undefined) view.setUint32(12, Number(data.ExtentInformationOffset), true);
  // 0x10: pointer
  if (data?.AllocationSize !== undefined) view.setBigUint64(16, data.AllocationSize === null ? 0n : util.toBigInt(util.toPointer(data.AllocationSize)), true);
  // 0x18: pointer
  if (data?.EndOfFile !== undefined) view.setBigUint64(24, data.EndOfFile === null ? 0n : util.toBigInt(util.toPointer(data.EndOfFile)), true);
  // 0x20: u32
  if (data?.StreamInformationOffset !== undefined) view.setUint32(32, Number(data.StreamInformationOffset), true);
  // 0x24: u32
  if (data?.AttributeTypeCode !== undefined) view.setUint32(36, Number(data.AttributeTypeCode), true);
  // 0x28: u32
  if (data?.AttributeFlags !== undefined) view.setUint32(40, Number(data.AttributeFlags), true);
  // 0x2c: u32
  if (data?.StreamIdentifierLength !== undefined) view.setUint32(44, Number(data.StreamIdentifierLength), true);
  // 0x30: pointer
  if (data?.StreamIdentifier !== undefined) view.setBigUint64(48, data.StreamIdentifier === null ? 0n : util.toBigInt(util.toPointer(data.StreamIdentifier)), true);
  return buf;
}

export class STREAM_LAYOUT_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NextStreamOffset(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ExtentInformationOffset(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get AllocationSize(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get EndOfFile(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get StreamInformationOffset(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get AttributeTypeCode(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get AttributeFlags(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get StreamIdentifierLength(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: pointer
  get StreamIdentifier(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NextStreamOffset(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ExtentInformationOffset(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set AllocationSize(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set EndOfFile(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set StreamInformationOffset(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set AttributeTypeCode(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set AttributeFlags(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set StreamIdentifierLength(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: pointer
  set StreamIdentifier(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * _ExtentInformation_e__Union (size: 8)
 */
export interface _ExtentInformation_e__Union {
  /** Windows.Win32.System.Ioctl.RETRIEVAL_POINTERS_BUFFER */
  RetrievalPointers: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_ExtentInformation_e__Union = 8;

export function alloc_ExtentInformation_e__Union(data?: Partial<_ExtentInformation_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_ExtentInformation_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.RetrievalPointers !== undefined) view.setBigUint64(0, data.RetrievalPointers === null ? 0n : util.toBigInt(util.toPointer(data.RetrievalPointers)), true);
  return buf;
}

export class _ExtentInformation_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get RetrievalPointers(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set RetrievalPointers(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STREAM_EXTENT_ENTRY (size: 16)
 */
export interface STREAM_EXTENT_ENTRY {
  /** u32 */
  Flags: number;
  /** _ExtentInformation_e__Union */
  ExtentInformation: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSTREAM_EXTENT_ENTRY = 16;

export function allocSTREAM_EXTENT_ENTRY(data?: Partial<STREAM_EXTENT_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofSTREAM_EXTENT_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ExtentInformation !== undefined) view.setBigUint64(8, data.ExtentInformation === null ? 0n : util.toBigInt(util.toPointer(data.ExtentInformation)), true);
  return buf;
}

export class STREAM_EXTENT_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ExtentInformation(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ExtentInformation(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FSCTL_GET_INTEGRITY_INFORMATION_BUFFER (size: 16)
 */
export interface FSCTL_GET_INTEGRITY_INFORMATION_BUFFER {
  /** u16 */
  ChecksumAlgorithm: number;
  /** u16 */
  Reserved: number;
  /** u32 */
  Flags: number;
  /** u32 */
  ChecksumChunkSizeInBytes: number;
  /** u32 */
  ClusterSizeInBytes: number;
}

export const sizeofFSCTL_GET_INTEGRITY_INFORMATION_BUFFER = 16;

export function allocFSCTL_GET_INTEGRITY_INFORMATION_BUFFER(data?: Partial<FSCTL_GET_INTEGRITY_INFORMATION_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofFSCTL_GET_INTEGRITY_INFORMATION_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ChecksumAlgorithm !== undefined) view.setUint16(0, Number(data.ChecksumAlgorithm), true);
  // 0x02: u16
  if (data?.Reserved !== undefined) view.setUint16(2, Number(data.Reserved), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.ChecksumChunkSizeInBytes !== undefined) view.setUint32(8, Number(data.ChecksumChunkSizeInBytes), true);
  // 0x0c: u32
  if (data?.ClusterSizeInBytes !== undefined) view.setUint32(12, Number(data.ClusterSizeInBytes), true);
  return buf;
}

export class FSCTL_GET_INTEGRITY_INFORMATION_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get ChecksumAlgorithm(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Reserved(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ChecksumChunkSizeInBytes(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ClusterSizeInBytes(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u16
  set ChecksumAlgorithm(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Reserved(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ChecksumChunkSizeInBytes(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ClusterSizeInBytes(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FSCTL_SET_INTEGRITY_INFORMATION_BUFFER (size: 8)
 */
export interface FSCTL_SET_INTEGRITY_INFORMATION_BUFFER {
  /** u16 */
  ChecksumAlgorithm: number;
  /** u16 */
  Reserved: number;
  /** u32 */
  Flags: number;
}

export const sizeofFSCTL_SET_INTEGRITY_INFORMATION_BUFFER = 8;

export function allocFSCTL_SET_INTEGRITY_INFORMATION_BUFFER(data?: Partial<FSCTL_SET_INTEGRITY_INFORMATION_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofFSCTL_SET_INTEGRITY_INFORMATION_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ChecksumAlgorithm !== undefined) view.setUint16(0, Number(data.ChecksumAlgorithm), true);
  // 0x02: u16
  if (data?.Reserved !== undefined) view.setUint16(2, Number(data.Reserved), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  return buf;
}

export class FSCTL_SET_INTEGRITY_INFORMATION_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get ChecksumAlgorithm(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Reserved(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u16
  set ChecksumAlgorithm(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Reserved(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX (size: 24)
 */
export interface FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX {
  /** u8 */
  EnableIntegrity: number;
  /** u8 */
  KeepIntegrityStateUnchanged: number;
  /** u16 */
  Reserved: number;
  /** u32 */
  Flags: number;
  /** u8 */
  Version: number;
  /** array */
  Reserved2: Deno.PointerValue | null;
}

export const sizeofFSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX = 24;

export function allocFSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX(data?: Partial<FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofFSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.EnableIntegrity !== undefined) view.setUint8(0, Number(data.EnableIntegrity));
  // 0x01: u8
  if (data?.KeepIntegrityStateUnchanged !== undefined) view.setUint8(1, Number(data.KeepIntegrityStateUnchanged));
  // 0x02: u16
  if (data?.Reserved !== undefined) view.setUint16(2, Number(data.Reserved), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u8
  if (data?.Version !== undefined) view.setUint8(8, Number(data.Version));
  // 0x09: pad7
  // 0x10: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(16, data.Reserved2 === null ? 0n : util.toBigInt(util.toPointer(data.Reserved2)), true);
  return buf;
}

export class FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get EnableIntegrity(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get KeepIntegrityStateUnchanged(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u16
  get Reserved(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u8
  get Version(): number {
    return this.view.getUint8(8);
  }

  // 0x09: pad7

  // 0x10: pointer
  get Reserved2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set EnableIntegrity(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set KeepIntegrityStateUnchanged(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u16
  set Reserved(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u8
  set Version(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: pad7

  // 0x10: pointer
  set Reserved2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FSCTL_OFFLOAD_READ_INPUT (size: 32)
 */
export interface FSCTL_OFFLOAD_READ_INPUT {
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
  /** u32 */
  TokenTimeToLive: number;
  /** u32 */
  Reserved: number;
  /** u64 */
  FileOffset: number | bigint;
  /** u64 */
  CopyLength: number | bigint;
}

export const sizeofFSCTL_OFFLOAD_READ_INPUT = 32;

export function allocFSCTL_OFFLOAD_READ_INPUT(data?: Partial<FSCTL_OFFLOAD_READ_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofFSCTL_OFFLOAD_READ_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.TokenTimeToLive !== undefined) view.setUint32(8, Number(data.TokenTimeToLive), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  // 0x10: u64
  if (data?.FileOffset !== undefined) view.setBigUint64(16, util.toBigInt(data.FileOffset), true);
  // 0x18: u64
  if (data?.CopyLength !== undefined) view.setBigUint64(24, util.toBigInt(data.CopyLength), true);
  return buf;
}

export class FSCTL_OFFLOAD_READ_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get TokenTimeToLive(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Reserved(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u64
  get FileOffset(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get CopyLength(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set TokenTimeToLive(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Reserved(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u64
  set FileOffset(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set CopyLength(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FSCTL_OFFLOAD_READ_OUTPUT (size: 24)
 */
export interface FSCTL_OFFLOAD_READ_OUTPUT {
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
  /** u64 */
  TransferLength: number | bigint;
  /** array */
  Token: Deno.PointerValue | null;
}

export const sizeofFSCTL_OFFLOAD_READ_OUTPUT = 24;

export function allocFSCTL_OFFLOAD_READ_OUTPUT(data?: Partial<FSCTL_OFFLOAD_READ_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofFSCTL_OFFLOAD_READ_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u64
  if (data?.TransferLength !== undefined) view.setBigUint64(8, util.toBigInt(data.TransferLength), true);
  // 0x10: pointer
  if (data?.Token !== undefined) view.setBigUint64(16, data.Token === null ? 0n : util.toBigInt(util.toPointer(data.Token)), true);
  return buf;
}

export class FSCTL_OFFLOAD_READ_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get TransferLength(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: pointer
  get Token(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set TransferLength(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: pointer
  set Token(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FSCTL_OFFLOAD_WRITE_INPUT (size: 40)
 */
export interface FSCTL_OFFLOAD_WRITE_INPUT {
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
  /** u64 */
  FileOffset: number | bigint;
  /** u64 */
  CopyLength: number | bigint;
  /** u64 */
  TransferOffset: number | bigint;
  /** array */
  Token: Deno.PointerValue | null;
}

export const sizeofFSCTL_OFFLOAD_WRITE_INPUT = 40;

export function allocFSCTL_OFFLOAD_WRITE_INPUT(data?: Partial<FSCTL_OFFLOAD_WRITE_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofFSCTL_OFFLOAD_WRITE_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u64
  if (data?.FileOffset !== undefined) view.setBigUint64(8, util.toBigInt(data.FileOffset), true);
  // 0x10: u64
  if (data?.CopyLength !== undefined) view.setBigUint64(16, util.toBigInt(data.CopyLength), true);
  // 0x18: u64
  if (data?.TransferOffset !== undefined) view.setBigUint64(24, util.toBigInt(data.TransferOffset), true);
  // 0x20: pointer
  if (data?.Token !== undefined) view.setBigUint64(32, data.Token === null ? 0n : util.toBigInt(util.toPointer(data.Token)), true);
  return buf;
}

export class FSCTL_OFFLOAD_WRITE_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get FileOffset(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get CopyLength(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get TransferOffset(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: pointer
  get Token(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set FileOffset(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set CopyLength(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set TransferOffset(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: pointer
  set Token(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FSCTL_OFFLOAD_WRITE_OUTPUT (size: 16)
 */
export interface FSCTL_OFFLOAD_WRITE_OUTPUT {
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
  /** u64 */
  LengthWritten: number | bigint;
}

export const sizeofFSCTL_OFFLOAD_WRITE_OUTPUT = 16;

export function allocFSCTL_OFFLOAD_WRITE_OUTPUT(data?: Partial<FSCTL_OFFLOAD_WRITE_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofFSCTL_OFFLOAD_WRITE_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u64
  if (data?.LengthWritten !== undefined) view.setBigUint64(8, util.toBigInt(data.LengthWritten), true);
  return buf;
}

export class FSCTL_OFFLOAD_WRITE_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get LengthWritten(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set LengthWritten(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SET_PURGE_FAILURE_MODE_INPUT (size: 8)
 */
export interface SET_PURGE_FAILURE_MODE_INPUT {
  /** u32 */
  Flags: number;
}

export const sizeofSET_PURGE_FAILURE_MODE_INPUT = 8;

export function allocSET_PURGE_FAILURE_MODE_INPUT(data?: Partial<SET_PURGE_FAILURE_MODE_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofSET_PURGE_FAILURE_MODE_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  return buf;
}

export class SET_PURGE_FAILURE_MODE_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Ioctl.REPAIR_COPIES_INPUT (size: 40)
 */
export interface REPAIR_COPIES_INPUT {
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  FileOffset: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Length: number;
  /** u32 */
  SourceCopy: number;
  /** u32 */
  NumberOfRepairCopies: number;
  /** array */
  RepairCopies: Deno.PointerValue | null;
}

export const sizeofREPAIR_COPIES_INPUT = 40;

export function allocREPAIR_COPIES_INPUT(data?: Partial<REPAIR_COPIES_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofREPAIR_COPIES_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.FileOffset !== undefined) view.setBigUint64(8, data.FileOffset === null ? 0n : util.toBigInt(util.toPointer(data.FileOffset)), true);
  // 0x10: u32
  if (data?.Length !== undefined) view.setUint32(16, Number(data.Length), true);
  // 0x14: u32
  if (data?.SourceCopy !== undefined) view.setUint32(20, Number(data.SourceCopy), true);
  // 0x18: u32
  if (data?.NumberOfRepairCopies !== undefined) view.setUint32(24, Number(data.NumberOfRepairCopies), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.RepairCopies !== undefined) view.setBigUint64(32, data.RepairCopies === null ? 0n : util.toBigInt(util.toPointer(data.RepairCopies)), true);
  return buf;
}

export class REPAIR_COPIES_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get FileOffset(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get Length(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get SourceCopy(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get NumberOfRepairCopies(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get RepairCopies(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set FileOffset(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set Length(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set SourceCopy(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set NumberOfRepairCopies(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set RepairCopies(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.REPAIR_COPIES_OUTPUT (size: 16)
 */
export interface REPAIR_COPIES_OUTPUT {
  /** u32 */
  Size: number;
  /** u32 */
  Status: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ResumeFileOffset: Uint8Array | Deno.PointerValue | null;
}

export const sizeofREPAIR_COPIES_OUTPUT = 16;

export function allocREPAIR_COPIES_OUTPUT(data?: Partial<REPAIR_COPIES_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofREPAIR_COPIES_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Status !== undefined) view.setUint32(4, Number(data.Status), true);
  // 0x08: pointer
  if (data?.ResumeFileOffset !== undefined) view.setBigUint64(8, data.ResumeFileOffset === null ? 0n : util.toBigInt(util.toPointer(data.ResumeFileOffset)), true);
  return buf;
}

export class REPAIR_COPIES_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Status(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ResumeFileOffset(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Status(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ResumeFileOffset(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FILE_REGION_INFO (size: 24)
 */
export interface FILE_REGION_INFO {
  /** i64 */
  FileOffset: number | bigint;
  /** i64 */
  Length: number | bigint;
  /** u32 */
  Usage: number;
  /** u32 */
  Reserved: number;
}

export const sizeofFILE_REGION_INFO = 24;

export function allocFILE_REGION_INFO(data?: Partial<FILE_REGION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_REGION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.FileOffset !== undefined) view.setBigInt64(0, util.toBigInt(data.FileOffset), true);
  // 0x08: i64
  if (data?.Length !== undefined) view.setBigInt64(8, util.toBigInt(data.Length), true);
  // 0x10: u32
  if (data?.Usage !== undefined) view.setUint32(16, Number(data.Usage), true);
  // 0x14: u32
  if (data?.Reserved !== undefined) view.setUint32(20, Number(data.Reserved), true);
  return buf;
}

export class FILE_REGION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get FileOffset(): number | bigint {
    return this.view.getBigInt64(0, true);
  }

  // 0x08: i64
  get Length(): number | bigint {
    return this.view.getBigInt64(8, true);
  }

  // 0x10: u32
  get Usage(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Reserved(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: i64
  set FileOffset(value: number | bigint) {
    this.view.setBigInt64(0, util.toBigInt(value), true);
  }

  // 0x08: i64
  set Length(value: number | bigint) {
    this.view.setBigInt64(8, util.toBigInt(value), true);
  }

  // 0x10: u32
  set Usage(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Reserved(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FILE_REGION_OUTPUT (size: 24)
 */
export interface FILE_REGION_OUTPUT {
  /** u32 */
  Flags: number;
  /** u32 */
  TotalRegionEntryCount: number;
  /** u32 */
  RegionEntryCount: number;
  /** u32 */
  Reserved: number;
  /** array */
  Region: Deno.PointerValue | null;
}

export const sizeofFILE_REGION_OUTPUT = 24;

export function allocFILE_REGION_OUTPUT(data?: Partial<FILE_REGION_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_REGION_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.TotalRegionEntryCount !== undefined) view.setUint32(4, Number(data.TotalRegionEntryCount), true);
  // 0x08: u32
  if (data?.RegionEntryCount !== undefined) view.setUint32(8, Number(data.RegionEntryCount), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  // 0x10: pointer
  if (data?.Region !== undefined) view.setBigUint64(16, data.Region === null ? 0n : util.toBigInt(util.toPointer(data.Region)), true);
  return buf;
}

export class FILE_REGION_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get TotalRegionEntryCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get RegionEntryCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Reserved(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get Region(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set TotalRegionEntryCount(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set RegionEntryCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Reserved(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set Region(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FILE_REGION_INPUT (size: 24)
 */
export interface FILE_REGION_INPUT {
  /** i64 */
  FileOffset: number | bigint;
  /** i64 */
  Length: number | bigint;
  /** u32 */
  DesiredUsage: number;
}

export const sizeofFILE_REGION_INPUT = 24;

export function allocFILE_REGION_INPUT(data?: Partial<FILE_REGION_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_REGION_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.FileOffset !== undefined) view.setBigInt64(0, util.toBigInt(data.FileOffset), true);
  // 0x08: i64
  if (data?.Length !== undefined) view.setBigInt64(8, util.toBigInt(data.Length), true);
  // 0x10: u32
  if (data?.DesiredUsage !== undefined) view.setUint32(16, Number(data.DesiredUsage), true);
  // 0x14: pad4
  return buf;
}

export class FILE_REGION_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get FileOffset(): number | bigint {
    return this.view.getBigInt64(0, true);
  }

  // 0x08: i64
  get Length(): number | bigint {
    return this.view.getBigInt64(8, true);
  }

  // 0x10: u32
  get DesiredUsage(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: i64
  set FileOffset(value: number | bigint) {
    this.view.setBigInt64(0, util.toBigInt(value), true);
  }

  // 0x08: i64
  set Length(value: number | bigint) {
    this.view.setBigInt64(8, util.toBigInt(value), true);
  }

  // 0x10: u32
  set DesiredUsage(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.System.Ioctl.WRITE_USN_REASON_INPUT (size: 8)
 */
export interface WRITE_USN_REASON_INPUT {
  /** u32 */
  Flags: number;
  /** u32 */
  UsnReasonToWrite: number;
}

export const sizeofWRITE_USN_REASON_INPUT = 8;

export function allocWRITE_USN_REASON_INPUT(data?: Partial<WRITE_USN_REASON_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofWRITE_USN_REASON_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.UsnReasonToWrite !== undefined) view.setUint32(4, Number(data.UsnReasonToWrite), true);
  return buf;
}

export class WRITE_USN_REASON_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get UsnReasonToWrite(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set UsnReasonToWrite(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FILE_STORAGE_TIER (size: 48)
 */
export interface FILE_STORAGE_TIER {
  /** System.Guid */
  Id: Uint8Array | Deno.PointerValue | null;
  /** array */
  Name: Deno.PointerValue | null;
  /** array */
  Description: Deno.PointerValue | null;
  /** u64 */
  Flags: number | bigint;
  /** u64 */
  ProvisionedCapacity: number | bigint;
  /** Windows.Win32.System.Ioctl.FILE_STORAGE_TIER_MEDIA_TYPE */
  MediaType: FILE_STORAGE_TIER_MEDIA_TYPE;
  /** Windows.Win32.System.Ioctl.FILE_STORAGE_TIER_CLASS */
  Class: FILE_STORAGE_TIER_CLASS;
}

export const sizeofFILE_STORAGE_TIER = 48;

export function allocFILE_STORAGE_TIER(data?: Partial<FILE_STORAGE_TIER>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_STORAGE_TIER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Id !== undefined) view.setBigUint64(0, data.Id === null ? 0n : util.toBigInt(util.toPointer(data.Id)), true);
  // 0x08: pointer
  if (data?.Name !== undefined) view.setBigUint64(8, data.Name === null ? 0n : util.toBigInt(util.toPointer(data.Name)), true);
  // 0x10: pointer
  if (data?.Description !== undefined) view.setBigUint64(16, data.Description === null ? 0n : util.toBigInt(util.toPointer(data.Description)), true);
  // 0x18: u64
  if (data?.Flags !== undefined) view.setBigUint64(24, util.toBigInt(data.Flags), true);
  // 0x20: u64
  if (data?.ProvisionedCapacity !== undefined) view.setBigUint64(32, util.toBigInt(data.ProvisionedCapacity), true);
  // 0x28: i32
  if (data?.MediaType !== undefined) view.setInt32(40, Number(data.MediaType), true);
  // 0x2c: i32
  if (data?.Class !== undefined) view.setInt32(44, Number(data.Class), true);
  return buf;
}

export class FILE_STORAGE_TIERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Id(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Description(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u64
  get Flags(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u64
  get ProvisionedCapacity(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: i32
  get MediaType(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: i32
  get Class(): number {
    return this.view.getInt32(44, true);
  }

  // 0x00: pointer
  set Id(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Description(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u64
  set Flags(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u64
  set ProvisionedCapacity(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: i32
  set MediaType(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: i32
  set Class(value: number) {
    this.view.setInt32(44, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FSCTL_QUERY_STORAGE_CLASSES_OUTPUT (size: 32)
 */
export interface FSCTL_QUERY_STORAGE_CLASSES_OUTPUT {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.System.Ioctl.FILE_STORAGE_TIER_FLAGS */
  Flags: FILE_STORAGE_TIER_FLAGS;
  /** u32 */
  TotalNumberOfTiers: number;
  /** u32 */
  NumberOfTiersReturned: number;
  /** array */
  Tiers: Deno.PointerValue | null;
}

export const sizeofFSCTL_QUERY_STORAGE_CLASSES_OUTPUT = 32;

export function allocFSCTL_QUERY_STORAGE_CLASSES_OUTPUT(data?: Partial<FSCTL_QUERY_STORAGE_CLASSES_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofFSCTL_QUERY_STORAGE_CLASSES_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.TotalNumberOfTiers !== undefined) view.setUint32(12, Number(data.TotalNumberOfTiers), true);
  // 0x10: u32
  if (data?.NumberOfTiersReturned !== undefined) view.setUint32(16, Number(data.NumberOfTiersReturned), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Tiers !== undefined) view.setBigUint64(24, data.Tiers === null ? 0n : util.toBigInt(util.toPointer(data.Tiers)), true);
  return buf;
}

export class FSCTL_QUERY_STORAGE_CLASSES_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get TotalNumberOfTiers(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get NumberOfTiersReturned(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Tiers(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set TotalNumberOfTiers(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set NumberOfTiersReturned(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Tiers(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * _DesiredStorageClass (size: 8)
 */
export interface _DesiredStorageClass {
  /** Windows.Win32.System.Ioctl.FILE_STORAGE_TIER_CLASS */
  Class: FILE_STORAGE_TIER_CLASS;
  /** u32 */
  Flags: number;
}

export const sizeof_DesiredStorageClass = 8;

export function alloc_DesiredStorageClass(data?: Partial<_DesiredStorageClass>): Uint8Array {
  const buf = new Uint8Array(sizeof_DesiredStorageClass);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Class !== undefined) view.setInt32(0, Number(data.Class), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  return buf;
}

export class _DesiredStorageClassView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Class(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set Class(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * _DataStream (size: 16)
 */
export interface _DataStream {
  /** u16 */
  Length: number;
  /** u16 */
  Flags: number;
  /** u32 */
  Reserved: number;
  /** u64 */
  Vdl: number | bigint;
}

export const sizeof_DataStream = 16;

export function alloc_DataStream(data?: Partial<_DataStream>): Uint8Array {
  const buf = new Uint8Array(sizeof_DataStream);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Length !== undefined) view.setUint16(0, Number(data.Length), true);
  // 0x02: u16
  if (data?.Flags !== undefined) view.setUint16(2, Number(data.Flags), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  // 0x08: u64
  if (data?.Vdl !== undefined) view.setBigUint64(8, util.toBigInt(data.Vdl), true);
  return buf;
}

export class _DataStreamView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Length(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Flags(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get Reserved(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get Vdl(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u16
  set Length(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Flags(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set Reserved(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set Vdl(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * _Reparse (size: 16)
 */
export interface _Reparse {
  /** u16 */
  Length: number;
  /** u16 */
  Flags: number;
  /** u32 */
  ReparseDataSize: number;
  /** u32 */
  ReparseDataOffset: number;
}

export const sizeof_Reparse = 16;

export function alloc_Reparse(data?: Partial<_Reparse>): Uint8Array {
  const buf = new Uint8Array(sizeof_Reparse);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Length !== undefined) view.setUint16(0, Number(data.Length), true);
  // 0x02: u16
  if (data?.Flags !== undefined) view.setUint16(2, Number(data.Flags), true);
  // 0x04: u32
  if (data?.ReparseDataSize !== undefined) view.setUint32(4, Number(data.ReparseDataSize), true);
  // 0x08: u32
  if (data?.ReparseDataOffset !== undefined) view.setUint32(8, Number(data.ReparseDataOffset), true);
  // 0x0c: pad4
  return buf;
}

export class _ReparseView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Length(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Flags(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get ReparseDataSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ReparseDataOffset(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u16
  set Length(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Flags(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set ReparseDataSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ReparseDataOffset(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * _Ea (size: 16)
 */
export interface _Ea {
  /** u16 */
  Length: number;
  /** u16 */
  Flags: number;
  /** u32 */
  EaSize: number;
  /** u32 */
  EaInformationOffset: number;
}

export const sizeof_Ea = 16;

export function alloc_Ea(data?: Partial<_Ea>): Uint8Array {
  const buf = new Uint8Array(sizeof_Ea);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Length !== undefined) view.setUint16(0, Number(data.Length), true);
  // 0x02: u16
  if (data?.Flags !== undefined) view.setUint16(2, Number(data.Flags), true);
  // 0x04: u32
  if (data?.EaSize !== undefined) view.setUint32(4, Number(data.EaSize), true);
  // 0x08: u32
  if (data?.EaInformationOffset !== undefined) view.setUint32(8, Number(data.EaInformationOffset), true);
  // 0x0c: pad4
  return buf;
}

export class _EaView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Length(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Flags(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get EaSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get EaInformationOffset(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u16
  set Length(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Flags(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set EaSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set EaInformationOffset(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * _StreamInformation (size: 32)
 */
export interface _StreamInformation {
  /** _DesiredStorageClass */
  DesiredStorageClass: Uint8Array | Deno.PointerValue | null;
  /** _DataStream */
  DataStream: Uint8Array | Deno.PointerValue | null;
  /** _Reparse */
  Reparse: Uint8Array | Deno.PointerValue | null;
  /** _Ea */
  Ea: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_StreamInformation = 32;

export function alloc_StreamInformation(data?: Partial<_StreamInformation>): Uint8Array {
  const buf = new Uint8Array(sizeof_StreamInformation);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DesiredStorageClass !== undefined) view.setBigUint64(0, data.DesiredStorageClass === null ? 0n : util.toBigInt(util.toPointer(data.DesiredStorageClass)), true);
  // 0x08: pointer
  if (data?.DataStream !== undefined) view.setBigUint64(8, data.DataStream === null ? 0n : util.toBigInt(util.toPointer(data.DataStream)), true);
  // 0x10: pointer
  if (data?.Reparse !== undefined) view.setBigUint64(16, data.Reparse === null ? 0n : util.toBigInt(util.toPointer(data.Reparse)), true);
  // 0x18: pointer
  if (data?.Ea !== undefined) view.setBigUint64(24, data.Ea === null ? 0n : util.toBigInt(util.toPointer(data.Ea)), true);
  return buf;
}

export class _StreamInformationView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DesiredStorageClass(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get DataStream(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Reparse(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Ea(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set DesiredStorageClass(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set DataStream(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Reparse(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Ea(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STREAM_INFORMATION_ENTRY (size: 16)
 */
export interface STREAM_INFORMATION_ENTRY {
  /** u32 */
  Version: number;
  /** u32 */
  Flags: number;
  /** _StreamInformation */
  StreamInformation: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSTREAM_INFORMATION_ENTRY = 16;

export function allocSTREAM_INFORMATION_ENTRY(data?: Partial<STREAM_INFORMATION_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofSTREAM_INFORMATION_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.StreamInformation !== undefined) view.setBigUint64(8, data.StreamInformation === null ? 0n : util.toBigInt(util.toPointer(data.StreamInformation)), true);
  return buf;
}

export class STREAM_INFORMATION_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get StreamInformation(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set StreamInformation(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FSCTL_QUERY_REGION_INFO_INPUT (size: 24)
 */
export interface FSCTL_QUERY_REGION_INFO_INPUT {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
  /** u32 */
  NumberOfTierIds: number;
  /** array */
  TierIds: Deno.PointerValue | null;
}

export const sizeofFSCTL_QUERY_REGION_INFO_INPUT = 24;

export function allocFSCTL_QUERY_REGION_INFO_INPUT(data?: Partial<FSCTL_QUERY_REGION_INFO_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofFSCTL_QUERY_REGION_INFO_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.NumberOfTierIds !== undefined) view.setUint32(12, Number(data.NumberOfTierIds), true);
  // 0x10: pointer
  if (data?.TierIds !== undefined) view.setBigUint64(16, data.TierIds === null ? 0n : util.toBigInt(util.toPointer(data.TierIds)), true);
  return buf;
}

export class FSCTL_QUERY_REGION_INFO_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get NumberOfTierIds(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get TierIds(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set NumberOfTierIds(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set TierIds(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FILE_STORAGE_TIER_REGION (size: 24)
 */
export interface FILE_STORAGE_TIER_REGION {
  /** System.Guid */
  TierId: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  Offset: number | bigint;
  /** u64 */
  Length: number | bigint;
}

export const sizeofFILE_STORAGE_TIER_REGION = 24;

export function allocFILE_STORAGE_TIER_REGION(data?: Partial<FILE_STORAGE_TIER_REGION>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_STORAGE_TIER_REGION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TierId !== undefined) view.setBigUint64(0, data.TierId === null ? 0n : util.toBigInt(util.toPointer(data.TierId)), true);
  // 0x08: u64
  if (data?.Offset !== undefined) view.setBigUint64(8, util.toBigInt(data.Offset), true);
  // 0x10: u64
  if (data?.Length !== undefined) view.setBigUint64(16, util.toBigInt(data.Length), true);
  return buf;
}

export class FILE_STORAGE_TIER_REGIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get TierId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u64
  get Offset(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get Length(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x00: pointer
  set TierId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u64
  set Offset(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set Length(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FSCTL_QUERY_REGION_INFO_OUTPUT (size: 40)
 */
export interface FSCTL_QUERY_REGION_INFO_OUTPUT {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Reserved: number;
  /** u64 */
  Alignment: number | bigint;
  /** u32 */
  TotalNumberOfRegions: number;
  /** u32 */
  NumberOfRegionsReturned: number;
  /** array */
  Regions: Deno.PointerValue | null;
}

export const sizeofFSCTL_QUERY_REGION_INFO_OUTPUT = 40;

export function allocFSCTL_QUERY_REGION_INFO_OUTPUT(data?: Partial<FSCTL_QUERY_REGION_INFO_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofFSCTL_QUERY_REGION_INFO_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  // 0x10: u64
  if (data?.Alignment !== undefined) view.setBigUint64(16, util.toBigInt(data.Alignment), true);
  // 0x18: u32
  if (data?.TotalNumberOfRegions !== undefined) view.setUint32(24, Number(data.TotalNumberOfRegions), true);
  // 0x1c: u32
  if (data?.NumberOfRegionsReturned !== undefined) view.setUint32(28, Number(data.NumberOfRegionsReturned), true);
  // 0x20: pointer
  if (data?.Regions !== undefined) view.setBigUint64(32, data.Regions === null ? 0n : util.toBigInt(util.toPointer(data.Regions)), true);
  return buf;
}

export class FSCTL_QUERY_REGION_INFO_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Reserved(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u64
  get Alignment(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u32
  get TotalNumberOfRegions(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get NumberOfRegionsReturned(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get Regions(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Reserved(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u64
  set Alignment(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u32
  set TotalNumberOfRegions(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set NumberOfRegionsReturned(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set Regions(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FILE_DESIRED_STORAGE_CLASS_INFORMATION (size: 8)
 */
export interface FILE_DESIRED_STORAGE_CLASS_INFORMATION {
  /** Windows.Win32.System.Ioctl.FILE_STORAGE_TIER_CLASS */
  Class: FILE_STORAGE_TIER_CLASS;
  /** u32 */
  Flags: number;
}

export const sizeofFILE_DESIRED_STORAGE_CLASS_INFORMATION = 8;

export function allocFILE_DESIRED_STORAGE_CLASS_INFORMATION(data?: Partial<FILE_DESIRED_STORAGE_CLASS_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_DESIRED_STORAGE_CLASS_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Class !== undefined) view.setInt32(0, Number(data.Class), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  return buf;
}

export class FILE_DESIRED_STORAGE_CLASS_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Class(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set Class(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DUPLICATE_EXTENTS_DATA (size: 32)
 */
export interface DUPLICATE_EXTENTS_DATA {
  /** Windows.Win32.Foundation.HANDLE */
  FileHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  SourceFileOffset: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TargetFileOffset: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ByteCount: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDUPLICATE_EXTENTS_DATA = 32;

export function allocDUPLICATE_EXTENTS_DATA(data?: Partial<DUPLICATE_EXTENTS_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDUPLICATE_EXTENTS_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.FileHandle !== undefined) view.setBigUint64(0, data.FileHandle === null ? 0n : util.toBigInt(util.toPointer(data.FileHandle)), true);
  // 0x08: pointer
  if (data?.SourceFileOffset !== undefined) view.setBigUint64(8, data.SourceFileOffset === null ? 0n : util.toBigInt(util.toPointer(data.SourceFileOffset)), true);
  // 0x10: pointer
  if (data?.TargetFileOffset !== undefined) view.setBigUint64(16, data.TargetFileOffset === null ? 0n : util.toBigInt(util.toPointer(data.TargetFileOffset)), true);
  // 0x18: pointer
  if (data?.ByteCount !== undefined) view.setBigUint64(24, data.ByteCount === null ? 0n : util.toBigInt(util.toPointer(data.ByteCount)), true);
  return buf;
}

export class DUPLICATE_EXTENTS_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get FileHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get SourceFileOffset(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get TargetFileOffset(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get ByteCount(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set FileHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set SourceFileOffset(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set TargetFileOffset(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set ByteCount(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.DUPLICATE_EXTENTS_DATA_EX (size: 48)
 */
export interface DUPLICATE_EXTENTS_DATA_EX {
  /** usize */
  Size: number | bigint;
  /** Windows.Win32.Foundation.HANDLE */
  FileHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  SourceFileOffset: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TargetFileOffset: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ByteCount: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
}

export const sizeofDUPLICATE_EXTENTS_DATA_EX = 48;

export function allocDUPLICATE_EXTENTS_DATA_EX(data?: Partial<DUPLICATE_EXTENTS_DATA_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofDUPLICATE_EXTENTS_DATA_EX);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Size !== undefined) view.setBigUint64(0, util.toBigInt(data.Size), true);
  // 0x08: pointer
  if (data?.FileHandle !== undefined) view.setBigUint64(8, data.FileHandle === null ? 0n : util.toBigInt(util.toPointer(data.FileHandle)), true);
  // 0x10: pointer
  if (data?.SourceFileOffset !== undefined) view.setBigUint64(16, data.SourceFileOffset === null ? 0n : util.toBigInt(util.toPointer(data.SourceFileOffset)), true);
  // 0x18: pointer
  if (data?.TargetFileOffset !== undefined) view.setBigUint64(24, data.TargetFileOffset === null ? 0n : util.toBigInt(util.toPointer(data.TargetFileOffset)), true);
  // 0x20: pointer
  if (data?.ByteCount !== undefined) view.setBigUint64(32, data.ByteCount === null ? 0n : util.toBigInt(util.toPointer(data.ByteCount)), true);
  // 0x28: u32
  if (data?.Flags !== undefined) view.setUint32(40, Number(data.Flags), true);
  // 0x2c: pad4
  return buf;
}

export class DUPLICATE_EXTENTS_DATA_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get Size(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: pointer
  get FileHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get SourceFileOffset(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get TargetFileOffset(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get ByteCount(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get Flags(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: usize
  set Size(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: pointer
  set FileHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set SourceFileOffset(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set TargetFileOffset(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set ByteCount(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set Flags(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.System.Ioctl.ASYNC_DUPLICATE_EXTENTS_STATUS (size: 40)
 */
export interface ASYNC_DUPLICATE_EXTENTS_STATUS {
  /** u32 */
  Version: number;
  /** Windows.Win32.System.Ioctl.DUPLICATE_EXTENTS_STATE */
  State: DUPLICATE_EXTENTS_STATE;
  /** u64 */
  SourceFileOffset: number | bigint;
  /** u64 */
  TargetFileOffset: number | bigint;
  /** u64 */
  ByteCount: number | bigint;
  /** u64 */
  BytesDuplicated: number | bigint;
}

export const sizeofASYNC_DUPLICATE_EXTENTS_STATUS = 40;

export function allocASYNC_DUPLICATE_EXTENTS_STATUS(data?: Partial<ASYNC_DUPLICATE_EXTENTS_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofASYNC_DUPLICATE_EXTENTS_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: i32
  if (data?.State !== undefined) view.setInt32(4, Number(data.State), true);
  // 0x08: u64
  if (data?.SourceFileOffset !== undefined) view.setBigUint64(8, util.toBigInt(data.SourceFileOffset), true);
  // 0x10: u64
  if (data?.TargetFileOffset !== undefined) view.setBigUint64(16, util.toBigInt(data.TargetFileOffset), true);
  // 0x18: u64
  if (data?.ByteCount !== undefined) view.setBigUint64(24, util.toBigInt(data.ByteCount), true);
  // 0x20: u64
  if (data?.BytesDuplicated !== undefined) view.setBigUint64(32, util.toBigInt(data.BytesDuplicated), true);
  return buf;
}

export class ASYNC_DUPLICATE_EXTENTS_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get State(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u64
  get SourceFileOffset(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get TargetFileOffset(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get ByteCount(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u64
  get BytesDuplicated(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set State(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u64
  set SourceFileOffset(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set TargetFileOffset(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set ByteCount(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u64
  set BytesDuplicated(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.REFS_SMR_VOLUME_INFO_OUTPUT (size: 72)
 */
export interface REFS_SMR_VOLUME_INFO_OUTPUT {
  /** u32 */
  Version: number;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  SizeOfRandomlyWritableTier: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  FreeSpaceInRandomlyWritableTier: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  SizeofSMRTier: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  FreeSpaceInSMRTier: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  UsableFreeSpaceInSMRTier: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Ioctl.REFS_SMR_VOLUME_GC_STATE */
  VolumeGcState: REFS_SMR_VOLUME_GC_STATE;
  /** u32 */
  VolumeGcLastStatus: number;
  /** u32 */
  CurrentGcBandFillPercentage: number;
  /** array */
  Unused: Deno.PointerValue | null;
}

export const sizeofREFS_SMR_VOLUME_INFO_OUTPUT = 72;

export function allocREFS_SMR_VOLUME_INFO_OUTPUT(data?: Partial<REFS_SMR_VOLUME_INFO_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofREFS_SMR_VOLUME_INFO_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.SizeOfRandomlyWritableTier !== undefined) view.setBigUint64(8, data.SizeOfRandomlyWritableTier === null ? 0n : util.toBigInt(util.toPointer(data.SizeOfRandomlyWritableTier)), true);
  // 0x10: pointer
  if (data?.FreeSpaceInRandomlyWritableTier !== undefined) view.setBigUint64(16, data.FreeSpaceInRandomlyWritableTier === null ? 0n : util.toBigInt(util.toPointer(data.FreeSpaceInRandomlyWritableTier)), true);
  // 0x18: pointer
  if (data?.SizeofSMRTier !== undefined) view.setBigUint64(24, data.SizeofSMRTier === null ? 0n : util.toBigInt(util.toPointer(data.SizeofSMRTier)), true);
  // 0x20: pointer
  if (data?.FreeSpaceInSMRTier !== undefined) view.setBigUint64(32, data.FreeSpaceInSMRTier === null ? 0n : util.toBigInt(util.toPointer(data.FreeSpaceInSMRTier)), true);
  // 0x28: pointer
  if (data?.UsableFreeSpaceInSMRTier !== undefined) view.setBigUint64(40, data.UsableFreeSpaceInSMRTier === null ? 0n : util.toBigInt(util.toPointer(data.UsableFreeSpaceInSMRTier)), true);
  // 0x30: i32
  if (data?.VolumeGcState !== undefined) view.setInt32(48, Number(data.VolumeGcState), true);
  // 0x34: u32
  if (data?.VolumeGcLastStatus !== undefined) view.setUint32(52, Number(data.VolumeGcLastStatus), true);
  // 0x38: u32
  if (data?.CurrentGcBandFillPercentage !== undefined) view.setUint32(56, Number(data.CurrentGcBandFillPercentage), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.Unused !== undefined) view.setBigUint64(64, data.Unused === null ? 0n : util.toBigInt(util.toPointer(data.Unused)), true);
  return buf;
}

export class REFS_SMR_VOLUME_INFO_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get SizeOfRandomlyWritableTier(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get FreeSpaceInRandomlyWritableTier(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get SizeofSMRTier(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get FreeSpaceInSMRTier(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get UsableFreeSpaceInSMRTier(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: i32
  get VolumeGcState(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: u32
  get VolumeGcLastStatus(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get CurrentGcBandFillPercentage(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get Unused(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set SizeOfRandomlyWritableTier(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set FreeSpaceInRandomlyWritableTier(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set SizeofSMRTier(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set FreeSpaceInSMRTier(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set UsableFreeSpaceInSMRTier(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: i32
  set VolumeGcState(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: u32
  set VolumeGcLastStatus(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set CurrentGcBandFillPercentage(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set Unused(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.REFS_SMR_VOLUME_GC_PARAMETERS (size: 32)
 */
export interface REFS_SMR_VOLUME_GC_PARAMETERS {
  /** u32 */
  Version: number;
  /** u32 */
  Flags: number;
  /** Windows.Win32.System.Ioctl.REFS_SMR_VOLUME_GC_ACTION */
  Action: REFS_SMR_VOLUME_GC_ACTION;
  /** Windows.Win32.System.Ioctl.REFS_SMR_VOLUME_GC_METHOD */
  Method: REFS_SMR_VOLUME_GC_METHOD;
  /** u32 */
  IoGranularity: number;
  /** u32 */
  CompressionFormat: number;
  /** array */
  Unused: Deno.PointerValue | null;
}

export const sizeofREFS_SMR_VOLUME_GC_PARAMETERS = 32;

export function allocREFS_SMR_VOLUME_GC_PARAMETERS(data?: Partial<REFS_SMR_VOLUME_GC_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofREFS_SMR_VOLUME_GC_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: i32
  if (data?.Action !== undefined) view.setInt32(8, Number(data.Action), true);
  // 0x0c: i32
  if (data?.Method !== undefined) view.setInt32(12, Number(data.Method), true);
  // 0x10: u32
  if (data?.IoGranularity !== undefined) view.setUint32(16, Number(data.IoGranularity), true);
  // 0x14: u32
  if (data?.CompressionFormat !== undefined) view.setUint32(20, Number(data.CompressionFormat), true);
  // 0x18: pointer
  if (data?.Unused !== undefined) view.setBigUint64(24, data.Unused === null ? 0n : util.toBigInt(util.toPointer(data.Unused)), true);
  return buf;
}

export class REFS_SMR_VOLUME_GC_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get Action(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get Method(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get IoGranularity(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get CompressionFormat(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get Unused(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set Action(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set Method(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set IoGranularity(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set CompressionFormat(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set Unused(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER (size: 16)
 */
export interface STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER {
  /** u32 */
  OptimalWriteSize: number;
  /** u32 */
  StreamGranularitySize: number;
  /** u32 */
  StreamIdMin: number;
  /** u32 */
  StreamIdMax: number;
}

export const sizeofSTREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER = 16;

export function allocSTREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER(data?: Partial<STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofSTREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.OptimalWriteSize !== undefined) view.setUint32(0, Number(data.OptimalWriteSize), true);
  // 0x04: u32
  if (data?.StreamGranularitySize !== undefined) view.setUint32(4, Number(data.StreamGranularitySize), true);
  // 0x08: u32
  if (data?.StreamIdMin !== undefined) view.setUint32(8, Number(data.StreamIdMin), true);
  // 0x0c: u32
  if (data?.StreamIdMax !== undefined) view.setUint32(12, Number(data.StreamIdMax), true);
  return buf;
}

export class STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get OptimalWriteSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get StreamGranularitySize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get StreamIdMin(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get StreamIdMax(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set OptimalWriteSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set StreamGranularitySize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set StreamIdMin(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set StreamIdMax(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STREAMS_ASSOCIATE_ID_INPUT_BUFFER (size: 8)
 */
export interface STREAMS_ASSOCIATE_ID_INPUT_BUFFER {
  /** u32 */
  Flags: number;
  /** u32 */
  StreamId: number;
}

export const sizeofSTREAMS_ASSOCIATE_ID_INPUT_BUFFER = 8;

export function allocSTREAMS_ASSOCIATE_ID_INPUT_BUFFER(data?: Partial<STREAMS_ASSOCIATE_ID_INPUT_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofSTREAMS_ASSOCIATE_ID_INPUT_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.StreamId !== undefined) view.setUint32(4, Number(data.StreamId), true);
  return buf;
}

export class STREAMS_ASSOCIATE_ID_INPUT_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get StreamId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set StreamId(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.STREAMS_QUERY_ID_OUTPUT_BUFFER (size: 8)
 */
export interface STREAMS_QUERY_ID_OUTPUT_BUFFER {
  /** u32 */
  StreamId: number;
}

export const sizeofSTREAMS_QUERY_ID_OUTPUT_BUFFER = 8;

export function allocSTREAMS_QUERY_ID_OUTPUT_BUFFER(data?: Partial<STREAMS_QUERY_ID_OUTPUT_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofSTREAMS_QUERY_ID_OUTPUT_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.StreamId !== undefined) view.setUint32(0, Number(data.StreamId), true);
  // 0x04: pad4
  return buf;
}

export class STREAMS_QUERY_ID_OUTPUT_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get StreamId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set StreamId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Ioctl.QUERY_BAD_RANGES_INPUT_RANGE (size: 16)
 */
export interface QUERY_BAD_RANGES_INPUT_RANGE {
  /** u64 */
  StartOffset: number | bigint;
  /** u64 */
  LengthInBytes: number | bigint;
}

export const sizeofQUERY_BAD_RANGES_INPUT_RANGE = 16;

export function allocQUERY_BAD_RANGES_INPUT_RANGE(data?: Partial<QUERY_BAD_RANGES_INPUT_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofQUERY_BAD_RANGES_INPUT_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.StartOffset !== undefined) view.setBigUint64(0, util.toBigInt(data.StartOffset), true);
  // 0x08: u64
  if (data?.LengthInBytes !== undefined) view.setBigUint64(8, util.toBigInt(data.LengthInBytes), true);
  return buf;
}

export class QUERY_BAD_RANGES_INPUT_RANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get StartOffset(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get LengthInBytes(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u64
  set StartOffset(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set LengthInBytes(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.QUERY_BAD_RANGES_INPUT (size: 16)
 */
export interface QUERY_BAD_RANGES_INPUT {
  /** u32 */
  Flags: number;
  /** u32 */
  NumRanges: number;
  /** array */
  Ranges: Deno.PointerValue | null;
}

export const sizeofQUERY_BAD_RANGES_INPUT = 16;

export function allocQUERY_BAD_RANGES_INPUT(data?: Partial<QUERY_BAD_RANGES_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofQUERY_BAD_RANGES_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.NumRanges !== undefined) view.setUint32(4, Number(data.NumRanges), true);
  // 0x08: pointer
  if (data?.Ranges !== undefined) view.setBigUint64(8, data.Ranges === null ? 0n : util.toBigInt(util.toPointer(data.Ranges)), true);
  return buf;
}

export class QUERY_BAD_RANGES_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NumRanges(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Ranges(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NumRanges(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Ranges(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.QUERY_BAD_RANGES_OUTPUT_RANGE (size: 24)
 */
export interface QUERY_BAD_RANGES_OUTPUT_RANGE {
  /** u32 */
  Flags: number;
  /** u32 */
  Reserved: number;
  /** u64 */
  StartOffset: number | bigint;
  /** u64 */
  LengthInBytes: number | bigint;
}

export const sizeofQUERY_BAD_RANGES_OUTPUT_RANGE = 24;

export function allocQUERY_BAD_RANGES_OUTPUT_RANGE(data?: Partial<QUERY_BAD_RANGES_OUTPUT_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofQUERY_BAD_RANGES_OUTPUT_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  // 0x08: u64
  if (data?.StartOffset !== undefined) view.setBigUint64(8, util.toBigInt(data.StartOffset), true);
  // 0x10: u64
  if (data?.LengthInBytes !== undefined) view.setBigUint64(16, util.toBigInt(data.LengthInBytes), true);
  return buf;
}

export class QUERY_BAD_RANGES_OUTPUT_RANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Reserved(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get StartOffset(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get LengthInBytes(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Reserved(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set StartOffset(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set LengthInBytes(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.QUERY_BAD_RANGES_OUTPUT (size: 24)
 */
export interface QUERY_BAD_RANGES_OUTPUT {
  /** u32 */
  Flags: number;
  /** u32 */
  NumBadRanges: number;
  /** u64 */
  NextOffsetToLookUp: number | bigint;
  /** array */
  BadRanges: Deno.PointerValue | null;
}

export const sizeofQUERY_BAD_RANGES_OUTPUT = 24;

export function allocQUERY_BAD_RANGES_OUTPUT(data?: Partial<QUERY_BAD_RANGES_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofQUERY_BAD_RANGES_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.NumBadRanges !== undefined) view.setUint32(4, Number(data.NumBadRanges), true);
  // 0x08: u64
  if (data?.NextOffsetToLookUp !== undefined) view.setBigUint64(8, util.toBigInt(data.NextOffsetToLookUp), true);
  // 0x10: pointer
  if (data?.BadRanges !== undefined) view.setBigUint64(16, data.BadRanges === null ? 0n : util.toBigInt(util.toPointer(data.BadRanges)), true);
  return buf;
}

export class QUERY_BAD_RANGES_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NumBadRanges(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get NextOffsetToLookUp(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: pointer
  get BadRanges(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NumBadRanges(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set NextOffsetToLookUp(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: pointer
  set BadRanges(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT (size: 24)
 */
export interface SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT {
  /** u32 */
  Flags: number;
  /** u32 */
  AlignmentShift: number;
  /** u64 */
  FileOffsetToAlign: number | bigint;
  /** u32 */
  FallbackAlignmentShift: number;
}

export const sizeofSET_DAX_ALLOC_ALIGNMENT_HINT_INPUT = 24;

export function allocSET_DAX_ALLOC_ALIGNMENT_HINT_INPUT(data?: Partial<SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofSET_DAX_ALLOC_ALIGNMENT_HINT_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.AlignmentShift !== undefined) view.setUint32(4, Number(data.AlignmentShift), true);
  // 0x08: u64
  if (data?.FileOffsetToAlign !== undefined) view.setBigUint64(8, util.toBigInt(data.FileOffsetToAlign), true);
  // 0x10: u32
  if (data?.FallbackAlignmentShift !== undefined) view.setUint32(16, Number(data.FallbackAlignmentShift), true);
  // 0x14: pad4
  return buf;
}

export class SET_DAX_ALLOC_ALIGNMENT_HINT_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get AlignmentShift(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get FileOffsetToAlign(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u32
  get FallbackAlignmentShift(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set AlignmentShift(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set FileOffsetToAlign(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u32
  set FallbackAlignmentShift(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.System.Ioctl.VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT (size: 8)
 */
export interface VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT {
  /** u32 */
  Size: number;
  /** Windows.Win32.System.Ioctl.VIRTUAL_STORAGE_BEHAVIOR_CODE */
  BehaviorCode: VIRTUAL_STORAGE_BEHAVIOR_CODE;
}

export const sizeofVIRTUAL_STORAGE_SET_BEHAVIOR_INPUT = 8;

export function allocVIRTUAL_STORAGE_SET_BEHAVIOR_INPUT(data?: Partial<VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofVIRTUAL_STORAGE_SET_BEHAVIOR_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: i32
  if (data?.BehaviorCode !== undefined) view.setInt32(4, Number(data.BehaviorCode), true);
  return buf;
}

export class VIRTUAL_STORAGE_SET_BEHAVIOR_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get BehaviorCode(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set BehaviorCode(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.ENCRYPTION_KEY_CTRL_INPUT (size: 32)
 */
export interface ENCRYPTION_KEY_CTRL_INPUT {
  /** u32 */
  HeaderSize: number;
  /** u32 */
  StructureSize: number;
  /** u16 */
  KeyOffset: number;
  /** u16 */
  KeySize: number;
  /** u32 */
  DplLock: number;
  /** u64 */
  DplUserId: number | bigint;
  /** u64 */
  DplCredentialId: number | bigint;
}

export const sizeofENCRYPTION_KEY_CTRL_INPUT = 32;

export function allocENCRYPTION_KEY_CTRL_INPUT(data?: Partial<ENCRYPTION_KEY_CTRL_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofENCRYPTION_KEY_CTRL_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.HeaderSize !== undefined) view.setUint32(0, Number(data.HeaderSize), true);
  // 0x04: u32
  if (data?.StructureSize !== undefined) view.setUint32(4, Number(data.StructureSize), true);
  // 0x08: u16
  if (data?.KeyOffset !== undefined) view.setUint16(8, Number(data.KeyOffset), true);
  // 0x0a: u16
  if (data?.KeySize !== undefined) view.setUint16(10, Number(data.KeySize), true);
  // 0x0c: u32
  if (data?.DplLock !== undefined) view.setUint32(12, Number(data.DplLock), true);
  // 0x10: u64
  if (data?.DplUserId !== undefined) view.setBigUint64(16, util.toBigInt(data.DplUserId), true);
  // 0x18: u64
  if (data?.DplCredentialId !== undefined) view.setBigUint64(24, util.toBigInt(data.DplCredentialId), true);
  return buf;
}

export class ENCRYPTION_KEY_CTRL_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get HeaderSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get StructureSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u16
  get KeyOffset(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get KeySize(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u32
  get DplLock(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u64
  get DplUserId(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get DplCredentialId(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x00: u32
  set HeaderSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set StructureSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u16
  set KeyOffset(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set KeySize(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u32
  set DplLock(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u64
  set DplUserId(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set DplCredentialId(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.WOF_EXTERNAL_INFO (size: 8)
 */
export interface WOF_EXTERNAL_INFO {
  /** u32 */
  Version: number;
  /** u32 */
  Provider: number;
}

export const sizeofWOF_EXTERNAL_INFO = 8;

export function allocWOF_EXTERNAL_INFO(data?: Partial<WOF_EXTERNAL_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWOF_EXTERNAL_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Provider !== undefined) view.setUint32(4, Number(data.Provider), true);
  return buf;
}

export class WOF_EXTERNAL_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Provider(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Provider(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.WOF_EXTERNAL_FILE_ID (size: 8)
 */
export interface WOF_EXTERNAL_FILE_ID {
  /** Windows.Win32.Storage.FileSystem.FILE_ID_128 */
  FileId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWOF_EXTERNAL_FILE_ID = 8;

export function allocWOF_EXTERNAL_FILE_ID(data?: Partial<WOF_EXTERNAL_FILE_ID>): Uint8Array {
  const buf = new Uint8Array(sizeofWOF_EXTERNAL_FILE_ID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.FileId !== undefined) view.setBigUint64(0, data.FileId === null ? 0n : util.toBigInt(util.toPointer(data.FileId)), true);
  return buf;
}

export class WOF_EXTERNAL_FILE_IDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get FileId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set FileId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.WOF_VERSION_INFO (size: 8)
 */
export interface WOF_VERSION_INFO {
  /** u32 */
  WofVersion: number;
}

export const sizeofWOF_VERSION_INFO = 8;

export function allocWOF_VERSION_INFO(data?: Partial<WOF_VERSION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWOF_VERSION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.WofVersion !== undefined) view.setUint32(0, Number(data.WofVersion), true);
  // 0x04: pad4
  return buf;
}

export class WOF_VERSION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get WofVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set WofVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Ioctl.WIM_PROVIDER_EXTERNAL_INFO (size: 24)
 */
export interface WIM_PROVIDER_EXTERNAL_INFO {
  /** u32 */
  Version: number;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  DataSourceId: Uint8Array | Deno.PointerValue | null;
  /** array */
  ResourceHash: Deno.PointerValue | null;
}

export const sizeofWIM_PROVIDER_EXTERNAL_INFO = 24;

export function allocWIM_PROVIDER_EXTERNAL_INFO(data?: Partial<WIM_PROVIDER_EXTERNAL_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWIM_PROVIDER_EXTERNAL_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.DataSourceId !== undefined) view.setBigUint64(8, data.DataSourceId === null ? 0n : util.toBigInt(util.toPointer(data.DataSourceId)), true);
  // 0x10: pointer
  if (data?.ResourceHash !== undefined) view.setBigUint64(16, data.ResourceHash === null ? 0n : util.toBigInt(util.toPointer(data.ResourceHash)), true);
  return buf;
}

export class WIM_PROVIDER_EXTERNAL_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get DataSourceId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get ResourceHash(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set DataSourceId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set ResourceHash(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.WIM_PROVIDER_ADD_OVERLAY_INPUT (size: 16)
 */
export interface WIM_PROVIDER_ADD_OVERLAY_INPUT {
  /** u32 */
  WimType: number;
  /** u32 */
  WimIndex: number;
  /** u32 */
  WimFileNameOffset: number;
  /** u32 */
  WimFileNameLength: number;
}

export const sizeofWIM_PROVIDER_ADD_OVERLAY_INPUT = 16;

export function allocWIM_PROVIDER_ADD_OVERLAY_INPUT(data?: Partial<WIM_PROVIDER_ADD_OVERLAY_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofWIM_PROVIDER_ADD_OVERLAY_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.WimType !== undefined) view.setUint32(0, Number(data.WimType), true);
  // 0x04: u32
  if (data?.WimIndex !== undefined) view.setUint32(4, Number(data.WimIndex), true);
  // 0x08: u32
  if (data?.WimFileNameOffset !== undefined) view.setUint32(8, Number(data.WimFileNameOffset), true);
  // 0x0c: u32
  if (data?.WimFileNameLength !== undefined) view.setUint32(12, Number(data.WimFileNameLength), true);
  return buf;
}

export class WIM_PROVIDER_ADD_OVERLAY_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get WimType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get WimIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get WimFileNameOffset(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get WimFileNameLength(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set WimType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set WimIndex(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set WimFileNameOffset(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set WimFileNameLength(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.WIM_PROVIDER_UPDATE_OVERLAY_INPUT (size: 16)
 */
export interface WIM_PROVIDER_UPDATE_OVERLAY_INPUT {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  DataSourceId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  WimFileNameOffset: number;
  /** u32 */
  WimFileNameLength: number;
}

export const sizeofWIM_PROVIDER_UPDATE_OVERLAY_INPUT = 16;

export function allocWIM_PROVIDER_UPDATE_OVERLAY_INPUT(data?: Partial<WIM_PROVIDER_UPDATE_OVERLAY_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofWIM_PROVIDER_UPDATE_OVERLAY_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataSourceId !== undefined) view.setBigUint64(0, data.DataSourceId === null ? 0n : util.toBigInt(util.toPointer(data.DataSourceId)), true);
  // 0x08: u32
  if (data?.WimFileNameOffset !== undefined) view.setUint32(8, Number(data.WimFileNameOffset), true);
  // 0x0c: u32
  if (data?.WimFileNameLength !== undefined) view.setUint32(12, Number(data.WimFileNameLength), true);
  return buf;
}

export class WIM_PROVIDER_UPDATE_OVERLAY_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DataSourceId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get WimFileNameOffset(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get WimFileNameLength(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set DataSourceId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set WimFileNameOffset(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set WimFileNameLength(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.WIM_PROVIDER_REMOVE_OVERLAY_INPUT (size: 8)
 */
export interface WIM_PROVIDER_REMOVE_OVERLAY_INPUT {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  DataSourceId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWIM_PROVIDER_REMOVE_OVERLAY_INPUT = 8;

export function allocWIM_PROVIDER_REMOVE_OVERLAY_INPUT(data?: Partial<WIM_PROVIDER_REMOVE_OVERLAY_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofWIM_PROVIDER_REMOVE_OVERLAY_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataSourceId !== undefined) view.setBigUint64(0, data.DataSourceId === null ? 0n : util.toBigInt(util.toPointer(data.DataSourceId)), true);
  return buf;
}

export class WIM_PROVIDER_REMOVE_OVERLAY_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DataSourceId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set DataSourceId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.WIM_PROVIDER_SUSPEND_OVERLAY_INPUT (size: 8)
 */
export interface WIM_PROVIDER_SUSPEND_OVERLAY_INPUT {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  DataSourceId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWIM_PROVIDER_SUSPEND_OVERLAY_INPUT = 8;

export function allocWIM_PROVIDER_SUSPEND_OVERLAY_INPUT(data?: Partial<WIM_PROVIDER_SUSPEND_OVERLAY_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofWIM_PROVIDER_SUSPEND_OVERLAY_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataSourceId !== undefined) view.setBigUint64(0, data.DataSourceId === null ? 0n : util.toBigInt(util.toPointer(data.DataSourceId)), true);
  return buf;
}

export class WIM_PROVIDER_SUSPEND_OVERLAY_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DataSourceId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set DataSourceId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.WIM_PROVIDER_OVERLAY_ENTRY (size: 40)
 */
export interface WIM_PROVIDER_OVERLAY_ENTRY {
  /** u32 */
  NextEntryOffset: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  DataSourceId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  WimGuid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  WimFileNameOffset: number;
  /** u32 */
  WimType: number;
  /** u32 */
  WimIndex: number;
  /** u32 */
  Flags: number;
}

export const sizeofWIM_PROVIDER_OVERLAY_ENTRY = 40;

export function allocWIM_PROVIDER_OVERLAY_ENTRY(data?: Partial<WIM_PROVIDER_OVERLAY_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofWIM_PROVIDER_OVERLAY_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NextEntryOffset !== undefined) view.setUint32(0, Number(data.NextEntryOffset), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.DataSourceId !== undefined) view.setBigUint64(8, data.DataSourceId === null ? 0n : util.toBigInt(util.toPointer(data.DataSourceId)), true);
  // 0x10: pointer
  if (data?.WimGuid !== undefined) view.setBigUint64(16, data.WimGuid === null ? 0n : util.toBigInt(util.toPointer(data.WimGuid)), true);
  // 0x18: u32
  if (data?.WimFileNameOffset !== undefined) view.setUint32(24, Number(data.WimFileNameOffset), true);
  // 0x1c: u32
  if (data?.WimType !== undefined) view.setUint32(28, Number(data.WimType), true);
  // 0x20: u32
  if (data?.WimIndex !== undefined) view.setUint32(32, Number(data.WimIndex), true);
  // 0x24: u32
  if (data?.Flags !== undefined) view.setUint32(36, Number(data.Flags), true);
  return buf;
}

export class WIM_PROVIDER_OVERLAY_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NextEntryOffset(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get DataSourceId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get WimGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get WimFileNameOffset(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get WimType(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get WimIndex(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get Flags(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: u32
  set NextEntryOffset(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set DataSourceId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set WimGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set WimFileNameOffset(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set WimType(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set WimIndex(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set Flags(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FILE_PROVIDER_EXTERNAL_INFO_V0 (size: 8)
 */
export interface FILE_PROVIDER_EXTERNAL_INFO_V0 {
  /** u32 */
  Version: number;
  /** u32 */
  Algorithm: number;
}

export const sizeofFILE_PROVIDER_EXTERNAL_INFO_V0 = 8;

export function allocFILE_PROVIDER_EXTERNAL_INFO_V0(data?: Partial<FILE_PROVIDER_EXTERNAL_INFO_V0>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_PROVIDER_EXTERNAL_INFO_V0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Algorithm !== undefined) view.setUint32(4, Number(data.Algorithm), true);
  return buf;
}

export class FILE_PROVIDER_EXTERNAL_INFO_V0View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Algorithm(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Algorithm(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FILE_PROVIDER_EXTERNAL_INFO_V1 (size: 16)
 */
export interface FILE_PROVIDER_EXTERNAL_INFO_V1 {
  /** u32 */
  Version: number;
  /** u32 */
  Algorithm: number;
  /** u32 */
  Flags: number;
}

export const sizeofFILE_PROVIDER_EXTERNAL_INFO_V1 = 16;

export function allocFILE_PROVIDER_EXTERNAL_INFO_V1(data?: Partial<FILE_PROVIDER_EXTERNAL_INFO_V1>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_PROVIDER_EXTERNAL_INFO_V1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Algorithm !== undefined) view.setUint32(4, Number(data.Algorithm), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: pad4
  return buf;
}

export class FILE_PROVIDER_EXTERNAL_INFO_V1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Algorithm(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Algorithm(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Ioctl.CONTAINER_VOLUME_STATE (size: 8)
 */
export interface CONTAINER_VOLUME_STATE {
  /** u32 */
  Flags: number;
}

export const sizeofCONTAINER_VOLUME_STATE = 8;

export function allocCONTAINER_VOLUME_STATE(data?: Partial<CONTAINER_VOLUME_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofCONTAINER_VOLUME_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  return buf;
}

export class CONTAINER_VOLUME_STATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Ioctl.CONTAINER_ROOT_INFO_INPUT (size: 8)
 */
export interface CONTAINER_ROOT_INFO_INPUT {
  /** u32 */
  Flags: number;
}

export const sizeofCONTAINER_ROOT_INFO_INPUT = 8;

export function allocCONTAINER_ROOT_INFO_INPUT(data?: Partial<CONTAINER_ROOT_INFO_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofCONTAINER_ROOT_INFO_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  return buf;
}

export class CONTAINER_ROOT_INFO_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Ioctl.CONTAINER_ROOT_INFO_OUTPUT (size: 16)
 */
export interface CONTAINER_ROOT_INFO_OUTPUT {
  /** u16 */
  ContainerRootIdLength: number;
  /** array */
  ContainerRootId: Deno.PointerValue | null;
}

export const sizeofCONTAINER_ROOT_INFO_OUTPUT = 16;

export function allocCONTAINER_ROOT_INFO_OUTPUT(data?: Partial<CONTAINER_ROOT_INFO_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofCONTAINER_ROOT_INFO_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ContainerRootIdLength !== undefined) view.setUint16(0, Number(data.ContainerRootIdLength), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.ContainerRootId !== undefined) view.setBigUint64(8, data.ContainerRootId === null ? 0n : util.toBigInt(util.toPointer(data.ContainerRootId)), true);
  return buf;
}

export class CONTAINER_ROOT_INFO_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get ContainerRootIdLength(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get ContainerRootId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set ContainerRootIdLength(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set ContainerRootId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.VIRTUALIZATION_INSTANCE_INFO_INPUT (size: 8)
 */
export interface VIRTUALIZATION_INSTANCE_INFO_INPUT {
  /** u32 */
  NumberOfWorkerThreads: number;
  /** u32 */
  Flags: number;
}

export const sizeofVIRTUALIZATION_INSTANCE_INFO_INPUT = 8;

export function allocVIRTUALIZATION_INSTANCE_INFO_INPUT(data?: Partial<VIRTUALIZATION_INSTANCE_INFO_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofVIRTUALIZATION_INSTANCE_INFO_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumberOfWorkerThreads !== undefined) view.setUint32(0, Number(data.NumberOfWorkerThreads), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  return buf;
}

export class VIRTUALIZATION_INSTANCE_INFO_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumberOfWorkerThreads(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set NumberOfWorkerThreads(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Ioctl.VIRTUALIZATION_INSTANCE_INFO_INPUT_EX (size: 16)
 */
export interface VIRTUALIZATION_INSTANCE_INFO_INPUT_EX {
  /** u16 */
  HeaderSize: number;
  /** u32 */
  Flags: number;
  /** u32 */
  NotificationInfoSize: number;
  /** u16 */
  NotificationInfoOffset: number;
  /** u16 */
  ProviderMajorVersion: number;
}

export const sizeofVIRTUALIZATION_INSTANCE_INFO_INPUT_EX = 16;

export function allocVIRTUALIZATION_INSTANCE_INFO_INPUT_EX(data?: Partial<VIRTUALIZATION_INSTANCE_INFO_INPUT_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofVIRTUALIZATION_INSTANCE_INFO_INPUT_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.HeaderSize !== undefined) view.setUint16(0, Number(data.HeaderSize), true);
  // 0x02: u32
  if (data?.Flags !== undefined) view.setUint32(2, Number(data.Flags), true);
  // 0x06: u32
  if (data?.NotificationInfoSize !== undefined) view.setUint32(6, Number(data.NotificationInfoSize), true);
  // 0x0a: u16
  if (data?.NotificationInfoOffset !== undefined) view.setUint16(10, Number(data.NotificationInfoOffset), true);
  // 0x0c: u16
  if (data?.ProviderMajorVersion !== undefined) view.setUint16(12, Number(data.ProviderMajorVersion), true);
  // 0x0e: pad2
  return buf;
}

export class VIRTUALIZATION_INSTANCE_INFO_INPUT_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get HeaderSize(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u32
  get Flags(): number {
    return this.view.getUint32(2, true);
  }

  // 0x06: u32
  get NotificationInfoSize(): number {
    return this.view.getUint32(6, true);
  }

  // 0x0a: u16
  get NotificationInfoOffset(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u16
  get ProviderMajorVersion(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: pad2

  // 0x00: u16
  set HeaderSize(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u32
  set Flags(value: number) {
    this.view.setUint32(2, value, true);
  }

  // 0x06: u32
  set NotificationInfoSize(value: number) {
    this.view.setUint32(6, value, true);
  }

  // 0x0a: u16
  set NotificationInfoOffset(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u16
  set ProviderMajorVersion(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: pad2
}

/**
 * Windows.Win32.System.Ioctl.VIRTUALIZATION_INSTANCE_INFO_OUTPUT (size: 8)
 */
export interface VIRTUALIZATION_INSTANCE_INFO_OUTPUT {
  /** System.Guid */
  VirtualizationInstanceID: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVIRTUALIZATION_INSTANCE_INFO_OUTPUT = 8;

export function allocVIRTUALIZATION_INSTANCE_INFO_OUTPUT(data?: Partial<VIRTUALIZATION_INSTANCE_INFO_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofVIRTUALIZATION_INSTANCE_INFO_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.VirtualizationInstanceID !== undefined) view.setBigUint64(0, data.VirtualizationInstanceID === null ? 0n : util.toBigInt(util.toPointer(data.VirtualizationInstanceID)), true);
  return buf;
}

export class VIRTUALIZATION_INSTANCE_INFO_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get VirtualizationInstanceID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set VirtualizationInstanceID(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.GET_FILTER_FILE_IDENTIFIER_INPUT (size: 16)
 */
export interface GET_FILTER_FILE_IDENTIFIER_INPUT {
  /** u16 */
  AltitudeLength: number;
  /** array */
  Altitude: Deno.PointerValue | null;
}

export const sizeofGET_FILTER_FILE_IDENTIFIER_INPUT = 16;

export function allocGET_FILTER_FILE_IDENTIFIER_INPUT(data?: Partial<GET_FILTER_FILE_IDENTIFIER_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofGET_FILTER_FILE_IDENTIFIER_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.AltitudeLength !== undefined) view.setUint16(0, Number(data.AltitudeLength), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Altitude !== undefined) view.setBigUint64(8, data.Altitude === null ? 0n : util.toBigInt(util.toPointer(data.Altitude)), true);
  return buf;
}

export class GET_FILTER_FILE_IDENTIFIER_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get AltitudeLength(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get Altitude(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set AltitudeLength(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set Altitude(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.GET_FILTER_FILE_IDENTIFIER_OUTPUT (size: 16)
 */
export interface GET_FILTER_FILE_IDENTIFIER_OUTPUT {
  /** u16 */
  FilterFileIdentifierLength: number;
  /** array */
  FilterFileIdentifier: Deno.PointerValue | null;
}

export const sizeofGET_FILTER_FILE_IDENTIFIER_OUTPUT = 16;

export function allocGET_FILTER_FILE_IDENTIFIER_OUTPUT(data?: Partial<GET_FILTER_FILE_IDENTIFIER_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofGET_FILTER_FILE_IDENTIFIER_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.FilterFileIdentifierLength !== undefined) view.setUint16(0, Number(data.FilterFileIdentifierLength), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.FilterFileIdentifier !== undefined) view.setBigUint64(8, data.FilterFileIdentifier === null ? 0n : util.toBigInt(util.toPointer(data.FilterFileIdentifier)), true);
  return buf;
}

export class GET_FILTER_FILE_IDENTIFIER_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get FilterFileIdentifierLength(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get FilterFileIdentifier(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set FilterFileIdentifierLength(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set FilterFileIdentifier(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FS_BPIO_INPUT (size: 24)
 */
export interface FS_BPIO_INPUT {
  /** Windows.Win32.System.Ioctl.FS_BPIO_OPERATIONS */
  Operation: FS_BPIO_OPERATIONS;
  /** Windows.Win32.System.Ioctl.FS_BPIO_INFLAGS */
  InFlags: FS_BPIO_INFLAGS;
  /** u64 */
  Reserved1: number | bigint;
  /** u64 */
  Reserved2: number | bigint;
}

export const sizeofFS_BPIO_INPUT = 24;

export function allocFS_BPIO_INPUT(data?: Partial<FS_BPIO_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofFS_BPIO_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Operation !== undefined) view.setInt32(0, Number(data.Operation), true);
  // 0x04: i32
  if (data?.InFlags !== undefined) view.setInt32(4, Number(data.InFlags), true);
  // 0x08: u64
  if (data?.Reserved1 !== undefined) view.setBigUint64(8, util.toBigInt(data.Reserved1), true);
  // 0x10: u64
  if (data?.Reserved2 !== undefined) view.setBigUint64(16, util.toBigInt(data.Reserved2), true);
  return buf;
}

export class FS_BPIO_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Operation(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get InFlags(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u64
  get Reserved1(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get Reserved2(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x00: i32
  set Operation(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set InFlags(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u64
  set Reserved1(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set Reserved2(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FS_BPIO_RESULTS (size: 32)
 */
export interface FS_BPIO_RESULTS {
  /** u32 */
  OpStatus: number;
  /** u16 */
  FailingDriverNameLen: number;
  /** array */
  FailingDriverName: Deno.PointerValue | null;
  /** u16 */
  FailureReasonLen: number;
  /** array */
  FailureReason: Deno.PointerValue | null;
}

export const sizeofFS_BPIO_RESULTS = 32;

export function allocFS_BPIO_RESULTS(data?: Partial<FS_BPIO_RESULTS>): Uint8Array {
  const buf = new Uint8Array(sizeofFS_BPIO_RESULTS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.OpStatus !== undefined) view.setUint32(0, Number(data.OpStatus), true);
  // 0x04: u16
  if (data?.FailingDriverNameLen !== undefined) view.setUint16(4, Number(data.FailingDriverNameLen), true);
  // 0x06: pad2
  // 0x08: pointer
  if (data?.FailingDriverName !== undefined) view.setBigUint64(8, data.FailingDriverName === null ? 0n : util.toBigInt(util.toPointer(data.FailingDriverName)), true);
  // 0x10: u16
  if (data?.FailureReasonLen !== undefined) view.setUint16(16, Number(data.FailureReasonLen), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.FailureReason !== undefined) view.setBigUint64(24, data.FailureReason === null ? 0n : util.toBigInt(util.toPointer(data.FailureReason)), true);
  return buf;
}

export class FS_BPIO_RESULTSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get OpStatus(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get FailingDriverNameLen(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: pad2

  // 0x08: pointer
  get FailingDriverName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u16
  get FailureReasonLen(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  get FailureReason(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set OpStatus(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set FailingDriverNameLen(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: pad2

  // 0x08: pointer
  set FailingDriverName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u16
  set FailureReasonLen(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  set FailureReason(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FS_BPIO_INFO (size: 16)
 */
export interface FS_BPIO_INFO {
  /** u32 */
  ActiveBypassIoCount: number;
  /** u16 */
  StorageDriverNameLen: number;
  /** array */
  StorageDriverName: Deno.PointerValue | null;
}

export const sizeofFS_BPIO_INFO = 16;

export function allocFS_BPIO_INFO(data?: Partial<FS_BPIO_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofFS_BPIO_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ActiveBypassIoCount !== undefined) view.setUint32(0, Number(data.ActiveBypassIoCount), true);
  // 0x04: u16
  if (data?.StorageDriverNameLen !== undefined) view.setUint16(4, Number(data.StorageDriverNameLen), true);
  // 0x06: pad2
  // 0x08: pointer
  if (data?.StorageDriverName !== undefined) view.setBigUint64(8, data.StorageDriverName === null ? 0n : util.toBigInt(util.toPointer(data.StorageDriverName)), true);
  return buf;
}

export class FS_BPIO_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ActiveBypassIoCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get StorageDriverNameLen(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: pad2

  // 0x08: pointer
  get StorageDriverName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ActiveBypassIoCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set StorageDriverNameLen(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: pad2

  // 0x08: pointer
  set StorageDriverName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.FS_BPIO_OUTPUT (size: 32)
 */
export interface FS_BPIO_OUTPUT {
  /** Windows.Win32.System.Ioctl.FS_BPIO_OPERATIONS */
  Operation: FS_BPIO_OPERATIONS;
  /** Windows.Win32.System.Ioctl.FS_BPIO_OUTFLAGS */
  OutFlags: FS_BPIO_OUTFLAGS;
  /** u64 */
  Reserved1: number | bigint;
  /** u64 */
  Reserved2: number | bigint;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFS_BPIO_OUTPUT = 32;

export function allocFS_BPIO_OUTPUT(data?: Partial<FS_BPIO_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofFS_BPIO_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Operation !== undefined) view.setInt32(0, Number(data.Operation), true);
  // 0x04: i32
  if (data?.OutFlags !== undefined) view.setInt32(4, Number(data.OutFlags), true);
  // 0x08: u64
  if (data?.Reserved1 !== undefined) view.setBigUint64(8, util.toBigInt(data.Reserved1), true);
  // 0x10: u64
  if (data?.Reserved2 !== undefined) view.setBigUint64(16, util.toBigInt(data.Reserved2), true);
  // 0x18: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(24, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class FS_BPIO_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Operation(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get OutFlags(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u64
  get Reserved1(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get Reserved2(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set Operation(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set OutFlags(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u64
  set Reserved1(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set Reserved2(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.SMB_SHARE_FLUSH_AND_PURGE_INPUT (size: 8)
 */
export interface SMB_SHARE_FLUSH_AND_PURGE_INPUT {
  /** u16 */
  Version: number;
}

export const sizeofSMB_SHARE_FLUSH_AND_PURGE_INPUT = 8;

export function allocSMB_SHARE_FLUSH_AND_PURGE_INPUT(data?: Partial<SMB_SHARE_FLUSH_AND_PURGE_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofSMB_SHARE_FLUSH_AND_PURGE_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Version !== undefined) view.setUint16(0, Number(data.Version), true);
  // 0x02: pad6
  return buf;
}

export class SMB_SHARE_FLUSH_AND_PURGE_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Version(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x00: u16
  set Version(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6
}

/**
 * Windows.Win32.System.Ioctl.SMB_SHARE_FLUSH_AND_PURGE_OUTPUT (size: 8)
 */
export interface SMB_SHARE_FLUSH_AND_PURGE_OUTPUT {
  /** u32 */
  cEntriesPurged: number;
}

export const sizeofSMB_SHARE_FLUSH_AND_PURGE_OUTPUT = 8;

export function allocSMB_SHARE_FLUSH_AND_PURGE_OUTPUT(data?: Partial<SMB_SHARE_FLUSH_AND_PURGE_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofSMB_SHARE_FLUSH_AND_PURGE_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cEntriesPurged !== undefined) view.setUint32(0, Number(data.cEntriesPurged), true);
  // 0x04: pad4
  return buf;
}

export class SMB_SHARE_FLUSH_AND_PURGE_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cEntriesPurged(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set cEntriesPurged(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Ioctl.DISK_EXTENT (size: 24)
 */
export interface DISK_EXTENT {
  /** u32 */
  DiskNumber: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  StartingOffset: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ExtentLength: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDISK_EXTENT = 24;

export function allocDISK_EXTENT(data?: Partial<DISK_EXTENT>): Uint8Array {
  const buf = new Uint8Array(sizeofDISK_EXTENT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DiskNumber !== undefined) view.setUint32(0, Number(data.DiskNumber), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.StartingOffset !== undefined) view.setBigUint64(8, data.StartingOffset === null ? 0n : util.toBigInt(util.toPointer(data.StartingOffset)), true);
  // 0x10: pointer
  if (data?.ExtentLength !== undefined) view.setBigUint64(16, data.ExtentLength === null ? 0n : util.toBigInt(util.toPointer(data.ExtentLength)), true);
  return buf;
}

export class DISK_EXTENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get DiskNumber(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get StartingOffset(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get ExtentLength(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set DiskNumber(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set StartingOffset(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set ExtentLength(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.VOLUME_DISK_EXTENTS (size: 16)
 */
export interface VOLUME_DISK_EXTENTS {
  /** u32 */
  NumberOfDiskExtents: number;
  /** array */
  Extents: Deno.PointerValue | null;
}

export const sizeofVOLUME_DISK_EXTENTS = 16;

export function allocVOLUME_DISK_EXTENTS(data?: Partial<VOLUME_DISK_EXTENTS>): Uint8Array {
  const buf = new Uint8Array(sizeofVOLUME_DISK_EXTENTS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumberOfDiskExtents !== undefined) view.setUint32(0, Number(data.NumberOfDiskExtents), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Extents !== undefined) view.setBigUint64(8, data.Extents === null ? 0n : util.toBigInt(util.toPointer(data.Extents)), true);
  return buf;
}

export class VOLUME_DISK_EXTENTSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumberOfDiskExtents(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Extents(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set NumberOfDiskExtents(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Extents(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.VOLUME_GET_GPT_ATTRIBUTES_INFORMATION (size: 8)
 */
export interface VOLUME_GET_GPT_ATTRIBUTES_INFORMATION {
  /** u64 */
  GptAttributes: number | bigint;
}

export const sizeofVOLUME_GET_GPT_ATTRIBUTES_INFORMATION = 8;

export function allocVOLUME_GET_GPT_ATTRIBUTES_INFORMATION(data?: Partial<VOLUME_GET_GPT_ATTRIBUTES_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofVOLUME_GET_GPT_ATTRIBUTES_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.GptAttributes !== undefined) view.setBigUint64(0, util.toBigInt(data.GptAttributes), true);
  return buf;
}

export class VOLUME_GET_GPT_ATTRIBUTES_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get GptAttributes(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x00: u64
  set GptAttributes(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Ioctl.IO_IRP_EXT_TRACK_OFFSET_HEADER (size: 16)
 */
export interface IO_IRP_EXT_TRACK_OFFSET_HEADER {
  /** u16 */
  Validation: number;
  /** u16 */
  Flags: number;
  /** Windows.Win32.System.Ioctl.PIO_IRP_EXT_PROCESS_TRACKED_OFFSET_CALLBACK */
  TrackedOffsetCallback: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIO_IRP_EXT_TRACK_OFFSET_HEADER = 16;

export function allocIO_IRP_EXT_TRACK_OFFSET_HEADER(data?: Partial<IO_IRP_EXT_TRACK_OFFSET_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofIO_IRP_EXT_TRACK_OFFSET_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Validation !== undefined) view.setUint16(0, Number(data.Validation), true);
  // 0x02: u16
  if (data?.Flags !== undefined) view.setUint16(2, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.TrackedOffsetCallback !== undefined) view.setBigUint64(8, data.TrackedOffsetCallback === null ? 0n : util.toBigInt(util.toPointer(data.TrackedOffsetCallback)), true);
  return buf;
}

export class IO_IRP_EXT_TRACK_OFFSET_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Validation(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Flags(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get TrackedOffsetCallback(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set Validation(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Flags(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set TrackedOffsetCallback(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

// Native Libraries

// Symbols

