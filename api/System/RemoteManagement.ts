/// Auto-generated by Deno Win32: Windows.Win32.System.RemoteManagement.Apis

import * as util from "../../util.ts";

// Enums
export type WSManDataType = number;
export type WSManAuthenticationFlags = number;
export type WSManProxyAccessType = number;
export type WSManSessionOption = number;
export type WSManCallbackFlags = number;
export type WSManShellFlag = number;
export type WSManSessionFlags = number;
export type WSManEnumFlags = number;
export type WSManProxyAccessTypeFlags = number;
export type WSManProxyAuthenticationFlags = number;

// Constants
export const WSMAN_FLAG_REQUESTED_API_VERSION_1_0 = 0;
export const WSMAN_FLAG_REQUESTED_API_VERSION_1_1 = 1;
export const WSMAN_OPERATION_INFOV1 = 0;
export const WSMAN_OPERATION_INFOV2 = 2864434397;
export const WSMAN_DEFAULT_TIMEOUT_MS = 60000;
export const WSMAN_STREAM_ID_STDIN = `stdin`;
export const WSMAN_STREAM_ID_STDOUT = `stdout`;
export const WSMAN_STREAM_ID_STDERR = `stderr`;
export const WSMAN_SHELL_NS = `http://schemas.microsoft.com/wbem/wsman/1/windows/shell`;
export const WSMAN_CMDSHELL_OPTION_CODEPAGE = `WINRS_CODEPAGE`;
export const WSMAN_SHELL_OPTION_NOPROFILE = `WINRS_NOPROFILE`;
export const WSMAN_CMDSHELL_OPTION_CONSOLEMODE_STDIN = `WINRS_CONSOLEMODE_STDIN`;
export const WSMAN_CMDSHELL_OPTION_SKIP_CMD_SHELL = `WINRS_SKIP_CMD_SHELL`;
export const WSMAN_FLAG_RECEIVE_RESULT_NO_MORE_DATA = 1;
export const WSMAN_FLAG_RECEIVE_FLUSH = 2;
export const WSMAN_FLAG_RECEIVE_RESULT_DATA_BOUNDARY = 4;
export const WSMAN_PLUGIN_PARAMS_MAX_ENVELOPE_SIZE = 1;
export const WSMAN_PLUGIN_PARAMS_TIMEOUT = 2;
export const WSMAN_PLUGIN_PARAMS_REMAINING_RESULT_SIZE = 3;
export const WSMAN_PLUGIN_PARAMS_LARGEST_RESULT_SIZE = 4;
export const WSMAN_PLUGIN_PARAMS_GET_REQUESTED_LOCALE = 5;
export const WSMAN_PLUGIN_PARAMS_GET_REQUESTED_DATA_LOCALE = 6;
export const WSMAN_PLUGIN_PARAMS_SHAREDHOST = 1;
export const WSMAN_PLUGIN_PARAMS_RUNAS_USER = 2;
export const WSMAN_PLUGIN_PARAMS_AUTORESTART = 3;
export const WSMAN_PLUGIN_PARAMS_HOSTIDLETIMEOUTSECONDS = 4;
export const WSMAN_PLUGIN_PARAMS_NAME = 5;
export const WSMAN_PLUGIN_STARTUP_REQUEST_RECEIVED = 0;
export const WSMAN_PLUGIN_STARTUP_AUTORESTARTED_REBOOT = 1;
export const WSMAN_PLUGIN_STARTUP_AUTORESTARTED_CRASH = 2;
export const WSMAN_PLUGIN_SHUTDOWN_SYSTEM = 1;
export const WSMAN_PLUGIN_SHUTDOWN_SERVICE = 2;
export const WSMAN_PLUGIN_SHUTDOWN_IISHOST = 3;
export const WSMAN_PLUGIN_SHUTDOWN_IDLETIMEOUT_ELAPSED = 4;
export const WSMAN_FLAG_SEND_NO_MORE_DATA = 1;
export const ERROR_WSMAN_RESOURCE_NOT_FOUND = 2150858752;
export const ERROR_WSMAN_INVALID_ACTIONURI = 2150858753;
export const ERROR_WSMAN_INVALID_URI = 2150858754;
export const ERROR_WSMAN_PROVIDER_FAILURE = 2150858755;
export const ERROR_WSMAN_BATCH_COMPLETE = 2150858756;
export const ERROR_WSMAN_CONFIG_CORRUPTED = 2150858757;
export const ERROR_WSMAN_PULL_IN_PROGRESS = 2150858758;
export const ERROR_WSMAN_ENUMERATION_CLOSED = 2150858759;
export const ERROR_WSMAN_SUBSCRIPTION_CLOSED = 2150858760;
export const ERROR_WSMAN_SUBSCRIPTION_CLOSE_IN_PROGRESS = 2150858761;
export const ERROR_WSMAN_SUBSCRIPTION_CLIENT_DID_NOT_CALL_WITHIN_HEARTBEAT = 2150858762;
export const ERROR_WSMAN_SUBSCRIPTION_NO_HEARTBEAT = 2150858763;
export const ERROR_WSMAN_UNSUPPORTED_TIMEOUT = 2150858764;
export const ERROR_WSMAN_SOAP_VERSION_MISMATCH = 2150858765;
export const ERROR_WSMAN_SOAP_DATA_ENCODING_UNKNOWN = 2150858766;
export const ERROR_WSMAN_INVALID_MESSAGE_INFORMATION_HEADER = 2150858767;
export const ERROR_WSMAN_SOAP_FAULT_MUST_UNDERSTAND = 2150858768;
export const ERROR_WSMAN_MESSAGE_INFORMATION_HEADER_REQUIRED = 2150858769;
export const ERROR_WSMAN_DESTINATION_UNREACHABLE = 2150858770;
export const ERROR_WSMAN_ACTION_NOT_SUPPORTED = 2150858771;
export const ERROR_WSMAN_ENDPOINT_UNAVAILABLE = 2150858772;
export const ERROR_WSMAN_INVALID_REPRESENTATION = 2150858773;
export const ERROR_WSMAN_ENUMERATE_INVALID_EXPIRATION_TIME = 2150858774;
export const ERROR_WSMAN_ENUMERATE_UNSUPPORTED_EXPIRATION_TIME = 2150858775;
export const ERROR_WSMAN_ENUMERATE_FILTERING_NOT_SUPPORTED = 2150858776;
export const ERROR_WSMAN_ENUMERATE_FILTER_DIALECT_REQUESTED_UNAVAILABLE = 2150858777;
export const ERROR_WSMAN_ENUMERATE_CANNOT_PROCESS_FILTER = 2150858778;
export const ERROR_WSMAN_ENUMERATE_INVALID_ENUMERATION_CONTEXT = 2150858779;
export const ERROR_WSMAN_ENUMERATE_TIMED_OUT = 2150858780;
export const ERROR_WSMAN_ENUMERATE_UNABLE_TO_RENEW = 2150858781;
export const ERROR_WSMAN_EVENTING_DELIVERY_MODE_REQUESTED_UNAVAILABLE = 2150858782;
export const ERROR_WSMAN_EVENTING_INVALID_EXPIRATION_TIME = 2150858783;
export const ERROR_WSMAN_EVENTING_UNSUPPORTED_EXPIRATION_TYPE = 2150858784;
export const ERROR_WSMAN_EVENTING_FILTERING_NOT_SUPPORTED = 2150858785;
export const ERROR_WSMAN_EVENTING_FILTERING_REQUESTED_UNAVAILABLE = 2150858786;
export const ERROR_WSMAN_EVENTING_SOURCE_UNABLE_TO_PROCESS = 2150858787;
export const ERROR_WSMAN_EVENTING_UNABLE_TO_RENEW = 2150858788;
export const ERROR_WSMAN_EVENTING_INVALID_MESSAGE = 2150858789;
export const ERROR_WSMAN_ENVELOPE_TOO_LARGE = 2150858790;
export const ERROR_WSMAN_INVALID_SOAP_BODY = 2150858791;
export const ERROR_WSMAN_INVALID_RESUMPTION_CONTEXT = 2150858792;
export const ERROR_WSMAN_OPERATION_TIMEDOUT = 2150858793;
export const ERROR_WSMAN_RESUMPTION_NOT_SUPPORTED = 2150858794;
export const ERROR_WSMAN_RESUMPTION_TYPE_NOT_SUPPORTED = 2150858795;
export const ERROR_WSMAN_UNSUPPORTED_ENCODING = 2150858796;
export const ERROR_WSMAN_URI_LIMIT = 2150858797;
export const ERROR_WSMAN_INVALID_PROPOSED_ID = 2150858798;
export const ERROR_WSMAN_INVALID_BATCH_PARAMETER = 2150858799;
export const ERROR_WSMAN_NO_ACK = 2150858800;
export const ERROR_WSMAN_ACTION_MISMATCH = 2150858801;
export const ERROR_WSMAN_CONCURRENCY = 2150858802;
export const ERROR_WSMAN_ALREADY_EXISTS = 2150858803;
export const ERROR_WSMAN_DELIVERY_REFUSED = 2150858804;
export const ERROR_WSMAN_ENCODING_LIMIT = 2150858805;
export const ERROR_WSMAN_FAILED_AUTHENTICATION = 2150858806;
export const ERROR_WSMAN_INCOMPATIBLE_EPR = 2150858807;
export const ERROR_WSMAN_INVALID_BOOKMARK = 2150858808;
export const ERROR_WSMAN_INVALID_OPTIONS = 2150858809;
export const ERROR_WSMAN_INVALID_PARAMETER = 2150858810;
export const ERROR_WSMAN_INVALID_RESOURCE_URI = 2150858811;
export const ERROR_WSMAN_INVALID_SYSTEM = 2150858812;
export const ERROR_WSMAN_INVALID_SELECTORS = 2150858813;
export const ERROR_WSMAN_METADATA_REDIRECT = 2150858814;
export const ERROR_WSMAN_QUOTA_LIMIT = 2150858815;
export const ERROR_WSMAN_RENAME_FAILURE = 2150858816;
export const ERROR_WSMAN_SCHEMA_VALIDATION_ERROR = 2150858817;
export const ERROR_WSMAN_UNSUPPORTED_FEATURE = 2150858818;
export const ERROR_WSMAN_INVALID_XML = 2150858819;
export const ERROR_WSMAN_INVALID_KEY = 2150858820;
export const ERROR_WSMAN_DELIVER_IN_PROGRESS = 2150858821;
export const ERROR_WSMAN_SYSTEM_NOT_FOUND = 2150858822;
export const ERROR_WSMAN_MAX_ENVELOPE_SIZE = 2150858823;
export const ERROR_WSMAN_MAX_ENVELOPE_SIZE_EXCEEDED = 2150858824;
export const ERROR_WSMAN_SERVER_ENVELOPE_LIMIT = 2150858825;
export const ERROR_WSMAN_SELECTOR_LIMIT = 2150858826;
export const ERROR_WSMAN_OPTION_LIMIT = 2150858827;
export const ERROR_WSMAN_CHARACTER_SET = 2150858828;
export const ERROR_WSMAN_UNREPORTABLE_SUCCESS = 2150858829;
export const ERROR_WSMAN_WHITESPACE = 2150858830;
export const ERROR_WSMAN_FILTERING_REQUIRED = 2150858831;
export const ERROR_WSMAN_BOOKMARK_EXPIRED = 2150858832;
export const ERROR_WSMAN_OPTIONS_NOT_SUPPORTED = 2150858833;
export const ERROR_WSMAN_OPTIONS_INVALID_NAME = 2150858834;
export const ERROR_WSMAN_OPTIONS_INVALID_VALUE = 2150858835;
export const ERROR_WSMAN_PARAMETER_TYPE_MISMATCH = 2150858836;
export const ERROR_WSMAN_INVALID_PARAMETER_NAME = 2150858837;
export const ERROR_WSMAN_INVALID_XML_VALUES = 2150858838;
export const ERROR_WSMAN_INVALID_XML_MISSING_VALUES = 2150858839;
export const ERROR_WSMAN_INVALID_XML_NAMESPACE = 2150858840;
export const ERROR_WSMAN_INVALID_XML_FRAGMENT = 2150858841;
export const ERROR_WSMAN_INSUFFCIENT_SELECTORS = 2150858842;
export const ERROR_WSMAN_UNEXPECTED_SELECTORS = 2150858843;
export const ERROR_WSMAN_SELECTOR_TYPEMISMATCH = 2150858844;
export const ERROR_WSMAN_INVALID_SELECTOR_VALUE = 2150858845;
export const ERROR_WSMAN_AMBIGUOUS_SELECTORS = 2150858846;
export const ERROR_WSMAN_DUPLICATE_SELECTORS = 2150858847;
export const ERROR_WSMAN_INVALID_TARGET_SELECTORS = 2150858848;
export const ERROR_WSMAN_INVALID_TARGET_RESOURCEURI = 2150858849;
export const ERROR_WSMAN_INVALID_TARGET_SYSTEM = 2150858850;
export const ERROR_WSMAN_TARGET_ALREADY_EXISTS = 2150858851;
export const ERROR_WSMAN_AUTHORIZATION_MODE_NOT_SUPPORTED = 2150858852;
export const ERROR_WSMAN_ACK_NOT_SUPPORTED = 2150858853;
export const ERROR_WSMAN_OPERATION_TIMEOUT_NOT_SUPPORTED = 2150858854;
export const ERROR_WSMAN_LOCALE_NOT_SUPPORTED = 2150858855;
export const ERROR_WSMAN_EXPIRATION_TIME_NOT_SUPPORTED = 2150858856;
export const ERROR_WSMAN_DELIVERY_RETRIES_NOT_SUPPORTED = 2150858857;
export const ERROR_WSMAN_HEARTBEATS_NOT_SUPPORTED = 2150858858;
export const ERROR_WSMAN_BOOKMARKS_NOT_SUPPORTED = 2150858859;
export const ERROR_WSMAN_MAXITEMS_NOT_SUPPORTED = 2150858860;
export const ERROR_WSMAN_MAXTIME_NOT_SUPPORTED = 2150858861;
export const ERROR_WSMAN_MAXENVELOPE_SIZE_NOT_SUPPORTED = 2150858862;
export const ERROR_WSMAN_MAXENVELOPE_POLICY_NOT_SUPPORTED = 2150858863;
export const ERROR_WSMAN_FILTERING_REQUIRED_NOT_SUPPORTED = 2150858864;
export const ERROR_WSMAN_INSECURE_ADDRESS_NOT_SUPPORTED = 2150858865;
export const ERROR_WSMAN_FORMAT_MISMATCH_NOT_SUPPORTED = 2150858866;
export const ERROR_WSMAN_FORMAT_SECURITY_TOKEN_NOT_SUPPORTED = 2150858867;
export const ERROR_WSMAN_BAD_METHOD = 2150858868;
export const ERROR_WSMAN_UNSUPPORTED_MEDIA = 2150858869;
export const ERROR_WSMAN_UNSUPPORTED_ADDRESSING_MODE = 2150858870;
export const ERROR_WSMAN_FRAGMENT_TRANSFER_NOT_SUPPORTED = 2150858871;
export const ERROR_WSMAN_ENUMERATION_INITIALIZING = 2150858872;
export const ERROR_WSMAN_CONNECTOR_GET = 2150858873;
export const ERROR_WSMAN_URI_QUERY_STRING_SYNTAX_ERROR = 2150858874;
export const ERROR_WSMAN_INEXISTENT_MAC_ADDRESS = 2150858875;
export const ERROR_WSMAN_NO_UNICAST_ADDRESSES = 2150858876;
export const ERROR_WSMAN_NO_DHCP_ADDRESSES = 2150858877;
export const ERROR_WSMAN_MIN_ENVELOPE_SIZE = 2150858878;
export const ERROR_WSMAN_EPR_NESTING_EXCEEDED = 2150858879;
export const ERROR_WSMAN_REQUEST_INIT_ERROR = 2150858880;
export const ERROR_WSMAN_INVALID_TIMEOUT_HEADER = 2150858881;
export const ERROR_WSMAN_CERT_NOT_FOUND = 2150858882;
export const ERROR_WSMAN_PLUGIN_FAILED = 2150858883;
export const ERROR_WSMAN_ENUMERATION_INVALID = 2150858884;
export const ERROR_WSMAN_CONFIG_CANNOT_CHANGE_MUTUAL = 2150858885;
export const ERROR_WSMAN_ENUMERATION_MODE_UNSUPPORTED = 2150858886;
export const ERROR_WSMAN_MUSTUNDERSTAND_ON_LOCALE_UNSUPPORTED = 2150858887;
export const ERROR_WSMAN_POLICY_CORRUPTED = 2150858888;
export const ERROR_WSMAN_LISTENER_ADDRESS_INVALID = 2150858889;
export const ERROR_WSMAN_CONFIG_CANNOT_CHANGE_GPO_CONTROLLED_SETTING = 2150858890;
export const ERROR_WSMAN_EVENTING_CONCURRENT_CLIENT_RECEIVE = 2150858891;
export const ERROR_WSMAN_EVENTING_FAST_SENDER = 2150858892;
export const ERROR_WSMAN_EVENTING_INSECURE_PUSHSUBSCRIPTION_CONNECTION = 2150858893;
export const ERROR_WSMAN_EVENTING_INVALID_EVENTSOURCE = 2150858894;
export const ERROR_WSMAN_EVENTING_NOMATCHING_LISTENER = 2150858895;
export const ERROR_WSMAN_FRAGMENT_DIALECT_REQUESTED_UNAVAILABLE = 2150858896;
export const ERROR_WSMAN_MISSING_FRAGMENT_PATH = 2150858897;
export const ERROR_WSMAN_INVALID_FRAGMENT_DIALECT = 2150858898;
export const ERROR_WSMAN_INVALID_FRAGMENT_PATH = 2150858899;
export const ERROR_WSMAN_EVENTING_INCOMPATIBLE_BATCHPARAMS_AND_DELIVERYMODE = 2150858900;
export const ERROR_WSMAN_EVENTING_LOOPBACK_TESTFAILED = 2150858901;
export const ERROR_WSMAN_EVENTING_INVALID_ENDTO_ADDRESSS = 2150858902;
export const ERROR_WSMAN_EVENTING_INVALID_INCOMING_EVENT_PACKET_HEADER = 2150858903;
export const ERROR_WSMAN_SESSION_ALREADY_CLOSED = 2150858904;
export const ERROR_WSMAN_SUBSCRIPTION_LISTENER_NOLONGERVALID = 2150858905;
export const ERROR_WSMAN_PROVIDER_LOAD_FAILED = 2150858906;
export const ERROR_WSMAN_EVENTING_SUBSCRIPTIONCLOSED_BYREMOTESERVICE = 2150858907;
export const ERROR_WSMAN_EVENTING_DELIVERYFAILED_FROMSOURCE = 2150858908;
export const ERROR_WSMAN_SECURITY_UNMAPPED = 2150858909;
export const ERROR_WSMAN_EVENTING_SUBSCRIPTION_CANCELLED_BYSOURCE = 2150858910;
export const ERROR_WSMAN_INVALID_HOSTNAME_PATTERN = 2150858911;
export const ERROR_WSMAN_EVENTING_MISSING_NOTIFYTO = 2150858912;
export const ERROR_WSMAN_EVENTING_MISSING_NOTIFYTO_ADDRESSS = 2150858913;
export const ERROR_WSMAN_EVENTING_INVALID_NOTIFYTO_ADDRESSS = 2150858914;
export const ERROR_WSMAN_EVENTING_INVALID_LOCALE_IN_DELIVERY = 2150858915;
export const ERROR_WSMAN_EVENTING_INVALID_HEARTBEAT = 2150858916;
export const ERROR_WSMAN_MACHINE_OPTION_REQUIRED = 2150858917;
export const ERROR_WSMAN_UNSUPPORTED_FEATURE_OPTIONS = 2150858918;
export const ERROR_WSMAN_BATCHSIZE_TOO_SMALL = 2150858919;
export const ERROR_WSMAN_EVENTING_DELIVERY_MODE_REQUESTED_INVALID = 2150858920;
export const ERROR_WSMAN_PROVSYS_NOT_SUPPORTED = 2150858921;
export const ERROR_WSMAN_PUSH_SUBSCRIPTION_CONFIG_INVALID = 2150858922;
export const ERROR_WSMAN_CREDS_PASSED_WITH_NO_AUTH_FLAG = 2150858923;
export const ERROR_WSMAN_CLIENT_INVALID_FLAG = 2150858924;
export const ERROR_WSMAN_CLIENT_MULTIPLE_AUTH_FLAGS = 2150858925;
export const ERROR_WSMAN_CLIENT_SPN_WRONG_AUTH = 2150858926;
export const ERROR_WSMAN_CLIENT_CERT_UNNEEDED_CREDS = 2150858927;
export const ERROR_WSMAN_CLIENT_USERNAME_PASSWORD_NEEDED = 2150858928;
export const ERROR_WSMAN_CLIENT_CERT_UNNEEDED_USERNAME = 2150858929;
export const ERROR_WSMAN_CLIENT_CREDENTIALS_NEEDED = 2150858930;
export const ERROR_WSMAN_CLIENT_CREDENTIALS_FLAG_NEEDED = 2150858931;
export const ERROR_WSMAN_CLIENT_CERT_NEEDED = 2150858932;
export const ERROR_WSMAN_CLIENT_CERT_UNKNOWN_TYPE = 2150858933;
export const ERROR_WSMAN_CLIENT_CERT_UNKNOWN_LOCATION = 2150858934;
export const ERROR_WSMAN_CLIENT_INVALID_CERT = 2150858935;
export const ERROR_WSMAN_CLIENT_LOCAL_INVALID_CREDS = 2150858936;
export const ERROR_WSMAN_CLIENT_LOCAL_INVALID_CONNECTION_OPTIONS = 2150858937;
export const ERROR_WSMAN_CLIENT_CREATESESSION_NULL_PARAM = 2150858938;
export const ERROR_WSMAN_CLIENT_ENUMERATE_NULL_PARAM = 2150858939;
export const ERROR_WSMAN_CLIENT_SUBSCRIBE_NULL_PARAM = 2150858940;
export const ERROR_WSMAN_CLIENT_NULL_RESULT_PARAM = 2150858941;
export const ERROR_WSMAN_CLIENT_NO_HANDLE = 2150858942;
export const ERROR_WSMAN_CLIENT_BLANK_URI = 2150858943;
export const ERROR_WSMAN_CLIENT_INVALID_RESOURCE_LOCATOR = 2150858944;
export const ERROR_WSMAN_CLIENT_BLANK_INPUT_XML = 2150858945;
export const ERROR_WSMAN_CLIENT_BATCH_ITEMS_TOO_SMALL = 2150858946;
export const ERROR_WSMAN_CLIENT_MAX_CHARS_TOO_SMALL = 2150858947;
export const ERROR_WSMAN_CLIENT_BLANK_ACTION_URI = 2150858948;
export const ERROR_WSMAN_CLIENT_ZERO_HEARTBEAT = 2150858949;
export const ERROR_WSMAN_CLIENT_MULTIPLE_DELIVERY_MODES = 2150858950;
export const ERROR_WSMAN_CLIENT_MULTIPLE_ENVELOPE_POLICIES = 2150858951;
export const ERROR_WSMAN_CLIENT_UNKNOWN_EXPIRATION_TYPE = 2150858952;
export const ERROR_WSMAN_CLIENT_MISSING_EXPIRATION = 2150858953;
export const ERROR_WSMAN_CLIENT_PULL_INVALID_FLAGS = 2150858954;
export const ERROR_WSMAN_CLIENT_PUSH_UNSUPPORTED_TRANSPORT = 2150858955;
export const ERROR_WSMAN_CLIENT_PUSH_HOST_TOO_LONG = 2150858956;
export const ERROR_WSMAN_CLIENT_COMPRESSION_INVALID_OPTION = 2150858957;
export const ERROR_WSMAN_CLIENT_DELIVERENDSUBSCRIPTION_NULL_PARAM = 2150858958;
export const ERROR_WSMAN_CLIENT_DELIVEREVENTS_NULL_PARAM = 2150858959;
export const ERROR_WSMAN_CLIENT_GETBOOKMARK_NULL_PARAM = 2150858960;
export const ERROR_WSMAN_CLIENT_DECODEOBJECT_NULL_PARAM = 2150858961;
export const ERROR_WSMAN_CLIENT_ENCODEOBJECT_NULL_PARAM = 2150858962;
export const ERROR_WSMAN_CLIENT_ENUMERATORADDOBJECT_NULL_PARAM = 2150858963;
export const ERROR_WSMAN_CLIENT_ENUMERATORNEXTOBJECT_NULL_PARAM = 2150858964;
export const ERROR_WSMAN_CLIENT_CONSTRUCTERROR_NULL_PARAM = 2150858965;
export const ERROR_WSMAN_SERVER_NONPULLSUBSCRIBE_NULL_PARAM = 2150858966;
export const ERROR_WSMAN_CLIENT_UNENCRYPTED_HTTP_ONLY = 2150858967;
export const ERROR_WSMAN_CANNOT_USE_CERTIFICATES_FOR_HTTP = 2150858968;
export const ERROR_WSMAN_CONNECTIONSTR_INVALID = 2150858969;
export const ERROR_WSMAN_TRANSPORT_NOT_SUPPORTED = 2150858970;
export const ERROR_WSMAN_PORT_INVALID = 2150858971;
export const ERROR_WSMAN_CONFIG_PORT_INVALID = 2150858972;
export const ERROR_WSMAN_SENDHEARBEAT_EMPTY_ENUMERATOR = 2150858973;
export const ERROR_WSMAN_CLIENT_UNENCRYPTED_DISABLED = 2150858974;
export const ERROR_WSMAN_CLIENT_BASIC_AUTHENTICATION_DISABLED = 2150858975;
export const ERROR_WSMAN_CLIENT_DIGEST_AUTHENTICATION_DISABLED = 2150858976;
export const ERROR_WSMAN_CLIENT_NEGOTIATE_AUTHENTICATION_DISABLED = 2150858977;
export const ERROR_WSMAN_CLIENT_KERBEROS_AUTHENTICATION_DISABLED = 2150858978;
export const ERROR_WSMAN_CLIENT_CERTIFICATES_AUTHENTICATION_DISABLED = 2150858979;
export const ERROR_WSMAN_SERVER_NOT_TRUSTED = 2150858980;
export const ERROR_WSMAN_EXPLICIT_CREDENTIALS_REQUIRED = 2150858981;
export const ERROR_WSMAN_CERT_THUMBPRINT_NOT_BLANK = 2150858982;
export const ERROR_WSMAN_CERT_THUMBPRINT_BLANK = 2150858983;
export const ERROR_WSMAN_CONFIG_CANNOT_SHARE_SSL_CONFIG = 2150858984;
export const ERROR_WSMAN_CONFIG_CERT_CN_DOES_NOT_MATCH_HOSTNAME = 2150858985;
export const ERROR_WSMAN_CONFIG_HOSTNAME_CHANGE_WITHOUT_CERT = 2150858986;
export const ERROR_WSMAN_CONFIG_THUMBPRINT_SHOULD_BE_EMPTY = 2150858987;
export const ERROR_WSMAN_INVALID_IPFILTER = 2150858988;
export const ERROR_WSMAN_CANNOT_CHANGE_KEYS = 2150858989;
export const ERROR_WSMAN_CERT_INVALID_USAGE = 2150858990;
export const ERROR_WSMAN_RESPONSE_NO_RESULTS = 2150858991;
export const ERROR_WSMAN_CREATE_RESPONSE_NO_EPR = 2150858992;
export const ERROR_WSMAN_RESPONSE_INVALID_ENUMERATION_CONTEXT = 2150858993;
export const ERROR_WSMAN_RESPONSE_NO_XML_FRAGMENT_WRAPPER = 2150858994;
export const ERROR_WSMAN_RESPONSE_INVALID_MESSAGE_INFORMATION_HEADER = 2150858995;
export const ERROR_WSMAN_RESPONSE_NO_SOAP_HEADER_BODY = 2150858996;
export const ERROR_WSMAN_HTTP_NO_RESPONSE_DATA = 2150858997;
export const ERROR_WSMAN_RESPONSE_INVALID_SOAP_FAULT = 2150858998;
export const ERROR_WSMAN_HTTP_INVALID_CONTENT_TYPE_IN_RESPONSE_DATA = 2150858999;
export const ERROR_WSMAN_HTTP_CONTENT_TYPE_MISSMATCH_RESPONSE_DATA = 2150859000;
export const ERROR_WSMAN_CANNOT_DECRYPT = 2150859001;
export const ERROR_WSMAN_INVALID_URI_WMI_SINGLETON = 2150859002;
export const ERROR_WSMAN_INVALID_URI_WMI_ENUM_WQL = 2150859003;
export const ERROR_WSMAN_NO_IDENTIFY_FOR_LOCAL_SESSION = 2150859004;
export const ERROR_WSMAN_NO_PUSH_SUBSCRIPTION_FOR_LOCAL_SESSION = 2150859005;
export const ERROR_WSMAN_INVALID_SUBSCRIPTION_MANAGER = 2150859006;
export const ERROR_WSMAN_NON_PULL_SUBSCRIPTION_NOT_SUPPORTED = 2150859007;
export const ERROR_WSMAN_WMI_MAX_NESTED = 2150859008;
export const ERROR_WSMAN_REMOTE_CIMPATH_NOT_SUPPORTED = 2150859009;
export const ERROR_WSMAN_WMI_PROVIDER_NOT_CAPABLE = 2150859010;
export const ERROR_WSMAN_WMI_INVALID_VALUE = 2150859011;
export const ERROR_WSMAN_WMI_SVC_ACCESS_DENIED = 2150859012;
export const ERROR_WSMAN_WMI_PROVIDER_ACCESS_DENIED = 2150859013;
export const ERROR_WSMAN_WMI_CANNOT_CONNECT_ACCESS_DENIED = 2150859014;
export const ERROR_WSMAN_INVALID_FILTER_XML = 2150859015;
export const ERROR_WSMAN_ENUMERATE_WMI_INVALID_KEY = 2150859016;
export const ERROR_WSMAN_INVALID_FRAGMENT_PATH_BLANK = 2150859017;
export const ERROR_WSMAN_INVALID_CHARACTERS_IN_RESPONSE = 2150859018;
export const ERROR_WSMAN_KERBEROS_IPADDRESS = 2150859019;
export const ERROR_WSMAN_CLIENT_WORKGROUP_NO_KERBEROS = 2150859020;
export const ERROR_WSMAN_INVALID_BATCH_SETTINGS_PARAMETER = 2150859021;
export const ERROR_WSMAN_SERVER_DESTINATION_LOCALHOST = 2150859022;
export const ERROR_WSMAN_UNKNOWN_HTTP_STATUS_RETURNED = 2150859023;
export const ERROR_WSMAN_UNSUPPORTED_HTTP_STATUS_REDIRECT = 2150859024;
export const ERROR_WSMAN_HTTP_REQUEST_TOO_LARGE_STATUS = 2150859025;
export const ERROR_WSMAN_HTTP_SERVICE_UNAVAILABLE_STATUS = 2150859026;
export const ERROR_WSMAN_HTTP_NOT_FOUND_STATUS = 2150859027;
export const ERROR_WSMAN_EVENTING_MISSING_LOCALE_IN_DELIVERY = 2150859028;
export const ERROR_WSMAN_QUICK_CONFIG_FAILED_CERT_REQUIRED = 2150859029;
export const ERROR_WSMAN_QUICK_CONFIG_FIREWALL_EXCEPTIONS_DISALLOWED = 2150859030;
export const ERROR_WSMAN_QUICK_CONFIG_LOCAL_POLICY_CHANGE_DISALLOWED = 2150859031;
export const ERROR_WSMAN_INVALID_SELECTOR_NAME = 2150859032;
export const ERROR_WSMAN_ENCODING_TYPE = 2150859033;
export const ERROR_WSMAN_ENDPOINT_UNAVAILABLE_INVALID_VALUE = 2150859034;
export const ERROR_WSMAN_INVALID_HEADER = 2150859035;
export const ERROR_WSMAN_ENUMERATE_UNSUPPORTED_EXPIRATION_TYPE = 2150859036;
export const ERROR_WSMAN_MAX_ELEMENTS_NOT_SUPPORTED = 2150859037;
export const ERROR_WSMAN_WMI_PROVIDER_INVALID_PARAMETER = 2150859038;
export const ERROR_WSMAN_CLIENT_MULTIPLE_ENUM_MODE_FLAGS = 2150859039;
export const ERROR_WINRS_CLIENT_INVALID_FLAG = 2150859040;
export const ERROR_WINRS_CLIENT_NULL_PARAM = 2150859041;
export const ERROR_WSMAN_CANNOT_PROCESS_FILTER = 2150859042;
export const ERROR_WSMAN_CLIENT_ENUMERATORADDEVENT_NULL_PARAM = 2150859043;
export const ERROR_WSMAN_ADDOBJECT_MISSING_OBJECT = 2150859044;
export const ERROR_WSMAN_ADDOBJECT_MISSING_EPR = 2150859045;
export const ERROR_WSMAN_NETWORK_TIMEDOUT = 2150859046;
export const ERROR_WINRS_RECEIVE_IN_PROGRESS = 2150859047;
export const ERROR_WINRS_RECEIVE_NO_RESPONSE_DATA = 2150859048;
export const ERROR_WINRS_CLIENT_CREATESHELL_NULL_PARAM = 2150859049;
export const ERROR_WINRS_CLIENT_CLOSESHELL_NULL_PARAM = 2150859050;
export const ERROR_WINRS_CLIENT_FREECREATESHELLRESULT_NULL_PARAM = 2150859051;
export const ERROR_WINRS_CLIENT_RUNCOMMAND_NULL_PARAM = 2150859052;
export const ERROR_WINRS_CLIENT_FREERUNCOMMANDRESULT_NULL_PARAM = 2150859053;
export const ERROR_WINRS_CLIENT_SIGNAL_NULL_PARAM = 2150859054;
export const ERROR_WINRS_CLIENT_RECEIVE_NULL_PARAM = 2150859055;
export const ERROR_WINRS_CLIENT_FREEPULLRESULT_NULL_PARAM = 2150859056;
export const ERROR_WINRS_CLIENT_PULL_NULL_PARAM = 2150859057;
export const ERROR_WINRS_CLIENT_CLOSERECEIVEHANDLE_NULL_PARAM = 2150859058;
export const ERROR_WINRS_CLIENT_SEND_NULL_PARAM = 2150859059;
export const ERROR_WINRS_CLIENT_PUSH_NULL_PARAM = 2150859060;
export const ERROR_WINRS_CLIENT_CLOSESENDHANDLE_NULL_PARAM = 2150859061;
export const ERROR_WINRS_CLIENT_GET_NULL_PARAM = 2150859062;
export const ERROR_WSMAN_POLYMORPHISM_MODE_UNSUPPORTED = 2150859063;
export const ERROR_WSMAN_REQUEST_NOT_SUPPORTED_AT_SERVICE = 2150859064;
export const ERROR_WSMAN_URI_NON_DMTF_CLASS = 2150859065;
export const ERROR_WSMAN_URI_WRONG_DMTF_VERSION = 2150859066;
export const ERROR_WSMAN_DIFFERENT_CIM_SELECTOR = 2150859067;
export const ERROR_WSMAN_PUSHSUBSCRIPTION_INVALIDUSERACCOUNT = 2150859068;
export const ERROR_WSMAN_EVENTING_NONDOMAINJOINED_PUBLISHER = 2150859069;
export const ERROR_WSMAN_EVENTING_NONDOMAINJOINED_COLLECTOR = 2150859070;
export const ERROR_WSMAN_CONFIG_READONLY_PROPERTY = 2150859071;
export const ERROR_WINRS_CODE_PAGE_NOT_SUPPORTED = 2150859072;
export const ERROR_WSMAN_CLIENT_DISABLE_LOOPBACK_WITH_EXPLICIT_CREDENTIALS = 2150859073;
export const ERROR_WSMAN_CLIENT_INVALID_DISABLE_LOOPBACK = 2150859074;
export const ERROR_WSMAN_CLIENT_ENUM_RECEIVED_TOO_MANY_ITEMS = 2150859075;
export const ERROR_WSMAN_MULTIPLE_CREDENTIALS = 2150859076;
export const ERROR_WSMAN_AUTHENTICATION_INVALID_FLAG = 2150859077;
export const ERROR_WSMAN_CLIENT_CREDENTIALS_FOR_DEFAULT_AUTHENTICATION = 2150859078;
export const ERROR_WSMAN_CLIENT_USERNAME_AND_PASSWORD_NEEDED = 2150859079;
export const ERROR_WSMAN_CLIENT_INVALID_CERT_DNS_OR_UPN = 2150859080;
export const ERROR_WSMAN_CREATESHELL_NULL_ENVIRONMENT_VARIABLE_NAME = 2150859081;
export const ERROR_WSMAN_SHELL_ALREADY_CLOSED = 2150859082;
export const ERROR_WSMAN_CREATESHELL_NULL_STREAMID = 2150859083;
export const ERROR_WSMAN_SHELL_INVALID_SHELL_HANDLE = 2150859084;
export const ERROR_WSMAN_SHELL_INVALID_COMMAND_HANDLE = 2150859085;
export const ERROR_WSMAN_RUNSHELLCOMMAND_NULL_ARGUMENT = 2150859086;
export const ERROR_WSMAN_COMMAND_ALREADY_CLOSED = 2150859087;
export const ERROR_WSMAN_SENDSHELLINPUT_INVALID_STREAMID_INDEX = 2150859088;
export const ERROR_WSMAN_SHELL_SYNCHRONOUS_NOT_SUPPORTED = 2150859089;
export const ERROR_WSMAN_NO_CERTMAPPING_OPERATION_FOR_LOCAL_SESSION = 2150859090;
export const ERROR_WSMAN_CERTMAPPING_CONFIGLIMIT_EXCEEDED = 2150859091;
export const ERROR_WSMAN_CERTMAPPING_INVALIDUSERCREDENTIALS = 2150859092;
export const ERROR_WSMAN_CERT_INVALID_USAGE_CLIENT = 2150859093;
export const ERROR_WSMAN_CERT_MISSING_AUTH_FLAG = 2150859094;
export const ERROR_WSMAN_CERT_MULTIPLE_CREDENTIALS_FLAG = 2150859095;
export const ERROR_WSMAN_CONFIG_SHELL_URI_INVALID = 2150859096;
export const ERROR_WSMAN_CONFIG_SHELL_URI_CMDSHELLURI_NOTPERMITTED = 2150859097;
export const ERROR_WSMAN_CONFIG_SHELLURI_INVALID_PROCESSPATH = 2150859098;
export const ERROR_WINRS_SHELL_URI_INVALID = 2150859099;
export const ERROR_WSMAN_INVALID_SECURITY_DESCRIPTOR = 2150859100;
export const ERROR_WSMAN_POLICY_TOO_COMPLEX = 2150859101;
export const ERROR_WSMAN_POLICY_CANNOT_COMPLY = 2150859102;
export const ERROR_WSMAN_INVALID_CONNECTIONRETRY = 2150859103;
export const ERROR_WSMAN_URISECURITY_INVALIDURIKEY = 2150859104;
export const ERROR_WSMAN_CERTMAPPING_INVALIDSUBJECTKEY = 2150859105;
export const ERROR_WSMAN_CERTMAPPING_INVALIDISSUERKEY = 2150859106;
export const ERROR_WSMAN_INVALID_PUBLISHERS_TYPE = 2150859107;
export const ERROR_WSMAN_CLIENT_INVALID_DELIVERY_RETRY = 2150859108;
export const ERROR_WSMAN_CLIENT_NULL_PUBLISHERS = 2150859109;
export const ERROR_WSMAN_CLIENT_NULL_ISSUERS = 2150859110;
export const ERROR_WSMAN_CLIENT_NO_SOURCES = 2150859111;
export const ERROR_WSMAN_INVALID_SUBSCRIBE_OBJECT = 2150859112;
export const ERROR_WSMAN_PUBLIC_FIREWALL_PROFILE_ACTIVE = 2150859113;
export const ERROR_WSMAN_CERTMAPPING_PASSWORDTOOLONG = 2150859114;
export const ERROR_WSMAN_CERTMAPPING_PASSWORDBLANK = 2150859115;
export const ERROR_WSMAN_CERTMAPPING_PASSWORDUSERTUPLE = 2150859116;
export const ERROR_WSMAN_INVALID_PROVIDER_RESPONSE = 2150859117;
export const ERROR_WSMAN_SHELL_NOT_INITIALIZED = 2150859118;
export const ERROR_WSMAN_CONFIG_SHELLURI_INVALID_OPERATION_ON_KEY = 2150859119;
export const ERROR_WSMAN_HTTP_STATUS_SERVER_ERROR = 2150859120;
export const ERROR_WSMAN_HTTP_STATUS_BAD_REQUEST = 2150859121;
export const ERROR_WSMAN_CONFIG_CANNOT_CHANGE_CERTMAPPING_KEYS = 2150859122;
export const ERROR_WSMAN_HTML_ERROR = 2150859123;
export const ERROR_WSMAN_CLIENT_INITIALIZE_NULL_PARAM = 2150859124;
export const ERROR_WSMAN_CLIENT_INVALID_INIT_APPLICATION_FLAG = 2150859125;
export const ERROR_WSMAN_CLIENT_INVALID_DEINIT_APPLICATION_FLAG = 2150859126;
export const ERROR_WSMAN_CLIENT_SETSESSIONOPTION_NULL_PARAM = 2150859127;
export const ERROR_WSMAN_CLIENT_SETSESSIONOPTION_INVALID_PARAM = 2150859128;
export const ERROR_WSMAN_CLIENT_GETSESSIONOPTION_INVALID_PARAM = 2150859129;
export const ERROR_WSMAN_CLIENT_CREATESHELL_NULL_PARAM = 2150859130;
export const ERROR_WSMAN_CLIENT_INVALID_CREATE_SHELL_FLAG = 2150859131;
export const ERROR_WSMAN_CLIENT_INVALID_CLOSE_SHELL_FLAG = 2150859132;
export const ERROR_WSMAN_CLIENT_INVALID_CLOSE_COMMAND_FLAG = 2150859133;
export const ERROR_WSMAN_CLIENT_CLOSESHELL_NULL_PARAM = 2150859134;
export const ERROR_WSMAN_CLIENT_CLOSECOMMAND_NULL_PARAM = 2150859135;
export const ERROR_WSMAN_CLIENT_RUNCOMMAND_NULL_PARAM = 2150859136;
export const ERROR_WSMAN_CLIENT_INVALID_RUNCOMMAND_FLAG = 2150859137;
export const ERROR_WSMAN_CLIENT_RUNCOMMAND_NOTCOMPLETED = 2150859138;
export const ERROR_WSMAN_NO_COMMAND_RESPONSE = 2150859139;
export const ERROR_WSMAN_INVALID_OPTIONSET = 2150859140;
export const ERROR_WSMAN_NO_COMMANDID = 2150859141;
export const ERROR_WSMAN_CLIENT_SIGNAL_NULL_PARAM = 2150859142;
export const ERROR_WSMAN_CLIENT_INVALID_SIGNAL_SHELL_FLAG = 2150859143;
export const ERROR_WSMAN_CLIENT_SEND_NULL_PARAM = 2150859144;
export const ERROR_WSMAN_CLIENT_INVALID_SEND_SHELL_FLAG = 2150859145;
export const ERROR_WSMAN_CLIENT_INVALID_SEND_SHELL_PARAMETER = 2150859146;
export const ERROR_WSMAN_SHELL_INVALID_INPUT_STREAM = 2150859147;
export const ERROR_WSMAN_CLIENT_RECEIVE_NULL_PARAM = 2150859148;
export const ERROR_WSMAN_SHELL_INVALID_DESIRED_STREAMS = 2150859149;
export const ERROR_WSMAN_CLIENT_INVALID_RECEIVE_SHELL_FLAG = 2150859150;
export const ERROR_WSMAN_NO_RECEIVE_RESPONSE = 2150859151;
export const ERROR_WSMAN_PLUGIN_CONFIGURATION_CORRUPTED = 2150859152;
export const ERROR_WSMAN_INVALID_FILEPATH = 2150859153;
export const ERROR_WSMAN_FILE_NOT_PRESENT = 2150859154;
export const ERROR_WSMAN_IISCONFIGURATION_READ_FAILED = 2150859155;
export const ERROR_WSMAN_CLIENT_INVALID_LOCALE = 2150859156;
export const ERROR_WSMAN_CLIENT_INVALID_UI_LANGUAGE = 2150859157;
export const ERROR_WSMAN_CLIENT_GETERRORMESSAGE_NULL_PARAM = 2150859158;
export const ERROR_WSMAN_CLIENT_INVALID_LANGUAGE_CODE = 2150859159;
export const ERROR_WSMAN_CLIENT_INVALID_GETERRORMESSAGE_FLAG = 2150859160;
export const ERROR_WSMAN_REDIRECT_REQUESTED = 2150859161;
export const ERROR_WSMAN_PROXY_AUTHENTICATION_INVALID_FLAG = 2150859162;
export const ERROR_WSMAN_CLIENT_CREDENTIALS_FOR_PROXY_AUTHENTICATION = 2150859163;
export const ERROR_WSMAN_PROXY_ACCESS_TYPE = 2150859164;
export const ERROR_WSMAN_INVALID_OPTION_NO_PROXY_SERVER = 2150859165;
export const ERROR_WSMAN_CLIENT_GETSESSIONOPTION_DWORD_NULL_PARAM = 2150859166;
export const ERROR_WSMAN_CLIENT_GETSESSIONOPTION_DWORD_INVALID_PARAM = 2150859167;
export const ERROR_WSMAN_CLIENT_GETSESSIONOPTION_STRING_INVALID_PARAM = 2150859168;
export const ERROR_WSMAN_CREDSSP_USERNAME_PASSWORD_NEEDED = 2150859169;
export const ERROR_WSMAN_CLIENT_CREDSSP_AUTHENTICATION_DISABLED = 2150859170;
export const ERROR_WSMAN_CLIENT_ALLOWFRESHCREDENTIALS = 2150859171;
export const ERROR_WSMAN_CLIENT_ALLOWFRESHCREDENTIALS_NTLMONLY = 2150859172;
export const ERROR_WSMAN_QUOTA_MAX_SHELLS = 2150859173;
export const ERROR_WSMAN_QUOTA_MAX_OPERATIONS = 2150859174;
export const ERROR_WSMAN_QUOTA_USER = 2150859175;
export const ERROR_WSMAN_QUOTA_SYSTEM = 2150859176;
export const ERROR_WSMAN_DIFFERENT_AUTHZ_TOKEN = 2150859177;
export const ERROR_WSMAN_REDIRECT_LOCATION_NOT_AVAILABLE = 2150859178;
export const ERROR_WSMAN_QUOTA_MAX_SHELLUSERS = 2150859179;
export const ERROR_WSMAN_REMOTESHELLS_NOT_ALLOWED = 2150859180;
export const ERROR_WSMAN_PULL_PARAMS_NOT_SAME_AS_ENUM = 2150859181;
export const ERROR_WSMAN_DEPRECATED_CONFIG_SETTING = 2150859182;
export const ERROR_WSMAN_URI_SECURITY_URI = 2150859183;
export const ERROR_WSMAN_CANNOT_USE_ALLOW_NEGOTIATE_IMPLICIT_CREDENTIALS_FOR_HTTP = 2150859184;
export const ERROR_WSMAN_CANNOT_USE_PROXY_SETTINGS_FOR_HTTP = 2150859185;
export const ERROR_WSMAN_CANNOT_USE_PROXY_SETTINGS_FOR_KERBEROS = 2150859186;
export const ERROR_WSMAN_CANNOT_USE_PROXY_SETTINGS_FOR_CREDSSP = 2150859187;
export const ERROR_WSMAN_CLIENT_MULTIPLE_PROXY_AUTH_FLAGS = 2150859188;
export const ERROR_WSMAN_INVALID_REDIRECT_ERROR = 2150859189;
export const ERROR_REDIRECT_LOCATION_TOO_LONG = 2150859190;
export const ERROR_REDIRECT_LOCATION_INVALID = 2150859191;
export const ERROR_SERVICE_CBT_HARDENING_INVALID = 2150859192;
export const ERROR_WSMAN_NAME_NOT_RESOLVED = 2150859193;
export const ERROR_WSMAN_SSL_CONNECTION_ABORTED = 2150859194;
export const ERROR_WSMAN_DEFAULTAUTH_IPADDRESS = 2150859195;
export const ERROR_WSMAN_CUSTOMREMOTESHELL_DEPRECATED = 2150859196;
export const ERROR_WSMAN_FEATURE_DEPRECATED = 2150859197;
export const ERROR_WSMAN_INVALID_USESSL_PARAM = 2150859198;
export const ERROR_WSMAN_INVALID_CONFIGSDDL_URL = 2150859199;
export const ERROR_WSMAN_ENUMERATE_SHELLCOMAMNDS_FILTER_EXPECTED = 2150859200;
export const ERROR_WSMAN_ENUMERATE_SHELLCOMMANDS_EPRS_NOTSUPPORTED = 2150859201;
export const ERROR_WSMAN_CLIENT_CREATESHELL_NAME_INVALID = 2150859202;
export const ERROR_WSMAN_RUNAS_INVALIDUSERCREDENTIALS = 2150859203;
export const ERROR_WINRS_SHELL_DISCONNECTED = 2150859204;
export const ERROR_WINRS_SHELL_DISCONNECT_NOT_SUPPORTED = 2150859205;
export const ERROR_WINRS_SHELL_CLIENTSESSIONID_MISMATCH = 2150859206;
export const ERROR_WSMAN_CLIENT_DISCONNECTSHELL_NULL_PARAM = 2150859207;
export const ERROR_WSMAN_CLIENT_RECONNECTSHELL_NULL_PARAM = 2150859208;
export const ERROR_WSMAN_CLIENT_CONNECTSHELL_NULL_PARAM = 2150859209;
export const ERROR_WSMAN_CLIENT_CONNECTCOMMAND_NULL_PARAM = 2150859210;
export const ERROR_WINRS_CONNECT_RESPONSE_BAD_BODY = 2150859211;
export const ERROR_WSMAN_COMMAND_TERMINATED = 2150859212;
export const ERROR_WINRS_SHELL_CONNECTED_TO_DIFFERENT_CLIENT = 2150859213;
export const ERROR_WINRS_SHELL_DISCONNECT_OPERATION_NOT_GRACEFUL = 2150859214;
export const ERROR_WINRS_SHELL_DISCONNECT_OPERATION_NOT_VALID = 2150859215;
export const ERROR_WINRS_SHELL_RECONNECT_OPERATION_NOT_VALID = 2150859216;
export const ERROR_WSMAN_CONFIG_GROUP_POLICY_CHANGE_NOTIFICATION_SUBSCRIPTION_FAILED = 2150859217;
export const ERROR_WSMAN_CLIENT_RECONNECTSHELLCOMMAND_NULL_PARAM = 2150859218;
export const ERROR_WINRS_SHELLCOMMAND_RECONNECT_OPERATION_NOT_VALID = 2150859219;
export const ERROR_WINRS_SHELLCOMMAND_CLIENTID_NOT_VALID = 2150859220;
export const ERROR_WINRS_SHELL_CLIENTID_NOT_VALID = 2150859221;
export const ERROR_WINRS_SHELLCOMMAND_CLIENTID_RESOURCE_CONFLICT = 2150859222;
export const ERROR_WINRS_SHELL_CLIENTID_RESOURCE_CONFLICT = 2150859223;
export const ERROR_WINRS_SHELLCOMMAND_DISCONNECT_OPERATION_NOT_VALID = 2150859224;
export const ERROR_WSMAN_SUBSCRIBE_WMI_INVALID_KEY = 2150859225;
export const ERROR_WSMAN_CLIENT_INVALID_DISCONNECT_SHELL_FLAG = 2150859226;
export const ERROR_WSMAN_CLIENT_INVALID_SHELL_COMMAND_PAIR = 2150859227;
export const ERROR_WSMAN_SEMANTICCALLBACK_TIMEDOUT = 2150859228;
export const ERROR_WSMAN_SERVICE_REMOTE_ACCESS_DISABLED = 2150859229;
export const ERROR_WSMAN_SERVICE_STREAM_DISCONNECTED = 2150859230;
export const ERROR_WSMAN_CREATESHELL_RUNAS_FAILED = 2150859231;
export const ERROR_WSMAN_INVALID_XML_RUNAS_DISABLED = 2150859232;
export const ERROR_WSMAN_WRONG_METADATA = 2150859233;
export const ERROR_WSMAN_UNSUPPORTED_TYPE = 2150859234;
export const ERROR_WSMAN_REMOTE_CONNECTION_NOT_ALLOWED = 2150859235;
export const ERROR_WSMAN_QUOTA_MAX_SHELLS_PPQ = 2150859236;
export const ERROR_WSMAN_QUOTA_MAX_USERS_PPQ = 2150859237;
export const ERROR_WSMAN_QUOTA_MAX_PLUGINSHELLS_PPQ = 2150859238;
export const ERROR_WSMAN_QUOTA_MAX_PLUGINOPERATIONS_PPQ = 2150859239;
export const ERROR_WSMAN_QUOTA_MAX_OPERATIONS_USER_PPQ = 2150859240;
export const ERROR_WSMAN_QUOTA_MAX_COMMANDS_PER_SHELL_PPQ = 2150859241;
export const ERROR_WSMAN_QUOTA_MIN_REQUIREMENT_NOT_AVAILABLE_PPQ = 2150859242;
export const ERROR_WSMAN_NEW_DESERIALIZER = 2150859243;
export const ERROR_WSMAN_DESERIALIZE_CLASS = 2150859244;
export const ERROR_WSMAN_GETCLASS = 2150859245;
export const ERROR_WSMAN_NEW_SESSION = 2150859246;
export const ERROR_WSMAN_NULL_KEY = 2150859247;
export const ERROR_WSMAN_MUTUAL_AUTH_FAILED = 2150859248;
export const ERROR_WSMAN_UNSUPPORTED_OCTETTYPE = 2150859249;
export const ERROR_WINRS_IDLETIMEOUT_OUTOFBOUNDS = 2150859250;
export const ERROR_WSMAN_INSUFFICIENT_METADATA_FOR_BASIC = 2150859251;
export const ERROR_WSMAN_INVALID_LITERAL_URI = 2150859252;
export const ERROR_WSMAN_OBJECTONLY_INVALID = 2150859253;
export const ERROR_WSMAN_MISSING_CLASSNAME = 2150859254;
export const ERROR_WSMAN_EVENTING_INVALID_ENCODING_IN_DELIVERY = 2150859255;
export const ERROR_WSMAN_DESTINATION_INVALID = 2150859256;
export const ERROR_WSMAN_UNSUPPORTED_FEATURE_IDENTIFY = 2150859257;
export const ERROR_WSMAN_CLIENT_SESSION_UNUSABLE = 2150859258;
export const ERROR_WSMAN_VIRTUALACCOUNT_NOTSUPPORTED = 2150859259;
export const ERROR_WSMAN_VIRTUALACCOUNT_NOTSUPPORTED_DOWNLEVEL = 2150859260;
export const ERROR_WSMAN_RUNASUSER_MANAGEDACCOUNT_LOGON_FAILED = 2150859261;
export const ERROR_WSMAN_CERTMAPPING_CREDENTIAL_MANAGEMENT_FAILIED = 2150859262;
export const WSMAN_DATA_NONE = 0;
export const WSMAN_DATA_TYPE_TEXT = 1;
export const WSMAN_DATA_TYPE_BINARY = 2;
export const WSMAN_DATA_TYPE_DWORD = 4;
export const WSMAN_FLAG_DEFAULT_AUTHENTICATION = 0;
export const WSMAN_FLAG_NO_AUTHENTICATION = 1;
export const WSMAN_FLAG_AUTH_DIGEST = 2;
export const WSMAN_FLAG_AUTH_NEGOTIATE = 4;
export const WSMAN_FLAG_AUTH_BASIC = 8;
export const WSMAN_FLAG_AUTH_KERBEROS = 16;
export const WSMAN_FLAG_AUTH_CREDSSP = 128;
export const WSMAN_FLAG_AUTH_CLIENT_CERTIFICATE = 32;
export const WSMAN_OPTION_PROXY_IE_PROXY_CONFIG = 1;
export const WSMAN_OPTION_PROXY_WINHTTP_PROXY_CONFIG = 2;
export const WSMAN_OPTION_PROXY_AUTO_DETECT = 4;
export const WSMAN_OPTION_PROXY_NO_PROXY_SERVER = 8;
export const WSMAN_OPTION_DEFAULT_OPERATION_TIMEOUTMS = 1;
export const WSMAN_OPTION_MAX_RETRY_TIME = 11;
export const WSMAN_OPTION_TIMEOUTMS_CREATE_SHELL = 12;
export const WSMAN_OPTION_TIMEOUTMS_RUN_SHELL_COMMAND = 13;
export const WSMAN_OPTION_TIMEOUTMS_RECEIVE_SHELL_OUTPUT = 14;
export const WSMAN_OPTION_TIMEOUTMS_SEND_SHELL_INPUT = 15;
export const WSMAN_OPTION_TIMEOUTMS_SIGNAL_SHELL = 16;
export const WSMAN_OPTION_TIMEOUTMS_CLOSE_SHELL = 17;
export const WSMAN_OPTION_SKIP_CA_CHECK = 18;
export const WSMAN_OPTION_SKIP_CN_CHECK = 19;
export const WSMAN_OPTION_UNENCRYPTED_MESSAGES = 20;
export const WSMAN_OPTION_UTF16 = 21;
export const WSMAN_OPTION_ENABLE_SPN_SERVER_PORT = 22;
export const WSMAN_OPTION_MACHINE_ID = 23;
export const WSMAN_OPTION_LOCALE = 25;
export const WSMAN_OPTION_UI_LANGUAGE = 26;
export const WSMAN_OPTION_MAX_ENVELOPE_SIZE_KB = 28;
export const WSMAN_OPTION_SHELL_MAX_DATA_SIZE_PER_MESSAGE_KB = 29;
export const WSMAN_OPTION_REDIRECT_LOCATION = 30;
export const WSMAN_OPTION_SKIP_REVOCATION_CHECK = 31;
export const WSMAN_OPTION_ALLOW_NEGOTIATE_IMPLICIT_CREDENTIALS = 32;
export const WSMAN_OPTION_USE_SSL = 33;
export const WSMAN_OPTION_USE_INTEARACTIVE_TOKEN = 34;
export const WSMAN_FLAG_CALLBACK_END_OF_OPERATION = 1;
export const WSMAN_FLAG_CALLBACK_END_OF_STREAM = 8;
export const WSMAN_FLAG_CALLBACK_SHELL_SUPPORTS_DISCONNECT = 32;
export const WSMAN_FLAG_CALLBACK_SHELL_AUTODISCONNECTED = 64;
export const WSMAN_FLAG_CALLBACK_NETWORK_FAILURE_DETECTED = 256;
export const WSMAN_FLAG_CALLBACK_RETRYING_AFTER_NETWORK_FAILURE = 512;
export const WSMAN_FLAG_CALLBACK_RECONNECTED_AFTER_NETWORK_FAILURE = 1024;
export const WSMAN_FLAG_CALLBACK_SHELL_AUTODISCONNECTING = 2048;
export const WSMAN_FLAG_CALLBACK_RETRY_ABORTED_DUE_TO_INTERNAL_ERROR = 4096;
export const WSMAN_FLAG_CALLBACK_RECEIVE_DELAY_STREAM_REQUEST_PROCESSED = 8192;
export const WSMAN_FLAG_NO_COMPRESSION = 1;
export const WSMAN_FLAG_DELETE_SERVER_SESSION = 2;
export const WSMAN_FLAG_SERVER_BUFFERING_MODE_DROP = 4;
export const WSMAN_FLAG_SERVER_BUFFERING_MODE_BLOCK = 8;
export const WSMAN_FLAG_RECEIVE_DELAY_OUTPUT_STREAM = 16;
export const WSManFlagUTF8 = 1;
export const WSManFlagCredUsernamePassword = 4096;
export const WSManFlagSkipCACheck = 8192;
export const WSManFlagSkipCNCheck = 16384;
export const WSManFlagUseNoAuthentication = 32768;
export const WSManFlagUseDigest = 65536;
export const WSManFlagUseNegotiate = 131072;
export const WSManFlagUseBasic = 262144;
export const WSManFlagUseKerberos = 524288;
export const WSManFlagNoEncryption = 1048576;
export const WSManFlagUseClientCertificate = 2097152;
export const WSManFlagEnableSPNServerPort = 4194304;
export const WSManFlagUTF16 = 8388608;
export const WSManFlagUseCredSsp = 16777216;
export const WSManFlagSkipRevocationCheck = 33554432;
export const WSManFlagAllowNegotiateImplicitCredentials = 67108864;
export const WSManFlagUseSsl = 134217728;
export const WSManFlagNonXmlText = 1;
export const WSManFlagReturnObject = 0;
export const WSManFlagReturnEPR = 2;
export const WSManFlagReturnObjectAndEPR = 4;
export const WSManFlagHierarchyDeep = 0;
export const WSManFlagHierarchyShallow = 32;
export const WSManFlagHierarchyDeepBasePropsOnly = 64;
export const WSManFlagAssociatedInstance = 0;
export const WSManFlagAssociationInstance = 128;
export const WSManProxyIEConfig = 1;
export const WSManProxyWinHttpConfig = 2;
export const WSManProxyAutoDetect = 4;
export const WSManProxyNoProxyServer = 8;
export const WSManFlagProxyAuthenticationUseNegotiate = 1;
export const WSManFlagProxyAuthenticationUseBasic = 2;
export const WSManFlagProxyAuthenticationUseDigest = 4;

// Structs

export type PWSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.System.RemoteManagement.WSMAN_DATA_TEXT (size: 16)
 */
export interface WSMAN_DATA_TEXT {
  /** u32 */
  bufferLength: number;
  /** Windows.Win32.Foundation.PWSTR */
  buffer: string | null | Uint8Array | Uint16Array;
}

export const sizeofWSMAN_DATA_TEXT = 16;

export function allocWSMAN_DATA_TEXT(data?: Partial<WSMAN_DATA_TEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWSMAN_DATA_TEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.bufferLength !== undefined) view.setUint32(0, Number(data.bufferLength), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.buffer !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.buffer);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class WSMAN_DATA_TEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get bufferLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get buffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set bufferLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set buffer(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.System.RemoteManagement.WSMAN_DATA_BINARY (size: 16)
 */
export interface WSMAN_DATA_BINARY {
  /** u32 */
  dataLength: number;
  /** ptr */
  data: Deno.PointerValue | Uint8Array;
}

export const sizeofWSMAN_DATA_BINARY = 16;

export function allocWSMAN_DATA_BINARY(data?: Partial<WSMAN_DATA_BINARY>): Uint8Array {
  const buf = new Uint8Array(sizeofWSMAN_DATA_BINARY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dataLength !== undefined) view.setUint32(0, Number(data.dataLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.data !== undefined) view.setBigUint64(8, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  return buf;
}

export class WSMAN_DATA_BINARYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dataLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dataLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: bigint | number;
  /** u64 */
  Region: bigint | number;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get Region(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set Alignment(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set Region(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** array */
  X: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.X))), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteManagement.WSMAN_DATA (size: 16)
 */
export interface WSMAN_DATA {
  /** Windows.Win32.System.RemoteManagement.WSManDataType */
  type: WSManDataType;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofWSMAN_DATA = 16;

export function allocWSMAN_DATA(data?: Partial<WSMAN_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWSMAN_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.type !== undefined) view.setInt32(0, Number(data.type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class WSMAN_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteManagement.WSMAN_ERROR (size: 40)
 */
export interface WSMAN_ERROR {
  /** u32 */
  code: number;
  /** Windows.Win32.Foundation.PWSTR */
  errorDetail: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  language: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  machineName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pluginName: string | null | Uint8Array | Uint16Array;
}

export const sizeofWSMAN_ERROR = 40;

export function allocWSMAN_ERROR(data?: Partial<WSMAN_ERROR>): Uint8Array {
  const buf = new Uint8Array(sizeofWSMAN_ERROR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.code !== undefined) view.setUint32(0, Number(data.code), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.errorDetail !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.errorDetail);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.language !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.language);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.machineName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.machineName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pluginName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pluginName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  return buf;
}

export class WSMAN_ERRORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get code(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get errorDetail(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get language(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get machineName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pluginName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set code(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set errorDetail(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set language(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set machineName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pluginName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }
}

/**
 * Windows.Win32.System.RemoteManagement.WSMAN_USERNAME_PASSWORD_CREDS (size: 16)
 */
export interface WSMAN_USERNAME_PASSWORD_CREDS {
  /** Windows.Win32.Foundation.PWSTR */
  username: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  password: string | null | Uint8Array | Uint16Array;
}

export const sizeofWSMAN_USERNAME_PASSWORD_CREDS = 16;

export function allocWSMAN_USERNAME_PASSWORD_CREDS(data?: Partial<WSMAN_USERNAME_PASSWORD_CREDS>): Uint8Array {
  const buf = new Uint8Array(sizeofWSMAN_USERNAME_PASSWORD_CREDS);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.username !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.username);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.password !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.password);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class WSMAN_USERNAME_PASSWORD_CREDSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get username(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get password(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set username(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set password(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.System.RemoteManagement.WSMAN_AUTHENTICATION_CREDENTIALS (size: 16)
 */
export interface WSMAN_AUTHENTICATION_CREDENTIALS {
  /** u32 */
  authenticationMechanism: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofWSMAN_AUTHENTICATION_CREDENTIALS = 16;

export function allocWSMAN_AUTHENTICATION_CREDENTIALS(data?: Partial<WSMAN_AUTHENTICATION_CREDENTIALS>): Uint8Array {
  const buf = new Uint8Array(sizeofWSMAN_AUTHENTICATION_CREDENTIALS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.authenticationMechanism !== undefined) view.setUint32(0, Number(data.authenticationMechanism), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class WSMAN_AUTHENTICATION_CREDENTIALSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get authenticationMechanism(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set authenticationMechanism(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type BOOL = number;

/**
 * Windows.Win32.System.RemoteManagement.WSMAN_OPTION (size: 24)
 */
export interface WSMAN_OPTION {
  /** Windows.Win32.Foundation.PWSTR */
  name: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  value: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.BOOL */
  mustComply: boolean;
}

export const sizeofWSMAN_OPTION = 24;

export function allocWSMAN_OPTION(data?: Partial<WSMAN_OPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWSMAN_OPTION);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.value !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.value);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: i32
  if (data?.mustComply !== undefined) view.setInt32(16, Number(data.mustComply), true);
  // 0x14: pad4
  return buf;
}

export class WSMAN_OPTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get mustComply(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: buffer
  set name(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set value(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: i32
  set mustComply(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.System.RemoteManagement.WSMAN_OPTION_SET (size: 24)
 */
export interface WSMAN_OPTION_SET {
  /** u32 */
  optionsCount: number;
  /** ptr */
  options: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.BOOL */
  optionsMustUnderstand: boolean;
}

export const sizeofWSMAN_OPTION_SET = 24;

export function allocWSMAN_OPTION_SET(data?: Partial<WSMAN_OPTION_SET>): Uint8Array {
  const buf = new Uint8Array(sizeofWSMAN_OPTION_SET);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.optionsCount !== undefined) view.setUint32(0, Number(data.optionsCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.options !== undefined) view.setBigUint64(8, data.options === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.options))), true);
  // 0x10: i32
  if (data?.optionsMustUnderstand !== undefined) view.setInt32(16, Number(data.optionsMustUnderstand), true);
  // 0x14: pad4
  return buf;
}

export class WSMAN_OPTION_SETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get optionsCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get options(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get optionsMustUnderstand(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set optionsCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set options(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set optionsMustUnderstand(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.System.RemoteManagement.WSMAN_OPTION_SETEX (size: 32)
 */
export interface WSMAN_OPTION_SETEX {
  /** u32 */
  optionsCount: number;
  /** ptr */
  options: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.BOOL */
  optionsMustUnderstand: boolean;
  /** ptr */
  optionTypes: Deno.PointerValue | Uint8Array;
}

export const sizeofWSMAN_OPTION_SETEX = 32;

export function allocWSMAN_OPTION_SETEX(data?: Partial<WSMAN_OPTION_SETEX>): Uint8Array {
  const buf = new Uint8Array(sizeofWSMAN_OPTION_SETEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.optionsCount !== undefined) view.setUint32(0, Number(data.optionsCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.options !== undefined) view.setBigUint64(8, data.options === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.options))), true);
  // 0x10: i32
  if (data?.optionsMustUnderstand !== undefined) view.setInt32(16, Number(data.optionsMustUnderstand), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.optionTypes !== undefined) view.setBigUint64(24, data.optionTypes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.optionTypes))), true);
  return buf;
}

export class WSMAN_OPTION_SETEXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get optionsCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get options(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get optionsMustUnderstand(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get optionTypes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set optionsCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set options(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set optionsMustUnderstand(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set optionTypes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteManagement.WSMAN_KEY (size: 16)
 */
export interface WSMAN_KEY {
  /** Windows.Win32.Foundation.PWSTR */
  key: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  value: string | null | Uint8Array | Uint16Array;
}

export const sizeofWSMAN_KEY = 16;

export function allocWSMAN_KEY(data?: Partial<WSMAN_KEY>): Uint8Array {
  const buf = new Uint8Array(sizeofWSMAN_KEY);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.key !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.key);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.value !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.value);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class WSMAN_KEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get key(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set key(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set value(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.System.RemoteManagement.WSMAN_SELECTOR_SET (size: 16)
 */
export interface WSMAN_SELECTOR_SET {
  /** u32 */
  numberKeys: number;
  /** ptr */
  keys: Deno.PointerValue | Uint8Array;
}

export const sizeofWSMAN_SELECTOR_SET = 16;

export function allocWSMAN_SELECTOR_SET(data?: Partial<WSMAN_SELECTOR_SET>): Uint8Array {
  const buf = new Uint8Array(sizeofWSMAN_SELECTOR_SET);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.numberKeys !== undefined) view.setUint32(0, Number(data.numberKeys), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.keys !== undefined) view.setBigUint64(8, data.keys === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.keys))), true);
  return buf;
}

export class WSMAN_SELECTOR_SETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get numberKeys(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get keys(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set numberKeys(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set keys(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteManagement.WSMAN_FRAGMENT (size: 16)
 */
export interface WSMAN_FRAGMENT {
  /** Windows.Win32.Foundation.PWSTR */
  path: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  dialect: string | null | Uint8Array | Uint16Array;
}

export const sizeofWSMAN_FRAGMENT = 16;

export function allocWSMAN_FRAGMENT(data?: Partial<WSMAN_FRAGMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofWSMAN_FRAGMENT);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.path !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.path);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.dialect !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.dialect);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class WSMAN_FRAGMENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get path(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get dialect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set path(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set dialect(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.System.RemoteManagement.WSMAN_FILTER (size: 16)
 */
export interface WSMAN_FILTER {
  /** Windows.Win32.Foundation.PWSTR */
  filter: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  dialect: string | null | Uint8Array | Uint16Array;
}

export const sizeofWSMAN_FILTER = 16;

export function allocWSMAN_FILTER(data?: Partial<WSMAN_FILTER>): Uint8Array {
  const buf = new Uint8Array(sizeofWSMAN_FILTER);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.filter !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.filter);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.dialect !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.dialect);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class WSMAN_FILTERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get filter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get dialect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set filter(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set dialect(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.System.RemoteManagement.WSMAN_OPERATION_INFO (size: 48)
 */
export interface WSMAN_OPERATION_INFO {
  /** Windows.Win32.System.RemoteManagement.WSMAN_FRAGMENT */
  fragment: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.RemoteManagement.WSMAN_FILTER */
  filter: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.RemoteManagement.WSMAN_SELECTOR_SET */
  selectorSet: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.RemoteManagement.WSMAN_OPTION_SET */
  optionSet: Uint8Array | Deno.PointerValue;
  /** ptr */
  reserved: Deno.PointerValue | Uint8Array;
  /** u32 */
  version: number;
}

export const sizeofWSMAN_OPERATION_INFO = 48;

export function allocWSMAN_OPERATION_INFO(data?: Partial<WSMAN_OPERATION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWSMAN_OPERATION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fragment !== undefined) view.setBigUint64(0, data.fragment === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fragment))), true);
  // 0x08: pointer
  if (data?.filter !== undefined) view.setBigUint64(8, data.filter === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.filter))), true);
  // 0x10: pointer
  if (data?.selectorSet !== undefined) view.setBigUint64(16, data.selectorSet === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.selectorSet))), true);
  // 0x18: pointer
  if (data?.optionSet !== undefined) view.setBigUint64(24, data.optionSet === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.optionSet))), true);
  // 0x20: pointer
  if (data?.reserved !== undefined) view.setBigUint64(32, data.reserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.reserved))), true);
  // 0x28: u32
  if (data?.version !== undefined) view.setUint32(40, Number(data.version), true);
  // 0x2c: pad4
  return buf;
}

export class WSMAN_OPERATION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get fragment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get filter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get selectorSet(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get optionSet(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get reserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get version(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: pointer
  set fragment(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set filter(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set selectorSet(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set optionSet(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set reserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set version(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.System.RemoteManagement.WSMAN_OPERATION_INFOEX (size: 56)
 */
export interface WSMAN_OPERATION_INFOEX {
  /** Windows.Win32.System.RemoteManagement.WSMAN_FRAGMENT */
  fragment: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.RemoteManagement.WSMAN_FILTER */
  filter: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.RemoteManagement.WSMAN_SELECTOR_SET */
  selectorSet: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.RemoteManagement.WSMAN_OPTION_SETEX */
  optionSet: Uint8Array | Deno.PointerValue;
  /** u32 */
  version: number;
  /** Windows.Win32.Foundation.PWSTR */
  uiLocale: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  dataLocale: string | null | Uint8Array | Uint16Array;
}

export const sizeofWSMAN_OPERATION_INFOEX = 56;

export function allocWSMAN_OPERATION_INFOEX(data?: Partial<WSMAN_OPERATION_INFOEX>): Uint8Array {
  const buf = new Uint8Array(sizeofWSMAN_OPERATION_INFOEX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fragment !== undefined) view.setBigUint64(0, data.fragment === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fragment))), true);
  // 0x08: pointer
  if (data?.filter !== undefined) view.setBigUint64(8, data.filter === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.filter))), true);
  // 0x10: pointer
  if (data?.selectorSet !== undefined) view.setBigUint64(16, data.selectorSet === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.selectorSet))), true);
  // 0x18: pointer
  if (data?.optionSet !== undefined) view.setBigUint64(24, data.optionSet === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.optionSet))), true);
  // 0x20: u32
  if (data?.version !== undefined) view.setUint32(32, Number(data.version), true);
  // 0x24: pad4
  // 0x28: buffer
  if (data?.uiLocale !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.uiLocale);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.dataLocale !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.dataLocale);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  return buf;
}

export class WSMAN_OPERATION_INFOEXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get fragment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get filter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get selectorSet(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get optionSet(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get version(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  get uiLocale(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get dataLocale(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set fragment(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set filter(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set selectorSet(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set optionSet(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set version(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  set uiLocale(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set dataLocale(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }
}

/**
 * Windows.Win32.System.RemoteManagement.WSMAN_PROXY_INFO (size: 16)
 */
export interface WSMAN_PROXY_INFO {
  /** u32 */
  accessType: number;
  /** Windows.Win32.System.RemoteManagement.WSMAN_AUTHENTICATION_CREDENTIALS */
  authenticationCredentials: Uint8Array | Deno.PointerValue;
}

export const sizeofWSMAN_PROXY_INFO = 16;

export function allocWSMAN_PROXY_INFO(data?: Partial<WSMAN_PROXY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWSMAN_PROXY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.accessType !== undefined) view.setUint32(0, Number(data.accessType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.authenticationCredentials !== undefined) view.setBigUint64(8, data.authenticationCredentials === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.authenticationCredentials))), true);
  return buf;
}

export class WSMAN_PROXY_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get accessType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get authenticationCredentials(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set accessType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set authenticationCredentials(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteManagement.WSMAN_STREAM_ID_SET (size: 16)
 */
export interface WSMAN_STREAM_ID_SET {
  /** u32 */
  streamIDsCount: number;
  /** ptr */
  streamIDs: Deno.PointerValue | Uint8Array;
}

export const sizeofWSMAN_STREAM_ID_SET = 16;

export function allocWSMAN_STREAM_ID_SET(data?: Partial<WSMAN_STREAM_ID_SET>): Uint8Array {
  const buf = new Uint8Array(sizeofWSMAN_STREAM_ID_SET);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.streamIDsCount !== undefined) view.setUint32(0, Number(data.streamIDsCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.streamIDs !== undefined) view.setBigUint64(8, data.streamIDs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.streamIDs))), true);
  return buf;
}

export class WSMAN_STREAM_ID_SETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get streamIDsCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get streamIDs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set streamIDsCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set streamIDs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteManagement.WSMAN_ENVIRONMENT_VARIABLE (size: 16)
 */
export interface WSMAN_ENVIRONMENT_VARIABLE {
  /** Windows.Win32.Foundation.PWSTR */
  name: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  value: string | null | Uint8Array | Uint16Array;
}

export const sizeofWSMAN_ENVIRONMENT_VARIABLE = 16;

export function allocWSMAN_ENVIRONMENT_VARIABLE(data?: Partial<WSMAN_ENVIRONMENT_VARIABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofWSMAN_ENVIRONMENT_VARIABLE);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.value !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.value);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class WSMAN_ENVIRONMENT_VARIABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set name(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set value(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.System.RemoteManagement.WSMAN_ENVIRONMENT_VARIABLE_SET (size: 16)
 */
export interface WSMAN_ENVIRONMENT_VARIABLE_SET {
  /** u32 */
  varsCount: number;
  /** ptr */
  vars: Deno.PointerValue | Uint8Array;
}

export const sizeofWSMAN_ENVIRONMENT_VARIABLE_SET = 16;

export function allocWSMAN_ENVIRONMENT_VARIABLE_SET(data?: Partial<WSMAN_ENVIRONMENT_VARIABLE_SET>): Uint8Array {
  const buf = new Uint8Array(sizeofWSMAN_ENVIRONMENT_VARIABLE_SET);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.varsCount !== undefined) view.setUint32(0, Number(data.varsCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.vars !== undefined) view.setBigUint64(8, data.vars === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.vars))), true);
  return buf;
}

export class WSMAN_ENVIRONMENT_VARIABLE_SETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get varsCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get vars(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set varsCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set vars(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteManagement.WSMAN_SHELL_STARTUP_INFO_V10 (size: 40)
 */
export interface WSMAN_SHELL_STARTUP_INFO_V10 {
  /** ptr */
  inputStreamSet: Deno.PointerValue | Uint8Array;
  /** ptr */
  outputStreamSet: Deno.PointerValue | Uint8Array;
  /** u32 */
  idleTimeoutMs: number;
  /** Windows.Win32.Foundation.PWSTR */
  workingDirectory: string | null | Uint8Array | Uint16Array;
  /** ptr */
  variableSet: Deno.PointerValue | Uint8Array;
}

export const sizeofWSMAN_SHELL_STARTUP_INFO_V10 = 40;

export function allocWSMAN_SHELL_STARTUP_INFO_V10(data?: Partial<WSMAN_SHELL_STARTUP_INFO_V10>): Uint8Array {
  const buf = new Uint8Array(sizeofWSMAN_SHELL_STARTUP_INFO_V10);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.inputStreamSet !== undefined) view.setBigUint64(0, data.inputStreamSet === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.inputStreamSet))), true);
  // 0x08: pointer
  if (data?.outputStreamSet !== undefined) view.setBigUint64(8, data.outputStreamSet === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.outputStreamSet))), true);
  // 0x10: u32
  if (data?.idleTimeoutMs !== undefined) view.setUint32(16, Number(data.idleTimeoutMs), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.workingDirectory !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.workingDirectory);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: pointer
  if (data?.variableSet !== undefined) view.setBigUint64(32, data.variableSet === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.variableSet))), true);
  return buf;
}

export class WSMAN_SHELL_STARTUP_INFO_V10View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get inputStreamSet(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get outputStreamSet(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get idleTimeoutMs(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  get workingDirectory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get variableSet(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set inputStreamSet(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set outputStreamSet(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set idleTimeoutMs(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  set workingDirectory(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: pointer
  set variableSet(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteManagement.WSMAN_SHELL_STARTUP_INFO_V11 (size: 16)
 */
export interface WSMAN_SHELL_STARTUP_INFO_V11 {
  /** Windows.Win32.System.RemoteManagement.WSMAN_SHELL_STARTUP_INFO_V10 */
  Base: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  name: string | null | Uint8Array | Uint16Array;
}

export const sizeofWSMAN_SHELL_STARTUP_INFO_V11 = 16;

export function allocWSMAN_SHELL_STARTUP_INFO_V11(data?: Partial<WSMAN_SHELL_STARTUP_INFO_V11>): Uint8Array {
  const buf = new Uint8Array(sizeofWSMAN_SHELL_STARTUP_INFO_V11);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Base !== undefined) view.setBigUint64(0, data.Base === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Base))), true);
  // 0x08: buffer
  if (data?.name !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.name);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class WSMAN_SHELL_STARTUP_INFO_V11View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Base(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Base(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set name(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.System.RemoteManagement.WSMAN_SHELL_DISCONNECT_INFO (size: 8)
 */
export interface WSMAN_SHELL_DISCONNECT_INFO {
  /** u32 */
  idleTimeoutMs: number;
}

export const sizeofWSMAN_SHELL_DISCONNECT_INFO = 8;

export function allocWSMAN_SHELL_DISCONNECT_INFO(data?: Partial<WSMAN_SHELL_DISCONNECT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWSMAN_SHELL_DISCONNECT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.idleTimeoutMs !== undefined) view.setUint32(0, Number(data.idleTimeoutMs), true);
  // 0x04: pad4
  return buf;
}

export class WSMAN_SHELL_DISCONNECT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get idleTimeoutMs(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set idleTimeoutMs(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.RemoteManagement.WSMAN_RECEIVE_DATA_RESULT (size: 32)
 */
export interface WSMAN_RECEIVE_DATA_RESULT {
  /** Windows.Win32.Foundation.PWSTR */
  streamId: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.System.RemoteManagement.WSMAN_DATA */
  streamData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  commandState: string | null | Uint8Array | Uint16Array;
  /** u32 */
  exitCode: number;
}

export const sizeofWSMAN_RECEIVE_DATA_RESULT = 32;

export function allocWSMAN_RECEIVE_DATA_RESULT(data?: Partial<WSMAN_RECEIVE_DATA_RESULT>): Uint8Array {
  const buf = new Uint8Array(sizeofWSMAN_RECEIVE_DATA_RESULT);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.streamId !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.streamId);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: pointer
  if (data?.streamData !== undefined) view.setBigUint64(8, data.streamData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.streamData))), true);
  // 0x10: buffer
  if (data?.commandState !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.commandState);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.exitCode !== undefined) view.setUint32(24, Number(data.exitCode), true);
  // 0x1c: pad4
  return buf;
}

export class WSMAN_RECEIVE_DATA_RESULTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get streamId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get streamData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get commandState(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get exitCode(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: buffer
  set streamId(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: pointer
  set streamData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set commandState(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set exitCode(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.System.RemoteManagement.WSMAN_CONNECT_DATA (size: 8)
 */
export interface WSMAN_CONNECT_DATA {
  /** Windows.Win32.System.RemoteManagement.WSMAN_DATA */
  data: Uint8Array | Deno.PointerValue;
}

export const sizeofWSMAN_CONNECT_DATA = 8;

export function allocWSMAN_CONNECT_DATA(data?: Partial<WSMAN_CONNECT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWSMAN_CONNECT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  return buf;
}

export class WSMAN_CONNECT_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteManagement.WSMAN_CREATE_SHELL_DATA (size: 8)
 */
export interface WSMAN_CREATE_SHELL_DATA {
  /** Windows.Win32.System.RemoteManagement.WSMAN_DATA */
  data: Uint8Array | Deno.PointerValue;
}

export const sizeofWSMAN_CREATE_SHELL_DATA = 8;

export function allocWSMAN_CREATE_SHELL_DATA(data?: Partial<WSMAN_CREATE_SHELL_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWSMAN_CREATE_SHELL_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  return buf;
}

export class WSMAN_CREATE_SHELL_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteManagement.WSMAN_RESPONSE_DATA (size: 24)
 */
export interface WSMAN_RESPONSE_DATA {
  /** Windows.Win32.System.RemoteManagement.WSMAN_RECEIVE_DATA_RESULT */
  receiveData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.RemoteManagement.WSMAN_CONNECT_DATA */
  connectData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.RemoteManagement.WSMAN_CREATE_SHELL_DATA */
  createData: Uint8Array | Deno.PointerValue;
}

export const sizeofWSMAN_RESPONSE_DATA = 24;

export function allocWSMAN_RESPONSE_DATA(data?: Partial<WSMAN_RESPONSE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWSMAN_RESPONSE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.receiveData !== undefined) view.setBigUint64(0, data.receiveData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.receiveData))), true);
  // 0x08: pointer
  if (data?.connectData !== undefined) view.setBigUint64(8, data.connectData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.connectData))), true);
  // 0x10: pointer
  if (data?.createData !== undefined) view.setBigUint64(16, data.createData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.createData))), true);
  return buf;
}

export class WSMAN_RESPONSE_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get receiveData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get connectData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get createData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set receiveData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set connectData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set createData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteManagement.WSMAN_SHELL_ASYNC (size: 16)
 */
export interface WSMAN_SHELL_ASYNC {
  /** ptr */
  operationContext: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.System.RemoteManagement.WSMAN_SHELL_COMPLETION_FUNCTION */
  completionFunction: Uint8Array | Deno.PointerValue;
}

export const sizeofWSMAN_SHELL_ASYNC = 16;

export function allocWSMAN_SHELL_ASYNC(data?: Partial<WSMAN_SHELL_ASYNC>): Uint8Array {
  const buf = new Uint8Array(sizeofWSMAN_SHELL_ASYNC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.operationContext !== undefined) view.setBigUint64(0, data.operationContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.operationContext))), true);
  // 0x08: pointer
  if (data?.completionFunction !== undefined) view.setBigUint64(8, data.completionFunction === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.completionFunction))), true);
  return buf;
}

export class WSMAN_SHELL_ASYNCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get operationContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get completionFunction(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set operationContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set completionFunction(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteManagement.WSMAN_COMMAND_ARG_SET (size: 16)
 */
export interface WSMAN_COMMAND_ARG_SET {
  /** u32 */
  argsCount: number;
  /** ptr */
  args: Deno.PointerValue | Uint8Array;
}

export const sizeofWSMAN_COMMAND_ARG_SET = 16;

export function allocWSMAN_COMMAND_ARG_SET(data?: Partial<WSMAN_COMMAND_ARG_SET>): Uint8Array {
  const buf = new Uint8Array(sizeofWSMAN_COMMAND_ARG_SET);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.argsCount !== undefined) view.setUint32(0, Number(data.argsCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.args !== undefined) view.setBigUint64(8, data.args === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.args))), true);
  return buf;
}

export class WSMAN_COMMAND_ARG_SETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get argsCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get args(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set argsCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set args(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.RemoteManagement.WSMAN_CERTIFICATE_DETAILS (size: 32)
 */
export interface WSMAN_CERTIFICATE_DETAILS {
  /** Windows.Win32.Foundation.PWSTR */
  subject: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  issuerName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  issuerThumbprint: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  subjectName: string | null | Uint8Array | Uint16Array;
}

export const sizeofWSMAN_CERTIFICATE_DETAILS = 32;

export function allocWSMAN_CERTIFICATE_DETAILS(data?: Partial<WSMAN_CERTIFICATE_DETAILS>): Uint8Array {
  const buf = new Uint8Array(sizeofWSMAN_CERTIFICATE_DETAILS);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.subject !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.subject);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.issuerName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.issuerName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.issuerThumbprint !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.issuerThumbprint);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.subjectName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.subjectName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  return buf;
}

export class WSMAN_CERTIFICATE_DETAILSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get subject(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get issuerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get issuerThumbprint(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get subjectName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set subject(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set issuerName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set issuerThumbprint(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set subjectName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }
}

export type HANDLE = bigint | number;

/**
 * Windows.Win32.System.RemoteManagement.WSMAN_SENDER_DETAILS (size: 40)
 */
export interface WSMAN_SENDER_DETAILS {
  /** Windows.Win32.Foundation.PWSTR */
  senderName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  authenticationMechanism: string | null | Uint8Array | Uint16Array;
  /** ptr */
  certificateDetails: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HANDLE */
  clientToken: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  httpURL: string | null | Uint8Array | Uint16Array;
}

export const sizeofWSMAN_SENDER_DETAILS = 40;

export function allocWSMAN_SENDER_DETAILS(data?: Partial<WSMAN_SENDER_DETAILS>): Uint8Array {
  const buf = new Uint8Array(sizeofWSMAN_SENDER_DETAILS);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.senderName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.senderName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.authenticationMechanism !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.authenticationMechanism);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.certificateDetails !== undefined) view.setBigUint64(16, data.certificateDetails === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.certificateDetails))), true);
  // 0x18: pointer
  if (data?.clientToken !== undefined) view.setBigUint64(24, data.clientToken === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.clientToken))), true);
  // 0x20: buffer
  if (data?.httpURL !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.httpURL);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  return buf;
}

export class WSMAN_SENDER_DETAILSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get senderName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get authenticationMechanism(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get certificateDetails(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get clientToken(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get httpURL(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set senderName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set authenticationMechanism(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set certificateDetails(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set clientToken(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: buffer
  set httpURL(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }
}

/**
 * Windows.Win32.System.RemoteManagement.WSMAN_PLUGIN_REQUEST (size: 56)
 */
export interface WSMAN_PLUGIN_REQUEST {
  /** ptr */
  senderDetails: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  locale: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  resourceUri: string | null | Uint8Array | Uint16Array;
  /** ptr */
  operationInfo: Deno.PointerValue | Uint8Array;
  /** i32 */
  shutdownNotification: number;
  /** Windows.Win32.Foundation.HANDLE */
  shutdownNotificationHandle: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  dataLocale: string | null | Uint8Array | Uint16Array;
}

export const sizeofWSMAN_PLUGIN_REQUEST = 56;

export function allocWSMAN_PLUGIN_REQUEST(data?: Partial<WSMAN_PLUGIN_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofWSMAN_PLUGIN_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.senderDetails !== undefined) view.setBigUint64(0, data.senderDetails === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.senderDetails))), true);
  // 0x08: buffer
  if (data?.locale !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.locale);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.resourceUri !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.resourceUri);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: pointer
  if (data?.operationInfo !== undefined) view.setBigUint64(24, data.operationInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.operationInfo))), true);
  // 0x20: i32
  if (data?.shutdownNotification !== undefined) view.setInt32(32, Number(data.shutdownNotification), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.shutdownNotificationHandle !== undefined) view.setBigUint64(40, data.shutdownNotificationHandle === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.shutdownNotificationHandle))), true);
  // 0x30: buffer
  if (data?.dataLocale !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.dataLocale);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  return buf;
}

export class WSMAN_PLUGIN_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get senderDetails(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get locale(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get resourceUri(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get operationInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get shutdownNotification(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get shutdownNotificationHandle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get dataLocale(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set senderDetails(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set locale(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set resourceUri(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: pointer
  set operationInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: i32
  set shutdownNotification(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set shutdownNotificationHandle(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: buffer
  set dataLocale(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }
}

/**
 * Windows.Win32.System.RemoteManagement.WSMAN_AUTHZ_QUOTA (size: 16)
 */
export interface WSMAN_AUTHZ_QUOTA {
  /** u32 */
  maxAllowedConcurrentShells: number;
  /** u32 */
  maxAllowedConcurrentOperations: number;
  /** u32 */
  timeslotSize: number;
  /** u32 */
  maxAllowedOperationsPerTimeslot: number;
}

export const sizeofWSMAN_AUTHZ_QUOTA = 16;

export function allocWSMAN_AUTHZ_QUOTA(data?: Partial<WSMAN_AUTHZ_QUOTA>): Uint8Array {
  const buf = new Uint8Array(sizeofWSMAN_AUTHZ_QUOTA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.maxAllowedConcurrentShells !== undefined) view.setUint32(0, Number(data.maxAllowedConcurrentShells), true);
  // 0x04: u32
  if (data?.maxAllowedConcurrentOperations !== undefined) view.setUint32(4, Number(data.maxAllowedConcurrentOperations), true);
  // 0x08: u32
  if (data?.timeslotSize !== undefined) view.setUint32(8, Number(data.timeslotSize), true);
  // 0x0c: u32
  if (data?.maxAllowedOperationsPerTimeslot !== undefined) view.setUint32(12, Number(data.maxAllowedOperationsPerTimeslot), true);
  return buf;
}

export class WSMAN_AUTHZ_QUOTAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get maxAllowedConcurrentShells(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get maxAllowedConcurrentOperations(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get timeslotSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get maxAllowedOperationsPerTimeslot(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set maxAllowedConcurrentShells(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set maxAllowedConcurrentOperations(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set timeslotSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set maxAllowedOperationsPerTimeslot(value: number) {
    this.view.setUint32(12, value, true);
  }
}

// Native Libraries

try {
  var libWsmSvc_dll = Deno.dlopen("WsmSvc.dll", {
    WSManInitialize: {
      parameters: ["u32", "pointer"],
      result: "u32",
    },
    WSManDeinitialize: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    WSManGetErrorMessage: {
      parameters: ["pointer", "u32", "buffer", "u32", "u32", "buffer", "pointer"],
      result: "u32",
    },
    WSManCreateSession: {
      parameters: ["pointer", "buffer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    WSManCloseSession: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    WSManSetSessionOption: {
      parameters: ["pointer", "i32", "pointer"],
      result: "u32",
    },
    WSManGetSessionOptionAsDword: {
      parameters: ["pointer", "i32", "pointer"],
      result: "u32",
    },
    WSManGetSessionOptionAsString: {
      parameters: ["pointer", "i32", "u32", "buffer", "pointer"],
      result: "u32",
    },
    WSManCloseOperation: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    WSManCreateShell: {
      parameters: ["pointer", "u32", "buffer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    WSManRunShellCommand: {
      parameters: ["pointer", "u32", "buffer", "pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    WSManSignalShell: {
      parameters: ["pointer", "pointer", "u32", "buffer", "pointer", "pointer"],
      result: "void",
    },
    WSManReceiveShellOutput: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "void",
    },
    WSManSendShellInput: {
      parameters: ["pointer", "pointer", "u32", "buffer", "pointer", "i32", "pointer", "pointer"],
      result: "void",
    },
    WSManCloseCommand: {
      parameters: ["pointer", "u32", "pointer"],
      result: "void",
    },
    WSManCloseShell: {
      parameters: ["pointer", "u32", "pointer"],
      result: "void",
    },
    WSManCreateShellEx: {
      parameters: ["pointer", "u32", "buffer", "buffer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    WSManRunShellCommandEx: {
      parameters: ["pointer", "u32", "buffer", "buffer", "pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    WSManDisconnectShell: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "void",
    },
    WSManReconnectShell: {
      parameters: ["pointer", "u32", "pointer"],
      result: "void",
    },
    WSManReconnectShellCommand: {
      parameters: ["pointer", "u32", "pointer"],
      result: "void",
    },
    WSManConnectShell: {
      parameters: ["pointer", "u32", "buffer", "buffer", "pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    WSManConnectShellCommand: {
      parameters: ["pointer", "u32", "buffer", "pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    WSManPluginReportContext: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    WSManPluginReceiveResult: {
      parameters: ["pointer", "u32", "buffer", "pointer", "buffer", "u32"],
      result: "u32",
    },
    WSManPluginOperationComplete: {
      parameters: ["pointer", "u32", "u32", "buffer"],
      result: "u32",
    },
    WSManPluginGetOperationParameters: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    WSManPluginGetConfiguration: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    WSManPluginReportCompletion: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    WSManPluginFreeRequestDetails: {
      parameters: ["pointer"],
      result: "u32",
    },
    WSManPluginAuthzUserComplete: {
      parameters: ["pointer", "u32", "pointer", "pointer", "i32", "u32", "buffer"],
      result: "u32",
    },
    WSManPluginAuthzOperationComplete: {
      parameters: ["pointer", "u32", "pointer", "u32", "buffer"],
      result: "u32",
    },
    WSManPluginAuthzQueryQuotaComplete: {
      parameters: ["pointer", "u32", "pointer", "u32", "buffer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function WSManInitialize(
  flags: number /* u32 */,
  apiHandle: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libWsmSvc_dll.WSManInitialize(flags, util.toPointer(apiHandle));
}

export function WSManDeinitialize(
  apiHandle: Deno.PointerValue | Uint8Array /* ptr */,
  flags: number /* u32 */,
): number /* u32 */ {
  return libWsmSvc_dll.WSManDeinitialize(util.toPointer(apiHandle), flags);
}

export function WSManGetErrorMessage(
  apiHandle: Deno.PointerValue | Uint8Array /* ptr */,
  flags: number /* u32 */,
  languageCode: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  errorCode: number /* u32 */,
  messageLength: number /* u32 */,
  message: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  messageLengthUsed: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libWsmSvc_dll.WSManGetErrorMessage(util.toPointer(apiHandle), flags, util.pwstrToFfi(languageCode), errorCode, messageLength, util.pwstrToFfi(message), util.toPointer(messageLengthUsed));
}

export function WSManCreateSession(
  apiHandle: Deno.PointerValue | Uint8Array /* ptr */,
  connection: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  flags: number /* u32 */,
  serverAuthenticationCredentials: Deno.PointerValue | Uint8Array /* ptr */,
  proxyInfo: Deno.PointerValue | Uint8Array /* ptr */,
  session: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libWsmSvc_dll.WSManCreateSession(util.toPointer(apiHandle), util.pwstrToFfi(connection), flags, util.toPointer(serverAuthenticationCredentials), util.toPointer(proxyInfo), util.toPointer(session));
}

export function WSManCloseSession(
  session: Deno.PointerValue | Uint8Array /* ptr */,
  flags: number /* u32 */,
): number /* u32 */ {
  return libWsmSvc_dll.WSManCloseSession(util.toPointer(session), flags);
}

export function WSManSetSessionOption(
  session: Deno.PointerValue | Uint8Array /* ptr */,
  option: WSManSessionOption /* Windows.Win32.System.RemoteManagement.WSManSessionOption */,
  data: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libWsmSvc_dll.WSManSetSessionOption(util.toPointer(session), option, util.toPointer(data));
}

export function WSManGetSessionOptionAsDword(
  session: Deno.PointerValue | Uint8Array /* ptr */,
  option: WSManSessionOption /* Windows.Win32.System.RemoteManagement.WSManSessionOption */,
  value: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libWsmSvc_dll.WSManGetSessionOptionAsDword(util.toPointer(session), option, util.toPointer(value));
}

export function WSManGetSessionOptionAsString(
  session: Deno.PointerValue | Uint8Array /* ptr */,
  option: WSManSessionOption /* Windows.Win32.System.RemoteManagement.WSManSessionOption */,
  stringLength: number /* u32 */,
  string: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  stringLengthUsed: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libWsmSvc_dll.WSManGetSessionOptionAsString(util.toPointer(session), option, stringLength, util.pwstrToFfi(string), util.toPointer(stringLengthUsed));
}

export function WSManCloseOperation(
  operationHandle: Deno.PointerValue | Uint8Array /* ptr */,
  flags: number /* u32 */,
): number /* u32 */ {
  return libWsmSvc_dll.WSManCloseOperation(util.toPointer(operationHandle), flags);
}

export function WSManCreateShell(
  session: Deno.PointerValue | Uint8Array /* ptr */,
  flags: number /* u32 */,
  resourceUri: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  startupInfo: Deno.PointerValue | Uint8Array /* ptr */,
  options: Deno.PointerValue | Uint8Array /* ptr */,
  createXml: Deno.PointerValue | Uint8Array /* ptr */,
  async__: Deno.PointerValue | Uint8Array /* ptr */,
  shell: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libWsmSvc_dll.WSManCreateShell(util.toPointer(session), flags, util.pwstrToFfi(resourceUri), util.toPointer(startupInfo), util.toPointer(options), util.toPointer(createXml), util.toPointer(async__), util.toPointer(shell));
}

export function WSManRunShellCommand(
  shell: Deno.PointerValue | Uint8Array /* ptr */,
  flags: number /* u32 */,
  commandLine: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  args: Deno.PointerValue | Uint8Array /* ptr */,
  options: Deno.PointerValue | Uint8Array /* ptr */,
  async__: Deno.PointerValue | Uint8Array /* ptr */,
  command: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libWsmSvc_dll.WSManRunShellCommand(util.toPointer(shell), flags, util.pwstrToFfi(commandLine), util.toPointer(args), util.toPointer(options), util.toPointer(async__), util.toPointer(command));
}

export function WSManSignalShell(
  shell: Deno.PointerValue | Uint8Array /* ptr */,
  command: Deno.PointerValue | Uint8Array /* ptr */,
  flags: number /* u32 */,
  code: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  async__: Deno.PointerValue | Uint8Array /* ptr */,
  signalOperation: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libWsmSvc_dll.WSManSignalShell(util.toPointer(shell), util.toPointer(command), flags, util.pwstrToFfi(code), util.toPointer(async__), util.toPointer(signalOperation));
}

export function WSManReceiveShellOutput(
  shell: Deno.PointerValue | Uint8Array /* ptr */,
  command: Deno.PointerValue | Uint8Array /* ptr */,
  flags: number /* u32 */,
  desiredStreamSet: Deno.PointerValue | Uint8Array /* ptr */,
  async__: Deno.PointerValue | Uint8Array /* ptr */,
  receiveOperation: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libWsmSvc_dll.WSManReceiveShellOutput(util.toPointer(shell), util.toPointer(command), flags, util.toPointer(desiredStreamSet), util.toPointer(async__), util.toPointer(receiveOperation));
}

export function WSManSendShellInput(
  shell: Deno.PointerValue | Uint8Array /* ptr */,
  command: Deno.PointerValue | Uint8Array /* ptr */,
  flags: number /* u32 */,
  streamId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  streamData: Deno.PointerValue | Uint8Array /* ptr */,
  endOfStream: boolean /* Windows.Win32.Foundation.BOOL */,
  async__: Deno.PointerValue | Uint8Array /* ptr */,
  sendOperation: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libWsmSvc_dll.WSManSendShellInput(util.toPointer(shell), util.toPointer(command), flags, util.pwstrToFfi(streamId), util.toPointer(streamData), util.boolToFfi(endOfStream), util.toPointer(async__), util.toPointer(sendOperation));
}

export function WSManCloseCommand(
  commandHandle: Deno.PointerValue | Uint8Array /* ptr */,
  flags: number /* u32 */,
  async__: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libWsmSvc_dll.WSManCloseCommand(util.toPointer(commandHandle), flags, util.toPointer(async__));
}

export function WSManCloseShell(
  shellHandle: Deno.PointerValue | Uint8Array /* ptr */,
  flags: number /* u32 */,
  async__: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libWsmSvc_dll.WSManCloseShell(util.toPointer(shellHandle), flags, util.toPointer(async__));
}

export function WSManCreateShellEx(
  session: Deno.PointerValue | Uint8Array /* ptr */,
  flags: number /* u32 */,
  resourceUri: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  shellId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  startupInfo: Deno.PointerValue | Uint8Array /* ptr */,
  options: Deno.PointerValue | Uint8Array /* ptr */,
  createXml: Deno.PointerValue | Uint8Array /* ptr */,
  async__: Deno.PointerValue | Uint8Array /* ptr */,
  shell: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libWsmSvc_dll.WSManCreateShellEx(util.toPointer(session), flags, util.pwstrToFfi(resourceUri), util.pwstrToFfi(shellId), util.toPointer(startupInfo), util.toPointer(options), util.toPointer(createXml), util.toPointer(async__), util.toPointer(shell));
}

export function WSManRunShellCommandEx(
  shell: Deno.PointerValue | Uint8Array /* ptr */,
  flags: number /* u32 */,
  commandId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  commandLine: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  args: Deno.PointerValue | Uint8Array /* ptr */,
  options: Deno.PointerValue | Uint8Array /* ptr */,
  async__: Deno.PointerValue | Uint8Array /* ptr */,
  command: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libWsmSvc_dll.WSManRunShellCommandEx(util.toPointer(shell), flags, util.pwstrToFfi(commandId), util.pwstrToFfi(commandLine), util.toPointer(args), util.toPointer(options), util.toPointer(async__), util.toPointer(command));
}

export function WSManDisconnectShell(
  shell: Deno.PointerValue | Uint8Array /* ptr */,
  flags: number /* u32 */,
  disconnectInfo: Deno.PointerValue | Uint8Array /* ptr */,
  async__: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libWsmSvc_dll.WSManDisconnectShell(util.toPointer(shell), flags, util.toPointer(disconnectInfo), util.toPointer(async__));
}

export function WSManReconnectShell(
  shell: Deno.PointerValue | Uint8Array /* ptr */,
  flags: number /* u32 */,
  async__: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libWsmSvc_dll.WSManReconnectShell(util.toPointer(shell), flags, util.toPointer(async__));
}

export function WSManReconnectShellCommand(
  commandHandle: Deno.PointerValue | Uint8Array /* ptr */,
  flags: number /* u32 */,
  async__: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libWsmSvc_dll.WSManReconnectShellCommand(util.toPointer(commandHandle), flags, util.toPointer(async__));
}

export function WSManConnectShell(
  session: Deno.PointerValue | Uint8Array /* ptr */,
  flags: number /* u32 */,
  resourceUri: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  shellID: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  options: Deno.PointerValue | Uint8Array /* ptr */,
  connectXml: Deno.PointerValue | Uint8Array /* ptr */,
  async__: Deno.PointerValue | Uint8Array /* ptr */,
  shell: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libWsmSvc_dll.WSManConnectShell(util.toPointer(session), flags, util.pwstrToFfi(resourceUri), util.pwstrToFfi(shellID), util.toPointer(options), util.toPointer(connectXml), util.toPointer(async__), util.toPointer(shell));
}

export function WSManConnectShellCommand(
  shell: Deno.PointerValue | Uint8Array /* ptr */,
  flags: number /* u32 */,
  commandID: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  options: Deno.PointerValue | Uint8Array /* ptr */,
  connectXml: Deno.PointerValue | Uint8Array /* ptr */,
  async__: Deno.PointerValue | Uint8Array /* ptr */,
  command: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libWsmSvc_dll.WSManConnectShellCommand(util.toPointer(shell), flags, util.pwstrToFfi(commandID), util.toPointer(options), util.toPointer(connectXml), util.toPointer(async__), util.toPointer(command));
}

export function WSManPluginReportContext(
  requestDetails: Deno.PointerValue | Uint8Array /* ptr */,
  flags: number /* u32 */,
  context: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libWsmSvc_dll.WSManPluginReportContext(util.toPointer(requestDetails), flags, util.toPointer(context));
}

export function WSManPluginReceiveResult(
  requestDetails: Deno.PointerValue | Uint8Array /* ptr */,
  flags: number /* u32 */,
  stream: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  streamResult: Deno.PointerValue | Uint8Array /* ptr */,
  commandState: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  exitCode: number /* u32 */,
): number /* u32 */ {
  return libWsmSvc_dll.WSManPluginReceiveResult(util.toPointer(requestDetails), flags, util.pwstrToFfi(stream), util.toPointer(streamResult), util.pwstrToFfi(commandState), exitCode);
}

export function WSManPluginOperationComplete(
  requestDetails: Deno.PointerValue | Uint8Array /* ptr */,
  flags: number /* u32 */,
  errorCode: number /* u32 */,
  extendedInformation: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libWsmSvc_dll.WSManPluginOperationComplete(util.toPointer(requestDetails), flags, errorCode, util.pwstrToFfi(extendedInformation));
}

export function WSManPluginGetOperationParameters(
  requestDetails: Deno.PointerValue | Uint8Array /* ptr */,
  flags: number /* u32 */,
  data: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libWsmSvc_dll.WSManPluginGetOperationParameters(util.toPointer(requestDetails), flags, util.toPointer(data));
}

export function WSManPluginGetConfiguration(
  pluginContext: Deno.PointerValue | Uint8Array /* ptr */,
  flags: number /* u32 */,
  data: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libWsmSvc_dll.WSManPluginGetConfiguration(util.toPointer(pluginContext), flags, util.toPointer(data));
}

export function WSManPluginReportCompletion(
  pluginContext: Deno.PointerValue | Uint8Array /* ptr */,
  flags: number /* u32 */,
): number /* u32 */ {
  return libWsmSvc_dll.WSManPluginReportCompletion(util.toPointer(pluginContext), flags);
}

export function WSManPluginFreeRequestDetails(
  requestDetails: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libWsmSvc_dll.WSManPluginFreeRequestDetails(util.toPointer(requestDetails));
}

export function WSManPluginAuthzUserComplete(
  senderDetails: Deno.PointerValue | Uint8Array /* ptr */,
  flags: number /* u32 */,
  userAuthorizationContext: Deno.PointerValue | Uint8Array /* ptr */,
  impersonationToken: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  userIsAdministrator: boolean /* Windows.Win32.Foundation.BOOL */,
  errorCode: number /* u32 */,
  extendedErrorInformation: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libWsmSvc_dll.WSManPluginAuthzUserComplete(util.toPointer(senderDetails), flags, util.toPointer(userAuthorizationContext), util.toPointer(impersonationToken), util.boolToFfi(userIsAdministrator), errorCode, util.pwstrToFfi(extendedErrorInformation));
}

export function WSManPluginAuthzOperationComplete(
  senderDetails: Deno.PointerValue | Uint8Array /* ptr */,
  flags: number /* u32 */,
  userAuthorizationContext: Deno.PointerValue | Uint8Array /* ptr */,
  errorCode: number /* u32 */,
  extendedErrorInformation: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libWsmSvc_dll.WSManPluginAuthzOperationComplete(util.toPointer(senderDetails), flags, util.toPointer(userAuthorizationContext), errorCode, util.pwstrToFfi(extendedErrorInformation));
}

export function WSManPluginAuthzQueryQuotaComplete(
  senderDetails: Deno.PointerValue | Uint8Array /* ptr */,
  flags: number /* u32 */,
  quota: Deno.PointerValue | Uint8Array /* ptr */,
  errorCode: number /* u32 */,
  extendedErrorInformation: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libWsmSvc_dll.WSManPluginAuthzQueryQuotaComplete(util.toPointer(senderDetails), flags, util.toPointer(quota), errorCode, util.pwstrToFfi(extendedErrorInformation));
}

