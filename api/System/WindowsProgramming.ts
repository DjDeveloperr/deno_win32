/// Auto-generated by Deno Win32: Windows.Win32.System.WindowsProgramming.Apis

import * as util from "../../util.ts";

// Enums
export type TDIENTITY_ENTITY_TYPE = number;
export type FILE_INFORMATION_CLASS = number;
export type SYSTEM_INFORMATION_CLASS = number;
export type OBJECT_INFORMATION_CLASS = number;
export type KEY_SET_INFORMATION_CLASS = number;
export type WINSTATIONINFOCLASS = number;
export type CameraUIControlMode = number;
export type CameraUIControlLinearSelectionMode = number;
export type CameraUIControlCaptureMode = number;
export type CameraUIControlPhotoFormat = number;
export type CameraUIControlVideoFormat = number;
export type CameraUIControlViewType = number;
export type FEATURE_CHANGE_TIME = number;
export type FEATURE_ENABLED_STATE = number;
export type TDI_TL_IO_CONTROL_TYPE = number;
export type WLDP_HOST = number;
export type WLDP_HOST_ID = number;
export type DECISION_LOCATION = number;
export type WLDP_KEY = number;
export type VALUENAME = number;
export type WLDP_WINDOWS_LOCKDOWN_MODE = number;
export type WLDP_WINDOWS_LOCKDOWN_RESTRICTION = number;
export type WLDP_POLICY_SETTING = number;
export type WIN32_ERROR = number;

// Constants
export const GENERIC_ENTITY = 0;
export const AT_ENTITY = 640;
export const CL_NL_ENTITY = 769;
export const CO_NL_ENTITY = 768;
export const CL_TL_ENTITY = 1025;
export const CO_TL_ENTITY = 1024;
export const ER_ENTITY = 896;
export const IF_ENTITY = 512;
export const WLDP_DLL = `WLDP.DLL`;
export const WLDP_GETLOCKDOWNPOLICY_FN = `WldpGetLockdownPolicy`;
export const WLDP_ISCLASSINAPPROVEDLIST_FN = `WldpIsClassInApprovedList`;
export const WLDP_SETDYNAMICCODETRUST_FN = `WldpSetDynamicCodeTrust`;
export const WLDP_ISDYNAMICCODEPOLICYENABLED_FN = `WldpIsDynamicCodePolicyEnabled`;
export const WLDP_QUERYDANAMICCODETRUST_FN = `WldpQueryDynamicCodeTrust`;
export const WLDP_QUERYDYNAMICCODETRUST_FN = `WldpQueryDynamicCodeTrust`;
export const WLDP_QUERYWINDOWSLOCKDOWNMODE_FN = `WldpQueryWindowsLockdownMode`;
export const WLDP_SETWINDOWSLOCKDOWNRESTRICTION_FN = `WldpSetWindowsLockdownRestriction`;
export const WLDP_QUERYDEVICESECURITYINFORMATION_FN = `WldpQueryDeviceSecurityInformation`;
export const WLDP_QUERYWINDOWSLOCKDOWNRESTRICTION_FN = `WldpQueryWindowsLockdownRestriction`;
export const WLDP_ISAPPAPPROVEDBYPOLICY_FN = `WldpIsAppApprovedByPolicy`;
export const WLDP_QUERYPOLICYSETTINGENABLED_FN = `WldpQueryPolicySettingEnabled`;
export const WLDP_QUERYPOLICYSETTINGENABLED2_FN = `WldpQueryPolicySettingEnabled2`;
export const WLDP_ISWCOSPRODUCTIONCONFIGURATION_FN = `WldpIsWcosProductionConfiguration`;
export const WLDP_RESETWCOSPRODUCTIONCONFIGURATION_FN = `WldpResetWcosProductionConfiguration`;
export const WLDP_ISPRODUCTIONCONFIGURATION_FN = `WldpIsProductionConfiguration`;
export const WLDP_RESETPRODUCTIONCONFIGURATION_FN = `WldpResetProductionConfiguration`;
export const WLDP_LOCKDOWN_UNDEFINED = 0;
export const WLDP_LOCKDOWN_DEFINED_FLAG = 2147483648;
export const WLDP_LOCKDOWN_CONFIG_CI_FLAG = 1;
export const WLDP_LOCKDOWN_CONFIG_CI_AUDIT_FLAG = 2;
export const WLDP_LOCKDOWN_UMCIENFORCE_FLAG = 4;
export const WLDP_LOCKDOWN_AUDIT_FLAG = 8;
export const WLDP_LOCKDOWN_EXCLUSION_FLAG = 16;
export const WLDP_LOCKDOWN_OFF = 2147483648;
export const WLDP_HOST_INFORMATION_REVISION = 1;
export const WLDP_FLAGS_SKIPSIGNATUREVALIDATION = 256;
export const MAX_TDI_ENTITIES = 4096;
export const INFO_CLASS_GENERIC = 256;
export const INFO_CLASS_PROTOCOL = 512;
export const INFO_CLASS_IMPLEMENTATION = 768;
export const INFO_TYPE_PROVIDER = 256;
export const INFO_TYPE_ADDRESS_OBJECT = 512;
export const INFO_TYPE_CONNECTION = 768;
export const ENTITY_LIST_ID = 0;
export const INVALID_ENTITY_INSTANCE = `-1`;
export const CONTEXT_SIZE = 16;
export const ENTITY_TYPE_ID = 1;
export const CO_TL_NBF = 1024;
export const CO_TL_SPX = 1026;
export const CO_TL_TCP = 1028;
export const CO_TL_SPP = 1030;
export const CL_TL_NBF = 1025;
export const CL_TL_UDP = 1027;
export const ER_ICMP = 896;
export const CL_NL_IPX = 769;
export const CL_NL_IP = 771;
export const AT_ARP = 640;
export const AT_NULL = 642;
export const IF_GENERIC = 512;
export const IF_MIB = 514;
export const IOCTL_TDI_TL_IO_CONTROL_ENDPOINT = 2162744;
export const DCI_VERSION = 256;
export const DCICREATEPRIMARYSURFACE = 1;
export const DCICREATEOFFSCREENSURFACE = 2;
export const DCICREATEOVERLAYSURFACE = 3;
export const DCIENUMSURFACE = 4;
export const DCIESCAPE = 5;
export const DCI_OK = 0;
export const DCI_FAIL_GENERIC = `-1`;
export const DCI_FAIL_UNSUPPORTEDVERSION = `-2`;
export const DCI_FAIL_INVALIDSURFACE = `-3`;
export const DCI_FAIL_UNSUPPORTED = `-4`;
export const DCI_ERR_CURRENTLYNOTAVAIL = `-5`;
export const DCI_ERR_INVALIDRECT = `-6`;
export const DCI_ERR_UNSUPPORTEDFORMAT = `-7`;
export const DCI_ERR_UNSUPPORTEDMASK = `-8`;
export const DCI_ERR_TOOBIGHEIGHT = `-9`;
export const DCI_ERR_TOOBIGWIDTH = `-10`;
export const DCI_ERR_TOOBIGSIZE = `-11`;
export const DCI_ERR_OUTOFMEMORY = `-12`;
export const DCI_ERR_INVALIDPOSITION = `-13`;
export const DCI_ERR_INVALIDSTRETCH = `-14`;
export const DCI_ERR_INVALIDCLIPLIST = `-15`;
export const DCI_ERR_SURFACEISOBSCURED = `-16`;
export const DCI_ERR_XALIGN = `-17`;
export const DCI_ERR_YALIGN = `-18`;
export const DCI_ERR_XYALIGN = `-19`;
export const DCI_ERR_WIDTHALIGN = `-20`;
export const DCI_ERR_HEIGHTALIGN = `-21`;
export const DCI_STATUS_POINTERCHANGED = 1;
export const DCI_STATUS_STRIDECHANGED = 2;
export const DCI_STATUS_FORMATCHANGED = 4;
export const DCI_STATUS_SURFACEINFOCHANGED = 8;
export const DCI_STATUS_CHROMAKEYCHANGED = 16;
export const DCI_STATUS_WASSTILLDRAWING = 32;
export const DCI_SURFACE_TYPE = 15;
export const DCI_PRIMARY = 0;
export const DCI_OFFSCREEN = 1;
export const DCI_OVERLAY = 2;
export const DCI_VISIBLE = 16;
export const DCI_CHROMAKEY = 32;
export const DCI_1632_ACCESS = 64;
export const DCI_DWORDSIZE = 128;
export const DCI_DWORDALIGN = 256;
export const DCI_WRITEONLY = 512;
export const DCI_ASYNC = 1024;
export const DCI_CAN_STRETCHX = 4096;
export const DCI_CAN_STRETCHY = 8192;
export const DCI_CAN_STRETCHXN = 16384;
export const DCI_CAN_STRETCHYN = 32768;
export const DCI_CANOVERLAY = 65536;
export const FILE_FLAG_OPEN_REQUIRING_OPLOCK = 262144;
export const PROGRESS_CONTINUE = 0;
export const PROGRESS_CANCEL = 1;
export const PROGRESS_STOP = 2;
export const PROGRESS_QUIET = 3;
export const COPY_FILE_FAIL_IF_EXISTS = 1;
export const COPY_FILE_RESTARTABLE = 2;
export const COPY_FILE_OPEN_SOURCE_FOR_WRITE = 4;
export const COPY_FILE_ALLOW_DECRYPTED_DESTINATION = 8;
export const COPY_FILE_COPY_SYMLINK = 2048;
export const COPY_FILE_NO_BUFFERING = 4096;
export const COPY_FILE_REQUEST_SECURITY_PRIVILEGES = 8192;
export const COPY_FILE_RESUME_FROM_PAUSE = 16384;
export const COPY_FILE_NO_OFFLOAD = 262144;
export const COPY_FILE_IGNORE_EDP_BLOCK = 4194304;
export const COPY_FILE_IGNORE_SOURCE_ENCRYPTION = 8388608;
export const COPY_FILE_DONT_REQUEST_DEST_WRITE_DAC = 33554432;
export const COPY_FILE_REQUEST_COMPRESSED_TRAFFIC = 268435456;
export const COPY_FILE_OPEN_AND_COPY_REPARSE_POINT = 2097152;
export const COPY_FILE_DIRECTORY = 128;
export const COPY_FILE_SKIP_ALTERNATE_STREAMS = 32768;
export const COPY_FILE_DISABLE_PRE_ALLOCATION = 67108864;
export const COPY_FILE_ENABLE_LOW_FREE_SPACE_MODE = 134217728;
export const FAIL_FAST_GENERATE_EXCEPTION_ADDRESS = 1;
export const FAIL_FAST_NO_HARD_ERROR_DLG = 2;
export const DTR_CONTROL_DISABLE = 0;
export const DTR_CONTROL_ENABLE = 1;
export const DTR_CONTROL_HANDSHAKE = 2;
export const RTS_CONTROL_DISABLE = 0;
export const RTS_CONTROL_ENABLE = 1;
export const RTS_CONTROL_HANDSHAKE = 2;
export const RTS_CONTROL_TOGGLE = 3;
export const GMEM_NOCOMPACT = 16;
export const GMEM_NODISCARD = 32;
export const GMEM_MODIFY = 128;
export const GMEM_DISCARDABLE = 256;
export const GMEM_NOT_BANKED = 4096;
export const GMEM_SHARE = 8192;
export const GMEM_DDESHARE = 8192;
export const GMEM_NOTIFY = 16384;
export const GMEM_LOWER = 4096;
export const GMEM_VALID_FLAGS = 32626;
export const GMEM_INVALID_HANDLE = 32768;
export const GMEM_DISCARDED = 16384;
export const GMEM_LOCKCOUNT = 255;
export const THREAD_PRIORITY_ERROR_RETURN = 2147483647;
export const VOLUME_NAME_DOS = 0;
export const VOLUME_NAME_GUID = 1;
export const VOLUME_NAME_NT = 2;
export const VOLUME_NAME_NONE = 4;
export const DRIVE_UNKNOWN = 0;
export const DRIVE_NO_ROOT_DIR = 1;
export const DRIVE_REMOVABLE = 2;
export const DRIVE_FIXED = 3;
export const DRIVE_REMOTE = 4;
export const DRIVE_CDROM = 5;
export const DRIVE_RAMDISK = 6;
export const FILE_TYPE_UNKNOWN = 0;
export const FILE_TYPE_DISK = 1;
export const FILE_TYPE_CHAR = 2;
export const FILE_TYPE_PIPE = 3;
export const FILE_TYPE_REMOTE = 32768;
export const IGNORE = 0;
export const INFINITE = 4294967295;
export const CBR_110 = 110;
export const CBR_300 = 300;
export const CBR_600 = 600;
export const CBR_1200 = 1200;
export const CBR_2400 = 2400;
export const CBR_4800 = 4800;
export const CBR_9600 = 9600;
export const CBR_14400 = 14400;
export const CBR_19200 = 19200;
export const CBR_38400 = 38400;
export const CBR_56000 = 56000;
export const CBR_57600 = 57600;
export const CBR_115200 = 115200;
export const CBR_128000 = 128000;
export const CBR_256000 = 256000;
export const CE_TXFULL = 256;
export const CE_PTO = 512;
export const CE_IOE = 1024;
export const CE_DNS = 2048;
export const CE_OOP = 4096;
export const CE_MODE = 32768;
export const IE_BADID = `-1`;
export const IE_OPEN = `-2`;
export const IE_NOPEN = `-3`;
export const IE_MEMORY = `-4`;
export const IE_DEFAULT = `-5`;
export const IE_HARDWARE = `-10`;
export const IE_BYTESIZE = `-11`;
export const IE_BAUDRATE = `-12`;
export const RESETDEV = 7;
export const LPTx = 128;
export const S_QUEUEEMPTY = 0;
export const S_THRESHOLD = 1;
export const S_ALLTHRESHOLD = 2;
export const S_NORMAL = 0;
export const S_LEGATO = 1;
export const S_STACCATO = 2;
export const S_PERIOD512 = 0;
export const S_PERIOD1024 = 1;
export const S_PERIOD2048 = 2;
export const S_PERIODVOICE = 3;
export const S_WHITE512 = 4;
export const S_WHITE1024 = 5;
export const S_WHITE2048 = 6;
export const S_WHITEVOICE = 7;
export const S_SERDVNA = `-1`;
export const S_SEROFM = `-2`;
export const S_SERMACT = `-3`;
export const S_SERQFUL = `-4`;
export const S_SERBDNT = `-5`;
export const S_SERDLN = `-6`;
export const S_SERDCC = `-7`;
export const S_SERDTP = `-8`;
export const S_SERDVL = `-9`;
export const S_SERDMD = `-10`;
export const S_SERDSH = `-11`;
export const S_SERDPT = `-12`;
export const S_SERDFQ = `-13`;
export const S_SERDDR = `-14`;
export const S_SERDSR = `-15`;
export const S_SERDST = `-16`;
export const FS_CASE_IS_PRESERVED = 2;
export const FS_CASE_SENSITIVE = 1;
export const FS_UNICODE_STORED_ON_DISK = 4;
export const FS_PERSISTENT_ACLS = 8;
export const FS_VOL_IS_COMPRESSED = 32768;
export const FS_FILE_COMPRESSION = 16;
export const FS_FILE_ENCRYPTION = 131072;
export const OFS_MAXPATHNAME = 128;
export const MAXINTATOM = 49152;
export const SCS_32BIT_BINARY = 0;
export const SCS_DOS_BINARY = 1;
export const SCS_WOW_BINARY = 2;
export const SCS_PIF_BINARY = 3;
export const SCS_POSIX_BINARY = 4;
export const SCS_OS216_BINARY = 5;
export const SCS_64BIT_BINARY = 6;
export const SCS_THIS_PLATFORM_BINARY = 6;
export const FIBER_FLAG_FLOAT_SWITCH = 1;
export const UMS_VERSION = 256;
export const FILE_SKIP_COMPLETION_PORT_ON_SUCCESS = 1;
export const FILE_SKIP_SET_EVENT_ON_HANDLE = 2;
export const CRITICAL_SECTION_NO_DEBUG_INFO = 16777216;
export const HINSTANCE_ERROR = 32;
export const FORMAT_MESSAGE_MAX_WIDTH_MASK = 255;
export const FILE_ENCRYPTABLE = 0;
export const FILE_IS_ENCRYPTED = 1;
export const FILE_SYSTEM_ATTR = 2;
export const FILE_ROOT_DIR = 3;
export const FILE_SYSTEM_DIR = 4;
export const FILE_UNKNOWN = 5;
export const FILE_SYSTEM_NOT_SUPPORT = 6;
export const FILE_USER_DISALLOWED = 7;
export const FILE_READ_ONLY = 8;
export const FILE_DIR_DISALLOWED = 9;
export const EFS_USE_RECOVERY_KEYS = 1;
export const CREATE_FOR_IMPORT = 1;
export const CREATE_FOR_DIR = 2;
export const OVERWRITE_HIDDEN = 4;
export const EFSRPC_SECURE_ONLY = 8;
export const EFS_DROP_ALTERNATE_STREAMS = 16;
export const BACKUP_INVALID = 0;
export const BACKUP_GHOSTED_FILE_EXTENTS = 11;
export const STREAM_NORMAL_ATTRIBUTE = 0;
export const STREAM_MODIFIED_WHEN_READ = 1;
export const STREAM_CONTAINS_SECURITY = 2;
export const STREAM_CONTAINS_PROPERTIES = 4;
export const STREAM_SPARSE_ATTRIBUTE = 8;
export const STREAM_CONTAINS_GHOSTED_FILE_EXTENTS = 16;
export const STARTF_HOLOGRAPHIC = 262144;
export const SHUTDOWN_NORETRY = 1;
export const PROTECTION_LEVEL_SAME = 4294967295;
export const PROC_THREAD_ATTRIBUTE_NUMBER = 65535;
export const PROC_THREAD_ATTRIBUTE_THREAD = 65536;
export const PROC_THREAD_ATTRIBUTE_INPUT = 131072;
export const PROC_THREAD_ATTRIBUTE_ADDITIVE = 262144;
export const PROCESS_CREATION_MITIGATION_POLICY_DEP_ENABLE = 1;
export const PROCESS_CREATION_MITIGATION_POLICY_DEP_ATL_THUNK_ENABLE = 2;
export const PROCESS_CREATION_MITIGATION_POLICY_SEHOP_ENABLE = 4;
export const PROCESS_CREATION_CHILD_PROCESS_RESTRICTED = 1;
export const PROCESS_CREATION_CHILD_PROCESS_OVERRIDE = 2;
export const PROCESS_CREATION_CHILD_PROCESS_RESTRICTED_UNLESS_SECURE = 4;
export const PROCESS_CREATION_ALL_APPLICATION_PACKAGES_OPT_OUT = 1;
export const PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_ENABLE_PROCESS_TREE = 1;
export const PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_DISABLE_PROCESS_TREE = 2;
export const PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_OVERRIDE = 4;
export const ATOM_FLAG_GLOBAL = 2;
export const GET_SYSTEM_WOW64_DIRECTORY_NAME_A_A = `GetSystemWow64DirectoryA`;
export const GET_SYSTEM_WOW64_DIRECTORY_NAME_A_W = `GetSystemWow64DirectoryA`;
export const GET_SYSTEM_WOW64_DIRECTORY_NAME_A_T = `GetSystemWow64DirectoryA`;
export const GET_SYSTEM_WOW64_DIRECTORY_NAME_W_A = `GetSystemWow64DirectoryW`;
export const GET_SYSTEM_WOW64_DIRECTORY_NAME_W_W = `GetSystemWow64DirectoryW`;
export const GET_SYSTEM_WOW64_DIRECTORY_NAME_W_T = `GetSystemWow64DirectoryW`;
export const GET_SYSTEM_WOW64_DIRECTORY_NAME_T_A = `GetSystemWow64DirectoryW`;
export const GET_SYSTEM_WOW64_DIRECTORY_NAME_T_W = `GetSystemWow64DirectoryW`;
export const GET_SYSTEM_WOW64_DIRECTORY_NAME_T_T = `GetSystemWow64DirectoryW`;
export const BASE_SEARCH_PATH_ENABLE_SAFE_SEARCHMODE = 1;
export const BASE_SEARCH_PATH_DISABLE_SAFE_SEARCHMODE = 65536;
export const BASE_SEARCH_PATH_PERMANENT = 32768;
export const COPYFILE2_MESSAGE_COPY_OFFLOAD = 1;
export const COPYFILE2_IO_CYCLE_SIZE_MIN = 4096;
export const COPYFILE2_IO_CYCLE_SIZE_MAX = 1073741824;
export const COPYFILE2_IO_RATE_MIN = 512;
export const EVENTLOG_FULL_INFO = 0;
export const OPERATION_API_VERSION = 1;
export const MAX_COMPUTERNAME_LENGTH = 15;
export const LOGON32_PROVIDER_WINNT35 = 1;
export const LOGON32_PROVIDER_VIRTUAL = 4;
export const LOGON_ZERO_PASSWORD_BUFFER = 2147483648;
export const HW_PROFILE_GUIDLEN = 39;
export const DOCKINFO_UNDOCKED = 1;
export const DOCKINFO_DOCKED = 2;
export const DOCKINFO_USER_SUPPLIED = 4;
export const TC_NORMAL = 0;
export const TC_HARDERR = 1;
export const TC_GP_TRAP = 2;
export const TC_SIGNAL = 3;
export const AC_LINE_OFFLINE = 0;
export const AC_LINE_ONLINE = 1;
export const AC_LINE_BACKUP_POWER = 2;
export const AC_LINE_UNKNOWN = 255;
export const BATTERY_FLAG_HIGH = 1;
export const BATTERY_FLAG_LOW = 2;
export const BATTERY_FLAG_CRITICAL = 4;
export const BATTERY_FLAG_CHARGING = 8;
export const BATTERY_FLAG_NO_BATTERY = 128;
export const BATTERY_FLAG_UNKNOWN = 255;
export const BATTERY_PERCENTAGE_UNKNOWN = 255;
export const SYSTEM_STATUS_FLAG_POWER_SAVING_ON = 1;
export const BATTERY_LIFE_UNKNOWN = 4294967295;
export const ACTCTX_FLAG_PROCESSOR_ARCHITECTURE_VALID = 1;
export const ACTCTX_FLAG_LANGID_VALID = 2;
export const ACTCTX_FLAG_ASSEMBLY_DIRECTORY_VALID = 4;
export const ACTCTX_FLAG_RESOURCE_NAME_VALID = 8;
export const ACTCTX_FLAG_SET_PROCESS_DEFAULT = 16;
export const ACTCTX_FLAG_APPLICATION_NAME_VALID = 32;
export const ACTCTX_FLAG_SOURCE_IS_ASSEMBLYREF = 64;
export const ACTCTX_FLAG_HMODULE_VALID = 128;
export const DEACTIVATE_ACTCTX_FLAG_FORCE_EARLY_DEACTIVATION = 1;
export const FIND_ACTCTX_SECTION_KEY_RETURN_HACTCTX = 1;
export const FIND_ACTCTX_SECTION_KEY_RETURN_FLAGS = 2;
export const FIND_ACTCTX_SECTION_KEY_RETURN_ASSEMBLY_METADATA = 4;
export const ACTIVATION_CONTEXT_BASIC_INFORMATION_DEFINED = 1;
export const QUERY_ACTCTX_FLAG_USE_ACTIVE_ACTCTX = 4;
export const QUERY_ACTCTX_FLAG_ACTCTX_IS_HMODULE = 8;
export const QUERY_ACTCTX_FLAG_ACTCTX_IS_ADDRESS = 16;
export const QUERY_ACTCTX_FLAG_NO_ADDREF = 2147483648;
export const RESTART_MAX_CMD_LINE = 1024;
export const RECOVERY_DEFAULT_PING_INTERVAL = 5000;
export const FILE_RENAME_FLAG_REPLACE_IF_EXISTS = 1;
export const FILE_RENAME_FLAG_POSIX_SEMANTICS = 2;
export const FILE_RENAME_FLAG_SUPPRESS_PIN_STATE_INHERITANCE = 4;
export const FILE_DISPOSITION_FLAG_DO_NOT_DELETE = 0;
export const FILE_DISPOSITION_FLAG_DELETE = 1;
export const FILE_DISPOSITION_FLAG_POSIX_SEMANTICS = 2;
export const FILE_DISPOSITION_FLAG_FORCE_IMAGE_SECTION_CHECK = 4;
export const FILE_DISPOSITION_FLAG_ON_CLOSE = 8;
export const FILE_DISPOSITION_FLAG_IGNORE_READONLY_ATTRIBUTE = 16;
export const STORAGE_INFO_FLAGS_ALIGNED_DEVICE = 1;
export const STORAGE_INFO_FLAGS_PARTITION_ALIGNED_ON_DEVICE = 2;
export const STORAGE_INFO_OFFSET_UNKNOWN = 4294967295;
export const REMOTE_PROTOCOL_INFO_FLAG_LOOPBACK = 1;
export const REMOTE_PROTOCOL_INFO_FLAG_OFFLINE = 2;
export const REMOTE_PROTOCOL_INFO_FLAG_PERSISTENT_HANDLE = 4;
export const RPI_FLAG_SMB2_SHARECAP_TIMEWARP = 2;
export const RPI_FLAG_SMB2_SHARECAP_DFS = 8;
export const RPI_FLAG_SMB2_SHARECAP_CONTINUOUS_AVAILABILITY = 16;
export const RPI_FLAG_SMB2_SHARECAP_SCALEOUT = 32;
export const RPI_FLAG_SMB2_SHARECAP_CLUSTER = 64;
export const RPI_SMB2_FLAG_SERVERCAP_DFS = 1;
export const RPI_SMB2_FLAG_SERVERCAP_LEASING = 2;
export const RPI_SMB2_FLAG_SERVERCAP_LARGEMTU = 4;
export const RPI_SMB2_FLAG_SERVERCAP_MULTICHANNEL = 8;
export const RPI_SMB2_FLAG_SERVERCAP_PERSISTENT_HANDLES = 16;
export const RPI_SMB2_FLAG_SERVERCAP_DIRECTORY_LEASING = 32;
export const MICROSOFT_WINDOWS_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS = 0;
export const MICROSOFT_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS = 0;
export const CODEINTEGRITY_OPTION_ENABLED = 1;
export const CODEINTEGRITY_OPTION_TESTSIGN = 2;
export const CODEINTEGRITY_OPTION_UMCI_ENABLED = 4;
export const CODEINTEGRITY_OPTION_UMCI_AUDITMODE_ENABLED = 8;
export const CODEINTEGRITY_OPTION_UMCI_EXCLUSIONPATHS_ENABLED = 16;
export const CODEINTEGRITY_OPTION_TEST_BUILD = 32;
export const CODEINTEGRITY_OPTION_PREPRODUCTION_BUILD = 64;
export const CODEINTEGRITY_OPTION_DEBUGMODE_ENABLED = 128;
export const CODEINTEGRITY_OPTION_FLIGHT_BUILD = 256;
export const CODEINTEGRITY_OPTION_FLIGHTING_ENABLED = 512;
export const CODEINTEGRITY_OPTION_HVCI_KMCI_ENABLED = 1024;
export const CODEINTEGRITY_OPTION_HVCI_KMCI_AUDITMODE_ENABLED = 2048;
export const CODEINTEGRITY_OPTION_HVCI_KMCI_STRICTMODE_ENABLED = 4096;
export const CODEINTEGRITY_OPTION_HVCI_IUM_ENABLED = 8192;
export const FILE_MAXIMUM_DISPOSITION = 5;
export const FILE_DIRECTORY_FILE = 1;
export const FILE_WRITE_THROUGH = 2;
export const FILE_SEQUENTIAL_ONLY = 4;
export const FILE_NO_INTERMEDIATE_BUFFERING = 8;
export const FILE_SYNCHRONOUS_IO_ALERT = 16;
export const FILE_SYNCHRONOUS_IO_NONALERT = 32;
export const FILE_NON_DIRECTORY_FILE = 64;
export const FILE_CREATE_TREE_CONNECTION = 128;
export const FILE_COMPLETE_IF_OPLOCKED = 256;
export const FILE_NO_EA_KNOWLEDGE = 512;
export const FILE_OPEN_REMOTE_INSTANCE = 1024;
export const FILE_RANDOM_ACCESS = 2048;
export const FILE_DELETE_ON_CLOSE = 4096;
export const FILE_OPEN_BY_FILE_ID = 8192;
export const FILE_OPEN_FOR_BACKUP_INTENT = 16384;
export const FILE_NO_COMPRESSION = 32768;
export const FILE_OPEN_REQUIRING_OPLOCK = 65536;
export const FILE_RESERVE_OPFILTER = 1048576;
export const FILE_OPEN_REPARSE_POINT = 2097152;
export const FILE_OPEN_NO_RECALL = 4194304;
export const FILE_OPEN_FOR_FREE_SPACE_QUERY = 8388608;
export const FILE_VALID_OPTION_FLAGS = 16777215;
export const FILE_VALID_PIPE_OPTION_FLAGS = 50;
export const FILE_VALID_MAILSLOT_OPTION_FLAGS = 50;
export const FILE_VALID_SET_FLAGS = 54;
export const FILE_SUPERSEDED = 0;
export const FILE_OPENED = 1;
export const FILE_CREATED = 2;
export const FILE_OVERWRITTEN = 3;
export const FILE_EXISTS = 4;
export const FILE_DOES_NOT_EXIST = 5;
export const WINWATCHNOTIFY_START = 0;
export const WINWATCHNOTIFY_STOP = 1;
export const WINWATCHNOTIFY_DESTROY = 2;
export const WINWATCHNOTIFY_CHANGING = 3;
export const WINWATCHNOTIFY_CHANGED = 4;
export const RSC_FLAG_INF = 1;
export const RSC_FLAG_SKIPDISKSPACECHECK = 2;
export const RSC_FLAG_QUIET = 4;
export const RSC_FLAG_NGCONV = 8;
export const RSC_FLAG_UPDHLPDLLS = 16;
export const RSC_FLAG_DELAYREGISTEROCX = 512;
export const RSC_FLAG_SETUPAPI = 1024;
export const ALINF_QUIET = 4;
export const ALINF_NGCONV = 8;
export const ALINF_UPDHLPDLLS = 16;
export const ALINF_BKINSTALL = 32;
export const ALINF_ROLLBACK = 64;
export const ALINF_CHECKBKDATA = 128;
export const ALINF_ROLLBKDOALL = 256;
export const ALINF_DELAYREGISTEROCX = 512;
export const AIF_WARNIFSKIP = 1;
export const AIF_NOSKIP = 2;
export const AIF_NOVERSIONCHECK = 4;
export const AIF_FORCE_FILE_IN_USE = 8;
export const AIF_NOOVERWRITE = 16;
export const AIF_NO_VERSION_DIALOG = 32;
export const AIF_REPLACEONLY = 1024;
export const AIF_NOLANGUAGECHECK = 268435456;
export const AIF_QUIET = 536870912;
export const IE4_RESTORE = 1;
export const IE4_BACKNEW = 2;
export const IE4_NODELETENEW = 4;
export const IE4_NOMESSAGES = 8;
export const IE4_NOPROGRESS = 16;
export const IE4_NOENUMKEY = 32;
export const IE4_NO_CRC_MAPPING = 64;
export const IE4_REGSECTION = 128;
export const IE4_FRDOALL = 256;
export const IE4_UPDREFCNT = 512;
export const IE4_USEREFCNT = 1024;
export const IE4_EXTRAINCREFCNT = 2048;
export const IE4_REMOVREGBKDATA = 4096;
export const ARSR_RESTORE = 1;
export const ARSR_NOMESSAGES = 8;
export const ARSR_REGSECTION = 128;
export const ARSR_REMOVREGBKDATA = 4096;
export const REG_SAVE_LOG_KEY = `RegSaveLogFile`;
export const REG_RESTORE_LOG_KEY = `RegRestoreLogFile`;
export const AFSR_RESTORE = 1;
export const AFSR_BACKNEW = 2;
export const AFSR_NODELETENEW = 4;
export const AFSR_NOMESSAGES = 8;
export const AFSR_NOPROGRESS = 16;
export const AFSR_UPDREFCNT = 512;
export const AFSR_USEREFCNT = 1024;
export const AFSR_EXTRAINCREFCNT = 2048;
export const AADBE_ADD_ENTRY = 1;
export const AADBE_DEL_ENTRY = 2;
export const ADN_DEL_IF_EMPTY = 1;
export const ADN_DONT_DEL_SUBDIRS = 2;
export const ADN_DONT_DEL_DIR = 4;
export const ADN_DEL_UNC_PATHS = 8;
export const LIS_QUIET = 1;
export const LIS_NOGRPCONV = 2;
export const RUNCMDS_QUIET = 1;
export const RUNCMDS_NOWAIT = 2;
export const RUNCMDS_DELAYPOSTCMD = 4;
export const IME_MAXPROCESS = 32;
export const CP_HWND = 0;
export const CP_OPEN = 1;
export const CP_DIRECT = 2;
export const CP_LEVEL = 3;
export const MCW_DEFAULT = 0;
export const MCW_RECT = 1;
export const MCW_WINDOW = 2;
export const MCW_SCREEN = 4;
export const MCW_VERTICAL = 8;
export const MCW_HIDDEN = 16;
export const IME_MODE_ALPHANUMERIC = 1;
export const IME_MODE_SBCSCHAR = 2;
export const IME_MODE_KATAKANA = 2;
export const IME_MODE_HIRAGANA = 4;
export const IME_MODE_HANJACONVERT = 4;
export const IME_MODE_DBCSCHAR = 16;
export const IME_MODE_ROMAN = 32;
export const IME_MODE_NOROMAN = 64;
export const IME_MODE_CODEINPUT = 128;
export const IME_MODE_NOCODEINPUT = 256;
export const IME_GETIMECAPS = 3;
export const IME_SETOPEN = 4;
export const IME_GETOPEN = 5;
export const IME_GETVERSION = 7;
export const IME_SETCONVERSIONWINDOW = 8;
export const IME_MOVEIMEWINDOW = 8;
export const IME_SETCONVERSIONMODE = 16;
export const IME_GETCONVERSIONMODE = 17;
export const IME_SET_MODE = 18;
export const IME_SENDVKEY = 19;
export const IME_ENTERWORDREGISTERMODE = 24;
export const IME_SETCONVERSIONFONTEX = 25;
export const IME_BANJAtoJUNJA = 19;
export const IME_JUNJAtoBANJA = 20;
export const IME_JOHABtoKS = 21;
export const IME_KStoJOHAB = 22;
export const IMEA_INIT = 1;
export const IMEA_NEXT = 2;
export const IMEA_PREV = 3;
export const IME_REQUEST_CONVERT = 1;
export const IME_ENABLE_CONVERT = 2;
export const INTERIM_WINDOW = 0;
export const MODE_WINDOW = 1;
export const HANJA_WINDOW = 2;
export const IME_RS_ERROR = 1;
export const IME_RS_NOIME = 2;
export const IME_RS_TOOLONG = 5;
export const IME_RS_ILLEGAL = 6;
export const IME_RS_NOTFOUND = 7;
export const IME_RS_NOROOM = 10;
export const IME_RS_DISKERROR = 14;
export const IME_RS_INVALID = 17;
export const IME_RS_NEST = 18;
export const IME_RS_SYSTEMMODAL = 19;
export const WM_IME_REPORT = 640;
export const IR_STRINGSTART = 256;
export const IR_STRINGEND = 257;
export const IR_OPENCONVERT = 288;
export const IR_CHANGECONVERT = 289;
export const IR_CLOSECONVERT = 290;
export const IR_FULLCONVERT = 291;
export const IR_IMESELECT = 304;
export const IR_STRING = 320;
export const IR_DBCSCHAR = 352;
export const IR_UNDETERMINE = 368;
export const IR_STRINGEX = 384;
export const IR_MODEINFO = 400;
export const WM_WNT_CONVERTREQUESTEX = 265;
export const WM_CONVERTREQUEST = 266;
export const WM_CONVERTRESULT = 267;
export const WM_INTERIM = 268;
export const WM_IMEKEYDOWN = 656;
export const WM_IMEKEYUP = 657;
export const DELAYLOAD_GPA_FAILURE = 4;
export const DELETE_BROWSING_HISTORY_HISTORY = 1;
export const DELETE_BROWSING_HISTORY_COOKIES = 2;
export const DELETE_BROWSING_HISTORY_TIF = 4;
export const DELETE_BROWSING_HISTORY_FORMDATA = 8;
export const DELETE_BROWSING_HISTORY_PASSWORDS = 16;
export const DELETE_BROWSING_HISTORY_PRESERVEFAVORITES = 32;
export const DELETE_BROWSING_HISTORY_DOWNLOADHISTORY = 64;
export const FileDirectoryInformation = 1;
export const SystemBasicInformation = 0;
export const SystemPerformanceInformation = 2;
export const SystemTimeOfDayInformation = 3;
export const SystemProcessInformation = 5;
export const SystemProcessorPerformanceInformation = 8;
export const SystemInterruptInformation = 23;
export const SystemExceptionInformation = 33;
export const SystemRegistryQuotaInformation = 37;
export const SystemLookasideInformation = 45;
export const SystemCodeIntegrityInformation = 103;
export const SystemPolicyInformation = 134;
export const ObjectBasicInformation = 0;
export const ObjectTypeInformation = 2;
export const KeyWriteTimeInformation = 0;
export const KeyWow64FlagsInformation = 1;
export const KeyControlFlagsInformation = 2;
export const KeySetVirtualizationInformation = 3;
export const KeySetDebugInformation = 4;
export const KeySetHandleTagsInformation = 5;
export const MaxKeySetInfoClass = 6;
export const WinStationInformation = 8;
export const Browse = 0;
export const Linear = 1;
export const Single = 0;
export const Multiple = 1;
export const PhotoOrVideo = 0;
export const Photo = 1;
export const Video = 2;
export const Jpeg = 0;
export const Png = 1;
export const JpegXR = 2;
export const Mp4 = 0;
export const Wmv = 1;
export const SingleItem = 0;
export const ItemList = 1;
export const FEATURE_CHANGE_TIME_READ = 0;
export const FEATURE_CHANGE_TIME_MODULE_RELOAD = 1;
export const FEATURE_CHANGE_TIME_SESSION = 2;
export const FEATURE_CHANGE_TIME_REBOOT = 3;
export const FEATURE_ENABLED_STATE_DEFAULT = 0;
export const FEATURE_ENABLED_STATE_DISABLED = 1;
export const FEATURE_ENABLED_STATE_ENABLED = 2;
export const EndpointIoControlType = 0;
export const SetSockOptIoControlType = 1;
export const GetSockOptIoControlType = 2;
export const SocketIoControlType = 3;
export const WLDP_HOST_RUNDLL32 = 0;
export const WLDP_HOST_SVCHOST = 1;
export const WLDP_HOST_MAX = 2;
export const WLDP_HOST_ID_UNKNOWN = 0;
export const WLDP_HOST_ID_GLOBAL = 1;
export const WLDP_HOST_ID_VBA = 2;
export const WLDP_HOST_ID_WSH = 3;
export const WLDP_HOST_ID_POWERSHELL = 4;
export const WLDP_HOST_ID_IE = 5;
export const WLDP_HOST_ID_MSI = 6;
export const WLDP_HOST_ID_ALL = 7;
export const WLDP_HOST_ID_MAX = 8;
export const DECISION_LOCATION_REFRESH_GLOBAL_DATA = 0;
export const DECISION_LOCATION_PARAMETER_VALIDATION = 1;
export const DECISION_LOCATION_AUDIT = 2;
export const DECISION_LOCATION_FAILED_CONVERT_GUID = 3;
export const DECISION_LOCATION_ENTERPRISE_DEFINED_CLASS_ID = 4;
export const DECISION_LOCATION_GLOBAL_BUILT_IN_LIST = 5;
export const DECISION_LOCATION_PROVIDER_BUILT_IN_LIST = 6;
export const DECISION_LOCATION_ENFORCE_STATE_LIST = 7;
export const DECISION_LOCATION_NOT_FOUND = 8;
export const DECISION_LOCATION_UNKNOWN = 9;
export const KEY_UNKNOWN = 0;
export const KEY_OVERRIDE = 1;
export const KEY_ALL_KEYS = 2;
export const VALUENAME_UNKNOWN = 0;
export const VALUENAME_ENTERPRISE_DEFINED_CLASS_ID = 1;
export const VALUENAME_BUILT_IN_LIST = 2;
export const WLDP_WINDOWS_LOCKDOWN_MODE_UNLOCKED = 0;
export const WLDP_WINDOWS_LOCKDOWN_MODE_TRIAL = 1;
export const WLDP_WINDOWS_LOCKDOWN_MODE_LOCKED = 2;
export const WLDP_WINDOWS_LOCKDOWN_MODE_MAX = 3;
export const WLDP_WINDOWS_LOCKDOWN_RESTRICTION_NONE = 0;
export const WLDP_WINDOWS_LOCKDOWN_RESTRICTION_NOUNLOCK = 1;
export const WLDP_WINDOWS_LOCKDOWN_RESTRICTION_NOUNLOCK_PERMANENT = 2;
export const WLDP_WINDOWS_LOCKDOWN_RESTRICTION_MAX = 3;
export const WLDP_POLICY_SETTING_AV_PERF_MODE = 1000;
export const NO_ERROR = 0;
export const WAIT_OBJECT_0 = 0;
export const WAIT_ABANDONED = 128;
export const WAIT_ABANDONED_0 = 128;
export const WAIT_IO_COMPLETION = 192;
export const WAIT_TIMEOUT = 258;
export const WAIT_FAILED = 4294967295;
export const ERROR_SUCCESS = 0;
export const ERROR_INVALID_FUNCTION = 1;
export const ERROR_FILE_NOT_FOUND = 2;
export const ERROR_PATH_NOT_FOUND = 3;
export const ERROR_TOO_MANY_OPEN_FILES = 4;
export const ERROR_ACCESS_DENIED = 5;
export const ERROR_INVALID_HANDLE = 6;
export const ERROR_ARENA_TRASHED = 7;
export const ERROR_NOT_ENOUGH_MEMORY = 8;
export const ERROR_INVALID_BLOCK = 9;
export const ERROR_BAD_ENVIRONMENT = 10;
export const ERROR_BAD_FORMAT = 11;
export const ERROR_INVALID_ACCESS = 12;
export const ERROR_INVALID_DATA = 13;
export const ERROR_OUTOFMEMORY = 14;
export const ERROR_INVALID_DRIVE = 15;
export const ERROR_CURRENT_DIRECTORY = 16;
export const ERROR_NOT_SAME_DEVICE = 17;
export const ERROR_NO_MORE_FILES = 18;
export const ERROR_WRITE_PROTECT = 19;
export const ERROR_BAD_UNIT = 20;
export const ERROR_NOT_READY = 21;
export const ERROR_BAD_COMMAND = 22;
export const ERROR_CRC = 23;
export const ERROR_BAD_LENGTH = 24;
export const ERROR_SEEK = 25;
export const ERROR_NOT_DOS_DISK = 26;
export const ERROR_SECTOR_NOT_FOUND = 27;
export const ERROR_OUT_OF_PAPER = 28;
export const ERROR_WRITE_FAULT = 29;
export const ERROR_READ_FAULT = 30;
export const ERROR_GEN_FAILURE = 31;
export const ERROR_SHARING_VIOLATION = 32;
export const ERROR_LOCK_VIOLATION = 33;
export const ERROR_WRONG_DISK = 34;
export const ERROR_SHARING_BUFFER_EXCEEDED = 36;
export const ERROR_HANDLE_EOF = 38;
export const ERROR_HANDLE_DISK_FULL = 39;
export const ERROR_NOT_SUPPORTED = 50;
export const ERROR_REM_NOT_LIST = 51;
export const ERROR_DUP_NAME = 52;
export const ERROR_BAD_NETPATH = 53;
export const ERROR_NETWORK_BUSY = 54;
export const ERROR_DEV_NOT_EXIST = 55;
export const ERROR_TOO_MANY_CMDS = 56;
export const ERROR_ADAP_HDW_ERR = 57;
export const ERROR_BAD_NET_RESP = 58;
export const ERROR_UNEXP_NET_ERR = 59;
export const ERROR_BAD_REM_ADAP = 60;
export const ERROR_PRINTQ_FULL = 61;
export const ERROR_NO_SPOOL_SPACE = 62;
export const ERROR_PRINT_CANCELLED = 63;
export const ERROR_NETNAME_DELETED = 64;
export const ERROR_NETWORK_ACCESS_DENIED = 65;
export const ERROR_BAD_DEV_TYPE = 66;
export const ERROR_BAD_NET_NAME = 67;
export const ERROR_TOO_MANY_NAMES = 68;
export const ERROR_TOO_MANY_SESS = 69;
export const ERROR_SHARING_PAUSED = 70;
export const ERROR_REQ_NOT_ACCEP = 71;
export const ERROR_REDIR_PAUSED = 72;
export const ERROR_FILE_EXISTS = 80;
export const ERROR_CANNOT_MAKE = 82;
export const ERROR_FAIL_I24 = 83;
export const ERROR_OUT_OF_STRUCTURES = 84;
export const ERROR_ALREADY_ASSIGNED = 85;
export const ERROR_INVALID_PASSWORD = 86;
export const ERROR_INVALID_PARAMETER = 87;
export const ERROR_NET_WRITE_FAULT = 88;
export const ERROR_NO_PROC_SLOTS = 89;
export const ERROR_TOO_MANY_SEMAPHORES = 100;
export const ERROR_EXCL_SEM_ALREADY_OWNED = 101;
export const ERROR_SEM_IS_SET = 102;
export const ERROR_TOO_MANY_SEM_REQUESTS = 103;
export const ERROR_INVALID_AT_INTERRUPT_TIME = 104;
export const ERROR_SEM_OWNER_DIED = 105;
export const ERROR_SEM_USER_LIMIT = 106;
export const ERROR_DISK_CHANGE = 107;
export const ERROR_DRIVE_LOCKED = 108;
export const ERROR_BROKEN_PIPE = 109;
export const ERROR_OPEN_FAILED = 110;
export const ERROR_BUFFER_OVERFLOW = 111;
export const ERROR_DISK_FULL = 112;
export const ERROR_NO_MORE_SEARCH_HANDLES = 113;
export const ERROR_INVALID_TARGET_HANDLE = 114;
export const ERROR_INVALID_CATEGORY = 117;
export const ERROR_INVALID_VERIFY_SWITCH = 118;
export const ERROR_BAD_DRIVER_LEVEL = 119;
export const ERROR_CALL_NOT_IMPLEMENTED = 120;
export const ERROR_SEM_TIMEOUT = 121;
export const ERROR_INSUFFICIENT_BUFFER = 122;
export const ERROR_INVALID_NAME = 123;
export const ERROR_INVALID_LEVEL = 124;
export const ERROR_NO_VOLUME_LABEL = 125;
export const ERROR_MOD_NOT_FOUND = 126;
export const ERROR_PROC_NOT_FOUND = 127;
export const ERROR_WAIT_NO_CHILDREN = 128;
export const ERROR_CHILD_NOT_COMPLETE = 129;
export const ERROR_DIRECT_ACCESS_HANDLE = 130;
export const ERROR_NEGATIVE_SEEK = 131;
export const ERROR_SEEK_ON_DEVICE = 132;
export const ERROR_IS_JOIN_TARGET = 133;
export const ERROR_IS_JOINED = 134;
export const ERROR_IS_SUBSTED = 135;
export const ERROR_NOT_JOINED = 136;
export const ERROR_NOT_SUBSTED = 137;
export const ERROR_JOIN_TO_JOIN = 138;
export const ERROR_SUBST_TO_SUBST = 139;
export const ERROR_JOIN_TO_SUBST = 140;
export const ERROR_SUBST_TO_JOIN = 141;
export const ERROR_BUSY_DRIVE = 142;
export const ERROR_SAME_DRIVE = 143;
export const ERROR_DIR_NOT_ROOT = 144;
export const ERROR_DIR_NOT_EMPTY = 145;
export const ERROR_IS_SUBST_PATH = 146;
export const ERROR_IS_JOIN_PATH = 147;
export const ERROR_PATH_BUSY = 148;
export const ERROR_IS_SUBST_TARGET = 149;
export const ERROR_SYSTEM_TRACE = 150;
export const ERROR_INVALID_EVENT_COUNT = 151;
export const ERROR_TOO_MANY_MUXWAITERS = 152;
export const ERROR_INVALID_LIST_FORMAT = 153;
export const ERROR_LABEL_TOO_LONG = 154;
export const ERROR_TOO_MANY_TCBS = 155;
export const ERROR_SIGNAL_REFUSED = 156;
export const ERROR_DISCARDED = 157;
export const ERROR_NOT_LOCKED = 158;
export const ERROR_BAD_THREADID_ADDR = 159;
export const ERROR_BAD_ARGUMENTS = 160;
export const ERROR_BAD_PATHNAME = 161;
export const ERROR_SIGNAL_PENDING = 162;
export const ERROR_MAX_THRDS_REACHED = 164;
export const ERROR_LOCK_FAILED = 167;
export const ERROR_BUSY = 170;
export const ERROR_DEVICE_SUPPORT_IN_PROGRESS = 171;
export const ERROR_CANCEL_VIOLATION = 173;
export const ERROR_ATOMIC_LOCKS_NOT_SUPPORTED = 174;
export const ERROR_INVALID_SEGMENT_NUMBER = 180;
export const ERROR_INVALID_ORDINAL = 182;
export const ERROR_ALREADY_EXISTS = 183;
export const ERROR_INVALID_FLAG_NUMBER = 186;
export const ERROR_SEM_NOT_FOUND = 187;
export const ERROR_INVALID_STARTING_CODESEG = 188;
export const ERROR_INVALID_STACKSEG = 189;
export const ERROR_INVALID_MODULETYPE = 190;
export const ERROR_INVALID_EXE_SIGNATURE = 191;
export const ERROR_EXE_MARKED_INVALID = 192;
export const ERROR_BAD_EXE_FORMAT = 193;
export const ERROR_ITERATED_DATA_EXCEEDS_64k = 194;
export const ERROR_INVALID_MINALLOCSIZE = 195;
export const ERROR_DYNLINK_FROM_INVALID_RING = 196;
export const ERROR_IOPL_NOT_ENABLED = 197;
export const ERROR_INVALID_SEGDPL = 198;
export const ERROR_AUTODATASEG_EXCEEDS_64k = 199;
export const ERROR_RING2SEG_MUST_BE_MOVABLE = 200;
export const ERROR_RELOC_CHAIN_XEEDS_SEGLIM = 201;
export const ERROR_INFLOOP_IN_RELOC_CHAIN = 202;
export const ERROR_ENVVAR_NOT_FOUND = 203;
export const ERROR_NO_SIGNAL_SENT = 205;
export const ERROR_FILENAME_EXCED_RANGE = 206;
export const ERROR_RING2_STACK_IN_USE = 207;
export const ERROR_META_EXPANSION_TOO_LONG = 208;
export const ERROR_INVALID_SIGNAL_NUMBER = 209;
export const ERROR_THREAD_1_INACTIVE = 210;
export const ERROR_LOCKED = 212;
export const ERROR_TOO_MANY_MODULES = 214;
export const ERROR_NESTING_NOT_ALLOWED = 215;
export const ERROR_EXE_MACHINE_TYPE_MISMATCH = 216;
export const ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY = 217;
export const ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY = 218;
export const ERROR_FILE_CHECKED_OUT = 220;
export const ERROR_CHECKOUT_REQUIRED = 221;
export const ERROR_BAD_FILE_TYPE = 222;
export const ERROR_FILE_TOO_LARGE = 223;
export const ERROR_FORMS_AUTH_REQUIRED = 224;
export const ERROR_VIRUS_INFECTED = 225;
export const ERROR_VIRUS_DELETED = 226;
export const ERROR_PIPE_LOCAL = 229;
export const ERROR_BAD_PIPE = 230;
export const ERROR_PIPE_BUSY = 231;
export const ERROR_NO_DATA = 232;
export const ERROR_PIPE_NOT_CONNECTED = 233;
export const ERROR_MORE_DATA = 234;
export const ERROR_NO_WORK_DONE = 235;
export const ERROR_VC_DISCONNECTED = 240;
export const ERROR_INVALID_EA_NAME = 254;
export const ERROR_EA_LIST_INCONSISTENT = 255;
export const ERROR_NO_MORE_ITEMS = 259;
export const ERROR_CANNOT_COPY = 266;
export const ERROR_DIRECTORY = 267;
export const ERROR_EAS_DIDNT_FIT = 275;
export const ERROR_EA_FILE_CORRUPT = 276;
export const ERROR_EA_TABLE_FULL = 277;
export const ERROR_INVALID_EA_HANDLE = 278;
export const ERROR_EAS_NOT_SUPPORTED = 282;
export const ERROR_NOT_OWNER = 288;
export const ERROR_TOO_MANY_POSTS = 298;
export const ERROR_PARTIAL_COPY = 299;
export const ERROR_OPLOCK_NOT_GRANTED = 300;
export const ERROR_INVALID_OPLOCK_PROTOCOL = 301;
export const ERROR_DISK_TOO_FRAGMENTED = 302;
export const ERROR_DELETE_PENDING = 303;
export const ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING = 304;
export const ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME = 305;
export const ERROR_SECURITY_STREAM_IS_INCONSISTENT = 306;
export const ERROR_INVALID_LOCK_RANGE = 307;
export const ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT = 308;
export const ERROR_NOTIFICATION_GUID_ALREADY_DEFINED = 309;
export const ERROR_INVALID_EXCEPTION_HANDLER = 310;
export const ERROR_DUPLICATE_PRIVILEGES = 311;
export const ERROR_NO_RANGES_PROCESSED = 312;
export const ERROR_NOT_ALLOWED_ON_SYSTEM_FILE = 313;
export const ERROR_DISK_RESOURCES_EXHAUSTED = 314;
export const ERROR_INVALID_TOKEN = 315;
export const ERROR_DEVICE_FEATURE_NOT_SUPPORTED = 316;
export const ERROR_MR_MID_NOT_FOUND = 317;
export const ERROR_SCOPE_NOT_FOUND = 318;
export const ERROR_UNDEFINED_SCOPE = 319;
export const ERROR_INVALID_CAP = 320;
export const ERROR_DEVICE_UNREACHABLE = 321;
export const ERROR_DEVICE_NO_RESOURCES = 322;
export const ERROR_DATA_CHECKSUM_ERROR = 323;
export const ERROR_INTERMIXED_KERNEL_EA_OPERATION = 324;
export const ERROR_FILE_LEVEL_TRIM_NOT_SUPPORTED = 326;
export const ERROR_OFFSET_ALIGNMENT_VIOLATION = 327;
export const ERROR_INVALID_FIELD_IN_PARAMETER_LIST = 328;
export const ERROR_OPERATION_IN_PROGRESS = 329;
export const ERROR_BAD_DEVICE_PATH = 330;
export const ERROR_TOO_MANY_DESCRIPTORS = 331;
export const ERROR_SCRUB_DATA_DISABLED = 332;
export const ERROR_NOT_REDUNDANT_STORAGE = 333;
export const ERROR_RESIDENT_FILE_NOT_SUPPORTED = 334;
export const ERROR_COMPRESSED_FILE_NOT_SUPPORTED = 335;
export const ERROR_DIRECTORY_NOT_SUPPORTED = 336;
export const ERROR_NOT_READ_FROM_COPY = 337;
export const ERROR_FT_WRITE_FAILURE = 338;
export const ERROR_FT_DI_SCAN_REQUIRED = 339;
export const ERROR_INVALID_KERNEL_INFO_VERSION = 340;
export const ERROR_INVALID_PEP_INFO_VERSION = 341;
export const ERROR_OBJECT_NOT_EXTERNALLY_BACKED = 342;
export const ERROR_EXTERNAL_BACKING_PROVIDER_UNKNOWN = 343;
export const ERROR_COMPRESSION_NOT_BENEFICIAL = 344;
export const ERROR_STORAGE_TOPOLOGY_ID_MISMATCH = 345;
export const ERROR_BLOCKED_BY_PARENTAL_CONTROLS = 346;
export const ERROR_BLOCK_TOO_MANY_REFERENCES = 347;
export const ERROR_MARKED_TO_DISALLOW_WRITES = 348;
export const ERROR_ENCLAVE_FAILURE = 349;
export const ERROR_FAIL_NOACTION_REBOOT = 350;
export const ERROR_FAIL_SHUTDOWN = 351;
export const ERROR_FAIL_RESTART = 352;
export const ERROR_MAX_SESSIONS_REACHED = 353;
export const ERROR_NETWORK_ACCESS_DENIED_EDP = 354;
export const ERROR_DEVICE_HINT_NAME_BUFFER_TOO_SMALL = 355;
export const ERROR_EDP_POLICY_DENIES_OPERATION = 356;
export const ERROR_EDP_DPL_POLICY_CANT_BE_SATISFIED = 357;
export const ERROR_CLOUD_FILE_SYNC_ROOT_METADATA_CORRUPT = 358;
export const ERROR_DEVICE_IN_MAINTENANCE = 359;
export const ERROR_NOT_SUPPORTED_ON_DAX = 360;
export const ERROR_DAX_MAPPING_EXISTS = 361;
export const ERROR_CLOUD_FILE_PROVIDER_NOT_RUNNING = 362;
export const ERROR_CLOUD_FILE_METADATA_CORRUPT = 363;
export const ERROR_CLOUD_FILE_METADATA_TOO_LARGE = 364;
export const ERROR_CLOUD_FILE_PROPERTY_BLOB_TOO_LARGE = 365;
export const ERROR_CLOUD_FILE_PROPERTY_BLOB_CHECKSUM_MISMATCH = 366;
export const ERROR_CHILD_PROCESS_BLOCKED = 367;
export const ERROR_STORAGE_LOST_DATA_PERSISTENCE = 368;
export const ERROR_FILE_SYSTEM_VIRTUALIZATION_UNAVAILABLE = 369;
export const ERROR_FILE_SYSTEM_VIRTUALIZATION_METADATA_CORRUPT = 370;
export const ERROR_FILE_SYSTEM_VIRTUALIZATION_BUSY = 371;
export const ERROR_FILE_SYSTEM_VIRTUALIZATION_PROVIDER_UNKNOWN = 372;
export const ERROR_GDI_HANDLE_LEAK = 373;
export const ERROR_CLOUD_FILE_TOO_MANY_PROPERTY_BLOBS = 374;
export const ERROR_CLOUD_FILE_PROPERTY_VERSION_NOT_SUPPORTED = 375;
export const ERROR_NOT_A_CLOUD_FILE = 376;
export const ERROR_CLOUD_FILE_NOT_IN_SYNC = 377;
export const ERROR_CLOUD_FILE_ALREADY_CONNECTED = 378;
export const ERROR_CLOUD_FILE_NOT_SUPPORTED = 379;
export const ERROR_CLOUD_FILE_INVALID_REQUEST = 380;
export const ERROR_CLOUD_FILE_READ_ONLY_VOLUME = 381;
export const ERROR_CLOUD_FILE_CONNECTED_PROVIDER_ONLY = 382;
export const ERROR_CLOUD_FILE_VALIDATION_FAILED = 383;
export const ERROR_SMB1_NOT_AVAILABLE = 384;
export const ERROR_FILE_SYSTEM_VIRTUALIZATION_INVALID_OPERATION = 385;
export const ERROR_CLOUD_FILE_AUTHENTICATION_FAILED = 386;
export const ERROR_CLOUD_FILE_INSUFFICIENT_RESOURCES = 387;
export const ERROR_CLOUD_FILE_NETWORK_UNAVAILABLE = 388;
export const ERROR_CLOUD_FILE_UNSUCCESSFUL = 389;
export const ERROR_CLOUD_FILE_NOT_UNDER_SYNC_ROOT = 390;
export const ERROR_CLOUD_FILE_IN_USE = 391;
export const ERROR_CLOUD_FILE_PINNED = 392;
export const ERROR_CLOUD_FILE_REQUEST_ABORTED = 393;
export const ERROR_CLOUD_FILE_PROPERTY_CORRUPT = 394;
export const ERROR_CLOUD_FILE_ACCESS_DENIED = 395;
export const ERROR_CLOUD_FILE_INCOMPATIBLE_HARDLINKS = 396;
export const ERROR_CLOUD_FILE_PROPERTY_LOCK_CONFLICT = 397;
export const ERROR_CLOUD_FILE_REQUEST_CANCELED = 398;
export const ERROR_EXTERNAL_SYSKEY_NOT_SUPPORTED = 399;
export const ERROR_THREAD_MODE_ALREADY_BACKGROUND = 400;
export const ERROR_THREAD_MODE_NOT_BACKGROUND = 401;
export const ERROR_PROCESS_MODE_ALREADY_BACKGROUND = 402;
export const ERROR_PROCESS_MODE_NOT_BACKGROUND = 403;
export const ERROR_CLOUD_FILE_PROVIDER_TERMINATED = 404;
export const ERROR_NOT_A_CLOUD_SYNC_ROOT = 405;
export const ERROR_FILE_PROTECTED_UNDER_DPL = 406;
export const ERROR_VOLUME_NOT_CLUSTER_ALIGNED = 407;
export const ERROR_NO_PHYSICALLY_ALIGNED_FREE_SPACE_FOUND = 408;
export const ERROR_APPX_FILE_NOT_ENCRYPTED = 409;
export const ERROR_RWRAW_ENCRYPTED_FILE_NOT_ENCRYPTED = 410;
export const ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILEOFFSET = 411;
export const ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILERANGE = 412;
export const ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_PARAMETER = 413;
export const ERROR_LINUX_SUBSYSTEM_NOT_PRESENT = 414;
export const ERROR_FT_READ_FAILURE = 415;
export const ERROR_STORAGE_RESERVE_ID_INVALID = 416;
export const ERROR_STORAGE_RESERVE_DOES_NOT_EXIST = 417;
export const ERROR_STORAGE_RESERVE_ALREADY_EXISTS = 418;
export const ERROR_STORAGE_RESERVE_NOT_EMPTY = 419;
export const ERROR_NOT_A_DAX_VOLUME = 420;
export const ERROR_NOT_DAX_MAPPABLE = 421;
export const ERROR_TIME_SENSITIVE_THREAD = 422;
export const ERROR_DPL_NOT_SUPPORTED_FOR_USER = 423;
export const ERROR_CASE_DIFFERING_NAMES_IN_DIR = 424;
export const ERROR_FILE_NOT_SUPPORTED = 425;
export const ERROR_CLOUD_FILE_REQUEST_TIMEOUT = 426;
export const ERROR_NO_TASK_QUEUE = 427;
export const ERROR_SRC_SRV_DLL_LOAD_FAILED = 428;
export const ERROR_NOT_SUPPORTED_WITH_BTT = 429;
export const ERROR_ENCRYPTION_DISABLED = 430;
export const ERROR_ENCRYPTING_METADATA_DISALLOWED = 431;
export const ERROR_CANT_CLEAR_ENCRYPTION_FLAG = 432;
export const ERROR_NO_SUCH_DEVICE = 433;
export const ERROR_CLOUD_FILE_DEHYDRATION_DISALLOWED = 434;
export const ERROR_FILE_SNAP_IN_PROGRESS = 435;
export const ERROR_FILE_SNAP_USER_SECTION_NOT_SUPPORTED = 436;
export const ERROR_FILE_SNAP_MODIFY_NOT_SUPPORTED = 437;
export const ERROR_FILE_SNAP_IO_NOT_COORDINATED = 438;
export const ERROR_FILE_SNAP_UNEXPECTED_ERROR = 439;
export const ERROR_FILE_SNAP_INVALID_PARAMETER = 440;
export const ERROR_UNSATISFIED_DEPENDENCIES = 441;
export const ERROR_CASE_SENSITIVE_PATH = 442;
export const ERROR_UNEXPECTED_NTCACHEMANAGER_ERROR = 443;
export const ERROR_LINUX_SUBSYSTEM_UPDATE_REQUIRED = 444;
export const ERROR_DLP_POLICY_WARNS_AGAINST_OPERATION = 445;
export const ERROR_DLP_POLICY_DENIES_OPERATION = 446;
export const ERROR_SECURITY_DENIES_OPERATION = 447;
export const ERROR_UNTRUSTED_MOUNT_POINT = 448;
export const ERROR_DLP_POLICY_SILENTLY_FAIL = 449;
export const ERROR_CAPAUTHZ_NOT_DEVUNLOCKED = 450;
export const ERROR_CAPAUTHZ_CHANGE_TYPE = 451;
export const ERROR_CAPAUTHZ_NOT_PROVISIONED = 452;
export const ERROR_CAPAUTHZ_NOT_AUTHORIZED = 453;
export const ERROR_CAPAUTHZ_NO_POLICY = 454;
export const ERROR_CAPAUTHZ_DB_CORRUPTED = 455;
export const ERROR_CAPAUTHZ_SCCD_INVALID_CATALOG = 456;
export const ERROR_CAPAUTHZ_SCCD_NO_AUTH_ENTITY = 457;
export const ERROR_CAPAUTHZ_SCCD_PARSE_ERROR = 458;
export const ERROR_CAPAUTHZ_SCCD_DEV_MODE_REQUIRED = 459;
export const ERROR_CAPAUTHZ_SCCD_NO_CAPABILITY_MATCH = 460;
export const ERROR_CIMFS_IMAGE_CORRUPT = 470;
export const ERROR_CIMFS_IMAGE_VERSION_NOT_SUPPORTED = 471;
export const ERROR_STORAGE_STACK_ACCESS_DENIED = 472;
export const ERROR_INSUFFICIENT_VIRTUAL_ADDR_RESOURCES = 473;
export const ERROR_INDEX_OUT_OF_BOUNDS = 474;
export const ERROR_PNP_QUERY_REMOVE_DEVICE_TIMEOUT = 480;
export const ERROR_PNP_QUERY_REMOVE_RELATED_DEVICE_TIMEOUT = 481;
export const ERROR_PNP_QUERY_REMOVE_UNRELATED_DEVICE_TIMEOUT = 482;
export const ERROR_DEVICE_HARDWARE_ERROR = 483;
export const ERROR_INVALID_ADDRESS = 487;
export const ERROR_HAS_SYSTEM_CRITICAL_FILES = 488;
export const ERROR_ENCRYPTED_FILE_NOT_SUPPORTED = 489;
export const ERROR_SPARSE_FILE_NOT_SUPPORTED = 490;
export const ERROR_PAGEFILE_NOT_SUPPORTED = 491;
export const ERROR_VOLUME_NOT_SUPPORTED = 492;
export const ERROR_NOT_SUPPORTED_WITH_BYPASSIO = 493;
export const ERROR_NO_BYPASSIO_DRIVER_SUPPORT = 494;
export const ERROR_NOT_SUPPORTED_WITH_ENCRYPTION = 495;
export const ERROR_NOT_SUPPORTED_WITH_COMPRESSION = 496;
export const ERROR_NOT_SUPPORTED_WITH_REPLICATION = 497;
export const ERROR_NOT_SUPPORTED_WITH_DEDUPLICATION = 498;
export const ERROR_NOT_SUPPORTED_WITH_AUDITING = 499;
export const ERROR_USER_PROFILE_LOAD = 500;
export const ERROR_SESSION_KEY_TOO_SHORT = 501;
export const ERROR_ACCESS_DENIED_APPDATA = 502;
export const ERROR_NOT_SUPPORTED_WITH_MONITORING = 503;
export const ERROR_NOT_SUPPORTED_WITH_SNAPSHOT = 504;
export const ERROR_NOT_SUPPORTED_WITH_VIRTUALIZATION = 505;
export const ERROR_BYPASSIO_FLT_NOT_SUPPORTED = 506;
export const ERROR_DEVICE_RESET_REQUIRED = 507;
export const ERROR_VOLUME_WRITE_ACCESS_DENIED = 508;
export const ERROR_ARITHMETIC_OVERFLOW = 534;
export const ERROR_PIPE_CONNECTED = 535;
export const ERROR_PIPE_LISTENING = 536;
export const ERROR_VERIFIER_STOP = 537;
export const ERROR_ABIOS_ERROR = 538;
export const ERROR_WX86_WARNING = 539;
export const ERROR_WX86_ERROR = 540;
export const ERROR_TIMER_NOT_CANCELED = 541;
export const ERROR_UNWIND = 542;
export const ERROR_BAD_STACK = 543;
export const ERROR_INVALID_UNWIND_TARGET = 544;
export const ERROR_INVALID_PORT_ATTRIBUTES = 545;
export const ERROR_PORT_MESSAGE_TOO_LONG = 546;
export const ERROR_INVALID_QUOTA_LOWER = 547;
export const ERROR_DEVICE_ALREADY_ATTACHED = 548;
export const ERROR_INSTRUCTION_MISALIGNMENT = 549;
export const ERROR_PROFILING_NOT_STARTED = 550;
export const ERROR_PROFILING_NOT_STOPPED = 551;
export const ERROR_COULD_NOT_INTERPRET = 552;
export const ERROR_PROFILING_AT_LIMIT = 553;
export const ERROR_CANT_WAIT = 554;
export const ERROR_CANT_TERMINATE_SELF = 555;
export const ERROR_UNEXPECTED_MM_CREATE_ERR = 556;
export const ERROR_UNEXPECTED_MM_MAP_ERROR = 557;
export const ERROR_UNEXPECTED_MM_EXTEND_ERR = 558;
export const ERROR_BAD_FUNCTION_TABLE = 559;
export const ERROR_NO_GUID_TRANSLATION = 560;
export const ERROR_INVALID_LDT_SIZE = 561;
export const ERROR_INVALID_LDT_OFFSET = 563;
export const ERROR_INVALID_LDT_DESCRIPTOR = 564;
export const ERROR_TOO_MANY_THREADS = 565;
export const ERROR_THREAD_NOT_IN_PROCESS = 566;
export const ERROR_PAGEFILE_QUOTA_EXCEEDED = 567;
export const ERROR_LOGON_SERVER_CONFLICT = 568;
export const ERROR_SYNCHRONIZATION_REQUIRED = 569;
export const ERROR_NET_OPEN_FAILED = 570;
export const ERROR_IO_PRIVILEGE_FAILED = 571;
export const ERROR_CONTROL_C_EXIT = 572;
export const ERROR_MISSING_SYSTEMFILE = 573;
export const ERROR_UNHANDLED_EXCEPTION = 574;
export const ERROR_APP_INIT_FAILURE = 575;
export const ERROR_PAGEFILE_CREATE_FAILED = 576;
export const ERROR_INVALID_IMAGE_HASH = 577;
export const ERROR_NO_PAGEFILE = 578;
export const ERROR_ILLEGAL_FLOAT_CONTEXT = 579;
export const ERROR_NO_EVENT_PAIR = 580;
export const ERROR_DOMAIN_CTRLR_CONFIG_ERROR = 581;
export const ERROR_ILLEGAL_CHARACTER = 582;
export const ERROR_UNDEFINED_CHARACTER = 583;
export const ERROR_FLOPPY_VOLUME = 584;
export const ERROR_BIOS_FAILED_TO_CONNECT_INTERRUPT = 585;
export const ERROR_BACKUP_CONTROLLER = 586;
export const ERROR_MUTANT_LIMIT_EXCEEDED = 587;
export const ERROR_FS_DRIVER_REQUIRED = 588;
export const ERROR_CANNOT_LOAD_REGISTRY_FILE = 589;
export const ERROR_DEBUG_ATTACH_FAILED = 590;
export const ERROR_SYSTEM_PROCESS_TERMINATED = 591;
export const ERROR_DATA_NOT_ACCEPTED = 592;
export const ERROR_VDM_HARD_ERROR = 593;
export const ERROR_DRIVER_CANCEL_TIMEOUT = 594;
export const ERROR_REPLY_MESSAGE_MISMATCH = 595;
export const ERROR_LOST_WRITEBEHIND_DATA = 596;
export const ERROR_CLIENT_SERVER_PARAMETERS_INVALID = 597;
export const ERROR_NOT_TINY_STREAM = 598;
export const ERROR_STACK_OVERFLOW_READ = 599;
export const ERROR_CONVERT_TO_LARGE = 600;
export const ERROR_FOUND_OUT_OF_SCOPE = 601;
export const ERROR_ALLOCATE_BUCKET = 602;
export const ERROR_MARSHALL_OVERFLOW = 603;
export const ERROR_INVALID_VARIANT = 604;
export const ERROR_BAD_COMPRESSION_BUFFER = 605;
export const ERROR_AUDIT_FAILED = 606;
export const ERROR_TIMER_RESOLUTION_NOT_SET = 607;
export const ERROR_INSUFFICIENT_LOGON_INFO = 608;
export const ERROR_BAD_DLL_ENTRYPOINT = 609;
export const ERROR_BAD_SERVICE_ENTRYPOINT = 610;
export const ERROR_IP_ADDRESS_CONFLICT1 = 611;
export const ERROR_IP_ADDRESS_CONFLICT2 = 612;
export const ERROR_REGISTRY_QUOTA_LIMIT = 613;
export const ERROR_NO_CALLBACK_ACTIVE = 614;
export const ERROR_PWD_TOO_SHORT = 615;
export const ERROR_PWD_TOO_RECENT = 616;
export const ERROR_PWD_HISTORY_CONFLICT = 617;
export const ERROR_UNSUPPORTED_COMPRESSION = 618;
export const ERROR_INVALID_HW_PROFILE = 619;
export const ERROR_INVALID_PLUGPLAY_DEVICE_PATH = 620;
export const ERROR_QUOTA_LIST_INCONSISTENT = 621;
export const ERROR_EVALUATION_EXPIRATION = 622;
export const ERROR_ILLEGAL_DLL_RELOCATION = 623;
export const ERROR_DLL_INIT_FAILED_LOGOFF = 624;
export const ERROR_VALIDATE_CONTINUE = 625;
export const ERROR_NO_MORE_MATCHES = 626;
export const ERROR_RANGE_LIST_CONFLICT = 627;
export const ERROR_SERVER_SID_MISMATCH = 628;
export const ERROR_CANT_ENABLE_DENY_ONLY = 629;
export const ERROR_FLOAT_MULTIPLE_FAULTS = 630;
export const ERROR_FLOAT_MULTIPLE_TRAPS = 631;
export const ERROR_NOINTERFACE = 632;
export const ERROR_DRIVER_FAILED_SLEEP = 633;
export const ERROR_CORRUPT_SYSTEM_FILE = 634;
export const ERROR_COMMITMENT_MINIMUM = 635;
export const ERROR_PNP_RESTART_ENUMERATION = 636;
export const ERROR_SYSTEM_IMAGE_BAD_SIGNATURE = 637;
export const ERROR_PNP_REBOOT_REQUIRED = 638;
export const ERROR_INSUFFICIENT_POWER = 639;
export const ERROR_MULTIPLE_FAULT_VIOLATION = 640;
export const ERROR_SYSTEM_SHUTDOWN = 641;
export const ERROR_PORT_NOT_SET = 642;
export const ERROR_DS_VERSION_CHECK_FAILURE = 643;
export const ERROR_RANGE_NOT_FOUND = 644;
export const ERROR_NOT_SAFE_MODE_DRIVER = 646;
export const ERROR_FAILED_DRIVER_ENTRY = 647;
export const ERROR_DEVICE_ENUMERATION_ERROR = 648;
export const ERROR_MOUNT_POINT_NOT_RESOLVED = 649;
export const ERROR_INVALID_DEVICE_OBJECT_PARAMETER = 650;
export const ERROR_MCA_OCCURED = 651;
export const ERROR_DRIVER_DATABASE_ERROR = 652;
export const ERROR_SYSTEM_HIVE_TOO_LARGE = 653;
export const ERROR_DRIVER_FAILED_PRIOR_UNLOAD = 654;
export const ERROR_VOLSNAP_PREPARE_HIBERNATE = 655;
export const ERROR_HIBERNATION_FAILURE = 656;
export const ERROR_PWD_TOO_LONG = 657;
export const ERROR_FILE_SYSTEM_LIMITATION = 665;
export const ERROR_ASSERTION_FAILURE = 668;
export const ERROR_ACPI_ERROR = 669;
export const ERROR_WOW_ASSERTION = 670;
export const ERROR_PNP_BAD_MPS_TABLE = 671;
export const ERROR_PNP_TRANSLATION_FAILED = 672;
export const ERROR_PNP_IRQ_TRANSLATION_FAILED = 673;
export const ERROR_PNP_INVALID_ID = 674;
export const ERROR_WAKE_SYSTEM_DEBUGGER = 675;
export const ERROR_HANDLES_CLOSED = 676;
export const ERROR_EXTRANEOUS_INFORMATION = 677;
export const ERROR_RXACT_COMMIT_NECESSARY = 678;
export const ERROR_MEDIA_CHECK = 679;
export const ERROR_GUID_SUBSTITUTION_MADE = 680;
export const ERROR_STOPPED_ON_SYMLINK = 681;
export const ERROR_LONGJUMP = 682;
export const ERROR_PLUGPLAY_QUERY_VETOED = 683;
export const ERROR_UNWIND_CONSOLIDATE = 684;
export const ERROR_REGISTRY_HIVE_RECOVERED = 685;
export const ERROR_DLL_MIGHT_BE_INSECURE = 686;
export const ERROR_DLL_MIGHT_BE_INCOMPATIBLE = 687;
export const ERROR_DBG_EXCEPTION_NOT_HANDLED = 688;
export const ERROR_DBG_REPLY_LATER = 689;
export const ERROR_DBG_UNABLE_TO_PROVIDE_HANDLE = 690;
export const ERROR_DBG_TERMINATE_THREAD = 691;
export const ERROR_DBG_TERMINATE_PROCESS = 692;
export const ERROR_DBG_CONTROL_C = 693;
export const ERROR_DBG_PRINTEXCEPTION_C = 694;
export const ERROR_DBG_RIPEXCEPTION = 695;
export const ERROR_DBG_CONTROL_BREAK = 696;
export const ERROR_DBG_COMMAND_EXCEPTION = 697;
export const ERROR_OBJECT_NAME_EXISTS = 698;
export const ERROR_THREAD_WAS_SUSPENDED = 699;
export const ERROR_IMAGE_NOT_AT_BASE = 700;
export const ERROR_RXACT_STATE_CREATED = 701;
export const ERROR_SEGMENT_NOTIFICATION = 702;
export const ERROR_BAD_CURRENT_DIRECTORY = 703;
export const ERROR_FT_READ_RECOVERY_FROM_BACKUP = 704;
export const ERROR_FT_WRITE_RECOVERY = 705;
export const ERROR_IMAGE_MACHINE_TYPE_MISMATCH = 706;
export const ERROR_RECEIVE_PARTIAL = 707;
export const ERROR_RECEIVE_EXPEDITED = 708;
export const ERROR_RECEIVE_PARTIAL_EXPEDITED = 709;
export const ERROR_EVENT_DONE = 710;
export const ERROR_EVENT_PENDING = 711;
export const ERROR_CHECKING_FILE_SYSTEM = 712;
export const ERROR_FATAL_APP_EXIT = 713;
export const ERROR_PREDEFINED_HANDLE = 714;
export const ERROR_WAS_UNLOCKED = 715;
export const ERROR_SERVICE_NOTIFICATION = 716;
export const ERROR_WAS_LOCKED = 717;
export const ERROR_LOG_HARD_ERROR = 718;
export const ERROR_ALREADY_WIN32 = 719;
export const ERROR_IMAGE_MACHINE_TYPE_MISMATCH_EXE = 720;
export const ERROR_NO_YIELD_PERFORMED = 721;
export const ERROR_TIMER_RESUME_IGNORED = 722;
export const ERROR_ARBITRATION_UNHANDLED = 723;
export const ERROR_CARDBUS_NOT_SUPPORTED = 724;
export const ERROR_MP_PROCESSOR_MISMATCH = 725;
export const ERROR_HIBERNATED = 726;
export const ERROR_RESUME_HIBERNATION = 727;
export const ERROR_FIRMWARE_UPDATED = 728;
export const ERROR_DRIVERS_LEAKING_LOCKED_PAGES = 729;
export const ERROR_WAKE_SYSTEM = 730;
export const ERROR_WAIT_1 = 731;
export const ERROR_WAIT_2 = 732;
export const ERROR_WAIT_3 = 733;
export const ERROR_WAIT_63 = 734;
export const ERROR_ABANDONED_WAIT_0 = 735;
export const ERROR_ABANDONED_WAIT_63 = 736;
export const ERROR_USER_APC = 737;
export const ERROR_KERNEL_APC = 738;
export const ERROR_ALERTED = 739;
export const ERROR_ELEVATION_REQUIRED = 740;
export const ERROR_REPARSE = 741;
export const ERROR_OPLOCK_BREAK_IN_PROGRESS = 742;
export const ERROR_VOLUME_MOUNTED = 743;
export const ERROR_RXACT_COMMITTED = 744;
export const ERROR_NOTIFY_CLEANUP = 745;
export const ERROR_PRIMARY_TRANSPORT_CONNECT_FAILED = 746;
export const ERROR_PAGE_FAULT_TRANSITION = 747;
export const ERROR_PAGE_FAULT_DEMAND_ZERO = 748;
export const ERROR_PAGE_FAULT_COPY_ON_WRITE = 749;
export const ERROR_PAGE_FAULT_GUARD_PAGE = 750;
export const ERROR_PAGE_FAULT_PAGING_FILE = 751;
export const ERROR_CACHE_PAGE_LOCKED = 752;
export const ERROR_CRASH_DUMP = 753;
export const ERROR_BUFFER_ALL_ZEROS = 754;
export const ERROR_REPARSE_OBJECT = 755;
export const ERROR_RESOURCE_REQUIREMENTS_CHANGED = 756;
export const ERROR_TRANSLATION_COMPLETE = 757;
export const ERROR_NOTHING_TO_TERMINATE = 758;
export const ERROR_PROCESS_NOT_IN_JOB = 759;
export const ERROR_PROCESS_IN_JOB = 760;
export const ERROR_VOLSNAP_HIBERNATE_READY = 761;
export const ERROR_FSFILTER_OP_COMPLETED_SUCCESSFULLY = 762;
export const ERROR_INTERRUPT_VECTOR_ALREADY_CONNECTED = 763;
export const ERROR_INTERRUPT_STILL_CONNECTED = 764;
export const ERROR_WAIT_FOR_OPLOCK = 765;
export const ERROR_DBG_EXCEPTION_HANDLED = 766;
export const ERROR_DBG_CONTINUE = 767;
export const ERROR_CALLBACK_POP_STACK = 768;
export const ERROR_COMPRESSION_DISABLED = 769;
export const ERROR_CANTFETCHBACKWARDS = 770;
export const ERROR_CANTSCROLLBACKWARDS = 771;
export const ERROR_ROWSNOTRELEASED = 772;
export const ERROR_BAD_ACCESSOR_FLAGS = 773;
export const ERROR_ERRORS_ENCOUNTERED = 774;
export const ERROR_NOT_CAPABLE = 775;
export const ERROR_REQUEST_OUT_OF_SEQUENCE = 776;
export const ERROR_VERSION_PARSE_ERROR = 777;
export const ERROR_BADSTARTPOSITION = 778;
export const ERROR_MEMORY_HARDWARE = 779;
export const ERROR_DISK_REPAIR_DISABLED = 780;
export const ERROR_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE = 781;
export const ERROR_SYSTEM_POWERSTATE_TRANSITION = 782;
export const ERROR_SYSTEM_POWERSTATE_COMPLEX_TRANSITION = 783;
export const ERROR_MCA_EXCEPTION = 784;
export const ERROR_ACCESS_AUDIT_BY_POLICY = 785;
export const ERROR_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY = 786;
export const ERROR_ABANDON_HIBERFILE = 787;
export const ERROR_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED = 788;
export const ERROR_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR = 789;
export const ERROR_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR = 790;
export const ERROR_BAD_MCFG_TABLE = 791;
export const ERROR_DISK_REPAIR_REDIRECTED = 792;
export const ERROR_DISK_REPAIR_UNSUCCESSFUL = 793;
export const ERROR_CORRUPT_LOG_OVERFULL = 794;
export const ERROR_CORRUPT_LOG_CORRUPTED = 795;
export const ERROR_CORRUPT_LOG_UNAVAILABLE = 796;
export const ERROR_CORRUPT_LOG_DELETED_FULL = 797;
export const ERROR_CORRUPT_LOG_CLEARED = 798;
export const ERROR_ORPHAN_NAME_EXHAUSTED = 799;
export const ERROR_OPLOCK_SWITCHED_TO_NEW_HANDLE = 800;
export const ERROR_CANNOT_GRANT_REQUESTED_OPLOCK = 801;
export const ERROR_CANNOT_BREAK_OPLOCK = 802;
export const ERROR_OPLOCK_HANDLE_CLOSED = 803;
export const ERROR_NO_ACE_CONDITION = 804;
export const ERROR_INVALID_ACE_CONDITION = 805;
export const ERROR_FILE_HANDLE_REVOKED = 806;
export const ERROR_IMAGE_AT_DIFFERENT_BASE = 807;
export const ERROR_ENCRYPTED_IO_NOT_POSSIBLE = 808;
export const ERROR_FILE_METADATA_OPTIMIZATION_IN_PROGRESS = 809;
export const ERROR_QUOTA_ACTIVITY = 810;
export const ERROR_HANDLE_REVOKED = 811;
export const ERROR_CALLBACK_INVOKE_INLINE = 812;
export const ERROR_CPU_SET_INVALID = 813;
export const ERROR_ENCLAVE_NOT_TERMINATED = 814;
export const ERROR_ENCLAVE_VIOLATION = 815;
export const ERROR_SERVER_TRANSPORT_CONFLICT = 816;
export const ERROR_CERTIFICATE_VALIDATION_PREFERENCE_CONFLICT = 817;
export const ERROR_FT_READ_FROM_COPY_FAILURE = 818;
export const ERROR_SECTION_DIRECT_MAP_ONLY = 819;
export const ERROR_EA_ACCESS_DENIED = 994;
export const ERROR_OPERATION_ABORTED = 995;
export const ERROR_IO_INCOMPLETE = 996;
export const ERROR_IO_PENDING = 997;
export const ERROR_NOACCESS = 998;
export const ERROR_SWAPERROR = 999;
export const ERROR_STACK_OVERFLOW = 1001;
export const ERROR_INVALID_MESSAGE = 1002;
export const ERROR_CAN_NOT_COMPLETE = 1003;
export const ERROR_INVALID_FLAGS = 1004;
export const ERROR_UNRECOGNIZED_VOLUME = 1005;
export const ERROR_FILE_INVALID = 1006;
export const ERROR_FULLSCREEN_MODE = 1007;
export const ERROR_NO_TOKEN = 1008;
export const ERROR_BADDB = 1009;
export const ERROR_BADKEY = 1010;
export const ERROR_CANTOPEN = 1011;
export const ERROR_CANTREAD = 1012;
export const ERROR_CANTWRITE = 1013;
export const ERROR_REGISTRY_RECOVERED = 1014;
export const ERROR_REGISTRY_CORRUPT = 1015;
export const ERROR_REGISTRY_IO_FAILED = 1016;
export const ERROR_NOT_REGISTRY_FILE = 1017;
export const ERROR_KEY_DELETED = 1018;
export const ERROR_NO_LOG_SPACE = 1019;
export const ERROR_KEY_HAS_CHILDREN = 1020;
export const ERROR_CHILD_MUST_BE_VOLATILE = 1021;
export const ERROR_NOTIFY_ENUM_DIR = 1022;
export const ERROR_DEPENDENT_SERVICES_RUNNING = 1051;
export const ERROR_INVALID_SERVICE_CONTROL = 1052;
export const ERROR_SERVICE_REQUEST_TIMEOUT = 1053;
export const ERROR_SERVICE_NO_THREAD = 1054;
export const ERROR_SERVICE_DATABASE_LOCKED = 1055;
export const ERROR_SERVICE_ALREADY_RUNNING = 1056;
export const ERROR_INVALID_SERVICE_ACCOUNT = 1057;
export const ERROR_SERVICE_DISABLED = 1058;
export const ERROR_CIRCULAR_DEPENDENCY = 1059;
export const ERROR_SERVICE_DOES_NOT_EXIST = 1060;
export const ERROR_SERVICE_CANNOT_ACCEPT_CTRL = 1061;
export const ERROR_SERVICE_NOT_ACTIVE = 1062;
export const ERROR_FAILED_SERVICE_CONTROLLER_CONNECT = 1063;
export const ERROR_EXCEPTION_IN_SERVICE = 1064;
export const ERROR_DATABASE_DOES_NOT_EXIST = 1065;
export const ERROR_SERVICE_SPECIFIC_ERROR = 1066;
export const ERROR_PROCESS_ABORTED = 1067;
export const ERROR_SERVICE_DEPENDENCY_FAIL = 1068;
export const ERROR_SERVICE_LOGON_FAILED = 1069;
export const ERROR_SERVICE_START_HANG = 1070;
export const ERROR_INVALID_SERVICE_LOCK = 1071;
export const ERROR_SERVICE_MARKED_FOR_DELETE = 1072;
export const ERROR_SERVICE_EXISTS = 1073;
export const ERROR_ALREADY_RUNNING_LKG = 1074;
export const ERROR_SERVICE_DEPENDENCY_DELETED = 1075;
export const ERROR_BOOT_ALREADY_ACCEPTED = 1076;
export const ERROR_SERVICE_NEVER_STARTED = 1077;
export const ERROR_DUPLICATE_SERVICE_NAME = 1078;
export const ERROR_DIFFERENT_SERVICE_ACCOUNT = 1079;
export const ERROR_CANNOT_DETECT_DRIVER_FAILURE = 1080;
export const ERROR_CANNOT_DETECT_PROCESS_ABORT = 1081;
export const ERROR_NO_RECOVERY_PROGRAM = 1082;
export const ERROR_SERVICE_NOT_IN_EXE = 1083;
export const ERROR_NOT_SAFEBOOT_SERVICE = 1084;
export const ERROR_END_OF_MEDIA = 1100;
export const ERROR_FILEMARK_DETECTED = 1101;
export const ERROR_BEGINNING_OF_MEDIA = 1102;
export const ERROR_SETMARK_DETECTED = 1103;
export const ERROR_NO_DATA_DETECTED = 1104;
export const ERROR_PARTITION_FAILURE = 1105;
export const ERROR_INVALID_BLOCK_LENGTH = 1106;
export const ERROR_DEVICE_NOT_PARTITIONED = 1107;
export const ERROR_UNABLE_TO_LOCK_MEDIA = 1108;
export const ERROR_UNABLE_TO_UNLOAD_MEDIA = 1109;
export const ERROR_MEDIA_CHANGED = 1110;
export const ERROR_BUS_RESET = 1111;
export const ERROR_NO_MEDIA_IN_DRIVE = 1112;
export const ERROR_NO_UNICODE_TRANSLATION = 1113;
export const ERROR_DLL_INIT_FAILED = 1114;
export const ERROR_SHUTDOWN_IN_PROGRESS = 1115;
export const ERROR_NO_SHUTDOWN_IN_PROGRESS = 1116;
export const ERROR_IO_DEVICE = 1117;
export const ERROR_SERIAL_NO_DEVICE = 1118;
export const ERROR_IRQ_BUSY = 1119;
export const ERROR_MORE_WRITES = 1120;
export const ERROR_COUNTER_TIMEOUT = 1121;
export const ERROR_FLOPPY_ID_MARK_NOT_FOUND = 1122;
export const ERROR_FLOPPY_WRONG_CYLINDER = 1123;
export const ERROR_FLOPPY_UNKNOWN_ERROR = 1124;
export const ERROR_FLOPPY_BAD_REGISTERS = 1125;
export const ERROR_DISK_RECALIBRATE_FAILED = 1126;
export const ERROR_DISK_OPERATION_FAILED = 1127;
export const ERROR_DISK_RESET_FAILED = 1128;
export const ERROR_EOM_OVERFLOW = 1129;
export const ERROR_NOT_ENOUGH_SERVER_MEMORY = 1130;
export const ERROR_POSSIBLE_DEADLOCK = 1131;
export const ERROR_MAPPED_ALIGNMENT = 1132;
export const ERROR_SET_POWER_STATE_VETOED = 1140;
export const ERROR_SET_POWER_STATE_FAILED = 1141;
export const ERROR_TOO_MANY_LINKS = 1142;
export const ERROR_OLD_WIN_VERSION = 1150;
export const ERROR_APP_WRONG_OS = 1151;
export const ERROR_SINGLE_INSTANCE_APP = 1152;
export const ERROR_RMODE_APP = 1153;
export const ERROR_INVALID_DLL = 1154;
export const ERROR_NO_ASSOCIATION = 1155;
export const ERROR_DDE_FAIL = 1156;
export const ERROR_DLL_NOT_FOUND = 1157;
export const ERROR_NO_MORE_USER_HANDLES = 1158;
export const ERROR_MESSAGE_SYNC_ONLY = 1159;
export const ERROR_SOURCE_ELEMENT_EMPTY = 1160;
export const ERROR_DESTINATION_ELEMENT_FULL = 1161;
export const ERROR_ILLEGAL_ELEMENT_ADDRESS = 1162;
export const ERROR_MAGAZINE_NOT_PRESENT = 1163;
export const ERROR_DEVICE_REINITIALIZATION_NEEDED = 1164;
export const ERROR_DEVICE_REQUIRES_CLEANING = 1165;
export const ERROR_DEVICE_DOOR_OPEN = 1166;
export const ERROR_DEVICE_NOT_CONNECTED = 1167;
export const ERROR_NOT_FOUND = 1168;
export const ERROR_NO_MATCH = 1169;
export const ERROR_SET_NOT_FOUND = 1170;
export const ERROR_POINT_NOT_FOUND = 1171;
export const ERROR_NO_TRACKING_SERVICE = 1172;
export const ERROR_NO_VOLUME_ID = 1173;
export const ERROR_UNABLE_TO_REMOVE_REPLACED = 1175;
export const ERROR_UNABLE_TO_MOVE_REPLACEMENT = 1176;
export const ERROR_UNABLE_TO_MOVE_REPLACEMENT_2 = 1177;
export const ERROR_JOURNAL_DELETE_IN_PROGRESS = 1178;
export const ERROR_JOURNAL_NOT_ACTIVE = 1179;
export const ERROR_POTENTIAL_FILE_FOUND = 1180;
export const ERROR_JOURNAL_ENTRY_DELETED = 1181;
export const ERROR_PARTITION_TERMINATING = 1184;
export const ERROR_SHUTDOWN_IS_SCHEDULED = 1190;
export const ERROR_SHUTDOWN_USERS_LOGGED_ON = 1191;
export const ERROR_SHUTDOWN_DISKS_NOT_IN_MAINTENANCE_MODE = 1192;
export const ERROR_BAD_DEVICE = 1200;
export const ERROR_CONNECTION_UNAVAIL = 1201;
export const ERROR_DEVICE_ALREADY_REMEMBERED = 1202;
export const ERROR_NO_NET_OR_BAD_PATH = 1203;
export const ERROR_BAD_PROVIDER = 1204;
export const ERROR_CANNOT_OPEN_PROFILE = 1205;
export const ERROR_BAD_PROFILE = 1206;
export const ERROR_NOT_CONTAINER = 1207;
export const ERROR_EXTENDED_ERROR = 1208;
export const ERROR_INVALID_GROUPNAME = 1209;
export const ERROR_INVALID_COMPUTERNAME = 1210;
export const ERROR_INVALID_EVENTNAME = 1211;
export const ERROR_INVALID_DOMAINNAME = 1212;
export const ERROR_INVALID_SERVICENAME = 1213;
export const ERROR_INVALID_NETNAME = 1214;
export const ERROR_INVALID_SHARENAME = 1215;
export const ERROR_INVALID_PASSWORDNAME = 1216;
export const ERROR_INVALID_MESSAGENAME = 1217;
export const ERROR_INVALID_MESSAGEDEST = 1218;
export const ERROR_SESSION_CREDENTIAL_CONFLICT = 1219;
export const ERROR_REMOTE_SESSION_LIMIT_EXCEEDED = 1220;
export const ERROR_DUP_DOMAINNAME = 1221;
export const ERROR_NO_NETWORK = 1222;
export const ERROR_CANCELLED = 1223;
export const ERROR_USER_MAPPED_FILE = 1224;
export const ERROR_CONNECTION_REFUSED = 1225;
export const ERROR_GRACEFUL_DISCONNECT = 1226;
export const ERROR_ADDRESS_ALREADY_ASSOCIATED = 1227;
export const ERROR_ADDRESS_NOT_ASSOCIATED = 1228;
export const ERROR_CONNECTION_INVALID = 1229;
export const ERROR_CONNECTION_ACTIVE = 1230;
export const ERROR_NETWORK_UNREACHABLE = 1231;
export const ERROR_HOST_UNREACHABLE = 1232;
export const ERROR_PROTOCOL_UNREACHABLE = 1233;
export const ERROR_PORT_UNREACHABLE = 1234;
export const ERROR_REQUEST_ABORTED = 1235;
export const ERROR_CONNECTION_ABORTED = 1236;
export const ERROR_RETRY = 1237;
export const ERROR_CONNECTION_COUNT_LIMIT = 1238;
export const ERROR_LOGIN_TIME_RESTRICTION = 1239;
export const ERROR_LOGIN_WKSTA_RESTRICTION = 1240;
export const ERROR_INCORRECT_ADDRESS = 1241;
export const ERROR_ALREADY_REGISTERED = 1242;
export const ERROR_SERVICE_NOT_FOUND = 1243;
export const ERROR_NOT_AUTHENTICATED = 1244;
export const ERROR_NOT_LOGGED_ON = 1245;
export const ERROR_CONTINUE = 1246;
export const ERROR_ALREADY_INITIALIZED = 1247;
export const ERROR_NO_MORE_DEVICES = 1248;
export const ERROR_NO_SUCH_SITE = 1249;
export const ERROR_DOMAIN_CONTROLLER_EXISTS = 1250;
export const ERROR_ONLY_IF_CONNECTED = 1251;
export const ERROR_OVERRIDE_NOCHANGES = 1252;
export const ERROR_BAD_USER_PROFILE = 1253;
export const ERROR_NOT_SUPPORTED_ON_SBS = 1254;
export const ERROR_SERVER_SHUTDOWN_IN_PROGRESS = 1255;
export const ERROR_HOST_DOWN = 1256;
export const ERROR_NON_ACCOUNT_SID = 1257;
export const ERROR_NON_DOMAIN_SID = 1258;
export const ERROR_APPHELP_BLOCK = 1259;
export const ERROR_ACCESS_DISABLED_BY_POLICY = 1260;
export const ERROR_REG_NAT_CONSUMPTION = 1261;
export const ERROR_CSCSHARE_OFFLINE = 1262;
export const ERROR_PKINIT_FAILURE = 1263;
export const ERROR_SMARTCARD_SUBSYSTEM_FAILURE = 1264;
export const ERROR_DOWNGRADE_DETECTED = 1265;
export const ERROR_MACHINE_LOCKED = 1271;
export const ERROR_SMB_GUEST_LOGON_BLOCKED = 1272;
export const ERROR_CALLBACK_SUPPLIED_INVALID_DATA = 1273;
export const ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED = 1274;
export const ERROR_DRIVER_BLOCKED = 1275;
export const ERROR_INVALID_IMPORT_OF_NON_DLL = 1276;
export const ERROR_ACCESS_DISABLED_WEBBLADE = 1277;
export const ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER = 1278;
export const ERROR_RECOVERY_FAILURE = 1279;
export const ERROR_ALREADY_FIBER = 1280;
export const ERROR_ALREADY_THREAD = 1281;
export const ERROR_STACK_BUFFER_OVERRUN = 1282;
export const ERROR_PARAMETER_QUOTA_EXCEEDED = 1283;
export const ERROR_DEBUGGER_INACTIVE = 1284;
export const ERROR_DELAY_LOAD_FAILED = 1285;
export const ERROR_VDM_DISALLOWED = 1286;
export const ERROR_UNIDENTIFIED_ERROR = 1287;
export const ERROR_INVALID_CRUNTIME_PARAMETER = 1288;
export const ERROR_BEYOND_VDL = 1289;
export const ERROR_INCOMPATIBLE_SERVICE_SID_TYPE = 1290;
export const ERROR_DRIVER_PROCESS_TERMINATED = 1291;
export const ERROR_IMPLEMENTATION_LIMIT = 1292;
export const ERROR_PROCESS_IS_PROTECTED = 1293;
export const ERROR_SERVICE_NOTIFY_CLIENT_LAGGING = 1294;
export const ERROR_DISK_QUOTA_EXCEEDED = 1295;
export const ERROR_CONTENT_BLOCKED = 1296;
export const ERROR_INCOMPATIBLE_SERVICE_PRIVILEGE = 1297;
export const ERROR_APP_HANG = 1298;
export const ERROR_INVALID_LABEL = 1299;
export const ERROR_NOT_ALL_ASSIGNED = 1300;
export const ERROR_SOME_NOT_MAPPED = 1301;
export const ERROR_NO_QUOTAS_FOR_ACCOUNT = 1302;
export const ERROR_LOCAL_USER_SESSION_KEY = 1303;
export const ERROR_NULL_LM_PASSWORD = 1304;
export const ERROR_UNKNOWN_REVISION = 1305;
export const ERROR_REVISION_MISMATCH = 1306;
export const ERROR_INVALID_OWNER = 1307;
export const ERROR_INVALID_PRIMARY_GROUP = 1308;
export const ERROR_NO_IMPERSONATION_TOKEN = 1309;
export const ERROR_CANT_DISABLE_MANDATORY = 1310;
export const ERROR_NO_LOGON_SERVERS = 1311;
export const ERROR_NO_SUCH_LOGON_SESSION = 1312;
export const ERROR_NO_SUCH_PRIVILEGE = 1313;
export const ERROR_PRIVILEGE_NOT_HELD = 1314;
export const ERROR_INVALID_ACCOUNT_NAME = 1315;
export const ERROR_USER_EXISTS = 1316;
export const ERROR_NO_SUCH_USER = 1317;
export const ERROR_GROUP_EXISTS = 1318;
export const ERROR_NO_SUCH_GROUP = 1319;
export const ERROR_MEMBER_IN_GROUP = 1320;
export const ERROR_MEMBER_NOT_IN_GROUP = 1321;
export const ERROR_LAST_ADMIN = 1322;
export const ERROR_WRONG_PASSWORD = 1323;
export const ERROR_ILL_FORMED_PASSWORD = 1324;
export const ERROR_PASSWORD_RESTRICTION = 1325;
export const ERROR_LOGON_FAILURE = 1326;
export const ERROR_ACCOUNT_RESTRICTION = 1327;
export const ERROR_INVALID_LOGON_HOURS = 1328;
export const ERROR_INVALID_WORKSTATION = 1329;
export const ERROR_PASSWORD_EXPIRED = 1330;
export const ERROR_ACCOUNT_DISABLED = 1331;
export const ERROR_NONE_MAPPED = 1332;
export const ERROR_TOO_MANY_LUIDS_REQUESTED = 1333;
export const ERROR_LUIDS_EXHAUSTED = 1334;
export const ERROR_INVALID_SUB_AUTHORITY = 1335;
export const ERROR_INVALID_ACL = 1336;
export const ERROR_INVALID_SID = 1337;
export const ERROR_INVALID_SECURITY_DESCR = 1338;
export const ERROR_BAD_INHERITANCE_ACL = 1340;
export const ERROR_SERVER_DISABLED = 1341;
export const ERROR_SERVER_NOT_DISABLED = 1342;
export const ERROR_INVALID_ID_AUTHORITY = 1343;
export const ERROR_ALLOTTED_SPACE_EXCEEDED = 1344;
export const ERROR_INVALID_GROUP_ATTRIBUTES = 1345;
export const ERROR_BAD_IMPERSONATION_LEVEL = 1346;
export const ERROR_CANT_OPEN_ANONYMOUS = 1347;
export const ERROR_BAD_VALIDATION_CLASS = 1348;
export const ERROR_BAD_TOKEN_TYPE = 1349;
export const ERROR_NO_SECURITY_ON_OBJECT = 1350;
export const ERROR_CANT_ACCESS_DOMAIN_INFO = 1351;
export const ERROR_INVALID_SERVER_STATE = 1352;
export const ERROR_INVALID_DOMAIN_STATE = 1353;
export const ERROR_INVALID_DOMAIN_ROLE = 1354;
export const ERROR_NO_SUCH_DOMAIN = 1355;
export const ERROR_DOMAIN_EXISTS = 1356;
export const ERROR_DOMAIN_LIMIT_EXCEEDED = 1357;
export const ERROR_INTERNAL_DB_CORRUPTION = 1358;
export const ERROR_INTERNAL_ERROR = 1359;
export const ERROR_GENERIC_NOT_MAPPED = 1360;
export const ERROR_BAD_DESCRIPTOR_FORMAT = 1361;
export const ERROR_NOT_LOGON_PROCESS = 1362;
export const ERROR_LOGON_SESSION_EXISTS = 1363;
export const ERROR_NO_SUCH_PACKAGE = 1364;
export const ERROR_BAD_LOGON_SESSION_STATE = 1365;
export const ERROR_LOGON_SESSION_COLLISION = 1366;
export const ERROR_INVALID_LOGON_TYPE = 1367;
export const ERROR_CANNOT_IMPERSONATE = 1368;
export const ERROR_RXACT_INVALID_STATE = 1369;
export const ERROR_RXACT_COMMIT_FAILURE = 1370;
export const ERROR_SPECIAL_ACCOUNT = 1371;
export const ERROR_SPECIAL_GROUP = 1372;
export const ERROR_SPECIAL_USER = 1373;
export const ERROR_MEMBERS_PRIMARY_GROUP = 1374;
export const ERROR_TOKEN_ALREADY_IN_USE = 1375;
export const ERROR_NO_SUCH_ALIAS = 1376;
export const ERROR_MEMBER_NOT_IN_ALIAS = 1377;
export const ERROR_MEMBER_IN_ALIAS = 1378;
export const ERROR_ALIAS_EXISTS = 1379;
export const ERROR_LOGON_NOT_GRANTED = 1380;
export const ERROR_TOO_MANY_SECRETS = 1381;
export const ERROR_SECRET_TOO_LONG = 1382;
export const ERROR_INTERNAL_DB_ERROR = 1383;
export const ERROR_TOO_MANY_CONTEXT_IDS = 1384;
export const ERROR_LOGON_TYPE_NOT_GRANTED = 1385;
export const ERROR_NT_CROSS_ENCRYPTION_REQUIRED = 1386;
export const ERROR_NO_SUCH_MEMBER = 1387;
export const ERROR_INVALID_MEMBER = 1388;
export const ERROR_TOO_MANY_SIDS = 1389;
export const ERROR_LM_CROSS_ENCRYPTION_REQUIRED = 1390;
export const ERROR_NO_INHERITANCE = 1391;
export const ERROR_FILE_CORRUPT = 1392;
export const ERROR_DISK_CORRUPT = 1393;
export const ERROR_NO_USER_SESSION_KEY = 1394;
export const ERROR_LICENSE_QUOTA_EXCEEDED = 1395;
export const ERROR_WRONG_TARGET_NAME = 1396;
export const ERROR_MUTUAL_AUTH_FAILED = 1397;
export const ERROR_TIME_SKEW = 1398;
export const ERROR_CURRENT_DOMAIN_NOT_ALLOWED = 1399;
export const ERROR_INVALID_WINDOW_HANDLE = 1400;
export const ERROR_INVALID_MENU_HANDLE = 1401;
export const ERROR_INVALID_CURSOR_HANDLE = 1402;
export const ERROR_INVALID_ACCEL_HANDLE = 1403;
export const ERROR_INVALID_HOOK_HANDLE = 1404;
export const ERROR_INVALID_DWP_HANDLE = 1405;
export const ERROR_TLW_WITH_WSCHILD = 1406;
export const ERROR_CANNOT_FIND_WND_CLASS = 1407;
export const ERROR_WINDOW_OF_OTHER_THREAD = 1408;
export const ERROR_HOTKEY_ALREADY_REGISTERED = 1409;
export const ERROR_CLASS_ALREADY_EXISTS = 1410;
export const ERROR_CLASS_DOES_NOT_EXIST = 1411;
export const ERROR_CLASS_HAS_WINDOWS = 1412;
export const ERROR_INVALID_INDEX = 1413;
export const ERROR_INVALID_ICON_HANDLE = 1414;
export const ERROR_PRIVATE_DIALOG_INDEX = 1415;
export const ERROR_LISTBOX_ID_NOT_FOUND = 1416;
export const ERROR_NO_WILDCARD_CHARACTERS = 1417;
export const ERROR_CLIPBOARD_NOT_OPEN = 1418;
export const ERROR_HOTKEY_NOT_REGISTERED = 1419;
export const ERROR_WINDOW_NOT_DIALOG = 1420;
export const ERROR_CONTROL_ID_NOT_FOUND = 1421;
export const ERROR_INVALID_COMBOBOX_MESSAGE = 1422;
export const ERROR_WINDOW_NOT_COMBOBOX = 1423;
export const ERROR_INVALID_EDIT_HEIGHT = 1424;
export const ERROR_DC_NOT_FOUND = 1425;
export const ERROR_INVALID_HOOK_FILTER = 1426;
export const ERROR_INVALID_FILTER_PROC = 1427;
export const ERROR_HOOK_NEEDS_HMOD = 1428;
export const ERROR_GLOBAL_ONLY_HOOK = 1429;
export const ERROR_JOURNAL_HOOK_SET = 1430;
export const ERROR_HOOK_NOT_INSTALLED = 1431;
export const ERROR_INVALID_LB_MESSAGE = 1432;
export const ERROR_SETCOUNT_ON_BAD_LB = 1433;
export const ERROR_LB_WITHOUT_TABSTOPS = 1434;
export const ERROR_DESTROY_OBJECT_OF_OTHER_THREAD = 1435;
export const ERROR_CHILD_WINDOW_MENU = 1436;
export const ERROR_NO_SYSTEM_MENU = 1437;
export const ERROR_INVALID_MSGBOX_STYLE = 1438;
export const ERROR_INVALID_SPI_VALUE = 1439;
export const ERROR_SCREEN_ALREADY_LOCKED = 1440;
export const ERROR_HWNDS_HAVE_DIFF_PARENT = 1441;
export const ERROR_NOT_CHILD_WINDOW = 1442;
export const ERROR_INVALID_GW_COMMAND = 1443;
export const ERROR_INVALID_THREAD_ID = 1444;
export const ERROR_NON_MDICHILD_WINDOW = 1445;
export const ERROR_POPUP_ALREADY_ACTIVE = 1446;
export const ERROR_NO_SCROLLBARS = 1447;
export const ERROR_INVALID_SCROLLBAR_RANGE = 1448;
export const ERROR_INVALID_SHOWWIN_COMMAND = 1449;
export const ERROR_NO_SYSTEM_RESOURCES = 1450;
export const ERROR_NONPAGED_SYSTEM_RESOURCES = 1451;
export const ERROR_PAGED_SYSTEM_RESOURCES = 1452;
export const ERROR_WORKING_SET_QUOTA = 1453;
export const ERROR_PAGEFILE_QUOTA = 1454;
export const ERROR_COMMITMENT_LIMIT = 1455;
export const ERROR_MENU_ITEM_NOT_FOUND = 1456;
export const ERROR_INVALID_KEYBOARD_HANDLE = 1457;
export const ERROR_HOOK_TYPE_NOT_ALLOWED = 1458;
export const ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION = 1459;
export const ERROR_TIMEOUT = 1460;
export const ERROR_INVALID_MONITOR_HANDLE = 1461;
export const ERROR_INCORRECT_SIZE = 1462;
export const ERROR_SYMLINK_CLASS_DISABLED = 1463;
export const ERROR_SYMLINK_NOT_SUPPORTED = 1464;
export const ERROR_XML_PARSE_ERROR = 1465;
export const ERROR_XMLDSIG_ERROR = 1466;
export const ERROR_RESTART_APPLICATION = 1467;
export const ERROR_WRONG_COMPARTMENT = 1468;
export const ERROR_AUTHIP_FAILURE = 1469;
export const ERROR_NO_NVRAM_RESOURCES = 1470;
export const ERROR_NOT_GUI_PROCESS = 1471;
export const ERROR_EVENTLOG_FILE_CORRUPT = 1500;
export const ERROR_EVENTLOG_CANT_START = 1501;
export const ERROR_LOG_FILE_FULL = 1502;
export const ERROR_EVENTLOG_FILE_CHANGED = 1503;
export const ERROR_CONTAINER_ASSIGNED = 1504;
export const ERROR_JOB_NO_CONTAINER = 1505;
export const ERROR_INVALID_TASK_NAME = 1550;
export const ERROR_INVALID_TASK_INDEX = 1551;
export const ERROR_THREAD_ALREADY_IN_TASK = 1552;
export const ERROR_INSTALL_SERVICE_FAILURE = 1601;
export const ERROR_INSTALL_USEREXIT = 1602;
export const ERROR_INSTALL_FAILURE = 1603;
export const ERROR_INSTALL_SUSPEND = 1604;
export const ERROR_UNKNOWN_PRODUCT = 1605;
export const ERROR_UNKNOWN_FEATURE = 1606;
export const ERROR_UNKNOWN_COMPONENT = 1607;
export const ERROR_UNKNOWN_PROPERTY = 1608;
export const ERROR_INVALID_HANDLE_STATE = 1609;
export const ERROR_BAD_CONFIGURATION = 1610;
export const ERROR_INDEX_ABSENT = 1611;
export const ERROR_INSTALL_SOURCE_ABSENT = 1612;
export const ERROR_INSTALL_PACKAGE_VERSION = 1613;
export const ERROR_PRODUCT_UNINSTALLED = 1614;
export const ERROR_BAD_QUERY_SYNTAX = 1615;
export const ERROR_INVALID_FIELD = 1616;
export const ERROR_DEVICE_REMOVED = 1617;
export const ERROR_INSTALL_ALREADY_RUNNING = 1618;
export const ERROR_INSTALL_PACKAGE_OPEN_FAILED = 1619;
export const ERROR_INSTALL_PACKAGE_INVALID = 1620;
export const ERROR_INSTALL_UI_FAILURE = 1621;
export const ERROR_INSTALL_LOG_FAILURE = 1622;
export const ERROR_INSTALL_LANGUAGE_UNSUPPORTED = 1623;
export const ERROR_INSTALL_TRANSFORM_FAILURE = 1624;
export const ERROR_INSTALL_PACKAGE_REJECTED = 1625;
export const ERROR_FUNCTION_NOT_CALLED = 1626;
export const ERROR_FUNCTION_FAILED = 1627;
export const ERROR_INVALID_TABLE = 1628;
export const ERROR_DATATYPE_MISMATCH = 1629;
export const ERROR_UNSUPPORTED_TYPE = 1630;
export const ERROR_CREATE_FAILED = 1631;
export const ERROR_INSTALL_TEMP_UNWRITABLE = 1632;
export const ERROR_INSTALL_PLATFORM_UNSUPPORTED = 1633;
export const ERROR_INSTALL_NOTUSED = 1634;
export const ERROR_PATCH_PACKAGE_OPEN_FAILED = 1635;
export const ERROR_PATCH_PACKAGE_INVALID = 1636;
export const ERROR_PATCH_PACKAGE_UNSUPPORTED = 1637;
export const ERROR_PRODUCT_VERSION = 1638;
export const ERROR_INVALID_COMMAND_LINE = 1639;
export const ERROR_INSTALL_REMOTE_DISALLOWED = 1640;
export const ERROR_SUCCESS_REBOOT_INITIATED = 1641;
export const ERROR_PATCH_TARGET_NOT_FOUND = 1642;
export const ERROR_PATCH_PACKAGE_REJECTED = 1643;
export const ERROR_INSTALL_TRANSFORM_REJECTED = 1644;
export const ERROR_INSTALL_REMOTE_PROHIBITED = 1645;
export const ERROR_PATCH_REMOVAL_UNSUPPORTED = 1646;
export const ERROR_UNKNOWN_PATCH = 1647;
export const ERROR_PATCH_NO_SEQUENCE = 1648;
export const ERROR_PATCH_REMOVAL_DISALLOWED = 1649;
export const ERROR_INVALID_PATCH_XML = 1650;
export const ERROR_PATCH_MANAGED_ADVERTISED_PRODUCT = 1651;
export const ERROR_INSTALL_SERVICE_SAFEBOOT = 1652;
export const ERROR_FAIL_FAST_EXCEPTION = 1653;
export const ERROR_INSTALL_REJECTED = 1654;
export const ERROR_DYNAMIC_CODE_BLOCKED = 1655;
export const ERROR_NOT_SAME_OBJECT = 1656;
export const ERROR_STRICT_CFG_VIOLATION = 1657;
export const ERROR_SET_CONTEXT_DENIED = 1660;
export const ERROR_CROSS_PARTITION_VIOLATION = 1661;
export const ERROR_RETURN_ADDRESS_HIJACK_ATTEMPT = 1662;
export const ERROR_INVALID_USER_BUFFER = 1784;
export const ERROR_UNRECOGNIZED_MEDIA = 1785;
export const ERROR_NO_TRUST_LSA_SECRET = 1786;
export const ERROR_NO_TRUST_SAM_ACCOUNT = 1787;
export const ERROR_TRUSTED_DOMAIN_FAILURE = 1788;
export const ERROR_TRUSTED_RELATIONSHIP_FAILURE = 1789;
export const ERROR_TRUST_FAILURE = 1790;
export const ERROR_NETLOGON_NOT_STARTED = 1792;
export const ERROR_ACCOUNT_EXPIRED = 1793;
export const ERROR_REDIRECTOR_HAS_OPEN_HANDLES = 1794;
export const ERROR_PRINTER_DRIVER_ALREADY_INSTALLED = 1795;
export const ERROR_UNKNOWN_PORT = 1796;
export const ERROR_UNKNOWN_PRINTER_DRIVER = 1797;
export const ERROR_UNKNOWN_PRINTPROCESSOR = 1798;
export const ERROR_INVALID_SEPARATOR_FILE = 1799;
export const ERROR_INVALID_PRIORITY = 1800;
export const ERROR_INVALID_PRINTER_NAME = 1801;
export const ERROR_PRINTER_ALREADY_EXISTS = 1802;
export const ERROR_INVALID_PRINTER_COMMAND = 1803;
export const ERROR_INVALID_DATATYPE = 1804;
export const ERROR_INVALID_ENVIRONMENT = 1805;
export const ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT = 1807;
export const ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT = 1808;
export const ERROR_NOLOGON_SERVER_TRUST_ACCOUNT = 1809;
export const ERROR_DOMAIN_TRUST_INCONSISTENT = 1810;
export const ERROR_SERVER_HAS_OPEN_HANDLES = 1811;
export const ERROR_RESOURCE_DATA_NOT_FOUND = 1812;
export const ERROR_RESOURCE_TYPE_NOT_FOUND = 1813;
export const ERROR_RESOURCE_NAME_NOT_FOUND = 1814;
export const ERROR_RESOURCE_LANG_NOT_FOUND = 1815;
export const ERROR_NOT_ENOUGH_QUOTA = 1816;
export const ERROR_INVALID_TIME = 1901;
export const ERROR_INVALID_FORM_NAME = 1902;
export const ERROR_INVALID_FORM_SIZE = 1903;
export const ERROR_ALREADY_WAITING = 1904;
export const ERROR_PRINTER_DELETED = 1905;
export const ERROR_INVALID_PRINTER_STATE = 1906;
export const ERROR_PASSWORD_MUST_CHANGE = 1907;
export const ERROR_DOMAIN_CONTROLLER_NOT_FOUND = 1908;
export const ERROR_ACCOUNT_LOCKED_OUT = 1909;
export const ERROR_NO_SITENAME = 1919;
export const ERROR_CANT_ACCESS_FILE = 1920;
export const ERROR_CANT_RESOLVE_FILENAME = 1921;
export const ERROR_KM_DRIVER_BLOCKED = 1930;
export const ERROR_CONTEXT_EXPIRED = 1931;
export const ERROR_PER_USER_TRUST_QUOTA_EXCEEDED = 1932;
export const ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED = 1933;
export const ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED = 1934;
export const ERROR_AUTHENTICATION_FIREWALL_FAILED = 1935;
export const ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED = 1936;
export const ERROR_NTLM_BLOCKED = 1937;
export const ERROR_PASSWORD_CHANGE_REQUIRED = 1938;
export const ERROR_LOST_MODE_LOGON_RESTRICTION = 1939;
export const ERROR_INVALID_PIXEL_FORMAT = 2000;
export const ERROR_BAD_DRIVER = 2001;
export const ERROR_INVALID_WINDOW_STYLE = 2002;
export const ERROR_METAFILE_NOT_SUPPORTED = 2003;
export const ERROR_TRANSFORM_NOT_SUPPORTED = 2004;
export const ERROR_CLIPPING_NOT_SUPPORTED = 2005;
export const ERROR_INVALID_CMM = 2010;
export const ERROR_INVALID_PROFILE = 2011;
export const ERROR_TAG_NOT_FOUND = 2012;
export const ERROR_TAG_NOT_PRESENT = 2013;
export const ERROR_DUPLICATE_TAG = 2014;
export const ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE = 2015;
export const ERROR_PROFILE_NOT_FOUND = 2016;
export const ERROR_INVALID_COLORSPACE = 2017;
export const ERROR_ICM_NOT_ENABLED = 2018;
export const ERROR_DELETING_ICM_XFORM = 2019;
export const ERROR_INVALID_TRANSFORM = 2020;
export const ERROR_COLORSPACE_MISMATCH = 2021;
export const ERROR_INVALID_COLORINDEX = 2022;
export const ERROR_PROFILE_DOES_NOT_MATCH_DEVICE = 2023;
export const ERROR_CONNECTED_OTHER_PASSWORD = 2108;
export const ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT = 2109;
export const ERROR_BAD_USERNAME = 2202;
export const ERROR_NOT_CONNECTED = 2250;
export const ERROR_OPEN_FILES = 2401;
export const ERROR_ACTIVE_CONNECTIONS = 2402;
export const ERROR_DEVICE_IN_USE = 2404;
export const ERROR_UNKNOWN_PRINT_MONITOR = 3000;
export const ERROR_PRINTER_DRIVER_IN_USE = 3001;
export const ERROR_SPOOL_FILE_NOT_FOUND = 3002;
export const ERROR_SPL_NO_STARTDOC = 3003;
export const ERROR_SPL_NO_ADDJOB = 3004;
export const ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED = 3005;
export const ERROR_PRINT_MONITOR_ALREADY_INSTALLED = 3006;
export const ERROR_INVALID_PRINT_MONITOR = 3007;
export const ERROR_PRINT_MONITOR_IN_USE = 3008;
export const ERROR_PRINTER_HAS_JOBS_QUEUED = 3009;
export const ERROR_SUCCESS_REBOOT_REQUIRED = 3010;
export const ERROR_SUCCESS_RESTART_REQUIRED = 3011;
export const ERROR_PRINTER_NOT_FOUND = 3012;
export const ERROR_PRINTER_DRIVER_WARNED = 3013;
export const ERROR_PRINTER_DRIVER_BLOCKED = 3014;
export const ERROR_PRINTER_DRIVER_PACKAGE_IN_USE = 3015;
export const ERROR_CORE_DRIVER_PACKAGE_NOT_FOUND = 3016;
export const ERROR_FAIL_REBOOT_REQUIRED = 3017;
export const ERROR_FAIL_REBOOT_INITIATED = 3018;
export const ERROR_PRINTER_DRIVER_DOWNLOAD_NEEDED = 3019;
export const ERROR_PRINT_JOB_RESTART_REQUIRED = 3020;
export const ERROR_INVALID_PRINTER_DRIVER_MANIFEST = 3021;
export const ERROR_PRINTER_NOT_SHAREABLE = 3022;
export const ERROR_REQUEST_PAUSED = 3050;
export const ERROR_APPEXEC_CONDITION_NOT_SATISFIED = 3060;
export const ERROR_APPEXEC_HANDLE_INVALIDATED = 3061;
export const ERROR_APPEXEC_INVALID_HOST_GENERATION = 3062;
export const ERROR_APPEXEC_UNEXPECTED_PROCESS_REGISTRATION = 3063;
export const ERROR_APPEXEC_INVALID_HOST_STATE = 3064;
export const ERROR_APPEXEC_NO_DONOR = 3065;
export const ERROR_APPEXEC_HOST_ID_MISMATCH = 3066;
export const ERROR_APPEXEC_UNKNOWN_USER = 3067;
export const ERROR_APPEXEC_APP_COMPAT_BLOCK = 3068;
export const ERROR_APPEXEC_CALLER_WAIT_TIMEOUT = 3069;
export const ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_TERMINATION = 3070;
export const ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_LICENSING = 3071;
export const ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_RESOURCES = 3072;
export const ERROR_VRF_VOLATILE_CFG_AND_IO_ENABLED = 3080;
export const ERROR_VRF_VOLATILE_NOT_STOPPABLE = 3081;
export const ERROR_VRF_VOLATILE_SAFE_MODE = 3082;
export const ERROR_VRF_VOLATILE_NOT_RUNNABLE_SYSTEM = 3083;
export const ERROR_VRF_VOLATILE_NOT_SUPPORTED_RULECLASS = 3084;
export const ERROR_VRF_VOLATILE_PROTECTED_DRIVER = 3085;
export const ERROR_VRF_VOLATILE_NMI_REGISTERED = 3086;
export const ERROR_VRF_VOLATILE_SETTINGS_CONFLICT = 3087;
export const ERROR_DIF_IOCALLBACK_NOT_REPLACED = 3190;
export const ERROR_DIF_LIVEDUMP_LIMIT_EXCEEDED = 3191;
export const ERROR_DIF_VOLATILE_SECTION_NOT_LOCKED = 3192;
export const ERROR_DIF_VOLATILE_DRIVER_HOTPATCHED = 3193;
export const ERROR_DIF_VOLATILE_INVALID_INFO = 3194;
export const ERROR_DIF_VOLATILE_DRIVER_IS_NOT_RUNNING = 3195;
export const ERROR_DIF_VOLATILE_PLUGIN_IS_NOT_RUNNING = 3196;
export const ERROR_DIF_VOLATILE_PLUGIN_CHANGE_NOT_ALLOWED = 3197;
export const ERROR_DIF_VOLATILE_NOT_ALLOWED = 3198;
export const ERROR_DIF_BINDING_API_NOT_FOUND = 3199;
export const ERROR_IO_REISSUE_AS_CACHED = 3950;
export const ERROR_WINS_INTERNAL = 4000;
export const ERROR_CAN_NOT_DEL_LOCAL_WINS = 4001;
export const ERROR_STATIC_INIT = 4002;
export const ERROR_INC_BACKUP = 4003;
export const ERROR_FULL_BACKUP = 4004;
export const ERROR_REC_NON_EXISTENT = 4005;
export const ERROR_RPL_NOT_ALLOWED = 4006;
export const ERROR_DHCP_ADDRESS_CONFLICT = 4100;
export const ERROR_WMI_GUID_NOT_FOUND = 4200;
export const ERROR_WMI_INSTANCE_NOT_FOUND = 4201;
export const ERROR_WMI_ITEMID_NOT_FOUND = 4202;
export const ERROR_WMI_TRY_AGAIN = 4203;
export const ERROR_WMI_DP_NOT_FOUND = 4204;
export const ERROR_WMI_UNRESOLVED_INSTANCE_REF = 4205;
export const ERROR_WMI_ALREADY_ENABLED = 4206;
export const ERROR_WMI_GUID_DISCONNECTED = 4207;
export const ERROR_WMI_SERVER_UNAVAILABLE = 4208;
export const ERROR_WMI_DP_FAILED = 4209;
export const ERROR_WMI_INVALID_MOF = 4210;
export const ERROR_WMI_INVALID_REGINFO = 4211;
export const ERROR_WMI_ALREADY_DISABLED = 4212;
export const ERROR_WMI_READ_ONLY = 4213;
export const ERROR_WMI_SET_FAILURE = 4214;
export const ERROR_NOT_APPCONTAINER = 4250;
export const ERROR_APPCONTAINER_REQUIRED = 4251;
export const ERROR_NOT_SUPPORTED_IN_APPCONTAINER = 4252;
export const ERROR_INVALID_PACKAGE_SID_LENGTH = 4253;
export const ERROR_INVALID_MEDIA = 4300;
export const ERROR_INVALID_LIBRARY = 4301;
export const ERROR_INVALID_MEDIA_POOL = 4302;
export const ERROR_DRIVE_MEDIA_MISMATCH = 4303;
export const ERROR_MEDIA_OFFLINE = 4304;
export const ERROR_LIBRARY_OFFLINE = 4305;
export const ERROR_EMPTY = 4306;
export const ERROR_NOT_EMPTY = 4307;
export const ERROR_MEDIA_UNAVAILABLE = 4308;
export const ERROR_RESOURCE_DISABLED = 4309;
export const ERROR_INVALID_CLEANER = 4310;
export const ERROR_UNABLE_TO_CLEAN = 4311;
export const ERROR_OBJECT_NOT_FOUND = 4312;
export const ERROR_DATABASE_FAILURE = 4313;
export const ERROR_DATABASE_FULL = 4314;
export const ERROR_MEDIA_INCOMPATIBLE = 4315;
export const ERROR_RESOURCE_NOT_PRESENT = 4316;
export const ERROR_INVALID_OPERATION = 4317;
export const ERROR_MEDIA_NOT_AVAILABLE = 4318;
export const ERROR_DEVICE_NOT_AVAILABLE = 4319;
export const ERROR_REQUEST_REFUSED = 4320;
export const ERROR_INVALID_DRIVE_OBJECT = 4321;
export const ERROR_LIBRARY_FULL = 4322;
export const ERROR_MEDIUM_NOT_ACCESSIBLE = 4323;
export const ERROR_UNABLE_TO_LOAD_MEDIUM = 4324;
export const ERROR_UNABLE_TO_INVENTORY_DRIVE = 4325;
export const ERROR_UNABLE_TO_INVENTORY_SLOT = 4326;
export const ERROR_UNABLE_TO_INVENTORY_TRANSPORT = 4327;
export const ERROR_TRANSPORT_FULL = 4328;
export const ERROR_CONTROLLING_IEPORT = 4329;
export const ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA = 4330;
export const ERROR_CLEANER_SLOT_SET = 4331;
export const ERROR_CLEANER_SLOT_NOT_SET = 4332;
export const ERROR_CLEANER_CARTRIDGE_SPENT = 4333;
export const ERROR_UNEXPECTED_OMID = 4334;
export const ERROR_CANT_DELETE_LAST_ITEM = 4335;
export const ERROR_MESSAGE_EXCEEDS_MAX_SIZE = 4336;
export const ERROR_VOLUME_CONTAINS_SYS_FILES = 4337;
export const ERROR_INDIGENOUS_TYPE = 4338;
export const ERROR_NO_SUPPORTING_DRIVES = 4339;
export const ERROR_CLEANER_CARTRIDGE_INSTALLED = 4340;
export const ERROR_IEPORT_FULL = 4341;
export const ERROR_FILE_OFFLINE = 4350;
export const ERROR_REMOTE_STORAGE_NOT_ACTIVE = 4351;
export const ERROR_REMOTE_STORAGE_MEDIA_ERROR = 4352;
export const ERROR_NOT_A_REPARSE_POINT = 4390;
export const ERROR_REPARSE_ATTRIBUTE_CONFLICT = 4391;
export const ERROR_INVALID_REPARSE_DATA = 4392;
export const ERROR_REPARSE_TAG_INVALID = 4393;
export const ERROR_REPARSE_TAG_MISMATCH = 4394;
export const ERROR_REPARSE_POINT_ENCOUNTERED = 4395;
export const ERROR_APP_DATA_NOT_FOUND = 4400;
export const ERROR_APP_DATA_EXPIRED = 4401;
export const ERROR_APP_DATA_CORRUPT = 4402;
export const ERROR_APP_DATA_LIMIT_EXCEEDED = 4403;
export const ERROR_APP_DATA_REBOOT_REQUIRED = 4404;
export const ERROR_SECUREBOOT_ROLLBACK_DETECTED = 4420;
export const ERROR_SECUREBOOT_POLICY_VIOLATION = 4421;
export const ERROR_SECUREBOOT_INVALID_POLICY = 4422;
export const ERROR_SECUREBOOT_POLICY_PUBLISHER_NOT_FOUND = 4423;
export const ERROR_SECUREBOOT_POLICY_NOT_SIGNED = 4424;
export const ERROR_SECUREBOOT_NOT_ENABLED = 4425;
export const ERROR_SECUREBOOT_FILE_REPLACED = 4426;
export const ERROR_SECUREBOOT_POLICY_NOT_AUTHORIZED = 4427;
export const ERROR_SECUREBOOT_POLICY_UNKNOWN = 4428;
export const ERROR_SECUREBOOT_POLICY_MISSING_ANTIROLLBACKVERSION = 4429;
export const ERROR_SECUREBOOT_PLATFORM_ID_MISMATCH = 4430;
export const ERROR_SECUREBOOT_POLICY_ROLLBACK_DETECTED = 4431;
export const ERROR_SECUREBOOT_POLICY_UPGRADE_MISMATCH = 4432;
export const ERROR_SECUREBOOT_REQUIRED_POLICY_FILE_MISSING = 4433;
export const ERROR_SECUREBOOT_NOT_BASE_POLICY = 4434;
export const ERROR_SECUREBOOT_NOT_SUPPLEMENTAL_POLICY = 4435;
export const ERROR_OFFLOAD_READ_FLT_NOT_SUPPORTED = 4440;
export const ERROR_OFFLOAD_WRITE_FLT_NOT_SUPPORTED = 4441;
export const ERROR_OFFLOAD_READ_FILE_NOT_SUPPORTED = 4442;
export const ERROR_OFFLOAD_WRITE_FILE_NOT_SUPPORTED = 4443;
export const ERROR_ALREADY_HAS_STREAM_ID = 4444;
export const ERROR_SMR_GARBAGE_COLLECTION_REQUIRED = 4445;
export const ERROR_WOF_WIM_HEADER_CORRUPT = 4446;
export const ERROR_WOF_WIM_RESOURCE_TABLE_CORRUPT = 4447;
export const ERROR_WOF_FILE_RESOURCE_TABLE_CORRUPT = 4448;
export const ERROR_OBJECT_IS_IMMUTABLE = 4449;
export const ERROR_VOLUME_NOT_SIS_ENABLED = 4500;
export const ERROR_SYSTEM_INTEGRITY_ROLLBACK_DETECTED = 4550;
export const ERROR_SYSTEM_INTEGRITY_POLICY_VIOLATION = 4551;
export const ERROR_SYSTEM_INTEGRITY_INVALID_POLICY = 4552;
export const ERROR_SYSTEM_INTEGRITY_POLICY_NOT_SIGNED = 4553;
export const ERROR_SYSTEM_INTEGRITY_TOO_MANY_POLICIES = 4554;
export const ERROR_SYSTEM_INTEGRITY_SUPPLEMENTAL_POLICY_NOT_AUTHORIZED = 4555;
export const ERROR_SYSTEM_INTEGRITY_REPUTATION_MALICIOUS = 4556;
export const ERROR_SYSTEM_INTEGRITY_REPUTATION_PUA = 4557;
export const ERROR_SYSTEM_INTEGRITY_REPUTATION_DANGEROUS_EXT = 4558;
export const ERROR_SYSTEM_INTEGRITY_REPUTATION_OFFLINE = 4559;
export const ERROR_VSM_NOT_INITIALIZED = 4560;
export const ERROR_VSM_DMA_PROTECTION_NOT_IN_USE = 4561;
export const ERROR_PLATFORM_MANIFEST_NOT_AUTHORIZED = 4570;
export const ERROR_PLATFORM_MANIFEST_INVALID = 4571;
export const ERROR_PLATFORM_MANIFEST_FILE_NOT_AUTHORIZED = 4572;
export const ERROR_PLATFORM_MANIFEST_CATALOG_NOT_AUTHORIZED = 4573;
export const ERROR_PLATFORM_MANIFEST_BINARY_ID_NOT_FOUND = 4574;
export const ERROR_PLATFORM_MANIFEST_NOT_ACTIVE = 4575;
export const ERROR_PLATFORM_MANIFEST_NOT_SIGNED = 4576;
export const ERROR_DEPENDENT_RESOURCE_EXISTS = 5001;
export const ERROR_DEPENDENCY_NOT_FOUND = 5002;
export const ERROR_DEPENDENCY_ALREADY_EXISTS = 5003;
export const ERROR_RESOURCE_NOT_ONLINE = 5004;
export const ERROR_HOST_NODE_NOT_AVAILABLE = 5005;
export const ERROR_RESOURCE_NOT_AVAILABLE = 5006;
export const ERROR_RESOURCE_NOT_FOUND = 5007;
export const ERROR_SHUTDOWN_CLUSTER = 5008;
export const ERROR_CANT_EVICT_ACTIVE_NODE = 5009;
export const ERROR_OBJECT_ALREADY_EXISTS = 5010;
export const ERROR_OBJECT_IN_LIST = 5011;
export const ERROR_GROUP_NOT_AVAILABLE = 5012;
export const ERROR_GROUP_NOT_FOUND = 5013;
export const ERROR_GROUP_NOT_ONLINE = 5014;
export const ERROR_HOST_NODE_NOT_RESOURCE_OWNER = 5015;
export const ERROR_HOST_NODE_NOT_GROUP_OWNER = 5016;
export const ERROR_RESMON_CREATE_FAILED = 5017;
export const ERROR_RESMON_ONLINE_FAILED = 5018;
export const ERROR_RESOURCE_ONLINE = 5019;
export const ERROR_QUORUM_RESOURCE = 5020;
export const ERROR_NOT_QUORUM_CAPABLE = 5021;
export const ERROR_CLUSTER_SHUTTING_DOWN = 5022;
export const ERROR_INVALID_STATE = 5023;
export const ERROR_RESOURCE_PROPERTIES_STORED = 5024;
export const ERROR_NOT_QUORUM_CLASS = 5025;
export const ERROR_CORE_RESOURCE = 5026;
export const ERROR_QUORUM_RESOURCE_ONLINE_FAILED = 5027;
export const ERROR_QUORUMLOG_OPEN_FAILED = 5028;
export const ERROR_CLUSTERLOG_CORRUPT = 5029;
export const ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE = 5030;
export const ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE = 5031;
export const ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND = 5032;
export const ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE = 5033;
export const ERROR_QUORUM_OWNER_ALIVE = 5034;
export const ERROR_NETWORK_NOT_AVAILABLE = 5035;
export const ERROR_NODE_NOT_AVAILABLE = 5036;
export const ERROR_ALL_NODES_NOT_AVAILABLE = 5037;
export const ERROR_RESOURCE_FAILED = 5038;
export const ERROR_CLUSTER_INVALID_NODE = 5039;
export const ERROR_CLUSTER_NODE_EXISTS = 5040;
export const ERROR_CLUSTER_JOIN_IN_PROGRESS = 5041;
export const ERROR_CLUSTER_NODE_NOT_FOUND = 5042;
export const ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND = 5043;
export const ERROR_CLUSTER_NETWORK_EXISTS = 5044;
export const ERROR_CLUSTER_NETWORK_NOT_FOUND = 5045;
export const ERROR_CLUSTER_NETINTERFACE_EXISTS = 5046;
export const ERROR_CLUSTER_NETINTERFACE_NOT_FOUND = 5047;
export const ERROR_CLUSTER_INVALID_REQUEST = 5048;
export const ERROR_CLUSTER_INVALID_NETWORK_PROVIDER = 5049;
export const ERROR_CLUSTER_NODE_DOWN = 5050;
export const ERROR_CLUSTER_NODE_UNREACHABLE = 5051;
export const ERROR_CLUSTER_NODE_NOT_MEMBER = 5052;
export const ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS = 5053;
export const ERROR_CLUSTER_INVALID_NETWORK = 5054;
export const ERROR_CLUSTER_NODE_UP = 5056;
export const ERROR_CLUSTER_IPADDR_IN_USE = 5057;
export const ERROR_CLUSTER_NODE_NOT_PAUSED = 5058;
export const ERROR_CLUSTER_NO_SECURITY_CONTEXT = 5059;
export const ERROR_CLUSTER_NETWORK_NOT_INTERNAL = 5060;
export const ERROR_CLUSTER_NODE_ALREADY_UP = 5061;
export const ERROR_CLUSTER_NODE_ALREADY_DOWN = 5062;
export const ERROR_CLUSTER_NETWORK_ALREADY_ONLINE = 5063;
export const ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE = 5064;
export const ERROR_CLUSTER_NODE_ALREADY_MEMBER = 5065;
export const ERROR_CLUSTER_LAST_INTERNAL_NETWORK = 5066;
export const ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS = 5067;
export const ERROR_INVALID_OPERATION_ON_QUORUM = 5068;
export const ERROR_DEPENDENCY_NOT_ALLOWED = 5069;
export const ERROR_CLUSTER_NODE_PAUSED = 5070;
export const ERROR_NODE_CANT_HOST_RESOURCE = 5071;
export const ERROR_CLUSTER_NODE_NOT_READY = 5072;
export const ERROR_CLUSTER_NODE_SHUTTING_DOWN = 5073;
export const ERROR_CLUSTER_JOIN_ABORTED = 5074;
export const ERROR_CLUSTER_INCOMPATIBLE_VERSIONS = 5075;
export const ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED = 5076;
export const ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED = 5077;
export const ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND = 5078;
export const ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED = 5079;
export const ERROR_CLUSTER_RESNAME_NOT_FOUND = 5080;
export const ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED = 5081;
export const ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST = 5082;
export const ERROR_CLUSTER_DATABASE_SEQMISMATCH = 5083;
export const ERROR_RESMON_INVALID_STATE = 5084;
export const ERROR_CLUSTER_GUM_NOT_LOCKER = 5085;
export const ERROR_QUORUM_DISK_NOT_FOUND = 5086;
export const ERROR_DATABASE_BACKUP_CORRUPT = 5087;
export const ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT = 5088;
export const ERROR_RESOURCE_PROPERTY_UNCHANGEABLE = 5089;
export const ERROR_NO_ADMIN_ACCESS_POINT = 5090;
export const ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE = 5890;
export const ERROR_CLUSTER_QUORUMLOG_NOT_FOUND = 5891;
export const ERROR_CLUSTER_MEMBERSHIP_HALT = 5892;
export const ERROR_CLUSTER_INSTANCE_ID_MISMATCH = 5893;
export const ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP = 5894;
export const ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH = 5895;
export const ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP = 5896;
export const ERROR_CLUSTER_PARAMETER_MISMATCH = 5897;
export const ERROR_NODE_CANNOT_BE_CLUSTERED = 5898;
export const ERROR_CLUSTER_WRONG_OS_VERSION = 5899;
export const ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME = 5900;
export const ERROR_CLUSCFG_ALREADY_COMMITTED = 5901;
export const ERROR_CLUSCFG_ROLLBACK_FAILED = 5902;
export const ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT = 5903;
export const ERROR_CLUSTER_OLD_VERSION = 5904;
export const ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME = 5905;
export const ERROR_CLUSTER_NO_NET_ADAPTERS = 5906;
export const ERROR_CLUSTER_POISONED = 5907;
export const ERROR_CLUSTER_GROUP_MOVING = 5908;
export const ERROR_CLUSTER_RESOURCE_TYPE_BUSY = 5909;
export const ERROR_RESOURCE_CALL_TIMED_OUT = 5910;
export const ERROR_INVALID_CLUSTER_IPV6_ADDRESS = 5911;
export const ERROR_CLUSTER_INTERNAL_INVALID_FUNCTION = 5912;
export const ERROR_CLUSTER_PARAMETER_OUT_OF_BOUNDS = 5913;
export const ERROR_CLUSTER_PARTIAL_SEND = 5914;
export const ERROR_CLUSTER_REGISTRY_INVALID_FUNCTION = 5915;
export const ERROR_CLUSTER_INVALID_STRING_TERMINATION = 5916;
export const ERROR_CLUSTER_INVALID_STRING_FORMAT = 5917;
export const ERROR_CLUSTER_DATABASE_TRANSACTION_IN_PROGRESS = 5918;
export const ERROR_CLUSTER_DATABASE_TRANSACTION_NOT_IN_PROGRESS = 5919;
export const ERROR_CLUSTER_NULL_DATA = 5920;
export const ERROR_CLUSTER_PARTIAL_READ = 5921;
export const ERROR_CLUSTER_PARTIAL_WRITE = 5922;
export const ERROR_CLUSTER_CANT_DESERIALIZE_DATA = 5923;
export const ERROR_DEPENDENT_RESOURCE_PROPERTY_CONFLICT = 5924;
export const ERROR_CLUSTER_NO_QUORUM = 5925;
export const ERROR_CLUSTER_INVALID_IPV6_NETWORK = 5926;
export const ERROR_CLUSTER_INVALID_IPV6_TUNNEL_NETWORK = 5927;
export const ERROR_QUORUM_NOT_ALLOWED_IN_THIS_GROUP = 5928;
export const ERROR_DEPENDENCY_TREE_TOO_COMPLEX = 5929;
export const ERROR_EXCEPTION_IN_RESOURCE_CALL = 5930;
export const ERROR_CLUSTER_RHS_FAILED_INITIALIZATION = 5931;
export const ERROR_CLUSTER_NOT_INSTALLED = 5932;
export const ERROR_CLUSTER_RESOURCES_MUST_BE_ONLINE_ON_THE_SAME_NODE = 5933;
export const ERROR_CLUSTER_MAX_NODES_IN_CLUSTER = 5934;
export const ERROR_CLUSTER_TOO_MANY_NODES = 5935;
export const ERROR_CLUSTER_OBJECT_ALREADY_USED = 5936;
export const ERROR_NONCORE_GROUPS_FOUND = 5937;
export const ERROR_FILE_SHARE_RESOURCE_CONFLICT = 5938;
export const ERROR_CLUSTER_EVICT_INVALID_REQUEST = 5939;
export const ERROR_CLUSTER_SINGLETON_RESOURCE = 5940;
export const ERROR_CLUSTER_GROUP_SINGLETON_RESOURCE = 5941;
export const ERROR_CLUSTER_RESOURCE_PROVIDER_FAILED = 5942;
export const ERROR_CLUSTER_RESOURCE_CONFIGURATION_ERROR = 5943;
export const ERROR_CLUSTER_GROUP_BUSY = 5944;
export const ERROR_CLUSTER_NOT_SHARED_VOLUME = 5945;
export const ERROR_CLUSTER_INVALID_SECURITY_DESCRIPTOR = 5946;
export const ERROR_CLUSTER_SHARED_VOLUMES_IN_USE = 5947;
export const ERROR_CLUSTER_USE_SHARED_VOLUMES_API = 5948;
export const ERROR_CLUSTER_BACKUP_IN_PROGRESS = 5949;
export const ERROR_NON_CSV_PATH = 5950;
export const ERROR_CSV_VOLUME_NOT_LOCAL = 5951;
export const ERROR_CLUSTER_WATCHDOG_TERMINATING = 5952;
export const ERROR_CLUSTER_RESOURCE_VETOED_MOVE_INCOMPATIBLE_NODES = 5953;
export const ERROR_CLUSTER_INVALID_NODE_WEIGHT = 5954;
export const ERROR_CLUSTER_RESOURCE_VETOED_CALL = 5955;
export const ERROR_RESMON_SYSTEM_RESOURCES_LACKING = 5956;
export const ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_DESTINATION = 5957;
export const ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_SOURCE = 5958;
export const ERROR_CLUSTER_GROUP_QUEUED = 5959;
export const ERROR_CLUSTER_RESOURCE_LOCKED_STATUS = 5960;
export const ERROR_CLUSTER_SHARED_VOLUME_FAILOVER_NOT_ALLOWED = 5961;
export const ERROR_CLUSTER_NODE_DRAIN_IN_PROGRESS = 5962;
export const ERROR_CLUSTER_DISK_NOT_CONNECTED = 5963;
export const ERROR_DISK_NOT_CSV_CAPABLE = 5964;
export const ERROR_RESOURCE_NOT_IN_AVAILABLE_STORAGE = 5965;
export const ERROR_CLUSTER_SHARED_VOLUME_REDIRECTED = 5966;
export const ERROR_CLUSTER_SHARED_VOLUME_NOT_REDIRECTED = 5967;
export const ERROR_CLUSTER_CANNOT_RETURN_PROPERTIES = 5968;
export const ERROR_CLUSTER_RESOURCE_CONTAINS_UNSUPPORTED_DIFF_AREA_FOR_SHARED_VOLUMES = 5969;
export const ERROR_CLUSTER_RESOURCE_IS_IN_MAINTENANCE_MODE = 5970;
export const ERROR_CLUSTER_AFFINITY_CONFLICT = 5971;
export const ERROR_CLUSTER_RESOURCE_IS_REPLICA_VIRTUAL_MACHINE = 5972;
export const ERROR_CLUSTER_UPGRADE_INCOMPATIBLE_VERSIONS = 5973;
export const ERROR_CLUSTER_UPGRADE_FIX_QUORUM_NOT_SUPPORTED = 5974;
export const ERROR_CLUSTER_UPGRADE_RESTART_REQUIRED = 5975;
export const ERROR_CLUSTER_UPGRADE_IN_PROGRESS = 5976;
export const ERROR_CLUSTER_UPGRADE_INCOMPLETE = 5977;
export const ERROR_CLUSTER_NODE_IN_GRACE_PERIOD = 5978;
export const ERROR_CLUSTER_CSV_IO_PAUSE_TIMEOUT = 5979;
export const ERROR_NODE_NOT_ACTIVE_CLUSTER_MEMBER = 5980;
export const ERROR_CLUSTER_RESOURCE_NOT_MONITORED = 5981;
export const ERROR_CLUSTER_RESOURCE_DOES_NOT_SUPPORT_UNMONITORED = 5982;
export const ERROR_CLUSTER_RESOURCE_IS_REPLICATED = 5983;
export const ERROR_CLUSTER_NODE_ISOLATED = 5984;
export const ERROR_CLUSTER_NODE_QUARANTINED = 5985;
export const ERROR_CLUSTER_DATABASE_UPDATE_CONDITION_FAILED = 5986;
export const ERROR_CLUSTER_SPACE_DEGRADED = 5987;
export const ERROR_CLUSTER_TOKEN_DELEGATION_NOT_SUPPORTED = 5988;
export const ERROR_CLUSTER_CSV_INVALID_HANDLE = 5989;
export const ERROR_CLUSTER_CSV_SUPPORTED_ONLY_ON_COORDINATOR = 5990;
export const ERROR_GROUPSET_NOT_AVAILABLE = 5991;
export const ERROR_GROUPSET_NOT_FOUND = 5992;
export const ERROR_GROUPSET_CANT_PROVIDE = 5993;
export const ERROR_CLUSTER_FAULT_DOMAIN_PARENT_NOT_FOUND = 5994;
export const ERROR_CLUSTER_FAULT_DOMAIN_INVALID_HIERARCHY = 5995;
export const ERROR_CLUSTER_FAULT_DOMAIN_FAILED_S2D_VALIDATION = 5996;
export const ERROR_CLUSTER_FAULT_DOMAIN_S2D_CONNECTIVITY_LOSS = 5997;
export const ERROR_CLUSTER_INVALID_INFRASTRUCTURE_FILESERVER_NAME = 5998;
export const ERROR_CLUSTERSET_MANAGEMENT_CLUSTER_UNREACHABLE = 5999;
export const ERROR_ENCRYPTION_FAILED = 6000;
export const ERROR_DECRYPTION_FAILED = 6001;
export const ERROR_FILE_ENCRYPTED = 6002;
export const ERROR_NO_RECOVERY_POLICY = 6003;
export const ERROR_NO_EFS = 6004;
export const ERROR_WRONG_EFS = 6005;
export const ERROR_NO_USER_KEYS = 6006;
export const ERROR_FILE_NOT_ENCRYPTED = 6007;
export const ERROR_NOT_EXPORT_FORMAT = 6008;
export const ERROR_FILE_READ_ONLY = 6009;
export const ERROR_DIR_EFS_DISALLOWED = 6010;
export const ERROR_EFS_SERVER_NOT_TRUSTED = 6011;
export const ERROR_BAD_RECOVERY_POLICY = 6012;
export const ERROR_EFS_ALG_BLOB_TOO_BIG = 6013;
export const ERROR_VOLUME_NOT_SUPPORT_EFS = 6014;
export const ERROR_EFS_DISABLED = 6015;
export const ERROR_EFS_VERSION_NOT_SUPPORT = 6016;
export const ERROR_CS_ENCRYPTION_INVALID_SERVER_RESPONSE = 6017;
export const ERROR_CS_ENCRYPTION_UNSUPPORTED_SERVER = 6018;
export const ERROR_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE = 6019;
export const ERROR_CS_ENCRYPTION_NEW_ENCRYPTED_FILE = 6020;
export const ERROR_CS_ENCRYPTION_FILE_NOT_CSE = 6021;
export const ERROR_ENCRYPTION_POLICY_DENIES_OPERATION = 6022;
export const ERROR_WIP_ENCRYPTION_FAILED = 6023;
export const ERROR_NO_BROWSER_SERVERS_FOUND = 6118;
export const ERROR_CLUSTER_OBJECT_IS_CLUSTER_SET_VM = 6250;
export const ERROR_LOG_SECTOR_INVALID = 6600;
export const ERROR_LOG_SECTOR_PARITY_INVALID = 6601;
export const ERROR_LOG_SECTOR_REMAPPED = 6602;
export const ERROR_LOG_BLOCK_INCOMPLETE = 6603;
export const ERROR_LOG_INVALID_RANGE = 6604;
export const ERROR_LOG_BLOCKS_EXHAUSTED = 6605;
export const ERROR_LOG_READ_CONTEXT_INVALID = 6606;
export const ERROR_LOG_RESTART_INVALID = 6607;
export const ERROR_LOG_BLOCK_VERSION = 6608;
export const ERROR_LOG_BLOCK_INVALID = 6609;
export const ERROR_LOG_READ_MODE_INVALID = 6610;
export const ERROR_LOG_NO_RESTART = 6611;
export const ERROR_LOG_METADATA_CORRUPT = 6612;
export const ERROR_LOG_METADATA_INVALID = 6613;
export const ERROR_LOG_METADATA_INCONSISTENT = 6614;
export const ERROR_LOG_RESERVATION_INVALID = 6615;
export const ERROR_LOG_CANT_DELETE = 6616;
export const ERROR_LOG_CONTAINER_LIMIT_EXCEEDED = 6617;
export const ERROR_LOG_START_OF_LOG = 6618;
export const ERROR_LOG_POLICY_ALREADY_INSTALLED = 6619;
export const ERROR_LOG_POLICY_NOT_INSTALLED = 6620;
export const ERROR_LOG_POLICY_INVALID = 6621;
export const ERROR_LOG_POLICY_CONFLICT = 6622;
export const ERROR_LOG_PINNED_ARCHIVE_TAIL = 6623;
export const ERROR_LOG_RECORD_NONEXISTENT = 6624;
export const ERROR_LOG_RECORDS_RESERVED_INVALID = 6625;
export const ERROR_LOG_SPACE_RESERVED_INVALID = 6626;
export const ERROR_LOG_TAIL_INVALID = 6627;
export const ERROR_LOG_FULL = 6628;
export const ERROR_COULD_NOT_RESIZE_LOG = 6629;
export const ERROR_LOG_MULTIPLEXED = 6630;
export const ERROR_LOG_DEDICATED = 6631;
export const ERROR_LOG_ARCHIVE_NOT_IN_PROGRESS = 6632;
export const ERROR_LOG_ARCHIVE_IN_PROGRESS = 6633;
export const ERROR_LOG_EPHEMERAL = 6634;
export const ERROR_LOG_NOT_ENOUGH_CONTAINERS = 6635;
export const ERROR_LOG_CLIENT_ALREADY_REGISTERED = 6636;
export const ERROR_LOG_CLIENT_NOT_REGISTERED = 6637;
export const ERROR_LOG_FULL_HANDLER_IN_PROGRESS = 6638;
export const ERROR_LOG_CONTAINER_READ_FAILED = 6639;
export const ERROR_LOG_CONTAINER_WRITE_FAILED = 6640;
export const ERROR_LOG_CONTAINER_OPEN_FAILED = 6641;
export const ERROR_LOG_CONTAINER_STATE_INVALID = 6642;
export const ERROR_LOG_STATE_INVALID = 6643;
export const ERROR_LOG_PINNED = 6644;
export const ERROR_LOG_METADATA_FLUSH_FAILED = 6645;
export const ERROR_LOG_INCONSISTENT_SECURITY = 6646;
export const ERROR_LOG_APPENDED_FLUSH_FAILED = 6647;
export const ERROR_LOG_PINNED_RESERVATION = 6648;
export const ERROR_INVALID_TRANSACTION = 6700;
export const ERROR_TRANSACTION_NOT_ACTIVE = 6701;
export const ERROR_TRANSACTION_REQUEST_NOT_VALID = 6702;
export const ERROR_TRANSACTION_NOT_REQUESTED = 6703;
export const ERROR_TRANSACTION_ALREADY_ABORTED = 6704;
export const ERROR_TRANSACTION_ALREADY_COMMITTED = 6705;
export const ERROR_TM_INITIALIZATION_FAILED = 6706;
export const ERROR_RESOURCEMANAGER_READ_ONLY = 6707;
export const ERROR_TRANSACTION_NOT_JOINED = 6708;
export const ERROR_TRANSACTION_SUPERIOR_EXISTS = 6709;
export const ERROR_CRM_PROTOCOL_ALREADY_EXISTS = 6710;
export const ERROR_TRANSACTION_PROPAGATION_FAILED = 6711;
export const ERROR_CRM_PROTOCOL_NOT_FOUND = 6712;
export const ERROR_TRANSACTION_INVALID_MARSHALL_BUFFER = 6713;
export const ERROR_CURRENT_TRANSACTION_NOT_VALID = 6714;
export const ERROR_TRANSACTION_NOT_FOUND = 6715;
export const ERROR_RESOURCEMANAGER_NOT_FOUND = 6716;
export const ERROR_ENLISTMENT_NOT_FOUND = 6717;
export const ERROR_TRANSACTIONMANAGER_NOT_FOUND = 6718;
export const ERROR_TRANSACTIONMANAGER_NOT_ONLINE = 6719;
export const ERROR_TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION = 6720;
export const ERROR_TRANSACTION_NOT_ROOT = 6721;
export const ERROR_TRANSACTION_OBJECT_EXPIRED = 6722;
export const ERROR_TRANSACTION_RESPONSE_NOT_ENLISTED = 6723;
export const ERROR_TRANSACTION_RECORD_TOO_LONG = 6724;
export const ERROR_IMPLICIT_TRANSACTION_NOT_SUPPORTED = 6725;
export const ERROR_TRANSACTION_INTEGRITY_VIOLATED = 6726;
export const ERROR_TRANSACTIONMANAGER_IDENTITY_MISMATCH = 6727;
export const ERROR_RM_CANNOT_BE_FROZEN_FOR_SNAPSHOT = 6728;
export const ERROR_TRANSACTION_MUST_WRITETHROUGH = 6729;
export const ERROR_TRANSACTION_NO_SUPERIOR = 6730;
export const ERROR_HEURISTIC_DAMAGE_POSSIBLE = 6731;
export const ERROR_TRANSACTIONAL_CONFLICT = 6800;
export const ERROR_RM_NOT_ACTIVE = 6801;
export const ERROR_RM_METADATA_CORRUPT = 6802;
export const ERROR_DIRECTORY_NOT_RM = 6803;
export const ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE = 6805;
export const ERROR_LOG_RESIZE_INVALID_SIZE = 6806;
export const ERROR_OBJECT_NO_LONGER_EXISTS = 6807;
export const ERROR_STREAM_MINIVERSION_NOT_FOUND = 6808;
export const ERROR_STREAM_MINIVERSION_NOT_VALID = 6809;
export const ERROR_MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION = 6810;
export const ERROR_CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT = 6811;
export const ERROR_CANT_CREATE_MORE_STREAM_MINIVERSIONS = 6812;
export const ERROR_REMOTE_FILE_VERSION_MISMATCH = 6814;
export const ERROR_HANDLE_NO_LONGER_VALID = 6815;
export const ERROR_NO_TXF_METADATA = 6816;
export const ERROR_LOG_CORRUPTION_DETECTED = 6817;
export const ERROR_CANT_RECOVER_WITH_HANDLE_OPEN = 6818;
export const ERROR_RM_DISCONNECTED = 6819;
export const ERROR_ENLISTMENT_NOT_SUPERIOR = 6820;
export const ERROR_RECOVERY_NOT_NEEDED = 6821;
export const ERROR_RM_ALREADY_STARTED = 6822;
export const ERROR_FILE_IDENTITY_NOT_PERSISTENT = 6823;
export const ERROR_CANT_BREAK_TRANSACTIONAL_DEPENDENCY = 6824;
export const ERROR_CANT_CROSS_RM_BOUNDARY = 6825;
export const ERROR_TXF_DIR_NOT_EMPTY = 6826;
export const ERROR_INDOUBT_TRANSACTIONS_EXIST = 6827;
export const ERROR_TM_VOLATILE = 6828;
export const ERROR_ROLLBACK_TIMER_EXPIRED = 6829;
export const ERROR_TXF_ATTRIBUTE_CORRUPT = 6830;
export const ERROR_EFS_NOT_ALLOWED_IN_TRANSACTION = 6831;
export const ERROR_TRANSACTIONAL_OPEN_NOT_ALLOWED = 6832;
export const ERROR_LOG_GROWTH_FAILED = 6833;
export const ERROR_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE = 6834;
export const ERROR_TXF_METADATA_ALREADY_PRESENT = 6835;
export const ERROR_TRANSACTION_SCOPE_CALLBACKS_NOT_SET = 6836;
export const ERROR_TRANSACTION_REQUIRED_PROMOTION = 6837;
export const ERROR_CANNOT_EXECUTE_FILE_IN_TRANSACTION = 6838;
export const ERROR_TRANSACTIONS_NOT_FROZEN = 6839;
export const ERROR_TRANSACTION_FREEZE_IN_PROGRESS = 6840;
export const ERROR_NOT_SNAPSHOT_VOLUME = 6841;
export const ERROR_NO_SAVEPOINT_WITH_OPEN_FILES = 6842;
export const ERROR_DATA_LOST_REPAIR = 6843;
export const ERROR_SPARSE_NOT_ALLOWED_IN_TRANSACTION = 6844;
export const ERROR_TM_IDENTITY_MISMATCH = 6845;
export const ERROR_FLOATED_SECTION = 6846;
export const ERROR_CANNOT_ACCEPT_TRANSACTED_WORK = 6847;
export const ERROR_CANNOT_ABORT_TRANSACTIONS = 6848;
export const ERROR_BAD_CLUSTERS = 6849;
export const ERROR_COMPRESSION_NOT_ALLOWED_IN_TRANSACTION = 6850;
export const ERROR_VOLUME_DIRTY = 6851;
export const ERROR_NO_LINK_TRACKING_IN_TRANSACTION = 6852;
export const ERROR_OPERATION_NOT_SUPPORTED_IN_TRANSACTION = 6853;
export const ERROR_EXPIRED_HANDLE = 6854;
export const ERROR_TRANSACTION_NOT_ENLISTED = 6855;
export const ERROR_CTX_WINSTATION_NAME_INVALID = 7001;
export const ERROR_CTX_INVALID_PD = 7002;
export const ERROR_CTX_PD_NOT_FOUND = 7003;
export const ERROR_CTX_WD_NOT_FOUND = 7004;
export const ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY = 7005;
export const ERROR_CTX_SERVICE_NAME_COLLISION = 7006;
export const ERROR_CTX_CLOSE_PENDING = 7007;
export const ERROR_CTX_NO_OUTBUF = 7008;
export const ERROR_CTX_MODEM_INF_NOT_FOUND = 7009;
export const ERROR_CTX_INVALID_MODEMNAME = 7010;
export const ERROR_CTX_MODEM_RESPONSE_ERROR = 7011;
export const ERROR_CTX_MODEM_RESPONSE_TIMEOUT = 7012;
export const ERROR_CTX_MODEM_RESPONSE_NO_CARRIER = 7013;
export const ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE = 7014;
export const ERROR_CTX_MODEM_RESPONSE_BUSY = 7015;
export const ERROR_CTX_MODEM_RESPONSE_VOICE = 7016;
export const ERROR_CTX_TD_ERROR = 7017;
export const ERROR_CTX_WINSTATION_NOT_FOUND = 7022;
export const ERROR_CTX_WINSTATION_ALREADY_EXISTS = 7023;
export const ERROR_CTX_WINSTATION_BUSY = 7024;
export const ERROR_CTX_BAD_VIDEO_MODE = 7025;
export const ERROR_CTX_GRAPHICS_INVALID = 7035;
export const ERROR_CTX_LOGON_DISABLED = 7037;
export const ERROR_CTX_NOT_CONSOLE = 7038;
export const ERROR_CTX_CLIENT_QUERY_TIMEOUT = 7040;
export const ERROR_CTX_CONSOLE_DISCONNECT = 7041;
export const ERROR_CTX_CONSOLE_CONNECT = 7042;
export const ERROR_CTX_SHADOW_DENIED = 7044;
export const ERROR_CTX_WINSTATION_ACCESS_DENIED = 7045;
export const ERROR_CTX_INVALID_WD = 7049;
export const ERROR_CTX_SHADOW_INVALID = 7050;
export const ERROR_CTX_SHADOW_DISABLED = 7051;
export const ERROR_CTX_CLIENT_LICENSE_IN_USE = 7052;
export const ERROR_CTX_CLIENT_LICENSE_NOT_SET = 7053;
export const ERROR_CTX_LICENSE_NOT_AVAILABLE = 7054;
export const ERROR_CTX_LICENSE_CLIENT_INVALID = 7055;
export const ERROR_CTX_LICENSE_EXPIRED = 7056;
export const ERROR_CTX_SHADOW_NOT_RUNNING = 7057;
export const ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE = 7058;
export const ERROR_ACTIVATION_COUNT_EXCEEDED = 7059;
export const ERROR_CTX_WINSTATIONS_DISABLED = 7060;
export const ERROR_CTX_ENCRYPTION_LEVEL_REQUIRED = 7061;
export const ERROR_CTX_SESSION_IN_USE = 7062;
export const ERROR_CTX_NO_FORCE_LOGOFF = 7063;
export const ERROR_CTX_ACCOUNT_RESTRICTION = 7064;
export const ERROR_RDP_PROTOCOL_ERROR = 7065;
export const ERROR_CTX_CDM_CONNECT = 7066;
export const ERROR_CTX_CDM_DISCONNECT = 7067;
export const ERROR_CTX_SECURITY_LAYER_ERROR = 7068;
export const ERROR_TS_INCOMPATIBLE_SESSIONS = 7069;
export const ERROR_TS_VIDEO_SUBSYSTEM_ERROR = 7070;
export const ERROR_DS_NOT_INSTALLED = 8200;
export const ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY = 8201;
export const ERROR_DS_NO_ATTRIBUTE_OR_VALUE = 8202;
export const ERROR_DS_INVALID_ATTRIBUTE_SYNTAX = 8203;
export const ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED = 8204;
export const ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS = 8205;
export const ERROR_DS_BUSY = 8206;
export const ERROR_DS_UNAVAILABLE = 8207;
export const ERROR_DS_NO_RIDS_ALLOCATED = 8208;
export const ERROR_DS_NO_MORE_RIDS = 8209;
export const ERROR_DS_INCORRECT_ROLE_OWNER = 8210;
export const ERROR_DS_RIDMGR_INIT_ERROR = 8211;
export const ERROR_DS_OBJ_CLASS_VIOLATION = 8212;
export const ERROR_DS_CANT_ON_NON_LEAF = 8213;
export const ERROR_DS_CANT_ON_RDN = 8214;
export const ERROR_DS_CANT_MOD_OBJ_CLASS = 8215;
export const ERROR_DS_CROSS_DOM_MOVE_ERROR = 8216;
export const ERROR_DS_GC_NOT_AVAILABLE = 8217;
export const ERROR_SHARED_POLICY = 8218;
export const ERROR_POLICY_OBJECT_NOT_FOUND = 8219;
export const ERROR_POLICY_ONLY_IN_DS = 8220;
export const ERROR_PROMOTION_ACTIVE = 8221;
export const ERROR_NO_PROMOTION_ACTIVE = 8222;
export const ERROR_DS_OPERATIONS_ERROR = 8224;
export const ERROR_DS_PROTOCOL_ERROR = 8225;
export const ERROR_DS_TIMELIMIT_EXCEEDED = 8226;
export const ERROR_DS_SIZELIMIT_EXCEEDED = 8227;
export const ERROR_DS_ADMIN_LIMIT_EXCEEDED = 8228;
export const ERROR_DS_COMPARE_FALSE = 8229;
export const ERROR_DS_COMPARE_TRUE = 8230;
export const ERROR_DS_AUTH_METHOD_NOT_SUPPORTED = 8231;
export const ERROR_DS_STRONG_AUTH_REQUIRED = 8232;
export const ERROR_DS_INAPPROPRIATE_AUTH = 8233;
export const ERROR_DS_AUTH_UNKNOWN = 8234;
export const ERROR_DS_REFERRAL = 8235;
export const ERROR_DS_UNAVAILABLE_CRIT_EXTENSION = 8236;
export const ERROR_DS_CONFIDENTIALITY_REQUIRED = 8237;
export const ERROR_DS_INAPPROPRIATE_MATCHING = 8238;
export const ERROR_DS_CONSTRAINT_VIOLATION = 8239;
export const ERROR_DS_NO_SUCH_OBJECT = 8240;
export const ERROR_DS_ALIAS_PROBLEM = 8241;
export const ERROR_DS_INVALID_DN_SYNTAX = 8242;
export const ERROR_DS_IS_LEAF = 8243;
export const ERROR_DS_ALIAS_DEREF_PROBLEM = 8244;
export const ERROR_DS_UNWILLING_TO_PERFORM = 8245;
export const ERROR_DS_LOOP_DETECT = 8246;
export const ERROR_DS_NAMING_VIOLATION = 8247;
export const ERROR_DS_OBJECT_RESULTS_TOO_LARGE = 8248;
export const ERROR_DS_AFFECTS_MULTIPLE_DSAS = 8249;
export const ERROR_DS_SERVER_DOWN = 8250;
export const ERROR_DS_LOCAL_ERROR = 8251;
export const ERROR_DS_ENCODING_ERROR = 8252;
export const ERROR_DS_DECODING_ERROR = 8253;
export const ERROR_DS_FILTER_UNKNOWN = 8254;
export const ERROR_DS_PARAM_ERROR = 8255;
export const ERROR_DS_NOT_SUPPORTED = 8256;
export const ERROR_DS_NO_RESULTS_RETURNED = 8257;
export const ERROR_DS_CONTROL_NOT_FOUND = 8258;
export const ERROR_DS_CLIENT_LOOP = 8259;
export const ERROR_DS_REFERRAL_LIMIT_EXCEEDED = 8260;
export const ERROR_DS_SORT_CONTROL_MISSING = 8261;
export const ERROR_DS_OFFSET_RANGE_ERROR = 8262;
export const ERROR_DS_RIDMGR_DISABLED = 8263;
export const ERROR_DS_ROOT_MUST_BE_NC = 8301;
export const ERROR_DS_ADD_REPLICA_INHIBITED = 8302;
export const ERROR_DS_ATT_NOT_DEF_IN_SCHEMA = 8303;
export const ERROR_DS_MAX_OBJ_SIZE_EXCEEDED = 8304;
export const ERROR_DS_OBJ_STRING_NAME_EXISTS = 8305;
export const ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA = 8306;
export const ERROR_DS_RDN_DOESNT_MATCH_SCHEMA = 8307;
export const ERROR_DS_NO_REQUESTED_ATTS_FOUND = 8308;
export const ERROR_DS_USER_BUFFER_TO_SMALL = 8309;
export const ERROR_DS_ATT_IS_NOT_ON_OBJ = 8310;
export const ERROR_DS_ILLEGAL_MOD_OPERATION = 8311;
export const ERROR_DS_OBJ_TOO_LARGE = 8312;
export const ERROR_DS_BAD_INSTANCE_TYPE = 8313;
export const ERROR_DS_MASTERDSA_REQUIRED = 8314;
export const ERROR_DS_OBJECT_CLASS_REQUIRED = 8315;
export const ERROR_DS_MISSING_REQUIRED_ATT = 8316;
export const ERROR_DS_ATT_NOT_DEF_FOR_CLASS = 8317;
export const ERROR_DS_ATT_ALREADY_EXISTS = 8318;
export const ERROR_DS_CANT_ADD_ATT_VALUES = 8320;
export const ERROR_DS_SINGLE_VALUE_CONSTRAINT = 8321;
export const ERROR_DS_RANGE_CONSTRAINT = 8322;
export const ERROR_DS_ATT_VAL_ALREADY_EXISTS = 8323;
export const ERROR_DS_CANT_REM_MISSING_ATT = 8324;
export const ERROR_DS_CANT_REM_MISSING_ATT_VAL = 8325;
export const ERROR_DS_ROOT_CANT_BE_SUBREF = 8326;
export const ERROR_DS_NO_CHAINING = 8327;
export const ERROR_DS_NO_CHAINED_EVAL = 8328;
export const ERROR_DS_NO_PARENT_OBJECT = 8329;
export const ERROR_DS_PARENT_IS_AN_ALIAS = 8330;
export const ERROR_DS_CANT_MIX_MASTER_AND_REPS = 8331;
export const ERROR_DS_CHILDREN_EXIST = 8332;
export const ERROR_DS_OBJ_NOT_FOUND = 8333;
export const ERROR_DS_ALIASED_OBJ_MISSING = 8334;
export const ERROR_DS_BAD_NAME_SYNTAX = 8335;
export const ERROR_DS_ALIAS_POINTS_TO_ALIAS = 8336;
export const ERROR_DS_CANT_DEREF_ALIAS = 8337;
export const ERROR_DS_OUT_OF_SCOPE = 8338;
export const ERROR_DS_OBJECT_BEING_REMOVED = 8339;
export const ERROR_DS_CANT_DELETE_DSA_OBJ = 8340;
export const ERROR_DS_GENERIC_ERROR = 8341;
export const ERROR_DS_DSA_MUST_BE_INT_MASTER = 8342;
export const ERROR_DS_CLASS_NOT_DSA = 8343;
export const ERROR_DS_INSUFF_ACCESS_RIGHTS = 8344;
export const ERROR_DS_ILLEGAL_SUPERIOR = 8345;
export const ERROR_DS_ATTRIBUTE_OWNED_BY_SAM = 8346;
export const ERROR_DS_NAME_TOO_MANY_PARTS = 8347;
export const ERROR_DS_NAME_TOO_LONG = 8348;
export const ERROR_DS_NAME_VALUE_TOO_LONG = 8349;
export const ERROR_DS_NAME_UNPARSEABLE = 8350;
export const ERROR_DS_NAME_TYPE_UNKNOWN = 8351;
export const ERROR_DS_NOT_AN_OBJECT = 8352;
export const ERROR_DS_SEC_DESC_TOO_SHORT = 8353;
export const ERROR_DS_SEC_DESC_INVALID = 8354;
export const ERROR_DS_NO_DELETED_NAME = 8355;
export const ERROR_DS_SUBREF_MUST_HAVE_PARENT = 8356;
export const ERROR_DS_NCNAME_MUST_BE_NC = 8357;
export const ERROR_DS_CANT_ADD_SYSTEM_ONLY = 8358;
export const ERROR_DS_CLASS_MUST_BE_CONCRETE = 8359;
export const ERROR_DS_INVALID_DMD = 8360;
export const ERROR_DS_OBJ_GUID_EXISTS = 8361;
export const ERROR_DS_NOT_ON_BACKLINK = 8362;
export const ERROR_DS_NO_CROSSREF_FOR_NC = 8363;
export const ERROR_DS_SHUTTING_DOWN = 8364;
export const ERROR_DS_UNKNOWN_OPERATION = 8365;
export const ERROR_DS_INVALID_ROLE_OWNER = 8366;
export const ERROR_DS_COULDNT_CONTACT_FSMO = 8367;
export const ERROR_DS_CROSS_NC_DN_RENAME = 8368;
export const ERROR_DS_CANT_MOD_SYSTEM_ONLY = 8369;
export const ERROR_DS_REPLICATOR_ONLY = 8370;
export const ERROR_DS_OBJ_CLASS_NOT_DEFINED = 8371;
export const ERROR_DS_OBJ_CLASS_NOT_SUBCLASS = 8372;
export const ERROR_DS_NAME_REFERENCE_INVALID = 8373;
export const ERROR_DS_CROSS_REF_EXISTS = 8374;
export const ERROR_DS_CANT_DEL_MASTER_CROSSREF = 8375;
export const ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD = 8376;
export const ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX = 8377;
export const ERROR_DS_DUP_RDN = 8378;
export const ERROR_DS_DUP_OID = 8379;
export const ERROR_DS_DUP_MAPI_ID = 8380;
export const ERROR_DS_DUP_SCHEMA_ID_GUID = 8381;
export const ERROR_DS_DUP_LDAP_DISPLAY_NAME = 8382;
export const ERROR_DS_SEMANTIC_ATT_TEST = 8383;
export const ERROR_DS_SYNTAX_MISMATCH = 8384;
export const ERROR_DS_EXISTS_IN_MUST_HAVE = 8385;
export const ERROR_DS_EXISTS_IN_MAY_HAVE = 8386;
export const ERROR_DS_NONEXISTENT_MAY_HAVE = 8387;
export const ERROR_DS_NONEXISTENT_MUST_HAVE = 8388;
export const ERROR_DS_AUX_CLS_TEST_FAIL = 8389;
export const ERROR_DS_NONEXISTENT_POSS_SUP = 8390;
export const ERROR_DS_SUB_CLS_TEST_FAIL = 8391;
export const ERROR_DS_BAD_RDN_ATT_ID_SYNTAX = 8392;
export const ERROR_DS_EXISTS_IN_AUX_CLS = 8393;
export const ERROR_DS_EXISTS_IN_SUB_CLS = 8394;
export const ERROR_DS_EXISTS_IN_POSS_SUP = 8395;
export const ERROR_DS_RECALCSCHEMA_FAILED = 8396;
export const ERROR_DS_TREE_DELETE_NOT_FINISHED = 8397;
export const ERROR_DS_CANT_DELETE = 8398;
export const ERROR_DS_ATT_SCHEMA_REQ_ID = 8399;
export const ERROR_DS_BAD_ATT_SCHEMA_SYNTAX = 8400;
export const ERROR_DS_CANT_CACHE_ATT = 8401;
export const ERROR_DS_CANT_CACHE_CLASS = 8402;
export const ERROR_DS_CANT_REMOVE_ATT_CACHE = 8403;
export const ERROR_DS_CANT_REMOVE_CLASS_CACHE = 8404;
export const ERROR_DS_CANT_RETRIEVE_DN = 8405;
export const ERROR_DS_MISSING_SUPREF = 8406;
export const ERROR_DS_CANT_RETRIEVE_INSTANCE = 8407;
export const ERROR_DS_CODE_INCONSISTENCY = 8408;
export const ERROR_DS_DATABASE_ERROR = 8409;
export const ERROR_DS_GOVERNSID_MISSING = 8410;
export const ERROR_DS_MISSING_EXPECTED_ATT = 8411;
export const ERROR_DS_NCNAME_MISSING_CR_REF = 8412;
export const ERROR_DS_SECURITY_CHECKING_ERROR = 8413;
export const ERROR_DS_SCHEMA_NOT_LOADED = 8414;
export const ERROR_DS_SCHEMA_ALLOC_FAILED = 8415;
export const ERROR_DS_ATT_SCHEMA_REQ_SYNTAX = 8416;
export const ERROR_DS_GCVERIFY_ERROR = 8417;
export const ERROR_DS_DRA_SCHEMA_MISMATCH = 8418;
export const ERROR_DS_CANT_FIND_DSA_OBJ = 8419;
export const ERROR_DS_CANT_FIND_EXPECTED_NC = 8420;
export const ERROR_DS_CANT_FIND_NC_IN_CACHE = 8421;
export const ERROR_DS_CANT_RETRIEVE_CHILD = 8422;
export const ERROR_DS_SECURITY_ILLEGAL_MODIFY = 8423;
export const ERROR_DS_CANT_REPLACE_HIDDEN_REC = 8424;
export const ERROR_DS_BAD_HIERARCHY_FILE = 8425;
export const ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED = 8426;
export const ERROR_DS_CONFIG_PARAM_MISSING = 8427;
export const ERROR_DS_COUNTING_AB_INDICES_FAILED = 8428;
export const ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED = 8429;
export const ERROR_DS_INTERNAL_FAILURE = 8430;
export const ERROR_DS_UNKNOWN_ERROR = 8431;
export const ERROR_DS_ROOT_REQUIRES_CLASS_TOP = 8432;
export const ERROR_DS_REFUSING_FSMO_ROLES = 8433;
export const ERROR_DS_MISSING_FSMO_SETTINGS = 8434;
export const ERROR_DS_UNABLE_TO_SURRENDER_ROLES = 8435;
export const ERROR_DS_DRA_GENERIC = 8436;
export const ERROR_DS_DRA_INVALID_PARAMETER = 8437;
export const ERROR_DS_DRA_BUSY = 8438;
export const ERROR_DS_DRA_BAD_DN = 8439;
export const ERROR_DS_DRA_BAD_NC = 8440;
export const ERROR_DS_DRA_DN_EXISTS = 8441;
export const ERROR_DS_DRA_INTERNAL_ERROR = 8442;
export const ERROR_DS_DRA_INCONSISTENT_DIT = 8443;
export const ERROR_DS_DRA_CONNECTION_FAILED = 8444;
export const ERROR_DS_DRA_BAD_INSTANCE_TYPE = 8445;
export const ERROR_DS_DRA_OUT_OF_MEM = 8446;
export const ERROR_DS_DRA_MAIL_PROBLEM = 8447;
export const ERROR_DS_DRA_REF_ALREADY_EXISTS = 8448;
export const ERROR_DS_DRA_REF_NOT_FOUND = 8449;
export const ERROR_DS_DRA_OBJ_IS_REP_SOURCE = 8450;
export const ERROR_DS_DRA_DB_ERROR = 8451;
export const ERROR_DS_DRA_NO_REPLICA = 8452;
export const ERROR_DS_DRA_ACCESS_DENIED = 8453;
export const ERROR_DS_DRA_NOT_SUPPORTED = 8454;
export const ERROR_DS_DRA_RPC_CANCELLED = 8455;
export const ERROR_DS_DRA_SOURCE_DISABLED = 8456;
export const ERROR_DS_DRA_SINK_DISABLED = 8457;
export const ERROR_DS_DRA_NAME_COLLISION = 8458;
export const ERROR_DS_DRA_SOURCE_REINSTALLED = 8459;
export const ERROR_DS_DRA_MISSING_PARENT = 8460;
export const ERROR_DS_DRA_PREEMPTED = 8461;
export const ERROR_DS_DRA_ABANDON_SYNC = 8462;
export const ERROR_DS_DRA_SHUTDOWN = 8463;
export const ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET = 8464;
export const ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA = 8465;
export const ERROR_DS_DRA_EXTN_CONNECTION_FAILED = 8466;
export const ERROR_DS_INSTALL_SCHEMA_MISMATCH = 8467;
export const ERROR_DS_DUP_LINK_ID = 8468;
export const ERROR_DS_NAME_ERROR_RESOLVING = 8469;
export const ERROR_DS_NAME_ERROR_NOT_FOUND = 8470;
export const ERROR_DS_NAME_ERROR_NOT_UNIQUE = 8471;
export const ERROR_DS_NAME_ERROR_NO_MAPPING = 8472;
export const ERROR_DS_NAME_ERROR_DOMAIN_ONLY = 8473;
export const ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING = 8474;
export const ERROR_DS_CONSTRUCTED_ATT_MOD = 8475;
export const ERROR_DS_WRONG_OM_OBJ_CLASS = 8476;
export const ERROR_DS_DRA_REPL_PENDING = 8477;
export const ERROR_DS_DS_REQUIRED = 8478;
export const ERROR_DS_INVALID_LDAP_DISPLAY_NAME = 8479;
export const ERROR_DS_NON_BASE_SEARCH = 8480;
export const ERROR_DS_CANT_RETRIEVE_ATTS = 8481;
export const ERROR_DS_BACKLINK_WITHOUT_LINK = 8482;
export const ERROR_DS_EPOCH_MISMATCH = 8483;
export const ERROR_DS_SRC_NAME_MISMATCH = 8484;
export const ERROR_DS_SRC_AND_DST_NC_IDENTICAL = 8485;
export const ERROR_DS_DST_NC_MISMATCH = 8486;
export const ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC = 8487;
export const ERROR_DS_SRC_GUID_MISMATCH = 8488;
export const ERROR_DS_CANT_MOVE_DELETED_OBJECT = 8489;
export const ERROR_DS_PDC_OPERATION_IN_PROGRESS = 8490;
export const ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD = 8491;
export const ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION = 8492;
export const ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS = 8493;
export const ERROR_DS_NC_MUST_HAVE_NC_PARENT = 8494;
export const ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE = 8495;
export const ERROR_DS_DST_DOMAIN_NOT_NATIVE = 8496;
export const ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER = 8497;
export const ERROR_DS_CANT_MOVE_ACCOUNT_GROUP = 8498;
export const ERROR_DS_CANT_MOVE_RESOURCE_GROUP = 8499;
export const ERROR_DS_INVALID_SEARCH_FLAG = 8500;
export const ERROR_DS_NO_TREE_DELETE_ABOVE_NC = 8501;
export const ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE = 8502;
export const ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE = 8503;
export const ERROR_DS_SAM_INIT_FAILURE = 8504;
export const ERROR_DS_SENSITIVE_GROUP_VIOLATION = 8505;
export const ERROR_DS_CANT_MOD_PRIMARYGROUPID = 8506;
export const ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD = 8507;
export const ERROR_DS_NONSAFE_SCHEMA_CHANGE = 8508;
export const ERROR_DS_SCHEMA_UPDATE_DISALLOWED = 8509;
export const ERROR_DS_CANT_CREATE_UNDER_SCHEMA = 8510;
export const ERROR_DS_INSTALL_NO_SRC_SCH_VERSION = 8511;
export const ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE = 8512;
export const ERROR_DS_INVALID_GROUP_TYPE = 8513;
export const ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN = 8514;
export const ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN = 8515;
export const ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER = 8516;
export const ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER = 8517;
export const ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER = 8518;
export const ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER = 8519;
export const ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER = 8520;
export const ERROR_DS_HAVE_PRIMARY_MEMBERS = 8521;
export const ERROR_DS_STRING_SD_CONVERSION_FAILED = 8522;
export const ERROR_DS_NAMING_MASTER_GC = 8523;
export const ERROR_DS_DNS_LOOKUP_FAILURE = 8524;
export const ERROR_DS_COULDNT_UPDATE_SPNS = 8525;
export const ERROR_DS_CANT_RETRIEVE_SD = 8526;
export const ERROR_DS_KEY_NOT_UNIQUE = 8527;
export const ERROR_DS_WRONG_LINKED_ATT_SYNTAX = 8528;
export const ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD = 8529;
export const ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY = 8530;
export const ERROR_DS_CANT_START = 8531;
export const ERROR_DS_INIT_FAILURE = 8532;
export const ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION = 8533;
export const ERROR_DS_SOURCE_DOMAIN_IN_FOREST = 8534;
export const ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST = 8535;
export const ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED = 8536;
export const ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN = 8537;
export const ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER = 8538;
export const ERROR_DS_SRC_SID_EXISTS_IN_FOREST = 8539;
export const ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH = 8540;
export const ERROR_SAM_INIT_FAILURE = 8541;
export const ERROR_DS_DRA_SCHEMA_INFO_SHIP = 8542;
export const ERROR_DS_DRA_SCHEMA_CONFLICT = 8543;
export const ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT = 8544;
export const ERROR_DS_DRA_OBJ_NC_MISMATCH = 8545;
export const ERROR_DS_NC_STILL_HAS_DSAS = 8546;
export const ERROR_DS_GC_REQUIRED = 8547;
export const ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY = 8548;
export const ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS = 8549;
export const ERROR_DS_CANT_ADD_TO_GC = 8550;
export const ERROR_DS_NO_CHECKPOINT_WITH_PDC = 8551;
export const ERROR_DS_SOURCE_AUDITING_NOT_ENABLED = 8552;
export const ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC = 8553;
export const ERROR_DS_INVALID_NAME_FOR_SPN = 8554;
export const ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS = 8555;
export const ERROR_DS_UNICODEPWD_NOT_IN_QUOTES = 8556;
export const ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED = 8557;
export const ERROR_DS_MUST_BE_RUN_ON_DST_DC = 8558;
export const ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER = 8559;
export const ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ = 8560;
export const ERROR_DS_INIT_FAILURE_CONSOLE = 8561;
export const ERROR_DS_SAM_INIT_FAILURE_CONSOLE = 8562;
export const ERROR_DS_FOREST_VERSION_TOO_HIGH = 8563;
export const ERROR_DS_DOMAIN_VERSION_TOO_HIGH = 8564;
export const ERROR_DS_FOREST_VERSION_TOO_LOW = 8565;
export const ERROR_DS_DOMAIN_VERSION_TOO_LOW = 8566;
export const ERROR_DS_INCOMPATIBLE_VERSION = 8567;
export const ERROR_DS_LOW_DSA_VERSION = 8568;
export const ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN = 8569;
export const ERROR_DS_NOT_SUPPORTED_SORT_ORDER = 8570;
export const ERROR_DS_NAME_NOT_UNIQUE = 8571;
export const ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4 = 8572;
export const ERROR_DS_OUT_OF_VERSION_STORE = 8573;
export const ERROR_DS_INCOMPATIBLE_CONTROLS_USED = 8574;
export const ERROR_DS_NO_REF_DOMAIN = 8575;
export const ERROR_DS_RESERVED_LINK_ID = 8576;
export const ERROR_DS_LINK_ID_NOT_AVAILABLE = 8577;
export const ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER = 8578;
export const ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE = 8579;
export const ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC = 8580;
export const ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG = 8581;
export const ERROR_DS_MODIFYDN_WRONG_GRANDPARENT = 8582;
export const ERROR_DS_NAME_ERROR_TRUST_REFERRAL = 8583;
export const ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER = 8584;
export const ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD = 8585;
export const ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2 = 8586;
export const ERROR_DS_THREAD_LIMIT_EXCEEDED = 8587;
export const ERROR_DS_NOT_CLOSEST = 8588;
export const ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF = 8589;
export const ERROR_DS_SINGLE_USER_MODE_FAILED = 8590;
export const ERROR_DS_NTDSCRIPT_SYNTAX_ERROR = 8591;
export const ERROR_DS_NTDSCRIPT_PROCESS_ERROR = 8592;
export const ERROR_DS_DIFFERENT_REPL_EPOCHS = 8593;
export const ERROR_DS_DRS_EXTENSIONS_CHANGED = 8594;
export const ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR = 8595;
export const ERROR_DS_NO_MSDS_INTID = 8596;
export const ERROR_DS_DUP_MSDS_INTID = 8597;
export const ERROR_DS_EXISTS_IN_RDNATTID = 8598;
export const ERROR_DS_AUTHORIZATION_FAILED = 8599;
export const ERROR_DS_INVALID_SCRIPT = 8600;
export const ERROR_DS_REMOTE_CROSSREF_OP_FAILED = 8601;
export const ERROR_DS_CROSS_REF_BUSY = 8602;
export const ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN = 8603;
export const ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC = 8604;
export const ERROR_DS_DUPLICATE_ID_FOUND = 8605;
export const ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT = 8606;
export const ERROR_DS_GROUP_CONVERSION_ERROR = 8607;
export const ERROR_DS_CANT_MOVE_APP_BASIC_GROUP = 8608;
export const ERROR_DS_CANT_MOVE_APP_QUERY_GROUP = 8609;
export const ERROR_DS_ROLE_NOT_VERIFIED = 8610;
export const ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL = 8611;
export const ERROR_DS_DOMAIN_RENAME_IN_PROGRESS = 8612;
export const ERROR_DS_EXISTING_AD_CHILD_NC = 8613;
export const ERROR_DS_REPL_LIFETIME_EXCEEDED = 8614;
export const ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER = 8615;
export const ERROR_DS_LDAP_SEND_QUEUE_FULL = 8616;
export const ERROR_DS_DRA_OUT_SCHEDULE_WINDOW = 8617;
export const ERROR_DS_POLICY_NOT_KNOWN = 8618;
export const ERROR_NO_SITE_SETTINGS_OBJECT = 8619;
export const ERROR_NO_SECRETS = 8620;
export const ERROR_NO_WRITABLE_DC_FOUND = 8621;
export const ERROR_DS_NO_SERVER_OBJECT = 8622;
export const ERROR_DS_NO_NTDSA_OBJECT = 8623;
export const ERROR_DS_NON_ASQ_SEARCH = 8624;
export const ERROR_DS_AUDIT_FAILURE = 8625;
export const ERROR_DS_INVALID_SEARCH_FLAG_SUBTREE = 8626;
export const ERROR_DS_INVALID_SEARCH_FLAG_TUPLE = 8627;
export const ERROR_DS_HIERARCHY_TABLE_TOO_DEEP = 8628;
export const ERROR_DS_DRA_CORRUPT_UTD_VECTOR = 8629;
export const ERROR_DS_DRA_SECRETS_DENIED = 8630;
export const ERROR_DS_RESERVED_MAPI_ID = 8631;
export const ERROR_DS_MAPI_ID_NOT_AVAILABLE = 8632;
export const ERROR_DS_DRA_MISSING_KRBTGT_SECRET = 8633;
export const ERROR_DS_DOMAIN_NAME_EXISTS_IN_FOREST = 8634;
export const ERROR_DS_FLAT_NAME_EXISTS_IN_FOREST = 8635;
export const ERROR_INVALID_USER_PRINCIPAL_NAME = 8636;
export const ERROR_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS = 8637;
export const ERROR_DS_OID_NOT_FOUND = 8638;
export const ERROR_DS_DRA_RECYCLED_TARGET = 8639;
export const ERROR_DS_DISALLOWED_NC_REDIRECT = 8640;
export const ERROR_DS_HIGH_ADLDS_FFL = 8641;
export const ERROR_DS_HIGH_DSA_VERSION = 8642;
export const ERROR_DS_LOW_ADLDS_FFL = 8643;
export const ERROR_DOMAIN_SID_SAME_AS_LOCAL_WORKSTATION = 8644;
export const ERROR_DS_UNDELETE_SAM_VALIDATION_FAILED = 8645;
export const ERROR_INCORRECT_ACCOUNT_TYPE = 8646;
export const ERROR_DS_SPN_VALUE_NOT_UNIQUE_IN_FOREST = 8647;
export const ERROR_DS_UPN_VALUE_NOT_UNIQUE_IN_FOREST = 8648;
export const ERROR_DS_MISSING_FOREST_TRUST = 8649;
export const ERROR_DS_VALUE_KEY_NOT_UNIQUE = 8650;
export const ERROR_WEAK_WHFBKEY_BLOCKED = 8651;
export const DNS_ERROR_RESPONSE_CODES_BASE = 9000;
export const DNS_ERROR_RCODE_NO_ERROR = 0;
export const DNS_ERROR_MASK = 9000;
export const DNS_ERROR_RCODE_FORMAT_ERROR = 9001;
export const DNS_ERROR_RCODE_SERVER_FAILURE = 9002;
export const DNS_ERROR_RCODE_NAME_ERROR = 9003;
export const DNS_ERROR_RCODE_NOT_IMPLEMENTED = 9004;
export const DNS_ERROR_RCODE_REFUSED = 9005;
export const DNS_ERROR_RCODE_YXDOMAIN = 9006;
export const DNS_ERROR_RCODE_YXRRSET = 9007;
export const DNS_ERROR_RCODE_NXRRSET = 9008;
export const DNS_ERROR_RCODE_NOTAUTH = 9009;
export const DNS_ERROR_RCODE_NOTZONE = 9010;
export const DNS_ERROR_RCODE_BADSIG = 9016;
export const DNS_ERROR_RCODE_BADKEY = 9017;
export const DNS_ERROR_RCODE_BADTIME = 9018;
export const DNS_ERROR_RCODE_LAST = 9018;
export const DNS_ERROR_DNSSEC_BASE = 9100;
export const DNS_ERROR_KEYMASTER_REQUIRED = 9101;
export const DNS_ERROR_NOT_ALLOWED_ON_SIGNED_ZONE = 9102;
export const DNS_ERROR_NSEC3_INCOMPATIBLE_WITH_RSA_SHA1 = 9103;
export const DNS_ERROR_NOT_ENOUGH_SIGNING_KEY_DESCRIPTORS = 9104;
export const DNS_ERROR_UNSUPPORTED_ALGORITHM = 9105;
export const DNS_ERROR_INVALID_KEY_SIZE = 9106;
export const DNS_ERROR_SIGNING_KEY_NOT_ACCESSIBLE = 9107;
export const DNS_ERROR_KSP_DOES_NOT_SUPPORT_PROTECTION = 9108;
export const DNS_ERROR_UNEXPECTED_DATA_PROTECTION_ERROR = 9109;
export const DNS_ERROR_UNEXPECTED_CNG_ERROR = 9110;
export const DNS_ERROR_UNKNOWN_SIGNING_PARAMETER_VERSION = 9111;
export const DNS_ERROR_KSP_NOT_ACCESSIBLE = 9112;
export const DNS_ERROR_TOO_MANY_SKDS = 9113;
export const DNS_ERROR_INVALID_ROLLOVER_PERIOD = 9114;
export const DNS_ERROR_INVALID_INITIAL_ROLLOVER_OFFSET = 9115;
export const DNS_ERROR_ROLLOVER_IN_PROGRESS = 9116;
export const DNS_ERROR_STANDBY_KEY_NOT_PRESENT = 9117;
export const DNS_ERROR_NOT_ALLOWED_ON_ZSK = 9118;
export const DNS_ERROR_NOT_ALLOWED_ON_ACTIVE_SKD = 9119;
export const DNS_ERROR_ROLLOVER_ALREADY_QUEUED = 9120;
export const DNS_ERROR_NOT_ALLOWED_ON_UNSIGNED_ZONE = 9121;
export const DNS_ERROR_BAD_KEYMASTER = 9122;
export const DNS_ERROR_INVALID_SIGNATURE_VALIDITY_PERIOD = 9123;
export const DNS_ERROR_INVALID_NSEC3_ITERATION_COUNT = 9124;
export const DNS_ERROR_DNSSEC_IS_DISABLED = 9125;
export const DNS_ERROR_INVALID_XML = 9126;
export const DNS_ERROR_NO_VALID_TRUST_ANCHORS = 9127;
export const DNS_ERROR_ROLLOVER_NOT_POKEABLE = 9128;
export const DNS_ERROR_NSEC3_NAME_COLLISION = 9129;
export const DNS_ERROR_NSEC_INCOMPATIBLE_WITH_NSEC3_RSA_SHA1 = 9130;
export const DNS_ERROR_PACKET_FMT_BASE = 9500;
export const DNS_ERROR_BAD_PACKET = 9502;
export const DNS_ERROR_NO_PACKET = 9503;
export const DNS_ERROR_RCODE = 9504;
export const DNS_ERROR_UNSECURE_PACKET = 9505;
export const DNS_ERROR_NO_MEMORY = 14;
export const DNS_ERROR_INVALID_NAME = 123;
export const DNS_ERROR_INVALID_DATA = 13;
export const DNS_ERROR_GENERAL_API_BASE = 9550;
export const DNS_ERROR_INVALID_TYPE = 9551;
export const DNS_ERROR_INVALID_IP_ADDRESS = 9552;
export const DNS_ERROR_INVALID_PROPERTY = 9553;
export const DNS_ERROR_TRY_AGAIN_LATER = 9554;
export const DNS_ERROR_NOT_UNIQUE = 9555;
export const DNS_ERROR_NON_RFC_NAME = 9556;
export const DNS_ERROR_INVALID_NAME_CHAR = 9560;
export const DNS_ERROR_NUMERIC_NAME = 9561;
export const DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER = 9562;
export const DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION = 9563;
export const DNS_ERROR_CANNOT_FIND_ROOT_HINTS = 9564;
export const DNS_ERROR_INCONSISTENT_ROOT_HINTS = 9565;
export const DNS_ERROR_DWORD_VALUE_TOO_SMALL = 9566;
export const DNS_ERROR_DWORD_VALUE_TOO_LARGE = 9567;
export const DNS_ERROR_BACKGROUND_LOADING = 9568;
export const DNS_ERROR_NOT_ALLOWED_ON_RODC = 9569;
export const DNS_ERROR_NOT_ALLOWED_UNDER_DNAME = 9570;
export const DNS_ERROR_DELEGATION_REQUIRED = 9571;
export const DNS_ERROR_INVALID_POLICY_TABLE = 9572;
export const DNS_ERROR_ADDRESS_REQUIRED = 9573;
export const DNS_ERROR_ZONE_BASE = 9600;
export const DNS_ERROR_ZONE_DOES_NOT_EXIST = 9601;
export const DNS_ERROR_NO_ZONE_INFO = 9602;
export const DNS_ERROR_INVALID_ZONE_OPERATION = 9603;
export const DNS_ERROR_ZONE_CONFIGURATION_ERROR = 9604;
export const DNS_ERROR_ZONE_HAS_NO_SOA_RECORD = 9605;
export const DNS_ERROR_ZONE_HAS_NO_NS_RECORDS = 9606;
export const DNS_ERROR_ZONE_LOCKED = 9607;
export const DNS_ERROR_ZONE_CREATION_FAILED = 9608;
export const DNS_ERROR_ZONE_ALREADY_EXISTS = 9609;
export const DNS_ERROR_AUTOZONE_ALREADY_EXISTS = 9610;
export const DNS_ERROR_INVALID_ZONE_TYPE = 9611;
export const DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP = 9612;
export const DNS_ERROR_ZONE_NOT_SECONDARY = 9613;
export const DNS_ERROR_NEED_SECONDARY_ADDRESSES = 9614;
export const DNS_ERROR_WINS_INIT_FAILED = 9615;
export const DNS_ERROR_NEED_WINS_SERVERS = 9616;
export const DNS_ERROR_NBSTAT_INIT_FAILED = 9617;
export const DNS_ERROR_SOA_DELETE_INVALID = 9618;
export const DNS_ERROR_FORWARDER_ALREADY_EXISTS = 9619;
export const DNS_ERROR_ZONE_REQUIRES_MASTER_IP = 9620;
export const DNS_ERROR_ZONE_IS_SHUTDOWN = 9621;
export const DNS_ERROR_ZONE_LOCKED_FOR_SIGNING = 9622;
export const DNS_ERROR_DATAFILE_BASE = 9650;
export const DNS_ERROR_PRIMARY_REQUIRES_DATAFILE = 9651;
export const DNS_ERROR_INVALID_DATAFILE_NAME = 9652;
export const DNS_ERROR_DATAFILE_OPEN_FAILURE = 9653;
export const DNS_ERROR_FILE_WRITEBACK_FAILED = 9654;
export const DNS_ERROR_DATAFILE_PARSING = 9655;
export const DNS_ERROR_DATABASE_BASE = 9700;
export const DNS_ERROR_RECORD_DOES_NOT_EXIST = 9701;
export const DNS_ERROR_RECORD_FORMAT = 9702;
export const DNS_ERROR_NODE_CREATION_FAILED = 9703;
export const DNS_ERROR_UNKNOWN_RECORD_TYPE = 9704;
export const DNS_ERROR_RECORD_TIMED_OUT = 9705;
export const DNS_ERROR_NAME_NOT_IN_ZONE = 9706;
export const DNS_ERROR_CNAME_LOOP = 9707;
export const DNS_ERROR_NODE_IS_CNAME = 9708;
export const DNS_ERROR_CNAME_COLLISION = 9709;
export const DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT = 9710;
export const DNS_ERROR_RECORD_ALREADY_EXISTS = 9711;
export const DNS_ERROR_SECONDARY_DATA = 9712;
export const DNS_ERROR_NO_CREATE_CACHE_DATA = 9713;
export const DNS_ERROR_NAME_DOES_NOT_EXIST = 9714;
export const DNS_ERROR_DS_UNAVAILABLE = 9717;
export const DNS_ERROR_DS_ZONE_ALREADY_EXISTS = 9718;
export const DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE = 9719;
export const DNS_ERROR_NODE_IS_DNAME = 9720;
export const DNS_ERROR_DNAME_COLLISION = 9721;
export const DNS_ERROR_ALIAS_LOOP = 9722;
export const DNS_ERROR_OPERATION_BASE = 9750;
export const DNS_ERROR_AXFR = 9752;
export const DNS_ERROR_SECURE_BASE = 9800;
export const DNS_ERROR_SETUP_BASE = 9850;
export const DNS_ERROR_NO_TCPIP = 9851;
export const DNS_ERROR_NO_DNS_SERVERS = 9852;
export const DNS_ERROR_DP_BASE = 9900;
export const DNS_ERROR_DP_DOES_NOT_EXIST = 9901;
export const DNS_ERROR_DP_ALREADY_EXISTS = 9902;
export const DNS_ERROR_DP_NOT_ENLISTED = 9903;
export const DNS_ERROR_DP_ALREADY_ENLISTED = 9904;
export const DNS_ERROR_DP_NOT_AVAILABLE = 9905;
export const DNS_ERROR_DP_FSMO_ERROR = 9906;
export const DNS_ERROR_RRL_NOT_ENABLED = 9911;
export const DNS_ERROR_RRL_INVALID_WINDOW_SIZE = 9912;
export const DNS_ERROR_RRL_INVALID_IPV4_PREFIX = 9913;
export const DNS_ERROR_RRL_INVALID_IPV6_PREFIX = 9914;
export const DNS_ERROR_RRL_INVALID_TC_RATE = 9915;
export const DNS_ERROR_RRL_INVALID_LEAK_RATE = 9916;
export const DNS_ERROR_RRL_LEAK_RATE_LESSTHAN_TC_RATE = 9917;
export const DNS_ERROR_VIRTUALIZATION_INSTANCE_ALREADY_EXISTS = 9921;
export const DNS_ERROR_VIRTUALIZATION_INSTANCE_DOES_NOT_EXIST = 9922;
export const DNS_ERROR_VIRTUALIZATION_TREE_LOCKED = 9923;
export const DNS_ERROR_INVAILD_VIRTUALIZATION_INSTANCE_NAME = 9924;
export const DNS_ERROR_DEFAULT_VIRTUALIZATION_INSTANCE = 9925;
export const DNS_ERROR_ZONESCOPE_ALREADY_EXISTS = 9951;
export const DNS_ERROR_ZONESCOPE_DOES_NOT_EXIST = 9952;
export const DNS_ERROR_DEFAULT_ZONESCOPE = 9953;
export const DNS_ERROR_INVALID_ZONESCOPE_NAME = 9954;
export const DNS_ERROR_NOT_ALLOWED_WITH_ZONESCOPES = 9955;
export const DNS_ERROR_LOAD_ZONESCOPE_FAILED = 9956;
export const DNS_ERROR_ZONESCOPE_FILE_WRITEBACK_FAILED = 9957;
export const DNS_ERROR_INVALID_SCOPE_NAME = 9958;
export const DNS_ERROR_SCOPE_DOES_NOT_EXIST = 9959;
export const DNS_ERROR_DEFAULT_SCOPE = 9960;
export const DNS_ERROR_INVALID_SCOPE_OPERATION = 9961;
export const DNS_ERROR_SCOPE_LOCKED = 9962;
export const DNS_ERROR_SCOPE_ALREADY_EXISTS = 9963;
export const DNS_ERROR_POLICY_ALREADY_EXISTS = 9971;
export const DNS_ERROR_POLICY_DOES_NOT_EXIST = 9972;
export const DNS_ERROR_POLICY_INVALID_CRITERIA = 9973;
export const DNS_ERROR_POLICY_INVALID_SETTINGS = 9974;
export const DNS_ERROR_CLIENT_SUBNET_IS_ACCESSED = 9975;
export const DNS_ERROR_CLIENT_SUBNET_DOES_NOT_EXIST = 9976;
export const DNS_ERROR_CLIENT_SUBNET_ALREADY_EXISTS = 9977;
export const DNS_ERROR_SUBNET_DOES_NOT_EXIST = 9978;
export const DNS_ERROR_SUBNET_ALREADY_EXISTS = 9979;
export const DNS_ERROR_POLICY_LOCKED = 9980;
export const DNS_ERROR_POLICY_INVALID_WEIGHT = 9981;
export const DNS_ERROR_POLICY_INVALID_NAME = 9982;
export const DNS_ERROR_POLICY_MISSING_CRITERIA = 9983;
export const DNS_ERROR_INVALID_CLIENT_SUBNET_NAME = 9984;
export const DNS_ERROR_POLICY_PROCESSING_ORDER_INVALID = 9985;
export const DNS_ERROR_POLICY_SCOPE_MISSING = 9986;
export const DNS_ERROR_POLICY_SCOPE_NOT_ALLOWED = 9987;
export const DNS_ERROR_SERVERSCOPE_IS_REFERENCED = 9988;
export const DNS_ERROR_ZONESCOPE_IS_REFERENCED = 9989;
export const DNS_ERROR_POLICY_INVALID_CRITERIA_CLIENT_SUBNET = 9990;
export const DNS_ERROR_POLICY_INVALID_CRITERIA_TRANSPORT_PROTOCOL = 9991;
export const DNS_ERROR_POLICY_INVALID_CRITERIA_NETWORK_PROTOCOL = 9992;
export const DNS_ERROR_POLICY_INVALID_CRITERIA_INTERFACE = 9993;
export const DNS_ERROR_POLICY_INVALID_CRITERIA_FQDN = 9994;
export const DNS_ERROR_POLICY_INVALID_CRITERIA_QUERY_TYPE = 9995;
export const DNS_ERROR_POLICY_INVALID_CRITERIA_TIME_OF_DAY = 9996;
export const ERROR_IPSEC_QM_POLICY_EXISTS = 13000;
export const ERROR_IPSEC_QM_POLICY_NOT_FOUND = 13001;
export const ERROR_IPSEC_QM_POLICY_IN_USE = 13002;
export const ERROR_IPSEC_MM_POLICY_EXISTS = 13003;
export const ERROR_IPSEC_MM_POLICY_NOT_FOUND = 13004;
export const ERROR_IPSEC_MM_POLICY_IN_USE = 13005;
export const ERROR_IPSEC_MM_FILTER_EXISTS = 13006;
export const ERROR_IPSEC_MM_FILTER_NOT_FOUND = 13007;
export const ERROR_IPSEC_TRANSPORT_FILTER_EXISTS = 13008;
export const ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND = 13009;
export const ERROR_IPSEC_MM_AUTH_EXISTS = 13010;
export const ERROR_IPSEC_MM_AUTH_NOT_FOUND = 13011;
export const ERROR_IPSEC_MM_AUTH_IN_USE = 13012;
export const ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND = 13013;
export const ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND = 13014;
export const ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND = 13015;
export const ERROR_IPSEC_TUNNEL_FILTER_EXISTS = 13016;
export const ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND = 13017;
export const ERROR_IPSEC_MM_FILTER_PENDING_DELETION = 13018;
export const ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION = 13019;
export const ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION = 13020;
export const ERROR_IPSEC_MM_POLICY_PENDING_DELETION = 13021;
export const ERROR_IPSEC_MM_AUTH_PENDING_DELETION = 13022;
export const ERROR_IPSEC_QM_POLICY_PENDING_DELETION = 13023;
export const ERROR_IPSEC_IKE_NEG_STATUS_BEGIN = 13800;
export const ERROR_IPSEC_IKE_AUTH_FAIL = 13801;
export const ERROR_IPSEC_IKE_ATTRIB_FAIL = 13802;
export const ERROR_IPSEC_IKE_NEGOTIATION_PENDING = 13803;
export const ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR = 13804;
export const ERROR_IPSEC_IKE_TIMED_OUT = 13805;
export const ERROR_IPSEC_IKE_NO_CERT = 13806;
export const ERROR_IPSEC_IKE_SA_DELETED = 13807;
export const ERROR_IPSEC_IKE_SA_REAPED = 13808;
export const ERROR_IPSEC_IKE_MM_ACQUIRE_DROP = 13809;
export const ERROR_IPSEC_IKE_QM_ACQUIRE_DROP = 13810;
export const ERROR_IPSEC_IKE_QUEUE_DROP_MM = 13811;
export const ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM = 13812;
export const ERROR_IPSEC_IKE_DROP_NO_RESPONSE = 13813;
export const ERROR_IPSEC_IKE_MM_DELAY_DROP = 13814;
export const ERROR_IPSEC_IKE_QM_DELAY_DROP = 13815;
export const ERROR_IPSEC_IKE_ERROR = 13816;
export const ERROR_IPSEC_IKE_CRL_FAILED = 13817;
export const ERROR_IPSEC_IKE_INVALID_KEY_USAGE = 13818;
export const ERROR_IPSEC_IKE_INVALID_CERT_TYPE = 13819;
export const ERROR_IPSEC_IKE_NO_PRIVATE_KEY = 13820;
export const ERROR_IPSEC_IKE_SIMULTANEOUS_REKEY = 13821;
export const ERROR_IPSEC_IKE_DH_FAIL = 13822;
export const ERROR_IPSEC_IKE_CRITICAL_PAYLOAD_NOT_RECOGNIZED = 13823;
export const ERROR_IPSEC_IKE_INVALID_HEADER = 13824;
export const ERROR_IPSEC_IKE_NO_POLICY = 13825;
export const ERROR_IPSEC_IKE_INVALID_SIGNATURE = 13826;
export const ERROR_IPSEC_IKE_KERBEROS_ERROR = 13827;
export const ERROR_IPSEC_IKE_NO_PUBLIC_KEY = 13828;
export const ERROR_IPSEC_IKE_PROCESS_ERR = 13829;
export const ERROR_IPSEC_IKE_PROCESS_ERR_SA = 13830;
export const ERROR_IPSEC_IKE_PROCESS_ERR_PROP = 13831;
export const ERROR_IPSEC_IKE_PROCESS_ERR_TRANS = 13832;
export const ERROR_IPSEC_IKE_PROCESS_ERR_KE = 13833;
export const ERROR_IPSEC_IKE_PROCESS_ERR_ID = 13834;
export const ERROR_IPSEC_IKE_PROCESS_ERR_CERT = 13835;
export const ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ = 13836;
export const ERROR_IPSEC_IKE_PROCESS_ERR_HASH = 13837;
export const ERROR_IPSEC_IKE_PROCESS_ERR_SIG = 13838;
export const ERROR_IPSEC_IKE_PROCESS_ERR_NONCE = 13839;
export const ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY = 13840;
export const ERROR_IPSEC_IKE_PROCESS_ERR_DELETE = 13841;
export const ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR = 13842;
export const ERROR_IPSEC_IKE_INVALID_PAYLOAD = 13843;
export const ERROR_IPSEC_IKE_LOAD_SOFT_SA = 13844;
export const ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN = 13845;
export const ERROR_IPSEC_IKE_INVALID_COOKIE = 13846;
export const ERROR_IPSEC_IKE_NO_PEER_CERT = 13847;
export const ERROR_IPSEC_IKE_PEER_CRL_FAILED = 13848;
export const ERROR_IPSEC_IKE_POLICY_CHANGE = 13849;
export const ERROR_IPSEC_IKE_NO_MM_POLICY = 13850;
export const ERROR_IPSEC_IKE_NOTCBPRIV = 13851;
export const ERROR_IPSEC_IKE_SECLOADFAIL = 13852;
export const ERROR_IPSEC_IKE_FAILSSPINIT = 13853;
export const ERROR_IPSEC_IKE_FAILQUERYSSP = 13854;
export const ERROR_IPSEC_IKE_SRVACQFAIL = 13855;
export const ERROR_IPSEC_IKE_SRVQUERYCRED = 13856;
export const ERROR_IPSEC_IKE_GETSPIFAIL = 13857;
export const ERROR_IPSEC_IKE_INVALID_FILTER = 13858;
export const ERROR_IPSEC_IKE_OUT_OF_MEMORY = 13859;
export const ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED = 13860;
export const ERROR_IPSEC_IKE_INVALID_POLICY = 13861;
export const ERROR_IPSEC_IKE_UNKNOWN_DOI = 13862;
export const ERROR_IPSEC_IKE_INVALID_SITUATION = 13863;
export const ERROR_IPSEC_IKE_DH_FAILURE = 13864;
export const ERROR_IPSEC_IKE_INVALID_GROUP = 13865;
export const ERROR_IPSEC_IKE_ENCRYPT = 13866;
export const ERROR_IPSEC_IKE_DECRYPT = 13867;
export const ERROR_IPSEC_IKE_POLICY_MATCH = 13868;
export const ERROR_IPSEC_IKE_UNSUPPORTED_ID = 13869;
export const ERROR_IPSEC_IKE_INVALID_HASH = 13870;
export const ERROR_IPSEC_IKE_INVALID_HASH_ALG = 13871;
export const ERROR_IPSEC_IKE_INVALID_HASH_SIZE = 13872;
export const ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG = 13873;
export const ERROR_IPSEC_IKE_INVALID_AUTH_ALG = 13874;
export const ERROR_IPSEC_IKE_INVALID_SIG = 13875;
export const ERROR_IPSEC_IKE_LOAD_FAILED = 13876;
export const ERROR_IPSEC_IKE_RPC_DELETE = 13877;
export const ERROR_IPSEC_IKE_BENIGN_REINIT = 13878;
export const ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY = 13879;
export const ERROR_IPSEC_IKE_INVALID_MAJOR_VERSION = 13880;
export const ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN = 13881;
export const ERROR_IPSEC_IKE_MM_LIMIT = 13882;
export const ERROR_IPSEC_IKE_NEGOTIATION_DISABLED = 13883;
export const ERROR_IPSEC_IKE_QM_LIMIT = 13884;
export const ERROR_IPSEC_IKE_MM_EXPIRED = 13885;
export const ERROR_IPSEC_IKE_PEER_MM_ASSUMED_INVALID = 13886;
export const ERROR_IPSEC_IKE_CERT_CHAIN_POLICY_MISMATCH = 13887;
export const ERROR_IPSEC_IKE_UNEXPECTED_MESSAGE_ID = 13888;
export const ERROR_IPSEC_IKE_INVALID_AUTH_PAYLOAD = 13889;
export const ERROR_IPSEC_IKE_DOS_COOKIE_SENT = 13890;
export const ERROR_IPSEC_IKE_SHUTTING_DOWN = 13891;
export const ERROR_IPSEC_IKE_CGA_AUTH_FAILED = 13892;
export const ERROR_IPSEC_IKE_PROCESS_ERR_NATOA = 13893;
export const ERROR_IPSEC_IKE_INVALID_MM_FOR_QM = 13894;
export const ERROR_IPSEC_IKE_QM_EXPIRED = 13895;
export const ERROR_IPSEC_IKE_TOO_MANY_FILTERS = 13896;
export const ERROR_IPSEC_IKE_NEG_STATUS_END = 13897;
export const ERROR_IPSEC_IKE_KILL_DUMMY_NAP_TUNNEL = 13898;
export const ERROR_IPSEC_IKE_INNER_IP_ASSIGNMENT_FAILURE = 13899;
export const ERROR_IPSEC_IKE_REQUIRE_CP_PAYLOAD_MISSING = 13900;
export const ERROR_IPSEC_KEY_MODULE_IMPERSONATION_NEGOTIATION_PENDING = 13901;
export const ERROR_IPSEC_IKE_COEXISTENCE_SUPPRESS = 13902;
export const ERROR_IPSEC_IKE_RATELIMIT_DROP = 13903;
export const ERROR_IPSEC_IKE_PEER_DOESNT_SUPPORT_MOBIKE = 13904;
export const ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE = 13905;
export const ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_FAILURE = 13906;
export const ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE_WITH_OPTIONAL_RETRY = 13907;
export const ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_AND_CERTMAP_FAILURE = 13908;
export const ERROR_IPSEC_IKE_NEG_STATUS_EXTENDED_END = 13909;
export const ERROR_IPSEC_BAD_SPI = 13910;
export const ERROR_IPSEC_SA_LIFETIME_EXPIRED = 13911;
export const ERROR_IPSEC_WRONG_SA = 13912;
export const ERROR_IPSEC_REPLAY_CHECK_FAILED = 13913;
export const ERROR_IPSEC_INVALID_PACKET = 13914;
export const ERROR_IPSEC_INTEGRITY_CHECK_FAILED = 13915;
export const ERROR_IPSEC_CLEAR_TEXT_DROP = 13916;
export const ERROR_IPSEC_AUTH_FIREWALL_DROP = 13917;
export const ERROR_IPSEC_THROTTLE_DROP = 13918;
export const ERROR_IPSEC_DOSP_BLOCK = 13925;
export const ERROR_IPSEC_DOSP_RECEIVED_MULTICAST = 13926;
export const ERROR_IPSEC_DOSP_INVALID_PACKET = 13927;
export const ERROR_IPSEC_DOSP_STATE_LOOKUP_FAILED = 13928;
export const ERROR_IPSEC_DOSP_MAX_ENTRIES = 13929;
export const ERROR_IPSEC_DOSP_KEYMOD_NOT_ALLOWED = 13930;
export const ERROR_IPSEC_DOSP_NOT_INSTALLED = 13931;
export const ERROR_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES = 13932;
export const ERROR_SXS_SECTION_NOT_FOUND = 14000;
export const ERROR_SXS_CANT_GEN_ACTCTX = 14001;
export const ERROR_SXS_INVALID_ACTCTXDATA_FORMAT = 14002;
export const ERROR_SXS_ASSEMBLY_NOT_FOUND = 14003;
export const ERROR_SXS_MANIFEST_FORMAT_ERROR = 14004;
export const ERROR_SXS_MANIFEST_PARSE_ERROR = 14005;
export const ERROR_SXS_ACTIVATION_CONTEXT_DISABLED = 14006;
export const ERROR_SXS_KEY_NOT_FOUND = 14007;
export const ERROR_SXS_VERSION_CONFLICT = 14008;
export const ERROR_SXS_WRONG_SECTION_TYPE = 14009;
export const ERROR_SXS_THREAD_QUERIES_DISABLED = 14010;
export const ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET = 14011;
export const ERROR_SXS_UNKNOWN_ENCODING_GROUP = 14012;
export const ERROR_SXS_UNKNOWN_ENCODING = 14013;
export const ERROR_SXS_INVALID_XML_NAMESPACE_URI = 14014;
export const ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED = 14015;
export const ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED = 14016;
export const ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE = 14017;
export const ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE = 14018;
export const ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE = 14019;
export const ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT = 14020;
export const ERROR_SXS_DUPLICATE_DLL_NAME = 14021;
export const ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME = 14022;
export const ERROR_SXS_DUPLICATE_CLSID = 14023;
export const ERROR_SXS_DUPLICATE_IID = 14024;
export const ERROR_SXS_DUPLICATE_TLBID = 14025;
export const ERROR_SXS_DUPLICATE_PROGID = 14026;
export const ERROR_SXS_DUPLICATE_ASSEMBLY_NAME = 14027;
export const ERROR_SXS_FILE_HASH_MISMATCH = 14028;
export const ERROR_SXS_POLICY_PARSE_ERROR = 14029;
export const ERROR_SXS_XML_E_MISSINGQUOTE = 14030;
export const ERROR_SXS_XML_E_COMMENTSYNTAX = 14031;
export const ERROR_SXS_XML_E_BADSTARTNAMECHAR = 14032;
export const ERROR_SXS_XML_E_BADNAMECHAR = 14033;
export const ERROR_SXS_XML_E_BADCHARINSTRING = 14034;
export const ERROR_SXS_XML_E_XMLDECLSYNTAX = 14035;
export const ERROR_SXS_XML_E_BADCHARDATA = 14036;
export const ERROR_SXS_XML_E_MISSINGWHITESPACE = 14037;
export const ERROR_SXS_XML_E_EXPECTINGTAGEND = 14038;
export const ERROR_SXS_XML_E_MISSINGSEMICOLON = 14039;
export const ERROR_SXS_XML_E_UNBALANCEDPAREN = 14040;
export const ERROR_SXS_XML_E_INTERNALERROR = 14041;
export const ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE = 14042;
export const ERROR_SXS_XML_E_INCOMPLETE_ENCODING = 14043;
export const ERROR_SXS_XML_E_MISSING_PAREN = 14044;
export const ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE = 14045;
export const ERROR_SXS_XML_E_MULTIPLE_COLONS = 14046;
export const ERROR_SXS_XML_E_INVALID_DECIMAL = 14047;
export const ERROR_SXS_XML_E_INVALID_HEXIDECIMAL = 14048;
export const ERROR_SXS_XML_E_INVALID_UNICODE = 14049;
export const ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK = 14050;
export const ERROR_SXS_XML_E_UNEXPECTEDENDTAG = 14051;
export const ERROR_SXS_XML_E_UNCLOSEDTAG = 14052;
export const ERROR_SXS_XML_E_DUPLICATEATTRIBUTE = 14053;
export const ERROR_SXS_XML_E_MULTIPLEROOTS = 14054;
export const ERROR_SXS_XML_E_INVALIDATROOTLEVEL = 14055;
export const ERROR_SXS_XML_E_BADXMLDECL = 14056;
export const ERROR_SXS_XML_E_MISSINGROOT = 14057;
export const ERROR_SXS_XML_E_UNEXPECTEDEOF = 14058;
export const ERROR_SXS_XML_E_BADPEREFINSUBSET = 14059;
export const ERROR_SXS_XML_E_UNCLOSEDSTARTTAG = 14060;
export const ERROR_SXS_XML_E_UNCLOSEDENDTAG = 14061;
export const ERROR_SXS_XML_E_UNCLOSEDSTRING = 14062;
export const ERROR_SXS_XML_E_UNCLOSEDCOMMENT = 14063;
export const ERROR_SXS_XML_E_UNCLOSEDDECL = 14064;
export const ERROR_SXS_XML_E_UNCLOSEDCDATA = 14065;
export const ERROR_SXS_XML_E_RESERVEDNAMESPACE = 14066;
export const ERROR_SXS_XML_E_INVALIDENCODING = 14067;
export const ERROR_SXS_XML_E_INVALIDSWITCH = 14068;
export const ERROR_SXS_XML_E_BADXMLCASE = 14069;
export const ERROR_SXS_XML_E_INVALID_STANDALONE = 14070;
export const ERROR_SXS_XML_E_UNEXPECTED_STANDALONE = 14071;
export const ERROR_SXS_XML_E_INVALID_VERSION = 14072;
export const ERROR_SXS_XML_E_MISSINGEQUALS = 14073;
export const ERROR_SXS_PROTECTION_RECOVERY_FAILED = 14074;
export const ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT = 14075;
export const ERROR_SXS_PROTECTION_CATALOG_NOT_VALID = 14076;
export const ERROR_SXS_UNTRANSLATABLE_HRESULT = 14077;
export const ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING = 14078;
export const ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE = 14079;
export const ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME = 14080;
export const ERROR_SXS_ASSEMBLY_MISSING = 14081;
export const ERROR_SXS_CORRUPT_ACTIVATION_STACK = 14082;
export const ERROR_SXS_CORRUPTION = 14083;
export const ERROR_SXS_EARLY_DEACTIVATION = 14084;
export const ERROR_SXS_INVALID_DEACTIVATION = 14085;
export const ERROR_SXS_MULTIPLE_DEACTIVATION = 14086;
export const ERROR_SXS_PROCESS_TERMINATION_REQUESTED = 14087;
export const ERROR_SXS_RELEASE_ACTIVATION_CONTEXT = 14088;
export const ERROR_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY = 14089;
export const ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE = 14090;
export const ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME = 14091;
export const ERROR_SXS_IDENTITY_DUPLICATE_ATTRIBUTE = 14092;
export const ERROR_SXS_IDENTITY_PARSE_ERROR = 14093;
export const ERROR_MALFORMED_SUBSTITUTION_STRING = 14094;
export const ERROR_SXS_INCORRECT_PUBLIC_KEY_TOKEN = 14095;
export const ERROR_UNMAPPED_SUBSTITUTION_STRING = 14096;
export const ERROR_SXS_ASSEMBLY_NOT_LOCKED = 14097;
export const ERROR_SXS_COMPONENT_STORE_CORRUPT = 14098;
export const ERROR_ADVANCED_INSTALLER_FAILED = 14099;
export const ERROR_XML_ENCODING_MISMATCH = 14100;
export const ERROR_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT = 14101;
export const ERROR_SXS_IDENTITIES_DIFFERENT = 14102;
export const ERROR_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT = 14103;
export const ERROR_SXS_FILE_NOT_PART_OF_ASSEMBLY = 14104;
export const ERROR_SXS_MANIFEST_TOO_BIG = 14105;
export const ERROR_SXS_SETTING_NOT_REGISTERED = 14106;
export const ERROR_SXS_TRANSACTION_CLOSURE_INCOMPLETE = 14107;
export const ERROR_SMI_PRIMITIVE_INSTALLER_FAILED = 14108;
export const ERROR_GENERIC_COMMAND_FAILED = 14109;
export const ERROR_SXS_FILE_HASH_MISSING = 14110;
export const ERROR_SXS_DUPLICATE_ACTIVATABLE_CLASS = 14111;
export const ERROR_EVT_INVALID_CHANNEL_PATH = 15000;
export const ERROR_EVT_INVALID_QUERY = 15001;
export const ERROR_EVT_PUBLISHER_METADATA_NOT_FOUND = 15002;
export const ERROR_EVT_EVENT_TEMPLATE_NOT_FOUND = 15003;
export const ERROR_EVT_INVALID_PUBLISHER_NAME = 15004;
export const ERROR_EVT_INVALID_EVENT_DATA = 15005;
export const ERROR_EVT_CHANNEL_NOT_FOUND = 15007;
export const ERROR_EVT_MALFORMED_XML_TEXT = 15008;
export const ERROR_EVT_SUBSCRIPTION_TO_DIRECT_CHANNEL = 15009;
export const ERROR_EVT_CONFIGURATION_ERROR = 15010;
export const ERROR_EVT_QUERY_RESULT_STALE = 15011;
export const ERROR_EVT_QUERY_RESULT_INVALID_POSITION = 15012;
export const ERROR_EVT_NON_VALIDATING_MSXML = 15013;
export const ERROR_EVT_FILTER_ALREADYSCOPED = 15014;
export const ERROR_EVT_FILTER_NOTELTSET = 15015;
export const ERROR_EVT_FILTER_INVARG = 15016;
export const ERROR_EVT_FILTER_INVTEST = 15017;
export const ERROR_EVT_FILTER_INVTYPE = 15018;
export const ERROR_EVT_FILTER_PARSEERR = 15019;
export const ERROR_EVT_FILTER_UNSUPPORTEDOP = 15020;
export const ERROR_EVT_FILTER_UNEXPECTEDTOKEN = 15021;
export const ERROR_EVT_INVALID_OPERATION_OVER_ENABLED_DIRECT_CHANNEL = 15022;
export const ERROR_EVT_INVALID_CHANNEL_PROPERTY_VALUE = 15023;
export const ERROR_EVT_INVALID_PUBLISHER_PROPERTY_VALUE = 15024;
export const ERROR_EVT_CHANNEL_CANNOT_ACTIVATE = 15025;
export const ERROR_EVT_FILTER_TOO_COMPLEX = 15026;
export const ERROR_EVT_MESSAGE_NOT_FOUND = 15027;
export const ERROR_EVT_MESSAGE_ID_NOT_FOUND = 15028;
export const ERROR_EVT_UNRESOLVED_VALUE_INSERT = 15029;
export const ERROR_EVT_UNRESOLVED_PARAMETER_INSERT = 15030;
export const ERROR_EVT_MAX_INSERTS_REACHED = 15031;
export const ERROR_EVT_EVENT_DEFINITION_NOT_FOUND = 15032;
export const ERROR_EVT_MESSAGE_LOCALE_NOT_FOUND = 15033;
export const ERROR_EVT_VERSION_TOO_OLD = 15034;
export const ERROR_EVT_VERSION_TOO_NEW = 15035;
export const ERROR_EVT_CANNOT_OPEN_CHANNEL_OF_QUERY = 15036;
export const ERROR_EVT_PUBLISHER_DISABLED = 15037;
export const ERROR_EVT_FILTER_OUT_OF_RANGE = 15038;
export const ERROR_EC_SUBSCRIPTION_CANNOT_ACTIVATE = 15080;
export const ERROR_EC_LOG_DISABLED = 15081;
export const ERROR_EC_CIRCULAR_FORWARDING = 15082;
export const ERROR_EC_CREDSTORE_FULL = 15083;
export const ERROR_EC_CRED_NOT_FOUND = 15084;
export const ERROR_EC_NO_ACTIVE_CHANNEL = 15085;
export const ERROR_MUI_FILE_NOT_FOUND = 15100;
export const ERROR_MUI_INVALID_FILE = 15101;
export const ERROR_MUI_INVALID_RC_CONFIG = 15102;
export const ERROR_MUI_INVALID_LOCALE_NAME = 15103;
export const ERROR_MUI_INVALID_ULTIMATEFALLBACK_NAME = 15104;
export const ERROR_MUI_FILE_NOT_LOADED = 15105;
export const ERROR_RESOURCE_ENUM_USER_STOP = 15106;
export const ERROR_MUI_INTLSETTINGS_UILANG_NOT_INSTALLED = 15107;
export const ERROR_MUI_INTLSETTINGS_INVALID_LOCALE_NAME = 15108;
export const ERROR_MRM_RUNTIME_NO_DEFAULT_OR_NEUTRAL_RESOURCE = 15110;
export const ERROR_MRM_INVALID_PRICONFIG = 15111;
export const ERROR_MRM_INVALID_FILE_TYPE = 15112;
export const ERROR_MRM_UNKNOWN_QUALIFIER = 15113;
export const ERROR_MRM_INVALID_QUALIFIER_VALUE = 15114;
export const ERROR_MRM_NO_CANDIDATE = 15115;
export const ERROR_MRM_NO_MATCH_OR_DEFAULT_CANDIDATE = 15116;
export const ERROR_MRM_RESOURCE_TYPE_MISMATCH = 15117;
export const ERROR_MRM_DUPLICATE_MAP_NAME = 15118;
export const ERROR_MRM_DUPLICATE_ENTRY = 15119;
export const ERROR_MRM_INVALID_RESOURCE_IDENTIFIER = 15120;
export const ERROR_MRM_FILEPATH_TOO_LONG = 15121;
export const ERROR_MRM_UNSUPPORTED_DIRECTORY_TYPE = 15122;
export const ERROR_MRM_INVALID_PRI_FILE = 15126;
export const ERROR_MRM_NAMED_RESOURCE_NOT_FOUND = 15127;
export const ERROR_MRM_MAP_NOT_FOUND = 15135;
export const ERROR_MRM_UNSUPPORTED_PROFILE_TYPE = 15136;
export const ERROR_MRM_INVALID_QUALIFIER_OPERATOR = 15137;
export const ERROR_MRM_INDETERMINATE_QUALIFIER_VALUE = 15138;
export const ERROR_MRM_AUTOMERGE_ENABLED = 15139;
export const ERROR_MRM_TOO_MANY_RESOURCES = 15140;
export const ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_MERGE = 15141;
export const ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_LOAD_UNLOAD_PRI_FILE = 15142;
export const ERROR_MRM_NO_CURRENT_VIEW_ON_THREAD = 15143;
export const ERROR_DIFFERENT_PROFILE_RESOURCE_MANAGER_EXIST = 15144;
export const ERROR_OPERATION_NOT_ALLOWED_FROM_SYSTEM_COMPONENT = 15145;
export const ERROR_MRM_DIRECT_REF_TO_NON_DEFAULT_RESOURCE = 15146;
export const ERROR_MRM_GENERATION_COUNT_MISMATCH = 15147;
export const ERROR_PRI_MERGE_VERSION_MISMATCH = 15148;
export const ERROR_PRI_MERGE_MISSING_SCHEMA = 15149;
export const ERROR_PRI_MERGE_LOAD_FILE_FAILED = 15150;
export const ERROR_PRI_MERGE_ADD_FILE_FAILED = 15151;
export const ERROR_PRI_MERGE_WRITE_FILE_FAILED = 15152;
export const ERROR_PRI_MERGE_MULTIPLE_PACKAGE_FAMILIES_NOT_ALLOWED = 15153;
export const ERROR_PRI_MERGE_MULTIPLE_MAIN_PACKAGES_NOT_ALLOWED = 15154;
export const ERROR_PRI_MERGE_BUNDLE_PACKAGES_NOT_ALLOWED = 15155;
export const ERROR_PRI_MERGE_MAIN_PACKAGE_REQUIRED = 15156;
export const ERROR_PRI_MERGE_RESOURCE_PACKAGE_REQUIRED = 15157;
export const ERROR_PRI_MERGE_INVALID_FILE_NAME = 15158;
export const ERROR_MRM_PACKAGE_NOT_FOUND = 15159;
export const ERROR_MRM_MISSING_DEFAULT_LANGUAGE = 15160;
export const ERROR_MCA_INVALID_CAPABILITIES_STRING = 15200;
export const ERROR_MCA_INVALID_VCP_VERSION = 15201;
export const ERROR_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION = 15202;
export const ERROR_MCA_MCCS_VERSION_MISMATCH = 15203;
export const ERROR_MCA_UNSUPPORTED_MCCS_VERSION = 15204;
export const ERROR_MCA_INTERNAL_ERROR = 15205;
export const ERROR_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED = 15206;
export const ERROR_MCA_UNSUPPORTED_COLOR_TEMPERATURE = 15207;
export const ERROR_AMBIGUOUS_SYSTEM_DEVICE = 15250;
export const ERROR_SYSTEM_DEVICE_NOT_FOUND = 15299;
export const ERROR_HASH_NOT_SUPPORTED = 15300;
export const ERROR_HASH_NOT_PRESENT = 15301;
export const ERROR_SECONDARY_IC_PROVIDER_NOT_REGISTERED = 15321;
export const ERROR_GPIO_CLIENT_INFORMATION_INVALID = 15322;
export const ERROR_GPIO_VERSION_NOT_SUPPORTED = 15323;
export const ERROR_GPIO_INVALID_REGISTRATION_PACKET = 15324;
export const ERROR_GPIO_OPERATION_DENIED = 15325;
export const ERROR_GPIO_INCOMPATIBLE_CONNECT_MODE = 15326;
export const ERROR_GPIO_INTERRUPT_ALREADY_UNMASKED = 15327;
export const ERROR_CANNOT_SWITCH_RUNLEVEL = 15400;
export const ERROR_INVALID_RUNLEVEL_SETTING = 15401;
export const ERROR_RUNLEVEL_SWITCH_TIMEOUT = 15402;
export const ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT = 15403;
export const ERROR_RUNLEVEL_SWITCH_IN_PROGRESS = 15404;
export const ERROR_SERVICES_FAILED_AUTOSTART = 15405;
export const ERROR_COM_TASK_STOP_PENDING = 15501;
export const ERROR_INSTALL_OPEN_PACKAGE_FAILED = 15600;
export const ERROR_INSTALL_PACKAGE_NOT_FOUND = 15601;
export const ERROR_INSTALL_INVALID_PACKAGE = 15602;
export const ERROR_INSTALL_RESOLVE_DEPENDENCY_FAILED = 15603;
export const ERROR_INSTALL_OUT_OF_DISK_SPACE = 15604;
export const ERROR_INSTALL_NETWORK_FAILURE = 15605;
export const ERROR_INSTALL_REGISTRATION_FAILURE = 15606;
export const ERROR_INSTALL_DEREGISTRATION_FAILURE = 15607;
export const ERROR_INSTALL_CANCEL = 15608;
export const ERROR_INSTALL_FAILED = 15609;
export const ERROR_REMOVE_FAILED = 15610;
export const ERROR_PACKAGE_ALREADY_EXISTS = 15611;
export const ERROR_NEEDS_REMEDIATION = 15612;
export const ERROR_INSTALL_PREREQUISITE_FAILED = 15613;
export const ERROR_PACKAGE_REPOSITORY_CORRUPTED = 15614;
export const ERROR_INSTALL_POLICY_FAILURE = 15615;
export const ERROR_PACKAGE_UPDATING = 15616;
export const ERROR_DEPLOYMENT_BLOCKED_BY_POLICY = 15617;
export const ERROR_PACKAGES_IN_USE = 15618;
export const ERROR_RECOVERY_FILE_CORRUPT = 15619;
export const ERROR_INVALID_STAGED_SIGNATURE = 15620;
export const ERROR_DELETING_EXISTING_APPLICATIONDATA_STORE_FAILED = 15621;
export const ERROR_INSTALL_PACKAGE_DOWNGRADE = 15622;
export const ERROR_SYSTEM_NEEDS_REMEDIATION = 15623;
export const ERROR_APPX_INTEGRITY_FAILURE_CLR_NGEN = 15624;
export const ERROR_RESILIENCY_FILE_CORRUPT = 15625;
export const ERROR_INSTALL_FIREWALL_SERVICE_NOT_RUNNING = 15626;
export const ERROR_PACKAGE_MOVE_FAILED = 15627;
export const ERROR_INSTALL_VOLUME_NOT_EMPTY = 15628;
export const ERROR_INSTALL_VOLUME_OFFLINE = 15629;
export const ERROR_INSTALL_VOLUME_CORRUPT = 15630;
export const ERROR_NEEDS_REGISTRATION = 15631;
export const ERROR_INSTALL_WRONG_PROCESSOR_ARCHITECTURE = 15632;
export const ERROR_DEV_SIDELOAD_LIMIT_EXCEEDED = 15633;
export const ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE = 15634;
export const ERROR_PACKAGE_NOT_SUPPORTED_ON_FILESYSTEM = 15635;
export const ERROR_PACKAGE_MOVE_BLOCKED_BY_STREAMING = 15636;
export const ERROR_INSTALL_OPTIONAL_PACKAGE_APPLICATIONID_NOT_UNIQUE = 15637;
export const ERROR_PACKAGE_STAGING_ONHOLD = 15638;
export const ERROR_INSTALL_INVALID_RELATED_SET_UPDATE = 15639;
export const ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY = 15640;
export const ERROR_DEPLOYMENT_BLOCKED_BY_USER_LOG_OFF = 15641;
export const ERROR_PROVISION_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_PROVISIONED = 15642;
export const ERROR_PACKAGES_REPUTATION_CHECK_FAILED = 15643;
export const ERROR_PACKAGES_REPUTATION_CHECK_TIMEDOUT = 15644;
export const ERROR_DEPLOYMENT_OPTION_NOT_SUPPORTED = 15645;
export const ERROR_APPINSTALLER_ACTIVATION_BLOCKED = 15646;
export const ERROR_REGISTRATION_FROM_REMOTE_DRIVE_NOT_SUPPORTED = 15647;
export const ERROR_APPX_RAW_DATA_WRITE_FAILED = 15648;
export const ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_PACKAGE = 15649;
export const ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_MACHINE = 15650;
export const ERROR_DEPLOYMENT_BLOCKED_BY_PROFILE_POLICY = 15651;
export const ERROR_DEPLOYMENT_FAILED_CONFLICTING_MUTABLE_PACKAGE_DIRECTORY = 15652;
export const ERROR_SINGLETON_RESOURCE_INSTALLED_IN_ACTIVE_USER = 15653;
export const ERROR_DIFFERENT_VERSION_OF_PACKAGED_SERVICE_INSTALLED = 15654;
export const ERROR_SERVICE_EXISTS_AS_NON_PACKAGED_SERVICE = 15655;
export const ERROR_PACKAGED_SERVICE_REQUIRES_ADMIN_PRIVILEGES = 15656;
export const ERROR_REDIRECTION_TO_DEFAULT_ACCOUNT_NOT_ALLOWED = 15657;
export const ERROR_PACKAGE_LACKS_CAPABILITY_TO_DEPLOY_ON_HOST = 15658;
export const ERROR_UNSIGNED_PACKAGE_INVALID_CONTENT = 15659;
export const ERROR_UNSIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE = 15660;
export const ERROR_SIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE = 15661;
export const ERROR_PACKAGE_EXTERNAL_LOCATION_NOT_ALLOWED = 15662;
export const ERROR_INSTALL_FULLTRUST_HOSTRUNTIME_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY = 15663;
export const ERROR_PACKAGE_LACKS_CAPABILITY_FOR_MANDATORY_STARTUPTASKS = 15664;
export const ERROR_INSTALL_RESOLVE_HOSTRUNTIME_DEPENDENCY_FAILED = 15665;
export const ERROR_MACHINE_SCOPE_NOT_ALLOWED = 15666;
export const ERROR_CLASSIC_COMPAT_MODE_NOT_ALLOWED = 15667;
export const ERROR_STAGEFROMUPDATEAGENT_PACKAGE_NOT_APPLICABLE = 15668;
export const ERROR_PACKAGE_NOT_REGISTERED_FOR_USER = 15669;
export const ERROR_STATE_LOAD_STORE_FAILED = 15800;
export const ERROR_STATE_GET_VERSION_FAILED = 15801;
export const ERROR_STATE_SET_VERSION_FAILED = 15802;
export const ERROR_STATE_STRUCTURED_RESET_FAILED = 15803;
export const ERROR_STATE_OPEN_CONTAINER_FAILED = 15804;
export const ERROR_STATE_CREATE_CONTAINER_FAILED = 15805;
export const ERROR_STATE_DELETE_CONTAINER_FAILED = 15806;
export const ERROR_STATE_READ_SETTING_FAILED = 15807;
export const ERROR_STATE_WRITE_SETTING_FAILED = 15808;
export const ERROR_STATE_DELETE_SETTING_FAILED = 15809;
export const ERROR_STATE_QUERY_SETTING_FAILED = 15810;
export const ERROR_STATE_READ_COMPOSITE_SETTING_FAILED = 15811;
export const ERROR_STATE_WRITE_COMPOSITE_SETTING_FAILED = 15812;
export const ERROR_STATE_ENUMERATE_CONTAINER_FAILED = 15813;
export const ERROR_STATE_ENUMERATE_SETTINGS_FAILED = 15814;
export const ERROR_STATE_COMPOSITE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED = 15815;
export const ERROR_STATE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED = 15816;
export const ERROR_STATE_SETTING_NAME_SIZE_LIMIT_EXCEEDED = 15817;
export const ERROR_STATE_CONTAINER_NAME_SIZE_LIMIT_EXCEEDED = 15818;
export const ERROR_API_UNAVAILABLE = 15841;
export const ERROR_NDIS_INTERFACE_CLOSING = 2150891522;
export const ERROR_NDIS_BAD_VERSION = 2150891524;
export const ERROR_NDIS_BAD_CHARACTERISTICS = 2150891525;
export const ERROR_NDIS_ADAPTER_NOT_FOUND = 2150891526;
export const ERROR_NDIS_OPEN_FAILED = 2150891527;
export const ERROR_NDIS_DEVICE_FAILED = 2150891528;
export const ERROR_NDIS_MULTICAST_FULL = 2150891529;
export const ERROR_NDIS_MULTICAST_EXISTS = 2150891530;
export const ERROR_NDIS_MULTICAST_NOT_FOUND = 2150891531;
export const ERROR_NDIS_REQUEST_ABORTED = 2150891532;
export const ERROR_NDIS_RESET_IN_PROGRESS = 2150891533;
export const ERROR_NDIS_NOT_SUPPORTED = 2150891707;
export const ERROR_NDIS_INVALID_PACKET = 2150891535;
export const ERROR_NDIS_ADAPTER_NOT_READY = 2150891537;
export const ERROR_NDIS_INVALID_LENGTH = 2150891540;
export const ERROR_NDIS_INVALID_DATA = 2150891541;
export const ERROR_NDIS_BUFFER_TOO_SHORT = 2150891542;
export const ERROR_NDIS_INVALID_OID = 2150891543;
export const ERROR_NDIS_ADAPTER_REMOVED = 2150891544;
export const ERROR_NDIS_UNSUPPORTED_MEDIA = 2150891545;
export const ERROR_NDIS_GROUP_ADDRESS_IN_USE = 2150891546;
export const ERROR_NDIS_FILE_NOT_FOUND = 2150891547;
export const ERROR_NDIS_ERROR_READING_FILE = 2150891548;
export const ERROR_NDIS_ALREADY_MAPPED = 2150891549;
export const ERROR_NDIS_RESOURCE_CONFLICT = 2150891550;
export const ERROR_NDIS_MEDIA_DISCONNECTED = 2150891551;
export const ERROR_NDIS_INVALID_ADDRESS = 2150891554;
export const ERROR_NDIS_INVALID_DEVICE_REQUEST = 2150891536;
export const ERROR_NDIS_PAUSED = 2150891562;
export const ERROR_NDIS_INTERFACE_NOT_FOUND = 2150891563;
export const ERROR_NDIS_UNSUPPORTED_REVISION = 2150891564;
export const ERROR_NDIS_INVALID_PORT = 2150891565;
export const ERROR_NDIS_INVALID_PORT_STATE = 2150891566;
export const ERROR_NDIS_LOW_POWER_STATE = 2150891567;
export const ERROR_NDIS_REINIT_REQUIRED = 2150891568;
export const ERROR_NDIS_NO_QUEUES = 2150891569;
export const ERROR_NDIS_DOT11_AUTO_CONFIG_ENABLED = 2150899712;
export const ERROR_NDIS_DOT11_MEDIA_IN_USE = 2150899713;
export const ERROR_NDIS_DOT11_POWER_STATE_INVALID = 2150899714;
export const ERROR_NDIS_PM_WOL_PATTERN_LIST_FULL = 2150899715;
export const ERROR_NDIS_PM_PROTOCOL_OFFLOAD_LIST_FULL = 2150899716;
export const ERROR_NDIS_DOT11_AP_CHANNEL_CURRENTLY_NOT_AVAILABLE = 2150899717;
export const ERROR_NDIS_DOT11_AP_BAND_CURRENTLY_NOT_AVAILABLE = 2150899718;
export const ERROR_NDIS_DOT11_AP_CHANNEL_NOT_ALLOWED = 2150899719;
export const ERROR_NDIS_DOT11_AP_BAND_NOT_ALLOWED = 2150899720;
export const ERROR_NDIS_INDICATION_REQUIRED = 3407873;
export const ERROR_NDIS_OFFLOAD_POLICY = 3224637455;
export const ERROR_NDIS_OFFLOAD_CONNECTION_REJECTED = 3224637458;
export const ERROR_NDIS_OFFLOAD_PATH_REJECTED = 3224637459;
export const ERROR_HV_INVALID_HYPERCALL_CODE = 3224698882;
export const ERROR_HV_INVALID_HYPERCALL_INPUT = 3224698883;
export const ERROR_HV_INVALID_ALIGNMENT = 3224698884;
export const ERROR_HV_INVALID_PARAMETER = 3224698885;
export const ERROR_HV_ACCESS_DENIED = 3224698886;
export const ERROR_HV_INVALID_PARTITION_STATE = 3224698887;
export const ERROR_HV_OPERATION_DENIED = 3224698888;
export const ERROR_HV_UNKNOWN_PROPERTY = 3224698889;
export const ERROR_HV_PROPERTY_VALUE_OUT_OF_RANGE = 3224698890;
export const ERROR_HV_INSUFFICIENT_MEMORY = 3224698891;
export const ERROR_HV_PARTITION_TOO_DEEP = 3224698892;
export const ERROR_HV_INVALID_PARTITION_ID = 3224698893;
export const ERROR_HV_INVALID_VP_INDEX = 3224698894;
export const ERROR_HV_INVALID_PORT_ID = 3224698897;
export const ERROR_HV_INVALID_CONNECTION_ID = 3224698898;
export const ERROR_HV_INSUFFICIENT_BUFFERS = 3224698899;
export const ERROR_HV_NOT_ACKNOWLEDGED = 3224698900;
export const ERROR_HV_INVALID_VP_STATE = 3224698901;
export const ERROR_HV_ACKNOWLEDGED = 3224698902;
export const ERROR_HV_INVALID_SAVE_RESTORE_STATE = 3224698903;
export const ERROR_HV_INVALID_SYNIC_STATE = 3224698904;
export const ERROR_HV_OBJECT_IN_USE = 3224698905;
export const ERROR_HV_INVALID_PROXIMITY_DOMAIN_INFO = 3224698906;
export const ERROR_HV_NO_DATA = 3224698907;
export const ERROR_HV_INACTIVE = 3224698908;
export const ERROR_HV_NO_RESOURCES = 3224698909;
export const ERROR_HV_FEATURE_UNAVAILABLE = 3224698910;
export const ERROR_HV_INSUFFICIENT_BUFFER = 3224698931;
export const ERROR_HV_INSUFFICIENT_DEVICE_DOMAINS = 3224698936;
export const ERROR_HV_CPUID_FEATURE_VALIDATION = 3224698940;
export const ERROR_HV_CPUID_XSAVE_FEATURE_VALIDATION = 3224698941;
export const ERROR_HV_PROCESSOR_STARTUP_TIMEOUT = 3224698942;
export const ERROR_HV_SMX_ENABLED = 3224698943;
export const ERROR_HV_INVALID_LP_INDEX = 3224698945;
export const ERROR_HV_INVALID_REGISTER_VALUE = 3224698960;
export const ERROR_HV_INVALID_VTL_STATE = 3224698961;
export const ERROR_HV_NX_NOT_DETECTED = 3224698965;
export const ERROR_HV_INVALID_DEVICE_ID = 3224698967;
export const ERROR_HV_INVALID_DEVICE_STATE = 3224698968;
export const ERROR_HV_PENDING_PAGE_REQUESTS = 3473497;
export const ERROR_HV_PAGE_REQUEST_INVALID = 3224698976;
export const ERROR_HV_INVALID_CPU_GROUP_ID = 3224698991;
export const ERROR_HV_INVALID_CPU_GROUP_STATE = 3224698992;
export const ERROR_HV_OPERATION_FAILED = 3224698993;
export const ERROR_HV_NOT_ALLOWED_WITH_NESTED_VIRT_ACTIVE = 3224698994;
export const ERROR_HV_INSUFFICIENT_ROOT_MEMORY = 3224698995;
export const ERROR_HV_EVENT_BUFFER_ALREADY_FREED = 3224698996;
export const ERROR_HV_INSUFFICIENT_CONTIGUOUS_MEMORY = 3224698997;
export const ERROR_HV_DEVICE_NOT_IN_DOMAIN = 3224698998;
export const ERROR_HV_NESTED_VM_EXIT = 3224698999;
export const ERROR_HV_MSR_ACCESS_FAILED = 3224699008;
export const ERROR_HV_NOT_PRESENT = 3224702976;
export const ERROR_VID_DUPLICATE_HANDLER = 3224829953;
export const ERROR_VID_TOO_MANY_HANDLERS = 3224829954;
export const ERROR_VID_QUEUE_FULL = 3224829955;
export const ERROR_VID_HANDLER_NOT_PRESENT = 3224829956;
export const ERROR_VID_INVALID_OBJECT_NAME = 3224829957;
export const ERROR_VID_PARTITION_NAME_TOO_LONG = 3224829958;
export const ERROR_VID_MESSAGE_QUEUE_NAME_TOO_LONG = 3224829959;
export const ERROR_VID_PARTITION_ALREADY_EXISTS = 3224829960;
export const ERROR_VID_PARTITION_DOES_NOT_EXIST = 3224829961;
export const ERROR_VID_PARTITION_NAME_NOT_FOUND = 3224829962;
export const ERROR_VID_MESSAGE_QUEUE_ALREADY_EXISTS = 3224829963;
export const ERROR_VID_EXCEEDED_MBP_ENTRY_MAP_LIMIT = 3224829964;
export const ERROR_VID_MB_STILL_REFERENCED = 3224829965;
export const ERROR_VID_CHILD_GPA_PAGE_SET_CORRUPTED = 3224829966;
export const ERROR_VID_INVALID_NUMA_SETTINGS = 3224829967;
export const ERROR_VID_INVALID_NUMA_NODE_INDEX = 3224829968;
export const ERROR_VID_NOTIFICATION_QUEUE_ALREADY_ASSOCIATED = 3224829969;
export const ERROR_VID_INVALID_MEMORY_BLOCK_HANDLE = 3224829970;
export const ERROR_VID_PAGE_RANGE_OVERFLOW = 3224829971;
export const ERROR_VID_INVALID_MESSAGE_QUEUE_HANDLE = 3224829972;
export const ERROR_VID_INVALID_GPA_RANGE_HANDLE = 3224829973;
export const ERROR_VID_NO_MEMORY_BLOCK_NOTIFICATION_QUEUE = 3224829974;
export const ERROR_VID_MEMORY_BLOCK_LOCK_COUNT_EXCEEDED = 3224829975;
export const ERROR_VID_INVALID_PPM_HANDLE = 3224829976;
export const ERROR_VID_MBPS_ARE_LOCKED = 3224829977;
export const ERROR_VID_MESSAGE_QUEUE_CLOSED = 3224829978;
export const ERROR_VID_VIRTUAL_PROCESSOR_LIMIT_EXCEEDED = 3224829979;
export const ERROR_VID_STOP_PENDING = 3224829980;
export const ERROR_VID_INVALID_PROCESSOR_STATE = 3224829981;
export const ERROR_VID_EXCEEDED_KM_CONTEXT_COUNT_LIMIT = 3224829982;
export const ERROR_VID_KM_INTERFACE_ALREADY_INITIALIZED = 3224829983;
export const ERROR_VID_MB_PROPERTY_ALREADY_SET_RESET = 3224829984;
export const ERROR_VID_MMIO_RANGE_DESTROYED = 3224829985;
export const ERROR_VID_INVALID_CHILD_GPA_PAGE_SET = 3224829986;
export const ERROR_VID_RESERVE_PAGE_SET_IS_BEING_USED = 3224829987;
export const ERROR_VID_RESERVE_PAGE_SET_TOO_SMALL = 3224829988;
export const ERROR_VID_MBP_ALREADY_LOCKED_USING_RESERVED_PAGE = 3224829989;
export const ERROR_VID_MBP_COUNT_EXCEEDED_LIMIT = 3224829990;
export const ERROR_VID_SAVED_STATE_CORRUPT = 3224829991;
export const ERROR_VID_SAVED_STATE_UNRECOGNIZED_ITEM = 3224829992;
export const ERROR_VID_SAVED_STATE_INCOMPATIBLE = 3224829993;
export const ERROR_VID_VTL_ACCESS_DENIED = 3224829994;
export const ERROR_VMCOMPUTE_TERMINATED_DURING_START = 3224830208;
export const ERROR_VMCOMPUTE_IMAGE_MISMATCH = 3224830209;
export const ERROR_VMCOMPUTE_HYPERV_NOT_INSTALLED = 3224830210;
export const ERROR_VMCOMPUTE_OPERATION_PENDING = 3224830211;
export const ERROR_VMCOMPUTE_TOO_MANY_NOTIFICATIONS = 3224830212;
export const ERROR_VMCOMPUTE_INVALID_STATE = 3224830213;
export const ERROR_VMCOMPUTE_UNEXPECTED_EXIT = 3224830214;
export const ERROR_VMCOMPUTE_TERMINATED = 3224830215;
export const ERROR_VMCOMPUTE_CONNECT_FAILED = 3224830216;
export const ERROR_VMCOMPUTE_TIMEOUT = 3224830217;
export const ERROR_VMCOMPUTE_CONNECTION_CLOSED = 3224830218;
export const ERROR_VMCOMPUTE_UNKNOWN_MESSAGE = 3224830219;
export const ERROR_VMCOMPUTE_UNSUPPORTED_PROTOCOL_VERSION = 3224830220;
export const ERROR_VMCOMPUTE_INVALID_JSON = 3224830221;
export const ERROR_VMCOMPUTE_SYSTEM_NOT_FOUND = 3224830222;
export const ERROR_VMCOMPUTE_SYSTEM_ALREADY_EXISTS = 3224830223;
export const ERROR_VMCOMPUTE_SYSTEM_ALREADY_STOPPED = 3224830224;
export const ERROR_VMCOMPUTE_PROTOCOL_ERROR = 3224830225;
export const ERROR_VMCOMPUTE_INVALID_LAYER = 3224830226;
export const ERROR_VMCOMPUTE_WINDOWS_INSIDER_REQUIRED = 3224830227;
export const ERROR_VNET_VIRTUAL_SWITCH_NAME_NOT_FOUND = 3224830464;
export const ERROR_VID_REMOTE_NODE_PARENT_GPA_PAGES_USED = 2151088129;
export const ERROR_VSMB_SAVED_STATE_FILE_NOT_FOUND = 3224830976;
export const ERROR_VSMB_SAVED_STATE_CORRUPT = 3224830977;
export const ERROR_VOLMGR_INCOMPLETE_REGENERATION = 2151153665;
export const ERROR_VOLMGR_INCOMPLETE_DISK_MIGRATION = 2151153666;
export const ERROR_VOLMGR_DATABASE_FULL = 3224895489;
export const ERROR_VOLMGR_DISK_CONFIGURATION_CORRUPTED = 3224895490;
export const ERROR_VOLMGR_DISK_CONFIGURATION_NOT_IN_SYNC = 3224895491;
export const ERROR_VOLMGR_PACK_CONFIG_UPDATE_FAILED = 3224895492;
export const ERROR_VOLMGR_DISK_CONTAINS_NON_SIMPLE_VOLUME = 3224895493;
export const ERROR_VOLMGR_DISK_DUPLICATE = 3224895494;
export const ERROR_VOLMGR_DISK_DYNAMIC = 3224895495;
export const ERROR_VOLMGR_DISK_ID_INVALID = 3224895496;
export const ERROR_VOLMGR_DISK_INVALID = 3224895497;
export const ERROR_VOLMGR_DISK_LAST_VOTER = 3224895498;
export const ERROR_VOLMGR_DISK_LAYOUT_INVALID = 3224895499;
export const ERROR_VOLMGR_DISK_LAYOUT_NON_BASIC_BETWEEN_BASIC_PARTITIONS = 3224895500;
export const ERROR_VOLMGR_DISK_LAYOUT_NOT_CYLINDER_ALIGNED = 3224895501;
export const ERROR_VOLMGR_DISK_LAYOUT_PARTITIONS_TOO_SMALL = 3224895502;
export const ERROR_VOLMGR_DISK_LAYOUT_PRIMARY_BETWEEN_LOGICAL_PARTITIONS = 3224895503;
export const ERROR_VOLMGR_DISK_LAYOUT_TOO_MANY_PARTITIONS = 3224895504;
export const ERROR_VOLMGR_DISK_MISSING = 3224895505;
export const ERROR_VOLMGR_DISK_NOT_EMPTY = 3224895506;
export const ERROR_VOLMGR_DISK_NOT_ENOUGH_SPACE = 3224895507;
export const ERROR_VOLMGR_DISK_REVECTORING_FAILED = 3224895508;
export const ERROR_VOLMGR_DISK_SECTOR_SIZE_INVALID = 3224895509;
export const ERROR_VOLMGR_DISK_SET_NOT_CONTAINED = 3224895510;
export const ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_MEMBERS = 3224895511;
export const ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_PLEXES = 3224895512;
export const ERROR_VOLMGR_DYNAMIC_DISK_NOT_SUPPORTED = 3224895513;
export const ERROR_VOLMGR_EXTENT_ALREADY_USED = 3224895514;
export const ERROR_VOLMGR_EXTENT_NOT_CONTIGUOUS = 3224895515;
export const ERROR_VOLMGR_EXTENT_NOT_IN_PUBLIC_REGION = 3224895516;
export const ERROR_VOLMGR_EXTENT_NOT_SECTOR_ALIGNED = 3224895517;
export const ERROR_VOLMGR_EXTENT_OVERLAPS_EBR_PARTITION = 3224895518;
export const ERROR_VOLMGR_EXTENT_VOLUME_LENGTHS_DO_NOT_MATCH = 3224895519;
export const ERROR_VOLMGR_FAULT_TOLERANT_NOT_SUPPORTED = 3224895520;
export const ERROR_VOLMGR_INTERLEAVE_LENGTH_INVALID = 3224895521;
export const ERROR_VOLMGR_MAXIMUM_REGISTERED_USERS = 3224895522;
export const ERROR_VOLMGR_MEMBER_IN_SYNC = 3224895523;
export const ERROR_VOLMGR_MEMBER_INDEX_DUPLICATE = 3224895524;
export const ERROR_VOLMGR_MEMBER_INDEX_INVALID = 3224895525;
export const ERROR_VOLMGR_MEMBER_MISSING = 3224895526;
export const ERROR_VOLMGR_MEMBER_NOT_DETACHED = 3224895527;
export const ERROR_VOLMGR_MEMBER_REGENERATING = 3224895528;
export const ERROR_VOLMGR_ALL_DISKS_FAILED = 3224895529;
export const ERROR_VOLMGR_NO_REGISTERED_USERS = 3224895530;
export const ERROR_VOLMGR_NO_SUCH_USER = 3224895531;
export const ERROR_VOLMGR_NOTIFICATION_RESET = 3224895532;
export const ERROR_VOLMGR_NUMBER_OF_MEMBERS_INVALID = 3224895533;
export const ERROR_VOLMGR_NUMBER_OF_PLEXES_INVALID = 3224895534;
export const ERROR_VOLMGR_PACK_DUPLICATE = 3224895535;
export const ERROR_VOLMGR_PACK_ID_INVALID = 3224895536;
export const ERROR_VOLMGR_PACK_INVALID = 3224895537;
export const ERROR_VOLMGR_PACK_NAME_INVALID = 3224895538;
export const ERROR_VOLMGR_PACK_OFFLINE = 3224895539;
export const ERROR_VOLMGR_PACK_HAS_QUORUM = 3224895540;
export const ERROR_VOLMGR_PACK_WITHOUT_QUORUM = 3224895541;
export const ERROR_VOLMGR_PARTITION_STYLE_INVALID = 3224895542;
export const ERROR_VOLMGR_PARTITION_UPDATE_FAILED = 3224895543;
export const ERROR_VOLMGR_PLEX_IN_SYNC = 3224895544;
export const ERROR_VOLMGR_PLEX_INDEX_DUPLICATE = 3224895545;
export const ERROR_VOLMGR_PLEX_INDEX_INVALID = 3224895546;
export const ERROR_VOLMGR_PLEX_LAST_ACTIVE = 3224895547;
export const ERROR_VOLMGR_PLEX_MISSING = 3224895548;
export const ERROR_VOLMGR_PLEX_REGENERATING = 3224895549;
export const ERROR_VOLMGR_PLEX_TYPE_INVALID = 3224895550;
export const ERROR_VOLMGR_PLEX_NOT_RAID5 = 3224895551;
export const ERROR_VOLMGR_PLEX_NOT_SIMPLE = 3224895552;
export const ERROR_VOLMGR_STRUCTURE_SIZE_INVALID = 3224895553;
export const ERROR_VOLMGR_TOO_MANY_NOTIFICATION_REQUESTS = 3224895554;
export const ERROR_VOLMGR_TRANSACTION_IN_PROGRESS = 3224895555;
export const ERROR_VOLMGR_UNEXPECTED_DISK_LAYOUT_CHANGE = 3224895556;
export const ERROR_VOLMGR_VOLUME_CONTAINS_MISSING_DISK = 3224895557;
export const ERROR_VOLMGR_VOLUME_ID_INVALID = 3224895558;
export const ERROR_VOLMGR_VOLUME_LENGTH_INVALID = 3224895559;
export const ERROR_VOLMGR_VOLUME_LENGTH_NOT_SECTOR_SIZE_MULTIPLE = 3224895560;
export const ERROR_VOLMGR_VOLUME_NOT_MIRRORED = 3224895561;
export const ERROR_VOLMGR_VOLUME_NOT_RETAINED = 3224895562;
export const ERROR_VOLMGR_VOLUME_OFFLINE = 3224895563;
export const ERROR_VOLMGR_VOLUME_RETAINED = 3224895564;
export const ERROR_VOLMGR_NUMBER_OF_EXTENTS_INVALID = 3224895565;
export const ERROR_VOLMGR_DIFFERENT_SECTOR_SIZE = 3224895566;
export const ERROR_VOLMGR_BAD_BOOT_DISK = 3224895567;
export const ERROR_VOLMGR_PACK_CONFIG_OFFLINE = 3224895568;
export const ERROR_VOLMGR_PACK_CONFIG_ONLINE = 3224895569;
export const ERROR_VOLMGR_NOT_PRIMARY_PACK = 3224895570;
export const ERROR_VOLMGR_PACK_LOG_UPDATE_FAILED = 3224895571;
export const ERROR_VOLMGR_NUMBER_OF_DISKS_IN_PLEX_INVALID = 3224895572;
export const ERROR_VOLMGR_NUMBER_OF_DISKS_IN_MEMBER_INVALID = 3224895573;
export const ERROR_VOLMGR_VOLUME_MIRRORED = 3224895574;
export const ERROR_VOLMGR_PLEX_NOT_SIMPLE_SPANNED = 3224895575;
export const ERROR_VOLMGR_NO_VALID_LOG_COPIES = 3224895576;
export const ERROR_VOLMGR_PRIMARY_PACK_PRESENT = 3224895577;
export const ERROR_VOLMGR_NUMBER_OF_DISKS_INVALID = 3224895578;
export const ERROR_VOLMGR_MIRROR_NOT_SUPPORTED = 3224895579;
export const ERROR_VOLMGR_RAID5_NOT_SUPPORTED = 3224895580;
export const ERROR_BCD_NOT_ALL_ENTRIES_IMPORTED = 2151219201;
export const ERROR_BCD_TOO_MANY_ELEMENTS = 3224961026;
export const ERROR_BCD_NOT_ALL_ENTRIES_SYNCHRONIZED = 2151219203;
export const ERROR_VHD_DRIVE_FOOTER_MISSING = 3225026561;
export const ERROR_VHD_DRIVE_FOOTER_CHECKSUM_MISMATCH = 3225026562;
export const ERROR_VHD_DRIVE_FOOTER_CORRUPT = 3225026563;
export const ERROR_VHD_FORMAT_UNKNOWN = 3225026564;
export const ERROR_VHD_FORMAT_UNSUPPORTED_VERSION = 3225026565;
export const ERROR_VHD_SPARSE_HEADER_CHECKSUM_MISMATCH = 3225026566;
export const ERROR_VHD_SPARSE_HEADER_UNSUPPORTED_VERSION = 3225026567;
export const ERROR_VHD_SPARSE_HEADER_CORRUPT = 3225026568;
export const ERROR_VHD_BLOCK_ALLOCATION_FAILURE = 3225026569;
export const ERROR_VHD_BLOCK_ALLOCATION_TABLE_CORRUPT = 3225026570;
export const ERROR_VHD_INVALID_BLOCK_SIZE = 3225026571;
export const ERROR_VHD_BITMAP_MISMATCH = 3225026572;
export const ERROR_VHD_PARENT_VHD_NOT_FOUND = 3225026573;
export const ERROR_VHD_CHILD_PARENT_ID_MISMATCH = 3225026574;
export const ERROR_VHD_CHILD_PARENT_TIMESTAMP_MISMATCH = 3225026575;
export const ERROR_VHD_METADATA_READ_FAILURE = 3225026576;
export const ERROR_VHD_METADATA_WRITE_FAILURE = 3225026577;
export const ERROR_VHD_INVALID_SIZE = 3225026578;
export const ERROR_VHD_INVALID_FILE_SIZE = 3225026579;
export const ERROR_VIRTDISK_PROVIDER_NOT_FOUND = 3225026580;
export const ERROR_VIRTDISK_NOT_VIRTUAL_DISK = 3225026581;
export const ERROR_VHD_PARENT_VHD_ACCESS_DENIED = 3225026582;
export const ERROR_VHD_CHILD_PARENT_SIZE_MISMATCH = 3225026583;
export const ERROR_VHD_DIFFERENCING_CHAIN_CYCLE_DETECTED = 3225026584;
export const ERROR_VHD_DIFFERENCING_CHAIN_ERROR_IN_PARENT = 3225026585;
export const ERROR_VIRTUAL_DISK_LIMITATION = 3225026586;
export const ERROR_VHD_INVALID_TYPE = 3225026587;
export const ERROR_VHD_INVALID_STATE = 3225026588;
export const ERROR_VIRTDISK_UNSUPPORTED_DISK_SECTOR_SIZE = 3225026589;
export const ERROR_VIRTDISK_DISK_ALREADY_OWNED = 3225026590;
export const ERROR_VIRTDISK_DISK_ONLINE_AND_WRITABLE = 3225026591;
export const ERROR_CTLOG_TRACKING_NOT_INITIALIZED = 3225026592;
export const ERROR_CTLOG_LOGFILE_SIZE_EXCEEDED_MAXSIZE = 3225026593;
export const ERROR_CTLOG_VHD_CHANGED_OFFLINE = 3225026594;
export const ERROR_CTLOG_INVALID_TRACKING_STATE = 3225026595;
export const ERROR_CTLOG_INCONSISTENT_TRACKING_FILE = 3225026596;
export const ERROR_VHD_RESIZE_WOULD_TRUNCATE_DATA = 3225026597;
export const ERROR_VHD_COULD_NOT_COMPUTE_MINIMUM_VIRTUAL_SIZE = 3225026598;
export const ERROR_VHD_ALREADY_AT_OR_BELOW_MINIMUM_VIRTUAL_SIZE = 3225026599;
export const ERROR_VHD_METADATA_FULL = 3225026600;
export const ERROR_VHD_INVALID_CHANGE_TRACKING_ID = 3225026601;
export const ERROR_VHD_CHANGE_TRACKING_DISABLED = 3225026602;
export const ERROR_VHD_MISSING_CHANGE_TRACKING_INFORMATION = 3225026608;
export const ERROR_QUERY_STORAGE_ERROR = 2151284737;

// Structs

export type HWINWATCH = bigint | number;

export type FEATURE_STATE_CHANGE_SUBSCRIPTION = bigint | number;

export type FH_SERVICE_PIPE_HANDLE = bigint | number;

/**
 * Windows.Win32.System.WindowsProgramming.TDIEntityID (size: 8)
 */
export interface TDIEntityID {
  /** Windows.Win32.System.WindowsProgramming.TDIENTITY_ENTITY_TYPE */
  tei_entity: TDIENTITY_ENTITY_TYPE;
  /** u32 */
  tei_instance: number;
}

export const sizeofTDIEntityID = 8;

export function allocTDIEntityID(data?: Partial<TDIEntityID>): Uint8Array {
  const buf = new Uint8Array(sizeofTDIEntityID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.tei_entity !== undefined) view.setUint32(0, Number(data.tei_entity), true);
  // 0x04: u32
  if (data?.tei_instance !== undefined) view.setUint32(4, Number(data.tei_instance), true);
  return buf;
}

export class TDIEntityIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get tei_entity(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get tei_instance(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set tei_entity(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set tei_instance(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.TDIObjectID (size: 24)
 */
export interface TDIObjectID {
  /** Windows.Win32.System.WindowsProgramming.TDIEntityID */
  toi_entity: Uint8Array | Deno.PointerValue;
  /** u32 */
  toi_class: number;
  /** u32 */
  toi_type: number;
  /** u32 */
  toi_id: number;
}

export const sizeofTDIObjectID = 24;

export function allocTDIObjectID(data?: Partial<TDIObjectID>): Uint8Array {
  const buf = new Uint8Array(sizeofTDIObjectID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.toi_entity !== undefined) view.setBigUint64(0, data.toi_entity === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.toi_entity))), true);
  // 0x08: u32
  if (data?.toi_class !== undefined) view.setUint32(8, Number(data.toi_class), true);
  // 0x0c: u32
  if (data?.toi_type !== undefined) view.setUint32(12, Number(data.toi_type), true);
  // 0x10: u32
  if (data?.toi_id !== undefined) view.setUint32(16, Number(data.toi_id), true);
  // 0x14: pad4
  return buf;
}

export class TDIObjectIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get toi_entity(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get toi_class(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get toi_type(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get toi_id(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set toi_entity(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set toi_class(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set toi_type(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set toi_id(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.System.WindowsProgramming.TCP_REQUEST_QUERY_INFORMATION_EX32_XP (size: 16)
 */
export interface TCP_REQUEST_QUERY_INFORMATION_EX32_XP {
  /** Windows.Win32.System.WindowsProgramming.TDIObjectID */
  ID: Uint8Array | Deno.PointerValue;
  /** array */
  Context: Deno.PointerValue;
}

export const sizeofTCP_REQUEST_QUERY_INFORMATION_EX32_XP = 16;

export function allocTCP_REQUEST_QUERY_INFORMATION_EX32_XP(data?: Partial<TCP_REQUEST_QUERY_INFORMATION_EX32_XP>): Uint8Array {
  const buf = new Uint8Array(sizeofTCP_REQUEST_QUERY_INFORMATION_EX32_XP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ID !== undefined) view.setBigUint64(0, data.ID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ID))), true);
  // 0x08: pointer
  if (data?.Context !== undefined) view.setBigUint64(8, data.Context === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Context))), true);
  return buf;
}

export class TCP_REQUEST_QUERY_INFORMATION_EX32_XPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Context(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Context(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type PSTR = Deno.PointerValue | Uint8Array;

/**
 * _Description_e__Union (size: 16)
 */
export interface _Description_e__Union {
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null | Uint8Array;
  /** u32 */
  Ordinal: number;
}

export const sizeof_Description_e__Union = 16;

export function alloc_Description_e__Union(data?: Partial<_Description_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Description_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: u32
  if (data?.Ordinal !== undefined) view.setUint32(8, Number(data.Ordinal), true);
  // 0x0c: pad4
  return buf;
}

export class _Description_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get Ordinal(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: buffer
  set Name(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: u32
  set Ordinal(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.WindowsProgramming.DELAYLOAD_PROC_DESCRIPTOR (size: 16)
 */
export interface DELAYLOAD_PROC_DESCRIPTOR {
  /** u32 */
  ImportDescribedByName: number;
  /** _Description_e__Union */
  Description: Uint8Array | Deno.PointerValue;
}

export const sizeofDELAYLOAD_PROC_DESCRIPTOR = 16;

export function allocDELAYLOAD_PROC_DESCRIPTOR(data?: Partial<DELAYLOAD_PROC_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofDELAYLOAD_PROC_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ImportDescribedByName !== undefined) view.setUint32(0, Number(data.ImportDescribedByName), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Description !== undefined) view.setBigUint64(8, data.Description === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Description))), true);
  return buf;
}

export class DELAYLOAD_PROC_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ImportDescribedByName(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Description(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set ImportDescribedByName(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Description(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.DELAYLOAD_INFO (size: 64)
 */
export interface DELAYLOAD_INFO {
  /** u32 */
  Size: number;
  /** ptr */
  DelayloadDescriptor: Deno.PointerValue | Uint8Array;
  /** ptr */
  ThunkAddress: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  TargetDllName: string | null | Uint8Array;
  /** Windows.Win32.System.WindowsProgramming.DELAYLOAD_PROC_DESCRIPTOR */
  TargetApiDescriptor: Uint8Array | Deno.PointerValue;
  /** ptr */
  TargetModuleBase: Deno.PointerValue | Uint8Array;
  /** ptr */
  Unused: Deno.PointerValue | Uint8Array;
  /** u32 */
  LastError: number;
}

export const sizeofDELAYLOAD_INFO = 64;

export function allocDELAYLOAD_INFO(data?: Partial<DELAYLOAD_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDELAYLOAD_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.DelayloadDescriptor !== undefined) view.setBigUint64(8, data.DelayloadDescriptor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DelayloadDescriptor))), true);
  // 0x10: pointer
  if (data?.ThunkAddress !== undefined) view.setBigUint64(16, data.ThunkAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ThunkAddress))), true);
  // 0x18: buffer
  if (data?.TargetDllName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.TargetDllName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: pointer
  if (data?.TargetApiDescriptor !== undefined) view.setBigUint64(32, data.TargetApiDescriptor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TargetApiDescriptor))), true);
  // 0x28: pointer
  if (data?.TargetModuleBase !== undefined) view.setBigUint64(40, data.TargetModuleBase === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TargetModuleBase))), true);
  // 0x30: pointer
  if (data?.Unused !== undefined) view.setBigUint64(48, data.Unused === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Unused))), true);
  // 0x38: u32
  if (data?.LastError !== undefined) view.setUint32(56, Number(data.LastError), true);
  // 0x3c: pad4
  return buf;
}

export class DELAYLOAD_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get DelayloadDescriptor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ThunkAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get TargetDllName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get TargetApiDescriptor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get TargetModuleBase(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get Unused(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get LastError(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set DelayloadDescriptor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ThunkAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: buffer
  set TargetDllName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: pointer
  set TargetApiDescriptor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set TargetModuleBase(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set Unused(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set LastError(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4
}

/**
 * _u1_e__Union (size: 16)
 */
export interface _u1_e__Union {
  /** ptr */
  stspec: Deno.PointerValue | Uint8Array;
  /** ptr */
  isflow: Deno.PointerValue | Uint8Array;
}

export const sizeof_u1_e__Union = 16;

export function alloc_u1_e__Union(data?: Partial<_u1_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_u1_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.stspec !== undefined) view.setBigUint64(0, data.stspec === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.stspec))), true);
  // 0x08: pointer
  if (data?.isflow !== undefined) view.setBigUint64(8, data.isflow === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.isflow))), true);
  return buf;
}

export class _u1_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get stspec(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get isflow(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set stspec(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set isflow(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.IMAGE_THUNK_DATA64 (size: 8)
 */
export interface IMAGE_THUNK_DATA64 {
  /** _u1_e__Union */
  u1: Uint8Array | Deno.PointerValue;
}

export const sizeofIMAGE_THUNK_DATA64 = 8;

export function allocIMAGE_THUNK_DATA64(data?: Partial<IMAGE_THUNK_DATA64>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_THUNK_DATA64);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.u1 !== undefined) view.setBigUint64(0, data.u1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.u1))), true);
  return buf;
}

export class IMAGE_THUNK_DATA64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get u1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set u1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.IMAGE_THUNK_DATA32 (size: 8)
 */
export interface IMAGE_THUNK_DATA32 {
  /** _u1_e__Union */
  u1: Uint8Array | Deno.PointerValue;
}

export const sizeofIMAGE_THUNK_DATA32 = 8;

export function allocIMAGE_THUNK_DATA32(data?: Partial<IMAGE_THUNK_DATA32>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_THUNK_DATA32);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.u1 !== undefined) view.setBigUint64(0, data.u1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.u1))), true);
  return buf;
}

export class IMAGE_THUNK_DATA32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get u1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set u1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: bigint | number;
  /** u64 */
  Region: bigint | number;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get Region(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set Alignment(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set Region(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * _Attributes_e__Union (size: 16)
 */
export interface _Attributes_e__Union {
  /** u32 */
  AllAttributes: number;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeof_Attributes_e__Union = 16;

export function alloc_Attributes_e__Union(data?: Partial<_Attributes_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Attributes_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AllAttributes !== undefined) view.setUint32(0, Number(data.AllAttributes), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class _Attributes_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get AllAttributes(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set AllAttributes(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.IMAGE_DELAYLOAD_DESCRIPTOR (size: 40)
 */
export interface IMAGE_DELAYLOAD_DESCRIPTOR {
  /** _Attributes_e__Union */
  Attributes: Uint8Array | Deno.PointerValue;
  /** u32 */
  DllNameRVA: number;
  /** u32 */
  ModuleHandleRVA: number;
  /** u32 */
  ImportAddressTableRVA: number;
  /** u32 */
  ImportNameTableRVA: number;
  /** u32 */
  BoundImportAddressTableRVA: number;
  /** u32 */
  UnloadInformationTableRVA: number;
  /** u32 */
  TimeDateStamp: number;
}

export const sizeofIMAGE_DELAYLOAD_DESCRIPTOR = 40;

export function allocIMAGE_DELAYLOAD_DESCRIPTOR(data?: Partial<IMAGE_DELAYLOAD_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_DELAYLOAD_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Attributes !== undefined) view.setBigUint64(0, data.Attributes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Attributes))), true);
  // 0x08: u32
  if (data?.DllNameRVA !== undefined) view.setUint32(8, Number(data.DllNameRVA), true);
  // 0x0c: u32
  if (data?.ModuleHandleRVA !== undefined) view.setUint32(12, Number(data.ModuleHandleRVA), true);
  // 0x10: u32
  if (data?.ImportAddressTableRVA !== undefined) view.setUint32(16, Number(data.ImportAddressTableRVA), true);
  // 0x14: u32
  if (data?.ImportNameTableRVA !== undefined) view.setUint32(20, Number(data.ImportNameTableRVA), true);
  // 0x18: u32
  if (data?.BoundImportAddressTableRVA !== undefined) view.setUint32(24, Number(data.BoundImportAddressTableRVA), true);
  // 0x1c: u32
  if (data?.UnloadInformationTableRVA !== undefined) view.setUint32(28, Number(data.UnloadInformationTableRVA), true);
  // 0x20: u32
  if (data?.TimeDateStamp !== undefined) view.setUint32(32, Number(data.TimeDateStamp), true);
  // 0x24: pad4
  return buf;
}

export class IMAGE_DELAYLOAD_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Attributes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get DllNameRVA(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ModuleHandleRVA(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ImportAddressTableRVA(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ImportNameTableRVA(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get BoundImportAddressTableRVA(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get UnloadInformationTableRVA(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get TimeDateStamp(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: pointer
  set Attributes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set DllNameRVA(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ModuleHandleRVA(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ImportAddressTableRVA(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ImportNameTableRVA(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set BoundImportAddressTableRVA(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set UnloadInformationTableRVA(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set TimeDateStamp(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

export type PWSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.System.WindowsProgramming.CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG (size: 16)
 */
export interface CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG {
  /** u32 */
  Size: number;
  /** Windows.Win32.Foundation.PWSTR */
  TriggerId: string | null | Uint8Array | Uint16Array;
}

export const sizeofCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG = 16;

export function allocCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG(data?: Partial<CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG>): Uint8Array {
  const buf = new Uint8Array(sizeofCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.TriggerId !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.TriggerId);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get TriggerId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set TriggerId(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.JIT_DEBUG_INFO (size: 40)
 */
export interface JIT_DEBUG_INFO {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwProcessorArchitecture: number;
  /** u32 */
  dwThreadID: number;
  /** u32 */
  dwReserved0: number;
  /** u64 */
  lpExceptionAddress: bigint | number;
  /** u64 */
  lpExceptionRecord: bigint | number;
  /** u64 */
  lpContextRecord: bigint | number;
}

export const sizeofJIT_DEBUG_INFO = 40;

export function allocJIT_DEBUG_INFO(data?: Partial<JIT_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofJIT_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwProcessorArchitecture !== undefined) view.setUint32(4, Number(data.dwProcessorArchitecture), true);
  // 0x08: u32
  if (data?.dwThreadID !== undefined) view.setUint32(8, Number(data.dwThreadID), true);
  // 0x0c: u32
  if (data?.dwReserved0 !== undefined) view.setUint32(12, Number(data.dwReserved0), true);
  // 0x10: u64
  if (data?.lpExceptionAddress !== undefined) view.setBigUint64(16, BigInt(data.lpExceptionAddress), true);
  // 0x18: u64
  if (data?.lpExceptionRecord !== undefined) view.setBigUint64(24, BigInt(data.lpExceptionRecord), true);
  // 0x20: u64
  if (data?.lpContextRecord !== undefined) view.setBigUint64(32, BigInt(data.lpContextRecord), true);
  return buf;
}

export class JIT_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwProcessorArchitecture(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwThreadID(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwReserved0(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u64
  get lpExceptionAddress(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u64
  get lpExceptionRecord(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u64
  get lpContextRecord(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwProcessorArchitecture(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwThreadID(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwReserved0(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u64
  set lpExceptionAddress(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u64
  set lpExceptionRecord(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u64
  set lpContextRecord(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.HW_PROFILE_INFOA (size: 24)
 */
export interface HW_PROFILE_INFOA {
  /** u32 */
  dwDockInfo: number;
  /** array */
  szHwProfileGuid: Deno.PointerValue;
  /** array */
  szHwProfileName: Deno.PointerValue;
}

export const sizeofHW_PROFILE_INFOA = 24;

export function allocHW_PROFILE_INFOA(data?: Partial<HW_PROFILE_INFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofHW_PROFILE_INFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwDockInfo !== undefined) view.setUint32(0, Number(data.dwDockInfo), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.szHwProfileGuid !== undefined) view.setBigUint64(8, data.szHwProfileGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szHwProfileGuid))), true);
  // 0x10: pointer
  if (data?.szHwProfileName !== undefined) view.setBigUint64(16, data.szHwProfileName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szHwProfileName))), true);
  return buf;
}

export class HW_PROFILE_INFOAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwDockInfo(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get szHwProfileGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get szHwProfileName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwDockInfo(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set szHwProfileGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set szHwProfileName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.HW_PROFILE_INFOW (size: 24)
 */
export interface HW_PROFILE_INFOW {
  /** u32 */
  dwDockInfo: number;
  /** array */
  szHwProfileGuid: Deno.PointerValue;
  /** array */
  szHwProfileName: Deno.PointerValue;
}

export const sizeofHW_PROFILE_INFOW = 24;

export function allocHW_PROFILE_INFOW(data?: Partial<HW_PROFILE_INFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofHW_PROFILE_INFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwDockInfo !== undefined) view.setUint32(0, Number(data.dwDockInfo), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.szHwProfileGuid !== undefined) view.setBigUint64(8, data.szHwProfileGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szHwProfileGuid))), true);
  // 0x10: pointer
  if (data?.szHwProfileName !== undefined) view.setBigUint64(16, data.szHwProfileName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szHwProfileName))), true);
  return buf;
}

export class HW_PROFILE_INFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwDockInfo(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get szHwProfileGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get szHwProfileName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwDockInfo(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set szHwProfileGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set szHwProfileName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type HANDLE = bigint | number;

/**
 * Windows.Win32.System.WindowsProgramming.ACTCTX_SECTION_KEYED_DATA_2600 (size: 72)
 */
export interface ACTCTX_SECTION_KEYED_DATA_2600 {
  /** u32 */
  cbSize: number;
  /** u32 */
  ulDataFormatVersion: number;
  /** ptr */
  lpData: Deno.PointerValue | Uint8Array;
  /** u32 */
  ulLength: number;
  /** ptr */
  lpSectionGlobalData: Deno.PointerValue | Uint8Array;
  /** u32 */
  ulSectionGlobalDataLength: number;
  /** ptr */
  lpSectionBase: Deno.PointerValue | Uint8Array;
  /** u32 */
  ulSectionTotalLength: number;
  /** Windows.Win32.Foundation.HANDLE */
  hActCtx: Uint8Array | Deno.PointerValue;
  /** u32 */
  ulAssemblyRosterIndex: number;
}

export const sizeofACTCTX_SECTION_KEYED_DATA_2600 = 72;

export function allocACTCTX_SECTION_KEYED_DATA_2600(data?: Partial<ACTCTX_SECTION_KEYED_DATA_2600>): Uint8Array {
  const buf = new Uint8Array(sizeofACTCTX_SECTION_KEYED_DATA_2600);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.ulDataFormatVersion !== undefined) view.setUint32(4, Number(data.ulDataFormatVersion), true);
  // 0x08: pointer
  if (data?.lpData !== undefined) view.setBigUint64(8, data.lpData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpData))), true);
  // 0x10: u32
  if (data?.ulLength !== undefined) view.setUint32(16, Number(data.ulLength), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lpSectionGlobalData !== undefined) view.setBigUint64(24, data.lpSectionGlobalData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpSectionGlobalData))), true);
  // 0x20: u32
  if (data?.ulSectionGlobalDataLength !== undefined) view.setUint32(32, Number(data.ulSectionGlobalDataLength), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.lpSectionBase !== undefined) view.setBigUint64(40, data.lpSectionBase === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpSectionBase))), true);
  // 0x30: u32
  if (data?.ulSectionTotalLength !== undefined) view.setUint32(48, Number(data.ulSectionTotalLength), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.hActCtx !== undefined) view.setBigUint64(56, data.hActCtx === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hActCtx))), true);
  // 0x40: u32
  if (data?.ulAssemblyRosterIndex !== undefined) view.setUint32(64, Number(data.ulAssemblyRosterIndex), true);
  // 0x44: pad4
  return buf;
}

export class ACTCTX_SECTION_KEYED_DATA_2600View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ulDataFormatVersion(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get lpData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get ulLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get lpSectionGlobalData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get ulSectionGlobalDataLength(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get lpSectionBase(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get ulSectionTotalLength(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get hActCtx(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get ulAssemblyRosterIndex(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ulDataFormatVersion(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set lpData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set ulLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set lpSectionGlobalData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set ulSectionGlobalDataLength(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set lpSectionBase(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set ulSectionTotalLength(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set hActCtx(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set ulAssemblyRosterIndex(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4
}

/**
 * Windows.Win32.System.WindowsProgramming.ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA (size: 40)
 */
export interface ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA {
  /** ptr */
  lpInformation: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpSectionBase: Deno.PointerValue | Uint8Array;
  /** u32 */
  ulSectionLength: number;
  /** ptr */
  lpSectionGlobalDataBase: Deno.PointerValue | Uint8Array;
  /** u32 */
  ulSectionGlobalDataLength: number;
}

export const sizeofACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = 40;

export function allocACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA(data?: Partial<ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA>): Uint8Array {
  const buf = new Uint8Array(sizeofACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpInformation !== undefined) view.setBigUint64(0, data.lpInformation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpInformation))), true);
  // 0x08: pointer
  if (data?.lpSectionBase !== undefined) view.setBigUint64(8, data.lpSectionBase === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpSectionBase))), true);
  // 0x10: u32
  if (data?.ulSectionLength !== undefined) view.setUint32(16, Number(data.ulSectionLength), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lpSectionGlobalDataBase !== undefined) view.setBigUint64(24, data.lpSectionGlobalDataBase === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpSectionGlobalDataBase))), true);
  // 0x20: u32
  if (data?.ulSectionGlobalDataLength !== undefined) view.setUint32(32, Number(data.ulSectionGlobalDataLength), true);
  // 0x24: pad4
  return buf;
}

export class ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpInformation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpSectionBase(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get ulSectionLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get lpSectionGlobalDataBase(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get ulSectionGlobalDataLength(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: pointer
  set lpInformation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpSectionBase(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set ulSectionLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set lpSectionGlobalDataBase(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set ulSectionGlobalDataLength(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.System.WindowsProgramming.ACTIVATION_CONTEXT_BASIC_INFORMATION (size: 16)
 */
export interface ACTIVATION_CONTEXT_BASIC_INFORMATION {
  /** Windows.Win32.Foundation.HANDLE */
  hActCtx: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwFlags: number;
}

export const sizeofACTIVATION_CONTEXT_BASIC_INFORMATION = 16;

export function allocACTIVATION_CONTEXT_BASIC_INFORMATION(data?: Partial<ACTIVATION_CONTEXT_BASIC_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofACTIVATION_CONTEXT_BASIC_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hActCtx !== undefined) view.setBigUint64(0, data.hActCtx === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hActCtx))), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: pad4
  return buf;
}

export class ACTIVATION_CONTEXT_BASIC_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hActCtx(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set hActCtx(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.WindowsProgramming.FILE_CASE_SENSITIVE_INFO (size: 8)
 */
export interface FILE_CASE_SENSITIVE_INFO {
  /** u32 */
  Flags: number;
}

export const sizeofFILE_CASE_SENSITIVE_INFO = 8;

export function allocFILE_CASE_SENSITIVE_INFO(data?: Partial<FILE_CASE_SENSITIVE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_CASE_SENSITIVE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  return buf;
}

export class FILE_CASE_SENSITIVE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.WindowsProgramming.FILE_DISPOSITION_INFO_EX (size: 8)
 */
export interface FILE_DISPOSITION_INFO_EX {
  /** u32 */
  Flags: number;
}

export const sizeofFILE_DISPOSITION_INFO_EX = 8;

export function allocFILE_DISPOSITION_INFO_EX(data?: Partial<FILE_DISPOSITION_INFO_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_DISPOSITION_INFO_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  return buf;
}

export class FILE_DISPOSITION_INFO_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.WindowsProgramming.CLIENT_ID (size: 16)
 */
export interface CLIENT_ID {
  /** Windows.Win32.Foundation.HANDLE */
  UniqueProcess: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HANDLE */
  UniqueThread: Uint8Array | Deno.PointerValue;
}

export const sizeofCLIENT_ID = 16;

export function allocCLIENT_ID(data?: Partial<CLIENT_ID>): Uint8Array {
  const buf = new Uint8Array(sizeofCLIENT_ID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.UniqueProcess !== undefined) view.setBigUint64(0, data.UniqueProcess === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UniqueProcess))), true);
  // 0x08: pointer
  if (data?.UniqueThread !== undefined) view.setBigUint64(8, data.UniqueThread === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UniqueThread))), true);
  return buf;
}

export class CLIENT_IDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get UniqueProcess(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get UniqueThread(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set UniqueProcess(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set UniqueThread(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Kernel.LIST_ENTRY (size: 16)
 */
export interface LIST_ENTRY {
  /** ptr */
  Flink: Deno.PointerValue | Uint8Array;
  /** ptr */
  Blink: Deno.PointerValue | Uint8Array;
}

export const sizeofLIST_ENTRY = 16;

export function allocLIST_ENTRY(data?: Partial<LIST_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofLIST_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Flink !== undefined) view.setBigUint64(0, data.Flink === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Flink))), true);
  // 0x08: pointer
  if (data?.Blink !== undefined) view.setBigUint64(8, data.Blink === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Blink))), true);
  return buf;
}

export class LIST_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Flink(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Blink(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Flink(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Blink(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Foundation.UNICODE_STRING (size: 16)
 */
export interface UNICODE_STRING {
  /** u16 */
  Length: number;
  /** u16 */
  MaximumLength: number;
  /** Windows.Win32.Foundation.PWSTR */
  Buffer: string | null | Uint8Array | Uint16Array;
}

export const sizeofUNICODE_STRING = 16;

export function allocUNICODE_STRING(data?: Partial<UNICODE_STRING>): Uint8Array {
  const buf = new Uint8Array(sizeofUNICODE_STRING);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Length !== undefined) view.setUint16(0, Number(data.Length), true);
  // 0x02: u16
  if (data?.MaximumLength !== undefined) view.setUint16(2, Number(data.MaximumLength), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.Buffer !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Buffer);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class UNICODE_STRINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Length(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get MaximumLength(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get Buffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set Length(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set MaximumLength(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set Buffer(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** array */
  X: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.X))), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.LDR_DATA_TABLE_ENTRY (size: 80)
 */
export interface LDR_DATA_TABLE_ENTRY {
  /** array */
  Reserved1: Deno.PointerValue;
  /** Windows.Win32.System.Kernel.LIST_ENTRY */
  InMemoryOrderLinks: Uint8Array | Deno.PointerValue;
  /** array */
  Reserved2: Deno.PointerValue;
  /** ptr */
  DllBase: Deno.PointerValue | Uint8Array;
  /** array */
  Reserved3: Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  FullDllName: Uint8Array | Deno.PointerValue;
  /** array */
  Reserved4: Deno.PointerValue;
  /** array */
  Reserved5: Deno.PointerValue;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** u32 */
  TimeDateStamp: number;
}

export const sizeofLDR_DATA_TABLE_ENTRY = 80;

export function allocLDR_DATA_TABLE_ENTRY(data?: Partial<LDR_DATA_TABLE_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofLDR_DATA_TABLE_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(0, data.Reserved1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved1))), true);
  // 0x08: pointer
  if (data?.InMemoryOrderLinks !== undefined) view.setBigUint64(8, data.InMemoryOrderLinks === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InMemoryOrderLinks))), true);
  // 0x10: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(16, data.Reserved2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved2))), true);
  // 0x18: pointer
  if (data?.DllBase !== undefined) view.setBigUint64(24, data.DllBase === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DllBase))), true);
  // 0x20: pointer
  if (data?.Reserved3 !== undefined) view.setBigUint64(32, data.Reserved3 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved3))), true);
  // 0x28: pointer
  if (data?.FullDllName !== undefined) view.setBigUint64(40, data.FullDllName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FullDllName))), true);
  // 0x30: pointer
  if (data?.Reserved4 !== undefined) view.setBigUint64(48, data.Reserved4 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved4))), true);
  // 0x38: pointer
  if (data?.Reserved5 !== undefined) view.setBigUint64(56, data.Reserved5 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved5))), true);
  // 0x40: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(64, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x48: u32
  if (data?.TimeDateStamp !== undefined) view.setUint32(72, Number(data.TimeDateStamp), true);
  // 0x4c: pad4
  return buf;
}

export class LDR_DATA_TABLE_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Reserved1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get InMemoryOrderLinks(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Reserved2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get DllBase(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get Reserved3(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get FullDllName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get Reserved4(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get Reserved5(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get TimeDateStamp(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x00: pointer
  set Reserved1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set InMemoryOrderLinks(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Reserved2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set DllBase(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set Reserved3(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set FullDllName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set Reserved4(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set Reserved5(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: u32
  set TimeDateStamp(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4
}

/**
 * Windows.Win32.System.WindowsProgramming.OBJECT_ATTRIBUTES (size: 48)
 */
export interface OBJECT_ATTRIBUTES {
  /** u32 */
  Length: number;
  /** Windows.Win32.Foundation.HANDLE */
  RootDirectory: Uint8Array | Deno.PointerValue;
  /** ptr */
  ObjectName: Deno.PointerValue | Uint8Array;
  /** u32 */
  Attributes: number;
  /** ptr */
  SecurityDescriptor: Deno.PointerValue | Uint8Array;
  /** ptr */
  SecurityQualityOfService: Deno.PointerValue | Uint8Array;
}

export const sizeofOBJECT_ATTRIBUTES = 48;

export function allocOBJECT_ATTRIBUTES(data?: Partial<OBJECT_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofOBJECT_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.RootDirectory !== undefined) view.setBigUint64(8, data.RootDirectory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RootDirectory))), true);
  // 0x10: pointer
  if (data?.ObjectName !== undefined) view.setBigUint64(16, data.ObjectName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ObjectName))), true);
  // 0x18: u32
  if (data?.Attributes !== undefined) view.setUint32(24, Number(data.Attributes), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.SecurityDescriptor !== undefined) view.setBigUint64(32, data.SecurityDescriptor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SecurityDescriptor))), true);
  // 0x28: pointer
  if (data?.SecurityQualityOfService !== undefined) view.setBigUint64(40, data.SecurityQualityOfService === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SecurityQualityOfService))), true);
  return buf;
}

export class OBJECT_ATTRIBUTESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Length(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get RootDirectory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ObjectName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get Attributes(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get SecurityDescriptor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get SecurityQualityOfService(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Length(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set RootDirectory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ObjectName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set Attributes(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set SecurityDescriptor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set SecurityQualityOfService(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.IO_STATUS_BLOCK (size: 16)
 */
export interface IO_STATUS_BLOCK {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** usize */
  Information: bigint | number;
}

export const sizeofIO_STATUS_BLOCK = 16;

export function allocIO_STATUS_BLOCK(data?: Partial<IO_STATUS_BLOCK>): Uint8Array {
  const buf = new Uint8Array(sizeofIO_STATUS_BLOCK);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: usize
  if (data?.Information !== undefined) view.setBigUint64(8, BigInt(data.Information), true);
  return buf;
}

export class IO_STATUS_BLOCKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: usize
  get Information(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: usize
  set Information(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null | Uint8Array | Uint16Array;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class _u_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwValue(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pwszName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwValue(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pwszName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.Foundation.LARGE_INTEGER (size: 24)
 */
export interface LARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue;
  /** i64 */
  QuadPart: bigint | number;
}

export const sizeofLARGE_INTEGER = 24;

export function allocLARGE_INTEGER(data?: Partial<LARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofLARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.u))), true);
  // 0x10: i64
  if (data?.QuadPart !== undefined) view.setBigInt64(16, BigInt(data.QuadPart), true);
  return buf;
}

export class LARGE_INTEGERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get u(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i64
  get QuadPart(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set u(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i64
  set QuadPart(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION (size: 40)
 */
export interface SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  IdleTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  KernelTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  UserTime: Uint8Array | Deno.PointerValue;
  /** array */
  Reserved1: Deno.PointerValue;
  /** u32 */
  Reserved2: number;
}

export const sizeofSYSTEM_PROCESSOR_PERFORMANCE_INFORMATION = 40;

export function allocSYSTEM_PROCESSOR_PERFORMANCE_INFORMATION(data?: Partial<SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_PROCESSOR_PERFORMANCE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.IdleTime !== undefined) view.setBigUint64(0, data.IdleTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IdleTime))), true);
  // 0x08: pointer
  if (data?.KernelTime !== undefined) view.setBigUint64(8, data.KernelTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.KernelTime))), true);
  // 0x10: pointer
  if (data?.UserTime !== undefined) view.setBigUint64(16, data.UserTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserTime))), true);
  // 0x18: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(24, data.Reserved1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved1))), true);
  // 0x20: u32
  if (data?.Reserved2 !== undefined) view.setUint32(32, Number(data.Reserved2), true);
  // 0x24: pad4
  return buf;
}

export class SYSTEM_PROCESSOR_PERFORMANCE_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get IdleTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get KernelTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get UserTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Reserved1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get Reserved2(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: pointer
  set IdleTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set KernelTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set UserTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Reserved1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set Reserved2(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.System.WindowsProgramming.SYSTEM_PROCESS_INFORMATION (size: 168)
 */
export interface SYSTEM_PROCESS_INFORMATION {
  /** u32 */
  NextEntryOffset: number;
  /** u32 */
  NumberOfThreads: number;
  /** array */
  Reserved1: Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ImageName: Uint8Array | Deno.PointerValue;
  /** i32 */
  BasePriority: number;
  /** Windows.Win32.Foundation.HANDLE */
  UniqueProcessId: Uint8Array | Deno.PointerValue;
  /** ptr */
  Reserved2: Deno.PointerValue | Uint8Array;
  /** u32 */
  HandleCount: number;
  /** u32 */
  SessionId: number;
  /** ptr */
  Reserved3: Deno.PointerValue | Uint8Array;
  /** usize */
  PeakVirtualSize: bigint | number;
  /** usize */
  VirtualSize: bigint | number;
  /** u32 */
  Reserved4: number;
  /** usize */
  PeakWorkingSetSize: bigint | number;
  /** usize */
  WorkingSetSize: bigint | number;
  /** ptr */
  Reserved5: Deno.PointerValue | Uint8Array;
  /** usize */
  QuotaPagedPoolUsage: bigint | number;
  /** ptr */
  Reserved6: Deno.PointerValue | Uint8Array;
  /** usize */
  QuotaNonPagedPoolUsage: bigint | number;
  /** usize */
  PagefileUsage: bigint | number;
  /** usize */
  PeakPagefileUsage: bigint | number;
  /** usize */
  PrivatePageCount: bigint | number;
  /** array */
  Reserved7: Deno.PointerValue;
}

export const sizeofSYSTEM_PROCESS_INFORMATION = 168;

export function allocSYSTEM_PROCESS_INFORMATION(data?: Partial<SYSTEM_PROCESS_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_PROCESS_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NextEntryOffset !== undefined) view.setUint32(0, Number(data.NextEntryOffset), true);
  // 0x04: u32
  if (data?.NumberOfThreads !== undefined) view.setUint32(4, Number(data.NumberOfThreads), true);
  // 0x08: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(8, data.Reserved1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved1))), true);
  // 0x10: pointer
  if (data?.ImageName !== undefined) view.setBigUint64(16, data.ImageName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ImageName))), true);
  // 0x18: i32
  if (data?.BasePriority !== undefined) view.setInt32(24, Number(data.BasePriority), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.UniqueProcessId !== undefined) view.setBigUint64(32, data.UniqueProcessId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UniqueProcessId))), true);
  // 0x28: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(40, data.Reserved2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved2))), true);
  // 0x30: u32
  if (data?.HandleCount !== undefined) view.setUint32(48, Number(data.HandleCount), true);
  // 0x34: u32
  if (data?.SessionId !== undefined) view.setUint32(52, Number(data.SessionId), true);
  // 0x38: pointer
  if (data?.Reserved3 !== undefined) view.setBigUint64(56, data.Reserved3 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved3))), true);
  // 0x40: usize
  if (data?.PeakVirtualSize !== undefined) view.setBigUint64(64, BigInt(data.PeakVirtualSize), true);
  // 0x48: usize
  if (data?.VirtualSize !== undefined) view.setBigUint64(72, BigInt(data.VirtualSize), true);
  // 0x50: u32
  if (data?.Reserved4 !== undefined) view.setUint32(80, Number(data.Reserved4), true);
  // 0x54: pad4
  // 0x58: usize
  if (data?.PeakWorkingSetSize !== undefined) view.setBigUint64(88, BigInt(data.PeakWorkingSetSize), true);
  // 0x60: usize
  if (data?.WorkingSetSize !== undefined) view.setBigUint64(96, BigInt(data.WorkingSetSize), true);
  // 0x68: pointer
  if (data?.Reserved5 !== undefined) view.setBigUint64(104, data.Reserved5 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved5))), true);
  // 0x70: usize
  if (data?.QuotaPagedPoolUsage !== undefined) view.setBigUint64(112, BigInt(data.QuotaPagedPoolUsage), true);
  // 0x78: pointer
  if (data?.Reserved6 !== undefined) view.setBigUint64(120, data.Reserved6 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved6))), true);
  // 0x80: usize
  if (data?.QuotaNonPagedPoolUsage !== undefined) view.setBigUint64(128, BigInt(data.QuotaNonPagedPoolUsage), true);
  // 0x88: usize
  if (data?.PagefileUsage !== undefined) view.setBigUint64(136, BigInt(data.PagefileUsage), true);
  // 0x90: usize
  if (data?.PeakPagefileUsage !== undefined) view.setBigUint64(144, BigInt(data.PeakPagefileUsage), true);
  // 0x98: usize
  if (data?.PrivatePageCount !== undefined) view.setBigUint64(152, BigInt(data.PrivatePageCount), true);
  // 0xa0: pointer
  if (data?.Reserved7 !== undefined) view.setBigUint64(160, data.Reserved7 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved7))), true);
  return buf;
}

export class SYSTEM_PROCESS_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NextEntryOffset(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NumberOfThreads(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Reserved1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ImageName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get BasePriority(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get UniqueProcessId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get Reserved2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get HandleCount(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get SessionId(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: pointer
  get Reserved3(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: usize
  get PeakVirtualSize(): bigint | number {
    return Number(this.view.getBigUint64(64, true));
  }

  // 0x48: usize
  get VirtualSize(): bigint | number {
    return Number(this.view.getBigUint64(72, true));
  }

  // 0x50: u32
  get Reserved4(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x58: usize
  get PeakWorkingSetSize(): bigint | number {
    return Number(this.view.getBigUint64(88, true));
  }

  // 0x60: usize
  get WorkingSetSize(): bigint | number {
    return Number(this.view.getBigUint64(96, true));
  }

  // 0x68: pointer
  get Reserved5(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: usize
  get QuotaPagedPoolUsage(): bigint | number {
    return Number(this.view.getBigUint64(112, true));
  }

  // 0x78: pointer
  get Reserved6(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: usize
  get QuotaNonPagedPoolUsage(): bigint | number {
    return Number(this.view.getBigUint64(128, true));
  }

  // 0x88: usize
  get PagefileUsage(): bigint | number {
    return Number(this.view.getBigUint64(136, true));
  }

  // 0x90: usize
  get PeakPagefileUsage(): bigint | number {
    return Number(this.view.getBigUint64(144, true));
  }

  // 0x98: usize
  get PrivatePageCount(): bigint | number {
    return Number(this.view.getBigUint64(152, true));
  }

  // 0xa0: pointer
  get Reserved7(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(160, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NextEntryOffset(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NumberOfThreads(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Reserved1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ImageName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set BasePriority(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set UniqueProcessId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set Reserved2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set HandleCount(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set SessionId(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: pointer
  set Reserved3(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: usize
  set PeakVirtualSize(value: bigint | number) {
    this.view.setBigUint64(64, BigInt(value), true);
  }

  // 0x48: usize
  set VirtualSize(value: bigint | number) {
    this.view.setBigUint64(72, BigInt(value), true);
  }

  // 0x50: u32
  set Reserved4(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4

  // 0x58: usize
  set PeakWorkingSetSize(value: bigint | number) {
    this.view.setBigUint64(88, BigInt(value), true);
  }

  // 0x60: usize
  set WorkingSetSize(value: bigint | number) {
    this.view.setBigUint64(96, BigInt(value), true);
  }

  // 0x68: pointer
  set Reserved5(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: usize
  set QuotaPagedPoolUsage(value: bigint | number) {
    this.view.setBigUint64(112, BigInt(value), true);
  }

  // 0x78: pointer
  set Reserved6(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: usize
  set QuotaNonPagedPoolUsage(value: bigint | number) {
    this.view.setBigUint64(128, BigInt(value), true);
  }

  // 0x88: usize
  set PagefileUsage(value: bigint | number) {
    this.view.setBigUint64(136, BigInt(value), true);
  }

  // 0x90: usize
  set PeakPagefileUsage(value: bigint | number) {
    this.view.setBigUint64(144, BigInt(value), true);
  }

  // 0x98: usize
  set PrivatePageCount(value: bigint | number) {
    this.view.setBigUint64(152, BigInt(value), true);
  }

  // 0xa0: pointer
  set Reserved7(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(160, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.SYSTEM_THREAD_INFORMATION (size: 56)
 */
export interface SYSTEM_THREAD_INFORMATION {
  /** array */
  Reserved1: Deno.PointerValue;
  /** u32 */
  Reserved2: number;
  /** ptr */
  StartAddress: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.System.WindowsProgramming.CLIENT_ID */
  ClientId: Uint8Array | Deno.PointerValue;
  /** i32 */
  Priority: number;
  /** i32 */
  BasePriority: number;
  /** u32 */
  Reserved3: number;
  /** u32 */
  ThreadState: number;
  /** u32 */
  WaitReason: number;
}

export const sizeofSYSTEM_THREAD_INFORMATION = 56;

export function allocSYSTEM_THREAD_INFORMATION(data?: Partial<SYSTEM_THREAD_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_THREAD_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(0, data.Reserved1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved1))), true);
  // 0x08: u32
  if (data?.Reserved2 !== undefined) view.setUint32(8, Number(data.Reserved2), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.StartAddress !== undefined) view.setBigUint64(16, data.StartAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.StartAddress))), true);
  // 0x18: pointer
  if (data?.ClientId !== undefined) view.setBigUint64(24, data.ClientId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientId))), true);
  // 0x20: i32
  if (data?.Priority !== undefined) view.setInt32(32, Number(data.Priority), true);
  // 0x24: i32
  if (data?.BasePriority !== undefined) view.setInt32(36, Number(data.BasePriority), true);
  // 0x28: u32
  if (data?.Reserved3 !== undefined) view.setUint32(40, Number(data.Reserved3), true);
  // 0x2c: u32
  if (data?.ThreadState !== undefined) view.setUint32(44, Number(data.ThreadState), true);
  // 0x30: u32
  if (data?.WaitReason !== undefined) view.setUint32(48, Number(data.WaitReason), true);
  // 0x34: pad4
  return buf;
}

export class SYSTEM_THREAD_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Reserved1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get Reserved2(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get StartAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ClientId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get Priority(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get BasePriority(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: u32
  get Reserved3(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get ThreadState(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get WaitReason(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x00: pointer
  set Reserved1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set Reserved2(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set StartAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ClientId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: i32
  set Priority(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set BasePriority(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: u32
  set Reserved3(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set ThreadState(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set WaitReason(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.System.WindowsProgramming.SYSTEM_REGISTRY_QUOTA_INFORMATION (size: 16)
 */
export interface SYSTEM_REGISTRY_QUOTA_INFORMATION {
  /** u32 */
  RegistryQuotaAllowed: number;
  /** u32 */
  RegistryQuotaUsed: number;
  /** ptr */
  Reserved1: Deno.PointerValue | Uint8Array;
}

export const sizeofSYSTEM_REGISTRY_QUOTA_INFORMATION = 16;

export function allocSYSTEM_REGISTRY_QUOTA_INFORMATION(data?: Partial<SYSTEM_REGISTRY_QUOTA_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_REGISTRY_QUOTA_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.RegistryQuotaAllowed !== undefined) view.setUint32(0, Number(data.RegistryQuotaAllowed), true);
  // 0x04: u32
  if (data?.RegistryQuotaUsed !== undefined) view.setUint32(4, Number(data.RegistryQuotaUsed), true);
  // 0x08: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(8, data.Reserved1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved1))), true);
  return buf;
}

export class SYSTEM_REGISTRY_QUOTA_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get RegistryQuotaAllowed(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get RegistryQuotaUsed(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Reserved1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set RegistryQuotaAllowed(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set RegistryQuotaUsed(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Reserved1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.SYSTEM_BASIC_INFORMATION (size: 24)
 */
export interface SYSTEM_BASIC_INFORMATION {
  /** array */
  Reserved1: Deno.PointerValue;
  /** array */
  Reserved2: Deno.PointerValue;
  /** i8 */
  NumberOfProcessors: number;
}

export const sizeofSYSTEM_BASIC_INFORMATION = 24;

export function allocSYSTEM_BASIC_INFORMATION(data?: Partial<SYSTEM_BASIC_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_BASIC_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(0, data.Reserved1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved1))), true);
  // 0x08: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(8, data.Reserved2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved2))), true);
  // 0x10: i8
  if (data?.NumberOfProcessors !== undefined) view.setInt8(16, Number(data.NumberOfProcessors));
  // 0x11: pad7
  return buf;
}

export class SYSTEM_BASIC_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Reserved1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Reserved2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i8
  get NumberOfProcessors(): number {
    return this.view.getInt8(16);
  }

  // 0x11: pad7

  // 0x00: pointer
  set Reserved1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Reserved2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i8
  set NumberOfProcessors(value: number) {
    this.view.setInt8(16, value);
  }

  // 0x11: pad7
}

/**
 * Windows.Win32.System.WindowsProgramming.SYSTEM_TIMEOFDAY_INFORMATION (size: 8)
 */
export interface SYSTEM_TIMEOFDAY_INFORMATION {
  /** array */
  Reserved1: Deno.PointerValue;
}

export const sizeofSYSTEM_TIMEOFDAY_INFORMATION = 8;

export function allocSYSTEM_TIMEOFDAY_INFORMATION(data?: Partial<SYSTEM_TIMEOFDAY_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_TIMEOFDAY_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(0, data.Reserved1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved1))), true);
  return buf;
}

export class SYSTEM_TIMEOFDAY_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Reserved1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Reserved1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.SYSTEM_PERFORMANCE_INFORMATION (size: 8)
 */
export interface SYSTEM_PERFORMANCE_INFORMATION {
  /** array */
  Reserved1: Deno.PointerValue;
}

export const sizeofSYSTEM_PERFORMANCE_INFORMATION = 8;

export function allocSYSTEM_PERFORMANCE_INFORMATION(data?: Partial<SYSTEM_PERFORMANCE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_PERFORMANCE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(0, data.Reserved1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved1))), true);
  return buf;
}

export class SYSTEM_PERFORMANCE_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Reserved1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Reserved1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.SYSTEM_EXCEPTION_INFORMATION (size: 8)
 */
export interface SYSTEM_EXCEPTION_INFORMATION {
  /** array */
  Reserved1: Deno.PointerValue;
}

export const sizeofSYSTEM_EXCEPTION_INFORMATION = 8;

export function allocSYSTEM_EXCEPTION_INFORMATION(data?: Partial<SYSTEM_EXCEPTION_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_EXCEPTION_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(0, data.Reserved1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved1))), true);
  return buf;
}

export class SYSTEM_EXCEPTION_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Reserved1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Reserved1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.SYSTEM_LOOKASIDE_INFORMATION (size: 8)
 */
export interface SYSTEM_LOOKASIDE_INFORMATION {
  /** array */
  Reserved1: Deno.PointerValue;
}

export const sizeofSYSTEM_LOOKASIDE_INFORMATION = 8;

export function allocSYSTEM_LOOKASIDE_INFORMATION(data?: Partial<SYSTEM_LOOKASIDE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_LOOKASIDE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(0, data.Reserved1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved1))), true);
  return buf;
}

export class SYSTEM_LOOKASIDE_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Reserved1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Reserved1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.SYSTEM_INTERRUPT_INFORMATION (size: 8)
 */
export interface SYSTEM_INTERRUPT_INFORMATION {
  /** array */
  Reserved1: Deno.PointerValue;
}

export const sizeofSYSTEM_INTERRUPT_INFORMATION = 8;

export function allocSYSTEM_INTERRUPT_INFORMATION(data?: Partial<SYSTEM_INTERRUPT_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_INTERRUPT_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(0, data.Reserved1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved1))), true);
  return buf;
}

export class SYSTEM_INTERRUPT_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Reserved1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Reserved1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.SYSTEM_POLICY_INFORMATION (size: 16)
 */
export interface SYSTEM_POLICY_INFORMATION {
  /** array */
  Reserved1: Deno.PointerValue;
  /** array */
  Reserved2: Deno.PointerValue;
}

export const sizeofSYSTEM_POLICY_INFORMATION = 16;

export function allocSYSTEM_POLICY_INFORMATION(data?: Partial<SYSTEM_POLICY_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_POLICY_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(0, data.Reserved1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved1))), true);
  // 0x08: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(8, data.Reserved2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved2))), true);
  return buf;
}

export class SYSTEM_POLICY_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Reserved1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Reserved2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Reserved1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Reserved2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.THREAD_NAME_INFORMATION (size: 8)
 */
export interface THREAD_NAME_INFORMATION {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ThreadName: Uint8Array | Deno.PointerValue;
}

export const sizeofTHREAD_NAME_INFORMATION = 8;

export function allocTHREAD_NAME_INFORMATION(data?: Partial<THREAD_NAME_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofTHREAD_NAME_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ThreadName !== undefined) view.setBigUint64(0, data.ThreadName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ThreadName))), true);
  return buf;
}

export class THREAD_NAME_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ThreadName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ThreadName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.SYSTEM_CODEINTEGRITY_INFORMATION (size: 8)
 */
export interface SYSTEM_CODEINTEGRITY_INFORMATION {
  /** u32 */
  Length: number;
  /** u32 */
  CodeIntegrityOptions: number;
}

export const sizeofSYSTEM_CODEINTEGRITY_INFORMATION = 8;

export function allocSYSTEM_CODEINTEGRITY_INFORMATION(data?: Partial<SYSTEM_CODEINTEGRITY_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_CODEINTEGRITY_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: u32
  if (data?.CodeIntegrityOptions !== undefined) view.setUint32(4, Number(data.CodeIntegrityOptions), true);
  return buf;
}

export class SYSTEM_CODEINTEGRITY_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Length(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get CodeIntegrityOptions(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set Length(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set CodeIntegrityOptions(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.PUBLIC_OBJECT_BASIC_INFORMATION (size: 24)
 */
export interface PUBLIC_OBJECT_BASIC_INFORMATION {
  /** u32 */
  Attributes: number;
  /** u32 */
  GrantedAccess: number;
  /** u32 */
  HandleCount: number;
  /** u32 */
  PointerCount: number;
  /** array */
  Reserved: Deno.PointerValue;
}

export const sizeofPUBLIC_OBJECT_BASIC_INFORMATION = 24;

export function allocPUBLIC_OBJECT_BASIC_INFORMATION(data?: Partial<PUBLIC_OBJECT_BASIC_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPUBLIC_OBJECT_BASIC_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Attributes !== undefined) view.setUint32(0, Number(data.Attributes), true);
  // 0x04: u32
  if (data?.GrantedAccess !== undefined) view.setUint32(4, Number(data.GrantedAccess), true);
  // 0x08: u32
  if (data?.HandleCount !== undefined) view.setUint32(8, Number(data.HandleCount), true);
  // 0x0c: u32
  if (data?.PointerCount !== undefined) view.setUint32(12, Number(data.PointerCount), true);
  // 0x10: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(16, data.Reserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved))), true);
  return buf;
}

export class PUBLIC_OBJECT_BASIC_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Attributes(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get GrantedAccess(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get HandleCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get PointerCount(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get Reserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Attributes(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set GrantedAccess(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set HandleCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set PointerCount(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.PUBLIC_OBJECT_TYPE_INFORMATION (size: 16)
 */
export interface PUBLIC_OBJECT_TYPE_INFORMATION {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  TypeName: Uint8Array | Deno.PointerValue;
  /** array */
  Reserved: Deno.PointerValue;
}

export const sizeofPUBLIC_OBJECT_TYPE_INFORMATION = 16;

export function allocPUBLIC_OBJECT_TYPE_INFORMATION(data?: Partial<PUBLIC_OBJECT_TYPE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPUBLIC_OBJECT_TYPE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TypeName !== undefined) view.setBigUint64(0, data.TypeName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TypeName))), true);
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved))), true);
  return buf;
}

export class PUBLIC_OBJECT_TYPE_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get TypeName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Reserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set TypeName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.KEY_VALUE_ENTRY (size: 24)
 */
export interface KEY_VALUE_ENTRY {
  /** ptr */
  ValueName: Deno.PointerValue | Uint8Array;
  /** u32 */
  DataLength: number;
  /** u32 */
  DataOffset: number;
  /** u32 */
  Type: number;
}

export const sizeofKEY_VALUE_ENTRY = 24;

export function allocKEY_VALUE_ENTRY(data?: Partial<KEY_VALUE_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofKEY_VALUE_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ValueName !== undefined) view.setBigUint64(0, data.ValueName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ValueName))), true);
  // 0x08: u32
  if (data?.DataLength !== undefined) view.setUint32(8, Number(data.DataLength), true);
  // 0x0c: u32
  if (data?.DataOffset !== undefined) view.setUint32(12, Number(data.DataOffset), true);
  // 0x10: u32
  if (data?.Type !== undefined) view.setUint32(16, Number(data.Type), true);
  // 0x14: pad4
  return buf;
}

export class KEY_VALUE_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ValueName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get DataLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get DataOffset(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Type(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set ValueName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set DataLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set DataOffset(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Type(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.System.WindowsProgramming.WINSTATIONINFORMATIONW (size: 24)
 */
export interface WINSTATIONINFORMATIONW {
  /** array */
  Reserved2: Deno.PointerValue;
  /** u32 */
  LogonId: number;
  /** array */
  Reserved3: Deno.PointerValue;
}

export const sizeofWINSTATIONINFORMATIONW = 24;

export function allocWINSTATIONINFORMATIONW(data?: Partial<WINSTATIONINFORMATIONW>): Uint8Array {
  const buf = new Uint8Array(sizeofWINSTATIONINFORMATIONW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(0, data.Reserved2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved2))), true);
  // 0x08: u32
  if (data?.LogonId !== undefined) view.setUint32(8, Number(data.LogonId), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Reserved3 !== undefined) view.setBigUint64(16, data.Reserved3 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved3))), true);
  return buf;
}

export class WINSTATIONINFORMATIONWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Reserved2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get LogonId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Reserved3(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Reserved2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set LogonId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Reserved3(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type HRESULT = number;

/**
 * Windows.Win32.System.WindowsProgramming.FEATURE_ERROR (size: 112)
 */
export interface FEATURE_ERROR {
  /** Windows.Win32.Foundation.HRESULT */
  hr: Uint8Array | Deno.PointerValue;
  /** u16 */
  lineNumber: number;
  /** Windows.Win32.Foundation.PSTR */
  file: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  process: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  module: string | null | Uint8Array;
  /** u32 */
  callerReturnAddressOffset: number;
  /** Windows.Win32.Foundation.PSTR */
  callerModule: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  message: string | null | Uint8Array;
  /** u16 */
  originLineNumber: number;
  /** Windows.Win32.Foundation.PSTR */
  originFile: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  originModule: string | null | Uint8Array;
  /** u32 */
  originCallerReturnAddressOffset: number;
  /** Windows.Win32.Foundation.PSTR */
  originCallerModule: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  originName: string | null | Uint8Array;
}

export const sizeofFEATURE_ERROR = 112;

export function allocFEATURE_ERROR(data?: Partial<FEATURE_ERROR>): Uint8Array {
  const buf = new Uint8Array(sizeofFEATURE_ERROR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hr !== undefined) view.setBigUint64(0, data.hr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hr))), true);
  // 0x08: u16
  if (data?.lineNumber !== undefined) view.setUint16(8, Number(data.lineNumber), true);
  // 0x0a: pad6
  // 0x10: buffer
  if (data?.file !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.file);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.process !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.process);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.module !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.module);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: u32
  if (data?.callerReturnAddressOffset !== undefined) view.setUint32(40, Number(data.callerReturnAddressOffset), true);
  // 0x2c: pad4
  // 0x30: buffer
  if (data?.callerModule !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.callerModule);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: buffer
  if (data?.message !== undefined) {
    (buf as any)._f56 = util.pstrToFfi(data.message);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f56))), true);
  }
  // 0x40: u16
  if (data?.originLineNumber !== undefined) view.setUint16(64, Number(data.originLineNumber), true);
  // 0x42: pad6
  // 0x48: buffer
  if (data?.originFile !== undefined) {
    (buf as any)._f72 = util.pstrToFfi(data.originFile);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  // 0x50: buffer
  if (data?.originModule !== undefined) {
    (buf as any)._f80 = util.pstrToFfi(data.originModule);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f80))), true);
  }
  // 0x58: u32
  if (data?.originCallerReturnAddressOffset !== undefined) view.setUint32(88, Number(data.originCallerReturnAddressOffset), true);
  // 0x5c: pad4
  // 0x60: buffer
  if (data?.originCallerModule !== undefined) {
    (buf as any)._f96 = util.pstrToFfi(data.originCallerModule);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f96))), true);
  }
  // 0x68: buffer
  if (data?.originName !== undefined) {
    (buf as any)._f104 = util.pstrToFfi(data.originName);
    view.setBigUint64(104, (buf as any)._f104 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f104))), true);
  }
  return buf;
}

export class FEATURE_ERRORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u16
  get lineNumber(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x10: buffer
  get file(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get process(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get module(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get callerReturnAddressOffset(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: buffer
  get callerModule(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: buffer
  get message(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u16
  get originLineNumber(): number {
    return this.view.getUint16(64, true);
  }

  // 0x42: pad6

  // 0x48: buffer
  get originFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: buffer
  get originModule(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: u32
  get originCallerReturnAddressOffset(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: pad4

  // 0x60: buffer
  get originCallerModule(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: buffer
  get originName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u16
  set lineNumber(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6

  // 0x10: buffer
  set file(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set process(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set module(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: u32
  set callerReturnAddressOffset(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: buffer
  set callerModule(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: buffer
  set message(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f56))), true);
  }

  // 0x40: u16
  set originLineNumber(value: number) {
    this.view.setUint16(64, value, true);
  }

  // 0x42: pad6

  // 0x48: buffer
  set originFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }

  // 0x50: buffer
  set originModule(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f80))), true);
  }

  // 0x58: u32
  set originCallerReturnAddressOffset(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: pad4

  // 0x60: buffer
  set originCallerModule(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f96 = value;
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f96))), true);
  }

  // 0x68: buffer
  set originName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f104 = value;
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f104))), true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.DCICMD (size: 24)
 */
export interface DCICMD {
  /** u32 */
  dwCommand: number;
  /** u32 */
  dwParam1: number;
  /** u32 */
  dwParam2: number;
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwReserved: number;
}

export const sizeofDCICMD = 24;

export function allocDCICMD(data?: Partial<DCICMD>): Uint8Array {
  const buf = new Uint8Array(sizeofDCICMD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwCommand !== undefined) view.setUint32(0, Number(data.dwCommand), true);
  // 0x04: u32
  if (data?.dwParam1 !== undefined) view.setUint32(4, Number(data.dwParam1), true);
  // 0x08: u32
  if (data?.dwParam2 !== undefined) view.setUint32(8, Number(data.dwParam2), true);
  // 0x0c: u32
  if (data?.dwVersion !== undefined) view.setUint32(12, Number(data.dwVersion), true);
  // 0x10: u32
  if (data?.dwReserved !== undefined) view.setUint32(16, Number(data.dwReserved), true);
  // 0x14: pad4
  return buf;
}

export class DCICMDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwCommand(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwParam1(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwParam2(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwVersion(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwReserved(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set dwCommand(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwParam1(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwParam2(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwVersion(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwReserved(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.System.WindowsProgramming.DCICREATEINPUT (size: 48)
 */
export interface DCICREATEINPUT {
  /** Windows.Win32.System.WindowsProgramming.DCICMD */
  cmd: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwCompression: number;
  /** array */
  dwMask: Deno.PointerValue;
  /** u32 */
  dwWidth: number;
  /** u32 */
  dwHeight: number;
  /** u32 */
  dwDCICaps: number;
  /** u32 */
  dwBitCount: number;
  /** ptr */
  lpSurface: Deno.PointerValue | Uint8Array;
}

export const sizeofDCICREATEINPUT = 48;

export function allocDCICREATEINPUT(data?: Partial<DCICREATEINPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofDCICREATEINPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.cmd !== undefined) view.setBigUint64(0, data.cmd === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.cmd))), true);
  // 0x08: u32
  if (data?.dwCompression !== undefined) view.setUint32(8, Number(data.dwCompression), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.dwMask !== undefined) view.setBigUint64(16, data.dwMask === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwMask))), true);
  // 0x18: u32
  if (data?.dwWidth !== undefined) view.setUint32(24, Number(data.dwWidth), true);
  // 0x1c: u32
  if (data?.dwHeight !== undefined) view.setUint32(28, Number(data.dwHeight), true);
  // 0x20: u32
  if (data?.dwDCICaps !== undefined) view.setUint32(32, Number(data.dwDCICaps), true);
  // 0x24: u32
  if (data?.dwBitCount !== undefined) view.setUint32(36, Number(data.dwBitCount), true);
  // 0x28: pointer
  if (data?.lpSurface !== undefined) view.setBigUint64(40, data.lpSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpSurface))), true);
  return buf;
}

export class DCICREATEINPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get cmd(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwCompression(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get dwMask(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwWidth(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwHeight(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwDCICaps(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwBitCount(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get lpSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set cmd(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwCompression(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set dwMask(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwWidth(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwHeight(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwDCICaps(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwBitCount(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set lpSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.DCISURFACEINFO (size: 88)
 */
export interface DCISURFACEINFO {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwDCICaps: number;
  /** u32 */
  dwCompression: number;
  /** array */
  dwMask: Deno.PointerValue;
  /** u32 */
  dwWidth: number;
  /** u32 */
  dwHeight: number;
  /** i32 */
  lStride: number;
  /** u32 */
  dwBitCount: number;
  /** usize */
  dwOffSurface: bigint | number;
  /** u16 */
  wSelSurface: number;
  /** u16 */
  wReserved: number;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
  /** u32 */
  dwReserved3: number;
  /** isize */
  BeginAccess: bigint | number;
  /** isize */
  EndAccess: bigint | number;
  /** isize */
  DestroySurface: bigint | number;
}

export const sizeofDCISURFACEINFO = 88;

export function allocDCISURFACEINFO(data?: Partial<DCISURFACEINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDCISURFACEINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwDCICaps !== undefined) view.setUint32(4, Number(data.dwDCICaps), true);
  // 0x08: u32
  if (data?.dwCompression !== undefined) view.setUint32(8, Number(data.dwCompression), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.dwMask !== undefined) view.setBigUint64(16, data.dwMask === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwMask))), true);
  // 0x18: u32
  if (data?.dwWidth !== undefined) view.setUint32(24, Number(data.dwWidth), true);
  // 0x1c: u32
  if (data?.dwHeight !== undefined) view.setUint32(28, Number(data.dwHeight), true);
  // 0x20: i32
  if (data?.lStride !== undefined) view.setInt32(32, Number(data.lStride), true);
  // 0x24: u32
  if (data?.dwBitCount !== undefined) view.setUint32(36, Number(data.dwBitCount), true);
  // 0x28: usize
  if (data?.dwOffSurface !== undefined) view.setBigUint64(40, BigInt(data.dwOffSurface), true);
  // 0x30: u16
  if (data?.wSelSurface !== undefined) view.setUint16(48, Number(data.wSelSurface), true);
  // 0x32: u16
  if (data?.wReserved !== undefined) view.setUint16(50, Number(data.wReserved), true);
  // 0x34: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(52, Number(data.dwReserved1), true);
  // 0x38: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(56, Number(data.dwReserved2), true);
  // 0x3c: u32
  if (data?.dwReserved3 !== undefined) view.setUint32(60, Number(data.dwReserved3), true);
  // 0x40: isize
  if (data?.BeginAccess !== undefined) view.setBigInt64(64, BigInt(data.BeginAccess), true);
  // 0x48: isize
  if (data?.EndAccess !== undefined) view.setBigInt64(72, BigInt(data.EndAccess), true);
  // 0x50: isize
  if (data?.DestroySurface !== undefined) view.setBigInt64(80, BigInt(data.DestroySurface), true);
  return buf;
}

export class DCISURFACEINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwDCICaps(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwCompression(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get dwMask(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwWidth(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwHeight(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: i32
  get lStride(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: u32
  get dwBitCount(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: usize
  get dwOffSurface(): bigint | number {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x30: u16
  get wSelSurface(): number {
    return this.view.getUint16(48, true);
  }

  // 0x32: u16
  get wReserved(): number {
    return this.view.getUint16(50, true);
  }

  // 0x34: u32
  get dwReserved1(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get dwReserved2(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwReserved3(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: isize
  get BeginAccess(): bigint | number {
    return Number(this.view.getBigInt64(64, true));
  }

  // 0x48: isize
  get EndAccess(): bigint | number {
    return Number(this.view.getBigInt64(72, true));
  }

  // 0x50: isize
  get DestroySurface(): bigint | number {
    return Number(this.view.getBigInt64(80, true));
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwDCICaps(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwCompression(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set dwMask(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwWidth(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwHeight(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: i32
  set lStride(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: u32
  set dwBitCount(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: usize
  set dwOffSurface(value: bigint | number) {
    this.view.setBigUint64(40, BigInt(value), true);
  }

  // 0x30: u16
  set wSelSurface(value: number) {
    this.view.setUint16(48, value, true);
  }

  // 0x32: u16
  set wReserved(value: number) {
    this.view.setUint16(50, value, true);
  }

  // 0x34: u32
  set dwReserved1(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set dwReserved2(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwReserved3(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: isize
  set BeginAccess(value: bigint | number) {
    this.view.setBigInt64(64, BigInt(value), true);
  }

  // 0x48: isize
  set EndAccess(value: bigint | number) {
    this.view.setBigInt64(72, BigInt(value), true);
  }

  // 0x50: isize
  set DestroySurface(value: bigint | number) {
    this.view.setBigInt64(80, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Foundation.RECT (size: 16)
 */
export interface RECT {
  /** i32 */
  left: number;
  /** i32 */
  top: number;
  /** i32 */
  right: number;
  /** i32 */
  bottom: number;
}

export const sizeofRECT = 16;

export function allocRECT(data?: Partial<RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofRECT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.left !== undefined) view.setInt32(0, Number(data.left), true);
  // 0x04: i32
  if (data?.top !== undefined) view.setInt32(4, Number(data.top), true);
  // 0x08: i32
  if (data?.right !== undefined) view.setInt32(8, Number(data.right), true);
  // 0x0c: i32
  if (data?.bottom !== undefined) view.setInt32(12, Number(data.bottom), true);
  return buf;
}

export class RECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get left(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get top(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get right(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get bottom(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: i32
  set left(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set top(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set right(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set bottom(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.DCIENUMINPUT (size: 40)
 */
export interface DCIENUMINPUT {
  /** Windows.Win32.System.WindowsProgramming.DCICMD */
  cmd: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rSrc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rDst: Uint8Array | Deno.PointerValue;
  /** isize */
  EnumCallback: bigint | number;
  /** ptr */
  lpContext: Deno.PointerValue | Uint8Array;
}

export const sizeofDCIENUMINPUT = 40;

export function allocDCIENUMINPUT(data?: Partial<DCIENUMINPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofDCIENUMINPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.cmd !== undefined) view.setBigUint64(0, data.cmd === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.cmd))), true);
  // 0x08: pointer
  if (data?.rSrc !== undefined) view.setBigUint64(8, data.rSrc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rSrc))), true);
  // 0x10: pointer
  if (data?.rDst !== undefined) view.setBigUint64(16, data.rDst === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rDst))), true);
  // 0x18: isize
  if (data?.EnumCallback !== undefined) view.setBigInt64(24, BigInt(data.EnumCallback), true);
  // 0x20: pointer
  if (data?.lpContext !== undefined) view.setBigUint64(32, data.lpContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpContext))), true);
  return buf;
}

export class DCIENUMINPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get cmd(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get rSrc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get rDst(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: isize
  get EnumCallback(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: pointer
  get lpContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set cmd(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set rSrc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set rDst(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: isize
  set EnumCallback(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: pointer
  set lpContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.DCIOFFSCREEN (size: 32)
 */
export interface DCIOFFSCREEN {
  /** Windows.Win32.System.WindowsProgramming.DCISURFACEINFO */
  dciInfo: Uint8Array | Deno.PointerValue;
  /** isize */
  Draw: bigint | number;
  /** isize */
  SetClipList: bigint | number;
  /** isize */
  SetDestination: bigint | number;
}

export const sizeofDCIOFFSCREEN = 32;

export function allocDCIOFFSCREEN(data?: Partial<DCIOFFSCREEN>): Uint8Array {
  const buf = new Uint8Array(sizeofDCIOFFSCREEN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.dciInfo !== undefined) view.setBigUint64(0, data.dciInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dciInfo))), true);
  // 0x08: isize
  if (data?.Draw !== undefined) view.setBigInt64(8, BigInt(data.Draw), true);
  // 0x10: isize
  if (data?.SetClipList !== undefined) view.setBigInt64(16, BigInt(data.SetClipList), true);
  // 0x18: isize
  if (data?.SetDestination !== undefined) view.setBigInt64(24, BigInt(data.SetDestination), true);
  return buf;
}

export class DCIOFFSCREENView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get dciInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: isize
  get Draw(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: isize
  get SetClipList(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: isize
  get SetDestination(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x00: pointer
  set dciInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: isize
  set Draw(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: isize
  set SetClipList(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: isize
  set SetDestination(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.DCIOVERLAY (size: 16)
 */
export interface DCIOVERLAY {
  /** Windows.Win32.System.WindowsProgramming.DCISURFACEINFO */
  dciInfo: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwChromakeyValue: number;
  /** u32 */
  dwChromakeyMask: number;
}

export const sizeofDCIOVERLAY = 16;

export function allocDCIOVERLAY(data?: Partial<DCIOVERLAY>): Uint8Array {
  const buf = new Uint8Array(sizeofDCIOVERLAY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.dciInfo !== undefined) view.setBigUint64(0, data.dciInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dciInfo))), true);
  // 0x08: u32
  if (data?.dwChromakeyValue !== undefined) view.setUint32(8, Number(data.dwChromakeyValue), true);
  // 0x0c: u32
  if (data?.dwChromakeyMask !== undefined) view.setUint32(12, Number(data.dwChromakeyMask), true);
  return buf;
}

export class DCIOVERLAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get dciInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwChromakeyValue(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwChromakeyMask(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set dciInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwChromakeyValue(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwChromakeyMask(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.STRENTRYA (size: 16)
 */
export interface STRENTRYA {
  /** Windows.Win32.Foundation.PSTR */
  pszName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszValue: string | null | Uint8Array;
}

export const sizeofSTRENTRYA = 16;

export function allocSTRENTRYA(data?: Partial<STRENTRYA>): Uint8Array {
  const buf = new Uint8Array(sizeofSTRENTRYA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pszValue !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszValue);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class STRENTRYAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pszValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pszName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pszValue(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.STRENTRYW (size: 16)
 */
export interface STRENTRYW {
  /** Windows.Win32.Foundation.PWSTR */
  pszName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszValue: string | null | Uint8Array | Uint16Array;
}

export const sizeofSTRENTRYW = 16;

export function allocSTRENTRYW(data?: Partial<STRENTRYW>): Uint8Array {
  const buf = new Uint8Array(sizeofSTRENTRYW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pszValue !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszValue);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class STRENTRYWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pszValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pszName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pszValue(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.STRTABLEA (size: 16)
 */
export interface STRTABLEA {
  /** u32 */
  cEntries: number;
  /** ptr */
  pse: Deno.PointerValue | Uint8Array;
}

export const sizeofSTRTABLEA = 16;

export function allocSTRTABLEA(data?: Partial<STRTABLEA>): Uint8Array {
  const buf = new Uint8Array(sizeofSTRTABLEA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cEntries !== undefined) view.setUint32(0, Number(data.cEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pse !== undefined) view.setBigUint64(8, data.pse === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pse))), true);
  return buf;
}

export class STRTABLEAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pse(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pse(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.STRTABLEW (size: 16)
 */
export interface STRTABLEW {
  /** u32 */
  cEntries: number;
  /** ptr */
  pse: Deno.PointerValue | Uint8Array;
}

export const sizeofSTRTABLEW = 16;

export function allocSTRTABLEW(data?: Partial<STRTABLEW>): Uint8Array {
  const buf = new Uint8Array(sizeofSTRTABLEW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cEntries !== undefined) view.setUint32(0, Number(data.cEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pse !== undefined) view.setBigUint64(8, data.pse === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pse))), true);
  return buf;
}

export class STRTABLEWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pse(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pse(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.CABINFOA (size: 40)
 */
export interface CABINFOA {
  /** Windows.Win32.Foundation.PSTR */
  pszCab: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszInf: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszSection: string | null | Uint8Array;
  /** array */
  szSrcPath: Deno.PointerValue;
  /** u32 */
  dwFlags: number;
}

export const sizeofCABINFOA = 40;

export function allocCABINFOA(data?: Partial<CABINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofCABINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszCab !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszCab);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pszInf !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszInf);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pszSection !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pszSection);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: pointer
  if (data?.szSrcPath !== undefined) view.setBigUint64(24, data.szSrcPath === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szSrcPath))), true);
  // 0x20: u32
  if (data?.dwFlags !== undefined) view.setUint32(32, Number(data.dwFlags), true);
  // 0x24: pad4
  return buf;
}

export class CABINFOAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszCab(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pszInf(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pszSection(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get szSrcPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwFlags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: buffer
  set pszCab(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pszInf(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pszSection(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: pointer
  set szSrcPath(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwFlags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.System.WindowsProgramming.CABINFOW (size: 40)
 */
export interface CABINFOW {
  /** Windows.Win32.Foundation.PWSTR */
  pszCab: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszInf: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszSection: string | null | Uint8Array | Uint16Array;
  /** array */
  szSrcPath: Deno.PointerValue;
  /** u32 */
  dwFlags: number;
}

export const sizeofCABINFOW = 40;

export function allocCABINFOW(data?: Partial<CABINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofCABINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszCab !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszCab);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pszInf !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszInf);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pszSection !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszSection);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: pointer
  if (data?.szSrcPath !== undefined) view.setBigUint64(24, data.szSrcPath === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szSrcPath))), true);
  // 0x20: u32
  if (data?.dwFlags !== undefined) view.setUint32(32, Number(data.dwFlags), true);
  // 0x24: pad4
  return buf;
}

export class CABINFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszCab(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pszInf(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pszSection(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get szSrcPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwFlags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: buffer
  set pszCab(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pszInf(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pszSection(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: pointer
  set szSrcPath(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwFlags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

export type BOOL = number;

/**
 * Windows.Win32.System.WindowsProgramming.PERUSERSECTIONA (size: 56)
 */
export interface PERUSERSECTIONA {
  /** array */
  szGUID: Deno.PointerValue;
  /** array */
  szDispName: Deno.PointerValue;
  /** array */
  szLocale: Deno.PointerValue;
  /** array */
  szStub: Deno.PointerValue;
  /** array */
  szVersion: Deno.PointerValue;
  /** array */
  szCompID: Deno.PointerValue;
  /** u32 */
  dwIsInstalled: number;
  /** Windows.Win32.Foundation.BOOL */
  bRollback: boolean;
}

export const sizeofPERUSERSECTIONA = 56;

export function allocPERUSERSECTIONA(data?: Partial<PERUSERSECTIONA>): Uint8Array {
  const buf = new Uint8Array(sizeofPERUSERSECTIONA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.szGUID !== undefined) view.setBigUint64(0, data.szGUID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szGUID))), true);
  // 0x08: pointer
  if (data?.szDispName !== undefined) view.setBigUint64(8, data.szDispName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szDispName))), true);
  // 0x10: pointer
  if (data?.szLocale !== undefined) view.setBigUint64(16, data.szLocale === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szLocale))), true);
  // 0x18: pointer
  if (data?.szStub !== undefined) view.setBigUint64(24, data.szStub === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szStub))), true);
  // 0x20: pointer
  if (data?.szVersion !== undefined) view.setBigUint64(32, data.szVersion === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szVersion))), true);
  // 0x28: pointer
  if (data?.szCompID !== undefined) view.setBigUint64(40, data.szCompID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szCompID))), true);
  // 0x30: u32
  if (data?.dwIsInstalled !== undefined) view.setUint32(48, Number(data.dwIsInstalled), true);
  // 0x34: i32
  if (data?.bRollback !== undefined) view.setInt32(52, Number(data.bRollback), true);
  return buf;
}

export class PERUSERSECTIONAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get szGUID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get szDispName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get szLocale(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get szStub(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get szVersion(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get szCompID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get dwIsInstalled(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: i32
  get bRollback(): number {
    return this.view.getInt32(52, true);
  }

  // 0x00: pointer
  set szGUID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set szDispName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set szLocale(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set szStub(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set szVersion(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set szCompID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set dwIsInstalled(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: i32
  set bRollback(value: number) {
    this.view.setInt32(52, value, true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.PERUSERSECTIONW (size: 56)
 */
export interface PERUSERSECTIONW {
  /** array */
  szGUID: Deno.PointerValue;
  /** array */
  szDispName: Deno.PointerValue;
  /** array */
  szLocale: Deno.PointerValue;
  /** array */
  szStub: Deno.PointerValue;
  /** array */
  szVersion: Deno.PointerValue;
  /** array */
  szCompID: Deno.PointerValue;
  /** u32 */
  dwIsInstalled: number;
  /** Windows.Win32.Foundation.BOOL */
  bRollback: boolean;
}

export const sizeofPERUSERSECTIONW = 56;

export function allocPERUSERSECTIONW(data?: Partial<PERUSERSECTIONW>): Uint8Array {
  const buf = new Uint8Array(sizeofPERUSERSECTIONW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.szGUID !== undefined) view.setBigUint64(0, data.szGUID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szGUID))), true);
  // 0x08: pointer
  if (data?.szDispName !== undefined) view.setBigUint64(8, data.szDispName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szDispName))), true);
  // 0x10: pointer
  if (data?.szLocale !== undefined) view.setBigUint64(16, data.szLocale === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szLocale))), true);
  // 0x18: pointer
  if (data?.szStub !== undefined) view.setBigUint64(24, data.szStub === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szStub))), true);
  // 0x20: pointer
  if (data?.szVersion !== undefined) view.setBigUint64(32, data.szVersion === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szVersion))), true);
  // 0x28: pointer
  if (data?.szCompID !== undefined) view.setBigUint64(40, data.szCompID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szCompID))), true);
  // 0x30: u32
  if (data?.dwIsInstalled !== undefined) view.setUint32(48, Number(data.dwIsInstalled), true);
  // 0x34: i32
  if (data?.bRollback !== undefined) view.setInt32(52, Number(data.bRollback), true);
  return buf;
}

export class PERUSERSECTIONWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get szGUID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get szDispName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get szLocale(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get szStub(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get szVersion(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get szCompID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get dwIsInstalled(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: i32
  get bRollback(): number {
    return this.view.getInt32(52, true);
  }

  // 0x00: pointer
  set szGUID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set szDispName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set szLocale(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set szStub(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set szVersion(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set szCompID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set dwIsInstalled(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: i32
  set bRollback(value: number) {
    this.view.setInt32(52, value, true);
  }
}

export type WPARAM = bigint | number;

export type LPARAM = bigint | number;

/**
 * Windows.Win32.System.WindowsProgramming.IMESTRUCT (size: 56)
 */
export interface IMESTRUCT {
  /** u32 */
  fnc: number;
  /** Windows.Win32.Foundation.WPARAM */
  wParam: Uint8Array | Deno.PointerValue;
  /** u32 */
  wCount: number;
  /** u32 */
  dchSource: number;
  /** u32 */
  dchDest: number;
  /** Windows.Win32.Foundation.LPARAM */
  lParam1: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lParam2: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lParam3: Uint8Array | Deno.PointerValue;
}

export const sizeofIMESTRUCT = 56;

export function allocIMESTRUCT(data?: Partial<IMESTRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofIMESTRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fnc !== undefined) view.setUint32(0, Number(data.fnc), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.wParam !== undefined) view.setBigUint64(8, data.wParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wParam))), true);
  // 0x10: u32
  if (data?.wCount !== undefined) view.setUint32(16, Number(data.wCount), true);
  // 0x14: u32
  if (data?.dchSource !== undefined) view.setUint32(20, Number(data.dchSource), true);
  // 0x18: u32
  if (data?.dchDest !== undefined) view.setUint32(24, Number(data.dchDest), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.lParam1 !== undefined) view.setBigUint64(32, data.lParam1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam1))), true);
  // 0x28: pointer
  if (data?.lParam2 !== undefined) view.setBigUint64(40, data.lParam2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam2))), true);
  // 0x30: pointer
  if (data?.lParam3 !== undefined) view.setBigUint64(48, data.lParam3 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam3))), true);
  return buf;
}

export class IMESTRUCTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get fnc(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get wParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get wCount(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dchSource(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dchDest(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get lParam1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get lParam2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get lParam3(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set fnc(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set wParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set wCount(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dchSource(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dchDest(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set lParam1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set lParam2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set lParam3(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.UNDETERMINESTRUCT (size: 56)
 */
export interface UNDETERMINESTRUCT {
  /** u32 */
  dwSize: number;
  /** u32 */
  uDefIMESize: number;
  /** u32 */
  uDefIMEPos: number;
  /** u32 */
  uUndetTextLen: number;
  /** u32 */
  uUndetTextPos: number;
  /** u32 */
  uUndetAttrPos: number;
  /** u32 */
  uCursorPos: number;
  /** u32 */
  uDeltaStart: number;
  /** u32 */
  uDetermineTextLen: number;
  /** u32 */
  uDetermineTextPos: number;
  /** u32 */
  uDetermineDelimPos: number;
  /** u32 */
  uYomiTextLen: number;
  /** u32 */
  uYomiTextPos: number;
  /** u32 */
  uYomiDelimPos: number;
}

export const sizeofUNDETERMINESTRUCT = 56;

export function allocUNDETERMINESTRUCT(data?: Partial<UNDETERMINESTRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofUNDETERMINESTRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.uDefIMESize !== undefined) view.setUint32(4, Number(data.uDefIMESize), true);
  // 0x08: u32
  if (data?.uDefIMEPos !== undefined) view.setUint32(8, Number(data.uDefIMEPos), true);
  // 0x0c: u32
  if (data?.uUndetTextLen !== undefined) view.setUint32(12, Number(data.uUndetTextLen), true);
  // 0x10: u32
  if (data?.uUndetTextPos !== undefined) view.setUint32(16, Number(data.uUndetTextPos), true);
  // 0x14: u32
  if (data?.uUndetAttrPos !== undefined) view.setUint32(20, Number(data.uUndetAttrPos), true);
  // 0x18: u32
  if (data?.uCursorPos !== undefined) view.setUint32(24, Number(data.uCursorPos), true);
  // 0x1c: u32
  if (data?.uDeltaStart !== undefined) view.setUint32(28, Number(data.uDeltaStart), true);
  // 0x20: u32
  if (data?.uDetermineTextLen !== undefined) view.setUint32(32, Number(data.uDetermineTextLen), true);
  // 0x24: u32
  if (data?.uDetermineTextPos !== undefined) view.setUint32(36, Number(data.uDetermineTextPos), true);
  // 0x28: u32
  if (data?.uDetermineDelimPos !== undefined) view.setUint32(40, Number(data.uDetermineDelimPos), true);
  // 0x2c: u32
  if (data?.uYomiTextLen !== undefined) view.setUint32(44, Number(data.uYomiTextLen), true);
  // 0x30: u32
  if (data?.uYomiTextPos !== undefined) view.setUint32(48, Number(data.uYomiTextPos), true);
  // 0x34: u32
  if (data?.uYomiDelimPos !== undefined) view.setUint32(52, Number(data.uYomiDelimPos), true);
  return buf;
}

export class UNDETERMINESTRUCTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get uDefIMESize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get uDefIMEPos(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uUndetTextLen(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get uUndetTextPos(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get uUndetAttrPos(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get uCursorPos(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get uDeltaStart(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get uDetermineTextLen(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get uDetermineTextPos(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get uDetermineDelimPos(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get uYomiTextLen(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get uYomiTextPos(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get uYomiDelimPos(): number {
    return this.view.getUint32(52, true);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set uDefIMESize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set uDefIMEPos(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uUndetTextLen(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set uUndetTextPos(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set uUndetAttrPos(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set uCursorPos(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set uDeltaStart(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set uDetermineTextLen(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set uDetermineTextPos(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set uDetermineDelimPos(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set uYomiTextLen(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set uYomiTextPos(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set uYomiDelimPos(value: number) {
    this.view.setUint32(52, value, true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.STRINGEXSTRUCT (size: 24)
 */
export interface STRINGEXSTRUCT {
  /** u32 */
  dwSize: number;
  /** u32 */
  uDeterminePos: number;
  /** u32 */
  uDetermineDelimPos: number;
  /** u32 */
  uYomiPos: number;
  /** u32 */
  uYomiDelimPos: number;
}

export const sizeofSTRINGEXSTRUCT = 24;

export function allocSTRINGEXSTRUCT(data?: Partial<STRINGEXSTRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofSTRINGEXSTRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.uDeterminePos !== undefined) view.setUint32(4, Number(data.uDeterminePos), true);
  // 0x08: u32
  if (data?.uDetermineDelimPos !== undefined) view.setUint32(8, Number(data.uDetermineDelimPos), true);
  // 0x0c: u32
  if (data?.uYomiPos !== undefined) view.setUint32(12, Number(data.uYomiPos), true);
  // 0x10: u32
  if (data?.uYomiDelimPos !== undefined) view.setUint32(16, Number(data.uYomiDelimPos), true);
  // 0x14: pad4
  return buf;
}

export class STRINGEXSTRUCTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get uDeterminePos(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get uDetermineDelimPos(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uYomiPos(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get uYomiDelimPos(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set uDeterminePos(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set uDetermineDelimPos(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uYomiPos(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set uYomiDelimPos(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.System.WindowsProgramming.DATETIME (size: 16)
 */
export interface DATETIME {
  /** u16 */
  year: number;
  /** u16 */
  month: number;
  /** u16 */
  day: number;
  /** u16 */
  hour: number;
  /** u16 */
  min: number;
  /** u16 */
  sec: number;
}

export const sizeofDATETIME = 16;

export function allocDATETIME(data?: Partial<DATETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofDATETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.year !== undefined) view.setUint16(0, Number(data.year), true);
  // 0x02: u16
  if (data?.month !== undefined) view.setUint16(2, Number(data.month), true);
  // 0x04: u16
  if (data?.day !== undefined) view.setUint16(4, Number(data.day), true);
  // 0x06: u16
  if (data?.hour !== undefined) view.setUint16(6, Number(data.hour), true);
  // 0x08: u16
  if (data?.min !== undefined) view.setUint16(8, Number(data.min), true);
  // 0x0a: u16
  if (data?.sec !== undefined) view.setUint16(10, Number(data.sec), true);
  // 0x0c: pad4
  return buf;
}

export class DATETIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get year(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get month(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get day(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get hour(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u16
  get min(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get sec(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: pad4

  // 0x00: u16
  set year(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set month(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set day(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set hour(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u16
  set min(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set sec(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: pad4
}

export type HWND = bigint | number;

/**
 * Windows.Win32.System.WindowsProgramming.IMEPROA (size: 48)
 */
export interface IMEPROA {
  /** Windows.Win32.Foundation.HWND */
  hWnd: Deno.PointerValue;
  /** Windows.Win32.System.WindowsProgramming.DATETIME */
  InstDate: Uint8Array | Deno.PointerValue;
  /** u32 */
  wVersion: number;
  /** array */
  szDescription: Deno.PointerValue;
  /** array */
  szName: Deno.PointerValue;
  /** array */
  szOptions: Deno.PointerValue;
}

export const sizeofIMEPROA = 48;

export function allocIMEPROA(data?: Partial<IMEPROA>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEPROA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hWnd !== undefined) view.setBigUint64(0, data.hWnd === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hWnd))), true);
  // 0x08: pointer
  if (data?.InstDate !== undefined) view.setBigUint64(8, data.InstDate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InstDate))), true);
  // 0x10: u32
  if (data?.wVersion !== undefined) view.setUint32(16, Number(data.wVersion), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.szDescription !== undefined) view.setBigUint64(24, data.szDescription === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szDescription))), true);
  // 0x20: pointer
  if (data?.szName !== undefined) view.setBigUint64(32, data.szName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szName))), true);
  // 0x28: pointer
  if (data?.szOptions !== undefined) view.setBigUint64(40, data.szOptions === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szOptions))), true);
  return buf;
}

export class IMEPROAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hWnd(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get InstDate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get wVersion(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get szDescription(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get szName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get szOptions(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hWnd(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set InstDate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set wVersion(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set szDescription(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set szName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set szOptions(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.IMEPROW (size: 48)
 */
export interface IMEPROW {
  /** Windows.Win32.Foundation.HWND */
  hWnd: Deno.PointerValue;
  /** Windows.Win32.System.WindowsProgramming.DATETIME */
  InstDate: Uint8Array | Deno.PointerValue;
  /** u32 */
  wVersion: number;
  /** array */
  szDescription: Deno.PointerValue;
  /** array */
  szName: Deno.PointerValue;
  /** array */
  szOptions: Deno.PointerValue;
}

export const sizeofIMEPROW = 48;

export function allocIMEPROW(data?: Partial<IMEPROW>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEPROW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hWnd !== undefined) view.setBigUint64(0, data.hWnd === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hWnd))), true);
  // 0x08: pointer
  if (data?.InstDate !== undefined) view.setBigUint64(8, data.InstDate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InstDate))), true);
  // 0x10: u32
  if (data?.wVersion !== undefined) view.setUint32(16, Number(data.wVersion), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.szDescription !== undefined) view.setBigUint64(24, data.szDescription === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szDescription))), true);
  // 0x20: pointer
  if (data?.szName !== undefined) view.setBigUint64(32, data.szName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szName))), true);
  // 0x28: pointer
  if (data?.szOptions !== undefined) view.setBigUint64(40, data.szOptions === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szOptions))), true);
  return buf;
}

export class IMEPROWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hWnd(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get InstDate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get wVersion(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get szDescription(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get szName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get szOptions(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hWnd(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set InstDate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set wVersion(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set szDescription(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set szName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set szOptions(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.JAVA_TRUST (size: 80)
 */
export interface JAVA_TRUST {
  /** u32 */
  cbSize: number;
  /** u32 */
  flag: number;
  /** Windows.Win32.Foundation.BOOL */
  fAllActiveXPermissions: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fAllPermissions: boolean;
  /** u32 */
  dwEncodingType: number;
  /** ptr */
  pbJavaPermissions: Deno.PointerValue | Uint8Array;
  /** u32 */
  cbJavaPermissions: number;
  /** ptr */
  pbSigner: Deno.PointerValue | Uint8Array;
  /** u32 */
  cbSigner: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszZone: string | null | Uint8Array | Uint16Array;
  /** System.Guid */
  guidZone: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HRESULT */
  hVerify: Uint8Array | Deno.PointerValue;
}

export const sizeofJAVA_TRUST = 80;

export function allocJAVA_TRUST(data?: Partial<JAVA_TRUST>): Uint8Array {
  const buf = new Uint8Array(sizeofJAVA_TRUST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.flag !== undefined) view.setUint32(4, Number(data.flag), true);
  // 0x08: i32
  if (data?.fAllActiveXPermissions !== undefined) view.setInt32(8, Number(data.fAllActiveXPermissions), true);
  // 0x0c: i32
  if (data?.fAllPermissions !== undefined) view.setInt32(12, Number(data.fAllPermissions), true);
  // 0x10: u32
  if (data?.dwEncodingType !== undefined) view.setUint32(16, Number(data.dwEncodingType), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pbJavaPermissions !== undefined) view.setBigUint64(24, data.pbJavaPermissions === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pbJavaPermissions))), true);
  // 0x20: u32
  if (data?.cbJavaPermissions !== undefined) view.setUint32(32, Number(data.cbJavaPermissions), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pbSigner !== undefined) view.setBigUint64(40, data.pbSigner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pbSigner))), true);
  // 0x30: u32
  if (data?.cbSigner !== undefined) view.setUint32(48, Number(data.cbSigner), true);
  // 0x34: pad4
  // 0x38: buffer
  if (data?.pwszZone !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pwszZone);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f56))), true);
  }
  // 0x40: pointer
  if (data?.guidZone !== undefined) view.setBigUint64(64, data.guidZone === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidZone))), true);
  // 0x48: pointer
  if (data?.hVerify !== undefined) view.setBigUint64(72, data.hVerify === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hVerify))), true);
  return buf;
}

export class JAVA_TRUSTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get flag(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get fAllActiveXPermissions(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get fAllPermissions(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get dwEncodingType(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pbJavaPermissions(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get cbJavaPermissions(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get pbSigner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get cbSigner(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: buffer
  get pwszZone(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get guidZone(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get hVerify(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set flag(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set fAllActiveXPermissions(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set fAllPermissions(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set dwEncodingType(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pbJavaPermissions(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set cbJavaPermissions(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set pbSigner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set cbSigner(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: buffer
  set pwszZone(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f56))), true);
  }

  // 0x40: pointer
  set guidZone(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set hVerify(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.TCP_REQUEST_QUERY_INFORMATION_EX_XP (size: 16)
 */
export interface TCP_REQUEST_QUERY_INFORMATION_EX_XP {
  /** Windows.Win32.System.WindowsProgramming.TDIObjectID */
  ID: Uint8Array | Deno.PointerValue;
  /** array */
  Context: Deno.PointerValue;
}

export const sizeofTCP_REQUEST_QUERY_INFORMATION_EX_XP = 16;

export function allocTCP_REQUEST_QUERY_INFORMATION_EX_XP(data?: Partial<TCP_REQUEST_QUERY_INFORMATION_EX_XP>): Uint8Array {
  const buf = new Uint8Array(sizeofTCP_REQUEST_QUERY_INFORMATION_EX_XP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ID !== undefined) view.setBigUint64(0, data.ID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ID))), true);
  // 0x08: pointer
  if (data?.Context !== undefined) view.setBigUint64(8, data.Context === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Context))), true);
  return buf;
}

export class TCP_REQUEST_QUERY_INFORMATION_EX_XPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Context(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Context(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.TCP_REQUEST_QUERY_INFORMATION_EX_W2K (size: 16)
 */
export interface TCP_REQUEST_QUERY_INFORMATION_EX_W2K {
  /** Windows.Win32.System.WindowsProgramming.TDIObjectID */
  ID: Uint8Array | Deno.PointerValue;
  /** array */
  Context: Deno.PointerValue;
}

export const sizeofTCP_REQUEST_QUERY_INFORMATION_EX_W2K = 16;

export function allocTCP_REQUEST_QUERY_INFORMATION_EX_W2K(data?: Partial<TCP_REQUEST_QUERY_INFORMATION_EX_W2K>): Uint8Array {
  const buf = new Uint8Array(sizeofTCP_REQUEST_QUERY_INFORMATION_EX_W2K);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ID !== undefined) view.setBigUint64(0, data.ID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ID))), true);
  // 0x08: pointer
  if (data?.Context !== undefined) view.setBigUint64(8, data.Context === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Context))), true);
  return buf;
}

export class TCP_REQUEST_QUERY_INFORMATION_EX_W2KView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Context(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Context(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.TCP_REQUEST_SET_INFORMATION_EX (size: 24)
 */
export interface TCP_REQUEST_SET_INFORMATION_EX {
  /** Windows.Win32.System.WindowsProgramming.TDIObjectID */
  ID: Uint8Array | Deno.PointerValue;
  /** u32 */
  BufferSize: number;
  /** array */
  Buffer: Deno.PointerValue;
}

export const sizeofTCP_REQUEST_SET_INFORMATION_EX = 24;

export function allocTCP_REQUEST_SET_INFORMATION_EX(data?: Partial<TCP_REQUEST_SET_INFORMATION_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofTCP_REQUEST_SET_INFORMATION_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ID !== undefined) view.setBigUint64(0, data.ID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ID))), true);
  // 0x08: u32
  if (data?.BufferSize !== undefined) view.setUint32(8, Number(data.BufferSize), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Buffer !== undefined) view.setBigUint64(16, data.Buffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Buffer))), true);
  return buf;
}

export class TCP_REQUEST_SET_INFORMATION_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get BufferSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Buffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set BufferSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Buffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.TDI_TL_IO_CONTROL_ENDPOINT (size: 48)
 */
export interface TDI_TL_IO_CONTROL_ENDPOINT {
  /** Windows.Win32.System.WindowsProgramming.TDI_TL_IO_CONTROL_TYPE */
  Type: TDI_TL_IO_CONTROL_TYPE;
  /** u32 */
  Level: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** ptr */
  InputBuffer: Deno.PointerValue | Uint8Array;
  /** u32 */
  InputBufferLength: number;
  /** ptr */
  OutputBuffer: Deno.PointerValue | Uint8Array;
  /** u32 */
  OutputBufferLength: number;
}

export const sizeofTDI_TL_IO_CONTROL_ENDPOINT = 48;

export function allocTDI_TL_IO_CONTROL_ENDPOINT(data?: Partial<TDI_TL_IO_CONTROL_ENDPOINT>): Uint8Array {
  const buf = new Uint8Array(sizeofTDI_TL_IO_CONTROL_ENDPOINT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Level !== undefined) view.setUint32(4, Number(data.Level), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x10: pointer
  if (data?.InputBuffer !== undefined) view.setBigUint64(16, data.InputBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InputBuffer))), true);
  // 0x18: u32
  if (data?.InputBufferLength !== undefined) view.setUint32(24, Number(data.InputBufferLength), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.OutputBuffer !== undefined) view.setBigUint64(32, data.OutputBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OutputBuffer))), true);
  // 0x28: u32
  if (data?.OutputBufferLength !== undefined) view.setUint32(40, Number(data.OutputBufferLength), true);
  // 0x2c: pad4
  return buf;
}

export class TDI_TL_IO_CONTROL_ENDPOINTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Level(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get InputBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get InputBufferLength(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get OutputBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get OutputBufferLength(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Level(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set InputBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set InputBufferLength(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set OutputBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set OutputBufferLength(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.System.WindowsProgramming.WLDP_HOST_INFORMATION (size: 24)
 */
export interface WLDP_HOST_INFORMATION {
  /** u32 */
  dwRevision: number;
  /** Windows.Win32.System.WindowsProgramming.WLDP_HOST_ID */
  dwHostId: WLDP_HOST_ID;
  /** Windows.Win32.Foundation.PWSTR */
  szSource: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.HANDLE */
  hSource: Uint8Array | Deno.PointerValue;
}

export const sizeofWLDP_HOST_INFORMATION = 24;

export function allocWLDP_HOST_INFORMATION(data?: Partial<WLDP_HOST_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofWLDP_HOST_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwRevision !== undefined) view.setUint32(0, Number(data.dwRevision), true);
  // 0x04: i32
  if (data?.dwHostId !== undefined) view.setInt32(4, Number(data.dwHostId), true);
  // 0x08: buffer
  if (data?.szSource !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.szSource);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.hSource !== undefined) view.setBigUint64(16, data.hSource === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hSource))), true);
  return buf;
}

export class WLDP_HOST_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwRevision(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get dwHostId(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: buffer
  get szSource(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hSource(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwRevision(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set dwHostId(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: buffer
  set szSource(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set hSource(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.WindowsProgramming.WLDP_DEVICE_SECURITY_INFORMATION (size: 32)
 */
export interface WLDP_DEVICE_SECURITY_INFORMATION {
  /** u32 */
  UnlockIdSize: number;
  /** ptr */
  UnlockId: Deno.PointerValue | Uint8Array;
  /** u32 */
  ManufacturerIDLength: number;
  /** Windows.Win32.Foundation.PWSTR */
  ManufacturerID: string | null | Uint8Array | Uint16Array;
}

export const sizeofWLDP_DEVICE_SECURITY_INFORMATION = 32;

export function allocWLDP_DEVICE_SECURITY_INFORMATION(data?: Partial<WLDP_DEVICE_SECURITY_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofWLDP_DEVICE_SECURITY_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UnlockIdSize !== undefined) view.setUint32(0, Number(data.UnlockIdSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.UnlockId !== undefined) view.setBigUint64(8, data.UnlockId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UnlockId))), true);
  // 0x10: u32
  if (data?.ManufacturerIDLength !== undefined) view.setUint32(16, Number(data.ManufacturerIDLength), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.ManufacturerID !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.ManufacturerID);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  return buf;
}

export class WLDP_DEVICE_SECURITY_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get UnlockIdSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get UnlockId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get ManufacturerIDLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  get ManufacturerID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set UnlockIdSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set UnlockId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set ManufacturerIDLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  set ManufacturerID(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }
}

export type NTSTATUS = number;

export type BOOLEAN = number;

export type HDC = bigint | number;

export type HINSTANCE = bigint | number;

export type HKEY = bigint | number;

export type LRESULT = bigint | number;

// Native Libraries

try {
  var libKERNEL32_dll = Deno.dlopen("KERNEL32.dll", {
    uaw_lstrcmpW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    uaw_lstrcmpiW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    uaw_lstrlenW: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    uaw_wcschr: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    uaw_wcscpy: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    uaw_wcsicmp: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    uaw_wcslen: {
      parameters: ["pointer"],
      result: "usize",
      optional: true,
    },
    uaw_wcsrchr: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    QueryThreadCycleTime: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    QueryProcessCycleTime: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    QueryIdleProcessorCycleTime: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    QueryIdleProcessorCycleTimeEx: {
      parameters: ["u16", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    QueryUnbiasedInterruptTime: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    GlobalCompact: {
      parameters: ["u32"],
      result: "usize",
      optional: true,
    },
    GlobalFix: {
      parameters: ["isize"],
      result: "void",
      optional: true,
    },
    GlobalUnfix: {
      parameters: ["isize"],
      result: "void",
      optional: true,
    },
    GlobalWire: {
      parameters: ["isize"],
      result: "pointer",
      optional: true,
    },
    GlobalUnWire: {
      parameters: ["isize"],
      result: "i32",
      optional: true,
    },
    LocalShrink: {
      parameters: ["isize", "u32"],
      result: "usize",
      optional: true,
    },
    LocalCompact: {
      parameters: ["u32"],
      result: "usize",
      optional: true,
    },
    SetEnvironmentStringsA: {
      parameters: ["buffer"],
      result: "i32",
      optional: true,
    },
    SetHandleCount: {
      parameters: ["u32"],
      result: "u32",
      optional: true,
    },
    RequestDeviceWakeup: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    CancelDeviceWakeupRequest: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    SetMessageWaitingIndicator: {
      parameters: ["pointer", "u32"],
      result: "i32",
      optional: true,
    },
    MulDiv: {
      parameters: ["i32", "i32", "i32"],
      result: "i32",
      optional: true,
    },
    GetSystemRegistryQuota: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    FileTimeToDosDateTime: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    DosDateTimeToFileTime: {
      parameters: ["u16", "u16", "pointer"],
      result: "i32",
      optional: true,
    },
    _lopen: {
      parameters: ["buffer", "i32"],
      result: "i32",
      optional: true,
    },
    _lcreat: {
      parameters: ["buffer", "i32"],
      result: "i32",
      optional: true,
    },
    _lread: {
      parameters: ["i32", "pointer", "u32"],
      result: "u32",
      optional: true,
    },
    _lwrite: {
      parameters: ["i32", "buffer", "u32"],
      result: "u32",
      optional: true,
    },
    _hread: {
      parameters: ["i32", "pointer", "i32"],
      result: "i32",
      optional: true,
    },
    _hwrite: {
      parameters: ["i32", "buffer", "i32"],
      result: "i32",
      optional: true,
    },
    _lclose: {
      parameters: ["i32"],
      result: "i32",
      optional: true,
    },
    _llseek: {
      parameters: ["i32", "i32", "i32"],
      result: "i32",
      optional: true,
    },
    SignalObjectAndWait: {
      parameters: ["pointer", "pointer", "u32", "i32"],
      result: "u32",
      optional: true,
    },
    OpenMutexA: {
      parameters: ["u32", "i32", "buffer"],
      result: "pointer",
      optional: true,
    },
    OpenSemaphoreA: {
      parameters: ["u32", "i32", "buffer"],
      result: "pointer",
      optional: true,
    },
    CreateWaitableTimerA: {
      parameters: ["pointer", "i32", "buffer"],
      result: "pointer",
      optional: true,
    },
    OpenWaitableTimerA: {
      parameters: ["u32", "i32", "buffer"],
      result: "pointer",
      optional: true,
    },
    CreateWaitableTimerExA: {
      parameters: ["pointer", "buffer", "u32", "u32"],
      result: "pointer",
      optional: true,
    },
    GetFirmwareEnvironmentVariableA: {
      parameters: ["buffer", "buffer", "pointer", "u32"],
      result: "u32",
      optional: true,
    },
    GetFirmwareEnvironmentVariableW: {
      parameters: ["buffer", "buffer", "pointer", "u32"],
      result: "u32",
      optional: true,
    },
    GetFirmwareEnvironmentVariableExA: {
      parameters: ["buffer", "buffer", "pointer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    GetFirmwareEnvironmentVariableExW: {
      parameters: ["buffer", "buffer", "pointer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    SetFirmwareEnvironmentVariableA: {
      parameters: ["buffer", "buffer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    SetFirmwareEnvironmentVariableW: {
      parameters: ["buffer", "buffer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    SetFirmwareEnvironmentVariableExA: {
      parameters: ["buffer", "buffer", "pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    SetFirmwareEnvironmentVariableExW: {
      parameters: ["buffer", "buffer", "pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    IsNativeVhdBoot: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    GetProfileIntA: {
      parameters: ["buffer", "buffer", "i32"],
      result: "u32",
      optional: true,
    },
    GetProfileIntW: {
      parameters: ["buffer", "buffer", "i32"],
      result: "u32",
      optional: true,
    },
    GetProfileStringA: {
      parameters: ["buffer", "buffer", "buffer", "buffer", "u32"],
      result: "u32",
      optional: true,
    },
    GetProfileStringW: {
      parameters: ["buffer", "buffer", "buffer", "buffer", "u32"],
      result: "u32",
      optional: true,
    },
    WriteProfileStringA: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "i32",
      optional: true,
    },
    WriteProfileStringW: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "i32",
      optional: true,
    },
    GetProfileSectionA: {
      parameters: ["buffer", "buffer", "u32"],
      result: "u32",
      optional: true,
    },
    GetProfileSectionW: {
      parameters: ["buffer", "buffer", "u32"],
      result: "u32",
      optional: true,
    },
    WriteProfileSectionA: {
      parameters: ["buffer", "buffer"],
      result: "i32",
      optional: true,
    },
    WriteProfileSectionW: {
      parameters: ["buffer", "buffer"],
      result: "i32",
      optional: true,
    },
    GetPrivateProfileIntA: {
      parameters: ["buffer", "buffer", "i32", "buffer"],
      result: "u32",
      optional: true,
    },
    GetPrivateProfileIntW: {
      parameters: ["buffer", "buffer", "i32", "buffer"],
      result: "u32",
      optional: true,
    },
    GetPrivateProfileStringA: {
      parameters: ["buffer", "buffer", "buffer", "buffer", "u32", "buffer"],
      result: "u32",
      optional: true,
    },
    GetPrivateProfileStringW: {
      parameters: ["buffer", "buffer", "buffer", "buffer", "u32", "buffer"],
      result: "u32",
      optional: true,
    },
    WritePrivateProfileStringA: {
      parameters: ["buffer", "buffer", "buffer", "buffer"],
      result: "i32",
      optional: true,
    },
    WritePrivateProfileStringW: {
      parameters: ["buffer", "buffer", "buffer", "buffer"],
      result: "i32",
      optional: true,
    },
    GetPrivateProfileSectionA: {
      parameters: ["buffer", "buffer", "u32", "buffer"],
      result: "u32",
      optional: true,
    },
    GetPrivateProfileSectionW: {
      parameters: ["buffer", "buffer", "u32", "buffer"],
      result: "u32",
      optional: true,
    },
    WritePrivateProfileSectionA: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "i32",
      optional: true,
    },
    WritePrivateProfileSectionW: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "i32",
      optional: true,
    },
    GetPrivateProfileSectionNamesA: {
      parameters: ["buffer", "u32", "buffer"],
      result: "u32",
      optional: true,
    },
    GetPrivateProfileSectionNamesW: {
      parameters: ["buffer", "u32", "buffer"],
      result: "u32",
      optional: true,
    },
    GetPrivateProfileStructA: {
      parameters: ["buffer", "buffer", "pointer", "u32", "buffer"],
      result: "i32",
      optional: true,
    },
    GetPrivateProfileStructW: {
      parameters: ["buffer", "buffer", "pointer", "u32", "buffer"],
      result: "i32",
      optional: true,
    },
    WritePrivateProfileStructA: {
      parameters: ["buffer", "buffer", "pointer", "u32", "buffer"],
      result: "i32",
      optional: true,
    },
    WritePrivateProfileStructW: {
      parameters: ["buffer", "buffer", "pointer", "u32", "buffer"],
      result: "i32",
      optional: true,
    },
    IsBadHugeReadPtr: {
      parameters: ["pointer", "usize"],
      result: "i32",
      optional: true,
    },
    IsBadHugeWritePtr: {
      parameters: ["pointer", "usize"],
      result: "i32",
      optional: true,
    },
    GetComputerNameA: {
      parameters: ["buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    GetComputerNameW: {
      parameters: ["buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    DnsHostnameToComputerNameA: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    DnsHostnameToComputerNameW: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    CancelTimerQueueTimer: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    ReplacePartitionUnit: {
      parameters: ["buffer", "buffer", "u32"],
      result: "i32",
      optional: true,
    },
    GetThreadEnabledXStateFeatures: {
      parameters: [],
      result: "u64",
      optional: true,
    },
    EnableProcessOptionalXStateFeatures: {
      parameters: ["u64"],
      result: "i32",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libntdll_dll = Deno.dlopen("ntdll.dll", {
    RtlGetReturnAddressHijackTarget: {
      parameters: [],
      result: "usize",
      optional: true,
    },
    RtlRaiseCustomSystemEventTrigger: {
      parameters: ["pointer"],
      result: "u32",
      optional: true,
    },
    NtClose: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    NtOpenFile: {
      parameters: ["pointer", "u32", "pointer", "pointer", "u32", "u32"],
      result: "pointer",
      optional: true,
    },
    NtRenameKey: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    NtNotifyChangeMultipleKeys: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "pointer", "pointer", "u32", "pointer", "pointer", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    NtQueryMultipleValueKey: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    NtSetInformationKey: {
      parameters: ["pointer", "i32", "pointer", "u32"],
      result: "pointer",
      optional: true,
    },
    NtDeviceIoControlFile: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "u32", "pointer", "u32", "pointer", "u32"],
      result: "pointer",
      optional: true,
    },
    NtWaitForSingleObject: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    RtlIsNameLegalDOS8Dot3: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    NtQueryObject: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    NtQuerySystemInformation: {
      parameters: ["i32", "pointer", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    NtQuerySystemTime: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    NtQueryTimerResolution: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    RtlLocalTimeToSystemTime: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    RtlTimeToSecondsSince1970: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    RtlFreeAnsiString: {
      parameters: ["pointer"],
      result: "void",
      optional: true,
    },
    RtlFreeUnicodeString: {
      parameters: ["pointer"],
      result: "void",
      optional: true,
    },
    RtlFreeOemString: {
      parameters: ["pointer"],
      result: "void",
      optional: true,
    },
    RtlInitString: {
      parameters: ["pointer", "pointer"],
      result: "void",
      optional: true,
    },
    RtlInitStringEx: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    RtlInitAnsiString: {
      parameters: ["pointer", "pointer"],
      result: "void",
      optional: true,
    },
    RtlInitAnsiStringEx: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    RtlInitUnicodeString: {
      parameters: ["pointer", "buffer"],
      result: "void",
      optional: true,
    },
    RtlAnsiStringToUnicodeString: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    RtlUnicodeStringToAnsiString: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    RtlUnicodeStringToOemString: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    RtlUnicodeToMultiByteSize: {
      parameters: ["pointer", "buffer", "u32"],
      result: "pointer",
      optional: true,
    },
    RtlCharToInteger: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    RtlUniform: {
      parameters: ["pointer"],
      result: "u32",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_apiquery_l2_1_0_dll = Deno.dlopen("api-ms-win-core-apiquery-l2-1-0.dll", {
    IsApiSetImplemented: {
      parameters: ["buffer"],
      result: "i32",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_realtime_l1_1_1_dll = Deno.dlopen("api-ms-win-core-realtime-l1-1-1.dll", {
    QueryInterruptTimePrecise: {
      parameters: ["pointer"],
      result: "void",
      optional: true,
    },
    QueryUnbiasedInterruptTimePrecise: {
      parameters: ["pointer"],
      result: "void",
      optional: true,
    },
    QueryInterruptTime: {
      parameters: ["pointer"],
      result: "void",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_realtime_l1_1_2_dll = Deno.dlopen("api-ms-win-core-realtime-l1-1-2.dll", {
    QueryAuxiliaryCounterFrequency: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    ConvertAuxiliaryCounterToPerformanceCounter: {
      parameters: ["u64", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    ConvertPerformanceCounterToAuxiliaryCounter: {
      parameters: ["u64", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libADVAPI32_dll = Deno.dlopen("ADVAPI32.dll", {
    GetUserNameA: {
      parameters: ["buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    GetUserNameW: {
      parameters: ["buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    IsTokenUntrusted: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    GetCurrentHwProfileA: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    GetCurrentHwProfileW: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_backgroundtask_l1_1_0_dll = Deno.dlopen("api-ms-win-core-backgroundtask-l1-1-0.dll", {
    RaiseCustomSystemEventTrigger: {
      parameters: ["pointer"],
      result: "u32",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_featurestaging_l1_1_0_dll = Deno.dlopen("api-ms-win-core-featurestaging-l1-1-0.dll", {
    GetFeatureEnabledState: {
      parameters: ["u32", "i32"],
      result: "i32",
      optional: true,
    },
    RecordFeatureUsage: {
      parameters: ["u32", "u32", "u32", "buffer"],
      result: "void",
      optional: true,
    },
    RecordFeatureError: {
      parameters: ["u32", "pointer"],
      result: "void",
      optional: true,
    },
    SubscribeFeatureStateChangeNotification: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
      optional: true,
    },
    UnsubscribeFeatureStateChangeNotification: {
      parameters: ["pointer"],
      result: "void",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_featurestaging_l1_1_1_dll = Deno.dlopen("api-ms-win-core-featurestaging-l1-1-1.dll", {
    GetFeatureVariant: {
      parameters: ["u32", "i32", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libDCIMAN32_dll = Deno.dlopen("DCIMAN32.dll", {
    DCIOpenProvider: {
      parameters: [],
      result: "pointer",
      optional: true,
    },
    DCICloseProvider: {
      parameters: ["pointer"],
      result: "void",
      optional: true,
    },
    DCICreatePrimary: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    DCICreateOffscreen: {
      parameters: ["pointer", "u32", "u32", "u32", "u32", "u32", "u32", "u32", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    DCICreateOverlay: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    DCIEnum: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    DCISetSrcDestClip: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    WinWatchOpen: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    WinWatchClose: {
      parameters: ["pointer"],
      result: "void",
      optional: true,
    },
    WinWatchGetClipList: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    WinWatchDidStatusChange: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    GetWindowRegionData: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    GetDCRegionData: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    WinWatchNotify: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    DCIEndAccess: {
      parameters: ["pointer"],
      result: "void",
      optional: true,
    },
    DCIBeginAccess: {
      parameters: ["pointer", "i32", "i32", "i32", "i32"],
      result: "i32",
      optional: true,
    },
    DCIDestroy: {
      parameters: ["pointer"],
      result: "void",
      optional: true,
    },
    DCIDraw: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    DCISetClipList: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    DCISetDestination: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_dx_d3dkmt_l1_1_0_dll = Deno.dlopen("api-ms-win-dx-d3dkmt-l1-1-0.dll", {
    GdiEntry13: {
      parameters: [],
      result: "u32",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libADVPACK_dll = Deno.dlopen("ADVPACK.dll", {
    RunSetupCommandA: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "buffer", "pointer", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    RunSetupCommandW: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "buffer", "pointer", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    NeedRebootInit: {
      parameters: [],
      result: "u32",
      optional: true,
    },
    NeedReboot: {
      parameters: ["u32"],
      result: "i32",
      optional: true,
    },
    RebootCheckOnInstallA: {
      parameters: ["pointer", "buffer", "buffer", "u32"],
      result: "pointer",
      optional: true,
    },
    RebootCheckOnInstallW: {
      parameters: ["pointer", "buffer", "buffer", "u32"],
      result: "pointer",
      optional: true,
    },
    TranslateInfStringA: {
      parameters: ["buffer", "buffer", "buffer", "buffer", "buffer", "u32", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    TranslateInfStringW: {
      parameters: ["buffer", "buffer", "buffer", "buffer", "buffer", "u32", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    RegInstallA: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
      optional: true,
    },
    RegInstallW: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
      optional: true,
    },
    LaunchINFSectionExW: {
      parameters: ["pointer", "pointer", "buffer", "i32"],
      result: "pointer",
      optional: true,
    },
    ExecuteCabA: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    ExecuteCabW: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    AdvInstallFileA: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "buffer", "u32", "u32"],
      result: "pointer",
      optional: true,
    },
    AdvInstallFileW: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "buffer", "u32", "u32"],
      result: "pointer",
      optional: true,
    },
    RegSaveRestoreA: {
      parameters: ["pointer", "buffer", "pointer", "buffer", "buffer", "buffer", "u32"],
      result: "pointer",
      optional: true,
    },
    RegSaveRestoreW: {
      parameters: ["pointer", "buffer", "pointer", "buffer", "buffer", "buffer", "u32"],
      result: "pointer",
      optional: true,
    },
    RegSaveRestoreOnINFA: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "pointer", "pointer", "u32"],
      result: "pointer",
      optional: true,
    },
    RegSaveRestoreOnINFW: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "pointer", "pointer", "u32"],
      result: "pointer",
      optional: true,
    },
    RegRestoreAllA: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
      optional: true,
    },
    RegRestoreAllW: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
      optional: true,
    },
    FileSaveRestoreW: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "u32"],
      result: "pointer",
      optional: true,
    },
    FileSaveRestoreOnINFA: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "buffer", "buffer", "u32"],
      result: "pointer",
      optional: true,
    },
    FileSaveRestoreOnINFW: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "buffer", "buffer", "u32"],
      result: "pointer",
      optional: true,
    },
    AddDelBackupEntryA: {
      parameters: ["buffer", "buffer", "buffer", "u32"],
      result: "pointer",
      optional: true,
    },
    AddDelBackupEntryW: {
      parameters: ["buffer", "buffer", "buffer", "u32"],
      result: "pointer",
      optional: true,
    },
    FileSaveMarkNotExistA: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "pointer",
      optional: true,
    },
    FileSaveMarkNotExistW: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "pointer",
      optional: true,
    },
    GetVersionFromFileA: {
      parameters: ["buffer", "pointer", "pointer", "i32"],
      result: "pointer",
      optional: true,
    },
    GetVersionFromFileW: {
      parameters: ["buffer", "pointer", "pointer", "i32"],
      result: "pointer",
      optional: true,
    },
    GetVersionFromFileExA: {
      parameters: ["buffer", "pointer", "pointer", "i32"],
      result: "pointer",
      optional: true,
    },
    GetVersionFromFileExW: {
      parameters: ["buffer", "pointer", "pointer", "i32"],
      result: "pointer",
      optional: true,
    },
    IsNTAdmin: {
      parameters: ["u32", "pointer"],
      result: "i32",
      optional: true,
    },
    DelNodeA: {
      parameters: ["buffer", "u32"],
      result: "pointer",
      optional: true,
    },
    DelNodeW: {
      parameters: ["buffer", "u32"],
      result: "pointer",
      optional: true,
    },
    DelNodeRunDLL32W: {
      parameters: ["pointer", "pointer", "buffer", "i32"],
      result: "pointer",
      optional: true,
    },
    OpenINFEngineA: {
      parameters: ["buffer", "buffer", "u32", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    OpenINFEngineW: {
      parameters: ["buffer", "buffer", "u32", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    TranslateInfStringExA: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "buffer", "u32", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    TranslateInfStringExW: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "buffer", "u32", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    CloseINFEngine: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    ExtractFilesA: {
      parameters: ["buffer", "buffer", "u32", "buffer", "pointer", "u32"],
      result: "pointer",
      optional: true,
    },
    ExtractFilesW: {
      parameters: ["buffer", "buffer", "u32", "buffer", "pointer", "u32"],
      result: "pointer",
      optional: true,
    },
    LaunchINFSectionW: {
      parameters: ["pointer", "pointer", "buffer", "i32"],
      result: "i32",
      optional: true,
    },
    UserInstStubWrapperA: {
      parameters: ["pointer", "pointer", "buffer", "i32"],
      result: "pointer",
      optional: true,
    },
    UserInstStubWrapperW: {
      parameters: ["pointer", "pointer", "buffer", "i32"],
      result: "pointer",
      optional: true,
    },
    UserUnInstStubWrapperA: {
      parameters: ["pointer", "pointer", "buffer", "i32"],
      result: "pointer",
      optional: true,
    },
    UserUnInstStubWrapperW: {
      parameters: ["pointer", "pointer", "buffer", "i32"],
      result: "pointer",
      optional: true,
    },
    SetPerUserSecValuesA: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    SetPerUserSecValuesW: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libUSER32_dll = Deno.dlopen("USER32.dll", {
    SendIMEMessageExA: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    SendIMEMessageExW: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    IMPGetIMEA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    IMPGetIMEW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    IMPQueryIMEA: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    IMPQueryIMEW: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    IMPSetIMEA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    IMPSetIMEW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    WINNLSGetIMEHotkey: {
      parameters: ["pointer"],
      result: "u32",
      optional: true,
    },
    WINNLSEnableIME: {
      parameters: ["pointer", "i32"],
      result: "i32",
      optional: true,
    },
    WINNLSGetEnableStatus: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libAPPHELP_dll = Deno.dlopen("APPHELP.dll", {
    ApphelpCheckShellObject: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libWldp_dll = Deno.dlopen("Wldp.dll", {
    WldpGetLockdownPolicy: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
      optional: true,
    },
    WldpIsClassInApprovedList: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "pointer",
      optional: true,
    },
    WldpSetDynamicCodeTrust: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    WldpIsDynamicCodePolicyEnabled: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    WldpQueryDynamicCodeTrust: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
      optional: true,
    },
    WldpQueryDeviceSecurityInformation: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function uaw_lstrcmpW(
  String1: Deno.PointerValue | Uint8Array /* ptr */,
  String2: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libKERNEL32_dll.uaw_lstrcmpW!(util.toPointer(String1), util.toPointer(String2));
}

export function uaw_lstrcmpiW(
  String1: Deno.PointerValue | Uint8Array /* ptr */,
  String2: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libKERNEL32_dll.uaw_lstrcmpiW!(util.toPointer(String1), util.toPointer(String2));
}

export function uaw_lstrlenW(
  String: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libKERNEL32_dll.uaw_lstrlenW!(util.toPointer(String));
}

export function uaw_wcschr(
  String: Deno.PointerValue | Uint8Array /* ptr */,
  Character: Uint8Array | Deno.PointerValue /* char */,
): Deno.PointerValue /* ptr */ {
  return libKERNEL32_dll.uaw_wcschr!(util.toPointer(String), util.toPointer(Character));
}

export function uaw_wcscpy(
  Destination: Deno.PointerValue | Uint8Array /* ptr */,
  Source: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libKERNEL32_dll.uaw_wcscpy!(util.toPointer(Destination), util.toPointer(Source));
}

export function uaw_wcsicmp(
  String1: Deno.PointerValue | Uint8Array /* ptr */,
  String2: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libKERNEL32_dll.uaw_wcsicmp!(util.toPointer(String1), util.toPointer(String2));
}

export function uaw_wcslen(
  String: Deno.PointerValue | Uint8Array /* ptr */,
): bigint | number /* usize */ {
  return libKERNEL32_dll.uaw_wcslen!(util.toPointer(String));
}

export function uaw_wcsrchr(
  String: Deno.PointerValue | Uint8Array /* ptr */,
  Character: Uint8Array | Deno.PointerValue /* char */,
): Deno.PointerValue /* ptr */ {
  return libKERNEL32_dll.uaw_wcsrchr!(util.toPointer(String), util.toPointer(Character));
}

export function RtlGetReturnAddressHijackTarget(): bigint | number /* usize */ {
  return libntdll_dll.RtlGetReturnAddressHijackTarget!();
}

export function RtlRaiseCustomSystemEventTrigger(
  TriggerConfig: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libntdll_dll.RtlRaiseCustomSystemEventTrigger!(util.toPointer(TriggerConfig));
}

export function IsApiSetImplemented(
  Contract: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libapi_ms_win_core_apiquery_l2_1_0_dll.IsApiSetImplemented!(util.pstrToFfi(Contract)));
}

export function QueryThreadCycleTime(
  ThreadHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  CycleTime: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.QueryThreadCycleTime!(util.toPointer(ThreadHandle), util.toPointer(CycleTime)));
}

export function QueryProcessCycleTime(
  ProcessHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  CycleTime: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.QueryProcessCycleTime!(util.toPointer(ProcessHandle), util.toPointer(CycleTime)));
}

export function QueryIdleProcessorCycleTime(
  BufferLength: Deno.PointerValue | Uint8Array /* ptr */,
  ProcessorIdleCycleTime: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.QueryIdleProcessorCycleTime!(util.toPointer(BufferLength), util.toPointer(ProcessorIdleCycleTime)));
}

export function QueryIdleProcessorCycleTimeEx(
  Group: number /* u16 */,
  BufferLength: Deno.PointerValue | Uint8Array /* ptr */,
  ProcessorIdleCycleTime: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.QueryIdleProcessorCycleTimeEx!(Group, util.toPointer(BufferLength), util.toPointer(ProcessorIdleCycleTime)));
}

export function QueryInterruptTimePrecise(
  lpInterruptTimePrecise: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libapi_ms_win_core_realtime_l1_1_1_dll.QueryInterruptTimePrecise!(util.toPointer(lpInterruptTimePrecise));
}

export function QueryUnbiasedInterruptTimePrecise(
  lpUnbiasedInterruptTimePrecise: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libapi_ms_win_core_realtime_l1_1_1_dll.QueryUnbiasedInterruptTimePrecise!(util.toPointer(lpUnbiasedInterruptTimePrecise));
}

export function QueryInterruptTime(
  lpInterruptTime: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libapi_ms_win_core_realtime_l1_1_1_dll.QueryInterruptTime!(util.toPointer(lpInterruptTime));
}

export function QueryUnbiasedInterruptTime(
  UnbiasedTime: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.QueryUnbiasedInterruptTime!(util.toPointer(UnbiasedTime)));
}

export function QueryAuxiliaryCounterFrequency(
  lpAuxiliaryCounterFrequency: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_realtime_l1_1_2_dll.QueryAuxiliaryCounterFrequency!(util.toPointer(lpAuxiliaryCounterFrequency));
}

export function ConvertAuxiliaryCounterToPerformanceCounter(
  ullAuxiliaryCounterValue: bigint | number /* u64 */,
  lpPerformanceCounterValue: Deno.PointerValue | Uint8Array /* ptr */,
  lpConversionError: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_realtime_l1_1_2_dll.ConvertAuxiliaryCounterToPerformanceCounter!(ullAuxiliaryCounterValue, util.toPointer(lpPerformanceCounterValue), util.toPointer(lpConversionError));
}

export function ConvertPerformanceCounterToAuxiliaryCounter(
  ullPerformanceCounterValue: bigint | number /* u64 */,
  lpAuxiliaryCounterValue: Deno.PointerValue | Uint8Array /* ptr */,
  lpConversionError: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_realtime_l1_1_2_dll.ConvertPerformanceCounterToAuxiliaryCounter!(ullPerformanceCounterValue, util.toPointer(lpAuxiliaryCounterValue), util.toPointer(lpConversionError));
}

export function GlobalCompact(
  dwMinFree: number /* u32 */,
): bigint | number /* usize */ {
  return libKERNEL32_dll.GlobalCompact!(dwMinFree);
}

export function GlobalFix(
  hMem: bigint | number /* isize */,
): void /* void */ {
  return libKERNEL32_dll.GlobalFix!(hMem);
}

export function GlobalUnfix(
  hMem: bigint | number /* isize */,
): void /* void */ {
  return libKERNEL32_dll.GlobalUnfix!(hMem);
}

export function GlobalWire(
  hMem: bigint | number /* isize */,
): Deno.PointerValue /* ptr */ {
  return libKERNEL32_dll.GlobalWire!(hMem);
}

export function GlobalUnWire(
  hMem: bigint | number /* isize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GlobalUnWire!(hMem));
}

export function LocalShrink(
  hMem: bigint | number /* isize */,
  cbNewSize: number /* u32 */,
): bigint | number /* usize */ {
  return libKERNEL32_dll.LocalShrink!(hMem, cbNewSize);
}

export function LocalCompact(
  uMinFree: number /* u32 */,
): bigint | number /* usize */ {
  return libKERNEL32_dll.LocalCompact!(uMinFree);
}

export function SetEnvironmentStringsA(
  NewEnvironment: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetEnvironmentStringsA!(util.pstrToFfi(NewEnvironment)));
}

export function SetHandleCount(
  uNumber: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.SetHandleCount!(uNumber);
}

export function RequestDeviceWakeup(
  hDevice: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.RequestDeviceWakeup!(util.toPointer(hDevice)));
}

export function CancelDeviceWakeupRequest(
  hDevice: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.CancelDeviceWakeupRequest!(util.toPointer(hDevice)));
}

export function SetMessageWaitingIndicator(
  hMsgIndicator: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  ulMsgCount: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetMessageWaitingIndicator!(util.toPointer(hMsgIndicator), ulMsgCount));
}

export function MulDiv(
  nNumber: number /* i32 */,
  nNumerator: number /* i32 */,
  nDenominator: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32_dll.MulDiv!(nNumber, nNumerator, nDenominator);
}

export function GetSystemRegistryQuota(
  pdwQuotaAllowed: Deno.PointerValue | Uint8Array /* ptr */,
  pdwQuotaUsed: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetSystemRegistryQuota!(util.toPointer(pdwQuotaAllowed), util.toPointer(pdwQuotaUsed)));
}

export function FileTimeToDosDateTime(
  lpFileTime: Deno.PointerValue | Uint8Array /* ptr */,
  lpFatDate: Deno.PointerValue | Uint8Array /* ptr */,
  lpFatTime: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.FileTimeToDosDateTime!(util.toPointer(lpFileTime), util.toPointer(lpFatDate), util.toPointer(lpFatTime)));
}

export function DosDateTimeToFileTime(
  wFatDate: number /* u16 */,
  wFatTime: number /* u16 */,
  lpFileTime: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.DosDateTimeToFileTime!(wFatDate, wFatTime, util.toPointer(lpFileTime)));
}

export function _lopen(
  lpPathName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  iReadWrite: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32_dll._lopen!(util.pstrToFfi(lpPathName), iReadWrite);
}

export function _lcreat(
  lpPathName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  iAttribute: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32_dll._lcreat!(util.pstrToFfi(lpPathName), iAttribute);
}

export function _lread(
  hFile: number /* i32 */,
  lpBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  uBytes: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll._lread!(hFile, util.toPointer(lpBuffer), uBytes);
}

export function _lwrite(
  hFile: number /* i32 */,
  lpBuffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  uBytes: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll._lwrite!(hFile, util.pstrToFfi(lpBuffer), uBytes);
}

export function _hread(
  hFile: number /* i32 */,
  lpBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  lBytes: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32_dll._hread!(hFile, util.toPointer(lpBuffer), lBytes);
}

export function _hwrite(
  hFile: number /* i32 */,
  lpBuffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lBytes: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32_dll._hwrite!(hFile, util.pstrToFfi(lpBuffer), lBytes);
}

export function _lclose(
  hFile: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32_dll._lclose!(hFile);
}

export function _llseek(
  hFile: number /* i32 */,
  lOffset: number /* i32 */,
  iOrigin: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32_dll._llseek!(hFile, lOffset, iOrigin);
}

export function SignalObjectAndWait(
  hObjectToSignal: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  hObjectToWaitOn: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  dwMilliseconds: number /* u32 */,
  bAlertable: boolean /* Windows.Win32.Foundation.BOOL */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libKERNEL32_dll.SignalObjectAndWait!(util.toPointer(hObjectToSignal), util.toPointer(hObjectToWaitOn), dwMilliseconds, util.boolToFfi(bAlertable));
}

export function OpenMutexA(
  dwDesiredAccess: number /* u32 */,
  bInheritHandle: boolean /* Windows.Win32.Foundation.BOOL */,
  lpName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libKERNEL32_dll.OpenMutexA!(dwDesiredAccess, util.boolToFfi(bInheritHandle), util.pstrToFfi(lpName));
}

export function OpenSemaphoreA(
  dwDesiredAccess: number /* u32 */,
  bInheritHandle: boolean /* Windows.Win32.Foundation.BOOL */,
  lpName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libKERNEL32_dll.OpenSemaphoreA!(dwDesiredAccess, util.boolToFfi(bInheritHandle), util.pstrToFfi(lpName));
}

export function CreateWaitableTimerA(
  lpTimerAttributes: Deno.PointerValue | Uint8Array /* ptr */,
  bManualReset: boolean /* Windows.Win32.Foundation.BOOL */,
  lpTimerName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libKERNEL32_dll.CreateWaitableTimerA!(util.toPointer(lpTimerAttributes), util.boolToFfi(bManualReset), util.pstrToFfi(lpTimerName));
}

export function OpenWaitableTimerA(
  dwDesiredAccess: number /* u32 */,
  bInheritHandle: boolean /* Windows.Win32.Foundation.BOOL */,
  lpTimerName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libKERNEL32_dll.OpenWaitableTimerA!(dwDesiredAccess, util.boolToFfi(bInheritHandle), util.pstrToFfi(lpTimerName));
}

export function CreateWaitableTimerExA(
  lpTimerAttributes: Deno.PointerValue | Uint8Array /* ptr */,
  lpTimerName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
  dwDesiredAccess: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libKERNEL32_dll.CreateWaitableTimerExA!(util.toPointer(lpTimerAttributes), util.pstrToFfi(lpTimerName), dwFlags, dwDesiredAccess);
}

export function GetFirmwareEnvironmentVariableA(
  lpName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpGuid: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  nSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.GetFirmwareEnvironmentVariableA!(util.pstrToFfi(lpName), util.pstrToFfi(lpGuid), util.toPointer(pBuffer), nSize);
}

export function GetFirmwareEnvironmentVariableW(
  lpName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpGuid: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  nSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.GetFirmwareEnvironmentVariableW!(util.pwstrToFfi(lpName), util.pwstrToFfi(lpGuid), util.toPointer(pBuffer), nSize);
}

export function GetFirmwareEnvironmentVariableExA(
  lpName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpGuid: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  nSize: number /* u32 */,
  pdwAttribubutes: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libKERNEL32_dll.GetFirmwareEnvironmentVariableExA!(util.pstrToFfi(lpName), util.pstrToFfi(lpGuid), util.toPointer(pBuffer), nSize, util.toPointer(pdwAttribubutes));
}

export function GetFirmwareEnvironmentVariableExW(
  lpName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpGuid: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  nSize: number /* u32 */,
  pdwAttribubutes: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libKERNEL32_dll.GetFirmwareEnvironmentVariableExW!(util.pwstrToFfi(lpName), util.pwstrToFfi(lpGuid), util.toPointer(pBuffer), nSize, util.toPointer(pdwAttribubutes));
}

export function SetFirmwareEnvironmentVariableA(
  lpName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpGuid: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pValue: Deno.PointerValue | Uint8Array /* ptr */,
  nSize: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetFirmwareEnvironmentVariableA!(util.pstrToFfi(lpName), util.pstrToFfi(lpGuid), util.toPointer(pValue), nSize));
}

export function SetFirmwareEnvironmentVariableW(
  lpName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpGuid: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pValue: Deno.PointerValue | Uint8Array /* ptr */,
  nSize: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetFirmwareEnvironmentVariableW!(util.pwstrToFfi(lpName), util.pwstrToFfi(lpGuid), util.toPointer(pValue), nSize));
}

export function SetFirmwareEnvironmentVariableExA(
  lpName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpGuid: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pValue: Deno.PointerValue | Uint8Array /* ptr */,
  nSize: number /* u32 */,
  dwAttributes: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetFirmwareEnvironmentVariableExA!(util.pstrToFfi(lpName), util.pstrToFfi(lpGuid), util.toPointer(pValue), nSize, dwAttributes));
}

export function SetFirmwareEnvironmentVariableExW(
  lpName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpGuid: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pValue: Deno.PointerValue | Uint8Array /* ptr */,
  nSize: number /* u32 */,
  dwAttributes: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetFirmwareEnvironmentVariableExW!(util.pwstrToFfi(lpName), util.pwstrToFfi(lpGuid), util.toPointer(pValue), nSize, dwAttributes));
}

export function IsNativeVhdBoot(
  NativeVhdBoot: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.IsNativeVhdBoot!(util.toPointer(NativeVhdBoot)));
}

export function GetProfileIntA(
  lpAppName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpKeyName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nDefault: number /* i32 */,
): number /* u32 */ {
  return libKERNEL32_dll.GetProfileIntA!(util.pstrToFfi(lpAppName), util.pstrToFfi(lpKeyName), nDefault);
}

export function GetProfileIntW(
  lpAppName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpKeyName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nDefault: number /* i32 */,
): number /* u32 */ {
  return libKERNEL32_dll.GetProfileIntW!(util.pwstrToFfi(lpAppName), util.pwstrToFfi(lpKeyName), nDefault);
}

export function GetProfileStringA(
  lpAppName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpKeyName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpDefault: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpReturnedString: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.GetProfileStringA!(util.pstrToFfi(lpAppName), util.pstrToFfi(lpKeyName), util.pstrToFfi(lpDefault), util.pstrToFfi(lpReturnedString), nSize);
}

export function GetProfileStringW(
  lpAppName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpKeyName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpDefault: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpReturnedString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.GetProfileStringW!(util.pwstrToFfi(lpAppName), util.pwstrToFfi(lpKeyName), util.pwstrToFfi(lpDefault), util.pwstrToFfi(lpReturnedString), nSize);
}

export function WriteProfileStringA(
  lpAppName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpKeyName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpString: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.WriteProfileStringA!(util.pstrToFfi(lpAppName), util.pstrToFfi(lpKeyName), util.pstrToFfi(lpString)));
}

export function WriteProfileStringW(
  lpAppName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpKeyName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.WriteProfileStringW!(util.pwstrToFfi(lpAppName), util.pwstrToFfi(lpKeyName), util.pwstrToFfi(lpString)));
}

export function GetProfileSectionA(
  lpAppName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpReturnedString: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.GetProfileSectionA!(util.pstrToFfi(lpAppName), util.pstrToFfi(lpReturnedString), nSize);
}

export function GetProfileSectionW(
  lpAppName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpReturnedString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.GetProfileSectionW!(util.pwstrToFfi(lpAppName), util.pwstrToFfi(lpReturnedString), nSize);
}

export function WriteProfileSectionA(
  lpAppName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpString: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.WriteProfileSectionA!(util.pstrToFfi(lpAppName), util.pstrToFfi(lpString)));
}

export function WriteProfileSectionW(
  lpAppName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.WriteProfileSectionW!(util.pwstrToFfi(lpAppName), util.pwstrToFfi(lpString)));
}

export function GetPrivateProfileIntA(
  lpAppName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpKeyName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nDefault: number /* i32 */,
  lpFileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libKERNEL32_dll.GetPrivateProfileIntA!(util.pstrToFfi(lpAppName), util.pstrToFfi(lpKeyName), nDefault, util.pstrToFfi(lpFileName));
}

export function GetPrivateProfileIntW(
  lpAppName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpKeyName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nDefault: number /* i32 */,
  lpFileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libKERNEL32_dll.GetPrivateProfileIntW!(util.pwstrToFfi(lpAppName), util.pwstrToFfi(lpKeyName), nDefault, util.pwstrToFfi(lpFileName));
}

export function GetPrivateProfileStringA(
  lpAppName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpKeyName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpDefault: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpReturnedString: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nSize: number /* u32 */,
  lpFileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libKERNEL32_dll.GetPrivateProfileStringA!(util.pstrToFfi(lpAppName), util.pstrToFfi(lpKeyName), util.pstrToFfi(lpDefault), util.pstrToFfi(lpReturnedString), nSize, util.pstrToFfi(lpFileName));
}

export function GetPrivateProfileStringW(
  lpAppName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpKeyName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpDefault: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpReturnedString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nSize: number /* u32 */,
  lpFileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libKERNEL32_dll.GetPrivateProfileStringW!(util.pwstrToFfi(lpAppName), util.pwstrToFfi(lpKeyName), util.pwstrToFfi(lpDefault), util.pwstrToFfi(lpReturnedString), nSize, util.pwstrToFfi(lpFileName));
}

export function WritePrivateProfileStringA(
  lpAppName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpKeyName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpString: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpFileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.WritePrivateProfileStringA!(util.pstrToFfi(lpAppName), util.pstrToFfi(lpKeyName), util.pstrToFfi(lpString), util.pstrToFfi(lpFileName)));
}

export function WritePrivateProfileStringW(
  lpAppName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpKeyName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpFileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.WritePrivateProfileStringW!(util.pwstrToFfi(lpAppName), util.pwstrToFfi(lpKeyName), util.pwstrToFfi(lpString), util.pwstrToFfi(lpFileName)));
}

export function GetPrivateProfileSectionA(
  lpAppName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpReturnedString: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nSize: number /* u32 */,
  lpFileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libKERNEL32_dll.GetPrivateProfileSectionA!(util.pstrToFfi(lpAppName), util.pstrToFfi(lpReturnedString), nSize, util.pstrToFfi(lpFileName));
}

export function GetPrivateProfileSectionW(
  lpAppName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpReturnedString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nSize: number /* u32 */,
  lpFileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libKERNEL32_dll.GetPrivateProfileSectionW!(util.pwstrToFfi(lpAppName), util.pwstrToFfi(lpReturnedString), nSize, util.pwstrToFfi(lpFileName));
}

export function WritePrivateProfileSectionA(
  lpAppName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpString: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpFileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.WritePrivateProfileSectionA!(util.pstrToFfi(lpAppName), util.pstrToFfi(lpString), util.pstrToFfi(lpFileName)));
}

export function WritePrivateProfileSectionW(
  lpAppName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpFileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.WritePrivateProfileSectionW!(util.pwstrToFfi(lpAppName), util.pwstrToFfi(lpString), util.pwstrToFfi(lpFileName)));
}

export function GetPrivateProfileSectionNamesA(
  lpszReturnBuffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nSize: number /* u32 */,
  lpFileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libKERNEL32_dll.GetPrivateProfileSectionNamesA!(util.pstrToFfi(lpszReturnBuffer), nSize, util.pstrToFfi(lpFileName));
}

export function GetPrivateProfileSectionNamesW(
  lpszReturnBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nSize: number /* u32 */,
  lpFileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libKERNEL32_dll.GetPrivateProfileSectionNamesW!(util.pwstrToFfi(lpszReturnBuffer), nSize, util.pwstrToFfi(lpFileName));
}

export function GetPrivateProfileStructA(
  lpszSection: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszKey: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpStruct: Deno.PointerValue | Uint8Array /* ptr */,
  uSizeStruct: number /* u32 */,
  szFile: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetPrivateProfileStructA!(util.pstrToFfi(lpszSection), util.pstrToFfi(lpszKey), util.toPointer(lpStruct), uSizeStruct, util.pstrToFfi(szFile)));
}

export function GetPrivateProfileStructW(
  lpszSection: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszKey: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpStruct: Deno.PointerValue | Uint8Array /* ptr */,
  uSizeStruct: number /* u32 */,
  szFile: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetPrivateProfileStructW!(util.pwstrToFfi(lpszSection), util.pwstrToFfi(lpszKey), util.toPointer(lpStruct), uSizeStruct, util.pwstrToFfi(szFile)));
}

export function WritePrivateProfileStructA(
  lpszSection: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszKey: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpStruct: Deno.PointerValue | Uint8Array /* ptr */,
  uSizeStruct: number /* u32 */,
  szFile: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.WritePrivateProfileStructA!(util.pstrToFfi(lpszSection), util.pstrToFfi(lpszKey), util.toPointer(lpStruct), uSizeStruct, util.pstrToFfi(szFile)));
}

export function WritePrivateProfileStructW(
  lpszSection: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszKey: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpStruct: Deno.PointerValue | Uint8Array /* ptr */,
  uSizeStruct: number /* u32 */,
  szFile: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.WritePrivateProfileStructW!(util.pwstrToFfi(lpszSection), util.pwstrToFfi(lpszKey), util.toPointer(lpStruct), uSizeStruct, util.pwstrToFfi(szFile)));
}

export function IsBadHugeReadPtr(
  lp: Deno.PointerValue | Uint8Array /* ptr */,
  ucb: bigint | number /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.IsBadHugeReadPtr!(util.toPointer(lp), ucb));
}

export function IsBadHugeWritePtr(
  lp: Deno.PointerValue | Uint8Array /* ptr */,
  ucb: bigint | number /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.IsBadHugeWritePtr!(util.toPointer(lp), ucb));
}

export function GetComputerNameA(
  lpBuffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nSize: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetComputerNameA!(util.pstrToFfi(lpBuffer), util.toPointer(nSize)));
}

export function GetComputerNameW(
  lpBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nSize: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetComputerNameW!(util.pwstrToFfi(lpBuffer), util.toPointer(nSize)));
}

export function DnsHostnameToComputerNameA(
  Hostname: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ComputerName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nSize: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.DnsHostnameToComputerNameA!(util.pstrToFfi(Hostname), util.pstrToFfi(ComputerName), util.toPointer(nSize)));
}

export function DnsHostnameToComputerNameW(
  Hostname: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ComputerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nSize: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.DnsHostnameToComputerNameW!(util.pwstrToFfi(Hostname), util.pwstrToFfi(ComputerName), util.toPointer(nSize)));
}

export function GetUserNameA(
  lpBuffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcbBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.GetUserNameA!(util.pstrToFfi(lpBuffer), util.toPointer(pcbBuffer)));
}

export function GetUserNameW(
  lpBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcbBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.GetUserNameW!(util.pwstrToFfi(lpBuffer), util.toPointer(pcbBuffer)));
}

export function IsTokenUntrusted(
  TokenHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.IsTokenUntrusted!(util.toPointer(TokenHandle)));
}

export function CancelTimerQueueTimer(
  TimerQueue: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Timer: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.CancelTimerQueueTimer!(util.toPointer(TimerQueue), util.toPointer(Timer)));
}

export function GetCurrentHwProfileA(
  lpHwProfileInfo: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.GetCurrentHwProfileA!(util.toPointer(lpHwProfileInfo)));
}

export function GetCurrentHwProfileW(
  lpHwProfileInfo: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.GetCurrentHwProfileW!(util.toPointer(lpHwProfileInfo)));
}

export function ReplacePartitionUnit(
  TargetPartition: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SparePartition: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.ReplacePartitionUnit!(util.pwstrToFfi(TargetPartition), util.pwstrToFfi(SparePartition), Flags));
}

export function GetThreadEnabledXStateFeatures(): bigint | number /* u64 */ {
  return libKERNEL32_dll.GetThreadEnabledXStateFeatures!();
}

export function EnableProcessOptionalXStateFeatures(
  Features: bigint | number /* u64 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.EnableProcessOptionalXStateFeatures!(Features));
}

export function RaiseCustomSystemEventTrigger(
  CustomSystemEventTriggerConfig: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libapi_ms_win_core_backgroundtask_l1_1_0_dll.RaiseCustomSystemEventTrigger!(util.toPointer(CustomSystemEventTriggerConfig));
}

export function NtClose(
  Handle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libntdll_dll.NtClose!(util.toPointer(Handle));
}

export function NtOpenFile(
  FileHandle: Deno.PointerValue | Uint8Array /* ptr */,
  DesiredAccess: number /* u32 */,
  ObjectAttributes: Deno.PointerValue | Uint8Array /* ptr */,
  IoStatusBlock: Deno.PointerValue | Uint8Array /* ptr */,
  ShareAccess: number /* u32 */,
  OpenOptions: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libntdll_dll.NtOpenFile!(util.toPointer(FileHandle), DesiredAccess, util.toPointer(ObjectAttributes), util.toPointer(IoStatusBlock), ShareAccess, OpenOptions);
}

export function NtRenameKey(
  KeyHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  NewName: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libntdll_dll.NtRenameKey!(util.toPointer(KeyHandle), util.toPointer(NewName));
}

export function NtNotifyChangeMultipleKeys(
  MasterKeyHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Count: number /* u32 */,
  SubordinateObjects: Deno.PointerValue | Uint8Array /* ptr */,
  Event: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  ApcRoutine: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WindowsProgramming.PIO_APC_ROUTINE */,
  ApcContext: Deno.PointerValue | Uint8Array /* ptr */,
  IoStatusBlock: Deno.PointerValue | Uint8Array /* ptr */,
  CompletionFilter: number /* u32 */,
  WatchTree: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
  BufferSize: number /* u32 */,
  Asynchronous: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libntdll_dll.NtNotifyChangeMultipleKeys!(util.toPointer(MasterKeyHandle), Count, util.toPointer(SubordinateObjects), util.toPointer(Event), util.toPointer(ApcRoutine), util.toPointer(ApcContext), util.toPointer(IoStatusBlock), CompletionFilter, util.toPointer(WatchTree), util.toPointer(Buffer), BufferSize, util.toPointer(Asynchronous));
}

export function NtQueryMultipleValueKey(
  KeyHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  ValueEntries: Deno.PointerValue | Uint8Array /* ptr */,
  EntryCount: number /* u32 */,
  ValueBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  BufferLength: Deno.PointerValue | Uint8Array /* ptr */,
  RequiredBufferLength: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libntdll_dll.NtQueryMultipleValueKey!(util.toPointer(KeyHandle), util.toPointer(ValueEntries), EntryCount, util.toPointer(ValueBuffer), util.toPointer(BufferLength), util.toPointer(RequiredBufferLength));
}

export function NtSetInformationKey(
  KeyHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  KeySetInformationClass: KEY_SET_INFORMATION_CLASS /* Windows.Win32.System.WindowsProgramming.KEY_SET_INFORMATION_CLASS */,
  KeySetInformation: Deno.PointerValue | Uint8Array /* ptr */,
  KeySetInformationLength: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libntdll_dll.NtSetInformationKey!(util.toPointer(KeyHandle), KeySetInformationClass, util.toPointer(KeySetInformation), KeySetInformationLength);
}

export function NtDeviceIoControlFile(
  FileHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Event: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  ApcRoutine: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WindowsProgramming.PIO_APC_ROUTINE */,
  ApcContext: Deno.PointerValue | Uint8Array /* ptr */,
  IoStatusBlock: Deno.PointerValue | Uint8Array /* ptr */,
  IoControlCode: number /* u32 */,
  InputBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  InputBufferLength: number /* u32 */,
  OutputBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  OutputBufferLength: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libntdll_dll.NtDeviceIoControlFile!(util.toPointer(FileHandle), util.toPointer(Event), util.toPointer(ApcRoutine), util.toPointer(ApcContext), util.toPointer(IoStatusBlock), IoControlCode, util.toPointer(InputBuffer), InputBufferLength, util.toPointer(OutputBuffer), OutputBufferLength);
}

export function NtWaitForSingleObject(
  Handle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Alertable: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */,
  Timeout: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libntdll_dll.NtWaitForSingleObject!(util.toPointer(Handle), util.toPointer(Alertable), util.toPointer(Timeout));
}

export function RtlIsNameLegalDOS8Dot3(
  Name: Deno.PointerValue | Uint8Array /* ptr */,
  OemName: Deno.PointerValue | Uint8Array /* ptr */,
  NameContainsSpaces: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libntdll_dll.RtlIsNameLegalDOS8Dot3!(util.toPointer(Name), util.toPointer(OemName), util.toPointer(NameContainsSpaces));
}

export function NtQueryObject(
  Handle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  ObjectInformationClass: OBJECT_INFORMATION_CLASS /* Windows.Win32.System.WindowsProgramming.OBJECT_INFORMATION_CLASS */,
  ObjectInformation: Deno.PointerValue | Uint8Array /* ptr */,
  ObjectInformationLength: number /* u32 */,
  ReturnLength: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libntdll_dll.NtQueryObject!(util.toPointer(Handle), ObjectInformationClass, util.toPointer(ObjectInformation), ObjectInformationLength, util.toPointer(ReturnLength));
}

export function NtQuerySystemInformation(
  SystemInformationClass: SYSTEM_INFORMATION_CLASS /* Windows.Win32.System.WindowsProgramming.SYSTEM_INFORMATION_CLASS */,
  SystemInformation: Deno.PointerValue | Uint8Array /* ptr */,
  SystemInformationLength: number /* u32 */,
  ReturnLength: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libntdll_dll.NtQuerySystemInformation!(SystemInformationClass, util.toPointer(SystemInformation), SystemInformationLength, util.toPointer(ReturnLength));
}

export function NtQuerySystemTime(
  SystemTime: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libntdll_dll.NtQuerySystemTime!(util.toPointer(SystemTime));
}

export function NtQueryTimerResolution(
  MaximumTime: Deno.PointerValue | Uint8Array /* ptr */,
  MinimumTime: Deno.PointerValue | Uint8Array /* ptr */,
  CurrentTime: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libntdll_dll.NtQueryTimerResolution!(util.toPointer(MaximumTime), util.toPointer(MinimumTime), util.toPointer(CurrentTime));
}

export function RtlLocalTimeToSystemTime(
  LocalTime: Deno.PointerValue | Uint8Array /* ptr */,
  SystemTime: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libntdll_dll.RtlLocalTimeToSystemTime!(util.toPointer(LocalTime), util.toPointer(SystemTime));
}

export function RtlTimeToSecondsSince1970(
  Time: Deno.PointerValue | Uint8Array /* ptr */,
  ElapsedSeconds: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libntdll_dll.RtlTimeToSecondsSince1970!(util.toPointer(Time), util.toPointer(ElapsedSeconds));
}

export function RtlFreeAnsiString(
  AnsiString: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libntdll_dll.RtlFreeAnsiString!(util.toPointer(AnsiString));
}

export function RtlFreeUnicodeString(
  UnicodeString: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libntdll_dll.RtlFreeUnicodeString!(util.toPointer(UnicodeString));
}

export function RtlFreeOemString(
  OemString: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libntdll_dll.RtlFreeOemString!(util.toPointer(OemString));
}

export function RtlInitString(
  DestinationString: Deno.PointerValue | Uint8Array /* ptr */,
  SourceString: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libntdll_dll.RtlInitString!(util.toPointer(DestinationString), util.toPointer(SourceString));
}

export function RtlInitStringEx(
  DestinationString: Deno.PointerValue | Uint8Array /* ptr */,
  SourceString: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libntdll_dll.RtlInitStringEx!(util.toPointer(DestinationString), util.toPointer(SourceString));
}

export function RtlInitAnsiString(
  DestinationString: Deno.PointerValue | Uint8Array /* ptr */,
  SourceString: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libntdll_dll.RtlInitAnsiString!(util.toPointer(DestinationString), util.toPointer(SourceString));
}

export function RtlInitAnsiStringEx(
  DestinationString: Deno.PointerValue | Uint8Array /* ptr */,
  SourceString: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libntdll_dll.RtlInitAnsiStringEx!(util.toPointer(DestinationString), util.toPointer(SourceString));
}

export function RtlInitUnicodeString(
  DestinationString: Deno.PointerValue | Uint8Array /* ptr */,
  SourceString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): void /* void */ {
  return libntdll_dll.RtlInitUnicodeString!(util.toPointer(DestinationString), util.pwstrToFfi(SourceString));
}

export function RtlAnsiStringToUnicodeString(
  DestinationString: Deno.PointerValue | Uint8Array /* ptr */,
  SourceString: Deno.PointerValue | Uint8Array /* ptr */,
  AllocateDestinationString: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libntdll_dll.RtlAnsiStringToUnicodeString!(util.toPointer(DestinationString), util.toPointer(SourceString), util.toPointer(AllocateDestinationString));
}

export function RtlUnicodeStringToAnsiString(
  DestinationString: Deno.PointerValue | Uint8Array /* ptr */,
  SourceString: Deno.PointerValue | Uint8Array /* ptr */,
  AllocateDestinationString: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libntdll_dll.RtlUnicodeStringToAnsiString!(util.toPointer(DestinationString), util.toPointer(SourceString), util.toPointer(AllocateDestinationString));
}

export function RtlUnicodeStringToOemString(
  DestinationString: Deno.PointerValue | Uint8Array /* ptr */,
  SourceString: Deno.PointerValue | Uint8Array /* ptr */,
  AllocateDestinationString: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libntdll_dll.RtlUnicodeStringToOemString!(util.toPointer(DestinationString), util.toPointer(SourceString), util.toPointer(AllocateDestinationString));
}

export function RtlUnicodeToMultiByteSize(
  BytesInMultiByteString: Deno.PointerValue | Uint8Array /* ptr */,
  UnicodeString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  BytesInUnicodeString: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libntdll_dll.RtlUnicodeToMultiByteSize!(util.toPointer(BytesInMultiByteString), util.pwstrToFfi(UnicodeString), BytesInUnicodeString);
}

export function RtlCharToInteger(
  String: Deno.PointerValue | Uint8Array /* ptr */,
  Base: number /* u32 */,
  Value: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libntdll_dll.RtlCharToInteger!(util.toPointer(String), Base, util.toPointer(Value));
}

export function RtlUniform(
  Seed: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libntdll_dll.RtlUniform!(util.toPointer(Seed));
}

export function GetFeatureEnabledState(
  featureId: number /* u32 */,
  changeTime: FEATURE_CHANGE_TIME /* Windows.Win32.System.WindowsProgramming.FEATURE_CHANGE_TIME */,
): FEATURE_ENABLED_STATE /* Windows.Win32.System.WindowsProgramming.FEATURE_ENABLED_STATE */ {
  return libapi_ms_win_core_featurestaging_l1_1_0_dll.GetFeatureEnabledState!(featureId, changeTime);
}

export function RecordFeatureUsage(
  featureId: number /* u32 */,
  kind: number /* u32 */,
  addend: number /* u32 */,
  originName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): void /* void */ {
  return libapi_ms_win_core_featurestaging_l1_1_0_dll.RecordFeatureUsage!(featureId, kind, addend, util.pstrToFfi(originName));
}

export function RecordFeatureError(
  featureId: number /* u32 */,
  error: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libapi_ms_win_core_featurestaging_l1_1_0_dll.RecordFeatureError!(featureId, util.toPointer(error));
}

export function SubscribeFeatureStateChangeNotification(
  subscription: Deno.PointerValue | Uint8Array /* ptr */,
  callback: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WindowsProgramming.PFEATURE_STATE_CHANGE_CALLBACK */,
  context: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libapi_ms_win_core_featurestaging_l1_1_0_dll.SubscribeFeatureStateChangeNotification!(util.toPointer(subscription), util.toPointer(callback), util.toPointer(context));
}

export function UnsubscribeFeatureStateChangeNotification(
  subscription: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WindowsProgramming.FEATURE_STATE_CHANGE_SUBSCRIPTION */,
): void /* void */ {
  return libapi_ms_win_core_featurestaging_l1_1_0_dll.UnsubscribeFeatureStateChangeNotification!(util.toPointer(subscription));
}

export function GetFeatureVariant(
  featureId: number /* u32 */,
  changeTime: FEATURE_CHANGE_TIME /* Windows.Win32.System.WindowsProgramming.FEATURE_CHANGE_TIME */,
  payloadId: Deno.PointerValue | Uint8Array /* ptr */,
  hasNotification: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libapi_ms_win_core_featurestaging_l1_1_1_dll.GetFeatureVariant!(featureId, changeTime, util.toPointer(payloadId), util.toPointer(hasNotification));
}

export function DCIOpenProvider(): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */ {
  return libDCIMAN32_dll.DCIOpenProvider!();
}

export function DCICloseProvider(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): void /* void */ {
  return libDCIMAN32_dll.DCICloseProvider!(util.toPointer(hdc));
}

export function DCICreatePrimary(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lplpSurface: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libDCIMAN32_dll.DCICreatePrimary!(util.toPointer(hdc), util.toPointer(lplpSurface));
}

export function DCICreateOffscreen(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  dwCompression: number /* u32 */,
  dwRedMask: number /* u32 */,
  dwGreenMask: number /* u32 */,
  dwBlueMask: number /* u32 */,
  dwWidth: number /* u32 */,
  dwHeight: number /* u32 */,
  dwDCICaps: number /* u32 */,
  dwBitCount: number /* u32 */,
  lplpSurface: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libDCIMAN32_dll.DCICreateOffscreen!(util.toPointer(hdc), dwCompression, dwRedMask, dwGreenMask, dwBlueMask, dwWidth, dwHeight, dwDCICaps, dwBitCount, util.toPointer(lplpSurface));
}

export function DCICreateOverlay(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpOffscreenSurf: Deno.PointerValue | Uint8Array /* ptr */,
  lplpSurface: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libDCIMAN32_dll.DCICreateOverlay!(util.toPointer(hdc), util.toPointer(lpOffscreenSurf), util.toPointer(lplpSurface));
}

export function DCIEnum(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lprDst: Deno.PointerValue | Uint8Array /* ptr */,
  lprSrc: Deno.PointerValue | Uint8Array /* ptr */,
  lpFnCallback: Deno.PointerValue | Uint8Array /* ptr */,
  lpContext: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libDCIMAN32_dll.DCIEnum!(util.toPointer(hdc), util.toPointer(lprDst), util.toPointer(lprSrc), util.toPointer(lpFnCallback), util.toPointer(lpContext));
}

export function DCISetSrcDestClip(
  pdci: Deno.PointerValue | Uint8Array /* ptr */,
  srcrc: Deno.PointerValue | Uint8Array /* ptr */,
  destrc: Deno.PointerValue | Uint8Array /* ptr */,
  prd: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libDCIMAN32_dll.DCISetSrcDestClip!(util.toPointer(pdci), util.toPointer(srcrc), util.toPointer(destrc), util.toPointer(prd));
}

export function WinWatchOpen(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
): Deno.PointerValue /* Windows.Win32.System.WindowsProgramming.HWINWATCH */ {
  return libDCIMAN32_dll.WinWatchOpen!((hwnd));
}

export function WinWatchClose(
  hWW: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WindowsProgramming.HWINWATCH */,
): void /* void */ {
  return libDCIMAN32_dll.WinWatchClose!(util.toPointer(hWW));
}

export function WinWatchGetClipList(
  hWW: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WindowsProgramming.HWINWATCH */,
  prc: Deno.PointerValue | Uint8Array /* ptr */,
  size: number /* u32 */,
  prd: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDCIMAN32_dll.WinWatchGetClipList!(util.toPointer(hWW), util.toPointer(prc), size, util.toPointer(prd));
}

export function WinWatchDidStatusChange(
  hWW: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WindowsProgramming.HWINWATCH */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libDCIMAN32_dll.WinWatchDidStatusChange!(util.toPointer(hWW)));
}

export function GetWindowRegionData(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  size: number /* u32 */,
  prd: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDCIMAN32_dll.GetWindowRegionData!((hwnd), size, util.toPointer(prd));
}

export function GetDCRegionData(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  size: number /* u32 */,
  prd: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDCIMAN32_dll.GetDCRegionData!(util.toPointer(hdc), size, util.toPointer(prd));
}

export function WinWatchNotify(
  hWW: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WindowsProgramming.HWINWATCH */,
  NotifyCallback: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WindowsProgramming.WINWATCHNOTIFYPROC */,
  NotifyParam: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libDCIMAN32_dll.WinWatchNotify!(util.toPointer(hWW), util.toPointer(NotifyCallback), util.toPointer(NotifyParam)));
}

export function DCIEndAccess(
  pdci: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libDCIMAN32_dll.DCIEndAccess!(util.toPointer(pdci));
}

export function DCIBeginAccess(
  pdci: Deno.PointerValue | Uint8Array /* ptr */,
  x: number /* i32 */,
  y: number /* i32 */,
  dx: number /* i32 */,
  dy: number /* i32 */,
): number /* i32 */ {
  return libDCIMAN32_dll.DCIBeginAccess!(util.toPointer(pdci), x, y, dx, dy);
}

export function DCIDestroy(
  pdci: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libDCIMAN32_dll.DCIDestroy!(util.toPointer(pdci));
}

export function DCIDraw(
  pdci: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libDCIMAN32_dll.DCIDraw!(util.toPointer(pdci));
}

export function DCISetClipList(
  pdci: Deno.PointerValue | Uint8Array /* ptr */,
  prd: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libDCIMAN32_dll.DCISetClipList!(util.toPointer(pdci), util.toPointer(prd));
}

export function DCISetDestination(
  pdci: Deno.PointerValue | Uint8Array /* ptr */,
  dst: Deno.PointerValue | Uint8Array /* ptr */,
  src: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libDCIMAN32_dll.DCISetDestination!(util.toPointer(pdci), util.toPointer(dst), util.toPointer(src));
}

export function GdiEntry13(): number /* u32 */ {
  return libapi_ms_win_dx_d3dkmt_l1_1_0_dll.GdiEntry13!();
}

export function RunSetupCommandA(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  szCmdName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  szInfSection: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  szDir: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszTitle: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  phEXE: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: number /* u32 */,
  pvReserved: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.RunSetupCommandA!((hWnd), util.pstrToFfi(szCmdName), util.pstrToFfi(szInfSection), util.pstrToFfi(szDir), util.pstrToFfi(lpszTitle), util.toPointer(phEXE), dwFlags, util.toPointer(pvReserved));
}

export function RunSetupCommandW(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  szCmdName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  szInfSection: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  szDir: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszTitle: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  phEXE: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: number /* u32 */,
  pvReserved: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.RunSetupCommandW!((hWnd), util.pwstrToFfi(szCmdName), util.pwstrToFfi(szInfSection), util.pwstrToFfi(szDir), util.pwstrToFfi(lpszTitle), util.toPointer(phEXE), dwFlags, util.toPointer(pvReserved));
}

export function NeedRebootInit(): number /* u32 */ {
  return libADVPACK_dll.NeedRebootInit!();
}

export function NeedReboot(
  dwRebootCheck: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVPACK_dll.NeedReboot!(dwRebootCheck));
}

export function RebootCheckOnInstallA(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pszINF: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszSec: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwReserved: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.RebootCheckOnInstallA!((hwnd), util.pstrToFfi(pszINF), util.pstrToFfi(pszSec), dwReserved);
}

export function RebootCheckOnInstallW(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pszINF: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszSec: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwReserved: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.RebootCheckOnInstallW!((hwnd), util.pwstrToFfi(pszINF), util.pwstrToFfi(pszSec), dwReserved);
}

export function TranslateInfStringA(
  pszInfFilename: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszInstallSection: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszTranslateSection: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszTranslateKey: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszBuffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cchBuffer: number /* u32 */,
  pdwRequiredSize: Deno.PointerValue | Uint8Array /* ptr */,
  pvReserved: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.TranslateInfStringA!(util.pstrToFfi(pszInfFilename), util.pstrToFfi(pszInstallSection), util.pstrToFfi(pszTranslateSection), util.pstrToFfi(pszTranslateKey), util.pstrToFfi(pszBuffer), cchBuffer, util.toPointer(pdwRequiredSize), util.toPointer(pvReserved));
}

export function TranslateInfStringW(
  pszInfFilename: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszInstallSection: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszTranslateSection: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszTranslateKey: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchBuffer: number /* u32 */,
  pdwRequiredSize: Deno.PointerValue | Uint8Array /* ptr */,
  pvReserved: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.TranslateInfStringW!(util.pwstrToFfi(pszInfFilename), util.pwstrToFfi(pszInstallSection), util.pwstrToFfi(pszTranslateSection), util.pwstrToFfi(pszTranslateKey), util.pwstrToFfi(pszBuffer), cchBuffer, util.toPointer(pdwRequiredSize), util.toPointer(pvReserved));
}

export function RegInstallA(
  hmod: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HINSTANCE */,
  pszSection: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pstTable: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.RegInstallA!(util.toPointer(hmod), util.pstrToFfi(pszSection), util.toPointer(pstTable));
}

export function RegInstallW(
  hmod: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HINSTANCE */,
  pszSection: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pstTable: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.RegInstallW!(util.toPointer(hmod), util.pwstrToFfi(pszSection), util.toPointer(pstTable));
}

export function LaunchINFSectionExW(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  hInstance: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HINSTANCE */,
  pszParms: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nShow: number /* i32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.LaunchINFSectionExW!((hwnd), util.toPointer(hInstance), util.pwstrToFfi(pszParms), nShow);
}

export function ExecuteCabA(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pCab: Deno.PointerValue | Uint8Array /* ptr */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.ExecuteCabA!((hwnd), util.toPointer(pCab), util.toPointer(pReserved));
}

export function ExecuteCabW(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pCab: Deno.PointerValue | Uint8Array /* ptr */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.ExecuteCabW!((hwnd), util.toPointer(pCab), util.toPointer(pReserved));
}

export function AdvInstallFileA(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  lpszSourceDir: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszSourceFile: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszDestDir: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszDestFile: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
  dwReserved: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.AdvInstallFileA!((hwnd), util.pstrToFfi(lpszSourceDir), util.pstrToFfi(lpszSourceFile), util.pstrToFfi(lpszDestDir), util.pstrToFfi(lpszDestFile), dwFlags, dwReserved);
}

export function AdvInstallFileW(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  lpszSourceDir: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszSourceFile: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszDestDir: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszDestFile: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  dwReserved: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.AdvInstallFileW!((hwnd), util.pwstrToFfi(lpszSourceDir), util.pwstrToFfi(lpszSourceFile), util.pwstrToFfi(lpszDestDir), util.pwstrToFfi(lpszDestFile), dwFlags, dwReserved);
}

export function RegSaveRestoreA(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pszTitleString: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  hkBckupKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  pcszRootKey: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcszSubKey: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcszValueName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.RegSaveRestoreA!((hWnd), util.pstrToFfi(pszTitleString), util.toPointer(hkBckupKey), util.pstrToFfi(pcszRootKey), util.pstrToFfi(pcszSubKey), util.pstrToFfi(pcszValueName), dwFlags);
}

export function RegSaveRestoreW(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pszTitleString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  hkBckupKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  pcszRootKey: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcszSubKey: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcszValueName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.RegSaveRestoreW!((hWnd), util.pwstrToFfi(pszTitleString), util.toPointer(hkBckupKey), util.pwstrToFfi(pcszRootKey), util.pwstrToFfi(pcszSubKey), util.pwstrToFfi(pcszValueName), dwFlags);
}

export function RegSaveRestoreOnINFA(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pszTitle: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszINF: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszSection: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  hHKLMBackKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  hHKCUBackKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  dwFlags: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.RegSaveRestoreOnINFA!((hWnd), util.pstrToFfi(pszTitle), util.pstrToFfi(pszINF), util.pstrToFfi(pszSection), util.toPointer(hHKLMBackKey), util.toPointer(hHKCUBackKey), dwFlags);
}

export function RegSaveRestoreOnINFW(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pszTitle: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszINF: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszSection: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  hHKLMBackKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  hHKCUBackKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
  dwFlags: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.RegSaveRestoreOnINFW!((hWnd), util.pwstrToFfi(pszTitle), util.pwstrToFfi(pszINF), util.pwstrToFfi(pszSection), util.toPointer(hHKLMBackKey), util.toPointer(hHKCUBackKey), dwFlags);
}

export function RegRestoreAllA(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pszTitleString: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  hkBckupKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.RegRestoreAllA!((hWnd), util.pstrToFfi(pszTitleString), util.toPointer(hkBckupKey));
}

export function RegRestoreAllW(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pszTitleString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  hkBckupKey: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Registry.HKEY */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.RegRestoreAllW!((hWnd), util.pwstrToFfi(pszTitleString), util.toPointer(hkBckupKey));
}

export function FileSaveRestoreW(
  hDlg: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  lpFileList: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpDir: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpBaseName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.FileSaveRestoreW!((hDlg), util.pwstrToFfi(lpFileList), util.pwstrToFfi(lpDir), util.pwstrToFfi(lpBaseName), dwFlags);
}

export function FileSaveRestoreOnINFA(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pszTitle: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszINF: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszSection: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszBackupDir: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszBaseBackupFile: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.FileSaveRestoreOnINFA!((hWnd), util.pstrToFfi(pszTitle), util.pstrToFfi(pszINF), util.pstrToFfi(pszSection), util.pstrToFfi(pszBackupDir), util.pstrToFfi(pszBaseBackupFile), dwFlags);
}

export function FileSaveRestoreOnINFW(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pszTitle: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszINF: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszSection: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszBackupDir: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszBaseBackupFile: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.FileSaveRestoreOnINFW!((hWnd), util.pwstrToFfi(pszTitle), util.pwstrToFfi(pszINF), util.pwstrToFfi(pszSection), util.pwstrToFfi(pszBackupDir), util.pwstrToFfi(pszBaseBackupFile), dwFlags);
}

export function AddDelBackupEntryA(
  lpcszFileList: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpcszBackupDir: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpcszBaseName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.AddDelBackupEntryA!(util.pstrToFfi(lpcszFileList), util.pstrToFfi(lpcszBackupDir), util.pstrToFfi(lpcszBaseName), dwFlags);
}

export function AddDelBackupEntryW(
  lpcszFileList: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpcszBackupDir: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpcszBaseName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.AddDelBackupEntryW!(util.pwstrToFfi(lpcszFileList), util.pwstrToFfi(lpcszBackupDir), util.pwstrToFfi(lpcszBaseName), dwFlags);
}

export function FileSaveMarkNotExistA(
  lpFileList: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpDir: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpBaseName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.FileSaveMarkNotExistA!(util.pstrToFfi(lpFileList), util.pstrToFfi(lpDir), util.pstrToFfi(lpBaseName));
}

export function FileSaveMarkNotExistW(
  lpFileList: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpDir: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpBaseName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.FileSaveMarkNotExistW!(util.pwstrToFfi(lpFileList), util.pwstrToFfi(lpDir), util.pwstrToFfi(lpBaseName));
}

export function GetVersionFromFileA(
  lpszFilename: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pdwMSVer: Deno.PointerValue | Uint8Array /* ptr */,
  pdwLSVer: Deno.PointerValue | Uint8Array /* ptr */,
  bVersion: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.GetVersionFromFileA!(util.pstrToFfi(lpszFilename), util.toPointer(pdwMSVer), util.toPointer(pdwLSVer), util.boolToFfi(bVersion));
}

export function GetVersionFromFileW(
  lpszFilename: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pdwMSVer: Deno.PointerValue | Uint8Array /* ptr */,
  pdwLSVer: Deno.PointerValue | Uint8Array /* ptr */,
  bVersion: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.GetVersionFromFileW!(util.pwstrToFfi(lpszFilename), util.toPointer(pdwMSVer), util.toPointer(pdwLSVer), util.boolToFfi(bVersion));
}

export function GetVersionFromFileExA(
  lpszFilename: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pdwMSVer: Deno.PointerValue | Uint8Array /* ptr */,
  pdwLSVer: Deno.PointerValue | Uint8Array /* ptr */,
  bVersion: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.GetVersionFromFileExA!(util.pstrToFfi(lpszFilename), util.toPointer(pdwMSVer), util.toPointer(pdwLSVer), util.boolToFfi(bVersion));
}

export function GetVersionFromFileExW(
  lpszFilename: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pdwMSVer: Deno.PointerValue | Uint8Array /* ptr */,
  pdwLSVer: Deno.PointerValue | Uint8Array /* ptr */,
  bVersion: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.GetVersionFromFileExW!(util.pwstrToFfi(lpszFilename), util.toPointer(pdwMSVer), util.toPointer(pdwLSVer), util.boolToFfi(bVersion));
}

export function IsNTAdmin(
  dwReserved: number /* u32 */,
  lpdwReserved: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVPACK_dll.IsNTAdmin!(dwReserved, util.toPointer(lpdwReserved)));
}

export function DelNodeA(
  pszFileOrDirName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.DelNodeA!(util.pstrToFfi(pszFileOrDirName), dwFlags);
}

export function DelNodeW(
  pszFileOrDirName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.DelNodeW!(util.pwstrToFfi(pszFileOrDirName), dwFlags);
}

export function DelNodeRunDLL32W(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  hInstance: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HINSTANCE */,
  pszParms: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nShow: number /* i32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.DelNodeRunDLL32W!((hwnd), util.toPointer(hInstance), util.pwstrToFfi(pszParms), nShow);
}

export function OpenINFEngineA(
  pszInfFilename: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszInstallSection: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
  phInf: Deno.PointerValue | Uint8Array /* ptr */,
  pvReserved: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.OpenINFEngineA!(util.pstrToFfi(pszInfFilename), util.pstrToFfi(pszInstallSection), dwFlags, util.toPointer(phInf), util.toPointer(pvReserved));
}

export function OpenINFEngineW(
  pszInfFilename: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszInstallSection: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  phInf: Deno.PointerValue | Uint8Array /* ptr */,
  pvReserved: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.OpenINFEngineW!(util.pwstrToFfi(pszInfFilename), util.pwstrToFfi(pszInstallSection), dwFlags, util.toPointer(phInf), util.toPointer(pvReserved));
}

export function TranslateInfStringExA(
  hInf: Deno.PointerValue | Uint8Array /* ptr */,
  pszInfFilename: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszTranslateSection: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszTranslateKey: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszBuffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwBufferSize: number /* u32 */,
  pdwRequiredSize: Deno.PointerValue | Uint8Array /* ptr */,
  pvReserved: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.TranslateInfStringExA!(util.toPointer(hInf), util.pstrToFfi(pszInfFilename), util.pstrToFfi(pszTranslateSection), util.pstrToFfi(pszTranslateKey), util.pstrToFfi(pszBuffer), dwBufferSize, util.toPointer(pdwRequiredSize), util.toPointer(pvReserved));
}

export function TranslateInfStringExW(
  hInf: Deno.PointerValue | Uint8Array /* ptr */,
  pszInfFilename: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszTranslateSection: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszTranslateKey: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwBufferSize: number /* u32 */,
  pdwRequiredSize: Deno.PointerValue | Uint8Array /* ptr */,
  pvReserved: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.TranslateInfStringExW!(util.toPointer(hInf), util.pwstrToFfi(pszInfFilename), util.pwstrToFfi(pszTranslateSection), util.pwstrToFfi(pszTranslateKey), util.pwstrToFfi(pszBuffer), dwBufferSize, util.toPointer(pdwRequiredSize), util.toPointer(pvReserved));
}

export function CloseINFEngine(
  hInf: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.CloseINFEngine!(util.toPointer(hInf));
}

export function ExtractFilesA(
  pszCabName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszExpandDir: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
  pszFileList: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpReserved: Deno.PointerValue | Uint8Array /* ptr */,
  dwReserved: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.ExtractFilesA!(util.pstrToFfi(pszCabName), util.pstrToFfi(pszExpandDir), dwFlags, util.pstrToFfi(pszFileList), util.toPointer(lpReserved), dwReserved);
}

export function ExtractFilesW(
  pszCabName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszExpandDir: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  pszFileList: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpReserved: Deno.PointerValue | Uint8Array /* ptr */,
  dwReserved: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.ExtractFilesW!(util.pwstrToFfi(pszCabName), util.pwstrToFfi(pszExpandDir), dwFlags, util.pwstrToFfi(pszFileList), util.toPointer(lpReserved), dwReserved);
}

export function LaunchINFSectionW(
  hwndOwner: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  hInstance: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HINSTANCE */,
  pszParams: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nShow: number /* i32 */,
): number /* i32 */ {
  return libADVPACK_dll.LaunchINFSectionW!((hwndOwner), util.toPointer(hInstance), util.pwstrToFfi(pszParams), nShow);
}

export function UserInstStubWrapperA(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  hInstance: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HINSTANCE */,
  pszParms: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nShow: number /* i32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.UserInstStubWrapperA!((hwnd), util.toPointer(hInstance), util.pstrToFfi(pszParms), nShow);
}

export function UserInstStubWrapperW(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  hInstance: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HINSTANCE */,
  pszParms: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nShow: number /* i32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.UserInstStubWrapperW!((hwnd), util.toPointer(hInstance), util.pwstrToFfi(pszParms), nShow);
}

export function UserUnInstStubWrapperA(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  hInstance: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HINSTANCE */,
  pszParms: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nShow: number /* i32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.UserUnInstStubWrapperA!((hwnd), util.toPointer(hInstance), util.pstrToFfi(pszParms), nShow);
}

export function UserUnInstStubWrapperW(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  hInstance: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HINSTANCE */,
  pszParms: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nShow: number /* i32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.UserUnInstStubWrapperW!((hwnd), util.toPointer(hInstance), util.pwstrToFfi(pszParms), nShow);
}

export function SetPerUserSecValuesA(
  pPerUser: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.SetPerUserSecValuesA!(util.toPointer(pPerUser));
}

export function SetPerUserSecValuesW(
  pPerUser: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libADVPACK_dll.SetPerUserSecValuesW!(util.toPointer(pPerUser));
}

export function SendIMEMessageExA(
  param0: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  param1: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
): Deno.PointerValue /* Windows.Win32.Foundation.LRESULT */ {
  return libUSER32_dll.SendIMEMessageExA!((param0), util.toPointer(param1));
}

export function SendIMEMessageExW(
  param0: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  param1: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
): Deno.PointerValue /* Windows.Win32.Foundation.LRESULT */ {
  return libUSER32_dll.SendIMEMessageExW!((param0), util.toPointer(param1));
}

export function IMPGetIMEA(
  param0: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  param1: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.IMPGetIMEA!((param0), util.toPointer(param1)));
}

export function IMPGetIMEW(
  param0: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  param1: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.IMPGetIMEW!((param0), util.toPointer(param1)));
}

export function IMPQueryIMEA(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.IMPQueryIMEA!(util.toPointer(param0)));
}

export function IMPQueryIMEW(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.IMPQueryIMEW!(util.toPointer(param0)));
}

export function IMPSetIMEA(
  param0: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  param1: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.IMPSetIMEA!((param0), util.toPointer(param1)));
}

export function IMPSetIMEW(
  param0: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  param1: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.IMPSetIMEW!((param0), util.toPointer(param1)));
}

export function WINNLSGetIMEHotkey(
  param0: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
): number /* u32 */ {
  return libUSER32_dll.WINNLSGetIMEHotkey!((param0));
}

export function WINNLSEnableIME(
  param0: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  param1: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.WINNLSEnableIME!((param0), util.boolToFfi(param1)));
}

export function WINNLSGetEnableStatus(
  param0: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.WINNLSGetEnableStatus!((param0)));
}

export function ApphelpCheckShellObject(
  ObjectCLSID: Deno.PointerValue | Uint8Array /* ptr */,
  bShimIfNecessary: boolean /* Windows.Win32.Foundation.BOOL */,
  pullFlags: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAPPHELP_dll.ApphelpCheckShellObject!(util.toPointer(ObjectCLSID), util.boolToFfi(bShimIfNecessary), util.toPointer(pullFlags)));
}

export function WldpGetLockdownPolicy(
  hostInformation: Deno.PointerValue | Uint8Array /* ptr */,
  lockdownState: Deno.PointerValue | Uint8Array /* ptr */,
  lockdownFlags: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libWldp_dll.WldpGetLockdownPolicy!(util.toPointer(hostInformation), util.toPointer(lockdownState), lockdownFlags);
}

export function WldpIsClassInApprovedList(
  classID: Deno.PointerValue | Uint8Array /* ptr */,
  hostInformation: Deno.PointerValue | Uint8Array /* ptr */,
  isApproved: Deno.PointerValue | Uint8Array /* ptr */,
  optionalFlags: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libWldp_dll.WldpIsClassInApprovedList!(util.toPointer(classID), util.toPointer(hostInformation), util.toPointer(isApproved), optionalFlags);
}

export function WldpSetDynamicCodeTrust(
  fileHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libWldp_dll.WldpSetDynamicCodeTrust!(util.toPointer(fileHandle));
}

export function WldpIsDynamicCodePolicyEnabled(
  isEnabled: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libWldp_dll.WldpIsDynamicCodePolicyEnabled!(util.toPointer(isEnabled));
}

export function WldpQueryDynamicCodeTrust(
  fileHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  baseImage: Deno.PointerValue | Uint8Array /* ptr */,
  imageSize: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libWldp_dll.WldpQueryDynamicCodeTrust!(util.toPointer(fileHandle), util.toPointer(baseImage), imageSize);
}

export function WldpQueryDeviceSecurityInformation(
  information: Deno.PointerValue | Uint8Array /* ptr */,
  informationLength: number /* u32 */,
  returnLength: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libWldp_dll.WldpQueryDeviceSecurityInformation!(util.toPointer(information), informationLength, util.toPointer(returnLength));
}

