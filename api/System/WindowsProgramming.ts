/// Auto-generated by Deno Win32: Windows.Win32.System.WindowsProgramming.Apis

import * as util from "../../util.ts";

// Enums
export type TDIENTITY_ENTITY_TYPE = number;
export type PROC_THREAD_ATTRIBUTE_NUM = number;
export type FILE_INFORMATION_CLASS = number;
export type SYSTEM_INFORMATION_CLASS = number;
export type OBJECT_INFORMATION_CLASS = number;
export type KEY_SET_INFORMATION_CLASS = number;
export type WINSTATIONINFOCLASS = number;
export type CameraUIControlMode = number;
export type CameraUIControlLinearSelectionMode = number;
export type CameraUIControlCaptureMode = number;
export type CameraUIControlPhotoFormat = number;
export type CameraUIControlVideoFormat = number;
export type CameraUIControlViewType = number;
export type FEATURE_CHANGE_TIME = number;
export type FEATURE_ENABLED_STATE = number;
export type TDI_TL_IO_CONTROL_TYPE = number;
export type WLDP_HOST = number;
export type WLDP_HOST_ID = number;
export type DECISION_LOCATION = number;
export type WLDP_KEY = number;
export type VALUENAME = number;
export type WLDP_WINDOWS_LOCKDOWN_MODE = number;
export type WLDP_WINDOWS_LOCKDOWN_RESTRICTION = number;
export type WLDP_POLICY_SETTING = number;

// Constants
export const GENERIC_ENTITY = 0;
export const AT_ENTITY = 640;
export const CL_NL_ENTITY = 769;
export const CO_NL_ENTITY = 768;
export const CL_TL_ENTITY = 1025;
export const CO_TL_ENTITY = 1024;
export const ER_ENTITY = 896;
export const IF_ENTITY = 512;
export const WLDP_LOCKDOWN_UNDEFINED = 0;
export const WLDP_LOCKDOWN_DEFINED_FLAG = 2147483648;
export const WLDP_LOCKDOWN_CONFIG_CI_FLAG = 1;
export const WLDP_LOCKDOWN_CONFIG_CI_AUDIT_FLAG = 2;
export const WLDP_LOCKDOWN_UMCIENFORCE_FLAG = 4;
export const WLDP_LOCKDOWN_AUDIT_FLAG = 8;
export const WLDP_LOCKDOWN_EXCLUSION_FLAG = 16;
export const WLDP_LOCKDOWN_OFF = 2147483648;
export const WLDP_HOST_INFORMATION_REVISION = 1;
export const WLDP_FLAGS_SKIPSIGNATUREVALIDATION = 256;
export const MAX_TDI_ENTITIES = 4096;
export const INFO_CLASS_GENERIC = 256;
export const INFO_CLASS_PROTOCOL = 512;
export const INFO_CLASS_IMPLEMENTATION = 768;
export const INFO_TYPE_PROVIDER = 256;
export const INFO_TYPE_ADDRESS_OBJECT = 512;
export const INFO_TYPE_CONNECTION = 768;
export const ENTITY_LIST_ID = 0;
export const INVALID_ENTITY_INSTANCE = "-1";
export const CONTEXT_SIZE = 16;
export const ENTITY_TYPE_ID = 1;
export const CO_TL_NBF = 1024;
export const CO_TL_SPX = 1026;
export const CO_TL_TCP = 1028;
export const CO_TL_SPP = 1030;
export const CL_TL_NBF = 1025;
export const CL_TL_UDP = 1027;
export const ER_ICMP = 896;
export const CL_NL_IPX = 769;
export const CL_NL_IP = 771;
export const AT_ARP = 640;
export const AT_NULL = 642;
export const IF_GENERIC = 512;
export const IF_MIB = 514;
export const IOCTL_TDI_TL_IO_CONTROL_ENDPOINT = 2162744;
export const DCI_VERSION = 256;
export const DCICREATEPRIMARYSURFACE = 1;
export const DCICREATEOFFSCREENSURFACE = 2;
export const DCICREATEOVERLAYSURFACE = 3;
export const DCIENUMSURFACE = 4;
export const DCIESCAPE = 5;
export const DCI_OK = 0;
export const DCI_FAIL_GENERIC = "-1";
export const DCI_FAIL_UNSUPPORTEDVERSION = "-2";
export const DCI_FAIL_INVALIDSURFACE = "-3";
export const DCI_FAIL_UNSUPPORTED = "-4";
export const DCI_ERR_CURRENTLYNOTAVAIL = "-5";
export const DCI_ERR_INVALIDRECT = "-6";
export const DCI_ERR_UNSUPPORTEDFORMAT = "-7";
export const DCI_ERR_UNSUPPORTEDMASK = "-8";
export const DCI_ERR_TOOBIGHEIGHT = "-9";
export const DCI_ERR_TOOBIGWIDTH = "-10";
export const DCI_ERR_TOOBIGSIZE = "-11";
export const DCI_ERR_OUTOFMEMORY = "-12";
export const DCI_ERR_INVALIDPOSITION = "-13";
export const DCI_ERR_INVALIDSTRETCH = "-14";
export const DCI_ERR_INVALIDCLIPLIST = "-15";
export const DCI_ERR_SURFACEISOBSCURED = "-16";
export const DCI_ERR_XALIGN = "-17";
export const DCI_ERR_YALIGN = "-18";
export const DCI_ERR_XYALIGN = "-19";
export const DCI_ERR_WIDTHALIGN = "-20";
export const DCI_ERR_HEIGHTALIGN = "-21";
export const DCI_STATUS_POINTERCHANGED = 1;
export const DCI_STATUS_STRIDECHANGED = 2;
export const DCI_STATUS_FORMATCHANGED = 4;
export const DCI_STATUS_SURFACEINFOCHANGED = 8;
export const DCI_STATUS_CHROMAKEYCHANGED = 16;
export const DCI_STATUS_WASSTILLDRAWING = 32;
export const DCI_SURFACE_TYPE = 15;
export const DCI_PRIMARY = 0;
export const DCI_OFFSCREEN = 1;
export const DCI_OVERLAY = 2;
export const DCI_VISIBLE = 16;
export const DCI_CHROMAKEY = 32;
export const DCI_1632_ACCESS = 64;
export const DCI_DWORDSIZE = 128;
export const DCI_DWORDALIGN = 256;
export const DCI_WRITEONLY = 512;
export const DCI_ASYNC = 1024;
export const DCI_CAN_STRETCHX = 4096;
export const DCI_CAN_STRETCHY = 8192;
export const DCI_CAN_STRETCHXN = 16384;
export const DCI_CAN_STRETCHYN = 32768;
export const DCI_CANOVERLAY = 65536;
export const FILE_FLAG_OPEN_REQUIRING_OPLOCK = 262144;
export const PROGRESS_CONTINUE = 0;
export const PROGRESS_CANCEL = 1;
export const PROGRESS_STOP = 2;
export const PROGRESS_QUIET = 3;
export const COPY_FILE_FAIL_IF_EXISTS = 1;
export const COPY_FILE_RESTARTABLE = 2;
export const COPY_FILE_OPEN_SOURCE_FOR_WRITE = 4;
export const COPY_FILE_ALLOW_DECRYPTED_DESTINATION = 8;
export const COPY_FILE_COPY_SYMLINK = 2048;
export const COPY_FILE_NO_BUFFERING = 4096;
export const COPY_FILE_REQUEST_SECURITY_PRIVILEGES = 8192;
export const COPY_FILE_RESUME_FROM_PAUSE = 16384;
export const COPY_FILE_NO_OFFLOAD = 262144;
export const COPY_FILE_IGNORE_EDP_BLOCK = 4194304;
export const COPY_FILE_IGNORE_SOURCE_ENCRYPTION = 8388608;
export const COPY_FILE_DONT_REQUEST_DEST_WRITE_DAC = 33554432;
export const COPY_FILE_REQUEST_COMPRESSED_TRAFFIC = 268435456;
export const COPY_FILE_OPEN_AND_COPY_REPARSE_POINT = 2097152;
export const COPY_FILE_DIRECTORY = 128;
export const COPY_FILE_SKIP_ALTERNATE_STREAMS = 32768;
export const COPY_FILE_DISABLE_PRE_ALLOCATION = 67108864;
export const COPY_FILE_ENABLE_LOW_FREE_SPACE_MODE = 134217728;
export const FAIL_FAST_GENERATE_EXCEPTION_ADDRESS = 1;
export const FAIL_FAST_NO_HARD_ERROR_DLG = 2;
export const DTR_CONTROL_DISABLE = 0;
export const DTR_CONTROL_ENABLE = 1;
export const DTR_CONTROL_HANDSHAKE = 2;
export const RTS_CONTROL_DISABLE = 0;
export const RTS_CONTROL_ENABLE = 1;
export const RTS_CONTROL_HANDSHAKE = 2;
export const RTS_CONTROL_TOGGLE = 3;
export const GMEM_NOCOMPACT = 16;
export const GMEM_NODISCARD = 32;
export const GMEM_MODIFY = 128;
export const GMEM_DISCARDABLE = 256;
export const GMEM_NOT_BANKED = 4096;
export const GMEM_SHARE = 8192;
export const GMEM_DDESHARE = 8192;
export const GMEM_NOTIFY = 16384;
export const GMEM_LOWER = 4096;
export const GMEM_VALID_FLAGS = 32626;
export const GMEM_INVALID_HANDLE = 32768;
export const GMEM_DISCARDED = 16384;
export const GMEM_LOCKCOUNT = 255;
export const THREAD_PRIORITY_ERROR_RETURN = 2147483647;
export const VOLUME_NAME_DOS = 0;
export const VOLUME_NAME_GUID = 1;
export const VOLUME_NAME_NT = 2;
export const VOLUME_NAME_NONE = 4;
export const DRIVE_UNKNOWN = 0;
export const DRIVE_NO_ROOT_DIR = 1;
export const DRIVE_REMOVABLE = 2;
export const DRIVE_FIXED = 3;
export const DRIVE_REMOTE = 4;
export const DRIVE_CDROM = 5;
export const DRIVE_RAMDISK = 6;
export const FILE_TYPE_UNKNOWN = 0;
export const FILE_TYPE_DISK = 1;
export const FILE_TYPE_CHAR = 2;
export const FILE_TYPE_PIPE = 3;
export const FILE_TYPE_REMOTE = 32768;
export const NOPARITY = 0;
export const ODDPARITY = 1;
export const EVENPARITY = 2;
export const MARKPARITY = 3;
export const SPACEPARITY = 4;
export const ONESTOPBIT = 0;
export const ONE5STOPBITS = 1;
export const TWOSTOPBITS = 2;
export const IGNORE = 0;
export const INFINITE = 4294967295;
export const CBR_110 = 110;
export const CBR_300 = 300;
export const CBR_600 = 600;
export const CBR_1200 = 1200;
export const CBR_2400 = 2400;
export const CBR_4800 = 4800;
export const CBR_9600 = 9600;
export const CBR_14400 = 14400;
export const CBR_19200 = 19200;
export const CBR_38400 = 38400;
export const CBR_56000 = 56000;
export const CBR_57600 = 57600;
export const CBR_115200 = 115200;
export const CBR_128000 = 128000;
export const CBR_256000 = 256000;
export const CE_TXFULL = 256;
export const CE_PTO = 512;
export const CE_IOE = 1024;
export const CE_DNS = 2048;
export const CE_OOP = 4096;
export const CE_MODE = 32768;
export const IE_BADID = "-1";
export const IE_OPEN = "-2";
export const IE_NOPEN = "-3";
export const IE_MEMORY = "-4";
export const IE_DEFAULT = "-5";
export const IE_HARDWARE = "-10";
export const IE_BYTESIZE = "-11";
export const IE_BAUDRATE = "-12";
export const RESETDEV = 7;
export const LPTx = 128;
export const S_QUEUEEMPTY = 0;
export const S_THRESHOLD = 1;
export const S_ALLTHRESHOLD = 2;
export const S_NORMAL = 0;
export const S_LEGATO = 1;
export const S_STACCATO = 2;
export const S_PERIOD512 = 0;
export const S_PERIOD1024 = 1;
export const S_PERIOD2048 = 2;
export const S_PERIODVOICE = 3;
export const S_WHITE512 = 4;
export const S_WHITE1024 = 5;
export const S_WHITE2048 = 6;
export const S_WHITEVOICE = 7;
export const S_SERDVNA = "-1";
export const S_SEROFM = "-2";
export const S_SERMACT = "-3";
export const S_SERQFUL = "-4";
export const S_SERBDNT = "-5";
export const S_SERDLN = "-6";
export const S_SERDCC = "-7";
export const S_SERDTP = "-8";
export const S_SERDVL = "-9";
export const S_SERDMD = "-10";
export const S_SERDSH = "-11";
export const S_SERDPT = "-12";
export const S_SERDFQ = "-13";
export const S_SERDDR = "-14";
export const S_SERDSR = "-15";
export const S_SERDST = "-16";
export const FS_CASE_IS_PRESERVED = 2;
export const FS_CASE_SENSITIVE = 1;
export const FS_UNICODE_STORED_ON_DISK = 4;
export const FS_PERSISTENT_ACLS = 8;
export const FS_VOL_IS_COMPRESSED = 32768;
export const FS_FILE_COMPRESSION = 16;
export const FS_FILE_ENCRYPTION = 131072;
export const OFS_MAXPATHNAME = 128;
export const MAXINTATOM = 49152;
export const SCS_32BIT_BINARY = 0;
export const SCS_DOS_BINARY = 1;
export const SCS_WOW_BINARY = 2;
export const SCS_PIF_BINARY = 3;
export const SCS_POSIX_BINARY = 4;
export const SCS_OS216_BINARY = 5;
export const SCS_64BIT_BINARY = 6;
export const SCS_THIS_PLATFORM_BINARY = 6;
export const FIBER_FLAG_FLOAT_SWITCH = 1;
export const UMS_VERSION = 256;
export const FILE_SKIP_COMPLETION_PORT_ON_SUCCESS = 1;
export const FILE_SKIP_SET_EVENT_ON_HANDLE = 2;
export const CRITICAL_SECTION_NO_DEBUG_INFO = 16777216;
export const HINSTANCE_ERROR = 32;
export const FORMAT_MESSAGE_MAX_WIDTH_MASK = 255;
export const FILE_ENCRYPTABLE = 0;
export const FILE_IS_ENCRYPTED = 1;
export const FILE_SYSTEM_ATTR = 2;
export const FILE_ROOT_DIR = 3;
export const FILE_SYSTEM_DIR = 4;
export const FILE_UNKNOWN = 5;
export const FILE_SYSTEM_NOT_SUPPORT = 6;
export const FILE_USER_DISALLOWED = 7;
export const FILE_READ_ONLY = 8;
export const FILE_DIR_DISALLOWED = 9;
export const EFS_USE_RECOVERY_KEYS = 1;
export const CREATE_FOR_IMPORT = 1;
export const CREATE_FOR_DIR = 2;
export const OVERWRITE_HIDDEN = 4;
export const EFSRPC_SECURE_ONLY = 8;
export const EFS_DROP_ALTERNATE_STREAMS = 16;
export const BACKUP_INVALID = 0;
export const BACKUP_GHOSTED_FILE_EXTENTS = 11;
export const STREAM_NORMAL_ATTRIBUTE = 0;
export const STREAM_MODIFIED_WHEN_READ = 1;
export const STREAM_CONTAINS_SECURITY = 2;
export const STREAM_CONTAINS_PROPERTIES = 4;
export const STREAM_SPARSE_ATTRIBUTE = 8;
export const STREAM_CONTAINS_GHOSTED_FILE_EXTENTS = 16;
export const STARTF_HOLOGRAPHIC = 262144;
export const SHUTDOWN_NORETRY = 1;
export const PROTECTION_LEVEL_SAME = 4294967295;
export const PROC_THREAD_ATTRIBUTE_NUMBER = 65535;
export const PROC_THREAD_ATTRIBUTE_THREAD = 65536;
export const PROC_THREAD_ATTRIBUTE_INPUT = 131072;
export const PROC_THREAD_ATTRIBUTE_ADDITIVE = 262144;
export const PROCESS_CREATION_MITIGATION_POLICY_DEP_ENABLE = 1;
export const PROCESS_CREATION_MITIGATION_POLICY_DEP_ATL_THUNK_ENABLE = 2;
export const PROCESS_CREATION_MITIGATION_POLICY_SEHOP_ENABLE = 4;
export const PROCESS_CREATION_CHILD_PROCESS_RESTRICTED = 1;
export const PROCESS_CREATION_CHILD_PROCESS_OVERRIDE = 2;
export const PROCESS_CREATION_CHILD_PROCESS_RESTRICTED_UNLESS_SECURE = 4;
export const PROCESS_CREATION_ALL_APPLICATION_PACKAGES_OPT_OUT = 1;
export const PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_ENABLE_PROCESS_TREE = 1;
export const PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_DISABLE_PROCESS_TREE = 2;
export const PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_OVERRIDE = 4;
export const ATOM_FLAG_GLOBAL = 2;
export const BASE_SEARCH_PATH_ENABLE_SAFE_SEARCHMODE = 1;
export const BASE_SEARCH_PATH_DISABLE_SAFE_SEARCHMODE = 65536;
export const BASE_SEARCH_PATH_PERMANENT = 32768;
export const COPYFILE2_MESSAGE_COPY_OFFLOAD = 1;
export const COPYFILE2_IO_CYCLE_SIZE_MIN = 4096;
export const COPYFILE2_IO_CYCLE_SIZE_MAX = 1073741824;
export const COPYFILE2_IO_RATE_MIN = 512;
export const EVENTLOG_FULL_INFO = 0;
export const OPERATION_API_VERSION = 1;
export const MAX_COMPUTERNAME_LENGTH = 15;
export const LOGON32_PROVIDER_WINNT35 = 1;
export const LOGON32_PROVIDER_VIRTUAL = 4;
export const LOGON_ZERO_PASSWORD_BUFFER = 2147483648;
export const HW_PROFILE_GUIDLEN = 39;
export const DOCKINFO_UNDOCKED = 1;
export const DOCKINFO_DOCKED = 2;
export const DOCKINFO_USER_SUPPLIED = 4;
export const TC_NORMAL = 0;
export const TC_HARDERR = 1;
export const TC_GP_TRAP = 2;
export const TC_SIGNAL = 3;
export const AC_LINE_OFFLINE = 0;
export const AC_LINE_ONLINE = 1;
export const AC_LINE_BACKUP_POWER = 2;
export const AC_LINE_UNKNOWN = 255;
export const BATTERY_FLAG_HIGH = 1;
export const BATTERY_FLAG_LOW = 2;
export const BATTERY_FLAG_CRITICAL = 4;
export const BATTERY_FLAG_CHARGING = 8;
export const BATTERY_FLAG_NO_BATTERY = 128;
export const BATTERY_FLAG_UNKNOWN = 255;
export const BATTERY_PERCENTAGE_UNKNOWN = 255;
export const SYSTEM_STATUS_FLAG_POWER_SAVING_ON = 1;
export const BATTERY_LIFE_UNKNOWN = 4294967295;
export const ACTCTX_FLAG_PROCESSOR_ARCHITECTURE_VALID = 1;
export const ACTCTX_FLAG_LANGID_VALID = 2;
export const ACTCTX_FLAG_ASSEMBLY_DIRECTORY_VALID = 4;
export const ACTCTX_FLAG_RESOURCE_NAME_VALID = 8;
export const ACTCTX_FLAG_SET_PROCESS_DEFAULT = 16;
export const ACTCTX_FLAG_APPLICATION_NAME_VALID = 32;
export const ACTCTX_FLAG_SOURCE_IS_ASSEMBLYREF = 64;
export const ACTCTX_FLAG_HMODULE_VALID = 128;
export const DEACTIVATE_ACTCTX_FLAG_FORCE_EARLY_DEACTIVATION = 1;
export const FIND_ACTCTX_SECTION_KEY_RETURN_HACTCTX = 1;
export const FIND_ACTCTX_SECTION_KEY_RETURN_FLAGS = 2;
export const FIND_ACTCTX_SECTION_KEY_RETURN_ASSEMBLY_METADATA = 4;
export const ACTIVATION_CONTEXT_BASIC_INFORMATION_DEFINED = 1;
export const QUERY_ACTCTX_FLAG_USE_ACTIVE_ACTCTX = 4;
export const QUERY_ACTCTX_FLAG_ACTCTX_IS_HMODULE = 8;
export const QUERY_ACTCTX_FLAG_ACTCTX_IS_ADDRESS = 16;
export const QUERY_ACTCTX_FLAG_NO_ADDREF = 2147483648;
export const RESTART_MAX_CMD_LINE = 1024;
export const RECOVERY_DEFAULT_PING_INTERVAL = 5000;
export const FILE_RENAME_FLAG_REPLACE_IF_EXISTS = 1;
export const FILE_RENAME_FLAG_POSIX_SEMANTICS = 2;
export const FILE_RENAME_FLAG_SUPPRESS_PIN_STATE_INHERITANCE = 4;
export const FILE_DISPOSITION_FLAG_DO_NOT_DELETE = 0;
export const FILE_DISPOSITION_FLAG_DELETE = 1;
export const FILE_DISPOSITION_FLAG_POSIX_SEMANTICS = 2;
export const FILE_DISPOSITION_FLAG_FORCE_IMAGE_SECTION_CHECK = 4;
export const FILE_DISPOSITION_FLAG_ON_CLOSE = 8;
export const FILE_DISPOSITION_FLAG_IGNORE_READONLY_ATTRIBUTE = 16;
export const STORAGE_INFO_FLAGS_ALIGNED_DEVICE = 1;
export const STORAGE_INFO_FLAGS_PARTITION_ALIGNED_ON_DEVICE = 2;
export const STORAGE_INFO_OFFSET_UNKNOWN = 4294967295;
export const REMOTE_PROTOCOL_INFO_FLAG_LOOPBACK = 1;
export const REMOTE_PROTOCOL_INFO_FLAG_OFFLINE = 2;
export const REMOTE_PROTOCOL_INFO_FLAG_PERSISTENT_HANDLE = 4;
export const RPI_FLAG_SMB2_SHARECAP_TIMEWARP = 2;
export const RPI_FLAG_SMB2_SHARECAP_DFS = 8;
export const RPI_FLAG_SMB2_SHARECAP_CONTINUOUS_AVAILABILITY = 16;
export const RPI_FLAG_SMB2_SHARECAP_SCALEOUT = 32;
export const RPI_FLAG_SMB2_SHARECAP_CLUSTER = 64;
export const RPI_SMB2_FLAG_SERVERCAP_DFS = 1;
export const RPI_SMB2_FLAG_SERVERCAP_LEASING = 2;
export const RPI_SMB2_FLAG_SERVERCAP_LARGEMTU = 4;
export const RPI_SMB2_FLAG_SERVERCAP_MULTICHANNEL = 8;
export const RPI_SMB2_FLAG_SERVERCAP_PERSISTENT_HANDLES = 16;
export const RPI_SMB2_FLAG_SERVERCAP_DIRECTORY_LEASING = 32;
export const MICROSOFT_WINDOWS_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS = 0;
export const MICROSOFT_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS = 0;
export const CODEINTEGRITY_OPTION_ENABLED = 1;
export const CODEINTEGRITY_OPTION_TESTSIGN = 2;
export const CODEINTEGRITY_OPTION_UMCI_ENABLED = 4;
export const CODEINTEGRITY_OPTION_UMCI_AUDITMODE_ENABLED = 8;
export const CODEINTEGRITY_OPTION_UMCI_EXCLUSIONPATHS_ENABLED = 16;
export const CODEINTEGRITY_OPTION_TEST_BUILD = 32;
export const CODEINTEGRITY_OPTION_PREPRODUCTION_BUILD = 64;
export const CODEINTEGRITY_OPTION_DEBUGMODE_ENABLED = 128;
export const CODEINTEGRITY_OPTION_FLIGHT_BUILD = 256;
export const CODEINTEGRITY_OPTION_FLIGHTING_ENABLED = 512;
export const CODEINTEGRITY_OPTION_HVCI_KMCI_ENABLED = 1024;
export const CODEINTEGRITY_OPTION_HVCI_KMCI_AUDITMODE_ENABLED = 2048;
export const CODEINTEGRITY_OPTION_HVCI_KMCI_STRICTMODE_ENABLED = 4096;
export const CODEINTEGRITY_OPTION_HVCI_IUM_ENABLED = 8192;
export const FILE_MAXIMUM_DISPOSITION = 5;
export const FILE_DIRECTORY_FILE = 1;
export const FILE_WRITE_THROUGH = 2;
export const FILE_SEQUENTIAL_ONLY = 4;
export const FILE_NO_INTERMEDIATE_BUFFERING = 8;
export const FILE_SYNCHRONOUS_IO_ALERT = 16;
export const FILE_SYNCHRONOUS_IO_NONALERT = 32;
export const FILE_NON_DIRECTORY_FILE = 64;
export const FILE_CREATE_TREE_CONNECTION = 128;
export const FILE_COMPLETE_IF_OPLOCKED = 256;
export const FILE_NO_EA_KNOWLEDGE = 512;
export const FILE_OPEN_REMOTE_INSTANCE = 1024;
export const FILE_RANDOM_ACCESS = 2048;
export const FILE_DELETE_ON_CLOSE = 4096;
export const FILE_OPEN_BY_FILE_ID = 8192;
export const FILE_OPEN_FOR_BACKUP_INTENT = 16384;
export const FILE_NO_COMPRESSION = 32768;
export const FILE_OPEN_REQUIRING_OPLOCK = 65536;
export const FILE_RESERVE_OPFILTER = 1048576;
export const FILE_OPEN_REPARSE_POINT = 2097152;
export const FILE_OPEN_NO_RECALL = 4194304;
export const FILE_OPEN_FOR_FREE_SPACE_QUERY = 8388608;
export const FILE_VALID_OPTION_FLAGS = 16777215;
export const FILE_VALID_PIPE_OPTION_FLAGS = 50;
export const FILE_VALID_MAILSLOT_OPTION_FLAGS = 50;
export const FILE_VALID_SET_FLAGS = 54;
export const FILE_SUPERSEDED = 0;
export const FILE_OPENED = 1;
export const FILE_CREATED = 2;
export const FILE_OVERWRITTEN = 3;
export const FILE_EXISTS = 4;
export const FILE_DOES_NOT_EXIST = 5;
export const WINWATCHNOTIFY_START = 0;
export const WINWATCHNOTIFY_STOP = 1;
export const WINWATCHNOTIFY_DESTROY = 2;
export const WINWATCHNOTIFY_CHANGING = 3;
export const WINWATCHNOTIFY_CHANGED = 4;
export const RSC_FLAG_INF = 1;
export const RSC_FLAG_SKIPDISKSPACECHECK = 2;
export const RSC_FLAG_QUIET = 4;
export const RSC_FLAG_NGCONV = 8;
export const RSC_FLAG_UPDHLPDLLS = 16;
export const RSC_FLAG_DELAYREGISTEROCX = 512;
export const RSC_FLAG_SETUPAPI = 1024;
export const ALINF_QUIET = 4;
export const ALINF_NGCONV = 8;
export const ALINF_UPDHLPDLLS = 16;
export const ALINF_BKINSTALL = 32;
export const ALINF_ROLLBACK = 64;
export const ALINF_CHECKBKDATA = 128;
export const ALINF_ROLLBKDOALL = 256;
export const ALINF_DELAYREGISTEROCX = 512;
export const AIF_WARNIFSKIP = 1;
export const AIF_NOSKIP = 2;
export const AIF_NOVERSIONCHECK = 4;
export const AIF_FORCE_FILE_IN_USE = 8;
export const AIF_NOOVERWRITE = 16;
export const AIF_NO_VERSION_DIALOG = 32;
export const AIF_REPLACEONLY = 1024;
export const AIF_NOLANGUAGECHECK = 268435456;
export const AIF_QUIET = 536870912;
export const IE4_RESTORE = 1;
export const IE4_BACKNEW = 2;
export const IE4_NODELETENEW = 4;
export const IE4_NOMESSAGES = 8;
export const IE4_NOPROGRESS = 16;
export const IE4_NOENUMKEY = 32;
export const IE4_NO_CRC_MAPPING = 64;
export const IE4_REGSECTION = 128;
export const IE4_FRDOALL = 256;
export const IE4_UPDREFCNT = 512;
export const IE4_USEREFCNT = 1024;
export const IE4_EXTRAINCREFCNT = 2048;
export const IE4_REMOVREGBKDATA = 4096;
export const ARSR_RESTORE = 1;
export const ARSR_NOMESSAGES = 8;
export const ARSR_REGSECTION = 128;
export const ARSR_REMOVREGBKDATA = 4096;
export const AFSR_RESTORE = 1;
export const AFSR_BACKNEW = 2;
export const AFSR_NODELETENEW = 4;
export const AFSR_NOMESSAGES = 8;
export const AFSR_NOPROGRESS = 16;
export const AFSR_UPDREFCNT = 512;
export const AFSR_USEREFCNT = 1024;
export const AFSR_EXTRAINCREFCNT = 2048;
export const AADBE_ADD_ENTRY = 1;
export const AADBE_DEL_ENTRY = 2;
export const ADN_DEL_IF_EMPTY = 1;
export const ADN_DONT_DEL_SUBDIRS = 2;
export const ADN_DONT_DEL_DIR = 4;
export const ADN_DEL_UNC_PATHS = 8;
export const LIS_QUIET = 1;
export const LIS_NOGRPCONV = 2;
export const RUNCMDS_QUIET = 1;
export const RUNCMDS_NOWAIT = 2;
export const RUNCMDS_DELAYPOSTCMD = 4;
export const IME_MAXPROCESS = 32;
export const CP_HWND = 0;
export const CP_OPEN = 1;
export const CP_DIRECT = 2;
export const CP_LEVEL = 3;
export const MCW_DEFAULT = 0;
export const MCW_RECT = 1;
export const MCW_WINDOW = 2;
export const MCW_SCREEN = 4;
export const MCW_VERTICAL = 8;
export const MCW_HIDDEN = 16;
export const IME_MODE_ALPHANUMERIC = 1;
export const IME_MODE_SBCSCHAR = 2;
export const IME_MODE_KATAKANA = 2;
export const IME_MODE_HIRAGANA = 4;
export const IME_MODE_HANJACONVERT = 4;
export const IME_MODE_DBCSCHAR = 16;
export const IME_MODE_ROMAN = 32;
export const IME_MODE_NOROMAN = 64;
export const IME_MODE_CODEINPUT = 128;
export const IME_MODE_NOCODEINPUT = 256;
export const IME_GETIMECAPS = 3;
export const IME_SETOPEN = 4;
export const IME_GETOPEN = 5;
export const IME_GETVERSION = 7;
export const IME_SETCONVERSIONWINDOW = 8;
export const IME_MOVEIMEWINDOW = 8;
export const IME_SETCONVERSIONMODE = 16;
export const IME_GETCONVERSIONMODE = 17;
export const IME_SET_MODE = 18;
export const IME_SENDVKEY = 19;
export const IME_ENTERWORDREGISTERMODE = 24;
export const IME_SETCONVERSIONFONTEX = 25;
export const IME_BANJAtoJUNJA = 19;
export const IME_JUNJAtoBANJA = 20;
export const IME_JOHABtoKS = 21;
export const IME_KStoJOHAB = 22;
export const IMEA_INIT = 1;
export const IMEA_NEXT = 2;
export const IMEA_PREV = 3;
export const IME_REQUEST_CONVERT = 1;
export const IME_ENABLE_CONVERT = 2;
export const INTERIM_WINDOW = 0;
export const MODE_WINDOW = 1;
export const HANJA_WINDOW = 2;
export const IME_RS_ERROR = 1;
export const IME_RS_NOIME = 2;
export const IME_RS_TOOLONG = 5;
export const IME_RS_ILLEGAL = 6;
export const IME_RS_NOTFOUND = 7;
export const IME_RS_NOROOM = 10;
export const IME_RS_DISKERROR = 14;
export const IME_RS_INVALID = 17;
export const IME_RS_NEST = 18;
export const IME_RS_SYSTEMMODAL = 19;
export const WM_IME_REPORT = 640;
export const IR_STRINGSTART = 256;
export const IR_STRINGEND = 257;
export const IR_OPENCONVERT = 288;
export const IR_CHANGECONVERT = 289;
export const IR_CLOSECONVERT = 290;
export const IR_FULLCONVERT = 291;
export const IR_IMESELECT = 304;
export const IR_STRING = 320;
export const IR_DBCSCHAR = 352;
export const IR_UNDETERMINE = 368;
export const IR_STRINGEX = 384;
export const IR_MODEINFO = 400;
export const WM_WNT_CONVERTREQUESTEX = 265;
export const WM_CONVERTREQUEST = 266;
export const WM_CONVERTRESULT = 267;
export const WM_INTERIM = 268;
export const WM_IMEKEYDOWN = 656;
export const WM_IMEKEYUP = 657;
export const DELAYLOAD_GPA_FAILURE = 4;
export const DELETE_BROWSING_HISTORY_HISTORY = 1;
export const DELETE_BROWSING_HISTORY_COOKIES = 2;
export const DELETE_BROWSING_HISTORY_TIF = 4;
export const DELETE_BROWSING_HISTORY_FORMDATA = 8;
export const DELETE_BROWSING_HISTORY_PASSWORDS = 16;
export const DELETE_BROWSING_HISTORY_PRESERVEFAVORITES = 32;
export const DELETE_BROWSING_HISTORY_DOWNLOADHISTORY = 64;
export const ProcThreadAttributeParentProcess = 0;
export const ProcThreadAttributeHandleList = 2;
export const ProcThreadAttributeGroupAffinity = 3;
export const ProcThreadAttributePreferredNode = 4;
export const ProcThreadAttributeIdealProcessor = 5;
export const ProcThreadAttributeUmsThread = 6;
export const ProcThreadAttributeMitigationPolicy = 7;
export const ProcThreadAttributeSecurityCapabilities = 9;
export const ProcThreadAttributeProtectionLevel = 11;
export const ProcThreadAttributeJobList = 13;
export const ProcThreadAttributeChildProcessPolicy = 14;
export const ProcThreadAttributeAllApplicationPackagesPolicy = 15;
export const ProcThreadAttributeWin32kFilter = 16;
export const ProcThreadAttributeSafeOpenPromptOriginClaim = 17;
export const ProcThreadAttributeDesktopAppPolicy = 18;
export const ProcThreadAttributePseudoConsole = 22;
export const ProcThreadAttributeMitigationAuditPolicy = 24;
export const ProcThreadAttributeMachineType = 25;
export const ProcThreadAttributeComponentFilter = 26;
export const ProcThreadAttributeEnableOptionalXStateFeatures = 27;
export const FileDirectoryInformation = 1;
export const SystemBasicInformation = 0;
export const SystemPerformanceInformation = 2;
export const SystemTimeOfDayInformation = 3;
export const SystemProcessInformation = 5;
export const SystemProcessorPerformanceInformation = 8;
export const SystemInterruptInformation = 23;
export const SystemExceptionInformation = 33;
export const SystemRegistryQuotaInformation = 37;
export const SystemLookasideInformation = 45;
export const SystemCodeIntegrityInformation = 103;
export const SystemPolicyInformation = 134;
export const ObjectBasicInformation = 0;
export const ObjectTypeInformation = 2;
export const KeyWriteTimeInformation = 0;
export const KeyWow64FlagsInformation = 1;
export const KeyControlFlagsInformation = 2;
export const KeySetVirtualizationInformation = 3;
export const KeySetDebugInformation = 4;
export const KeySetHandleTagsInformation = 5;
export const MaxKeySetInfoClass = 6;
export const WinStationInformation = 8;
export const Browse = 0;
export const Linear = 1;
export const Single = 0;
export const Multiple = 1;
export const PhotoOrVideo = 0;
export const Photo = 1;
export const Video = 2;
export const Jpeg = 0;
export const Png = 1;
export const JpegXR = 2;
export const Mp4 = 0;
export const Wmv = 1;
export const SingleItem = 0;
export const ItemList = 1;
export const FEATURE_CHANGE_TIME_READ = 0;
export const FEATURE_CHANGE_TIME_MODULE_RELOAD = 1;
export const FEATURE_CHANGE_TIME_SESSION = 2;
export const FEATURE_CHANGE_TIME_REBOOT = 3;
export const FEATURE_ENABLED_STATE_DEFAULT = 0;
export const FEATURE_ENABLED_STATE_DISABLED = 1;
export const FEATURE_ENABLED_STATE_ENABLED = 2;
export const EndpointIoControlType = 0;
export const SetSockOptIoControlType = 1;
export const GetSockOptIoControlType = 2;
export const SocketIoControlType = 3;
export const WLDP_HOST_RUNDLL32 = 0;
export const WLDP_HOST_SVCHOST = 1;
export const WLDP_HOST_MAX = 2;
export const WLDP_HOST_ID_UNKNOWN = 0;
export const WLDP_HOST_ID_GLOBAL = 1;
export const WLDP_HOST_ID_VBA = 2;
export const WLDP_HOST_ID_WSH = 3;
export const WLDP_HOST_ID_POWERSHELL = 4;
export const WLDP_HOST_ID_IE = 5;
export const WLDP_HOST_ID_MSI = 6;
export const WLDP_HOST_ID_ALL = 7;
export const WLDP_HOST_ID_MAX = 8;
export const DECISION_LOCATION_REFRESH_GLOBAL_DATA = 0;
export const DECISION_LOCATION_PARAMETER_VALIDATION = 1;
export const DECISION_LOCATION_AUDIT = 2;
export const DECISION_LOCATION_FAILED_CONVERT_GUID = 3;
export const DECISION_LOCATION_ENTERPRISE_DEFINED_CLASS_ID = 4;
export const DECISION_LOCATION_GLOBAL_BUILT_IN_LIST = 5;
export const DECISION_LOCATION_PROVIDER_BUILT_IN_LIST = 6;
export const DECISION_LOCATION_ENFORCE_STATE_LIST = 7;
export const DECISION_LOCATION_NOT_FOUND = 8;
export const DECISION_LOCATION_UNKNOWN = 9;
export const KEY_UNKNOWN = 0;
export const KEY_OVERRIDE = 1;
export const KEY_ALL_KEYS = 2;
export const VALUENAME_UNKNOWN = 0;
export const VALUENAME_ENTERPRISE_DEFINED_CLASS_ID = 1;
export const VALUENAME_BUILT_IN_LIST = 2;
export const WLDP_WINDOWS_LOCKDOWN_MODE_UNLOCKED = 0;
export const WLDP_WINDOWS_LOCKDOWN_MODE_TRIAL = 1;
export const WLDP_WINDOWS_LOCKDOWN_MODE_LOCKED = 2;
export const WLDP_WINDOWS_LOCKDOWN_MODE_MAX = 3;
export const WLDP_WINDOWS_LOCKDOWN_RESTRICTION_NONE = 0;
export const WLDP_WINDOWS_LOCKDOWN_RESTRICTION_NOUNLOCK = 1;
export const WLDP_WINDOWS_LOCKDOWN_RESTRICTION_NOUNLOCK_PERMANENT = 2;
export const WLDP_WINDOWS_LOCKDOWN_RESTRICTION_MAX = 3;
export const WLDP_POLICY_SETTING_AV_PERF_MODE = 1000;

// Structs

/**
 * Windows.Win32.System.WindowsProgramming.Apis (size: 8)
 */
export interface Apis {
  /** System.Guid */
  CATID_DeleteBrowsingHistory: Uint8Array | Deno.PointerValue | null;
}

export const sizeofApis = 8;

export function allocApis(data?: Partial<Apis>): Uint8Array {
  const buf = new Uint8Array(sizeofApis);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CATID_DeleteBrowsingHistory !== undefined) view.setBigUint64(0, data.CATID_DeleteBrowsingHistory === null ? 0n : BigInt(util.toPointer(data.CATID_DeleteBrowsingHistory)), true);
  return buf;
}

export type HWINWATCH = Deno.PointerValue;

export type FEATURE_STATE_CHANGE_SUBSCRIPTION = Deno.PointerValue;

export type FH_SERVICE_PIPE_HANDLE = Deno.PointerValue;

/**
 * _u1_e__Union (size: 16)
 */
export interface _u1_e__Union {
  /** ptr */
  stspec: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  isflow: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_u1_e__Union = 16;

export function alloc_u1_e__Union(data?: Partial<_u1_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_u1_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.stspec !== undefined) view.setBigUint64(0, data.stspec === null ? 0n : BigInt(util.toPointer(data.stspec)), true);
  // 0x08: pointer
  if (data?.isflow !== undefined) view.setBigUint64(8, data.isflow === null ? 0n : BigInt(util.toPointer(data.isflow)), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.IMAGE_THUNK_DATA64 (size: 8)
 */
export interface IMAGE_THUNK_DATA64 {
  /** _u1_e__Union */
  u1: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIMAGE_THUNK_DATA64 = 8;

export function allocIMAGE_THUNK_DATA64(data?: Partial<IMAGE_THUNK_DATA64>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_THUNK_DATA64);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.u1 !== undefined) view.setBigUint64(0, data.u1 === null ? 0n : BigInt(util.toPointer(data.u1)), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.IMAGE_THUNK_DATA32 (size: 8)
 */
export interface IMAGE_THUNK_DATA32 {
  /** _u1_e__Union */
  u1: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIMAGE_THUNK_DATA32 = 8;

export function allocIMAGE_THUNK_DATA32(data?: Partial<IMAGE_THUNK_DATA32>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_THUNK_DATA32);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.u1 !== undefined) view.setBigUint64(0, data.u1 === null ? 0n : BigInt(util.toPointer(data.u1)), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Attributes_e__Union (size: 16)
 */
export interface _Attributes_e__Union {
  /** u32 */
  AllAttributes: number;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Attributes_e__Union = 16;

export function alloc_Attributes_e__Union(data?: Partial<_Attributes_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Attributes_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AllAttributes !== undefined) view.setUint32(0, Number(data.AllAttributes), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.IMAGE_DELAYLOAD_DESCRIPTOR (size: 40)
 */
export interface IMAGE_DELAYLOAD_DESCRIPTOR {
  /** _Attributes_e__Union */
  Attributes: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  DllNameRVA: number;
  /** u32 */
  ModuleHandleRVA: number;
  /** u32 */
  ImportAddressTableRVA: number;
  /** u32 */
  ImportNameTableRVA: number;
  /** u32 */
  BoundImportAddressTableRVA: number;
  /** u32 */
  UnloadInformationTableRVA: number;
  /** u32 */
  TimeDateStamp: number;
}

export const sizeofIMAGE_DELAYLOAD_DESCRIPTOR = 40;

export function allocIMAGE_DELAYLOAD_DESCRIPTOR(data?: Partial<IMAGE_DELAYLOAD_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_DELAYLOAD_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Attributes !== undefined) view.setBigUint64(0, data.Attributes === null ? 0n : BigInt(util.toPointer(data.Attributes)), true);
  // 0x08: u32
  if (data?.DllNameRVA !== undefined) view.setUint32(8, Number(data.DllNameRVA), true);
  // 0x0c: u32
  if (data?.ModuleHandleRVA !== undefined) view.setUint32(12, Number(data.ModuleHandleRVA), true);
  // 0x10: u32
  if (data?.ImportAddressTableRVA !== undefined) view.setUint32(16, Number(data.ImportAddressTableRVA), true);
  // 0x14: u32
  if (data?.ImportNameTableRVA !== undefined) view.setUint32(20, Number(data.ImportNameTableRVA), true);
  // 0x18: u32
  if (data?.BoundImportAddressTableRVA !== undefined) view.setUint32(24, Number(data.BoundImportAddressTableRVA), true);
  // 0x1c: u32
  if (data?.UnloadInformationTableRVA !== undefined) view.setUint32(28, Number(data.UnloadInformationTableRVA), true);
  // 0x20: u32
  if (data?.TimeDateStamp !== undefined) view.setUint32(32, Number(data.TimeDateStamp), true);
  // 0x24: pad4
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.System.WindowsProgramming.CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG (size: 16)
 */
export interface CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG {
  /** u32 */
  Size: number;
  /** Windows.Win32.Foundation.PWSTR */
  TriggerId: string | null;
}

export const sizeofCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG = 16;

export function allocCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG(data?: Partial<CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG>): Uint8Array {
  const buf = new Uint8Array(sizeofCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.TriggerId !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.TriggerId);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.JIT_DEBUG_INFO (size: 40)
 */
export interface JIT_DEBUG_INFO {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwProcessorArchitecture: number;
  /** u32 */
  dwThreadID: number;
  /** u32 */
  dwReserved0: number;
  /** u64 */
  lpExceptionAddress: Deno.PointerValue;
  /** u64 */
  lpExceptionRecord: Deno.PointerValue;
  /** u64 */
  lpContextRecord: Deno.PointerValue;
}

export const sizeofJIT_DEBUG_INFO = 40;

export function allocJIT_DEBUG_INFO(data?: Partial<JIT_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofJIT_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwProcessorArchitecture !== undefined) view.setUint32(4, Number(data.dwProcessorArchitecture), true);
  // 0x08: u32
  if (data?.dwThreadID !== undefined) view.setUint32(8, Number(data.dwThreadID), true);
  // 0x0c: u32
  if (data?.dwReserved0 !== undefined) view.setUint32(12, Number(data.dwReserved0), true);
  // 0x10: u64
  if (data?.lpExceptionAddress !== undefined) view.setBigUint64(16, BigInt(data.lpExceptionAddress), true);
  // 0x18: u64
  if (data?.lpExceptionRecord !== undefined) view.setBigUint64(24, BigInt(data.lpExceptionRecord), true);
  // 0x20: u64
  if (data?.lpContextRecord !== undefined) view.setBigUint64(32, BigInt(data.lpContextRecord), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.HW_PROFILE_INFOA (size: 24)
 */
export interface HW_PROFILE_INFOA {
  /** u32 */
  dwDockInfo: number;
  /** array */
  szHwProfileGuid: Deno.PointerValue | null;
  /** array */
  szHwProfileName: Deno.PointerValue | null;
}

export const sizeofHW_PROFILE_INFOA = 24;

export function allocHW_PROFILE_INFOA(data?: Partial<HW_PROFILE_INFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofHW_PROFILE_INFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwDockInfo !== undefined) view.setUint32(0, Number(data.dwDockInfo), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.szHwProfileGuid !== undefined) view.setBigUint64(8, data.szHwProfileGuid === null ? 0n : BigInt(util.toPointer(data.szHwProfileGuid)), true);
  // 0x10: pointer
  if (data?.szHwProfileName !== undefined) view.setBigUint64(16, data.szHwProfileName === null ? 0n : BigInt(util.toPointer(data.szHwProfileName)), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.HW_PROFILE_INFOW (size: 24)
 */
export interface HW_PROFILE_INFOW {
  /** u32 */
  dwDockInfo: number;
  /** array */
  szHwProfileGuid: Deno.PointerValue | null;
  /** array */
  szHwProfileName: Deno.PointerValue | null;
}

export const sizeofHW_PROFILE_INFOW = 24;

export function allocHW_PROFILE_INFOW(data?: Partial<HW_PROFILE_INFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofHW_PROFILE_INFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwDockInfo !== undefined) view.setUint32(0, Number(data.dwDockInfo), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.szHwProfileGuid !== undefined) view.setBigUint64(8, data.szHwProfileGuid === null ? 0n : BigInt(util.toPointer(data.szHwProfileGuid)), true);
  // 0x10: pointer
  if (data?.szHwProfileName !== undefined) view.setBigUint64(16, data.szHwProfileName === null ? 0n : BigInt(util.toPointer(data.szHwProfileName)), true);
  return buf;
}

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.System.WindowsProgramming.ACTCTX_SECTION_KEYED_DATA_2600 (size: 72)
 */
export interface ACTCTX_SECTION_KEYED_DATA_2600 {
  /** u32 */
  cbSize: number;
  /** u32 */
  ulDataFormatVersion: number;
  /** ptr */
  lpData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ulLength: number;
  /** ptr */
  lpSectionGlobalData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ulSectionGlobalDataLength: number;
  /** ptr */
  lpSectionBase: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ulSectionTotalLength: number;
  /** Windows.Win32.Foundation.HANDLE */
  hActCtx: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulAssemblyRosterIndex: number;
}

export const sizeofACTCTX_SECTION_KEYED_DATA_2600 = 72;

export function allocACTCTX_SECTION_KEYED_DATA_2600(data?: Partial<ACTCTX_SECTION_KEYED_DATA_2600>): Uint8Array {
  const buf = new Uint8Array(sizeofACTCTX_SECTION_KEYED_DATA_2600);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.ulDataFormatVersion !== undefined) view.setUint32(4, Number(data.ulDataFormatVersion), true);
  // 0x08: pointer
  if (data?.lpData !== undefined) view.setBigUint64(8, data.lpData === null ? 0n : BigInt(util.toPointer(data.lpData)), true);
  // 0x10: u32
  if (data?.ulLength !== undefined) view.setUint32(16, Number(data.ulLength), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lpSectionGlobalData !== undefined) view.setBigUint64(24, data.lpSectionGlobalData === null ? 0n : BigInt(util.toPointer(data.lpSectionGlobalData)), true);
  // 0x20: u32
  if (data?.ulSectionGlobalDataLength !== undefined) view.setUint32(32, Number(data.ulSectionGlobalDataLength), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.lpSectionBase !== undefined) view.setBigUint64(40, data.lpSectionBase === null ? 0n : BigInt(util.toPointer(data.lpSectionBase)), true);
  // 0x30: u32
  if (data?.ulSectionTotalLength !== undefined) view.setUint32(48, Number(data.ulSectionTotalLength), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.hActCtx !== undefined) view.setBigUint64(56, data.hActCtx === null ? 0n : BigInt(util.toPointer(data.hActCtx)), true);
  // 0x40: u32
  if (data?.ulAssemblyRosterIndex !== undefined) view.setUint32(64, Number(data.ulAssemblyRosterIndex), true);
  // 0x44: pad4
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA (size: 40)
 */
export interface ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA {
  /** ptr */
  lpInformation: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpSectionBase: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ulSectionLength: number;
  /** ptr */
  lpSectionGlobalDataBase: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ulSectionGlobalDataLength: number;
}

export const sizeofACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = 40;

export function allocACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA(data?: Partial<ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA>): Uint8Array {
  const buf = new Uint8Array(sizeofACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpInformation !== undefined) view.setBigUint64(0, data.lpInformation === null ? 0n : BigInt(util.toPointer(data.lpInformation)), true);
  // 0x08: pointer
  if (data?.lpSectionBase !== undefined) view.setBigUint64(8, data.lpSectionBase === null ? 0n : BigInt(util.toPointer(data.lpSectionBase)), true);
  // 0x10: u32
  if (data?.ulSectionLength !== undefined) view.setUint32(16, Number(data.ulSectionLength), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lpSectionGlobalDataBase !== undefined) view.setBigUint64(24, data.lpSectionGlobalDataBase === null ? 0n : BigInt(util.toPointer(data.lpSectionGlobalDataBase)), true);
  // 0x20: u32
  if (data?.ulSectionGlobalDataLength !== undefined) view.setUint32(32, Number(data.ulSectionGlobalDataLength), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.ACTIVATION_CONTEXT_BASIC_INFORMATION (size: 16)
 */
export interface ACTIVATION_CONTEXT_BASIC_INFORMATION {
  /** Windows.Win32.Foundation.HANDLE */
  hActCtx: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
}

export const sizeofACTIVATION_CONTEXT_BASIC_INFORMATION = 16;

export function allocACTIVATION_CONTEXT_BASIC_INFORMATION(data?: Partial<ACTIVATION_CONTEXT_BASIC_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofACTIVATION_CONTEXT_BASIC_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hActCtx !== undefined) view.setBigUint64(0, data.hActCtx === null ? 0n : BigInt(util.toPointer(data.hActCtx)), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.FILE_CASE_SENSITIVE_INFO (size: 8)
 */
export interface FILE_CASE_SENSITIVE_INFO {
  /** u32 */
  Flags: number;
}

export const sizeofFILE_CASE_SENSITIVE_INFO = 8;

export function allocFILE_CASE_SENSITIVE_INFO(data?: Partial<FILE_CASE_SENSITIVE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_CASE_SENSITIVE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.FILE_DISPOSITION_INFO_EX (size: 8)
 */
export interface FILE_DISPOSITION_INFO_EX {
  /** u32 */
  Flags: number;
}

export const sizeofFILE_DISPOSITION_INFO_EX = 8;

export function allocFILE_DISPOSITION_INFO_EX(data?: Partial<FILE_DISPOSITION_INFO_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_DISPOSITION_INFO_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.CLIENT_ID (size: 16)
 */
export interface CLIENT_ID {
  /** Windows.Win32.Foundation.HANDLE */
  UniqueProcess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  UniqueThread: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCLIENT_ID = 16;

export function allocCLIENT_ID(data?: Partial<CLIENT_ID>): Uint8Array {
  const buf = new Uint8Array(sizeofCLIENT_ID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.UniqueProcess !== undefined) view.setBigUint64(0, data.UniqueProcess === null ? 0n : BigInt(util.toPointer(data.UniqueProcess)), true);
  // 0x08: pointer
  if (data?.UniqueThread !== undefined) view.setBigUint64(8, data.UniqueThread === null ? 0n : BigInt(util.toPointer(data.UniqueThread)), true);
  return buf;
}

/**
 * Windows.Win32.System.Kernel.LIST_ENTRY (size: 16)
 */
export interface LIST_ENTRY {
  /** ptr */
  Flink: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Blink: Deno.PointerValue | Uint8Array | null;
}

export const sizeofLIST_ENTRY = 16;

export function allocLIST_ENTRY(data?: Partial<LIST_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofLIST_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Flink !== undefined) view.setBigUint64(0, data.Flink === null ? 0n : BigInt(util.toPointer(data.Flink)), true);
  // 0x08: pointer
  if (data?.Blink !== undefined) view.setBigUint64(8, data.Blink === null ? 0n : BigInt(util.toPointer(data.Blink)), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.UNICODE_STRING (size: 16)
 */
export interface UNICODE_STRING {
  /** u16 */
  Length: number;
  /** u16 */
  MaximumLength: number;
  /** Windows.Win32.Foundation.PWSTR */
  Buffer: string | null;
}

export const sizeofUNICODE_STRING = 16;

export function allocUNICODE_STRING(data?: Partial<UNICODE_STRING>): Uint8Array {
  const buf = new Uint8Array(sizeofUNICODE_STRING);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Length !== undefined) view.setUint16(0, Number(data.Length), true);
  // 0x02: u16
  if (data?.MaximumLength !== undefined) view.setUint16(2, Number(data.MaximumLength), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.Buffer !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Buffer);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.LDR_DATA_TABLE_ENTRY (size: 80)
 */
export interface LDR_DATA_TABLE_ENTRY {
  /** array */
  Reserved1: Deno.PointerValue | null;
  /** Windows.Win32.System.Kernel.LIST_ENTRY */
  InMemoryOrderLinks: Uint8Array | Deno.PointerValue | null;
  /** array */
  Reserved2: Deno.PointerValue | null;
  /** ptr */
  DllBase: Deno.PointerValue | Uint8Array | null;
  /** array */
  Reserved3: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  FullDllName: Uint8Array | Deno.PointerValue | null;
  /** array */
  Reserved4: Deno.PointerValue | null;
  /** array */
  Reserved5: Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  TimeDateStamp: number;
}

export const sizeofLDR_DATA_TABLE_ENTRY = 80;

export function allocLDR_DATA_TABLE_ENTRY(data?: Partial<LDR_DATA_TABLE_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofLDR_DATA_TABLE_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(0, data.Reserved1 === null ? 0n : BigInt(util.toPointer(data.Reserved1)), true);
  // 0x08: pointer
  if (data?.InMemoryOrderLinks !== undefined) view.setBigUint64(8, data.InMemoryOrderLinks === null ? 0n : BigInt(util.toPointer(data.InMemoryOrderLinks)), true);
  // 0x10: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(16, data.Reserved2 === null ? 0n : BigInt(util.toPointer(data.Reserved2)), true);
  // 0x18: pointer
  if (data?.DllBase !== undefined) view.setBigUint64(24, data.DllBase === null ? 0n : BigInt(util.toPointer(data.DllBase)), true);
  // 0x20: pointer
  if (data?.Reserved3 !== undefined) view.setBigUint64(32, data.Reserved3 === null ? 0n : BigInt(util.toPointer(data.Reserved3)), true);
  // 0x28: pointer
  if (data?.FullDllName !== undefined) view.setBigUint64(40, data.FullDllName === null ? 0n : BigInt(util.toPointer(data.FullDllName)), true);
  // 0x30: pointer
  if (data?.Reserved4 !== undefined) view.setBigUint64(48, data.Reserved4 === null ? 0n : BigInt(util.toPointer(data.Reserved4)), true);
  // 0x38: pointer
  if (data?.Reserved5 !== undefined) view.setBigUint64(56, data.Reserved5 === null ? 0n : BigInt(util.toPointer(data.Reserved5)), true);
  // 0x40: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(64, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x48: u32
  if (data?.TimeDateStamp !== undefined) view.setUint32(72, Number(data.TimeDateStamp), true);
  // 0x4c: pad4
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.OBJECT_ATTRIBUTES (size: 48)
 */
export interface OBJECT_ATTRIBUTES {
  /** u32 */
  Length: number;
  /** Windows.Win32.Foundation.HANDLE */
  RootDirectory: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  ObjectName: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Attributes: number;
  /** ptr */
  SecurityDescriptor: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  SecurityQualityOfService: Deno.PointerValue | Uint8Array | null;
}

export const sizeofOBJECT_ATTRIBUTES = 48;

export function allocOBJECT_ATTRIBUTES(data?: Partial<OBJECT_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofOBJECT_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.RootDirectory !== undefined) view.setBigUint64(8, data.RootDirectory === null ? 0n : BigInt(util.toPointer(data.RootDirectory)), true);
  // 0x10: pointer
  if (data?.ObjectName !== undefined) view.setBigUint64(16, data.ObjectName === null ? 0n : BigInt(util.toPointer(data.ObjectName)), true);
  // 0x18: u32
  if (data?.Attributes !== undefined) view.setUint32(24, Number(data.Attributes), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.SecurityDescriptor !== undefined) view.setBigUint64(32, data.SecurityDescriptor === null ? 0n : BigInt(util.toPointer(data.SecurityDescriptor)), true);
  // 0x28: pointer
  if (data?.SecurityQualityOfService !== undefined) view.setBigUint64(40, data.SecurityQualityOfService === null ? 0n : BigInt(util.toPointer(data.SecurityQualityOfService)), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.IO_STATUS_BLOCK (size: 16)
 */
export interface IO_STATUS_BLOCK {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** usize */
  Information: Deno.PointerValue;
}

export const sizeofIO_STATUS_BLOCK = 16;

export function allocIO_STATUS_BLOCK(data?: Partial<IO_STATUS_BLOCK>): Uint8Array {
  const buf = new Uint8Array(sizeofIO_STATUS_BLOCK);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: usize
  if (data?.Information !== undefined) view.setBigUint64(8, BigInt(data.Information), true);
  return buf;
}

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Foundation.LARGE_INTEGER (size: 24)
 */
export interface LARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  QuadPart: Deno.PointerValue;
}

export const sizeofLARGE_INTEGER = 24;

export function allocLARGE_INTEGER(data?: Partial<LARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofLARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  // 0x10: i64
  if (data?.QuadPart !== undefined) view.setBigInt64(16, BigInt(data.QuadPart), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION (size: 40)
 */
export interface SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  IdleTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  KernelTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  UserTime: Uint8Array | Deno.PointerValue | null;
  /** array */
  Reserved1: Deno.PointerValue | null;
  /** u32 */
  Reserved2: number;
}

export const sizeofSYSTEM_PROCESSOR_PERFORMANCE_INFORMATION = 40;

export function allocSYSTEM_PROCESSOR_PERFORMANCE_INFORMATION(data?: Partial<SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_PROCESSOR_PERFORMANCE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.IdleTime !== undefined) view.setBigUint64(0, data.IdleTime === null ? 0n : BigInt(util.toPointer(data.IdleTime)), true);
  // 0x08: pointer
  if (data?.KernelTime !== undefined) view.setBigUint64(8, data.KernelTime === null ? 0n : BigInt(util.toPointer(data.KernelTime)), true);
  // 0x10: pointer
  if (data?.UserTime !== undefined) view.setBigUint64(16, data.UserTime === null ? 0n : BigInt(util.toPointer(data.UserTime)), true);
  // 0x18: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(24, data.Reserved1 === null ? 0n : BigInt(util.toPointer(data.Reserved1)), true);
  // 0x20: u32
  if (data?.Reserved2 !== undefined) view.setUint32(32, Number(data.Reserved2), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.SYSTEM_PROCESS_INFORMATION (size: 168)
 */
export interface SYSTEM_PROCESS_INFORMATION {
  /** u32 */
  NextEntryOffset: number;
  /** u32 */
  NumberOfThreads: number;
  /** array */
  Reserved1: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ImageName: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  BasePriority: number;
  /** Windows.Win32.Foundation.HANDLE */
  UniqueProcessId: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Reserved2: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  HandleCount: number;
  /** u32 */
  SessionId: number;
  /** ptr */
  Reserved3: Deno.PointerValue | Uint8Array | null;
  /** usize */
  PeakVirtualSize: Deno.PointerValue;
  /** usize */
  VirtualSize: Deno.PointerValue;
  /** u32 */
  Reserved4: number;
  /** usize */
  PeakWorkingSetSize: Deno.PointerValue;
  /** usize */
  WorkingSetSize: Deno.PointerValue;
  /** ptr */
  Reserved5: Deno.PointerValue | Uint8Array | null;
  /** usize */
  QuotaPagedPoolUsage: Deno.PointerValue;
  /** ptr */
  Reserved6: Deno.PointerValue | Uint8Array | null;
  /** usize */
  QuotaNonPagedPoolUsage: Deno.PointerValue;
  /** usize */
  PagefileUsage: Deno.PointerValue;
  /** usize */
  PeakPagefileUsage: Deno.PointerValue;
  /** usize */
  PrivatePageCount: Deno.PointerValue;
  /** array */
  Reserved7: Deno.PointerValue | null;
}

export const sizeofSYSTEM_PROCESS_INFORMATION = 168;

export function allocSYSTEM_PROCESS_INFORMATION(data?: Partial<SYSTEM_PROCESS_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_PROCESS_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NextEntryOffset !== undefined) view.setUint32(0, Number(data.NextEntryOffset), true);
  // 0x04: u32
  if (data?.NumberOfThreads !== undefined) view.setUint32(4, Number(data.NumberOfThreads), true);
  // 0x08: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(8, data.Reserved1 === null ? 0n : BigInt(util.toPointer(data.Reserved1)), true);
  // 0x10: pointer
  if (data?.ImageName !== undefined) view.setBigUint64(16, data.ImageName === null ? 0n : BigInt(util.toPointer(data.ImageName)), true);
  // 0x18: i32
  if (data?.BasePriority !== undefined) view.setInt32(24, Number(data.BasePriority), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.UniqueProcessId !== undefined) view.setBigUint64(32, data.UniqueProcessId === null ? 0n : BigInt(util.toPointer(data.UniqueProcessId)), true);
  // 0x28: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(40, data.Reserved2 === null ? 0n : BigInt(util.toPointer(data.Reserved2)), true);
  // 0x30: u32
  if (data?.HandleCount !== undefined) view.setUint32(48, Number(data.HandleCount), true);
  // 0x34: u32
  if (data?.SessionId !== undefined) view.setUint32(52, Number(data.SessionId), true);
  // 0x38: pointer
  if (data?.Reserved3 !== undefined) view.setBigUint64(56, data.Reserved3 === null ? 0n : BigInt(util.toPointer(data.Reserved3)), true);
  // 0x40: usize
  if (data?.PeakVirtualSize !== undefined) view.setBigUint64(64, BigInt(data.PeakVirtualSize), true);
  // 0x48: usize
  if (data?.VirtualSize !== undefined) view.setBigUint64(72, BigInt(data.VirtualSize), true);
  // 0x50: u32
  if (data?.Reserved4 !== undefined) view.setUint32(80, Number(data.Reserved4), true);
  // 0x54: pad4
  // 0x58: usize
  if (data?.PeakWorkingSetSize !== undefined) view.setBigUint64(88, BigInt(data.PeakWorkingSetSize), true);
  // 0x60: usize
  if (data?.WorkingSetSize !== undefined) view.setBigUint64(96, BigInt(data.WorkingSetSize), true);
  // 0x68: pointer
  if (data?.Reserved5 !== undefined) view.setBigUint64(104, data.Reserved5 === null ? 0n : BigInt(util.toPointer(data.Reserved5)), true);
  // 0x70: usize
  if (data?.QuotaPagedPoolUsage !== undefined) view.setBigUint64(112, BigInt(data.QuotaPagedPoolUsage), true);
  // 0x78: pointer
  if (data?.Reserved6 !== undefined) view.setBigUint64(120, data.Reserved6 === null ? 0n : BigInt(util.toPointer(data.Reserved6)), true);
  // 0x80: usize
  if (data?.QuotaNonPagedPoolUsage !== undefined) view.setBigUint64(128, BigInt(data.QuotaNonPagedPoolUsage), true);
  // 0x88: usize
  if (data?.PagefileUsage !== undefined) view.setBigUint64(136, BigInt(data.PagefileUsage), true);
  // 0x90: usize
  if (data?.PeakPagefileUsage !== undefined) view.setBigUint64(144, BigInt(data.PeakPagefileUsage), true);
  // 0x98: usize
  if (data?.PrivatePageCount !== undefined) view.setBigUint64(152, BigInt(data.PrivatePageCount), true);
  // 0xa0: pointer
  if (data?.Reserved7 !== undefined) view.setBigUint64(160, data.Reserved7 === null ? 0n : BigInt(util.toPointer(data.Reserved7)), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.SYSTEM_THREAD_INFORMATION (size: 56)
 */
export interface SYSTEM_THREAD_INFORMATION {
  /** array */
  Reserved1: Deno.PointerValue | null;
  /** u32 */
  Reserved2: number;
  /** ptr */
  StartAddress: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.WindowsProgramming.CLIENT_ID */
  ClientId: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  Priority: number;
  /** i32 */
  BasePriority: number;
  /** u32 */
  Reserved3: number;
  /** u32 */
  ThreadState: number;
  /** u32 */
  WaitReason: number;
}

export const sizeofSYSTEM_THREAD_INFORMATION = 56;

export function allocSYSTEM_THREAD_INFORMATION(data?: Partial<SYSTEM_THREAD_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_THREAD_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(0, data.Reserved1 === null ? 0n : BigInt(util.toPointer(data.Reserved1)), true);
  // 0x08: u32
  if (data?.Reserved2 !== undefined) view.setUint32(8, Number(data.Reserved2), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.StartAddress !== undefined) view.setBigUint64(16, data.StartAddress === null ? 0n : BigInt(util.toPointer(data.StartAddress)), true);
  // 0x18: pointer
  if (data?.ClientId !== undefined) view.setBigUint64(24, data.ClientId === null ? 0n : BigInt(util.toPointer(data.ClientId)), true);
  // 0x20: i32
  if (data?.Priority !== undefined) view.setInt32(32, Number(data.Priority), true);
  // 0x24: i32
  if (data?.BasePriority !== undefined) view.setInt32(36, Number(data.BasePriority), true);
  // 0x28: u32
  if (data?.Reserved3 !== undefined) view.setUint32(40, Number(data.Reserved3), true);
  // 0x2c: u32
  if (data?.ThreadState !== undefined) view.setUint32(44, Number(data.ThreadState), true);
  // 0x30: u32
  if (data?.WaitReason !== undefined) view.setUint32(48, Number(data.WaitReason), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.SYSTEM_REGISTRY_QUOTA_INFORMATION (size: 16)
 */
export interface SYSTEM_REGISTRY_QUOTA_INFORMATION {
  /** u32 */
  RegistryQuotaAllowed: number;
  /** u32 */
  RegistryQuotaUsed: number;
  /** ptr */
  Reserved1: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSYSTEM_REGISTRY_QUOTA_INFORMATION = 16;

export function allocSYSTEM_REGISTRY_QUOTA_INFORMATION(data?: Partial<SYSTEM_REGISTRY_QUOTA_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_REGISTRY_QUOTA_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.RegistryQuotaAllowed !== undefined) view.setUint32(0, Number(data.RegistryQuotaAllowed), true);
  // 0x04: u32
  if (data?.RegistryQuotaUsed !== undefined) view.setUint32(4, Number(data.RegistryQuotaUsed), true);
  // 0x08: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(8, data.Reserved1 === null ? 0n : BigInt(util.toPointer(data.Reserved1)), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.SYSTEM_BASIC_INFORMATION (size: 24)
 */
export interface SYSTEM_BASIC_INFORMATION {
  /** array */
  Reserved1: Deno.PointerValue | null;
  /** array */
  Reserved2: Deno.PointerValue | null;
  /** i8 */
  NumberOfProcessors: number;
}

export const sizeofSYSTEM_BASIC_INFORMATION = 24;

export function allocSYSTEM_BASIC_INFORMATION(data?: Partial<SYSTEM_BASIC_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_BASIC_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(0, data.Reserved1 === null ? 0n : BigInt(util.toPointer(data.Reserved1)), true);
  // 0x08: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(8, data.Reserved2 === null ? 0n : BigInt(util.toPointer(data.Reserved2)), true);
  // 0x10: i8
  if (data?.NumberOfProcessors !== undefined) view.setInt8(16, Number(data.NumberOfProcessors));
  // 0x11: pad7
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.SYSTEM_TIMEOFDAY_INFORMATION (size: 8)
 */
export interface SYSTEM_TIMEOFDAY_INFORMATION {
  /** array */
  Reserved1: Deno.PointerValue | null;
}

export const sizeofSYSTEM_TIMEOFDAY_INFORMATION = 8;

export function allocSYSTEM_TIMEOFDAY_INFORMATION(data?: Partial<SYSTEM_TIMEOFDAY_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_TIMEOFDAY_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(0, data.Reserved1 === null ? 0n : BigInt(util.toPointer(data.Reserved1)), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.SYSTEM_PERFORMANCE_INFORMATION (size: 8)
 */
export interface SYSTEM_PERFORMANCE_INFORMATION {
  /** array */
  Reserved1: Deno.PointerValue | null;
}

export const sizeofSYSTEM_PERFORMANCE_INFORMATION = 8;

export function allocSYSTEM_PERFORMANCE_INFORMATION(data?: Partial<SYSTEM_PERFORMANCE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_PERFORMANCE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(0, data.Reserved1 === null ? 0n : BigInt(util.toPointer(data.Reserved1)), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.SYSTEM_EXCEPTION_INFORMATION (size: 8)
 */
export interface SYSTEM_EXCEPTION_INFORMATION {
  /** array */
  Reserved1: Deno.PointerValue | null;
}

export const sizeofSYSTEM_EXCEPTION_INFORMATION = 8;

export function allocSYSTEM_EXCEPTION_INFORMATION(data?: Partial<SYSTEM_EXCEPTION_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_EXCEPTION_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(0, data.Reserved1 === null ? 0n : BigInt(util.toPointer(data.Reserved1)), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.SYSTEM_LOOKASIDE_INFORMATION (size: 8)
 */
export interface SYSTEM_LOOKASIDE_INFORMATION {
  /** array */
  Reserved1: Deno.PointerValue | null;
}

export const sizeofSYSTEM_LOOKASIDE_INFORMATION = 8;

export function allocSYSTEM_LOOKASIDE_INFORMATION(data?: Partial<SYSTEM_LOOKASIDE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_LOOKASIDE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(0, data.Reserved1 === null ? 0n : BigInt(util.toPointer(data.Reserved1)), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.SYSTEM_INTERRUPT_INFORMATION (size: 8)
 */
export interface SYSTEM_INTERRUPT_INFORMATION {
  /** array */
  Reserved1: Deno.PointerValue | null;
}

export const sizeofSYSTEM_INTERRUPT_INFORMATION = 8;

export function allocSYSTEM_INTERRUPT_INFORMATION(data?: Partial<SYSTEM_INTERRUPT_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_INTERRUPT_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(0, data.Reserved1 === null ? 0n : BigInt(util.toPointer(data.Reserved1)), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.SYSTEM_POLICY_INFORMATION (size: 16)
 */
export interface SYSTEM_POLICY_INFORMATION {
  /** array */
  Reserved1: Deno.PointerValue | null;
  /** array */
  Reserved2: Deno.PointerValue | null;
}

export const sizeofSYSTEM_POLICY_INFORMATION = 16;

export function allocSYSTEM_POLICY_INFORMATION(data?: Partial<SYSTEM_POLICY_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_POLICY_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(0, data.Reserved1 === null ? 0n : BigInt(util.toPointer(data.Reserved1)), true);
  // 0x08: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(8, data.Reserved2 === null ? 0n : BigInt(util.toPointer(data.Reserved2)), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.THREAD_NAME_INFORMATION (size: 8)
 */
export interface THREAD_NAME_INFORMATION {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ThreadName: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTHREAD_NAME_INFORMATION = 8;

export function allocTHREAD_NAME_INFORMATION(data?: Partial<THREAD_NAME_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofTHREAD_NAME_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ThreadName !== undefined) view.setBigUint64(0, data.ThreadName === null ? 0n : BigInt(util.toPointer(data.ThreadName)), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.SYSTEM_CODEINTEGRITY_INFORMATION (size: 8)
 */
export interface SYSTEM_CODEINTEGRITY_INFORMATION {
  /** u32 */
  Length: number;
  /** u32 */
  CodeIntegrityOptions: number;
}

export const sizeofSYSTEM_CODEINTEGRITY_INFORMATION = 8;

export function allocSYSTEM_CODEINTEGRITY_INFORMATION(data?: Partial<SYSTEM_CODEINTEGRITY_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_CODEINTEGRITY_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: u32
  if (data?.CodeIntegrityOptions !== undefined) view.setUint32(4, Number(data.CodeIntegrityOptions), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.PUBLIC_OBJECT_BASIC_INFORMATION (size: 24)
 */
export interface PUBLIC_OBJECT_BASIC_INFORMATION {
  /** u32 */
  Attributes: number;
  /** u32 */
  GrantedAccess: number;
  /** u32 */
  HandleCount: number;
  /** u32 */
  PointerCount: number;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofPUBLIC_OBJECT_BASIC_INFORMATION = 24;

export function allocPUBLIC_OBJECT_BASIC_INFORMATION(data?: Partial<PUBLIC_OBJECT_BASIC_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPUBLIC_OBJECT_BASIC_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Attributes !== undefined) view.setUint32(0, Number(data.Attributes), true);
  // 0x04: u32
  if (data?.GrantedAccess !== undefined) view.setUint32(4, Number(data.GrantedAccess), true);
  // 0x08: u32
  if (data?.HandleCount !== undefined) view.setUint32(8, Number(data.HandleCount), true);
  // 0x0c: u32
  if (data?.PointerCount !== undefined) view.setUint32(12, Number(data.PointerCount), true);
  // 0x10: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(16, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.PUBLIC_OBJECT_TYPE_INFORMATION (size: 16)
 */
export interface PUBLIC_OBJECT_TYPE_INFORMATION {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  TypeName: Uint8Array | Deno.PointerValue | null;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofPUBLIC_OBJECT_TYPE_INFORMATION = 16;

export function allocPUBLIC_OBJECT_TYPE_INFORMATION(data?: Partial<PUBLIC_OBJECT_TYPE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPUBLIC_OBJECT_TYPE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TypeName !== undefined) view.setBigUint64(0, data.TypeName === null ? 0n : BigInt(util.toPointer(data.TypeName)), true);
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.KEY_VALUE_ENTRY (size: 24)
 */
export interface KEY_VALUE_ENTRY {
  /** ptr */
  ValueName: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  DataLength: number;
  /** u32 */
  DataOffset: number;
  /** u32 */
  Type: number;
}

export const sizeofKEY_VALUE_ENTRY = 24;

export function allocKEY_VALUE_ENTRY(data?: Partial<KEY_VALUE_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofKEY_VALUE_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ValueName !== undefined) view.setBigUint64(0, data.ValueName === null ? 0n : BigInt(util.toPointer(data.ValueName)), true);
  // 0x08: u32
  if (data?.DataLength !== undefined) view.setUint32(8, Number(data.DataLength), true);
  // 0x0c: u32
  if (data?.DataOffset !== undefined) view.setUint32(12, Number(data.DataOffset), true);
  // 0x10: u32
  if (data?.Type !== undefined) view.setUint32(16, Number(data.Type), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.WINSTATIONINFORMATIONW (size: 24)
 */
export interface WINSTATIONINFORMATIONW {
  /** array */
  Reserved2: Deno.PointerValue | null;
  /** u32 */
  LogonId: number;
  /** array */
  Reserved3: Deno.PointerValue | null;
}

export const sizeofWINSTATIONINFORMATIONW = 24;

export function allocWINSTATIONINFORMATIONW(data?: Partial<WINSTATIONINFORMATIONW>): Uint8Array {
  const buf = new Uint8Array(sizeofWINSTATIONINFORMATIONW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(0, data.Reserved2 === null ? 0n : BigInt(util.toPointer(data.Reserved2)), true);
  // 0x08: u32
  if (data?.LogonId !== undefined) view.setUint32(8, Number(data.LogonId), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Reserved3 !== undefined) view.setBigUint64(16, data.Reserved3 === null ? 0n : BigInt(util.toPointer(data.Reserved3)), true);
  return buf;
}

export type HRESULT = number;

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.System.WindowsProgramming.FEATURE_ERROR (size: 112)
 */
export interface FEATURE_ERROR {
  /** Windows.Win32.Foundation.HRESULT */
  hr: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  lineNumber: number;
  /** Windows.Win32.Foundation.PSTR */
  file: string | null;
  /** Windows.Win32.Foundation.PSTR */
  process: string | null;
  /** Windows.Win32.Foundation.PSTR */
  module: string | null;
  /** u32 */
  callerReturnAddressOffset: number;
  /** Windows.Win32.Foundation.PSTR */
  callerModule: string | null;
  /** Windows.Win32.Foundation.PSTR */
  message: string | null;
  /** u16 */
  originLineNumber: number;
  /** Windows.Win32.Foundation.PSTR */
  originFile: string | null;
  /** Windows.Win32.Foundation.PSTR */
  originModule: string | null;
  /** u32 */
  originCallerReturnAddressOffset: number;
  /** Windows.Win32.Foundation.PSTR */
  originCallerModule: string | null;
  /** Windows.Win32.Foundation.PSTR */
  originName: string | null;
}

export const sizeofFEATURE_ERROR = 112;

export function allocFEATURE_ERROR(data?: Partial<FEATURE_ERROR>): Uint8Array {
  const buf = new Uint8Array(sizeofFEATURE_ERROR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hr !== undefined) view.setBigUint64(0, data.hr === null ? 0n : BigInt(util.toPointer(data.hr)), true);
  // 0x08: u16
  if (data?.lineNumber !== undefined) view.setUint16(8, Number(data.lineNumber), true);
  // 0x0a: pad6
  // 0x10: buffer
  if (data?.file !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.file);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.process !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.process);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.module !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.module);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.callerReturnAddressOffset !== undefined) view.setUint32(40, Number(data.callerReturnAddressOffset), true);
  // 0x2c: pad4
  // 0x30: buffer
  if (data?.callerModule !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.callerModule);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: buffer
  if (data?.message !== undefined) {
    (buf as any)._f56 = util.pstrToFfi(data.message);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: u16
  if (data?.originLineNumber !== undefined) view.setUint16(64, Number(data.originLineNumber), true);
  // 0x42: pad6
  // 0x48: buffer
  if (data?.originFile !== undefined) {
    (buf as any)._f72 = util.pstrToFfi(data.originFile);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: buffer
  if (data?.originModule !== undefined) {
    (buf as any)._f80 = util.pstrToFfi(data.originModule);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  // 0x58: u32
  if (data?.originCallerReturnAddressOffset !== undefined) view.setUint32(88, Number(data.originCallerReturnAddressOffset), true);
  // 0x5c: pad4
  // 0x60: buffer
  if (data?.originCallerModule !== undefined) {
    (buf as any)._f96 = util.pstrToFfi(data.originCallerModule);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f96)), true);
  }
  // 0x68: buffer
  if (data?.originName !== undefined) {
    (buf as any)._f104 = util.pstrToFfi(data.originName);
    view.setBigUint64(104, (buf as any)._f104 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f104)), true);
  }
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.DCICMD (size: 24)
 */
export interface DCICMD {
  /** u32 */
  dwCommand: number;
  /** u32 */
  dwParam1: number;
  /** u32 */
  dwParam2: number;
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwReserved: number;
}

export const sizeofDCICMD = 24;

export function allocDCICMD(data?: Partial<DCICMD>): Uint8Array {
  const buf = new Uint8Array(sizeofDCICMD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwCommand !== undefined) view.setUint32(0, Number(data.dwCommand), true);
  // 0x04: u32
  if (data?.dwParam1 !== undefined) view.setUint32(4, Number(data.dwParam1), true);
  // 0x08: u32
  if (data?.dwParam2 !== undefined) view.setUint32(8, Number(data.dwParam2), true);
  // 0x0c: u32
  if (data?.dwVersion !== undefined) view.setUint32(12, Number(data.dwVersion), true);
  // 0x10: u32
  if (data?.dwReserved !== undefined) view.setUint32(16, Number(data.dwReserved), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.DCICREATEINPUT (size: 48)
 */
export interface DCICREATEINPUT {
  /** Windows.Win32.System.WindowsProgramming.DCICMD */
  cmd: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwCompression: number;
  /** array */
  dwMask: Deno.PointerValue | null;
  /** u32 */
  dwWidth: number;
  /** u32 */
  dwHeight: number;
  /** u32 */
  dwDCICaps: number;
  /** u32 */
  dwBitCount: number;
  /** ptr */
  lpSurface: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDCICREATEINPUT = 48;

export function allocDCICREATEINPUT(data?: Partial<DCICREATEINPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofDCICREATEINPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.cmd !== undefined) view.setBigUint64(0, data.cmd === null ? 0n : BigInt(util.toPointer(data.cmd)), true);
  // 0x08: u32
  if (data?.dwCompression !== undefined) view.setUint32(8, Number(data.dwCompression), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.dwMask !== undefined) view.setBigUint64(16, data.dwMask === null ? 0n : BigInt(util.toPointer(data.dwMask)), true);
  // 0x18: u32
  if (data?.dwWidth !== undefined) view.setUint32(24, Number(data.dwWidth), true);
  // 0x1c: u32
  if (data?.dwHeight !== undefined) view.setUint32(28, Number(data.dwHeight), true);
  // 0x20: u32
  if (data?.dwDCICaps !== undefined) view.setUint32(32, Number(data.dwDCICaps), true);
  // 0x24: u32
  if (data?.dwBitCount !== undefined) view.setUint32(36, Number(data.dwBitCount), true);
  // 0x28: pointer
  if (data?.lpSurface !== undefined) view.setBigUint64(40, data.lpSurface === null ? 0n : BigInt(util.toPointer(data.lpSurface)), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.DCISURFACEINFO (size: 88)
 */
export interface DCISURFACEINFO {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwDCICaps: number;
  /** u32 */
  dwCompression: number;
  /** array */
  dwMask: Deno.PointerValue | null;
  /** u32 */
  dwWidth: number;
  /** u32 */
  dwHeight: number;
  /** i32 */
  lStride: number;
  /** u32 */
  dwBitCount: number;
  /** usize */
  dwOffSurface: Deno.PointerValue;
  /** u16 */
  wSelSurface: number;
  /** u16 */
  wReserved: number;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
  /** u32 */
  dwReserved3: number;
  /** isize */
  BeginAccess: Deno.PointerValue;
  /** isize */
  EndAccess: Deno.PointerValue;
  /** isize */
  DestroySurface: Deno.PointerValue;
}

export const sizeofDCISURFACEINFO = 88;

export function allocDCISURFACEINFO(data?: Partial<DCISURFACEINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDCISURFACEINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwDCICaps !== undefined) view.setUint32(4, Number(data.dwDCICaps), true);
  // 0x08: u32
  if (data?.dwCompression !== undefined) view.setUint32(8, Number(data.dwCompression), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.dwMask !== undefined) view.setBigUint64(16, data.dwMask === null ? 0n : BigInt(util.toPointer(data.dwMask)), true);
  // 0x18: u32
  if (data?.dwWidth !== undefined) view.setUint32(24, Number(data.dwWidth), true);
  // 0x1c: u32
  if (data?.dwHeight !== undefined) view.setUint32(28, Number(data.dwHeight), true);
  // 0x20: i32
  if (data?.lStride !== undefined) view.setInt32(32, Number(data.lStride), true);
  // 0x24: u32
  if (data?.dwBitCount !== undefined) view.setUint32(36, Number(data.dwBitCount), true);
  // 0x28: usize
  if (data?.dwOffSurface !== undefined) view.setBigUint64(40, BigInt(data.dwOffSurface), true);
  // 0x30: u16
  if (data?.wSelSurface !== undefined) view.setUint16(48, Number(data.wSelSurface), true);
  // 0x32: u16
  if (data?.wReserved !== undefined) view.setUint16(50, Number(data.wReserved), true);
  // 0x34: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(52, Number(data.dwReserved1), true);
  // 0x38: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(56, Number(data.dwReserved2), true);
  // 0x3c: u32
  if (data?.dwReserved3 !== undefined) view.setUint32(60, Number(data.dwReserved3), true);
  // 0x40: isize
  if (data?.BeginAccess !== undefined) view.setBigInt64(64, BigInt(data.BeginAccess), true);
  // 0x48: isize
  if (data?.EndAccess !== undefined) view.setBigInt64(72, BigInt(data.EndAccess), true);
  // 0x50: isize
  if (data?.DestroySurface !== undefined) view.setBigInt64(80, BigInt(data.DestroySurface), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.RECT (size: 16)
 */
export interface RECT {
  /** i32 */
  left: number;
  /** i32 */
  top: number;
  /** i32 */
  right: number;
  /** i32 */
  bottom: number;
}

export const sizeofRECT = 16;

export function allocRECT(data?: Partial<RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofRECT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.left !== undefined) view.setInt32(0, Number(data.left), true);
  // 0x04: i32
  if (data?.top !== undefined) view.setInt32(4, Number(data.top), true);
  // 0x08: i32
  if (data?.right !== undefined) view.setInt32(8, Number(data.right), true);
  // 0x0c: i32
  if (data?.bottom !== undefined) view.setInt32(12, Number(data.bottom), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.DCIENUMINPUT (size: 40)
 */
export interface DCIENUMINPUT {
  /** Windows.Win32.System.WindowsProgramming.DCICMD */
  cmd: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rSrc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rDst: Uint8Array | Deno.PointerValue | null;
  /** isize */
  EnumCallback: Deno.PointerValue;
  /** ptr */
  lpContext: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDCIENUMINPUT = 40;

export function allocDCIENUMINPUT(data?: Partial<DCIENUMINPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofDCIENUMINPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.cmd !== undefined) view.setBigUint64(0, data.cmd === null ? 0n : BigInt(util.toPointer(data.cmd)), true);
  // 0x08: pointer
  if (data?.rSrc !== undefined) view.setBigUint64(8, data.rSrc === null ? 0n : BigInt(util.toPointer(data.rSrc)), true);
  // 0x10: pointer
  if (data?.rDst !== undefined) view.setBigUint64(16, data.rDst === null ? 0n : BigInt(util.toPointer(data.rDst)), true);
  // 0x18: isize
  if (data?.EnumCallback !== undefined) view.setBigInt64(24, BigInt(data.EnumCallback), true);
  // 0x20: pointer
  if (data?.lpContext !== undefined) view.setBigUint64(32, data.lpContext === null ? 0n : BigInt(util.toPointer(data.lpContext)), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.DCIOFFSCREEN (size: 32)
 */
export interface DCIOFFSCREEN {
  /** Windows.Win32.System.WindowsProgramming.DCISURFACEINFO */
  dciInfo: Uint8Array | Deno.PointerValue | null;
  /** isize */
  Draw: Deno.PointerValue;
  /** isize */
  SetClipList: Deno.PointerValue;
  /** isize */
  SetDestination: Deno.PointerValue;
}

export const sizeofDCIOFFSCREEN = 32;

export function allocDCIOFFSCREEN(data?: Partial<DCIOFFSCREEN>): Uint8Array {
  const buf = new Uint8Array(sizeofDCIOFFSCREEN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.dciInfo !== undefined) view.setBigUint64(0, data.dciInfo === null ? 0n : BigInt(util.toPointer(data.dciInfo)), true);
  // 0x08: isize
  if (data?.Draw !== undefined) view.setBigInt64(8, BigInt(data.Draw), true);
  // 0x10: isize
  if (data?.SetClipList !== undefined) view.setBigInt64(16, BigInt(data.SetClipList), true);
  // 0x18: isize
  if (data?.SetDestination !== undefined) view.setBigInt64(24, BigInt(data.SetDestination), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.DCIOVERLAY (size: 16)
 */
export interface DCIOVERLAY {
  /** Windows.Win32.System.WindowsProgramming.DCISURFACEINFO */
  dciInfo: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwChromakeyValue: number;
  /** u32 */
  dwChromakeyMask: number;
}

export const sizeofDCIOVERLAY = 16;

export function allocDCIOVERLAY(data?: Partial<DCIOVERLAY>): Uint8Array {
  const buf = new Uint8Array(sizeofDCIOVERLAY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.dciInfo !== undefined) view.setBigUint64(0, data.dciInfo === null ? 0n : BigInt(util.toPointer(data.dciInfo)), true);
  // 0x08: u32
  if (data?.dwChromakeyValue !== undefined) view.setUint32(8, Number(data.dwChromakeyValue), true);
  // 0x0c: u32
  if (data?.dwChromakeyMask !== undefined) view.setUint32(12, Number(data.dwChromakeyMask), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.STRENTRYA (size: 16)
 */
export interface STRENTRYA {
  /** Windows.Win32.Foundation.PSTR */
  pszName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  pszValue: string | null;
}

export const sizeofSTRENTRYA = 16;

export function allocSTRENTRYA(data?: Partial<STRENTRYA>): Uint8Array {
  const buf = new Uint8Array(sizeofSTRENTRYA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pszValue !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszValue);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.STRENTRYW (size: 16)
 */
export interface STRENTRYW {
  /** Windows.Win32.Foundation.PWSTR */
  pszName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszValue: string | null;
}

export const sizeofSTRENTRYW = 16;

export function allocSTRENTRYW(data?: Partial<STRENTRYW>): Uint8Array {
  const buf = new Uint8Array(sizeofSTRENTRYW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pszValue !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszValue);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.STRTABLEA (size: 16)
 */
export interface STRTABLEA {
  /** u32 */
  cEntries: number;
  /** ptr */
  pse: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSTRTABLEA = 16;

export function allocSTRTABLEA(data?: Partial<STRTABLEA>): Uint8Array {
  const buf = new Uint8Array(sizeofSTRTABLEA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cEntries !== undefined) view.setUint32(0, Number(data.cEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pse !== undefined) view.setBigUint64(8, data.pse === null ? 0n : BigInt(util.toPointer(data.pse)), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.STRTABLEW (size: 16)
 */
export interface STRTABLEW {
  /** u32 */
  cEntries: number;
  /** ptr */
  pse: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSTRTABLEW = 16;

export function allocSTRTABLEW(data?: Partial<STRTABLEW>): Uint8Array {
  const buf = new Uint8Array(sizeofSTRTABLEW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cEntries !== undefined) view.setUint32(0, Number(data.cEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pse !== undefined) view.setBigUint64(8, data.pse === null ? 0n : BigInt(util.toPointer(data.pse)), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.CABINFOA (size: 40)
 */
export interface CABINFOA {
  /** Windows.Win32.Foundation.PSTR */
  pszCab: string | null;
  /** Windows.Win32.Foundation.PSTR */
  pszInf: string | null;
  /** Windows.Win32.Foundation.PSTR */
  pszSection: string | null;
  /** array */
  szSrcPath: Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
}

export const sizeofCABINFOA = 40;

export function allocCABINFOA(data?: Partial<CABINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofCABINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszCab !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszCab);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pszInf !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszInf);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pszSection !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pszSection);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.szSrcPath !== undefined) view.setBigUint64(24, data.szSrcPath === null ? 0n : BigInt(util.toPointer(data.szSrcPath)), true);
  // 0x20: u32
  if (data?.dwFlags !== undefined) view.setUint32(32, Number(data.dwFlags), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.CABINFOW (size: 40)
 */
export interface CABINFOW {
  /** Windows.Win32.Foundation.PWSTR */
  pszCab: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszInf: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszSection: string | null;
  /** array */
  szSrcPath: Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
}

export const sizeofCABINFOW = 40;

export function allocCABINFOW(data?: Partial<CABINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofCABINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszCab !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszCab);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pszInf !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszInf);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pszSection !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszSection);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.szSrcPath !== undefined) view.setBigUint64(24, data.szSrcPath === null ? 0n : BigInt(util.toPointer(data.szSrcPath)), true);
  // 0x20: u32
  if (data?.dwFlags !== undefined) view.setUint32(32, Number(data.dwFlags), true);
  // 0x24: pad4
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.System.WindowsProgramming.PERUSERSECTIONA (size: 56)
 */
export interface PERUSERSECTIONA {
  /** array */
  szGUID: Deno.PointerValue | null;
  /** array */
  szDispName: Deno.PointerValue | null;
  /** array */
  szLocale: Deno.PointerValue | null;
  /** array */
  szStub: Deno.PointerValue | null;
  /** array */
  szVersion: Deno.PointerValue | null;
  /** array */
  szCompID: Deno.PointerValue | null;
  /** u32 */
  dwIsInstalled: number;
  /** Windows.Win32.Foundation.BOOL */
  bRollback: boolean;
}

export const sizeofPERUSERSECTIONA = 56;

export function allocPERUSERSECTIONA(data?: Partial<PERUSERSECTIONA>): Uint8Array {
  const buf = new Uint8Array(sizeofPERUSERSECTIONA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.szGUID !== undefined) view.setBigUint64(0, data.szGUID === null ? 0n : BigInt(util.toPointer(data.szGUID)), true);
  // 0x08: pointer
  if (data?.szDispName !== undefined) view.setBigUint64(8, data.szDispName === null ? 0n : BigInt(util.toPointer(data.szDispName)), true);
  // 0x10: pointer
  if (data?.szLocale !== undefined) view.setBigUint64(16, data.szLocale === null ? 0n : BigInt(util.toPointer(data.szLocale)), true);
  // 0x18: pointer
  if (data?.szStub !== undefined) view.setBigUint64(24, data.szStub === null ? 0n : BigInt(util.toPointer(data.szStub)), true);
  // 0x20: pointer
  if (data?.szVersion !== undefined) view.setBigUint64(32, data.szVersion === null ? 0n : BigInt(util.toPointer(data.szVersion)), true);
  // 0x28: pointer
  if (data?.szCompID !== undefined) view.setBigUint64(40, data.szCompID === null ? 0n : BigInt(util.toPointer(data.szCompID)), true);
  // 0x30: u32
  if (data?.dwIsInstalled !== undefined) view.setUint32(48, Number(data.dwIsInstalled), true);
  // 0x34: i32
  if (data?.bRollback !== undefined) view.setInt32(52, Number(data.bRollback), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.PERUSERSECTIONW (size: 56)
 */
export interface PERUSERSECTIONW {
  /** array */
  szGUID: Deno.PointerValue | null;
  /** array */
  szDispName: Deno.PointerValue | null;
  /** array */
  szLocale: Deno.PointerValue | null;
  /** array */
  szStub: Deno.PointerValue | null;
  /** array */
  szVersion: Deno.PointerValue | null;
  /** array */
  szCompID: Deno.PointerValue | null;
  /** u32 */
  dwIsInstalled: number;
  /** Windows.Win32.Foundation.BOOL */
  bRollback: boolean;
}

export const sizeofPERUSERSECTIONW = 56;

export function allocPERUSERSECTIONW(data?: Partial<PERUSERSECTIONW>): Uint8Array {
  const buf = new Uint8Array(sizeofPERUSERSECTIONW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.szGUID !== undefined) view.setBigUint64(0, data.szGUID === null ? 0n : BigInt(util.toPointer(data.szGUID)), true);
  // 0x08: pointer
  if (data?.szDispName !== undefined) view.setBigUint64(8, data.szDispName === null ? 0n : BigInt(util.toPointer(data.szDispName)), true);
  // 0x10: pointer
  if (data?.szLocale !== undefined) view.setBigUint64(16, data.szLocale === null ? 0n : BigInt(util.toPointer(data.szLocale)), true);
  // 0x18: pointer
  if (data?.szStub !== undefined) view.setBigUint64(24, data.szStub === null ? 0n : BigInt(util.toPointer(data.szStub)), true);
  // 0x20: pointer
  if (data?.szVersion !== undefined) view.setBigUint64(32, data.szVersion === null ? 0n : BigInt(util.toPointer(data.szVersion)), true);
  // 0x28: pointer
  if (data?.szCompID !== undefined) view.setBigUint64(40, data.szCompID === null ? 0n : BigInt(util.toPointer(data.szCompID)), true);
  // 0x30: u32
  if (data?.dwIsInstalled !== undefined) view.setUint32(48, Number(data.dwIsInstalled), true);
  // 0x34: i32
  if (data?.bRollback !== undefined) view.setInt32(52, Number(data.bRollback), true);
  return buf;
}

export type WPARAM = Deno.PointerValue;

export type LPARAM = Deno.PointerValue;

/**
 * Windows.Win32.System.WindowsProgramming.IMESTRUCT (size: 56)
 */
export interface IMESTRUCT {
  /** u32 */
  fnc: number;
  /** Windows.Win32.Foundation.WPARAM */
  wParam: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  wCount: number;
  /** u32 */
  dchSource: number;
  /** u32 */
  dchDest: number;
  /** Windows.Win32.Foundation.LPARAM */
  lParam1: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lParam2: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lParam3: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIMESTRUCT = 56;

export function allocIMESTRUCT(data?: Partial<IMESTRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofIMESTRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fnc !== undefined) view.setUint32(0, Number(data.fnc), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.wParam !== undefined) view.setBigUint64(8, data.wParam === null ? 0n : BigInt(util.toPointer(data.wParam)), true);
  // 0x10: u32
  if (data?.wCount !== undefined) view.setUint32(16, Number(data.wCount), true);
  // 0x14: u32
  if (data?.dchSource !== undefined) view.setUint32(20, Number(data.dchSource), true);
  // 0x18: u32
  if (data?.dchDest !== undefined) view.setUint32(24, Number(data.dchDest), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.lParam1 !== undefined) view.setBigUint64(32, data.lParam1 === null ? 0n : BigInt(util.toPointer(data.lParam1)), true);
  // 0x28: pointer
  if (data?.lParam2 !== undefined) view.setBigUint64(40, data.lParam2 === null ? 0n : BigInt(util.toPointer(data.lParam2)), true);
  // 0x30: pointer
  if (data?.lParam3 !== undefined) view.setBigUint64(48, data.lParam3 === null ? 0n : BigInt(util.toPointer(data.lParam3)), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.UNDETERMINESTRUCT (size: 56)
 */
export interface UNDETERMINESTRUCT {
  /** u32 */
  dwSize: number;
  /** u32 */
  uDefIMESize: number;
  /** u32 */
  uDefIMEPos: number;
  /** u32 */
  uUndetTextLen: number;
  /** u32 */
  uUndetTextPos: number;
  /** u32 */
  uUndetAttrPos: number;
  /** u32 */
  uCursorPos: number;
  /** u32 */
  uDeltaStart: number;
  /** u32 */
  uDetermineTextLen: number;
  /** u32 */
  uDetermineTextPos: number;
  /** u32 */
  uDetermineDelimPos: number;
  /** u32 */
  uYomiTextLen: number;
  /** u32 */
  uYomiTextPos: number;
  /** u32 */
  uYomiDelimPos: number;
}

export const sizeofUNDETERMINESTRUCT = 56;

export function allocUNDETERMINESTRUCT(data?: Partial<UNDETERMINESTRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofUNDETERMINESTRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.uDefIMESize !== undefined) view.setUint32(4, Number(data.uDefIMESize), true);
  // 0x08: u32
  if (data?.uDefIMEPos !== undefined) view.setUint32(8, Number(data.uDefIMEPos), true);
  // 0x0c: u32
  if (data?.uUndetTextLen !== undefined) view.setUint32(12, Number(data.uUndetTextLen), true);
  // 0x10: u32
  if (data?.uUndetTextPos !== undefined) view.setUint32(16, Number(data.uUndetTextPos), true);
  // 0x14: u32
  if (data?.uUndetAttrPos !== undefined) view.setUint32(20, Number(data.uUndetAttrPos), true);
  // 0x18: u32
  if (data?.uCursorPos !== undefined) view.setUint32(24, Number(data.uCursorPos), true);
  // 0x1c: u32
  if (data?.uDeltaStart !== undefined) view.setUint32(28, Number(data.uDeltaStart), true);
  // 0x20: u32
  if (data?.uDetermineTextLen !== undefined) view.setUint32(32, Number(data.uDetermineTextLen), true);
  // 0x24: u32
  if (data?.uDetermineTextPos !== undefined) view.setUint32(36, Number(data.uDetermineTextPos), true);
  // 0x28: u32
  if (data?.uDetermineDelimPos !== undefined) view.setUint32(40, Number(data.uDetermineDelimPos), true);
  // 0x2c: u32
  if (data?.uYomiTextLen !== undefined) view.setUint32(44, Number(data.uYomiTextLen), true);
  // 0x30: u32
  if (data?.uYomiTextPos !== undefined) view.setUint32(48, Number(data.uYomiTextPos), true);
  // 0x34: u32
  if (data?.uYomiDelimPos !== undefined) view.setUint32(52, Number(data.uYomiDelimPos), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.STRINGEXSTRUCT (size: 24)
 */
export interface STRINGEXSTRUCT {
  /** u32 */
  dwSize: number;
  /** u32 */
  uDeterminePos: number;
  /** u32 */
  uDetermineDelimPos: number;
  /** u32 */
  uYomiPos: number;
  /** u32 */
  uYomiDelimPos: number;
}

export const sizeofSTRINGEXSTRUCT = 24;

export function allocSTRINGEXSTRUCT(data?: Partial<STRINGEXSTRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofSTRINGEXSTRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.uDeterminePos !== undefined) view.setUint32(4, Number(data.uDeterminePos), true);
  // 0x08: u32
  if (data?.uDetermineDelimPos !== undefined) view.setUint32(8, Number(data.uDetermineDelimPos), true);
  // 0x0c: u32
  if (data?.uYomiPos !== undefined) view.setUint32(12, Number(data.uYomiPos), true);
  // 0x10: u32
  if (data?.uYomiDelimPos !== undefined) view.setUint32(16, Number(data.uYomiDelimPos), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.DATETIME (size: 16)
 */
export interface DATETIME {
  /** u16 */
  year: number;
  /** u16 */
  month: number;
  /** u16 */
  day: number;
  /** u16 */
  hour: number;
  /** u16 */
  min: number;
  /** u16 */
  sec: number;
}

export const sizeofDATETIME = 16;

export function allocDATETIME(data?: Partial<DATETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofDATETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.year !== undefined) view.setUint16(0, Number(data.year), true);
  // 0x02: u16
  if (data?.month !== undefined) view.setUint16(2, Number(data.month), true);
  // 0x04: u16
  if (data?.day !== undefined) view.setUint16(4, Number(data.day), true);
  // 0x06: u16
  if (data?.hour !== undefined) view.setUint16(6, Number(data.hour), true);
  // 0x08: u16
  if (data?.min !== undefined) view.setUint16(8, Number(data.min), true);
  // 0x0a: u16
  if (data?.sec !== undefined) view.setUint16(10, Number(data.sec), true);
  // 0x0c: pad4
  return buf;
}

export type HWND = Deno.PointerValue;

/**
 * Windows.Win32.System.WindowsProgramming.IMEPROA (size: 48)
 */
export interface IMEPROA {
  /** Windows.Win32.Foundation.HWND */
  hWnd: Deno.PointerValue | null;
  /** Windows.Win32.System.WindowsProgramming.DATETIME */
  InstDate: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  wVersion: number;
  /** array */
  szDescription: Deno.PointerValue | null;
  /** array */
  szName: Deno.PointerValue | null;
  /** array */
  szOptions: Deno.PointerValue | null;
}

export const sizeofIMEPROA = 48;

export function allocIMEPROA(data?: Partial<IMEPROA>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEPROA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hWnd !== undefined) view.setBigUint64(0, data.hWnd === null ? 0n : BigInt(util.toPointer(data.hWnd)), true);
  // 0x08: pointer
  if (data?.InstDate !== undefined) view.setBigUint64(8, data.InstDate === null ? 0n : BigInt(util.toPointer(data.InstDate)), true);
  // 0x10: u32
  if (data?.wVersion !== undefined) view.setUint32(16, Number(data.wVersion), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.szDescription !== undefined) view.setBigUint64(24, data.szDescription === null ? 0n : BigInt(util.toPointer(data.szDescription)), true);
  // 0x20: pointer
  if (data?.szName !== undefined) view.setBigUint64(32, data.szName === null ? 0n : BigInt(util.toPointer(data.szName)), true);
  // 0x28: pointer
  if (data?.szOptions !== undefined) view.setBigUint64(40, data.szOptions === null ? 0n : BigInt(util.toPointer(data.szOptions)), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.IMEPROW (size: 48)
 */
export interface IMEPROW {
  /** Windows.Win32.Foundation.HWND */
  hWnd: Deno.PointerValue | null;
  /** Windows.Win32.System.WindowsProgramming.DATETIME */
  InstDate: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  wVersion: number;
  /** array */
  szDescription: Deno.PointerValue | null;
  /** array */
  szName: Deno.PointerValue | null;
  /** array */
  szOptions: Deno.PointerValue | null;
}

export const sizeofIMEPROW = 48;

export function allocIMEPROW(data?: Partial<IMEPROW>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEPROW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hWnd !== undefined) view.setBigUint64(0, data.hWnd === null ? 0n : BigInt(util.toPointer(data.hWnd)), true);
  // 0x08: pointer
  if (data?.InstDate !== undefined) view.setBigUint64(8, data.InstDate === null ? 0n : BigInt(util.toPointer(data.InstDate)), true);
  // 0x10: u32
  if (data?.wVersion !== undefined) view.setUint32(16, Number(data.wVersion), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.szDescription !== undefined) view.setBigUint64(24, data.szDescription === null ? 0n : BigInt(util.toPointer(data.szDescription)), true);
  // 0x20: pointer
  if (data?.szName !== undefined) view.setBigUint64(32, data.szName === null ? 0n : BigInt(util.toPointer(data.szName)), true);
  // 0x28: pointer
  if (data?.szOptions !== undefined) view.setBigUint64(40, data.szOptions === null ? 0n : BigInt(util.toPointer(data.szOptions)), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.JAVA_TRUST (size: 80)
 */
export interface JAVA_TRUST {
  /** u32 */
  cbSize: number;
  /** u32 */
  flag: number;
  /** Windows.Win32.Foundation.BOOL */
  fAllActiveXPermissions: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fAllPermissions: boolean;
  /** u32 */
  dwEncodingType: number;
  /** ptr */
  pbJavaPermissions: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbJavaPermissions: number;
  /** ptr */
  pbSigner: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbSigner: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszZone: string | null;
  /** System.Guid */
  guidZone: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HRESULT */
  hVerify: Uint8Array | Deno.PointerValue | null;
}

export const sizeofJAVA_TRUST = 80;

export function allocJAVA_TRUST(data?: Partial<JAVA_TRUST>): Uint8Array {
  const buf = new Uint8Array(sizeofJAVA_TRUST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.flag !== undefined) view.setUint32(4, Number(data.flag), true);
  // 0x08: i32
  if (data?.fAllActiveXPermissions !== undefined) view.setInt32(8, Number(data.fAllActiveXPermissions), true);
  // 0x0c: i32
  if (data?.fAllPermissions !== undefined) view.setInt32(12, Number(data.fAllPermissions), true);
  // 0x10: u32
  if (data?.dwEncodingType !== undefined) view.setUint32(16, Number(data.dwEncodingType), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pbJavaPermissions !== undefined) view.setBigUint64(24, data.pbJavaPermissions === null ? 0n : BigInt(util.toPointer(data.pbJavaPermissions)), true);
  // 0x20: u32
  if (data?.cbJavaPermissions !== undefined) view.setUint32(32, Number(data.cbJavaPermissions), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pbSigner !== undefined) view.setBigUint64(40, data.pbSigner === null ? 0n : BigInt(util.toPointer(data.pbSigner)), true);
  // 0x30: u32
  if (data?.cbSigner !== undefined) view.setUint32(48, Number(data.cbSigner), true);
  // 0x34: pad4
  // 0x38: buffer
  if (data?.pwszZone !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pwszZone);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: pointer
  if (data?.guidZone !== undefined) view.setBigUint64(64, data.guidZone === null ? 0n : BigInt(util.toPointer(data.guidZone)), true);
  // 0x48: pointer
  if (data?.hVerify !== undefined) view.setBigUint64(72, data.hVerify === null ? 0n : BigInt(util.toPointer(data.hVerify)), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.TDIEntityID (size: 8)
 */
export interface TDIEntityID {
  /** Windows.Win32.System.WindowsProgramming.TDIENTITY_ENTITY_TYPE */
  tei_entity: TDIENTITY_ENTITY_TYPE;
  /** u32 */
  tei_instance: number;
}

export const sizeofTDIEntityID = 8;

export function allocTDIEntityID(data?: Partial<TDIEntityID>): Uint8Array {
  const buf = new Uint8Array(sizeofTDIEntityID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.tei_entity !== undefined) view.setUint32(0, Number(data.tei_entity), true);
  // 0x04: u32
  if (data?.tei_instance !== undefined) view.setUint32(4, Number(data.tei_instance), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.TDIObjectID (size: 24)
 */
export interface TDIObjectID {
  /** Windows.Win32.System.WindowsProgramming.TDIEntityID */
  toi_entity: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  toi_class: number;
  /** u32 */
  toi_type: number;
  /** u32 */
  toi_id: number;
}

export const sizeofTDIObjectID = 24;

export function allocTDIObjectID(data?: Partial<TDIObjectID>): Uint8Array {
  const buf = new Uint8Array(sizeofTDIObjectID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.toi_entity !== undefined) view.setBigUint64(0, data.toi_entity === null ? 0n : BigInt(util.toPointer(data.toi_entity)), true);
  // 0x08: u32
  if (data?.toi_class !== undefined) view.setUint32(8, Number(data.toi_class), true);
  // 0x0c: u32
  if (data?.toi_type !== undefined) view.setUint32(12, Number(data.toi_type), true);
  // 0x10: u32
  if (data?.toi_id !== undefined) view.setUint32(16, Number(data.toi_id), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.tcp_request_query_information_ex_xp (size: 16)
 */
export interface tcp_request_query_information_ex_xp {
  /** Windows.Win32.System.WindowsProgramming.TDIObjectID */
  ID: Uint8Array | Deno.PointerValue | null;
  /** array */
  Context: Deno.PointerValue | null;
}

export const sizeofTcp_request_query_information_ex_xp = 16;

export function allocTcp_request_query_information_ex_xp(data?: Partial<tcp_request_query_information_ex_xp>): Uint8Array {
  const buf = new Uint8Array(sizeofTcp_request_query_information_ex_xp);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ID !== undefined) view.setBigUint64(0, data.ID === null ? 0n : BigInt(util.toPointer(data.ID)), true);
  // 0x08: pointer
  if (data?.Context !== undefined) view.setBigUint64(8, data.Context === null ? 0n : BigInt(util.toPointer(data.Context)), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.tcp_request_query_information_ex32_xp (size: 16)
 */
export interface tcp_request_query_information_ex32_xp {
  /** Windows.Win32.System.WindowsProgramming.TDIObjectID */
  ID: Uint8Array | Deno.PointerValue | null;
  /** array */
  Context: Deno.PointerValue | null;
}

export const sizeofTcp_request_query_information_ex32_xp = 16;

export function allocTcp_request_query_information_ex32_xp(data?: Partial<tcp_request_query_information_ex32_xp>): Uint8Array {
  const buf = new Uint8Array(sizeofTcp_request_query_information_ex32_xp);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ID !== undefined) view.setBigUint64(0, data.ID === null ? 0n : BigInt(util.toPointer(data.ID)), true);
  // 0x08: pointer
  if (data?.Context !== undefined) view.setBigUint64(8, data.Context === null ? 0n : BigInt(util.toPointer(data.Context)), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.tcp_request_query_information_ex_w2k (size: 16)
 */
export interface tcp_request_query_information_ex_w2k {
  /** Windows.Win32.System.WindowsProgramming.TDIObjectID */
  ID: Uint8Array | Deno.PointerValue | null;
  /** array */
  Context: Deno.PointerValue | null;
}

export const sizeofTcp_request_query_information_ex_w2k = 16;

export function allocTcp_request_query_information_ex_w2k(data?: Partial<tcp_request_query_information_ex_w2k>): Uint8Array {
  const buf = new Uint8Array(sizeofTcp_request_query_information_ex_w2k);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ID !== undefined) view.setBigUint64(0, data.ID === null ? 0n : BigInt(util.toPointer(data.ID)), true);
  // 0x08: pointer
  if (data?.Context !== undefined) view.setBigUint64(8, data.Context === null ? 0n : BigInt(util.toPointer(data.Context)), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.tcp_request_set_information_ex (size: 24)
 */
export interface tcp_request_set_information_ex {
  /** Windows.Win32.System.WindowsProgramming.TDIObjectID */
  ID: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  BufferSize: number;
  /** array */
  Buffer: Deno.PointerValue | null;
}

export const sizeofTcp_request_set_information_ex = 24;

export function allocTcp_request_set_information_ex(data?: Partial<tcp_request_set_information_ex>): Uint8Array {
  const buf = new Uint8Array(sizeofTcp_request_set_information_ex);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ID !== undefined) view.setBigUint64(0, data.ID === null ? 0n : BigInt(util.toPointer(data.ID)), true);
  // 0x08: u32
  if (data?.BufferSize !== undefined) view.setUint32(8, Number(data.BufferSize), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Buffer !== undefined) view.setBigUint64(16, data.Buffer === null ? 0n : BigInt(util.toPointer(data.Buffer)), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.TDI_TL_IO_CONTROL_ENDPOINT (size: 48)
 */
export interface TDI_TL_IO_CONTROL_ENDPOINT {
  /** Windows.Win32.System.WindowsProgramming.TDI_TL_IO_CONTROL_TYPE */
  Type: TDI_TL_IO_CONTROL_TYPE;
  /** u32 */
  Level: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  InputBuffer: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  InputBufferLength: number;
  /** ptr */
  OutputBuffer: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  OutputBufferLength: number;
}

export const sizeofTDI_TL_IO_CONTROL_ENDPOINT = 48;

export function allocTDI_TL_IO_CONTROL_ENDPOINT(data?: Partial<TDI_TL_IO_CONTROL_ENDPOINT>): Uint8Array {
  const buf = new Uint8Array(sizeofTDI_TL_IO_CONTROL_ENDPOINT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Level !== undefined) view.setUint32(4, Number(data.Level), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: pointer
  if (data?.InputBuffer !== undefined) view.setBigUint64(16, data.InputBuffer === null ? 0n : BigInt(util.toPointer(data.InputBuffer)), true);
  // 0x18: u32
  if (data?.InputBufferLength !== undefined) view.setUint32(24, Number(data.InputBufferLength), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.OutputBuffer !== undefined) view.setBigUint64(32, data.OutputBuffer === null ? 0n : BigInt(util.toPointer(data.OutputBuffer)), true);
  // 0x28: u32
  if (data?.OutputBufferLength !== undefined) view.setUint32(40, Number(data.OutputBufferLength), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.WLDP_HOST_INFORMATION (size: 24)
 */
export interface WLDP_HOST_INFORMATION {
  /** u32 */
  dwRevision: number;
  /** Windows.Win32.System.WindowsProgramming.WLDP_HOST_ID */
  dwHostId: WLDP_HOST_ID;
  /** Windows.Win32.Foundation.PWSTR */
  szSource: string | null;
  /** Windows.Win32.Foundation.HANDLE */
  hSource: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWLDP_HOST_INFORMATION = 24;

export function allocWLDP_HOST_INFORMATION(data?: Partial<WLDP_HOST_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofWLDP_HOST_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwRevision !== undefined) view.setUint32(0, Number(data.dwRevision), true);
  // 0x04: i32
  if (data?.dwHostId !== undefined) view.setInt32(4, Number(data.dwHostId), true);
  // 0x08: buffer
  if (data?.szSource !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.szSource);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.hSource !== undefined) view.setBigUint64(16, data.hSource === null ? 0n : BigInt(util.toPointer(data.hSource)), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.WLDP_DEVICE_SECURITY_INFORMATION (size: 32)
 */
export interface WLDP_DEVICE_SECURITY_INFORMATION {
  /** u32 */
  UnlockIdSize: number;
  /** ptr */
  UnlockId: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ManufacturerIDLength: number;
  /** Windows.Win32.Foundation.PWSTR */
  ManufacturerID: string | null;
}

export const sizeofWLDP_DEVICE_SECURITY_INFORMATION = 32;

export function allocWLDP_DEVICE_SECURITY_INFORMATION(data?: Partial<WLDP_DEVICE_SECURITY_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofWLDP_DEVICE_SECURITY_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UnlockIdSize !== undefined) view.setUint32(0, Number(data.UnlockIdSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.UnlockId !== undefined) view.setBigUint64(8, data.UnlockId === null ? 0n : BigInt(util.toPointer(data.UnlockId)), true);
  // 0x10: u32
  if (data?.ManufacturerIDLength !== undefined) view.setUint32(16, Number(data.ManufacturerIDLength), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.ManufacturerID !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.ManufacturerID);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

/**
 * _Description_e__Union (size: 16)
 */
export interface _Description_e__Union {
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null;
  /** u32 */
  Ordinal: number;
}

export const sizeof_Description_e__Union = 16;

export function alloc_Description_e__Union(data?: Partial<_Description_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Description_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.Ordinal !== undefined) view.setUint32(8, Number(data.Ordinal), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.DELAYLOAD_PROC_DESCRIPTOR (size: 16)
 */
export interface DELAYLOAD_PROC_DESCRIPTOR {
  /** u32 */
  ImportDescribedByName: number;
  /** _Description_e__Union */
  Description: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDELAYLOAD_PROC_DESCRIPTOR = 16;

export function allocDELAYLOAD_PROC_DESCRIPTOR(data?: Partial<DELAYLOAD_PROC_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofDELAYLOAD_PROC_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ImportDescribedByName !== undefined) view.setUint32(0, Number(data.ImportDescribedByName), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Description !== undefined) view.setBigUint64(8, data.Description === null ? 0n : BigInt(util.toPointer(data.Description)), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsProgramming.DELAYLOAD_INFO (size: 64)
 */
export interface DELAYLOAD_INFO {
  /** u32 */
  Size: number;
  /** ptr */
  DelayloadDescriptor: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ThunkAddress: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PSTR */
  TargetDllName: string | null;
  /** Windows.Win32.System.WindowsProgramming.DELAYLOAD_PROC_DESCRIPTOR */
  TargetApiDescriptor: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  TargetModuleBase: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Unused: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  LastError: number;
}

export const sizeofDELAYLOAD_INFO = 64;

export function allocDELAYLOAD_INFO(data?: Partial<DELAYLOAD_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDELAYLOAD_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.DelayloadDescriptor !== undefined) view.setBigUint64(8, data.DelayloadDescriptor === null ? 0n : BigInt(util.toPointer(data.DelayloadDescriptor)), true);
  // 0x10: pointer
  if (data?.ThunkAddress !== undefined) view.setBigUint64(16, data.ThunkAddress === null ? 0n : BigInt(util.toPointer(data.ThunkAddress)), true);
  // 0x18: buffer
  if (data?.TargetDllName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.TargetDllName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.TargetApiDescriptor !== undefined) view.setBigUint64(32, data.TargetApiDescriptor === null ? 0n : BigInt(util.toPointer(data.TargetApiDescriptor)), true);
  // 0x28: pointer
  if (data?.TargetModuleBase !== undefined) view.setBigUint64(40, data.TargetModuleBase === null ? 0n : BigInt(util.toPointer(data.TargetModuleBase)), true);
  // 0x30: pointer
  if (data?.Unused !== undefined) view.setBigUint64(48, data.Unused === null ? 0n : BigInt(util.toPointer(data.Unused)), true);
  // 0x38: u32
  if (data?.LastError !== undefined) view.setUint32(56, Number(data.LastError), true);
  // 0x3c: pad4
  return buf;
}

export type NTSTATUS = number;

export type BOOLEAN = number;

export type HDC = Deno.PointerValue;

export type HINSTANCE = Deno.PointerValue;

export type HKEY = Deno.PointerValue;

export type LRESULT = Deno.PointerValue;

// Native Libraries

try {
  var libntdll = Deno.dlopen("ntdll", {
    RtlGetReturnAddressHijackTarget: {
      parameters: [],
      result: "usize",
    },
    RtlRaiseCustomSystemEventTrigger: {
      parameters: ["pointer"],
      result: "u32",
    },
    NtClose: {
      parameters: ["pointer"],
      result: "pointer",
    },
    NtOpenFile: {
      parameters: ["pointer", "u32", "pointer", "pointer", "u32", "u32"],
      result: "pointer",
    },
    NtRenameKey: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    NtNotifyChangeMultipleKeys: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "pointer", "pointer", "u32", "pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    NtQueryMultipleValueKey: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    NtSetInformationKey: {
      parameters: ["pointer", "i32", "pointer", "u32"],
      result: "pointer",
    },
    NtDeviceIoControlFile: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "u32", "pointer", "u32", "pointer", "u32"],
      result: "pointer",
    },
    NtWaitForSingleObject: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    RtlIsNameLegalDOS8Dot3: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    NtQueryObject: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    NtQuerySystemInformation: {
      parameters: ["i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    NtQuerySystemTime: {
      parameters: ["pointer"],
      result: "pointer",
    },
    NtQueryTimerResolution: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    RtlLocalTimeToSystemTime: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    RtlTimeToSecondsSince1970: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    RtlFreeAnsiString: {
      parameters: ["pointer"],
      result: "void",
    },
    RtlFreeUnicodeString: {
      parameters: ["pointer"],
      result: "void",
    },
    RtlFreeOemString: {
      parameters: ["pointer"],
      result: "void",
    },
    RtlInitString: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    RtlInitStringEx: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    RtlInitAnsiString: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    RtlInitAnsiStringEx: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    RtlInitUnicodeString: {
      parameters: ["pointer", "buffer"],
      result: "void",
    },
    RtlAnsiStringToUnicodeString: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    RtlUnicodeStringToAnsiString: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    RtlUnicodeStringToOemString: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    RtlUnicodeToMultiByteSize: {
      parameters: ["pointer", "buffer", "u32"],
      result: "pointer",
    },
    RtlCharToInteger: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    RtlUniform: {
      parameters: ["pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_apiquery_l2_1_0 = Deno.dlopen("api-ms-win-core-apiquery-l2-1-0", {
    IsApiSetImplemented: {
      parameters: ["buffer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libKERNEL32 = Deno.dlopen("KERNEL32", {
    QueryThreadCycleTime: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    QueryProcessCycleTime: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    QueryIdleProcessorCycleTime: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    QueryIdleProcessorCycleTimeEx: {
      parameters: ["u16", "pointer", "pointer"],
      result: "i32",
    },
    QueryUnbiasedInterruptTime: {
      parameters: ["pointer"],
      result: "i32",
    },
    GlobalCompact: {
      parameters: ["u32"],
      result: "usize",
    },
    GlobalFix: {
      parameters: ["isize"],
      result: "void",
    },
    GlobalUnfix: {
      parameters: ["isize"],
      result: "void",
    },
    GlobalWire: {
      parameters: ["isize"],
      result: "pointer",
    },
    GlobalUnWire: {
      parameters: ["isize"],
      result: "i32",
    },
    LocalShrink: {
      parameters: ["isize", "u32"],
      result: "usize",
    },
    LocalCompact: {
      parameters: ["u32"],
      result: "usize",
    },
    SetEnvironmentStringsA: {
      parameters: ["buffer"],
      result: "i32",
    },
    SetHandleCount: {
      parameters: ["u32"],
      result: "u32",
    },
    RequestDeviceWakeup: {
      parameters: ["pointer"],
      result: "i32",
    },
    CancelDeviceWakeupRequest: {
      parameters: ["pointer"],
      result: "i32",
    },
    SetMessageWaitingIndicator: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    MulDiv: {
      parameters: ["i32", "i32", "i32"],
      result: "i32",
    },
    GetSystemRegistryQuota: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    FileTimeToDosDateTime: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    DosDateTimeToFileTime: {
      parameters: ["u16", "u16", "pointer"],
      result: "i32",
    },
    _lopen: {
      parameters: ["buffer", "i32"],
      result: "i32",
    },
    _lcreat: {
      parameters: ["buffer", "i32"],
      result: "i32",
    },
    _lread: {
      parameters: ["i32", "pointer", "u32"],
      result: "u32",
    },
    _lwrite: {
      parameters: ["i32", "buffer", "u32"],
      result: "u32",
    },
    _hread: {
      parameters: ["i32", "pointer", "i32"],
      result: "i32",
    },
    _hwrite: {
      parameters: ["i32", "buffer", "i32"],
      result: "i32",
    },
    _lclose: {
      parameters: ["i32"],
      result: "i32",
    },
    _llseek: {
      parameters: ["i32", "i32", "i32"],
      result: "i32",
    },
    SignalObjectAndWait: {
      parameters: ["pointer", "pointer", "u32", "i32"],
      result: "u32",
    },
    OpenMutexA: {
      parameters: ["u32", "i32", "buffer"],
      result: "pointer",
    },
    OpenSemaphoreA: {
      parameters: ["u32", "i32", "buffer"],
      result: "pointer",
    },
    CreateWaitableTimerA: {
      parameters: ["pointer", "i32", "buffer"],
      result: "pointer",
    },
    OpenWaitableTimerA: {
      parameters: ["u32", "i32", "buffer"],
      result: "pointer",
    },
    CreateWaitableTimerExA: {
      parameters: ["pointer", "buffer", "u32", "u32"],
      result: "pointer",
    },
    GetFirmwareEnvironmentVariableA: {
      parameters: ["buffer", "buffer", "pointer", "u32"],
      result: "u32",
    },
    GetFirmwareEnvironmentVariableW: {
      parameters: ["buffer", "buffer", "pointer", "u32"],
      result: "u32",
    },
    GetFirmwareEnvironmentVariableExA: {
      parameters: ["buffer", "buffer", "pointer", "u32", "pointer"],
      result: "u32",
    },
    GetFirmwareEnvironmentVariableExW: {
      parameters: ["buffer", "buffer", "pointer", "u32", "pointer"],
      result: "u32",
    },
    SetFirmwareEnvironmentVariableA: {
      parameters: ["buffer", "buffer", "pointer", "u32"],
      result: "i32",
    },
    SetFirmwareEnvironmentVariableW: {
      parameters: ["buffer", "buffer", "pointer", "u32"],
      result: "i32",
    },
    SetFirmwareEnvironmentVariableExA: {
      parameters: ["buffer", "buffer", "pointer", "u32", "u32"],
      result: "i32",
    },
    SetFirmwareEnvironmentVariableExW: {
      parameters: ["buffer", "buffer", "pointer", "u32", "u32"],
      result: "i32",
    },
    IsNativeVhdBoot: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetProfileIntA: {
      parameters: ["buffer", "buffer", "i32"],
      result: "u32",
    },
    GetProfileIntW: {
      parameters: ["buffer", "buffer", "i32"],
      result: "u32",
    },
    GetProfileStringA: {
      parameters: ["buffer", "buffer", "buffer", "buffer", "u32"],
      result: "u32",
    },
    GetProfileStringW: {
      parameters: ["buffer", "buffer", "buffer", "buffer", "u32"],
      result: "u32",
    },
    WriteProfileStringA: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "i32",
    },
    WriteProfileStringW: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "i32",
    },
    GetProfileSectionA: {
      parameters: ["buffer", "buffer", "u32"],
      result: "u32",
    },
    GetProfileSectionW: {
      parameters: ["buffer", "buffer", "u32"],
      result: "u32",
    },
    WriteProfileSectionA: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    WriteProfileSectionW: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    GetPrivateProfileIntA: {
      parameters: ["buffer", "buffer", "i32", "buffer"],
      result: "u32",
    },
    GetPrivateProfileIntW: {
      parameters: ["buffer", "buffer", "i32", "buffer"],
      result: "u32",
    },
    GetPrivateProfileStringA: {
      parameters: ["buffer", "buffer", "buffer", "buffer", "u32", "buffer"],
      result: "u32",
    },
    GetPrivateProfileStringW: {
      parameters: ["buffer", "buffer", "buffer", "buffer", "u32", "buffer"],
      result: "u32",
    },
    WritePrivateProfileStringA: {
      parameters: ["buffer", "buffer", "buffer", "buffer"],
      result: "i32",
    },
    WritePrivateProfileStringW: {
      parameters: ["buffer", "buffer", "buffer", "buffer"],
      result: "i32",
    },
    GetPrivateProfileSectionA: {
      parameters: ["buffer", "buffer", "u32", "buffer"],
      result: "u32",
    },
    GetPrivateProfileSectionW: {
      parameters: ["buffer", "buffer", "u32", "buffer"],
      result: "u32",
    },
    WritePrivateProfileSectionA: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "i32",
    },
    WritePrivateProfileSectionW: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "i32",
    },
    GetPrivateProfileSectionNamesA: {
      parameters: ["buffer", "u32", "buffer"],
      result: "u32",
    },
    GetPrivateProfileSectionNamesW: {
      parameters: ["buffer", "u32", "buffer"],
      result: "u32",
    },
    GetPrivateProfileStructA: {
      parameters: ["buffer", "buffer", "pointer", "u32", "buffer"],
      result: "i32",
    },
    GetPrivateProfileStructW: {
      parameters: ["buffer", "buffer", "pointer", "u32", "buffer"],
      result: "i32",
    },
    WritePrivateProfileStructA: {
      parameters: ["buffer", "buffer", "pointer", "u32", "buffer"],
      result: "i32",
    },
    WritePrivateProfileStructW: {
      parameters: ["buffer", "buffer", "pointer", "u32", "buffer"],
      result: "i32",
    },
    IsBadHugeReadPtr: {
      parameters: ["pointer", "usize"],
      result: "i32",
    },
    IsBadHugeWritePtr: {
      parameters: ["pointer", "usize"],
      result: "i32",
    },
    GetComputerNameA: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    GetComputerNameW: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    DnsHostnameToComputerNameA: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "i32",
    },
    DnsHostnameToComputerNameW: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "i32",
    },
    CancelTimerQueueTimer: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ReplacePartitionUnit: {
      parameters: ["buffer", "buffer", "u32"],
      result: "i32",
    },
    GetThreadEnabledXStateFeatures: {
      parameters: [],
      result: "u64",
    },
    EnableProcessOptionalXStateFeatures: {
      parameters: ["u64"],
      result: "i32",
    },
    uaw_lstrcmpW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    uaw_lstrcmpiW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    uaw_lstrlenW: {
      parameters: ["pointer"],
      result: "i32",
    },
    uaw_wcschr: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    uaw_wcscpy: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    uaw_wcsicmp: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    uaw_wcslen: {
      parameters: ["pointer"],
      result: "usize",
    },
    uaw_wcsrchr: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_realtime_l1_1_1 = Deno.dlopen("api-ms-win-core-realtime-l1-1-1", {
    QueryInterruptTimePrecise: {
      parameters: ["pointer"],
      result: "void",
    },
    QueryUnbiasedInterruptTimePrecise: {
      parameters: ["pointer"],
      result: "void",
    },
    QueryInterruptTime: {
      parameters: ["pointer"],
      result: "void",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_realtime_l1_1_2 = Deno.dlopen("api-ms-win-core-realtime-l1-1-2", {
    QueryAuxiliaryCounterFrequency: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ConvertAuxiliaryCounterToPerformanceCounter: {
      parameters: ["u64", "pointer", "pointer"],
      result: "pointer",
    },
    ConvertPerformanceCounterToAuxiliaryCounter: {
      parameters: ["u64", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libADVAPI32 = Deno.dlopen("ADVAPI32", {
    GetUserNameA: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    GetUserNameW: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    IsTokenUntrusted: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetCurrentHwProfileA: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetCurrentHwProfileW: {
      parameters: ["pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_backgroundtask_l1_1_0 = Deno.dlopen("api-ms-win-core-backgroundtask-l1-1-0", {
    RaiseCustomSystemEventTrigger: {
      parameters: ["pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_featurestaging_l1_1_0 = Deno.dlopen("api-ms-win-core-featurestaging-l1-1-0", {
    GetFeatureEnabledState: {
      parameters: ["u32", "i32"],
      result: "i32",
    },
    RecordFeatureUsage: {
      parameters: ["u32", "u32", "u32", "buffer"],
      result: "void",
    },
    RecordFeatureError: {
      parameters: ["u32", "pointer"],
      result: "void",
    },
    SubscribeFeatureStateChangeNotification: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    UnsubscribeFeatureStateChangeNotification: {
      parameters: ["pointer"],
      result: "void",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_featurestaging_l1_1_1 = Deno.dlopen("api-ms-win-core-featurestaging-l1-1-1", {
    GetFeatureVariant: {
      parameters: ["u32", "i32", "pointer", "pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libDCIMAN32 = Deno.dlopen("DCIMAN32", {
    DCIOpenProvider: {
      parameters: [],
      result: "pointer",
    },
    DCICloseProvider: {
      parameters: ["pointer"],
      result: "void",
    },
    DCICreatePrimary: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    DCICreateOffscreen: {
      parameters: ["pointer", "u32", "u32", "u32", "u32", "u32", "u32", "u32", "u32", "pointer"],
      result: "i32",
    },
    DCICreateOverlay: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    DCIEnum: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    DCISetSrcDestClip: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    WinWatchOpen: {
      parameters: ["pointer"],
      result: "pointer",
    },
    WinWatchClose: {
      parameters: ["pointer"],
      result: "void",
    },
    WinWatchGetClipList: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "u32",
    },
    WinWatchDidStatusChange: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetWindowRegionData: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    GetDCRegionData: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    WinWatchNotify: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    DCIEndAccess: {
      parameters: ["pointer"],
      result: "void",
    },
    DCIBeginAccess: {
      parameters: ["pointer", "i32", "i32", "i32", "i32"],
      result: "i32",
    },
    DCIDestroy: {
      parameters: ["pointer"],
      result: "void",
    },
    DCIDraw: {
      parameters: ["pointer"],
      result: "i32",
    },
    DCISetClipList: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    DCISetDestination: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_dx_d3dkmt_l1_1_0 = Deno.dlopen("api-ms-win-dx-d3dkmt-l1-1-0", {
    GdiEntry13: {
      parameters: [],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libADVPACK = Deno.dlopen("ADVPACK", {
    RunSetupCommandA: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "buffer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    RunSetupCommandW: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "buffer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    NeedRebootInit: {
      parameters: [],
      result: "u32",
    },
    NeedReboot: {
      parameters: ["u32"],
      result: "i32",
    },
    RebootCheckOnInstallA: {
      parameters: ["pointer", "buffer", "buffer", "u32"],
      result: "pointer",
    },
    RebootCheckOnInstallW: {
      parameters: ["pointer", "buffer", "buffer", "u32"],
      result: "pointer",
    },
    TranslateInfStringA: {
      parameters: ["buffer", "buffer", "buffer", "buffer", "buffer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    TranslateInfStringW: {
      parameters: ["buffer", "buffer", "buffer", "buffer", "buffer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    RegInstallA: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    RegInstallW: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    LaunchINFSectionExW: {
      parameters: ["pointer", "pointer", "buffer", "i32"],
      result: "pointer",
    },
    ExecuteCabA: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    ExecuteCabW: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    AdvInstallFileA: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "buffer", "u32", "u32"],
      result: "pointer",
    },
    AdvInstallFileW: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "buffer", "u32", "u32"],
      result: "pointer",
    },
    RegSaveRestoreA: {
      parameters: ["pointer", "buffer", "pointer", "buffer", "buffer", "buffer", "u32"],
      result: "pointer",
    },
    RegSaveRestoreW: {
      parameters: ["pointer", "buffer", "pointer", "buffer", "buffer", "buffer", "u32"],
      result: "pointer",
    },
    RegSaveRestoreOnINFA: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "pointer", "pointer", "u32"],
      result: "pointer",
    },
    RegSaveRestoreOnINFW: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "pointer", "pointer", "u32"],
      result: "pointer",
    },
    RegRestoreAllA: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    RegRestoreAllW: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    FileSaveRestoreW: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "u32"],
      result: "pointer",
    },
    FileSaveRestoreOnINFA: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "buffer", "buffer", "u32"],
      result: "pointer",
    },
    FileSaveRestoreOnINFW: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "buffer", "buffer", "u32"],
      result: "pointer",
    },
    AddDelBackupEntryA: {
      parameters: ["buffer", "buffer", "buffer", "u32"],
      result: "pointer",
    },
    AddDelBackupEntryW: {
      parameters: ["buffer", "buffer", "buffer", "u32"],
      result: "pointer",
    },
    FileSaveMarkNotExistA: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "pointer",
    },
    FileSaveMarkNotExistW: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "pointer",
    },
    GetVersionFromFileA: {
      parameters: ["buffer", "pointer", "pointer", "i32"],
      result: "pointer",
    },
    GetVersionFromFileW: {
      parameters: ["buffer", "pointer", "pointer", "i32"],
      result: "pointer",
    },
    GetVersionFromFileExA: {
      parameters: ["buffer", "pointer", "pointer", "i32"],
      result: "pointer",
    },
    GetVersionFromFileExW: {
      parameters: ["buffer", "pointer", "pointer", "i32"],
      result: "pointer",
    },
    IsNTAdmin: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    DelNodeA: {
      parameters: ["buffer", "u32"],
      result: "pointer",
    },
    DelNodeW: {
      parameters: ["buffer", "u32"],
      result: "pointer",
    },
    DelNodeRunDLL32W: {
      parameters: ["pointer", "pointer", "buffer", "i32"],
      result: "pointer",
    },
    OpenINFEngineA: {
      parameters: ["buffer", "buffer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    OpenINFEngineW: {
      parameters: ["buffer", "buffer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    TranslateInfStringExA: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "buffer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    TranslateInfStringExW: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "buffer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    CloseINFEngine: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ExtractFilesA: {
      parameters: ["buffer", "buffer", "u32", "buffer", "pointer", "u32"],
      result: "pointer",
    },
    ExtractFilesW: {
      parameters: ["buffer", "buffer", "u32", "buffer", "pointer", "u32"],
      result: "pointer",
    },
    LaunchINFSectionW: {
      parameters: ["pointer", "pointer", "buffer", "i32"],
      result: "i32",
    },
    UserInstStubWrapperA: {
      parameters: ["pointer", "pointer", "buffer", "i32"],
      result: "pointer",
    },
    UserInstStubWrapperW: {
      parameters: ["pointer", "pointer", "buffer", "i32"],
      result: "pointer",
    },
    UserUnInstStubWrapperA: {
      parameters: ["pointer", "pointer", "buffer", "i32"],
      result: "pointer",
    },
    UserUnInstStubWrapperW: {
      parameters: ["pointer", "pointer", "buffer", "i32"],
      result: "pointer",
    },
    SetPerUserSecValuesA: {
      parameters: ["pointer"],
      result: "pointer",
    },
    SetPerUserSecValuesW: {
      parameters: ["pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libUSER32 = Deno.dlopen("USER32", {
    SendIMEMessageExA: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    SendIMEMessageExW: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    IMPGetIMEA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    IMPGetIMEW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    IMPQueryIMEA: {
      parameters: ["pointer"],
      result: "i32",
    },
    IMPQueryIMEW: {
      parameters: ["pointer"],
      result: "i32",
    },
    IMPSetIMEA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    IMPSetIMEW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    WINNLSGetIMEHotkey: {
      parameters: ["pointer"],
      result: "u32",
    },
    WINNLSEnableIME: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    WINNLSGetEnableStatus: {
      parameters: ["pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libAPPHELP = Deno.dlopen("APPHELP", {
    ApphelpCheckShellObject: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libWldp = Deno.dlopen("Wldp", {
    WldpGetLockdownPolicy: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
    },
    WldpIsClassInApprovedList: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "pointer",
    },
    WldpSetDynamicCodeTrust: {
      parameters: ["pointer"],
      result: "pointer",
    },
    WldpIsDynamicCodePolicyEnabled: {
      parameters: ["pointer"],
      result: "pointer",
    },
    WldpQueryDynamicCodeTrust: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
    },
    WldpQueryDeviceSecurityInformation: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function RtlGetReturnAddressHijackTarget(): Deno.PointerValue /* usize */ {
  return libntdll.RtlGetReturnAddressHijackTarget();
}

export function RtlRaiseCustomSystemEventTrigger(
  TriggerConfig: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libntdll.RtlRaiseCustomSystemEventTrigger(util.toPointer(TriggerConfig));
}

export function IsApiSetImplemented(
  Contract: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libapi_ms_win_core_apiquery_l2_1_0.IsApiSetImplemented(util.pstrToFfi(Contract)));
}

export function QueryThreadCycleTime(
  ThreadHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  CycleTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.QueryThreadCycleTime(util.toPointer(ThreadHandle), util.toPointer(CycleTime)));
}

export function QueryProcessCycleTime(
  ProcessHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  CycleTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.QueryProcessCycleTime(util.toPointer(ProcessHandle), util.toPointer(CycleTime)));
}

export function QueryIdleProcessorCycleTime(
  BufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  ProcessorIdleCycleTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.QueryIdleProcessorCycleTime(util.toPointer(BufferLength), util.toPointer(ProcessorIdleCycleTime)));
}

export function QueryIdleProcessorCycleTimeEx(
  Group: number /* u16 */,
  BufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  ProcessorIdleCycleTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.QueryIdleProcessorCycleTimeEx(Group, util.toPointer(BufferLength), util.toPointer(ProcessorIdleCycleTime)));
}

export function QueryInterruptTimePrecise(
  lpInterruptTimePrecise: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libapi_ms_win_core_realtime_l1_1_1.QueryInterruptTimePrecise(util.toPointer(lpInterruptTimePrecise));
}

export function QueryUnbiasedInterruptTimePrecise(
  lpUnbiasedInterruptTimePrecise: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libapi_ms_win_core_realtime_l1_1_1.QueryUnbiasedInterruptTimePrecise(util.toPointer(lpUnbiasedInterruptTimePrecise));
}

export function QueryInterruptTime(
  lpInterruptTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libapi_ms_win_core_realtime_l1_1_1.QueryInterruptTime(util.toPointer(lpInterruptTime));
}

export function QueryUnbiasedInterruptTime(
  UnbiasedTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.QueryUnbiasedInterruptTime(util.toPointer(UnbiasedTime)));
}

export function QueryAuxiliaryCounterFrequency(
  lpAuxiliaryCounterFrequency: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libapi_ms_win_core_realtime_l1_1_2.QueryAuxiliaryCounterFrequency(util.toPointer(lpAuxiliaryCounterFrequency)));
}

export function ConvertAuxiliaryCounterToPerformanceCounter(
  ullAuxiliaryCounterValue: Deno.PointerValue /* u64 */,
  lpPerformanceCounterValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpConversionError: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libapi_ms_win_core_realtime_l1_1_2.ConvertAuxiliaryCounterToPerformanceCounter(ullAuxiliaryCounterValue, util.toPointer(lpPerformanceCounterValue), util.toPointer(lpConversionError)));
}

export function ConvertPerformanceCounterToAuxiliaryCounter(
  ullPerformanceCounterValue: Deno.PointerValue /* u64 */,
  lpAuxiliaryCounterValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpConversionError: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libapi_ms_win_core_realtime_l1_1_2.ConvertPerformanceCounterToAuxiliaryCounter(ullPerformanceCounterValue, util.toPointer(lpAuxiliaryCounterValue), util.toPointer(lpConversionError)));
}

export function GlobalCompact(
  dwMinFree: number /* u32 */,
): Deno.PointerValue /* usize */ {
  return libKERNEL32.GlobalCompact(dwMinFree);
}

export function GlobalFix(
  hMem: Deno.PointerValue /* isize */,
): void /* void */ {
  return libKERNEL32.GlobalFix(hMem);
}

export function GlobalUnfix(
  hMem: Deno.PointerValue /* isize */,
): void /* void */ {
  return libKERNEL32.GlobalUnfix(hMem);
}

export function GlobalWire(
  hMem: Deno.PointerValue /* isize */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32.GlobalWire(hMem));
}

export function GlobalUnWire(
  hMem: Deno.PointerValue /* isize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GlobalUnWire(hMem));
}

export function LocalShrink(
  hMem: Deno.PointerValue /* isize */,
  cbNewSize: number /* u32 */,
): Deno.PointerValue /* usize */ {
  return libKERNEL32.LocalShrink(hMem, cbNewSize);
}

export function LocalCompact(
  uMinFree: number /* u32 */,
): Deno.PointerValue /* usize */ {
  return libKERNEL32.LocalCompact(uMinFree);
}

export function SetEnvironmentStringsA(
  NewEnvironment: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetEnvironmentStringsA(util.pstrToFfi(NewEnvironment)));
}

export function SetHandleCount(
  uNumber: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32.SetHandleCount(uNumber);
}

export function RequestDeviceWakeup(
  hDevice: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.RequestDeviceWakeup(util.toPointer(hDevice)));
}

export function CancelDeviceWakeupRequest(
  hDevice: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.CancelDeviceWakeupRequest(util.toPointer(hDevice)));
}

export function SetMessageWaitingIndicator(
  hMsgIndicator: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ulMsgCount: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetMessageWaitingIndicator(util.toPointer(hMsgIndicator), ulMsgCount));
}

export function MulDiv(
  nNumber: number /* i32 */,
  nNumerator: number /* i32 */,
  nDenominator: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32.MulDiv(nNumber, nNumerator, nDenominator);
}

export function GetSystemRegistryQuota(
  pdwQuotaAllowed: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwQuotaUsed: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetSystemRegistryQuota(util.toPointer(pdwQuotaAllowed), util.toPointer(pdwQuotaUsed)));
}

export function FileTimeToDosDateTime(
  lpFileTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpFatDate: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpFatTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.FileTimeToDosDateTime(util.toPointer(lpFileTime), util.toPointer(lpFatDate), util.toPointer(lpFatTime)));
}

export function DosDateTimeToFileTime(
  wFatDate: number /* u16 */,
  wFatTime: number /* u16 */,
  lpFileTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.DosDateTimeToFileTime(wFatDate, wFatTime, util.toPointer(lpFileTime)));
}

export function _lopen(
  lpPathName: string | null /* Windows.Win32.Foundation.PSTR */,
  iReadWrite: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32._lopen(util.pstrToFfi(lpPathName), iReadWrite);
}

export function _lcreat(
  lpPathName: string | null /* Windows.Win32.Foundation.PSTR */,
  iAttribute: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32._lcreat(util.pstrToFfi(lpPathName), iAttribute);
}

export function _lread(
  hFile: number /* i32 */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  uBytes: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32._lread(hFile, util.toPointer(lpBuffer), uBytes);
}

export function _lwrite(
  hFile: number /* i32 */,
  lpBuffer: string | null /* Windows.Win32.Foundation.PSTR */,
  uBytes: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32._lwrite(hFile, util.pstrToFfi(lpBuffer), uBytes);
}

export function _hread(
  hFile: number /* i32 */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  lBytes: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32._hread(hFile, util.toPointer(lpBuffer), lBytes);
}

export function _hwrite(
  hFile: number /* i32 */,
  lpBuffer: string | null /* Windows.Win32.Foundation.PSTR */,
  lBytes: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32._hwrite(hFile, util.pstrToFfi(lpBuffer), lBytes);
}

export function _lclose(
  hFile: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32._lclose(hFile);
}

export function _llseek(
  hFile: number /* i32 */,
  lOffset: number /* i32 */,
  iOrigin: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32._llseek(hFile, lOffset, iOrigin);
}

export function SignalObjectAndWait(
  hObjectToSignal: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  hObjectToWaitOn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwMilliseconds: number /* u32 */,
  bAlertable: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libKERNEL32.SignalObjectAndWait(util.toPointer(hObjectToSignal), util.toPointer(hObjectToWaitOn), dwMilliseconds, util.boolToFfi(bAlertable));
}

export function OpenMutexA(
  dwDesiredAccess: number /* u32 */,
  bInheritHandle: boolean /* Windows.Win32.Foundation.BOOL */,
  lpName: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32.OpenMutexA(dwDesiredAccess, util.boolToFfi(bInheritHandle), util.pstrToFfi(lpName)));
}

export function OpenSemaphoreA(
  dwDesiredAccess: number /* u32 */,
  bInheritHandle: boolean /* Windows.Win32.Foundation.BOOL */,
  lpName: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32.OpenSemaphoreA(dwDesiredAccess, util.boolToFfi(bInheritHandle), util.pstrToFfi(lpName)));
}

export function CreateWaitableTimerA(
  lpTimerAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  bManualReset: boolean /* Windows.Win32.Foundation.BOOL */,
  lpTimerName: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32.CreateWaitableTimerA(util.toPointer(lpTimerAttributes), util.boolToFfi(bManualReset), util.pstrToFfi(lpTimerName)));
}

export function OpenWaitableTimerA(
  dwDesiredAccess: number /* u32 */,
  bInheritHandle: boolean /* Windows.Win32.Foundation.BOOL */,
  lpTimerName: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32.OpenWaitableTimerA(dwDesiredAccess, util.boolToFfi(bInheritHandle), util.pstrToFfi(lpTimerName)));
}

export function CreateWaitableTimerExA(
  lpTimerAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpTimerName: string | null /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
  dwDesiredAccess: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libKERNEL32.CreateWaitableTimerExA(util.toPointer(lpTimerAttributes), util.pstrToFfi(lpTimerName), dwFlags, dwDesiredAccess));
}

export function GetFirmwareEnvironmentVariableA(
  lpName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpGuid: string | null /* Windows.Win32.Foundation.PSTR */,
  pBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  nSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32.GetFirmwareEnvironmentVariableA(util.pstrToFfi(lpName), util.pstrToFfi(lpGuid), util.toPointer(pBuffer), nSize);
}

export function GetFirmwareEnvironmentVariableW(
  lpName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpGuid: string | null /* Windows.Win32.Foundation.PWSTR */,
  pBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  nSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32.GetFirmwareEnvironmentVariableW(util.pwstrToFfi(lpName), util.pwstrToFfi(lpGuid), util.toPointer(pBuffer), nSize);
}

export function GetFirmwareEnvironmentVariableExA(
  lpName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpGuid: string | null /* Windows.Win32.Foundation.PSTR */,
  pBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  nSize: number /* u32 */,
  pdwAttribubutes: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libKERNEL32.GetFirmwareEnvironmentVariableExA(util.pstrToFfi(lpName), util.pstrToFfi(lpGuid), util.toPointer(pBuffer), nSize, util.toPointer(pdwAttribubutes));
}

export function GetFirmwareEnvironmentVariableExW(
  lpName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpGuid: string | null /* Windows.Win32.Foundation.PWSTR */,
  pBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  nSize: number /* u32 */,
  pdwAttribubutes: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libKERNEL32.GetFirmwareEnvironmentVariableExW(util.pwstrToFfi(lpName), util.pwstrToFfi(lpGuid), util.toPointer(pBuffer), nSize, util.toPointer(pdwAttribubutes));
}

export function SetFirmwareEnvironmentVariableA(
  lpName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpGuid: string | null /* Windows.Win32.Foundation.PSTR */,
  pValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  nSize: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetFirmwareEnvironmentVariableA(util.pstrToFfi(lpName), util.pstrToFfi(lpGuid), util.toPointer(pValue), nSize));
}

export function SetFirmwareEnvironmentVariableW(
  lpName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpGuid: string | null /* Windows.Win32.Foundation.PWSTR */,
  pValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  nSize: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetFirmwareEnvironmentVariableW(util.pwstrToFfi(lpName), util.pwstrToFfi(lpGuid), util.toPointer(pValue), nSize));
}

export function SetFirmwareEnvironmentVariableExA(
  lpName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpGuid: string | null /* Windows.Win32.Foundation.PSTR */,
  pValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  nSize: number /* u32 */,
  dwAttributes: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetFirmwareEnvironmentVariableExA(util.pstrToFfi(lpName), util.pstrToFfi(lpGuid), util.toPointer(pValue), nSize, dwAttributes));
}

export function SetFirmwareEnvironmentVariableExW(
  lpName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpGuid: string | null /* Windows.Win32.Foundation.PWSTR */,
  pValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  nSize: number /* u32 */,
  dwAttributes: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetFirmwareEnvironmentVariableExW(util.pwstrToFfi(lpName), util.pwstrToFfi(lpGuid), util.toPointer(pValue), nSize, dwAttributes));
}

export function IsNativeVhdBoot(
  NativeVhdBoot: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.IsNativeVhdBoot(util.toPointer(NativeVhdBoot)));
}

export function GetProfileIntA(
  lpAppName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpKeyName: string | null /* Windows.Win32.Foundation.PSTR */,
  nDefault: number /* i32 */,
): number /* u32 */ {
  return libKERNEL32.GetProfileIntA(util.pstrToFfi(lpAppName), util.pstrToFfi(lpKeyName), nDefault);
}

export function GetProfileIntW(
  lpAppName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpKeyName: string | null /* Windows.Win32.Foundation.PWSTR */,
  nDefault: number /* i32 */,
): number /* u32 */ {
  return libKERNEL32.GetProfileIntW(util.pwstrToFfi(lpAppName), util.pwstrToFfi(lpKeyName), nDefault);
}

export function GetProfileStringA(
  lpAppName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpKeyName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpDefault: string | null /* Windows.Win32.Foundation.PSTR */,
  lpReturnedString: string | null /* Windows.Win32.Foundation.PSTR */,
  nSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32.GetProfileStringA(util.pstrToFfi(lpAppName), util.pstrToFfi(lpKeyName), util.pstrToFfi(lpDefault), util.pstrToFfi(lpReturnedString), nSize);
}

export function GetProfileStringW(
  lpAppName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpKeyName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpDefault: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpReturnedString: string | null /* Windows.Win32.Foundation.PWSTR */,
  nSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32.GetProfileStringW(util.pwstrToFfi(lpAppName), util.pwstrToFfi(lpKeyName), util.pwstrToFfi(lpDefault), util.pwstrToFfi(lpReturnedString), nSize);
}

export function WriteProfileStringA(
  lpAppName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpKeyName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpString: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.WriteProfileStringA(util.pstrToFfi(lpAppName), util.pstrToFfi(lpKeyName), util.pstrToFfi(lpString)));
}

export function WriteProfileStringW(
  lpAppName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpKeyName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpString: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.WriteProfileStringW(util.pwstrToFfi(lpAppName), util.pwstrToFfi(lpKeyName), util.pwstrToFfi(lpString)));
}

export function GetProfileSectionA(
  lpAppName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpReturnedString: string | null /* Windows.Win32.Foundation.PSTR */,
  nSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32.GetProfileSectionA(util.pstrToFfi(lpAppName), util.pstrToFfi(lpReturnedString), nSize);
}

export function GetProfileSectionW(
  lpAppName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpReturnedString: string | null /* Windows.Win32.Foundation.PWSTR */,
  nSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32.GetProfileSectionW(util.pwstrToFfi(lpAppName), util.pwstrToFfi(lpReturnedString), nSize);
}

export function WriteProfileSectionA(
  lpAppName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpString: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.WriteProfileSectionA(util.pstrToFfi(lpAppName), util.pstrToFfi(lpString)));
}

export function WriteProfileSectionW(
  lpAppName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpString: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.WriteProfileSectionW(util.pwstrToFfi(lpAppName), util.pwstrToFfi(lpString)));
}

export function GetPrivateProfileIntA(
  lpAppName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpKeyName: string | null /* Windows.Win32.Foundation.PSTR */,
  nDefault: number /* i32 */,
  lpFileName: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libKERNEL32.GetPrivateProfileIntA(util.pstrToFfi(lpAppName), util.pstrToFfi(lpKeyName), nDefault, util.pstrToFfi(lpFileName));
}

export function GetPrivateProfileIntW(
  lpAppName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpKeyName: string | null /* Windows.Win32.Foundation.PWSTR */,
  nDefault: number /* i32 */,
  lpFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libKERNEL32.GetPrivateProfileIntW(util.pwstrToFfi(lpAppName), util.pwstrToFfi(lpKeyName), nDefault, util.pwstrToFfi(lpFileName));
}

export function GetPrivateProfileStringA(
  lpAppName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpKeyName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpDefault: string | null /* Windows.Win32.Foundation.PSTR */,
  lpReturnedString: string | null /* Windows.Win32.Foundation.PSTR */,
  nSize: number /* u32 */,
  lpFileName: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libKERNEL32.GetPrivateProfileStringA(util.pstrToFfi(lpAppName), util.pstrToFfi(lpKeyName), util.pstrToFfi(lpDefault), util.pstrToFfi(lpReturnedString), nSize, util.pstrToFfi(lpFileName));
}

export function GetPrivateProfileStringW(
  lpAppName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpKeyName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpDefault: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpReturnedString: string | null /* Windows.Win32.Foundation.PWSTR */,
  nSize: number /* u32 */,
  lpFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libKERNEL32.GetPrivateProfileStringW(util.pwstrToFfi(lpAppName), util.pwstrToFfi(lpKeyName), util.pwstrToFfi(lpDefault), util.pwstrToFfi(lpReturnedString), nSize, util.pwstrToFfi(lpFileName));
}

export function WritePrivateProfileStringA(
  lpAppName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpKeyName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpString: string | null /* Windows.Win32.Foundation.PSTR */,
  lpFileName: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.WritePrivateProfileStringA(util.pstrToFfi(lpAppName), util.pstrToFfi(lpKeyName), util.pstrToFfi(lpString), util.pstrToFfi(lpFileName)));
}

export function WritePrivateProfileStringW(
  lpAppName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpKeyName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpString: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.WritePrivateProfileStringW(util.pwstrToFfi(lpAppName), util.pwstrToFfi(lpKeyName), util.pwstrToFfi(lpString), util.pwstrToFfi(lpFileName)));
}

export function GetPrivateProfileSectionA(
  lpAppName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpReturnedString: string | null /* Windows.Win32.Foundation.PSTR */,
  nSize: number /* u32 */,
  lpFileName: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libKERNEL32.GetPrivateProfileSectionA(util.pstrToFfi(lpAppName), util.pstrToFfi(lpReturnedString), nSize, util.pstrToFfi(lpFileName));
}

export function GetPrivateProfileSectionW(
  lpAppName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpReturnedString: string | null /* Windows.Win32.Foundation.PWSTR */,
  nSize: number /* u32 */,
  lpFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libKERNEL32.GetPrivateProfileSectionW(util.pwstrToFfi(lpAppName), util.pwstrToFfi(lpReturnedString), nSize, util.pwstrToFfi(lpFileName));
}

export function WritePrivateProfileSectionA(
  lpAppName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpString: string | null /* Windows.Win32.Foundation.PSTR */,
  lpFileName: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.WritePrivateProfileSectionA(util.pstrToFfi(lpAppName), util.pstrToFfi(lpString), util.pstrToFfi(lpFileName)));
}

export function WritePrivateProfileSectionW(
  lpAppName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpString: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.WritePrivateProfileSectionW(util.pwstrToFfi(lpAppName), util.pwstrToFfi(lpString), util.pwstrToFfi(lpFileName)));
}

export function GetPrivateProfileSectionNamesA(
  lpszReturnBuffer: string | null /* Windows.Win32.Foundation.PSTR */,
  nSize: number /* u32 */,
  lpFileName: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libKERNEL32.GetPrivateProfileSectionNamesA(util.pstrToFfi(lpszReturnBuffer), nSize, util.pstrToFfi(lpFileName));
}

export function GetPrivateProfileSectionNamesW(
  lpszReturnBuffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  nSize: number /* u32 */,
  lpFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libKERNEL32.GetPrivateProfileSectionNamesW(util.pwstrToFfi(lpszReturnBuffer), nSize, util.pwstrToFfi(lpFileName));
}

export function GetPrivateProfileStructA(
  lpszSection: string | null /* Windows.Win32.Foundation.PSTR */,
  lpszKey: string | null /* Windows.Win32.Foundation.PSTR */,
  lpStruct: Deno.PointerValue | Uint8Array | null /* ptr */,
  uSizeStruct: number /* u32 */,
  szFile: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetPrivateProfileStructA(util.pstrToFfi(lpszSection), util.pstrToFfi(lpszKey), util.toPointer(lpStruct), uSizeStruct, util.pstrToFfi(szFile)));
}

export function GetPrivateProfileStructW(
  lpszSection: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszKey: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpStruct: Deno.PointerValue | Uint8Array | null /* ptr */,
  uSizeStruct: number /* u32 */,
  szFile: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetPrivateProfileStructW(util.pwstrToFfi(lpszSection), util.pwstrToFfi(lpszKey), util.toPointer(lpStruct), uSizeStruct, util.pwstrToFfi(szFile)));
}

export function WritePrivateProfileStructA(
  lpszSection: string | null /* Windows.Win32.Foundation.PSTR */,
  lpszKey: string | null /* Windows.Win32.Foundation.PSTR */,
  lpStruct: Deno.PointerValue | Uint8Array | null /* ptr */,
  uSizeStruct: number /* u32 */,
  szFile: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.WritePrivateProfileStructA(util.pstrToFfi(lpszSection), util.pstrToFfi(lpszKey), util.toPointer(lpStruct), uSizeStruct, util.pstrToFfi(szFile)));
}

export function WritePrivateProfileStructW(
  lpszSection: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszKey: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpStruct: Deno.PointerValue | Uint8Array | null /* ptr */,
  uSizeStruct: number /* u32 */,
  szFile: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.WritePrivateProfileStructW(util.pwstrToFfi(lpszSection), util.pwstrToFfi(lpszKey), util.toPointer(lpStruct), uSizeStruct, util.pwstrToFfi(szFile)));
}

export function IsBadHugeReadPtr(
  lp: Deno.PointerValue | Uint8Array | null /* ptr */,
  ucb: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.IsBadHugeReadPtr(util.toPointer(lp), ucb));
}

export function IsBadHugeWritePtr(
  lp: Deno.PointerValue | Uint8Array | null /* ptr */,
  ucb: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.IsBadHugeWritePtr(util.toPointer(lp), ucb));
}

export function GetComputerNameA(
  lpBuffer: string | null /* Windows.Win32.Foundation.PSTR */,
  nSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetComputerNameA(util.pstrToFfi(lpBuffer), util.toPointer(nSize)));
}

export function GetComputerNameW(
  lpBuffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  nSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetComputerNameW(util.pwstrToFfi(lpBuffer), util.toPointer(nSize)));
}

export function DnsHostnameToComputerNameA(
  Hostname: string | null /* Windows.Win32.Foundation.PSTR */,
  ComputerName: string | null /* Windows.Win32.Foundation.PSTR */,
  nSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.DnsHostnameToComputerNameA(util.pstrToFfi(Hostname), util.pstrToFfi(ComputerName), util.toPointer(nSize)));
}

export function DnsHostnameToComputerNameW(
  Hostname: string | null /* Windows.Win32.Foundation.PWSTR */,
  ComputerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  nSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.DnsHostnameToComputerNameW(util.pwstrToFfi(Hostname), util.pwstrToFfi(ComputerName), util.toPointer(nSize)));
}

export function GetUserNameA(
  lpBuffer: string | null /* Windows.Win32.Foundation.PSTR */,
  pcbBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32.GetUserNameA(util.pstrToFfi(lpBuffer), util.toPointer(pcbBuffer)));
}

export function GetUserNameW(
  lpBuffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  pcbBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32.GetUserNameW(util.pwstrToFfi(lpBuffer), util.toPointer(pcbBuffer)));
}

export function IsTokenUntrusted(
  TokenHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32.IsTokenUntrusted(util.toPointer(TokenHandle)));
}

export function CancelTimerQueueTimer(
  TimerQueue: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Timer: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.CancelTimerQueueTimer(util.toPointer(TimerQueue), util.toPointer(Timer)));
}

export function GetCurrentHwProfileA(
  lpHwProfileInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32.GetCurrentHwProfileA(util.toPointer(lpHwProfileInfo)));
}

export function GetCurrentHwProfileW(
  lpHwProfileInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32.GetCurrentHwProfileW(util.toPointer(lpHwProfileInfo)));
}

export function ReplacePartitionUnit(
  TargetPartition: string | null /* Windows.Win32.Foundation.PWSTR */,
  SparePartition: string | null /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.ReplacePartitionUnit(util.pwstrToFfi(TargetPartition), util.pwstrToFfi(SparePartition), Flags));
}

export function GetThreadEnabledXStateFeatures(): Deno.PointerValue /* u64 */ {
  return libKERNEL32.GetThreadEnabledXStateFeatures();
}

export function EnableProcessOptionalXStateFeatures(
  Features: Deno.PointerValue /* u64 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.EnableProcessOptionalXStateFeatures(Features));
}

export function RaiseCustomSystemEventTrigger(
  CustomSystemEventTriggerConfig: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libapi_ms_win_core_backgroundtask_l1_1_0.RaiseCustomSystemEventTrigger(util.toPointer(CustomSystemEventTriggerConfig));
}

export function uaw_lstrcmpW(
  String1: Deno.PointerValue | Uint8Array | null /* ptr */,
  String2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libKERNEL32.uaw_lstrcmpW(util.toPointer(String1), util.toPointer(String2));
}

export function uaw_lstrcmpiW(
  String1: Deno.PointerValue | Uint8Array | null /* ptr */,
  String2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libKERNEL32.uaw_lstrcmpiW(util.toPointer(String1), util.toPointer(String2));
}

export function uaw_lstrlenW(
  String: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libKERNEL32.uaw_lstrlenW(util.toPointer(String));
}

export function uaw_wcschr(
  String: Deno.PointerValue | Uint8Array | null /* ptr */,
  Character: Uint8Array | Deno.PointerValue | null /* char */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32.uaw_wcschr(util.toPointer(String), util.toPointer(Character)));
}

export function uaw_wcscpy(
  Destination: Deno.PointerValue | Uint8Array | null /* ptr */,
  Source: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32.uaw_wcscpy(util.toPointer(Destination), util.toPointer(Source)));
}

export function uaw_wcsicmp(
  String1: Deno.PointerValue | Uint8Array | null /* ptr */,
  String2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libKERNEL32.uaw_wcsicmp(util.toPointer(String1), util.toPointer(String2));
}

export function uaw_wcslen(
  String: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue /* usize */ {
  return libKERNEL32.uaw_wcslen(util.toPointer(String));
}

export function uaw_wcsrchr(
  String: Deno.PointerValue | Uint8Array | null /* ptr */,
  Character: Uint8Array | Deno.PointerValue | null /* char */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32.uaw_wcsrchr(util.toPointer(String), util.toPointer(Character)));
}

export function NtClose(
  Handle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libntdll.NtClose(util.toPointer(Handle)));
}

export function NtOpenFile(
  FileHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  DesiredAccess: number /* u32 */,
  ObjectAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  IoStatusBlock: Deno.PointerValue | Uint8Array | null /* ptr */,
  ShareAccess: number /* u32 */,
  OpenOptions: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libntdll.NtOpenFile(util.toPointer(FileHandle), DesiredAccess, util.toPointer(ObjectAttributes), util.toPointer(IoStatusBlock), ShareAccess, OpenOptions));
}

export function NtRenameKey(
  KeyHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  NewName: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libntdll.NtRenameKey(util.toPointer(KeyHandle), util.toPointer(NewName)));
}

export function NtNotifyChangeMultipleKeys(
  MasterKeyHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Count: number /* u32 */,
  SubordinateObjects: Deno.PointerValue | Uint8Array | null /* ptr */,
  Event: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ApcRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.WindowsProgramming.PIO_APC_ROUTINE */,
  ApcContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  IoStatusBlock: Deno.PointerValue | Uint8Array | null /* ptr */,
  CompletionFilter: number /* u32 */,
  WatchTree: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferSize: number /* u32 */,
  Asynchronous: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libntdll.NtNotifyChangeMultipleKeys(util.toPointer(MasterKeyHandle), Count, util.toPointer(SubordinateObjects), util.toPointer(Event), util.toPointer(ApcRoutine), util.toPointer(ApcContext), util.toPointer(IoStatusBlock), CompletionFilter, util.toPointer(WatchTree), util.toPointer(Buffer), BufferSize, util.toPointer(Asynchronous)));
}

export function NtQueryMultipleValueKey(
  KeyHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ValueEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
  EntryCount: number /* u32 */,
  ValueBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  RequiredBufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libntdll.NtQueryMultipleValueKey(util.toPointer(KeyHandle), util.toPointer(ValueEntries), EntryCount, util.toPointer(ValueBuffer), util.toPointer(BufferLength), util.toPointer(RequiredBufferLength)));
}

export function NtSetInformationKey(
  KeyHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  KeySetInformationClass: KEY_SET_INFORMATION_CLASS /* Windows.Win32.System.WindowsProgramming.KEY_SET_INFORMATION_CLASS */,
  KeySetInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  KeySetInformationLength: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libntdll.NtSetInformationKey(util.toPointer(KeyHandle), KeySetInformationClass, util.toPointer(KeySetInformation), KeySetInformationLength));
}

export function NtDeviceIoControlFile(
  FileHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Event: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ApcRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.WindowsProgramming.PIO_APC_ROUTINE */,
  ApcContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  IoStatusBlock: Deno.PointerValue | Uint8Array | null /* ptr */,
  IoControlCode: number /* u32 */,
  InputBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  InputBufferLength: number /* u32 */,
  OutputBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  OutputBufferLength: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libntdll.NtDeviceIoControlFile(util.toPointer(FileHandle), util.toPointer(Event), util.toPointer(ApcRoutine), util.toPointer(ApcContext), util.toPointer(IoStatusBlock), IoControlCode, util.toPointer(InputBuffer), InputBufferLength, util.toPointer(OutputBuffer), OutputBufferLength));
}

export function NtWaitForSingleObject(
  Handle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Alertable: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */,
  Timeout: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libntdll.NtWaitForSingleObject(util.toPointer(Handle), util.toPointer(Alertable), util.toPointer(Timeout)));
}

export function RtlIsNameLegalDOS8Dot3(
  Name: Deno.PointerValue | Uint8Array | null /* ptr */,
  OemName: Deno.PointerValue | Uint8Array | null /* ptr */,
  NameContainsSpaces: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libntdll.RtlIsNameLegalDOS8Dot3(util.toPointer(Name), util.toPointer(OemName), util.toPointer(NameContainsSpaces)));
}

export function NtQueryObject(
  Handle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ObjectInformationClass: OBJECT_INFORMATION_CLASS /* Windows.Win32.System.WindowsProgramming.OBJECT_INFORMATION_CLASS */,
  ObjectInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectInformationLength: number /* u32 */,
  ReturnLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libntdll.NtQueryObject(util.toPointer(Handle), ObjectInformationClass, util.toPointer(ObjectInformation), ObjectInformationLength, util.toPointer(ReturnLength)));
}

export function NtQuerySystemInformation(
  SystemInformationClass: SYSTEM_INFORMATION_CLASS /* Windows.Win32.System.WindowsProgramming.SYSTEM_INFORMATION_CLASS */,
  SystemInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  SystemInformationLength: number /* u32 */,
  ReturnLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libntdll.NtQuerySystemInformation(SystemInformationClass, util.toPointer(SystemInformation), SystemInformationLength, util.toPointer(ReturnLength)));
}

export function NtQuerySystemTime(
  SystemTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libntdll.NtQuerySystemTime(util.toPointer(SystemTime)));
}

export function NtQueryTimerResolution(
  MaximumTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  MinimumTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  CurrentTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libntdll.NtQueryTimerResolution(util.toPointer(MaximumTime), util.toPointer(MinimumTime), util.toPointer(CurrentTime)));
}

export function RtlLocalTimeToSystemTime(
  LocalTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  SystemTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libntdll.RtlLocalTimeToSystemTime(util.toPointer(LocalTime), util.toPointer(SystemTime)));
}

export function RtlTimeToSecondsSince1970(
  Time: Deno.PointerValue | Uint8Array | null /* ptr */,
  ElapsedSeconds: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libntdll.RtlTimeToSecondsSince1970(util.toPointer(Time), util.toPointer(ElapsedSeconds)));
}

export function RtlFreeAnsiString(
  AnsiString: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libntdll.RtlFreeAnsiString(util.toPointer(AnsiString));
}

export function RtlFreeUnicodeString(
  UnicodeString: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libntdll.RtlFreeUnicodeString(util.toPointer(UnicodeString));
}

export function RtlFreeOemString(
  OemString: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libntdll.RtlFreeOemString(util.toPointer(OemString));
}

export function RtlInitString(
  DestinationString: Deno.PointerValue | Uint8Array | null /* ptr */,
  SourceString: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libntdll.RtlInitString(util.toPointer(DestinationString), util.toPointer(SourceString));
}

export function RtlInitStringEx(
  DestinationString: Deno.PointerValue | Uint8Array | null /* ptr */,
  SourceString: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libntdll.RtlInitStringEx(util.toPointer(DestinationString), util.toPointer(SourceString)));
}

export function RtlInitAnsiString(
  DestinationString: Deno.PointerValue | Uint8Array | null /* ptr */,
  SourceString: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libntdll.RtlInitAnsiString(util.toPointer(DestinationString), util.toPointer(SourceString));
}

export function RtlInitAnsiStringEx(
  DestinationString: Deno.PointerValue | Uint8Array | null /* ptr */,
  SourceString: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libntdll.RtlInitAnsiStringEx(util.toPointer(DestinationString), util.toPointer(SourceString)));
}

export function RtlInitUnicodeString(
  DestinationString: Deno.PointerValue | Uint8Array | null /* ptr */,
  SourceString: string | null /* Windows.Win32.Foundation.PWSTR */,
): void /* void */ {
  return libntdll.RtlInitUnicodeString(util.toPointer(DestinationString), util.pwstrToFfi(SourceString));
}

export function RtlAnsiStringToUnicodeString(
  DestinationString: Deno.PointerValue | Uint8Array | null /* ptr */,
  SourceString: Deno.PointerValue | Uint8Array | null /* ptr */,
  AllocateDestinationString: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libntdll.RtlAnsiStringToUnicodeString(util.toPointer(DestinationString), util.toPointer(SourceString), util.toPointer(AllocateDestinationString)));
}

export function RtlUnicodeStringToAnsiString(
  DestinationString: Deno.PointerValue | Uint8Array | null /* ptr */,
  SourceString: Deno.PointerValue | Uint8Array | null /* ptr */,
  AllocateDestinationString: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libntdll.RtlUnicodeStringToAnsiString(util.toPointer(DestinationString), util.toPointer(SourceString), util.toPointer(AllocateDestinationString)));
}

export function RtlUnicodeStringToOemString(
  DestinationString: Deno.PointerValue | Uint8Array | null /* ptr */,
  SourceString: Deno.PointerValue | Uint8Array | null /* ptr */,
  AllocateDestinationString: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libntdll.RtlUnicodeStringToOemString(util.toPointer(DestinationString), util.toPointer(SourceString), util.toPointer(AllocateDestinationString)));
}

export function RtlUnicodeToMultiByteSize(
  BytesInMultiByteString: Deno.PointerValue | Uint8Array | null /* ptr */,
  UnicodeString: string | null /* Windows.Win32.Foundation.PWSTR */,
  BytesInUnicodeString: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libntdll.RtlUnicodeToMultiByteSize(util.toPointer(BytesInMultiByteString), util.pwstrToFfi(UnicodeString), BytesInUnicodeString));
}

export function RtlCharToInteger(
  String: Deno.PointerValue | Uint8Array | null /* ptr */,
  Base: number /* u32 */,
  Value: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libntdll.RtlCharToInteger(util.toPointer(String), Base, util.toPointer(Value)));
}

export function RtlUniform(
  Seed: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libntdll.RtlUniform(util.toPointer(Seed));
}

export function GetFeatureEnabledState(
  featureId: number /* u32 */,
  changeTime: FEATURE_CHANGE_TIME /* Windows.Win32.System.WindowsProgramming.FEATURE_CHANGE_TIME */,
): FEATURE_ENABLED_STATE /* Windows.Win32.System.WindowsProgramming.FEATURE_ENABLED_STATE */ {
  return libapi_ms_win_core_featurestaging_l1_1_0.GetFeatureEnabledState(featureId, changeTime);
}

export function RecordFeatureUsage(
  featureId: number /* u32 */,
  kind: number /* u32 */,
  addend: number /* u32 */,
  originName: string | null /* Windows.Win32.Foundation.PSTR */,
): void /* void */ {
  return libapi_ms_win_core_featurestaging_l1_1_0.RecordFeatureUsage(featureId, kind, addend, util.pstrToFfi(originName));
}

export function RecordFeatureError(
  featureId: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libapi_ms_win_core_featurestaging_l1_1_0.RecordFeatureError(featureId, util.toPointer(error));
}

export function SubscribeFeatureStateChangeNotification(
  subscription: Deno.PointerValue | Uint8Array | null /* ptr */,
  callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.WindowsProgramming.PFEATURE_STATE_CHANGE_CALLBACK */,
  context: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libapi_ms_win_core_featurestaging_l1_1_0.SubscribeFeatureStateChangeNotification(util.toPointer(subscription), util.toPointer(callback), util.toPointer(context));
}

export function UnsubscribeFeatureStateChangeNotification(
  subscription: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.WindowsProgramming.FEATURE_STATE_CHANGE_SUBSCRIPTION */,
): void /* void */ {
  return libapi_ms_win_core_featurestaging_l1_1_0.UnsubscribeFeatureStateChangeNotification(util.toPointer(subscription));
}

export function GetFeatureVariant(
  featureId: number /* u32 */,
  changeTime: FEATURE_CHANGE_TIME /* Windows.Win32.System.WindowsProgramming.FEATURE_CHANGE_TIME */,
  payloadId: Deno.PointerValue | Uint8Array | null /* ptr */,
  hasNotification: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libapi_ms_win_core_featurestaging_l1_1_1.GetFeatureVariant(featureId, changeTime, util.toPointer(payloadId), util.toPointer(hasNotification));
}

export function DCIOpenProvider(): Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */ {
  return util.pointerFromFfi(libDCIMAN32.DCIOpenProvider());
}

export function DCICloseProvider(
  hdc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
): void /* void */ {
  return libDCIMAN32.DCICloseProvider(util.toPointer(hdc));
}

export function DCICreatePrimary(
  hdc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
  lplpSurface: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libDCIMAN32.DCICreatePrimary(util.toPointer(hdc), util.toPointer(lplpSurface));
}

export function DCICreateOffscreen(
  hdc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
  dwCompression: number /* u32 */,
  dwRedMask: number /* u32 */,
  dwGreenMask: number /* u32 */,
  dwBlueMask: number /* u32 */,
  dwWidth: number /* u32 */,
  dwHeight: number /* u32 */,
  dwDCICaps: number /* u32 */,
  dwBitCount: number /* u32 */,
  lplpSurface: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libDCIMAN32.DCICreateOffscreen(util.toPointer(hdc), dwCompression, dwRedMask, dwGreenMask, dwBlueMask, dwWidth, dwHeight, dwDCICaps, dwBitCount, util.toPointer(lplpSurface));
}

export function DCICreateOverlay(
  hdc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
  lpOffscreenSurf: Deno.PointerValue | Uint8Array | null /* ptr */,
  lplpSurface: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libDCIMAN32.DCICreateOverlay(util.toPointer(hdc), util.toPointer(lpOffscreenSurf), util.toPointer(lplpSurface));
}

export function DCIEnum(
  hdc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
  lprDst: Deno.PointerValue | Uint8Array | null /* ptr */,
  lprSrc: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpFnCallback: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libDCIMAN32.DCIEnum(util.toPointer(hdc), util.toPointer(lprDst), util.toPointer(lprSrc), util.toPointer(lpFnCallback), util.toPointer(lpContext));
}

export function DCISetSrcDestClip(
  pdci: Deno.PointerValue | Uint8Array | null /* ptr */,
  srcrc: Deno.PointerValue | Uint8Array | null /* ptr */,
  destrc: Deno.PointerValue | Uint8Array | null /* ptr */,
  prd: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libDCIMAN32.DCISetSrcDestClip(util.toPointer(pdci), util.toPointer(srcrc), util.toPointer(destrc), util.toPointer(prd));
}

export function WinWatchOpen(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): Deno.PointerValue | null /* Windows.Win32.System.WindowsProgramming.HWINWATCH */ {
  return util.pointerFromFfi(libDCIMAN32.WinWatchOpen(util.hwndToFfi(hwnd)));
}

export function WinWatchClose(
  hWW: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.WindowsProgramming.HWINWATCH */,
): void /* void */ {
  return libDCIMAN32.WinWatchClose(util.toPointer(hWW));
}

export function WinWatchGetClipList(
  hWW: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.WindowsProgramming.HWINWATCH */,
  prc: Deno.PointerValue | Uint8Array | null /* ptr */,
  size: number /* u32 */,
  prd: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libDCIMAN32.WinWatchGetClipList(util.toPointer(hWW), util.toPointer(prc), size, util.toPointer(prd));
}

export function WinWatchDidStatusChange(
  hWW: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.WindowsProgramming.HWINWATCH */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libDCIMAN32.WinWatchDidStatusChange(util.toPointer(hWW)));
}

export function GetWindowRegionData(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  size: number /* u32 */,
  prd: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libDCIMAN32.GetWindowRegionData(util.hwndToFfi(hwnd), size, util.toPointer(prd));
}

export function GetDCRegionData(
  hdc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
  size: number /* u32 */,
  prd: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libDCIMAN32.GetDCRegionData(util.toPointer(hdc), size, util.toPointer(prd));
}

export function WinWatchNotify(
  hWW: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.WindowsProgramming.HWINWATCH */,
  NotifyCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.WindowsProgramming.WINWATCHNOTIFYPROC */,
  NotifyParam: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LPARAM */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libDCIMAN32.WinWatchNotify(util.toPointer(hWW), util.toPointer(NotifyCallback), util.toPointer(NotifyParam)));
}

export function DCIEndAccess(
  pdci: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libDCIMAN32.DCIEndAccess(util.toPointer(pdci));
}

export function DCIBeginAccess(
  pdci: Deno.PointerValue | Uint8Array | null /* ptr */,
  x: number /* i32 */,
  y: number /* i32 */,
  dx: number /* i32 */,
  dy: number /* i32 */,
): number /* i32 */ {
  return libDCIMAN32.DCIBeginAccess(util.toPointer(pdci), x, y, dx, dy);
}

export function DCIDestroy(
  pdci: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libDCIMAN32.DCIDestroy(util.toPointer(pdci));
}

export function DCIDraw(
  pdci: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libDCIMAN32.DCIDraw(util.toPointer(pdci));
}

export function DCISetClipList(
  pdci: Deno.PointerValue | Uint8Array | null /* ptr */,
  prd: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libDCIMAN32.DCISetClipList(util.toPointer(pdci), util.toPointer(prd));
}

export function DCISetDestination(
  pdci: Deno.PointerValue | Uint8Array | null /* ptr */,
  dst: Deno.PointerValue | Uint8Array | null /* ptr */,
  src: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libDCIMAN32.DCISetDestination(util.toPointer(pdci), util.toPointer(dst), util.toPointer(src));
}

export function GdiEntry13(): number /* u32 */ {
  return libapi_ms_win_dx_d3dkmt_l1_1_0.GdiEntry13();
}

export function RunSetupCommandA(
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  szCmdName: string | null /* Windows.Win32.Foundation.PSTR */,
  szInfSection: string | null /* Windows.Win32.Foundation.PSTR */,
  szDir: string | null /* Windows.Win32.Foundation.PSTR */,
  lpszTitle: string | null /* Windows.Win32.Foundation.PSTR */,
  phEXE: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  pvReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.RunSetupCommandA(util.hwndToFfi(hWnd), util.pstrToFfi(szCmdName), util.pstrToFfi(szInfSection), util.pstrToFfi(szDir), util.pstrToFfi(lpszTitle), util.toPointer(phEXE), dwFlags, util.toPointer(pvReserved)));
}

export function RunSetupCommandW(
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  szCmdName: string | null /* Windows.Win32.Foundation.PWSTR */,
  szInfSection: string | null /* Windows.Win32.Foundation.PWSTR */,
  szDir: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszTitle: string | null /* Windows.Win32.Foundation.PWSTR */,
  phEXE: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  pvReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.RunSetupCommandW(util.hwndToFfi(hWnd), util.pwstrToFfi(szCmdName), util.pwstrToFfi(szInfSection), util.pwstrToFfi(szDir), util.pwstrToFfi(lpszTitle), util.toPointer(phEXE), dwFlags, util.toPointer(pvReserved)));
}

export function NeedRebootInit(): number /* u32 */ {
  return libADVPACK.NeedRebootInit();
}

export function NeedReboot(
  dwRebootCheck: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVPACK.NeedReboot(dwRebootCheck));
}

export function RebootCheckOnInstallA(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pszINF: string | null /* Windows.Win32.Foundation.PSTR */,
  pszSec: string | null /* Windows.Win32.Foundation.PSTR */,
  dwReserved: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.RebootCheckOnInstallA(util.hwndToFfi(hwnd), util.pstrToFfi(pszINF), util.pstrToFfi(pszSec), dwReserved));
}

export function RebootCheckOnInstallW(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pszINF: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszSec: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwReserved: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.RebootCheckOnInstallW(util.hwndToFfi(hwnd), util.pwstrToFfi(pszINF), util.pwstrToFfi(pszSec), dwReserved));
}

export function TranslateInfStringA(
  pszInfFilename: string | null /* Windows.Win32.Foundation.PSTR */,
  pszInstallSection: string | null /* Windows.Win32.Foundation.PSTR */,
  pszTranslateSection: string | null /* Windows.Win32.Foundation.PSTR */,
  pszTranslateKey: string | null /* Windows.Win32.Foundation.PSTR */,
  pszBuffer: string | null /* Windows.Win32.Foundation.PSTR */,
  cchBuffer: number /* u32 */,
  pdwRequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.TranslateInfStringA(util.pstrToFfi(pszInfFilename), util.pstrToFfi(pszInstallSection), util.pstrToFfi(pszTranslateSection), util.pstrToFfi(pszTranslateKey), util.pstrToFfi(pszBuffer), cchBuffer, util.toPointer(pdwRequiredSize), util.toPointer(pvReserved)));
}

export function TranslateInfStringW(
  pszInfFilename: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszInstallSection: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszTranslateSection: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszTranslateKey: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszBuffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchBuffer: number /* u32 */,
  pdwRequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.TranslateInfStringW(util.pwstrToFfi(pszInfFilename), util.pwstrToFfi(pszInstallSection), util.pwstrToFfi(pszTranslateSection), util.pwstrToFfi(pszTranslateKey), util.pwstrToFfi(pszBuffer), cchBuffer, util.toPointer(pdwRequiredSize), util.toPointer(pvReserved)));
}

export function RegInstallA(
  hmod: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  pszSection: string | null /* Windows.Win32.Foundation.PSTR */,
  pstTable: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.RegInstallA(util.toPointer(hmod), util.pstrToFfi(pszSection), util.toPointer(pstTable)));
}

export function RegInstallW(
  hmod: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  pszSection: string | null /* Windows.Win32.Foundation.PWSTR */,
  pstTable: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.RegInstallW(util.toPointer(hmod), util.pwstrToFfi(pszSection), util.toPointer(pstTable)));
}

export function LaunchINFSectionExW(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  hInstance: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  pszParms: string | null /* Windows.Win32.Foundation.PWSTR */,
  nShow: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.LaunchINFSectionExW(util.hwndToFfi(hwnd), util.toPointer(hInstance), util.pwstrToFfi(pszParms), nShow));
}

export function ExecuteCabA(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pCab: Deno.PointerValue | Uint8Array | null /* ptr */,
  pReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.ExecuteCabA(util.hwndToFfi(hwnd), util.toPointer(pCab), util.toPointer(pReserved)));
}

export function ExecuteCabW(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pCab: Deno.PointerValue | Uint8Array | null /* ptr */,
  pReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.ExecuteCabW(util.hwndToFfi(hwnd), util.toPointer(pCab), util.toPointer(pReserved)));
}

export function AdvInstallFileA(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  lpszSourceDir: string | null /* Windows.Win32.Foundation.PSTR */,
  lpszSourceFile: string | null /* Windows.Win32.Foundation.PSTR */,
  lpszDestDir: string | null /* Windows.Win32.Foundation.PSTR */,
  lpszDestFile: string | null /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
  dwReserved: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.AdvInstallFileA(util.hwndToFfi(hwnd), util.pstrToFfi(lpszSourceDir), util.pstrToFfi(lpszSourceFile), util.pstrToFfi(lpszDestDir), util.pstrToFfi(lpszDestFile), dwFlags, dwReserved));
}

export function AdvInstallFileW(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  lpszSourceDir: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszSourceFile: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszDestDir: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszDestFile: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  dwReserved: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.AdvInstallFileW(util.hwndToFfi(hwnd), util.pwstrToFfi(lpszSourceDir), util.pwstrToFfi(lpszSourceFile), util.pwstrToFfi(lpszDestDir), util.pwstrToFfi(lpszDestFile), dwFlags, dwReserved));
}

export function RegSaveRestoreA(
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pszTitleString: string | null /* Windows.Win32.Foundation.PSTR */,
  hkBckupKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pcszRootKey: string | null /* Windows.Win32.Foundation.PSTR */,
  pcszSubKey: string | null /* Windows.Win32.Foundation.PSTR */,
  pcszValueName: string | null /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.RegSaveRestoreA(util.hwndToFfi(hWnd), util.pstrToFfi(pszTitleString), util.toPointer(hkBckupKey), util.pstrToFfi(pcszRootKey), util.pstrToFfi(pcszSubKey), util.pstrToFfi(pcszValueName), dwFlags));
}

export function RegSaveRestoreW(
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pszTitleString: string | null /* Windows.Win32.Foundation.PWSTR */,
  hkBckupKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pcszRootKey: string | null /* Windows.Win32.Foundation.PWSTR */,
  pcszSubKey: string | null /* Windows.Win32.Foundation.PWSTR */,
  pcszValueName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.RegSaveRestoreW(util.hwndToFfi(hWnd), util.pwstrToFfi(pszTitleString), util.toPointer(hkBckupKey), util.pwstrToFfi(pcszRootKey), util.pwstrToFfi(pcszSubKey), util.pwstrToFfi(pcszValueName), dwFlags));
}

export function RegSaveRestoreOnINFA(
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pszTitle: string | null /* Windows.Win32.Foundation.PSTR */,
  pszINF: string | null /* Windows.Win32.Foundation.PSTR */,
  pszSection: string | null /* Windows.Win32.Foundation.PSTR */,
  hHKLMBackKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  hHKCUBackKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.RegSaveRestoreOnINFA(util.hwndToFfi(hWnd), util.pstrToFfi(pszTitle), util.pstrToFfi(pszINF), util.pstrToFfi(pszSection), util.toPointer(hHKLMBackKey), util.toPointer(hHKCUBackKey), dwFlags));
}

export function RegSaveRestoreOnINFW(
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pszTitle: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszINF: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszSection: string | null /* Windows.Win32.Foundation.PWSTR */,
  hHKLMBackKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  hHKCUBackKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.RegSaveRestoreOnINFW(util.hwndToFfi(hWnd), util.pwstrToFfi(pszTitle), util.pwstrToFfi(pszINF), util.pwstrToFfi(pszSection), util.toPointer(hHKLMBackKey), util.toPointer(hHKCUBackKey), dwFlags));
}

export function RegRestoreAllA(
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pszTitleString: string | null /* Windows.Win32.Foundation.PSTR */,
  hkBckupKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.RegRestoreAllA(util.hwndToFfi(hWnd), util.pstrToFfi(pszTitleString), util.toPointer(hkBckupKey)));
}

export function RegRestoreAllW(
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pszTitleString: string | null /* Windows.Win32.Foundation.PWSTR */,
  hkBckupKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.RegRestoreAllW(util.hwndToFfi(hWnd), util.pwstrToFfi(pszTitleString), util.toPointer(hkBckupKey)));
}

export function FileSaveRestoreW(
  hDlg: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  lpFileList: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpDir: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpBaseName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.FileSaveRestoreW(util.hwndToFfi(hDlg), util.pwstrToFfi(lpFileList), util.pwstrToFfi(lpDir), util.pwstrToFfi(lpBaseName), dwFlags));
}

export function FileSaveRestoreOnINFA(
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pszTitle: string | null /* Windows.Win32.Foundation.PSTR */,
  pszINF: string | null /* Windows.Win32.Foundation.PSTR */,
  pszSection: string | null /* Windows.Win32.Foundation.PSTR */,
  pszBackupDir: string | null /* Windows.Win32.Foundation.PSTR */,
  pszBaseBackupFile: string | null /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.FileSaveRestoreOnINFA(util.hwndToFfi(hWnd), util.pstrToFfi(pszTitle), util.pstrToFfi(pszINF), util.pstrToFfi(pszSection), util.pstrToFfi(pszBackupDir), util.pstrToFfi(pszBaseBackupFile), dwFlags));
}

export function FileSaveRestoreOnINFW(
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pszTitle: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszINF: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszSection: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszBackupDir: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszBaseBackupFile: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.FileSaveRestoreOnINFW(util.hwndToFfi(hWnd), util.pwstrToFfi(pszTitle), util.pwstrToFfi(pszINF), util.pwstrToFfi(pszSection), util.pwstrToFfi(pszBackupDir), util.pwstrToFfi(pszBaseBackupFile), dwFlags));
}

export function AddDelBackupEntryA(
  lpcszFileList: string | null /* Windows.Win32.Foundation.PSTR */,
  lpcszBackupDir: string | null /* Windows.Win32.Foundation.PSTR */,
  lpcszBaseName: string | null /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.AddDelBackupEntryA(util.pstrToFfi(lpcszFileList), util.pstrToFfi(lpcszBackupDir), util.pstrToFfi(lpcszBaseName), dwFlags));
}

export function AddDelBackupEntryW(
  lpcszFileList: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpcszBackupDir: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpcszBaseName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.AddDelBackupEntryW(util.pwstrToFfi(lpcszFileList), util.pwstrToFfi(lpcszBackupDir), util.pwstrToFfi(lpcszBaseName), dwFlags));
}

export function FileSaveMarkNotExistA(
  lpFileList: string | null /* Windows.Win32.Foundation.PSTR */,
  lpDir: string | null /* Windows.Win32.Foundation.PSTR */,
  lpBaseName: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.FileSaveMarkNotExistA(util.pstrToFfi(lpFileList), util.pstrToFfi(lpDir), util.pstrToFfi(lpBaseName)));
}

export function FileSaveMarkNotExistW(
  lpFileList: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpDir: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpBaseName: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.FileSaveMarkNotExistW(util.pwstrToFfi(lpFileList), util.pwstrToFfi(lpDir), util.pwstrToFfi(lpBaseName)));
}

export function GetVersionFromFileA(
  lpszFilename: string | null /* Windows.Win32.Foundation.PSTR */,
  pdwMSVer: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwLSVer: Deno.PointerValue | Uint8Array | null /* ptr */,
  bVersion: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.GetVersionFromFileA(util.pstrToFfi(lpszFilename), util.toPointer(pdwMSVer), util.toPointer(pdwLSVer), util.boolToFfi(bVersion)));
}

export function GetVersionFromFileW(
  lpszFilename: string | null /* Windows.Win32.Foundation.PWSTR */,
  pdwMSVer: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwLSVer: Deno.PointerValue | Uint8Array | null /* ptr */,
  bVersion: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.GetVersionFromFileW(util.pwstrToFfi(lpszFilename), util.toPointer(pdwMSVer), util.toPointer(pdwLSVer), util.boolToFfi(bVersion)));
}

export function GetVersionFromFileExA(
  lpszFilename: string | null /* Windows.Win32.Foundation.PSTR */,
  pdwMSVer: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwLSVer: Deno.PointerValue | Uint8Array | null /* ptr */,
  bVersion: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.GetVersionFromFileExA(util.pstrToFfi(lpszFilename), util.toPointer(pdwMSVer), util.toPointer(pdwLSVer), util.boolToFfi(bVersion)));
}

export function GetVersionFromFileExW(
  lpszFilename: string | null /* Windows.Win32.Foundation.PWSTR */,
  pdwMSVer: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwLSVer: Deno.PointerValue | Uint8Array | null /* ptr */,
  bVersion: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.GetVersionFromFileExW(util.pwstrToFfi(lpszFilename), util.toPointer(pdwMSVer), util.toPointer(pdwLSVer), util.boolToFfi(bVersion)));
}

export function IsNTAdmin(
  dwReserved: number /* u32 */,
  lpdwReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVPACK.IsNTAdmin(dwReserved, util.toPointer(lpdwReserved)));
}

export function DelNodeA(
  pszFileOrDirName: string | null /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.DelNodeA(util.pstrToFfi(pszFileOrDirName), dwFlags));
}

export function DelNodeW(
  pszFileOrDirName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.DelNodeW(util.pwstrToFfi(pszFileOrDirName), dwFlags));
}

export function DelNodeRunDLL32W(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  hInstance: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  pszParms: string | null /* Windows.Win32.Foundation.PWSTR */,
  nShow: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.DelNodeRunDLL32W(util.hwndToFfi(hwnd), util.toPointer(hInstance), util.pwstrToFfi(pszParms), nShow));
}

export function OpenINFEngineA(
  pszInfFilename: string | null /* Windows.Win32.Foundation.PSTR */,
  pszInstallSection: string | null /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
  phInf: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.OpenINFEngineA(util.pstrToFfi(pszInfFilename), util.pstrToFfi(pszInstallSection), dwFlags, util.toPointer(phInf), util.toPointer(pvReserved)));
}

export function OpenINFEngineW(
  pszInfFilename: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszInstallSection: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  phInf: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.OpenINFEngineW(util.pwstrToFfi(pszInfFilename), util.pwstrToFfi(pszInstallSection), dwFlags, util.toPointer(phInf), util.toPointer(pvReserved)));
}

export function TranslateInfStringExA(
  hInf: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszInfFilename: string | null /* Windows.Win32.Foundation.PSTR */,
  pszTranslateSection: string | null /* Windows.Win32.Foundation.PSTR */,
  pszTranslateKey: string | null /* Windows.Win32.Foundation.PSTR */,
  pszBuffer: string | null /* Windows.Win32.Foundation.PSTR */,
  dwBufferSize: number /* u32 */,
  pdwRequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.TranslateInfStringExA(util.toPointer(hInf), util.pstrToFfi(pszInfFilename), util.pstrToFfi(pszTranslateSection), util.pstrToFfi(pszTranslateKey), util.pstrToFfi(pszBuffer), dwBufferSize, util.toPointer(pdwRequiredSize), util.toPointer(pvReserved)));
}

export function TranslateInfStringExW(
  hInf: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszInfFilename: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszTranslateSection: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszTranslateKey: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszBuffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwBufferSize: number /* u32 */,
  pdwRequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.TranslateInfStringExW(util.toPointer(hInf), util.pwstrToFfi(pszInfFilename), util.pwstrToFfi(pszTranslateSection), util.pwstrToFfi(pszTranslateKey), util.pwstrToFfi(pszBuffer), dwBufferSize, util.toPointer(pdwRequiredSize), util.toPointer(pvReserved)));
}

export function CloseINFEngine(
  hInf: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.CloseINFEngine(util.toPointer(hInf)));
}

export function ExtractFilesA(
  pszCabName: string | null /* Windows.Win32.Foundation.PSTR */,
  pszExpandDir: string | null /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
  pszFileList: string | null /* Windows.Win32.Foundation.PSTR */,
  lpReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReserved: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.ExtractFilesA(util.pstrToFfi(pszCabName), util.pstrToFfi(pszExpandDir), dwFlags, util.pstrToFfi(pszFileList), util.toPointer(lpReserved), dwReserved));
}

export function ExtractFilesW(
  pszCabName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszExpandDir: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  pszFileList: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReserved: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.ExtractFilesW(util.pwstrToFfi(pszCabName), util.pwstrToFfi(pszExpandDir), dwFlags, util.pwstrToFfi(pszFileList), util.toPointer(lpReserved), dwReserved));
}

export function LaunchINFSectionW(
  hwndOwner: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  hInstance: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  pszParams: string | null /* Windows.Win32.Foundation.PWSTR */,
  nShow: number /* i32 */,
): number /* i32 */ {
  return libADVPACK.LaunchINFSectionW(util.hwndToFfi(hwndOwner), util.toPointer(hInstance), util.pwstrToFfi(pszParams), nShow);
}

export function UserInstStubWrapperA(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  hInstance: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  pszParms: string | null /* Windows.Win32.Foundation.PSTR */,
  nShow: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.UserInstStubWrapperA(util.hwndToFfi(hwnd), util.toPointer(hInstance), util.pstrToFfi(pszParms), nShow));
}

export function UserInstStubWrapperW(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  hInstance: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  pszParms: string | null /* Windows.Win32.Foundation.PWSTR */,
  nShow: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.UserInstStubWrapperW(util.hwndToFfi(hwnd), util.toPointer(hInstance), util.pwstrToFfi(pszParms), nShow));
}

export function UserUnInstStubWrapperA(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  hInstance: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  pszParms: string | null /* Windows.Win32.Foundation.PSTR */,
  nShow: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.UserUnInstStubWrapperA(util.hwndToFfi(hwnd), util.toPointer(hInstance), util.pstrToFfi(pszParms), nShow));
}

export function UserUnInstStubWrapperW(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  hInstance: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  pszParms: string | null /* Windows.Win32.Foundation.PWSTR */,
  nShow: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.UserUnInstStubWrapperW(util.hwndToFfi(hwnd), util.toPointer(hInstance), util.pwstrToFfi(pszParms), nShow));
}

export function SetPerUserSecValuesA(
  pPerUser: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.SetPerUserSecValuesA(util.toPointer(pPerUser)));
}

export function SetPerUserSecValuesW(
  pPerUser: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libADVPACK.SetPerUserSecValuesW(util.toPointer(pPerUser)));
}

export function SendIMEMessageExA(
  param0: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  param1: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LPARAM */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.LRESULT */ {
  return util.pointerFromFfi(libUSER32.SendIMEMessageExA(util.hwndToFfi(param0), util.toPointer(param1)));
}

export function SendIMEMessageExW(
  param0: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  param1: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LPARAM */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.LRESULT */ {
  return util.pointerFromFfi(libUSER32.SendIMEMessageExW(util.hwndToFfi(param0), util.toPointer(param1)));
}

export function IMPGetIMEA(
  param0: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32.IMPGetIMEA(util.hwndToFfi(param0), util.toPointer(param1)));
}

export function IMPGetIMEW(
  param0: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32.IMPGetIMEW(util.hwndToFfi(param0), util.toPointer(param1)));
}

export function IMPQueryIMEA(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32.IMPQueryIMEA(util.toPointer(param0)));
}

export function IMPQueryIMEW(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32.IMPQueryIMEW(util.toPointer(param0)));
}

export function IMPSetIMEA(
  param0: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32.IMPSetIMEA(util.hwndToFfi(param0), util.toPointer(param1)));
}

export function IMPSetIMEW(
  param0: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32.IMPSetIMEW(util.hwndToFfi(param0), util.toPointer(param1)));
}

export function WINNLSGetIMEHotkey(
  param0: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): number /* u32 */ {
  return libUSER32.WINNLSGetIMEHotkey(util.hwndToFfi(param0));
}

export function WINNLSEnableIME(
  param0: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  param1: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32.WINNLSEnableIME(util.hwndToFfi(param0), util.boolToFfi(param1)));
}

export function WINNLSGetEnableStatus(
  param0: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32.WINNLSGetEnableStatus(util.hwndToFfi(param0)));
}

export function ApphelpCheckShellObject(
  ObjectCLSID: Deno.PointerValue | Uint8Array | null /* ptr */,
  bShimIfNecessary: boolean /* Windows.Win32.Foundation.BOOL */,
  pullFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAPPHELP.ApphelpCheckShellObject(util.toPointer(ObjectCLSID), util.boolToFfi(bShimIfNecessary), util.toPointer(pullFlags)));
}

export function WldpGetLockdownPolicy(
  hostInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  lockdownState: Deno.PointerValue | Uint8Array | null /* ptr */,
  lockdownFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWldp.WldpGetLockdownPolicy(util.toPointer(hostInformation), util.toPointer(lockdownState), lockdownFlags));
}

export function WldpIsClassInApprovedList(
  classID: Deno.PointerValue | Uint8Array | null /* ptr */,
  hostInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  isApproved: Deno.PointerValue | Uint8Array | null /* ptr */,
  optionalFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWldp.WldpIsClassInApprovedList(util.toPointer(classID), util.toPointer(hostInformation), util.toPointer(isApproved), optionalFlags));
}

export function WldpSetDynamicCodeTrust(
  fileHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWldp.WldpSetDynamicCodeTrust(util.toPointer(fileHandle)));
}

export function WldpIsDynamicCodePolicyEnabled(
  isEnabled: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWldp.WldpIsDynamicCodePolicyEnabled(util.toPointer(isEnabled)));
}

export function WldpQueryDynamicCodeTrust(
  fileHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  baseImage: Deno.PointerValue | Uint8Array | null /* ptr */,
  imageSize: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWldp.WldpQueryDynamicCodeTrust(util.toPointer(fileHandle), util.toPointer(baseImage), imageSize));
}

export function WldpQueryDeviceSecurityInformation(
  information: Deno.PointerValue | Uint8Array | null /* ptr */,
  informationLength: number /* u32 */,
  returnLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWldp.WldpQueryDeviceSecurityInformation(util.toPointer(information), informationLength, util.toPointer(returnLength)));
}

