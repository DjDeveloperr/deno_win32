/// Auto-generated by Deno Win32: Windows.Win32.System.PasswordManagement.Apis

import * as util from "../../util.ts";

// Structs

/**
 * Windows.Win32.System.PasswordManagement.CYPHER_BLOCK (size: 8)
 */
export interface CYPHER_BLOCK {
  /** array */
  data: Deno.PointerValue;
}

export const sizeofCYPHER_BLOCK = 8;

export function allocCYPHER_BLOCK(data?: Partial<CYPHER_BLOCK>): Uint8Array {
  const buf = new Uint8Array(sizeofCYPHER_BLOCK);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  return buf;
}

export class CYPHER_BLOCKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.PasswordManagement.LM_OWF_PASSWORD (size: 8)
 */
export interface LM_OWF_PASSWORD {
  /** array */
  data: Deno.PointerValue;
}

export const sizeofLM_OWF_PASSWORD = 8;

export function allocLM_OWF_PASSWORD(data?: Partial<LM_OWF_PASSWORD>): Uint8Array {
  const buf = new Uint8Array(sizeofLM_OWF_PASSWORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  return buf;
}

export class LM_OWF_PASSWORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.PasswordManagement.SAMPR_ENCRYPTED_USER_PASSWORD (size: 8)
 */
export interface SAMPR_ENCRYPTED_USER_PASSWORD {
  /** array */
  Buffer: Deno.PointerValue;
}

export const sizeofSAMPR_ENCRYPTED_USER_PASSWORD = 8;

export function allocSAMPR_ENCRYPTED_USER_PASSWORD(data?: Partial<SAMPR_ENCRYPTED_USER_PASSWORD>): Uint8Array {
  const buf = new Uint8Array(sizeofSAMPR_ENCRYPTED_USER_PASSWORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Buffer !== undefined) view.setBigUint64(0, data.Buffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Buffer))), true);
  return buf;
}

export class SAMPR_ENCRYPTED_USER_PASSWORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Buffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Buffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.PasswordManagement.ENCRYPTED_LM_OWF_PASSWORD (size: 8)
 */
export interface ENCRYPTED_LM_OWF_PASSWORD {
  /** array */
  data: Deno.PointerValue;
}

export const sizeofENCRYPTED_LM_OWF_PASSWORD = 8;

export function allocENCRYPTED_LM_OWF_PASSWORD(data?: Partial<ENCRYPTED_LM_OWF_PASSWORD>): Uint8Array {
  const buf = new Uint8Array(sizeofENCRYPTED_LM_OWF_PASSWORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  return buf;
}

export class ENCRYPTED_LM_OWF_PASSWORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type PWSTR = Deno.PointerValue | Uint8Array;

export type BOOLEAN = number;

// Native Libraries

try {
  var libADVAPI32_dll = Deno.dlopen("ADVAPI32.dll", {
    MSChapSrvChangePassword: {
      parameters: ["buffer", "buffer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    MSChapSrvChangePassword2: {
      parameters: ["buffer", "buffer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function MSChapSrvChangePassword(
  ServerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  UserName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  LmOldPresent: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */,
  LmOldOwfPassword: Deno.PointerValue | Uint8Array /* ptr */,
  LmNewOwfPassword: Deno.PointerValue | Uint8Array /* ptr */,
  NtOldOwfPassword: Deno.PointerValue | Uint8Array /* ptr */,
  NtNewOwfPassword: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libADVAPI32_dll.MSChapSrvChangePassword!(util.pwstrToFfi(ServerName), util.pwstrToFfi(UserName), util.toPointer(LmOldPresent), util.toPointer(LmOldOwfPassword), util.toPointer(LmNewOwfPassword), util.toPointer(NtOldOwfPassword), util.toPointer(NtNewOwfPassword));
}

export function MSChapSrvChangePassword2(
  ServerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  UserName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  NewPasswordEncryptedWithOldNt: Deno.PointerValue | Uint8Array /* ptr */,
  OldNtOwfPasswordEncryptedWithNewNt: Deno.PointerValue | Uint8Array /* ptr */,
  LmPresent: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */,
  NewPasswordEncryptedWithOldLm: Deno.PointerValue | Uint8Array /* ptr */,
  OldLmOwfPasswordEncryptedWithNewLmOrNt: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libADVAPI32_dll.MSChapSrvChangePassword2!(util.pwstrToFfi(ServerName), util.pwstrToFfi(UserName), util.toPointer(NewPasswordEncryptedWithOldNt), util.toPointer(OldNtOwfPasswordEncryptedWithNewNt), util.toPointer(LmPresent), util.toPointer(NewPasswordEncryptedWithOldLm), util.toPointer(OldLmOwfPasswordEncryptedWithNewLmOrNt));
}

