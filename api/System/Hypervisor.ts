/// Auto-generated by Deno Win32: Windows.Win32.System.Hypervisor.Apis

import * as util from "../../util.ts";

// Enums
export type WHV_CAPABILITY_CODE = number;
export type WHV_PROCESSOR_VENDOR = number;
export type WHV_PARTITION_PROPERTY_CODE = number;
export type WHV_MEMORY_ACCESS_TYPE = number;
export type WHV_X64_CPUID_RESULT2_FLAGS = number;
export type WHV_MSR_ACTION = number;
export type WHV_EXCEPTION_TYPE = number;
export type WHV_X64_LOCAL_APIC_EMULATION_MODE = number;
export type WHV_MAP_GPA_RANGE_FLAGS = number;
export type WHV_TRANSLATE_GVA_FLAGS = number;
export type WHV_TRANSLATE_GVA_RESULT_CODE = number;
export type WHV_CACHE_TYPE = number;
export type WHV_REGISTER_NAME = number;
export type WHV_X64_PENDING_EVENT_TYPE = number;
export type WHV_RUN_VP_EXIT_REASON = number;
export type WHV_X64_UNSUPPORTED_FEATURE_CODE = number;
export type WHV_RUN_VP_CANCEL_REASON = number;
export type WHV_X64_PENDING_INTERRUPTION_TYPE = number;
export type WHV_X64_APIC_WRITE_TYPE = number;
export type WHV_INTERRUPT_TYPE = number;
export type WHV_INTERRUPT_DESTINATION_MODE = number;
export type WHV_INTERRUPT_TRIGGER_MODE = number;
export type WHV_PARTITION_COUNTER_SET = number;
export type WHV_PROCESSOR_COUNTER_SET = number;
export type WHV_ADVISE_GPA_RANGE_CODE = number;
export type WHV_VIRTUAL_PROCESSOR_STATE_TYPE = number;
export type WHV_ALLOCATE_VPCI_RESOURCE_FLAGS = number;
export type WHV_VPCI_DEVICE_NOTIFICATION_TYPE = number;
export type WHV_CREATE_VPCI_DEVICE_FLAGS = number;
export type WHV_VPCI_DEVICE_PROPERTY_CODE = number;
export type WHV_VPCI_MMIO_RANGE_FLAGS = number;
export type WHV_VPCI_DEVICE_REGISTER_SPACE = number;
export type WHV_VPCI_INTERRUPT_TARGET_FLAGS = number;
export type WHV_TRIGGER_TYPE = number;
export type WHV_VIRTUAL_PROCESSOR_PROPERTY_CODE = number;
export type WHV_NOTIFICATION_PORT_TYPE = number;
export type WHV_NOTIFICATION_PORT_PROPERTY_CODE = number;
export type HDV_DEVICE_TYPE = number;
export type HDV_PCI_BAR_SELECTOR = number;
export type HDV_DOORBELL_FLAGS = number;
export type HDV_MMIO_MAPPING_FLAGS = number;
export type HDV_PCI_INTERFACE_VERSION = number;
export type PAGING_MODE = number;
export type VIRTUAL_PROCESSOR_ARCH = number;
export type VIRTUAL_PROCESSOR_VENDOR = number;
export type GUEST_OS_VENDOR = number;
export type GUEST_OS_MICROSOFT_IDS = number;
export type GUEST_OS_OPENSOURCE_IDS = number;
export type REGISTER_ID = number;
export type DEVICE_POWER_STATE = number;

// Constants
export const HVSOCKET_CONNECT_TIMEOUT = 1;
export const HVSOCKET_CONNECT_TIMEOUT_MAX = 300000;
export const HVSOCKET_CONTAINER_PASSTHRU = 2;
export const HVSOCKET_CONNECTED_SUSPEND = 4;
export const HV_PROTOCOL_RAW = 1;
export const HVSOCKET_ADDRESS_FLAG_PASSTHRU = 1;
export const WHV_PROCESSOR_FEATURES_BANKS_COUNT = 2;
export const WHV_SYNTHETIC_PROCESSOR_FEATURES_BANKS_COUNT = 1;
export const WHV_READ_WRITE_GPA_RANGE_MAX_SIZE = 16;
export const WHV_HYPERCALL_CONTEXT_MAX_XMM_REGISTERS = 6;
export const WHV_MAX_DEVICE_ID_SIZE_IN_CHARS = 200;
export const WHV_VPCI_TYPE0_BAR_COUNT = 6;
export const WHV_ANY_VP = 4294967295;
export const WHV_SYNIC_MESSAGE_SIZE = 256;
export const VM_GENCOUNTER_SYMBOLIC_LINK_NAME = `\VmGenerationCounter`;
export const IOCTL_VMGENCOUNTER_READ = 3325956;
export const HDV_PCI_BAR_COUNT = 6;
export const WHvCapabilityCodeHypervisorPresent = 0;
export const WHvCapabilityCodeFeatures = 1;
export const WHvCapabilityCodeExtendedVmExits = 2;
export const WHvCapabilityCodeExceptionExitBitmap = 3;
export const WHvCapabilityCodeX64MsrExitBitmap = 4;
export const WHvCapabilityCodeGpaRangePopulateFlags = 5;
export const WHvCapabilityCodeSchedulerFeatures = 6;
export const WHvCapabilityCodeProcessorVendor = 4096;
export const WHvCapabilityCodeProcessorFeatures = 4097;
export const WHvCapabilityCodeProcessorClFlushSize = 4098;
export const WHvCapabilityCodeProcessorXsaveFeatures = 4099;
export const WHvCapabilityCodeProcessorClockFrequency = 4100;
export const WHvCapabilityCodeInterruptClockFrequency = 4101;
export const WHvCapabilityCodeProcessorFeaturesBanks = 4102;
export const WHvCapabilityCodeProcessorFrequencyCap = 4103;
export const WHvCapabilityCodeSyntheticProcessorFeaturesBanks = 4104;
export const WHvCapabilityCodeProcessorPerfmonFeatures = 4105;
export const WHvProcessorVendorAmd = 0;
export const WHvProcessorVendorIntel = 1;
export const WHvProcessorVendorHygon = 2;
export const WHvPartitionPropertyCodeExtendedVmExits = 1;
export const WHvPartitionPropertyCodeExceptionExitBitmap = 2;
export const WHvPartitionPropertyCodeSeparateSecurityDomain = 3;
export const WHvPartitionPropertyCodeNestedVirtualization = 4;
export const WHvPartitionPropertyCodeX64MsrExitBitmap = 5;
export const WHvPartitionPropertyCodePrimaryNumaNode = 6;
export const WHvPartitionPropertyCodeCpuReserve = 7;
export const WHvPartitionPropertyCodeCpuCap = 8;
export const WHvPartitionPropertyCodeCpuWeight = 9;
export const WHvPartitionPropertyCodeCpuGroupId = 10;
export const WHvPartitionPropertyCodeProcessorFrequencyCap = 11;
export const WHvPartitionPropertyCodeAllowDeviceAssignment = 12;
export const WHvPartitionPropertyCodeDisableSmt = 13;
export const WHvPartitionPropertyCodeProcessorFeatures = 4097;
export const WHvPartitionPropertyCodeProcessorClFlushSize = 4098;
export const WHvPartitionPropertyCodeCpuidExitList = 4099;
export const WHvPartitionPropertyCodeCpuidResultList = 4100;
export const WHvPartitionPropertyCodeLocalApicEmulationMode = 4101;
export const WHvPartitionPropertyCodeProcessorXsaveFeatures = 4102;
export const WHvPartitionPropertyCodeProcessorClockFrequency = 4103;
export const WHvPartitionPropertyCodeInterruptClockFrequency = 4104;
export const WHvPartitionPropertyCodeApicRemoteReadSupport = 4105;
export const WHvPartitionPropertyCodeProcessorFeaturesBanks = 4106;
export const WHvPartitionPropertyCodeReferenceTime = 4107;
export const WHvPartitionPropertyCodeSyntheticProcessorFeaturesBanks = 4108;
export const WHvPartitionPropertyCodeCpuidResultList2 = 4109;
export const WHvPartitionPropertyCodeProcessorPerfmonFeatures = 4110;
export const WHvPartitionPropertyCodeMsrActionList = 4111;
export const WHvPartitionPropertyCodeUnimplementedMsrAction = 4112;
export const WHvPartitionPropertyCodeProcessorCount = 8191;
export const WHvMemoryAccessRead = 0;
export const WHvMemoryAccessWrite = 1;
export const WHvMemoryAccessExecute = 2;
export const WHvX64CpuidResult2FlagSubleafSpecific = 1;
export const WHvX64CpuidResult2FlagVpSpecific = 2;
export const WHvMsrActionArchitectureDefault = 0;
export const WHvMsrActionIgnoreWriteReadZero = 1;
export const WHvMsrActionExit = 2;
export const WHvX64ExceptionTypeDivideErrorFault = 0;
export const WHvX64ExceptionTypeDebugTrapOrFault = 1;
export const WHvX64ExceptionTypeBreakpointTrap = 3;
export const WHvX64ExceptionTypeOverflowTrap = 4;
export const WHvX64ExceptionTypeBoundRangeFault = 5;
export const WHvX64ExceptionTypeInvalidOpcodeFault = 6;
export const WHvX64ExceptionTypeDeviceNotAvailableFault = 7;
export const WHvX64ExceptionTypeDoubleFaultAbort = 8;
export const WHvX64ExceptionTypeInvalidTaskStateSegmentFault = 10;
export const WHvX64ExceptionTypeSegmentNotPresentFault = 11;
export const WHvX64ExceptionTypeStackFault = 12;
export const WHvX64ExceptionTypeGeneralProtectionFault = 13;
export const WHvX64ExceptionTypePageFault = 14;
export const WHvX64ExceptionTypeFloatingPointErrorFault = 16;
export const WHvX64ExceptionTypeAlignmentCheckFault = 17;
export const WHvX64ExceptionTypeMachineCheckAbort = 18;
export const WHvX64ExceptionTypeSimdFloatingPointFault = 19;
export const WHvX64LocalApicEmulationModeNone = 0;
export const WHvX64LocalApicEmulationModeXApic = 1;
export const WHvX64LocalApicEmulationModeX2Apic = 2;
export const WHvMapGpaRangeFlagNone = 0;
export const WHvMapGpaRangeFlagRead = 1;
export const WHvMapGpaRangeFlagWrite = 2;
export const WHvMapGpaRangeFlagExecute = 4;
export const WHvMapGpaRangeFlagTrackDirtyPages = 8;
export const WHvTranslateGvaFlagNone = 0;
export const WHvTranslateGvaFlagValidateRead = 1;
export const WHvTranslateGvaFlagValidateWrite = 2;
export const WHvTranslateGvaFlagValidateExecute = 4;
export const WHvTranslateGvaFlagPrivilegeExempt = 8;
export const WHvTranslateGvaFlagSetPageTableBits = 16;
export const WHvTranslateGvaFlagEnforceSmap = 256;
export const WHvTranslateGvaFlagOverrideSmap = 512;
export const WHvTranslateGvaResultSuccess = 0;
export const WHvTranslateGvaResultPageNotPresent = 1;
export const WHvTranslateGvaResultPrivilegeViolation = 2;
export const WHvTranslateGvaResultInvalidPageTableFlags = 3;
export const WHvTranslateGvaResultGpaUnmapped = 4;
export const WHvTranslateGvaResultGpaNoReadAccess = 5;
export const WHvTranslateGvaResultGpaNoWriteAccess = 6;
export const WHvTranslateGvaResultGpaIllegalOverlayAccess = 7;
export const WHvTranslateGvaResultIntercept = 8;
export const WHvCacheTypeUncached = 0;
export const WHvCacheTypeWriteCombining = 1;
export const WHvCacheTypeWriteThrough = 4;
export const WHvCacheTypeWriteBack = 6;
export const WHvX64RegisterRax = 0;
export const WHvX64RegisterRcx = 1;
export const WHvX64RegisterRdx = 2;
export const WHvX64RegisterRbx = 3;
export const WHvX64RegisterRsp = 4;
export const WHvX64RegisterRbp = 5;
export const WHvX64RegisterRsi = 6;
export const WHvX64RegisterRdi = 7;
export const WHvX64RegisterR8 = 8;
export const WHvX64RegisterR9 = 9;
export const WHvX64RegisterR10 = 10;
export const WHvX64RegisterR11 = 11;
export const WHvX64RegisterR12 = 12;
export const WHvX64RegisterR13 = 13;
export const WHvX64RegisterR14 = 14;
export const WHvX64RegisterR15 = 15;
export const WHvX64RegisterRip = 16;
export const WHvX64RegisterRflags = 17;
export const WHvX64RegisterEs = 18;
export const WHvX64RegisterCs = 19;
export const WHvX64RegisterSs = 20;
export const WHvX64RegisterDs = 21;
export const WHvX64RegisterFs = 22;
export const WHvX64RegisterGs = 23;
export const WHvX64RegisterLdtr = 24;
export const WHvX64RegisterTr = 25;
export const WHvX64RegisterIdtr = 26;
export const WHvX64RegisterGdtr = 27;
export const WHvX64RegisterCr0 = 28;
export const WHvX64RegisterCr2 = 29;
export const WHvX64RegisterCr3 = 30;
export const WHvX64RegisterCr4 = 31;
export const WHvX64RegisterCr8 = 32;
export const WHvX64RegisterDr0 = 33;
export const WHvX64RegisterDr1 = 34;
export const WHvX64RegisterDr2 = 35;
export const WHvX64RegisterDr3 = 36;
export const WHvX64RegisterDr6 = 37;
export const WHvX64RegisterDr7 = 38;
export const WHvX64RegisterXCr0 = 39;
export const WHvX64RegisterVirtualCr0 = 40;
export const WHvX64RegisterVirtualCr3 = 41;
export const WHvX64RegisterVirtualCr4 = 42;
export const WHvX64RegisterVirtualCr8 = 43;
export const WHvX64RegisterXmm0 = 4096;
export const WHvX64RegisterXmm1 = 4097;
export const WHvX64RegisterXmm2 = 4098;
export const WHvX64RegisterXmm3 = 4099;
export const WHvX64RegisterXmm4 = 4100;
export const WHvX64RegisterXmm5 = 4101;
export const WHvX64RegisterXmm6 = 4102;
export const WHvX64RegisterXmm7 = 4103;
export const WHvX64RegisterXmm8 = 4104;
export const WHvX64RegisterXmm9 = 4105;
export const WHvX64RegisterXmm10 = 4106;
export const WHvX64RegisterXmm11 = 4107;
export const WHvX64RegisterXmm12 = 4108;
export const WHvX64RegisterXmm13 = 4109;
export const WHvX64RegisterXmm14 = 4110;
export const WHvX64RegisterXmm15 = 4111;
export const WHvX64RegisterFpMmx0 = 4112;
export const WHvX64RegisterFpMmx1 = 4113;
export const WHvX64RegisterFpMmx2 = 4114;
export const WHvX64RegisterFpMmx3 = 4115;
export const WHvX64RegisterFpMmx4 = 4116;
export const WHvX64RegisterFpMmx5 = 4117;
export const WHvX64RegisterFpMmx6 = 4118;
export const WHvX64RegisterFpMmx7 = 4119;
export const WHvX64RegisterFpControlStatus = 4120;
export const WHvX64RegisterXmmControlStatus = 4121;
export const WHvX64RegisterTsc = 8192;
export const WHvX64RegisterEfer = 8193;
export const WHvX64RegisterKernelGsBase = 8194;
export const WHvX64RegisterApicBase = 8195;
export const WHvX64RegisterPat = 8196;
export const WHvX64RegisterSysenterCs = 8197;
export const WHvX64RegisterSysenterEip = 8198;
export const WHvX64RegisterSysenterEsp = 8199;
export const WHvX64RegisterStar = 8200;
export const WHvX64RegisterLstar = 8201;
export const WHvX64RegisterCstar = 8202;
export const WHvX64RegisterSfmask = 8203;
export const WHvX64RegisterInitialApicId = 8204;
export const WHvX64RegisterMsrMtrrCap = 8205;
export const WHvX64RegisterMsrMtrrDefType = 8206;
export const WHvX64RegisterMsrMtrrPhysBase0 = 8208;
export const WHvX64RegisterMsrMtrrPhysBase1 = 8209;
export const WHvX64RegisterMsrMtrrPhysBase2 = 8210;
export const WHvX64RegisterMsrMtrrPhysBase3 = 8211;
export const WHvX64RegisterMsrMtrrPhysBase4 = 8212;
export const WHvX64RegisterMsrMtrrPhysBase5 = 8213;
export const WHvX64RegisterMsrMtrrPhysBase6 = 8214;
export const WHvX64RegisterMsrMtrrPhysBase7 = 8215;
export const WHvX64RegisterMsrMtrrPhysBase8 = 8216;
export const WHvX64RegisterMsrMtrrPhysBase9 = 8217;
export const WHvX64RegisterMsrMtrrPhysBaseA = 8218;
export const WHvX64RegisterMsrMtrrPhysBaseB = 8219;
export const WHvX64RegisterMsrMtrrPhysBaseC = 8220;
export const WHvX64RegisterMsrMtrrPhysBaseD = 8221;
export const WHvX64RegisterMsrMtrrPhysBaseE = 8222;
export const WHvX64RegisterMsrMtrrPhysBaseF = 8223;
export const WHvX64RegisterMsrMtrrPhysMask0 = 8256;
export const WHvX64RegisterMsrMtrrPhysMask1 = 8257;
export const WHvX64RegisterMsrMtrrPhysMask2 = 8258;
export const WHvX64RegisterMsrMtrrPhysMask3 = 8259;
export const WHvX64RegisterMsrMtrrPhysMask4 = 8260;
export const WHvX64RegisterMsrMtrrPhysMask5 = 8261;
export const WHvX64RegisterMsrMtrrPhysMask6 = 8262;
export const WHvX64RegisterMsrMtrrPhysMask7 = 8263;
export const WHvX64RegisterMsrMtrrPhysMask8 = 8264;
export const WHvX64RegisterMsrMtrrPhysMask9 = 8265;
export const WHvX64RegisterMsrMtrrPhysMaskA = 8266;
export const WHvX64RegisterMsrMtrrPhysMaskB = 8267;
export const WHvX64RegisterMsrMtrrPhysMaskC = 8268;
export const WHvX64RegisterMsrMtrrPhysMaskD = 8269;
export const WHvX64RegisterMsrMtrrPhysMaskE = 8270;
export const WHvX64RegisterMsrMtrrPhysMaskF = 8271;
export const WHvX64RegisterMsrMtrrFix64k00000 = 8304;
export const WHvX64RegisterMsrMtrrFix16k80000 = 8305;
export const WHvX64RegisterMsrMtrrFix16kA0000 = 8306;
export const WHvX64RegisterMsrMtrrFix4kC0000 = 8307;
export const WHvX64RegisterMsrMtrrFix4kC8000 = 8308;
export const WHvX64RegisterMsrMtrrFix4kD0000 = 8309;
export const WHvX64RegisterMsrMtrrFix4kD8000 = 8310;
export const WHvX64RegisterMsrMtrrFix4kE0000 = 8311;
export const WHvX64RegisterMsrMtrrFix4kE8000 = 8312;
export const WHvX64RegisterMsrMtrrFix4kF0000 = 8313;
export const WHvX64RegisterMsrMtrrFix4kF8000 = 8314;
export const WHvX64RegisterTscAux = 8315;
export const WHvX64RegisterBndcfgs = 8316;
export const WHvX64RegisterMCount = 8318;
export const WHvX64RegisterACount = 8319;
export const WHvX64RegisterSpecCtrl = 8324;
export const WHvX64RegisterPredCmd = 8325;
export const WHvX64RegisterTscVirtualOffset = 8327;
export const WHvX64RegisterTsxCtrl = 8328;
export const WHvX64RegisterXss = 8331;
export const WHvX64RegisterUCet = 8332;
export const WHvX64RegisterSCet = 8333;
export const WHvX64RegisterSsp = 8334;
export const WHvX64RegisterPl0Ssp = 8335;
export const WHvX64RegisterPl1Ssp = 8336;
export const WHvX64RegisterPl2Ssp = 8337;
export const WHvX64RegisterPl3Ssp = 8338;
export const WHvX64RegisterInterruptSspTableAddr = 8339;
export const WHvX64RegisterTscDeadline = 8341;
export const WHvX64RegisterTscAdjust = 8342;
export const WHvX64RegisterUmwaitControl = 8344;
export const WHvX64RegisterXfd = 8345;
export const WHvX64RegisterXfdErr = 8346;
export const WHvX64RegisterApicId = 12290;
export const WHvX64RegisterApicVersion = 12291;
export const WHvX64RegisterApicTpr = 12296;
export const WHvX64RegisterApicPpr = 12298;
export const WHvX64RegisterApicEoi = 12299;
export const WHvX64RegisterApicLdr = 12301;
export const WHvX64RegisterApicSpurious = 12303;
export const WHvX64RegisterApicIsr0 = 12304;
export const WHvX64RegisterApicIsr1 = 12305;
export const WHvX64RegisterApicIsr2 = 12306;
export const WHvX64RegisterApicIsr3 = 12307;
export const WHvX64RegisterApicIsr4 = 12308;
export const WHvX64RegisterApicIsr5 = 12309;
export const WHvX64RegisterApicIsr6 = 12310;
export const WHvX64RegisterApicIsr7 = 12311;
export const WHvX64RegisterApicTmr0 = 12312;
export const WHvX64RegisterApicTmr1 = 12313;
export const WHvX64RegisterApicTmr2 = 12314;
export const WHvX64RegisterApicTmr3 = 12315;
export const WHvX64RegisterApicTmr4 = 12316;
export const WHvX64RegisterApicTmr5 = 12317;
export const WHvX64RegisterApicTmr6 = 12318;
export const WHvX64RegisterApicTmr7 = 12319;
export const WHvX64RegisterApicIrr0 = 12320;
export const WHvX64RegisterApicIrr1 = 12321;
export const WHvX64RegisterApicIrr2 = 12322;
export const WHvX64RegisterApicIrr3 = 12323;
export const WHvX64RegisterApicIrr4 = 12324;
export const WHvX64RegisterApicIrr5 = 12325;
export const WHvX64RegisterApicIrr6 = 12326;
export const WHvX64RegisterApicIrr7 = 12327;
export const WHvX64RegisterApicEse = 12328;
export const WHvX64RegisterApicIcr = 12336;
export const WHvX64RegisterApicLvtTimer = 12338;
export const WHvX64RegisterApicLvtThermal = 12339;
export const WHvX64RegisterApicLvtPerfmon = 12340;
export const WHvX64RegisterApicLvtLint0 = 12341;
export const WHvX64RegisterApicLvtLint1 = 12342;
export const WHvX64RegisterApicLvtError = 12343;
export const WHvX64RegisterApicInitCount = 12344;
export const WHvX64RegisterApicCurrentCount = 12345;
export const WHvX64RegisterApicDivide = 12350;
export const WHvX64RegisterApicSelfIpi = 12351;
export const WHvRegisterSint0 = 16384;
export const WHvRegisterSint1 = 16385;
export const WHvRegisterSint2 = 16386;
export const WHvRegisterSint3 = 16387;
export const WHvRegisterSint4 = 16388;
export const WHvRegisterSint5 = 16389;
export const WHvRegisterSint6 = 16390;
export const WHvRegisterSint7 = 16391;
export const WHvRegisterSint8 = 16392;
export const WHvRegisterSint9 = 16393;
export const WHvRegisterSint10 = 16394;
export const WHvRegisterSint11 = 16395;
export const WHvRegisterSint12 = 16396;
export const WHvRegisterSint13 = 16397;
export const WHvRegisterSint14 = 16398;
export const WHvRegisterSint15 = 16399;
export const WHvRegisterScontrol = 16400;
export const WHvRegisterSversion = 16401;
export const WHvRegisterSiefp = 16402;
export const WHvRegisterSimp = 16403;
export const WHvRegisterEom = 16404;
export const WHvRegisterVpRuntime = 20480;
export const WHvX64RegisterHypercall = 20481;
export const WHvRegisterGuestOsId = 20482;
export const WHvRegisterVpAssistPage = 20499;
export const WHvRegisterReferenceTsc = 20503;
export const WHvRegisterReferenceTscSequence = 20506;
export const WHvRegisterPendingInterruption = `-2147483648`;
export const WHvRegisterInterruptState = `-2147483647`;
export const WHvRegisterPendingEvent = `-2147483646`;
export const WHvX64RegisterDeliverabilityNotifications = `-2147483644`;
export const WHvRegisterInternalActivityState = `-2147483643`;
export const WHvX64RegisterPendingDebugException = `-2147483642`;
export const WHvX64PendingEventException = 0;
export const WHvX64PendingEventExtInt = 5;
export const WHvRunVpExitReasonNone = 0;
export const WHvRunVpExitReasonMemoryAccess = 1;
export const WHvRunVpExitReasonX64IoPortAccess = 2;
export const WHvRunVpExitReasonUnrecoverableException = 4;
export const WHvRunVpExitReasonInvalidVpRegisterValue = 5;
export const WHvRunVpExitReasonUnsupportedFeature = 6;
export const WHvRunVpExitReasonX64InterruptWindow = 7;
export const WHvRunVpExitReasonX64Halt = 8;
export const WHvRunVpExitReasonX64ApicEoi = 9;
export const WHvRunVpExitReasonSynicSintDeliverable = 10;
export const WHvRunVpExitReasonX64MsrAccess = 4096;
export const WHvRunVpExitReasonX64Cpuid = 4097;
export const WHvRunVpExitReasonException = 4098;
export const WHvRunVpExitReasonX64Rdtsc = 4099;
export const WHvRunVpExitReasonX64ApicSmiTrap = 4100;
export const WHvRunVpExitReasonHypercall = 4101;
export const WHvRunVpExitReasonX64ApicInitSipiTrap = 4102;
export const WHvRunVpExitReasonX64ApicWriteTrap = 4103;
export const WHvRunVpExitReasonCanceled = 8193;
export const WHvUnsupportedFeatureIntercept = 1;
export const WHvUnsupportedFeatureTaskSwitchTss = 2;
export const WHvRunVpCancelReasonUser = 0;
export const WHvX64PendingInterrupt = 0;
export const WHvX64PendingNmi = 2;
export const WHvX64PendingException = 3;
export const WHvX64ApicWriteTypeLdr = 208;
export const WHvX64ApicWriteTypeDfr = 224;
export const WHvX64ApicWriteTypeSvr = 240;
export const WHvX64ApicWriteTypeLint0 = 848;
export const WHvX64ApicWriteTypeLint1 = 864;
export const WHvX64InterruptTypeFixed = 0;
export const WHvX64InterruptTypeLowestPriority = 1;
export const WHvX64InterruptTypeNmi = 4;
export const WHvX64InterruptTypeInit = 5;
export const WHvX64InterruptTypeSipi = 6;
export const WHvX64InterruptTypeLocalInt1 = 9;
export const WHvX64InterruptDestinationModePhysical = 0;
export const WHvX64InterruptDestinationModeLogical = 1;
export const WHvX64InterruptTriggerModeEdge = 0;
export const WHvX64InterruptTriggerModeLevel = 1;
export const WHvPartitionCounterSetMemory = 0;
export const WHvProcessorCounterSetRuntime = 0;
export const WHvProcessorCounterSetIntercepts = 1;
export const WHvProcessorCounterSetEvents = 2;
export const WHvProcessorCounterSetApic = 3;
export const WHvProcessorCounterSetSyntheticFeatures = 4;
export const WHvAdviseGpaRangeCodePopulate = 0;
export const WHvAdviseGpaRangeCodePin = 1;
export const WHvAdviseGpaRangeCodeUnpin = 2;
export const WHvVirtualProcessorStateTypeSynicMessagePage = 0;
export const WHvVirtualProcessorStateTypeSynicEventFlagPage = 1;
export const WHvVirtualProcessorStateTypeSynicTimerState = 2;
export const WHvVirtualProcessorStateTypeInterruptControllerState2 = 4096;
export const WHvVirtualProcessorStateTypeXsaveState = 4097;
export const WHvAllocateVpciResourceFlagNone = 0;
export const WHvAllocateVpciResourceFlagAllowDirectP2P = 1;
export const WHvVpciDeviceNotificationUndefined = 0;
export const WHvVpciDeviceNotificationMmioRemapping = 1;
export const WHvVpciDeviceNotificationSurpriseRemoval = 2;
export const WHvCreateVpciDeviceFlagNone = 0;
export const WHvCreateVpciDeviceFlagPhysicallyBacked = 1;
export const WHvCreateVpciDeviceFlagUseLogicalInterrupts = 2;
export const WHvVpciDevicePropertyCodeUndefined = 0;
export const WHvVpciDevicePropertyCodeHardwareIDs = 1;
export const WHvVpciDevicePropertyCodeProbedBARs = 2;
export const WHvVpciMmioRangeFlagReadAccess = 1;
export const WHvVpciMmioRangeFlagWriteAccess = 2;
export const WHvVpciConfigSpace = `-1`;
export const WHvVpciBar0 = 0;
export const WHvVpciBar1 = 1;
export const WHvVpciBar2 = 2;
export const WHvVpciBar3 = 3;
export const WHvVpciBar4 = 4;
export const WHvVpciBar5 = 5;
export const WHvVpciInterruptTargetFlagNone = 0;
export const WHvVpciInterruptTargetFlagMulticast = 1;
export const WHvTriggerTypeInterrupt = 0;
export const WHvTriggerTypeSynicEvent = 1;
export const WHvTriggerTypeDeviceInterrupt = 2;
export const WHvVirtualProcessorPropertyCodeNumaNode = 0;
export const WHvNotificationPortTypeEvent = 2;
export const WHvNotificationPortTypeDoorbell = 4;
export const WHvNotificationPortPropertyPreferredTargetVp = 1;
export const WHvNotificationPortPropertyPreferredTargetDuration = 5;
export const HdvDeviceTypeUndefined = 0;
export const HdvDeviceTypePCI = 1;
export const HDV_PCI_BAR0 = 0;
export const HDV_PCI_BAR1 = 1;
export const HDV_PCI_BAR2 = 2;
export const HDV_PCI_BAR3 = 3;
export const HDV_PCI_BAR4 = 4;
export const HDV_PCI_BAR5 = 5;
export const HDV_DOORBELL_FLAG_TRIGGER_SIZE_ANY = 0;
export const HDV_DOORBELL_FLAG_TRIGGER_SIZE_BYTE = 1;
export const HDV_DOORBELL_FLAG_TRIGGER_SIZE_WORD = 2;
export const HDV_DOORBELL_FLAG_TRIGGER_SIZE_DWORD = 3;
export const HDV_DOORBELL_FLAG_TRIGGER_SIZE_QWORD = 4;
export const HDV_DOORBELL_FLAG_TRIGGER_ANY_VALUE = `-2147483648`;
export const HdvMmioMappingFlagNone = 0;
export const HdvMmioMappingFlagWriteable = 1;
export const HdvMmioMappingFlagExecutable = 2;
export const HdvPciDeviceInterfaceVersionInvalid = 0;
export const HdvPciDeviceInterfaceVersion1 = 1;
export const Paging_Invalid = 0;
export const Paging_NonPaged = 1;
export const Paging_32Bit = 2;
export const Paging_Pae = 3;
export const Paging_Long = 4;
export const Paging_Armv8 = 5;
export const Arch_Unknown = 0;
export const Arch_x86 = 1;
export const Arch_x64 = 2;
export const Arch_Armv8 = 3;
export const ProcessorVendor_Unknown = 0;
export const ProcessorVendor_Amd = 1;
export const ProcessorVendor_Intel = 2;
export const ProcessorVendor_Hygon = 3;
export const ProcessorVendor_Arm = 4;
export const GuestOsVendorUndefined = 0;
export const GuestOsVendorMicrosoft = 1;
export const GuestOsVendorHPE = 2;
export const GuestOsVendorLANCOM = 512;
export const GuestOsMicrosoftUndefined = 0;
export const GuestOsMicrosoftMSDOS = 1;
export const GuestOsMicrosoftWindows3x = 2;
export const GuestOsMicrosoftWindows9x = 3;
export const GuestOsMicrosoftWindowsNT = 4;
export const GuestOsMicrosoftWindowsCE = 5;
export const GuestOsOpenSourceUndefined = 0;
export const GuestOsOpenSourceLinux = 1;
export const GuestOsOpenSourceFreeBSD = 2;
export const GuestOsOpenSourceXen = 3;
export const GuestOsOpenSourceIllumos = 4;
export const X64_RegisterRax = 0;
export const X64_RegisterRcx = 1;
export const X64_RegisterRdx = 2;
export const X64_RegisterRbx = 3;
export const X64_RegisterRsp = 4;
export const X64_RegisterRbp = 5;
export const X64_RegisterRsi = 6;
export const X64_RegisterRdi = 7;
export const X64_RegisterR8 = 8;
export const X64_RegisterR9 = 9;
export const X64_RegisterR10 = 10;
export const X64_RegisterR11 = 11;
export const X64_RegisterR12 = 12;
export const X64_RegisterR13 = 13;
export const X64_RegisterR14 = 14;
export const X64_RegisterR15 = 15;
export const X64_RegisterRip = 16;
export const X64_RegisterRFlags = 17;
export const X64_RegisterXmm0 = 18;
export const X64_RegisterXmm1 = 19;
export const X64_RegisterXmm2 = 20;
export const X64_RegisterXmm3 = 21;
export const X64_RegisterXmm4 = 22;
export const X64_RegisterXmm5 = 23;
export const X64_RegisterXmm6 = 24;
export const X64_RegisterXmm7 = 25;
export const X64_RegisterXmm8 = 26;
export const X64_RegisterXmm9 = 27;
export const X64_RegisterXmm10 = 28;
export const X64_RegisterXmm11 = 29;
export const X64_RegisterXmm12 = 30;
export const X64_RegisterXmm13 = 31;
export const X64_RegisterXmm14 = 32;
export const X64_RegisterXmm15 = 33;
export const X64_RegisterFpMmx0 = 34;
export const X64_RegisterFpMmx1 = 35;
export const X64_RegisterFpMmx2 = 36;
export const X64_RegisterFpMmx3 = 37;
export const X64_RegisterFpMmx4 = 38;
export const X64_RegisterFpMmx5 = 39;
export const X64_RegisterFpMmx6 = 40;
export const X64_RegisterFpMmx7 = 41;
export const X64_RegisterFpControlStatus = 42;
export const X64_RegisterXmmControlStatus = 43;
export const X64_RegisterCr0 = 44;
export const X64_RegisterCr2 = 45;
export const X64_RegisterCr3 = 46;
export const X64_RegisterCr4 = 47;
export const X64_RegisterCr8 = 48;
export const X64_RegisterEfer = 49;
export const X64_RegisterDr0 = 50;
export const X64_RegisterDr1 = 51;
export const X64_RegisterDr2 = 52;
export const X64_RegisterDr3 = 53;
export const X64_RegisterDr6 = 54;
export const X64_RegisterDr7 = 55;
export const X64_RegisterEs = 56;
export const X64_RegisterCs = 57;
export const X64_RegisterSs = 58;
export const X64_RegisterDs = 59;
export const X64_RegisterFs = 60;
export const X64_RegisterGs = 61;
export const X64_RegisterLdtr = 62;
export const X64_RegisterTr = 63;
export const X64_RegisterIdtr = 64;
export const X64_RegisterGdtr = 65;
export const X64_RegisterMax = 66;
export const ARM64_RegisterX0 = 67;
export const ARM64_RegisterX1 = 68;
export const ARM64_RegisterX2 = 69;
export const ARM64_RegisterX3 = 70;
export const ARM64_RegisterX4 = 71;
export const ARM64_RegisterX5 = 72;
export const ARM64_RegisterX6 = 73;
export const ARM64_RegisterX7 = 74;
export const ARM64_RegisterX8 = 75;
export const ARM64_RegisterX9 = 76;
export const ARM64_RegisterX10 = 77;
export const ARM64_RegisterX11 = 78;
export const ARM64_RegisterX12 = 79;
export const ARM64_RegisterX13 = 80;
export const ARM64_RegisterX14 = 81;
export const ARM64_RegisterX15 = 82;
export const ARM64_RegisterX16 = 83;
export const ARM64_RegisterX17 = 84;
export const ARM64_RegisterX18 = 85;
export const ARM64_RegisterX19 = 86;
export const ARM64_RegisterX20 = 87;
export const ARM64_RegisterX21 = 88;
export const ARM64_RegisterX22 = 89;
export const ARM64_RegisterX23 = 90;
export const ARM64_RegisterX24 = 91;
export const ARM64_RegisterX25 = 92;
export const ARM64_RegisterX26 = 93;
export const ARM64_RegisterX27 = 94;
export const ARM64_RegisterX28 = 95;
export const ARM64_RegisterXFp = 96;
export const ARM64_RegisterXLr = 97;
export const ARM64_RegisterPc = 98;
export const ARM64_RegisterSpEl0 = 99;
export const ARM64_RegisterSpEl1 = 100;
export const ARM64_RegisterCpsr = 101;
export const ARM64_RegisterQ0 = 102;
export const ARM64_RegisterQ1 = 103;
export const ARM64_RegisterQ2 = 104;
export const ARM64_RegisterQ3 = 105;
export const ARM64_RegisterQ4 = 106;
export const ARM64_RegisterQ5 = 107;
export const ARM64_RegisterQ6 = 108;
export const ARM64_RegisterQ7 = 109;
export const ARM64_RegisterQ8 = 110;
export const ARM64_RegisterQ9 = 111;
export const ARM64_RegisterQ10 = 112;
export const ARM64_RegisterQ11 = 113;
export const ARM64_RegisterQ12 = 114;
export const ARM64_RegisterQ13 = 115;
export const ARM64_RegisterQ14 = 116;
export const ARM64_RegisterQ15 = 117;
export const ARM64_RegisterQ16 = 118;
export const ARM64_RegisterQ17 = 119;
export const ARM64_RegisterQ18 = 120;
export const ARM64_RegisterQ19 = 121;
export const ARM64_RegisterQ20 = 122;
export const ARM64_RegisterQ21 = 123;
export const ARM64_RegisterQ22 = 124;
export const ARM64_RegisterQ23 = 125;
export const ARM64_RegisterQ24 = 126;
export const ARM64_RegisterQ25 = 127;
export const ARM64_RegisterQ26 = 128;
export const ARM64_RegisterQ27 = 129;
export const ARM64_RegisterQ28 = 130;
export const ARM64_RegisterQ29 = 131;
export const ARM64_RegisterQ30 = 132;
export const ARM64_RegisterQ31 = 133;
export const ARM64_RegisterFpStatus = 134;
export const ARM64_RegisterFpControl = 135;
export const ARM64_RegisterEsrEl1 = 136;
export const ARM64_RegisterSpsrEl1 = 137;
export const ARM64_RegisterFarEl1 = 138;
export const ARM64_RegisterParEl1 = 139;
export const ARM64_RegisterElrEl1 = 140;
export const ARM64_RegisterTtbr0El1 = 141;
export const ARM64_RegisterTtbr1El1 = 142;
export const ARM64_RegisterVbarEl1 = 143;
export const ARM64_RegisterSctlrEl1 = 144;
export const ARM64_RegisterActlrEl1 = 145;
export const ARM64_RegisterTcrEl1 = 146;
export const ARM64_RegisterMairEl1 = 147;
export const ARM64_RegisterAmairEl1 = 148;
export const ARM64_RegisterTpidrEl0 = 149;
export const ARM64_RegisterTpidrroEl0 = 150;
export const ARM64_RegisterTpidrEl1 = 151;
export const ARM64_RegisterContextIdrEl1 = 152;
export const ARM64_RegisterCpacrEl1 = 153;
export const ARM64_RegisterCsselrEl1 = 154;
export const ARM64_RegisterCntkctlEl1 = 155;
export const ARM64_RegisterCntvCvalEl0 = 156;
export const ARM64_RegisterCntvCtlEl0 = 157;
export const ARM64_RegisterMax = 158;
export const PowerDeviceUnspecified = 0;
export const PowerDeviceD0 = 1;
export const PowerDeviceD1 = 2;
export const PowerDeviceD2 = 3;
export const PowerDeviceD3 = 4;
export const PowerDeviceMaximum = 5;

// Structs

export type WHV_PARTITION_HANDLE = Deno.PointerValue;

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_CAPABILITY_FEATURES (size: 16)
 */
export interface WHV_CAPABILITY_FEATURES {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  AsUINT64: Deno.PointerValue;
}

export const sizeofWHV_CAPABILITY_FEATURES = 16;

export function allocWHV_CAPABILITY_FEATURES(data?: Partial<WHV_CAPABILITY_FEATURES>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_CAPABILITY_FEATURES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u64
  if (data?.AsUINT64 !== undefined) view.setBigUint64(8, BigInt(data.AsUINT64), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_EXTENDED_VM_EXITS (size: 16)
 */
export interface WHV_EXTENDED_VM_EXITS {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  AsUINT64: Deno.PointerValue;
}

export const sizeofWHV_EXTENDED_VM_EXITS = 16;

export function allocWHV_EXTENDED_VM_EXITS(data?: Partial<WHV_EXTENDED_VM_EXITS>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_EXTENDED_VM_EXITS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u64
  if (data?.AsUINT64 !== undefined) view.setBigUint64(8, BigInt(data.AsUINT64), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_PROCESSOR_FEATURES (size: 16)
 */
export interface WHV_PROCESSOR_FEATURES {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  AsUINT64: Deno.PointerValue;
}

export const sizeofWHV_PROCESSOR_FEATURES = 16;

export function allocWHV_PROCESSOR_FEATURES(data?: Partial<WHV_PROCESSOR_FEATURES>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_PROCESSOR_FEATURES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u64
  if (data?.AsUINT64 !== undefined) view.setBigUint64(8, BigInt(data.AsUINT64), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_PROCESSOR_FEATURES1 (size: 16)
 */
export interface WHV_PROCESSOR_FEATURES1 {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  AsUINT64: Deno.PointerValue;
}

export const sizeofWHV_PROCESSOR_FEATURES1 = 16;

export function allocWHV_PROCESSOR_FEATURES1(data?: Partial<WHV_PROCESSOR_FEATURES1>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_PROCESSOR_FEATURES1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u64
  if (data?.AsUINT64 !== undefined) view.setBigUint64(8, BigInt(data.AsUINT64), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_PROCESSOR_FEATURES_BANKS (size: 16)
 */
export interface WHV_PROCESSOR_FEATURES_BANKS {
  /** u32 */
  BanksCount: number;
  /** u32 */
  Reserved0: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWHV_PROCESSOR_FEATURES_BANKS = 16;

export function allocWHV_PROCESSOR_FEATURES_BANKS(data?: Partial<WHV_PROCESSOR_FEATURES_BANKS>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_PROCESSOR_FEATURES_BANKS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BanksCount !== undefined) view.setUint32(0, Number(data.BanksCount), true);
  // 0x04: u32
  if (data?.Reserved0 !== undefined) view.setUint32(4, Number(data.Reserved0), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_SYNTHETIC_PROCESSOR_FEATURES (size: 16)
 */
export interface WHV_SYNTHETIC_PROCESSOR_FEATURES {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  AsUINT64: Deno.PointerValue;
}

export const sizeofWHV_SYNTHETIC_PROCESSOR_FEATURES = 16;

export function allocWHV_SYNTHETIC_PROCESSOR_FEATURES(data?: Partial<WHV_SYNTHETIC_PROCESSOR_FEATURES>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_SYNTHETIC_PROCESSOR_FEATURES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u64
  if (data?.AsUINT64 !== undefined) view.setBigUint64(8, BigInt(data.AsUINT64), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_SYNTHETIC_PROCESSOR_FEATURES_BANKS (size: 16)
 */
export interface WHV_SYNTHETIC_PROCESSOR_FEATURES_BANKS {
  /** u32 */
  BanksCount: number;
  /** u32 */
  Reserved0: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWHV_SYNTHETIC_PROCESSOR_FEATURES_BANKS = 16;

export function allocWHV_SYNTHETIC_PROCESSOR_FEATURES_BANKS(data?: Partial<WHV_SYNTHETIC_PROCESSOR_FEATURES_BANKS>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_SYNTHETIC_PROCESSOR_FEATURES_BANKS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BanksCount !== undefined) view.setUint32(0, Number(data.BanksCount), true);
  // 0x04: u32
  if (data?.Reserved0 !== undefined) view.setUint32(4, Number(data.Reserved0), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_PROCESSOR_XSAVE_FEATURES (size: 16)
 */
export interface WHV_PROCESSOR_XSAVE_FEATURES {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  AsUINT64: Deno.PointerValue;
}

export const sizeofWHV_PROCESSOR_XSAVE_FEATURES = 16;

export function allocWHV_PROCESSOR_XSAVE_FEATURES(data?: Partial<WHV_PROCESSOR_XSAVE_FEATURES>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_PROCESSOR_XSAVE_FEATURES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u64
  if (data?.AsUINT64 !== undefined) view.setBigUint64(8, BigInt(data.AsUINT64), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_PROCESSOR_PERFMON_FEATURES (size: 16)
 */
export interface WHV_PROCESSOR_PERFMON_FEATURES {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  AsUINT64: Deno.PointerValue;
}

export const sizeofWHV_PROCESSOR_PERFMON_FEATURES = 16;

export function allocWHV_PROCESSOR_PERFMON_FEATURES(data?: Partial<WHV_PROCESSOR_PERFMON_FEATURES>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_PROCESSOR_PERFMON_FEATURES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u64
  if (data?.AsUINT64 !== undefined) view.setBigUint64(8, BigInt(data.AsUINT64), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_X64_MSR_EXIT_BITMAP (size: 16)
 */
export interface WHV_X64_MSR_EXIT_BITMAP {
  /** u64 */
  AsUINT64: Deno.PointerValue;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWHV_X64_MSR_EXIT_BITMAP = 16;

export function allocWHV_X64_MSR_EXIT_BITMAP(data?: Partial<WHV_X64_MSR_EXIT_BITMAP>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_X64_MSR_EXIT_BITMAP);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.AsUINT64 !== undefined) view.setBigUint64(0, BigInt(data.AsUINT64), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_MEMORY_RANGE_ENTRY (size: 16)
 */
export interface WHV_MEMORY_RANGE_ENTRY {
  /** u64 */
  GuestAddress: Deno.PointerValue;
  /** u64 */
  SizeInBytes: Deno.PointerValue;
}

export const sizeofWHV_MEMORY_RANGE_ENTRY = 16;

export function allocWHV_MEMORY_RANGE_ENTRY(data?: Partial<WHV_MEMORY_RANGE_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_MEMORY_RANGE_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.GuestAddress !== undefined) view.setBigUint64(0, BigInt(data.GuestAddress), true);
  // 0x08: u64
  if (data?.SizeInBytes !== undefined) view.setBigUint64(8, BigInt(data.SizeInBytes), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_ADVISE_GPA_RANGE_POPULATE_FLAGS (size: 16)
 */
export interface WHV_ADVISE_GPA_RANGE_POPULATE_FLAGS {
  /** u32 */
  AsUINT32: number;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWHV_ADVISE_GPA_RANGE_POPULATE_FLAGS = 16;

export function allocWHV_ADVISE_GPA_RANGE_POPULATE_FLAGS(data?: Partial<WHV_ADVISE_GPA_RANGE_POPULATE_FLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_ADVISE_GPA_RANGE_POPULATE_FLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AsUINT32 !== undefined) view.setUint32(0, Number(data.AsUINT32), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_ADVISE_GPA_RANGE_POPULATE (size: 16)
 */
export interface WHV_ADVISE_GPA_RANGE_POPULATE {
  /** Windows.Win32.System.Hypervisor.WHV_ADVISE_GPA_RANGE_POPULATE_FLAGS */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_MEMORY_ACCESS_TYPE */
  AccessType: WHV_MEMORY_ACCESS_TYPE;
}

export const sizeofWHV_ADVISE_GPA_RANGE_POPULATE = 16;

export function allocWHV_ADVISE_GPA_RANGE_POPULATE(data?: Partial<WHV_ADVISE_GPA_RANGE_POPULATE>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_ADVISE_GPA_RANGE_POPULATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Flags !== undefined) view.setBigUint64(0, data.Flags === null ? 0n : BigInt(util.toPointer(data.Flags)), true);
  // 0x08: i32
  if (data?.AccessType !== undefined) view.setInt32(8, Number(data.AccessType), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_CAPABILITY_PROCESSOR_FREQUENCY_CAP (size: 24)
 */
export interface WHV_CAPABILITY_PROCESSOR_FREQUENCY_CAP {
  /** u32 */
  _bitfield: number;
  /** u32 */
  HighestFrequencyMhz: number;
  /** u32 */
  NominalFrequencyMhz: number;
  /** u32 */
  LowestFrequencyMhz: number;
  /** u32 */
  FrequencyStepMhz: number;
}

export const sizeofWHV_CAPABILITY_PROCESSOR_FREQUENCY_CAP = 24;

export function allocWHV_CAPABILITY_PROCESSOR_FREQUENCY_CAP(data?: Partial<WHV_CAPABILITY_PROCESSOR_FREQUENCY_CAP>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_CAPABILITY_PROCESSOR_FREQUENCY_CAP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?._bitfield !== undefined) view.setUint32(0, Number(data._bitfield), true);
  // 0x04: u32
  if (data?.HighestFrequencyMhz !== undefined) view.setUint32(4, Number(data.HighestFrequencyMhz), true);
  // 0x08: u32
  if (data?.NominalFrequencyMhz !== undefined) view.setUint32(8, Number(data.NominalFrequencyMhz), true);
  // 0x0c: u32
  if (data?.LowestFrequencyMhz !== undefined) view.setUint32(12, Number(data.LowestFrequencyMhz), true);
  // 0x10: u32
  if (data?.FrequencyStepMhz !== undefined) view.setUint32(16, Number(data.FrequencyStepMhz), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_SCHEDULER_FEATURES (size: 16)
 */
export interface WHV_SCHEDULER_FEATURES {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  AsUINT64: Deno.PointerValue;
}

export const sizeofWHV_SCHEDULER_FEATURES = 16;

export function allocWHV_SCHEDULER_FEATURES(data?: Partial<WHV_SCHEDULER_FEATURES>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_SCHEDULER_FEATURES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u64
  if (data?.AsUINT64 !== undefined) view.setBigUint64(8, BigInt(data.AsUINT64), true);
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.System.Hypervisor.WHV_CAPABILITY (size: 136)
 */
export interface WHV_CAPABILITY {
  /** Windows.Win32.Foundation.BOOL */
  HypervisorPresent: boolean;
  /** Windows.Win32.System.Hypervisor.WHV_CAPABILITY_FEATURES */
  Features: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_EXTENDED_VM_EXITS */
  ExtendedVmExits: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_PROCESSOR_VENDOR */
  ProcessorVendor: WHV_PROCESSOR_VENDOR;
  /** Windows.Win32.System.Hypervisor.WHV_PROCESSOR_FEATURES */
  ProcessorFeatures: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_SYNTHETIC_PROCESSOR_FEATURES_BANKS */
  SyntheticProcessorFeaturesBanks: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_PROCESSOR_XSAVE_FEATURES */
  ProcessorXsaveFeatures: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  ProcessorClFlushSize: number;
  /** u64 */
  ExceptionExitBitmap: Deno.PointerValue;
  /** Windows.Win32.System.Hypervisor.WHV_X64_MSR_EXIT_BITMAP */
  X64MsrExitBitmap: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  ProcessorClockFrequency: Deno.PointerValue;
  /** u64 */
  InterruptClockFrequency: Deno.PointerValue;
  /** Windows.Win32.System.Hypervisor.WHV_PROCESSOR_FEATURES_BANKS */
  ProcessorFeaturesBanks: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_ADVISE_GPA_RANGE_POPULATE_FLAGS */
  GpaRangePopulateFlags: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_CAPABILITY_PROCESSOR_FREQUENCY_CAP */
  ProcessorFrequencyCap: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_PROCESSOR_PERFMON_FEATURES */
  ProcessorPerfmonFeatures: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_SCHEDULER_FEATURES */
  SchedulerFeatures: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWHV_CAPABILITY = 136;

export function allocWHV_CAPABILITY(data?: Partial<WHV_CAPABILITY>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_CAPABILITY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.HypervisorPresent !== undefined) view.setInt32(0, Number(data.HypervisorPresent), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Features !== undefined) view.setBigUint64(8, data.Features === null ? 0n : BigInt(util.toPointer(data.Features)), true);
  // 0x10: pointer
  if (data?.ExtendedVmExits !== undefined) view.setBigUint64(16, data.ExtendedVmExits === null ? 0n : BigInt(util.toPointer(data.ExtendedVmExits)), true);
  // 0x18: i32
  if (data?.ProcessorVendor !== undefined) view.setInt32(24, Number(data.ProcessorVendor), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ProcessorFeatures !== undefined) view.setBigUint64(32, data.ProcessorFeatures === null ? 0n : BigInt(util.toPointer(data.ProcessorFeatures)), true);
  // 0x28: pointer
  if (data?.SyntheticProcessorFeaturesBanks !== undefined) view.setBigUint64(40, data.SyntheticProcessorFeaturesBanks === null ? 0n : BigInt(util.toPointer(data.SyntheticProcessorFeaturesBanks)), true);
  // 0x30: pointer
  if (data?.ProcessorXsaveFeatures !== undefined) view.setBigUint64(48, data.ProcessorXsaveFeatures === null ? 0n : BigInt(util.toPointer(data.ProcessorXsaveFeatures)), true);
  // 0x38: u8
  if (data?.ProcessorClFlushSize !== undefined) view.setUint8(56, Number(data.ProcessorClFlushSize));
  // 0x39: pad7
  // 0x40: u64
  if (data?.ExceptionExitBitmap !== undefined) view.setBigUint64(64, BigInt(data.ExceptionExitBitmap), true);
  // 0x48: pointer
  if (data?.X64MsrExitBitmap !== undefined) view.setBigUint64(72, data.X64MsrExitBitmap === null ? 0n : BigInt(util.toPointer(data.X64MsrExitBitmap)), true);
  // 0x50: u64
  if (data?.ProcessorClockFrequency !== undefined) view.setBigUint64(80, BigInt(data.ProcessorClockFrequency), true);
  // 0x58: u64
  if (data?.InterruptClockFrequency !== undefined) view.setBigUint64(88, BigInt(data.InterruptClockFrequency), true);
  // 0x60: pointer
  if (data?.ProcessorFeaturesBanks !== undefined) view.setBigUint64(96, data.ProcessorFeaturesBanks === null ? 0n : BigInt(util.toPointer(data.ProcessorFeaturesBanks)), true);
  // 0x68: pointer
  if (data?.GpaRangePopulateFlags !== undefined) view.setBigUint64(104, data.GpaRangePopulateFlags === null ? 0n : BigInt(util.toPointer(data.GpaRangePopulateFlags)), true);
  // 0x70: pointer
  if (data?.ProcessorFrequencyCap !== undefined) view.setBigUint64(112, data.ProcessorFrequencyCap === null ? 0n : BigInt(util.toPointer(data.ProcessorFrequencyCap)), true);
  // 0x78: pointer
  if (data?.ProcessorPerfmonFeatures !== undefined) view.setBigUint64(120, data.ProcessorPerfmonFeatures === null ? 0n : BigInt(util.toPointer(data.ProcessorPerfmonFeatures)), true);
  // 0x80: pointer
  if (data?.SchedulerFeatures !== undefined) view.setBigUint64(128, data.SchedulerFeatures === null ? 0n : BigInt(util.toPointer(data.SchedulerFeatures)), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_X64_CPUID_RESULT (size: 32)
 */
export interface WHV_X64_CPUID_RESULT {
  /** u32 */
  Function: number;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** u32 */
  Eax: number;
  /** u32 */
  Ebx: number;
  /** u32 */
  Ecx: number;
  /** u32 */
  Edx: number;
}

export const sizeofWHV_X64_CPUID_RESULT = 32;

export function allocWHV_X64_CPUID_RESULT(data?: Partial<WHV_X64_CPUID_RESULT>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_X64_CPUID_RESULT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Function !== undefined) view.setUint32(0, Number(data.Function), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  // 0x10: u32
  if (data?.Eax !== undefined) view.setUint32(16, Number(data.Eax), true);
  // 0x14: u32
  if (data?.Ebx !== undefined) view.setUint32(20, Number(data.Ebx), true);
  // 0x18: u32
  if (data?.Ecx !== undefined) view.setUint32(24, Number(data.Ecx), true);
  // 0x1c: u32
  if (data?.Edx !== undefined) view.setUint32(28, Number(data.Edx), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_CPUID_OUTPUT (size: 16)
 */
export interface WHV_CPUID_OUTPUT {
  /** u32 */
  Eax: number;
  /** u32 */
  Ebx: number;
  /** u32 */
  Ecx: number;
  /** u32 */
  Edx: number;
}

export const sizeofWHV_CPUID_OUTPUT = 16;

export function allocWHV_CPUID_OUTPUT(data?: Partial<WHV_CPUID_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_CPUID_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Eax !== undefined) view.setUint32(0, Number(data.Eax), true);
  // 0x04: u32
  if (data?.Ebx !== undefined) view.setUint32(4, Number(data.Ebx), true);
  // 0x08: u32
  if (data?.Ecx !== undefined) view.setUint32(8, Number(data.Ecx), true);
  // 0x0c: u32
  if (data?.Edx !== undefined) view.setUint32(12, Number(data.Edx), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_X64_CPUID_RESULT2 (size: 32)
 */
export interface WHV_X64_CPUID_RESULT2 {
  /** u32 */
  Function: number;
  /** u32 */
  Index: number;
  /** u32 */
  VpIndex: number;
  /** Windows.Win32.System.Hypervisor.WHV_X64_CPUID_RESULT2_FLAGS */
  Flags: WHV_X64_CPUID_RESULT2_FLAGS;
  /** Windows.Win32.System.Hypervisor.WHV_CPUID_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_CPUID_OUTPUT */
  Mask: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWHV_X64_CPUID_RESULT2 = 32;

export function allocWHV_X64_CPUID_RESULT2(data?: Partial<WHV_X64_CPUID_RESULT2>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_X64_CPUID_RESULT2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Function !== undefined) view.setUint32(0, Number(data.Function), true);
  // 0x04: u32
  if (data?.Index !== undefined) view.setUint32(4, Number(data.Index), true);
  // 0x08: u32
  if (data?.VpIndex !== undefined) view.setUint32(8, Number(data.VpIndex), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: pointer
  if (data?.Output !== undefined) view.setBigUint64(16, data.Output === null ? 0n : BigInt(util.toPointer(data.Output)), true);
  // 0x18: pointer
  if (data?.Mask !== undefined) view.setBigUint64(24, data.Mask === null ? 0n : BigInt(util.toPointer(data.Mask)), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_MSR_ACTION_ENTRY (size: 8)
 */
export interface WHV_MSR_ACTION_ENTRY {
  /** u32 */
  Index: number;
  /** u8 */
  ReadAction: number;
  /** u8 */
  WriteAction: number;
  /** u16 */
  Reserved: number;
}

export const sizeofWHV_MSR_ACTION_ENTRY = 8;

export function allocWHV_MSR_ACTION_ENTRY(data?: Partial<WHV_MSR_ACTION_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_MSR_ACTION_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Index !== undefined) view.setUint32(0, Number(data.Index), true);
  // 0x04: u8
  if (data?.ReadAction !== undefined) view.setUint8(4, Number(data.ReadAction));
  // 0x05: u8
  if (data?.WriteAction !== undefined) view.setUint8(5, Number(data.WriteAction));
  // 0x06: u16
  if (data?.Reserved !== undefined) view.setUint16(6, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_PARTITION_PROPERTY (size: 200)
 */
export interface WHV_PARTITION_PROPERTY {
  /** Windows.Win32.System.Hypervisor.WHV_EXTENDED_VM_EXITS */
  ExtendedVmExits: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_PROCESSOR_FEATURES */
  ProcessorFeatures: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_SYNTHETIC_PROCESSOR_FEATURES_BANKS */
  SyntheticProcessorFeaturesBanks: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_PROCESSOR_XSAVE_FEATURES */
  ProcessorXsaveFeatures: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  ProcessorClFlushSize: number;
  /** u32 */
  ProcessorCount: number;
  /** array */
  CpuidExitList: Deno.PointerValue | null;
  /** array */
  CpuidResultList: Deno.PointerValue | null;
  /** array */
  CpuidResultList2: Deno.PointerValue | null;
  /** array */
  MsrActionList: Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_MSR_ACTION */
  UnimplementedMsrAction: WHV_MSR_ACTION;
  /** u64 */
  ExceptionExitBitmap: Deno.PointerValue;
  /** Windows.Win32.System.Hypervisor.WHV_X64_LOCAL_APIC_EMULATION_MODE */
  LocalApicEmulationMode: WHV_X64_LOCAL_APIC_EMULATION_MODE;
  /** Windows.Win32.Foundation.BOOL */
  SeparateSecurityDomain: boolean;
  /** Windows.Win32.Foundation.BOOL */
  NestedVirtualization: boolean;
  /** Windows.Win32.System.Hypervisor.WHV_X64_MSR_EXIT_BITMAP */
  X64MsrExitBitmap: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  ProcessorClockFrequency: Deno.PointerValue;
  /** u64 */
  InterruptClockFrequency: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  ApicRemoteRead: boolean;
  /** Windows.Win32.System.Hypervisor.WHV_PROCESSOR_FEATURES_BANKS */
  ProcessorFeaturesBanks: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  ReferenceTime: Deno.PointerValue;
  /** u16 */
  PrimaryNumaNode: number;
  /** u32 */
  CpuReserve: number;
  /** u32 */
  CpuCap: number;
  /** u32 */
  CpuWeight: number;
  /** u64 */
  CpuGroupId: Deno.PointerValue;
  /** u32 */
  ProcessorFrequencyCap: number;
  /** Windows.Win32.Foundation.BOOL */
  AllowDeviceAssignment: boolean;
  /** Windows.Win32.System.Hypervisor.WHV_PROCESSOR_PERFMON_FEATURES */
  ProcessorPerfmonFeatures: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  DisableSmt: boolean;
}

export const sizeofWHV_PARTITION_PROPERTY = 200;

export function allocWHV_PARTITION_PROPERTY(data?: Partial<WHV_PARTITION_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_PARTITION_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExtendedVmExits !== undefined) view.setBigUint64(0, data.ExtendedVmExits === null ? 0n : BigInt(util.toPointer(data.ExtendedVmExits)), true);
  // 0x08: pointer
  if (data?.ProcessorFeatures !== undefined) view.setBigUint64(8, data.ProcessorFeatures === null ? 0n : BigInt(util.toPointer(data.ProcessorFeatures)), true);
  // 0x10: pointer
  if (data?.SyntheticProcessorFeaturesBanks !== undefined) view.setBigUint64(16, data.SyntheticProcessorFeaturesBanks === null ? 0n : BigInt(util.toPointer(data.SyntheticProcessorFeaturesBanks)), true);
  // 0x18: pointer
  if (data?.ProcessorXsaveFeatures !== undefined) view.setBigUint64(24, data.ProcessorXsaveFeatures === null ? 0n : BigInt(util.toPointer(data.ProcessorXsaveFeatures)), true);
  // 0x20: u8
  if (data?.ProcessorClFlushSize !== undefined) view.setUint8(32, Number(data.ProcessorClFlushSize));
  // 0x21: u32
  if (data?.ProcessorCount !== undefined) view.setUint32(33, Number(data.ProcessorCount), true);
  // 0x25: pad3
  // 0x28: pointer
  if (data?.CpuidExitList !== undefined) view.setBigUint64(40, data.CpuidExitList === null ? 0n : BigInt(util.toPointer(data.CpuidExitList)), true);
  // 0x30: pointer
  if (data?.CpuidResultList !== undefined) view.setBigUint64(48, data.CpuidResultList === null ? 0n : BigInt(util.toPointer(data.CpuidResultList)), true);
  // 0x38: pointer
  if (data?.CpuidResultList2 !== undefined) view.setBigUint64(56, data.CpuidResultList2 === null ? 0n : BigInt(util.toPointer(data.CpuidResultList2)), true);
  // 0x40: pointer
  if (data?.MsrActionList !== undefined) view.setBigUint64(64, data.MsrActionList === null ? 0n : BigInt(util.toPointer(data.MsrActionList)), true);
  // 0x48: i32
  if (data?.UnimplementedMsrAction !== undefined) view.setInt32(72, Number(data.UnimplementedMsrAction), true);
  // 0x4c: pad4
  // 0x50: u64
  if (data?.ExceptionExitBitmap !== undefined) view.setBigUint64(80, BigInt(data.ExceptionExitBitmap), true);
  // 0x58: i32
  if (data?.LocalApicEmulationMode !== undefined) view.setInt32(88, Number(data.LocalApicEmulationMode), true);
  // 0x5c: i32
  if (data?.SeparateSecurityDomain !== undefined) view.setInt32(92, Number(data.SeparateSecurityDomain), true);
  // 0x60: i32
  if (data?.NestedVirtualization !== undefined) view.setInt32(96, Number(data.NestedVirtualization), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.X64MsrExitBitmap !== undefined) view.setBigUint64(104, data.X64MsrExitBitmap === null ? 0n : BigInt(util.toPointer(data.X64MsrExitBitmap)), true);
  // 0x70: u64
  if (data?.ProcessorClockFrequency !== undefined) view.setBigUint64(112, BigInt(data.ProcessorClockFrequency), true);
  // 0x78: u64
  if (data?.InterruptClockFrequency !== undefined) view.setBigUint64(120, BigInt(data.InterruptClockFrequency), true);
  // 0x80: i32
  if (data?.ApicRemoteRead !== undefined) view.setInt32(128, Number(data.ApicRemoteRead), true);
  // 0x84: pad4
  // 0x88: pointer
  if (data?.ProcessorFeaturesBanks !== undefined) view.setBigUint64(136, data.ProcessorFeaturesBanks === null ? 0n : BigInt(util.toPointer(data.ProcessorFeaturesBanks)), true);
  // 0x90: u64
  if (data?.ReferenceTime !== undefined) view.setBigUint64(144, BigInt(data.ReferenceTime), true);
  // 0x98: u16
  if (data?.PrimaryNumaNode !== undefined) view.setUint16(152, Number(data.PrimaryNumaNode), true);
  // 0x9a: u32
  if (data?.CpuReserve !== undefined) view.setUint32(154, Number(data.CpuReserve), true);
  // 0x9e: u32
  if (data?.CpuCap !== undefined) view.setUint32(158, Number(data.CpuCap), true);
  // 0xa2: u32
  if (data?.CpuWeight !== undefined) view.setUint32(162, Number(data.CpuWeight), true);
  // 0xa6: pad2
  // 0xa8: u64
  if (data?.CpuGroupId !== undefined) view.setBigUint64(168, BigInt(data.CpuGroupId), true);
  // 0xb0: u32
  if (data?.ProcessorFrequencyCap !== undefined) view.setUint32(176, Number(data.ProcessorFrequencyCap), true);
  // 0xb4: i32
  if (data?.AllowDeviceAssignment !== undefined) view.setInt32(180, Number(data.AllowDeviceAssignment), true);
  // 0xb8: pointer
  if (data?.ProcessorPerfmonFeatures !== undefined) view.setBigUint64(184, data.ProcessorPerfmonFeatures === null ? 0n : BigInt(util.toPointer(data.ProcessorPerfmonFeatures)), true);
  // 0xc0: i32
  if (data?.DisableSmt !== undefined) view.setInt32(192, Number(data.DisableSmt), true);
  // 0xc4: pad4
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_TRANSLATE_GVA_RESULT (size: 8)
 */
export interface WHV_TRANSLATE_GVA_RESULT {
  /** Windows.Win32.System.Hypervisor.WHV_TRANSLATE_GVA_RESULT_CODE */
  ResultCode: WHV_TRANSLATE_GVA_RESULT_CODE;
  /** u32 */
  Reserved: number;
}

export const sizeofWHV_TRANSLATE_GVA_RESULT = 8;

export function allocWHV_TRANSLATE_GVA_RESULT(data?: Partial<WHV_TRANSLATE_GVA_RESULT>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_TRANSLATE_GVA_RESULT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ResultCode !== undefined) view.setInt32(0, Number(data.ResultCode), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_ADVISE_GPA_RANGE (size: 8)
 */
export interface WHV_ADVISE_GPA_RANGE {
  /** Windows.Win32.System.Hypervisor.WHV_ADVISE_GPA_RANGE_POPULATE */
  Populate: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWHV_ADVISE_GPA_RANGE = 8;

export function allocWHV_ADVISE_GPA_RANGE(data?: Partial<WHV_ADVISE_GPA_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_ADVISE_GPA_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Populate !== undefined) view.setBigUint64(0, data.Populate === null ? 0n : BigInt(util.toPointer(data.Populate)), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_ACCESS_GPA_CONTROLS (size: 16)
 */
export interface WHV_ACCESS_GPA_CONTROLS {
  /** u64 */
  AsUINT64: Deno.PointerValue;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWHV_ACCESS_GPA_CONTROLS = 16;

export function allocWHV_ACCESS_GPA_CONTROLS(data?: Partial<WHV_ACCESS_GPA_CONTROLS>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_ACCESS_GPA_CONTROLS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.AsUINT64 !== undefined) view.setBigUint64(0, BigInt(data.AsUINT64), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_UINT128 (size: 16)
 */
export interface WHV_UINT128 {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  Dword: Deno.PointerValue | null;
}

export const sizeofWHV_UINT128 = 16;

export function allocWHV_UINT128(data?: Partial<WHV_UINT128>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_UINT128);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.Dword !== undefined) view.setBigUint64(8, data.Dword === null ? 0n : BigInt(util.toPointer(data.Dword)), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_X64_FP_REGISTER (size: 16)
 */
export interface WHV_X64_FP_REGISTER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_UINT128 */
  AsUINT128: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWHV_X64_FP_REGISTER = 16;

export function allocWHV_X64_FP_REGISTER(data?: Partial<WHV_X64_FP_REGISTER>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_X64_FP_REGISTER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.AsUINT128 !== undefined) view.setBigUint64(8, data.AsUINT128 === null ? 0n : BigInt(util.toPointer(data.AsUINT128)), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_X64_FP_CONTROL_STATUS_REGISTER (size: 16)
 */
export interface WHV_X64_FP_CONTROL_STATUS_REGISTER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_UINT128 */
  AsUINT128: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWHV_X64_FP_CONTROL_STATUS_REGISTER = 16;

export function allocWHV_X64_FP_CONTROL_STATUS_REGISTER(data?: Partial<WHV_X64_FP_CONTROL_STATUS_REGISTER>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_X64_FP_CONTROL_STATUS_REGISTER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.AsUINT128 !== undefined) view.setBigUint64(8, data.AsUINT128 === null ? 0n : BigInt(util.toPointer(data.AsUINT128)), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_X64_XMM_CONTROL_STATUS_REGISTER (size: 16)
 */
export interface WHV_X64_XMM_CONTROL_STATUS_REGISTER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_UINT128 */
  AsUINT128: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWHV_X64_XMM_CONTROL_STATUS_REGISTER = 16;

export function allocWHV_X64_XMM_CONTROL_STATUS_REGISTER(data?: Partial<WHV_X64_XMM_CONTROL_STATUS_REGISTER>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_X64_XMM_CONTROL_STATUS_REGISTER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.AsUINT128 !== undefined) view.setBigUint64(8, data.AsUINT128 === null ? 0n : BigInt(util.toPointer(data.AsUINT128)), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_X64_SEGMENT_REGISTER (size: 24)
 */
export interface WHV_X64_SEGMENT_REGISTER {
  /** u64 */
  Base: Deno.PointerValue;
  /** u32 */
  Limit: number;
  /** u16 */
  Selector: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWHV_X64_SEGMENT_REGISTER = 24;

export function allocWHV_X64_SEGMENT_REGISTER(data?: Partial<WHV_X64_SEGMENT_REGISTER>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_X64_SEGMENT_REGISTER);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Base !== undefined) view.setBigUint64(0, BigInt(data.Base), true);
  // 0x08: u32
  if (data?.Limit !== undefined) view.setUint32(8, Number(data.Limit), true);
  // 0x0c: u16
  if (data?.Selector !== undefined) view.setUint16(12, Number(data.Selector), true);
  // 0x0e: pad2
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_X64_TABLE_REGISTER (size: 24)
 */
export interface WHV_X64_TABLE_REGISTER {
  /** array */
  Pad: Deno.PointerValue | null;
  /** u16 */
  Limit: number;
  /** u64 */
  Base: Deno.PointerValue;
}

export const sizeofWHV_X64_TABLE_REGISTER = 24;

export function allocWHV_X64_TABLE_REGISTER(data?: Partial<WHV_X64_TABLE_REGISTER>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_X64_TABLE_REGISTER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Pad !== undefined) view.setBigUint64(0, data.Pad === null ? 0n : BigInt(util.toPointer(data.Pad)), true);
  // 0x08: u16
  if (data?.Limit !== undefined) view.setUint16(8, Number(data.Limit), true);
  // 0x0a: pad6
  // 0x10: u64
  if (data?.Base !== undefined) view.setBigUint64(16, BigInt(data.Base), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_X64_INTERRUPT_STATE_REGISTER (size: 16)
 */
export interface WHV_X64_INTERRUPT_STATE_REGISTER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  AsUINT64: Deno.PointerValue;
}

export const sizeofWHV_X64_INTERRUPT_STATE_REGISTER = 16;

export function allocWHV_X64_INTERRUPT_STATE_REGISTER(data?: Partial<WHV_X64_INTERRUPT_STATE_REGISTER>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_X64_INTERRUPT_STATE_REGISTER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u64
  if (data?.AsUINT64 !== undefined) view.setBigUint64(8, BigInt(data.AsUINT64), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_X64_PENDING_INTERRUPTION_REGISTER (size: 16)
 */
export interface WHV_X64_PENDING_INTERRUPTION_REGISTER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  AsUINT64: Deno.PointerValue;
}

export const sizeofWHV_X64_PENDING_INTERRUPTION_REGISTER = 16;

export function allocWHV_X64_PENDING_INTERRUPTION_REGISTER(data?: Partial<WHV_X64_PENDING_INTERRUPTION_REGISTER>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_X64_PENDING_INTERRUPTION_REGISTER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u64
  if (data?.AsUINT64 !== undefined) view.setBigUint64(8, BigInt(data.AsUINT64), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER (size: 16)
 */
export interface WHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  AsUINT64: Deno.PointerValue;
}

export const sizeofWHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER = 16;

export function allocWHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER(data?: Partial<WHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u64
  if (data?.AsUINT64 !== undefined) view.setBigUint64(8, BigInt(data.AsUINT64), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_X64_PENDING_EXCEPTION_EVENT (size: 16)
 */
export interface WHV_X64_PENDING_EXCEPTION_EVENT {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_UINT128 */
  AsUINT128: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWHV_X64_PENDING_EXCEPTION_EVENT = 16;

export function allocWHV_X64_PENDING_EXCEPTION_EVENT(data?: Partial<WHV_X64_PENDING_EXCEPTION_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_X64_PENDING_EXCEPTION_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.AsUINT128 !== undefined) view.setBigUint64(8, data.AsUINT128 === null ? 0n : BigInt(util.toPointer(data.AsUINT128)), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_X64_PENDING_EXT_INT_EVENT (size: 16)
 */
export interface WHV_X64_PENDING_EXT_INT_EVENT {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_UINT128 */
  AsUINT128: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWHV_X64_PENDING_EXT_INT_EVENT = 16;

export function allocWHV_X64_PENDING_EXT_INT_EVENT(data?: Partial<WHV_X64_PENDING_EXT_INT_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_X64_PENDING_EXT_INT_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.AsUINT128 !== undefined) view.setBigUint64(8, data.AsUINT128 === null ? 0n : BigInt(util.toPointer(data.AsUINT128)), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_INTERNAL_ACTIVITY_REGISTER (size: 16)
 */
export interface WHV_INTERNAL_ACTIVITY_REGISTER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  AsUINT64: Deno.PointerValue;
}

export const sizeofWHV_INTERNAL_ACTIVITY_REGISTER = 16;

export function allocWHV_INTERNAL_ACTIVITY_REGISTER(data?: Partial<WHV_INTERNAL_ACTIVITY_REGISTER>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_INTERNAL_ACTIVITY_REGISTER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u64
  if (data?.AsUINT64 !== undefined) view.setBigUint64(8, BigInt(data.AsUINT64), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_X64_PENDING_DEBUG_EXCEPTION (size: 16)
 */
export interface WHV_X64_PENDING_DEBUG_EXCEPTION {
  /** u64 */
  AsUINT64: Deno.PointerValue;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWHV_X64_PENDING_DEBUG_EXCEPTION = 16;

export function allocWHV_X64_PENDING_DEBUG_EXCEPTION(data?: Partial<WHV_X64_PENDING_DEBUG_EXCEPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_X64_PENDING_DEBUG_EXCEPTION);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.AsUINT64 !== undefined) view.setBigUint64(0, BigInt(data.AsUINT64), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_SYNIC_SINT_DELIVERABLE_CONTEXT (size: 8)
 */
export interface WHV_SYNIC_SINT_DELIVERABLE_CONTEXT {
  /** u16 */
  DeliverableSints: number;
  /** u16 */
  Reserved1: number;
  /** u32 */
  Reserved2: number;
}

export const sizeofWHV_SYNIC_SINT_DELIVERABLE_CONTEXT = 8;

export function allocWHV_SYNIC_SINT_DELIVERABLE_CONTEXT(data?: Partial<WHV_SYNIC_SINT_DELIVERABLE_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_SYNIC_SINT_DELIVERABLE_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.DeliverableSints !== undefined) view.setUint16(0, Number(data.DeliverableSints), true);
  // 0x02: u16
  if (data?.Reserved1 !== undefined) view.setUint16(2, Number(data.Reserved1), true);
  // 0x04: u32
  if (data?.Reserved2 !== undefined) view.setUint32(4, Number(data.Reserved2), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_REGISTER_VALUE (size: 120)
 */
export interface WHV_REGISTER_VALUE {
  /** Windows.Win32.System.Hypervisor.WHV_UINT128 */
  Reg128: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  Reg64: Deno.PointerValue;
  /** u32 */
  Reg32: number;
  /** u16 */
  Reg16: number;
  /** u8 */
  Reg8: number;
  /** Windows.Win32.System.Hypervisor.WHV_X64_FP_REGISTER */
  Fp: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_X64_FP_CONTROL_STATUS_REGISTER */
  FpControlStatus: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_X64_XMM_CONTROL_STATUS_REGISTER */
  XmmControlStatus: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_X64_SEGMENT_REGISTER */
  Segment: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_X64_TABLE_REGISTER */
  Table: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_X64_INTERRUPT_STATE_REGISTER */
  InterruptState: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_X64_PENDING_INTERRUPTION_REGISTER */
  PendingInterruption: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER */
  DeliverabilityNotifications: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_X64_PENDING_EXCEPTION_EVENT */
  ExceptionEvent: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_X64_PENDING_EXT_INT_EVENT */
  ExtIntEvent: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_INTERNAL_ACTIVITY_REGISTER */
  InternalActivity: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_X64_PENDING_DEBUG_EXCEPTION */
  PendingDebugException: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWHV_REGISTER_VALUE = 120;

export function allocWHV_REGISTER_VALUE(data?: Partial<WHV_REGISTER_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_REGISTER_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Reg128 !== undefined) view.setBigUint64(0, data.Reg128 === null ? 0n : BigInt(util.toPointer(data.Reg128)), true);
  // 0x08: u64
  if (data?.Reg64 !== undefined) view.setBigUint64(8, BigInt(data.Reg64), true);
  // 0x10: u32
  if (data?.Reg32 !== undefined) view.setUint32(16, Number(data.Reg32), true);
  // 0x14: u16
  if (data?.Reg16 !== undefined) view.setUint16(20, Number(data.Reg16), true);
  // 0x16: u8
  if (data?.Reg8 !== undefined) view.setUint8(22, Number(data.Reg8));
  // 0x17: pad1
  // 0x18: pointer
  if (data?.Fp !== undefined) view.setBigUint64(24, data.Fp === null ? 0n : BigInt(util.toPointer(data.Fp)), true);
  // 0x20: pointer
  if (data?.FpControlStatus !== undefined) view.setBigUint64(32, data.FpControlStatus === null ? 0n : BigInt(util.toPointer(data.FpControlStatus)), true);
  // 0x28: pointer
  if (data?.XmmControlStatus !== undefined) view.setBigUint64(40, data.XmmControlStatus === null ? 0n : BigInt(util.toPointer(data.XmmControlStatus)), true);
  // 0x30: pointer
  if (data?.Segment !== undefined) view.setBigUint64(48, data.Segment === null ? 0n : BigInt(util.toPointer(data.Segment)), true);
  // 0x38: pointer
  if (data?.Table !== undefined) view.setBigUint64(56, data.Table === null ? 0n : BigInt(util.toPointer(data.Table)), true);
  // 0x40: pointer
  if (data?.InterruptState !== undefined) view.setBigUint64(64, data.InterruptState === null ? 0n : BigInt(util.toPointer(data.InterruptState)), true);
  // 0x48: pointer
  if (data?.PendingInterruption !== undefined) view.setBigUint64(72, data.PendingInterruption === null ? 0n : BigInt(util.toPointer(data.PendingInterruption)), true);
  // 0x50: pointer
  if (data?.DeliverabilityNotifications !== undefined) view.setBigUint64(80, data.DeliverabilityNotifications === null ? 0n : BigInt(util.toPointer(data.DeliverabilityNotifications)), true);
  // 0x58: pointer
  if (data?.ExceptionEvent !== undefined) view.setBigUint64(88, data.ExceptionEvent === null ? 0n : BigInt(util.toPointer(data.ExceptionEvent)), true);
  // 0x60: pointer
  if (data?.ExtIntEvent !== undefined) view.setBigUint64(96, data.ExtIntEvent === null ? 0n : BigInt(util.toPointer(data.ExtIntEvent)), true);
  // 0x68: pointer
  if (data?.InternalActivity !== undefined) view.setBigUint64(104, data.InternalActivity === null ? 0n : BigInt(util.toPointer(data.InternalActivity)), true);
  // 0x70: pointer
  if (data?.PendingDebugException !== undefined) view.setBigUint64(112, data.PendingDebugException === null ? 0n : BigInt(util.toPointer(data.PendingDebugException)), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_X64_VP_EXECUTION_STATE (size: 16)
 */
export interface WHV_X64_VP_EXECUTION_STATE {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  AsUINT16: number;
}

export const sizeofWHV_X64_VP_EXECUTION_STATE = 16;

export function allocWHV_X64_VP_EXECUTION_STATE(data?: Partial<WHV_X64_VP_EXECUTION_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_X64_VP_EXECUTION_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u16
  if (data?.AsUINT16 !== undefined) view.setUint16(8, Number(data.AsUINT16), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_VP_EXIT_CONTEXT (size: 40)
 */
export interface WHV_VP_EXIT_CONTEXT {
  /** Windows.Win32.System.Hypervisor.WHV_X64_VP_EXECUTION_STATE */
  ExecutionState: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  _bitfield: number;
  /** u8 */
  Reserved: number;
  /** u32 */
  Reserved2: number;
  /** Windows.Win32.System.Hypervisor.WHV_X64_SEGMENT_REGISTER */
  Cs: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  Rip: Deno.PointerValue;
  /** u64 */
  Rflags: Deno.PointerValue;
}

export const sizeofWHV_VP_EXIT_CONTEXT = 40;

export function allocWHV_VP_EXIT_CONTEXT(data?: Partial<WHV_VP_EXIT_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_VP_EXIT_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExecutionState !== undefined) view.setBigUint64(0, data.ExecutionState === null ? 0n : BigInt(util.toPointer(data.ExecutionState)), true);
  // 0x08: u8
  if (data?._bitfield !== undefined) view.setUint8(8, Number(data._bitfield));
  // 0x09: u8
  if (data?.Reserved !== undefined) view.setUint8(9, Number(data.Reserved));
  // 0x0a: u32
  if (data?.Reserved2 !== undefined) view.setUint32(10, Number(data.Reserved2), true);
  // 0x0e: pad2
  // 0x10: pointer
  if (data?.Cs !== undefined) view.setBigUint64(16, data.Cs === null ? 0n : BigInt(util.toPointer(data.Cs)), true);
  // 0x18: u64
  if (data?.Rip !== undefined) view.setBigUint64(24, BigInt(data.Rip), true);
  // 0x20: u64
  if (data?.Rflags !== undefined) view.setBigUint64(32, BigInt(data.Rflags), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_MEMORY_ACCESS_INFO (size: 16)
 */
export interface WHV_MEMORY_ACCESS_INFO {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  AsUINT32: number;
}

export const sizeofWHV_MEMORY_ACCESS_INFO = 16;

export function allocWHV_MEMORY_ACCESS_INFO(data?: Partial<WHV_MEMORY_ACCESS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_MEMORY_ACCESS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u32
  if (data?.AsUINT32 !== undefined) view.setUint32(8, Number(data.AsUINT32), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_MEMORY_ACCESS_CONTEXT (size: 48)
 */
export interface WHV_MEMORY_ACCESS_CONTEXT {
  /** u8 */
  InstructionByteCount: number;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** array */
  InstructionBytes: Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_MEMORY_ACCESS_INFO */
  AccessInfo: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  Gpa: Deno.PointerValue;
  /** u64 */
  Gva: Deno.PointerValue;
}

export const sizeofWHV_MEMORY_ACCESS_CONTEXT = 48;

export function allocWHV_MEMORY_ACCESS_CONTEXT(data?: Partial<WHV_MEMORY_ACCESS_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_MEMORY_ACCESS_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.InstructionByteCount !== undefined) view.setUint8(0, Number(data.InstructionByteCount));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  // 0x10: pointer
  if (data?.InstructionBytes !== undefined) view.setBigUint64(16, data.InstructionBytes === null ? 0n : BigInt(util.toPointer(data.InstructionBytes)), true);
  // 0x18: pointer
  if (data?.AccessInfo !== undefined) view.setBigUint64(24, data.AccessInfo === null ? 0n : BigInt(util.toPointer(data.AccessInfo)), true);
  // 0x20: u64
  if (data?.Gpa !== undefined) view.setBigUint64(32, BigInt(data.Gpa), true);
  // 0x28: u64
  if (data?.Gva !== undefined) view.setBigUint64(40, BigInt(data.Gva), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_X64_IO_PORT_ACCESS_INFO (size: 16)
 */
export interface WHV_X64_IO_PORT_ACCESS_INFO {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  AsUINT32: number;
}

export const sizeofWHV_X64_IO_PORT_ACCESS_INFO = 16;

export function allocWHV_X64_IO_PORT_ACCESS_INFO(data?: Partial<WHV_X64_IO_PORT_ACCESS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_X64_IO_PORT_ACCESS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u32
  if (data?.AsUINT32 !== undefined) view.setUint32(8, Number(data.AsUINT32), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_X64_IO_PORT_ACCESS_CONTEXT (size: 96)
 */
export interface WHV_X64_IO_PORT_ACCESS_CONTEXT {
  /** u8 */
  InstructionByteCount: number;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** array */
  InstructionBytes: Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_X64_IO_PORT_ACCESS_INFO */
  AccessInfo: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  PortNumber: number;
  /** array */
  Reserved2: Deno.PointerValue | null;
  /** u64 */
  Rax: Deno.PointerValue;
  /** u64 */
  Rcx: Deno.PointerValue;
  /** u64 */
  Rsi: Deno.PointerValue;
  /** u64 */
  Rdi: Deno.PointerValue;
  /** Windows.Win32.System.Hypervisor.WHV_X64_SEGMENT_REGISTER */
  Ds: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_X64_SEGMENT_REGISTER */
  Es: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWHV_X64_IO_PORT_ACCESS_CONTEXT = 96;

export function allocWHV_X64_IO_PORT_ACCESS_CONTEXT(data?: Partial<WHV_X64_IO_PORT_ACCESS_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_X64_IO_PORT_ACCESS_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.InstructionByteCount !== undefined) view.setUint8(0, Number(data.InstructionByteCount));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  // 0x10: pointer
  if (data?.InstructionBytes !== undefined) view.setBigUint64(16, data.InstructionBytes === null ? 0n : BigInt(util.toPointer(data.InstructionBytes)), true);
  // 0x18: pointer
  if (data?.AccessInfo !== undefined) view.setBigUint64(24, data.AccessInfo === null ? 0n : BigInt(util.toPointer(data.AccessInfo)), true);
  // 0x20: u16
  if (data?.PortNumber !== undefined) view.setUint16(32, Number(data.PortNumber), true);
  // 0x22: pad6
  // 0x28: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(40, data.Reserved2 === null ? 0n : BigInt(util.toPointer(data.Reserved2)), true);
  // 0x30: u64
  if (data?.Rax !== undefined) view.setBigUint64(48, BigInt(data.Rax), true);
  // 0x38: u64
  if (data?.Rcx !== undefined) view.setBigUint64(56, BigInt(data.Rcx), true);
  // 0x40: u64
  if (data?.Rsi !== undefined) view.setBigUint64(64, BigInt(data.Rsi), true);
  // 0x48: u64
  if (data?.Rdi !== undefined) view.setBigUint64(72, BigInt(data.Rdi), true);
  // 0x50: pointer
  if (data?.Ds !== undefined) view.setBigUint64(80, data.Ds === null ? 0n : BigInt(util.toPointer(data.Ds)), true);
  // 0x58: pointer
  if (data?.Es !== undefined) view.setBigUint64(88, data.Es === null ? 0n : BigInt(util.toPointer(data.Es)), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_X64_MSR_ACCESS_INFO (size: 16)
 */
export interface WHV_X64_MSR_ACCESS_INFO {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  AsUINT32: number;
}

export const sizeofWHV_X64_MSR_ACCESS_INFO = 16;

export function allocWHV_X64_MSR_ACCESS_INFO(data?: Partial<WHV_X64_MSR_ACCESS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_X64_MSR_ACCESS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u32
  if (data?.AsUINT32 !== undefined) view.setUint32(8, Number(data.AsUINT32), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_X64_MSR_ACCESS_CONTEXT (size: 32)
 */
export interface WHV_X64_MSR_ACCESS_CONTEXT {
  /** Windows.Win32.System.Hypervisor.WHV_X64_MSR_ACCESS_INFO */
  AccessInfo: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  MsrNumber: number;
  /** u64 */
  Rax: Deno.PointerValue;
  /** u64 */
  Rdx: Deno.PointerValue;
}

export const sizeofWHV_X64_MSR_ACCESS_CONTEXT = 32;

export function allocWHV_X64_MSR_ACCESS_CONTEXT(data?: Partial<WHV_X64_MSR_ACCESS_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_X64_MSR_ACCESS_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AccessInfo !== undefined) view.setBigUint64(0, data.AccessInfo === null ? 0n : BigInt(util.toPointer(data.AccessInfo)), true);
  // 0x08: u32
  if (data?.MsrNumber !== undefined) view.setUint32(8, Number(data.MsrNumber), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.Rax !== undefined) view.setBigUint64(16, BigInt(data.Rax), true);
  // 0x18: u64
  if (data?.Rdx !== undefined) view.setBigUint64(24, BigInt(data.Rdx), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_X64_CPUID_ACCESS_CONTEXT (size: 64)
 */
export interface WHV_X64_CPUID_ACCESS_CONTEXT {
  /** u64 */
  Rax: Deno.PointerValue;
  /** u64 */
  Rcx: Deno.PointerValue;
  /** u64 */
  Rdx: Deno.PointerValue;
  /** u64 */
  Rbx: Deno.PointerValue;
  /** u64 */
  DefaultResultRax: Deno.PointerValue;
  /** u64 */
  DefaultResultRcx: Deno.PointerValue;
  /** u64 */
  DefaultResultRdx: Deno.PointerValue;
  /** u64 */
  DefaultResultRbx: Deno.PointerValue;
}

export const sizeofWHV_X64_CPUID_ACCESS_CONTEXT = 64;

export function allocWHV_X64_CPUID_ACCESS_CONTEXT(data?: Partial<WHV_X64_CPUID_ACCESS_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_X64_CPUID_ACCESS_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Rax !== undefined) view.setBigUint64(0, BigInt(data.Rax), true);
  // 0x08: u64
  if (data?.Rcx !== undefined) view.setBigUint64(8, BigInt(data.Rcx), true);
  // 0x10: u64
  if (data?.Rdx !== undefined) view.setBigUint64(16, BigInt(data.Rdx), true);
  // 0x18: u64
  if (data?.Rbx !== undefined) view.setBigUint64(24, BigInt(data.Rbx), true);
  // 0x20: u64
  if (data?.DefaultResultRax !== undefined) view.setBigUint64(32, BigInt(data.DefaultResultRax), true);
  // 0x28: u64
  if (data?.DefaultResultRcx !== undefined) view.setBigUint64(40, BigInt(data.DefaultResultRcx), true);
  // 0x30: u64
  if (data?.DefaultResultRdx !== undefined) view.setBigUint64(48, BigInt(data.DefaultResultRdx), true);
  // 0x38: u64
  if (data?.DefaultResultRbx !== undefined) view.setBigUint64(56, BigInt(data.DefaultResultRbx), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_VP_EXCEPTION_INFO (size: 16)
 */
export interface WHV_VP_EXCEPTION_INFO {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  AsUINT32: number;
}

export const sizeofWHV_VP_EXCEPTION_INFO = 16;

export function allocWHV_VP_EXCEPTION_INFO(data?: Partial<WHV_VP_EXCEPTION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_VP_EXCEPTION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u32
  if (data?.AsUINT32 !== undefined) view.setUint32(8, Number(data.AsUINT32), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_VP_EXCEPTION_CONTEXT (size: 64)
 */
export interface WHV_VP_EXCEPTION_CONTEXT {
  /** u8 */
  InstructionByteCount: number;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** array */
  InstructionBytes: Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_VP_EXCEPTION_INFO */
  ExceptionInfo: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  ExceptionType: number;
  /** array */
  Reserved2: Deno.PointerValue | null;
  /** u32 */
  ErrorCode: number;
  /** u64 */
  ExceptionParameter: Deno.PointerValue;
}

export const sizeofWHV_VP_EXCEPTION_CONTEXT = 64;

export function allocWHV_VP_EXCEPTION_CONTEXT(data?: Partial<WHV_VP_EXCEPTION_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_VP_EXCEPTION_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.InstructionByteCount !== undefined) view.setUint8(0, Number(data.InstructionByteCount));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  // 0x10: pointer
  if (data?.InstructionBytes !== undefined) view.setBigUint64(16, data.InstructionBytes === null ? 0n : BigInt(util.toPointer(data.InstructionBytes)), true);
  // 0x18: pointer
  if (data?.ExceptionInfo !== undefined) view.setBigUint64(24, data.ExceptionInfo === null ? 0n : BigInt(util.toPointer(data.ExceptionInfo)), true);
  // 0x20: u8
  if (data?.ExceptionType !== undefined) view.setUint8(32, Number(data.ExceptionType));
  // 0x21: pad7
  // 0x28: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(40, data.Reserved2 === null ? 0n : BigInt(util.toPointer(data.Reserved2)), true);
  // 0x30: u32
  if (data?.ErrorCode !== undefined) view.setUint32(48, Number(data.ErrorCode), true);
  // 0x34: pad4
  // 0x38: u64
  if (data?.ExceptionParameter !== undefined) view.setBigUint64(56, BigInt(data.ExceptionParameter), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_X64_UNSUPPORTED_FEATURE_CONTEXT (size: 16)
 */
export interface WHV_X64_UNSUPPORTED_FEATURE_CONTEXT {
  /** Windows.Win32.System.Hypervisor.WHV_X64_UNSUPPORTED_FEATURE_CODE */
  FeatureCode: WHV_X64_UNSUPPORTED_FEATURE_CODE;
  /** u32 */
  Reserved: number;
  /** u64 */
  FeatureParameter: Deno.PointerValue;
}

export const sizeofWHV_X64_UNSUPPORTED_FEATURE_CONTEXT = 16;

export function allocWHV_X64_UNSUPPORTED_FEATURE_CONTEXT(data?: Partial<WHV_X64_UNSUPPORTED_FEATURE_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_X64_UNSUPPORTED_FEATURE_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.FeatureCode !== undefined) view.setInt32(0, Number(data.FeatureCode), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  // 0x08: u64
  if (data?.FeatureParameter !== undefined) view.setBigUint64(8, BigInt(data.FeatureParameter), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_RUN_VP_CANCELED_CONTEXT (size: 8)
 */
export interface WHV_RUN_VP_CANCELED_CONTEXT {
  /** Windows.Win32.System.Hypervisor.WHV_RUN_VP_CANCEL_REASON */
  CancelReason: WHV_RUN_VP_CANCEL_REASON;
}

export const sizeofWHV_RUN_VP_CANCELED_CONTEXT = 8;

export function allocWHV_RUN_VP_CANCELED_CONTEXT(data?: Partial<WHV_RUN_VP_CANCELED_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_RUN_VP_CANCELED_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.CancelReason !== undefined) view.setInt32(0, Number(data.CancelReason), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_X64_INTERRUPTION_DELIVERABLE_CONTEXT (size: 8)
 */
export interface WHV_X64_INTERRUPTION_DELIVERABLE_CONTEXT {
  /** Windows.Win32.System.Hypervisor.WHV_X64_PENDING_INTERRUPTION_TYPE */
  DeliverableType: WHV_X64_PENDING_INTERRUPTION_TYPE;
}

export const sizeofWHV_X64_INTERRUPTION_DELIVERABLE_CONTEXT = 8;

export function allocWHV_X64_INTERRUPTION_DELIVERABLE_CONTEXT(data?: Partial<WHV_X64_INTERRUPTION_DELIVERABLE_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_X64_INTERRUPTION_DELIVERABLE_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.DeliverableType !== undefined) view.setInt32(0, Number(data.DeliverableType), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_X64_APIC_EOI_CONTEXT (size: 8)
 */
export interface WHV_X64_APIC_EOI_CONTEXT {
  /** u32 */
  InterruptVector: number;
}

export const sizeofWHV_X64_APIC_EOI_CONTEXT = 8;

export function allocWHV_X64_APIC_EOI_CONTEXT(data?: Partial<WHV_X64_APIC_EOI_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_X64_APIC_EOI_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.InterruptVector !== undefined) view.setUint32(0, Number(data.InterruptVector), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_X64_RDTSC_INFO (size: 16)
 */
export interface WHV_X64_RDTSC_INFO {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  AsUINT64: Deno.PointerValue;
}

export const sizeofWHV_X64_RDTSC_INFO = 16;

export function allocWHV_X64_RDTSC_INFO(data?: Partial<WHV_X64_RDTSC_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_X64_RDTSC_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u64
  if (data?.AsUINT64 !== undefined) view.setBigUint64(8, BigInt(data.AsUINT64), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_X64_RDTSC_CONTEXT (size: 40)
 */
export interface WHV_X64_RDTSC_CONTEXT {
  /** u64 */
  TscAux: Deno.PointerValue;
  /** u64 */
  VirtualOffset: Deno.PointerValue;
  /** u64 */
  Tsc: Deno.PointerValue;
  /** u64 */
  ReferenceTime: Deno.PointerValue;
  /** Windows.Win32.System.Hypervisor.WHV_X64_RDTSC_INFO */
  RdtscInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWHV_X64_RDTSC_CONTEXT = 40;

export function allocWHV_X64_RDTSC_CONTEXT(data?: Partial<WHV_X64_RDTSC_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_X64_RDTSC_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.TscAux !== undefined) view.setBigUint64(0, BigInt(data.TscAux), true);
  // 0x08: u64
  if (data?.VirtualOffset !== undefined) view.setBigUint64(8, BigInt(data.VirtualOffset), true);
  // 0x10: u64
  if (data?.Tsc !== undefined) view.setBigUint64(16, BigInt(data.Tsc), true);
  // 0x18: u64
  if (data?.ReferenceTime !== undefined) view.setBigUint64(24, BigInt(data.ReferenceTime), true);
  // 0x20: pointer
  if (data?.RdtscInfo !== undefined) view.setBigUint64(32, data.RdtscInfo === null ? 0n : BigInt(util.toPointer(data.RdtscInfo)), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_X64_APIC_SMI_CONTEXT (size: 8)
 */
export interface WHV_X64_APIC_SMI_CONTEXT {
  /** u64 */
  ApicIcr: Deno.PointerValue;
}

export const sizeofWHV_X64_APIC_SMI_CONTEXT = 8;

export function allocWHV_X64_APIC_SMI_CONTEXT(data?: Partial<WHV_X64_APIC_SMI_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_X64_APIC_SMI_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.ApicIcr !== undefined) view.setBigUint64(0, BigInt(data.ApicIcr), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_HYPERCALL_CONTEXT (size: 80)
 */
export interface WHV_HYPERCALL_CONTEXT {
  /** u64 */
  Rax: Deno.PointerValue;
  /** u64 */
  Rbx: Deno.PointerValue;
  /** u64 */
  Rcx: Deno.PointerValue;
  /** u64 */
  Rdx: Deno.PointerValue;
  /** u64 */
  R8: Deno.PointerValue;
  /** u64 */
  Rsi: Deno.PointerValue;
  /** u64 */
  Rdi: Deno.PointerValue;
  /** u64 */
  Reserved0: Deno.PointerValue;
  /** array */
  XmmRegisters: Deno.PointerValue | null;
  /** array */
  Reserved1: Deno.PointerValue | null;
}

export const sizeofWHV_HYPERCALL_CONTEXT = 80;

export function allocWHV_HYPERCALL_CONTEXT(data?: Partial<WHV_HYPERCALL_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_HYPERCALL_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Rax !== undefined) view.setBigUint64(0, BigInt(data.Rax), true);
  // 0x08: u64
  if (data?.Rbx !== undefined) view.setBigUint64(8, BigInt(data.Rbx), true);
  // 0x10: u64
  if (data?.Rcx !== undefined) view.setBigUint64(16, BigInt(data.Rcx), true);
  // 0x18: u64
  if (data?.Rdx !== undefined) view.setBigUint64(24, BigInt(data.Rdx), true);
  // 0x20: u64
  if (data?.R8 !== undefined) view.setBigUint64(32, BigInt(data.R8), true);
  // 0x28: u64
  if (data?.Rsi !== undefined) view.setBigUint64(40, BigInt(data.Rsi), true);
  // 0x30: u64
  if (data?.Rdi !== undefined) view.setBigUint64(48, BigInt(data.Rdi), true);
  // 0x38: u64
  if (data?.Reserved0 !== undefined) view.setBigUint64(56, BigInt(data.Reserved0), true);
  // 0x40: pointer
  if (data?.XmmRegisters !== undefined) view.setBigUint64(64, data.XmmRegisters === null ? 0n : BigInt(util.toPointer(data.XmmRegisters)), true);
  // 0x48: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(72, data.Reserved1 === null ? 0n : BigInt(util.toPointer(data.Reserved1)), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_X64_APIC_INIT_SIPI_CONTEXT (size: 8)
 */
export interface WHV_X64_APIC_INIT_SIPI_CONTEXT {
  /** u64 */
  ApicIcr: Deno.PointerValue;
}

export const sizeofWHV_X64_APIC_INIT_SIPI_CONTEXT = 8;

export function allocWHV_X64_APIC_INIT_SIPI_CONTEXT(data?: Partial<WHV_X64_APIC_INIT_SIPI_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_X64_APIC_INIT_SIPI_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.ApicIcr !== undefined) view.setBigUint64(0, BigInt(data.ApicIcr), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_X64_APIC_WRITE_CONTEXT (size: 16)
 */
export interface WHV_X64_APIC_WRITE_CONTEXT {
  /** Windows.Win32.System.Hypervisor.WHV_X64_APIC_WRITE_TYPE */
  Type: WHV_X64_APIC_WRITE_TYPE;
  /** u32 */
  Reserved: number;
  /** u64 */
  WriteValue: Deno.PointerValue;
}

export const sizeofWHV_X64_APIC_WRITE_CONTEXT = 16;

export function allocWHV_X64_APIC_WRITE_CONTEXT(data?: Partial<WHV_X64_APIC_WRITE_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_X64_APIC_WRITE_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  // 0x08: u64
  if (data?.WriteValue !== undefined) view.setBigUint64(8, BigInt(data.WriteValue), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_RUN_VP_EXIT_CONTEXT (size: 24)
 */
export interface WHV_RUN_VP_EXIT_CONTEXT {
  /** Windows.Win32.System.Hypervisor.WHV_RUN_VP_EXIT_REASON */
  ExitReason: WHV_RUN_VP_EXIT_REASON;
  /** u32 */
  Reserved: number;
  /** Windows.Win32.System.Hypervisor.WHV_VP_EXIT_CONTEXT */
  VpContext: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWHV_RUN_VP_EXIT_CONTEXT = 24;

export function allocWHV_RUN_VP_EXIT_CONTEXT(data?: Partial<WHV_RUN_VP_EXIT_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_RUN_VP_EXIT_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ExitReason !== undefined) view.setInt32(0, Number(data.ExitReason), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  // 0x08: pointer
  if (data?.VpContext !== undefined) view.setBigUint64(8, data.VpContext === null ? 0n : BigInt(util.toPointer(data.VpContext)), true);
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_INTERRUPT_CONTROL (size: 16)
 */
export interface WHV_INTERRUPT_CONTROL {
  /** u64 */
  _bitfield: Deno.PointerValue;
  /** u32 */
  Destination: number;
  /** u32 */
  Vector: number;
}

export const sizeofWHV_INTERRUPT_CONTROL = 16;

export function allocWHV_INTERRUPT_CONTROL(data?: Partial<WHV_INTERRUPT_CONTROL>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_INTERRUPT_CONTROL);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?._bitfield !== undefined) view.setBigUint64(0, BigInt(data._bitfield), true);
  // 0x08: u32
  if (data?.Destination !== undefined) view.setUint32(8, Number(data.Destination), true);
  // 0x0c: u32
  if (data?.Vector !== undefined) view.setUint32(12, Number(data.Vector), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_DOORBELL_MATCH_DATA (size: 24)
 */
export interface WHV_DOORBELL_MATCH_DATA {
  /** u64 */
  GuestAddress: Deno.PointerValue;
  /** u64 */
  Value: Deno.PointerValue;
  /** u32 */
  Length: number;
  /** u32 */
  _bitfield: number;
}

export const sizeofWHV_DOORBELL_MATCH_DATA = 24;

export function allocWHV_DOORBELL_MATCH_DATA(data?: Partial<WHV_DOORBELL_MATCH_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_DOORBELL_MATCH_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.GuestAddress !== undefined) view.setBigUint64(0, BigInt(data.GuestAddress), true);
  // 0x08: u64
  if (data?.Value !== undefined) view.setBigUint64(8, BigInt(data.Value), true);
  // 0x10: u32
  if (data?.Length !== undefined) view.setUint32(16, Number(data.Length), true);
  // 0x14: u32
  if (data?._bitfield !== undefined) view.setUint32(20, Number(data._bitfield), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_PARTITION_MEMORY_COUNTERS (size: 24)
 */
export interface WHV_PARTITION_MEMORY_COUNTERS {
  /** u64 */
  Mapped4KPageCount: Deno.PointerValue;
  /** u64 */
  Mapped2MPageCount: Deno.PointerValue;
  /** u64 */
  Mapped1GPageCount: Deno.PointerValue;
}

export const sizeofWHV_PARTITION_MEMORY_COUNTERS = 24;

export function allocWHV_PARTITION_MEMORY_COUNTERS(data?: Partial<WHV_PARTITION_MEMORY_COUNTERS>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_PARTITION_MEMORY_COUNTERS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Mapped4KPageCount !== undefined) view.setBigUint64(0, BigInt(data.Mapped4KPageCount), true);
  // 0x08: u64
  if (data?.Mapped2MPageCount !== undefined) view.setBigUint64(8, BigInt(data.Mapped2MPageCount), true);
  // 0x10: u64
  if (data?.Mapped1GPageCount !== undefined) view.setBigUint64(16, BigInt(data.Mapped1GPageCount), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_PROCESSOR_RUNTIME_COUNTERS (size: 16)
 */
export interface WHV_PROCESSOR_RUNTIME_COUNTERS {
  /** u64 */
  TotalRuntime100ns: Deno.PointerValue;
  /** u64 */
  HypervisorRuntime100ns: Deno.PointerValue;
}

export const sizeofWHV_PROCESSOR_RUNTIME_COUNTERS = 16;

export function allocWHV_PROCESSOR_RUNTIME_COUNTERS(data?: Partial<WHV_PROCESSOR_RUNTIME_COUNTERS>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_PROCESSOR_RUNTIME_COUNTERS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.TotalRuntime100ns !== undefined) view.setBigUint64(0, BigInt(data.TotalRuntime100ns), true);
  // 0x08: u64
  if (data?.HypervisorRuntime100ns !== undefined) view.setBigUint64(8, BigInt(data.HypervisorRuntime100ns), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_PROCESSOR_INTERCEPT_COUNTER (size: 16)
 */
export interface WHV_PROCESSOR_INTERCEPT_COUNTER {
  /** u64 */
  Count: Deno.PointerValue;
  /** u64 */
  Time100ns: Deno.PointerValue;
}

export const sizeofWHV_PROCESSOR_INTERCEPT_COUNTER = 16;

export function allocWHV_PROCESSOR_INTERCEPT_COUNTER(data?: Partial<WHV_PROCESSOR_INTERCEPT_COUNTER>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_PROCESSOR_INTERCEPT_COUNTER);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Count !== undefined) view.setBigUint64(0, BigInt(data.Count), true);
  // 0x08: u64
  if (data?.Time100ns !== undefined) view.setBigUint64(8, BigInt(data.Time100ns), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_PROCESSOR_INTERCEPT_COUNTERS (size: 112)
 */
export interface WHV_PROCESSOR_INTERCEPT_COUNTERS {
  /** Windows.Win32.System.Hypervisor.WHV_PROCESSOR_INTERCEPT_COUNTER */
  PageInvalidations: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_PROCESSOR_INTERCEPT_COUNTER */
  ControlRegisterAccesses: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_PROCESSOR_INTERCEPT_COUNTER */
  IoInstructions: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_PROCESSOR_INTERCEPT_COUNTER */
  HaltInstructions: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_PROCESSOR_INTERCEPT_COUNTER */
  CpuidInstructions: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_PROCESSOR_INTERCEPT_COUNTER */
  MsrAccesses: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_PROCESSOR_INTERCEPT_COUNTER */
  OtherIntercepts: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_PROCESSOR_INTERCEPT_COUNTER */
  PendingInterrupts: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_PROCESSOR_INTERCEPT_COUNTER */
  EmulatedInstructions: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_PROCESSOR_INTERCEPT_COUNTER */
  DebugRegisterAccesses: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_PROCESSOR_INTERCEPT_COUNTER */
  PageFaultIntercepts: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_PROCESSOR_INTERCEPT_COUNTER */
  NestedPageFaultIntercepts: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_PROCESSOR_INTERCEPT_COUNTER */
  Hypercalls: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_PROCESSOR_INTERCEPT_COUNTER */
  RdpmcInstructions: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWHV_PROCESSOR_INTERCEPT_COUNTERS = 112;

export function allocWHV_PROCESSOR_INTERCEPT_COUNTERS(data?: Partial<WHV_PROCESSOR_INTERCEPT_COUNTERS>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_PROCESSOR_INTERCEPT_COUNTERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PageInvalidations !== undefined) view.setBigUint64(0, data.PageInvalidations === null ? 0n : BigInt(util.toPointer(data.PageInvalidations)), true);
  // 0x08: pointer
  if (data?.ControlRegisterAccesses !== undefined) view.setBigUint64(8, data.ControlRegisterAccesses === null ? 0n : BigInt(util.toPointer(data.ControlRegisterAccesses)), true);
  // 0x10: pointer
  if (data?.IoInstructions !== undefined) view.setBigUint64(16, data.IoInstructions === null ? 0n : BigInt(util.toPointer(data.IoInstructions)), true);
  // 0x18: pointer
  if (data?.HaltInstructions !== undefined) view.setBigUint64(24, data.HaltInstructions === null ? 0n : BigInt(util.toPointer(data.HaltInstructions)), true);
  // 0x20: pointer
  if (data?.CpuidInstructions !== undefined) view.setBigUint64(32, data.CpuidInstructions === null ? 0n : BigInt(util.toPointer(data.CpuidInstructions)), true);
  // 0x28: pointer
  if (data?.MsrAccesses !== undefined) view.setBigUint64(40, data.MsrAccesses === null ? 0n : BigInt(util.toPointer(data.MsrAccesses)), true);
  // 0x30: pointer
  if (data?.OtherIntercepts !== undefined) view.setBigUint64(48, data.OtherIntercepts === null ? 0n : BigInt(util.toPointer(data.OtherIntercepts)), true);
  // 0x38: pointer
  if (data?.PendingInterrupts !== undefined) view.setBigUint64(56, data.PendingInterrupts === null ? 0n : BigInt(util.toPointer(data.PendingInterrupts)), true);
  // 0x40: pointer
  if (data?.EmulatedInstructions !== undefined) view.setBigUint64(64, data.EmulatedInstructions === null ? 0n : BigInt(util.toPointer(data.EmulatedInstructions)), true);
  // 0x48: pointer
  if (data?.DebugRegisterAccesses !== undefined) view.setBigUint64(72, data.DebugRegisterAccesses === null ? 0n : BigInt(util.toPointer(data.DebugRegisterAccesses)), true);
  // 0x50: pointer
  if (data?.PageFaultIntercepts !== undefined) view.setBigUint64(80, data.PageFaultIntercepts === null ? 0n : BigInt(util.toPointer(data.PageFaultIntercepts)), true);
  // 0x58: pointer
  if (data?.NestedPageFaultIntercepts !== undefined) view.setBigUint64(88, data.NestedPageFaultIntercepts === null ? 0n : BigInt(util.toPointer(data.NestedPageFaultIntercepts)), true);
  // 0x60: pointer
  if (data?.Hypercalls !== undefined) view.setBigUint64(96, data.Hypercalls === null ? 0n : BigInt(util.toPointer(data.Hypercalls)), true);
  // 0x68: pointer
  if (data?.RdpmcInstructions !== undefined) view.setBigUint64(104, data.RdpmcInstructions === null ? 0n : BigInt(util.toPointer(data.RdpmcInstructions)), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_PROCESSOR_EVENT_COUNTERS (size: 24)
 */
export interface WHV_PROCESSOR_EVENT_COUNTERS {
  /** u64 */
  PageFaultCount: Deno.PointerValue;
  /** u64 */
  ExceptionCount: Deno.PointerValue;
  /** u64 */
  InterruptCount: Deno.PointerValue;
}

export const sizeofWHV_PROCESSOR_EVENT_COUNTERS = 24;

export function allocWHV_PROCESSOR_EVENT_COUNTERS(data?: Partial<WHV_PROCESSOR_EVENT_COUNTERS>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_PROCESSOR_EVENT_COUNTERS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.PageFaultCount !== undefined) view.setBigUint64(0, BigInt(data.PageFaultCount), true);
  // 0x08: u64
  if (data?.ExceptionCount !== undefined) view.setBigUint64(8, BigInt(data.ExceptionCount), true);
  // 0x10: u64
  if (data?.InterruptCount !== undefined) view.setBigUint64(16, BigInt(data.InterruptCount), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_PROCESSOR_APIC_COUNTERS (size: 40)
 */
export interface WHV_PROCESSOR_APIC_COUNTERS {
  /** u64 */
  MmioAccessCount: Deno.PointerValue;
  /** u64 */
  EoiAccessCount: Deno.PointerValue;
  /** u64 */
  TprAccessCount: Deno.PointerValue;
  /** u64 */
  SentIpiCount: Deno.PointerValue;
  /** u64 */
  SelfIpiCount: Deno.PointerValue;
}

export const sizeofWHV_PROCESSOR_APIC_COUNTERS = 40;

export function allocWHV_PROCESSOR_APIC_COUNTERS(data?: Partial<WHV_PROCESSOR_APIC_COUNTERS>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_PROCESSOR_APIC_COUNTERS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.MmioAccessCount !== undefined) view.setBigUint64(0, BigInt(data.MmioAccessCount), true);
  // 0x08: u64
  if (data?.EoiAccessCount !== undefined) view.setBigUint64(8, BigInt(data.EoiAccessCount), true);
  // 0x10: u64
  if (data?.TprAccessCount !== undefined) view.setBigUint64(16, BigInt(data.TprAccessCount), true);
  // 0x18: u64
  if (data?.SentIpiCount !== undefined) view.setBigUint64(24, BigInt(data.SentIpiCount), true);
  // 0x20: u64
  if (data?.SelfIpiCount !== undefined) view.setBigUint64(32, BigInt(data.SelfIpiCount), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_PROCESSOR_SYNTHETIC_FEATURES_COUNTERS (size: 48)
 */
export interface WHV_PROCESSOR_SYNTHETIC_FEATURES_COUNTERS {
  /** u64 */
  SyntheticInterruptsCount: Deno.PointerValue;
  /** u64 */
  LongSpinWaitHypercallsCount: Deno.PointerValue;
  /** u64 */
  OtherHypercallsCount: Deno.PointerValue;
  /** u64 */
  SyntheticInterruptHypercallsCount: Deno.PointerValue;
  /** u64 */
  VirtualInterruptHypercallsCount: Deno.PointerValue;
  /** u64 */
  VirtualMmuHypercallsCount: Deno.PointerValue;
}

export const sizeofWHV_PROCESSOR_SYNTHETIC_FEATURES_COUNTERS = 48;

export function allocWHV_PROCESSOR_SYNTHETIC_FEATURES_COUNTERS(data?: Partial<WHV_PROCESSOR_SYNTHETIC_FEATURES_COUNTERS>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_PROCESSOR_SYNTHETIC_FEATURES_COUNTERS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.SyntheticInterruptsCount !== undefined) view.setBigUint64(0, BigInt(data.SyntheticInterruptsCount), true);
  // 0x08: u64
  if (data?.LongSpinWaitHypercallsCount !== undefined) view.setBigUint64(8, BigInt(data.LongSpinWaitHypercallsCount), true);
  // 0x10: u64
  if (data?.OtherHypercallsCount !== undefined) view.setBigUint64(16, BigInt(data.OtherHypercallsCount), true);
  // 0x18: u64
  if (data?.SyntheticInterruptHypercallsCount !== undefined) view.setBigUint64(24, BigInt(data.SyntheticInterruptHypercallsCount), true);
  // 0x20: u64
  if (data?.VirtualInterruptHypercallsCount !== undefined) view.setBigUint64(32, BigInt(data.VirtualInterruptHypercallsCount), true);
  // 0x28: u64
  if (data?.VirtualMmuHypercallsCount !== undefined) view.setBigUint64(40, BigInt(data.VirtualMmuHypercallsCount), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_SYNIC_EVENT_PARAMETERS (size: 8)
 */
export interface WHV_SYNIC_EVENT_PARAMETERS {
  /** u32 */
  VpIndex: number;
  /** u8 */
  TargetSint: number;
  /** u8 */
  Reserved: number;
  /** u16 */
  FlagNumber: number;
}

export const sizeofWHV_SYNIC_EVENT_PARAMETERS = 8;

export function allocWHV_SYNIC_EVENT_PARAMETERS(data?: Partial<WHV_SYNIC_EVENT_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_SYNIC_EVENT_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.VpIndex !== undefined) view.setUint32(0, Number(data.VpIndex), true);
  // 0x04: u8
  if (data?.TargetSint !== undefined) view.setUint8(4, Number(data.TargetSint));
  // 0x05: u8
  if (data?.Reserved !== undefined) view.setUint8(5, Number(data.Reserved));
  // 0x06: u16
  if (data?.FlagNumber !== undefined) view.setUint16(6, Number(data.FlagNumber), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.LUID (size: 8)
 */
export interface LUID {
  /** u32 */
  LowPart: number;
  /** i32 */
  HighPart: number;
}

export const sizeofLUID = 8;

export function allocLUID(data?: Partial<LUID>): Uint8Array {
  const buf = new Uint8Array(sizeofLUID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.LowPart !== undefined) view.setUint32(0, Number(data.LowPart), true);
  // 0x04: i32
  if (data?.HighPart !== undefined) view.setInt32(4, Number(data.HighPart), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_SRIOV_RESOURCE_DESCRIPTOR (size: 24)
 */
export interface WHV_SRIOV_RESOURCE_DESCRIPTOR {
  /** array */
  PnpInstanceId: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LUID */
  VirtualFunctionId: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  VirtualFunctionIndex: number;
  /** u16 */
  Reserved: number;
}

export const sizeofWHV_SRIOV_RESOURCE_DESCRIPTOR = 24;

export function allocWHV_SRIOV_RESOURCE_DESCRIPTOR(data?: Partial<WHV_SRIOV_RESOURCE_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_SRIOV_RESOURCE_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PnpInstanceId !== undefined) view.setBigUint64(0, data.PnpInstanceId === null ? 0n : BigInt(util.toPointer(data.PnpInstanceId)), true);
  // 0x08: pointer
  if (data?.VirtualFunctionId !== undefined) view.setBigUint64(8, data.VirtualFunctionId === null ? 0n : BigInt(util.toPointer(data.VirtualFunctionId)), true);
  // 0x10: u16
  if (data?.VirtualFunctionIndex !== undefined) view.setUint16(16, Number(data.VirtualFunctionIndex), true);
  // 0x12: u16
  if (data?.Reserved !== undefined) view.setUint16(18, Number(data.Reserved), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_VPCI_DEVICE_NOTIFICATION (size: 16)
 */
export interface WHV_VPCI_DEVICE_NOTIFICATION {
  /** Windows.Win32.System.Hypervisor.WHV_VPCI_DEVICE_NOTIFICATION_TYPE */
  NotificationType: WHV_VPCI_DEVICE_NOTIFICATION_TYPE;
  /** u32 */
  Reserved1: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWHV_VPCI_DEVICE_NOTIFICATION = 16;

export function allocWHV_VPCI_DEVICE_NOTIFICATION(data?: Partial<WHV_VPCI_DEVICE_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_VPCI_DEVICE_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.NotificationType !== undefined) view.setInt32(0, Number(data.NotificationType), true);
  // 0x04: u32
  if (data?.Reserved1 !== undefined) view.setUint32(4, Number(data.Reserved1), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_VPCI_HARDWARE_IDS (size: 16)
 */
export interface WHV_VPCI_HARDWARE_IDS {
  /** u16 */
  VendorID: number;
  /** u16 */
  DeviceID: number;
  /** u8 */
  RevisionID: number;
  /** u8 */
  ProgIf: number;
  /** u8 */
  SubClass: number;
  /** u8 */
  BaseClass: number;
  /** u16 */
  SubVendorID: number;
  /** u16 */
  SubSystemID: number;
}

export const sizeofWHV_VPCI_HARDWARE_IDS = 16;

export function allocWHV_VPCI_HARDWARE_IDS(data?: Partial<WHV_VPCI_HARDWARE_IDS>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_VPCI_HARDWARE_IDS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.VendorID !== undefined) view.setUint16(0, Number(data.VendorID), true);
  // 0x02: u16
  if (data?.DeviceID !== undefined) view.setUint16(2, Number(data.DeviceID), true);
  // 0x04: u8
  if (data?.RevisionID !== undefined) view.setUint8(4, Number(data.RevisionID));
  // 0x05: u8
  if (data?.ProgIf !== undefined) view.setUint8(5, Number(data.ProgIf));
  // 0x06: u8
  if (data?.SubClass !== undefined) view.setUint8(6, Number(data.SubClass));
  // 0x07: u8
  if (data?.BaseClass !== undefined) view.setUint8(7, Number(data.BaseClass));
  // 0x08: u16
  if (data?.SubVendorID !== undefined) view.setUint16(8, Number(data.SubVendorID), true);
  // 0x0a: u16
  if (data?.SubSystemID !== undefined) view.setUint16(10, Number(data.SubSystemID), true);
  // 0x0c: pad4
  return buf;
}

export type WHV_VPCI_PROBED_BARS = Deno.PointerValue | null;

/**
 * Windows.Win32.System.Hypervisor.WHV_VPCI_MMIO_MAPPING (size: 32)
 */
export interface WHV_VPCI_MMIO_MAPPING {
  /** Windows.Win32.System.Hypervisor.WHV_VPCI_DEVICE_REGISTER_SPACE */
  Location: WHV_VPCI_DEVICE_REGISTER_SPACE;
  /** Windows.Win32.System.Hypervisor.WHV_VPCI_MMIO_RANGE_FLAGS */
  Flags: WHV_VPCI_MMIO_RANGE_FLAGS;
  /** u64 */
  SizeInBytes: Deno.PointerValue;
  /** u64 */
  OffsetInBytes: Deno.PointerValue;
  /** ptr */
  VirtualAddress: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWHV_VPCI_MMIO_MAPPING = 32;

export function allocWHV_VPCI_MMIO_MAPPING(data?: Partial<WHV_VPCI_MMIO_MAPPING>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_VPCI_MMIO_MAPPING);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Location !== undefined) view.setInt32(0, Number(data.Location), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u64
  if (data?.SizeInBytes !== undefined) view.setBigUint64(8, BigInt(data.SizeInBytes), true);
  // 0x10: u64
  if (data?.OffsetInBytes !== undefined) view.setBigUint64(16, BigInt(data.OffsetInBytes), true);
  // 0x18: pointer
  if (data?.VirtualAddress !== undefined) view.setBigUint64(24, data.VirtualAddress === null ? 0n : BigInt(util.toPointer(data.VirtualAddress)), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_VPCI_DEVICE_REGISTER (size: 16)
 */
export interface WHV_VPCI_DEVICE_REGISTER {
  /** Windows.Win32.System.Hypervisor.WHV_VPCI_DEVICE_REGISTER_SPACE */
  Location: WHV_VPCI_DEVICE_REGISTER_SPACE;
  /** u32 */
  SizeInBytes: number;
  /** u64 */
  OffsetInBytes: Deno.PointerValue;
}

export const sizeofWHV_VPCI_DEVICE_REGISTER = 16;

export function allocWHV_VPCI_DEVICE_REGISTER(data?: Partial<WHV_VPCI_DEVICE_REGISTER>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_VPCI_DEVICE_REGISTER);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Location !== undefined) view.setInt32(0, Number(data.Location), true);
  // 0x04: u32
  if (data?.SizeInBytes !== undefined) view.setUint32(4, Number(data.SizeInBytes), true);
  // 0x08: u64
  if (data?.OffsetInBytes !== undefined) view.setBigUint64(8, BigInt(data.OffsetInBytes), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_VPCI_INTERRUPT_TARGET (size: 24)
 */
export interface WHV_VPCI_INTERRUPT_TARGET {
  /** u32 */
  Vector: number;
  /** Windows.Win32.System.Hypervisor.WHV_VPCI_INTERRUPT_TARGET_FLAGS */
  Flags: WHV_VPCI_INTERRUPT_TARGET_FLAGS;
  /** u32 */
  ProcessorCount: number;
  /** array */
  Processors: Deno.PointerValue | null;
}

export const sizeofWHV_VPCI_INTERRUPT_TARGET = 24;

export function allocWHV_VPCI_INTERRUPT_TARGET(data?: Partial<WHV_VPCI_INTERRUPT_TARGET>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_VPCI_INTERRUPT_TARGET);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Vector !== undefined) view.setUint32(0, Number(data.Vector), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.ProcessorCount !== undefined) view.setUint32(8, Number(data.ProcessorCount), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Processors !== undefined) view.setBigUint64(16, data.Processors === null ? 0n : BigInt(util.toPointer(data.Processors)), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_TRIGGER_PARAMETERS (size: 16)
 */
export interface WHV_TRIGGER_PARAMETERS {
  /** Windows.Win32.System.Hypervisor.WHV_TRIGGER_TYPE */
  TriggerType: WHV_TRIGGER_TYPE;
  /** u32 */
  Reserved: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWHV_TRIGGER_PARAMETERS = 16;

export function allocWHV_TRIGGER_PARAMETERS(data?: Partial<WHV_TRIGGER_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_TRIGGER_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.TriggerType !== undefined) view.setInt32(0, Number(data.TriggerType), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_VIRTUAL_PROCESSOR_PROPERTY (size: 16)
 */
export interface WHV_VIRTUAL_PROCESSOR_PROPERTY {
  /** Windows.Win32.System.Hypervisor.WHV_VIRTUAL_PROCESSOR_PROPERTY_CODE */
  PropertyCode: WHV_VIRTUAL_PROCESSOR_PROPERTY_CODE;
  /** u32 */
  Reserved: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWHV_VIRTUAL_PROCESSOR_PROPERTY = 16;

export function allocWHV_VIRTUAL_PROCESSOR_PROPERTY(data?: Partial<WHV_VIRTUAL_PROCESSOR_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_VIRTUAL_PROCESSOR_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.PropertyCode !== undefined) view.setInt32(0, Number(data.PropertyCode), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_NOTIFICATION_PORT_PARAMETERS (size: 16)
 */
export interface WHV_NOTIFICATION_PORT_PARAMETERS {
  /** Windows.Win32.System.Hypervisor.WHV_NOTIFICATION_PORT_TYPE */
  NotificationPortType: WHV_NOTIFICATION_PORT_TYPE;
  /** u32 */
  Reserved: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWHV_NOTIFICATION_PORT_PARAMETERS = 16;

export function allocWHV_NOTIFICATION_PORT_PARAMETERS(data?: Partial<WHV_NOTIFICATION_PORT_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_NOTIFICATION_PORT_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.NotificationPortType !== undefined) view.setInt32(0, Number(data.NotificationPortType), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_EMULATOR_STATUS (size: 16)
 */
export interface WHV_EMULATOR_STATUS {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  AsUINT32: number;
}

export const sizeofWHV_EMULATOR_STATUS = 16;

export function allocWHV_EMULATOR_STATUS(data?: Partial<WHV_EMULATOR_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_EMULATOR_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u32
  if (data?.AsUINT32 !== undefined) view.setUint32(8, Number(data.AsUINT32), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_EMULATOR_MEMORY_ACCESS_INFO (size: 24)
 */
export interface WHV_EMULATOR_MEMORY_ACCESS_INFO {
  /** u64 */
  GpaAddress: Deno.PointerValue;
  /** u8 */
  Direction: number;
  /** u8 */
  AccessSize: number;
  /** array */
  Data: Deno.PointerValue | null;
}

export const sizeofWHV_EMULATOR_MEMORY_ACCESS_INFO = 24;

export function allocWHV_EMULATOR_MEMORY_ACCESS_INFO(data?: Partial<WHV_EMULATOR_MEMORY_ACCESS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_EMULATOR_MEMORY_ACCESS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.GpaAddress !== undefined) view.setBigUint64(0, BigInt(data.GpaAddress), true);
  // 0x08: u8
  if (data?.Direction !== undefined) view.setUint8(8, Number(data.Direction));
  // 0x09: u8
  if (data?.AccessSize !== undefined) view.setUint8(9, Number(data.AccessSize));
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.Data !== undefined) view.setBigUint64(16, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_EMULATOR_IO_ACCESS_INFO (size: 16)
 */
export interface WHV_EMULATOR_IO_ACCESS_INFO {
  /** u8 */
  Direction: number;
  /** u16 */
  Port: number;
  /** u16 */
  AccessSize: number;
  /** u32 */
  Data: number;
}

export const sizeofWHV_EMULATOR_IO_ACCESS_INFO = 16;

export function allocWHV_EMULATOR_IO_ACCESS_INFO(data?: Partial<WHV_EMULATOR_IO_ACCESS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_EMULATOR_IO_ACCESS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Direction !== undefined) view.setUint8(0, Number(data.Direction));
  // 0x01: u16
  if (data?.Port !== undefined) view.setUint16(1, Number(data.Port), true);
  // 0x03: u16
  if (data?.AccessSize !== undefined) view.setUint16(3, Number(data.AccessSize), true);
  // 0x05: u32
  if (data?.Data !== undefined) view.setUint32(5, Number(data.Data), true);
  // 0x09: pad7
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.WHV_EMULATOR_CALLBACKS (size: 48)
 */
export interface WHV_EMULATOR_CALLBACKS {
  /** u32 */
  Size: number;
  /** u32 */
  Reserved: number;
  /** Windows.Win32.System.Hypervisor.WHV_EMULATOR_IO_PORT_CALLBACK */
  WHvEmulatorIoPortCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_EMULATOR_MEMORY_CALLBACK */
  WHvEmulatorMemoryCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_EMULATOR_GET_VIRTUAL_PROCESSOR_REGISTERS_CALLBACK */
  WHvEmulatorGetVirtualProcessorRegisters: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_EMULATOR_SET_VIRTUAL_PROCESSOR_REGISTERS_CALLBACK */
  WHvEmulatorSetVirtualProcessorRegisters: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.WHV_EMULATOR_TRANSLATE_GVA_PAGE_CALLBACK */
  WHvEmulatorTranslateGvaPage: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWHV_EMULATOR_CALLBACKS = 48;

export function allocWHV_EMULATOR_CALLBACKS(data?: Partial<WHV_EMULATOR_CALLBACKS>): Uint8Array {
  const buf = new Uint8Array(sizeofWHV_EMULATOR_CALLBACKS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  // 0x08: pointer
  if (data?.WHvEmulatorIoPortCallback !== undefined) view.setBigUint64(8, data.WHvEmulatorIoPortCallback === null ? 0n : BigInt(util.toPointer(data.WHvEmulatorIoPortCallback)), true);
  // 0x10: pointer
  if (data?.WHvEmulatorMemoryCallback !== undefined) view.setBigUint64(16, data.WHvEmulatorMemoryCallback === null ? 0n : BigInt(util.toPointer(data.WHvEmulatorMemoryCallback)), true);
  // 0x18: pointer
  if (data?.WHvEmulatorGetVirtualProcessorRegisters !== undefined) view.setBigUint64(24, data.WHvEmulatorGetVirtualProcessorRegisters === null ? 0n : BigInt(util.toPointer(data.WHvEmulatorGetVirtualProcessorRegisters)), true);
  // 0x20: pointer
  if (data?.WHvEmulatorSetVirtualProcessorRegisters !== undefined) view.setBigUint64(32, data.WHvEmulatorSetVirtualProcessorRegisters === null ? 0n : BigInt(util.toPointer(data.WHvEmulatorSetVirtualProcessorRegisters)), true);
  // 0x28: pointer
  if (data?.WHvEmulatorTranslateGvaPage !== undefined) view.setBigUint64(40, data.WHvEmulatorTranslateGvaPage === null ? 0n : BigInt(util.toPointer(data.WHvEmulatorTranslateGvaPage)), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.SOCKADDR_HV (size: 24)
 */
export interface SOCKADDR_HV {
  /** u16 */
  Family: number;
  /** u16 */
  Reserved: number;
  /** System.Guid */
  VmId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ServiceId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSOCKADDR_HV = 24;

export function allocSOCKADDR_HV(data?: Partial<SOCKADDR_HV>): Uint8Array {
  const buf = new Uint8Array(sizeofSOCKADDR_HV);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Family !== undefined) view.setUint16(0, Number(data.Family), true);
  // 0x02: u16
  if (data?.Reserved !== undefined) view.setUint16(2, Number(data.Reserved), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.VmId !== undefined) view.setBigUint64(8, data.VmId === null ? 0n : BigInt(util.toPointer(data.VmId)), true);
  // 0x10: pointer
  if (data?.ServiceId !== undefined) view.setBigUint64(16, data.ServiceId === null ? 0n : BigInt(util.toPointer(data.ServiceId)), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.HVSOCKET_ADDRESS_INFO (size: 32)
 */
export interface HVSOCKET_ADDRESS_INFO {
  /** System.Guid */
  SystemId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  VirtualMachineId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SiloId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
}

export const sizeofHVSOCKET_ADDRESS_INFO = 32;

export function allocHVSOCKET_ADDRESS_INFO(data?: Partial<HVSOCKET_ADDRESS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHVSOCKET_ADDRESS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SystemId !== undefined) view.setBigUint64(0, data.SystemId === null ? 0n : BigInt(util.toPointer(data.SystemId)), true);
  // 0x08: pointer
  if (data?.VirtualMachineId !== undefined) view.setBigUint64(8, data.VirtualMachineId === null ? 0n : BigInt(util.toPointer(data.VirtualMachineId)), true);
  // 0x10: pointer
  if (data?.SiloId !== undefined) view.setBigUint64(16, data.SiloId === null ? 0n : BigInt(util.toPointer(data.SiloId)), true);
  // 0x18: u32
  if (data?.Flags !== undefined) view.setUint32(24, Number(data.Flags), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.VM_GENCOUNTER (size: 16)
 */
export interface VM_GENCOUNTER {
  /** u64 */
  GenerationCount: Deno.PointerValue;
  /** u64 */
  GenerationCountHigh: Deno.PointerValue;
}

export const sizeofVM_GENCOUNTER = 16;

export function allocVM_GENCOUNTER(data?: Partial<VM_GENCOUNTER>): Uint8Array {
  const buf = new Uint8Array(sizeofVM_GENCOUNTER);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.GenerationCount !== undefined) view.setBigUint64(0, BigInt(data.GenerationCount), true);
  // 0x08: u64
  if (data?.GenerationCountHigh !== undefined) view.setBigUint64(8, BigInt(data.GenerationCountHigh), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.HDV_PCI_PNP_ID (size: 16)
 */
export interface HDV_PCI_PNP_ID {
  /** u16 */
  VendorID: number;
  /** u16 */
  DeviceID: number;
  /** u8 */
  RevisionID: number;
  /** u8 */
  ProgIf: number;
  /** u8 */
  SubClass: number;
  /** u8 */
  BaseClass: number;
  /** u16 */
  SubVendorID: number;
  /** u16 */
  SubSystemID: number;
}

export const sizeofHDV_PCI_PNP_ID = 16;

export function allocHDV_PCI_PNP_ID(data?: Partial<HDV_PCI_PNP_ID>): Uint8Array {
  const buf = new Uint8Array(sizeofHDV_PCI_PNP_ID);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.VendorID !== undefined) view.setUint16(0, Number(data.VendorID), true);
  // 0x02: u16
  if (data?.DeviceID !== undefined) view.setUint16(2, Number(data.DeviceID), true);
  // 0x04: u8
  if (data?.RevisionID !== undefined) view.setUint8(4, Number(data.RevisionID));
  // 0x05: u8
  if (data?.ProgIf !== undefined) view.setUint8(5, Number(data.ProgIf));
  // 0x06: u8
  if (data?.SubClass !== undefined) view.setUint8(6, Number(data.SubClass));
  // 0x07: u8
  if (data?.BaseClass !== undefined) view.setUint8(7, Number(data.BaseClass));
  // 0x08: u16
  if (data?.SubVendorID !== undefined) view.setUint16(8, Number(data.SubVendorID), true);
  // 0x0a: u16
  if (data?.SubSystemID !== undefined) view.setUint16(10, Number(data.SubSystemID), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.HDV_PCI_DEVICE_INTERFACE (size: 88)
 */
export interface HDV_PCI_DEVICE_INTERFACE {
  /** Windows.Win32.System.Hypervisor.HDV_PCI_INTERFACE_VERSION */
  Version: HDV_PCI_INTERFACE_VERSION;
  /** Windows.Win32.System.Hypervisor.HDV_PCI_DEVICE_INITIALIZE */
  Initialize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.HDV_PCI_DEVICE_TEARDOWN */
  Teardown: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.HDV_PCI_DEVICE_SET_CONFIGURATION */
  SetConfiguration: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.HDV_PCI_DEVICE_GET_DETAILS */
  GetDetails: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.HDV_PCI_DEVICE_START */
  Start: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.HDV_PCI_DEVICE_STOP */
  Stop: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.HDV_PCI_READ_CONFIG_SPACE */
  ReadConfigSpace: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.HDV_PCI_WRITE_CONFIG_SPACE */
  WriteConfigSpace: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.HDV_PCI_READ_INTERCEPTED_MEMORY */
  ReadInterceptedMemory: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Hypervisor.HDV_PCI_WRITE_INTERCEPTED_MEMORY */
  WriteInterceptedMemory: Uint8Array | Deno.PointerValue | null;
}

export const sizeofHDV_PCI_DEVICE_INTERFACE = 88;

export function allocHDV_PCI_DEVICE_INTERFACE(data?: Partial<HDV_PCI_DEVICE_INTERFACE>): Uint8Array {
  const buf = new Uint8Array(sizeofHDV_PCI_DEVICE_INTERFACE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Version !== undefined) view.setInt32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Initialize !== undefined) view.setBigUint64(8, data.Initialize === null ? 0n : BigInt(util.toPointer(data.Initialize)), true);
  // 0x10: pointer
  if (data?.Teardown !== undefined) view.setBigUint64(16, data.Teardown === null ? 0n : BigInt(util.toPointer(data.Teardown)), true);
  // 0x18: pointer
  if (data?.SetConfiguration !== undefined) view.setBigUint64(24, data.SetConfiguration === null ? 0n : BigInt(util.toPointer(data.SetConfiguration)), true);
  // 0x20: pointer
  if (data?.GetDetails !== undefined) view.setBigUint64(32, data.GetDetails === null ? 0n : BigInt(util.toPointer(data.GetDetails)), true);
  // 0x28: pointer
  if (data?.Start !== undefined) view.setBigUint64(40, data.Start === null ? 0n : BigInt(util.toPointer(data.Start)), true);
  // 0x30: pointer
  if (data?.Stop !== undefined) view.setBigUint64(48, data.Stop === null ? 0n : BigInt(util.toPointer(data.Stop)), true);
  // 0x38: pointer
  if (data?.ReadConfigSpace !== undefined) view.setBigUint64(56, data.ReadConfigSpace === null ? 0n : BigInt(util.toPointer(data.ReadConfigSpace)), true);
  // 0x40: pointer
  if (data?.WriteConfigSpace !== undefined) view.setBigUint64(64, data.WriteConfigSpace === null ? 0n : BigInt(util.toPointer(data.WriteConfigSpace)), true);
  // 0x48: pointer
  if (data?.ReadInterceptedMemory !== undefined) view.setBigUint64(72, data.ReadInterceptedMemory === null ? 0n : BigInt(util.toPointer(data.ReadInterceptedMemory)), true);
  // 0x50: pointer
  if (data?.WriteInterceptedMemory !== undefined) view.setBigUint64(80, data.WriteInterceptedMemory === null ? 0n : BigInt(util.toPointer(data.WriteInterceptedMemory)), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.GPA_MEMORY_CHUNK (size: 16)
 */
export interface GPA_MEMORY_CHUNK {
  /** u64 */
  GuestPhysicalStartPageIndex: Deno.PointerValue;
  /** u64 */
  PageCount: Deno.PointerValue;
}

export const sizeofGPA_MEMORY_CHUNK = 16;

export function allocGPA_MEMORY_CHUNK(data?: Partial<GPA_MEMORY_CHUNK>): Uint8Array {
  const buf = new Uint8Array(sizeofGPA_MEMORY_CHUNK);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.GuestPhysicalStartPageIndex !== undefined) view.setBigUint64(0, BigInt(data.GuestPhysicalStartPageIndex), true);
  // 0x08: u64
  if (data?.PageCount !== undefined) view.setBigUint64(8, BigInt(data.PageCount), true);
  return buf;
}

/**
 * _ClosedSource_e__Struct (size: 8)
 */
export interface _ClosedSource_e__Struct {
  /** u64 */
  _bitfield: Deno.PointerValue;
}

export const sizeof_ClosedSource_e__Struct = 8;

export function alloc_ClosedSource_e__Struct(data?: Partial<_ClosedSource_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_ClosedSource_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?._bitfield !== undefined) view.setBigUint64(0, BigInt(data._bitfield), true);
  return buf;
}

/**
 * _OpenSource_e__Struct (size: 8)
 */
export interface _OpenSource_e__Struct {
  /** u64 */
  _bitfield: Deno.PointerValue;
}

export const sizeof_OpenSource_e__Struct = 8;

export function alloc_OpenSource_e__Struct(data?: Partial<_OpenSource_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_OpenSource_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?._bitfield !== undefined) view.setBigUint64(0, BigInt(data._bitfield), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.GUEST_OS_INFO (size: 24)
 */
export interface GUEST_OS_INFO {
  /** u64 */
  AsUINT64: Deno.PointerValue;
  /** _ClosedSource_e__Struct */
  ClosedSource: Uint8Array | Deno.PointerValue | null;
  /** _OpenSource_e__Struct */
  OpenSource: Uint8Array | Deno.PointerValue | null;
}

export const sizeofGUEST_OS_INFO = 24;

export function allocGUEST_OS_INFO(data?: Partial<GUEST_OS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofGUEST_OS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.AsUINT64 !== undefined) view.setBigUint64(0, BigInt(data.AsUINT64), true);
  // 0x08: pointer
  if (data?.ClosedSource !== undefined) view.setBigUint64(8, data.ClosedSource === null ? 0n : BigInt(util.toPointer(data.ClosedSource)), true);
  // 0x10: pointer
  if (data?.OpenSource !== undefined) view.setBigUint64(16, data.OpenSource === null ? 0n : BigInt(util.toPointer(data.OpenSource)), true);
  return buf;
}

/**
 * _Reg128_e__Struct (size: 16)
 */
export interface _Reg128_e__Struct {
  /** u64 */
  Low64: Deno.PointerValue;
  /** u64 */
  High64: Deno.PointerValue;
}

export const sizeof_Reg128_e__Struct = 16;

export function alloc_Reg128_e__Struct(data?: Partial<_Reg128_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Reg128_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Low64 !== undefined) view.setBigUint64(0, BigInt(data.Low64), true);
  // 0x08: u64
  if (data?.High64 !== undefined) view.setBigUint64(8, BigInt(data.High64), true);
  return buf;
}

/**
 * _Segment_e__Struct (size: 24)
 */
export interface _Segment_e__Struct {
  /** u64 */
  Base: Deno.PointerValue;
  /** u32 */
  Limit: number;
  /** u16 */
  Selector: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Segment_e__Struct = 24;

export function alloc_Segment_e__Struct(data?: Partial<_Segment_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Segment_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Base !== undefined) view.setBigUint64(0, BigInt(data.Base), true);
  // 0x08: u32
  if (data?.Limit !== undefined) view.setUint32(8, Number(data.Limit), true);
  // 0x0c: u16
  if (data?.Selector !== undefined) view.setUint16(12, Number(data.Selector), true);
  // 0x0e: pad2
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * _Table_e__Struct (size: 16)
 */
export interface _Table_e__Struct {
  /** u16 */
  Limit: number;
  /** u64 */
  Base: Deno.PointerValue;
}

export const sizeof_Table_e__Struct = 16;

export function alloc_Table_e__Struct(data?: Partial<_Table_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Table_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Limit !== undefined) view.setUint16(0, Number(data.Limit), true);
  // 0x02: pad6
  // 0x08: u64
  if (data?.Base !== undefined) view.setBigUint64(8, BigInt(data.Base), true);
  return buf;
}

/**
 * _FpControlStatus_e__Struct (size: 16)
 */
export interface _FpControlStatus_e__Struct {
  /** u16 */
  FpControl: number;
  /** u16 */
  FpStatus: number;
  /** u8 */
  FpTag: number;
  /** u8 */
  Reserved: number;
  /** u16 */
  LastFpOp: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_FpControlStatus_e__Struct = 16;

export function alloc_FpControlStatus_e__Struct(data?: Partial<_FpControlStatus_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_FpControlStatus_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.FpControl !== undefined) view.setUint16(0, Number(data.FpControl), true);
  // 0x02: u16
  if (data?.FpStatus !== undefined) view.setUint16(2, Number(data.FpStatus), true);
  // 0x04: u8
  if (data?.FpTag !== undefined) view.setUint8(4, Number(data.FpTag));
  // 0x05: u8
  if (data?.Reserved !== undefined) view.setUint8(5, Number(data.Reserved));
  // 0x06: u16
  if (data?.LastFpOp !== undefined) view.setUint16(6, Number(data.LastFpOp), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * _XmmControlStatus_e__Struct (size: 16)
 */
export interface _XmmControlStatus_e__Struct {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  XmmStatusControl: number;
  /** u32 */
  XmmStatusControlMask: number;
}

export const sizeof_XmmControlStatus_e__Struct = 16;

export function alloc_XmmControlStatus_e__Struct(data?: Partial<_XmmControlStatus_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_XmmControlStatus_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u32
  if (data?.XmmStatusControl !== undefined) view.setUint32(8, Number(data.XmmStatusControl), true);
  // 0x0c: u32
  if (data?.XmmStatusControlMask !== undefined) view.setUint32(12, Number(data.XmmStatusControlMask), true);
  return buf;
}

/**
 * _X64_e__Union (size: 32)
 */
export interface _X64_e__Union {
  /** _Segment_e__Struct */
  Segment: Uint8Array | Deno.PointerValue | null;
  /** _Table_e__Struct */
  Table: Uint8Array | Deno.PointerValue | null;
  /** _FpControlStatus_e__Struct */
  FpControlStatus: Uint8Array | Deno.PointerValue | null;
  /** _XmmControlStatus_e__Struct */
  XmmControlStatus: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_X64_e__Union = 32;

export function alloc_X64_e__Union(data?: Partial<_X64_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_X64_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Segment !== undefined) view.setBigUint64(0, data.Segment === null ? 0n : BigInt(util.toPointer(data.Segment)), true);
  // 0x08: pointer
  if (data?.Table !== undefined) view.setBigUint64(8, data.Table === null ? 0n : BigInt(util.toPointer(data.Table)), true);
  // 0x10: pointer
  if (data?.FpControlStatus !== undefined) view.setBigUint64(16, data.FpControlStatus === null ? 0n : BigInt(util.toPointer(data.FpControlStatus)), true);
  // 0x18: pointer
  if (data?.XmmControlStatus !== undefined) view.setBigUint64(24, data.XmmControlStatus === null ? 0n : BigInt(util.toPointer(data.XmmControlStatus)), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.VIRTUAL_PROCESSOR_REGISTER (size: 32)
 */
export interface VIRTUAL_PROCESSOR_REGISTER {
  /** u64 */
  Reg64: Deno.PointerValue;
  /** u32 */
  Reg32: number;
  /** u16 */
  Reg16: number;
  /** u8 */
  Reg8: number;
  /** _Reg128_e__Struct */
  Reg128: Uint8Array | Deno.PointerValue | null;
  /** _X64_e__Union */
  X64: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVIRTUAL_PROCESSOR_REGISTER = 32;

export function allocVIRTUAL_PROCESSOR_REGISTER(data?: Partial<VIRTUAL_PROCESSOR_REGISTER>): Uint8Array {
  const buf = new Uint8Array(sizeofVIRTUAL_PROCESSOR_REGISTER);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Reg64 !== undefined) view.setBigUint64(0, BigInt(data.Reg64), true);
  // 0x08: u32
  if (data?.Reg32 !== undefined) view.setUint32(8, Number(data.Reg32), true);
  // 0x0c: u16
  if (data?.Reg16 !== undefined) view.setUint16(12, Number(data.Reg16), true);
  // 0x0e: u8
  if (data?.Reg8 !== undefined) view.setUint8(14, Number(data.Reg8));
  // 0x0f: pad1
  // 0x10: pointer
  if (data?.Reg128 !== undefined) view.setBigUint64(16, data.Reg128 === null ? 0n : BigInt(util.toPointer(data.Reg128)), true);
  // 0x18: pointer
  if (data?.X64 !== undefined) view.setBigUint64(24, data.X64 === null ? 0n : BigInt(util.toPointer(data.X64)), true);
  return buf;
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.System.Hypervisor.DOS_IMAGE_INFO (size: 24)
 */
export interface DOS_IMAGE_INFO {
  /** Windows.Win32.Foundation.PSTR */
  PdbName: string | null;
  /** u64 */
  ImageBaseAddress: Deno.PointerValue;
  /** u32 */
  ImageSize: number;
  /** u32 */
  Timestamp: number;
}

export const sizeofDOS_IMAGE_INFO = 24;

export function allocDOS_IMAGE_INFO(data?: Partial<DOS_IMAGE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDOS_IMAGE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.PdbName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.PdbName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u64
  if (data?.ImageBaseAddress !== undefined) view.setBigUint64(8, BigInt(data.ImageBaseAddress), true);
  // 0x10: u32
  if (data?.ImageSize !== undefined) view.setUint32(16, Number(data.ImageSize), true);
  // 0x14: u32
  if (data?.Timestamp !== undefined) view.setUint32(20, Number(data.Timestamp), true);
  return buf;
}

/**
 * Windows.Win32.System.Hypervisor.MODULE_INFO (size: 16)
 */
export interface MODULE_INFO {
  /** Windows.Win32.Foundation.PSTR */
  ProcessImageName: string | null;
  /** Windows.Win32.System.Hypervisor.DOS_IMAGE_INFO */
  Image: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMODULE_INFO = 16;

export function allocMODULE_INFO(data?: Partial<MODULE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMODULE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.ProcessImageName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.ProcessImageName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.Image !== undefined) view.setBigUint64(8, data.Image === null ? 0n : BigInt(util.toPointer(data.Image)), true);
  return buf;
}

export type HRESULT = number;

export type HANDLE = Deno.PointerValue;

export type HCS_SYSTEM = Deno.PointerValue;

export type PWSTR = Deno.PointerValue | Uint8Array | null;

// Native Libraries

try {
  var libWinHvPlatform_dll = Deno.dlopen("WinHvPlatform.dll", {
    WHvGetCapability: {
      parameters: ["i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WHvCreatePartition: {
      parameters: ["pointer"],
      result: "pointer",
    },
    WHvSetupPartition: {
      parameters: ["pointer"],
      result: "pointer",
    },
    WHvResetPartition: {
      parameters: ["pointer"],
      result: "pointer",
    },
    WHvDeletePartition: {
      parameters: ["pointer"],
      result: "pointer",
    },
    WHvGetPartitionProperty: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WHvSetPartitionProperty: {
      parameters: ["pointer", "i32", "pointer", "u32"],
      result: "pointer",
    },
    WHvSuspendPartitionTime: {
      parameters: ["pointer"],
      result: "pointer",
    },
    WHvResumePartitionTime: {
      parameters: ["pointer"],
      result: "pointer",
    },
    WHvMapGpaRange: {
      parameters: ["pointer", "pointer", "u64", "u64", "u32"],
      result: "pointer",
    },
    WHvMapGpaRange2: {
      parameters: ["pointer", "pointer", "pointer", "u64", "u64", "u32"],
      result: "pointer",
    },
    WHvUnmapGpaRange: {
      parameters: ["pointer", "u64", "u64"],
      result: "pointer",
    },
    WHvTranslateGva: {
      parameters: ["pointer", "u32", "u64", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    WHvCreateVirtualProcessor: {
      parameters: ["pointer", "u32", "u32"],
      result: "pointer",
    },
    WHvCreateVirtualProcessor2: {
      parameters: ["pointer", "u32", "pointer", "u32"],
      result: "pointer",
    },
    WHvDeleteVirtualProcessor: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    WHvRunVirtualProcessor: {
      parameters: ["pointer", "u32", "pointer", "u32"],
      result: "pointer",
    },
    WHvCancelRunVirtualProcessor: {
      parameters: ["pointer", "u32", "u32"],
      result: "pointer",
    },
    WHvGetVirtualProcessorRegisters: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WHvSetVirtualProcessorRegisters: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WHvGetVirtualProcessorInterruptControllerState: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WHvSetVirtualProcessorInterruptControllerState: {
      parameters: ["pointer", "u32", "pointer", "u32"],
      result: "pointer",
    },
    WHvRequestInterrupt: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
    },
    WHvGetVirtualProcessorXsaveState: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WHvSetVirtualProcessorXsaveState: {
      parameters: ["pointer", "u32", "pointer", "u32"],
      result: "pointer",
    },
    WHvQueryGpaRangeDirtyBitmap: {
      parameters: ["pointer", "u64", "u64", "pointer", "u32"],
      result: "pointer",
    },
    WHvGetPartitionCounters: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WHvGetVirtualProcessorCounters: {
      parameters: ["pointer", "u32", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WHvGetVirtualProcessorInterruptControllerState2: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WHvSetVirtualProcessorInterruptControllerState2: {
      parameters: ["pointer", "u32", "pointer", "u32"],
      result: "pointer",
    },
    WHvRegisterPartitionDoorbellEvent: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WHvUnregisterPartitionDoorbellEvent: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WHvAdviseGpaRange: {
      parameters: ["pointer", "pointer", "u32", "i32", "pointer", "u32"],
      result: "pointer",
    },
    WHvReadGpaRange: {
      parameters: ["pointer", "u32", "u64", "pointer", "pointer", "u32"],
      result: "pointer",
    },
    WHvWriteGpaRange: {
      parameters: ["pointer", "u32", "u64", "pointer", "pointer", "u32"],
      result: "pointer",
    },
    WHvSignalVirtualProcessorSynicEvent: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WHvGetVirtualProcessorState: {
      parameters: ["pointer", "u32", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WHvSetVirtualProcessorState: {
      parameters: ["pointer", "u32", "i32", "pointer", "u32"],
      result: "pointer",
    },
    WHvAllocateVpciResource: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WHvCreateVpciDevice: {
      parameters: ["pointer", "u64", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WHvDeleteVpciDevice: {
      parameters: ["pointer", "u64"],
      result: "pointer",
    },
    WHvGetVpciDeviceProperty: {
      parameters: ["pointer", "u64", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WHvGetVpciDeviceNotification: {
      parameters: ["pointer", "u64", "pointer", "u32"],
      result: "pointer",
    },
    WHvMapVpciDeviceMmioRanges: {
      parameters: ["pointer", "u64", "pointer", "pointer"],
      result: "pointer",
    },
    WHvUnmapVpciDeviceMmioRanges: {
      parameters: ["pointer", "u64"],
      result: "pointer",
    },
    WHvSetVpciDevicePowerState: {
      parameters: ["pointer", "u64", "i32"],
      result: "pointer",
    },
    WHvReadVpciDeviceRegister: {
      parameters: ["pointer", "u64", "pointer", "pointer"],
      result: "pointer",
    },
    WHvWriteVpciDeviceRegister: {
      parameters: ["pointer", "u64", "pointer", "pointer"],
      result: "pointer",
    },
    WHvMapVpciDeviceInterrupt: {
      parameters: ["pointer", "u64", "u32", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WHvUnmapVpciDeviceInterrupt: {
      parameters: ["pointer", "u64", "u32"],
      result: "pointer",
    },
    WHvRetargetVpciDeviceInterrupt: {
      parameters: ["pointer", "u64", "u64", "u32", "pointer"],
      result: "pointer",
    },
    WHvRequestVpciDeviceInterrupt: {
      parameters: ["pointer", "u64", "u64", "u32"],
      result: "pointer",
    },
    WHvGetVpciDeviceInterruptTarget: {
      parameters: ["pointer", "u64", "u32", "u32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WHvCreateTrigger: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WHvUpdateTriggerParameters: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WHvDeleteTrigger: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WHvCreateNotificationPort: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WHvSetNotificationPortProperty: {
      parameters: ["pointer", "pointer", "i32", "u64"],
      result: "pointer",
    },
    WHvDeleteNotificationPort: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WHvPostVirtualProcessorSynicMessage: {
      parameters: ["pointer", "u32", "u32", "pointer", "u32"],
      result: "pointer",
    },
    WHvGetVirtualProcessorCpuidOutput: {
      parameters: ["pointer", "u32", "u32", "u32", "pointer"],
      result: "pointer",
    },
    WHvGetInterruptTargetVpSet: {
      parameters: ["pointer", "u64", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WHvStartPartitionMigration: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WHvCancelPartitionMigration: {
      parameters: ["pointer"],
      result: "pointer",
    },
    WHvCompletePartitionMigration: {
      parameters: ["pointer"],
      result: "pointer",
    },
    WHvAcceptPartitionMigration: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libWinHvEmulation_dll = Deno.dlopen("WinHvEmulation.dll", {
    WHvEmulatorCreateEmulator: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WHvEmulatorDestroyEmulator: {
      parameters: ["pointer"],
      result: "pointer",
    },
    WHvEmulatorTryIoEmulation: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WHvEmulatorTryMmioEmulation: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libvmdevicehost_dll = Deno.dlopen("vmdevicehost.dll", {
    HdvInitializeDeviceHost: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    HdvTeardownDeviceHost: {
      parameters: ["pointer"],
      result: "pointer",
    },
    HdvCreateDeviceInstance: {
      parameters: ["pointer", "i32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HdvReadGuestMemory: {
      parameters: ["pointer", "u64", "u32", "pointer"],
      result: "pointer",
    },
    HdvWriteGuestMemory: {
      parameters: ["pointer", "u64", "u32", "pointer"],
      result: "pointer",
    },
    HdvCreateGuestMemoryAperture: {
      parameters: ["pointer", "u64", "u32", "i32", "pointer"],
      result: "pointer",
    },
    HdvDestroyGuestMemoryAperture: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    HdvDeliverGuestInterrupt: {
      parameters: ["pointer", "u64", "u32"],
      result: "pointer",
    },
    HdvRegisterDoorbell: {
      parameters: ["pointer", "i32", "u64", "u64", "u64", "pointer"],
      result: "pointer",
    },
    HdvUnregisterDoorbell: {
      parameters: ["pointer", "i32", "u64", "u64", "u64"],
      result: "pointer",
    },
    HdvCreateSectionBackedMmioRange: {
      parameters: ["pointer", "i32", "u64", "u64", "u32", "pointer", "u64"],
      result: "pointer",
    },
    HdvDestroySectionBackedMmioRange: {
      parameters: ["pointer", "i32", "u64"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libVmSavedStateDumpProvider_dll = Deno.dlopen("VmSavedStateDumpProvider.dll", {
    LocateSavedStateFiles: {
      parameters: ["buffer", "buffer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    LoadSavedStateFile: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    ApplyPendingSavedStateFileReplayLog: {
      parameters: ["buffer"],
      result: "pointer",
    },
    LoadSavedStateFiles: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "pointer",
    },
    ReleaseSavedStateFiles: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetGuestEnabledVirtualTrustLevels: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    GetGuestOsInfo: {
      parameters: ["pointer", "u8", "pointer"],
      result: "pointer",
    },
    GetVpCount: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    GetArchitecture: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    ForceArchitecture: {
      parameters: ["pointer", "u32", "i32"],
      result: "pointer",
    },
    GetActiveVirtualTrustLevel: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    GetEnabledVirtualTrustLevels: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    ForceActiveVirtualTrustLevel: {
      parameters: ["pointer", "u32", "u8"],
      result: "pointer",
    },
    IsActiveVirtualTrustLevelEnabled: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    IsNestedVirtualizationEnabled: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    GetNestedVirtualizationMode: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    ForceNestedHostMode: {
      parameters: ["pointer", "u32", "i32", "pointer"],
      result: "pointer",
    },
    InKernelSpace: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    GetRegisterValue: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    GetPagingMode: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    ForcePagingMode: {
      parameters: ["pointer", "u32", "i32"],
      result: "pointer",
    },
    ReadGuestPhysicalAddress: {
      parameters: ["pointer", "u64", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    GuestVirtualAddressToPhysicalAddress: {
      parameters: ["pointer", "u32", "u64", "pointer", "pointer"],
      result: "pointer",
    },
    GetGuestPhysicalMemoryChunks: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    GuestPhysicalAddressToRawSavedMemoryOffset: {
      parameters: ["pointer", "u64", "pointer"],
      result: "pointer",
    },
    ReadGuestRawSavedMemory: {
      parameters: ["pointer", "u64", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    GetGuestRawSavedMemorySize: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    SetMemoryBlockCacheLimit: {
      parameters: ["pointer", "u64"],
      result: "pointer",
    },
    GetMemoryBlockCacheLimit: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    ApplyGuestMemoryFix: {
      parameters: ["pointer", "u32", "u64", "pointer", "u32"],
      result: "pointer",
    },
    LoadSavedStateSymbolProvider: {
      parameters: ["pointer", "buffer", "i32"],
      result: "pointer",
    },
    ReleaseSavedStateSymbolProvider: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetSavedStateSymbolProviderHandle: {
      parameters: ["pointer"],
      result: "pointer",
    },
    SetSavedStateSymbolProviderDebugInfoCallback: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    LoadSavedStateModuleSymbols: {
      parameters: ["pointer", "buffer", "buffer", "u64", "u32"],
      result: "pointer",
    },
    LoadSavedStateModuleSymbolsEx: {
      parameters: ["pointer", "buffer", "u32", "buffer", "u64", "u32"],
      result: "pointer",
    },
    ResolveSavedStateGlobalVariableAddress: {
      parameters: ["pointer", "u32", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    ReadSavedStateGlobalVariable: {
      parameters: ["pointer", "u32", "buffer", "pointer", "u32"],
      result: "pointer",
    },
    GetSavedStateSymbolTypeSize: {
      parameters: ["pointer", "u32", "buffer", "pointer"],
      result: "pointer",
    },
    FindSavedStateSymbolFieldInType: {
      parameters: ["pointer", "u32", "buffer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    GetSavedStateSymbolFieldInfo: {
      parameters: ["pointer", "u32", "buffer", "pointer"],
      result: "pointer",
    },
    ScanMemoryForDosImages: {
      parameters: ["pointer", "u32", "u64", "u64", "pointer", "pointer", "pointer", "u32"],
      result: "pointer",
    },
    CallStackUnwind: {
      parameters: ["pointer", "u32", "pointer", "u32", "u32", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function WHvGetCapability(
  CapabilityCode: WHV_CAPABILITY_CODE /* Windows.Win32.System.Hypervisor.WHV_CAPABILITY_CODE */,
  CapabilityBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  CapabilityBufferSizeInBytes: number /* u32 */,
  WrittenSizeInBytes: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvGetCapability(CapabilityCode, util.toPointer(CapabilityBuffer), CapabilityBufferSizeInBytes, util.toPointer(WrittenSizeInBytes)));
}

export function WHvCreatePartition(
  Partition: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvCreatePartition(util.toPointer(Partition)));
}

export function WHvSetupPartition(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvSetupPartition(util.toPointer(Partition)));
}

export function WHvResetPartition(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvResetPartition(util.toPointer(Partition)));
}

export function WHvDeletePartition(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvDeletePartition(util.toPointer(Partition)));
}

export function WHvGetPartitionProperty(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  PropertyCode: WHV_PARTITION_PROPERTY_CODE /* Windows.Win32.System.Hypervisor.WHV_PARTITION_PROPERTY_CODE */,
  PropertyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBufferSizeInBytes: number /* u32 */,
  WrittenSizeInBytes: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvGetPartitionProperty(util.toPointer(Partition), PropertyCode, util.toPointer(PropertyBuffer), PropertyBufferSizeInBytes, util.toPointer(WrittenSizeInBytes)));
}

export function WHvSetPartitionProperty(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  PropertyCode: WHV_PARTITION_PROPERTY_CODE /* Windows.Win32.System.Hypervisor.WHV_PARTITION_PROPERTY_CODE */,
  PropertyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBufferSizeInBytes: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvSetPartitionProperty(util.toPointer(Partition), PropertyCode, util.toPointer(PropertyBuffer), PropertyBufferSizeInBytes));
}

export function WHvSuspendPartitionTime(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvSuspendPartitionTime(util.toPointer(Partition)));
}

export function WHvResumePartitionTime(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvResumePartitionTime(util.toPointer(Partition)));
}

export function WHvMapGpaRange(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  SourceAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  GuestAddress: Deno.PointerValue /* u64 */,
  SizeInBytes: Deno.PointerValue /* u64 */,
  Flags: WHV_MAP_GPA_RANGE_FLAGS /* Windows.Win32.System.Hypervisor.WHV_MAP_GPA_RANGE_FLAGS */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvMapGpaRange(util.toPointer(Partition), util.toPointer(SourceAddress), GuestAddress, SizeInBytes, Flags));
}

export function WHvMapGpaRange2(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  Process: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  SourceAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  GuestAddress: Deno.PointerValue /* u64 */,
  SizeInBytes: Deno.PointerValue /* u64 */,
  Flags: WHV_MAP_GPA_RANGE_FLAGS /* Windows.Win32.System.Hypervisor.WHV_MAP_GPA_RANGE_FLAGS */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvMapGpaRange2(util.toPointer(Partition), util.toPointer(Process), util.toPointer(SourceAddress), GuestAddress, SizeInBytes, Flags));
}

export function WHvUnmapGpaRange(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  GuestAddress: Deno.PointerValue /* u64 */,
  SizeInBytes: Deno.PointerValue /* u64 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvUnmapGpaRange(util.toPointer(Partition), GuestAddress, SizeInBytes));
}

export function WHvTranslateGva(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  VpIndex: number /* u32 */,
  Gva: Deno.PointerValue /* u64 */,
  TranslateFlags: WHV_TRANSLATE_GVA_FLAGS /* Windows.Win32.System.Hypervisor.WHV_TRANSLATE_GVA_FLAGS */,
  TranslationResult: Deno.PointerValue | Uint8Array | null /* ptr */,
  Gpa: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvTranslateGva(util.toPointer(Partition), VpIndex, Gva, TranslateFlags, util.toPointer(TranslationResult), util.toPointer(Gpa)));
}

export function WHvCreateVirtualProcessor(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  VpIndex: number /* u32 */,
  Flags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvCreateVirtualProcessor(util.toPointer(Partition), VpIndex, Flags));
}

export function WHvCreateVirtualProcessor2(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  VpIndex: number /* u32 */,
  Properties: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyCount: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvCreateVirtualProcessor2(util.toPointer(Partition), VpIndex, util.toPointer(Properties), PropertyCount));
}

export function WHvDeleteVirtualProcessor(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  VpIndex: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvDeleteVirtualProcessor(util.toPointer(Partition), VpIndex));
}

export function WHvRunVirtualProcessor(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  VpIndex: number /* u32 */,
  ExitContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  ExitContextSizeInBytes: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvRunVirtualProcessor(util.toPointer(Partition), VpIndex, util.toPointer(ExitContext), ExitContextSizeInBytes));
}

export function WHvCancelRunVirtualProcessor(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  VpIndex: number /* u32 */,
  Flags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvCancelRunVirtualProcessor(util.toPointer(Partition), VpIndex, Flags));
}

export function WHvGetVirtualProcessorRegisters(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  VpIndex: number /* u32 */,
  RegisterNames: Deno.PointerValue | Uint8Array | null /* ptr */,
  RegisterCount: number /* u32 */,
  RegisterValues: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvGetVirtualProcessorRegisters(util.toPointer(Partition), VpIndex, util.toPointer(RegisterNames), RegisterCount, util.toPointer(RegisterValues)));
}

export function WHvSetVirtualProcessorRegisters(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  VpIndex: number /* u32 */,
  RegisterNames: Deno.PointerValue | Uint8Array | null /* ptr */,
  RegisterCount: number /* u32 */,
  RegisterValues: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvSetVirtualProcessorRegisters(util.toPointer(Partition), VpIndex, util.toPointer(RegisterNames), RegisterCount, util.toPointer(RegisterValues)));
}

export function WHvGetVirtualProcessorInterruptControllerState(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  VpIndex: number /* u32 */,
  State: Deno.PointerValue | Uint8Array | null /* ptr */,
  StateSize: number /* u32 */,
  WrittenSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvGetVirtualProcessorInterruptControllerState(util.toPointer(Partition), VpIndex, util.toPointer(State), StateSize, util.toPointer(WrittenSize)));
}

export function WHvSetVirtualProcessorInterruptControllerState(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  VpIndex: number /* u32 */,
  State: Deno.PointerValue | Uint8Array | null /* ptr */,
  StateSize: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvSetVirtualProcessorInterruptControllerState(util.toPointer(Partition), VpIndex, util.toPointer(State), StateSize));
}

export function WHvRequestInterrupt(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  Interrupt: Deno.PointerValue | Uint8Array | null /* ptr */,
  InterruptControlSize: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvRequestInterrupt(util.toPointer(Partition), util.toPointer(Interrupt), InterruptControlSize));
}

export function WHvGetVirtualProcessorXsaveState(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  VpIndex: number /* u32 */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferSizeInBytes: number /* u32 */,
  BytesWritten: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvGetVirtualProcessorXsaveState(util.toPointer(Partition), VpIndex, util.toPointer(Buffer), BufferSizeInBytes, util.toPointer(BytesWritten)));
}

export function WHvSetVirtualProcessorXsaveState(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  VpIndex: number /* u32 */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferSizeInBytes: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvSetVirtualProcessorXsaveState(util.toPointer(Partition), VpIndex, util.toPointer(Buffer), BufferSizeInBytes));
}

export function WHvQueryGpaRangeDirtyBitmap(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  GuestAddress: Deno.PointerValue /* u64 */,
  RangeSizeInBytes: Deno.PointerValue /* u64 */,
  Bitmap: Deno.PointerValue | Uint8Array | null /* ptr */,
  BitmapSizeInBytes: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvQueryGpaRangeDirtyBitmap(util.toPointer(Partition), GuestAddress, RangeSizeInBytes, util.toPointer(Bitmap), BitmapSizeInBytes));
}

export function WHvGetPartitionCounters(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  CounterSet: WHV_PARTITION_COUNTER_SET /* Windows.Win32.System.Hypervisor.WHV_PARTITION_COUNTER_SET */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferSizeInBytes: number /* u32 */,
  BytesWritten: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvGetPartitionCounters(util.toPointer(Partition), CounterSet, util.toPointer(Buffer), BufferSizeInBytes, util.toPointer(BytesWritten)));
}

export function WHvGetVirtualProcessorCounters(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  VpIndex: number /* u32 */,
  CounterSet: WHV_PROCESSOR_COUNTER_SET /* Windows.Win32.System.Hypervisor.WHV_PROCESSOR_COUNTER_SET */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferSizeInBytes: number /* u32 */,
  BytesWritten: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvGetVirtualProcessorCounters(util.toPointer(Partition), VpIndex, CounterSet, util.toPointer(Buffer), BufferSizeInBytes, util.toPointer(BytesWritten)));
}

export function WHvGetVirtualProcessorInterruptControllerState2(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  VpIndex: number /* u32 */,
  State: Deno.PointerValue | Uint8Array | null /* ptr */,
  StateSize: number /* u32 */,
  WrittenSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvGetVirtualProcessorInterruptControllerState2(util.toPointer(Partition), VpIndex, util.toPointer(State), StateSize, util.toPointer(WrittenSize)));
}

export function WHvSetVirtualProcessorInterruptControllerState2(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  VpIndex: number /* u32 */,
  State: Deno.PointerValue | Uint8Array | null /* ptr */,
  StateSize: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvSetVirtualProcessorInterruptControllerState2(util.toPointer(Partition), VpIndex, util.toPointer(State), StateSize));
}

export function WHvRegisterPartitionDoorbellEvent(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  MatchData: Deno.PointerValue | Uint8Array | null /* ptr */,
  EventHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvRegisterPartitionDoorbellEvent(util.toPointer(Partition), util.toPointer(MatchData), util.toPointer(EventHandle)));
}

export function WHvUnregisterPartitionDoorbellEvent(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  MatchData: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvUnregisterPartitionDoorbellEvent(util.toPointer(Partition), util.toPointer(MatchData)));
}

export function WHvAdviseGpaRange(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  GpaRanges: Deno.PointerValue | Uint8Array | null /* ptr */,
  GpaRangesCount: number /* u32 */,
  Advice: WHV_ADVISE_GPA_RANGE_CODE /* Windows.Win32.System.Hypervisor.WHV_ADVISE_GPA_RANGE_CODE */,
  AdviceBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  AdviceBufferSizeInBytes: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvAdviseGpaRange(util.toPointer(Partition), util.toPointer(GpaRanges), GpaRangesCount, Advice, util.toPointer(AdviceBuffer), AdviceBufferSizeInBytes));
}

export function WHvReadGpaRange(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  VpIndex: number /* u32 */,
  GuestAddress: Deno.PointerValue /* u64 */,
  Controls: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_ACCESS_GPA_CONTROLS */,
  Data: Deno.PointerValue | Uint8Array | null /* ptr */,
  DataSizeInBytes: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvReadGpaRange(util.toPointer(Partition), VpIndex, GuestAddress, util.toPointer(Controls), util.toPointer(Data), DataSizeInBytes));
}

export function WHvWriteGpaRange(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  VpIndex: number /* u32 */,
  GuestAddress: Deno.PointerValue /* u64 */,
  Controls: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_ACCESS_GPA_CONTROLS */,
  Data: Deno.PointerValue | Uint8Array | null /* ptr */,
  DataSizeInBytes: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvWriteGpaRange(util.toPointer(Partition), VpIndex, GuestAddress, util.toPointer(Controls), util.toPointer(Data), DataSizeInBytes));
}

export function WHvSignalVirtualProcessorSynicEvent(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  SynicEvent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_SYNIC_EVENT_PARAMETERS */,
  NewlySignaled: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvSignalVirtualProcessorSynicEvent(util.toPointer(Partition), util.toPointer(SynicEvent), util.toPointer(NewlySignaled)));
}

export function WHvGetVirtualProcessorState(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  VpIndex: number /* u32 */,
  StateType: WHV_VIRTUAL_PROCESSOR_STATE_TYPE /* Windows.Win32.System.Hypervisor.WHV_VIRTUAL_PROCESSOR_STATE_TYPE */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferSizeInBytes: number /* u32 */,
  BytesWritten: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvGetVirtualProcessorState(util.toPointer(Partition), VpIndex, StateType, util.toPointer(Buffer), BufferSizeInBytes, util.toPointer(BytesWritten)));
}

export function WHvSetVirtualProcessorState(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  VpIndex: number /* u32 */,
  StateType: WHV_VIRTUAL_PROCESSOR_STATE_TYPE /* Windows.Win32.System.Hypervisor.WHV_VIRTUAL_PROCESSOR_STATE_TYPE */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferSizeInBytes: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvSetVirtualProcessorState(util.toPointer(Partition), VpIndex, StateType, util.toPointer(Buffer), BufferSizeInBytes));
}

export function WHvAllocateVpciResource(
  ProviderId: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: WHV_ALLOCATE_VPCI_RESOURCE_FLAGS /* Windows.Win32.System.Hypervisor.WHV_ALLOCATE_VPCI_RESOURCE_FLAGS */,
  ResourceDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  ResourceDescriptorSizeInBytes: number /* u32 */,
  VpciResource: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvAllocateVpciResource(util.toPointer(ProviderId), Flags, util.toPointer(ResourceDescriptor), ResourceDescriptorSizeInBytes, util.toPointer(VpciResource)));
}

export function WHvCreateVpciDevice(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  LogicalDeviceId: Deno.PointerValue /* u64 */,
  VpciResource: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Flags: WHV_CREATE_VPCI_DEVICE_FLAGS /* Windows.Win32.System.Hypervisor.WHV_CREATE_VPCI_DEVICE_FLAGS */,
  NotificationEventHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvCreateVpciDevice(util.toPointer(Partition), LogicalDeviceId, util.toPointer(VpciResource), Flags, util.toPointer(NotificationEventHandle)));
}

export function WHvDeleteVpciDevice(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  LogicalDeviceId: Deno.PointerValue /* u64 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvDeleteVpciDevice(util.toPointer(Partition), LogicalDeviceId));
}

export function WHvGetVpciDeviceProperty(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  LogicalDeviceId: Deno.PointerValue /* u64 */,
  PropertyCode: WHV_VPCI_DEVICE_PROPERTY_CODE /* Windows.Win32.System.Hypervisor.WHV_VPCI_DEVICE_PROPERTY_CODE */,
  PropertyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBufferSizeInBytes: number /* u32 */,
  WrittenSizeInBytes: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvGetVpciDeviceProperty(util.toPointer(Partition), LogicalDeviceId, PropertyCode, util.toPointer(PropertyBuffer), PropertyBufferSizeInBytes, util.toPointer(WrittenSizeInBytes)));
}

export function WHvGetVpciDeviceNotification(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  LogicalDeviceId: Deno.PointerValue /* u64 */,
  Notification: Deno.PointerValue | Uint8Array | null /* ptr */,
  NotificationSizeInBytes: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvGetVpciDeviceNotification(util.toPointer(Partition), LogicalDeviceId, util.toPointer(Notification), NotificationSizeInBytes));
}

export function WHvMapVpciDeviceMmioRanges(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  LogicalDeviceId: Deno.PointerValue /* u64 */,
  MappingCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  Mappings: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvMapVpciDeviceMmioRanges(util.toPointer(Partition), LogicalDeviceId, util.toPointer(MappingCount), util.toPointer(Mappings)));
}

export function WHvUnmapVpciDeviceMmioRanges(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  LogicalDeviceId: Deno.PointerValue /* u64 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvUnmapVpciDeviceMmioRanges(util.toPointer(Partition), LogicalDeviceId));
}

export function WHvSetVpciDevicePowerState(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  LogicalDeviceId: Deno.PointerValue /* u64 */,
  PowerState: DEVICE_POWER_STATE /* Windows.Win32.System.Power.DEVICE_POWER_STATE */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvSetVpciDevicePowerState(util.toPointer(Partition), LogicalDeviceId, PowerState));
}

export function WHvReadVpciDeviceRegister(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  LogicalDeviceId: Deno.PointerValue /* u64 */,
  Register: Deno.PointerValue | Uint8Array | null /* ptr */,
  Data: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvReadVpciDeviceRegister(util.toPointer(Partition), LogicalDeviceId, util.toPointer(Register), util.toPointer(Data)));
}

export function WHvWriteVpciDeviceRegister(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  LogicalDeviceId: Deno.PointerValue /* u64 */,
  Register: Deno.PointerValue | Uint8Array | null /* ptr */,
  Data: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvWriteVpciDeviceRegister(util.toPointer(Partition), LogicalDeviceId, util.toPointer(Register), util.toPointer(Data)));
}

export function WHvMapVpciDeviceInterrupt(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  LogicalDeviceId: Deno.PointerValue /* u64 */,
  Index: number /* u32 */,
  MessageCount: number /* u32 */,
  Target: Deno.PointerValue | Uint8Array | null /* ptr */,
  MsiAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  MsiData: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvMapVpciDeviceInterrupt(util.toPointer(Partition), LogicalDeviceId, Index, MessageCount, util.toPointer(Target), util.toPointer(MsiAddress), util.toPointer(MsiData)));
}

export function WHvUnmapVpciDeviceInterrupt(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  LogicalDeviceId: Deno.PointerValue /* u64 */,
  Index: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvUnmapVpciDeviceInterrupt(util.toPointer(Partition), LogicalDeviceId, Index));
}

export function WHvRetargetVpciDeviceInterrupt(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  LogicalDeviceId: Deno.PointerValue /* u64 */,
  MsiAddress: Deno.PointerValue /* u64 */,
  MsiData: number /* u32 */,
  Target: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvRetargetVpciDeviceInterrupt(util.toPointer(Partition), LogicalDeviceId, MsiAddress, MsiData, util.toPointer(Target)));
}

export function WHvRequestVpciDeviceInterrupt(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  LogicalDeviceId: Deno.PointerValue /* u64 */,
  MsiAddress: Deno.PointerValue /* u64 */,
  MsiData: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvRequestVpciDeviceInterrupt(util.toPointer(Partition), LogicalDeviceId, MsiAddress, MsiData));
}

export function WHvGetVpciDeviceInterruptTarget(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  LogicalDeviceId: Deno.PointerValue /* u64 */,
  Index: number /* u32 */,
  MultiMessageNumber: number /* u32 */,
  Target: Deno.PointerValue | Uint8Array | null /* ptr */,
  TargetSizeInBytes: number /* u32 */,
  BytesWritten: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvGetVpciDeviceInterruptTarget(util.toPointer(Partition), LogicalDeviceId, Index, MultiMessageNumber, util.toPointer(Target), TargetSizeInBytes, util.toPointer(BytesWritten)));
}

export function WHvCreateTrigger(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  Parameters: Deno.PointerValue | Uint8Array | null /* ptr */,
  TriggerHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  EventHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvCreateTrigger(util.toPointer(Partition), util.toPointer(Parameters), util.toPointer(TriggerHandle), util.toPointer(EventHandle)));
}

export function WHvUpdateTriggerParameters(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  Parameters: Deno.PointerValue | Uint8Array | null /* ptr */,
  TriggerHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvUpdateTriggerParameters(util.toPointer(Partition), util.toPointer(Parameters), util.toPointer(TriggerHandle)));
}

export function WHvDeleteTrigger(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  TriggerHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvDeleteTrigger(util.toPointer(Partition), util.toPointer(TriggerHandle)));
}

export function WHvCreateNotificationPort(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  Parameters: Deno.PointerValue | Uint8Array | null /* ptr */,
  EventHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  PortHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvCreateNotificationPort(util.toPointer(Partition), util.toPointer(Parameters), util.toPointer(EventHandle), util.toPointer(PortHandle)));
}

export function WHvSetNotificationPortProperty(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  PortHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyCode: WHV_NOTIFICATION_PORT_PROPERTY_CODE /* Windows.Win32.System.Hypervisor.WHV_NOTIFICATION_PORT_PROPERTY_CODE */,
  PropertyValue: Deno.PointerValue /* u64 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvSetNotificationPortProperty(util.toPointer(Partition), util.toPointer(PortHandle), PropertyCode, PropertyValue));
}

export function WHvDeleteNotificationPort(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  PortHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvDeleteNotificationPort(util.toPointer(Partition), util.toPointer(PortHandle)));
}

export function WHvPostVirtualProcessorSynicMessage(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  VpIndex: number /* u32 */,
  SintIndex: number /* u32 */,
  Message: Deno.PointerValue | Uint8Array | null /* ptr */,
  MessageSizeInBytes: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvPostVirtualProcessorSynicMessage(util.toPointer(Partition), VpIndex, SintIndex, util.toPointer(Message), MessageSizeInBytes));
}

export function WHvGetVirtualProcessorCpuidOutput(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  VpIndex: number /* u32 */,
  Eax: number /* u32 */,
  Ecx: number /* u32 */,
  CpuidOutput: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvGetVirtualProcessorCpuidOutput(util.toPointer(Partition), VpIndex, Eax, Ecx, util.toPointer(CpuidOutput)));
}

export function WHvGetInterruptTargetVpSet(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  Destination: Deno.PointerValue /* u64 */,
  DestinationMode: WHV_INTERRUPT_DESTINATION_MODE /* Windows.Win32.System.Hypervisor.WHV_INTERRUPT_DESTINATION_MODE */,
  TargetVps: Deno.PointerValue | Uint8Array | null /* ptr */,
  VpCount: number /* u32 */,
  TargetVpCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvGetInterruptTargetVpSet(util.toPointer(Partition), Destination, DestinationMode, util.toPointer(TargetVps), VpCount, util.toPointer(TargetVpCount)));
}

export function WHvStartPartitionMigration(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
  MigrationHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvStartPartitionMigration(util.toPointer(Partition), util.toPointer(MigrationHandle)));
}

export function WHvCancelPartitionMigration(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvCancelPartitionMigration(util.toPointer(Partition)));
}

export function WHvCompletePartitionMigration(
  Partition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.WHV_PARTITION_HANDLE */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvCompletePartitionMigration(util.toPointer(Partition)));
}

export function WHvAcceptPartitionMigration(
  MigrationHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Partition: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvPlatform_dll.WHvAcceptPartitionMigration(util.toPointer(MigrationHandle), util.toPointer(Partition)));
}

export function WHvEmulatorCreateEmulator(
  Callbacks: Deno.PointerValue | Uint8Array | null /* ptr */,
  Emulator: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvEmulation_dll.WHvEmulatorCreateEmulator(util.toPointer(Callbacks), util.toPointer(Emulator)));
}

export function WHvEmulatorDestroyEmulator(
  Emulator: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvEmulation_dll.WHvEmulatorDestroyEmulator(util.toPointer(Emulator)));
}

export function WHvEmulatorTryIoEmulation(
  Emulator: Deno.PointerValue | Uint8Array | null /* ptr */,
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
  VpContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  IoInstructionContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  EmulatorReturnStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvEmulation_dll.WHvEmulatorTryIoEmulation(util.toPointer(Emulator), util.toPointer(Context), util.toPointer(VpContext), util.toPointer(IoInstructionContext), util.toPointer(EmulatorReturnStatus)));
}

export function WHvEmulatorTryMmioEmulation(
  Emulator: Deno.PointerValue | Uint8Array | null /* ptr */,
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
  VpContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  MmioInstructionContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  EmulatorReturnStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWinHvEmulation_dll.WHvEmulatorTryMmioEmulation(util.toPointer(Emulator), util.toPointer(Context), util.toPointer(VpContext), util.toPointer(MmioInstructionContext), util.toPointer(EmulatorReturnStatus)));
}

export function HdvInitializeDeviceHost(
  computeSystem: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_SYSTEM */,
  deviceHostHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libvmdevicehost_dll.HdvInitializeDeviceHost(util.toPointer(computeSystem), util.toPointer(deviceHostHandle)));
}

export function HdvTeardownDeviceHost(
  deviceHostHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libvmdevicehost_dll.HdvTeardownDeviceHost(util.toPointer(deviceHostHandle)));
}

export function HdvCreateDeviceInstance(
  deviceHostHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  deviceType: HDV_DEVICE_TYPE /* Windows.Win32.System.Hypervisor.HDV_DEVICE_TYPE */,
  deviceClassId: Deno.PointerValue | Uint8Array | null /* ptr */,
  deviceInstanceId: Deno.PointerValue | Uint8Array | null /* ptr */,
  deviceInterface: Deno.PointerValue | Uint8Array | null /* ptr */,
  deviceContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  deviceHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libvmdevicehost_dll.HdvCreateDeviceInstance(util.toPointer(deviceHostHandle), deviceType, util.toPointer(deviceClassId), util.toPointer(deviceInstanceId), util.toPointer(deviceInterface), util.toPointer(deviceContext), util.toPointer(deviceHandle)));
}

export function HdvReadGuestMemory(
  requestor: Deno.PointerValue | Uint8Array | null /* ptr */,
  guestPhysicalAddress: Deno.PointerValue /* u64 */,
  byteCount: number /* u32 */,
  buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libvmdevicehost_dll.HdvReadGuestMemory(util.toPointer(requestor), guestPhysicalAddress, byteCount, util.toPointer(buffer)));
}

export function HdvWriteGuestMemory(
  requestor: Deno.PointerValue | Uint8Array | null /* ptr */,
  guestPhysicalAddress: Deno.PointerValue /* u64 */,
  byteCount: number /* u32 */,
  buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libvmdevicehost_dll.HdvWriteGuestMemory(util.toPointer(requestor), guestPhysicalAddress, byteCount, util.toPointer(buffer)));
}

export function HdvCreateGuestMemoryAperture(
  requestor: Deno.PointerValue | Uint8Array | null /* ptr */,
  guestPhysicalAddress: Deno.PointerValue /* u64 */,
  byteCount: number /* u32 */,
  writeProtected: boolean /* Windows.Win32.Foundation.BOOL */,
  mappedAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libvmdevicehost_dll.HdvCreateGuestMemoryAperture(util.toPointer(requestor), guestPhysicalAddress, byteCount, util.boolToFfi(writeProtected), util.toPointer(mappedAddress)));
}

export function HdvDestroyGuestMemoryAperture(
  requestor: Deno.PointerValue | Uint8Array | null /* ptr */,
  mappedAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libvmdevicehost_dll.HdvDestroyGuestMemoryAperture(util.toPointer(requestor), util.toPointer(mappedAddress)));
}

export function HdvDeliverGuestInterrupt(
  requestor: Deno.PointerValue | Uint8Array | null /* ptr */,
  msiAddress: Deno.PointerValue /* u64 */,
  msiData: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libvmdevicehost_dll.HdvDeliverGuestInterrupt(util.toPointer(requestor), msiAddress, msiData));
}

export function HdvRegisterDoorbell(
  requestor: Deno.PointerValue | Uint8Array | null /* ptr */,
  BarIndex: HDV_PCI_BAR_SELECTOR /* Windows.Win32.System.Hypervisor.HDV_PCI_BAR_SELECTOR */,
  BarOffset: Deno.PointerValue /* u64 */,
  TriggerValue: Deno.PointerValue /* u64 */,
  Flags: Deno.PointerValue /* u64 */,
  DoorbellEvent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libvmdevicehost_dll.HdvRegisterDoorbell(util.toPointer(requestor), BarIndex, BarOffset, TriggerValue, Flags, util.toPointer(DoorbellEvent)));
}

export function HdvUnregisterDoorbell(
  requestor: Deno.PointerValue | Uint8Array | null /* ptr */,
  BarIndex: HDV_PCI_BAR_SELECTOR /* Windows.Win32.System.Hypervisor.HDV_PCI_BAR_SELECTOR */,
  BarOffset: Deno.PointerValue /* u64 */,
  TriggerValue: Deno.PointerValue /* u64 */,
  Flags: Deno.PointerValue /* u64 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libvmdevicehost_dll.HdvUnregisterDoorbell(util.toPointer(requestor), BarIndex, BarOffset, TriggerValue, Flags));
}

export function HdvCreateSectionBackedMmioRange(
  requestor: Deno.PointerValue | Uint8Array | null /* ptr */,
  barIndex: HDV_PCI_BAR_SELECTOR /* Windows.Win32.System.Hypervisor.HDV_PCI_BAR_SELECTOR */,
  offsetInPages: Deno.PointerValue /* u64 */,
  lengthInPages: Deno.PointerValue /* u64 */,
  MappingFlags: HDV_MMIO_MAPPING_FLAGS /* Windows.Win32.System.Hypervisor.HDV_MMIO_MAPPING_FLAGS */,
  sectionHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  sectionOffsetInPages: Deno.PointerValue /* u64 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libvmdevicehost_dll.HdvCreateSectionBackedMmioRange(util.toPointer(requestor), barIndex, offsetInPages, lengthInPages, MappingFlags, util.toPointer(sectionHandle), sectionOffsetInPages));
}

export function HdvDestroySectionBackedMmioRange(
  requestor: Deno.PointerValue | Uint8Array | null /* ptr */,
  barIndex: HDV_PCI_BAR_SELECTOR /* Windows.Win32.System.Hypervisor.HDV_PCI_BAR_SELECTOR */,
  offsetInPages: Deno.PointerValue /* u64 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libvmdevicehost_dll.HdvDestroySectionBackedMmioRange(util.toPointer(requestor), barIndex, offsetInPages));
}

export function LocateSavedStateFiles(
  vmName: string | null /* Windows.Win32.Foundation.PWSTR */,
  snapshotName: string | null /* Windows.Win32.Foundation.PWSTR */,
  binPath: Deno.PointerValue | Uint8Array | null /* ptr */,
  vsvPath: Deno.PointerValue | Uint8Array | null /* ptr */,
  vmrsPath: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.LocateSavedStateFiles(util.pwstrToFfi(vmName), util.pwstrToFfi(snapshotName), util.toPointer(binPath), util.toPointer(vsvPath), util.toPointer(vmrsPath)));
}

export function LoadSavedStateFile(
  vmrsFile: string | null /* Windows.Win32.Foundation.PWSTR */,
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.LoadSavedStateFile(util.pwstrToFfi(vmrsFile), util.toPointer(vmSavedStateDumpHandle)));
}

export function ApplyPendingSavedStateFileReplayLog(
  vmrsFile: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.ApplyPendingSavedStateFileReplayLog(util.pwstrToFfi(vmrsFile)));
}

export function LoadSavedStateFiles(
  binFile: string | null /* Windows.Win32.Foundation.PWSTR */,
  vsvFile: string | null /* Windows.Win32.Foundation.PWSTR */,
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.LoadSavedStateFiles(util.pwstrToFfi(binFile), util.pwstrToFfi(vsvFile), util.toPointer(vmSavedStateDumpHandle)));
}

export function ReleaseSavedStateFiles(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.ReleaseSavedStateFiles(util.toPointer(vmSavedStateDumpHandle)));
}

export function GetGuestEnabledVirtualTrustLevels(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  virtualTrustLevels: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.GetGuestEnabledVirtualTrustLevels(util.toPointer(vmSavedStateDumpHandle), util.toPointer(virtualTrustLevels)));
}

export function GetGuestOsInfo(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  virtualTrustLevel: number /* u8 */,
  guestOsInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.GetGuestOsInfo(util.toPointer(vmSavedStateDumpHandle), virtualTrustLevel, util.toPointer(guestOsInfo)));
}

export function GetVpCount(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  vpCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.GetVpCount(util.toPointer(vmSavedStateDumpHandle), util.toPointer(vpCount)));
}

export function GetArchitecture(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  vpId: number /* u32 */,
  architecture: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.GetArchitecture(util.toPointer(vmSavedStateDumpHandle), vpId, util.toPointer(architecture)));
}

export function ForceArchitecture(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  vpId: number /* u32 */,
  architecture: VIRTUAL_PROCESSOR_ARCH /* Windows.Win32.System.Hypervisor.VIRTUAL_PROCESSOR_ARCH */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.ForceArchitecture(util.toPointer(vmSavedStateDumpHandle), vpId, architecture));
}

export function GetActiveVirtualTrustLevel(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  vpId: number /* u32 */,
  virtualTrustLevel: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.GetActiveVirtualTrustLevel(util.toPointer(vmSavedStateDumpHandle), vpId, util.toPointer(virtualTrustLevel)));
}

export function GetEnabledVirtualTrustLevels(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  vpId: number /* u32 */,
  virtualTrustLevels: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.GetEnabledVirtualTrustLevels(util.toPointer(vmSavedStateDumpHandle), vpId, util.toPointer(virtualTrustLevels)));
}

export function ForceActiveVirtualTrustLevel(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  vpId: number /* u32 */,
  virtualTrustLevel: number /* u8 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.ForceActiveVirtualTrustLevel(util.toPointer(vmSavedStateDumpHandle), vpId, virtualTrustLevel));
}

export function IsActiveVirtualTrustLevelEnabled(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  vpId: number /* u32 */,
  activeVirtualTrustLevelEnabled: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.IsActiveVirtualTrustLevelEnabled(util.toPointer(vmSavedStateDumpHandle), vpId, util.toPointer(activeVirtualTrustLevelEnabled)));
}

export function IsNestedVirtualizationEnabled(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  enabled: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.IsNestedVirtualizationEnabled(util.toPointer(vmSavedStateDumpHandle), util.toPointer(enabled)));
}

export function GetNestedVirtualizationMode(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  vpId: number /* u32 */,
  enabled: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.GetNestedVirtualizationMode(util.toPointer(vmSavedStateDumpHandle), vpId, util.toPointer(enabled)));
}

export function ForceNestedHostMode(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  vpId: number /* u32 */,
  hostMode: boolean /* Windows.Win32.Foundation.BOOL */,
  oldMode: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.ForceNestedHostMode(util.toPointer(vmSavedStateDumpHandle), vpId, util.boolToFfi(hostMode), util.toPointer(oldMode)));
}

export function InKernelSpace(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  vpId: number /* u32 */,
  inKernelSpace: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.InKernelSpace(util.toPointer(vmSavedStateDumpHandle), vpId, util.toPointer(inKernelSpace)));
}

export function GetRegisterValue(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  vpId: number /* u32 */,
  registerId: number /* u32 */,
  registerValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.GetRegisterValue(util.toPointer(vmSavedStateDumpHandle), vpId, registerId, util.toPointer(registerValue)));
}

export function GetPagingMode(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  vpId: number /* u32 */,
  pagingMode: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.GetPagingMode(util.toPointer(vmSavedStateDumpHandle), vpId, util.toPointer(pagingMode)));
}

export function ForcePagingMode(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  vpId: number /* u32 */,
  pagingMode: PAGING_MODE /* Windows.Win32.System.Hypervisor.PAGING_MODE */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.ForcePagingMode(util.toPointer(vmSavedStateDumpHandle), vpId, pagingMode));
}

export function ReadGuestPhysicalAddress(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  physicalAddress: Deno.PointerValue /* u64 */,
  buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  bufferSize: number /* u32 */,
  bytesRead: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.ReadGuestPhysicalAddress(util.toPointer(vmSavedStateDumpHandle), physicalAddress, util.toPointer(buffer), bufferSize, util.toPointer(bytesRead)));
}

export function GuestVirtualAddressToPhysicalAddress(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  vpId: number /* u32 */,
  virtualAddress: Deno.PointerValue /* u64 */,
  physicalAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  unmappedRegionSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.GuestVirtualAddressToPhysicalAddress(util.toPointer(vmSavedStateDumpHandle), vpId, virtualAddress, util.toPointer(physicalAddress), util.toPointer(unmappedRegionSize)));
}

export function GetGuestPhysicalMemoryChunks(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  memoryChunkPageSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  memoryChunks: Deno.PointerValue | Uint8Array | null /* ptr */,
  memoryChunkCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.GetGuestPhysicalMemoryChunks(util.toPointer(vmSavedStateDumpHandle), util.toPointer(memoryChunkPageSize), util.toPointer(memoryChunks), util.toPointer(memoryChunkCount)));
}

export function GuestPhysicalAddressToRawSavedMemoryOffset(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  physicalAddress: Deno.PointerValue /* u64 */,
  rawSavedMemoryOffset: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.GuestPhysicalAddressToRawSavedMemoryOffset(util.toPointer(vmSavedStateDumpHandle), physicalAddress, util.toPointer(rawSavedMemoryOffset)));
}

export function ReadGuestRawSavedMemory(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  rawSavedMemoryOffset: Deno.PointerValue /* u64 */,
  buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  bufferSize: number /* u32 */,
  bytesRead: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.ReadGuestRawSavedMemory(util.toPointer(vmSavedStateDumpHandle), rawSavedMemoryOffset, util.toPointer(buffer), bufferSize, util.toPointer(bytesRead)));
}

export function GetGuestRawSavedMemorySize(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  guestRawSavedMemorySize: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.GetGuestRawSavedMemorySize(util.toPointer(vmSavedStateDumpHandle), util.toPointer(guestRawSavedMemorySize)));
}

export function SetMemoryBlockCacheLimit(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  memoryBlockCacheLimit: Deno.PointerValue /* u64 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.SetMemoryBlockCacheLimit(util.toPointer(vmSavedStateDumpHandle), memoryBlockCacheLimit));
}

export function GetMemoryBlockCacheLimit(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  memoryBlockCacheLimit: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.GetMemoryBlockCacheLimit(util.toPointer(vmSavedStateDumpHandle), util.toPointer(memoryBlockCacheLimit)));
}

export function ApplyGuestMemoryFix(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  vpId: number /* u32 */,
  virtualAddress: Deno.PointerValue /* u64 */,
  fixBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  fixBufferSize: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.ApplyGuestMemoryFix(util.toPointer(vmSavedStateDumpHandle), vpId, virtualAddress, util.toPointer(fixBuffer), fixBufferSize));
}

export function LoadSavedStateSymbolProvider(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  userSymbols: string | null /* Windows.Win32.Foundation.PWSTR */,
  force: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.LoadSavedStateSymbolProvider(util.toPointer(vmSavedStateDumpHandle), util.pwstrToFfi(userSymbols), util.boolToFfi(force)));
}

export function ReleaseSavedStateSymbolProvider(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.ReleaseSavedStateSymbolProvider(util.toPointer(vmSavedStateDumpHandle)));
}

export function GetSavedStateSymbolProviderHandle(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.GetSavedStateSymbolProviderHandle(util.toPointer(vmSavedStateDumpHandle)));
}

export function SetSavedStateSymbolProviderDebugInfoCallback(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  Callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.GUEST_SYMBOLS_PROVIDER_DEBUG_INFO_CALLBACK */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.SetSavedStateSymbolProviderDebugInfoCallback(util.toPointer(vmSavedStateDumpHandle), util.toPointer(Callback)));
}

export function LoadSavedStateModuleSymbols(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  imageName: string | null /* Windows.Win32.Foundation.PSTR */,
  moduleName: string | null /* Windows.Win32.Foundation.PSTR */,
  baseAddress: Deno.PointerValue /* u64 */,
  sizeOfBase: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.LoadSavedStateModuleSymbols(util.toPointer(vmSavedStateDumpHandle), util.pstrToFfi(imageName), util.pstrToFfi(moduleName), baseAddress, sizeOfBase));
}

export function LoadSavedStateModuleSymbolsEx(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  imageName: string | null /* Windows.Win32.Foundation.PSTR */,
  imageTimestamp: number /* u32 */,
  moduleName: string | null /* Windows.Win32.Foundation.PSTR */,
  baseAddress: Deno.PointerValue /* u64 */,
  sizeOfBase: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.LoadSavedStateModuleSymbolsEx(util.toPointer(vmSavedStateDumpHandle), util.pstrToFfi(imageName), imageTimestamp, util.pstrToFfi(moduleName), baseAddress, sizeOfBase));
}

export function ResolveSavedStateGlobalVariableAddress(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  vpId: number /* u32 */,
  globalName: string | null /* Windows.Win32.Foundation.PSTR */,
  virtualAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  size: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.ResolveSavedStateGlobalVariableAddress(util.toPointer(vmSavedStateDumpHandle), vpId, util.pstrToFfi(globalName), util.toPointer(virtualAddress), util.toPointer(size)));
}

export function ReadSavedStateGlobalVariable(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  vpId: number /* u32 */,
  globalName: string | null /* Windows.Win32.Foundation.PSTR */,
  buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  bufferSize: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.ReadSavedStateGlobalVariable(util.toPointer(vmSavedStateDumpHandle), vpId, util.pstrToFfi(globalName), util.toPointer(buffer), bufferSize));
}

export function GetSavedStateSymbolTypeSize(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  vpId: number /* u32 */,
  typeName: string | null /* Windows.Win32.Foundation.PSTR */,
  size: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.GetSavedStateSymbolTypeSize(util.toPointer(vmSavedStateDumpHandle), vpId, util.pstrToFfi(typeName), util.toPointer(size)));
}

export function FindSavedStateSymbolFieldInType(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  vpId: number /* u32 */,
  typeName: string | null /* Windows.Win32.Foundation.PSTR */,
  fieldName: string | null /* Windows.Win32.Foundation.PWSTR */,
  offset: Deno.PointerValue | Uint8Array | null /* ptr */,
  found: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.FindSavedStateSymbolFieldInType(util.toPointer(vmSavedStateDumpHandle), vpId, util.pstrToFfi(typeName), util.pwstrToFfi(fieldName), util.toPointer(offset), util.toPointer(found)));
}

export function GetSavedStateSymbolFieldInfo(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  vpId: number /* u32 */,
  typeName: string | null /* Windows.Win32.Foundation.PSTR */,
  typeFieldInfoMap: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.GetSavedStateSymbolFieldInfo(util.toPointer(vmSavedStateDumpHandle), vpId, util.pstrToFfi(typeName), util.toPointer(typeFieldInfoMap)));
}

export function ScanMemoryForDosImages(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  vpId: number /* u32 */,
  startAddress: Deno.PointerValue /* u64 */,
  endAddress: Deno.PointerValue /* u64 */,
  callbackContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  foundImageCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Hypervisor.FOUND_IMAGE_CALLBACK */,
  standaloneAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  standaloneAddressCount: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.ScanMemoryForDosImages(util.toPointer(vmSavedStateDumpHandle), vpId, startAddress, endAddress, util.toPointer(callbackContext), util.toPointer(foundImageCallback), util.toPointer(standaloneAddress), standaloneAddressCount));
}

export function CallStackUnwind(
  vmSavedStateDumpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  vpId: number /* u32 */,
  imageInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  imageInfoCount: number /* u32 */,
  frameCount: number /* u32 */,
  callStack: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libVmSavedStateDumpProvider_dll.CallStackUnwind(util.toPointer(vmSavedStateDumpHandle), vpId, util.toPointer(imageInfo), imageInfoCount, frameCount, util.toPointer(callStack)));
}

