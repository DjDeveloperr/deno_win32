/// Auto-generated by Deno Win32: Windows.Win32.System.MixedReality.Apis

import * as util from "../../util.ts";

// Structs

/**
 * Windows.Win32.System.MixedReality.Apis (size: 8)
 */
export interface Apis {
  /** System.Guid */
  PERCEPTIONFIELD_StateStream_TimeStamps: Uint8Array | Deno.PointerValue | null;
}

export const sizeofApis = 8;

export function allocApis(data?: Partial<Apis>): Uint8Array {
  const buf = new Uint8Array(sizeofApis);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PERCEPTIONFIELD_StateStream_TimeStamps !== undefined) view.setBigUint64(0, data.PERCEPTIONFIELD_StateStream_TimeStamps === null ? 0n : BigInt(util.toPointer(data.PERCEPTIONFIELD_StateStream_TimeStamps)), true);
  return buf;
}

/**
 * Windows.Win32.System.MixedReality.PERCEPTION_PAYLOAD_FIELD (size: 16)
 */
export interface PERCEPTION_PAYLOAD_FIELD {
  /** System.Guid */
  FieldId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  OffsetInBytes: number;
  /** u32 */
  SizeInBytes: number;
}

export const sizeofPERCEPTION_PAYLOAD_FIELD = 16;

export function allocPERCEPTION_PAYLOAD_FIELD(data?: Partial<PERCEPTION_PAYLOAD_FIELD>): Uint8Array {
  const buf = new Uint8Array(sizeofPERCEPTION_PAYLOAD_FIELD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.FieldId !== undefined) view.setBigUint64(0, data.FieldId === null ? 0n : BigInt(util.toPointer(data.FieldId)), true);
  // 0x08: u32
  if (data?.OffsetInBytes !== undefined) view.setUint32(8, Number(data.OffsetInBytes), true);
  // 0x0c: u32
  if (data?.SizeInBytes !== undefined) view.setUint32(12, Number(data.SizeInBytes), true);
  return buf;
}

/**
 * Windows.Win32.System.MixedReality.PERCEPTION_STATE_STREAM_TIMESTAMPS (size: 16)
 */
export interface PERCEPTION_STATE_STREAM_TIMESTAMPS {
  /** i64 */
  InputTimestampInQpcCounts: Deno.PointerValue;
  /** i64 */
  AvailableTimestampInQpcCounts: Deno.PointerValue;
}

export const sizeofPERCEPTION_STATE_STREAM_TIMESTAMPS = 16;

export function allocPERCEPTION_STATE_STREAM_TIMESTAMPS(data?: Partial<PERCEPTION_STATE_STREAM_TIMESTAMPS>): Uint8Array {
  const buf = new Uint8Array(sizeofPERCEPTION_STATE_STREAM_TIMESTAMPS);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.InputTimestampInQpcCounts !== undefined) view.setBigInt64(0, BigInt(data.InputTimestampInQpcCounts), true);
  // 0x08: i64
  if (data?.AvailableTimestampInQpcCounts !== undefined) view.setBigInt64(8, BigInt(data.AvailableTimestampInQpcCounts), true);
  return buf;
}

// Native Libraries

// Symbols

