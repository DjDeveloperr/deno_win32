/// Auto-generated by Deno Win32: Windows.Win32.System.Performance.Apis

import * as util from "../../util.ts";

// Enums
export type PERF_DETAIL = number;
export type REAL_TIME_DATA_SOURCE_ID_FLAGS = number;
export type PDH_PATH_FLAGS = number;
export type PDH_FMT = number;
export type PDH_LOG_TYPE = number;
export type PDH_LOG = number;
export type PDH_SELECT_DATA_SOURCE_FLAGS = number;
export type PDH_DLL_VERSION = number;
export type PERF_COUNTER_AGGREGATE_FUNC = number;
export type DataCollectorType = number;
export type FileFormat = number;
export type AutoPathFormat = number;
export type DataCollectorSetStatus = number;
export type ClockType = number;
export type StreamMode = number;
export type CommitMode = number;
export type ValueMapType = number;
export type WeekDays = number;
export type ResourcePolicy = number;
export type DataManagerSteps = number;
export type FolderActionSteps = number;
export type HARDWARE_COUNTER_TYPE = number;
export type PerfRegInfoType = number;
export type PerfCounterDataType = number;
export type DisplayTypeConstants = number;
export type ReportValueTypeConstants = number;
export type DataSourceTypeConstants = number;
export type SysmonFileType = number;
export type SysmonDataType = number;
export type SysmonBatchReason = number;

// Constants
export const PERF_DETAIL_NOVICE = 100;
export const PERF_DETAIL_ADVANCED = 200;
export const PERF_DETAIL_EXPERT = 300;
export const PERF_DETAIL_WIZARD = 400;
export const DATA_SOURCE_REGISTRY = 1;
export const DATA_SOURCE_WBEM = 4;
export const PDH_PATH_WBEM_RESULT = 1;
export const PDH_PATH_WBEM_INPUT = 2;
export const PDH_PATH_WBEM_NONE = 0;
export const PDH_FMT_DOUBLE = 512;
export const PDH_FMT_LARGE = 1024;
export const PDH_FMT_LONG = 256;
export const PDH_LOG_TYPE_UNDEFINED = 0;
export const PDH_LOG_TYPE_CSV = 1;
export const PDH_LOG_TYPE_SQL = 7;
export const PDH_LOG_TYPE_TSV = 2;
export const PDH_LOG_TYPE_BINARY = 8;
export const PDH_LOG_TYPE_PERFMON = 6;
export const PDH_LOG_READ_ACCESS = 65536;
export const PDH_LOG_WRITE_ACCESS = 131072;
export const PDH_LOG_UPDATE_ACCESS = 262144;
export const PDH_FLAGS_FILE_BROWSER_ONLY = 1;
export const PDH_FLAGS_NONE = 0;
export const PDH_CVERSION_WIN50 = 1280;
export const PDH_VERSION = 1283;
export const PERF_AGGREGATE_UNDEFINED = 0;
export const PERF_AGGREGATE_TOTAL = 1;
export const PERF_AGGREGATE_AVG = 2;
export const PERF_AGGREGATE_MIN = 3;
export const MAX_COUNTER_PATH = 256;
export const PDH_MAX_COUNTER_NAME = 1024;
export const PDH_MAX_INSTANCE_NAME = 1024;
export const PDH_MAX_COUNTER_PATH = 2048;
export const PDH_MAX_DATASOURCE_PATH = 1024;
export const H_WBEM_DATASOURCE = `-1`;
export const PDH_MAX_SCALE = 7;
export const PDH_MIN_SCALE = `-7`;
export const PDH_NOEXPANDCOUNTERS = 1;
export const PDH_NOEXPANDINSTANCES = 2;
export const PDH_REFRESHCOUNTERS = 4;
export const PDH_LOG_TYPE_RETIRED_BIN = 3;
export const PDH_LOG_TYPE_TRACE_KERNEL = 4;
export const PDH_LOG_TYPE_TRACE_GENERIC = 5;
export const PERF_PROVIDER_USER_MODE = 0;
export const PERF_PROVIDER_KERNEL_MODE = 1;
export const PERF_PROVIDER_DRIVER = 2;
export const PERF_COUNTERSET_FLAG_MULTIPLE = 2;
export const PERF_COUNTERSET_FLAG_AGGREGATE = 4;
export const PERF_COUNTERSET_FLAG_HISTORY = 8;
export const PERF_COUNTERSET_FLAG_INSTANCE = 16;
export const PERF_COUNTERSET_SINGLE_INSTANCE = 0;
export const PERF_COUNTERSET_MULTI_INSTANCES = 2;
export const PERF_COUNTERSET_SINGLE_AGGREGATE = 4;
export const PERF_AGGREGATE_MAX = 4;
export const PERF_ATTRIB_BY_REFERENCE = 1;
export const PERF_ATTRIB_NO_DISPLAYABLE = 2;
export const PERF_ATTRIB_NO_GROUP_SEPARATOR = 4;
export const PERF_ATTRIB_DISPLAY_AS_REAL = 8;
export const PERF_ATTRIB_DISPLAY_AS_HEX = 16;
export const PERF_WILDCARD_COUNTER = 4294967295;
export const PERF_WILDCARD_INSTANCE = `*`;
export const PERF_AGGREGATE_INSTANCE = `_Total`;
export const PERF_MAX_INSTANCE_NAME = 1024;
export const PERF_ADD_COUNTER = 1;
export const PERF_REMOVE_COUNTER = 2;
export const PERF_ENUM_INSTANCES = 3;
export const PERF_COLLECT_START = 5;
export const PERF_COLLECT_END = 6;
export const PERF_FILTER = 9;
export const PERF_DATA_VERSION = 1;
export const PERF_DATA_REVISION = 1;
export const PERF_NO_INSTANCES = `-1`;
export const PERF_METADATA_MULTIPLE_INSTANCES = `-2`;
export const PERF_METADATA_NO_INSTANCES = `-3`;
export const PERF_SIZE_DWORD = 0;
export const PERF_SIZE_LARGE = 256;
export const PERF_SIZE_ZERO = 512;
export const PERF_SIZE_VARIABLE_LEN = 768;
export const PERF_TYPE_NUMBER = 0;
export const PERF_TYPE_COUNTER = 1024;
export const PERF_TYPE_TEXT = 2048;
export const PERF_TYPE_ZERO = 3072;
export const PERF_NUMBER_HEX = 0;
export const PERF_NUMBER_DECIMAL = 65536;
export const PERF_NUMBER_DEC_1000 = 131072;
export const PERF_COUNTER_VALUE = 0;
export const PERF_COUNTER_RATE = 65536;
export const PERF_COUNTER_FRACTION = 131072;
export const PERF_COUNTER_BASE = 196608;
export const PERF_COUNTER_ELAPSED = 262144;
export const PERF_COUNTER_QUEUELEN = 327680;
export const PERF_COUNTER_HISTOGRAM = 393216;
export const PERF_COUNTER_PRECISION = 458752;
export const PERF_TEXT_UNICODE = 0;
export const PERF_TEXT_ASCII = 65536;
export const PERF_TIMER_TICK = 0;
export const PERF_TIMER_100NS = 1048576;
export const PERF_OBJECT_TIMER = 2097152;
export const PERF_DELTA_COUNTER = 4194304;
export const PERF_DELTA_BASE = 8388608;
export const PERF_INVERSE_COUNTER = 16777216;
export const PERF_MULTI_COUNTER = 33554432;
export const PERF_DISPLAY_NO_SUFFIX = 0;
export const PERF_DISPLAY_PER_SEC = 268435456;
export const PERF_DISPLAY_PERCENT = 536870912;
export const PERF_DISPLAY_SECONDS = 805306368;
export const PERF_DISPLAY_NOSHOW = 1073741824;
export const PERF_COUNTER_HISTOGRAM_TYPE = 2147483648;
export const PERF_NO_UNIQUE_ID = `-1`;
export const MAX_PERF_OBJECTS_IN_QUERY_FUNCTION = 64;
export const WINPERF_LOG_NONE = 0;
export const WINPERF_LOG_USER = 1;
export const WINPERF_LOG_DEBUG = 2;
export const WINPERF_LOG_VERBOSE = 3;
export const PDH_CSTATUS_VALID_DATA = 0;
export const PDH_CSTATUS_NEW_DATA = 1;
export const PDH_CSTATUS_NO_MACHINE = `-2147481648`;
export const PDH_CSTATUS_NO_INSTANCE = `-2147481647`;
export const PDH_MORE_DATA = `-2147481646`;
export const PDH_CSTATUS_ITEM_NOT_VALIDATED = `-2147481645`;
export const PDH_RETRY = `-2147481644`;
export const PDH_NO_DATA = `-2147481643`;
export const PDH_CALC_NEGATIVE_DENOMINATOR = `-2147481642`;
export const PDH_CALC_NEGATIVE_TIMEBASE = `-2147481641`;
export const PDH_CALC_NEGATIVE_VALUE = `-2147481640`;
export const PDH_DIALOG_CANCELLED = `-2147481639`;
export const PDH_END_OF_LOG_FILE = `-2147481638`;
export const PDH_ASYNC_QUERY_TIMEOUT = `-2147481637`;
export const PDH_CANNOT_SET_DEFAULT_REALTIME_DATASOURCE = `-2147481636`;
export const PDH_UNABLE_MAP_NAME_FILES = `-2147480619`;
export const PDH_PLA_VALIDATION_WARNING = `-2147480589`;
export const PDH_CSTATUS_NO_OBJECT = `-1073738824`;
export const PDH_CSTATUS_NO_COUNTER = `-1073738823`;
export const PDH_CSTATUS_INVALID_DATA = `-1073738822`;
export const PDH_MEMORY_ALLOCATION_FAILURE = `-1073738821`;
export const PDH_INVALID_HANDLE = `-1073738820`;
export const PDH_INVALID_ARGUMENT = `-1073738819`;
export const PDH_FUNCTION_NOT_FOUND = `-1073738818`;
export const PDH_CSTATUS_NO_COUNTERNAME = `-1073738817`;
export const PDH_CSTATUS_BAD_COUNTERNAME = `-1073738816`;
export const PDH_INVALID_BUFFER = `-1073738815`;
export const PDH_INSUFFICIENT_BUFFER = `-1073738814`;
export const PDH_CANNOT_CONNECT_MACHINE = `-1073738813`;
export const PDH_INVALID_PATH = `-1073738812`;
export const PDH_INVALID_INSTANCE = `-1073738811`;
export const PDH_INVALID_DATA = `-1073738810`;
export const PDH_NO_DIALOG_DATA = `-1073738809`;
export const PDH_CANNOT_READ_NAME_STRINGS = `-1073738808`;
export const PDH_LOG_FILE_CREATE_ERROR = `-1073738807`;
export const PDH_LOG_FILE_OPEN_ERROR = `-1073738806`;
export const PDH_LOG_TYPE_NOT_FOUND = `-1073738805`;
export const PDH_NO_MORE_DATA = `-1073738804`;
export const PDH_ENTRY_NOT_IN_LOG_FILE = `-1073738803`;
export const PDH_DATA_SOURCE_IS_LOG_FILE = `-1073738802`;
export const PDH_DATA_SOURCE_IS_REAL_TIME = `-1073738801`;
export const PDH_UNABLE_READ_LOG_HEADER = `-1073738800`;
export const PDH_FILE_NOT_FOUND = `-1073738799`;
export const PDH_FILE_ALREADY_EXISTS = `-1073738798`;
export const PDH_NOT_IMPLEMENTED = `-1073738797`;
export const PDH_STRING_NOT_FOUND = `-1073738796`;
export const PDH_UNKNOWN_LOG_FORMAT = `-1073738794`;
export const PDH_UNKNOWN_LOGSVC_COMMAND = `-1073738793`;
export const PDH_LOGSVC_QUERY_NOT_FOUND = `-1073738792`;
export const PDH_LOGSVC_NOT_OPENED = `-1073738791`;
export const PDH_WBEM_ERROR = `-1073738790`;
export const PDH_ACCESS_DENIED = `-1073738789`;
export const PDH_LOG_FILE_TOO_SMALL = `-1073738788`;
export const PDH_INVALID_DATASOURCE = `-1073738787`;
export const PDH_INVALID_SQLDB = `-1073738786`;
export const PDH_NO_COUNTERS = `-1073738785`;
export const PDH_SQL_ALLOC_FAILED = `-1073738784`;
export const PDH_SQL_ALLOCCON_FAILED = `-1073738783`;
export const PDH_SQL_EXEC_DIRECT_FAILED = `-1073738782`;
export const PDH_SQL_FETCH_FAILED = `-1073738781`;
export const PDH_SQL_ROWCOUNT_FAILED = `-1073738780`;
export const PDH_SQL_MORE_RESULTS_FAILED = `-1073738779`;
export const PDH_SQL_CONNECT_FAILED = `-1073738778`;
export const PDH_SQL_BIND_FAILED = `-1073738777`;
export const PDH_CANNOT_CONNECT_WMI_SERVER = `-1073738776`;
export const PDH_PLA_COLLECTION_ALREADY_RUNNING = `-1073738775`;
export const PDH_PLA_ERROR_SCHEDULE_OVERLAP = `-1073738774`;
export const PDH_PLA_COLLECTION_NOT_FOUND = `-1073738773`;
export const PDH_PLA_ERROR_SCHEDULE_ELAPSED = `-1073738772`;
export const PDH_PLA_ERROR_NOSTART = `-1073738771`;
export const PDH_PLA_ERROR_ALREADY_EXISTS = `-1073738770`;
export const PDH_PLA_ERROR_TYPE_MISMATCH = `-1073738769`;
export const PDH_PLA_ERROR_FILEPATH = `-1073738768`;
export const PDH_PLA_SERVICE_ERROR = `-1073738767`;
export const PDH_PLA_VALIDATION_ERROR = `-1073738766`;
export const PDH_PLA_ERROR_NAME_TOO_LONG = `-1073738764`;
export const PDH_INVALID_SQL_LOG_FORMAT = `-1073738763`;
export const PDH_COUNTER_ALREADY_IN_QUERY = `-1073738762`;
export const PDH_BINARY_LOG_CORRUPT = `-1073738761`;
export const PDH_LOG_SAMPLE_TOO_SMALL = `-1073738760`;
export const PDH_OS_LATER_VERSION = `-1073738759`;
export const PDH_OS_EARLIER_VERSION = `-1073738758`;
export const PDH_INCORRECT_APPEND_TIME = `-1073738757`;
export const PDH_UNMATCHED_APPEND_COUNTER = `-1073738756`;
export const PDH_SQL_ALTER_DETAIL_FAILED = `-1073738755`;
export const PDH_QUERY_PERF_DATA_TIMEOUT = `-1073738754`;
export const PLA_CAPABILITY_LOCAL = 268435456;
export const PLA_CAPABILITY_V1_SVC = 1;
export const PLA_CAPABILITY_V1_SESSION = 2;
export const PLA_CAPABILITY_V1_SYSTEM = 4;
export const PLA_CAPABILITY_LEGACY_SESSION = 8;
export const PLA_CAPABILITY_LEGACY_SVC = 16;
export const PLA_CAPABILITY_AUTOLOGGER = 32;
export const plaPerformanceCounter = 0;
export const plaTrace = 1;
export const plaConfiguration = 2;
export const plaAlert = 3;
export const plaApiTrace = 4;
export const plaCommaSeparated = 0;
export const plaTabSeparated = 1;
export const plaSql = 2;
export const plaBinary = 3;
export const plaNone = 0;
export const plaPattern = 1;
export const plaComputer = 2;
export const plaMonthDayHour = 256;
export const plaSerialNumber = 512;
export const plaYearDayOfYear = 1024;
export const plaYearMonth = 2048;
export const plaYearMonthDay = 4096;
export const plaYearMonthDayHour = 8192;
export const plaMonthDayHourMinute = 16384;
export const plaStopped = 0;
export const plaRunning = 1;
export const plaCompiling = 2;
export const plaPending = 3;
export const plaUndefined = 4;
export const plaTimeStamp = 0;
export const plaPerformance = 1;
export const plaSystem = 2;
export const plaCycle = 3;
export const plaFile = 1;
export const plaRealTime = 2;
export const plaBoth = 3;
export const plaBuffering = 4;
export const plaCreateNew = 1;
export const plaModify = 2;
export const plaCreateOrModify = 3;
export const plaUpdateRunningInstance = 16;
export const plaFlushTrace = 32;
export const plaValidateOnly = 4096;
export const plaIndex = 1;
export const plaFlag = 2;
export const plaFlagArray = 3;
export const plaValidation = 4;
export const plaRunOnce = 0;
export const plaSunday = 1;
export const plaMonday = 2;
export const plaTuesday = 4;
export const plaWednesday = 8;
export const plaThursday = 16;
export const plaFriday = 32;
export const plaSaturday = 64;
export const plaEveryday = 127;
export const plaDeleteLargest = 0;
export const plaDeleteOldest = 1;
export const plaCreateReport = 1;
export const plaRunRules = 2;
export const plaCreateHtml = 4;
export const plaFolderActions = 8;
export const plaResourceFreeing = 16;
export const plaCreateCab = 1;
export const plaDeleteData = 2;
export const plaSendCab = 4;
export const plaDeleteCab = 8;
export const plaDeleteReport = 16;
export const PMCCounter = 0;
export const MaxHardwareCounterType = 1;
export const PERF_REG_COUNTERSET_STRUCT = 1;
export const PERF_REG_COUNTER_STRUCT = 2;
export const PERF_REG_COUNTERSET_NAME_STRING = 3;
export const PERF_REG_COUNTERSET_HELP_STRING = 4;
export const PERF_REG_COUNTER_NAME_STRINGS = 5;
export const PERF_REG_COUNTER_HELP_STRINGS = 6;
export const PERF_REG_PROVIDER_NAME = 7;
export const PERF_REG_PROVIDER_GUID = 8;
export const PERF_REG_COUNTERSET_ENGLISH_NAME = 9;
export const PERF_REG_COUNTER_ENGLISH_NAMES = 10;
export const PERF_ERROR_RETURN = 0;
export const PERF_SINGLE_COUNTER = 1;
export const PERF_MULTIPLE_COUNTERS = 2;
export const PERF_MULTIPLE_INSTANCES = 4;
export const PERF_COUNTERSET = 6;
export const sysmonLineGraph = 1;
export const sysmonHistogram = 2;
export const sysmonReport = 3;
export const sysmonChartArea = 4;
export const sysmonChartStackedArea = 5;
export const sysmonDefaultValue = 0;
export const sysmonCurrentValue = 1;
export const sysmonAverage = 2;
export const sysmonMinimum = 3;
export const sysmonMaximum = 4;
export const sysmonNullDataSource = `-1`;
export const sysmonCurrentActivity = 1;
export const sysmonLogFiles = 2;
export const sysmonSqlLog = 3;
export const sysmonFileHtml = 1;
export const sysmonFileReport = 2;
export const sysmonFileCsv = 3;
export const sysmonFileTsv = 4;
export const sysmonFileBlg = 5;
export const sysmonFileRetiredBlg = 6;
export const sysmonFileGif = 7;
export const sysmonDataAvg = 1;
export const sysmonDataMin = 2;
export const sysmonDataMax = 3;
export const sysmonDataTime = 4;
export const sysmonDataCount = 5;
export const sysmonBatchNone = 0;
export const sysmonBatchAddFiles = 1;
export const sysmonBatchAddCounters = 2;
export const sysmonBatchAddFilesAutoCounters = 3;

// Structs

export type PerfProviderHandle = bigint | number;

export type PerfQueryHandle = bigint | number;

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: bigint | number;
  /** u64 */
  Region: bigint | number;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get Region(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set Alignment(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set Region(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

export type PWSTR = Deno.PointerValue | Uint8Array;

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null | Uint8Array | Uint16Array;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class _u_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwValue(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pwszName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwValue(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pwszName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.Foundation.LARGE_INTEGER (size: 24)
 */
export interface LARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue;
  /** i64 */
  QuadPart: bigint | number;
}

export const sizeofLARGE_INTEGER = 24;

export function allocLARGE_INTEGER(data?: Partial<LARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofLARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.u))), true);
  // 0x10: i64
  if (data?.QuadPart !== undefined) view.setBigInt64(16, BigInt(data.QuadPart), true);
  return buf;
}

export class LARGE_INTEGERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get u(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i64
  get QuadPart(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set u(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i64
  set QuadPart(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Performance.PERF_OBJECT_TYPE (size: 64)
 */
export interface PERF_OBJECT_TYPE {
  /** u32 */
  TotalByteLength: number;
  /** u32 */
  DefinitionLength: number;
  /** u32 */
  HeaderLength: number;
  /** u32 */
  ObjectNameTitleIndex: number;
  /** u32 */
  ObjectNameTitle: number;
  /** u32 */
  ObjectHelpTitleIndex: number;
  /** u32 */
  ObjectHelpTitle: number;
  /** u32 */
  DetailLevel: number;
  /** u32 */
  NumCounters: number;
  /** i32 */
  DefaultCounter: number;
  /** i32 */
  NumInstances: number;
  /** u32 */
  CodePage: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PerfTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PerfFreq: Uint8Array | Deno.PointerValue;
}

export const sizeofPERF_OBJECT_TYPE = 64;

export function allocPERF_OBJECT_TYPE(data?: Partial<PERF_OBJECT_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofPERF_OBJECT_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TotalByteLength !== undefined) view.setUint32(0, Number(data.TotalByteLength), true);
  // 0x04: u32
  if (data?.DefinitionLength !== undefined) view.setUint32(4, Number(data.DefinitionLength), true);
  // 0x08: u32
  if (data?.HeaderLength !== undefined) view.setUint32(8, Number(data.HeaderLength), true);
  // 0x0c: u32
  if (data?.ObjectNameTitleIndex !== undefined) view.setUint32(12, Number(data.ObjectNameTitleIndex), true);
  // 0x10: u32
  if (data?.ObjectNameTitle !== undefined) view.setUint32(16, Number(data.ObjectNameTitle), true);
  // 0x14: u32
  if (data?.ObjectHelpTitleIndex !== undefined) view.setUint32(20, Number(data.ObjectHelpTitleIndex), true);
  // 0x18: u32
  if (data?.ObjectHelpTitle !== undefined) view.setUint32(24, Number(data.ObjectHelpTitle), true);
  // 0x1c: u32
  if (data?.DetailLevel !== undefined) view.setUint32(28, Number(data.DetailLevel), true);
  // 0x20: u32
  if (data?.NumCounters !== undefined) view.setUint32(32, Number(data.NumCounters), true);
  // 0x24: i32
  if (data?.DefaultCounter !== undefined) view.setInt32(36, Number(data.DefaultCounter), true);
  // 0x28: i32
  if (data?.NumInstances !== undefined) view.setInt32(40, Number(data.NumInstances), true);
  // 0x2c: u32
  if (data?.CodePage !== undefined) view.setUint32(44, Number(data.CodePage), true);
  // 0x30: pointer
  if (data?.PerfTime !== undefined) view.setBigUint64(48, data.PerfTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PerfTime))), true);
  // 0x38: pointer
  if (data?.PerfFreq !== undefined) view.setBigUint64(56, data.PerfFreq === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PerfFreq))), true);
  return buf;
}

export class PERF_OBJECT_TYPEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get TotalByteLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get DefinitionLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get HeaderLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ObjectNameTitleIndex(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ObjectNameTitle(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ObjectHelpTitleIndex(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get ObjectHelpTitle(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get DetailLevel(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get NumCounters(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: i32
  get DefaultCounter(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: i32
  get NumInstances(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: u32
  get CodePage(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: pointer
  get PerfTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get PerfFreq(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set TotalByteLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set DefinitionLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set HeaderLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ObjectNameTitleIndex(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ObjectNameTitle(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ObjectHelpTitleIndex(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set ObjectHelpTitle(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set DetailLevel(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set NumCounters(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: i32
  set DefaultCounter(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: i32
  set NumInstances(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: u32
  set CodePage(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: pointer
  set PerfTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set PerfFreq(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Performance.PERF_COUNTER_DEFINITION (size: 40)
 */
export interface PERF_COUNTER_DEFINITION {
  /** u32 */
  ByteLength: number;
  /** u32 */
  CounterNameTitleIndex: number;
  /** u32 */
  CounterNameTitle: number;
  /** u32 */
  CounterHelpTitleIndex: number;
  /** u32 */
  CounterHelpTitle: number;
  /** i32 */
  DefaultScale: number;
  /** u32 */
  DetailLevel: number;
  /** u32 */
  CounterType: number;
  /** u32 */
  CounterSize: number;
  /** u32 */
  CounterOffset: number;
}

export const sizeofPERF_COUNTER_DEFINITION = 40;

export function allocPERF_COUNTER_DEFINITION(data?: Partial<PERF_COUNTER_DEFINITION>): Uint8Array {
  const buf = new Uint8Array(sizeofPERF_COUNTER_DEFINITION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ByteLength !== undefined) view.setUint32(0, Number(data.ByteLength), true);
  // 0x04: u32
  if (data?.CounterNameTitleIndex !== undefined) view.setUint32(4, Number(data.CounterNameTitleIndex), true);
  // 0x08: u32
  if (data?.CounterNameTitle !== undefined) view.setUint32(8, Number(data.CounterNameTitle), true);
  // 0x0c: u32
  if (data?.CounterHelpTitleIndex !== undefined) view.setUint32(12, Number(data.CounterHelpTitleIndex), true);
  // 0x10: u32
  if (data?.CounterHelpTitle !== undefined) view.setUint32(16, Number(data.CounterHelpTitle), true);
  // 0x14: i32
  if (data?.DefaultScale !== undefined) view.setInt32(20, Number(data.DefaultScale), true);
  // 0x18: u32
  if (data?.DetailLevel !== undefined) view.setUint32(24, Number(data.DetailLevel), true);
  // 0x1c: u32
  if (data?.CounterType !== undefined) view.setUint32(28, Number(data.CounterType), true);
  // 0x20: u32
  if (data?.CounterSize !== undefined) view.setUint32(32, Number(data.CounterSize), true);
  // 0x24: u32
  if (data?.CounterOffset !== undefined) view.setUint32(36, Number(data.CounterOffset), true);
  return buf;
}

export class PERF_COUNTER_DEFINITIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ByteLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get CounterNameTitleIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get CounterNameTitle(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get CounterHelpTitleIndex(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get CounterHelpTitle(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get DefaultScale(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: u32
  get DetailLevel(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get CounterType(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get CounterSize(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get CounterOffset(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: u32
  set ByteLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set CounterNameTitleIndex(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set CounterNameTitle(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set CounterHelpTitleIndex(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set CounterHelpTitle(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set DefaultScale(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: u32
  set DetailLevel(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set CounterType(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set CounterSize(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set CounterOffset(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.System.Performance.HardwareCounterProfiling.HARDWARE_COUNTER_DATA (size: 16)
 */
export interface HARDWARE_COUNTER_DATA {
  /** Windows.Win32.System.Performance.HardwareCounterProfiling.HARDWARE_COUNTER_TYPE */
  Type: HARDWARE_COUNTER_TYPE;
  /** u32 */
  Reserved: number;
  /** u64 */
  Value: bigint | number;
}

export const sizeofHARDWARE_COUNTER_DATA = 16;

export function allocHARDWARE_COUNTER_DATA(data?: Partial<HARDWARE_COUNTER_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofHARDWARE_COUNTER_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  // 0x08: u64
  if (data?.Value !== undefined) view.setBigUint64(8, BigInt(data.Value), true);
  return buf;
}

export class HARDWARE_COUNTER_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Reserved(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get Value(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Reserved(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set Value(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Performance.HardwareCounterProfiling.PERFORMANCE_DATA (size: 40)
 */
export interface PERFORMANCE_DATA {
  /** u16 */
  Size: number;
  /** u8 */
  Version: number;
  /** u8 */
  HwCountersCount: number;
  /** u32 */
  ContextSwitchCount: number;
  /** u64 */
  WaitReasonBitMap: bigint | number;
  /** u64 */
  CycleTime: bigint | number;
  /** u32 */
  RetryCount: number;
  /** u32 */
  Reserved: number;
  /** array */
  HwCounters: Deno.PointerValue;
}

export const sizeofPERFORMANCE_DATA = 40;

export function allocPERFORMANCE_DATA(data?: Partial<PERFORMANCE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofPERFORMANCE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Size !== undefined) view.setUint16(0, Number(data.Size), true);
  // 0x02: u8
  if (data?.Version !== undefined) view.setUint8(2, Number(data.Version));
  // 0x03: u8
  if (data?.HwCountersCount !== undefined) view.setUint8(3, Number(data.HwCountersCount));
  // 0x04: u32
  if (data?.ContextSwitchCount !== undefined) view.setUint32(4, Number(data.ContextSwitchCount), true);
  // 0x08: u64
  if (data?.WaitReasonBitMap !== undefined) view.setBigUint64(8, BigInt(data.WaitReasonBitMap), true);
  // 0x10: u64
  if (data?.CycleTime !== undefined) view.setBigUint64(16, BigInt(data.CycleTime), true);
  // 0x18: u32
  if (data?.RetryCount !== undefined) view.setUint32(24, Number(data.RetryCount), true);
  // 0x1c: u32
  if (data?.Reserved !== undefined) view.setUint32(28, Number(data.Reserved), true);
  // 0x20: pointer
  if (data?.HwCounters !== undefined) view.setBigUint64(32, data.HwCounters === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HwCounters))), true);
  return buf;
}

export class PERFORMANCE_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Size(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get Version(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get HwCountersCount(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u32
  get ContextSwitchCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get WaitReasonBitMap(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get CycleTime(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u32
  get RetryCount(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get Reserved(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get HwCounters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set Size(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set Version(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set HwCountersCount(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u32
  set ContextSwitchCount(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set WaitReasonBitMap(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set CycleTime(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u32
  set RetryCount(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set Reserved(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set HwCounters(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Performance.PERF_COUNTERSET_INFO (size: 24)
 */
export interface PERF_COUNTERSET_INFO {
  /** System.Guid */
  CounterSetGuid: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  ProviderGuid: Uint8Array | Deno.PointerValue;
  /** u32 */
  NumCounters: number;
  /** u32 */
  InstanceType: number;
}

export const sizeofPERF_COUNTERSET_INFO = 24;

export function allocPERF_COUNTERSET_INFO(data?: Partial<PERF_COUNTERSET_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPERF_COUNTERSET_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CounterSetGuid !== undefined) view.setBigUint64(0, data.CounterSetGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CounterSetGuid))), true);
  // 0x08: pointer
  if (data?.ProviderGuid !== undefined) view.setBigUint64(8, data.ProviderGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProviderGuid))), true);
  // 0x10: u32
  if (data?.NumCounters !== undefined) view.setUint32(16, Number(data.NumCounters), true);
  // 0x14: u32
  if (data?.InstanceType !== undefined) view.setUint32(20, Number(data.InstanceType), true);
  return buf;
}

export class PERF_COUNTERSET_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CounterSetGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ProviderGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get NumCounters(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get InstanceType(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: pointer
  set CounterSetGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ProviderGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set NumCounters(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set InstanceType(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.System.Performance.PERF_COUNTER_INFO (size: 32)
 */
export interface PERF_COUNTER_INFO {
  /** u32 */
  CounterId: number;
  /** u32 */
  Type: number;
  /** u64 */
  Attrib: bigint | number;
  /** u32 */
  Size: number;
  /** u32 */
  DetailLevel: number;
  /** i32 */
  Scale: number;
  /** u32 */
  Offset: number;
}

export const sizeofPERF_COUNTER_INFO = 32;

export function allocPERF_COUNTER_INFO(data?: Partial<PERF_COUNTER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPERF_COUNTER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CounterId !== undefined) view.setUint32(0, Number(data.CounterId), true);
  // 0x04: u32
  if (data?.Type !== undefined) view.setUint32(4, Number(data.Type), true);
  // 0x08: u64
  if (data?.Attrib !== undefined) view.setBigUint64(8, BigInt(data.Attrib), true);
  // 0x10: u32
  if (data?.Size !== undefined) view.setUint32(16, Number(data.Size), true);
  // 0x14: u32
  if (data?.DetailLevel !== undefined) view.setUint32(20, Number(data.DetailLevel), true);
  // 0x18: i32
  if (data?.Scale !== undefined) view.setInt32(24, Number(data.Scale), true);
  // 0x1c: u32
  if (data?.Offset !== undefined) view.setUint32(28, Number(data.Offset), true);
  return buf;
}

export class PERF_COUNTER_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get CounterId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Type(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get Attrib(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u32
  get Size(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get DetailLevel(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: i32
  get Scale(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: u32
  get Offset(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: u32
  set CounterId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Type(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set Attrib(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u32
  set Size(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set DetailLevel(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: i32
  set Scale(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: u32
  set Offset(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.System.Performance.PERF_COUNTERSET_INSTANCE (size: 24)
 */
export interface PERF_COUNTERSET_INSTANCE {
  /** System.Guid */
  CounterSetGuid: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwSize: number;
  /** u32 */
  InstanceId: number;
  /** u32 */
  InstanceNameOffset: number;
  /** u32 */
  InstanceNameSize: number;
}

export const sizeofPERF_COUNTERSET_INSTANCE = 24;

export function allocPERF_COUNTERSET_INSTANCE(data?: Partial<PERF_COUNTERSET_INSTANCE>): Uint8Array {
  const buf = new Uint8Array(sizeofPERF_COUNTERSET_INSTANCE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CounterSetGuid !== undefined) view.setBigUint64(0, data.CounterSetGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CounterSetGuid))), true);
  // 0x08: u32
  if (data?.dwSize !== undefined) view.setUint32(8, Number(data.dwSize), true);
  // 0x0c: u32
  if (data?.InstanceId !== undefined) view.setUint32(12, Number(data.InstanceId), true);
  // 0x10: u32
  if (data?.InstanceNameOffset !== undefined) view.setUint32(16, Number(data.InstanceNameOffset), true);
  // 0x14: u32
  if (data?.InstanceNameSize !== undefined) view.setUint32(20, Number(data.InstanceNameSize), true);
  return buf;
}

export class PERF_COUNTERSET_INSTANCEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CounterSetGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get InstanceId(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get InstanceNameOffset(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get InstanceNameSize(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: pointer
  set CounterSetGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set InstanceId(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set InstanceNameOffset(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set InstanceNameSize(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.System.Performance.PERF_COUNTER_IDENTITY (size: 32)
 */
export interface PERF_COUNTER_IDENTITY {
  /** System.Guid */
  CounterSetGuid: Uint8Array | Deno.PointerValue;
  /** u32 */
  BufferSize: number;
  /** u32 */
  CounterId: number;
  /** u32 */
  InstanceId: number;
  /** u32 */
  MachineOffset: number;
  /** u32 */
  NameOffset: number;
  /** u32 */
  Reserved: number;
}

export const sizeofPERF_COUNTER_IDENTITY = 32;

export function allocPERF_COUNTER_IDENTITY(data?: Partial<PERF_COUNTER_IDENTITY>): Uint8Array {
  const buf = new Uint8Array(sizeofPERF_COUNTER_IDENTITY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CounterSetGuid !== undefined) view.setBigUint64(0, data.CounterSetGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CounterSetGuid))), true);
  // 0x08: u32
  if (data?.BufferSize !== undefined) view.setUint32(8, Number(data.BufferSize), true);
  // 0x0c: u32
  if (data?.CounterId !== undefined) view.setUint32(12, Number(data.CounterId), true);
  // 0x10: u32
  if (data?.InstanceId !== undefined) view.setUint32(16, Number(data.InstanceId), true);
  // 0x14: u32
  if (data?.MachineOffset !== undefined) view.setUint32(20, Number(data.MachineOffset), true);
  // 0x18: u32
  if (data?.NameOffset !== undefined) view.setUint32(24, Number(data.NameOffset), true);
  // 0x1c: u32
  if (data?.Reserved !== undefined) view.setUint32(28, Number(data.Reserved), true);
  return buf;
}

export class PERF_COUNTER_IDENTITYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CounterSetGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get BufferSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get CounterId(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get InstanceId(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get MachineOffset(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get NameOffset(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get Reserved(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: pointer
  set CounterSetGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set BufferSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set CounterId(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set InstanceId(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set MachineOffset(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set NameOffset(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set Reserved(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.System.Performance.PERF_PROVIDER_CONTEXT (size: 40)
 */
export interface PERF_PROVIDER_CONTEXT {
  /** u32 */
  ContextSize: number;
  /** u32 */
  Reserved: number;
  /** Windows.Win32.System.Performance.PERFLIBREQUEST */
  ControlCallback: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Performance.PERF_MEM_ALLOC */
  MemAllocRoutine: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Performance.PERF_MEM_FREE */
  MemFreeRoutine: Uint8Array | Deno.PointerValue;
  /** ptr */
  pMemContext: Deno.PointerValue | Uint8Array;
}

export const sizeofPERF_PROVIDER_CONTEXT = 40;

export function allocPERF_PROVIDER_CONTEXT(data?: Partial<PERF_PROVIDER_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofPERF_PROVIDER_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ContextSize !== undefined) view.setUint32(0, Number(data.ContextSize), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  // 0x08: pointer
  if (data?.ControlCallback !== undefined) view.setBigUint64(8, data.ControlCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ControlCallback))), true);
  // 0x10: pointer
  if (data?.MemAllocRoutine !== undefined) view.setBigUint64(16, data.MemAllocRoutine === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MemAllocRoutine))), true);
  // 0x18: pointer
  if (data?.MemFreeRoutine !== undefined) view.setBigUint64(24, data.MemFreeRoutine === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MemFreeRoutine))), true);
  // 0x20: pointer
  if (data?.pMemContext !== undefined) view.setBigUint64(32, data.pMemContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pMemContext))), true);
  return buf;
}

export class PERF_PROVIDER_CONTEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ContextSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Reserved(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ControlCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get MemAllocRoutine(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get MemFreeRoutine(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get pMemContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set ContextSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Reserved(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ControlCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set MemAllocRoutine(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set MemFreeRoutine(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set pMemContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Performance.PERF_INSTANCE_HEADER (size: 8)
 */
export interface PERF_INSTANCE_HEADER {
  /** u32 */
  Size: number;
  /** u32 */
  InstanceId: number;
}

export const sizeofPERF_INSTANCE_HEADER = 8;

export function allocPERF_INSTANCE_HEADER(data?: Partial<PERF_INSTANCE_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofPERF_INSTANCE_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.InstanceId !== undefined) view.setUint32(4, Number(data.InstanceId), true);
  return buf;
}

export class PERF_INSTANCE_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get InstanceId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set InstanceId(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Performance.PERF_COUNTERSET_REG_INFO (size: 24)
 */
export interface PERF_COUNTERSET_REG_INFO {
  /** System.Guid */
  CounterSetGuid: Uint8Array | Deno.PointerValue;
  /** u32 */
  CounterSetType: number;
  /** u32 */
  DetailLevel: number;
  /** u32 */
  NumCounters: number;
  /** u32 */
  InstanceType: number;
}

export const sizeofPERF_COUNTERSET_REG_INFO = 24;

export function allocPERF_COUNTERSET_REG_INFO(data?: Partial<PERF_COUNTERSET_REG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPERF_COUNTERSET_REG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CounterSetGuid !== undefined) view.setBigUint64(0, data.CounterSetGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CounterSetGuid))), true);
  // 0x08: u32
  if (data?.CounterSetType !== undefined) view.setUint32(8, Number(data.CounterSetType), true);
  // 0x0c: u32
  if (data?.DetailLevel !== undefined) view.setUint32(12, Number(data.DetailLevel), true);
  // 0x10: u32
  if (data?.NumCounters !== undefined) view.setUint32(16, Number(data.NumCounters), true);
  // 0x14: u32
  if (data?.InstanceType !== undefined) view.setUint32(20, Number(data.InstanceType), true);
  return buf;
}

export class PERF_COUNTERSET_REG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CounterSetGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get CounterSetType(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get DetailLevel(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get NumCounters(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get InstanceType(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: pointer
  set CounterSetGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set CounterSetType(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set DetailLevel(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set NumCounters(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set InstanceType(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.System.Performance.PERF_COUNTER_REG_INFO (size: 48)
 */
export interface PERF_COUNTER_REG_INFO {
  /** u32 */
  CounterId: number;
  /** u32 */
  Type: number;
  /** u64 */
  Attrib: bigint | number;
  /** u32 */
  DetailLevel: number;
  /** i32 */
  DefaultScale: number;
  /** u32 */
  BaseCounterId: number;
  /** u32 */
  PerfTimeId: number;
  /** u32 */
  PerfFreqId: number;
  /** u32 */
  MultiId: number;
  /** Windows.Win32.System.Performance.PERF_COUNTER_AGGREGATE_FUNC */
  AggregateFunc: PERF_COUNTER_AGGREGATE_FUNC;
  /** u32 */
  Reserved: number;
}

export const sizeofPERF_COUNTER_REG_INFO = 48;

export function allocPERF_COUNTER_REG_INFO(data?: Partial<PERF_COUNTER_REG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPERF_COUNTER_REG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CounterId !== undefined) view.setUint32(0, Number(data.CounterId), true);
  // 0x04: u32
  if (data?.Type !== undefined) view.setUint32(4, Number(data.Type), true);
  // 0x08: u64
  if (data?.Attrib !== undefined) view.setBigUint64(8, BigInt(data.Attrib), true);
  // 0x10: u32
  if (data?.DetailLevel !== undefined) view.setUint32(16, Number(data.DetailLevel), true);
  // 0x14: i32
  if (data?.DefaultScale !== undefined) view.setInt32(20, Number(data.DefaultScale), true);
  // 0x18: u32
  if (data?.BaseCounterId !== undefined) view.setUint32(24, Number(data.BaseCounterId), true);
  // 0x1c: u32
  if (data?.PerfTimeId !== undefined) view.setUint32(28, Number(data.PerfTimeId), true);
  // 0x20: u32
  if (data?.PerfFreqId !== undefined) view.setUint32(32, Number(data.PerfFreqId), true);
  // 0x24: u32
  if (data?.MultiId !== undefined) view.setUint32(36, Number(data.MultiId), true);
  // 0x28: u32
  if (data?.AggregateFunc !== undefined) view.setUint32(40, Number(data.AggregateFunc), true);
  // 0x2c: u32
  if (data?.Reserved !== undefined) view.setUint32(44, Number(data.Reserved), true);
  return buf;
}

export class PERF_COUNTER_REG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get CounterId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Type(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get Attrib(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u32
  get DetailLevel(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get DefaultScale(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: u32
  get BaseCounterId(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get PerfTimeId(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get PerfFreqId(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get MultiId(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get AggregateFunc(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get Reserved(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: u32
  set CounterId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Type(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set Attrib(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u32
  set DetailLevel(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set DefaultScale(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: u32
  set BaseCounterId(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set PerfTimeId(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set PerfFreqId(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set MultiId(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set AggregateFunc(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set Reserved(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.System.Performance.PERF_STRING_BUFFER_HEADER (size: 8)
 */
export interface PERF_STRING_BUFFER_HEADER {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwCounters: number;
}

export const sizeofPERF_STRING_BUFFER_HEADER = 8;

export function allocPERF_STRING_BUFFER_HEADER(data?: Partial<PERF_STRING_BUFFER_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofPERF_STRING_BUFFER_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwCounters !== undefined) view.setUint32(4, Number(data.dwCounters), true);
  return buf;
}

export class PERF_STRING_BUFFER_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwCounters(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwCounters(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Performance.PERF_STRING_COUNTER_HEADER (size: 8)
 */
export interface PERF_STRING_COUNTER_HEADER {
  /** u32 */
  dwCounterId: number;
  /** u32 */
  dwOffset: number;
}

export const sizeofPERF_STRING_COUNTER_HEADER = 8;

export function allocPERF_STRING_COUNTER_HEADER(data?: Partial<PERF_STRING_COUNTER_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofPERF_STRING_COUNTER_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwCounterId !== undefined) view.setUint32(0, Number(data.dwCounterId), true);
  // 0x04: u32
  if (data?.dwOffset !== undefined) view.setUint32(4, Number(data.dwOffset), true);
  return buf;
}

export class PERF_STRING_COUNTER_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwCounterId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwOffset(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwCounterId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwOffset(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Performance.PERF_COUNTER_IDENTIFIER (size: 32)
 */
export interface PERF_COUNTER_IDENTIFIER {
  /** System.Guid */
  CounterSetGuid: Uint8Array | Deno.PointerValue;
  /** u32 */
  Status: number;
  /** u32 */
  Size: number;
  /** u32 */
  CounterId: number;
  /** u32 */
  InstanceId: number;
  /** u32 */
  Index: number;
  /** u32 */
  Reserved: number;
}

export const sizeofPERF_COUNTER_IDENTIFIER = 32;

export function allocPERF_COUNTER_IDENTIFIER(data?: Partial<PERF_COUNTER_IDENTIFIER>): Uint8Array {
  const buf = new Uint8Array(sizeofPERF_COUNTER_IDENTIFIER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CounterSetGuid !== undefined) view.setBigUint64(0, data.CounterSetGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CounterSetGuid))), true);
  // 0x08: u32
  if (data?.Status !== undefined) view.setUint32(8, Number(data.Status), true);
  // 0x0c: u32
  if (data?.Size !== undefined) view.setUint32(12, Number(data.Size), true);
  // 0x10: u32
  if (data?.CounterId !== undefined) view.setUint32(16, Number(data.CounterId), true);
  // 0x14: u32
  if (data?.InstanceId !== undefined) view.setUint32(20, Number(data.InstanceId), true);
  // 0x18: u32
  if (data?.Index !== undefined) view.setUint32(24, Number(data.Index), true);
  // 0x1c: u32
  if (data?.Reserved !== undefined) view.setUint32(28, Number(data.Reserved), true);
  return buf;
}

export class PERF_COUNTER_IDENTIFIERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CounterSetGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get Status(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Size(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get CounterId(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get InstanceId(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get Index(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get Reserved(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: pointer
  set CounterSetGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set Status(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Size(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set CounterId(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set InstanceId(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set Index(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set Reserved(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Foundation.SYSTEMTIME (size: 16)
 */
export interface SYSTEMTIME {
  /** u16 */
  wYear: number;
  /** u16 */
  wMonth: number;
  /** u16 */
  wDayOfWeek: number;
  /** u16 */
  wDay: number;
  /** u16 */
  wHour: number;
  /** u16 */
  wMinute: number;
  /** u16 */
  wSecond: number;
  /** u16 */
  wMilliseconds: number;
}

export const sizeofSYSTEMTIME = 16;

export function allocSYSTEMTIME(data?: Partial<SYSTEMTIME>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEMTIME);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wYear !== undefined) view.setUint16(0, Number(data.wYear), true);
  // 0x02: u16
  if (data?.wMonth !== undefined) view.setUint16(2, Number(data.wMonth), true);
  // 0x04: u16
  if (data?.wDayOfWeek !== undefined) view.setUint16(4, Number(data.wDayOfWeek), true);
  // 0x06: u16
  if (data?.wDay !== undefined) view.setUint16(6, Number(data.wDay), true);
  // 0x08: u16
  if (data?.wHour !== undefined) view.setUint16(8, Number(data.wHour), true);
  // 0x0a: u16
  if (data?.wMinute !== undefined) view.setUint16(10, Number(data.wMinute), true);
  // 0x0c: u16
  if (data?.wSecond !== undefined) view.setUint16(12, Number(data.wSecond), true);
  // 0x0e: u16
  if (data?.wMilliseconds !== undefined) view.setUint16(14, Number(data.wMilliseconds), true);
  return buf;
}

export class SYSTEMTIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get wYear(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get wMonth(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get wDayOfWeek(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get wDay(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u16
  get wHour(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get wMinute(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u16
  get wSecond(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get wMilliseconds(): number {
    return this.view.getUint16(14, true);
  }

  // 0x00: u16
  set wYear(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set wMonth(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set wDayOfWeek(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set wDay(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u16
  set wHour(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set wMinute(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u16
  set wSecond(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set wMilliseconds(value: number) {
    this.view.setUint16(14, value, true);
  }
}

/**
 * Windows.Win32.System.Performance.PERF_DATA_HEADER (size: 40)
 */
export interface PERF_DATA_HEADER {
  /** u32 */
  dwTotalSize: number;
  /** u32 */
  dwNumCounters: number;
  /** i64 */
  PerfTimeStamp: bigint | number;
  /** i64 */
  PerfTime100NSec: bigint | number;
  /** i64 */
  PerfFreq: bigint | number;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  SystemTime: Uint8Array | Deno.PointerValue;
}

export const sizeofPERF_DATA_HEADER = 40;

export function allocPERF_DATA_HEADER(data?: Partial<PERF_DATA_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofPERF_DATA_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTotalSize !== undefined) view.setUint32(0, Number(data.dwTotalSize), true);
  // 0x04: u32
  if (data?.dwNumCounters !== undefined) view.setUint32(4, Number(data.dwNumCounters), true);
  // 0x08: i64
  if (data?.PerfTimeStamp !== undefined) view.setBigInt64(8, BigInt(data.PerfTimeStamp), true);
  // 0x10: i64
  if (data?.PerfTime100NSec !== undefined) view.setBigInt64(16, BigInt(data.PerfTime100NSec), true);
  // 0x18: i64
  if (data?.PerfFreq !== undefined) view.setBigInt64(24, BigInt(data.PerfFreq), true);
  // 0x20: pointer
  if (data?.SystemTime !== undefined) view.setBigUint64(32, data.SystemTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SystemTime))), true);
  return buf;
}

export class PERF_DATA_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwTotalSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwNumCounters(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i64
  get PerfTimeStamp(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: i64
  get PerfTime100NSec(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: i64
  get PerfFreq(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: pointer
  get SystemTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwTotalSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwNumCounters(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i64
  set PerfTimeStamp(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: i64
  set PerfTime100NSec(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: i64
  set PerfFreq(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: pointer
  set SystemTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Performance.PERF_COUNTER_HEADER (size: 16)
 */
export interface PERF_COUNTER_HEADER {
  /** u32 */
  dwStatus: number;
  /** Windows.Win32.System.Performance.PerfCounterDataType */
  dwType: PerfCounterDataType;
  /** u32 */
  dwSize: number;
  /** u32 */
  Reserved: number;
}

export const sizeofPERF_COUNTER_HEADER = 16;

export function allocPERF_COUNTER_HEADER(data?: Partial<PERF_COUNTER_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofPERF_COUNTER_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStatus !== undefined) view.setUint32(0, Number(data.dwStatus), true);
  // 0x04: i32
  if (data?.dwType !== undefined) view.setInt32(4, Number(data.dwType), true);
  // 0x08: u32
  if (data?.dwSize !== undefined) view.setUint32(8, Number(data.dwSize), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

export class PERF_COUNTER_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwStatus(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get dwType(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get dwSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Reserved(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set dwStatus(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set dwType(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set dwSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Reserved(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.System.Performance.PERF_MULTI_INSTANCES (size: 8)
 */
export interface PERF_MULTI_INSTANCES {
  /** u32 */
  dwTotalSize: number;
  /** u32 */
  dwInstances: number;
}

export const sizeofPERF_MULTI_INSTANCES = 8;

export function allocPERF_MULTI_INSTANCES(data?: Partial<PERF_MULTI_INSTANCES>): Uint8Array {
  const buf = new Uint8Array(sizeofPERF_MULTI_INSTANCES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTotalSize !== undefined) view.setUint32(0, Number(data.dwTotalSize), true);
  // 0x04: u32
  if (data?.dwInstances !== undefined) view.setUint32(4, Number(data.dwInstances), true);
  return buf;
}

export class PERF_MULTI_INSTANCESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwTotalSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwInstances(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwTotalSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwInstances(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Performance.PERF_MULTI_COUNTERS (size: 8)
 */
export interface PERF_MULTI_COUNTERS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwCounters: number;
}

export const sizeofPERF_MULTI_COUNTERS = 8;

export function allocPERF_MULTI_COUNTERS(data?: Partial<PERF_MULTI_COUNTERS>): Uint8Array {
  const buf = new Uint8Array(sizeofPERF_MULTI_COUNTERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwCounters !== undefined) view.setUint32(4, Number(data.dwCounters), true);
  return buf;
}

export class PERF_MULTI_COUNTERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwCounters(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwCounters(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Performance.PERF_COUNTER_DATA (size: 8)
 */
export interface PERF_COUNTER_DATA {
  /** u32 */
  dwDataSize: number;
  /** u32 */
  dwSize: number;
}

export const sizeofPERF_COUNTER_DATA = 8;

export function allocPERF_COUNTER_DATA(data?: Partial<PERF_COUNTER_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofPERF_COUNTER_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwDataSize !== undefined) view.setUint32(0, Number(data.dwDataSize), true);
  // 0x04: u32
  if (data?.dwSize !== undefined) view.setUint32(4, Number(data.dwSize), true);
  return buf;
}

export class PERF_COUNTER_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwDataSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwDataSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwSize(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Performance.PERF_DATA_BLOCK (size: 80)
 */
export interface PERF_DATA_BLOCK {
  /** array */
  Signature: Deno.PointerValue;
  /** u32 */
  LittleEndian: number;
  /** u32 */
  Version: number;
  /** u32 */
  Revision: number;
  /** u32 */
  TotalByteLength: number;
  /** u32 */
  HeaderLength: number;
  /** u32 */
  NumObjectTypes: number;
  /** i32 */
  DefaultObject: number;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  SystemTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PerfTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PerfFreq: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PerfTime100nSec: Uint8Array | Deno.PointerValue;
  /** u32 */
  SystemNameLength: number;
  /** u32 */
  SystemNameOffset: number;
}

export const sizeofPERF_DATA_BLOCK = 80;

export function allocPERF_DATA_BLOCK(data?: Partial<PERF_DATA_BLOCK>): Uint8Array {
  const buf = new Uint8Array(sizeofPERF_DATA_BLOCK);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Signature !== undefined) view.setBigUint64(0, data.Signature === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Signature))), true);
  // 0x08: u32
  if (data?.LittleEndian !== undefined) view.setUint32(8, Number(data.LittleEndian), true);
  // 0x0c: u32
  if (data?.Version !== undefined) view.setUint32(12, Number(data.Version), true);
  // 0x10: u32
  if (data?.Revision !== undefined) view.setUint32(16, Number(data.Revision), true);
  // 0x14: u32
  if (data?.TotalByteLength !== undefined) view.setUint32(20, Number(data.TotalByteLength), true);
  // 0x18: u32
  if (data?.HeaderLength !== undefined) view.setUint32(24, Number(data.HeaderLength), true);
  // 0x1c: u32
  if (data?.NumObjectTypes !== undefined) view.setUint32(28, Number(data.NumObjectTypes), true);
  // 0x20: i32
  if (data?.DefaultObject !== undefined) view.setInt32(32, Number(data.DefaultObject), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.SystemTime !== undefined) view.setBigUint64(40, data.SystemTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SystemTime))), true);
  // 0x30: pointer
  if (data?.PerfTime !== undefined) view.setBigUint64(48, data.PerfTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PerfTime))), true);
  // 0x38: pointer
  if (data?.PerfFreq !== undefined) view.setBigUint64(56, data.PerfFreq === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PerfFreq))), true);
  // 0x40: pointer
  if (data?.PerfTime100nSec !== undefined) view.setBigUint64(64, data.PerfTime100nSec === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PerfTime100nSec))), true);
  // 0x48: u32
  if (data?.SystemNameLength !== undefined) view.setUint32(72, Number(data.SystemNameLength), true);
  // 0x4c: u32
  if (data?.SystemNameOffset !== undefined) view.setUint32(76, Number(data.SystemNameOffset), true);
  return buf;
}

export class PERF_DATA_BLOCKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Signature(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get LittleEndian(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Version(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Revision(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get TotalByteLength(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get HeaderLength(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get NumObjectTypes(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: i32
  get DefaultObject(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get SystemTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get PerfTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get PerfFreq(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get PerfTime100nSec(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get SystemNameLength(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get SystemNameOffset(): number {
    return this.view.getUint32(76, true);
  }

  // 0x00: pointer
  set Signature(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set LittleEndian(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Version(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Revision(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set TotalByteLength(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set HeaderLength(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set NumObjectTypes(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: i32
  set DefaultObject(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set SystemTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set PerfTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set PerfFreq(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set PerfTime100nSec(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: u32
  set SystemNameLength(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set SystemNameOffset(value: number) {
    this.view.setUint32(76, value, true);
  }
}

/**
 * Windows.Win32.System.Performance.PERF_INSTANCE_DEFINITION (size: 24)
 */
export interface PERF_INSTANCE_DEFINITION {
  /** u32 */
  ByteLength: number;
  /** u32 */
  ParentObjectTitleIndex: number;
  /** u32 */
  ParentObjectInstance: number;
  /** i32 */
  UniqueID: number;
  /** u32 */
  NameOffset: number;
  /** u32 */
  NameLength: number;
}

export const sizeofPERF_INSTANCE_DEFINITION = 24;

export function allocPERF_INSTANCE_DEFINITION(data?: Partial<PERF_INSTANCE_DEFINITION>): Uint8Array {
  const buf = new Uint8Array(sizeofPERF_INSTANCE_DEFINITION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ByteLength !== undefined) view.setUint32(0, Number(data.ByteLength), true);
  // 0x04: u32
  if (data?.ParentObjectTitleIndex !== undefined) view.setUint32(4, Number(data.ParentObjectTitleIndex), true);
  // 0x08: u32
  if (data?.ParentObjectInstance !== undefined) view.setUint32(8, Number(data.ParentObjectInstance), true);
  // 0x0c: i32
  if (data?.UniqueID !== undefined) view.setInt32(12, Number(data.UniqueID), true);
  // 0x10: u32
  if (data?.NameOffset !== undefined) view.setUint32(16, Number(data.NameOffset), true);
  // 0x14: u32
  if (data?.NameLength !== undefined) view.setUint32(20, Number(data.NameLength), true);
  return buf;
}

export class PERF_INSTANCE_DEFINITIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ByteLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ParentObjectTitleIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ParentObjectInstance(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get UniqueID(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get NameOffset(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get NameLength(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set ByteLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ParentObjectTitleIndex(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ParentObjectInstance(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set UniqueID(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set NameOffset(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set NameLength(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.System.Performance.PERF_COUNTER_BLOCK (size: 8)
 */
export interface PERF_COUNTER_BLOCK {
  /** u32 */
  ByteLength: number;
}

export const sizeofPERF_COUNTER_BLOCK = 8;

export function allocPERF_COUNTER_BLOCK(data?: Partial<PERF_COUNTER_BLOCK>): Uint8Array {
  const buf = new Uint8Array(sizeofPERF_COUNTER_BLOCK);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ByteLength !== undefined) view.setUint32(0, Number(data.ByteLength), true);
  // 0x04: pad4
  return buf;
}

export class PERF_COUNTER_BLOCKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ByteLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set ByteLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Foundation.FILETIME (size: 8)
 */
export interface FILETIME {
  /** u32 */
  dwLowDateTime: number;
  /** u32 */
  dwHighDateTime: number;
}

export const sizeofFILETIME = 8;

export function allocFILETIME(data?: Partial<FILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofFILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowDateTime !== undefined) view.setUint32(0, Number(data.dwLowDateTime), true);
  // 0x04: u32
  if (data?.dwHighDateTime !== undefined) view.setUint32(4, Number(data.dwHighDateTime), true);
  return buf;
}

export class FILETIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLowDateTime(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwHighDateTime(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwLowDateTime(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwHighDateTime(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Performance.PDH_RAW_COUNTER (size: 40)
 */
export interface PDH_RAW_COUNTER {
  /** u32 */
  CStatus: number;
  /** Windows.Win32.Foundation.FILETIME */
  TimeStamp: Uint8Array | Deno.PointerValue;
  /** i64 */
  FirstValue: bigint | number;
  /** i64 */
  SecondValue: bigint | number;
  /** u32 */
  MultiCount: number;
}

export const sizeofPDH_RAW_COUNTER = 40;

export function allocPDH_RAW_COUNTER(data?: Partial<PDH_RAW_COUNTER>): Uint8Array {
  const buf = new Uint8Array(sizeofPDH_RAW_COUNTER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CStatus !== undefined) view.setUint32(0, Number(data.CStatus), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.TimeStamp !== undefined) view.setBigUint64(8, data.TimeStamp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TimeStamp))), true);
  // 0x10: i64
  if (data?.FirstValue !== undefined) view.setBigInt64(16, BigInt(data.FirstValue), true);
  // 0x18: i64
  if (data?.SecondValue !== undefined) view.setBigInt64(24, BigInt(data.SecondValue), true);
  // 0x20: u32
  if (data?.MultiCount !== undefined) view.setUint32(32, Number(data.MultiCount), true);
  // 0x24: pad4
  return buf;
}

export class PDH_RAW_COUNTERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get CStatus(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get TimeStamp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i64
  get FirstValue(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: i64
  get SecondValue(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: u32
  get MultiCount(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set CStatus(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set TimeStamp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i64
  set FirstValue(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: i64
  set SecondValue(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: u32
  set MultiCount(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

export type PSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.System.Performance.PDH_RAW_COUNTER_ITEM_A (size: 16)
 */
export interface PDH_RAW_COUNTER_ITEM_A {
  /** Windows.Win32.Foundation.PSTR */
  szName: string | null | Uint8Array;
  /** Windows.Win32.System.Performance.PDH_RAW_COUNTER */
  RawValue: Uint8Array | Deno.PointerValue;
}

export const sizeofPDH_RAW_COUNTER_ITEM_A = 16;

export function allocPDH_RAW_COUNTER_ITEM_A(data?: Partial<PDH_RAW_COUNTER_ITEM_A>): Uint8Array {
  const buf = new Uint8Array(sizeofPDH_RAW_COUNTER_ITEM_A);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.szName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.szName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: pointer
  if (data?.RawValue !== undefined) view.setBigUint64(8, data.RawValue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RawValue))), true);
  return buf;
}

export class PDH_RAW_COUNTER_ITEM_AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get szName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get RawValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set szName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: pointer
  set RawValue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Performance.PDH_RAW_COUNTER_ITEM_W (size: 16)
 */
export interface PDH_RAW_COUNTER_ITEM_W {
  /** Windows.Win32.Foundation.PWSTR */
  szName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.System.Performance.PDH_RAW_COUNTER */
  RawValue: Uint8Array | Deno.PointerValue;
}

export const sizeofPDH_RAW_COUNTER_ITEM_W = 16;

export function allocPDH_RAW_COUNTER_ITEM_W(data?: Partial<PDH_RAW_COUNTER_ITEM_W>): Uint8Array {
  const buf = new Uint8Array(sizeofPDH_RAW_COUNTER_ITEM_W);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.szName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.szName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: pointer
  if (data?.RawValue !== undefined) view.setBigUint64(8, data.RawValue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RawValue))), true);
  return buf;
}

export class PDH_RAW_COUNTER_ITEM_WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get szName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get RawValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set szName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: pointer
  set RawValue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** array */
  X: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.X))), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Performance.PDH_FMT_COUNTERVALUE (size: 16)
 */
export interface PDH_FMT_COUNTERVALUE {
  /** u32 */
  CStatus: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofPDH_FMT_COUNTERVALUE = 16;

export function allocPDH_FMT_COUNTERVALUE(data?: Partial<PDH_FMT_COUNTERVALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofPDH_FMT_COUNTERVALUE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CStatus !== undefined) view.setUint32(0, Number(data.CStatus), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class PDH_FMT_COUNTERVALUEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get CStatus(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set CStatus(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Performance.PDH_FMT_COUNTERVALUE_ITEM_A (size: 16)
 */
export interface PDH_FMT_COUNTERVALUE_ITEM_A {
  /** Windows.Win32.Foundation.PSTR */
  szName: string | null | Uint8Array;
  /** Windows.Win32.System.Performance.PDH_FMT_COUNTERVALUE */
  FmtValue: Uint8Array | Deno.PointerValue;
}

export const sizeofPDH_FMT_COUNTERVALUE_ITEM_A = 16;

export function allocPDH_FMT_COUNTERVALUE_ITEM_A(data?: Partial<PDH_FMT_COUNTERVALUE_ITEM_A>): Uint8Array {
  const buf = new Uint8Array(sizeofPDH_FMT_COUNTERVALUE_ITEM_A);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.szName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.szName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: pointer
  if (data?.FmtValue !== undefined) view.setBigUint64(8, data.FmtValue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FmtValue))), true);
  return buf;
}

export class PDH_FMT_COUNTERVALUE_ITEM_AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get szName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get FmtValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set szName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: pointer
  set FmtValue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Performance.PDH_FMT_COUNTERVALUE_ITEM_W (size: 16)
 */
export interface PDH_FMT_COUNTERVALUE_ITEM_W {
  /** Windows.Win32.Foundation.PWSTR */
  szName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.System.Performance.PDH_FMT_COUNTERVALUE */
  FmtValue: Uint8Array | Deno.PointerValue;
}

export const sizeofPDH_FMT_COUNTERVALUE_ITEM_W = 16;

export function allocPDH_FMT_COUNTERVALUE_ITEM_W(data?: Partial<PDH_FMT_COUNTERVALUE_ITEM_W>): Uint8Array {
  const buf = new Uint8Array(sizeofPDH_FMT_COUNTERVALUE_ITEM_W);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.szName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.szName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: pointer
  if (data?.FmtValue !== undefined) view.setBigUint64(8, data.FmtValue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FmtValue))), true);
  return buf;
}

export class PDH_FMT_COUNTERVALUE_ITEM_WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get szName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get FmtValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set szName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: pointer
  set FmtValue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Performance.PDH_STATISTICS (size: 32)
 */
export interface PDH_STATISTICS {
  /** u32 */
  dwFormat: number;
  /** u32 */
  count: number;
  /** Windows.Win32.System.Performance.PDH_FMT_COUNTERVALUE */
  min: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Performance.PDH_FMT_COUNTERVALUE */
  max: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Performance.PDH_FMT_COUNTERVALUE */
  mean: Uint8Array | Deno.PointerValue;
}

export const sizeofPDH_STATISTICS = 32;

export function allocPDH_STATISTICS(data?: Partial<PDH_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofPDH_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFormat !== undefined) view.setUint32(0, Number(data.dwFormat), true);
  // 0x04: u32
  if (data?.count !== undefined) view.setUint32(4, Number(data.count), true);
  // 0x08: pointer
  if (data?.min !== undefined) view.setBigUint64(8, data.min === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.min))), true);
  // 0x10: pointer
  if (data?.max !== undefined) view.setBigUint64(16, data.max === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.max))), true);
  // 0x18: pointer
  if (data?.mean !== undefined) view.setBigUint64(24, data.mean === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.mean))), true);
  return buf;
}

export class PDH_STATISTICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFormat(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get count(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get min(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get max(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get mean(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwFormat(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set count(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set min(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set max(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set mean(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Performance.PDH_COUNTER_PATH_ELEMENTS_A (size: 48)
 */
export interface PDH_COUNTER_PATH_ELEMENTS_A {
  /** Windows.Win32.Foundation.PSTR */
  szMachineName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  szObjectName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  szInstanceName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  szParentInstance: string | null | Uint8Array;
  /** u32 */
  dwInstanceIndex: number;
  /** Windows.Win32.Foundation.PSTR */
  szCounterName: string | null | Uint8Array;
}

export const sizeofPDH_COUNTER_PATH_ELEMENTS_A = 48;

export function allocPDH_COUNTER_PATH_ELEMENTS_A(data?: Partial<PDH_COUNTER_PATH_ELEMENTS_A>): Uint8Array {
  const buf = new Uint8Array(sizeofPDH_COUNTER_PATH_ELEMENTS_A);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.szMachineName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.szMachineName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.szObjectName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.szObjectName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.szInstanceName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.szInstanceName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.szParentInstance !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.szParentInstance);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: u32
  if (data?.dwInstanceIndex !== undefined) view.setUint32(32, Number(data.dwInstanceIndex), true);
  // 0x24: pad4
  // 0x28: buffer
  if (data?.szCounterName !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.szCounterName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  return buf;
}

export class PDH_COUNTER_PATH_ELEMENTS_AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get szMachineName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get szObjectName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get szInstanceName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get szParentInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwInstanceIndex(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  get szCounterName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set szMachineName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set szObjectName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set szInstanceName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set szParentInstance(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: u32
  set dwInstanceIndex(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  set szCounterName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }
}

/**
 * Windows.Win32.System.Performance.PDH_COUNTER_PATH_ELEMENTS_W (size: 48)
 */
export interface PDH_COUNTER_PATH_ELEMENTS_W {
  /** Windows.Win32.Foundation.PWSTR */
  szMachineName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  szObjectName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  szInstanceName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  szParentInstance: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwInstanceIndex: number;
  /** Windows.Win32.Foundation.PWSTR */
  szCounterName: string | null | Uint8Array | Uint16Array;
}

export const sizeofPDH_COUNTER_PATH_ELEMENTS_W = 48;

export function allocPDH_COUNTER_PATH_ELEMENTS_W(data?: Partial<PDH_COUNTER_PATH_ELEMENTS_W>): Uint8Array {
  const buf = new Uint8Array(sizeofPDH_COUNTER_PATH_ELEMENTS_W);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.szMachineName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.szMachineName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.szObjectName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.szObjectName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.szInstanceName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.szInstanceName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.szParentInstance !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.szParentInstance);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: u32
  if (data?.dwInstanceIndex !== undefined) view.setUint32(32, Number(data.dwInstanceIndex), true);
  // 0x24: pad4
  // 0x28: buffer
  if (data?.szCounterName !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.szCounterName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  return buf;
}

export class PDH_COUNTER_PATH_ELEMENTS_WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get szMachineName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get szObjectName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get szInstanceName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get szParentInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwInstanceIndex(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  get szCounterName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set szMachineName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set szObjectName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set szInstanceName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set szParentInstance(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: u32
  set dwInstanceIndex(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  set szCounterName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }
}

/**
 * Windows.Win32.System.Performance.PDH_DATA_ITEM_PATH_ELEMENTS_A (size: 32)
 */
export interface PDH_DATA_ITEM_PATH_ELEMENTS_A {
  /** Windows.Win32.Foundation.PSTR */
  szMachineName: string | null | Uint8Array;
  /** System.Guid */
  ObjectGUID: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwItemId: number;
  /** Windows.Win32.Foundation.PSTR */
  szInstanceName: string | null | Uint8Array;
}

export const sizeofPDH_DATA_ITEM_PATH_ELEMENTS_A = 32;

export function allocPDH_DATA_ITEM_PATH_ELEMENTS_A(data?: Partial<PDH_DATA_ITEM_PATH_ELEMENTS_A>): Uint8Array {
  const buf = new Uint8Array(sizeofPDH_DATA_ITEM_PATH_ELEMENTS_A);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.szMachineName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.szMachineName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: pointer
  if (data?.ObjectGUID !== undefined) view.setBigUint64(8, data.ObjectGUID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ObjectGUID))), true);
  // 0x10: u32
  if (data?.dwItemId !== undefined) view.setUint32(16, Number(data.dwItemId), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.szInstanceName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.szInstanceName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  return buf;
}

export class PDH_DATA_ITEM_PATH_ELEMENTS_AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get szMachineName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ObjectGUID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwItemId(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  get szInstanceName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set szMachineName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: pointer
  set ObjectGUID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwItemId(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  set szInstanceName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }
}

/**
 * Windows.Win32.System.Performance.PDH_DATA_ITEM_PATH_ELEMENTS_W (size: 32)
 */
export interface PDH_DATA_ITEM_PATH_ELEMENTS_W {
  /** Windows.Win32.Foundation.PWSTR */
  szMachineName: string | null | Uint8Array | Uint16Array;
  /** System.Guid */
  ObjectGUID: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwItemId: number;
  /** Windows.Win32.Foundation.PWSTR */
  szInstanceName: string | null | Uint8Array | Uint16Array;
}

export const sizeofPDH_DATA_ITEM_PATH_ELEMENTS_W = 32;

export function allocPDH_DATA_ITEM_PATH_ELEMENTS_W(data?: Partial<PDH_DATA_ITEM_PATH_ELEMENTS_W>): Uint8Array {
  const buf = new Uint8Array(sizeofPDH_DATA_ITEM_PATH_ELEMENTS_W);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.szMachineName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.szMachineName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: pointer
  if (data?.ObjectGUID !== undefined) view.setBigUint64(8, data.ObjectGUID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ObjectGUID))), true);
  // 0x10: u32
  if (data?.dwItemId !== undefined) view.setUint32(16, Number(data.dwItemId), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.szInstanceName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.szInstanceName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  return buf;
}

export class PDH_DATA_ITEM_PATH_ELEMENTS_WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get szMachineName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ObjectGUID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwItemId(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  get szInstanceName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set szMachineName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: pointer
  set ObjectGUID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwItemId(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  set szInstanceName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }
}

/**
 * Windows.Win32.System.Performance.PDH_COUNTER_INFO_A (size: 72)
 */
export interface PDH_COUNTER_INFO_A {
  /** u32 */
  dwLength: number;
  /** u32 */
  dwType: number;
  /** u32 */
  CVersion: number;
  /** u32 */
  CStatus: number;
  /** i32 */
  lScale: number;
  /** i32 */
  lDefaultScale: number;
  /** usize */
  dwUserData: bigint | number;
  /** usize */
  dwQueryUserData: bigint | number;
  /** Windows.Win32.Foundation.PSTR */
  szFullPath: string | null | Uint8Array;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  szExplainText: string | null | Uint8Array;
  /** array */
  DataBuffer: Deno.PointerValue;
}

export const sizeofPDH_COUNTER_INFO_A = 72;

export function allocPDH_COUNTER_INFO_A(data?: Partial<PDH_COUNTER_INFO_A>): Uint8Array {
  const buf = new Uint8Array(sizeofPDH_COUNTER_INFO_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLength !== undefined) view.setUint32(0, Number(data.dwLength), true);
  // 0x04: u32
  if (data?.dwType !== undefined) view.setUint32(4, Number(data.dwType), true);
  // 0x08: u32
  if (data?.CVersion !== undefined) view.setUint32(8, Number(data.CVersion), true);
  // 0x0c: u32
  if (data?.CStatus !== undefined) view.setUint32(12, Number(data.CStatus), true);
  // 0x10: i32
  if (data?.lScale !== undefined) view.setInt32(16, Number(data.lScale), true);
  // 0x14: i32
  if (data?.lDefaultScale !== undefined) view.setInt32(20, Number(data.lDefaultScale), true);
  // 0x18: usize
  if (data?.dwUserData !== undefined) view.setBigUint64(24, BigInt(data.dwUserData), true);
  // 0x20: usize
  if (data?.dwQueryUserData !== undefined) view.setBigUint64(32, BigInt(data.dwQueryUserData), true);
  // 0x28: buffer
  if (data?.szFullPath !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.szFullPath);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(48, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x38: buffer
  if (data?.szExplainText !== undefined) {
    (buf as any)._f56 = util.pstrToFfi(data.szExplainText);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f56))), true);
  }
  // 0x40: pointer
  if (data?.DataBuffer !== undefined) view.setBigUint64(64, data.DataBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DataBuffer))), true);
  return buf;
}

export class PDH_COUNTER_INFO_AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get CVersion(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get CStatus(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: i32
  get lScale(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get lDefaultScale(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: usize
  get dwUserData(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: usize
  get dwQueryUserData(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: buffer
  get szFullPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: buffer
  get szExplainText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get DataBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set CVersion(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set CStatus(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: i32
  set lScale(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set lDefaultScale(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: usize
  set dwUserData(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: usize
  set dwQueryUserData(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: buffer
  set szFullPath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: buffer
  set szExplainText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f56))), true);
  }

  // 0x40: pointer
  set DataBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Performance.PDH_COUNTER_INFO_W (size: 72)
 */
export interface PDH_COUNTER_INFO_W {
  /** u32 */
  dwLength: number;
  /** u32 */
  dwType: number;
  /** u32 */
  CVersion: number;
  /** u32 */
  CStatus: number;
  /** i32 */
  lScale: number;
  /** i32 */
  lDefaultScale: number;
  /** usize */
  dwUserData: bigint | number;
  /** usize */
  dwQueryUserData: bigint | number;
  /** Windows.Win32.Foundation.PWSTR */
  szFullPath: string | null | Uint8Array | Uint16Array;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  szExplainText: string | null | Uint8Array | Uint16Array;
  /** array */
  DataBuffer: Deno.PointerValue;
}

export const sizeofPDH_COUNTER_INFO_W = 72;

export function allocPDH_COUNTER_INFO_W(data?: Partial<PDH_COUNTER_INFO_W>): Uint8Array {
  const buf = new Uint8Array(sizeofPDH_COUNTER_INFO_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLength !== undefined) view.setUint32(0, Number(data.dwLength), true);
  // 0x04: u32
  if (data?.dwType !== undefined) view.setUint32(4, Number(data.dwType), true);
  // 0x08: u32
  if (data?.CVersion !== undefined) view.setUint32(8, Number(data.CVersion), true);
  // 0x0c: u32
  if (data?.CStatus !== undefined) view.setUint32(12, Number(data.CStatus), true);
  // 0x10: i32
  if (data?.lScale !== undefined) view.setInt32(16, Number(data.lScale), true);
  // 0x14: i32
  if (data?.lDefaultScale !== undefined) view.setInt32(20, Number(data.lDefaultScale), true);
  // 0x18: usize
  if (data?.dwUserData !== undefined) view.setBigUint64(24, BigInt(data.dwUserData), true);
  // 0x20: usize
  if (data?.dwQueryUserData !== undefined) view.setBigUint64(32, BigInt(data.dwQueryUserData), true);
  // 0x28: buffer
  if (data?.szFullPath !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.szFullPath);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(48, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x38: buffer
  if (data?.szExplainText !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.szExplainText);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f56))), true);
  }
  // 0x40: pointer
  if (data?.DataBuffer !== undefined) view.setBigUint64(64, data.DataBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DataBuffer))), true);
  return buf;
}

export class PDH_COUNTER_INFO_WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get CVersion(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get CStatus(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: i32
  get lScale(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get lDefaultScale(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: usize
  get dwUserData(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: usize
  get dwQueryUserData(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: buffer
  get szFullPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: buffer
  get szExplainText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get DataBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set CVersion(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set CStatus(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: i32
  set lScale(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set lDefaultScale(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: usize
  set dwUserData(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: usize
  set dwQueryUserData(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: buffer
  set szFullPath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: buffer
  set szExplainText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f56))), true);
  }

  // 0x40: pointer
  set DataBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Performance.PDH_TIME_INFO (size: 24)
 */
export interface PDH_TIME_INFO {
  /** i64 */
  StartTime: bigint | number;
  /** i64 */
  EndTime: bigint | number;
  /** u32 */
  SampleCount: number;
}

export const sizeofPDH_TIME_INFO = 24;

export function allocPDH_TIME_INFO(data?: Partial<PDH_TIME_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPDH_TIME_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.StartTime !== undefined) view.setBigInt64(0, BigInt(data.StartTime), true);
  // 0x08: i64
  if (data?.EndTime !== undefined) view.setBigInt64(8, BigInt(data.EndTime), true);
  // 0x10: u32
  if (data?.SampleCount !== undefined) view.setUint32(16, Number(data.SampleCount), true);
  // 0x14: pad4
  return buf;
}

export class PDH_TIME_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get StartTime(): bigint | number {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: i64
  get EndTime(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: u32
  get SampleCount(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: i64
  set StartTime(value: bigint | number) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: i64
  set EndTime(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: u32
  set SampleCount(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.System.Performance.PDH_RAW_LOG_RECORD (size: 24)
 */
export interface PDH_RAW_LOG_RECORD {
  /** u32 */
  dwStructureSize: number;
  /** Windows.Win32.System.Performance.PDH_LOG_TYPE */
  dwRecordType: PDH_LOG_TYPE;
  /** u32 */
  dwItems: number;
  /** array */
  RawBytes: Deno.PointerValue;
}

export const sizeofPDH_RAW_LOG_RECORD = 24;

export function allocPDH_RAW_LOG_RECORD(data?: Partial<PDH_RAW_LOG_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofPDH_RAW_LOG_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStructureSize !== undefined) view.setUint32(0, Number(data.dwStructureSize), true);
  // 0x04: u32
  if (data?.dwRecordType !== undefined) view.setUint32(4, Number(data.dwRecordType), true);
  // 0x08: u32
  if (data?.dwItems !== undefined) view.setUint32(8, Number(data.dwItems), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.RawBytes !== undefined) view.setBigUint64(16, data.RawBytes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RawBytes))), true);
  return buf;
}

export class PDH_RAW_LOG_RECORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwStructureSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwRecordType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwItems(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get RawBytes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwStructureSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwRecordType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwItems(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set RawBytes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Performance.PDH_LOG_SERVICE_QUERY_INFO_A (size: 56)
 */
export interface PDH_LOG_SERVICE_QUERY_INFO_A {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwLogQuota: number;
  /** Windows.Win32.Foundation.PSTR */
  szLogFileCaption: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  szDefaultDir: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  szBaseFileName: string | null | Uint8Array;
  /** u32 */
  dwFileType: number;
  /** u32 */
  dwReserved: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofPDH_LOG_SERVICE_QUERY_INFO_A = 56;

export function allocPDH_LOG_SERVICE_QUERY_INFO_A(data?: Partial<PDH_LOG_SERVICE_QUERY_INFO_A>): Uint8Array {
  const buf = new Uint8Array(sizeofPDH_LOG_SERVICE_QUERY_INFO_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwLogQuota !== undefined) view.setUint32(8, Number(data.dwLogQuota), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.szLogFileCaption !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.szLogFileCaption);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.szDefaultDir !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.szDefaultDir);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.szBaseFileName !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.szBaseFileName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: u32
  if (data?.dwFileType !== undefined) view.setUint32(40, Number(data.dwFileType), true);
  // 0x2c: u32
  if (data?.dwReserved !== undefined) view.setUint32(44, Number(data.dwReserved), true);
  // 0x30: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(48, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class PDH_LOG_SERVICE_QUERY_INFO_AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwLogQuota(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get szLogFileCaption(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get szDefaultDir(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get szBaseFileName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get dwFileType(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwReserved(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwLogQuota(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set szLogFileCaption(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set szDefaultDir(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set szBaseFileName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: u32
  set dwFileType(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwReserved(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Performance.PDH_LOG_SERVICE_QUERY_INFO_W (size: 56)
 */
export interface PDH_LOG_SERVICE_QUERY_INFO_W {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwLogQuota: number;
  /** Windows.Win32.Foundation.PWSTR */
  szLogFileCaption: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  szDefaultDir: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  szBaseFileName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwFileType: number;
  /** u32 */
  dwReserved: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofPDH_LOG_SERVICE_QUERY_INFO_W = 56;

export function allocPDH_LOG_SERVICE_QUERY_INFO_W(data?: Partial<PDH_LOG_SERVICE_QUERY_INFO_W>): Uint8Array {
  const buf = new Uint8Array(sizeofPDH_LOG_SERVICE_QUERY_INFO_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwLogQuota !== undefined) view.setUint32(8, Number(data.dwLogQuota), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.szLogFileCaption !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.szLogFileCaption);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.szDefaultDir !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.szDefaultDir);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.szBaseFileName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.szBaseFileName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: u32
  if (data?.dwFileType !== undefined) view.setUint32(40, Number(data.dwFileType), true);
  // 0x2c: u32
  if (data?.dwReserved !== undefined) view.setUint32(44, Number(data.dwReserved), true);
  // 0x30: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(48, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class PDH_LOG_SERVICE_QUERY_INFO_WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwLogQuota(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get szLogFileCaption(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get szDefaultDir(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get szBaseFileName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get dwFileType(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwReserved(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwLogQuota(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set szLogFileCaption(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set szDefaultDir(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set szBaseFileName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: u32
  set dwFileType(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwReserved(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type HWND = bigint | number;

/**
 * Windows.Win32.System.Performance.PDH_BROWSE_DLG_CONFIG_HW (size: 72)
 */
export interface PDH_BROWSE_DLG_CONFIG_HW {
  /** u32 */
  _bitfield: number;
  /** Windows.Win32.Foundation.HWND */
  hWndOwner: Deno.PointerValue;
  /** isize */
  hDataSource: bigint | number;
  /** Windows.Win32.Foundation.PWSTR */
  szReturnPathBuffer: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cchReturnPathLength: number;
  /** Windows.Win32.System.Performance.CounterPathCallBack */
  pCallBack: Uint8Array | Deno.PointerValue;
  /** usize */
  dwCallBackArg: bigint | number;
  /** i32 */
  CallBackStatus: number;
  /** Windows.Win32.System.Performance.PERF_DETAIL */
  dwDefaultDetailLevel: PERF_DETAIL;
  /** Windows.Win32.Foundation.PWSTR */
  szDialogBoxCaption: string | null | Uint8Array | Uint16Array;
}

export const sizeofPDH_BROWSE_DLG_CONFIG_HW = 72;

export function allocPDH_BROWSE_DLG_CONFIG_HW(data?: Partial<PDH_BROWSE_DLG_CONFIG_HW>): Uint8Array {
  const buf = new Uint8Array(sizeofPDH_BROWSE_DLG_CONFIG_HW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?._bitfield !== undefined) view.setUint32(0, Number(data._bitfield), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hWndOwner !== undefined) view.setBigUint64(8, data.hWndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hWndOwner))), true);
  // 0x10: isize
  if (data?.hDataSource !== undefined) view.setBigInt64(16, BigInt(data.hDataSource), true);
  // 0x18: buffer
  if (data?.szReturnPathBuffer !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.szReturnPathBuffer);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: u32
  if (data?.cchReturnPathLength !== undefined) view.setUint32(32, Number(data.cchReturnPathLength), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pCallBack !== undefined) view.setBigUint64(40, data.pCallBack === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pCallBack))), true);
  // 0x30: usize
  if (data?.dwCallBackArg !== undefined) view.setBigUint64(48, BigInt(data.dwCallBackArg), true);
  // 0x38: i32
  if (data?.CallBackStatus !== undefined) view.setInt32(56, Number(data.CallBackStatus), true);
  // 0x3c: u32
  if (data?.dwDefaultDetailLevel !== undefined) view.setUint32(60, Number(data.dwDefaultDetailLevel), true);
  // 0x40: buffer
  if (data?.szDialogBoxCaption !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.szDialogBoxCaption);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  return buf;
}

export class PDH_BROWSE_DLG_CONFIG_HWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get _bitfield(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hWndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: isize
  get hDataSource(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: buffer
  get szReturnPathBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get cchReturnPathLength(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get pCallBack(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: usize
  get dwCallBackArg(): bigint | number {
    return Number(this.view.getBigUint64(48, true));
  }

  // 0x38: i32
  get CallBackStatus(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: u32
  get dwDefaultDetailLevel(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: buffer
  get szDialogBoxCaption(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set _bitfield(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hWndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: isize
  set hDataSource(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: buffer
  set szReturnPathBuffer(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: u32
  set cchReturnPathLength(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set pCallBack(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: usize
  set dwCallBackArg(value: bigint | number) {
    this.view.setBigUint64(48, BigInt(value), true);
  }

  // 0x38: i32
  set CallBackStatus(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: u32
  set dwDefaultDetailLevel(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: buffer
  set szDialogBoxCaption(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }
}

/**
 * Windows.Win32.System.Performance.PDH_BROWSE_DLG_CONFIG_HA (size: 72)
 */
export interface PDH_BROWSE_DLG_CONFIG_HA {
  /** u32 */
  _bitfield: number;
  /** Windows.Win32.Foundation.HWND */
  hWndOwner: Deno.PointerValue;
  /** isize */
  hDataSource: bigint | number;
  /** Windows.Win32.Foundation.PSTR */
  szReturnPathBuffer: string | null | Uint8Array;
  /** u32 */
  cchReturnPathLength: number;
  /** Windows.Win32.System.Performance.CounterPathCallBack */
  pCallBack: Uint8Array | Deno.PointerValue;
  /** usize */
  dwCallBackArg: bigint | number;
  /** i32 */
  CallBackStatus: number;
  /** Windows.Win32.System.Performance.PERF_DETAIL */
  dwDefaultDetailLevel: PERF_DETAIL;
  /** Windows.Win32.Foundation.PSTR */
  szDialogBoxCaption: string | null | Uint8Array;
}

export const sizeofPDH_BROWSE_DLG_CONFIG_HA = 72;

export function allocPDH_BROWSE_DLG_CONFIG_HA(data?: Partial<PDH_BROWSE_DLG_CONFIG_HA>): Uint8Array {
  const buf = new Uint8Array(sizeofPDH_BROWSE_DLG_CONFIG_HA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?._bitfield !== undefined) view.setUint32(0, Number(data._bitfield), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hWndOwner !== undefined) view.setBigUint64(8, data.hWndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hWndOwner))), true);
  // 0x10: isize
  if (data?.hDataSource !== undefined) view.setBigInt64(16, BigInt(data.hDataSource), true);
  // 0x18: buffer
  if (data?.szReturnPathBuffer !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.szReturnPathBuffer);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: u32
  if (data?.cchReturnPathLength !== undefined) view.setUint32(32, Number(data.cchReturnPathLength), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pCallBack !== undefined) view.setBigUint64(40, data.pCallBack === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pCallBack))), true);
  // 0x30: usize
  if (data?.dwCallBackArg !== undefined) view.setBigUint64(48, BigInt(data.dwCallBackArg), true);
  // 0x38: i32
  if (data?.CallBackStatus !== undefined) view.setInt32(56, Number(data.CallBackStatus), true);
  // 0x3c: u32
  if (data?.dwDefaultDetailLevel !== undefined) view.setUint32(60, Number(data.dwDefaultDetailLevel), true);
  // 0x40: buffer
  if (data?.szDialogBoxCaption !== undefined) {
    (buf as any)._f64 = util.pstrToFfi(data.szDialogBoxCaption);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  return buf;
}

export class PDH_BROWSE_DLG_CONFIG_HAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get _bitfield(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hWndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: isize
  get hDataSource(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: buffer
  get szReturnPathBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get cchReturnPathLength(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get pCallBack(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: usize
  get dwCallBackArg(): bigint | number {
    return Number(this.view.getBigUint64(48, true));
  }

  // 0x38: i32
  get CallBackStatus(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: u32
  get dwDefaultDetailLevel(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: buffer
  get szDialogBoxCaption(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set _bitfield(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hWndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: isize
  set hDataSource(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: buffer
  set szReturnPathBuffer(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: u32
  set cchReturnPathLength(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set pCallBack(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: usize
  set dwCallBackArg(value: bigint | number) {
    this.view.setBigUint64(48, BigInt(value), true);
  }

  // 0x38: i32
  set CallBackStatus(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: u32
  set dwDefaultDetailLevel(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: buffer
  set szDialogBoxCaption(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }
}

/**
 * Windows.Win32.System.Performance.PDH_BROWSE_DLG_CONFIG_W (size: 72)
 */
export interface PDH_BROWSE_DLG_CONFIG_W {
  /** u32 */
  _bitfield: number;
  /** Windows.Win32.Foundation.HWND */
  hWndOwner: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  szDataSource: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  szReturnPathBuffer: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cchReturnPathLength: number;
  /** Windows.Win32.System.Performance.CounterPathCallBack */
  pCallBack: Uint8Array | Deno.PointerValue;
  /** usize */
  dwCallBackArg: bigint | number;
  /** i32 */
  CallBackStatus: number;
  /** Windows.Win32.System.Performance.PERF_DETAIL */
  dwDefaultDetailLevel: PERF_DETAIL;
  /** Windows.Win32.Foundation.PWSTR */
  szDialogBoxCaption: string | null | Uint8Array | Uint16Array;
}

export const sizeofPDH_BROWSE_DLG_CONFIG_W = 72;

export function allocPDH_BROWSE_DLG_CONFIG_W(data?: Partial<PDH_BROWSE_DLG_CONFIG_W>): Uint8Array {
  const buf = new Uint8Array(sizeofPDH_BROWSE_DLG_CONFIG_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?._bitfield !== undefined) view.setUint32(0, Number(data._bitfield), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hWndOwner !== undefined) view.setBigUint64(8, data.hWndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hWndOwner))), true);
  // 0x10: buffer
  if (data?.szDataSource !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.szDataSource);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.szReturnPathBuffer !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.szReturnPathBuffer);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: u32
  if (data?.cchReturnPathLength !== undefined) view.setUint32(32, Number(data.cchReturnPathLength), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pCallBack !== undefined) view.setBigUint64(40, data.pCallBack === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pCallBack))), true);
  // 0x30: usize
  if (data?.dwCallBackArg !== undefined) view.setBigUint64(48, BigInt(data.dwCallBackArg), true);
  // 0x38: i32
  if (data?.CallBackStatus !== undefined) view.setInt32(56, Number(data.CallBackStatus), true);
  // 0x3c: u32
  if (data?.dwDefaultDetailLevel !== undefined) view.setUint32(60, Number(data.dwDefaultDetailLevel), true);
  // 0x40: buffer
  if (data?.szDialogBoxCaption !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.szDialogBoxCaption);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  return buf;
}

export class PDH_BROWSE_DLG_CONFIG_WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get _bitfield(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hWndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get szDataSource(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get szReturnPathBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get cchReturnPathLength(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get pCallBack(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: usize
  get dwCallBackArg(): bigint | number {
    return Number(this.view.getBigUint64(48, true));
  }

  // 0x38: i32
  get CallBackStatus(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: u32
  get dwDefaultDetailLevel(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: buffer
  get szDialogBoxCaption(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set _bitfield(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hWndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set szDataSource(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set szReturnPathBuffer(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: u32
  set cchReturnPathLength(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set pCallBack(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: usize
  set dwCallBackArg(value: bigint | number) {
    this.view.setBigUint64(48, BigInt(value), true);
  }

  // 0x38: i32
  set CallBackStatus(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: u32
  set dwDefaultDetailLevel(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: buffer
  set szDialogBoxCaption(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }
}

/**
 * Windows.Win32.System.Performance.PDH_BROWSE_DLG_CONFIG_A (size: 72)
 */
export interface PDH_BROWSE_DLG_CONFIG_A {
  /** u32 */
  _bitfield: number;
  /** Windows.Win32.Foundation.HWND */
  hWndOwner: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  szDataSource: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  szReturnPathBuffer: string | null | Uint8Array;
  /** u32 */
  cchReturnPathLength: number;
  /** Windows.Win32.System.Performance.CounterPathCallBack */
  pCallBack: Uint8Array | Deno.PointerValue;
  /** usize */
  dwCallBackArg: bigint | number;
  /** i32 */
  CallBackStatus: number;
  /** Windows.Win32.System.Performance.PERF_DETAIL */
  dwDefaultDetailLevel: PERF_DETAIL;
  /** Windows.Win32.Foundation.PSTR */
  szDialogBoxCaption: string | null | Uint8Array;
}

export const sizeofPDH_BROWSE_DLG_CONFIG_A = 72;

export function allocPDH_BROWSE_DLG_CONFIG_A(data?: Partial<PDH_BROWSE_DLG_CONFIG_A>): Uint8Array {
  const buf = new Uint8Array(sizeofPDH_BROWSE_DLG_CONFIG_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?._bitfield !== undefined) view.setUint32(0, Number(data._bitfield), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hWndOwner !== undefined) view.setBigUint64(8, data.hWndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hWndOwner))), true);
  // 0x10: buffer
  if (data?.szDataSource !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.szDataSource);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.szReturnPathBuffer !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.szReturnPathBuffer);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: u32
  if (data?.cchReturnPathLength !== undefined) view.setUint32(32, Number(data.cchReturnPathLength), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pCallBack !== undefined) view.setBigUint64(40, data.pCallBack === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pCallBack))), true);
  // 0x30: usize
  if (data?.dwCallBackArg !== undefined) view.setBigUint64(48, BigInt(data.dwCallBackArg), true);
  // 0x38: i32
  if (data?.CallBackStatus !== undefined) view.setInt32(56, Number(data.CallBackStatus), true);
  // 0x3c: u32
  if (data?.dwDefaultDetailLevel !== undefined) view.setUint32(60, Number(data.dwDefaultDetailLevel), true);
  // 0x40: buffer
  if (data?.szDialogBoxCaption !== undefined) {
    (buf as any)._f64 = util.pstrToFfi(data.szDialogBoxCaption);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  return buf;
}

export class PDH_BROWSE_DLG_CONFIG_AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get _bitfield(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hWndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get szDataSource(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get szReturnPathBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get cchReturnPathLength(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get pCallBack(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: usize
  get dwCallBackArg(): bigint | number {
    return Number(this.view.getBigUint64(48, true));
  }

  // 0x38: i32
  get CallBackStatus(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: u32
  get dwDefaultDetailLevel(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: buffer
  get szDialogBoxCaption(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set _bitfield(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hWndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set szDataSource(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set szReturnPathBuffer(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: u32
  set cchReturnPathLength(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set pCallBack(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: usize
  set dwCallBackArg(value: bigint | number) {
    this.view.setBigUint64(48, BigInt(value), true);
  }

  // 0x38: i32
  set CallBackStatus(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: u32
  set dwDefaultDetailLevel(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: buffer
  set szDialogBoxCaption(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }
}

export type BOOL = number;

export type HANDLE = bigint | number;

export type BOOLEAN = number;

// Native Libraries

try {
  var libKERNEL32_dll = Deno.dlopen("KERNEL32.dll", {
    QueryPerformanceCounter: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    QueryPerformanceFrequency: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libloadperf_dll = Deno.dlopen("loadperf.dll", {
    InstallPerfDllW: {
      parameters: ["buffer", "buffer", "usize"],
      result: "u32",
      optional: true,
    },
    InstallPerfDllA: {
      parameters: ["buffer", "buffer", "usize"],
      result: "u32",
      optional: true,
    },
    LoadPerfCounterTextStringsA: {
      parameters: ["buffer", "i32"],
      result: "u32",
      optional: true,
    },
    LoadPerfCounterTextStringsW: {
      parameters: ["buffer", "i32"],
      result: "u32",
      optional: true,
    },
    UnloadPerfCounterTextStringsW: {
      parameters: ["buffer", "i32"],
      result: "u32",
      optional: true,
    },
    UnloadPerfCounterTextStringsA: {
      parameters: ["buffer", "i32"],
      result: "u32",
      optional: true,
    },
    UpdatePerfNameFilesA: {
      parameters: ["buffer", "buffer", "buffer", "usize"],
      result: "u32",
      optional: true,
    },
    UpdatePerfNameFilesW: {
      parameters: ["buffer", "buffer", "buffer", "usize"],
      result: "u32",
      optional: true,
    },
    SetServiceAsTrustedA: {
      parameters: ["buffer", "buffer"],
      result: "u32",
      optional: true,
    },
    SetServiceAsTrustedW: {
      parameters: ["buffer", "buffer"],
      result: "u32",
      optional: true,
    },
    BackupPerfRegistryToFileW: {
      parameters: ["buffer", "buffer"],
      result: "u32",
      optional: true,
    },
    RestorePerfRegistryFromFileW: {
      parameters: ["buffer", "buffer"],
      result: "u32",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libADVAPI32_dll = Deno.dlopen("ADVAPI32.dll", {
    PerfStartProvider: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    PerfStartProviderEx: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    PerfStopProvider: {
      parameters: ["pointer"],
      result: "u32",
      optional: true,
    },
    PerfSetCounterSetInfo: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
      optional: true,
    },
    PerfCreateInstance: {
      parameters: ["pointer", "pointer", "buffer", "u32"],
      result: "pointer",
      optional: true,
    },
    PerfDeleteInstance: {
      parameters: ["pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    PerfQueryInstance: {
      parameters: ["pointer", "pointer", "buffer", "u32"],
      result: "pointer",
      optional: true,
    },
    PerfSetCounterRefValue: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    PerfSetULongCounterValue: {
      parameters: ["pointer", "pointer", "u32", "u32"],
      result: "u32",
      optional: true,
    },
    PerfSetULongLongCounterValue: {
      parameters: ["pointer", "pointer", "u32", "u64"],
      result: "u32",
      optional: true,
    },
    PerfIncrementULongCounterValue: {
      parameters: ["pointer", "pointer", "u32", "u32"],
      result: "u32",
      optional: true,
    },
    PerfIncrementULongLongCounterValue: {
      parameters: ["pointer", "pointer", "u32", "u64"],
      result: "u32",
      optional: true,
    },
    PerfDecrementULongCounterValue: {
      parameters: ["pointer", "pointer", "u32", "u32"],
      result: "u32",
      optional: true,
    },
    PerfDecrementULongLongCounterValue: {
      parameters: ["pointer", "pointer", "u32", "u64"],
      result: "u32",
      optional: true,
    },
    PerfEnumerateCounterSet: {
      parameters: ["buffer", "pointer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    PerfEnumerateCounterSetInstances: {
      parameters: ["buffer", "pointer", "pointer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    PerfQueryCounterSetRegistrationInfo: {
      parameters: ["buffer", "pointer", "i32", "u32", "pointer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    PerfOpenQueryHandle: {
      parameters: ["buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    PerfCloseQueryHandle: {
      parameters: ["pointer"],
      result: "u32",
      optional: true,
    },
    PerfQueryCounterInfo: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    PerfQueryCounterData: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    PerfAddCounters: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
      optional: true,
    },
    PerfDeleteCounters: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libpdh_dll = Deno.dlopen("pdh.dll", {
    PdhGetDllVersion: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    PdhOpenQueryW: {
      parameters: ["buffer", "usize", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhOpenQueryA: {
      parameters: ["buffer", "usize", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhAddCounterW: {
      parameters: ["isize", "buffer", "usize", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhAddCounterA: {
      parameters: ["isize", "buffer", "usize", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhAddEnglishCounterW: {
      parameters: ["isize", "buffer", "usize", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhAddEnglishCounterA: {
      parameters: ["isize", "buffer", "usize", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhCollectQueryDataWithTime: {
      parameters: ["isize", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhValidatePathExW: {
      parameters: ["isize", "buffer"],
      result: "i32",
      optional: true,
    },
    PdhValidatePathExA: {
      parameters: ["isize", "buffer"],
      result: "i32",
      optional: true,
    },
    PdhRemoveCounter: {
      parameters: ["isize"],
      result: "i32",
      optional: true,
    },
    PdhCollectQueryData: {
      parameters: ["isize"],
      result: "i32",
      optional: true,
    },
    PdhCloseQuery: {
      parameters: ["isize"],
      result: "i32",
      optional: true,
    },
    PdhGetFormattedCounterValue: {
      parameters: ["isize", "u32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhGetFormattedCounterArrayA: {
      parameters: ["isize", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhGetFormattedCounterArrayW: {
      parameters: ["isize", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhGetRawCounterValue: {
      parameters: ["isize", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhGetRawCounterArrayA: {
      parameters: ["isize", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhGetRawCounterArrayW: {
      parameters: ["isize", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhCalculateCounterFromRawValue: {
      parameters: ["isize", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhComputeCounterStatistics: {
      parameters: ["isize", "u32", "u32", "u32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhGetCounterInfoW: {
      parameters: ["isize", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhGetCounterInfoA: {
      parameters: ["isize", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhSetCounterScaleFactor: {
      parameters: ["isize", "i32"],
      result: "i32",
      optional: true,
    },
    PdhConnectMachineW: {
      parameters: ["buffer"],
      result: "i32",
      optional: true,
    },
    PdhConnectMachineA: {
      parameters: ["buffer"],
      result: "i32",
      optional: true,
    },
    PdhEnumMachinesW: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhEnumMachinesA: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhEnumObjectsW: {
      parameters: ["buffer", "buffer", "buffer", "pointer", "u32", "i32"],
      result: "i32",
      optional: true,
    },
    PdhEnumObjectsA: {
      parameters: ["buffer", "buffer", "buffer", "pointer", "u32", "i32"],
      result: "i32",
      optional: true,
    },
    PdhEnumObjectItemsW: {
      parameters: ["buffer", "buffer", "buffer", "buffer", "pointer", "buffer", "pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    PdhEnumObjectItemsA: {
      parameters: ["buffer", "buffer", "buffer", "buffer", "pointer", "buffer", "pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    PdhMakeCounterPathW: {
      parameters: ["pointer", "buffer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    PdhMakeCounterPathA: {
      parameters: ["pointer", "buffer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    PdhParseCounterPathW: {
      parameters: ["buffer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    PdhParseCounterPathA: {
      parameters: ["buffer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    PdhParseInstanceNameW: {
      parameters: ["buffer", "buffer", "pointer", "buffer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhParseInstanceNameA: {
      parameters: ["buffer", "buffer", "pointer", "buffer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhValidatePathW: {
      parameters: ["buffer"],
      result: "i32",
      optional: true,
    },
    PdhValidatePathA: {
      parameters: ["buffer"],
      result: "i32",
      optional: true,
    },
    PdhGetDefaultPerfObjectW: {
      parameters: ["buffer", "buffer", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhGetDefaultPerfObjectA: {
      parameters: ["buffer", "buffer", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhGetDefaultPerfCounterW: {
      parameters: ["buffer", "buffer", "buffer", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhGetDefaultPerfCounterA: {
      parameters: ["buffer", "buffer", "buffer", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhBrowseCountersW: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    PdhBrowseCountersA: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    PdhExpandCounterPathW: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhExpandCounterPathA: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhLookupPerfNameByIndexW: {
      parameters: ["buffer", "u32", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhLookupPerfNameByIndexA: {
      parameters: ["buffer", "u32", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhLookupPerfIndexByNameW: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhLookupPerfIndexByNameA: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhExpandWildCardPathA: {
      parameters: ["buffer", "buffer", "buffer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    PdhExpandWildCardPathW: {
      parameters: ["buffer", "buffer", "buffer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    PdhOpenLogW: {
      parameters: ["buffer", "u32", "pointer", "isize", "u32", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhOpenLogA: {
      parameters: ["buffer", "u32", "pointer", "isize", "u32", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhUpdateLogW: {
      parameters: ["isize", "buffer"],
      result: "i32",
      optional: true,
    },
    PdhUpdateLogA: {
      parameters: ["isize", "buffer"],
      result: "i32",
      optional: true,
    },
    PdhUpdateLogFileCatalog: {
      parameters: ["isize"],
      result: "i32",
      optional: true,
    },
    PdhGetLogFileSize: {
      parameters: ["isize", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhCloseLog: {
      parameters: ["isize", "u32"],
      result: "i32",
      optional: true,
    },
    PdhSelectDataSourceW: {
      parameters: ["pointer", "u32", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhSelectDataSourceA: {
      parameters: ["pointer", "u32", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhIsRealTimeQuery: {
      parameters: ["isize"],
      result: "i32",
      optional: true,
    },
    PdhSetQueryTimeRange: {
      parameters: ["isize", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhGetDataSourceTimeRangeW: {
      parameters: ["buffer", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhGetDataSourceTimeRangeA: {
      parameters: ["buffer", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhCollectQueryDataEx: {
      parameters: ["isize", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhFormatFromRawValue: {
      parameters: ["u32", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhGetCounterTimeBase: {
      parameters: ["isize", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhReadRawLogRecord: {
      parameters: ["isize", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhSetDefaultRealTimeDataSource: {
      parameters: ["u32"],
      result: "i32",
      optional: true,
    },
    PdhBindInputDataSourceW: {
      parameters: ["pointer", "buffer"],
      result: "i32",
      optional: true,
    },
    PdhBindInputDataSourceA: {
      parameters: ["pointer", "buffer"],
      result: "i32",
      optional: true,
    },
    PdhOpenQueryH: {
      parameters: ["isize", "usize", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhEnumMachinesHW: {
      parameters: ["isize", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhEnumMachinesHA: {
      parameters: ["isize", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhEnumObjectsHW: {
      parameters: ["isize", "buffer", "buffer", "pointer", "u32", "i32"],
      result: "i32",
      optional: true,
    },
    PdhEnumObjectsHA: {
      parameters: ["isize", "buffer", "buffer", "pointer", "u32", "i32"],
      result: "i32",
      optional: true,
    },
    PdhEnumObjectItemsHW: {
      parameters: ["isize", "buffer", "buffer", "buffer", "pointer", "buffer", "pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    PdhEnumObjectItemsHA: {
      parameters: ["isize", "buffer", "buffer", "buffer", "pointer", "buffer", "pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    PdhExpandWildCardPathHW: {
      parameters: ["isize", "buffer", "buffer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    PdhExpandWildCardPathHA: {
      parameters: ["isize", "buffer", "buffer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    PdhGetDataSourceTimeRangeH: {
      parameters: ["isize", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhGetDefaultPerfObjectHW: {
      parameters: ["isize", "buffer", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhGetDefaultPerfObjectHA: {
      parameters: ["isize", "buffer", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhGetDefaultPerfCounterHW: {
      parameters: ["isize", "buffer", "buffer", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhGetDefaultPerfCounterHA: {
      parameters: ["isize", "buffer", "buffer", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhBrowseCountersHW: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    PdhBrowseCountersHA: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    PdhVerifySQLDBW: {
      parameters: ["buffer"],
      result: "i32",
      optional: true,
    },
    PdhVerifySQLDBA: {
      parameters: ["buffer"],
      result: "i32",
      optional: true,
    },
    PdhCreateSQLTablesW: {
      parameters: ["buffer"],
      result: "i32",
      optional: true,
    },
    PdhCreateSQLTablesA: {
      parameters: ["buffer"],
      result: "i32",
      optional: true,
    },
    PdhEnumLogSetNamesW: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhEnumLogSetNamesA: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhGetLogSetGUID: {
      parameters: ["isize", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    PdhSetLogSetRunID: {
      parameters: ["isize", "i32"],
      result: "i32",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function QueryPerformanceCounter(
  lpPerformanceCount: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.QueryPerformanceCounter!(util.toPointer(lpPerformanceCount)));
}

export function QueryPerformanceFrequency(
  lpFrequency: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.QueryPerformanceFrequency!(util.toPointer(lpFrequency)));
}

export function InstallPerfDllW(
  szComputerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpIniFile: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: bigint | number /* usize */,
): number /* u32 */ {
  return libloadperf_dll.InstallPerfDllW!(util.pwstrToFfi(szComputerName), util.pwstrToFfi(lpIniFile), dwFlags);
}

export function InstallPerfDllA(
  szComputerName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpIniFile: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwFlags: bigint | number /* usize */,
): number /* u32 */ {
  return libloadperf_dll.InstallPerfDllA!(util.pstrToFfi(szComputerName), util.pstrToFfi(lpIniFile), dwFlags);
}

export function LoadPerfCounterTextStringsA(
  lpCommandLine: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  bQuietModeArg: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libloadperf_dll.LoadPerfCounterTextStringsA!(util.pstrToFfi(lpCommandLine), util.boolToFfi(bQuietModeArg));
}

export function LoadPerfCounterTextStringsW(
  lpCommandLine: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  bQuietModeArg: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libloadperf_dll.LoadPerfCounterTextStringsW!(util.pwstrToFfi(lpCommandLine), util.boolToFfi(bQuietModeArg));
}

export function UnloadPerfCounterTextStringsW(
  lpCommandLine: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  bQuietModeArg: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libloadperf_dll.UnloadPerfCounterTextStringsW!(util.pwstrToFfi(lpCommandLine), util.boolToFfi(bQuietModeArg));
}

export function UnloadPerfCounterTextStringsA(
  lpCommandLine: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  bQuietModeArg: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libloadperf_dll.UnloadPerfCounterTextStringsA!(util.pstrToFfi(lpCommandLine), util.boolToFfi(bQuietModeArg));
}

export function UpdatePerfNameFilesA(
  szNewCtrFilePath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  szNewHlpFilePath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  szLanguageID: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwFlags: bigint | number /* usize */,
): number /* u32 */ {
  return libloadperf_dll.UpdatePerfNameFilesA!(util.pstrToFfi(szNewCtrFilePath), util.pstrToFfi(szNewHlpFilePath), util.pstrToFfi(szLanguageID), dwFlags);
}

export function UpdatePerfNameFilesW(
  szNewCtrFilePath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  szNewHlpFilePath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  szLanguageID: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: bigint | number /* usize */,
): number /* u32 */ {
  return libloadperf_dll.UpdatePerfNameFilesW!(util.pwstrToFfi(szNewCtrFilePath), util.pwstrToFfi(szNewHlpFilePath), util.pwstrToFfi(szLanguageID), dwFlags);
}

export function SetServiceAsTrustedA(
  szReserved: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  szServiceName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libloadperf_dll.SetServiceAsTrustedA!(util.pstrToFfi(szReserved), util.pstrToFfi(szServiceName));
}

export function SetServiceAsTrustedW(
  szReserved: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  szServiceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libloadperf_dll.SetServiceAsTrustedW!(util.pwstrToFfi(szReserved), util.pwstrToFfi(szServiceName));
}

export function BackupPerfRegistryToFileW(
  szFileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  szCommentString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libloadperf_dll.BackupPerfRegistryToFileW!(util.pwstrToFfi(szFileName), util.pwstrToFfi(szCommentString));
}

export function RestorePerfRegistryFromFileW(
  szFileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  szLangId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libloadperf_dll.RestorePerfRegistryFromFileW!(util.pwstrToFfi(szFileName), util.pwstrToFfi(szLangId));
}

export function PerfStartProvider(
  ProviderGuid: Deno.PointerValue | Uint8Array /* ptr */,
  ControlCallback: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Performance.PERFLIBREQUEST */,
  phProvider: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libADVAPI32_dll.PerfStartProvider!(util.toPointer(ProviderGuid), util.toPointer(ControlCallback), util.toPointer(phProvider));
}

export function PerfStartProviderEx(
  ProviderGuid: Deno.PointerValue | Uint8Array /* ptr */,
  ProviderContext: Deno.PointerValue | Uint8Array /* ptr */,
  Provider: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libADVAPI32_dll.PerfStartProviderEx!(util.toPointer(ProviderGuid), util.toPointer(ProviderContext), util.toPointer(Provider));
}

export function PerfStopProvider(
  ProviderHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Performance.PerfProviderHandle */,
): number /* u32 */ {
  return libADVAPI32_dll.PerfStopProvider!(util.toPointer(ProviderHandle));
}

export function PerfSetCounterSetInfo(
  ProviderHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Template: Deno.PointerValue | Uint8Array /* ptr */,
  TemplateSize: number /* u32 */,
): number /* u32 */ {
  return libADVAPI32_dll.PerfSetCounterSetInfo!(util.toPointer(ProviderHandle), util.toPointer(Template), TemplateSize);
}

export function PerfCreateInstance(
  ProviderHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Performance.PerfProviderHandle */,
  CounterSetGuid: Deno.PointerValue | Uint8Array /* ptr */,
  Name: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Id: number /* u32 */,
): Deno.PointerValue /* ptr */ {
  return libADVAPI32_dll.PerfCreateInstance!(util.toPointer(ProviderHandle), util.toPointer(CounterSetGuid), util.pwstrToFfi(Name), Id);
}

export function PerfDeleteInstance(
  Provider: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Performance.PerfProviderHandle */,
  InstanceBlock: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libADVAPI32_dll.PerfDeleteInstance!(util.toPointer(Provider), util.toPointer(InstanceBlock));
}

export function PerfQueryInstance(
  ProviderHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  CounterSetGuid: Deno.PointerValue | Uint8Array /* ptr */,
  Name: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Id: number /* u32 */,
): Deno.PointerValue /* ptr */ {
  return libADVAPI32_dll.PerfQueryInstance!(util.toPointer(ProviderHandle), util.toPointer(CounterSetGuid), util.pwstrToFfi(Name), Id);
}

export function PerfSetCounterRefValue(
  Provider: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Instance: Deno.PointerValue | Uint8Array /* ptr */,
  CounterId: number /* u32 */,
  Address: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libADVAPI32_dll.PerfSetCounterRefValue!(util.toPointer(Provider), util.toPointer(Instance), CounterId, util.toPointer(Address));
}

export function PerfSetULongCounterValue(
  Provider: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Instance: Deno.PointerValue | Uint8Array /* ptr */,
  CounterId: number /* u32 */,
  Value: number /* u32 */,
): number /* u32 */ {
  return libADVAPI32_dll.PerfSetULongCounterValue!(util.toPointer(Provider), util.toPointer(Instance), CounterId, Value);
}

export function PerfSetULongLongCounterValue(
  Provider: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Instance: Deno.PointerValue | Uint8Array /* ptr */,
  CounterId: number /* u32 */,
  Value: bigint | number /* u64 */,
): number /* u32 */ {
  return libADVAPI32_dll.PerfSetULongLongCounterValue!(util.toPointer(Provider), util.toPointer(Instance), CounterId, Value);
}

export function PerfIncrementULongCounterValue(
  Provider: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Instance: Deno.PointerValue | Uint8Array /* ptr */,
  CounterId: number /* u32 */,
  Value: number /* u32 */,
): number /* u32 */ {
  return libADVAPI32_dll.PerfIncrementULongCounterValue!(util.toPointer(Provider), util.toPointer(Instance), CounterId, Value);
}

export function PerfIncrementULongLongCounterValue(
  Provider: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Instance: Deno.PointerValue | Uint8Array /* ptr */,
  CounterId: number /* u32 */,
  Value: bigint | number /* u64 */,
): number /* u32 */ {
  return libADVAPI32_dll.PerfIncrementULongLongCounterValue!(util.toPointer(Provider), util.toPointer(Instance), CounterId, Value);
}

export function PerfDecrementULongCounterValue(
  Provider: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Instance: Deno.PointerValue | Uint8Array /* ptr */,
  CounterId: number /* u32 */,
  Value: number /* u32 */,
): number /* u32 */ {
  return libADVAPI32_dll.PerfDecrementULongCounterValue!(util.toPointer(Provider), util.toPointer(Instance), CounterId, Value);
}

export function PerfDecrementULongLongCounterValue(
  Provider: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Instance: Deno.PointerValue | Uint8Array /* ptr */,
  CounterId: number /* u32 */,
  Value: bigint | number /* u64 */,
): number /* u32 */ {
  return libADVAPI32_dll.PerfDecrementULongLongCounterValue!(util.toPointer(Provider), util.toPointer(Instance), CounterId, Value);
}

export function PerfEnumerateCounterSet(
  szMachine: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pCounterSetIds: Deno.PointerValue | Uint8Array /* ptr */,
  cCounterSetIds: number /* u32 */,
  pcCounterSetIdsActual: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libADVAPI32_dll.PerfEnumerateCounterSet!(util.pwstrToFfi(szMachine), util.toPointer(pCounterSetIds), cCounterSetIds, util.toPointer(pcCounterSetIdsActual));
}

export function PerfEnumerateCounterSetInstances(
  szMachine: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pCounterSetId: Deno.PointerValue | Uint8Array /* ptr */,
  pInstances: Deno.PointerValue | Uint8Array /* ptr */,
  cbInstances: number /* u32 */,
  pcbInstancesActual: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libADVAPI32_dll.PerfEnumerateCounterSetInstances!(util.pwstrToFfi(szMachine), util.toPointer(pCounterSetId), util.toPointer(pInstances), cbInstances, util.toPointer(pcbInstancesActual));
}

export function PerfQueryCounterSetRegistrationInfo(
  szMachine: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pCounterSetId: Deno.PointerValue | Uint8Array /* ptr */,
  requestCode: PerfRegInfoType /* Windows.Win32.System.Performance.PerfRegInfoType */,
  requestLangId: number /* u32 */,
  pbRegInfo: Deno.PointerValue | Uint8Array /* ptr */,
  cbRegInfo: number /* u32 */,
  pcbRegInfoActual: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libADVAPI32_dll.PerfQueryCounterSetRegistrationInfo!(util.pwstrToFfi(szMachine), util.toPointer(pCounterSetId), requestCode, requestLangId, util.toPointer(pbRegInfo), cbRegInfo, util.toPointer(pcbRegInfoActual));
}

export function PerfOpenQueryHandle(
  szMachine: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  phQuery: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libADVAPI32_dll.PerfOpenQueryHandle!(util.pwstrToFfi(szMachine), util.toPointer(phQuery));
}

export function PerfCloseQueryHandle(
  hQuery: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libADVAPI32_dll.PerfCloseQueryHandle!(util.toPointer(hQuery));
}

export function PerfQueryCounterInfo(
  hQuery: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Performance.PerfQueryHandle */,
  pCounters: Deno.PointerValue | Uint8Array /* ptr */,
  cbCounters: number /* u32 */,
  pcbCountersActual: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libADVAPI32_dll.PerfQueryCounterInfo!(util.toPointer(hQuery), util.toPointer(pCounters), cbCounters, util.toPointer(pcbCountersActual));
}

export function PerfQueryCounterData(
  hQuery: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Performance.PerfQueryHandle */,
  pCounterBlock: Deno.PointerValue | Uint8Array /* ptr */,
  cbCounterBlock: number /* u32 */,
  pcbCounterBlockActual: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libADVAPI32_dll.PerfQueryCounterData!(util.toPointer(hQuery), util.toPointer(pCounterBlock), cbCounterBlock, util.toPointer(pcbCounterBlockActual));
}

export function PerfAddCounters(
  hQuery: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Performance.PerfQueryHandle */,
  pCounters: Deno.PointerValue | Uint8Array /* ptr */,
  cbCounters: number /* u32 */,
): number /* u32 */ {
  return libADVAPI32_dll.PerfAddCounters!(util.toPointer(hQuery), util.toPointer(pCounters), cbCounters);
}

export function PerfDeleteCounters(
  hQuery: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Performance.PerfQueryHandle */,
  pCounters: Deno.PointerValue | Uint8Array /* ptr */,
  cbCounters: number /* u32 */,
): number /* u32 */ {
  return libADVAPI32_dll.PerfDeleteCounters!(util.toPointer(hQuery), util.toPointer(pCounters), cbCounters);
}

export function PdhGetDllVersion(
  lpdwVersion: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhGetDllVersion!(util.toPointer(lpdwVersion));
}

export function PdhOpenQueryW(
  szDataSource: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwUserData: bigint | number /* usize */,
  phQuery: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhOpenQueryW!(util.pwstrToFfi(szDataSource), dwUserData, util.toPointer(phQuery));
}

export function PdhOpenQueryA(
  szDataSource: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwUserData: bigint | number /* usize */,
  phQuery: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhOpenQueryA!(util.pstrToFfi(szDataSource), dwUserData, util.toPointer(phQuery));
}

export function PdhAddCounterW(
  hQuery: bigint | number /* isize */,
  szFullCounterPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwUserData: bigint | number /* usize */,
  phCounter: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhAddCounterW!(hQuery, util.pwstrToFfi(szFullCounterPath), dwUserData, util.toPointer(phCounter));
}

export function PdhAddCounterA(
  hQuery: bigint | number /* isize */,
  szFullCounterPath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwUserData: bigint | number /* usize */,
  phCounter: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhAddCounterA!(hQuery, util.pstrToFfi(szFullCounterPath), dwUserData, util.toPointer(phCounter));
}

export function PdhAddEnglishCounterW(
  hQuery: bigint | number /* isize */,
  szFullCounterPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwUserData: bigint | number /* usize */,
  phCounter: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhAddEnglishCounterW!(hQuery, util.pwstrToFfi(szFullCounterPath), dwUserData, util.toPointer(phCounter));
}

export function PdhAddEnglishCounterA(
  hQuery: bigint | number /* isize */,
  szFullCounterPath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwUserData: bigint | number /* usize */,
  phCounter: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhAddEnglishCounterA!(hQuery, util.pstrToFfi(szFullCounterPath), dwUserData, util.toPointer(phCounter));
}

export function PdhCollectQueryDataWithTime(
  hQuery: bigint | number /* isize */,
  pllTimeStamp: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhCollectQueryDataWithTime!(hQuery, util.toPointer(pllTimeStamp));
}

export function PdhValidatePathExW(
  hDataSource: bigint | number /* isize */,
  szFullPathBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libpdh_dll.PdhValidatePathExW!(hDataSource, util.pwstrToFfi(szFullPathBuffer));
}

export function PdhValidatePathExA(
  hDataSource: bigint | number /* isize */,
  szFullPathBuffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libpdh_dll.PdhValidatePathExA!(hDataSource, util.pstrToFfi(szFullPathBuffer));
}

export function PdhRemoveCounter(
  hCounter: bigint | number /* isize */,
): number /* i32 */ {
  return libpdh_dll.PdhRemoveCounter!(hCounter);
}

export function PdhCollectQueryData(
  hQuery: bigint | number /* isize */,
): number /* i32 */ {
  return libpdh_dll.PdhCollectQueryData!(hQuery);
}

export function PdhCloseQuery(
  hQuery: bigint | number /* isize */,
): number /* i32 */ {
  return libpdh_dll.PdhCloseQuery!(hQuery);
}

export function PdhGetFormattedCounterValue(
  hCounter: bigint | number /* isize */,
  dwFormat: PDH_FMT /* Windows.Win32.System.Performance.PDH_FMT */,
  lpdwType: Deno.PointerValue | Uint8Array /* ptr */,
  pValue: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhGetFormattedCounterValue!(hCounter, dwFormat, util.toPointer(lpdwType), util.toPointer(pValue));
}

export function PdhGetFormattedCounterArrayA(
  hCounter: bigint | number /* isize */,
  dwFormat: PDH_FMT /* Windows.Win32.System.Performance.PDH_FMT */,
  lpdwBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
  lpdwItemCount: Deno.PointerValue | Uint8Array /* ptr */,
  ItemBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhGetFormattedCounterArrayA!(hCounter, dwFormat, util.toPointer(lpdwBufferSize), util.toPointer(lpdwItemCount), util.toPointer(ItemBuffer));
}

export function PdhGetFormattedCounterArrayW(
  hCounter: bigint | number /* isize */,
  dwFormat: PDH_FMT /* Windows.Win32.System.Performance.PDH_FMT */,
  lpdwBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
  lpdwItemCount: Deno.PointerValue | Uint8Array /* ptr */,
  ItemBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhGetFormattedCounterArrayW!(hCounter, dwFormat, util.toPointer(lpdwBufferSize), util.toPointer(lpdwItemCount), util.toPointer(ItemBuffer));
}

export function PdhGetRawCounterValue(
  hCounter: bigint | number /* isize */,
  lpdwType: Deno.PointerValue | Uint8Array /* ptr */,
  pValue: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhGetRawCounterValue!(hCounter, util.toPointer(lpdwType), util.toPointer(pValue));
}

export function PdhGetRawCounterArrayA(
  hCounter: bigint | number /* isize */,
  lpdwBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
  lpdwItemCount: Deno.PointerValue | Uint8Array /* ptr */,
  ItemBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhGetRawCounterArrayA!(hCounter, util.toPointer(lpdwBufferSize), util.toPointer(lpdwItemCount), util.toPointer(ItemBuffer));
}

export function PdhGetRawCounterArrayW(
  hCounter: bigint | number /* isize */,
  lpdwBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
  lpdwItemCount: Deno.PointerValue | Uint8Array /* ptr */,
  ItemBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhGetRawCounterArrayW!(hCounter, util.toPointer(lpdwBufferSize), util.toPointer(lpdwItemCount), util.toPointer(ItemBuffer));
}

export function PdhCalculateCounterFromRawValue(
  hCounter: bigint | number /* isize */,
  dwFormat: PDH_FMT /* Windows.Win32.System.Performance.PDH_FMT */,
  rawValue1: Deno.PointerValue | Uint8Array /* ptr */,
  rawValue2: Deno.PointerValue | Uint8Array /* ptr */,
  fmtValue: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhCalculateCounterFromRawValue!(hCounter, dwFormat, util.toPointer(rawValue1), util.toPointer(rawValue2), util.toPointer(fmtValue));
}

export function PdhComputeCounterStatistics(
  hCounter: bigint | number /* isize */,
  dwFormat: PDH_FMT /* Windows.Win32.System.Performance.PDH_FMT */,
  dwFirstEntry: number /* u32 */,
  dwNumEntries: number /* u32 */,
  lpRawValueArray: Deno.PointerValue | Uint8Array /* ptr */,
  data: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhComputeCounterStatistics!(hCounter, dwFormat, dwFirstEntry, dwNumEntries, util.toPointer(lpRawValueArray), util.toPointer(data));
}

export function PdhGetCounterInfoW(
  hCounter: bigint | number /* isize */,
  bRetrieveExplainText: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */,
  pdwBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
  lpBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhGetCounterInfoW!(hCounter, util.toPointer(bRetrieveExplainText), util.toPointer(pdwBufferSize), util.toPointer(lpBuffer));
}

export function PdhGetCounterInfoA(
  hCounter: bigint | number /* isize */,
  bRetrieveExplainText: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */,
  pdwBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
  lpBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhGetCounterInfoA!(hCounter, util.toPointer(bRetrieveExplainText), util.toPointer(pdwBufferSize), util.toPointer(lpBuffer));
}

export function PdhSetCounterScaleFactor(
  hCounter: bigint | number /* isize */,
  lFactor: number /* i32 */,
): number /* i32 */ {
  return libpdh_dll.PdhSetCounterScaleFactor!(hCounter, lFactor);
}

export function PdhConnectMachineW(
  szMachineName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libpdh_dll.PdhConnectMachineW!(util.pwstrToFfi(szMachineName));
}

export function PdhConnectMachineA(
  szMachineName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libpdh_dll.PdhConnectMachineA!(util.pstrToFfi(szMachineName));
}

export function PdhEnumMachinesW(
  szDataSource: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  mszMachineList: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhEnumMachinesW!(util.pwstrToFfi(szDataSource), util.pwstrToFfi(mszMachineList), util.toPointer(pcchBufferSize));
}

export function PdhEnumMachinesA(
  szDataSource: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  mszMachineList: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcchBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhEnumMachinesA!(util.pstrToFfi(szDataSource), util.pstrToFfi(mszMachineList), util.toPointer(pcchBufferSize));
}

export function PdhEnumObjectsW(
  szDataSource: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  szMachineName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  mszObjectList: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
  dwDetailLevel: PERF_DETAIL /* Windows.Win32.System.Performance.PERF_DETAIL */,
  bRefresh: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* i32 */ {
  return libpdh_dll.PdhEnumObjectsW!(util.pwstrToFfi(szDataSource), util.pwstrToFfi(szMachineName), util.pwstrToFfi(mszObjectList), util.toPointer(pcchBufferSize), dwDetailLevel, util.boolToFfi(bRefresh));
}

export function PdhEnumObjectsA(
  szDataSource: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  szMachineName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  mszObjectList: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcchBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
  dwDetailLevel: PERF_DETAIL /* Windows.Win32.System.Performance.PERF_DETAIL */,
  bRefresh: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* i32 */ {
  return libpdh_dll.PdhEnumObjectsA!(util.pstrToFfi(szDataSource), util.pstrToFfi(szMachineName), util.pstrToFfi(mszObjectList), util.toPointer(pcchBufferSize), dwDetailLevel, util.boolToFfi(bRefresh));
}

export function PdhEnumObjectItemsW(
  szDataSource: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  szMachineName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  szObjectName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  mszCounterList: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchCounterListLength: Deno.PointerValue | Uint8Array /* ptr */,
  mszInstanceList: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchInstanceListLength: Deno.PointerValue | Uint8Array /* ptr */,
  dwDetailLevel: PERF_DETAIL /* Windows.Win32.System.Performance.PERF_DETAIL */,
  dwFlags: number /* u32 */,
): number /* i32 */ {
  return libpdh_dll.PdhEnumObjectItemsW!(util.pwstrToFfi(szDataSource), util.pwstrToFfi(szMachineName), util.pwstrToFfi(szObjectName), util.pwstrToFfi(mszCounterList), util.toPointer(pcchCounterListLength), util.pwstrToFfi(mszInstanceList), util.toPointer(pcchInstanceListLength), dwDetailLevel, dwFlags);
}

export function PdhEnumObjectItemsA(
  szDataSource: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  szMachineName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  szObjectName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  mszCounterList: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcchCounterListLength: Deno.PointerValue | Uint8Array /* ptr */,
  mszInstanceList: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcchInstanceListLength: Deno.PointerValue | Uint8Array /* ptr */,
  dwDetailLevel: PERF_DETAIL /* Windows.Win32.System.Performance.PERF_DETAIL */,
  dwFlags: number /* u32 */,
): number /* i32 */ {
  return libpdh_dll.PdhEnumObjectItemsA!(util.pstrToFfi(szDataSource), util.pstrToFfi(szMachineName), util.pstrToFfi(szObjectName), util.pstrToFfi(mszCounterList), util.toPointer(pcchCounterListLength), util.pstrToFfi(mszInstanceList), util.toPointer(pcchInstanceListLength), dwDetailLevel, dwFlags);
}

export function PdhMakeCounterPathW(
  pCounterPathElements: Deno.PointerValue | Uint8Array /* ptr */,
  szFullPathBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: PDH_PATH_FLAGS /* Windows.Win32.System.Performance.PDH_PATH_FLAGS */,
): number /* i32 */ {
  return libpdh_dll.PdhMakeCounterPathW!(util.toPointer(pCounterPathElements), util.pwstrToFfi(szFullPathBuffer), util.toPointer(pcchBufferSize), dwFlags);
}

export function PdhMakeCounterPathA(
  pCounterPathElements: Deno.PointerValue | Uint8Array /* ptr */,
  szFullPathBuffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcchBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: PDH_PATH_FLAGS /* Windows.Win32.System.Performance.PDH_PATH_FLAGS */,
): number /* i32 */ {
  return libpdh_dll.PdhMakeCounterPathA!(util.toPointer(pCounterPathElements), util.pstrToFfi(szFullPathBuffer), util.toPointer(pcchBufferSize), dwFlags);
}

export function PdhParseCounterPathW(
  szFullPathBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pCounterPathElements: Deno.PointerValue | Uint8Array /* ptr */,
  pdwBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: number /* u32 */,
): number /* i32 */ {
  return libpdh_dll.PdhParseCounterPathW!(util.pwstrToFfi(szFullPathBuffer), util.toPointer(pCounterPathElements), util.toPointer(pdwBufferSize), dwFlags);
}

export function PdhParseCounterPathA(
  szFullPathBuffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pCounterPathElements: Deno.PointerValue | Uint8Array /* ptr */,
  pdwBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: number /* u32 */,
): number /* i32 */ {
  return libpdh_dll.PdhParseCounterPathA!(util.pstrToFfi(szFullPathBuffer), util.toPointer(pCounterPathElements), util.toPointer(pdwBufferSize), dwFlags);
}

export function PdhParseInstanceNameW(
  szInstanceString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  szInstanceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchInstanceNameLength: Deno.PointerValue | Uint8Array /* ptr */,
  szParentName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchParentNameLength: Deno.PointerValue | Uint8Array /* ptr */,
  lpIndex: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhParseInstanceNameW!(util.pwstrToFfi(szInstanceString), util.pwstrToFfi(szInstanceName), util.toPointer(pcchInstanceNameLength), util.pwstrToFfi(szParentName), util.toPointer(pcchParentNameLength), util.toPointer(lpIndex));
}

export function PdhParseInstanceNameA(
  szInstanceString: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  szInstanceName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcchInstanceNameLength: Deno.PointerValue | Uint8Array /* ptr */,
  szParentName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcchParentNameLength: Deno.PointerValue | Uint8Array /* ptr */,
  lpIndex: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhParseInstanceNameA!(util.pstrToFfi(szInstanceString), util.pstrToFfi(szInstanceName), util.toPointer(pcchInstanceNameLength), util.pstrToFfi(szParentName), util.toPointer(pcchParentNameLength), util.toPointer(lpIndex));
}

export function PdhValidatePathW(
  szFullPathBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libpdh_dll.PdhValidatePathW!(util.pwstrToFfi(szFullPathBuffer));
}

export function PdhValidatePathA(
  szFullPathBuffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libpdh_dll.PdhValidatePathA!(util.pstrToFfi(szFullPathBuffer));
}

export function PdhGetDefaultPerfObjectW(
  szDataSource: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  szMachineName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  szDefaultObjectName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhGetDefaultPerfObjectW!(util.pwstrToFfi(szDataSource), util.pwstrToFfi(szMachineName), util.pwstrToFfi(szDefaultObjectName), util.toPointer(pcchBufferSize));
}

export function PdhGetDefaultPerfObjectA(
  szDataSource: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  szMachineName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  szDefaultObjectName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcchBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhGetDefaultPerfObjectA!(util.pstrToFfi(szDataSource), util.pstrToFfi(szMachineName), util.pstrToFfi(szDefaultObjectName), util.toPointer(pcchBufferSize));
}

export function PdhGetDefaultPerfCounterW(
  szDataSource: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  szMachineName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  szObjectName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  szDefaultCounterName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhGetDefaultPerfCounterW!(util.pwstrToFfi(szDataSource), util.pwstrToFfi(szMachineName), util.pwstrToFfi(szObjectName), util.pwstrToFfi(szDefaultCounterName), util.toPointer(pcchBufferSize));
}

export function PdhGetDefaultPerfCounterA(
  szDataSource: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  szMachineName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  szObjectName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  szDefaultCounterName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcchBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhGetDefaultPerfCounterA!(util.pstrToFfi(szDataSource), util.pstrToFfi(szMachineName), util.pstrToFfi(szObjectName), util.pstrToFfi(szDefaultCounterName), util.toPointer(pcchBufferSize));
}

export function PdhBrowseCountersW(
  pBrowseDlgData: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhBrowseCountersW!(util.toPointer(pBrowseDlgData));
}

export function PdhBrowseCountersA(
  pBrowseDlgData: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhBrowseCountersA!(util.toPointer(pBrowseDlgData));
}

export function PdhExpandCounterPathW(
  szWildCardPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  mszExpandedPathList: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchPathListLength: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhExpandCounterPathW!(util.pwstrToFfi(szWildCardPath), util.pwstrToFfi(mszExpandedPathList), util.toPointer(pcchPathListLength));
}

export function PdhExpandCounterPathA(
  szWildCardPath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  mszExpandedPathList: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcchPathListLength: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhExpandCounterPathA!(util.pstrToFfi(szWildCardPath), util.pstrToFfi(mszExpandedPathList), util.toPointer(pcchPathListLength));
}

export function PdhLookupPerfNameByIndexW(
  szMachineName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwNameIndex: number /* u32 */,
  szNameBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchNameBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhLookupPerfNameByIndexW!(util.pwstrToFfi(szMachineName), dwNameIndex, util.pwstrToFfi(szNameBuffer), util.toPointer(pcchNameBufferSize));
}

export function PdhLookupPerfNameByIndexA(
  szMachineName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwNameIndex: number /* u32 */,
  szNameBuffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcchNameBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhLookupPerfNameByIndexA!(util.pstrToFfi(szMachineName), dwNameIndex, util.pstrToFfi(szNameBuffer), util.toPointer(pcchNameBufferSize));
}

export function PdhLookupPerfIndexByNameW(
  szMachineName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  szNameBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pdwIndex: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhLookupPerfIndexByNameW!(util.pwstrToFfi(szMachineName), util.pwstrToFfi(szNameBuffer), util.toPointer(pdwIndex));
}

export function PdhLookupPerfIndexByNameA(
  szMachineName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  szNameBuffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pdwIndex: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhLookupPerfIndexByNameA!(util.pstrToFfi(szMachineName), util.pstrToFfi(szNameBuffer), util.toPointer(pdwIndex));
}

export function PdhExpandWildCardPathA(
  szDataSource: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  szWildCardPath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  mszExpandedPathList: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcchPathListLength: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: number /* u32 */,
): number /* i32 */ {
  return libpdh_dll.PdhExpandWildCardPathA!(util.pstrToFfi(szDataSource), util.pstrToFfi(szWildCardPath), util.pstrToFfi(mszExpandedPathList), util.toPointer(pcchPathListLength), dwFlags);
}

export function PdhExpandWildCardPathW(
  szDataSource: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  szWildCardPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  mszExpandedPathList: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchPathListLength: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: number /* u32 */,
): number /* i32 */ {
  return libpdh_dll.PdhExpandWildCardPathW!(util.pwstrToFfi(szDataSource), util.pwstrToFfi(szWildCardPath), util.pwstrToFfi(mszExpandedPathList), util.toPointer(pcchPathListLength), dwFlags);
}

export function PdhOpenLogW(
  szLogFileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwAccessFlags: PDH_LOG /* Windows.Win32.System.Performance.PDH_LOG */,
  lpdwLogType: Deno.PointerValue | Uint8Array /* ptr */,
  hQuery: bigint | number /* isize */,
  dwMaxSize: number /* u32 */,
  szUserCaption: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  phLog: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhOpenLogW!(util.pwstrToFfi(szLogFileName), dwAccessFlags, util.toPointer(lpdwLogType), hQuery, dwMaxSize, util.pwstrToFfi(szUserCaption), util.toPointer(phLog));
}

export function PdhOpenLogA(
  szLogFileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwAccessFlags: PDH_LOG /* Windows.Win32.System.Performance.PDH_LOG */,
  lpdwLogType: Deno.PointerValue | Uint8Array /* ptr */,
  hQuery: bigint | number /* isize */,
  dwMaxSize: number /* u32 */,
  szUserCaption: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  phLog: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhOpenLogA!(util.pstrToFfi(szLogFileName), dwAccessFlags, util.toPointer(lpdwLogType), hQuery, dwMaxSize, util.pstrToFfi(szUserCaption), util.toPointer(phLog));
}

export function PdhUpdateLogW(
  hLog: bigint | number /* isize */,
  szUserString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libpdh_dll.PdhUpdateLogW!(hLog, util.pwstrToFfi(szUserString));
}

export function PdhUpdateLogA(
  hLog: bigint | number /* isize */,
  szUserString: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libpdh_dll.PdhUpdateLogA!(hLog, util.pstrToFfi(szUserString));
}

export function PdhUpdateLogFileCatalog(
  hLog: bigint | number /* isize */,
): number /* i32 */ {
  return libpdh_dll.PdhUpdateLogFileCatalog!(hLog);
}

export function PdhGetLogFileSize(
  hLog: bigint | number /* isize */,
  llSize: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhGetLogFileSize!(hLog, util.toPointer(llSize));
}

export function PdhCloseLog(
  hLog: bigint | number /* isize */,
  dwFlags: number /* u32 */,
): number /* i32 */ {
  return libpdh_dll.PdhCloseLog!(hLog, dwFlags);
}

export function PdhSelectDataSourceW(
  hWndOwner: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  dwFlags: PDH_SELECT_DATA_SOURCE_FLAGS /* Windows.Win32.System.Performance.PDH_SELECT_DATA_SOURCE_FLAGS */,
  szDataSource: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchBufferLength: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhSelectDataSourceW!((hWndOwner), dwFlags, util.pwstrToFfi(szDataSource), util.toPointer(pcchBufferLength));
}

export function PdhSelectDataSourceA(
  hWndOwner: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  dwFlags: PDH_SELECT_DATA_SOURCE_FLAGS /* Windows.Win32.System.Performance.PDH_SELECT_DATA_SOURCE_FLAGS */,
  szDataSource: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcchBufferLength: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhSelectDataSourceA!((hWndOwner), dwFlags, util.pstrToFfi(szDataSource), util.toPointer(pcchBufferLength));
}

export function PdhIsRealTimeQuery(
  hQuery: bigint | number /* isize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libpdh_dll.PdhIsRealTimeQuery!(hQuery));
}

export function PdhSetQueryTimeRange(
  hQuery: bigint | number /* isize */,
  pInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhSetQueryTimeRange!(hQuery, util.toPointer(pInfo));
}

export function PdhGetDataSourceTimeRangeW(
  szDataSource: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pdwNumEntries: Deno.PointerValue | Uint8Array /* ptr */,
  pInfo: Deno.PointerValue | Uint8Array /* ptr */,
  pdwBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhGetDataSourceTimeRangeW!(util.pwstrToFfi(szDataSource), util.toPointer(pdwNumEntries), util.toPointer(pInfo), util.toPointer(pdwBufferSize));
}

export function PdhGetDataSourceTimeRangeA(
  szDataSource: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pdwNumEntries: Deno.PointerValue | Uint8Array /* ptr */,
  pInfo: Deno.PointerValue | Uint8Array /* ptr */,
  pdwBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhGetDataSourceTimeRangeA!(util.pstrToFfi(szDataSource), util.toPointer(pdwNumEntries), util.toPointer(pInfo), util.toPointer(pdwBufferSize));
}

export function PdhCollectQueryDataEx(
  hQuery: bigint | number /* isize */,
  dwIntervalTime: number /* u32 */,
  hNewDataEvent: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): number /* i32 */ {
  return libpdh_dll.PdhCollectQueryDataEx!(hQuery, dwIntervalTime, util.toPointer(hNewDataEvent));
}

export function PdhFormatFromRawValue(
  dwCounterType: number /* u32 */,
  dwFormat: PDH_FMT /* Windows.Win32.System.Performance.PDH_FMT */,
  pTimeBase: Deno.PointerValue | Uint8Array /* ptr */,
  pRawValue1: Deno.PointerValue | Uint8Array /* ptr */,
  pRawValue2: Deno.PointerValue | Uint8Array /* ptr */,
  pFmtValue: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhFormatFromRawValue!(dwCounterType, dwFormat, util.toPointer(pTimeBase), util.toPointer(pRawValue1), util.toPointer(pRawValue2), util.toPointer(pFmtValue));
}

export function PdhGetCounterTimeBase(
  hCounter: bigint | number /* isize */,
  pTimeBase: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhGetCounterTimeBase!(hCounter, util.toPointer(pTimeBase));
}

export function PdhReadRawLogRecord(
  hLog: bigint | number /* isize */,
  ftRecord: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.FILETIME */,
  pRawLogRecord: Deno.PointerValue | Uint8Array /* ptr */,
  pdwBufferLength: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhReadRawLogRecord!(hLog, util.toPointer(ftRecord), util.toPointer(pRawLogRecord), util.toPointer(pdwBufferLength));
}

export function PdhSetDefaultRealTimeDataSource(
  dwDataSourceId: REAL_TIME_DATA_SOURCE_ID_FLAGS /* Windows.Win32.System.Performance.REAL_TIME_DATA_SOURCE_ID_FLAGS */,
): number /* i32 */ {
  return libpdh_dll.PdhSetDefaultRealTimeDataSource!(dwDataSourceId);
}

export function PdhBindInputDataSourceW(
  phDataSource: Deno.PointerValue | Uint8Array /* ptr */,
  LogFileNameList: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libpdh_dll.PdhBindInputDataSourceW!(util.toPointer(phDataSource), util.pwstrToFfi(LogFileNameList));
}

export function PdhBindInputDataSourceA(
  phDataSource: Deno.PointerValue | Uint8Array /* ptr */,
  LogFileNameList: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libpdh_dll.PdhBindInputDataSourceA!(util.toPointer(phDataSource), util.pstrToFfi(LogFileNameList));
}

export function PdhOpenQueryH(
  hDataSource: bigint | number /* isize */,
  dwUserData: bigint | number /* usize */,
  phQuery: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhOpenQueryH!(hDataSource, dwUserData, util.toPointer(phQuery));
}

export function PdhEnumMachinesHW(
  hDataSource: bigint | number /* isize */,
  mszMachineList: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhEnumMachinesHW!(hDataSource, util.pwstrToFfi(mszMachineList), util.toPointer(pcchBufferSize));
}

export function PdhEnumMachinesHA(
  hDataSource: bigint | number /* isize */,
  mszMachineList: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcchBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhEnumMachinesHA!(hDataSource, util.pstrToFfi(mszMachineList), util.toPointer(pcchBufferSize));
}

export function PdhEnumObjectsHW(
  hDataSource: bigint | number /* isize */,
  szMachineName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  mszObjectList: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
  dwDetailLevel: PERF_DETAIL /* Windows.Win32.System.Performance.PERF_DETAIL */,
  bRefresh: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* i32 */ {
  return libpdh_dll.PdhEnumObjectsHW!(hDataSource, util.pwstrToFfi(szMachineName), util.pwstrToFfi(mszObjectList), util.toPointer(pcchBufferSize), dwDetailLevel, util.boolToFfi(bRefresh));
}

export function PdhEnumObjectsHA(
  hDataSource: bigint | number /* isize */,
  szMachineName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  mszObjectList: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcchBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
  dwDetailLevel: PERF_DETAIL /* Windows.Win32.System.Performance.PERF_DETAIL */,
  bRefresh: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* i32 */ {
  return libpdh_dll.PdhEnumObjectsHA!(hDataSource, util.pstrToFfi(szMachineName), util.pstrToFfi(mszObjectList), util.toPointer(pcchBufferSize), dwDetailLevel, util.boolToFfi(bRefresh));
}

export function PdhEnumObjectItemsHW(
  hDataSource: bigint | number /* isize */,
  szMachineName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  szObjectName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  mszCounterList: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchCounterListLength: Deno.PointerValue | Uint8Array /* ptr */,
  mszInstanceList: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchInstanceListLength: Deno.PointerValue | Uint8Array /* ptr */,
  dwDetailLevel: PERF_DETAIL /* Windows.Win32.System.Performance.PERF_DETAIL */,
  dwFlags: number /* u32 */,
): number /* i32 */ {
  return libpdh_dll.PdhEnumObjectItemsHW!(hDataSource, util.pwstrToFfi(szMachineName), util.pwstrToFfi(szObjectName), util.pwstrToFfi(mszCounterList), util.toPointer(pcchCounterListLength), util.pwstrToFfi(mszInstanceList), util.toPointer(pcchInstanceListLength), dwDetailLevel, dwFlags);
}

export function PdhEnumObjectItemsHA(
  hDataSource: bigint | number /* isize */,
  szMachineName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  szObjectName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  mszCounterList: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcchCounterListLength: Deno.PointerValue | Uint8Array /* ptr */,
  mszInstanceList: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcchInstanceListLength: Deno.PointerValue | Uint8Array /* ptr */,
  dwDetailLevel: PERF_DETAIL /* Windows.Win32.System.Performance.PERF_DETAIL */,
  dwFlags: number /* u32 */,
): number /* i32 */ {
  return libpdh_dll.PdhEnumObjectItemsHA!(hDataSource, util.pstrToFfi(szMachineName), util.pstrToFfi(szObjectName), util.pstrToFfi(mszCounterList), util.toPointer(pcchCounterListLength), util.pstrToFfi(mszInstanceList), util.toPointer(pcchInstanceListLength), dwDetailLevel, dwFlags);
}

export function PdhExpandWildCardPathHW(
  hDataSource: bigint | number /* isize */,
  szWildCardPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  mszExpandedPathList: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchPathListLength: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: number /* u32 */,
): number /* i32 */ {
  return libpdh_dll.PdhExpandWildCardPathHW!(hDataSource, util.pwstrToFfi(szWildCardPath), util.pwstrToFfi(mszExpandedPathList), util.toPointer(pcchPathListLength), dwFlags);
}

export function PdhExpandWildCardPathHA(
  hDataSource: bigint | number /* isize */,
  szWildCardPath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  mszExpandedPathList: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcchPathListLength: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: number /* u32 */,
): number /* i32 */ {
  return libpdh_dll.PdhExpandWildCardPathHA!(hDataSource, util.pstrToFfi(szWildCardPath), util.pstrToFfi(mszExpandedPathList), util.toPointer(pcchPathListLength), dwFlags);
}

export function PdhGetDataSourceTimeRangeH(
  hDataSource: bigint | number /* isize */,
  pdwNumEntries: Deno.PointerValue | Uint8Array /* ptr */,
  pInfo: Deno.PointerValue | Uint8Array /* ptr */,
  pdwBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhGetDataSourceTimeRangeH!(hDataSource, util.toPointer(pdwNumEntries), util.toPointer(pInfo), util.toPointer(pdwBufferSize));
}

export function PdhGetDefaultPerfObjectHW(
  hDataSource: bigint | number /* isize */,
  szMachineName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  szDefaultObjectName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhGetDefaultPerfObjectHW!(hDataSource, util.pwstrToFfi(szMachineName), util.pwstrToFfi(szDefaultObjectName), util.toPointer(pcchBufferSize));
}

export function PdhGetDefaultPerfObjectHA(
  hDataSource: bigint | number /* isize */,
  szMachineName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  szDefaultObjectName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcchBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhGetDefaultPerfObjectHA!(hDataSource, util.pstrToFfi(szMachineName), util.pstrToFfi(szDefaultObjectName), util.toPointer(pcchBufferSize));
}

export function PdhGetDefaultPerfCounterHW(
  hDataSource: bigint | number /* isize */,
  szMachineName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  szObjectName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  szDefaultCounterName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhGetDefaultPerfCounterHW!(hDataSource, util.pwstrToFfi(szMachineName), util.pwstrToFfi(szObjectName), util.pwstrToFfi(szDefaultCounterName), util.toPointer(pcchBufferSize));
}

export function PdhGetDefaultPerfCounterHA(
  hDataSource: bigint | number /* isize */,
  szMachineName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  szObjectName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  szDefaultCounterName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcchBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhGetDefaultPerfCounterHA!(hDataSource, util.pstrToFfi(szMachineName), util.pstrToFfi(szObjectName), util.pstrToFfi(szDefaultCounterName), util.toPointer(pcchBufferSize));
}

export function PdhBrowseCountersHW(
  pBrowseDlgData: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhBrowseCountersHW!(util.toPointer(pBrowseDlgData));
}

export function PdhBrowseCountersHA(
  pBrowseDlgData: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhBrowseCountersHA!(util.toPointer(pBrowseDlgData));
}

export function PdhVerifySQLDBW(
  szDataSource: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libpdh_dll.PdhVerifySQLDBW!(util.pwstrToFfi(szDataSource));
}

export function PdhVerifySQLDBA(
  szDataSource: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libpdh_dll.PdhVerifySQLDBA!(util.pstrToFfi(szDataSource));
}

export function PdhCreateSQLTablesW(
  szDataSource: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libpdh_dll.PdhCreateSQLTablesW!(util.pwstrToFfi(szDataSource));
}

export function PdhCreateSQLTablesA(
  szDataSource: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libpdh_dll.PdhCreateSQLTablesA!(util.pstrToFfi(szDataSource));
}

export function PdhEnumLogSetNamesW(
  szDataSource: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  mszDataSetNameList: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchBufferLength: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhEnumLogSetNamesW!(util.pwstrToFfi(szDataSource), util.pwstrToFfi(mszDataSetNameList), util.toPointer(pcchBufferLength));
}

export function PdhEnumLogSetNamesA(
  szDataSource: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  mszDataSetNameList: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcchBufferLength: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhEnumLogSetNamesA!(util.pstrToFfi(szDataSource), util.pstrToFfi(mszDataSetNameList), util.toPointer(pcchBufferLength));
}

export function PdhGetLogSetGUID(
  hLog: bigint | number /* isize */,
  pGuid: Deno.PointerValue | Uint8Array /* ptr */,
  pRunId: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libpdh_dll.PdhGetLogSetGUID!(hLog, util.toPointer(pGuid), util.toPointer(pRunId));
}

export function PdhSetLogSetRunID(
  hLog: bigint | number /* isize */,
  RunId: number /* i32 */,
): number /* i32 */ {
  return libpdh_dll.PdhSetLogSetRunID!(hLog, RunId);
}

