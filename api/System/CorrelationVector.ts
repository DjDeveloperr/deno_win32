/// Auto-generated by Deno Win32: Windows.Win32.System.CorrelationVector.Apis

import * as util from "../../util.ts";

// Constants
export const RTL_CORRELATION_VECTOR_STRING_LENGTH = 129;
export const RTL_CORRELATION_VECTOR_V1_PREFIX_LENGTH = 16;
export const RTL_CORRELATION_VECTOR_V1_LENGTH = 64;
export const RTL_CORRELATION_VECTOR_V2_PREFIX_LENGTH = 22;
export const RTL_CORRELATION_VECTOR_V2_LENGTH = 128;

// Structs

export type CHAR = number;

/**
 * Windows.Win32.System.CorrelationVector.CORRELATION_VECTOR (size: 16)
 */
export interface CORRELATION_VECTOR {
  /** Windows.Win32.Foundation.CHAR */
  Version: string | number;
  /** array */
  Vector: Deno.PointerValue;
}

export const sizeofCORRELATION_VECTOR = 16;

export function allocCORRELATION_VECTOR(data?: Partial<CORRELATION_VECTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofCORRELATION_VECTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Version !== undefined) view.setUint8(0, Number(data.Version));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.Vector !== undefined) view.setBigUint64(8, data.Vector === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Vector))), true);
  return buf;
}

export class CORRELATION_VECTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get Version(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x08: pointer
  get Vector(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set Version(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7

  // 0x08: pointer
  set Vector(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

// Native Libraries

try {
  var libntdll_dll = Deno.dlopen("ntdll.dll", {
    RtlInitializeCorrelationVector: {
      parameters: ["pointer", "i32", "pointer"],
      result: "u32",
    },
    RtlIncrementCorrelationVector: {
      parameters: ["pointer"],
      result: "u32",
    },
    RtlExtendCorrelationVector: {
      parameters: ["pointer"],
      result: "u32",
    },
    RtlValidateCorrelationVector: {
      parameters: ["pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function RtlInitializeCorrelationVector(
  CorrelationVector: Deno.PointerValue | Uint8Array /* ptr */,
  Version: number /* i32 */,
  Guid: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libntdll_dll.RtlInitializeCorrelationVector(util.toPointer(CorrelationVector), Version, util.toPointer(Guid));
}

export function RtlIncrementCorrelationVector(
  CorrelationVector: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libntdll_dll.RtlIncrementCorrelationVector(util.toPointer(CorrelationVector));
}

export function RtlExtendCorrelationVector(
  CorrelationVector: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libntdll_dll.RtlExtendCorrelationVector(util.toPointer(CorrelationVector));
}

export function RtlValidateCorrelationVector(
  Vector: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libntdll_dll.RtlValidateCorrelationVector(util.toPointer(Vector));
}

