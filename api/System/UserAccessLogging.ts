/// Auto-generated by Deno Win32: Windows.Win32.System.UserAccessLogging.Apis

import * as util from "../../util.ts";

// Structs

/**
 * Windows.Win32.Networking.WinSock.SOCKADDR_STORAGE (size: 32)
 */
export interface SOCKADDR_STORAGE {
  /** u16 */
  ss_family: number;
  /** array */
  __ss_pad1: Deno.PointerValue | null;
  /** i64 */
  __ss_align: Deno.PointerValue;
  /** array */
  __ss_pad2: Deno.PointerValue | null;
}

export const sizeofSOCKADDR_STORAGE = 32;

export function allocSOCKADDR_STORAGE(data?: Partial<SOCKADDR_STORAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofSOCKADDR_STORAGE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ss_family !== undefined) view.setUint16(0, Number(data.ss_family), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.__ss_pad1 !== undefined) view.setBigUint64(8, data.__ss_pad1 === null ? 0n : BigInt(util.toPointer(data.__ss_pad1)), true);
  // 0x10: i64
  if (data?.__ss_align !== undefined) view.setBigInt64(16, BigInt(data.__ss_align), true);
  // 0x18: pointer
  if (data?.__ss_pad2 !== undefined) view.setBigUint64(24, data.__ss_pad2 === null ? 0n : BigInt(util.toPointer(data.__ss_pad2)), true);
  return buf;
}

/**
 * Windows.Win32.System.UserAccessLogging.UAL_DATA_BLOB (size: 40)
 */
export interface UAL_DATA_BLOB {
  /** u32 */
  Size: number;
  /** System.Guid */
  RoleGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  TenantId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.SOCKADDR_STORAGE */
  Address: Uint8Array | Deno.PointerValue | null;
  /** array */
  UserName: Deno.PointerValue | null;
}

export const sizeofUAL_DATA_BLOB = 40;

export function allocUAL_DATA_BLOB(data?: Partial<UAL_DATA_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofUAL_DATA_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.RoleGuid !== undefined) view.setBigUint64(8, data.RoleGuid === null ? 0n : BigInt(util.toPointer(data.RoleGuid)), true);
  // 0x10: pointer
  if (data?.TenantId !== undefined) view.setBigUint64(16, data.TenantId === null ? 0n : BigInt(util.toPointer(data.TenantId)), true);
  // 0x18: pointer
  if (data?.Address !== undefined) view.setBigUint64(24, data.Address === null ? 0n : BigInt(util.toPointer(data.Address)), true);
  // 0x20: pointer
  if (data?.UserName !== undefined) view.setBigUint64(32, data.UserName === null ? 0n : BigInt(util.toPointer(data.UserName)), true);
  return buf;
}

export type HRESULT = number;

export type PWSTR = Deno.PointerValue | Uint8Array | null;

// Native Libraries

try {
  var libualapi = Deno.dlopen("ualapi", {
    UalStart: {
      parameters: ["pointer"],
      result: "pointer",
    },
    UalStop: {
      parameters: ["pointer"],
      result: "pointer",
    },
    UalInstrument: {
      parameters: ["pointer"],
      result: "pointer",
    },
    UalRegisterProduct: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function UalStart(
  Data: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libualapi.UalStart(util.toPointer(Data)));
}

export function UalStop(
  Data: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libualapi.UalStop(util.toPointer(Data)));
}

export function UalInstrument(
  Data: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libualapi.UalInstrument(util.toPointer(Data)));
}

export function UalRegisterProduct(
  wszProductName: string | null /* Windows.Win32.Foundation.PWSTR */,
  wszRoleName: string | null /* Windows.Win32.Foundation.PWSTR */,
  wszGuid: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libualapi.UalRegisterProduct(util.pwstrToFfi(wszProductName), util.pwstrToFfi(wszRoleName), util.pwstrToFfi(wszGuid)));
}

