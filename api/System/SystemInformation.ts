/// Auto-generated by Deno Win32: Windows.Win32.System.SystemInformation.Apis

import * as util from "../../util.ts";

// Enums
export type VER_FLAGS = number;
export type IMAGE_FILE_MACHINE = number;
export type FIRMWARE_TABLE_PROVIDER = number;
export type USER_CET_ENVIRONMENT = number;
export type OS_PRODUCT_TYPE = number;
export type DEVICEFAMILYINFOENUM = number;
export type DEVICEFAMILYDEVICEFORM = number;
export type COMPUTER_NAME_FORMAT = number;
export type FIRMWARE_TYPE = number;
export type LOGICAL_PROCESSOR_RELATIONSHIP = number;
export type PROCESSOR_CACHE_TYPE = number;
export type CPU_SET_INFORMATION_TYPE = number;
export type OS_DEPLOYEMENT_STATE_VALUES = number;
export type RTL_SYSTEM_GLOBAL_DATA_ID = number;
export type DEP_SYSTEM_POLICY_TYPE = number;

// Constants
export const VER_MINORVERSION = 1;
export const VER_MAJORVERSION = 2;
export const VER_BUILDNUMBER = 4;
export const VER_PLATFORMID = 8;
export const VER_SERVICEPACKMINOR = 16;
export const VER_SERVICEPACKMAJOR = 32;
export const VER_SUITENAME = 64;
export const VER_PRODUCT_TYPE = 128;
export const IMAGE_FILE_MACHINE_AXP64 = 644;
export const IMAGE_FILE_MACHINE_I386 = 332;
export const IMAGE_FILE_MACHINE_IA64 = 512;
export const IMAGE_FILE_MACHINE_AMD64 = 34404;
export const IMAGE_FILE_MACHINE_UNKNOWN = 0;
export const IMAGE_FILE_MACHINE_TARGET_HOST = 1;
export const IMAGE_FILE_MACHINE_R3000 = 354;
export const IMAGE_FILE_MACHINE_R4000 = 358;
export const IMAGE_FILE_MACHINE_R10000 = 360;
export const IMAGE_FILE_MACHINE_WCEMIPSV2 = 361;
export const IMAGE_FILE_MACHINE_ALPHA = 388;
export const IMAGE_FILE_MACHINE_SH3 = 418;
export const IMAGE_FILE_MACHINE_SH3DSP = 419;
export const IMAGE_FILE_MACHINE_SH3E = 420;
export const IMAGE_FILE_MACHINE_SH4 = 422;
export const IMAGE_FILE_MACHINE_SH5 = 424;
export const IMAGE_FILE_MACHINE_ARM = 448;
export const IMAGE_FILE_MACHINE_THUMB = 450;
export const IMAGE_FILE_MACHINE_ARMNT = 452;
export const IMAGE_FILE_MACHINE_AM33 = 467;
export const IMAGE_FILE_MACHINE_POWERPC = 496;
export const IMAGE_FILE_MACHINE_POWERPCFP = 497;
export const IMAGE_FILE_MACHINE_MIPS16 = 614;
export const IMAGE_FILE_MACHINE_ALPHA64 = 644;
export const IMAGE_FILE_MACHINE_MIPSFPU = 870;
export const IMAGE_FILE_MACHINE_MIPSFPU16 = 1126;
export const IMAGE_FILE_MACHINE_TRICORE = 1312;
export const IMAGE_FILE_MACHINE_CEF = 3311;
export const IMAGE_FILE_MACHINE_EBC = 3772;
export const IMAGE_FILE_MACHINE_M32R = 36929;
export const IMAGE_FILE_MACHINE_ARM64 = 43620;
export const IMAGE_FILE_MACHINE_CEE = 49390;
export const ACPI = 1094930505;
export const FIRM = 1179210317;
export const RSMB = 1381190978;
export const USER_CET_ENVIRONMENT_WIN32_PROCESS = 0;
export const USER_CET_ENVIRONMENT_SGX2_ENCLAVE = 2;
export const USER_CET_ENVIRONMENT_VBS_ENCLAVE = 16;
export const USER_CET_ENVIRONMENT_VBS_BASIC_ENCLAVE = 17;
export const PRODUCT_BUSINESS = 6;
export const PRODUCT_BUSINESS_N = 16;
export const PRODUCT_CLUSTER_SERVER = 18;
export const PRODUCT_CLUSTER_SERVER_V = 64;
export const PRODUCT_CORE = 101;
export const PRODUCT_CORE_COUNTRYSPECIFIC = 99;
export const PRODUCT_CORE_N = 98;
export const PRODUCT_CORE_SINGLELANGUAGE = 100;
export const PRODUCT_DATACENTER_EVALUATION_SERVER = 80;
export const PRODUCT_DATACENTER_A_SERVER_CORE = 145;
export const PRODUCT_STANDARD_A_SERVER_CORE = 146;
export const PRODUCT_DATACENTER_SERVER = 8;
export const PRODUCT_DATACENTER_SERVER_CORE = 12;
export const PRODUCT_DATACENTER_SERVER_CORE_V = 39;
export const PRODUCT_DATACENTER_SERVER_V = 37;
export const PRODUCT_EDUCATION = 121;
export const PRODUCT_EDUCATION_N = 122;
export const PRODUCT_ENTERPRISE = 4;
export const PRODUCT_ENTERPRISE_E = 70;
export const PRODUCT_ENTERPRISE_EVALUATION = 72;
export const PRODUCT_ENTERPRISE_N = 27;
export const PRODUCT_ENTERPRISE_N_EVALUATION = 84;
export const PRODUCT_ENTERPRISE_S = 125;
export const PRODUCT_ENTERPRISE_S_EVALUATION = 129;
export const PRODUCT_ENTERPRISE_S_N = 126;
export const PRODUCT_ENTERPRISE_S_N_EVALUATION = 130;
export const PRODUCT_ENTERPRISE_SERVER = 10;
export const PRODUCT_ENTERPRISE_SERVER_CORE = 14;
export const PRODUCT_ENTERPRISE_SERVER_CORE_V = 41;
export const PRODUCT_ENTERPRISE_SERVER_IA64 = 15;
export const PRODUCT_ENTERPRISE_SERVER_V = 38;
export const PRODUCT_ESSENTIALBUSINESS_SERVER_ADDL = 60;
export const PRODUCT_ESSENTIALBUSINESS_SERVER_ADDLSVC = 62;
export const PRODUCT_ESSENTIALBUSINESS_SERVER_MGMT = 59;
export const PRODUCT_ESSENTIALBUSINESS_SERVER_MGMTSVC = 61;
export const PRODUCT_HOME_BASIC = 2;
export const PRODUCT_HOME_BASIC_E = 67;
export const PRODUCT_HOME_BASIC_N = 5;
export const PRODUCT_HOME_PREMIUM = 3;
export const PRODUCT_HOME_PREMIUM_E = 68;
export const PRODUCT_HOME_PREMIUM_N = 26;
export const PRODUCT_HOME_PREMIUM_SERVER = 34;
export const PRODUCT_HOME_SERVER = 19;
export const PRODUCT_HYPERV = 42;
export const PRODUCT_IOTUAP = 123;
export const PRODUCT_IOTUAPCOMMERCIAL = 131;
export const PRODUCT_MEDIUMBUSINESS_SERVER_MANAGEMENT = 30;
export const PRODUCT_MEDIUMBUSINESS_SERVER_MESSAGING = 32;
export const PRODUCT_MEDIUMBUSINESS_SERVER_SECURITY = 31;
export const PRODUCT_MOBILE_CORE = 104;
export const PRODUCT_MOBILE_ENTERPRISE = 133;
export const PRODUCT_MULTIPOINT_PREMIUM_SERVER = 77;
export const PRODUCT_MULTIPOINT_STANDARD_SERVER = 76;
export const PRODUCT_PRO_WORKSTATION = 161;
export const PRODUCT_PRO_WORKSTATION_N = 162;
export const PRODUCT_PROFESSIONAL = 48;
export const PRODUCT_PROFESSIONAL_E = 69;
export const PRODUCT_PROFESSIONAL_N = 49;
export const PRODUCT_PROFESSIONAL_WMC = 103;
export const PRODUCT_SB_SOLUTION_SERVER = 50;
export const PRODUCT_SB_SOLUTION_SERVER_EM = 54;
export const PRODUCT_SERVER_FOR_SB_SOLUTIONS = 51;
export const PRODUCT_SERVER_FOR_SB_SOLUTIONS_EM = 55;
export const PRODUCT_SERVER_FOR_SMALLBUSINESS = 24;
export const PRODUCT_SERVER_FOR_SMALLBUSINESS_V = 35;
export const PRODUCT_SERVER_FOUNDATION = 33;
export const PRODUCT_SMALLBUSINESS_SERVER = 9;
export const PRODUCT_SMALLBUSINESS_SERVER_PREMIUM = 25;
export const PRODUCT_SMALLBUSINESS_SERVER_PREMIUM_CORE = 63;
export const PRODUCT_SOLUTION_EMBEDDEDSERVER = 56;
export const PRODUCT_STANDARD_EVALUATION_SERVER = 79;
export const PRODUCT_STANDARD_SERVER = 7;
export const PRODUCT_STANDARD_SERVER_CORE_ = 13;
export const PRODUCT_STANDARD_SERVER_CORE_V = 40;
export const PRODUCT_STANDARD_SERVER_V = 36;
export const PRODUCT_STANDARD_SERVER_SOLUTIONS = 52;
export const PRODUCT_STANDARD_SERVER_SOLUTIONS_CORE = 53;
export const PRODUCT_STARTER = 11;
export const PRODUCT_STARTER_E = 66;
export const PRODUCT_STARTER_N = 47;
export const PRODUCT_STORAGE_ENTERPRISE_SERVER = 23;
export const PRODUCT_STORAGE_ENTERPRISE_SERVER_CORE = 46;
export const PRODUCT_STORAGE_EXPRESS_SERVER = 20;
export const PRODUCT_STORAGE_EXPRESS_SERVER_CORE = 43;
export const PRODUCT_STORAGE_STANDARD_EVALUATION_SERVER = 96;
export const PRODUCT_STORAGE_STANDARD_SERVER = 21;
export const PRODUCT_STORAGE_STANDARD_SERVER_CORE = 44;
export const PRODUCT_STORAGE_WORKGROUP_EVALUATION_SERVER = 95;
export const PRODUCT_STORAGE_WORKGROUP_SERVER = 22;
export const PRODUCT_STORAGE_WORKGROUP_SERVER_CORE = 45;
export const PRODUCT_ULTIMATE = 1;
export const PRODUCT_ULTIMATE_E = 71;
export const PRODUCT_ULTIMATE_N = 28;
export const PRODUCT_UNDEFINED = 0;
export const PRODUCT_WEB_SERVER = 17;
export const PRODUCT_WEB_SERVER_CORE = 29;
export const DEVICEFAMILYINFOENUM_UAP = 0;
export const DEVICEFAMILYINFOENUM_WINDOWS_8X = 1;
export const DEVICEFAMILYINFOENUM_WINDOWS_PHONE_8X = 2;
export const DEVICEFAMILYINFOENUM_DESKTOP = 3;
export const DEVICEFAMILYINFOENUM_MOBILE = 4;
export const DEVICEFAMILYINFOENUM_XBOX = 5;
export const DEVICEFAMILYINFOENUM_TEAM = 6;
export const DEVICEFAMILYINFOENUM_IOT = 7;
export const DEVICEFAMILYINFOENUM_IOT_HEADLESS = 8;
export const DEVICEFAMILYINFOENUM_SERVER = 9;
export const DEVICEFAMILYINFOENUM_HOLOGRAPHIC = 10;
export const DEVICEFAMILYINFOENUM_XBOXSRA = 11;
export const DEVICEFAMILYINFOENUM_XBOXERA = 12;
export const DEVICEFAMILYINFOENUM_SERVER_NANO = 13;
export const DEVICEFAMILYINFOENUM_8828080 = 14;
export const DEVICEFAMILYINFOENUM_7067329 = 15;
export const DEVICEFAMILYINFOENUM_WINDOWS_CORE = 16;
export const DEVICEFAMILYINFOENUM_WINDOWS_CORE_HEADLESS = 17;
export const DEVICEFAMILYINFOENUM_MAX = 17;
export const DEVICEFAMILYDEVICEFORM_UNKNOWN = 0;
export const DEVICEFAMILYDEVICEFORM_PHONE = 1;
export const DEVICEFAMILYDEVICEFORM_TABLET = 2;
export const DEVICEFAMILYDEVICEFORM_DESKTOP = 3;
export const DEVICEFAMILYDEVICEFORM_NOTEBOOK = 4;
export const DEVICEFAMILYDEVICEFORM_CONVERTIBLE = 5;
export const DEVICEFAMILYDEVICEFORM_DETACHABLE = 6;
export const DEVICEFAMILYDEVICEFORM_ALLINONE = 7;
export const DEVICEFAMILYDEVICEFORM_STICKPC = 8;
export const DEVICEFAMILYDEVICEFORM_PUCK = 9;
export const DEVICEFAMILYDEVICEFORM_LARGESCREEN = 10;
export const DEVICEFAMILYDEVICEFORM_HMD = 11;
export const DEVICEFAMILYDEVICEFORM_INDUSTRY_HANDHELD = 12;
export const DEVICEFAMILYDEVICEFORM_INDUSTRY_TABLET = 13;
export const DEVICEFAMILYDEVICEFORM_BANKING = 14;
export const DEVICEFAMILYDEVICEFORM_BUILDING_AUTOMATION = 15;
export const DEVICEFAMILYDEVICEFORM_DIGITAL_SIGNAGE = 16;
export const DEVICEFAMILYDEVICEFORM_GAMING = 17;
export const DEVICEFAMILYDEVICEFORM_HOME_AUTOMATION = 18;
export const DEVICEFAMILYDEVICEFORM_INDUSTRIAL_AUTOMATION = 19;
export const DEVICEFAMILYDEVICEFORM_KIOSK = 20;
export const DEVICEFAMILYDEVICEFORM_MAKER_BOARD = 21;
export const DEVICEFAMILYDEVICEFORM_MEDICAL = 22;
export const DEVICEFAMILYDEVICEFORM_NETWORKING = 23;
export const DEVICEFAMILYDEVICEFORM_POINT_OF_SERVICE = 24;
export const DEVICEFAMILYDEVICEFORM_PRINTING = 25;
export const DEVICEFAMILYDEVICEFORM_THIN_CLIENT = 26;
export const DEVICEFAMILYDEVICEFORM_TOY = 27;
export const DEVICEFAMILYDEVICEFORM_VENDING = 28;
export const DEVICEFAMILYDEVICEFORM_INDUSTRY_OTHER = 29;
export const DEVICEFAMILYDEVICEFORM_XBOX_ONE = 30;
export const DEVICEFAMILYDEVICEFORM_XBOX_ONE_S = 31;
export const DEVICEFAMILYDEVICEFORM_XBOX_ONE_X = 32;
export const DEVICEFAMILYDEVICEFORM_XBOX_ONE_X_DEVKIT = 33;
export const DEVICEFAMILYDEVICEFORM_XBOX_SERIES_X = 34;
export const DEVICEFAMILYDEVICEFORM_XBOX_SERIES_X_DEVKIT = 35;
export const DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_00 = 36;
export const DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_01 = 37;
export const DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_02 = 38;
export const DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_03 = 39;
export const DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_04 = 40;
export const DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_05 = 41;
export const DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_06 = 42;
export const DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_07 = 43;
export const DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_08 = 44;
export const DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_09 = 45;
export const DEVICEFAMILYDEVICEFORM_MAX = 45;
export const NTDDI_WIN2K = 83886080;
export const NTDDI_WINXP = 83951616;
export const NTDDI_WINXPSP2 = 83952128;
export const NTDDI_WS03SP1 = 84017408;
export const NTDDI_VISTA = 100663296;
export const NTDDI_VISTASP1 = 100663552;
export const NTDDI_WIN7 = 100728832;
export const NTDDI_WIN8 = 100794368;
export const NTDDI_WINBLUE = 100859904;
export const NTDDI_WINTHRESHOLD = 167772160;
export const SYSTEM_CPU_SET_INFORMATION_PARKED = 1;
export const SYSTEM_CPU_SET_INFORMATION_ALLOCATED = 2;
export const SYSTEM_CPU_SET_INFORMATION_ALLOCATED_TO_TARGET_PROCESS = 4;
export const SYSTEM_CPU_SET_INFORMATION_REALTIME = 8;
export const _WIN32_WINNT_NT4 = 1024;
export const _WIN32_WINNT_WIN2K = 1280;
export const _WIN32_WINNT_WINXP = 1281;
export const _WIN32_WINNT_WS03 = 1282;
export const _WIN32_WINNT_WIN6 = 1536;
export const _WIN32_WINNT_VISTA = 1536;
export const _WIN32_WINNT_WS08 = 1536;
export const _WIN32_WINNT_LONGHORN = 1536;
export const _WIN32_WINNT_WIN7 = 1537;
export const _WIN32_WINNT_WIN8 = 1538;
export const _WIN32_WINNT_WINBLUE = 1539;
export const _WIN32_WINNT_WINTHRESHOLD = 2560;
export const _WIN32_WINNT_WIN10 = 2560;
export const _WIN32_IE_IE20 = 512;
export const _WIN32_IE_IE30 = 768;
export const _WIN32_IE_IE302 = 770;
export const _WIN32_IE_IE40 = 1024;
export const _WIN32_IE_IE401 = 1025;
export const _WIN32_IE_IE50 = 1280;
export const _WIN32_IE_IE501 = 1281;
export const _WIN32_IE_IE55 = 1360;
export const _WIN32_IE_IE60 = 1536;
export const _WIN32_IE_IE60SP1 = 1537;
export const _WIN32_IE_IE60SP2 = 1539;
export const _WIN32_IE_IE70 = 1792;
export const _WIN32_IE_IE80 = 2048;
export const _WIN32_IE_IE90 = 2304;
export const _WIN32_IE_IE100 = 2560;
export const _WIN32_IE_IE110 = 2560;
export const _WIN32_IE_NT4 = 512;
export const _WIN32_IE_NT4SP1 = 512;
export const _WIN32_IE_NT4SP2 = 512;
export const _WIN32_IE_NT4SP3 = 770;
export const _WIN32_IE_NT4SP4 = 1025;
export const _WIN32_IE_NT4SP5 = 1025;
export const _WIN32_IE_NT4SP6 = 1280;
export const _WIN32_IE_WIN98 = 1025;
export const _WIN32_IE_WIN98SE = 1280;
export const _WIN32_IE_WINME = 1360;
export const _WIN32_IE_WIN2K = 1281;
export const _WIN32_IE_WIN2KSP1 = 1281;
export const _WIN32_IE_WIN2KSP2 = 1281;
export const _WIN32_IE_WIN2KSP3 = 1281;
export const _WIN32_IE_WIN2KSP4 = 1281;
export const _WIN32_IE_XP = 1536;
export const _WIN32_IE_XPSP1 = 1537;
export const _WIN32_IE_XPSP2 = 1539;
export const _WIN32_IE_WS03 = 1538;
export const _WIN32_IE_WS03SP1 = 1539;
export const _WIN32_IE_WIN6 = 1792;
export const _WIN32_IE_LONGHORN = 1792;
export const _WIN32_IE_WIN7 = 2048;
export const _WIN32_IE_WIN8 = 2560;
export const _WIN32_IE_WINBLUE = 2560;
export const _WIN32_IE_WINTHRESHOLD = 2560;
export const _WIN32_IE_WIN10 = 2560;
export const NTDDI_WIN4 = 67108864;
export const NTDDI_WIN2KSP1 = 83886336;
export const NTDDI_WIN2KSP2 = 83886592;
export const NTDDI_WIN2KSP3 = 83886848;
export const NTDDI_WIN2KSP4 = 83887104;
export const NTDDI_WINXPSP1 = 83951872;
export const NTDDI_WINXPSP3 = 83952384;
export const NTDDI_WINXPSP4 = 83952640;
export const NTDDI_WS03 = 84017152;
export const NTDDI_WS03SP2 = 84017664;
export const NTDDI_WS03SP3 = 84017920;
export const NTDDI_WS03SP4 = 84018176;
export const NTDDI_WIN6 = 100663296;
export const NTDDI_WIN6SP1 = 100663552;
export const NTDDI_WIN6SP2 = 100663808;
export const NTDDI_WIN6SP3 = 100664064;
export const NTDDI_WIN6SP4 = 100664320;
export const NTDDI_VISTASP2 = 100663808;
export const NTDDI_VISTASP3 = 100664064;
export const NTDDI_VISTASP4 = 100664320;
export const NTDDI_LONGHORN = 100663296;
export const NTDDI_WS08 = 100663552;
export const NTDDI_WS08SP2 = 100663808;
export const NTDDI_WS08SP3 = 100664064;
export const NTDDI_WS08SP4 = 100664320;
export const NTDDI_WIN10 = 167772160;
export const NTDDI_WIN10_TH2 = 167772161;
export const NTDDI_WIN10_RS1 = 167772162;
export const NTDDI_WIN10_RS2 = 167772163;
export const NTDDI_WIN10_RS3 = 167772164;
export const NTDDI_WIN10_RS4 = 167772165;
export const NTDDI_WIN10_RS5 = 167772166;
export const NTDDI_WIN10_19H1 = 167772167;
export const NTDDI_WIN10_VB = 167772168;
export const NTDDI_WIN10_MN = 167772169;
export const NTDDI_WIN10_FE = 167772170;
export const NTDDI_WIN10_CO = 167772171;
export const WDK_NTDDI_VERSION = 167772171;
export const OSVERSION_MASK = 4294901760;
export const SPVERSION_MASK = 65280;
export const SUBVERSION_MASK = 255;
export const NTDDI_VERSION = 167772171;
export const SCEX2_ALT_NETBIOS_NAME = 1;
export const ComputerNameNetBIOS = 0;
export const ComputerNameDnsHostname = 1;
export const ComputerNameDnsDomain = 2;
export const ComputerNameDnsFullyQualified = 3;
export const ComputerNamePhysicalNetBIOS = 4;
export const ComputerNamePhysicalDnsHostname = 5;
export const ComputerNamePhysicalDnsDomain = 6;
export const ComputerNamePhysicalDnsFullyQualified = 7;
export const ComputerNameMax = 8;
export const FirmwareTypeUnknown = 0;
export const FirmwareTypeBios = 1;
export const FirmwareTypeUefi = 2;
export const FirmwareTypeMax = 3;
export const RelationProcessorCore = 0;
export const RelationNumaNode = 1;
export const RelationCache = 2;
export const RelationProcessorPackage = 3;
export const RelationGroup = 4;
export const RelationProcessorDie = 5;
export const RelationNumaNodeEx = 6;
export const RelationProcessorModule = 7;
export const RelationAll = 65535;
export const CacheUnified = 0;
export const CacheInstruction = 1;
export const CacheData = 2;
export const CacheTrace = 3;
export const CpuSetInformation = 0;
export const OS_DEPLOYMENT_STANDARD = 1;
export const OS_DEPLOYMENT_COMPACT = 2;
export const GlobalDataIdUnknown = 0;
export const GlobalDataIdRngSeedVersion = 1;
export const GlobalDataIdInterruptTime = 2;
export const GlobalDataIdTimeZoneBias = 3;
export const GlobalDataIdImageNumberLow = 4;
export const GlobalDataIdImageNumberHigh = 5;
export const GlobalDataIdTimeZoneId = 6;
export const GlobalDataIdNtMajorVersion = 7;
export const GlobalDataIdNtMinorVersion = 8;
export const GlobalDataIdSystemExpirationDate = 9;
export const GlobalDataIdKdDebuggerEnabled = 10;
export const GlobalDataIdCyclesPerYield = 11;
export const GlobalDataIdSafeBootMode = 12;
export const GlobalDataIdLastSystemRITEventTickCount = 13;
export const DEPPolicyAlwaysOff = 0;
export const DEPPolicyAlwaysOn = 1;
export const DEPPolicyOptIn = 2;
export const DEPPolicyOptOut = 3;
export const DEPTotalPolicyCount = 4;

// Structs

export type FIRMWARE_TABLE_ID = number;

/**
 * Windows.Win32.System.SystemInformation.GROUP_AFFINITY (size: 24)
 */
export interface GROUP_AFFINITY {
  /** usize */
  Mask: Deno.PointerValue;
  /** u16 */
  Group: number;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofGROUP_AFFINITY = 24;

export function allocGROUP_AFFINITY(data?: Partial<GROUP_AFFINITY>): Uint8Array {
  const buf = new Uint8Array(sizeofGROUP_AFFINITY);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Mask !== undefined) view.setBigUint64(0, BigInt(data.Mask), true);
  // 0x08: u16
  if (data?.Group !== undefined) view.setUint16(8, Number(data.Group), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(16, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemInformation.SYSTEM_INFO (size: 56)
 */
export interface SYSTEM_INFO {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwPageSize: number;
  /** ptr */
  lpMinimumApplicationAddress: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpMaximumApplicationAddress: Deno.PointerValue | Uint8Array | null;
  /** usize */
  dwActiveProcessorMask: Deno.PointerValue;
  /** u32 */
  dwNumberOfProcessors: number;
  /** u32 */
  dwProcessorType: number;
  /** u32 */
  dwAllocationGranularity: number;
  /** u16 */
  wProcessorLevel: number;
  /** u16 */
  wProcessorRevision: number;
}

export const sizeofSYSTEM_INFO = 56;

export function allocSYSTEM_INFO(data?: Partial<SYSTEM_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u32
  if (data?.dwPageSize !== undefined) view.setUint32(8, Number(data.dwPageSize), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.lpMinimumApplicationAddress !== undefined) view.setBigUint64(16, data.lpMinimumApplicationAddress === null ? 0n : BigInt(util.toPointer(data.lpMinimumApplicationAddress)), true);
  // 0x18: pointer
  if (data?.lpMaximumApplicationAddress !== undefined) view.setBigUint64(24, data.lpMaximumApplicationAddress === null ? 0n : BigInt(util.toPointer(data.lpMaximumApplicationAddress)), true);
  // 0x20: usize
  if (data?.dwActiveProcessorMask !== undefined) view.setBigUint64(32, BigInt(data.dwActiveProcessorMask), true);
  // 0x28: u32
  if (data?.dwNumberOfProcessors !== undefined) view.setUint32(40, Number(data.dwNumberOfProcessors), true);
  // 0x2c: u32
  if (data?.dwProcessorType !== undefined) view.setUint32(44, Number(data.dwProcessorType), true);
  // 0x30: u32
  if (data?.dwAllocationGranularity !== undefined) view.setUint32(48, Number(data.dwAllocationGranularity), true);
  // 0x34: u16
  if (data?.wProcessorLevel !== undefined) view.setUint16(52, Number(data.wProcessorLevel), true);
  // 0x36: u16
  if (data?.wProcessorRevision !== undefined) view.setUint16(54, Number(data.wProcessorRevision), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemInformation.MEMORYSTATUSEX (size: 64)
 */
export interface MEMORYSTATUSEX {
  /** u32 */
  dwLength: number;
  /** u32 */
  dwMemoryLoad: number;
  /** u64 */
  ullTotalPhys: Deno.PointerValue;
  /** u64 */
  ullAvailPhys: Deno.PointerValue;
  /** u64 */
  ullTotalPageFile: Deno.PointerValue;
  /** u64 */
  ullAvailPageFile: Deno.PointerValue;
  /** u64 */
  ullTotalVirtual: Deno.PointerValue;
  /** u64 */
  ullAvailVirtual: Deno.PointerValue;
  /** u64 */
  ullAvailExtendedVirtual: Deno.PointerValue;
}

export const sizeofMEMORYSTATUSEX = 64;

export function allocMEMORYSTATUSEX(data?: Partial<MEMORYSTATUSEX>): Uint8Array {
  const buf = new Uint8Array(sizeofMEMORYSTATUSEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLength !== undefined) view.setUint32(0, Number(data.dwLength), true);
  // 0x04: u32
  if (data?.dwMemoryLoad !== undefined) view.setUint32(4, Number(data.dwMemoryLoad), true);
  // 0x08: u64
  if (data?.ullTotalPhys !== undefined) view.setBigUint64(8, BigInt(data.ullTotalPhys), true);
  // 0x10: u64
  if (data?.ullAvailPhys !== undefined) view.setBigUint64(16, BigInt(data.ullAvailPhys), true);
  // 0x18: u64
  if (data?.ullTotalPageFile !== undefined) view.setBigUint64(24, BigInt(data.ullTotalPageFile), true);
  // 0x20: u64
  if (data?.ullAvailPageFile !== undefined) view.setBigUint64(32, BigInt(data.ullAvailPageFile), true);
  // 0x28: u64
  if (data?.ullTotalVirtual !== undefined) view.setBigUint64(40, BigInt(data.ullTotalVirtual), true);
  // 0x30: u64
  if (data?.ullAvailVirtual !== undefined) view.setBigUint64(48, BigInt(data.ullAvailVirtual), true);
  // 0x38: u64
  if (data?.ullAvailExtendedVirtual !== undefined) view.setBigUint64(56, BigInt(data.ullAvailExtendedVirtual), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemInformation.CACHE_DESCRIPTOR (size: 16)
 */
export interface CACHE_DESCRIPTOR {
  /** u8 */
  Level: number;
  /** u8 */
  Associativity: number;
  /** u16 */
  LineSize: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.System.SystemInformation.PROCESSOR_CACHE_TYPE */
  Type: PROCESSOR_CACHE_TYPE;
}

export const sizeofCACHE_DESCRIPTOR = 16;

export function allocCACHE_DESCRIPTOR(data?: Partial<CACHE_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofCACHE_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Level !== undefined) view.setUint8(0, Number(data.Level));
  // 0x01: u8
  if (data?.Associativity !== undefined) view.setUint8(1, Number(data.Associativity));
  // 0x02: u16
  if (data?.LineSize !== undefined) view.setUint16(2, Number(data.LineSize), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: i32
  if (data?.Type !== undefined) view.setInt32(8, Number(data.Type), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.SystemInformation.SYSTEM_LOGICAL_PROCESSOR_INFORMATION (size: 24)
 */
export interface SYSTEM_LOGICAL_PROCESSOR_INFORMATION {
  /** usize */
  ProcessorMask: Deno.PointerValue;
  /** Windows.Win32.System.SystemInformation.LOGICAL_PROCESSOR_RELATIONSHIP */
  Relationship: LOGICAL_PROCESSOR_RELATIONSHIP;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSYSTEM_LOGICAL_PROCESSOR_INFORMATION = 24;

export function allocSYSTEM_LOGICAL_PROCESSOR_INFORMATION(data?: Partial<SYSTEM_LOGICAL_PROCESSOR_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_LOGICAL_PROCESSOR_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.ProcessorMask !== undefined) view.setBigUint64(0, BigInt(data.ProcessorMask), true);
  // 0x08: i32
  if (data?.Relationship !== undefined) view.setInt32(8, Number(data.Relationship), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemInformation.PROCESSOR_RELATIONSHIP (size: 32)
 */
export interface PROCESSOR_RELATIONSHIP {
  /** u8 */
  Flags: number;
  /** u8 */
  EfficiencyClass: number;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** u16 */
  GroupCount: number;
  /** array */
  GroupMask: Deno.PointerValue | null;
}

export const sizeofPROCESSOR_RELATIONSHIP = 32;

export function allocPROCESSOR_RELATIONSHIP(data?: Partial<PROCESSOR_RELATIONSHIP>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESSOR_RELATIONSHIP);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Flags !== undefined) view.setUint8(0, Number(data.Flags));
  // 0x01: u8
  if (data?.EfficiencyClass !== undefined) view.setUint8(1, Number(data.EfficiencyClass));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  // 0x10: u16
  if (data?.GroupCount !== undefined) view.setUint16(16, Number(data.GroupCount), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.GroupMask !== undefined) view.setBigUint64(24, data.GroupMask === null ? 0n : BigInt(util.toPointer(data.GroupMask)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemInformation.NUMA_NODE_RELATIONSHIP (size: 32)
 */
export interface NUMA_NODE_RELATIONSHIP {
  /** u32 */
  NodeNumber: number;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** u16 */
  GroupCount: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNUMA_NODE_RELATIONSHIP = 32;

export function allocNUMA_NODE_RELATIONSHIP(data?: Partial<NUMA_NODE_RELATIONSHIP>): Uint8Array {
  const buf = new Uint8Array(sizeofNUMA_NODE_RELATIONSHIP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeNumber !== undefined) view.setUint32(0, Number(data.NodeNumber), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  // 0x10: u16
  if (data?.GroupCount !== undefined) view.setUint16(16, Number(data.GroupCount), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(24, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemInformation.CACHE_RELATIONSHIP (size: 40)
 */
export interface CACHE_RELATIONSHIP {
  /** u8 */
  Level: number;
  /** u8 */
  Associativity: number;
  /** u16 */
  LineSize: number;
  /** u32 */
  CacheSize: number;
  /** Windows.Win32.System.SystemInformation.PROCESSOR_CACHE_TYPE */
  Type: PROCESSOR_CACHE_TYPE;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** u16 */
  GroupCount: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCACHE_RELATIONSHIP = 40;

export function allocCACHE_RELATIONSHIP(data?: Partial<CACHE_RELATIONSHIP>): Uint8Array {
  const buf = new Uint8Array(sizeofCACHE_RELATIONSHIP);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Level !== undefined) view.setUint8(0, Number(data.Level));
  // 0x01: u8
  if (data?.Associativity !== undefined) view.setUint8(1, Number(data.Associativity));
  // 0x02: u16
  if (data?.LineSize !== undefined) view.setUint16(2, Number(data.LineSize), true);
  // 0x04: u32
  if (data?.CacheSize !== undefined) view.setUint32(4, Number(data.CacheSize), true);
  // 0x08: i32
  if (data?.Type !== undefined) view.setInt32(8, Number(data.Type), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(16, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  // 0x18: u16
  if (data?.GroupCount !== undefined) view.setUint16(24, Number(data.GroupCount), true);
  // 0x1a: pad6
  // 0x20: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(32, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemInformation.PROCESSOR_GROUP_INFO (size: 24)
 */
export interface PROCESSOR_GROUP_INFO {
  /** u8 */
  MaximumProcessorCount: number;
  /** u8 */
  ActiveProcessorCount: number;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** usize */
  ActiveProcessorMask: Deno.PointerValue;
}

export const sizeofPROCESSOR_GROUP_INFO = 24;

export function allocPROCESSOR_GROUP_INFO(data?: Partial<PROCESSOR_GROUP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESSOR_GROUP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.MaximumProcessorCount !== undefined) view.setUint8(0, Number(data.MaximumProcessorCount));
  // 0x01: u8
  if (data?.ActiveProcessorCount !== undefined) view.setUint8(1, Number(data.ActiveProcessorCount));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  // 0x10: usize
  if (data?.ActiveProcessorMask !== undefined) view.setBigUint64(16, BigInt(data.ActiveProcessorMask), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemInformation.GROUP_RELATIONSHIP (size: 24)
 */
export interface GROUP_RELATIONSHIP {
  /** u16 */
  MaximumGroupCount: number;
  /** u16 */
  ActiveGroupCount: number;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** array */
  GroupInfo: Deno.PointerValue | null;
}

export const sizeofGROUP_RELATIONSHIP = 24;

export function allocGROUP_RELATIONSHIP(data?: Partial<GROUP_RELATIONSHIP>): Uint8Array {
  const buf = new Uint8Array(sizeofGROUP_RELATIONSHIP);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.MaximumGroupCount !== undefined) view.setUint16(0, Number(data.MaximumGroupCount), true);
  // 0x02: u16
  if (data?.ActiveGroupCount !== undefined) view.setUint16(2, Number(data.ActiveGroupCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  // 0x10: pointer
  if (data?.GroupInfo !== undefined) view.setBigUint64(16, data.GroupInfo === null ? 0n : BigInt(util.toPointer(data.GroupInfo)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemInformation.SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX (size: 16)
 */
export interface SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX {
  /** Windows.Win32.System.SystemInformation.LOGICAL_PROCESSOR_RELATIONSHIP */
  Relationship: LOGICAL_PROCESSOR_RELATIONSHIP;
  /** u32 */
  Size: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX = 16;

export function allocSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX(data?: Partial<SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Relationship !== undefined) view.setInt32(0, Number(data.Relationship), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemInformation.SYSTEM_CPU_SET_INFORMATION (size: 16)
 */
export interface SYSTEM_CPU_SET_INFORMATION {
  /** u32 */
  Size: number;
  /** Windows.Win32.System.SystemInformation.CPU_SET_INFORMATION_TYPE */
  Type: CPU_SET_INFORMATION_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSYSTEM_CPU_SET_INFORMATION = 16;

export function allocSYSTEM_CPU_SET_INFORMATION(data?: Partial<SYSTEM_CPU_SET_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_CPU_SET_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: i32
  if (data?.Type !== undefined) view.setInt32(4, Number(data.Type), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export type BOOLEAN = number;

/**
 * Windows.Win32.System.SystemInformation.SYSTEM_POOL_ZEROING_INFORMATION (size: 8)
 */
export interface SYSTEM_POOL_ZEROING_INFORMATION {
  /** Windows.Win32.Foundation.BOOLEAN */
  PoolZeroingSupportPresent: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSYSTEM_POOL_ZEROING_INFORMATION = 8;

export function allocSYSTEM_POOL_ZEROING_INFORMATION(data?: Partial<SYSTEM_POOL_ZEROING_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_POOL_ZEROING_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PoolZeroingSupportPresent !== undefined) view.setBigUint64(0, data.PoolZeroingSupportPresent === null ? 0n : BigInt(util.toPointer(data.PoolZeroingSupportPresent)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemInformation.SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION (size: 8)
 */
export interface SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION {
  /** u64 */
  CycleTime: Deno.PointerValue;
}

export const sizeofSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION = 8;

export function allocSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION(data?: Partial<SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.CycleTime !== undefined) view.setBigUint64(0, BigInt(data.CycleTime), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemInformation.SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION (size: 8)
 */
export interface SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION {
  /** u32 */
  _bitfield: number;
}

export const sizeofSYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION = 8;

export function allocSYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION(data?: Partial<SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?._bitfield !== undefined) view.setUint32(0, Number(data._bitfield), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.SystemInformation.OSVERSIONINFOA (size: 32)
 */
export interface OSVERSIONINFOA {
  /** u32 */
  dwOSVersionInfoSize: number;
  /** u32 */
  dwMajorVersion: number;
  /** u32 */
  dwMinorVersion: number;
  /** u32 */
  dwBuildNumber: number;
  /** u32 */
  dwPlatformId: number;
  /** array */
  szCSDVersion: Deno.PointerValue | null;
}

export const sizeofOSVERSIONINFOA = 32;

export function allocOSVERSIONINFOA(data?: Partial<OSVERSIONINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofOSVERSIONINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwOSVersionInfoSize !== undefined) view.setUint32(0, Number(data.dwOSVersionInfoSize), true);
  // 0x04: u32
  if (data?.dwMajorVersion !== undefined) view.setUint32(4, Number(data.dwMajorVersion), true);
  // 0x08: u32
  if (data?.dwMinorVersion !== undefined) view.setUint32(8, Number(data.dwMinorVersion), true);
  // 0x0c: u32
  if (data?.dwBuildNumber !== undefined) view.setUint32(12, Number(data.dwBuildNumber), true);
  // 0x10: u32
  if (data?.dwPlatformId !== undefined) view.setUint32(16, Number(data.dwPlatformId), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.szCSDVersion !== undefined) view.setBigUint64(24, data.szCSDVersion === null ? 0n : BigInt(util.toPointer(data.szCSDVersion)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemInformation.OSVERSIONINFOW (size: 32)
 */
export interface OSVERSIONINFOW {
  /** u32 */
  dwOSVersionInfoSize: number;
  /** u32 */
  dwMajorVersion: number;
  /** u32 */
  dwMinorVersion: number;
  /** u32 */
  dwBuildNumber: number;
  /** u32 */
  dwPlatformId: number;
  /** array */
  szCSDVersion: Deno.PointerValue | null;
}

export const sizeofOSVERSIONINFOW = 32;

export function allocOSVERSIONINFOW(data?: Partial<OSVERSIONINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofOSVERSIONINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwOSVersionInfoSize !== undefined) view.setUint32(0, Number(data.dwOSVersionInfoSize), true);
  // 0x04: u32
  if (data?.dwMajorVersion !== undefined) view.setUint32(4, Number(data.dwMajorVersion), true);
  // 0x08: u32
  if (data?.dwMinorVersion !== undefined) view.setUint32(8, Number(data.dwMinorVersion), true);
  // 0x0c: u32
  if (data?.dwBuildNumber !== undefined) view.setUint32(12, Number(data.dwBuildNumber), true);
  // 0x10: u32
  if (data?.dwPlatformId !== undefined) view.setUint32(16, Number(data.dwPlatformId), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.szCSDVersion !== undefined) view.setBigUint64(24, data.szCSDVersion === null ? 0n : BigInt(util.toPointer(data.szCSDVersion)), true);
  return buf;
}

/**
 * Windows.Win32.System.SystemInformation.OSVERSIONINFOEXA (size: 40)
 */
export interface OSVERSIONINFOEXA {
  /** u32 */
  dwOSVersionInfoSize: number;
  /** u32 */
  dwMajorVersion: number;
  /** u32 */
  dwMinorVersion: number;
  /** u32 */
  dwBuildNumber: number;
  /** u32 */
  dwPlatformId: number;
  /** array */
  szCSDVersion: Deno.PointerValue | null;
  /** u16 */
  wServicePackMajor: number;
  /** u16 */
  wServicePackMinor: number;
  /** u16 */
  wSuiteMask: number;
  /** u8 */
  wProductType: number;
  /** u8 */
  wReserved: number;
}

export const sizeofOSVERSIONINFOEXA = 40;

export function allocOSVERSIONINFOEXA(data?: Partial<OSVERSIONINFOEXA>): Uint8Array {
  const buf = new Uint8Array(sizeofOSVERSIONINFOEXA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwOSVersionInfoSize !== undefined) view.setUint32(0, Number(data.dwOSVersionInfoSize), true);
  // 0x04: u32
  if (data?.dwMajorVersion !== undefined) view.setUint32(4, Number(data.dwMajorVersion), true);
  // 0x08: u32
  if (data?.dwMinorVersion !== undefined) view.setUint32(8, Number(data.dwMinorVersion), true);
  // 0x0c: u32
  if (data?.dwBuildNumber !== undefined) view.setUint32(12, Number(data.dwBuildNumber), true);
  // 0x10: u32
  if (data?.dwPlatformId !== undefined) view.setUint32(16, Number(data.dwPlatformId), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.szCSDVersion !== undefined) view.setBigUint64(24, data.szCSDVersion === null ? 0n : BigInt(util.toPointer(data.szCSDVersion)), true);
  // 0x20: u16
  if (data?.wServicePackMajor !== undefined) view.setUint16(32, Number(data.wServicePackMajor), true);
  // 0x22: u16
  if (data?.wServicePackMinor !== undefined) view.setUint16(34, Number(data.wServicePackMinor), true);
  // 0x24: u16
  if (data?.wSuiteMask !== undefined) view.setUint16(36, Number(data.wSuiteMask), true);
  // 0x26: u8
  if (data?.wProductType !== undefined) view.setUint8(38, Number(data.wProductType));
  // 0x27: u8
  if (data?.wReserved !== undefined) view.setUint8(39, Number(data.wReserved));
  return buf;
}

/**
 * Windows.Win32.System.SystemInformation.OSVERSIONINFOEXW (size: 40)
 */
export interface OSVERSIONINFOEXW {
  /** u32 */
  dwOSVersionInfoSize: number;
  /** u32 */
  dwMajorVersion: number;
  /** u32 */
  dwMinorVersion: number;
  /** u32 */
  dwBuildNumber: number;
  /** u32 */
  dwPlatformId: number;
  /** array */
  szCSDVersion: Deno.PointerValue | null;
  /** u16 */
  wServicePackMajor: number;
  /** u16 */
  wServicePackMinor: number;
  /** u16 */
  wSuiteMask: number;
  /** u8 */
  wProductType: number;
  /** u8 */
  wReserved: number;
}

export const sizeofOSVERSIONINFOEXW = 40;

export function allocOSVERSIONINFOEXW(data?: Partial<OSVERSIONINFOEXW>): Uint8Array {
  const buf = new Uint8Array(sizeofOSVERSIONINFOEXW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwOSVersionInfoSize !== undefined) view.setUint32(0, Number(data.dwOSVersionInfoSize), true);
  // 0x04: u32
  if (data?.dwMajorVersion !== undefined) view.setUint32(4, Number(data.dwMajorVersion), true);
  // 0x08: u32
  if (data?.dwMinorVersion !== undefined) view.setUint32(8, Number(data.dwMinorVersion), true);
  // 0x0c: u32
  if (data?.dwBuildNumber !== undefined) view.setUint32(12, Number(data.dwBuildNumber), true);
  // 0x10: u32
  if (data?.dwPlatformId !== undefined) view.setUint32(16, Number(data.dwPlatformId), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.szCSDVersion !== undefined) view.setBigUint64(24, data.szCSDVersion === null ? 0n : BigInt(util.toPointer(data.szCSDVersion)), true);
  // 0x20: u16
  if (data?.wServicePackMajor !== undefined) view.setUint16(32, Number(data.wServicePackMajor), true);
  // 0x22: u16
  if (data?.wServicePackMinor !== undefined) view.setUint16(34, Number(data.wServicePackMinor), true);
  // 0x24: u16
  if (data?.wSuiteMask !== undefined) view.setUint16(36, Number(data.wSuiteMask), true);
  // 0x26: u8
  if (data?.wProductType !== undefined) view.setUint8(38, Number(data.wProductType));
  // 0x27: u8
  if (data?.wReserved !== undefined) view.setUint8(39, Number(data.wReserved));
  return buf;
}

/**
 * Windows.Win32.System.SystemInformation.MEMORYSTATUS (size: 56)
 */
export interface MEMORYSTATUS {
  /** u32 */
  dwLength: number;
  /** u32 */
  dwMemoryLoad: number;
  /** usize */
  dwTotalPhys: Deno.PointerValue;
  /** usize */
  dwAvailPhys: Deno.PointerValue;
  /** usize */
  dwTotalPageFile: Deno.PointerValue;
  /** usize */
  dwAvailPageFile: Deno.PointerValue;
  /** usize */
  dwTotalVirtual: Deno.PointerValue;
  /** usize */
  dwAvailVirtual: Deno.PointerValue;
}

export const sizeofMEMORYSTATUS = 56;

export function allocMEMORYSTATUS(data?: Partial<MEMORYSTATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofMEMORYSTATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLength !== undefined) view.setUint32(0, Number(data.dwLength), true);
  // 0x04: u32
  if (data?.dwMemoryLoad !== undefined) view.setUint32(4, Number(data.dwMemoryLoad), true);
  // 0x08: usize
  if (data?.dwTotalPhys !== undefined) view.setBigUint64(8, BigInt(data.dwTotalPhys), true);
  // 0x10: usize
  if (data?.dwAvailPhys !== undefined) view.setBigUint64(16, BigInt(data.dwAvailPhys), true);
  // 0x18: usize
  if (data?.dwTotalPageFile !== undefined) view.setBigUint64(24, BigInt(data.dwTotalPageFile), true);
  // 0x20: usize
  if (data?.dwAvailPageFile !== undefined) view.setBigUint64(32, BigInt(data.dwAvailPageFile), true);
  // 0x28: usize
  if (data?.dwTotalVirtual !== undefined) view.setBigUint64(40, BigInt(data.dwTotalVirtual), true);
  // 0x30: usize
  if (data?.dwAvailVirtual !== undefined) view.setBigUint64(48, BigInt(data.dwAvailVirtual), true);
  return buf;
}

export type BOOL = number;

export type PSTR = Deno.PointerValue | Uint8Array | null;

export type PWSTR = Deno.PointerValue | Uint8Array | null;

export type HRESULT = number;

export type HANDLE = Deno.PointerValue;

// Native Libraries

try {
  var libKERNEL32_dll = Deno.dlopen("KERNEL32.dll", {
    GlobalMemoryStatusEx: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetSystemInfo: {
      parameters: ["pointer"],
      result: "void",
    },
    GetSystemTime: {
      parameters: ["pointer"],
      result: "void",
    },
    GetSystemTimeAsFileTime: {
      parameters: ["pointer"],
      result: "void",
    },
    GetLocalTime: {
      parameters: ["pointer"],
      result: "void",
    },
    IsUserCetAvailableInEnvironment: {
      parameters: ["u32"],
      result: "i32",
    },
    GetSystemLeapSecondInformation: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetVersion: {
      parameters: [],
      result: "u32",
    },
    SetLocalTime: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetTickCount: {
      parameters: [],
      result: "u32",
    },
    GetTickCount64: {
      parameters: [],
      result: "u64",
    },
    GetSystemTimeAdjustment: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetSystemDirectoryA: {
      parameters: ["buffer", "u32"],
      result: "u32",
    },
    GetSystemDirectoryW: {
      parameters: ["buffer", "u32"],
      result: "u32",
    },
    GetWindowsDirectoryA: {
      parameters: ["buffer", "u32"],
      result: "u32",
    },
    GetWindowsDirectoryW: {
      parameters: ["buffer", "u32"],
      result: "u32",
    },
    GetSystemWindowsDirectoryA: {
      parameters: ["buffer", "u32"],
      result: "u32",
    },
    GetSystemWindowsDirectoryW: {
      parameters: ["buffer", "u32"],
      result: "u32",
    },
    GetComputerNameExA: {
      parameters: ["i32", "buffer", "pointer"],
      result: "i32",
    },
    GetComputerNameExW: {
      parameters: ["i32", "buffer", "pointer"],
      result: "i32",
    },
    SetComputerNameExW: {
      parameters: ["i32", "buffer"],
      result: "i32",
    },
    SetSystemTime: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetVersionExA: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetVersionExW: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetLogicalProcessorInformation: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetLogicalProcessorInformationEx: {
      parameters: ["i32", "pointer", "pointer"],
      result: "i32",
    },
    GetNativeSystemInfo: {
      parameters: ["pointer"],
      result: "void",
    },
    GetSystemTimePreciseAsFileTime: {
      parameters: ["pointer"],
      result: "void",
    },
    GetProductInfo: {
      parameters: ["u32", "u32", "u32", "u32", "pointer"],
      result: "i32",
    },
    VerSetConditionMask: {
      parameters: ["u64", "u32", "u8"],
      result: "u64",
    },
    EnumSystemFirmwareTables: {
      parameters: ["u32", "pointer", "u32"],
      result: "u32",
    },
    GetSystemFirmwareTable: {
      parameters: ["u32", "pointer", "pointer", "u32"],
      result: "u32",
    },
    DnsHostnameToComputerNameExW: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "i32",
    },
    GetPhysicallyInstalledSystemMemory: {
      parameters: ["pointer"],
      result: "i32",
    },
    SetComputerNameEx2W: {
      parameters: ["i32", "u32", "buffer"],
      result: "i32",
    },
    SetSystemTimeAdjustment: {
      parameters: ["u32", "i32"],
      result: "i32",
    },
    GetProcessorSystemCycleTime: {
      parameters: ["u16", "pointer", "pointer"],
      result: "i32",
    },
    SetComputerNameA: {
      parameters: ["buffer"],
      result: "i32",
    },
    SetComputerNameW: {
      parameters: ["buffer"],
      result: "i32",
    },
    SetComputerNameExA: {
      parameters: ["i32", "buffer"],
      result: "i32",
    },
    GetSystemCpuSetInformation: {
      parameters: ["pointer", "u32", "pointer", "pointer", "u32"],
      result: "i32",
    },
    GetSystemWow64DirectoryA: {
      parameters: ["buffer", "u32"],
      result: "u32",
    },
    GetSystemWow64DirectoryW: {
      parameters: ["buffer", "u32"],
      result: "u32",
    },
    IsWow64GuestMachineSupported: {
      parameters: ["u16", "pointer"],
      result: "pointer",
    },
    GlobalMemoryStatus: {
      parameters: ["pointer"],
      result: "void",
    },
    GetSystemDEPPolicy: {
      parameters: [],
      result: "i32",
    },
    GetFirmwareType: {
      parameters: ["pointer"],
      result: "i32",
    },
    VerifyVersionInfoA: {
      parameters: ["pointer", "u32", "u64"],
      result: "i32",
    },
    VerifyVersionInfoW: {
      parameters: ["pointer", "u32", "u64"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_sysinfo_l1_2_4_dll = Deno.dlopen("api-ms-win-core-sysinfo-l1-2-4.dll", {
    GetSystemTimeAdjustmentPrecise: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetSystemTimeAdjustmentPrecise: {
      parameters: ["u64", "i32"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_sysinfo_l1_2_0_dll = Deno.dlopen("api-ms-win-core-sysinfo-l1-2-0.dll", {
    GetOsSafeBootMode: {
      parameters: ["pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_sysinfo_l1_2_3_dll = Deno.dlopen("api-ms-win-core-sysinfo-l1-2-3.dll", {
    GetOsManufacturingMode: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetIntegratedDisplaySize: {
      parameters: ["pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_wow64_l1_1_1_dll = Deno.dlopen("api-ms-win-core-wow64-l1-1-1.dll", {
    GetSystemWow64Directory2A: {
      parameters: ["buffer", "u32", "u16"],
      result: "u32",
    },
    GetSystemWow64Directory2W: {
      parameters: ["buffer", "u32", "u16"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libntdll_dll = Deno.dlopen("ntdll.dll", {
    RtlGetProductInfo: {
      parameters: ["u32", "u32", "u32", "u32", "pointer"],
      result: "pointer",
    },
    RtlOsDeploymentState: {
      parameters: ["u32"],
      result: "i32",
    },
    RtlGetDeviceFamilyInfoEnum: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    RtlConvertDeviceFamilyInfoToString: {
      parameters: ["pointer", "pointer", "buffer", "buffer"],
      result: "u32",
    },
    RtlSwitchedVVI: {
      parameters: ["pointer", "u32", "u64"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libntdllk_dll = Deno.dlopen("ntdllk.dll", {
    RtlGetSystemGlobalData: {
      parameters: ["i32", "pointer", "u32"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function GlobalMemoryStatusEx(
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GlobalMemoryStatusEx(util.toPointer(lpBuffer)));
}

export function GetSystemInfo(
  lpSystemInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.GetSystemInfo(util.toPointer(lpSystemInfo));
}

export function GetSystemTime(
  lpSystemTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.GetSystemTime(util.toPointer(lpSystemTime));
}

export function GetSystemTimeAsFileTime(
  lpSystemTimeAsFileTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.GetSystemTimeAsFileTime(util.toPointer(lpSystemTimeAsFileTime));
}

export function GetLocalTime(
  lpSystemTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.GetLocalTime(util.toPointer(lpSystemTime));
}

export function IsUserCetAvailableInEnvironment(
  UserCetEnvironment: USER_CET_ENVIRONMENT /* Windows.Win32.System.SystemInformation.USER_CET_ENVIRONMENT */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.IsUserCetAvailableInEnvironment(UserCetEnvironment));
}

export function GetSystemLeapSecondInformation(
  Enabled: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetSystemLeapSecondInformation(util.toPointer(Enabled), util.toPointer(Flags)));
}

export function GetVersion(): number /* u32 */ {
  return libKERNEL32_dll.GetVersion();
}

export function SetLocalTime(
  lpSystemTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetLocalTime(util.toPointer(lpSystemTime)));
}

export function GetTickCount(): number /* u32 */ {
  return libKERNEL32_dll.GetTickCount();
}

export function GetTickCount64(): Deno.PointerValue /* u64 */ {
  return libKERNEL32_dll.GetTickCount64();
}

export function GetSystemTimeAdjustment(
  lpTimeAdjustment: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpTimeIncrement: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpTimeAdjustmentDisabled: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetSystemTimeAdjustment(util.toPointer(lpTimeAdjustment), util.toPointer(lpTimeIncrement), util.toPointer(lpTimeAdjustmentDisabled)));
}

export function GetSystemTimeAdjustmentPrecise(
  lpTimeAdjustment: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpTimeIncrement: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpTimeAdjustmentDisabled: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libapi_ms_win_core_sysinfo_l1_2_4_dll.GetSystemTimeAdjustmentPrecise(util.toPointer(lpTimeAdjustment), util.toPointer(lpTimeIncrement), util.toPointer(lpTimeAdjustmentDisabled)));
}

export function GetSystemDirectoryA(
  lpBuffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  uSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.GetSystemDirectoryA(util.pstrToFfi(lpBuffer), uSize);
}

export function GetSystemDirectoryW(
  lpBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  uSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.GetSystemDirectoryW(util.pwstrToFfi(lpBuffer), uSize);
}

export function GetWindowsDirectoryA(
  lpBuffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  uSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.GetWindowsDirectoryA(util.pstrToFfi(lpBuffer), uSize);
}

export function GetWindowsDirectoryW(
  lpBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  uSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.GetWindowsDirectoryW(util.pwstrToFfi(lpBuffer), uSize);
}

export function GetSystemWindowsDirectoryA(
  lpBuffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  uSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.GetSystemWindowsDirectoryA(util.pstrToFfi(lpBuffer), uSize);
}

export function GetSystemWindowsDirectoryW(
  lpBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  uSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.GetSystemWindowsDirectoryW(util.pwstrToFfi(lpBuffer), uSize);
}

export function GetComputerNameExA(
  NameType: COMPUTER_NAME_FORMAT /* Windows.Win32.System.SystemInformation.COMPUTER_NAME_FORMAT */,
  lpBuffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetComputerNameExA(NameType, util.pstrToFfi(lpBuffer), util.toPointer(nSize)));
}

export function GetComputerNameExW(
  NameType: COMPUTER_NAME_FORMAT /* Windows.Win32.System.SystemInformation.COMPUTER_NAME_FORMAT */,
  lpBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetComputerNameExW(NameType, util.pwstrToFfi(lpBuffer), util.toPointer(nSize)));
}

export function SetComputerNameExW(
  NameType: COMPUTER_NAME_FORMAT /* Windows.Win32.System.SystemInformation.COMPUTER_NAME_FORMAT */,
  lpBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetComputerNameExW(NameType, util.pwstrToFfi(lpBuffer)));
}

export function SetSystemTime(
  lpSystemTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetSystemTime(util.toPointer(lpSystemTime)));
}

export function GetVersionExA(
  lpVersionInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetVersionExA(util.toPointer(lpVersionInformation)));
}

export function GetVersionExW(
  lpVersionInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetVersionExW(util.toPointer(lpVersionInformation)));
}

export function GetLogicalProcessorInformation(
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  ReturnedLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetLogicalProcessorInformation(util.toPointer(Buffer), util.toPointer(ReturnedLength)));
}

export function GetLogicalProcessorInformationEx(
  RelationshipType: LOGICAL_PROCESSOR_RELATIONSHIP /* Windows.Win32.System.SystemInformation.LOGICAL_PROCESSOR_RELATIONSHIP */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  ReturnedLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetLogicalProcessorInformationEx(RelationshipType, util.toPointer(Buffer), util.toPointer(ReturnedLength)));
}

export function GetNativeSystemInfo(
  lpSystemInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.GetNativeSystemInfo(util.toPointer(lpSystemInfo));
}

export function GetSystemTimePreciseAsFileTime(
  lpSystemTimeAsFileTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.GetSystemTimePreciseAsFileTime(util.toPointer(lpSystemTimeAsFileTime));
}

export function GetProductInfo(
  dwOSMajorVersion: number /* u32 */,
  dwOSMinorVersion: number /* u32 */,
  dwSpMajorVersion: number /* u32 */,
  dwSpMinorVersion: number /* u32 */,
  pdwReturnedProductType: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetProductInfo(dwOSMajorVersion, dwOSMinorVersion, dwSpMajorVersion, dwSpMinorVersion, util.toPointer(pdwReturnedProductType)));
}

export function VerSetConditionMask(
  ConditionMask: Deno.PointerValue /* u64 */,
  TypeMask: VER_FLAGS /* Windows.Win32.System.SystemInformation.VER_FLAGS */,
  Condition: number /* u8 */,
): Deno.PointerValue /* u64 */ {
  return libKERNEL32_dll.VerSetConditionMask(ConditionMask, TypeMask, Condition);
}

export function GetOsSafeBootMode(
  Flags: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libapi_ms_win_core_sysinfo_l1_2_0_dll.GetOsSafeBootMode(util.toPointer(Flags)));
}

export function EnumSystemFirmwareTables(
  FirmwareTableProviderSignature: FIRMWARE_TABLE_PROVIDER /* Windows.Win32.System.SystemInformation.FIRMWARE_TABLE_PROVIDER */,
  pFirmwareTableEnumBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.EnumSystemFirmwareTables(FirmwareTableProviderSignature, util.toPointer(pFirmwareTableEnumBuffer), BufferSize);
}

export function GetSystemFirmwareTable(
  FirmwareTableProviderSignature: FIRMWARE_TABLE_PROVIDER /* Windows.Win32.System.SystemInformation.FIRMWARE_TABLE_PROVIDER */,
  FirmwareTableID: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.SystemInformation.FIRMWARE_TABLE_ID */,
  pFirmwareTableBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.GetSystemFirmwareTable(FirmwareTableProviderSignature, util.toPointer(FirmwareTableID), util.toPointer(pFirmwareTableBuffer), BufferSize);
}

export function DnsHostnameToComputerNameExW(
  Hostname: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ComputerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.DnsHostnameToComputerNameExW(util.pwstrToFfi(Hostname), util.pwstrToFfi(ComputerName), util.toPointer(nSize)));
}

export function GetPhysicallyInstalledSystemMemory(
  TotalMemoryInKilobytes: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetPhysicallyInstalledSystemMemory(util.toPointer(TotalMemoryInKilobytes)));
}

export function SetComputerNameEx2W(
  NameType: COMPUTER_NAME_FORMAT /* Windows.Win32.System.SystemInformation.COMPUTER_NAME_FORMAT */,
  Flags: number /* u32 */,
  lpBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetComputerNameEx2W(NameType, Flags, util.pwstrToFfi(lpBuffer)));
}

export function SetSystemTimeAdjustment(
  dwTimeAdjustment: number /* u32 */,
  bTimeAdjustmentDisabled: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetSystemTimeAdjustment(dwTimeAdjustment, util.boolToFfi(bTimeAdjustmentDisabled)));
}

export function SetSystemTimeAdjustmentPrecise(
  dwTimeAdjustment: Deno.PointerValue /* u64 */,
  bTimeAdjustmentDisabled: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libapi_ms_win_core_sysinfo_l1_2_4_dll.SetSystemTimeAdjustmentPrecise(dwTimeAdjustment, util.boolToFfi(bTimeAdjustmentDisabled)));
}

export function GetProcessorSystemCycleTime(
  Group: number /* u16 */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  ReturnedLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetProcessorSystemCycleTime(Group, util.toPointer(Buffer), util.toPointer(ReturnedLength)));
}

export function GetOsManufacturingMode(
  pbEnabled: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libapi_ms_win_core_sysinfo_l1_2_3_dll.GetOsManufacturingMode(util.toPointer(pbEnabled)));
}

export function GetIntegratedDisplaySize(
  sizeInInches: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libapi_ms_win_core_sysinfo_l1_2_3_dll.GetIntegratedDisplaySize(util.toPointer(sizeInInches)));
}

export function SetComputerNameA(
  lpComputerName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetComputerNameA(util.pstrToFfi(lpComputerName)));
}

export function SetComputerNameW(
  lpComputerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetComputerNameW(util.pwstrToFfi(lpComputerName)));
}

export function SetComputerNameExA(
  NameType: COMPUTER_NAME_FORMAT /* Windows.Win32.System.SystemInformation.COMPUTER_NAME_FORMAT */,
  lpBuffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetComputerNameExA(NameType, util.pstrToFfi(lpBuffer)));
}

export function GetSystemCpuSetInformation(
  Information: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferLength: number /* u32 */,
  ReturnedLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  Process: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetSystemCpuSetInformation(util.toPointer(Information), BufferLength, util.toPointer(ReturnedLength), util.toPointer(Process), Flags));
}

export function GetSystemWow64DirectoryA(
  lpBuffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  uSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.GetSystemWow64DirectoryA(util.pstrToFfi(lpBuffer), uSize);
}

export function GetSystemWow64DirectoryW(
  lpBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  uSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.GetSystemWow64DirectoryW(util.pwstrToFfi(lpBuffer), uSize);
}

export function GetSystemWow64Directory2A(
  lpBuffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  uSize: number /* u32 */,
  ImageFileMachineType: IMAGE_FILE_MACHINE /* Windows.Win32.System.SystemInformation.IMAGE_FILE_MACHINE */,
): number /* u32 */ {
  return libapi_ms_win_core_wow64_l1_1_1_dll.GetSystemWow64Directory2A(util.pstrToFfi(lpBuffer), uSize, ImageFileMachineType);
}

export function GetSystemWow64Directory2W(
  lpBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  uSize: number /* u32 */,
  ImageFileMachineType: IMAGE_FILE_MACHINE /* Windows.Win32.System.SystemInformation.IMAGE_FILE_MACHINE */,
): number /* u32 */ {
  return libapi_ms_win_core_wow64_l1_1_1_dll.GetSystemWow64Directory2W(util.pwstrToFfi(lpBuffer), uSize, ImageFileMachineType);
}

export function IsWow64GuestMachineSupported(
  WowGuestMachine: IMAGE_FILE_MACHINE /* Windows.Win32.System.SystemInformation.IMAGE_FILE_MACHINE */,
  MachineIsSupported: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libKERNEL32_dll.IsWow64GuestMachineSupported(WowGuestMachine, util.toPointer(MachineIsSupported)));
}

export function RtlGetProductInfo(
  OSMajorVersion: number /* u32 */,
  OSMinorVersion: number /* u32 */,
  SpMajorVersion: number /* u32 */,
  SpMinorVersion: number /* u32 */,
  ReturnedProductType: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libntdll_dll.RtlGetProductInfo(OSMajorVersion, OSMinorVersion, SpMajorVersion, SpMinorVersion, util.toPointer(ReturnedProductType)));
}

export function RtlOsDeploymentState(
  Flags: number /* u32 */,
): OS_DEPLOYEMENT_STATE_VALUES /* Windows.Win32.System.SystemInformation.OS_DEPLOYEMENT_STATE_VALUES */ {
  return libntdll_dll.RtlOsDeploymentState(Flags);
}

export function RtlGetSystemGlobalData(
  DataId: RTL_SYSTEM_GLOBAL_DATA_ID /* Windows.Win32.System.SystemInformation.RTL_SYSTEM_GLOBAL_DATA_ID */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  Size: number /* u32 */,
): number /* u32 */ {
  return libntdllk_dll.RtlGetSystemGlobalData(DataId, util.toPointer(Buffer), Size);
}

export function RtlGetDeviceFamilyInfoEnum(
  pullUAPInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pulDeviceFamily: Deno.PointerValue | Uint8Array | null /* ptr */,
  pulDeviceForm: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libntdll_dll.RtlGetDeviceFamilyInfoEnum(util.toPointer(pullUAPInfo), util.toPointer(pulDeviceFamily), util.toPointer(pulDeviceForm));
}

export function RtlConvertDeviceFamilyInfoToString(
  pulDeviceFamilyBufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  pulDeviceFormBufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  DeviceFamily: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  DeviceForm: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libntdll_dll.RtlConvertDeviceFamilyInfoToString(util.toPointer(pulDeviceFamilyBufferSize), util.toPointer(pulDeviceFormBufferSize), util.pwstrToFfi(DeviceFamily), util.pwstrToFfi(DeviceForm));
}

export function RtlSwitchedVVI(
  VersionInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  TypeMask: number /* u32 */,
  ConditionMask: Deno.PointerValue /* u64 */,
): number /* u32 */ {
  return libntdll_dll.RtlSwitchedVVI(util.toPointer(VersionInfo), TypeMask, ConditionMask);
}

export function GlobalMemoryStatus(
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.GlobalMemoryStatus(util.toPointer(lpBuffer));
}

export function GetSystemDEPPolicy(): DEP_SYSTEM_POLICY_TYPE /* Windows.Win32.System.SystemInformation.DEP_SYSTEM_POLICY_TYPE */ {
  return libKERNEL32_dll.GetSystemDEPPolicy();
}

export function GetFirmwareType(
  FirmwareType: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetFirmwareType(util.toPointer(FirmwareType)));
}

export function VerifyVersionInfoA(
  lpVersionInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwTypeMask: VER_FLAGS /* Windows.Win32.System.SystemInformation.VER_FLAGS */,
  dwlConditionMask: Deno.PointerValue /* u64 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.VerifyVersionInfoA(util.toPointer(lpVersionInformation), dwTypeMask, dwlConditionMask));
}

export function VerifyVersionInfoW(
  lpVersionInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwTypeMask: VER_FLAGS /* Windows.Win32.System.SystemInformation.VER_FLAGS */,
  dwlConditionMask: Deno.PointerValue /* u64 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.VerifyVersionInfoW(util.toPointer(lpVersionInformation), dwTypeMask, dwlConditionMask));
}

