/// Auto-generated by Deno Win32: Windows.Win32.System.Performance.HardwareCounterProfiling.Apis

import * as util from "../../../util.ts";

// Enums
export type HARDWARE_COUNTER_TYPE = number;

// Constants
export const PMCCounter = 0;
export const MaxHardwareCounterType = 1;

// Structs

/**
 * Windows.Win32.System.Performance.HardwareCounterProfiling.HARDWARE_COUNTER_DATA (size: 16)
 */
export interface HARDWARE_COUNTER_DATA {
  /** Windows.Win32.System.Performance.HardwareCounterProfiling.HARDWARE_COUNTER_TYPE */
  Type: HARDWARE_COUNTER_TYPE;
  /** u32 */
  Reserved: number;
  /** u64 */
  Value: Deno.PointerValue;
}

export const sizeofHARDWARE_COUNTER_DATA = 16;

export function allocHARDWARE_COUNTER_DATA(data?: Partial<HARDWARE_COUNTER_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofHARDWARE_COUNTER_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  // 0x08: u64
  if (data?.Value !== undefined) view.setBigUint64(8, BigInt(data.Value), true);
  return buf;
}

/**
 * Windows.Win32.System.Performance.HardwareCounterProfiling.PERFORMANCE_DATA (size: 40)
 */
export interface PERFORMANCE_DATA {
  /** u16 */
  Size: number;
  /** u8 */
  Version: number;
  /** u8 */
  HwCountersCount: number;
  /** u32 */
  ContextSwitchCount: number;
  /** u64 */
  WaitReasonBitMap: Deno.PointerValue;
  /** u64 */
  CycleTime: Deno.PointerValue;
  /** u32 */
  RetryCount: number;
  /** u32 */
  Reserved: number;
  /** array */
  HwCounters: Deno.PointerValue | null;
}

export const sizeofPERFORMANCE_DATA = 40;

export function allocPERFORMANCE_DATA(data?: Partial<PERFORMANCE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofPERFORMANCE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Size !== undefined) view.setUint16(0, Number(data.Size), true);
  // 0x02: u8
  if (data?.Version !== undefined) view.setUint8(2, Number(data.Version));
  // 0x03: u8
  if (data?.HwCountersCount !== undefined) view.setUint8(3, Number(data.HwCountersCount));
  // 0x04: u32
  if (data?.ContextSwitchCount !== undefined) view.setUint32(4, Number(data.ContextSwitchCount), true);
  // 0x08: u64
  if (data?.WaitReasonBitMap !== undefined) view.setBigUint64(8, BigInt(data.WaitReasonBitMap), true);
  // 0x10: u64
  if (data?.CycleTime !== undefined) view.setBigUint64(16, BigInt(data.CycleTime), true);
  // 0x18: u32
  if (data?.RetryCount !== undefined) view.setUint32(24, Number(data.RetryCount), true);
  // 0x1c: u32
  if (data?.Reserved !== undefined) view.setUint32(28, Number(data.Reserved), true);
  // 0x20: pointer
  if (data?.HwCounters !== undefined) view.setBigUint64(32, data.HwCounters === null ? 0n : BigInt(util.toPointer(data.HwCounters)), true);
  return buf;
}

export type HANDLE = Deno.PointerValue;

// Native Libraries

try {
  var libKERNEL32 = Deno.dlopen("KERNEL32", {
    EnableThreadProfiling: {
      parameters: ["pointer", "u32", "u64", "pointer"],
      result: "u32",
    },
    DisableThreadProfiling: {
      parameters: ["pointer"],
      result: "u32",
    },
    QueryThreadProfiling: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    ReadThreadProfilingData: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function EnableThreadProfiling(
  ThreadHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Flags: number /* u32 */,
  HardwareCounters: Deno.PointerValue /* u64 */,
  PerformanceDataHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libKERNEL32.EnableThreadProfiling(util.toPointer(ThreadHandle), Flags, HardwareCounters, util.toPointer(PerformanceDataHandle));
}

export function DisableThreadProfiling(
  PerformanceDataHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libKERNEL32.DisableThreadProfiling(util.toPointer(PerformanceDataHandle));
}

export function QueryThreadProfiling(
  ThreadHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Enabled: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libKERNEL32.QueryThreadProfiling(util.toPointer(ThreadHandle), util.toPointer(Enabled));
}

export function ReadThreadProfilingData(
  PerformanceDataHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Flags: number /* u32 */,
  PerformanceData: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libKERNEL32.ReadThreadProfilingData(util.toPointer(PerformanceDataHandle), Flags, util.toPointer(PerformanceData));
}

