/// Auto-generated by Deno Win32: Windows.Win32.System.Performance.HardwareCounterProfiling.Apis

import * as util from "../../../util.ts";

// Enums
export type HARDWARE_COUNTER_TYPE = number;

// Constants
export const PMCCounter = 0;
export const MaxHardwareCounterType = 1;

// Structs

/**
 * Windows.Win32.System.Performance.HardwareCounterProfiling.HARDWARE_COUNTER_DATA (size: 16)
 */
export interface HARDWARE_COUNTER_DATA {
  /** Windows.Win32.System.Performance.HardwareCounterProfiling.HARDWARE_COUNTER_TYPE */
  Type: HARDWARE_COUNTER_TYPE;
  /** u32 */
  Reserved: number;
  /** u64 */
  Value: bigint | number;
}

export const sizeofHARDWARE_COUNTER_DATA = 16;

export function allocHARDWARE_COUNTER_DATA(data?: Partial<HARDWARE_COUNTER_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofHARDWARE_COUNTER_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  // 0x08: u64
  if (data?.Value !== undefined) view.setBigUint64(8, BigInt(data.Value), true);
  return buf;
}

export class HARDWARE_COUNTER_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Reserved(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get Value(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Reserved(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set Value(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Performance.HardwareCounterProfiling.PERFORMANCE_DATA (size: 40)
 */
export interface PERFORMANCE_DATA {
  /** u16 */
  Size: number;
  /** u8 */
  Version: number;
  /** u8 */
  HwCountersCount: number;
  /** u32 */
  ContextSwitchCount: number;
  /** u64 */
  WaitReasonBitMap: bigint | number;
  /** u64 */
  CycleTime: bigint | number;
  /** u32 */
  RetryCount: number;
  /** u32 */
  Reserved: number;
  /** array */
  HwCounters: Deno.PointerValue;
}

export const sizeofPERFORMANCE_DATA = 40;

export function allocPERFORMANCE_DATA(data?: Partial<PERFORMANCE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofPERFORMANCE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Size !== undefined) view.setUint16(0, Number(data.Size), true);
  // 0x02: u8
  if (data?.Version !== undefined) view.setUint8(2, Number(data.Version));
  // 0x03: u8
  if (data?.HwCountersCount !== undefined) view.setUint8(3, Number(data.HwCountersCount));
  // 0x04: u32
  if (data?.ContextSwitchCount !== undefined) view.setUint32(4, Number(data.ContextSwitchCount), true);
  // 0x08: u64
  if (data?.WaitReasonBitMap !== undefined) view.setBigUint64(8, BigInt(data.WaitReasonBitMap), true);
  // 0x10: u64
  if (data?.CycleTime !== undefined) view.setBigUint64(16, BigInt(data.CycleTime), true);
  // 0x18: u32
  if (data?.RetryCount !== undefined) view.setUint32(24, Number(data.RetryCount), true);
  // 0x1c: u32
  if (data?.Reserved !== undefined) view.setUint32(28, Number(data.Reserved), true);
  // 0x20: pointer
  if (data?.HwCounters !== undefined) view.setBigUint64(32, data.HwCounters === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HwCounters))), true);
  return buf;
}

export class PERFORMANCE_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Size(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get Version(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get HwCountersCount(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u32
  get ContextSwitchCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get WaitReasonBitMap(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get CycleTime(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u32
  get RetryCount(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get Reserved(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get HwCounters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set Size(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set Version(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set HwCountersCount(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u32
  set ContextSwitchCount(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set WaitReasonBitMap(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set CycleTime(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u32
  set RetryCount(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set Reserved(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set HwCounters(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type HANDLE = bigint | number;

// Native Libraries

try {
  var libKERNEL32_dll = Deno.dlopen("KERNEL32.dll", {
    EnableThreadProfiling: {
      parameters: ["pointer", "u32", "u64", "pointer"],
      result: "u32",
      optional: true,
    },
    DisableThreadProfiling: {
      parameters: ["pointer"],
      result: "u32",
      optional: true,
    },
    QueryThreadProfiling: {
      parameters: ["pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    ReadThreadProfilingData: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function EnableThreadProfiling(
  ThreadHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Flags: number /* u32 */,
  HardwareCounters: bigint | number /* u64 */,
  PerformanceDataHandle: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libKERNEL32_dll.EnableThreadProfiling!(util.toPointer(ThreadHandle), Flags, HardwareCounters, util.toPointer(PerformanceDataHandle));
}

export function DisableThreadProfiling(
  PerformanceDataHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libKERNEL32_dll.DisableThreadProfiling!(util.toPointer(PerformanceDataHandle));
}

export function QueryThreadProfiling(
  ThreadHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Enabled: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libKERNEL32_dll.QueryThreadProfiling!(util.toPointer(ThreadHandle), util.toPointer(Enabled));
}

export function ReadThreadProfilingData(
  PerformanceDataHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Flags: number /* u32 */,
  PerformanceData: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libKERNEL32_dll.ReadThreadProfilingData!(util.toPointer(PerformanceDataHandle), Flags, util.toPointer(PerformanceData));
}

