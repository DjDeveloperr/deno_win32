/// Auto-generated by Deno Win32: Windows.Win32.System.HostComputeSystem.Apis

import * as util from "../../util.ts";

// Enums
export type HCS_OPERATION_TYPE = number;
export type HCS_EVENT_TYPE = number;
export type HCS_EVENT_OPTIONS = number;
export type HCS_NOTIFICATION_FLAGS = number;
export type HCS_NOTIFICATIONS = number;
export type HCS_CREATE_OPTIONS = number;

// Constants
export const HcsOperationTypeNone = "-1";
export const HcsOperationTypeEnumerate = 0;
export const HcsOperationTypeCreate = 1;
export const HcsOperationTypeStart = 2;
export const HcsOperationTypeShutdown = 3;
export const HcsOperationTypePause = 4;
export const HcsOperationTypeResume = 5;
export const HcsOperationTypeSave = 6;
export const HcsOperationTypeTerminate = 7;
export const HcsOperationTypeModify = 8;
export const HcsOperationTypeGetProperties = 9;
export const HcsOperationTypeCreateProcess = 10;
export const HcsOperationTypeSignalProcess = 11;
export const HcsOperationTypeGetProcessInfo = 12;
export const HcsOperationTypeGetProcessProperties = 13;
export const HcsOperationTypeModifyProcess = 14;
export const HcsOperationTypeCrash = 15;
export const HcsEventInvalid = 0;
export const HcsEventSystemExited = 1;
export const HcsEventSystemCrashInitiated = 2;
export const HcsEventSystemCrashReport = 3;
export const HcsEventSystemRdpEnhancedModeStateChanged = 4;
export const HcsEventSystemSiloJobCreated = 5;
export const HcsEventSystemGuestConnectionClosed = 6;
export const HcsEventProcessExited = 65536;
export const HcsEventOperationCallback = 16777216;
export const HcsEventServiceDisconnect = 33554432;
export const HcsEventOptionNone = 0;
export const HcsEventOptionEnableOperationCallbacks = 1;
export const HcsNotificationFlagSuccess = 0;
export const HcsNotificationFlagFailure = "-2147483648";
export const HcsNotificationInvalid = 0;
export const HcsNotificationSystemExited = 1;
export const HcsNotificationSystemCreateCompleted = 2;
export const HcsNotificationSystemStartCompleted = 3;
export const HcsNotificationSystemPauseCompleted = 4;
export const HcsNotificationSystemResumeCompleted = 5;
export const HcsNotificationSystemCrashReport = 6;
export const HcsNotificationSystemSiloJobCreated = 7;
export const HcsNotificationSystemSaveCompleted = 8;
export const HcsNotificationSystemRdpEnhancedModeStateChanged = 9;
export const HcsNotificationSystemShutdownFailed = 10;
export const HcsNotificationSystemShutdownCompleted = 10;
export const HcsNotificationSystemGetPropertiesCompleted = 11;
export const HcsNotificationSystemModifyCompleted = 12;
export const HcsNotificationSystemCrashInitiated = 13;
export const HcsNotificationSystemGuestConnectionClosed = 14;
export const HcsNotificationSystemOperationCompletion = 15;
export const HcsNotificationSystemPassThru = 16;
export const HcsNotificationProcessExited = 65536;
export const HcsNotificationServiceDisconnect = 16777216;
export const HcsNotificationFlagsReserved = "-268435456";
export const HcsCreateOptions_1 = 65536;

// Structs

export type HCS_OPERATION = Deno.PointerValue;

export type HCS_SYSTEM = Deno.PointerValue;

export type HCS_PROCESS = Deno.PointerValue;

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.System.HostComputeSystem.HCS_EVENT (size: 24)
 */
export interface HCS_EVENT {
  /** Windows.Win32.System.HostComputeSystem.HCS_EVENT_TYPE */
  Type: HCS_EVENT_TYPE;
  /** Windows.Win32.Foundation.PWSTR */
  EventData: string | null;
  /** Windows.Win32.System.HostComputeSystem.HCS_OPERATION */
  Operation: Uint8Array | Deno.PointerValue | null;
}

export const sizeofHCS_EVENT = 24;

export function allocHCS_EVENT(data?: Partial<HCS_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofHCS_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.EventData !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.EventData);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.Operation !== undefined) view.setBigUint64(16, data.Operation === null ? 0n : BigInt(util.toPointer(data.Operation)), true);
  return buf;
}

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.System.HostComputeSystem.HCS_PROCESS_INFORMATION (size: 32)
 */
export interface HCS_PROCESS_INFORMATION {
  /** u32 */
  ProcessId: number;
  /** u32 */
  Reserved: number;
  /** Windows.Win32.Foundation.HANDLE */
  StdInput: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  StdOutput: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  StdError: Uint8Array | Deno.PointerValue | null;
}

export const sizeofHCS_PROCESS_INFORMATION = 32;

export function allocHCS_PROCESS_INFORMATION(data?: Partial<HCS_PROCESS_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofHCS_PROCESS_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ProcessId !== undefined) view.setUint32(0, Number(data.ProcessId), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  // 0x08: pointer
  if (data?.StdInput !== undefined) view.setBigUint64(8, data.StdInput === null ? 0n : BigInt(util.toPointer(data.StdInput)), true);
  // 0x10: pointer
  if (data?.StdOutput !== undefined) view.setBigUint64(16, data.StdOutput === null ? 0n : BigInt(util.toPointer(data.StdOutput)), true);
  // 0x18: pointer
  if (data?.StdError !== undefined) view.setBigUint64(24, data.StdError === null ? 0n : BigInt(util.toPointer(data.StdError)), true);
  return buf;
}

/**
 * Windows.Win32.System.HostComputeSystem.HCS_CREATE_OPTIONS_1 (size: 48)
 */
export interface HCS_CREATE_OPTIONS_1 {
  /** Windows.Win32.System.HostComputeSystem.HCS_CREATE_OPTIONS */
  Version: HCS_CREATE_OPTIONS;
  /** Windows.Win32.Foundation.HANDLE */
  UserToken: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  SecurityDescriptor: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.HostComputeSystem.HCS_EVENT_OPTIONS */
  CallbackOptions: HCS_EVENT_OPTIONS;
  /** ptr */
  CallbackContext: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.HostComputeSystem.HCS_EVENT_CALLBACK */
  Callback: Uint8Array | Deno.PointerValue | null;
}

export const sizeofHCS_CREATE_OPTIONS_1 = 48;

export function allocHCS_CREATE_OPTIONS_1(data?: Partial<HCS_CREATE_OPTIONS_1>): Uint8Array {
  const buf = new Uint8Array(sizeofHCS_CREATE_OPTIONS_1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Version !== undefined) view.setInt32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.UserToken !== undefined) view.setBigUint64(8, data.UserToken === null ? 0n : BigInt(util.toPointer(data.UserToken)), true);
  // 0x10: pointer
  if (data?.SecurityDescriptor !== undefined) view.setBigUint64(16, data.SecurityDescriptor === null ? 0n : BigInt(util.toPointer(data.SecurityDescriptor)), true);
  // 0x18: u32
  if (data?.CallbackOptions !== undefined) view.setUint32(24, Number(data.CallbackOptions), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.CallbackContext !== undefined) view.setBigUint64(32, data.CallbackContext === null ? 0n : BigInt(util.toPointer(data.CallbackContext)), true);
  // 0x28: pointer
  if (data?.Callback !== undefined) view.setBigUint64(40, data.Callback === null ? 0n : BigInt(util.toPointer(data.Callback)), true);
  return buf;
}

export type HRESULT = number;

// Native Libraries

try {
  var libcomputecore = Deno.dlopen("computecore", {
    HcsEnumerateComputeSystems: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    HcsEnumerateComputeSystemsInNamespace: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "pointer",
    },
    HcsCreateOperation: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    HcsCloseOperation: {
      parameters: ["pointer"],
      result: "void",
    },
    HcsGetOperationContext: {
      parameters: ["pointer"],
      result: "pointer",
    },
    HcsSetOperationContext: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    HcsGetComputeSystemFromOperation: {
      parameters: ["pointer"],
      result: "pointer",
    },
    HcsGetProcessFromOperation: {
      parameters: ["pointer"],
      result: "pointer",
    },
    HcsGetOperationType: {
      parameters: ["pointer"],
      result: "i32",
    },
    HcsGetOperationId: {
      parameters: ["pointer"],
      result: "u64",
    },
    HcsGetOperationResult: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    HcsGetOperationResultAndProcessInfo: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HcsGetProcessorCompatibilityFromSavedState: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    HcsWaitForOperationResult: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    HcsWaitForOperationResultAndProcessInfo: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    HcsSetOperationCallback: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HcsCancelOperation: {
      parameters: ["pointer"],
      result: "pointer",
    },
    HcsCreateComputeSystem: {
      parameters: ["buffer", "buffer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HcsCreateComputeSystemInNamespace: {
      parameters: ["buffer", "buffer", "buffer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HcsOpenComputeSystem: {
      parameters: ["buffer", "u32", "pointer"],
      result: "pointer",
    },
    HcsOpenComputeSystemInNamespace: {
      parameters: ["buffer", "buffer", "u32", "pointer"],
      result: "pointer",
    },
    HcsCloseComputeSystem: {
      parameters: ["pointer"],
      result: "void",
    },
    HcsStartComputeSystem: {
      parameters: ["pointer", "pointer", "buffer"],
      result: "pointer",
    },
    HcsShutDownComputeSystem: {
      parameters: ["pointer", "pointer", "buffer"],
      result: "pointer",
    },
    HcsTerminateComputeSystem: {
      parameters: ["pointer", "pointer", "buffer"],
      result: "pointer",
    },
    HcsCrashComputeSystem: {
      parameters: ["pointer", "pointer", "buffer"],
      result: "pointer",
    },
    HcsPauseComputeSystem: {
      parameters: ["pointer", "pointer", "buffer"],
      result: "pointer",
    },
    HcsResumeComputeSystem: {
      parameters: ["pointer", "pointer", "buffer"],
      result: "pointer",
    },
    HcsSaveComputeSystem: {
      parameters: ["pointer", "pointer", "buffer"],
      result: "pointer",
    },
    HcsGetComputeSystemProperties: {
      parameters: ["pointer", "pointer", "buffer"],
      result: "pointer",
    },
    HcsModifyComputeSystem: {
      parameters: ["pointer", "pointer", "buffer", "pointer"],
      result: "pointer",
    },
    HcsWaitForComputeSystemExit: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    HcsSetComputeSystemCallback: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    HcsCreateProcess: {
      parameters: ["pointer", "buffer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HcsOpenProcess: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    HcsCloseProcess: {
      parameters: ["pointer"],
      result: "void",
    },
    HcsTerminateProcess: {
      parameters: ["pointer", "pointer", "buffer"],
      result: "pointer",
    },
    HcsSignalProcess: {
      parameters: ["pointer", "pointer", "buffer"],
      result: "pointer",
    },
    HcsGetProcessInfo: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    HcsGetProcessProperties: {
      parameters: ["pointer", "pointer", "buffer"],
      result: "pointer",
    },
    HcsModifyProcess: {
      parameters: ["pointer", "pointer", "buffer"],
      result: "pointer",
    },
    HcsSetProcessCallback: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    HcsWaitForProcessExit: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    HcsGetServiceProperties: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    HcsModifyServiceSettings: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    HcsSubmitWerReport: {
      parameters: ["buffer"],
      result: "pointer",
    },
    HcsCreateEmptyGuestStateFile: {
      parameters: ["buffer"],
      result: "pointer",
    },
    HcsCreateEmptyRuntimeStateFile: {
      parameters: ["buffer"],
      result: "pointer",
    },
    HcsGrantVmAccess: {
      parameters: ["buffer", "buffer"],
      result: "pointer",
    },
    HcsRevokeVmAccess: {
      parameters: ["buffer", "buffer"],
      result: "pointer",
    },
    HcsGrantVmGroupAccess: {
      parameters: ["buffer"],
      result: "pointer",
    },
    HcsRevokeVmGroupAccess: {
      parameters: ["buffer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libcomputestorage = Deno.dlopen("computestorage", {
    HcsImportLayer: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "pointer",
    },
    HcsExportLayer: {
      parameters: ["buffer", "buffer", "buffer", "buffer"],
      result: "pointer",
    },
    HcsExportLegacyWritableLayer: {
      parameters: ["buffer", "buffer", "buffer", "buffer"],
      result: "pointer",
    },
    HcsDestroyLayer: {
      parameters: ["buffer"],
      result: "pointer",
    },
    HcsSetupBaseOSLayer: {
      parameters: ["buffer", "pointer", "buffer"],
      result: "pointer",
    },
    HcsInitializeWritableLayer: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "pointer",
    },
    HcsInitializeLegacyWritableLayer: {
      parameters: ["buffer", "buffer", "buffer", "buffer"],
      result: "pointer",
    },
    HcsAttachLayerStorageFilter: {
      parameters: ["buffer", "buffer"],
      result: "pointer",
    },
    HcsDetachLayerStorageFilter: {
      parameters: ["buffer"],
      result: "pointer",
    },
    HcsFormatWritableLayerVhd: {
      parameters: ["pointer"],
      result: "pointer",
    },
    HcsGetLayerVhdMountPath: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    HcsSetupBaseOSVolume: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function HcsEnumerateComputeSystems(
  query: string | null /* Windows.Win32.Foundation.PWSTR */,
  operation: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_OPERATION */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsEnumerateComputeSystems(util.pwstrToFfi(query), util.toPointer(operation)));
}

export function HcsEnumerateComputeSystemsInNamespace(
  idNamespace: string | null /* Windows.Win32.Foundation.PWSTR */,
  query: string | null /* Windows.Win32.Foundation.PWSTR */,
  operation: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_OPERATION */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsEnumerateComputeSystemsInNamespace(util.pwstrToFfi(idNamespace), util.pwstrToFfi(query), util.toPointer(operation)));
}

export function HcsCreateOperation(
  context: Deno.PointerValue | Uint8Array | null /* ptr */,
  callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_OPERATION_COMPLETION */,
): Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_OPERATION */ {
  return util.pointerFromFfi(libcomputecore.HcsCreateOperation(util.toPointer(context), util.toPointer(callback)));
}

export function HcsCloseOperation(
  operation: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_OPERATION */,
): void /* void */ {
  return libcomputecore.HcsCloseOperation(util.toPointer(operation));
}

export function HcsGetOperationContext(
  operation: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_OPERATION */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libcomputecore.HcsGetOperationContext(util.toPointer(operation)));
}

export function HcsSetOperationContext(
  operation: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_OPERATION */,
  context: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsSetOperationContext(util.toPointer(operation), util.toPointer(context)));
}

export function HcsGetComputeSystemFromOperation(
  operation: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_OPERATION */,
): Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_SYSTEM */ {
  return util.pointerFromFfi(libcomputecore.HcsGetComputeSystemFromOperation(util.toPointer(operation)));
}

export function HcsGetProcessFromOperation(
  operation: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_OPERATION */,
): Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_PROCESS */ {
  return util.pointerFromFfi(libcomputecore.HcsGetProcessFromOperation(util.toPointer(operation)));
}

export function HcsGetOperationType(
  operation: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_OPERATION */,
): HCS_OPERATION_TYPE /* Windows.Win32.System.HostComputeSystem.HCS_OPERATION_TYPE */ {
  return libcomputecore.HcsGetOperationType(util.toPointer(operation));
}

export function HcsGetOperationId(
  operation: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_OPERATION */,
): Deno.PointerValue /* u64 */ {
  return libcomputecore.HcsGetOperationId(util.toPointer(operation));
}

export function HcsGetOperationResult(
  operation: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_OPERATION */,
  resultDocument: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsGetOperationResult(util.toPointer(operation), util.toPointer(resultDocument)));
}

export function HcsGetOperationResultAndProcessInfo(
  operation: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_OPERATION */,
  processInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  resultDocument: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsGetOperationResultAndProcessInfo(util.toPointer(operation), util.toPointer(processInformation), util.toPointer(resultDocument)));
}

export function HcsGetProcessorCompatibilityFromSavedState(
  RuntimeFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ProcessorFeaturesString: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsGetProcessorCompatibilityFromSavedState(util.pwstrToFfi(RuntimeFileName), util.toPointer(ProcessorFeaturesString)));
}

export function HcsWaitForOperationResult(
  operation: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_OPERATION */,
  timeoutMs: number /* u32 */,
  resultDocument: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsWaitForOperationResult(util.toPointer(operation), timeoutMs, util.toPointer(resultDocument)));
}

export function HcsWaitForOperationResultAndProcessInfo(
  operation: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_OPERATION */,
  timeoutMs: number /* u32 */,
  processInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  resultDocument: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsWaitForOperationResultAndProcessInfo(util.toPointer(operation), timeoutMs, util.toPointer(processInformation), util.toPointer(resultDocument)));
}

export function HcsSetOperationCallback(
  operation: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_OPERATION */,
  context: Deno.PointerValue | Uint8Array | null /* ptr */,
  callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_OPERATION_COMPLETION */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsSetOperationCallback(util.toPointer(operation), util.toPointer(context), util.toPointer(callback)));
}

export function HcsCancelOperation(
  operation: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_OPERATION */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsCancelOperation(util.toPointer(operation)));
}

export function HcsCreateComputeSystem(
  id: string | null /* Windows.Win32.Foundation.PWSTR */,
  configuration: string | null /* Windows.Win32.Foundation.PWSTR */,
  operation: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_OPERATION */,
  securityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  computeSystem: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsCreateComputeSystem(util.pwstrToFfi(id), util.pwstrToFfi(configuration), util.toPointer(operation), util.toPointer(securityDescriptor), util.toPointer(computeSystem)));
}

export function HcsCreateComputeSystemInNamespace(
  idNamespace: string | null /* Windows.Win32.Foundation.PWSTR */,
  id: string | null /* Windows.Win32.Foundation.PWSTR */,
  configuration: string | null /* Windows.Win32.Foundation.PWSTR */,
  operation: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_OPERATION */,
  options: Deno.PointerValue | Uint8Array | null /* ptr */,
  computeSystem: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsCreateComputeSystemInNamespace(util.pwstrToFfi(idNamespace), util.pwstrToFfi(id), util.pwstrToFfi(configuration), util.toPointer(operation), util.toPointer(options), util.toPointer(computeSystem)));
}

export function HcsOpenComputeSystem(
  id: string | null /* Windows.Win32.Foundation.PWSTR */,
  requestedAccess: number /* u32 */,
  computeSystem: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsOpenComputeSystem(util.pwstrToFfi(id), requestedAccess, util.toPointer(computeSystem)));
}

export function HcsOpenComputeSystemInNamespace(
  idNamespace: string | null /* Windows.Win32.Foundation.PWSTR */,
  id: string | null /* Windows.Win32.Foundation.PWSTR */,
  requestedAccess: number /* u32 */,
  computeSystem: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsOpenComputeSystemInNamespace(util.pwstrToFfi(idNamespace), util.pwstrToFfi(id), requestedAccess, util.toPointer(computeSystem)));
}

export function HcsCloseComputeSystem(
  computeSystem: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_SYSTEM */,
): void /* void */ {
  return libcomputecore.HcsCloseComputeSystem(util.toPointer(computeSystem));
}

export function HcsStartComputeSystem(
  computeSystem: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_SYSTEM */,
  operation: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_OPERATION */,
  options: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsStartComputeSystem(util.toPointer(computeSystem), util.toPointer(operation), util.pwstrToFfi(options)));
}

export function HcsShutDownComputeSystem(
  computeSystem: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_SYSTEM */,
  operation: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_OPERATION */,
  options: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsShutDownComputeSystem(util.toPointer(computeSystem), util.toPointer(operation), util.pwstrToFfi(options)));
}

export function HcsTerminateComputeSystem(
  computeSystem: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_SYSTEM */,
  operation: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_OPERATION */,
  options: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsTerminateComputeSystem(util.toPointer(computeSystem), util.toPointer(operation), util.pwstrToFfi(options)));
}

export function HcsCrashComputeSystem(
  computeSystem: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_SYSTEM */,
  operation: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_OPERATION */,
  options: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsCrashComputeSystem(util.toPointer(computeSystem), util.toPointer(operation), util.pwstrToFfi(options)));
}

export function HcsPauseComputeSystem(
  computeSystem: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_SYSTEM */,
  operation: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_OPERATION */,
  options: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsPauseComputeSystem(util.toPointer(computeSystem), util.toPointer(operation), util.pwstrToFfi(options)));
}

export function HcsResumeComputeSystem(
  computeSystem: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_SYSTEM */,
  operation: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_OPERATION */,
  options: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsResumeComputeSystem(util.toPointer(computeSystem), util.toPointer(operation), util.pwstrToFfi(options)));
}

export function HcsSaveComputeSystem(
  computeSystem: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_SYSTEM */,
  operation: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_OPERATION */,
  options: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsSaveComputeSystem(util.toPointer(computeSystem), util.toPointer(operation), util.pwstrToFfi(options)));
}

export function HcsGetComputeSystemProperties(
  computeSystem: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_SYSTEM */,
  operation: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_OPERATION */,
  propertyQuery: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsGetComputeSystemProperties(util.toPointer(computeSystem), util.toPointer(operation), util.pwstrToFfi(propertyQuery)));
}

export function HcsModifyComputeSystem(
  computeSystem: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_SYSTEM */,
  operation: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_OPERATION */,
  configuration: string | null /* Windows.Win32.Foundation.PWSTR */,
  identity: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsModifyComputeSystem(util.toPointer(computeSystem), util.toPointer(operation), util.pwstrToFfi(configuration), util.toPointer(identity)));
}

export function HcsWaitForComputeSystemExit(
  computeSystem: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_SYSTEM */,
  timeoutMs: number /* u32 */,
  result: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsWaitForComputeSystemExit(util.toPointer(computeSystem), timeoutMs, util.toPointer(result)));
}

export function HcsSetComputeSystemCallback(
  computeSystem: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_SYSTEM */,
  callbackOptions: HCS_EVENT_OPTIONS /* Windows.Win32.System.HostComputeSystem.HCS_EVENT_OPTIONS */,
  context: Deno.PointerValue | Uint8Array | null /* ptr */,
  callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_EVENT_CALLBACK */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsSetComputeSystemCallback(util.toPointer(computeSystem), callbackOptions, util.toPointer(context), util.toPointer(callback)));
}

export function HcsCreateProcess(
  computeSystem: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_SYSTEM */,
  processParameters: string | null /* Windows.Win32.Foundation.PWSTR */,
  operation: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_OPERATION */,
  securityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  process: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsCreateProcess(util.toPointer(computeSystem), util.pwstrToFfi(processParameters), util.toPointer(operation), util.toPointer(securityDescriptor), util.toPointer(process)));
}

export function HcsOpenProcess(
  computeSystem: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_SYSTEM */,
  processId: number /* u32 */,
  requestedAccess: number /* u32 */,
  process: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsOpenProcess(util.toPointer(computeSystem), processId, requestedAccess, util.toPointer(process)));
}

export function HcsCloseProcess(
  process: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_PROCESS */,
): void /* void */ {
  return libcomputecore.HcsCloseProcess(util.toPointer(process));
}

export function HcsTerminateProcess(
  process: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_PROCESS */,
  operation: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_OPERATION */,
  options: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsTerminateProcess(util.toPointer(process), util.toPointer(operation), util.pwstrToFfi(options)));
}

export function HcsSignalProcess(
  process: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_PROCESS */,
  operation: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_OPERATION */,
  options: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsSignalProcess(util.toPointer(process), util.toPointer(operation), util.pwstrToFfi(options)));
}

export function HcsGetProcessInfo(
  process: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_PROCESS */,
  operation: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_OPERATION */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsGetProcessInfo(util.toPointer(process), util.toPointer(operation)));
}

export function HcsGetProcessProperties(
  process: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_PROCESS */,
  operation: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_OPERATION */,
  propertyQuery: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsGetProcessProperties(util.toPointer(process), util.toPointer(operation), util.pwstrToFfi(propertyQuery)));
}

export function HcsModifyProcess(
  process: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_PROCESS */,
  operation: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_OPERATION */,
  settings: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsModifyProcess(util.toPointer(process), util.toPointer(operation), util.pwstrToFfi(settings)));
}

export function HcsSetProcessCallback(
  process: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_PROCESS */,
  callbackOptions: HCS_EVENT_OPTIONS /* Windows.Win32.System.HostComputeSystem.HCS_EVENT_OPTIONS */,
  context: Deno.PointerValue | Uint8Array | null /* ptr */,
  callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_EVENT_CALLBACK */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsSetProcessCallback(util.toPointer(process), callbackOptions, util.toPointer(context), util.toPointer(callback)));
}

export function HcsWaitForProcessExit(
  computeSystem: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.HostComputeSystem.HCS_PROCESS */,
  timeoutMs: number /* u32 */,
  result: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsWaitForProcessExit(util.toPointer(computeSystem), timeoutMs, util.toPointer(result)));
}

export function HcsGetServiceProperties(
  propertyQuery: string | null /* Windows.Win32.Foundation.PWSTR */,
  result: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsGetServiceProperties(util.pwstrToFfi(propertyQuery), util.toPointer(result)));
}

export function HcsModifyServiceSettings(
  settings: string | null /* Windows.Win32.Foundation.PWSTR */,
  result: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsModifyServiceSettings(util.pwstrToFfi(settings), util.toPointer(result)));
}

export function HcsSubmitWerReport(
  settings: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsSubmitWerReport(util.pwstrToFfi(settings)));
}

export function HcsCreateEmptyGuestStateFile(
  guestStateFilePath: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsCreateEmptyGuestStateFile(util.pwstrToFfi(guestStateFilePath)));
}

export function HcsCreateEmptyRuntimeStateFile(
  runtimeStateFilePath: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsCreateEmptyRuntimeStateFile(util.pwstrToFfi(runtimeStateFilePath)));
}

export function HcsGrantVmAccess(
  vmId: string | null /* Windows.Win32.Foundation.PWSTR */,
  filePath: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsGrantVmAccess(util.pwstrToFfi(vmId), util.pwstrToFfi(filePath)));
}

export function HcsRevokeVmAccess(
  vmId: string | null /* Windows.Win32.Foundation.PWSTR */,
  filePath: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsRevokeVmAccess(util.pwstrToFfi(vmId), util.pwstrToFfi(filePath)));
}

export function HcsGrantVmGroupAccess(
  filePath: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsGrantVmGroupAccess(util.pwstrToFfi(filePath)));
}

export function HcsRevokeVmGroupAccess(
  filePath: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputecore.HcsRevokeVmGroupAccess(util.pwstrToFfi(filePath)));
}

export function HcsImportLayer(
  layerPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  sourceFolderPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  layerData: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputestorage.HcsImportLayer(util.pwstrToFfi(layerPath), util.pwstrToFfi(sourceFolderPath), util.pwstrToFfi(layerData)));
}

export function HcsExportLayer(
  layerPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  exportFolderPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  layerData: string | null /* Windows.Win32.Foundation.PWSTR */,
  options: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputestorage.HcsExportLayer(util.pwstrToFfi(layerPath), util.pwstrToFfi(exportFolderPath), util.pwstrToFfi(layerData), util.pwstrToFfi(options)));
}

export function HcsExportLegacyWritableLayer(
  writableLayerMountPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  writableLayerFolderPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  exportFolderPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  layerData: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputestorage.HcsExportLegacyWritableLayer(util.pwstrToFfi(writableLayerMountPath), util.pwstrToFfi(writableLayerFolderPath), util.pwstrToFfi(exportFolderPath), util.pwstrToFfi(layerData)));
}

export function HcsDestroyLayer(
  layerPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputestorage.HcsDestroyLayer(util.pwstrToFfi(layerPath)));
}

export function HcsSetupBaseOSLayer(
  layerPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  vhdHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  options: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputestorage.HcsSetupBaseOSLayer(util.pwstrToFfi(layerPath), util.toPointer(vhdHandle), util.pwstrToFfi(options)));
}

export function HcsInitializeWritableLayer(
  writableLayerPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  layerData: string | null /* Windows.Win32.Foundation.PWSTR */,
  options: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputestorage.HcsInitializeWritableLayer(util.pwstrToFfi(writableLayerPath), util.pwstrToFfi(layerData), util.pwstrToFfi(options)));
}

export function HcsInitializeLegacyWritableLayer(
  writableLayerMountPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  writableLayerFolderPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  layerData: string | null /* Windows.Win32.Foundation.PWSTR */,
  options: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputestorage.HcsInitializeLegacyWritableLayer(util.pwstrToFfi(writableLayerMountPath), util.pwstrToFfi(writableLayerFolderPath), util.pwstrToFfi(layerData), util.pwstrToFfi(options)));
}

export function HcsAttachLayerStorageFilter(
  layerPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  layerData: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputestorage.HcsAttachLayerStorageFilter(util.pwstrToFfi(layerPath), util.pwstrToFfi(layerData)));
}

export function HcsDetachLayerStorageFilter(
  layerPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputestorage.HcsDetachLayerStorageFilter(util.pwstrToFfi(layerPath)));
}

export function HcsFormatWritableLayerVhd(
  vhdHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputestorage.HcsFormatWritableLayerVhd(util.toPointer(vhdHandle)));
}

export function HcsGetLayerVhdMountPath(
  vhdHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  mountPath: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputestorage.HcsGetLayerVhdMountPath(util.toPointer(vhdHandle), util.toPointer(mountPath)));
}

export function HcsSetupBaseOSVolume(
  layerPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  volumePath: string | null /* Windows.Win32.Foundation.PWSTR */,
  options: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libcomputestorage.HcsSetupBaseOSVolume(util.pwstrToFfi(layerPath), util.pwstrToFfi(volumePath), util.pwstrToFfi(options)));
}

