/// Auto-generated by Deno Win32: Windows.Win32.System.Mmc.Apis

import * as util from "../../util.ts";

// Enums
export type MMC_PROPERTY_ACTION = number;
export type _DocumentMode = number;
export type _ListViewMode = number;
export type _ViewOptions = number;
export type _ExportListOptions = number;
export type _ColumnSortOrder = number;
export type MMC_RESULT_VIEW_STYLE = number;
export type MMC_CONTROL_TYPE = number;
export type MMC_CONSOLE_VERB = number;
export type MMC_BUTTON_STATE = number;
export type MMC_SCOPE_ITEM_STATE = number;
export type MMC_MENU_COMMAND_IDS = number;
export type MMC_FILTER_TYPE = number;
export type MMC_FILTER_CHANGE_CODE = number;
export type MMC_NOTIFY_TYPE = number;
export type DATA_OBJECT_TYPES = number;
export type CCM_INSERTIONPOINTID = number;
export type CCM_INSERTIONALLOWED = number;
export type CCM_COMMANDID_MASK_CONSTANTS = number;
export type CCM_SPECIAL = number;
export type MMC_TASK_DISPLAY_TYPE = number;
export type MMC_ACTION_TYPE = number;
export type IconIdentifier = number;
export type MMC_VIEW_TYPE = number;

// Constants
export const MMC_VER = 512;
export const MMC_PROP_CHANGEAFFECTSUI = 1;
export const MMC_PROP_MODIFIABLE = 2;
export const MMC_PROP_REMOVABLE = 4;
export const MMC_PROP_PERSIST = 8;
export const MMCLV_AUTO = `-1`;
export const MMCLV_NOPARAM = `-2`;
export const MMCLV_NOICON = `-1`;
export const MMCLV_VIEWSTYLE_ICON = 0;
export const MMCLV_VIEWSTYLE_SMALLICON = 2;
export const MMCLV_VIEWSTYLE_LIST = 3;
export const MMCLV_VIEWSTYLE_REPORT = 1;
export const MMCLV_VIEWSTYLE_FILTERED = 4;
export const MMCLV_NOPTR = 0;
export const MMCLV_UPDATE_NOINVALIDATEALL = 1;
export const MMCLV_UPDATE_NOSCROLL = 2;
export const MMC_IMAGECALLBACK = `-1`;
export const RDI_STR = 2;
export const RDI_IMAGE = 4;
export const RDI_STATE = 8;
export const RDI_PARAM = 16;
export const RDI_INDEX = 32;
export const RDI_INDENT = 64;
export const MMC_VIEW_OPTIONS_NONE = 0;
export const MMC_VIEW_OPTIONS_NOLISTVIEWS = 1;
export const MMC_VIEW_OPTIONS_MULTISELECT = 2;
export const MMC_VIEW_OPTIONS_OWNERDATALIST = 4;
export const MMC_VIEW_OPTIONS_FILTERED = 8;
export const MMC_VIEW_OPTIONS_CREATENEW = 16;
export const MMC_VIEW_OPTIONS_USEFONTLINKING = 32;
export const MMC_VIEW_OPTIONS_EXCLUDE_SCOPE_ITEMS_FROM_LIST = 64;
export const MMC_VIEW_OPTIONS_LEXICAL_SORT = 128;
export const MMC_PSO_NOAPPLYNOW = 1;
export const MMC_PSO_HASHELP = 2;
export const MMC_PSO_NEWWIZARDTYPE = 4;
export const MMC_PSO_NO_PROPTITLE = 8;
export const RFI_PARTIAL = 1;
export const RFI_WRAP = 2;
export const RSI_DESCENDING = 1;
export const RSI_NOSORTICON = 2;
export const SDI_STR = 2;
export const SDI_IMAGE = 4;
export const SDI_OPENIMAGE = 8;
export const SDI_STATE = 16;
export const SDI_PARAM = 32;
export const SDI_CHILDREN = 64;
export const SDI_PARENT = 0;
export const SDI_PREVIOUS = 268435456;
export const SDI_NEXT = 536870912;
export const SDI_FIRST = 134217728;
export const MMC_MULTI_SELECT_COOKIE = `-2`;
export const MMC_WINDOW_COOKIE = `-3`;
export const SPECIAL_COOKIE_MIN = `-10`;
export const SPECIAL_COOKIE_MAX = `-1`;
export const MMC_NW_OPTION_NONE = 0;
export const MMC_NW_OPTION_NOSCOPEPANE = 1;
export const MMC_NW_OPTION_NOTOOLBARS = 2;
export const MMC_NW_OPTION_SHORTTITLE = 4;
export const MMC_NW_OPTION_CUSTOMTITLE = 8;
export const MMC_NW_OPTION_NOPERSIST = 16;
export const MMC_NW_OPTION_NOACTIONPANE = 32;
export const MMC_NODEID_SLOW_RETRIEVAL = 1;
export const SPECIAL_DOBJ_MIN = `-10`;
export const SPECIAL_DOBJ_MAX = 0;
export const AUTO_WIDTH = `-1`;
export const HIDE_COLUMN = `-4`;
export const ILSIF_LEAVE_LARGE_ICON = 1073741824;
export const ILSIF_LEAVE_SMALL_ICON = 536870912;
export const HDI_HIDDEN = 1;
export const RDCI_ScopeItem = 2147483648;
export const RVTI_MISC_OPTIONS_NOLISTVIEWS = 1;
export const RVTI_LIST_OPTIONS_NONE = 0;
export const RVTI_LIST_OPTIONS_OWNERDATALIST = 2;
export const RVTI_LIST_OPTIONS_MULTISELECT = 4;
export const RVTI_LIST_OPTIONS_FILTERED = 8;
export const RVTI_LIST_OPTIONS_USEFONTLINKING = 32;
export const RVTI_LIST_OPTIONS_EXCLUDE_SCOPE_ITEMS_FROM_LIST = 64;
export const RVTI_LIST_OPTIONS_LEXICAL_SORT = 128;
export const RVTI_LIST_OPTIONS_ALLOWPASTE = 256;
export const RVTI_HTML_OPTIONS_NONE = 0;
export const RVTI_HTML_OPTIONS_NOLISTVIEW = 1;
export const RVTI_OCX_OPTIONS_NONE = 0;
export const RVTI_OCX_OPTIONS_NOLISTVIEW = 1;
export const RVTI_OCX_OPTIONS_CACHE_OCX = 2;
export const MMC_DEFAULT_OPERATION_COPY = 1;
export const MMC_ITEM_OVERLAY_STATE_MASK = 3840;
export const MMC_ITEM_OVERLAY_STATE_SHIFT = 8;
export const MMC_ITEM_STATE_MASK = 255;
export const MMC_PROPACT_DELETING = 1;
export const MMC_PROPACT_CHANGING = 2;
export const MMC_PROPACT_INITIALIZED = 3;
export const DocumentMode_Author = 0;
export const DocumentMode_User = 1;
export const DocumentMode_User_MDI = 2;
export const DocumentMode_User_SDI = 3;
export const ListMode_Small_Icons = 0;
export const ListMode_Large_Icons = 1;
export const ListMode_List = 2;
export const ListMode_Detail = 3;
export const ListMode_Filtered = 4;
export const ViewOption_Default = 0;
export const ViewOption_ScopeTreeHidden = 1;
export const ViewOption_NoToolBars = 2;
export const ViewOption_NotPersistable = 4;
export const ViewOption_ActionPaneHidden = 8;
export const ExportListOptions_Default = 0;
export const ExportListOptions_Unicode = 1;
export const ExportListOptions_TabDelimited = 2;
export const ExportListOptions_SelectedItemsOnly = 4;
export const SortOrder_Ascending = 0;
export const SortOrder_Descending = 1;
export const MMC_SINGLESEL = 1;
export const MMC_SHOWSELALWAYS = 2;
export const MMC_NOSORTHEADER = 4;
export const MMC_ENSUREFOCUSVISIBLE = 8;
export const TOOLBAR = 0;
export const MENUBUTTON = 1;
export const COMBOBOXBAR = 2;
export const MMC_VERB_NONE = 0;
export const MMC_VERB_OPEN = 32768;
export const MMC_VERB_COPY = 32769;
export const MMC_VERB_PASTE = 32770;
export const MMC_VERB_DELETE = 32771;
export const MMC_VERB_PROPERTIES = 32772;
export const MMC_VERB_RENAME = 32773;
export const MMC_VERB_REFRESH = 32774;
export const MMC_VERB_PRINT = 32775;
export const MMC_VERB_CUT = 32776;
export const MMC_VERB_MAX = 32777;
export const MMC_VERB_FIRST = 32768;
export const MMC_VERB_LAST = 32776;
export const ENABLED = 1;
export const CHECKED = 2;
export const HIDDEN = 4;
export const INDETERMINATE = 8;
export const BUTTONPRESSED = 16;
export const MMC_SCOPE_ITEM_STATE_NORMAL = 1;
export const MMC_SCOPE_ITEM_STATE_BOLD = 2;
export const MMC_SCOPE_ITEM_STATE_EXPANDEDONCE = 3;
export const MMCC_STANDARD_VIEW_SELECT = `-1`;
export const MMC_STRING_FILTER = 0;
export const MMC_INT_FILTER = 1;
export const MMC_FILTER_NOVALUE = 32768;
export const MFCC_DISABLE = 0;
export const MFCC_ENABLE = 1;
export const MFCC_VALUE_CHANGE = 2;
export const MMCN_ACTIVATE = 32769;
export const MMCN_ADD_IMAGES = 32770;
export const MMCN_BTN_CLICK = 32771;
export const MMCN_CLICK = 32772;
export const MMCN_COLUMN_CLICK = 32773;
export const MMCN_CONTEXTMENU = 32774;
export const MMCN_CUTORMOVE = 32775;
export const MMCN_DBLCLICK = 32776;
export const MMCN_DELETE = 32777;
export const MMCN_DESELECT_ALL = 32778;
export const MMCN_EXPAND = 32779;
export const MMCN_HELP = 32780;
export const MMCN_MENU_BTNCLICK = 32781;
export const MMCN_MINIMIZED = 32782;
export const MMCN_PASTE = 32783;
export const MMCN_PROPERTY_CHANGE = 32784;
export const MMCN_QUERY_PASTE = 32785;
export const MMCN_REFRESH = 32786;
export const MMCN_REMOVE_CHILDREN = 32787;
export const MMCN_RENAME = 32788;
export const MMCN_SELECT = 32789;
export const MMCN_SHOW = 32790;
export const MMCN_VIEW_CHANGE = 32791;
export const MMCN_SNAPINHELP = 32792;
export const MMCN_CONTEXTHELP = 32793;
export const MMCN_INITOCX = 32794;
export const MMCN_FILTER_CHANGE = 32795;
export const MMCN_FILTERBTN_CLICK = 32796;
export const MMCN_RESTORE_VIEW = 32797;
export const MMCN_PRINT = 32798;
export const MMCN_PRELOAD = 32799;
export const MMCN_LISTPAD = 32800;
export const MMCN_EXPANDSYNC = 32801;
export const MMCN_COLUMNS_CHANGED = 32802;
export const MMCN_CANPASTE_OUTOFPROC = 32803;
export const CCT_SCOPE = 32768;
export const CCT_RESULT = 32769;
export const CCT_SNAPIN_MANAGER = 32770;
export const CCT_UNINITIALIZED = 65535;
export const CCM_INSERTIONPOINTID_MASK_SPECIAL = `-65536`;
export const CCM_INSERTIONPOINTID_MASK_SHARED = `-2147483648`;
export const CCM_INSERTIONPOINTID_MASK_CREATE_PRIMARY = 1073741824;
export const CCM_INSERTIONPOINTID_MASK_ADD_PRIMARY = 536870912;
export const CCM_INSERTIONPOINTID_MASK_ADD_3RDPARTY = 268435456;
export const CCM_INSERTIONPOINTID_MASK_RESERVED = 268369920;
export const CCM_INSERTIONPOINTID_MASK_FLAGINDEX = 31;
export const CCM_INSERTIONPOINTID_PRIMARY_TOP = `-1610612736`;
export const CCM_INSERTIONPOINTID_PRIMARY_NEW = `-1610612735`;
export const CCM_INSERTIONPOINTID_PRIMARY_TASK = `-1610612734`;
export const CCM_INSERTIONPOINTID_PRIMARY_VIEW = `-1610612733`;
export const CCM_INSERTIONPOINTID_PRIMARY_HELP = `-1610612732`;
export const CCM_INSERTIONPOINTID_3RDPARTY_NEW = `-1879048191`;
export const CCM_INSERTIONPOINTID_3RDPARTY_TASK = `-1879048190`;
export const CCM_INSERTIONPOINTID_ROOT_MENU = `-2147483648`;
export const CCM_INSERTIONALLOWED_TOP = 1;
export const CCM_INSERTIONALLOWED_NEW = 2;
export const CCM_INSERTIONALLOWED_TASK = 4;
export const CCM_INSERTIONALLOWED_VIEW = 8;
export const CCM_COMMANDID_MASK_RESERVED = 4294901760;
export const CCM_SPECIAL_SEPARATOR = 1;
export const CCM_SPECIAL_SUBMENU = 2;
export const CCM_SPECIAL_DEFAULT_ITEM = 4;
export const CCM_SPECIAL_INSERTION_POINT = 8;
export const CCM_SPECIAL_TESTONLY = 16;
export const MMC_TASK_DISPLAY_UNINITIALIZED = 0;
export const MMC_TASK_DISPLAY_TYPE_SYMBOL = 1;
export const MMC_TASK_DISPLAY_TYPE_VANILLA_GIF = 2;
export const MMC_TASK_DISPLAY_TYPE_CHOCOLATE_GIF = 3;
export const MMC_TASK_DISPLAY_TYPE_BITMAP = 4;
export const MMC_ACTION_UNINITIALIZED = `-1`;
export const MMC_ACTION_ID = 0;
export const MMC_ACTION_LINK = 1;
export const MMC_ACTION_SCRIPT = 2;
export const Icon_None = 0;
export const Icon_Error = 32513;
export const Icon_Question = 32514;
export const Icon_Warning = 32515;
export const Icon_Information = 32516;
export const Icon_First = 32513;
export const Icon_Last = 32516;
export const MMC_VIEW_TYPE_LIST = 0;
export const MMC_VIEW_TYPE_HTML = 1;
export const MMC_VIEW_TYPE_OCX = 2;

// Structs

export type PWSTR = Deno.PointerValue | Uint8Array;

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: bigint | number;
  /** u64 */
  Region: bigint | number;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get Region(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set Alignment(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set Region(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** array */
  X: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.X))), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Com.VARIANT (size: 8)
 */
export interface VARIANT {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofVARIANT = 8;

export function allocVARIANT(data?: Partial<VARIANT>): Uint8Array {
  const buf = new Uint8Array(sizeofVARIANT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class VARIANTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Mmc.MMC_SNAPIN_PROPERTY (size: 24)
 */
export interface MMC_SNAPIN_PROPERTY {
  /** Windows.Win32.Foundation.PWSTR */
  pszPropName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.System.Com.VARIANT */
  varValue: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Mmc.MMC_PROPERTY_ACTION */
  eAction: MMC_PROPERTY_ACTION;
}

export const sizeofMMC_SNAPIN_PROPERTY = 24;

export function allocMMC_SNAPIN_PROPERTY(data?: Partial<MMC_SNAPIN_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofMMC_SNAPIN_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszPropName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszPropName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: pointer
  if (data?.varValue !== undefined) view.setBigUint64(8, data.varValue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.varValue))), true);
  // 0x10: i32
  if (data?.eAction !== undefined) view.setInt32(16, Number(data.eAction), true);
  // 0x14: pad4
  return buf;
}

export class MMC_SNAPIN_PROPERTYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszPropName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get varValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get eAction(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: buffer
  set pszPropName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: pointer
  set varValue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set eAction(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.System.Mmc.MMCBUTTON (size: 32)
 */
export interface MMCBUTTON {
  /** i32 */
  nBitmap: number;
  /** i32 */
  idCommand: number;
  /** u8 */
  fsState: number;
  /** u8 */
  fsType: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpButtonText: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpTooltipText: string | null | Uint8Array | Uint16Array;
}

export const sizeofMMCBUTTON = 32;

export function allocMMCBUTTON(data?: Partial<MMCBUTTON>): Uint8Array {
  const buf = new Uint8Array(sizeofMMCBUTTON);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.nBitmap !== undefined) view.setInt32(0, Number(data.nBitmap), true);
  // 0x04: i32
  if (data?.idCommand !== undefined) view.setInt32(4, Number(data.idCommand), true);
  // 0x08: u8
  if (data?.fsState !== undefined) view.setUint8(8, Number(data.fsState));
  // 0x09: u8
  if (data?.fsType !== undefined) view.setUint8(9, Number(data.fsType));
  // 0x0a: pad6
  // 0x10: buffer
  if (data?.lpButtonText !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpButtonText);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.lpTooltipText !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpTooltipText);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  return buf;
}

export class MMCBUTTONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get nBitmap(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get idCommand(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u8
  get fsState(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get fsType(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x10: buffer
  get lpButtonText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get lpTooltipText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set nBitmap(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set idCommand(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u8
  set fsState(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set fsType(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6

  // 0x10: buffer
  set lpButtonText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set lpTooltipText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }
}

export type BOOL = number;

export type LPARAM = bigint | number;

/**
 * Windows.Win32.System.Mmc.RESULTDATAITEM (size: 56)
 */
export interface RESULTDATAITEM {
  /** u32 */
  mask: number;
  /** Windows.Win32.Foundation.BOOL */
  bScopeItem: boolean;
  /** isize */
  itemID: bigint | number;
  /** i32 */
  nIndex: number;
  /** i32 */
  nCol: number;
  /** Windows.Win32.Foundation.PWSTR */
  str: string | null | Uint8Array | Uint16Array;
  /** i32 */
  nImage: number;
  /** u32 */
  nState: number;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
  /** i32 */
  iIndent: number;
}

export const sizeofRESULTDATAITEM = 56;

export function allocRESULTDATAITEM(data?: Partial<RESULTDATAITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofRESULTDATAITEM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.mask !== undefined) view.setUint32(0, Number(data.mask), true);
  // 0x04: i32
  if (data?.bScopeItem !== undefined) view.setInt32(4, Number(data.bScopeItem), true);
  // 0x08: isize
  if (data?.itemID !== undefined) view.setBigInt64(8, BigInt(data.itemID), true);
  // 0x10: i32
  if (data?.nIndex !== undefined) view.setInt32(16, Number(data.nIndex), true);
  // 0x14: i32
  if (data?.nCol !== undefined) view.setInt32(20, Number(data.nCol), true);
  // 0x18: buffer
  if (data?.str !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.str);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: i32
  if (data?.nImage !== undefined) view.setInt32(32, Number(data.nImage), true);
  // 0x24: u32
  if (data?.nState !== undefined) view.setUint32(36, Number(data.nState), true);
  // 0x28: pointer
  if (data?.lParam !== undefined) view.setBigUint64(40, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  // 0x30: i32
  if (data?.iIndent !== undefined) view.setInt32(48, Number(data.iIndent), true);
  // 0x34: pad4
  return buf;
}

export class RESULTDATAITEMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get mask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get bScopeItem(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: isize
  get itemID(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: i32
  get nIndex(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get nCol(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: buffer
  get str(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get nImage(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: u32
  get nState(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: i32
  get iIndent(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: pad4

  // 0x00: u32
  set mask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set bScopeItem(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: isize
  set itemID(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: i32
  set nIndex(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set nCol(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: buffer
  set str(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: i32
  set nImage(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: u32
  set nState(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: i32
  set iIndent(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.System.Mmc.RESULTFINDINFO (size: 16)
 */
export interface RESULTFINDINFO {
  /** Windows.Win32.Foundation.PWSTR */
  psz: string | null | Uint8Array | Uint16Array;
  /** i32 */
  nStart: number;
  /** u32 */
  dwOptions: number;
}

export const sizeofRESULTFINDINFO = 16;

export function allocRESULTFINDINFO(data?: Partial<RESULTFINDINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRESULTFINDINFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.psz !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.psz);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: i32
  if (data?.nStart !== undefined) view.setInt32(8, Number(data.nStart), true);
  // 0x0c: u32
  if (data?.dwOptions !== undefined) view.setUint32(12, Number(data.dwOptions), true);
  return buf;
}

export class RESULTFINDINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get psz(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get nStart(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get dwOptions(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: buffer
  set psz(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: i32
  set nStart(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set dwOptions(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.System.Mmc.SCOPEDATAITEM (size: 56)
 */
export interface SCOPEDATAITEM {
  /** u32 */
  mask: number;
  /** Windows.Win32.Foundation.PWSTR */
  displayname: string | null | Uint8Array | Uint16Array;
  /** i32 */
  nImage: number;
  /** i32 */
  nOpenImage: number;
  /** u32 */
  nState: number;
  /** i32 */
  cChildren: number;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
  /** isize */
  relativeID: bigint | number;
  /** isize */
  ID: bigint | number;
}

export const sizeofSCOPEDATAITEM = 56;

export function allocSCOPEDATAITEM(data?: Partial<SCOPEDATAITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofSCOPEDATAITEM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.mask !== undefined) view.setUint32(0, Number(data.mask), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.displayname !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.displayname);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: i32
  if (data?.nImage !== undefined) view.setInt32(16, Number(data.nImage), true);
  // 0x14: i32
  if (data?.nOpenImage !== undefined) view.setInt32(20, Number(data.nOpenImage), true);
  // 0x18: u32
  if (data?.nState !== undefined) view.setUint32(24, Number(data.nState), true);
  // 0x1c: i32
  if (data?.cChildren !== undefined) view.setInt32(28, Number(data.cChildren), true);
  // 0x20: pointer
  if (data?.lParam !== undefined) view.setBigUint64(32, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  // 0x28: isize
  if (data?.relativeID !== undefined) view.setBigInt64(40, BigInt(data.relativeID), true);
  // 0x30: isize
  if (data?.ID !== undefined) view.setBigInt64(48, BigInt(data.ID), true);
  return buf;
}

export class SCOPEDATAITEMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get mask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get displayname(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get nImage(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get nOpenImage(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: u32
  get nState(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: i32
  get cChildren(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: isize
  get relativeID(): bigint | number {
    return Number(this.view.getBigInt64(40, true));
  }

  // 0x30: isize
  get ID(): bigint | number {
    return Number(this.view.getBigInt64(48, true));
  }

  // 0x00: u32
  set mask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set displayname(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: i32
  set nImage(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set nOpenImage(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: u32
  set nState(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: i32
  set cChildren(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: isize
  set relativeID(value: bigint | number) {
    this.view.setBigInt64(40, BigInt(value), true);
  }

  // 0x30: isize
  set ID(value: bigint | number) {
    this.view.setBigInt64(48, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Mmc.CONTEXTMENUITEM (size: 32)
 */
export interface CONTEXTMENUITEM {
  /** Windows.Win32.Foundation.PWSTR */
  strName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  strStatusBarText: string | null | Uint8Array | Uint16Array;
  /** i32 */
  lCommandID: number;
  /** i32 */
  lInsertionPointID: number;
  /** i32 */
  fFlags: number;
  /** i32 */
  fSpecialFlags: number;
}

export const sizeofCONTEXTMENUITEM = 32;

export function allocCONTEXTMENUITEM(data?: Partial<CONTEXTMENUITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofCONTEXTMENUITEM);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.strName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.strName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.strStatusBarText !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.strStatusBarText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: i32
  if (data?.lCommandID !== undefined) view.setInt32(16, Number(data.lCommandID), true);
  // 0x14: i32
  if (data?.lInsertionPointID !== undefined) view.setInt32(20, Number(data.lInsertionPointID), true);
  // 0x18: i32
  if (data?.fFlags !== undefined) view.setInt32(24, Number(data.fFlags), true);
  // 0x1c: i32
  if (data?.fSpecialFlags !== undefined) view.setInt32(28, Number(data.fSpecialFlags), true);
  return buf;
}

export class CONTEXTMENUITEMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get strName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get strStatusBarText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get lCommandID(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get lInsertionPointID(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get fFlags(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get fSpecialFlags(): number {
    return this.view.getInt32(28, true);
  }

  // 0x00: buffer
  set strName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set strStatusBarText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: i32
  set lCommandID(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set lInsertionPointID(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set fFlags(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set fSpecialFlags(value: number) {
    this.view.setInt32(28, value, true);
  }
}

/**
 * Windows.Win32.System.Mmc.MENUBUTTONDATA (size: 16)
 */
export interface MENUBUTTONDATA {
  /** i32 */
  idCommand: number;
  /** i32 */
  x: number;
  /** i32 */
  y: number;
}

export const sizeofMENUBUTTONDATA = 16;

export function allocMENUBUTTONDATA(data?: Partial<MENUBUTTONDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofMENUBUTTONDATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.idCommand !== undefined) view.setInt32(0, Number(data.idCommand), true);
  // 0x04: i32
  if (data?.x !== undefined) view.setInt32(4, Number(data.x), true);
  // 0x08: i32
  if (data?.y !== undefined) view.setInt32(8, Number(data.y), true);
  // 0x0c: pad4
  return buf;
}

export class MENUBUTTONDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get idCommand(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get x(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get y(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i32
  set idCommand(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set x(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set y(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Mmc.MMC_FILTERDATA (size: 16)
 */
export interface MMC_FILTERDATA {
  /** Windows.Win32.Foundation.PWSTR */
  pszText: string | null | Uint8Array | Uint16Array;
  /** i32 */
  cchTextMax: number;
  /** i32 */
  lValue: number;
}

export const sizeofMMC_FILTERDATA = 16;

export function allocMMC_FILTERDATA(data?: Partial<MMC_FILTERDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofMMC_FILTERDATA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszText !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszText);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: i32
  if (data?.cchTextMax !== undefined) view.setInt32(8, Number(data.cchTextMax), true);
  // 0x0c: i32
  if (data?.lValue !== undefined) view.setInt32(12, Number(data.lValue), true);
  return buf;
}

export class MMC_FILTERDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get cchTextMax(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get lValue(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: buffer
  set pszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: i32
  set cchTextMax(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set lValue(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.System.Mmc.MMC_RESTORE_VIEW (size: 32)
 */
export interface MMC_RESTORE_VIEW {
  /** u32 */
  dwSize: number;
  /** isize */
  cookie: bigint | number;
  /** Windows.Win32.Foundation.PWSTR */
  pViewType: string | null | Uint8Array | Uint16Array;
  /** i32 */
  lViewOptions: number;
}

export const sizeofMMC_RESTORE_VIEW = 32;

export function allocMMC_RESTORE_VIEW(data?: Partial<MMC_RESTORE_VIEW>): Uint8Array {
  const buf = new Uint8Array(sizeofMMC_RESTORE_VIEW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: isize
  if (data?.cookie !== undefined) view.setBigInt64(8, BigInt(data.cookie), true);
  // 0x10: buffer
  if (data?.pViewType !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pViewType);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: i32
  if (data?.lViewOptions !== undefined) view.setInt32(24, Number(data.lViewOptions), true);
  // 0x1c: pad4
  return buf;
}

export class MMC_RESTORE_VIEWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: isize
  get cookie(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: buffer
  get pViewType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get lViewOptions(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: isize
  set cookie(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: buffer
  set pViewType(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: i32
  set lViewOptions(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.System.Mmc.MMC_EXPANDSYNC_STRUCT (size: 16)
 */
export interface MMC_EXPANDSYNC_STRUCT {
  /** Windows.Win32.Foundation.BOOL */
  bHandled: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bExpanding: boolean;
  /** isize */
  hItem: bigint | number;
}

export const sizeofMMC_EXPANDSYNC_STRUCT = 16;

export function allocMMC_EXPANDSYNC_STRUCT(data?: Partial<MMC_EXPANDSYNC_STRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofMMC_EXPANDSYNC_STRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.bHandled !== undefined) view.setInt32(0, Number(data.bHandled), true);
  // 0x04: i32
  if (data?.bExpanding !== undefined) view.setInt32(4, Number(data.bExpanding), true);
  // 0x08: isize
  if (data?.hItem !== undefined) view.setBigInt64(8, BigInt(data.hItem), true);
  return buf;
}

export class MMC_EXPANDSYNC_STRUCTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get bHandled(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get bExpanding(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: isize
  get hItem(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x00: i32
  set bHandled(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set bExpanding(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: isize
  set hItem(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Mmc.MMC_VISIBLE_COLUMNS (size: 16)
 */
export interface MMC_VISIBLE_COLUMNS {
  /** i32 */
  nVisibleColumns: number;
  /** array */
  rgVisibleCols: Deno.PointerValue;
}

export const sizeofMMC_VISIBLE_COLUMNS = 16;

export function allocMMC_VISIBLE_COLUMNS(data?: Partial<MMC_VISIBLE_COLUMNS>): Uint8Array {
  const buf = new Uint8Array(sizeofMMC_VISIBLE_COLUMNS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.nVisibleColumns !== undefined) view.setInt32(0, Number(data.nVisibleColumns), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgVisibleCols !== undefined) view.setBigUint64(8, data.rgVisibleCols === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgVisibleCols))), true);
  return buf;
}

export class MMC_VISIBLE_COLUMNSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get nVisibleColumns(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgVisibleCols(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set nVisibleColumns(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgVisibleCols(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Mmc.SMMCDataObjects (size: 16)
 */
export interface SMMCDataObjects {
  /** u32 */
  count: number;
  /** array */
  lpDataObject: Deno.PointerValue;
}

export const sizeofSMMCDataObjects = 16;

export function allocSMMCDataObjects(data?: Partial<SMMCDataObjects>): Uint8Array {
  const buf = new Uint8Array(sizeofSMMCDataObjects);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.count !== undefined) view.setUint32(0, Number(data.count), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpDataObject !== undefined) view.setBigUint64(8, data.lpDataObject === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDataObject))), true);
  return buf;
}

export class SMMCDataObjectsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get count(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpDataObject(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set count(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpDataObject(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Mmc.SMMCObjectTypes (size: 16)
 */
export interface SMMCObjectTypes {
  /** u32 */
  count: number;
  /** array */
  guid: Deno.PointerValue;
}

export const sizeofSMMCObjectTypes = 16;

export function allocSMMCObjectTypes(data?: Partial<SMMCObjectTypes>): Uint8Array {
  const buf = new Uint8Array(sizeofSMMCObjectTypes);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.count !== undefined) view.setUint32(0, Number(data.count), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.guid !== undefined) view.setBigUint64(8, data.guid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guid))), true);
  return buf;
}

export class SMMCObjectTypesView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get count(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get guid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set count(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set guid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Mmc.SNodeID (size: 16)
 */
export interface SNodeID {
  /** u32 */
  cBytes: number;
  /** array */
  id: Deno.PointerValue;
}

export const sizeofSNodeID = 16;

export function allocSNodeID(data?: Partial<SNodeID>): Uint8Array {
  const buf = new Uint8Array(sizeofSNodeID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cBytes !== undefined) view.setUint32(0, Number(data.cBytes), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.id !== undefined) view.setBigUint64(8, data.id === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.id))), true);
  return buf;
}

export class SNodeIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cBytes(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get id(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cBytes(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set id(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Mmc.SNodeID2 (size: 16)
 */
export interface SNodeID2 {
  /** u32 */
  dwFlags: number;
  /** u32 */
  cBytes: number;
  /** array */
  id: Deno.PointerValue;
}

export const sizeofSNodeID2 = 16;

export function allocSNodeID2(data?: Partial<SNodeID2>): Uint8Array {
  const buf = new Uint8Array(sizeofSNodeID2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: u32
  if (data?.cBytes !== undefined) view.setUint32(4, Number(data.cBytes), true);
  // 0x08: pointer
  if (data?.id !== undefined) view.setBigUint64(8, data.id === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.id))), true);
  return buf;
}

export class SNodeID2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cBytes(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get id(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cBytes(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set id(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Mmc.SColumnSetID (size: 16)
 */
export interface SColumnSetID {
  /** u32 */
  dwFlags: number;
  /** u32 */
  cBytes: number;
  /** array */
  id: Deno.PointerValue;
}

export const sizeofSColumnSetID = 16;

export function allocSColumnSetID(data?: Partial<SColumnSetID>): Uint8Array {
  const buf = new Uint8Array(sizeofSColumnSetID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: u32
  if (data?.cBytes !== undefined) view.setUint32(4, Number(data.cBytes), true);
  // 0x08: pointer
  if (data?.id !== undefined) view.setBigUint64(8, data.id === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.id))), true);
  return buf;
}

export class SColumnSetIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cBytes(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get id(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cBytes(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set id(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Mmc.MMC_TASK_DISPLAY_SYMBOL (size: 24)
 */
export interface MMC_TASK_DISPLAY_SYMBOL {
  /** Windows.Win32.Foundation.PWSTR */
  szFontFamilyName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  szURLtoEOT: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  szSymbolString: string | null | Uint8Array | Uint16Array;
}

export const sizeofMMC_TASK_DISPLAY_SYMBOL = 24;

export function allocMMC_TASK_DISPLAY_SYMBOL(data?: Partial<MMC_TASK_DISPLAY_SYMBOL>): Uint8Array {
  const buf = new Uint8Array(sizeofMMC_TASK_DISPLAY_SYMBOL);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.szFontFamilyName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.szFontFamilyName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.szURLtoEOT !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.szURLtoEOT);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.szSymbolString !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.szSymbolString);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class MMC_TASK_DISPLAY_SYMBOLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get szFontFamilyName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get szURLtoEOT(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get szSymbolString(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set szFontFamilyName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set szURLtoEOT(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set szSymbolString(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.System.Mmc.MMC_TASK_DISPLAY_BITMAP (size: 16)
 */
export interface MMC_TASK_DISPLAY_BITMAP {
  /** Windows.Win32.Foundation.PWSTR */
  szMouseOverBitmap: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  szMouseOffBitmap: string | null | Uint8Array | Uint16Array;
}

export const sizeofMMC_TASK_DISPLAY_BITMAP = 16;

export function allocMMC_TASK_DISPLAY_BITMAP(data?: Partial<MMC_TASK_DISPLAY_BITMAP>): Uint8Array {
  const buf = new Uint8Array(sizeofMMC_TASK_DISPLAY_BITMAP);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.szMouseOverBitmap !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.szMouseOverBitmap);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.szMouseOffBitmap !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.szMouseOffBitmap);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class MMC_TASK_DISPLAY_BITMAPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get szMouseOverBitmap(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get szMouseOffBitmap(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set szMouseOverBitmap(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set szMouseOffBitmap(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.System.Mmc.MMC_TASK_DISPLAY_OBJECT (size: 16)
 */
export interface MMC_TASK_DISPLAY_OBJECT {
  /** Windows.Win32.System.Mmc.MMC_TASK_DISPLAY_TYPE */
  eDisplayType: MMC_TASK_DISPLAY_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofMMC_TASK_DISPLAY_OBJECT = 16;

export function allocMMC_TASK_DISPLAY_OBJECT(data?: Partial<MMC_TASK_DISPLAY_OBJECT>): Uint8Array {
  const buf = new Uint8Array(sizeofMMC_TASK_DISPLAY_OBJECT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.eDisplayType !== undefined) view.setInt32(0, Number(data.eDisplayType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class MMC_TASK_DISPLAY_OBJECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get eDisplayType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set eDisplayType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Mmc.MMC_TASK (size: 40)
 */
export interface MMC_TASK {
  /** Windows.Win32.System.Mmc.MMC_TASK_DISPLAY_OBJECT */
  sDisplayObject: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  szText: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  szHelpString: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.System.Mmc.MMC_ACTION_TYPE */
  eActionType: MMC_ACTION_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofMMC_TASK = 40;

export function allocMMC_TASK(data?: Partial<MMC_TASK>): Uint8Array {
  const buf = new Uint8Array(sizeofMMC_TASK);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sDisplayObject !== undefined) view.setBigUint64(0, data.sDisplayObject === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sDisplayObject))), true);
  // 0x08: buffer
  if (data?.szText !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.szText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.szHelpString !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.szHelpString);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: i32
  if (data?.eActionType !== undefined) view.setInt32(24, Number(data.eActionType), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(32, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class MMC_TASKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sDisplayObject(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get szText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get szHelpString(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get eActionType(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set sDisplayObject(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set szText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set szHelpString(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: i32
  set eActionType(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Mmc.MMC_LISTPAD_INFO (size: 24)
 */
export interface MMC_LISTPAD_INFO {
  /** Windows.Win32.Foundation.PWSTR */
  szTitle: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  szButtonText: string | null | Uint8Array | Uint16Array;
  /** isize */
  nCommandID: bigint | number;
}

export const sizeofMMC_LISTPAD_INFO = 24;

export function allocMMC_LISTPAD_INFO(data?: Partial<MMC_LISTPAD_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMMC_LISTPAD_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.szTitle !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.szTitle);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.szButtonText !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.szButtonText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: isize
  if (data?.nCommandID !== undefined) view.setBigInt64(16, BigInt(data.nCommandID), true);
  return buf;
}

export class MMC_LISTPAD_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get szTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get szButtonText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: isize
  get nCommandID(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x00: buffer
  set szTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set szButtonText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: isize
  set nCommandID(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Mmc.MMC_COLUMN_DATA (size: 24)
 */
export interface MMC_COLUMN_DATA {
  /** i32 */
  nColIndex: number;
  /** u32 */
  dwFlags: number;
  /** i32 */
  nWidth: number;
  /** usize */
  ulReserved: bigint | number;
}

export const sizeofMMC_COLUMN_DATA = 24;

export function allocMMC_COLUMN_DATA(data?: Partial<MMC_COLUMN_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofMMC_COLUMN_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.nColIndex !== undefined) view.setInt32(0, Number(data.nColIndex), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: i32
  if (data?.nWidth !== undefined) view.setInt32(8, Number(data.nWidth), true);
  // 0x0c: pad4
  // 0x10: usize
  if (data?.ulReserved !== undefined) view.setBigUint64(16, BigInt(data.ulReserved), true);
  return buf;
}

export class MMC_COLUMN_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get nColIndex(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get nWidth(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: usize
  get ulReserved(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x00: i32
  set nColIndex(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set nWidth(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: usize
  set ulReserved(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Mmc.MMC_COLUMN_SET_DATA (size: 16)
 */
export interface MMC_COLUMN_SET_DATA {
  /** i32 */
  cbSize: number;
  /** i32 */
  nNumCols: number;
  /** ptr */
  pColData: Deno.PointerValue | Uint8Array;
}

export const sizeofMMC_COLUMN_SET_DATA = 16;

export function allocMMC_COLUMN_SET_DATA(data?: Partial<MMC_COLUMN_SET_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofMMC_COLUMN_SET_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cbSize !== undefined) view.setInt32(0, Number(data.cbSize), true);
  // 0x04: i32
  if (data?.nNumCols !== undefined) view.setInt32(4, Number(data.nNumCols), true);
  // 0x08: pointer
  if (data?.pColData !== undefined) view.setBigUint64(8, data.pColData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pColData))), true);
  return buf;
}

export class MMC_COLUMN_SET_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get cbSize(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get nNumCols(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get pColData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set cbSize(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set nNumCols(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set pColData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Mmc.MMC_SORT_DATA (size: 16)
 */
export interface MMC_SORT_DATA {
  /** i32 */
  nColIndex: number;
  /** u32 */
  dwSortOptions: number;
  /** usize */
  ulReserved: bigint | number;
}

export const sizeofMMC_SORT_DATA = 16;

export function allocMMC_SORT_DATA(data?: Partial<MMC_SORT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofMMC_SORT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.nColIndex !== undefined) view.setInt32(0, Number(data.nColIndex), true);
  // 0x04: u32
  if (data?.dwSortOptions !== undefined) view.setUint32(4, Number(data.dwSortOptions), true);
  // 0x08: usize
  if (data?.ulReserved !== undefined) view.setBigUint64(8, BigInt(data.ulReserved), true);
  return buf;
}

export class MMC_SORT_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get nColIndex(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get dwSortOptions(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: usize
  get ulReserved(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: i32
  set nColIndex(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set dwSortOptions(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: usize
  set ulReserved(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Mmc.MMC_SORT_SET_DATA (size: 16)
 */
export interface MMC_SORT_SET_DATA {
  /** i32 */
  cbSize: number;
  /** i32 */
  nNumItems: number;
  /** ptr */
  pSortData: Deno.PointerValue | Uint8Array;
}

export const sizeofMMC_SORT_SET_DATA = 16;

export function allocMMC_SORT_SET_DATA(data?: Partial<MMC_SORT_SET_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofMMC_SORT_SET_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cbSize !== undefined) view.setInt32(0, Number(data.cbSize), true);
  // 0x04: i32
  if (data?.nNumItems !== undefined) view.setInt32(4, Number(data.nNumItems), true);
  // 0x08: pointer
  if (data?.pSortData !== undefined) view.setBigUint64(8, data.pSortData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pSortData))), true);
  return buf;
}

export class MMC_SORT_SET_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get cbSize(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get nNumItems(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get pSortData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set cbSize(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set nNumItems(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set pSortData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Mmc.RDITEMHDR (size: 24)
 */
export interface RDITEMHDR {
  /** u32 */
  dwFlags: number;
  /** isize */
  cookie: bigint | number;
  /** Windows.Win32.Foundation.LPARAM */
  lpReserved: Uint8Array | Deno.PointerValue;
}

export const sizeofRDITEMHDR = 24;

export function allocRDITEMHDR(data?: Partial<RDITEMHDR>): Uint8Array {
  const buf = new Uint8Array(sizeofRDITEMHDR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: isize
  if (data?.cookie !== undefined) view.setBigInt64(8, BigInt(data.cookie), true);
  // 0x10: pointer
  if (data?.lpReserved !== undefined) view.setBigUint64(16, data.lpReserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpReserved))), true);
  return buf;
}

export class RDITEMHDRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: isize
  get cookie(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: pointer
  get lpReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: isize
  set cookie(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set lpReserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Mmc.RDCOMPARE (size: 40)
 */
export interface RDCOMPARE {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwFlags: number;
  /** i32 */
  nColumn: number;
  /** Windows.Win32.Foundation.LPARAM */
  lUserParam: Uint8Array | Deno.PointerValue;
  /** ptr */
  prdch1: Deno.PointerValue | Uint8Array;
  /** ptr */
  prdch2: Deno.PointerValue | Uint8Array;
}

export const sizeofRDCOMPARE = 40;

export function allocRDCOMPARE(data?: Partial<RDCOMPARE>): Uint8Array {
  const buf = new Uint8Array(sizeofRDCOMPARE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: i32
  if (data?.nColumn !== undefined) view.setInt32(8, Number(data.nColumn), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.lUserParam !== undefined) view.setBigUint64(16, data.lUserParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lUserParam))), true);
  // 0x18: pointer
  if (data?.prdch1 !== undefined) view.setBigUint64(24, data.prdch1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.prdch1))), true);
  // 0x20: pointer
  if (data?.prdch2 !== undefined) view.setBigUint64(32, data.prdch2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.prdch2))), true);
  return buf;
}

export class RDCOMPAREView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get nColumn(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get lUserParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get prdch1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get prdch2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set nColumn(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set lUserParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set prdch1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set prdch2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Mmc.RESULT_VIEW_TYPE_INFO (size: 24)
 */
export interface RESULT_VIEW_TYPE_INFO {
  /** Windows.Win32.Foundation.PWSTR */
  pstrPersistableViewDescription: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.System.Mmc.MMC_VIEW_TYPE */
  eViewType: MMC_VIEW_TYPE;
  /** u32 */
  dwMiscOptions: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofRESULT_VIEW_TYPE_INFO = 24;

export function allocRESULT_VIEW_TYPE_INFO(data?: Partial<RESULT_VIEW_TYPE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRESULT_VIEW_TYPE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pstrPersistableViewDescription !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pstrPersistableViewDescription);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: i32
  if (data?.eViewType !== undefined) view.setInt32(8, Number(data.eViewType), true);
  // 0x0c: u32
  if (data?.dwMiscOptions !== undefined) view.setUint32(12, Number(data.dwMiscOptions), true);
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class RESULT_VIEW_TYPE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pstrPersistableViewDescription(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get eViewType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get dwMiscOptions(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pstrPersistableViewDescription(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: i32
  set eViewType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set dwMiscOptions(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Mmc.CONTEXTMENUITEM2 (size: 40)
 */
export interface CONTEXTMENUITEM2 {
  /** Windows.Win32.Foundation.PWSTR */
  strName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  strStatusBarText: string | null | Uint8Array | Uint16Array;
  /** i32 */
  lCommandID: number;
  /** i32 */
  lInsertionPointID: number;
  /** i32 */
  fFlags: number;
  /** i32 */
  fSpecialFlags: number;
  /** Windows.Win32.Foundation.PWSTR */
  strLanguageIndependentName: string | null | Uint8Array | Uint16Array;
}

export const sizeofCONTEXTMENUITEM2 = 40;

export function allocCONTEXTMENUITEM2(data?: Partial<CONTEXTMENUITEM2>): Uint8Array {
  const buf = new Uint8Array(sizeofCONTEXTMENUITEM2);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.strName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.strName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.strStatusBarText !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.strStatusBarText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: i32
  if (data?.lCommandID !== undefined) view.setInt32(16, Number(data.lCommandID), true);
  // 0x14: i32
  if (data?.lInsertionPointID !== undefined) view.setInt32(20, Number(data.lInsertionPointID), true);
  // 0x18: i32
  if (data?.fFlags !== undefined) view.setInt32(24, Number(data.fFlags), true);
  // 0x1c: i32
  if (data?.fSpecialFlags !== undefined) view.setInt32(28, Number(data.fSpecialFlags), true);
  // 0x20: buffer
  if (data?.strLanguageIndependentName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.strLanguageIndependentName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  return buf;
}

export class CONTEXTMENUITEM2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get strName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get strStatusBarText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get lCommandID(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get lInsertionPointID(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get fFlags(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get fSpecialFlags(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: buffer
  get strLanguageIndependentName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set strName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set strStatusBarText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: i32
  set lCommandID(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set lInsertionPointID(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set fFlags(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set fSpecialFlags(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: buffer
  set strLanguageIndependentName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }
}

/**
 * Windows.Win32.System.Mmc.MMC_EXT_VIEW_DATA (size: 40)
 */
export interface MMC_EXT_VIEW_DATA {
  /** System.Guid */
  viewID: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pszURL: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszViewTitle: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszTooltipText: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.BOOL */
  bReplacesDefaultView: boolean;
}

export const sizeofMMC_EXT_VIEW_DATA = 40;

export function allocMMC_EXT_VIEW_DATA(data?: Partial<MMC_EXT_VIEW_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofMMC_EXT_VIEW_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.viewID !== undefined) view.setBigUint64(0, data.viewID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.viewID))), true);
  // 0x08: buffer
  if (data?.pszURL !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszURL);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pszViewTitle !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszViewTitle);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pszTooltipText !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszTooltipText);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: i32
  if (data?.bReplacesDefaultView !== undefined) view.setInt32(32, Number(data.bReplacesDefaultView), true);
  // 0x24: pad4
  return buf;
}

export class MMC_EXT_VIEW_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get viewID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pszURL(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pszViewTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pszTooltipText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get bReplacesDefaultView(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x00: pointer
  set viewID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set pszURL(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pszViewTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pszTooltipText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: i32
  set bReplacesDefaultView(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4
}

// Native Libraries

// Symbols

