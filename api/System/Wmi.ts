/// Auto-generated by Deno Win32: Windows.Win32.System.Wmi.Apis

import * as util from "../../util.ts";

// Enums
export type MI_Result = number;
export type MI_ErrorCategory = number;
export type MI_PromptType = number;
export type MI_CallbackMode = number;
export type MI_ProviderArchitecture = number;
export type MI_Type = number;
export type RIP_INFO_TYPE = number;
export type MI_LocaleType = number;
export type MI_CancellationReason = number;
export type MI_OperationCallback_ResponseType = number;
export type MI_SubscriptionDeliveryType = number;
export type MI_DestinationOptions_ImpersonationType = number;
export type WBEM_PATH_STATUS_FLAG = number;
export type WBEM_PATH_CREATE_FLAG = number;
export type WBEM_GET_TEXT_FLAGS = number;
export type WBEM_GET_KEY_FLAGS = number;
export type WMIQ_ANALYSIS_TYPE = number;
export type WMIQ_RPN_TOKEN_FLAGS = number;
export type WMIQ_ASSOCQ_FLAGS = number;
export type WMIQ_LANGUAGE_FEATURES = number;
export type WMIQ_RPNF_FEATURE = number;
export type WBEM_GENUS_TYPE = number;
export type WBEM_CHANGE_FLAG_TYPE = number;
export type WBEM_GENERIC_FLAG_TYPE = number;
export type WBEM_STATUS_TYPE = number;
export type WBEM_CONDITION_FLAG_TYPE = number;
export type WBEM_FLAVOR_TYPE = number;
export type WBEM_QUERY_FLAG_TYPE = number;
export type WBEM_SECURITY_FLAGS = number;
export type WBEM_LIMITATION_FLAG_TYPE = number;
export type WBEM_TEXT_FLAG_TYPE = number;
export type WBEM_COMPARISON_FLAG = number;
export type WBEM_LOCKING_FLAG_TYPE = number;
export type CIMTYPE_ENUMERATION = number;
export type WBEM_BACKUP_RESTORE_FLAGS = number;
export type WBEM_REFRESHER_FLAGS = number;
export type WBEM_SHUTDOWN_FLAGS = number;
export type WBEMSTATUS_FORMAT = number;
export type WBEM_LIMITS = number;
export type WBEMSTATUS = number;
export type WMI_OBJ_TEXT = number;
export type WBEM_COMPILER_OPTIONS = number;
export type WBEM_CONNECT_OPTIONS = number;
export type WBEM_UNSECAPP_FLAG_TYPE = number;
export type WBEM_INFORMATION_FLAG_TYPE = number;
export type WBEM_PROVIDER_REQUIREMENTS_TYPE = number;
export type WBEM_EXTRA_RETURN_CODES = number;
export type WBEM_PROVIDER_FLAGS = number;
export type WBEM_BATCH_TYPE = number;
export type WbemChangeFlagEnum = number;
export type WbemFlagEnum = number;
export type WbemQueryFlagEnum = number;
export type WbemTextFlagEnum = number;
export type WbemTimeout = number;
export type WbemComparisonFlagEnum = number;
export type WbemCimtypeEnum = number;
export type WbemErrorEnum = number;
export type WbemAuthenticationLevelEnum = number;
export type WbemImpersonationLevelEnum = number;
export type WbemPrivilegeEnum = number;
export type WbemObjectTextFormatEnum = number;
export type WbemConnectOptionsEnum = number;
export type WBEM_LOGIN_TYPE = number;

// Constants
export const MI_FLAG_ANY = 127;
export const MI_FLAG_VERSION = 469762048;
export const MI_FLAG_ADOPT = 2147483648;
export const MI_CHAR_TYPE = 2;
export const MI_FLAG_CLASS = 1;
export const MI_FLAG_METHOD = 2;
export const MI_FLAG_PROPERTY = 4;
export const MI_FLAG_PARAMETER = 8;
export const MI_FLAG_ASSOCIATION = 16;
export const MI_FLAG_INDICATION = 32;
export const MI_FLAG_REFERENCE = 64;
export const MI_FLAG_ENABLEOVERRIDE = 128;
export const MI_FLAG_DISABLEOVERRIDE = 256;
export const MI_FLAG_RESTRICTED = 512;
export const MI_FLAG_TOSUBCLASS = 1024;
export const MI_FLAG_TRANSLATABLE = 2048;
export const MI_FLAG_KEY = 4096;
export const MI_FLAG_IN = 8192;
export const MI_FLAG_OUT = 16384;
export const MI_FLAG_REQUIRED = 32768;
export const MI_FLAG_STATIC = 65536;
export const MI_FLAG_ABSTRACT = 131072;
export const MI_FLAG_TERMINAL = 262144;
export const MI_FLAG_EXPENSIVE = 524288;
export const MI_FLAG_STREAM = 1048576;
export const MI_FLAG_READONLY = 2097152;
export const MI_FLAG_EXTENDED = 4096;
export const MI_FLAG_NOT_MODIFIED = 33554432;
export const MI_FLAG_NULL = 536870912;
export const MI_FLAG_BORROW = 1073741824;
export const MI_MODULE_FLAG_STANDARD_QUALIFIERS = 1;
export const MI_MODULE_FLAG_DESCRIPTIONS = 2;
export const MI_MODULE_FLAG_VALUES = 4;
export const MI_MODULE_FLAG_MAPPING_STRINGS = 8;
export const MI_MODULE_FLAG_BOOLEANS = 16;
export const MI_MODULE_FLAG_CPLUSPLUS = 32;
export const MI_MODULE_FLAG_LOCALIZED = 64;
export const MI_MODULE_FLAG_FILTER_SUPPORT = 128;
export const MI_MAX_LOCALE_SIZE = 128;
export const MI_WRITEMESSAGE_CHANNEL_WARNING = 0;
export const MI_WRITEMESSAGE_CHANNEL_VERBOSE = 1;
export const MI_WRITEMESSAGE_CHANNEL_DEBUG = 2;
export const MI_CALL_VERSION = 1;
export const MI_OPERATIONFLAGS_MANUAL_ACK_RESULTS = 1;
export const MI_OPERATIONFLAGS_NO_RTTI = 1024;
export const MI_OPERATIONFLAGS_BASIC_RTTI = 2;
export const MI_OPERATIONFLAGS_STANDARD_RTTI = 2048;
export const MI_OPERATIONFLAGS_FULL_RTTI = 4;
export const MI_OPERATIONFLAGS_DEFAULT_RTTI = 0;
export const MI_OPERATIONFLAGS_LOCALIZED_QUALIFIERS = 8;
export const MI_OPERATIONFLAGS_EXPENSIVE_PROPERTIES = 64;
export const MI_OPERATIONFLAGS_POLYMORPHISM_SHALLOW = 128;
export const MI_OPERATIONFLAGS_POLYMORPHISM_DEEP_BASE_PROPS_ONLY = 384;
export const MI_OPERATIONFLAGS_REPORT_OPERATION_STARTED = 512;
export const MI_SUBSCRIBE_BOOKMARK_OLDEST = `MI_SUBSCRIBE_BOOKMARK_OLDEST`;
export const MI_SUBSCRIBE_BOOKMARK_NEWEST = `MI_SUBSCRIBE_BOOKMARK_NEWEST`;
export const MI_SERIALIZER_FLAGS_CLASS_DEEP = 1;
export const MI_SERIALIZER_FLAGS_INSTANCE_WITH_CLASS = 1;
export const WBEMS_DISPID_DERIVATION = 23;
export const WBEMS_DISPID_OBJECT_READY = 1;
export const WBEMS_DISPID_COMPLETED = 2;
export const WBEMS_DISPID_PROGRESS = 3;
export const WBEMS_DISPID_OBJECT_PUT = 4;
export const WBEMS_DISPID_CONNECTION_READY = 5;
export const WBEM_NO_WAIT = 0;
export const WBEM_INFINITE = `-1`;
export const MI_RESULT_OK = 0;
export const MI_RESULT_FAILED = 1;
export const MI_RESULT_ACCESS_DENIED = 2;
export const MI_RESULT_INVALID_NAMESPACE = 3;
export const MI_RESULT_INVALID_PARAMETER = 4;
export const MI_RESULT_INVALID_CLASS = 5;
export const MI_RESULT_NOT_FOUND = 6;
export const MI_RESULT_NOT_SUPPORTED = 7;
export const MI_RESULT_CLASS_HAS_CHILDREN = 8;
export const MI_RESULT_CLASS_HAS_INSTANCES = 9;
export const MI_RESULT_INVALID_SUPERCLASS = 10;
export const MI_RESULT_ALREADY_EXISTS = 11;
export const MI_RESULT_NO_SUCH_PROPERTY = 12;
export const MI_RESULT_TYPE_MISMATCH = 13;
export const MI_RESULT_QUERY_LANGUAGE_NOT_SUPPORTED = 14;
export const MI_RESULT_INVALID_QUERY = 15;
export const MI_RESULT_METHOD_NOT_AVAILABLE = 16;
export const MI_RESULT_METHOD_NOT_FOUND = 17;
export const MI_RESULT_NAMESPACE_NOT_EMPTY = 20;
export const MI_RESULT_INVALID_ENUMERATION_CONTEXT = 21;
export const MI_RESULT_INVALID_OPERATION_TIMEOUT = 22;
export const MI_RESULT_PULL_HAS_BEEN_ABANDONED = 23;
export const MI_RESULT_PULL_CANNOT_BE_ABANDONED = 24;
export const MI_RESULT_FILTERED_ENUMERATION_NOT_SUPPORTED = 25;
export const MI_RESULT_CONTINUATION_ON_ERROR_NOT_SUPPORTED = 26;
export const MI_RESULT_SERVER_LIMITS_EXCEEDED = 27;
export const MI_RESULT_SERVER_IS_SHUTTING_DOWN = 28;
export const MI_ERRORCATEGORY_NOT_SPECIFIED = 0;
export const MI_ERRORCATEGORY_OPEN_ERROR = 1;
export const MI_ERRORCATEGORY_CLOS_EERROR = 2;
export const MI_ERRORCATEGORY_DEVICE_ERROR = 3;
export const MI_ERRORCATEGORY_DEADLOCK_DETECTED = 4;
export const MI_ERRORCATEGORY_INVALID_ARGUMENT = 5;
export const MI_ERRORCATEGORY_INVALID_DATA = 6;
export const MI_ERRORCATEGORY_INVALID_OPERATION = 7;
export const MI_ERRORCATEGORY_INVALID_RESULT = 8;
export const MI_ERRORCATEGORY_INVALID_TYPE = 9;
export const MI_ERRORCATEGORY_METADATA_ERROR = 10;
export const MI_ERRORCATEGORY_NOT_IMPLEMENTED = 11;
export const MI_ERRORCATEGORY_NOT_INSTALLED = 12;
export const MI_ERRORCATEGORY_OBJECT_NOT_FOUND = 13;
export const MI_ERRORCATEGORY_OPERATION_STOPPED = 14;
export const MI_ERRORCATEGORY_OPERATION_TIMEOUT = 15;
export const MI_ERRORCATEGORY_SYNTAX_ERROR = 16;
export const MI_ERRORCATEGORY_PARSER_ERROR = 17;
export const MI_ERRORCATEGORY_ACCESS_DENIED = 18;
export const MI_ERRORCATEGORY_RESOURCE_BUSY = 19;
export const MI_ERRORCATEGORY_RESOURCE_EXISTS = 20;
export const MI_ERRORCATEGORY_RESOURCE_UNAVAILABLE = 21;
export const MI_ERRORCATEGORY_READ_ERROR = 22;
export const MI_ERRORCATEGORY_WRITE_ERROR = 23;
export const MI_ERRORCATEGORY_FROM_STDERR = 24;
export const MI_ERRORCATEGORY_SECURITY_ERROR = 25;
export const MI_ERRORCATEGORY_PROTOCOL_ERROR = 26;
export const MI_ERRORCATEGORY_CONNECTION_ERROR = 27;
export const MI_ERRORCATEGORY_AUTHENTICATION_ERROR = 28;
export const MI_ERRORCATEGORY_LIMITS_EXCEEDED = 29;
export const MI_ERRORCATEGORY_QUOTA_EXCEEDED = 30;
export const MI_ERRORCATEGORY_NOT_ENABLED = 31;
export const MI_PROMPTTYPE_NORMAL = 0;
export const MI_PROMPTTYPE_CRITICAL = 1;
export const MI_CALLBACKMODE_REPORT = 0;
export const MI_CALLBACKMODE_INQUIRE = 1;
export const MI_CALLBACKMODE_IGNORE = 2;
export const MI_PROVIDER_ARCHITECTURE_32BIT = 0;
export const MI_PROVIDER_ARCHITECTURE_64BIT = 1;
export const MI_BOOLEAN = 0;
export const MI_UINT8 = 1;
export const MI_SINT8 = 2;
export const MI_UINT16 = 3;
export const MI_SINT16 = 4;
export const MI_UINT32 = 5;
export const MI_SINT32 = 6;
export const MI_UINT64 = 7;
export const MI_SINT64 = 8;
export const MI_REAL32 = 9;
export const MI_REAL64 = 10;
export const MI_CHAR16 = 11;
export const MI_DATETIME = 12;
export const MI_STRING = 13;
export const MI_REFERENCE = 14;
export const MI_INSTANCE = 15;
export const MI_BOOLEANA = 16;
export const MI_UINT8A = 17;
export const MI_SINT8A = 18;
export const MI_UINT16A = 19;
export const MI_SINT16A = 20;
export const MI_UINT32A = 21;
export const MI_SINT32A = 22;
export const MI_UINT64A = 23;
export const MI_SINT64A = 24;
export const MI_REAL32A = 25;
export const MI_REAL64A = 26;
export const MI_CHAR16A = 27;
export const MI_DATETIMEA = 28;
export const MI_STRINGA = 29;
export const MI_REFERENCEA = 30;
export const MI_INSTANCEA = 31;
export const MI_ARRAY = 16;
export const SLE_ERROR = 1;
export const SLE_MINORERROR = 2;
export const SLE_WARNING = 3;
export const MI_LOCALE_TYPE_REQUESTED_UI = 0;
export const MI_LOCALE_TYPE_REQUESTED_DATA = 1;
export const MI_LOCALE_TYPE_CLOSEST_UI = 2;
export const MI_LOCALE_TYPE_CLOSEST_DATA = 3;
export const MI_REASON_NONE = 0;
export const MI_REASON_TIMEOUT = 1;
export const MI_REASON_SHUTDOWN = 2;
export const MI_REASON_SERVICESTOP = 3;
export const MI_OperationCallback_ResponseType_No = 0;
export const MI_OperationCallback_ResponseType_Yes = 1;
export const MI_OperationCallback_ResponseType_NoToAll = 2;
export const MI_OperationCallback_ResponseType_YesToAll = 3;
export const MI_SubscriptionDeliveryType_Pull = 1;
export const MI_SubscriptionDeliveryType_Push = 2;
export const MI_DestinationOptions_ImpersonationType_Default = 0;
export const MI_DestinationOptions_ImpersonationType_None = 1;
export const MI_DestinationOptions_ImpersonationType_Identify = 2;
export const MI_DestinationOptions_ImpersonationType_Impersonate = 3;
export const MI_DestinationOptions_ImpersonationType_Delegate = 4;
export const WBEMPATH_INFO_ANON_LOCAL_MACHINE = 1;
export const WBEMPATH_INFO_HAS_MACHINE_NAME = 2;
export const WBEMPATH_INFO_IS_CLASS_REF = 4;
export const WBEMPATH_INFO_IS_INST_REF = 8;
export const WBEMPATH_INFO_HAS_SUBSCOPES = 16;
export const WBEMPATH_INFO_IS_COMPOUND = 32;
export const WBEMPATH_INFO_HAS_V2_REF_PATHS = 64;
export const WBEMPATH_INFO_HAS_IMPLIED_KEY = 128;
export const WBEMPATH_INFO_CONTAINS_SINGLETON = 256;
export const WBEMPATH_INFO_V1_COMPLIANT = 512;
export const WBEMPATH_INFO_V2_COMPLIANT = 1024;
export const WBEMPATH_INFO_CIM_COMPLIANT = 2048;
export const WBEMPATH_INFO_IS_SINGLETON = 4096;
export const WBEMPATH_INFO_IS_PARENT = 8192;
export const WBEMPATH_INFO_SERVER_NAMESPACE_ONLY = 16384;
export const WBEMPATH_INFO_NATIVE_PATH = 32768;
export const WBEMPATH_INFO_WMI_PATH = 65536;
export const WBEMPATH_INFO_PATH_HAD_SERVER = 131072;
export const WBEMPATH_CREATE_ACCEPT_RELATIVE = 1;
export const WBEMPATH_CREATE_ACCEPT_ABSOLUTE = 2;
export const WBEMPATH_CREATE_ACCEPT_ALL = 4;
export const WBEMPATH_TREAT_SINGLE_IDENT_AS_NS = 8;
export const WBEMPATH_COMPRESSED = 1;
export const WBEMPATH_GET_RELATIVE_ONLY = 2;
export const WBEMPATH_GET_SERVER_TOO = 4;
export const WBEMPATH_GET_SERVER_AND_NAMESPACE_ONLY = 8;
export const WBEMPATH_GET_NAMESPACE_ONLY = 16;
export const WBEMPATH_GET_ORIGINAL = 32;
export const WBEMPATH_TEXT = 1;
export const WBEMPATH_QUOTEDTEXT = 2;
export const WMIQ_ANALYSIS_RPN_SEQUENCE = 1;
export const WMIQ_ANALYSIS_ASSOC_QUERY = 2;
export const WMIQ_ANALYSIS_PROP_ANALYSIS_MATRIX = 3;
export const WMIQ_ANALYSIS_QUERY_TEXT = 4;
export const WMIQ_ANALYSIS_RESERVED = 134217728;
export const WMIQ_RPN_TOKEN_EXPRESSION = 1;
export const WMIQ_RPN_TOKEN_AND = 2;
export const WMIQ_RPN_TOKEN_OR = 3;
export const WMIQ_RPN_TOKEN_NOT = 4;
export const WMIQ_RPN_OP_UNDEFINED = 0;
export const WMIQ_RPN_OP_EQ = 1;
export const WMIQ_RPN_OP_NE = 2;
export const WMIQ_RPN_OP_GE = 3;
export const WMIQ_RPN_OP_LE = 4;
export const WMIQ_RPN_OP_LT = 5;
export const WMIQ_RPN_OP_GT = 6;
export const WMIQ_RPN_OP_LIKE = 7;
export const WMIQ_RPN_OP_ISA = 8;
export const WMIQ_RPN_OP_ISNOTA = 9;
export const WMIQ_RPN_OP_ISNULL = 10;
export const WMIQ_RPN_OP_ISNOTNULL = 11;
export const WMIQ_RPN_LEFT_PROPERTY_NAME = 1;
export const WMIQ_RPN_RIGHT_PROPERTY_NAME = 2;
export const WMIQ_RPN_CONST2 = 4;
export const WMIQ_RPN_CONST = 8;
export const WMIQ_RPN_RELOP = 16;
export const WMIQ_RPN_LEFT_FUNCTION = 32;
export const WMIQ_RPN_RIGHT_FUNCTION = 64;
export const WMIQ_RPN_GET_TOKEN_TYPE = 1;
export const WMIQ_RPN_GET_EXPR_SHAPE = 2;
export const WMIQ_RPN_GET_LEFT_FUNCTION = 3;
export const WMIQ_RPN_GET_RIGHT_FUNCTION = 4;
export const WMIQ_RPN_GET_RELOP = 5;
export const WMIQ_RPN_NEXT_TOKEN = 1;
export const WMIQ_RPN_FROM_UNARY = 1;
export const WMIQ_RPN_FROM_PATH = 2;
export const WMIQ_RPN_FROM_CLASS_LIST = 4;
export const WMIQ_RPN_FROM_MULTIPLE = 8;
export const WMIQ_ASSOCQ_ASSOCIATORS = 1;
export const WMIQ_ASSOCQ_REFERENCES = 2;
export const WMIQ_ASSOCQ_RESULTCLASS = 4;
export const WMIQ_ASSOCQ_ASSOCCLASS = 8;
export const WMIQ_ASSOCQ_ROLE = 16;
export const WMIQ_ASSOCQ_RESULTROLE = 32;
export const WMIQ_ASSOCQ_REQUIREDQUALIFIER = 64;
export const WMIQ_ASSOCQ_REQUIREDASSOCQUALIFIER = 128;
export const WMIQ_ASSOCQ_CLASSDEFSONLY = 256;
export const WMIQ_ASSOCQ_KEYSONLY = 512;
export const WMIQ_ASSOCQ_SCHEMAONLY = 1024;
export const WMIQ_ASSOCQ_CLASSREFSONLY = 2048;
export const WMIQ_LF1_BASIC_SELECT = 1;
export const WMIQ_LF2_CLASS_NAME_IN_QUERY = 2;
export const WMIQ_LF3_STRING_CASE_FUNCTIONS = 3;
export const WMIQ_LF4_PROP_TO_PROP_TESTS = 4;
export const WMIQ_LF5_COUNT_STAR = 5;
export const WMIQ_LF6_ORDER_BY = 6;
export const WMIQ_LF7_DISTINCT = 7;
export const WMIQ_LF8_ISA = 8;
export const WMIQ_LF9_THIS = 9;
export const WMIQ_LF10_COMPEX_SUBEXPRESSIONS = 10;
export const WMIQ_LF11_ALIASING = 11;
export const WMIQ_LF12_GROUP_BY_HAVING = 12;
export const WMIQ_LF13_WMI_WITHIN = 13;
export const WMIQ_LF14_SQL_WRITE_OPERATIONS = 14;
export const WMIQ_LF15_GO = 15;
export const WMIQ_LF16_SINGLE_LEVEL_TRANSACTIONS = 16;
export const WMIQ_LF17_QUALIFIED_NAMES = 17;
export const WMIQ_LF18_ASSOCIATONS = 18;
export const WMIQ_LF19_SYSTEM_PROPERTIES = 19;
export const WMIQ_LF20_EXTENDED_SYSTEM_PROPERTIES = 20;
export const WMIQ_LF21_SQL89_JOINS = 21;
export const WMIQ_LF22_SQL92_JOINS = 22;
export const WMIQ_LF23_SUBSELECTS = 23;
export const WMIQ_LF24_UMI_EXTENSIONS = 24;
export const WMIQ_LF25_DATEPART = 25;
export const WMIQ_LF26_LIKE = 26;
export const WMIQ_LF27_CIM_TEMPORAL_CONSTRUCTS = 27;
export const WMIQ_LF28_STANDARD_AGGREGATES = 28;
export const WMIQ_LF29_MULTI_LEVEL_ORDER_BY = 29;
export const WMIQ_LF30_WMI_PRAGMAS = 30;
export const WMIQ_LF31_QUALIFIER_TESTS = 31;
export const WMIQ_LF32_SP_EXECUTE = 32;
export const WMIQ_LF33_ARRAY_ACCESS = 33;
export const WMIQ_LF34_UNION = 34;
export const WMIQ_LF35_COMPLEX_SELECT_TARGET = 35;
export const WMIQ_LF36_REFERENCE_TESTS = 36;
export const WMIQ_LF37_SELECT_INTO = 37;
export const WMIQ_LF38_BASIC_DATETIME_TESTS = 38;
export const WMIQ_LF39_COUNT_COLUMN = 39;
export const WMIQ_LF40_BETWEEN = 40;
export const WMIQ_LF_LAST = 40;
export const WMIQ_RPNF_WHERE_CLAUSE_PRESENT = 1;
export const WMIQ_RPNF_QUERY_IS_CONJUNCTIVE = 2;
export const WMIQ_RPNF_QUERY_IS_DISJUNCTIVE = 4;
export const WMIQ_RPNF_PROJECTION = 8;
export const WMIQ_RPNF_FEATURE_SELECT_STAR = 16;
export const WMIQ_RPNF_EQUALITY_TESTS_ONLY = 32;
export const WMIQ_RPNF_COUNT_STAR = 64;
export const WMIQ_RPNF_QUALIFIED_NAMES_USED = 128;
export const WMIQ_RPNF_SYSPROP_CLASS_USED = 256;
export const WMIQ_RPNF_PROP_TO_PROP_TESTS = 512;
export const WMIQ_RPNF_ORDER_BY = 1024;
export const WMIQ_RPNF_ISA_USED = 2048;
export const WMIQ_RPNF_GROUP_BY_HAVING = 4096;
export const WMIQ_RPNF_ARRAY_ACCESS_USED = 8192;
export const WBEM_GENUS_CLASS = 1;
export const WBEM_GENUS_INSTANCE = 2;
export const WBEM_FLAG_CREATE_OR_UPDATE = 0;
export const WBEM_FLAG_UPDATE_ONLY = 1;
export const WBEM_FLAG_CREATE_ONLY = 2;
export const WBEM_FLAG_UPDATE_COMPATIBLE = 0;
export const WBEM_FLAG_UPDATE_SAFE_MODE = 32;
export const WBEM_FLAG_UPDATE_FORCE_MODE = 64;
export const WBEM_MASK_UPDATE_MODE = 96;
export const WBEM_FLAG_ADVISORY = 65536;
export const WBEM_FLAG_RETURN_IMMEDIATELY = 16;
export const WBEM_FLAG_RETURN_WBEM_COMPLETE = 0;
export const WBEM_FLAG_BIDIRECTIONAL = 0;
export const WBEM_FLAG_FORWARD_ONLY = 32;
export const WBEM_FLAG_NO_ERROR_OBJECT = 64;
export const WBEM_FLAG_RETURN_ERROR_OBJECT = 0;
export const WBEM_FLAG_SEND_STATUS = 128;
export const WBEM_FLAG_DONT_SEND_STATUS = 0;
export const WBEM_FLAG_ENSURE_LOCATABLE = 256;
export const WBEM_FLAG_DIRECT_READ = 512;
export const WBEM_FLAG_SEND_ONLY_SELECTED = 0;
export const WBEM_RETURN_WHEN_COMPLETE = 0;
export const WBEM_RETURN_IMMEDIATELY = 16;
export const WBEM_MASK_RESERVED_FLAGS = 126976;
export const WBEM_FLAG_USE_AMENDED_QUALIFIERS = 131072;
export const WBEM_FLAG_STRONG_VALIDATION = 1048576;
export const WBEM_STATUS_COMPLETE = 0;
export const WBEM_STATUS_REQUIREMENTS = 1;
export const WBEM_STATUS_PROGRESS = 2;
export const WBEM_STATUS_LOGGING_INFORMATION = 256;
export const WBEM_STATUS_LOGGING_INFORMATION_PROVIDER = 512;
export const WBEM_STATUS_LOGGING_INFORMATION_HOST = 1024;
export const WBEM_STATUS_LOGGING_INFORMATION_REPOSITORY = 2048;
export const WBEM_STATUS_LOGGING_INFORMATION_ESS = 4096;
export const WBEM_FLAG_ALWAYS = 0;
export const WBEM_FLAG_ONLY_IF_TRUE = 1;
export const WBEM_FLAG_ONLY_IF_FALSE = 2;
export const WBEM_FLAG_ONLY_IF_IDENTICAL = 3;
export const WBEM_MASK_PRIMARY_CONDITION = 3;
export const WBEM_FLAG_KEYS_ONLY = 4;
export const WBEM_FLAG_REFS_ONLY = 8;
export const WBEM_FLAG_LOCAL_ONLY = 16;
export const WBEM_FLAG_PROPAGATED_ONLY = 32;
export const WBEM_FLAG_SYSTEM_ONLY = 48;
export const WBEM_FLAG_NONSYSTEM_ONLY = 64;
export const WBEM_MASK_CONDITION_ORIGIN = 112;
export const WBEM_FLAG_CLASS_OVERRIDES_ONLY = 256;
export const WBEM_FLAG_CLASS_LOCAL_AND_OVERRIDES = 512;
export const WBEM_MASK_CLASS_CONDITION = 768;
export const WBEM_FLAVOR_DONT_PROPAGATE = 0;
export const WBEM_FLAVOR_FLAG_PROPAGATE_TO_INSTANCE = 1;
export const WBEM_FLAVOR_FLAG_PROPAGATE_TO_DERIVED_CLASS = 2;
export const WBEM_FLAVOR_MASK_PROPAGATION = 15;
export const WBEM_FLAVOR_OVERRIDABLE = 0;
export const WBEM_FLAVOR_NOT_OVERRIDABLE = 16;
export const WBEM_FLAVOR_MASK_PERMISSIONS = 16;
export const WBEM_FLAVOR_ORIGIN_LOCAL = 0;
export const WBEM_FLAVOR_ORIGIN_PROPAGATED = 32;
export const WBEM_FLAVOR_ORIGIN_SYSTEM = 64;
export const WBEM_FLAVOR_MASK_ORIGIN = 96;
export const WBEM_FLAVOR_NOT_AMENDED = 0;
export const WBEM_FLAVOR_AMENDED = 128;
export const WBEM_FLAVOR_MASK_AMENDED = 128;
export const WBEM_FLAG_DEEP = 0;
export const WBEM_FLAG_SHALLOW = 1;
export const WBEM_FLAG_PROTOTYPE = 2;
export const WBEM_ENABLE = 1;
export const WBEM_METHOD_EXECUTE = 2;
export const WBEM_FULL_WRITE_REP = 4;
export const WBEM_PARTIAL_WRITE_REP = 8;
export const WBEM_WRITE_PROVIDER = 16;
export const WBEM_REMOTE_ACCESS = 32;
export const WBEM_RIGHT_SUBSCRIBE = 64;
export const WBEM_RIGHT_PUBLISH = 128;
export const WBEM_FLAG_EXCLUDE_OBJECT_QUALIFIERS = 16;
export const WBEM_FLAG_EXCLUDE_PROPERTY_QUALIFIERS = 32;
export const WBEM_FLAG_NO_FLAVORS = 1;
export const WBEM_COMPARISON_INCLUDE_ALL = 0;
export const WBEM_FLAG_IGNORE_QUALIFIERS = 1;
export const WBEM_FLAG_IGNORE_OBJECT_SOURCE = 2;
export const WBEM_FLAG_IGNORE_DEFAULT_VALUES = 4;
export const WBEM_FLAG_IGNORE_CLASS = 8;
export const WBEM_FLAG_IGNORE_CASE = 16;
export const WBEM_FLAG_IGNORE_FLAVOR = 32;
export const WBEM_FLAG_ALLOW_READ = 1;
export const CIM_ILLEGAL = 4095;
export const CIM_EMPTY = 0;
export const CIM_SINT8 = 16;
export const CIM_UINT8 = 17;
export const CIM_SINT16 = 2;
export const CIM_UINT16 = 18;
export const CIM_SINT32 = 3;
export const CIM_UINT32 = 19;
export const CIM_SINT64 = 20;
export const CIM_UINT64 = 21;
export const CIM_REAL32 = 4;
export const CIM_REAL64 = 5;
export const CIM_BOOLEAN = 11;
export const CIM_STRING = 8;
export const CIM_DATETIME = 101;
export const CIM_REFERENCE = 102;
export const CIM_CHAR16 = 103;
export const CIM_OBJECT = 13;
export const CIM_FLAG_ARRAY = 8192;
export const WBEM_FLAG_BACKUP_RESTORE_DEFAULT = 0;
export const WBEM_FLAG_BACKUP_RESTORE_FORCE_SHUTDOWN = 1;
export const WBEM_FLAG_REFRESH_AUTO_RECONNECT = 0;
export const WBEM_FLAG_REFRESH_NO_AUTO_RECONNECT = 1;
export const WBEM_SHUTDOWN_UNLOAD_COMPONENT = 1;
export const WBEM_SHUTDOWN_WMI = 2;
export const WBEM_SHUTDOWN_OS = 3;
export const WBEMSTATUS_FORMAT_NEWLINE = 0;
export const WBEMSTATUS_FORMAT_NO_NEWLINE = 1;
export const WBEM_MAX_IDENTIFIER = 4096;
export const WBEM_MAX_QUERY = 16384;
export const WBEM_MAX_PATH = 8192;
export const WBEM_MAX_OBJECT_NESTING = 64;
export const WBEM_MAX_USER_PROPERTIES = 1024;
export const WBEM_NO_ERROR = 0;
export const WBEM_S_NO_ERROR = 0;
export const WBEM_S_SAME = 0;
export const WBEM_S_FALSE = 1;
export const WBEM_S_ALREADY_EXISTS = 262145;
export const WBEM_S_RESET_TO_DEFAULT = 262146;
export const WBEM_S_DIFFERENT = 262147;
export const WBEM_S_TIMEDOUT = 262148;
export const WBEM_S_NO_MORE_DATA = 262149;
export const WBEM_S_OPERATION_CANCELLED = 262150;
export const WBEM_S_PENDING = 262151;
export const WBEM_S_DUPLICATE_OBJECTS = 262152;
export const WBEM_S_ACCESS_DENIED = 262153;
export const WBEM_S_PARTIAL_RESULTS = 262160;
export const WBEM_S_SOURCE_NOT_AVAILABLE = 262167;
export const WBEM_E_FAILED = `-2147217407`;
export const WBEM_E_NOT_FOUND = `-2147217406`;
export const WBEM_E_ACCESS_DENIED = `-2147217405`;
export const WBEM_E_PROVIDER_FAILURE = `-2147217404`;
export const WBEM_E_TYPE_MISMATCH = `-2147217403`;
export const WBEM_E_OUT_OF_MEMORY = `-2147217402`;
export const WBEM_E_INVALID_CONTEXT = `-2147217401`;
export const WBEM_E_INVALID_PARAMETER = `-2147217400`;
export const WBEM_E_NOT_AVAILABLE = `-2147217399`;
export const WBEM_E_CRITICAL_ERROR = `-2147217398`;
export const WBEM_E_INVALID_STREAM = `-2147217397`;
export const WBEM_E_NOT_SUPPORTED = `-2147217396`;
export const WBEM_E_INVALID_SUPERCLASS = `-2147217395`;
export const WBEM_E_INVALID_NAMESPACE = `-2147217394`;
export const WBEM_E_INVALID_OBJECT = `-2147217393`;
export const WBEM_E_INVALID_CLASS = `-2147217392`;
export const WBEM_E_PROVIDER_NOT_FOUND = `-2147217391`;
export const WBEM_E_INVALID_PROVIDER_REGISTRATION = `-2147217390`;
export const WBEM_E_PROVIDER_LOAD_FAILURE = `-2147217389`;
export const WBEM_E_INITIALIZATION_FAILURE = `-2147217388`;
export const WBEM_E_TRANSPORT_FAILURE = `-2147217387`;
export const WBEM_E_INVALID_OPERATION = `-2147217386`;
export const WBEM_E_INVALID_QUERY = `-2147217385`;
export const WBEM_E_INVALID_QUERY_TYPE = `-2147217384`;
export const WBEM_E_ALREADY_EXISTS = `-2147217383`;
export const WBEM_E_OVERRIDE_NOT_ALLOWED = `-2147217382`;
export const WBEM_E_PROPAGATED_QUALIFIER = `-2147217381`;
export const WBEM_E_PROPAGATED_PROPERTY = `-2147217380`;
export const WBEM_E_UNEXPECTED = `-2147217379`;
export const WBEM_E_ILLEGAL_OPERATION = `-2147217378`;
export const WBEM_E_CANNOT_BE_KEY = `-2147217377`;
export const WBEM_E_INCOMPLETE_CLASS = `-2147217376`;
export const WBEM_E_INVALID_SYNTAX = `-2147217375`;
export const WBEM_E_NONDECORATED_OBJECT = `-2147217374`;
export const WBEM_E_READ_ONLY = `-2147217373`;
export const WBEM_E_PROVIDER_NOT_CAPABLE = `-2147217372`;
export const WBEM_E_CLASS_HAS_CHILDREN = `-2147217371`;
export const WBEM_E_CLASS_HAS_INSTANCES = `-2147217370`;
export const WBEM_E_QUERY_NOT_IMPLEMENTED = `-2147217369`;
export const WBEM_E_ILLEGAL_NULL = `-2147217368`;
export const WBEM_E_INVALID_QUALIFIER_TYPE = `-2147217367`;
export const WBEM_E_INVALID_PROPERTY_TYPE = `-2147217366`;
export const WBEM_E_VALUE_OUT_OF_RANGE = `-2147217365`;
export const WBEM_E_CANNOT_BE_SINGLETON = `-2147217364`;
export const WBEM_E_INVALID_CIM_TYPE = `-2147217363`;
export const WBEM_E_INVALID_METHOD = `-2147217362`;
export const WBEM_E_INVALID_METHOD_PARAMETERS = `-2147217361`;
export const WBEM_E_SYSTEM_PROPERTY = `-2147217360`;
export const WBEM_E_INVALID_PROPERTY = `-2147217359`;
export const WBEM_E_CALL_CANCELLED = `-2147217358`;
export const WBEM_E_SHUTTING_DOWN = `-2147217357`;
export const WBEM_E_PROPAGATED_METHOD = `-2147217356`;
export const WBEM_E_UNSUPPORTED_PARAMETER = `-2147217355`;
export const WBEM_E_MISSING_PARAMETER_ID = `-2147217354`;
export const WBEM_E_INVALID_PARAMETER_ID = `-2147217353`;
export const WBEM_E_NONCONSECUTIVE_PARAMETER_IDS = `-2147217352`;
export const WBEM_E_PARAMETER_ID_ON_RETVAL = `-2147217351`;
export const WBEM_E_INVALID_OBJECT_PATH = `-2147217350`;
export const WBEM_E_OUT_OF_DISK_SPACE = `-2147217349`;
export const WBEM_E_BUFFER_TOO_SMALL = `-2147217348`;
export const WBEM_E_UNSUPPORTED_PUT_EXTENSION = `-2147217347`;
export const WBEM_E_UNKNOWN_OBJECT_TYPE = `-2147217346`;
export const WBEM_E_UNKNOWN_PACKET_TYPE = `-2147217345`;
export const WBEM_E_MARSHAL_VERSION_MISMATCH = `-2147217344`;
export const WBEM_E_MARSHAL_INVALID_SIGNATURE = `-2147217343`;
export const WBEM_E_INVALID_QUALIFIER = `-2147217342`;
export const WBEM_E_INVALID_DUPLICATE_PARAMETER = `-2147217341`;
export const WBEM_E_TOO_MUCH_DATA = `-2147217340`;
export const WBEM_E_SERVER_TOO_BUSY = `-2147217339`;
export const WBEM_E_INVALID_FLAVOR = `-2147217338`;
export const WBEM_E_CIRCULAR_REFERENCE = `-2147217337`;
export const WBEM_E_UNSUPPORTED_CLASS_UPDATE = `-2147217336`;
export const WBEM_E_CANNOT_CHANGE_KEY_INHERITANCE = `-2147217335`;
export const WBEM_E_CANNOT_CHANGE_INDEX_INHERITANCE = `-2147217328`;
export const WBEM_E_TOO_MANY_PROPERTIES = `-2147217327`;
export const WBEM_E_UPDATE_TYPE_MISMATCH = `-2147217326`;
export const WBEM_E_UPDATE_OVERRIDE_NOT_ALLOWED = `-2147217325`;
export const WBEM_E_UPDATE_PROPAGATED_METHOD = `-2147217324`;
export const WBEM_E_METHOD_NOT_IMPLEMENTED = `-2147217323`;
export const WBEM_E_METHOD_DISABLED = `-2147217322`;
export const WBEM_E_REFRESHER_BUSY = `-2147217321`;
export const WBEM_E_UNPARSABLE_QUERY = `-2147217320`;
export const WBEM_E_NOT_EVENT_CLASS = `-2147217319`;
export const WBEM_E_MISSING_GROUP_WITHIN = `-2147217318`;
export const WBEM_E_MISSING_AGGREGATION_LIST = `-2147217317`;
export const WBEM_E_PROPERTY_NOT_AN_OBJECT = `-2147217316`;
export const WBEM_E_AGGREGATING_BY_OBJECT = `-2147217315`;
export const WBEM_E_UNINTERPRETABLE_PROVIDER_QUERY = `-2147217313`;
export const WBEM_E_BACKUP_RESTORE_WINMGMT_RUNNING = `-2147217312`;
export const WBEM_E_QUEUE_OVERFLOW = `-2147217311`;
export const WBEM_E_PRIVILEGE_NOT_HELD = `-2147217310`;
export const WBEM_E_INVALID_OPERATOR = `-2147217309`;
export const WBEM_E_LOCAL_CREDENTIALS = `-2147217308`;
export const WBEM_E_CANNOT_BE_ABSTRACT = `-2147217307`;
export const WBEM_E_AMENDED_OBJECT = `-2147217306`;
export const WBEM_E_CLIENT_TOO_SLOW = `-2147217305`;
export const WBEM_E_NULL_SECURITY_DESCRIPTOR = `-2147217304`;
export const WBEM_E_TIMED_OUT = `-2147217303`;
export const WBEM_E_INVALID_ASSOCIATION = `-2147217302`;
export const WBEM_E_AMBIGUOUS_OPERATION = `-2147217301`;
export const WBEM_E_QUOTA_VIOLATION = `-2147217300`;
export const WBEM_E_RESERVED_001 = `-2147217299`;
export const WBEM_E_RESERVED_002 = `-2147217298`;
export const WBEM_E_UNSUPPORTED_LOCALE = `-2147217297`;
export const WBEM_E_HANDLE_OUT_OF_DATE = `-2147217296`;
export const WBEM_E_CONNECTION_FAILED = `-2147217295`;
export const WBEM_E_INVALID_HANDLE_REQUEST = `-2147217294`;
export const WBEM_E_PROPERTY_NAME_TOO_WIDE = `-2147217293`;
export const WBEM_E_CLASS_NAME_TOO_WIDE = `-2147217292`;
export const WBEM_E_METHOD_NAME_TOO_WIDE = `-2147217291`;
export const WBEM_E_QUALIFIER_NAME_TOO_WIDE = `-2147217290`;
export const WBEM_E_RERUN_COMMAND = `-2147217289`;
export const WBEM_E_DATABASE_VER_MISMATCH = `-2147217288`;
export const WBEM_E_VETO_DELETE = `-2147217287`;
export const WBEM_E_VETO_PUT = `-2147217286`;
export const WBEM_E_INVALID_LOCALE = `-2147217280`;
export const WBEM_E_PROVIDER_SUSPENDED = `-2147217279`;
export const WBEM_E_SYNCHRONIZATION_REQUIRED = `-2147217278`;
export const WBEM_E_NO_SCHEMA = `-2147217277`;
export const WBEM_E_PROVIDER_ALREADY_REGISTERED = `-2147217276`;
export const WBEM_E_PROVIDER_NOT_REGISTERED = `-2147217275`;
export const WBEM_E_FATAL_TRANSPORT_ERROR = `-2147217274`;
export const WBEM_E_ENCRYPTED_CONNECTION_REQUIRED = `-2147217273`;
export const WBEM_E_PROVIDER_TIMED_OUT = `-2147217272`;
export const WBEM_E_NO_KEY = `-2147217271`;
export const WBEM_E_PROVIDER_DISABLED = `-2147217270`;
export const WBEMESS_E_REGISTRATION_TOO_BROAD = `-2147213311`;
export const WBEMESS_E_REGISTRATION_TOO_PRECISE = `-2147213310`;
export const WBEMESS_E_AUTHZ_NOT_PRIVILEGED = `-2147213309`;
export const WBEMMOF_E_EXPECTED_QUALIFIER_NAME = `-2147205119`;
export const WBEMMOF_E_EXPECTED_SEMI = `-2147205118`;
export const WBEMMOF_E_EXPECTED_OPEN_BRACE = `-2147205117`;
export const WBEMMOF_E_EXPECTED_CLOSE_BRACE = `-2147205116`;
export const WBEMMOF_E_EXPECTED_CLOSE_BRACKET = `-2147205115`;
export const WBEMMOF_E_EXPECTED_CLOSE_PAREN = `-2147205114`;
export const WBEMMOF_E_ILLEGAL_CONSTANT_VALUE = `-2147205113`;
export const WBEMMOF_E_EXPECTED_TYPE_IDENTIFIER = `-2147205112`;
export const WBEMMOF_E_EXPECTED_OPEN_PAREN = `-2147205111`;
export const WBEMMOF_E_UNRECOGNIZED_TOKEN = `-2147205110`;
export const WBEMMOF_E_UNRECOGNIZED_TYPE = `-2147205109`;
export const WBEMMOF_E_EXPECTED_PROPERTY_NAME = `-2147205108`;
export const WBEMMOF_E_TYPEDEF_NOT_SUPPORTED = `-2147205107`;
export const WBEMMOF_E_UNEXPECTED_ALIAS = `-2147205106`;
export const WBEMMOF_E_UNEXPECTED_ARRAY_INIT = `-2147205105`;
export const WBEMMOF_E_INVALID_AMENDMENT_SYNTAX = `-2147205104`;
export const WBEMMOF_E_INVALID_DUPLICATE_AMENDMENT = `-2147205103`;
export const WBEMMOF_E_INVALID_PRAGMA = `-2147205102`;
export const WBEMMOF_E_INVALID_NAMESPACE_SYNTAX = `-2147205101`;
export const WBEMMOF_E_EXPECTED_CLASS_NAME = `-2147205100`;
export const WBEMMOF_E_TYPE_MISMATCH = `-2147205099`;
export const WBEMMOF_E_EXPECTED_ALIAS_NAME = `-2147205098`;
export const WBEMMOF_E_INVALID_CLASS_DECLARATION = `-2147205097`;
export const WBEMMOF_E_INVALID_INSTANCE_DECLARATION = `-2147205096`;
export const WBEMMOF_E_EXPECTED_DOLLAR = `-2147205095`;
export const WBEMMOF_E_CIMTYPE_QUALIFIER = `-2147205094`;
export const WBEMMOF_E_DUPLICATE_PROPERTY = `-2147205093`;
export const WBEMMOF_E_INVALID_NAMESPACE_SPECIFICATION = `-2147205092`;
export const WBEMMOF_E_OUT_OF_RANGE = `-2147205091`;
export const WBEMMOF_E_INVALID_FILE = `-2147205090`;
export const WBEMMOF_E_ALIASES_IN_EMBEDDED = `-2147205089`;
export const WBEMMOF_E_NULL_ARRAY_ELEM = `-2147205088`;
export const WBEMMOF_E_DUPLICATE_QUALIFIER = `-2147205087`;
export const WBEMMOF_E_EXPECTED_FLAVOR_TYPE = `-2147205086`;
export const WBEMMOF_E_INCOMPATIBLE_FLAVOR_TYPES = `-2147205085`;
export const WBEMMOF_E_MULTIPLE_ALIASES = `-2147205084`;
export const WBEMMOF_E_INCOMPATIBLE_FLAVOR_TYPES2 = `-2147205083`;
export const WBEMMOF_E_NO_ARRAYS_RETURNED = `-2147205082`;
export const WBEMMOF_E_MUST_BE_IN_OR_OUT = `-2147205081`;
export const WBEMMOF_E_INVALID_FLAGS_SYNTAX = `-2147205080`;
export const WBEMMOF_E_EXPECTED_BRACE_OR_BAD_TYPE = `-2147205079`;
export const WBEMMOF_E_UNSUPPORTED_CIMV22_QUAL_VALUE = `-2147205078`;
export const WBEMMOF_E_UNSUPPORTED_CIMV22_DATA_TYPE = `-2147205077`;
export const WBEMMOF_E_INVALID_DELETEINSTANCE_SYNTAX = `-2147205076`;
export const WBEMMOF_E_INVALID_QUALIFIER_SYNTAX = `-2147205075`;
export const WBEMMOF_E_QUALIFIER_USED_OUTSIDE_SCOPE = `-2147205074`;
export const WBEMMOF_E_ERROR_CREATING_TEMP_FILE = `-2147205073`;
export const WBEMMOF_E_ERROR_INVALID_INCLUDE_FILE = `-2147205072`;
export const WBEMMOF_E_INVALID_DELETECLASS_SYNTAX = `-2147205071`;
export const WMI_OBJ_TEXT_CIM_DTD_2_0 = 1;
export const WMI_OBJ_TEXT_WMI_DTD_2_0 = 2;
export const WMI_OBJ_TEXT_WMI_EXT1 = 3;
export const WMI_OBJ_TEXT_WMI_EXT2 = 4;
export const WMI_OBJ_TEXT_WMI_EXT3 = 5;
export const WMI_OBJ_TEXT_WMI_EXT4 = 6;
export const WMI_OBJ_TEXT_WMI_EXT5 = 7;
export const WMI_OBJ_TEXT_WMI_EXT6 = 8;
export const WMI_OBJ_TEXT_WMI_EXT7 = 9;
export const WMI_OBJ_TEXT_WMI_EXT8 = 10;
export const WMI_OBJ_TEXT_WMI_EXT9 = 11;
export const WMI_OBJ_TEXT_WMI_EXT10 = 12;
export const WMI_OBJ_TEXT_LAST = 13;
export const WBEM_FLAG_CHECK_ONLY = 1;
export const WBEM_FLAG_AUTORECOVER = 2;
export const WBEM_FLAG_WMI_CHECK = 4;
export const WBEM_FLAG_CONSOLE_PRINT = 8;
export const WBEM_FLAG_DONT_ADD_TO_LIST = 16;
export const WBEM_FLAG_SPLIT_FILES = 32;
export const WBEM_FLAG_STORE_FILE = 256;
export const WBEM_FLAG_CONNECT_REPOSITORY_ONLY = 64;
export const WBEM_FLAG_CONNECT_USE_MAX_WAIT = 128;
export const WBEM_FLAG_CONNECT_PROVIDERS = 256;
export const WBEM_FLAG_UNSECAPP_DEFAULT_CHECK_ACCESS = 0;
export const WBEM_FLAG_UNSECAPP_CHECK_ACCESS = 1;
export const WBEM_FLAG_UNSECAPP_DONT_CHECK_ACCESS = 2;
export const WBEM_FLAG_SHORT_NAME = 1;
export const WBEM_FLAG_LONG_NAME = 2;
export const WBEM_REQUIREMENTS_START_POSTFILTER = 0;
export const WBEM_REQUIREMENTS_STOP_POSTFILTER = 1;
export const WBEM_REQUIREMENTS_RECHECK_SUBSCRIPTIONS = 2;
export const WBEM_S_INITIALIZED = 0;
export const WBEM_S_LIMITED_SERVICE = 274433;
export const WBEM_S_INDIRECTLY_UPDATED = 274434;
export const WBEM_S_SUBJECT_TO_SDS = 274435;
export const WBEM_E_RETRY_LATER = `-2147209215`;
export const WBEM_E_RESOURCE_CONTENTION = `-2147209214`;
export const WBEM_FLAG_OWNER_UPDATE = 65536;
export const WBEM_FLAG_BATCH_IF_NEEDED = 0;
export const WBEM_FLAG_MUST_BATCH = 1;
export const WBEM_FLAG_MUST_NOT_BATCH = 2;
export const wbemChangeFlagCreateOrUpdate = 0;
export const wbemChangeFlagUpdateOnly = 1;
export const wbemChangeFlagCreateOnly = 2;
export const wbemChangeFlagUpdateCompatible = 0;
export const wbemChangeFlagUpdateSafeMode = 32;
export const wbemChangeFlagUpdateForceMode = 64;
export const wbemChangeFlagStrongValidation = 128;
export const wbemChangeFlagAdvisory = 65536;
export const wbemFlagReturnImmediately = 16;
export const wbemFlagReturnWhenComplete = 0;
export const wbemFlagBidirectional = 0;
export const wbemFlagForwardOnly = 32;
export const wbemFlagNoErrorObject = 64;
export const wbemFlagReturnErrorObject = 0;
export const wbemFlagSendStatus = 128;
export const wbemFlagDontSendStatus = 0;
export const wbemFlagEnsureLocatable = 256;
export const wbemFlagDirectRead = 512;
export const wbemFlagSendOnlySelected = 0;
export const wbemFlagUseAmendedQualifiers = 131072;
export const wbemFlagGetDefault = 0;
export const wbemFlagSpawnInstance = 1;
export const wbemFlagUseCurrentTime = 1;
export const wbemQueryFlagDeep = 0;
export const wbemQueryFlagShallow = 1;
export const wbemQueryFlagPrototype = 2;
export const wbemTextFlagNoFlavors = 1;
export const wbemTimeoutInfinite = `-1`;
export const wbemComparisonFlagIncludeAll = 0;
export const wbemComparisonFlagIgnoreQualifiers = 1;
export const wbemComparisonFlagIgnoreObjectSource = 2;
export const wbemComparisonFlagIgnoreDefaultValues = 4;
export const wbemComparisonFlagIgnoreClass = 8;
export const wbemComparisonFlagIgnoreCase = 16;
export const wbemComparisonFlagIgnoreFlavor = 32;
export const wbemCimtypeSint8 = 16;
export const wbemCimtypeUint8 = 17;
export const wbemCimtypeSint16 = 2;
export const wbemCimtypeUint16 = 18;
export const wbemCimtypeSint32 = 3;
export const wbemCimtypeUint32 = 19;
export const wbemCimtypeSint64 = 20;
export const wbemCimtypeUint64 = 21;
export const wbemCimtypeReal32 = 4;
export const wbemCimtypeReal64 = 5;
export const wbemCimtypeBoolean = 11;
export const wbemCimtypeString = 8;
export const wbemCimtypeDatetime = 101;
export const wbemCimtypeReference = 102;
export const wbemCimtypeChar16 = 103;
export const wbemCimtypeObject = 13;
export const wbemNoErr = 0;
export const wbemErrFailed = `-2147217407`;
export const wbemErrNotFound = `-2147217406`;
export const wbemErrAccessDenied = `-2147217405`;
export const wbemErrProviderFailure = `-2147217404`;
export const wbemErrTypeMismatch = `-2147217403`;
export const wbemErrOutOfMemory = `-2147217402`;
export const wbemErrInvalidContext = `-2147217401`;
export const wbemErrInvalidParameter = `-2147217400`;
export const wbemErrNotAvailable = `-2147217399`;
export const wbemErrCriticalError = `-2147217398`;
export const wbemErrInvalidStream = `-2147217397`;
export const wbemErrNotSupported = `-2147217396`;
export const wbemErrInvalidSuperclass = `-2147217395`;
export const wbemErrInvalidNamespace = `-2147217394`;
export const wbemErrInvalidObject = `-2147217393`;
export const wbemErrInvalidClass = `-2147217392`;
export const wbemErrProviderNotFound = `-2147217391`;
export const wbemErrInvalidProviderRegistration = `-2147217390`;
export const wbemErrProviderLoadFailure = `-2147217389`;
export const wbemErrInitializationFailure = `-2147217388`;
export const wbemErrTransportFailure = `-2147217387`;
export const wbemErrInvalidOperation = `-2147217386`;
export const wbemErrInvalidQuery = `-2147217385`;
export const wbemErrInvalidQueryType = `-2147217384`;
export const wbemErrAlreadyExists = `-2147217383`;
export const wbemErrOverrideNotAllowed = `-2147217382`;
export const wbemErrPropagatedQualifier = `-2147217381`;
export const wbemErrPropagatedProperty = `-2147217380`;
export const wbemErrUnexpected = `-2147217379`;
export const wbemErrIllegalOperation = `-2147217378`;
export const wbemErrCannotBeKey = `-2147217377`;
export const wbemErrIncompleteClass = `-2147217376`;
export const wbemErrInvalidSyntax = `-2147217375`;
export const wbemErrNondecoratedObject = `-2147217374`;
export const wbemErrReadOnly = `-2147217373`;
export const wbemErrProviderNotCapable = `-2147217372`;
export const wbemErrClassHasChildren = `-2147217371`;
export const wbemErrClassHasInstances = `-2147217370`;
export const wbemErrQueryNotImplemented = `-2147217369`;
export const wbemErrIllegalNull = `-2147217368`;
export const wbemErrInvalidQualifierType = `-2147217367`;
export const wbemErrInvalidPropertyType = `-2147217366`;
export const wbemErrValueOutOfRange = `-2147217365`;
export const wbemErrCannotBeSingleton = `-2147217364`;
export const wbemErrInvalidCimType = `-2147217363`;
export const wbemErrInvalidMethod = `-2147217362`;
export const wbemErrInvalidMethodParameters = `-2147217361`;
export const wbemErrSystemProperty = `-2147217360`;
export const wbemErrInvalidProperty = `-2147217359`;
export const wbemErrCallCancelled = `-2147217358`;
export const wbemErrShuttingDown = `-2147217357`;
export const wbemErrPropagatedMethod = `-2147217356`;
export const wbemErrUnsupportedParameter = `-2147217355`;
export const wbemErrMissingParameter = `-2147217354`;
export const wbemErrInvalidParameterId = `-2147217353`;
export const wbemErrNonConsecutiveParameterIds = `-2147217352`;
export const wbemErrParameterIdOnRetval = `-2147217351`;
export const wbemErrInvalidObjectPath = `-2147217350`;
export const wbemErrOutOfDiskSpace = `-2147217349`;
export const wbemErrBufferTooSmall = `-2147217348`;
export const wbemErrUnsupportedPutExtension = `-2147217347`;
export const wbemErrUnknownObjectType = `-2147217346`;
export const wbemErrUnknownPacketType = `-2147217345`;
export const wbemErrMarshalVersionMismatch = `-2147217344`;
export const wbemErrMarshalInvalidSignature = `-2147217343`;
export const wbemErrInvalidQualifier = `-2147217342`;
export const wbemErrInvalidDuplicateParameter = `-2147217341`;
export const wbemErrTooMuchData = `-2147217340`;
export const wbemErrServerTooBusy = `-2147217339`;
export const wbemErrInvalidFlavor = `-2147217338`;
export const wbemErrCircularReference = `-2147217337`;
export const wbemErrUnsupportedClassUpdate = `-2147217336`;
export const wbemErrCannotChangeKeyInheritance = `-2147217335`;
export const wbemErrCannotChangeIndexInheritance = `-2147217328`;
export const wbemErrTooManyProperties = `-2147217327`;
export const wbemErrUpdateTypeMismatch = `-2147217326`;
export const wbemErrUpdateOverrideNotAllowed = `-2147217325`;
export const wbemErrUpdatePropagatedMethod = `-2147217324`;
export const wbemErrMethodNotImplemented = `-2147217323`;
export const wbemErrMethodDisabled = `-2147217322`;
export const wbemErrRefresherBusy = `-2147217321`;
export const wbemErrUnparsableQuery = `-2147217320`;
export const wbemErrNotEventClass = `-2147217319`;
export const wbemErrMissingGroupWithin = `-2147217318`;
export const wbemErrMissingAggregationList = `-2147217317`;
export const wbemErrPropertyNotAnObject = `-2147217316`;
export const wbemErrAggregatingByObject = `-2147217315`;
export const wbemErrUninterpretableProviderQuery = `-2147217313`;
export const wbemErrBackupRestoreWinmgmtRunning = `-2147217312`;
export const wbemErrQueueOverflow = `-2147217311`;
export const wbemErrPrivilegeNotHeld = `-2147217310`;
export const wbemErrInvalidOperator = `-2147217309`;
export const wbemErrLocalCredentials = `-2147217308`;
export const wbemErrCannotBeAbstract = `-2147217307`;
export const wbemErrAmendedObject = `-2147217306`;
export const wbemErrClientTooSlow = `-2147217305`;
export const wbemErrNullSecurityDescriptor = `-2147217304`;
export const wbemErrTimeout = `-2147217303`;
export const wbemErrInvalidAssociation = `-2147217302`;
export const wbemErrAmbiguousOperation = `-2147217301`;
export const wbemErrQuotaViolation = `-2147217300`;
export const wbemErrTransactionConflict = `-2147217299`;
export const wbemErrForcedRollback = `-2147217298`;
export const wbemErrUnsupportedLocale = `-2147217297`;
export const wbemErrHandleOutOfDate = `-2147217296`;
export const wbemErrConnectionFailed = `-2147217295`;
export const wbemErrInvalidHandleRequest = `-2147217294`;
export const wbemErrPropertyNameTooWide = `-2147217293`;
export const wbemErrClassNameTooWide = `-2147217292`;
export const wbemErrMethodNameTooWide = `-2147217291`;
export const wbemErrQualifierNameTooWide = `-2147217290`;
export const wbemErrRerunCommand = `-2147217289`;
export const wbemErrDatabaseVerMismatch = `-2147217288`;
export const wbemErrVetoPut = `-2147217287`;
export const wbemErrVetoDelete = `-2147217286`;
export const wbemErrInvalidLocale = `-2147217280`;
export const wbemErrProviderSuspended = `-2147217279`;
export const wbemErrSynchronizationRequired = `-2147217278`;
export const wbemErrNoSchema = `-2147217277`;
export const wbemErrProviderAlreadyRegistered = `-2147217276`;
export const wbemErrProviderNotRegistered = `-2147217275`;
export const wbemErrFatalTransportError = `-2147217274`;
export const wbemErrEncryptedConnectionRequired = `-2147217273`;
export const wbemErrRegistrationTooBroad = `-2147213311`;
export const wbemErrRegistrationTooPrecise = `-2147213310`;
export const wbemErrTimedout = `-2147209215`;
export const wbemErrResetToDefault = `-2147209214`;
export const wbemAuthenticationLevelDefault = 0;
export const wbemAuthenticationLevelNone = 1;
export const wbemAuthenticationLevelConnect = 2;
export const wbemAuthenticationLevelCall = 3;
export const wbemAuthenticationLevelPkt = 4;
export const wbemAuthenticationLevelPktIntegrity = 5;
export const wbemAuthenticationLevelPktPrivacy = 6;
export const wbemImpersonationLevelAnonymous = 1;
export const wbemImpersonationLevelIdentify = 2;
export const wbemImpersonationLevelImpersonate = 3;
export const wbemImpersonationLevelDelegate = 4;
export const wbemPrivilegeCreateToken = 1;
export const wbemPrivilegePrimaryToken = 2;
export const wbemPrivilegeLockMemory = 3;
export const wbemPrivilegeIncreaseQuota = 4;
export const wbemPrivilegeMachineAccount = 5;
export const wbemPrivilegeTcb = 6;
export const wbemPrivilegeSecurity = 7;
export const wbemPrivilegeTakeOwnership = 8;
export const wbemPrivilegeLoadDriver = 9;
export const wbemPrivilegeSystemProfile = 10;
export const wbemPrivilegeSystemtime = 11;
export const wbemPrivilegeProfileSingleProcess = 12;
export const wbemPrivilegeIncreaseBasePriority = 13;
export const wbemPrivilegeCreatePagefile = 14;
export const wbemPrivilegeCreatePermanent = 15;
export const wbemPrivilegeBackup = 16;
export const wbemPrivilegeRestore = 17;
export const wbemPrivilegeShutdown = 18;
export const wbemPrivilegeDebug = 19;
export const wbemPrivilegeAudit = 20;
export const wbemPrivilegeSystemEnvironment = 21;
export const wbemPrivilegeChangeNotify = 22;
export const wbemPrivilegeRemoteShutdown = 23;
export const wbemPrivilegeUndock = 24;
export const wbemPrivilegeSyncAgent = 25;
export const wbemPrivilegeEnableDelegation = 26;
export const wbemPrivilegeManageVolume = 27;
export const wbemObjectTextFormatCIMDTD20 = 1;
export const wbemObjectTextFormatWMIDTD20 = 2;
export const wbemConnectFlagUseMaxWait = 128;
export const WBEM_FLAG_INPROC_LOGIN = 0;
export const WBEM_FLAG_LOCAL_LOGIN = 1;
export const WBEM_FLAG_REMOTE_LOGIN = 2;
export const WBEM_AUTHENTICATION_METHOD_MASK = 15;
export const WBEM_FLAG_USE_MULTIPLE_CHALLENGES = 16;

// Structs

/**
 * Windows.Win32.System.Wmi.MI_Timestamp (size: 32)
 */
export interface MI_Timestamp {
  /** u32 */
  year: number;
  /** u32 */
  month: number;
  /** u32 */
  day: number;
  /** u32 */
  hour: number;
  /** u32 */
  minute: number;
  /** u32 */
  second: number;
  /** u32 */
  microseconds: number;
  /** i32 */
  utc: number;
}

export const sizeofMI_Timestamp = 32;

export function allocMI_Timestamp(data?: Partial<MI_Timestamp>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Timestamp);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.year !== undefined) view.setUint32(0, Number(data.year), true);
  // 0x04: u32
  if (data?.month !== undefined) view.setUint32(4, Number(data.month), true);
  // 0x08: u32
  if (data?.day !== undefined) view.setUint32(8, Number(data.day), true);
  // 0x0c: u32
  if (data?.hour !== undefined) view.setUint32(12, Number(data.hour), true);
  // 0x10: u32
  if (data?.minute !== undefined) view.setUint32(16, Number(data.minute), true);
  // 0x14: u32
  if (data?.second !== undefined) view.setUint32(20, Number(data.second), true);
  // 0x18: u32
  if (data?.microseconds !== undefined) view.setUint32(24, Number(data.microseconds), true);
  // 0x1c: i32
  if (data?.utc !== undefined) view.setInt32(28, Number(data.utc), true);
  return buf;
}

export class MI_TimestampView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get year(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get month(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get day(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get hour(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get minute(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get second(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get microseconds(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: i32
  get utc(): number {
    return this.view.getInt32(28, true);
  }

  // 0x00: u32
  set year(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set month(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set day(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set hour(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set minute(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set second(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set microseconds(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: i32
  set utc(value: number) {
    this.view.setInt32(28, value, true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_Interval (size: 32)
 */
export interface MI_Interval {
  /** u32 */
  days: number;
  /** u32 */
  hours: number;
  /** u32 */
  minutes: number;
  /** u32 */
  seconds: number;
  /** u32 */
  microseconds: number;
  /** u32 */
  __padding1: number;
  /** u32 */
  __padding2: number;
  /** u32 */
  __padding3: number;
}

export const sizeofMI_Interval = 32;

export function allocMI_Interval(data?: Partial<MI_Interval>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Interval);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.days !== undefined) view.setUint32(0, Number(data.days), true);
  // 0x04: u32
  if (data?.hours !== undefined) view.setUint32(4, Number(data.hours), true);
  // 0x08: u32
  if (data?.minutes !== undefined) view.setUint32(8, Number(data.minutes), true);
  // 0x0c: u32
  if (data?.seconds !== undefined) view.setUint32(12, Number(data.seconds), true);
  // 0x10: u32
  if (data?.microseconds !== undefined) view.setUint32(16, Number(data.microseconds), true);
  // 0x14: u32
  if (data?.__padding1 !== undefined) view.setUint32(20, Number(data.__padding1), true);
  // 0x18: u32
  if (data?.__padding2 !== undefined) view.setUint32(24, Number(data.__padding2), true);
  // 0x1c: u32
  if (data?.__padding3 !== undefined) view.setUint32(28, Number(data.__padding3), true);
  return buf;
}

export class MI_IntervalView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get days(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get hours(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get minutes(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get seconds(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get microseconds(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get __padding1(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get __padding2(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get __padding3(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: u32
  set days(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set hours(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set minutes(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set seconds(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set microseconds(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set __padding1(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set __padding2(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set __padding3(value: number) {
    this.view.setUint32(28, value, true);
  }
}

export type NTSTATUS = number;

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD (size: 48)
 */
export interface EXCEPTION_RECORD {
  /** Windows.Win32.Foundation.NTSTATUS */
  ExceptionCode: Uint8Array | Deno.PointerValue;
  /** u32 */
  ExceptionFlags: number;
  /** ptr */
  ExceptionRecord: Deno.PointerValue | Uint8Array;
  /** ptr */
  ExceptionAddress: Deno.PointerValue | Uint8Array;
  /** u32 */
  NumberParameters: number;
  /** array */
  ExceptionInformation: Deno.PointerValue;
}

export const sizeofEXCEPTION_RECORD = 48;

export function allocEXCEPTION_RECORD(data?: Partial<EXCEPTION_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionCode !== undefined) view.setBigUint64(0, data.ExceptionCode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExceptionCode))), true);
  // 0x08: u32
  if (data?.ExceptionFlags !== undefined) view.setUint32(8, Number(data.ExceptionFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(16, data.ExceptionRecord === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExceptionRecord))), true);
  // 0x18: pointer
  if (data?.ExceptionAddress !== undefined) view.setBigUint64(24, data.ExceptionAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExceptionAddress))), true);
  // 0x20: u32
  if (data?.NumberParameters !== undefined) view.setUint32(32, Number(data.NumberParameters), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ExceptionInformation !== undefined) view.setBigUint64(40, data.ExceptionInformation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExceptionInformation))), true);
  return buf;
}

export class EXCEPTION_RECORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ExceptionCode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ExceptionFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ExceptionRecord(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ExceptionAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get NumberParameters(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get ExceptionInformation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ExceptionCode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ExceptionFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ExceptionRecord(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ExceptionAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set NumberParameters(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set ExceptionInformation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_DEBUG_INFO (size: 16)
 */
export interface EXCEPTION_DEBUG_INFO {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD */
  ExceptionRecord: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwFirstChance: number;
}

export const sizeofEXCEPTION_DEBUG_INFO = 16;

export function allocEXCEPTION_DEBUG_INFO(data?: Partial<EXCEPTION_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(0, data.ExceptionRecord === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExceptionRecord))), true);
  // 0x08: u32
  if (data?.dwFirstChance !== undefined) view.setUint32(8, Number(data.dwFirstChance), true);
  // 0x0c: pad4
  return buf;
}

export class EXCEPTION_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ExceptionRecord(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwFirstChance(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set ExceptionRecord(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwFirstChance(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

export type HANDLE = bigint | number;

/**
 * Windows.Win32.System.Diagnostics.Debug.CREATE_THREAD_DEBUG_INFO (size: 24)
 */
export interface CREATE_THREAD_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpThreadLocalBase: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */
  lpStartAddress: Uint8Array | Deno.PointerValue;
}

export const sizeofCREATE_THREAD_DEBUG_INFO = 24;

export function allocCREATE_THREAD_DEBUG_INFO(data?: Partial<CREATE_THREAD_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_THREAD_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hThread !== undefined) view.setBigUint64(0, data.hThread === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hThread))), true);
  // 0x08: pointer
  if (data?.lpThreadLocalBase !== undefined) view.setBigUint64(8, data.lpThreadLocalBase === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpThreadLocalBase))), true);
  // 0x10: pointer
  if (data?.lpStartAddress !== undefined) view.setBigUint64(16, data.lpStartAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpStartAddress))), true);
  return buf;
}

export class CREATE_THREAD_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hThread(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpThreadLocalBase(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpStartAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hThread(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpThreadLocalBase(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpStartAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.CREATE_PROCESS_DEBUG_INFO (size: 72)
 */
export interface CREATE_PROCESS_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HANDLE */
  hProcess: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpBaseOfImage: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwDebugInfoFileOffset: number;
  /** u32 */
  nDebugInfoSize: number;
  /** ptr */
  lpThreadLocalBase: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */
  lpStartAddress: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpImageName: Deno.PointerValue | Uint8Array;
  /** u16 */
  fUnicode: number;
}

export const sizeofCREATE_PROCESS_DEBUG_INFO = 72;

export function allocCREATE_PROCESS_DEBUG_INFO(data?: Partial<CREATE_PROCESS_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_PROCESS_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hFile))), true);
  // 0x08: pointer
  if (data?.hProcess !== undefined) view.setBigUint64(8, data.hProcess === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hProcess))), true);
  // 0x10: pointer
  if (data?.hThread !== undefined) view.setBigUint64(16, data.hThread === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hThread))), true);
  // 0x18: pointer
  if (data?.lpBaseOfImage !== undefined) view.setBigUint64(24, data.lpBaseOfImage === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpBaseOfImage))), true);
  // 0x20: u32
  if (data?.dwDebugInfoFileOffset !== undefined) view.setUint32(32, Number(data.dwDebugInfoFileOffset), true);
  // 0x24: u32
  if (data?.nDebugInfoSize !== undefined) view.setUint32(36, Number(data.nDebugInfoSize), true);
  // 0x28: pointer
  if (data?.lpThreadLocalBase !== undefined) view.setBigUint64(40, data.lpThreadLocalBase === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpThreadLocalBase))), true);
  // 0x30: pointer
  if (data?.lpStartAddress !== undefined) view.setBigUint64(48, data.lpStartAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpStartAddress))), true);
  // 0x38: pointer
  if (data?.lpImageName !== undefined) view.setBigUint64(56, data.lpImageName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpImageName))), true);
  // 0x40: u16
  if (data?.fUnicode !== undefined) view.setUint16(64, Number(data.fUnicode), true);
  // 0x42: pad6
  return buf;
}

export class CREATE_PROCESS_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get hProcess(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hThread(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get lpBaseOfImage(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwDebugInfoFileOffset(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get nDebugInfoSize(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get lpThreadLocalBase(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get lpStartAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get lpImageName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u16
  get fUnicode(): number {
    return this.view.getUint16(64, true);
  }

  // 0x42: pad6

  // 0x00: pointer
  set hFile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set hProcess(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hThread(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set lpBaseOfImage(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwDebugInfoFileOffset(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set nDebugInfoSize(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set lpThreadLocalBase(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set lpStartAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set lpImageName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u16
  set fUnicode(value: number) {
    this.view.setUint16(64, value, true);
  }

  // 0x42: pad6
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXIT_THREAD_DEBUG_INFO (size: 8)
 */
export interface EXIT_THREAD_DEBUG_INFO {
  /** u32 */
  dwExitCode: number;
}

export const sizeofEXIT_THREAD_DEBUG_INFO = 8;

export function allocEXIT_THREAD_DEBUG_INFO(data?: Partial<EXIT_THREAD_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXIT_THREAD_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExitCode !== undefined) view.setUint32(0, Number(data.dwExitCode), true);
  // 0x04: pad4
  return buf;
}

export class EXIT_THREAD_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwExitCode(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set dwExitCode(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXIT_PROCESS_DEBUG_INFO (size: 8)
 */
export interface EXIT_PROCESS_DEBUG_INFO {
  /** u32 */
  dwExitCode: number;
}

export const sizeofEXIT_PROCESS_DEBUG_INFO = 8;

export function allocEXIT_PROCESS_DEBUG_INFO(data?: Partial<EXIT_PROCESS_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXIT_PROCESS_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExitCode !== undefined) view.setUint32(0, Number(data.dwExitCode), true);
  // 0x04: pad4
  return buf;
}

export class EXIT_PROCESS_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwExitCode(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set dwExitCode(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.LOAD_DLL_DEBUG_INFO (size: 40)
 */
export interface LOAD_DLL_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwDebugInfoFileOffset: number;
  /** u32 */
  nDebugInfoSize: number;
  /** ptr */
  lpImageName: Deno.PointerValue | Uint8Array;
  /** u16 */
  fUnicode: number;
}

export const sizeofLOAD_DLL_DEBUG_INFO = 40;

export function allocLOAD_DLL_DEBUG_INFO(data?: Partial<LOAD_DLL_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofLOAD_DLL_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hFile))), true);
  // 0x08: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(8, data.lpBaseOfDll === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpBaseOfDll))), true);
  // 0x10: u32
  if (data?.dwDebugInfoFileOffset !== undefined) view.setUint32(16, Number(data.dwDebugInfoFileOffset), true);
  // 0x14: u32
  if (data?.nDebugInfoSize !== undefined) view.setUint32(20, Number(data.nDebugInfoSize), true);
  // 0x18: pointer
  if (data?.lpImageName !== undefined) view.setBigUint64(24, data.lpImageName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpImageName))), true);
  // 0x20: u16
  if (data?.fUnicode !== undefined) view.setUint16(32, Number(data.fUnicode), true);
  // 0x22: pad6
  return buf;
}

export class LOAD_DLL_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpBaseOfDll(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwDebugInfoFileOffset(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get nDebugInfoSize(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get lpImageName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u16
  get fUnicode(): number {
    return this.view.getUint16(32, true);
  }

  // 0x22: pad6

  // 0x00: pointer
  set hFile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpBaseOfDll(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwDebugInfoFileOffset(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set nDebugInfoSize(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set lpImageName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u16
  set fUnicode(value: number) {
    this.view.setUint16(32, value, true);
  }

  // 0x22: pad6
}

/**
 * Windows.Win32.System.Diagnostics.Debug.UNLOAD_DLL_DEBUG_INFO (size: 8)
 */
export interface UNLOAD_DLL_DEBUG_INFO {
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array;
}

export const sizeofUNLOAD_DLL_DEBUG_INFO = 8;

export function allocUNLOAD_DLL_DEBUG_INFO(data?: Partial<UNLOAD_DLL_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofUNLOAD_DLL_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(0, data.lpBaseOfDll === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpBaseOfDll))), true);
  return buf;
}

export class UNLOAD_DLL_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpBaseOfDll(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpBaseOfDll(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type PSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.System.Diagnostics.Debug.OUTPUT_DEBUG_STRING_INFO (size: 16)
 */
export interface OUTPUT_DEBUG_STRING_INFO {
  /** Windows.Win32.Foundation.PSTR */
  lpDebugStringData: string | null | Uint8Array;
  /** u16 */
  fUnicode: number;
  /** u16 */
  nDebugStringLength: number;
}

export const sizeofOUTPUT_DEBUG_STRING_INFO = 16;

export function allocOUTPUT_DEBUG_STRING_INFO(data?: Partial<OUTPUT_DEBUG_STRING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofOUTPUT_DEBUG_STRING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpDebugStringData !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpDebugStringData);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: u16
  if (data?.fUnicode !== undefined) view.setUint16(8, Number(data.fUnicode), true);
  // 0x0a: u16
  if (data?.nDebugStringLength !== undefined) view.setUint16(10, Number(data.nDebugStringLength), true);
  // 0x0c: pad4
  return buf;
}

export class OUTPUT_DEBUG_STRING_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get lpDebugStringData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u16
  get fUnicode(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get nDebugStringLength(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: pad4

  // 0x00: buffer
  set lpDebugStringData(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: u16
  set fUnicode(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set nDebugStringLength(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.RIP_INFO (size: 8)
 */
export interface RIP_INFO {
  /** u32 */
  dwError: number;
  /** Windows.Win32.System.Diagnostics.Debug.RIP_INFO_TYPE */
  dwType: RIP_INFO_TYPE;
}

export const sizeofRIP_INFO = 8;

export function allocRIP_INFO(data?: Partial<RIP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRIP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwError !== undefined) view.setUint32(0, Number(data.dwError), true);
  // 0x04: u32
  if (data?.dwType !== undefined) view.setUint32(4, Number(data.dwType), true);
  return buf;
}

export class RIP_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwError(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwError(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwType(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * _u_e__Union (size: 72)
 */
export interface _u_e__Union {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_DEBUG_INFO */
  Exception: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.CREATE_THREAD_DEBUG_INFO */
  CreateThread: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.CREATE_PROCESS_DEBUG_INFO */
  CreateProcessInfo: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.EXIT_THREAD_DEBUG_INFO */
  ExitThread: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.EXIT_PROCESS_DEBUG_INFO */
  ExitProcess: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.LOAD_DLL_DEBUG_INFO */
  LoadDll: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.UNLOAD_DLL_DEBUG_INFO */
  UnloadDll: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.OUTPUT_DEBUG_STRING_INFO */
  DebugString: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.RIP_INFO */
  RipInfo: Uint8Array | Deno.PointerValue;
}

export const sizeof_u_e__Union = 72;

export function alloc_u_e__Union(data?: Partial<_u_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Exception !== undefined) view.setBigUint64(0, data.Exception === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Exception))), true);
  // 0x08: pointer
  if (data?.CreateThread !== undefined) view.setBigUint64(8, data.CreateThread === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreateThread))), true);
  // 0x10: pointer
  if (data?.CreateProcessInfo !== undefined) view.setBigUint64(16, data.CreateProcessInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreateProcessInfo))), true);
  // 0x18: pointer
  if (data?.ExitThread !== undefined) view.setBigUint64(24, data.ExitThread === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExitThread))), true);
  // 0x20: pointer
  if (data?.ExitProcess !== undefined) view.setBigUint64(32, data.ExitProcess === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExitProcess))), true);
  // 0x28: pointer
  if (data?.LoadDll !== undefined) view.setBigUint64(40, data.LoadDll === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LoadDll))), true);
  // 0x30: pointer
  if (data?.UnloadDll !== undefined) view.setBigUint64(48, data.UnloadDll === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UnloadDll))), true);
  // 0x38: pointer
  if (data?.DebugString !== undefined) view.setBigUint64(56, data.DebugString === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DebugString))), true);
  // 0x40: pointer
  if (data?.RipInfo !== undefined) view.setBigUint64(64, data.RipInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RipInfo))), true);
  return buf;
}

export class _u_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Exception(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get CreateThread(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get CreateProcessInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ExitThread(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ExitProcess(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get LoadDll(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get UnloadDll(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get DebugString(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get RipInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Exception(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set CreateThread(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set CreateProcessInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ExitThread(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set ExitProcess(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set LoadDll(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set UnloadDll(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set DebugString(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set RipInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_Datetime (size: 16)
 */
export interface MI_Datetime {
  /** u32 */
  isTimestamp: number;
  /** _u_e__Union */
  u: Uint8Array | Deno.PointerValue;
}

export const sizeofMI_Datetime = 16;

export function allocMI_Datetime(data?: Partial<MI_Datetime>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Datetime);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.isTimestamp !== undefined) view.setUint32(0, Number(data.isTimestamp), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.u))), true);
  return buf;
}

export class MI_DatetimeView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get isTimestamp(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get u(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set isTimestamp(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set u(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_BooleanA (size: 16)
 */
export interface MI_BooleanA {
  /** ptr */
  data: Deno.PointerValue | Uint8Array;
  /** u32 */
  size: number;
}

export const sizeofMI_BooleanA = 16;

export function allocMI_BooleanA(data?: Partial<MI_BooleanA>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_BooleanA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  // 0x08: u32
  if (data?.size !== undefined) view.setUint32(8, Number(data.size), true);
  // 0x0c: pad4
  return buf;
}

export class MI_BooleanAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get size(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set size(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_Uint8A (size: 16)
 */
export interface MI_Uint8A {
  /** ptr */
  data: Deno.PointerValue | Uint8Array;
  /** u32 */
  size: number;
}

export const sizeofMI_Uint8A = 16;

export function allocMI_Uint8A(data?: Partial<MI_Uint8A>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Uint8A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  // 0x08: u32
  if (data?.size !== undefined) view.setUint32(8, Number(data.size), true);
  // 0x0c: pad4
  return buf;
}

export class MI_Uint8AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get size(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set size(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_Sint8A (size: 16)
 */
export interface MI_Sint8A {
  /** ptr */
  data: Deno.PointerValue | Uint8Array;
  /** u32 */
  size: number;
}

export const sizeofMI_Sint8A = 16;

export function allocMI_Sint8A(data?: Partial<MI_Sint8A>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Sint8A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  // 0x08: u32
  if (data?.size !== undefined) view.setUint32(8, Number(data.size), true);
  // 0x0c: pad4
  return buf;
}

export class MI_Sint8AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get size(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set size(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_Uint16A (size: 16)
 */
export interface MI_Uint16A {
  /** ptr */
  data: Deno.PointerValue | Uint8Array;
  /** u32 */
  size: number;
}

export const sizeofMI_Uint16A = 16;

export function allocMI_Uint16A(data?: Partial<MI_Uint16A>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Uint16A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  // 0x08: u32
  if (data?.size !== undefined) view.setUint32(8, Number(data.size), true);
  // 0x0c: pad4
  return buf;
}

export class MI_Uint16AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get size(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set size(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_Sint16A (size: 16)
 */
export interface MI_Sint16A {
  /** ptr */
  data: Deno.PointerValue | Uint8Array;
  /** u32 */
  size: number;
}

export const sizeofMI_Sint16A = 16;

export function allocMI_Sint16A(data?: Partial<MI_Sint16A>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Sint16A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  // 0x08: u32
  if (data?.size !== undefined) view.setUint32(8, Number(data.size), true);
  // 0x0c: pad4
  return buf;
}

export class MI_Sint16AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get size(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set size(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_Uint32A (size: 16)
 */
export interface MI_Uint32A {
  /** ptr */
  data: Deno.PointerValue | Uint8Array;
  /** u32 */
  size: number;
}

export const sizeofMI_Uint32A = 16;

export function allocMI_Uint32A(data?: Partial<MI_Uint32A>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Uint32A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  // 0x08: u32
  if (data?.size !== undefined) view.setUint32(8, Number(data.size), true);
  // 0x0c: pad4
  return buf;
}

export class MI_Uint32AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get size(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set size(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_Sint32A (size: 16)
 */
export interface MI_Sint32A {
  /** ptr */
  data: Deno.PointerValue | Uint8Array;
  /** u32 */
  size: number;
}

export const sizeofMI_Sint32A = 16;

export function allocMI_Sint32A(data?: Partial<MI_Sint32A>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Sint32A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  // 0x08: u32
  if (data?.size !== undefined) view.setUint32(8, Number(data.size), true);
  // 0x0c: pad4
  return buf;
}

export class MI_Sint32AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get size(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set size(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_Uint64A (size: 16)
 */
export interface MI_Uint64A {
  /** ptr */
  data: Deno.PointerValue | Uint8Array;
  /** u32 */
  size: number;
}

export const sizeofMI_Uint64A = 16;

export function allocMI_Uint64A(data?: Partial<MI_Uint64A>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Uint64A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  // 0x08: u32
  if (data?.size !== undefined) view.setUint32(8, Number(data.size), true);
  // 0x0c: pad4
  return buf;
}

export class MI_Uint64AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get size(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set size(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_Sint64A (size: 16)
 */
export interface MI_Sint64A {
  /** ptr */
  data: Deno.PointerValue | Uint8Array;
  /** u32 */
  size: number;
}

export const sizeofMI_Sint64A = 16;

export function allocMI_Sint64A(data?: Partial<MI_Sint64A>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Sint64A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  // 0x08: u32
  if (data?.size !== undefined) view.setUint32(8, Number(data.size), true);
  // 0x0c: pad4
  return buf;
}

export class MI_Sint64AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get size(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set size(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_Real32A (size: 16)
 */
export interface MI_Real32A {
  /** ptr */
  data: Deno.PointerValue | Uint8Array;
  /** u32 */
  size: number;
}

export const sizeofMI_Real32A = 16;

export function allocMI_Real32A(data?: Partial<MI_Real32A>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Real32A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  // 0x08: u32
  if (data?.size !== undefined) view.setUint32(8, Number(data.size), true);
  // 0x0c: pad4
  return buf;
}

export class MI_Real32AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get size(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set size(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_Real64A (size: 16)
 */
export interface MI_Real64A {
  /** ptr */
  data: Deno.PointerValue | Uint8Array;
  /** u32 */
  size: number;
}

export const sizeofMI_Real64A = 16;

export function allocMI_Real64A(data?: Partial<MI_Real64A>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Real64A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  // 0x08: u32
  if (data?.size !== undefined) view.setUint32(8, Number(data.size), true);
  // 0x0c: pad4
  return buf;
}

export class MI_Real64AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get size(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set size(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_Char16A (size: 16)
 */
export interface MI_Char16A {
  /** ptr */
  data: Deno.PointerValue | Uint8Array;
  /** u32 */
  size: number;
}

export const sizeofMI_Char16A = 16;

export function allocMI_Char16A(data?: Partial<MI_Char16A>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Char16A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  // 0x08: u32
  if (data?.size !== undefined) view.setUint32(8, Number(data.size), true);
  // 0x0c: pad4
  return buf;
}

export class MI_Char16AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get size(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set size(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_DatetimeA (size: 16)
 */
export interface MI_DatetimeA {
  /** ptr */
  data: Deno.PointerValue | Uint8Array;
  /** u32 */
  size: number;
}

export const sizeofMI_DatetimeA = 16;

export function allocMI_DatetimeA(data?: Partial<MI_DatetimeA>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_DatetimeA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  // 0x08: u32
  if (data?.size !== undefined) view.setUint32(8, Number(data.size), true);
  // 0x0c: pad4
  return buf;
}

export class MI_DatetimeAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get size(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set size(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_StringA (size: 16)
 */
export interface MI_StringA {
  /** ptr */
  data: Deno.PointerValue | Uint8Array;
  /** u32 */
  size: number;
}

export const sizeofMI_StringA = 16;

export function allocMI_StringA(data?: Partial<MI_StringA>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_StringA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  // 0x08: u32
  if (data?.size !== undefined) view.setUint32(8, Number(data.size), true);
  // 0x0c: pad4
  return buf;
}

export class MI_StringAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get size(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set size(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_ReferenceA (size: 16)
 */
export interface MI_ReferenceA {
  /** ptr */
  data: Deno.PointerValue | Uint8Array;
  /** u32 */
  size: number;
}

export const sizeofMI_ReferenceA = 16;

export function allocMI_ReferenceA(data?: Partial<MI_ReferenceA>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ReferenceA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  // 0x08: u32
  if (data?.size !== undefined) view.setUint32(8, Number(data.size), true);
  // 0x0c: pad4
  return buf;
}

export class MI_ReferenceAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get size(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set size(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_InstanceA (size: 16)
 */
export interface MI_InstanceA {
  /** ptr */
  data: Deno.PointerValue | Uint8Array;
  /** u32 */
  size: number;
}

export const sizeofMI_InstanceA = 16;

export function allocMI_InstanceA(data?: Partial<MI_InstanceA>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_InstanceA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  // 0x08: u32
  if (data?.size !== undefined) view.setUint32(8, Number(data.size), true);
  // 0x0c: pad4
  return buf;
}

export class MI_InstanceAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get size(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set size(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_Array (size: 16)
 */
export interface MI_Array {
  /** ptr */
  data: Deno.PointerValue | Uint8Array;
  /** u32 */
  size: number;
}

export const sizeofMI_Array = 16;

export function allocMI_Array(data?: Partial<MI_Array>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Array);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  // 0x08: u32
  if (data?.size !== undefined) view.setUint32(8, Number(data.size), true);
  // 0x0c: pad4
  return buf;
}

export class MI_ArrayView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get size(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set size(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_ConstBooleanA (size: 16)
 */
export interface MI_ConstBooleanA {
  /** ptr */
  data: Deno.PointerValue | Uint8Array;
  /** u32 */
  size: number;
}

export const sizeofMI_ConstBooleanA = 16;

export function allocMI_ConstBooleanA(data?: Partial<MI_ConstBooleanA>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstBooleanA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  // 0x08: u32
  if (data?.size !== undefined) view.setUint32(8, Number(data.size), true);
  // 0x0c: pad4
  return buf;
}

export class MI_ConstBooleanAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get size(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set size(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_ConstUint8A (size: 16)
 */
export interface MI_ConstUint8A {
  /** ptr */
  data: Deno.PointerValue | Uint8Array;
  /** u32 */
  size: number;
}

export const sizeofMI_ConstUint8A = 16;

export function allocMI_ConstUint8A(data?: Partial<MI_ConstUint8A>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstUint8A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  // 0x08: u32
  if (data?.size !== undefined) view.setUint32(8, Number(data.size), true);
  // 0x0c: pad4
  return buf;
}

export class MI_ConstUint8AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get size(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set size(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_ConstSint8A (size: 16)
 */
export interface MI_ConstSint8A {
  /** ptr */
  data: Deno.PointerValue | Uint8Array;
  /** u32 */
  size: number;
}

export const sizeofMI_ConstSint8A = 16;

export function allocMI_ConstSint8A(data?: Partial<MI_ConstSint8A>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstSint8A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  // 0x08: u32
  if (data?.size !== undefined) view.setUint32(8, Number(data.size), true);
  // 0x0c: pad4
  return buf;
}

export class MI_ConstSint8AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get size(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set size(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_ConstUint16A (size: 16)
 */
export interface MI_ConstUint16A {
  /** ptr */
  data: Deno.PointerValue | Uint8Array;
  /** u32 */
  size: number;
}

export const sizeofMI_ConstUint16A = 16;

export function allocMI_ConstUint16A(data?: Partial<MI_ConstUint16A>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstUint16A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  // 0x08: u32
  if (data?.size !== undefined) view.setUint32(8, Number(data.size), true);
  // 0x0c: pad4
  return buf;
}

export class MI_ConstUint16AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get size(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set size(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_ConstSint16A (size: 16)
 */
export interface MI_ConstSint16A {
  /** ptr */
  data: Deno.PointerValue | Uint8Array;
  /** u32 */
  size: number;
}

export const sizeofMI_ConstSint16A = 16;

export function allocMI_ConstSint16A(data?: Partial<MI_ConstSint16A>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstSint16A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  // 0x08: u32
  if (data?.size !== undefined) view.setUint32(8, Number(data.size), true);
  // 0x0c: pad4
  return buf;
}

export class MI_ConstSint16AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get size(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set size(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_ConstUint32A (size: 16)
 */
export interface MI_ConstUint32A {
  /** ptr */
  data: Deno.PointerValue | Uint8Array;
  /** u32 */
  size: number;
}

export const sizeofMI_ConstUint32A = 16;

export function allocMI_ConstUint32A(data?: Partial<MI_ConstUint32A>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstUint32A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  // 0x08: u32
  if (data?.size !== undefined) view.setUint32(8, Number(data.size), true);
  // 0x0c: pad4
  return buf;
}

export class MI_ConstUint32AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get size(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set size(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_ConstSint32A (size: 16)
 */
export interface MI_ConstSint32A {
  /** ptr */
  data: Deno.PointerValue | Uint8Array;
  /** u32 */
  size: number;
}

export const sizeofMI_ConstSint32A = 16;

export function allocMI_ConstSint32A(data?: Partial<MI_ConstSint32A>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstSint32A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  // 0x08: u32
  if (data?.size !== undefined) view.setUint32(8, Number(data.size), true);
  // 0x0c: pad4
  return buf;
}

export class MI_ConstSint32AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get size(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set size(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_ConstUint64A (size: 16)
 */
export interface MI_ConstUint64A {
  /** ptr */
  data: Deno.PointerValue | Uint8Array;
  /** u32 */
  size: number;
}

export const sizeofMI_ConstUint64A = 16;

export function allocMI_ConstUint64A(data?: Partial<MI_ConstUint64A>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstUint64A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  // 0x08: u32
  if (data?.size !== undefined) view.setUint32(8, Number(data.size), true);
  // 0x0c: pad4
  return buf;
}

export class MI_ConstUint64AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get size(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set size(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_ConstSint64A (size: 16)
 */
export interface MI_ConstSint64A {
  /** ptr */
  data: Deno.PointerValue | Uint8Array;
  /** u32 */
  size: number;
}

export const sizeofMI_ConstSint64A = 16;

export function allocMI_ConstSint64A(data?: Partial<MI_ConstSint64A>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstSint64A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  // 0x08: u32
  if (data?.size !== undefined) view.setUint32(8, Number(data.size), true);
  // 0x0c: pad4
  return buf;
}

export class MI_ConstSint64AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get size(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set size(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_ConstReal32A (size: 16)
 */
export interface MI_ConstReal32A {
  /** ptr */
  data: Deno.PointerValue | Uint8Array;
  /** u32 */
  size: number;
}

export const sizeofMI_ConstReal32A = 16;

export function allocMI_ConstReal32A(data?: Partial<MI_ConstReal32A>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstReal32A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  // 0x08: u32
  if (data?.size !== undefined) view.setUint32(8, Number(data.size), true);
  // 0x0c: pad4
  return buf;
}

export class MI_ConstReal32AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get size(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set size(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_ConstReal64A (size: 16)
 */
export interface MI_ConstReal64A {
  /** ptr */
  data: Deno.PointerValue | Uint8Array;
  /** u32 */
  size: number;
}

export const sizeofMI_ConstReal64A = 16;

export function allocMI_ConstReal64A(data?: Partial<MI_ConstReal64A>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstReal64A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  // 0x08: u32
  if (data?.size !== undefined) view.setUint32(8, Number(data.size), true);
  // 0x0c: pad4
  return buf;
}

export class MI_ConstReal64AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get size(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set size(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_ConstChar16A (size: 16)
 */
export interface MI_ConstChar16A {
  /** ptr */
  data: Deno.PointerValue | Uint8Array;
  /** u32 */
  size: number;
}

export const sizeofMI_ConstChar16A = 16;

export function allocMI_ConstChar16A(data?: Partial<MI_ConstChar16A>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstChar16A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  // 0x08: u32
  if (data?.size !== undefined) view.setUint32(8, Number(data.size), true);
  // 0x0c: pad4
  return buf;
}

export class MI_ConstChar16AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get size(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set size(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_ConstDatetimeA (size: 16)
 */
export interface MI_ConstDatetimeA {
  /** ptr */
  data: Deno.PointerValue | Uint8Array;
  /** u32 */
  size: number;
}

export const sizeofMI_ConstDatetimeA = 16;

export function allocMI_ConstDatetimeA(data?: Partial<MI_ConstDatetimeA>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstDatetimeA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  // 0x08: u32
  if (data?.size !== undefined) view.setUint32(8, Number(data.size), true);
  // 0x0c: pad4
  return buf;
}

export class MI_ConstDatetimeAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get size(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set size(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_ConstStringA (size: 16)
 */
export interface MI_ConstStringA {
  /** ptr */
  data: Deno.PointerValue | Uint8Array;
  /** u32 */
  size: number;
}

export const sizeofMI_ConstStringA = 16;

export function allocMI_ConstStringA(data?: Partial<MI_ConstStringA>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstStringA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  // 0x08: u32
  if (data?.size !== undefined) view.setUint32(8, Number(data.size), true);
  // 0x0c: pad4
  return buf;
}

export class MI_ConstStringAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get size(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set size(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_ConstReferenceA (size: 16)
 */
export interface MI_ConstReferenceA {
  /** ptr */
  data: Deno.PointerValue | Uint8Array;
  /** u32 */
  size: number;
}

export const sizeofMI_ConstReferenceA = 16;

export function allocMI_ConstReferenceA(data?: Partial<MI_ConstReferenceA>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstReferenceA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  // 0x08: u32
  if (data?.size !== undefined) view.setUint32(8, Number(data.size), true);
  // 0x0c: pad4
  return buf;
}

export class MI_ConstReferenceAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get size(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set size(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_ConstInstanceA (size: 16)
 */
export interface MI_ConstInstanceA {
  /** ptr */
  data: Deno.PointerValue | Uint8Array;
  /** u32 */
  size: number;
}

export const sizeofMI_ConstInstanceA = 16;

export function allocMI_ConstInstanceA(data?: Partial<MI_ConstInstanceA>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstInstanceA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  // 0x08: u32
  if (data?.size !== undefined) view.setUint32(8, Number(data.size), true);
  // 0x0c: pad4
  return buf;
}

export class MI_ConstInstanceAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get size(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set size(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_Value (size: 224)
 */
export interface MI_Value {
  /** u8 */
  boolean__: number;
  /** u8 */
  uint8: number;
  /** i8 */
  sint8: number;
  /** u16 */
  uint16: number;
  /** i16 */
  sint16: number;
  /** u32 */
  uint32: number;
  /** i32 */
  sint32: number;
  /** u64 */
  uint64: bigint | number;
  /** i64 */
  sint64: bigint | number;
  /** f32 */
  real32: number;
  /** f64 */
  real64: number;
  /** u16 */
  char16: number;
  /** Windows.Win32.System.Wmi.MI_Datetime */
  datetime: Uint8Array | Deno.PointerValue;
  /** ptr */
  string: Deno.PointerValue | Uint8Array;
  /** ptr */
  instance: Deno.PointerValue | Uint8Array;
  /** ptr */
  reference: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.System.Wmi.MI_BooleanA */
  booleana: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Wmi.MI_Uint8A */
  uint8a: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Wmi.MI_Sint8A */
  sint8a: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Wmi.MI_Uint16A */
  uint16a: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Wmi.MI_Sint16A */
  sint16a: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Wmi.MI_Uint32A */
  uint32a: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Wmi.MI_Sint32A */
  sint32a: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Wmi.MI_Uint64A */
  uint64a: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Wmi.MI_Sint64A */
  sint64a: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Wmi.MI_Real32A */
  real32a: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Wmi.MI_Real64A */
  real64a: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Wmi.MI_Char16A */
  char16a: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Wmi.MI_DatetimeA */
  datetimea: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Wmi.MI_StringA */
  stringa: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Wmi.MI_ReferenceA */
  referencea: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Wmi.MI_InstanceA */
  instancea: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Wmi.MI_Array */
  array: Uint8Array | Deno.PointerValue;
}

export const sizeofMI_Value = 224;

export function allocMI_Value(data?: Partial<MI_Value>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Value);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.boolean__ !== undefined) view.setUint8(0, Number(data.boolean__));
  // 0x01: u8
  if (data?.uint8 !== undefined) view.setUint8(1, Number(data.uint8));
  // 0x02: i8
  if (data?.sint8 !== undefined) view.setInt8(2, Number(data.sint8));
  // 0x03: u16
  if (data?.uint16 !== undefined) view.setUint16(3, Number(data.uint16), true);
  // 0x05: i16
  if (data?.sint16 !== undefined) view.setInt16(5, Number(data.sint16), true);
  // 0x07: u32
  if (data?.uint32 !== undefined) view.setUint32(7, Number(data.uint32), true);
  // 0x0b: i32
  if (data?.sint32 !== undefined) view.setInt32(11, Number(data.sint32), true);
  // 0x0f: pad1
  // 0x10: u64
  if (data?.uint64 !== undefined) view.setBigUint64(16, BigInt(data.uint64), true);
  // 0x18: i64
  if (data?.sint64 !== undefined) view.setBigInt64(24, BigInt(data.sint64), true);
  // 0x20: f32
  if (data?.real32 !== undefined) view.setFloat32(32, Number(data.real32), true);
  // 0x24: pad4
  // 0x28: f64
  if (data?.real64 !== undefined) view.setFloat64(40, Number(data.real64), true);
  // 0x30: u16
  if (data?.char16 !== undefined) view.setUint16(48, Number(data.char16), true);
  // 0x32: pad6
  // 0x38: pointer
  if (data?.datetime !== undefined) view.setBigUint64(56, data.datetime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.datetime))), true);
  // 0x40: pointer
  if (data?.string !== undefined) view.setBigUint64(64, data.string === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.string))), true);
  // 0x48: pointer
  if (data?.instance !== undefined) view.setBigUint64(72, data.instance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.instance))), true);
  // 0x50: pointer
  if (data?.reference !== undefined) view.setBigUint64(80, data.reference === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.reference))), true);
  // 0x58: pointer
  if (data?.booleana !== undefined) view.setBigUint64(88, data.booleana === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.booleana))), true);
  // 0x60: pointer
  if (data?.uint8a !== undefined) view.setBigUint64(96, data.uint8a === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.uint8a))), true);
  // 0x68: pointer
  if (data?.sint8a !== undefined) view.setBigUint64(104, data.sint8a === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sint8a))), true);
  // 0x70: pointer
  if (data?.uint16a !== undefined) view.setBigUint64(112, data.uint16a === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.uint16a))), true);
  // 0x78: pointer
  if (data?.sint16a !== undefined) view.setBigUint64(120, data.sint16a === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sint16a))), true);
  // 0x80: pointer
  if (data?.uint32a !== undefined) view.setBigUint64(128, data.uint32a === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.uint32a))), true);
  // 0x88: pointer
  if (data?.sint32a !== undefined) view.setBigUint64(136, data.sint32a === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sint32a))), true);
  // 0x90: pointer
  if (data?.uint64a !== undefined) view.setBigUint64(144, data.uint64a === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.uint64a))), true);
  // 0x98: pointer
  if (data?.sint64a !== undefined) view.setBigUint64(152, data.sint64a === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sint64a))), true);
  // 0xa0: pointer
  if (data?.real32a !== undefined) view.setBigUint64(160, data.real32a === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.real32a))), true);
  // 0xa8: pointer
  if (data?.real64a !== undefined) view.setBigUint64(168, data.real64a === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.real64a))), true);
  // 0xb0: pointer
  if (data?.char16a !== undefined) view.setBigUint64(176, data.char16a === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.char16a))), true);
  // 0xb8: pointer
  if (data?.datetimea !== undefined) view.setBigUint64(184, data.datetimea === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.datetimea))), true);
  // 0xc0: pointer
  if (data?.stringa !== undefined) view.setBigUint64(192, data.stringa === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.stringa))), true);
  // 0xc8: pointer
  if (data?.referencea !== undefined) view.setBigUint64(200, data.referencea === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.referencea))), true);
  // 0xd0: pointer
  if (data?.instancea !== undefined) view.setBigUint64(208, data.instancea === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.instancea))), true);
  // 0xd8: pointer
  if (data?.array !== undefined) view.setBigUint64(216, data.array === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.array))), true);
  return buf;
}

export class MI_ValueView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get boolean__(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get uint8(): number {
    return this.view.getUint8(1);
  }

  // 0x02: i8
  get sint8(): number {
    return this.view.getInt8(2);
  }

  // 0x03: u16
  get uint16(): number {
    return this.view.getUint16(3, true);
  }

  // 0x05: i16
  get sint16(): number {
    return this.view.getInt16(5, true);
  }

  // 0x07: u32
  get uint32(): number {
    return this.view.getUint32(7, true);
  }

  // 0x0b: i32
  get sint32(): number {
    return this.view.getInt32(11, true);
  }

  // 0x0f: pad1

  // 0x10: u64
  get uint64(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: i64
  get sint64(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: f32
  get real32(): number {
    return this.view.getFloat32(32, true);
  }

  // 0x24: pad4

  // 0x28: f64
  get real64(): number {
    return this.view.getFloat64(40, true);
  }

  // 0x30: u16
  get char16(): number {
    return this.view.getUint16(48, true);
  }

  // 0x32: pad6

  // 0x38: pointer
  get datetime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get string(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get instance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get reference(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get booleana(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get uint8a(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get sint8a(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get uint16a(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get sint16a(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: pointer
  get uint32a(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x88: pointer
  get sint32a(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(136, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x90: pointer
  get uint64a(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(144, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x98: pointer
  get sint64a(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(152, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa0: pointer
  get real32a(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(160, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa8: pointer
  get real64a(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(168, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xb0: pointer
  get char16a(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(176, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xb8: pointer
  get datetimea(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(184, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xc0: pointer
  get stringa(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(192, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xc8: pointer
  get referencea(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(200, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xd0: pointer
  get instancea(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(208, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xd8: pointer
  get array(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(216, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set boolean__(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set uint8(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: i8
  set sint8(value: number) {
    this.view.setInt8(2, value);
  }

  // 0x03: u16
  set uint16(value: number) {
    this.view.setUint16(3, value, true);
  }

  // 0x05: i16
  set sint16(value: number) {
    this.view.setInt16(5, value, true);
  }

  // 0x07: u32
  set uint32(value: number) {
    this.view.setUint32(7, value, true);
  }

  // 0x0b: i32
  set sint32(value: number) {
    this.view.setInt32(11, value, true);
  }

  // 0x0f: pad1

  // 0x10: u64
  set uint64(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: i64
  set sint64(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: f32
  set real32(value: number) {
    this.view.setFloat32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: f64
  set real64(value: number) {
    this.view.setFloat64(40, value, true);
  }

  // 0x30: u16
  set char16(value: number) {
    this.view.setUint16(48, value, true);
  }

  // 0x32: pad6

  // 0x38: pointer
  set datetime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set string(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set instance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set reference(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set booleana(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set uint8a(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: pointer
  set sint8a(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set uint16a(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set sint16a(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: pointer
  set uint32a(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x88: pointer
  set sint32a(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(136, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x90: pointer
  set uint64a(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(144, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x98: pointer
  set sint64a(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(152, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa0: pointer
  set real32a(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(160, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa8: pointer
  set real64a(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(168, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xb0: pointer
  set char16a(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(176, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xb8: pointer
  set datetimea(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(184, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xc0: pointer
  set stringa(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(192, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xc8: pointer
  set referencea(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(200, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xd0: pointer
  set instancea(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(208, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xd8: pointer
  set array(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(216, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_BooleanField (size: 8)
 */
export interface MI_BooleanField {
  /** u8 */
  value: number;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_BooleanField = 8;

export function allocMI_BooleanField(data?: Partial<MI_BooleanField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_BooleanField);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.value !== undefined) view.setUint8(0, Number(data.value));
  // 0x01: u8
  if (data?.exists !== undefined) view.setUint8(1, Number(data.exists));
  // 0x02: u8
  if (data?.flags !== undefined) view.setUint8(2, Number(data.flags));
  // 0x03: pad5
  return buf;
}

export class MI_BooleanFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get value(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get exists(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get flags(): number {
    return this.view.getUint8(2);
  }

  // 0x03: pad5

  // 0x00: u8
  set value(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set exists(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set flags(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: pad5
}

/**
 * Windows.Win32.System.Wmi.MI_Sint8Field (size: 8)
 */
export interface MI_Sint8Field {
  /** i8 */
  value: number;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_Sint8Field = 8;

export function allocMI_Sint8Field(data?: Partial<MI_Sint8Field>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Sint8Field);
  const view = new DataView(buf.buffer);
  // 0x00: i8
  if (data?.value !== undefined) view.setInt8(0, Number(data.value));
  // 0x01: u8
  if (data?.exists !== undefined) view.setUint8(1, Number(data.exists));
  // 0x02: u8
  if (data?.flags !== undefined) view.setUint8(2, Number(data.flags));
  // 0x03: pad5
  return buf;
}

export class MI_Sint8FieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i8
  get value(): number {
    return this.view.getInt8(0);
  }

  // 0x01: u8
  get exists(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get flags(): number {
    return this.view.getUint8(2);
  }

  // 0x03: pad5

  // 0x00: i8
  set value(value: number) {
    this.view.setInt8(0, value);
  }

  // 0x01: u8
  set exists(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set flags(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: pad5
}

/**
 * Windows.Win32.System.Wmi.MI_Uint8Field (size: 8)
 */
export interface MI_Uint8Field {
  /** u8 */
  value: number;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_Uint8Field = 8;

export function allocMI_Uint8Field(data?: Partial<MI_Uint8Field>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Uint8Field);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.value !== undefined) view.setUint8(0, Number(data.value));
  // 0x01: u8
  if (data?.exists !== undefined) view.setUint8(1, Number(data.exists));
  // 0x02: u8
  if (data?.flags !== undefined) view.setUint8(2, Number(data.flags));
  // 0x03: pad5
  return buf;
}

export class MI_Uint8FieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get value(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get exists(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get flags(): number {
    return this.view.getUint8(2);
  }

  // 0x03: pad5

  // 0x00: u8
  set value(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set exists(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set flags(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: pad5
}

/**
 * Windows.Win32.System.Wmi.MI_Sint16Field (size: 8)
 */
export interface MI_Sint16Field {
  /** i16 */
  value: number;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_Sint16Field = 8;

export function allocMI_Sint16Field(data?: Partial<MI_Sint16Field>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Sint16Field);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.value !== undefined) view.setInt16(0, Number(data.value), true);
  // 0x02: u8
  if (data?.exists !== undefined) view.setUint8(2, Number(data.exists));
  // 0x03: u8
  if (data?.flags !== undefined) view.setUint8(3, Number(data.flags));
  // 0x04: pad4
  return buf;
}

export class MI_Sint16FieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i16
  get value(): number {
    return this.view.getInt16(0, true);
  }

  // 0x02: u8
  get exists(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get flags(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x00: i16
  set value(value: number) {
    this.view.setInt16(0, value, true);
  }

  // 0x02: u8
  set exists(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set flags(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_Uint16Field (size: 8)
 */
export interface MI_Uint16Field {
  /** u16 */
  value: number;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_Uint16Field = 8;

export function allocMI_Uint16Field(data?: Partial<MI_Uint16Field>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Uint16Field);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.value !== undefined) view.setUint16(0, Number(data.value), true);
  // 0x02: u8
  if (data?.exists !== undefined) view.setUint8(2, Number(data.exists));
  // 0x03: u8
  if (data?.flags !== undefined) view.setUint8(3, Number(data.flags));
  // 0x04: pad4
  return buf;
}

export class MI_Uint16FieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get value(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get exists(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get flags(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x00: u16
  set value(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set exists(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set flags(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_Sint32Field (size: 8)
 */
export interface MI_Sint32Field {
  /** i32 */
  value: number;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_Sint32Field = 8;

export function allocMI_Sint32Field(data?: Partial<MI_Sint32Field>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Sint32Field);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.value !== undefined) view.setInt32(0, Number(data.value), true);
  // 0x04: u8
  if (data?.exists !== undefined) view.setUint8(4, Number(data.exists));
  // 0x05: u8
  if (data?.flags !== undefined) view.setUint8(5, Number(data.flags));
  // 0x06: pad2
  return buf;
}

export class MI_Sint32FieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get value(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u8
  get exists(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get flags(): number {
    return this.view.getUint8(5);
  }

  // 0x06: pad2

  // 0x00: i32
  set value(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u8
  set exists(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set flags(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: pad2
}

/**
 * Windows.Win32.System.Wmi.MI_Uint32Field (size: 8)
 */
export interface MI_Uint32Field {
  /** u32 */
  value: number;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_Uint32Field = 8;

export function allocMI_Uint32Field(data?: Partial<MI_Uint32Field>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Uint32Field);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.value !== undefined) view.setUint32(0, Number(data.value), true);
  // 0x04: u8
  if (data?.exists !== undefined) view.setUint8(4, Number(data.exists));
  // 0x05: u8
  if (data?.flags !== undefined) view.setUint8(5, Number(data.flags));
  // 0x06: pad2
  return buf;
}

export class MI_Uint32FieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get value(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u8
  get exists(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get flags(): number {
    return this.view.getUint8(5);
  }

  // 0x06: pad2

  // 0x00: u32
  set value(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u8
  set exists(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set flags(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: pad2
}

/**
 * Windows.Win32.System.Wmi.MI_Sint64Field (size: 16)
 */
export interface MI_Sint64Field {
  /** i64 */
  value: bigint | number;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_Sint64Field = 16;

export function allocMI_Sint64Field(data?: Partial<MI_Sint64Field>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Sint64Field);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.value !== undefined) view.setBigInt64(0, BigInt(data.value), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_Sint64FieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get value(): bigint | number {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: i64
  set value(value: bigint | number) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_Uint64Field (size: 16)
 */
export interface MI_Uint64Field {
  /** u64 */
  value: bigint | number;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_Uint64Field = 16;

export function allocMI_Uint64Field(data?: Partial<MI_Uint64Field>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Uint64Field);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.value !== undefined) view.setBigUint64(0, BigInt(data.value), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_Uint64FieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get value(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: u64
  set value(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_Real32Field (size: 8)
 */
export interface MI_Real32Field {
  /** f32 */
  value: number;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_Real32Field = 8;

export function allocMI_Real32Field(data?: Partial<MI_Real32Field>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Real32Field);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.value !== undefined) view.setFloat32(0, Number(data.value), true);
  // 0x04: u8
  if (data?.exists !== undefined) view.setUint8(4, Number(data.exists));
  // 0x05: u8
  if (data?.flags !== undefined) view.setUint8(5, Number(data.flags));
  // 0x06: pad2
  return buf;
}

export class MI_Real32FieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get value(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: u8
  get exists(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get flags(): number {
    return this.view.getUint8(5);
  }

  // 0x06: pad2

  // 0x00: f32
  set value(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: u8
  set exists(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set flags(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: pad2
}

/**
 * Windows.Win32.System.Wmi.MI_Real64Field (size: 16)
 */
export interface MI_Real64Field {
  /** f64 */
  value: number;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_Real64Field = 16;

export function allocMI_Real64Field(data?: Partial<MI_Real64Field>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Real64Field);
  const view = new DataView(buf.buffer);
  // 0x00: f64
  if (data?.value !== undefined) view.setFloat64(0, Number(data.value), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_Real64FieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f64
  get value(): number {
    return this.view.getFloat64(0, true);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: f64
  set value(value: number) {
    this.view.setFloat64(0, value, true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_Char16Field (size: 8)
 */
export interface MI_Char16Field {
  /** u16 */
  value: number;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_Char16Field = 8;

export function allocMI_Char16Field(data?: Partial<MI_Char16Field>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Char16Field);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.value !== undefined) view.setUint16(0, Number(data.value), true);
  // 0x02: u8
  if (data?.exists !== undefined) view.setUint8(2, Number(data.exists));
  // 0x03: u8
  if (data?.flags !== undefined) view.setUint8(3, Number(data.flags));
  // 0x04: pad4
  return buf;
}

export class MI_Char16FieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get value(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get exists(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get flags(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x00: u16
  set value(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set exists(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set flags(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_DatetimeField (size: 16)
 */
export interface MI_DatetimeField {
  /** Windows.Win32.System.Wmi.MI_Datetime */
  value: Uint8Array | Deno.PointerValue;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_DatetimeField = 16;

export function allocMI_DatetimeField(data?: Partial<MI_DatetimeField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_DatetimeField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_DatetimeFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_StringField (size: 16)
 */
export interface MI_StringField {
  /** ptr */
  value: Deno.PointerValue | Uint8Array;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_StringField = 16;

export function allocMI_StringField(data?: Partial<MI_StringField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_StringField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_StringFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_ReferenceField (size: 16)
 */
export interface MI_ReferenceField {
  /** ptr */
  value: Deno.PointerValue | Uint8Array;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_ReferenceField = 16;

export function allocMI_ReferenceField(data?: Partial<MI_ReferenceField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ReferenceField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_ReferenceFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_InstanceField (size: 16)
 */
export interface MI_InstanceField {
  /** ptr */
  value: Deno.PointerValue | Uint8Array;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_InstanceField = 16;

export function allocMI_InstanceField(data?: Partial<MI_InstanceField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_InstanceField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_InstanceFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_BooleanAField (size: 16)
 */
export interface MI_BooleanAField {
  /** Windows.Win32.System.Wmi.MI_BooleanA */
  value: Uint8Array | Deno.PointerValue;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_BooleanAField = 16;

export function allocMI_BooleanAField(data?: Partial<MI_BooleanAField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_BooleanAField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_BooleanAFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_Uint8AField (size: 16)
 */
export interface MI_Uint8AField {
  /** Windows.Win32.System.Wmi.MI_Uint8A */
  value: Uint8Array | Deno.PointerValue;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_Uint8AField = 16;

export function allocMI_Uint8AField(data?: Partial<MI_Uint8AField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Uint8AField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_Uint8AFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_Sint8AField (size: 16)
 */
export interface MI_Sint8AField {
  /** Windows.Win32.System.Wmi.MI_Sint8A */
  value: Uint8Array | Deno.PointerValue;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_Sint8AField = 16;

export function allocMI_Sint8AField(data?: Partial<MI_Sint8AField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Sint8AField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_Sint8AFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_Uint16AField (size: 16)
 */
export interface MI_Uint16AField {
  /** Windows.Win32.System.Wmi.MI_Uint16A */
  value: Uint8Array | Deno.PointerValue;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_Uint16AField = 16;

export function allocMI_Uint16AField(data?: Partial<MI_Uint16AField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Uint16AField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_Uint16AFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_Sint16AField (size: 16)
 */
export interface MI_Sint16AField {
  /** Windows.Win32.System.Wmi.MI_Sint16A */
  value: Uint8Array | Deno.PointerValue;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_Sint16AField = 16;

export function allocMI_Sint16AField(data?: Partial<MI_Sint16AField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Sint16AField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_Sint16AFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_Uint32AField (size: 16)
 */
export interface MI_Uint32AField {
  /** Windows.Win32.System.Wmi.MI_Uint32A */
  value: Uint8Array | Deno.PointerValue;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_Uint32AField = 16;

export function allocMI_Uint32AField(data?: Partial<MI_Uint32AField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Uint32AField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_Uint32AFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_Sint32AField (size: 16)
 */
export interface MI_Sint32AField {
  /** Windows.Win32.System.Wmi.MI_Sint32A */
  value: Uint8Array | Deno.PointerValue;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_Sint32AField = 16;

export function allocMI_Sint32AField(data?: Partial<MI_Sint32AField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Sint32AField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_Sint32AFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_Uint64AField (size: 16)
 */
export interface MI_Uint64AField {
  /** Windows.Win32.System.Wmi.MI_Uint64A */
  value: Uint8Array | Deno.PointerValue;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_Uint64AField = 16;

export function allocMI_Uint64AField(data?: Partial<MI_Uint64AField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Uint64AField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_Uint64AFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_Sint64AField (size: 16)
 */
export interface MI_Sint64AField {
  /** Windows.Win32.System.Wmi.MI_Sint64A */
  value: Uint8Array | Deno.PointerValue;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_Sint64AField = 16;

export function allocMI_Sint64AField(data?: Partial<MI_Sint64AField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Sint64AField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_Sint64AFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_Real32AField (size: 16)
 */
export interface MI_Real32AField {
  /** Windows.Win32.System.Wmi.MI_Real32A */
  value: Uint8Array | Deno.PointerValue;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_Real32AField = 16;

export function allocMI_Real32AField(data?: Partial<MI_Real32AField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Real32AField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_Real32AFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_Real64AField (size: 16)
 */
export interface MI_Real64AField {
  /** Windows.Win32.System.Wmi.MI_Real64A */
  value: Uint8Array | Deno.PointerValue;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_Real64AField = 16;

export function allocMI_Real64AField(data?: Partial<MI_Real64AField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Real64AField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_Real64AFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_Char16AField (size: 16)
 */
export interface MI_Char16AField {
  /** Windows.Win32.System.Wmi.MI_Char16A */
  value: Uint8Array | Deno.PointerValue;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_Char16AField = 16;

export function allocMI_Char16AField(data?: Partial<MI_Char16AField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Char16AField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_Char16AFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_DatetimeAField (size: 16)
 */
export interface MI_DatetimeAField {
  /** Windows.Win32.System.Wmi.MI_DatetimeA */
  value: Uint8Array | Deno.PointerValue;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_DatetimeAField = 16;

export function allocMI_DatetimeAField(data?: Partial<MI_DatetimeAField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_DatetimeAField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_DatetimeAFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_StringAField (size: 16)
 */
export interface MI_StringAField {
  /** Windows.Win32.System.Wmi.MI_StringA */
  value: Uint8Array | Deno.PointerValue;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_StringAField = 16;

export function allocMI_StringAField(data?: Partial<MI_StringAField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_StringAField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_StringAFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_ReferenceAField (size: 16)
 */
export interface MI_ReferenceAField {
  /** Windows.Win32.System.Wmi.MI_ReferenceA */
  value: Uint8Array | Deno.PointerValue;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_ReferenceAField = 16;

export function allocMI_ReferenceAField(data?: Partial<MI_ReferenceAField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ReferenceAField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_ReferenceAFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_InstanceAField (size: 16)
 */
export interface MI_InstanceAField {
  /** Windows.Win32.System.Wmi.MI_InstanceA */
  value: Uint8Array | Deno.PointerValue;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_InstanceAField = 16;

export function allocMI_InstanceAField(data?: Partial<MI_InstanceAField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_InstanceAField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_InstanceAFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_ArrayField (size: 16)
 */
export interface MI_ArrayField {
  /** Windows.Win32.System.Wmi.MI_Array */
  value: Uint8Array | Deno.PointerValue;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_ArrayField = 16;

export function allocMI_ArrayField(data?: Partial<MI_ArrayField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ArrayField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_ArrayFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_ConstBooleanField (size: 8)
 */
export interface MI_ConstBooleanField {
  /** u8 */
  value: number;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_ConstBooleanField = 8;

export function allocMI_ConstBooleanField(data?: Partial<MI_ConstBooleanField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstBooleanField);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.value !== undefined) view.setUint8(0, Number(data.value));
  // 0x01: u8
  if (data?.exists !== undefined) view.setUint8(1, Number(data.exists));
  // 0x02: u8
  if (data?.flags !== undefined) view.setUint8(2, Number(data.flags));
  // 0x03: pad5
  return buf;
}

export class MI_ConstBooleanFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get value(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get exists(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get flags(): number {
    return this.view.getUint8(2);
  }

  // 0x03: pad5

  // 0x00: u8
  set value(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set exists(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set flags(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: pad5
}

/**
 * Windows.Win32.System.Wmi.MI_ConstSint8Field (size: 8)
 */
export interface MI_ConstSint8Field {
  /** i8 */
  value: number;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_ConstSint8Field = 8;

export function allocMI_ConstSint8Field(data?: Partial<MI_ConstSint8Field>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstSint8Field);
  const view = new DataView(buf.buffer);
  // 0x00: i8
  if (data?.value !== undefined) view.setInt8(0, Number(data.value));
  // 0x01: u8
  if (data?.exists !== undefined) view.setUint8(1, Number(data.exists));
  // 0x02: u8
  if (data?.flags !== undefined) view.setUint8(2, Number(data.flags));
  // 0x03: pad5
  return buf;
}

export class MI_ConstSint8FieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i8
  get value(): number {
    return this.view.getInt8(0);
  }

  // 0x01: u8
  get exists(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get flags(): number {
    return this.view.getUint8(2);
  }

  // 0x03: pad5

  // 0x00: i8
  set value(value: number) {
    this.view.setInt8(0, value);
  }

  // 0x01: u8
  set exists(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set flags(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: pad5
}

/**
 * Windows.Win32.System.Wmi.MI_ConstUint8Field (size: 8)
 */
export interface MI_ConstUint8Field {
  /** u8 */
  value: number;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_ConstUint8Field = 8;

export function allocMI_ConstUint8Field(data?: Partial<MI_ConstUint8Field>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstUint8Field);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.value !== undefined) view.setUint8(0, Number(data.value));
  // 0x01: u8
  if (data?.exists !== undefined) view.setUint8(1, Number(data.exists));
  // 0x02: u8
  if (data?.flags !== undefined) view.setUint8(2, Number(data.flags));
  // 0x03: pad5
  return buf;
}

export class MI_ConstUint8FieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get value(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get exists(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get flags(): number {
    return this.view.getUint8(2);
  }

  // 0x03: pad5

  // 0x00: u8
  set value(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set exists(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set flags(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: pad5
}

/**
 * Windows.Win32.System.Wmi.MI_ConstSint16Field (size: 8)
 */
export interface MI_ConstSint16Field {
  /** i16 */
  value: number;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_ConstSint16Field = 8;

export function allocMI_ConstSint16Field(data?: Partial<MI_ConstSint16Field>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstSint16Field);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.value !== undefined) view.setInt16(0, Number(data.value), true);
  // 0x02: u8
  if (data?.exists !== undefined) view.setUint8(2, Number(data.exists));
  // 0x03: u8
  if (data?.flags !== undefined) view.setUint8(3, Number(data.flags));
  // 0x04: pad4
  return buf;
}

export class MI_ConstSint16FieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i16
  get value(): number {
    return this.view.getInt16(0, true);
  }

  // 0x02: u8
  get exists(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get flags(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x00: i16
  set value(value: number) {
    this.view.setInt16(0, value, true);
  }

  // 0x02: u8
  set exists(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set flags(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_ConstUint16Field (size: 8)
 */
export interface MI_ConstUint16Field {
  /** u16 */
  value: number;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_ConstUint16Field = 8;

export function allocMI_ConstUint16Field(data?: Partial<MI_ConstUint16Field>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstUint16Field);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.value !== undefined) view.setUint16(0, Number(data.value), true);
  // 0x02: u8
  if (data?.exists !== undefined) view.setUint8(2, Number(data.exists));
  // 0x03: u8
  if (data?.flags !== undefined) view.setUint8(3, Number(data.flags));
  // 0x04: pad4
  return buf;
}

export class MI_ConstUint16FieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get value(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get exists(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get flags(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x00: u16
  set value(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set exists(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set flags(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_ConstSint32Field (size: 8)
 */
export interface MI_ConstSint32Field {
  /** i32 */
  value: number;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_ConstSint32Field = 8;

export function allocMI_ConstSint32Field(data?: Partial<MI_ConstSint32Field>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstSint32Field);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.value !== undefined) view.setInt32(0, Number(data.value), true);
  // 0x04: u8
  if (data?.exists !== undefined) view.setUint8(4, Number(data.exists));
  // 0x05: u8
  if (data?.flags !== undefined) view.setUint8(5, Number(data.flags));
  // 0x06: pad2
  return buf;
}

export class MI_ConstSint32FieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get value(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u8
  get exists(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get flags(): number {
    return this.view.getUint8(5);
  }

  // 0x06: pad2

  // 0x00: i32
  set value(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u8
  set exists(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set flags(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: pad2
}

/**
 * Windows.Win32.System.Wmi.MI_ConstUint32Field (size: 8)
 */
export interface MI_ConstUint32Field {
  /** u32 */
  value: number;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_ConstUint32Field = 8;

export function allocMI_ConstUint32Field(data?: Partial<MI_ConstUint32Field>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstUint32Field);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.value !== undefined) view.setUint32(0, Number(data.value), true);
  // 0x04: u8
  if (data?.exists !== undefined) view.setUint8(4, Number(data.exists));
  // 0x05: u8
  if (data?.flags !== undefined) view.setUint8(5, Number(data.flags));
  // 0x06: pad2
  return buf;
}

export class MI_ConstUint32FieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get value(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u8
  get exists(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get flags(): number {
    return this.view.getUint8(5);
  }

  // 0x06: pad2

  // 0x00: u32
  set value(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u8
  set exists(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set flags(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: pad2
}

/**
 * Windows.Win32.System.Wmi.MI_ConstSint64Field (size: 16)
 */
export interface MI_ConstSint64Field {
  /** i64 */
  value: bigint | number;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_ConstSint64Field = 16;

export function allocMI_ConstSint64Field(data?: Partial<MI_ConstSint64Field>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstSint64Field);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.value !== undefined) view.setBigInt64(0, BigInt(data.value), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_ConstSint64FieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get value(): bigint | number {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: i64
  set value(value: bigint | number) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_ConstUint64Field (size: 16)
 */
export interface MI_ConstUint64Field {
  /** u64 */
  value: bigint | number;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_ConstUint64Field = 16;

export function allocMI_ConstUint64Field(data?: Partial<MI_ConstUint64Field>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstUint64Field);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.value !== undefined) view.setBigUint64(0, BigInt(data.value), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_ConstUint64FieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get value(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: u64
  set value(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_ConstReal32Field (size: 8)
 */
export interface MI_ConstReal32Field {
  /** f32 */
  value: number;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_ConstReal32Field = 8;

export function allocMI_ConstReal32Field(data?: Partial<MI_ConstReal32Field>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstReal32Field);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.value !== undefined) view.setFloat32(0, Number(data.value), true);
  // 0x04: u8
  if (data?.exists !== undefined) view.setUint8(4, Number(data.exists));
  // 0x05: u8
  if (data?.flags !== undefined) view.setUint8(5, Number(data.flags));
  // 0x06: pad2
  return buf;
}

export class MI_ConstReal32FieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get value(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: u8
  get exists(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get flags(): number {
    return this.view.getUint8(5);
  }

  // 0x06: pad2

  // 0x00: f32
  set value(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: u8
  set exists(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set flags(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: pad2
}

/**
 * Windows.Win32.System.Wmi.MI_ConstReal64Field (size: 16)
 */
export interface MI_ConstReal64Field {
  /** f64 */
  value: number;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_ConstReal64Field = 16;

export function allocMI_ConstReal64Field(data?: Partial<MI_ConstReal64Field>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstReal64Field);
  const view = new DataView(buf.buffer);
  // 0x00: f64
  if (data?.value !== undefined) view.setFloat64(0, Number(data.value), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_ConstReal64FieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f64
  get value(): number {
    return this.view.getFloat64(0, true);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: f64
  set value(value: number) {
    this.view.setFloat64(0, value, true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_ConstChar16Field (size: 8)
 */
export interface MI_ConstChar16Field {
  /** u16 */
  value: number;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_ConstChar16Field = 8;

export function allocMI_ConstChar16Field(data?: Partial<MI_ConstChar16Field>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstChar16Field);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.value !== undefined) view.setUint16(0, Number(data.value), true);
  // 0x02: u8
  if (data?.exists !== undefined) view.setUint8(2, Number(data.exists));
  // 0x03: u8
  if (data?.flags !== undefined) view.setUint8(3, Number(data.flags));
  // 0x04: pad4
  return buf;
}

export class MI_ConstChar16FieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get value(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get exists(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get flags(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x00: u16
  set value(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set exists(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set flags(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_ConstDatetimeField (size: 16)
 */
export interface MI_ConstDatetimeField {
  /** Windows.Win32.System.Wmi.MI_Datetime */
  value: Uint8Array | Deno.PointerValue;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_ConstDatetimeField = 16;

export function allocMI_ConstDatetimeField(data?: Partial<MI_ConstDatetimeField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstDatetimeField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_ConstDatetimeFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_ConstStringField (size: 16)
 */
export interface MI_ConstStringField {
  /** ptr */
  value: Deno.PointerValue | Uint8Array;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_ConstStringField = 16;

export function allocMI_ConstStringField(data?: Partial<MI_ConstStringField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstStringField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_ConstStringFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_ConstReferenceField (size: 16)
 */
export interface MI_ConstReferenceField {
  /** ptr */
  value: Deno.PointerValue | Uint8Array;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_ConstReferenceField = 16;

export function allocMI_ConstReferenceField(data?: Partial<MI_ConstReferenceField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstReferenceField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_ConstReferenceFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_ConstInstanceField (size: 16)
 */
export interface MI_ConstInstanceField {
  /** ptr */
  value: Deno.PointerValue | Uint8Array;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_ConstInstanceField = 16;

export function allocMI_ConstInstanceField(data?: Partial<MI_ConstInstanceField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstInstanceField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_ConstInstanceFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_ConstBooleanAField (size: 16)
 */
export interface MI_ConstBooleanAField {
  /** Windows.Win32.System.Wmi.MI_ConstBooleanA */
  value: Uint8Array | Deno.PointerValue;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_ConstBooleanAField = 16;

export function allocMI_ConstBooleanAField(data?: Partial<MI_ConstBooleanAField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstBooleanAField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_ConstBooleanAFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_ConstUint8AField (size: 16)
 */
export interface MI_ConstUint8AField {
  /** Windows.Win32.System.Wmi.MI_ConstUint8A */
  value: Uint8Array | Deno.PointerValue;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_ConstUint8AField = 16;

export function allocMI_ConstUint8AField(data?: Partial<MI_ConstUint8AField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstUint8AField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_ConstUint8AFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_ConstSint8AField (size: 16)
 */
export interface MI_ConstSint8AField {
  /** Windows.Win32.System.Wmi.MI_ConstSint8A */
  value: Uint8Array | Deno.PointerValue;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_ConstSint8AField = 16;

export function allocMI_ConstSint8AField(data?: Partial<MI_ConstSint8AField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstSint8AField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_ConstSint8AFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_ConstUint16AField (size: 16)
 */
export interface MI_ConstUint16AField {
  /** Windows.Win32.System.Wmi.MI_ConstUint16A */
  value: Uint8Array | Deno.PointerValue;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_ConstUint16AField = 16;

export function allocMI_ConstUint16AField(data?: Partial<MI_ConstUint16AField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstUint16AField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_ConstUint16AFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_ConstSint16AField (size: 16)
 */
export interface MI_ConstSint16AField {
  /** Windows.Win32.System.Wmi.MI_ConstSint16A */
  value: Uint8Array | Deno.PointerValue;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_ConstSint16AField = 16;

export function allocMI_ConstSint16AField(data?: Partial<MI_ConstSint16AField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstSint16AField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_ConstSint16AFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_ConstUint32AField (size: 16)
 */
export interface MI_ConstUint32AField {
  /** Windows.Win32.System.Wmi.MI_ConstUint32A */
  value: Uint8Array | Deno.PointerValue;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_ConstUint32AField = 16;

export function allocMI_ConstUint32AField(data?: Partial<MI_ConstUint32AField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstUint32AField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_ConstUint32AFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_ConstSint32AField (size: 16)
 */
export interface MI_ConstSint32AField {
  /** Windows.Win32.System.Wmi.MI_ConstSint32A */
  value: Uint8Array | Deno.PointerValue;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_ConstSint32AField = 16;

export function allocMI_ConstSint32AField(data?: Partial<MI_ConstSint32AField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstSint32AField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_ConstSint32AFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_ConstUint64AField (size: 16)
 */
export interface MI_ConstUint64AField {
  /** Windows.Win32.System.Wmi.MI_ConstUint64A */
  value: Uint8Array | Deno.PointerValue;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_ConstUint64AField = 16;

export function allocMI_ConstUint64AField(data?: Partial<MI_ConstUint64AField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstUint64AField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_ConstUint64AFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_ConstSint64AField (size: 16)
 */
export interface MI_ConstSint64AField {
  /** Windows.Win32.System.Wmi.MI_ConstSint64A */
  value: Uint8Array | Deno.PointerValue;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_ConstSint64AField = 16;

export function allocMI_ConstSint64AField(data?: Partial<MI_ConstSint64AField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstSint64AField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_ConstSint64AFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_ConstReal32AField (size: 16)
 */
export interface MI_ConstReal32AField {
  /** Windows.Win32.System.Wmi.MI_ConstReal32A */
  value: Uint8Array | Deno.PointerValue;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_ConstReal32AField = 16;

export function allocMI_ConstReal32AField(data?: Partial<MI_ConstReal32AField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstReal32AField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_ConstReal32AFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_ConstReal64AField (size: 16)
 */
export interface MI_ConstReal64AField {
  /** Windows.Win32.System.Wmi.MI_ConstReal64A */
  value: Uint8Array | Deno.PointerValue;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_ConstReal64AField = 16;

export function allocMI_ConstReal64AField(data?: Partial<MI_ConstReal64AField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstReal64AField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_ConstReal64AFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_ConstChar16AField (size: 16)
 */
export interface MI_ConstChar16AField {
  /** Windows.Win32.System.Wmi.MI_ConstChar16A */
  value: Uint8Array | Deno.PointerValue;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_ConstChar16AField = 16;

export function allocMI_ConstChar16AField(data?: Partial<MI_ConstChar16AField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstChar16AField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_ConstChar16AFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_ConstDatetimeAField (size: 16)
 */
export interface MI_ConstDatetimeAField {
  /** Windows.Win32.System.Wmi.MI_ConstDatetimeA */
  value: Uint8Array | Deno.PointerValue;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_ConstDatetimeAField = 16;

export function allocMI_ConstDatetimeAField(data?: Partial<MI_ConstDatetimeAField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstDatetimeAField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_ConstDatetimeAFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_ConstStringAField (size: 16)
 */
export interface MI_ConstStringAField {
  /** Windows.Win32.System.Wmi.MI_ConstStringA */
  value: Uint8Array | Deno.PointerValue;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_ConstStringAField = 16;

export function allocMI_ConstStringAField(data?: Partial<MI_ConstStringAField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstStringAField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_ConstStringAFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_ConstReferenceAField (size: 16)
 */
export interface MI_ConstReferenceAField {
  /** Windows.Win32.System.Wmi.MI_ConstReferenceA */
  value: Uint8Array | Deno.PointerValue;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_ConstReferenceAField = 16;

export function allocMI_ConstReferenceAField(data?: Partial<MI_ConstReferenceAField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstReferenceAField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_ConstReferenceAFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_ConstInstanceAField (size: 16)
 */
export interface MI_ConstInstanceAField {
  /** Windows.Win32.System.Wmi.MI_ConstInstanceA */
  value: Uint8Array | Deno.PointerValue;
  /** u8 */
  exists: number;
  /** u8 */
  flags: number;
}

export const sizeofMI_ConstInstanceAField = 16;

export function allocMI_ConstInstanceAField(data?: Partial<MI_ConstInstanceAField>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ConstInstanceAField);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  // 0x08: u8
  if (data?.exists !== undefined) view.setUint8(8, Number(data.exists));
  // 0x09: u8
  if (data?.flags !== undefined) view.setUint8(9, Number(data.flags));
  // 0x0a: pad6
  return buf;
}

export class MI_ConstInstanceAFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get exists(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set exists(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Wmi.MI_ServerFT (size: 16)
 */
export interface MI_ServerFT {
  /** isize */
  GetVersion: bigint | number;
  /** isize */
  GetSystemName: bigint | number;
}

export const sizeofMI_ServerFT = 16;

export function allocMI_ServerFT(data?: Partial<MI_ServerFT>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ServerFT);
  const view = new DataView(buf.buffer);
  // 0x00: isize
  if (data?.GetVersion !== undefined) view.setBigInt64(0, BigInt(data.GetVersion), true);
  // 0x08: isize
  if (data?.GetSystemName !== undefined) view.setBigInt64(8, BigInt(data.GetSystemName), true);
  return buf;
}

export class MI_ServerFTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: isize
  get GetVersion(): bigint | number {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: isize
  get GetSystemName(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x00: isize
  set GetVersion(value: bigint | number) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: isize
  set GetSystemName(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_Server (size: 40)
 */
export interface MI_Server {
  /** ptr */
  serverFT: Deno.PointerValue | Uint8Array;
  /** ptr */
  contextFT: Deno.PointerValue | Uint8Array;
  /** ptr */
  instanceFT: Deno.PointerValue | Uint8Array;
  /** ptr */
  propertySetFT: Deno.PointerValue | Uint8Array;
  /** ptr */
  filterFT: Deno.PointerValue | Uint8Array;
}

export const sizeofMI_Server = 40;

export function allocMI_Server(data?: Partial<MI_Server>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Server);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.serverFT !== undefined) view.setBigUint64(0, data.serverFT === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.serverFT))), true);
  // 0x08: pointer
  if (data?.contextFT !== undefined) view.setBigUint64(8, data.contextFT === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.contextFT))), true);
  // 0x10: pointer
  if (data?.instanceFT !== undefined) view.setBigUint64(16, data.instanceFT === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.instanceFT))), true);
  // 0x18: pointer
  if (data?.propertySetFT !== undefined) view.setBigUint64(24, data.propertySetFT === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.propertySetFT))), true);
  // 0x20: pointer
  if (data?.filterFT !== undefined) view.setBigUint64(32, data.filterFT === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.filterFT))), true);
  return buf;
}

export class MI_ServerView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get serverFT(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get contextFT(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get instanceFT(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get propertySetFT(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get filterFT(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set serverFT(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set contextFT(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set instanceFT(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set propertySetFT(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set filterFT(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_FilterFT (size: 16)
 */
export interface MI_FilterFT {
  /** isize */
  Evaluate: bigint | number;
  /** isize */
  GetExpression: bigint | number;
}

export const sizeofMI_FilterFT = 16;

export function allocMI_FilterFT(data?: Partial<MI_FilterFT>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_FilterFT);
  const view = new DataView(buf.buffer);
  // 0x00: isize
  if (data?.Evaluate !== undefined) view.setBigInt64(0, BigInt(data.Evaluate), true);
  // 0x08: isize
  if (data?.GetExpression !== undefined) view.setBigInt64(8, BigInt(data.GetExpression), true);
  return buf;
}

export class MI_FilterFTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: isize
  get Evaluate(): bigint | number {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: isize
  get GetExpression(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x00: isize
  set Evaluate(value: bigint | number) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: isize
  set GetExpression(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_Filter (size: 16)
 */
export interface MI_Filter {
  /** ptr */
  ft: Deno.PointerValue | Uint8Array;
  /** array */
  reserved: Deno.PointerValue;
}

export const sizeofMI_Filter = 16;

export function allocMI_Filter(data?: Partial<MI_Filter>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Filter);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ft !== undefined) view.setBigUint64(0, data.ft === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ft))), true);
  // 0x08: pointer
  if (data?.reserved !== undefined) view.setBigUint64(8, data.reserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.reserved))), true);
  return buf;
}

export class MI_FilterView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ft(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get reserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ft(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set reserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_PropertySetFT (size: 64)
 */
export interface MI_PropertySetFT {
  /** isize */
  GetElementCount: bigint | number;
  /** isize */
  ContainsElement: bigint | number;
  /** isize */
  AddElement: bigint | number;
  /** isize */
  GetElementAt: bigint | number;
  /** isize */
  Clear: bigint | number;
  /** isize */
  Destruct: bigint | number;
  /** isize */
  Delete: bigint | number;
  /** isize */
  Clone: bigint | number;
}

export const sizeofMI_PropertySetFT = 64;

export function allocMI_PropertySetFT(data?: Partial<MI_PropertySetFT>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_PropertySetFT);
  const view = new DataView(buf.buffer);
  // 0x00: isize
  if (data?.GetElementCount !== undefined) view.setBigInt64(0, BigInt(data.GetElementCount), true);
  // 0x08: isize
  if (data?.ContainsElement !== undefined) view.setBigInt64(8, BigInt(data.ContainsElement), true);
  // 0x10: isize
  if (data?.AddElement !== undefined) view.setBigInt64(16, BigInt(data.AddElement), true);
  // 0x18: isize
  if (data?.GetElementAt !== undefined) view.setBigInt64(24, BigInt(data.GetElementAt), true);
  // 0x20: isize
  if (data?.Clear !== undefined) view.setBigInt64(32, BigInt(data.Clear), true);
  // 0x28: isize
  if (data?.Destruct !== undefined) view.setBigInt64(40, BigInt(data.Destruct), true);
  // 0x30: isize
  if (data?.Delete !== undefined) view.setBigInt64(48, BigInt(data.Delete), true);
  // 0x38: isize
  if (data?.Clone !== undefined) view.setBigInt64(56, BigInt(data.Clone), true);
  return buf;
}

export class MI_PropertySetFTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: isize
  get GetElementCount(): bigint | number {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: isize
  get ContainsElement(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: isize
  get AddElement(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: isize
  get GetElementAt(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: isize
  get Clear(): bigint | number {
    return Number(this.view.getBigInt64(32, true));
  }

  // 0x28: isize
  get Destruct(): bigint | number {
    return Number(this.view.getBigInt64(40, true));
  }

  // 0x30: isize
  get Delete(): bigint | number {
    return Number(this.view.getBigInt64(48, true));
  }

  // 0x38: isize
  get Clone(): bigint | number {
    return Number(this.view.getBigInt64(56, true));
  }

  // 0x00: isize
  set GetElementCount(value: bigint | number) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: isize
  set ContainsElement(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: isize
  set AddElement(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: isize
  set GetElementAt(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: isize
  set Clear(value: bigint | number) {
    this.view.setBigInt64(32, BigInt(value), true);
  }

  // 0x28: isize
  set Destruct(value: bigint | number) {
    this.view.setBigInt64(40, BigInt(value), true);
  }

  // 0x30: isize
  set Delete(value: bigint | number) {
    this.view.setBigInt64(48, BigInt(value), true);
  }

  // 0x38: isize
  set Clone(value: bigint | number) {
    this.view.setBigInt64(56, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_PropertySet (size: 16)
 */
export interface MI_PropertySet {
  /** ptr */
  ft: Deno.PointerValue | Uint8Array;
  /** array */
  reserved: Deno.PointerValue;
}

export const sizeofMI_PropertySet = 16;

export function allocMI_PropertySet(data?: Partial<MI_PropertySet>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_PropertySet);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ft !== undefined) view.setBigUint64(0, data.ft === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ft))), true);
  // 0x08: pointer
  if (data?.reserved !== undefined) view.setBigUint64(8, data.reserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.reserved))), true);
  return buf;
}

export class MI_PropertySetView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ft(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get reserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ft(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set reserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_ObjectDecl (size: 48)
 */
export interface MI_ObjectDecl {
  /** u32 */
  flags: number;
  /** u32 */
  code: number;
  /** ptr */
  name: Deno.PointerValue | Uint8Array;
  /** ptr */
  qualifiers: Deno.PointerValue | Uint8Array;
  /** u32 */
  numQualifiers: number;
  /** ptr */
  properties: Deno.PointerValue | Uint8Array;
  /** u32 */
  numProperties: number;
  /** u32 */
  size: number;
}

export const sizeofMI_ObjectDecl = 48;

export function allocMI_ObjectDecl(data?: Partial<MI_ObjectDecl>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ObjectDecl);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.flags !== undefined) view.setUint32(0, Number(data.flags), true);
  // 0x04: u32
  if (data?.code !== undefined) view.setUint32(4, Number(data.code), true);
  // 0x08: pointer
  if (data?.name !== undefined) view.setBigUint64(8, data.name === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.name))), true);
  // 0x10: pointer
  if (data?.qualifiers !== undefined) view.setBigUint64(16, data.qualifiers === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.qualifiers))), true);
  // 0x18: u32
  if (data?.numQualifiers !== undefined) view.setUint32(24, Number(data.numQualifiers), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.properties !== undefined) view.setBigUint64(32, data.properties === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.properties))), true);
  // 0x28: u32
  if (data?.numProperties !== undefined) view.setUint32(40, Number(data.numProperties), true);
  // 0x2c: u32
  if (data?.size !== undefined) view.setUint32(44, Number(data.size), true);
  return buf;
}

export class MI_ObjectDeclView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get code(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get qualifiers(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get numQualifiers(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get properties(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get numProperties(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get size(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: u32
  set flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set code(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set name(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set qualifiers(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set numQualifiers(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set properties(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set numProperties(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set size(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_ClassDecl (size: 104)
 */
export interface MI_ClassDecl {
  /** u32 */
  flags: number;
  /** u32 */
  code: number;
  /** ptr */
  name: Deno.PointerValue | Uint8Array;
  /** ptr */
  qualifiers: Deno.PointerValue | Uint8Array;
  /** u32 */
  numQualifiers: number;
  /** ptr */
  properties: Deno.PointerValue | Uint8Array;
  /** u32 */
  numProperties: number;
  /** u32 */
  size: number;
  /** ptr */
  superClass: Deno.PointerValue | Uint8Array;
  /** ptr */
  superClassDecl: Deno.PointerValue | Uint8Array;
  /** ptr */
  methods: Deno.PointerValue | Uint8Array;
  /** u32 */
  numMethods: number;
  /** ptr */
  schema: Deno.PointerValue | Uint8Array;
  /** ptr */
  providerFT: Deno.PointerValue | Uint8Array;
  /** ptr */
  owningClass: Deno.PointerValue | Uint8Array;
}

export const sizeofMI_ClassDecl = 104;

export function allocMI_ClassDecl(data?: Partial<MI_ClassDecl>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ClassDecl);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.flags !== undefined) view.setUint32(0, Number(data.flags), true);
  // 0x04: u32
  if (data?.code !== undefined) view.setUint32(4, Number(data.code), true);
  // 0x08: pointer
  if (data?.name !== undefined) view.setBigUint64(8, data.name === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.name))), true);
  // 0x10: pointer
  if (data?.qualifiers !== undefined) view.setBigUint64(16, data.qualifiers === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.qualifiers))), true);
  // 0x18: u32
  if (data?.numQualifiers !== undefined) view.setUint32(24, Number(data.numQualifiers), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.properties !== undefined) view.setBigUint64(32, data.properties === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.properties))), true);
  // 0x28: u32
  if (data?.numProperties !== undefined) view.setUint32(40, Number(data.numProperties), true);
  // 0x2c: u32
  if (data?.size !== undefined) view.setUint32(44, Number(data.size), true);
  // 0x30: pointer
  if (data?.superClass !== undefined) view.setBigUint64(48, data.superClass === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.superClass))), true);
  // 0x38: pointer
  if (data?.superClassDecl !== undefined) view.setBigUint64(56, data.superClassDecl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.superClassDecl))), true);
  // 0x40: pointer
  if (data?.methods !== undefined) view.setBigUint64(64, data.methods === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.methods))), true);
  // 0x48: u32
  if (data?.numMethods !== undefined) view.setUint32(72, Number(data.numMethods), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.schema !== undefined) view.setBigUint64(80, data.schema === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.schema))), true);
  // 0x58: pointer
  if (data?.providerFT !== undefined) view.setBigUint64(88, data.providerFT === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.providerFT))), true);
  // 0x60: pointer
  if (data?.owningClass !== undefined) view.setBigUint64(96, data.owningClass === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.owningClass))), true);
  return buf;
}

export class MI_ClassDeclView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get code(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get qualifiers(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get numQualifiers(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get properties(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get numProperties(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get size(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: pointer
  get superClass(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get superClassDecl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get methods(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get numMethods(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get schema(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get providerFT(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get owningClass(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set code(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set name(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set qualifiers(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set numQualifiers(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set properties(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set numProperties(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set size(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: pointer
  set superClass(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set superClassDecl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set methods(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: u32
  set numMethods(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set schema(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set providerFT(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set owningClass(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_FeatureDecl (size: 32)
 */
export interface MI_FeatureDecl {
  /** u32 */
  flags: number;
  /** u32 */
  code: number;
  /** ptr */
  name: Deno.PointerValue | Uint8Array;
  /** ptr */
  qualifiers: Deno.PointerValue | Uint8Array;
  /** u32 */
  numQualifiers: number;
}

export const sizeofMI_FeatureDecl = 32;

export function allocMI_FeatureDecl(data?: Partial<MI_FeatureDecl>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_FeatureDecl);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.flags !== undefined) view.setUint32(0, Number(data.flags), true);
  // 0x04: u32
  if (data?.code !== undefined) view.setUint32(4, Number(data.code), true);
  // 0x08: pointer
  if (data?.name !== undefined) view.setBigUint64(8, data.name === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.name))), true);
  // 0x10: pointer
  if (data?.qualifiers !== undefined) view.setBigUint64(16, data.qualifiers === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.qualifiers))), true);
  // 0x18: u32
  if (data?.numQualifiers !== undefined) view.setUint32(24, Number(data.numQualifiers), true);
  // 0x1c: pad4
  return buf;
}

export class MI_FeatureDeclView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get code(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get qualifiers(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get numQualifiers(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set code(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set name(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set qualifiers(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set numQualifiers(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_ParameterDecl (size: 48)
 */
export interface MI_ParameterDecl {
  /** u32 */
  flags: number;
  /** u32 */
  code: number;
  /** ptr */
  name: Deno.PointerValue | Uint8Array;
  /** ptr */
  qualifiers: Deno.PointerValue | Uint8Array;
  /** u32 */
  numQualifiers: number;
  /** u32 */
  type: number;
  /** ptr */
  className: Deno.PointerValue | Uint8Array;
  /** u32 */
  subscript: number;
  /** u32 */
  offset: number;
}

export const sizeofMI_ParameterDecl = 48;

export function allocMI_ParameterDecl(data?: Partial<MI_ParameterDecl>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ParameterDecl);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.flags !== undefined) view.setUint32(0, Number(data.flags), true);
  // 0x04: u32
  if (data?.code !== undefined) view.setUint32(4, Number(data.code), true);
  // 0x08: pointer
  if (data?.name !== undefined) view.setBigUint64(8, data.name === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.name))), true);
  // 0x10: pointer
  if (data?.qualifiers !== undefined) view.setBigUint64(16, data.qualifiers === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.qualifiers))), true);
  // 0x18: u32
  if (data?.numQualifiers !== undefined) view.setUint32(24, Number(data.numQualifiers), true);
  // 0x1c: u32
  if (data?.type !== undefined) view.setUint32(28, Number(data.type), true);
  // 0x20: pointer
  if (data?.className !== undefined) view.setBigUint64(32, data.className === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.className))), true);
  // 0x28: u32
  if (data?.subscript !== undefined) view.setUint32(40, Number(data.subscript), true);
  // 0x2c: u32
  if (data?.offset !== undefined) view.setUint32(44, Number(data.offset), true);
  return buf;
}

export class MI_ParameterDeclView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get code(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get qualifiers(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get numQualifiers(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get type(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get className(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get subscript(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get offset(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: u32
  set flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set code(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set name(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set qualifiers(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set numQualifiers(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set type(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set className(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set subscript(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set offset(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_PropertyDecl (size: 72)
 */
export interface MI_PropertyDecl {
  /** u32 */
  flags: number;
  /** u32 */
  code: number;
  /** ptr */
  name: Deno.PointerValue | Uint8Array;
  /** ptr */
  qualifiers: Deno.PointerValue | Uint8Array;
  /** u32 */
  numQualifiers: number;
  /** u32 */
  type: number;
  /** ptr */
  className: Deno.PointerValue | Uint8Array;
  /** u32 */
  subscript: number;
  /** u32 */
  offset: number;
  /** ptr */
  origin: Deno.PointerValue | Uint8Array;
  /** ptr */
  propagator: Deno.PointerValue | Uint8Array;
  /** ptr */
  value: Deno.PointerValue | Uint8Array;
}

export const sizeofMI_PropertyDecl = 72;

export function allocMI_PropertyDecl(data?: Partial<MI_PropertyDecl>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_PropertyDecl);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.flags !== undefined) view.setUint32(0, Number(data.flags), true);
  // 0x04: u32
  if (data?.code !== undefined) view.setUint32(4, Number(data.code), true);
  // 0x08: pointer
  if (data?.name !== undefined) view.setBigUint64(8, data.name === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.name))), true);
  // 0x10: pointer
  if (data?.qualifiers !== undefined) view.setBigUint64(16, data.qualifiers === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.qualifiers))), true);
  // 0x18: u32
  if (data?.numQualifiers !== undefined) view.setUint32(24, Number(data.numQualifiers), true);
  // 0x1c: u32
  if (data?.type !== undefined) view.setUint32(28, Number(data.type), true);
  // 0x20: pointer
  if (data?.className !== undefined) view.setBigUint64(32, data.className === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.className))), true);
  // 0x28: u32
  if (data?.subscript !== undefined) view.setUint32(40, Number(data.subscript), true);
  // 0x2c: u32
  if (data?.offset !== undefined) view.setUint32(44, Number(data.offset), true);
  // 0x30: pointer
  if (data?.origin !== undefined) view.setBigUint64(48, data.origin === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.origin))), true);
  // 0x38: pointer
  if (data?.propagator !== undefined) view.setBigUint64(56, data.propagator === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.propagator))), true);
  // 0x40: pointer
  if (data?.value !== undefined) view.setBigUint64(64, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  return buf;
}

export class MI_PropertyDeclView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get code(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get qualifiers(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get numQualifiers(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get type(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get className(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get subscript(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get offset(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: pointer
  get origin(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get propagator(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set code(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set name(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set qualifiers(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set numQualifiers(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set type(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set className(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set subscript(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set offset(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: pointer
  set origin(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set propagator(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_MethodDecl (size: 88)
 */
export interface MI_MethodDecl {
  /** u32 */
  flags: number;
  /** u32 */
  code: number;
  /** ptr */
  name: Deno.PointerValue | Uint8Array;
  /** ptr */
  qualifiers: Deno.PointerValue | Uint8Array;
  /** u32 */
  numQualifiers: number;
  /** ptr */
  parameters: Deno.PointerValue | Uint8Array;
  /** u32 */
  numParameters: number;
  /** u32 */
  size: number;
  /** u32 */
  returnType: number;
  /** ptr */
  origin: Deno.PointerValue | Uint8Array;
  /** ptr */
  propagator: Deno.PointerValue | Uint8Array;
  /** ptr */
  schema: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.System.Wmi.MI_MethodDecl_Invoke */
  function__: Uint8Array | Deno.PointerValue;
}

export const sizeofMI_MethodDecl = 88;

export function allocMI_MethodDecl(data?: Partial<MI_MethodDecl>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_MethodDecl);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.flags !== undefined) view.setUint32(0, Number(data.flags), true);
  // 0x04: u32
  if (data?.code !== undefined) view.setUint32(4, Number(data.code), true);
  // 0x08: pointer
  if (data?.name !== undefined) view.setBigUint64(8, data.name === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.name))), true);
  // 0x10: pointer
  if (data?.qualifiers !== undefined) view.setBigUint64(16, data.qualifiers === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.qualifiers))), true);
  // 0x18: u32
  if (data?.numQualifiers !== undefined) view.setUint32(24, Number(data.numQualifiers), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.parameters !== undefined) view.setBigUint64(32, data.parameters === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.parameters))), true);
  // 0x28: u32
  if (data?.numParameters !== undefined) view.setUint32(40, Number(data.numParameters), true);
  // 0x2c: u32
  if (data?.size !== undefined) view.setUint32(44, Number(data.size), true);
  // 0x30: u32
  if (data?.returnType !== undefined) view.setUint32(48, Number(data.returnType), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.origin !== undefined) view.setBigUint64(56, data.origin === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.origin))), true);
  // 0x40: pointer
  if (data?.propagator !== undefined) view.setBigUint64(64, data.propagator === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.propagator))), true);
  // 0x48: pointer
  if (data?.schema !== undefined) view.setBigUint64(72, data.schema === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.schema))), true);
  // 0x50: pointer
  if (data?.function__ !== undefined) view.setBigUint64(80, data.function__ === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.function__))), true);
  return buf;
}

export class MI_MethodDeclView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get code(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get qualifiers(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get numQualifiers(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get parameters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get numParameters(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get size(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get returnType(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get origin(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get propagator(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get schema(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get function__(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set code(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set name(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set qualifiers(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set numQualifiers(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set parameters(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set numParameters(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set size(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set returnType(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set origin(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set propagator(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set schema(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set function__(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_QualifierDecl (size: 32)
 */
export interface MI_QualifierDecl {
  /** ptr */
  name: Deno.PointerValue | Uint8Array;
  /** u32 */
  type: number;
  /** u32 */
  scope: number;
  /** u32 */
  flavor: number;
  /** u32 */
  subscript: number;
  /** ptr */
  value: Deno.PointerValue | Uint8Array;
}

export const sizeofMI_QualifierDecl = 32;

export function allocMI_QualifierDecl(data?: Partial<MI_QualifierDecl>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_QualifierDecl);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.name !== undefined) view.setBigUint64(0, data.name === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.name))), true);
  // 0x08: u32
  if (data?.type !== undefined) view.setUint32(8, Number(data.type), true);
  // 0x0c: u32
  if (data?.scope !== undefined) view.setUint32(12, Number(data.scope), true);
  // 0x10: u32
  if (data?.flavor !== undefined) view.setUint32(16, Number(data.flavor), true);
  // 0x14: u32
  if (data?.subscript !== undefined) view.setUint32(20, Number(data.subscript), true);
  // 0x18: pointer
  if (data?.value !== undefined) view.setBigUint64(24, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  return buf;
}

export class MI_QualifierDeclView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get type(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get scope(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get flavor(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get subscript(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set name(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set type(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set scope(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set flavor(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set subscript(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_Qualifier (size: 24)
 */
export interface MI_Qualifier {
  /** ptr */
  name: Deno.PointerValue | Uint8Array;
  /** u32 */
  type: number;
  /** u32 */
  flavor: number;
  /** ptr */
  value: Deno.PointerValue | Uint8Array;
}

export const sizeofMI_Qualifier = 24;

export function allocMI_Qualifier(data?: Partial<MI_Qualifier>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Qualifier);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.name !== undefined) view.setBigUint64(0, data.name === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.name))), true);
  // 0x08: u32
  if (data?.type !== undefined) view.setUint32(8, Number(data.type), true);
  // 0x0c: u32
  if (data?.flavor !== undefined) view.setUint32(12, Number(data.flavor), true);
  // 0x10: pointer
  if (data?.value !== undefined) view.setBigUint64(16, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  return buf;
}

export class MI_QualifierView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get type(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get flavor(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set name(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set type(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set flavor(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_SchemaDecl (size: 32)
 */
export interface MI_SchemaDecl {
  /** ptr */
  qualifierDecls: Deno.PointerValue | Uint8Array;
  /** u32 */
  numQualifierDecls: number;
  /** ptr */
  classDecls: Deno.PointerValue | Uint8Array;
  /** u32 */
  numClassDecls: number;
}

export const sizeofMI_SchemaDecl = 32;

export function allocMI_SchemaDecl(data?: Partial<MI_SchemaDecl>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_SchemaDecl);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.qualifierDecls !== undefined) view.setBigUint64(0, data.qualifierDecls === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.qualifierDecls))), true);
  // 0x08: u32
  if (data?.numQualifierDecls !== undefined) view.setUint32(8, Number(data.numQualifierDecls), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.classDecls !== undefined) view.setBigUint64(16, data.classDecls === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.classDecls))), true);
  // 0x18: u32
  if (data?.numClassDecls !== undefined) view.setUint32(24, Number(data.numClassDecls), true);
  // 0x1c: pad4
  return buf;
}

export class MI_SchemaDeclView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get qualifierDecls(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get numQualifierDecls(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get classDecls(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get numClassDecls(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set qualifierDecls(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set numQualifierDecls(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set classDecls(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set numClassDecls(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.System.Wmi.MI_ProviderFT (size: 112)
 */
export interface MI_ProviderFT {
  /** Windows.Win32.System.Wmi.MI_ProviderFT_Load */
  Load: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Wmi.MI_ProviderFT_Unload */
  Unload: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Wmi.MI_ProviderFT_GetInstance */
  GetInstance: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Wmi.MI_ProviderFT_EnumerateInstances */
  EnumerateInstances: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Wmi.MI_ProviderFT_CreateInstance */
  CreateInstance: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Wmi.MI_ProviderFT_ModifyInstance */
  ModifyInstance: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Wmi.MI_ProviderFT_DeleteInstance */
  DeleteInstance: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Wmi.MI_ProviderFT_AssociatorInstances */
  AssociatorInstances: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Wmi.MI_ProviderFT_ReferenceInstances */
  ReferenceInstances: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Wmi.MI_ProviderFT_EnableIndications */
  EnableIndications: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Wmi.MI_ProviderFT_DisableIndications */
  DisableIndications: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Wmi.MI_ProviderFT_Subscribe */
  Subscribe: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Wmi.MI_ProviderFT_Unsubscribe */
  Unsubscribe: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Wmi.MI_ProviderFT_Invoke */
  Invoke: Uint8Array | Deno.PointerValue;
}

export const sizeofMI_ProviderFT = 112;

export function allocMI_ProviderFT(data?: Partial<MI_ProviderFT>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ProviderFT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Load !== undefined) view.setBigUint64(0, data.Load === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Load))), true);
  // 0x08: pointer
  if (data?.Unload !== undefined) view.setBigUint64(8, data.Unload === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Unload))), true);
  // 0x10: pointer
  if (data?.GetInstance !== undefined) view.setBigUint64(16, data.GetInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetInstance))), true);
  // 0x18: pointer
  if (data?.EnumerateInstances !== undefined) view.setBigUint64(24, data.EnumerateInstances === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EnumerateInstances))), true);
  // 0x20: pointer
  if (data?.CreateInstance !== undefined) view.setBigUint64(32, data.CreateInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreateInstance))), true);
  // 0x28: pointer
  if (data?.ModifyInstance !== undefined) view.setBigUint64(40, data.ModifyInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ModifyInstance))), true);
  // 0x30: pointer
  if (data?.DeleteInstance !== undefined) view.setBigUint64(48, data.DeleteInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeleteInstance))), true);
  // 0x38: pointer
  if (data?.AssociatorInstances !== undefined) view.setBigUint64(56, data.AssociatorInstances === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AssociatorInstances))), true);
  // 0x40: pointer
  if (data?.ReferenceInstances !== undefined) view.setBigUint64(64, data.ReferenceInstances === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ReferenceInstances))), true);
  // 0x48: pointer
  if (data?.EnableIndications !== undefined) view.setBigUint64(72, data.EnableIndications === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EnableIndications))), true);
  // 0x50: pointer
  if (data?.DisableIndications !== undefined) view.setBigUint64(80, data.DisableIndications === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DisableIndications))), true);
  // 0x58: pointer
  if (data?.Subscribe !== undefined) view.setBigUint64(88, data.Subscribe === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Subscribe))), true);
  // 0x60: pointer
  if (data?.Unsubscribe !== undefined) view.setBigUint64(96, data.Unsubscribe === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Unsubscribe))), true);
  // 0x68: pointer
  if (data?.Invoke !== undefined) view.setBigUint64(104, data.Invoke === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Invoke))), true);
  return buf;
}

export class MI_ProviderFTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Load(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Unload(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get GetInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get EnumerateInstances(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get CreateInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get ModifyInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get DeleteInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get AssociatorInstances(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get ReferenceInstances(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get EnableIndications(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get DisableIndications(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get Subscribe(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get Unsubscribe(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get Invoke(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Load(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Unload(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set GetInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set EnumerateInstances(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set CreateInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set ModifyInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set DeleteInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set AssociatorInstances(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set ReferenceInstances(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set EnableIndications(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set DisableIndications(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set Subscribe(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set Unsubscribe(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: pointer
  set Invoke(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_Module (size: 48)
 */
export interface MI_Module {
  /** u32 */
  version: number;
  /** u32 */
  generatorVersion: number;
  /** u32 */
  flags: number;
  /** u32 */
  charSize: number;
  /** ptr */
  schemaDecl: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.System.Wmi.MI_Module_Load */
  Load: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Wmi.MI_Module_Unload */
  Unload: Uint8Array | Deno.PointerValue;
  /** ptr */
  dynamicProviderFT: Deno.PointerValue | Uint8Array;
}

export const sizeofMI_Module = 48;

export function allocMI_Module(data?: Partial<MI_Module>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Module);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.version !== undefined) view.setUint32(0, Number(data.version), true);
  // 0x04: u32
  if (data?.generatorVersion !== undefined) view.setUint32(4, Number(data.generatorVersion), true);
  // 0x08: u32
  if (data?.flags !== undefined) view.setUint32(8, Number(data.flags), true);
  // 0x0c: u32
  if (data?.charSize !== undefined) view.setUint32(12, Number(data.charSize), true);
  // 0x10: pointer
  if (data?.schemaDecl !== undefined) view.setBigUint64(16, data.schemaDecl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.schemaDecl))), true);
  // 0x18: pointer
  if (data?.Load !== undefined) view.setBigUint64(24, data.Load === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Load))), true);
  // 0x20: pointer
  if (data?.Unload !== undefined) view.setBigUint64(32, data.Unload === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Unload))), true);
  // 0x28: pointer
  if (data?.dynamicProviderFT !== undefined) view.setBigUint64(40, data.dynamicProviderFT === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dynamicProviderFT))), true);
  return buf;
}

export class MI_ModuleView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get generatorVersion(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get charSize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get schemaDecl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Load(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get Unload(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get dynamicProviderFT(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set generatorVersion(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set charSize(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set schemaDecl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Load(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set Unload(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set dynamicProviderFT(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_InstanceFT (size: 144)
 */
export interface MI_InstanceFT {
  /** isize */
  Clone: bigint | number;
  /** isize */
  Destruct: bigint | number;
  /** isize */
  Delete: bigint | number;
  /** isize */
  IsA: bigint | number;
  /** isize */
  GetClassNameA: bigint | number;
  /** isize */
  SetNameSpace: bigint | number;
  /** isize */
  GetNameSpace: bigint | number;
  /** isize */
  GetElementCount: bigint | number;
  /** isize */
  AddElement: bigint | number;
  /** isize */
  SetElement: bigint | number;
  /** isize */
  SetElementAt: bigint | number;
  /** isize */
  GetElement: bigint | number;
  /** isize */
  GetElementAt: bigint | number;
  /** isize */
  ClearElement: bigint | number;
  /** isize */
  ClearElementAt: bigint | number;
  /** isize */
  GetServerName: bigint | number;
  /** isize */
  SetServerName: bigint | number;
  /** isize */
  GetClass: bigint | number;
}

export const sizeofMI_InstanceFT = 144;

export function allocMI_InstanceFT(data?: Partial<MI_InstanceFT>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_InstanceFT);
  const view = new DataView(buf.buffer);
  // 0x00: isize
  if (data?.Clone !== undefined) view.setBigInt64(0, BigInt(data.Clone), true);
  // 0x08: isize
  if (data?.Destruct !== undefined) view.setBigInt64(8, BigInt(data.Destruct), true);
  // 0x10: isize
  if (data?.Delete !== undefined) view.setBigInt64(16, BigInt(data.Delete), true);
  // 0x18: isize
  if (data?.IsA !== undefined) view.setBigInt64(24, BigInt(data.IsA), true);
  // 0x20: isize
  if (data?.GetClassNameA !== undefined) view.setBigInt64(32, BigInt(data.GetClassNameA), true);
  // 0x28: isize
  if (data?.SetNameSpace !== undefined) view.setBigInt64(40, BigInt(data.SetNameSpace), true);
  // 0x30: isize
  if (data?.GetNameSpace !== undefined) view.setBigInt64(48, BigInt(data.GetNameSpace), true);
  // 0x38: isize
  if (data?.GetElementCount !== undefined) view.setBigInt64(56, BigInt(data.GetElementCount), true);
  // 0x40: isize
  if (data?.AddElement !== undefined) view.setBigInt64(64, BigInt(data.AddElement), true);
  // 0x48: isize
  if (data?.SetElement !== undefined) view.setBigInt64(72, BigInt(data.SetElement), true);
  // 0x50: isize
  if (data?.SetElementAt !== undefined) view.setBigInt64(80, BigInt(data.SetElementAt), true);
  // 0x58: isize
  if (data?.GetElement !== undefined) view.setBigInt64(88, BigInt(data.GetElement), true);
  // 0x60: isize
  if (data?.GetElementAt !== undefined) view.setBigInt64(96, BigInt(data.GetElementAt), true);
  // 0x68: isize
  if (data?.ClearElement !== undefined) view.setBigInt64(104, BigInt(data.ClearElement), true);
  // 0x70: isize
  if (data?.ClearElementAt !== undefined) view.setBigInt64(112, BigInt(data.ClearElementAt), true);
  // 0x78: isize
  if (data?.GetServerName !== undefined) view.setBigInt64(120, BigInt(data.GetServerName), true);
  // 0x80: isize
  if (data?.SetServerName !== undefined) view.setBigInt64(128, BigInt(data.SetServerName), true);
  // 0x88: isize
  if (data?.GetClass !== undefined) view.setBigInt64(136, BigInt(data.GetClass), true);
  return buf;
}

export class MI_InstanceFTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: isize
  get Clone(): bigint | number {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: isize
  get Destruct(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: isize
  get Delete(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: isize
  get IsA(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: isize
  get GetClassNameA(): bigint | number {
    return Number(this.view.getBigInt64(32, true));
  }

  // 0x28: isize
  get SetNameSpace(): bigint | number {
    return Number(this.view.getBigInt64(40, true));
  }

  // 0x30: isize
  get GetNameSpace(): bigint | number {
    return Number(this.view.getBigInt64(48, true));
  }

  // 0x38: isize
  get GetElementCount(): bigint | number {
    return Number(this.view.getBigInt64(56, true));
  }

  // 0x40: isize
  get AddElement(): bigint | number {
    return Number(this.view.getBigInt64(64, true));
  }

  // 0x48: isize
  get SetElement(): bigint | number {
    return Number(this.view.getBigInt64(72, true));
  }

  // 0x50: isize
  get SetElementAt(): bigint | number {
    return Number(this.view.getBigInt64(80, true));
  }

  // 0x58: isize
  get GetElement(): bigint | number {
    return Number(this.view.getBigInt64(88, true));
  }

  // 0x60: isize
  get GetElementAt(): bigint | number {
    return Number(this.view.getBigInt64(96, true));
  }

  // 0x68: isize
  get ClearElement(): bigint | number {
    return Number(this.view.getBigInt64(104, true));
  }

  // 0x70: isize
  get ClearElementAt(): bigint | number {
    return Number(this.view.getBigInt64(112, true));
  }

  // 0x78: isize
  get GetServerName(): bigint | number {
    return Number(this.view.getBigInt64(120, true));
  }

  // 0x80: isize
  get SetServerName(): bigint | number {
    return Number(this.view.getBigInt64(128, true));
  }

  // 0x88: isize
  get GetClass(): bigint | number {
    return Number(this.view.getBigInt64(136, true));
  }

  // 0x00: isize
  set Clone(value: bigint | number) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: isize
  set Destruct(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: isize
  set Delete(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: isize
  set IsA(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: isize
  set GetClassNameA(value: bigint | number) {
    this.view.setBigInt64(32, BigInt(value), true);
  }

  // 0x28: isize
  set SetNameSpace(value: bigint | number) {
    this.view.setBigInt64(40, BigInt(value), true);
  }

  // 0x30: isize
  set GetNameSpace(value: bigint | number) {
    this.view.setBigInt64(48, BigInt(value), true);
  }

  // 0x38: isize
  set GetElementCount(value: bigint | number) {
    this.view.setBigInt64(56, BigInt(value), true);
  }

  // 0x40: isize
  set AddElement(value: bigint | number) {
    this.view.setBigInt64(64, BigInt(value), true);
  }

  // 0x48: isize
  set SetElement(value: bigint | number) {
    this.view.setBigInt64(72, BigInt(value), true);
  }

  // 0x50: isize
  set SetElementAt(value: bigint | number) {
    this.view.setBigInt64(80, BigInt(value), true);
  }

  // 0x58: isize
  set GetElement(value: bigint | number) {
    this.view.setBigInt64(88, BigInt(value), true);
  }

  // 0x60: isize
  set GetElementAt(value: bigint | number) {
    this.view.setBigInt64(96, BigInt(value), true);
  }

  // 0x68: isize
  set ClearElement(value: bigint | number) {
    this.view.setBigInt64(104, BigInt(value), true);
  }

  // 0x70: isize
  set ClearElementAt(value: bigint | number) {
    this.view.setBigInt64(112, BigInt(value), true);
  }

  // 0x78: isize
  set GetServerName(value: bigint | number) {
    this.view.setBigInt64(120, BigInt(value), true);
  }

  // 0x80: isize
  set SetServerName(value: bigint | number) {
    this.view.setBigInt64(128, BigInt(value), true);
  }

  // 0x88: isize
  set GetClass(value: bigint | number) {
    this.view.setBigInt64(136, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_InstanceExFT (size: 16)
 */
export interface MI_InstanceExFT {
  /** Windows.Win32.System.Wmi.MI_InstanceFT */
  parent: Uint8Array | Deno.PointerValue;
  /** isize */
  Normalize: bigint | number;
}

export const sizeofMI_InstanceExFT = 16;

export function allocMI_InstanceExFT(data?: Partial<MI_InstanceExFT>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_InstanceExFT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.parent !== undefined) view.setBigUint64(0, data.parent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.parent))), true);
  // 0x08: isize
  if (data?.Normalize !== undefined) view.setBigInt64(8, BigInt(data.Normalize), true);
  return buf;
}

export class MI_InstanceExFTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get parent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: isize
  get Normalize(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x00: pointer
  set parent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: isize
  set Normalize(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_Instance (size: 40)
 */
export interface MI_Instance {
  /** ptr */
  ft: Deno.PointerValue | Uint8Array;
  /** ptr */
  classDecl: Deno.PointerValue | Uint8Array;
  /** ptr */
  serverName: Deno.PointerValue | Uint8Array;
  /** ptr */
  nameSpace: Deno.PointerValue | Uint8Array;
  /** array */
  reserved: Deno.PointerValue;
}

export const sizeofMI_Instance = 40;

export function allocMI_Instance(data?: Partial<MI_Instance>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Instance);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ft !== undefined) view.setBigUint64(0, data.ft === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ft))), true);
  // 0x08: pointer
  if (data?.classDecl !== undefined) view.setBigUint64(8, data.classDecl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.classDecl))), true);
  // 0x10: pointer
  if (data?.serverName !== undefined) view.setBigUint64(16, data.serverName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.serverName))), true);
  // 0x18: pointer
  if (data?.nameSpace !== undefined) view.setBigUint64(24, data.nameSpace === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.nameSpace))), true);
  // 0x20: pointer
  if (data?.reserved !== undefined) view.setBigUint64(32, data.reserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.reserved))), true);
  return buf;
}

export class MI_InstanceView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ft(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get classDecl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get serverName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get nameSpace(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get reserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ft(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set classDecl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set serverName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set nameSpace(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set reserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_ContextFT (size: 240)
 */
export interface MI_ContextFT {
  /** isize */
  PostResult: bigint | number;
  /** isize */
  PostInstance: bigint | number;
  /** isize */
  PostIndication: bigint | number;
  /** isize */
  ConstructInstance: bigint | number;
  /** isize */
  ConstructParameters: bigint | number;
  /** isize */
  NewInstance: bigint | number;
  /** isize */
  NewDynamicInstance: bigint | number;
  /** isize */
  NewParameters: bigint | number;
  /** isize */
  Canceled: bigint | number;
  /** isize */
  GetLocale: bigint | number;
  /** isize */
  RegisterCancel: bigint | number;
  /** isize */
  RequestUnload: bigint | number;
  /** isize */
  RefuseUnload: bigint | number;
  /** isize */
  GetLocalSession: bigint | number;
  /** isize */
  SetStringOption: bigint | number;
  /** isize */
  GetStringOption: bigint | number;
  /** isize */
  GetNumberOption: bigint | number;
  /** isize */
  GetCustomOption: bigint | number;
  /** isize */
  GetCustomOptionCount: bigint | number;
  /** isize */
  GetCustomOptionAt: bigint | number;
  /** isize */
  WriteMessage: bigint | number;
  /** isize */
  WriteProgress: bigint | number;
  /** isize */
  WriteStreamParameter: bigint | number;
  /** isize */
  WriteCimError: bigint | number;
  /** isize */
  PromptUser: bigint | number;
  /** isize */
  ShouldProcess: bigint | number;
  /** isize */
  ShouldContinue: bigint | number;
  /** isize */
  PostError: bigint | number;
  /** isize */
  PostCimError: bigint | number;
  /** isize */
  WriteError: bigint | number;
}

export const sizeofMI_ContextFT = 240;

export function allocMI_ContextFT(data?: Partial<MI_ContextFT>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ContextFT);
  const view = new DataView(buf.buffer);
  // 0x00: isize
  if (data?.PostResult !== undefined) view.setBigInt64(0, BigInt(data.PostResult), true);
  // 0x08: isize
  if (data?.PostInstance !== undefined) view.setBigInt64(8, BigInt(data.PostInstance), true);
  // 0x10: isize
  if (data?.PostIndication !== undefined) view.setBigInt64(16, BigInt(data.PostIndication), true);
  // 0x18: isize
  if (data?.ConstructInstance !== undefined) view.setBigInt64(24, BigInt(data.ConstructInstance), true);
  // 0x20: isize
  if (data?.ConstructParameters !== undefined) view.setBigInt64(32, BigInt(data.ConstructParameters), true);
  // 0x28: isize
  if (data?.NewInstance !== undefined) view.setBigInt64(40, BigInt(data.NewInstance), true);
  // 0x30: isize
  if (data?.NewDynamicInstance !== undefined) view.setBigInt64(48, BigInt(data.NewDynamicInstance), true);
  // 0x38: isize
  if (data?.NewParameters !== undefined) view.setBigInt64(56, BigInt(data.NewParameters), true);
  // 0x40: isize
  if (data?.Canceled !== undefined) view.setBigInt64(64, BigInt(data.Canceled), true);
  // 0x48: isize
  if (data?.GetLocale !== undefined) view.setBigInt64(72, BigInt(data.GetLocale), true);
  // 0x50: isize
  if (data?.RegisterCancel !== undefined) view.setBigInt64(80, BigInt(data.RegisterCancel), true);
  // 0x58: isize
  if (data?.RequestUnload !== undefined) view.setBigInt64(88, BigInt(data.RequestUnload), true);
  // 0x60: isize
  if (data?.RefuseUnload !== undefined) view.setBigInt64(96, BigInt(data.RefuseUnload), true);
  // 0x68: isize
  if (data?.GetLocalSession !== undefined) view.setBigInt64(104, BigInt(data.GetLocalSession), true);
  // 0x70: isize
  if (data?.SetStringOption !== undefined) view.setBigInt64(112, BigInt(data.SetStringOption), true);
  // 0x78: isize
  if (data?.GetStringOption !== undefined) view.setBigInt64(120, BigInt(data.GetStringOption), true);
  // 0x80: isize
  if (data?.GetNumberOption !== undefined) view.setBigInt64(128, BigInt(data.GetNumberOption), true);
  // 0x88: isize
  if (data?.GetCustomOption !== undefined) view.setBigInt64(136, BigInt(data.GetCustomOption), true);
  // 0x90: isize
  if (data?.GetCustomOptionCount !== undefined) view.setBigInt64(144, BigInt(data.GetCustomOptionCount), true);
  // 0x98: isize
  if (data?.GetCustomOptionAt !== undefined) view.setBigInt64(152, BigInt(data.GetCustomOptionAt), true);
  // 0xa0: isize
  if (data?.WriteMessage !== undefined) view.setBigInt64(160, BigInt(data.WriteMessage), true);
  // 0xa8: isize
  if (data?.WriteProgress !== undefined) view.setBigInt64(168, BigInt(data.WriteProgress), true);
  // 0xb0: isize
  if (data?.WriteStreamParameter !== undefined) view.setBigInt64(176, BigInt(data.WriteStreamParameter), true);
  // 0xb8: isize
  if (data?.WriteCimError !== undefined) view.setBigInt64(184, BigInt(data.WriteCimError), true);
  // 0xc0: isize
  if (data?.PromptUser !== undefined) view.setBigInt64(192, BigInt(data.PromptUser), true);
  // 0xc8: isize
  if (data?.ShouldProcess !== undefined) view.setBigInt64(200, BigInt(data.ShouldProcess), true);
  // 0xd0: isize
  if (data?.ShouldContinue !== undefined) view.setBigInt64(208, BigInt(data.ShouldContinue), true);
  // 0xd8: isize
  if (data?.PostError !== undefined) view.setBigInt64(216, BigInt(data.PostError), true);
  // 0xe0: isize
  if (data?.PostCimError !== undefined) view.setBigInt64(224, BigInt(data.PostCimError), true);
  // 0xe8: isize
  if (data?.WriteError !== undefined) view.setBigInt64(232, BigInt(data.WriteError), true);
  return buf;
}

export class MI_ContextFTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: isize
  get PostResult(): bigint | number {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: isize
  get PostInstance(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: isize
  get PostIndication(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: isize
  get ConstructInstance(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: isize
  get ConstructParameters(): bigint | number {
    return Number(this.view.getBigInt64(32, true));
  }

  // 0x28: isize
  get NewInstance(): bigint | number {
    return Number(this.view.getBigInt64(40, true));
  }

  // 0x30: isize
  get NewDynamicInstance(): bigint | number {
    return Number(this.view.getBigInt64(48, true));
  }

  // 0x38: isize
  get NewParameters(): bigint | number {
    return Number(this.view.getBigInt64(56, true));
  }

  // 0x40: isize
  get Canceled(): bigint | number {
    return Number(this.view.getBigInt64(64, true));
  }

  // 0x48: isize
  get GetLocale(): bigint | number {
    return Number(this.view.getBigInt64(72, true));
  }

  // 0x50: isize
  get RegisterCancel(): bigint | number {
    return Number(this.view.getBigInt64(80, true));
  }

  // 0x58: isize
  get RequestUnload(): bigint | number {
    return Number(this.view.getBigInt64(88, true));
  }

  // 0x60: isize
  get RefuseUnload(): bigint | number {
    return Number(this.view.getBigInt64(96, true));
  }

  // 0x68: isize
  get GetLocalSession(): bigint | number {
    return Number(this.view.getBigInt64(104, true));
  }

  // 0x70: isize
  get SetStringOption(): bigint | number {
    return Number(this.view.getBigInt64(112, true));
  }

  // 0x78: isize
  get GetStringOption(): bigint | number {
    return Number(this.view.getBigInt64(120, true));
  }

  // 0x80: isize
  get GetNumberOption(): bigint | number {
    return Number(this.view.getBigInt64(128, true));
  }

  // 0x88: isize
  get GetCustomOption(): bigint | number {
    return Number(this.view.getBigInt64(136, true));
  }

  // 0x90: isize
  get GetCustomOptionCount(): bigint | number {
    return Number(this.view.getBigInt64(144, true));
  }

  // 0x98: isize
  get GetCustomOptionAt(): bigint | number {
    return Number(this.view.getBigInt64(152, true));
  }

  // 0xa0: isize
  get WriteMessage(): bigint | number {
    return Number(this.view.getBigInt64(160, true));
  }

  // 0xa8: isize
  get WriteProgress(): bigint | number {
    return Number(this.view.getBigInt64(168, true));
  }

  // 0xb0: isize
  get WriteStreamParameter(): bigint | number {
    return Number(this.view.getBigInt64(176, true));
  }

  // 0xb8: isize
  get WriteCimError(): bigint | number {
    return Number(this.view.getBigInt64(184, true));
  }

  // 0xc0: isize
  get PromptUser(): bigint | number {
    return Number(this.view.getBigInt64(192, true));
  }

  // 0xc8: isize
  get ShouldProcess(): bigint | number {
    return Number(this.view.getBigInt64(200, true));
  }

  // 0xd0: isize
  get ShouldContinue(): bigint | number {
    return Number(this.view.getBigInt64(208, true));
  }

  // 0xd8: isize
  get PostError(): bigint | number {
    return Number(this.view.getBigInt64(216, true));
  }

  // 0xe0: isize
  get PostCimError(): bigint | number {
    return Number(this.view.getBigInt64(224, true));
  }

  // 0xe8: isize
  get WriteError(): bigint | number {
    return Number(this.view.getBigInt64(232, true));
  }

  // 0x00: isize
  set PostResult(value: bigint | number) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: isize
  set PostInstance(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: isize
  set PostIndication(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: isize
  set ConstructInstance(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: isize
  set ConstructParameters(value: bigint | number) {
    this.view.setBigInt64(32, BigInt(value), true);
  }

  // 0x28: isize
  set NewInstance(value: bigint | number) {
    this.view.setBigInt64(40, BigInt(value), true);
  }

  // 0x30: isize
  set NewDynamicInstance(value: bigint | number) {
    this.view.setBigInt64(48, BigInt(value), true);
  }

  // 0x38: isize
  set NewParameters(value: bigint | number) {
    this.view.setBigInt64(56, BigInt(value), true);
  }

  // 0x40: isize
  set Canceled(value: bigint | number) {
    this.view.setBigInt64(64, BigInt(value), true);
  }

  // 0x48: isize
  set GetLocale(value: bigint | number) {
    this.view.setBigInt64(72, BigInt(value), true);
  }

  // 0x50: isize
  set RegisterCancel(value: bigint | number) {
    this.view.setBigInt64(80, BigInt(value), true);
  }

  // 0x58: isize
  set RequestUnload(value: bigint | number) {
    this.view.setBigInt64(88, BigInt(value), true);
  }

  // 0x60: isize
  set RefuseUnload(value: bigint | number) {
    this.view.setBigInt64(96, BigInt(value), true);
  }

  // 0x68: isize
  set GetLocalSession(value: bigint | number) {
    this.view.setBigInt64(104, BigInt(value), true);
  }

  // 0x70: isize
  set SetStringOption(value: bigint | number) {
    this.view.setBigInt64(112, BigInt(value), true);
  }

  // 0x78: isize
  set GetStringOption(value: bigint | number) {
    this.view.setBigInt64(120, BigInt(value), true);
  }

  // 0x80: isize
  set GetNumberOption(value: bigint | number) {
    this.view.setBigInt64(128, BigInt(value), true);
  }

  // 0x88: isize
  set GetCustomOption(value: bigint | number) {
    this.view.setBigInt64(136, BigInt(value), true);
  }

  // 0x90: isize
  set GetCustomOptionCount(value: bigint | number) {
    this.view.setBigInt64(144, BigInt(value), true);
  }

  // 0x98: isize
  set GetCustomOptionAt(value: bigint | number) {
    this.view.setBigInt64(152, BigInt(value), true);
  }

  // 0xa0: isize
  set WriteMessage(value: bigint | number) {
    this.view.setBigInt64(160, BigInt(value), true);
  }

  // 0xa8: isize
  set WriteProgress(value: bigint | number) {
    this.view.setBigInt64(168, BigInt(value), true);
  }

  // 0xb0: isize
  set WriteStreamParameter(value: bigint | number) {
    this.view.setBigInt64(176, BigInt(value), true);
  }

  // 0xb8: isize
  set WriteCimError(value: bigint | number) {
    this.view.setBigInt64(184, BigInt(value), true);
  }

  // 0xc0: isize
  set PromptUser(value: bigint | number) {
    this.view.setBigInt64(192, BigInt(value), true);
  }

  // 0xc8: isize
  set ShouldProcess(value: bigint | number) {
    this.view.setBigInt64(200, BigInt(value), true);
  }

  // 0xd0: isize
  set ShouldContinue(value: bigint | number) {
    this.view.setBigInt64(208, BigInt(value), true);
  }

  // 0xd8: isize
  set PostError(value: bigint | number) {
    this.view.setBigInt64(216, BigInt(value), true);
  }

  // 0xe0: isize
  set PostCimError(value: bigint | number) {
    this.view.setBigInt64(224, BigInt(value), true);
  }

  // 0xe8: isize
  set WriteError(value: bigint | number) {
    this.view.setBigInt64(232, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_Context (size: 16)
 */
export interface MI_Context {
  /** ptr */
  ft: Deno.PointerValue | Uint8Array;
  /** array */
  reserved: Deno.PointerValue;
}

export const sizeofMI_Context = 16;

export function allocMI_Context(data?: Partial<MI_Context>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Context);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ft !== undefined) view.setBigUint64(0, data.ft === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ft))), true);
  // 0x08: pointer
  if (data?.reserved !== undefined) view.setBigUint64(8, data.reserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.reserved))), true);
  return buf;
}

export class MI_ContextView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ft(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get reserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ft(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set reserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_QualifierSetFT (size: 24)
 */
export interface MI_QualifierSetFT {
  /** isize */
  GetQualifierCount: bigint | number;
  /** isize */
  GetQualifierAt: bigint | number;
  /** isize */
  GetQualifier: bigint | number;
}

export const sizeofMI_QualifierSetFT = 24;

export function allocMI_QualifierSetFT(data?: Partial<MI_QualifierSetFT>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_QualifierSetFT);
  const view = new DataView(buf.buffer);
  // 0x00: isize
  if (data?.GetQualifierCount !== undefined) view.setBigInt64(0, BigInt(data.GetQualifierCount), true);
  // 0x08: isize
  if (data?.GetQualifierAt !== undefined) view.setBigInt64(8, BigInt(data.GetQualifierAt), true);
  // 0x10: isize
  if (data?.GetQualifier !== undefined) view.setBigInt64(16, BigInt(data.GetQualifier), true);
  return buf;
}

export class MI_QualifierSetFTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: isize
  get GetQualifierCount(): bigint | number {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: isize
  get GetQualifierAt(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: isize
  get GetQualifier(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x00: isize
  set GetQualifierCount(value: bigint | number) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: isize
  set GetQualifierAt(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: isize
  set GetQualifier(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_QualifierSet (size: 24)
 */
export interface MI_QualifierSet {
  /** u64 */
  reserved1: bigint | number;
  /** isize */
  reserved2: bigint | number;
  /** ptr */
  ft: Deno.PointerValue | Uint8Array;
}

export const sizeofMI_QualifierSet = 24;

export function allocMI_QualifierSet(data?: Partial<MI_QualifierSet>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_QualifierSet);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.reserved1 !== undefined) view.setBigUint64(0, BigInt(data.reserved1), true);
  // 0x08: isize
  if (data?.reserved2 !== undefined) view.setBigInt64(8, BigInt(data.reserved2), true);
  // 0x10: pointer
  if (data?.ft !== undefined) view.setBigUint64(16, data.ft === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ft))), true);
  return buf;
}

export class MI_QualifierSetView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get reserved1(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: isize
  get reserved2(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: pointer
  get ft(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u64
  set reserved1(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: isize
  set reserved2(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set ft(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_ParameterSetFT (size: 32)
 */
export interface MI_ParameterSetFT {
  /** isize */
  GetMethodReturnType: bigint | number;
  /** isize */
  GetParameterCount: bigint | number;
  /** isize */
  GetParameterAt: bigint | number;
  /** isize */
  GetParameter: bigint | number;
}

export const sizeofMI_ParameterSetFT = 32;

export function allocMI_ParameterSetFT(data?: Partial<MI_ParameterSetFT>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ParameterSetFT);
  const view = new DataView(buf.buffer);
  // 0x00: isize
  if (data?.GetMethodReturnType !== undefined) view.setBigInt64(0, BigInt(data.GetMethodReturnType), true);
  // 0x08: isize
  if (data?.GetParameterCount !== undefined) view.setBigInt64(8, BigInt(data.GetParameterCount), true);
  // 0x10: isize
  if (data?.GetParameterAt !== undefined) view.setBigInt64(16, BigInt(data.GetParameterAt), true);
  // 0x18: isize
  if (data?.GetParameter !== undefined) view.setBigInt64(24, BigInt(data.GetParameter), true);
  return buf;
}

export class MI_ParameterSetFTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: isize
  get GetMethodReturnType(): bigint | number {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: isize
  get GetParameterCount(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: isize
  get GetParameterAt(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: isize
  get GetParameter(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x00: isize
  set GetMethodReturnType(value: bigint | number) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: isize
  set GetParameterCount(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: isize
  set GetParameterAt(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: isize
  set GetParameter(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_ParameterSet (size: 24)
 */
export interface MI_ParameterSet {
  /** u64 */
  reserved1: bigint | number;
  /** isize */
  reserved2: bigint | number;
  /** ptr */
  ft: Deno.PointerValue | Uint8Array;
}

export const sizeofMI_ParameterSet = 24;

export function allocMI_ParameterSet(data?: Partial<MI_ParameterSet>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ParameterSet);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.reserved1 !== undefined) view.setBigUint64(0, BigInt(data.reserved1), true);
  // 0x08: isize
  if (data?.reserved2 !== undefined) view.setBigInt64(8, BigInt(data.reserved2), true);
  // 0x10: pointer
  if (data?.ft !== undefined) view.setBigUint64(16, data.ft === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ft))), true);
  return buf;
}

export class MI_ParameterSetView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get reserved1(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: isize
  get reserved2(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: pointer
  get ft(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u64
  set reserved1(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: isize
  set reserved2(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set ft(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_ClassFT (size: 112)
 */
export interface MI_ClassFT {
  /** isize */
  GetClassNameA: bigint | number;
  /** isize */
  GetNameSpace: bigint | number;
  /** isize */
  GetServerName: bigint | number;
  /** isize */
  GetElementCount: bigint | number;
  /** isize */
  GetElement: bigint | number;
  /** isize */
  GetElementAt: bigint | number;
  /** isize */
  GetClassQualifierSet: bigint | number;
  /** isize */
  GetMethodCount: bigint | number;
  /** isize */
  GetMethodAt: bigint | number;
  /** isize */
  GetMethod: bigint | number;
  /** isize */
  GetParentClassName: bigint | number;
  /** isize */
  GetParentClass: bigint | number;
  /** isize */
  Delete: bigint | number;
  /** isize */
  Clone: bigint | number;
}

export const sizeofMI_ClassFT = 112;

export function allocMI_ClassFT(data?: Partial<MI_ClassFT>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ClassFT);
  const view = new DataView(buf.buffer);
  // 0x00: isize
  if (data?.GetClassNameA !== undefined) view.setBigInt64(0, BigInt(data.GetClassNameA), true);
  // 0x08: isize
  if (data?.GetNameSpace !== undefined) view.setBigInt64(8, BigInt(data.GetNameSpace), true);
  // 0x10: isize
  if (data?.GetServerName !== undefined) view.setBigInt64(16, BigInt(data.GetServerName), true);
  // 0x18: isize
  if (data?.GetElementCount !== undefined) view.setBigInt64(24, BigInt(data.GetElementCount), true);
  // 0x20: isize
  if (data?.GetElement !== undefined) view.setBigInt64(32, BigInt(data.GetElement), true);
  // 0x28: isize
  if (data?.GetElementAt !== undefined) view.setBigInt64(40, BigInt(data.GetElementAt), true);
  // 0x30: isize
  if (data?.GetClassQualifierSet !== undefined) view.setBigInt64(48, BigInt(data.GetClassQualifierSet), true);
  // 0x38: isize
  if (data?.GetMethodCount !== undefined) view.setBigInt64(56, BigInt(data.GetMethodCount), true);
  // 0x40: isize
  if (data?.GetMethodAt !== undefined) view.setBigInt64(64, BigInt(data.GetMethodAt), true);
  // 0x48: isize
  if (data?.GetMethod !== undefined) view.setBigInt64(72, BigInt(data.GetMethod), true);
  // 0x50: isize
  if (data?.GetParentClassName !== undefined) view.setBigInt64(80, BigInt(data.GetParentClassName), true);
  // 0x58: isize
  if (data?.GetParentClass !== undefined) view.setBigInt64(88, BigInt(data.GetParentClass), true);
  // 0x60: isize
  if (data?.Delete !== undefined) view.setBigInt64(96, BigInt(data.Delete), true);
  // 0x68: isize
  if (data?.Clone !== undefined) view.setBigInt64(104, BigInt(data.Clone), true);
  return buf;
}

export class MI_ClassFTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: isize
  get GetClassNameA(): bigint | number {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: isize
  get GetNameSpace(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: isize
  get GetServerName(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: isize
  get GetElementCount(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: isize
  get GetElement(): bigint | number {
    return Number(this.view.getBigInt64(32, true));
  }

  // 0x28: isize
  get GetElementAt(): bigint | number {
    return Number(this.view.getBigInt64(40, true));
  }

  // 0x30: isize
  get GetClassQualifierSet(): bigint | number {
    return Number(this.view.getBigInt64(48, true));
  }

  // 0x38: isize
  get GetMethodCount(): bigint | number {
    return Number(this.view.getBigInt64(56, true));
  }

  // 0x40: isize
  get GetMethodAt(): bigint | number {
    return Number(this.view.getBigInt64(64, true));
  }

  // 0x48: isize
  get GetMethod(): bigint | number {
    return Number(this.view.getBigInt64(72, true));
  }

  // 0x50: isize
  get GetParentClassName(): bigint | number {
    return Number(this.view.getBigInt64(80, true));
  }

  // 0x58: isize
  get GetParentClass(): bigint | number {
    return Number(this.view.getBigInt64(88, true));
  }

  // 0x60: isize
  get Delete(): bigint | number {
    return Number(this.view.getBigInt64(96, true));
  }

  // 0x68: isize
  get Clone(): bigint | number {
    return Number(this.view.getBigInt64(104, true));
  }

  // 0x00: isize
  set GetClassNameA(value: bigint | number) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: isize
  set GetNameSpace(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: isize
  set GetServerName(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: isize
  set GetElementCount(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: isize
  set GetElement(value: bigint | number) {
    this.view.setBigInt64(32, BigInt(value), true);
  }

  // 0x28: isize
  set GetElementAt(value: bigint | number) {
    this.view.setBigInt64(40, BigInt(value), true);
  }

  // 0x30: isize
  set GetClassQualifierSet(value: bigint | number) {
    this.view.setBigInt64(48, BigInt(value), true);
  }

  // 0x38: isize
  set GetMethodCount(value: bigint | number) {
    this.view.setBigInt64(56, BigInt(value), true);
  }

  // 0x40: isize
  set GetMethodAt(value: bigint | number) {
    this.view.setBigInt64(64, BigInt(value), true);
  }

  // 0x48: isize
  set GetMethod(value: bigint | number) {
    this.view.setBigInt64(72, BigInt(value), true);
  }

  // 0x50: isize
  set GetParentClassName(value: bigint | number) {
    this.view.setBigInt64(80, BigInt(value), true);
  }

  // 0x58: isize
  set GetParentClass(value: bigint | number) {
    this.view.setBigInt64(88, BigInt(value), true);
  }

  // 0x60: isize
  set Delete(value: bigint | number) {
    this.view.setBigInt64(96, BigInt(value), true);
  }

  // 0x68: isize
  set Clone(value: bigint | number) {
    this.view.setBigInt64(104, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_Class (size: 40)
 */
export interface MI_Class {
  /** ptr */
  ft: Deno.PointerValue | Uint8Array;
  /** ptr */
  classDecl: Deno.PointerValue | Uint8Array;
  /** ptr */
  namespaceName: Deno.PointerValue | Uint8Array;
  /** ptr */
  serverName: Deno.PointerValue | Uint8Array;
  /** array */
  reserved: Deno.PointerValue;
}

export const sizeofMI_Class = 40;

export function allocMI_Class(data?: Partial<MI_Class>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Class);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ft !== undefined) view.setBigUint64(0, data.ft === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ft))), true);
  // 0x08: pointer
  if (data?.classDecl !== undefined) view.setBigUint64(8, data.classDecl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.classDecl))), true);
  // 0x10: pointer
  if (data?.namespaceName !== undefined) view.setBigUint64(16, data.namespaceName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.namespaceName))), true);
  // 0x18: pointer
  if (data?.serverName !== undefined) view.setBigUint64(24, data.serverName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.serverName))), true);
  // 0x20: pointer
  if (data?.reserved !== undefined) view.setBigUint64(32, data.reserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.reserved))), true);
  return buf;
}

export class MI_ClassView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ft(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get classDecl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get namespaceName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get serverName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get reserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ft(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set classDecl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set namespaceName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set serverName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set reserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_OperationCallbacks (size: 72)
 */
export interface MI_OperationCallbacks {
  /** ptr */
  callbackContext: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.System.Wmi.MI_OperationCallback_PromptUser */
  promptUser: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Wmi.MI_OperationCallback_WriteError */
  writeError: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Wmi.MI_OperationCallback_WriteMessage */
  writeMessage: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Wmi.MI_OperationCallback_WriteProgress */
  writeProgress: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Wmi.MI_OperationCallback_Instance */
  instanceResult: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Wmi.MI_OperationCallback_Indication */
  indicationResult: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Wmi.MI_OperationCallback_Class */
  classResult: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Wmi.MI_OperationCallback_StreamedParameter */
  streamedParameterResult: Uint8Array | Deno.PointerValue;
}

export const sizeofMI_OperationCallbacks = 72;

export function allocMI_OperationCallbacks(data?: Partial<MI_OperationCallbacks>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_OperationCallbacks);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.callbackContext !== undefined) view.setBigUint64(0, data.callbackContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.callbackContext))), true);
  // 0x08: pointer
  if (data?.promptUser !== undefined) view.setBigUint64(8, data.promptUser === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.promptUser))), true);
  // 0x10: pointer
  if (data?.writeError !== undefined) view.setBigUint64(16, data.writeError === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.writeError))), true);
  // 0x18: pointer
  if (data?.writeMessage !== undefined) view.setBigUint64(24, data.writeMessage === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.writeMessage))), true);
  // 0x20: pointer
  if (data?.writeProgress !== undefined) view.setBigUint64(32, data.writeProgress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.writeProgress))), true);
  // 0x28: pointer
  if (data?.instanceResult !== undefined) view.setBigUint64(40, data.instanceResult === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.instanceResult))), true);
  // 0x30: pointer
  if (data?.indicationResult !== undefined) view.setBigUint64(48, data.indicationResult === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.indicationResult))), true);
  // 0x38: pointer
  if (data?.classResult !== undefined) view.setBigUint64(56, data.classResult === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.classResult))), true);
  // 0x40: pointer
  if (data?.streamedParameterResult !== undefined) view.setBigUint64(64, data.streamedParameterResult === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.streamedParameterResult))), true);
  return buf;
}

export class MI_OperationCallbacksView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get callbackContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get promptUser(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get writeError(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get writeMessage(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get writeProgress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get instanceResult(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get indicationResult(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get classResult(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get streamedParameterResult(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set callbackContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set promptUser(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set writeError(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set writeMessage(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set writeProgress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set instanceResult(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set indicationResult(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set classResult(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set streamedParameterResult(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_SessionCallbacks (size: 24)
 */
export interface MI_SessionCallbacks {
  /** ptr */
  callbackContext: Deno.PointerValue | Uint8Array;
  /** isize */
  writeMessage: bigint | number;
  /** isize */
  writeError: bigint | number;
}

export const sizeofMI_SessionCallbacks = 24;

export function allocMI_SessionCallbacks(data?: Partial<MI_SessionCallbacks>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_SessionCallbacks);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.callbackContext !== undefined) view.setBigUint64(0, data.callbackContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.callbackContext))), true);
  // 0x08: isize
  if (data?.writeMessage !== undefined) view.setBigInt64(8, BigInt(data.writeMessage), true);
  // 0x10: isize
  if (data?.writeError !== undefined) view.setBigInt64(16, BigInt(data.writeError), true);
  return buf;
}

export class MI_SessionCallbacksView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get callbackContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: isize
  get writeMessage(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: isize
  get writeError(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x00: pointer
  set callbackContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: isize
  set writeMessage(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: isize
  set writeError(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_UsernamePasswordCreds (size: 24)
 */
export interface MI_UsernamePasswordCreds {
  /** ptr */
  domain: Deno.PointerValue | Uint8Array;
  /** ptr */
  username: Deno.PointerValue | Uint8Array;
  /** ptr */
  password: Deno.PointerValue | Uint8Array;
}

export const sizeofMI_UsernamePasswordCreds = 24;

export function allocMI_UsernamePasswordCreds(data?: Partial<MI_UsernamePasswordCreds>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_UsernamePasswordCreds);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.domain !== undefined) view.setBigUint64(0, data.domain === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.domain))), true);
  // 0x08: pointer
  if (data?.username !== undefined) view.setBigUint64(8, data.username === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.username))), true);
  // 0x10: pointer
  if (data?.password !== undefined) view.setBigUint64(16, data.password === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.password))), true);
  return buf;
}

export class MI_UsernamePasswordCredsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get domain(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get username(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get password(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set domain(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set username(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set password(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _credentials_e__Union (size: 16)
 */
export interface _credentials_e__Union {
  /** Windows.Win32.System.Wmi.MI_UsernamePasswordCreds */
  usernamePassword: Uint8Array | Deno.PointerValue;
  /** ptr */
  certificateThumbprint: Deno.PointerValue | Uint8Array;
}

export const sizeof_credentials_e__Union = 16;

export function alloc_credentials_e__Union(data?: Partial<_credentials_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_credentials_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.usernamePassword !== undefined) view.setBigUint64(0, data.usernamePassword === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.usernamePassword))), true);
  // 0x08: pointer
  if (data?.certificateThumbprint !== undefined) view.setBigUint64(8, data.certificateThumbprint === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.certificateThumbprint))), true);
  return buf;
}

export class _credentials_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get usernamePassword(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get certificateThumbprint(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set usernamePassword(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set certificateThumbprint(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_UserCredentials (size: 16)
 */
export interface MI_UserCredentials {
  /** ptr */
  authenticationType: Deno.PointerValue | Uint8Array;
  /** _credentials_e__Union */
  credentials: Uint8Array | Deno.PointerValue;
}

export const sizeofMI_UserCredentials = 16;

export function allocMI_UserCredentials(data?: Partial<MI_UserCredentials>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_UserCredentials);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.authenticationType !== undefined) view.setBigUint64(0, data.authenticationType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.authenticationType))), true);
  // 0x08: pointer
  if (data?.credentials !== undefined) view.setBigUint64(8, data.credentials === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.credentials))), true);
  return buf;
}

export class MI_UserCredentialsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get authenticationType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get credentials(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set authenticationType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set credentials(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_SubscriptionDeliveryOptionsFT (size: 136)
 */
export interface MI_SubscriptionDeliveryOptionsFT {
  /** isize */
  SetString: bigint | number;
  /** isize */
  SetNumber: bigint | number;
  /** isize */
  SetDateTime: bigint | number;
  /** isize */
  SetInterval: bigint | number;
  /** isize */
  AddCredentials: bigint | number;
  /** isize */
  Delete: bigint | number;
  /** isize */
  GetString: bigint | number;
  /** isize */
  GetNumber: bigint | number;
  /** isize */
  GetDateTime: bigint | number;
  /** isize */
  GetInterval: bigint | number;
  /** isize */
  GetOptionCount: bigint | number;
  /** isize */
  GetOptionAt: bigint | number;
  /** isize */
  GetOption: bigint | number;
  /** isize */
  GetCredentialsCount: bigint | number;
  /** isize */
  GetCredentialsAt: bigint | number;
  /** isize */
  GetCredentialsPasswordAt: bigint | number;
  /** isize */
  Clone: bigint | number;
}

export const sizeofMI_SubscriptionDeliveryOptionsFT = 136;

export function allocMI_SubscriptionDeliveryOptionsFT(data?: Partial<MI_SubscriptionDeliveryOptionsFT>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_SubscriptionDeliveryOptionsFT);
  const view = new DataView(buf.buffer);
  // 0x00: isize
  if (data?.SetString !== undefined) view.setBigInt64(0, BigInt(data.SetString), true);
  // 0x08: isize
  if (data?.SetNumber !== undefined) view.setBigInt64(8, BigInt(data.SetNumber), true);
  // 0x10: isize
  if (data?.SetDateTime !== undefined) view.setBigInt64(16, BigInt(data.SetDateTime), true);
  // 0x18: isize
  if (data?.SetInterval !== undefined) view.setBigInt64(24, BigInt(data.SetInterval), true);
  // 0x20: isize
  if (data?.AddCredentials !== undefined) view.setBigInt64(32, BigInt(data.AddCredentials), true);
  // 0x28: isize
  if (data?.Delete !== undefined) view.setBigInt64(40, BigInt(data.Delete), true);
  // 0x30: isize
  if (data?.GetString !== undefined) view.setBigInt64(48, BigInt(data.GetString), true);
  // 0x38: isize
  if (data?.GetNumber !== undefined) view.setBigInt64(56, BigInt(data.GetNumber), true);
  // 0x40: isize
  if (data?.GetDateTime !== undefined) view.setBigInt64(64, BigInt(data.GetDateTime), true);
  // 0x48: isize
  if (data?.GetInterval !== undefined) view.setBigInt64(72, BigInt(data.GetInterval), true);
  // 0x50: isize
  if (data?.GetOptionCount !== undefined) view.setBigInt64(80, BigInt(data.GetOptionCount), true);
  // 0x58: isize
  if (data?.GetOptionAt !== undefined) view.setBigInt64(88, BigInt(data.GetOptionAt), true);
  // 0x60: isize
  if (data?.GetOption !== undefined) view.setBigInt64(96, BigInt(data.GetOption), true);
  // 0x68: isize
  if (data?.GetCredentialsCount !== undefined) view.setBigInt64(104, BigInt(data.GetCredentialsCount), true);
  // 0x70: isize
  if (data?.GetCredentialsAt !== undefined) view.setBigInt64(112, BigInt(data.GetCredentialsAt), true);
  // 0x78: isize
  if (data?.GetCredentialsPasswordAt !== undefined) view.setBigInt64(120, BigInt(data.GetCredentialsPasswordAt), true);
  // 0x80: isize
  if (data?.Clone !== undefined) view.setBigInt64(128, BigInt(data.Clone), true);
  return buf;
}

export class MI_SubscriptionDeliveryOptionsFTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: isize
  get SetString(): bigint | number {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: isize
  get SetNumber(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: isize
  get SetDateTime(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: isize
  get SetInterval(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: isize
  get AddCredentials(): bigint | number {
    return Number(this.view.getBigInt64(32, true));
  }

  // 0x28: isize
  get Delete(): bigint | number {
    return Number(this.view.getBigInt64(40, true));
  }

  // 0x30: isize
  get GetString(): bigint | number {
    return Number(this.view.getBigInt64(48, true));
  }

  // 0x38: isize
  get GetNumber(): bigint | number {
    return Number(this.view.getBigInt64(56, true));
  }

  // 0x40: isize
  get GetDateTime(): bigint | number {
    return Number(this.view.getBigInt64(64, true));
  }

  // 0x48: isize
  get GetInterval(): bigint | number {
    return Number(this.view.getBigInt64(72, true));
  }

  // 0x50: isize
  get GetOptionCount(): bigint | number {
    return Number(this.view.getBigInt64(80, true));
  }

  // 0x58: isize
  get GetOptionAt(): bigint | number {
    return Number(this.view.getBigInt64(88, true));
  }

  // 0x60: isize
  get GetOption(): bigint | number {
    return Number(this.view.getBigInt64(96, true));
  }

  // 0x68: isize
  get GetCredentialsCount(): bigint | number {
    return Number(this.view.getBigInt64(104, true));
  }

  // 0x70: isize
  get GetCredentialsAt(): bigint | number {
    return Number(this.view.getBigInt64(112, true));
  }

  // 0x78: isize
  get GetCredentialsPasswordAt(): bigint | number {
    return Number(this.view.getBigInt64(120, true));
  }

  // 0x80: isize
  get Clone(): bigint | number {
    return Number(this.view.getBigInt64(128, true));
  }

  // 0x00: isize
  set SetString(value: bigint | number) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: isize
  set SetNumber(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: isize
  set SetDateTime(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: isize
  set SetInterval(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: isize
  set AddCredentials(value: bigint | number) {
    this.view.setBigInt64(32, BigInt(value), true);
  }

  // 0x28: isize
  set Delete(value: bigint | number) {
    this.view.setBigInt64(40, BigInt(value), true);
  }

  // 0x30: isize
  set GetString(value: bigint | number) {
    this.view.setBigInt64(48, BigInt(value), true);
  }

  // 0x38: isize
  set GetNumber(value: bigint | number) {
    this.view.setBigInt64(56, BigInt(value), true);
  }

  // 0x40: isize
  set GetDateTime(value: bigint | number) {
    this.view.setBigInt64(64, BigInt(value), true);
  }

  // 0x48: isize
  set GetInterval(value: bigint | number) {
    this.view.setBigInt64(72, BigInt(value), true);
  }

  // 0x50: isize
  set GetOptionCount(value: bigint | number) {
    this.view.setBigInt64(80, BigInt(value), true);
  }

  // 0x58: isize
  set GetOptionAt(value: bigint | number) {
    this.view.setBigInt64(88, BigInt(value), true);
  }

  // 0x60: isize
  set GetOption(value: bigint | number) {
    this.view.setBigInt64(96, BigInt(value), true);
  }

  // 0x68: isize
  set GetCredentialsCount(value: bigint | number) {
    this.view.setBigInt64(104, BigInt(value), true);
  }

  // 0x70: isize
  set GetCredentialsAt(value: bigint | number) {
    this.view.setBigInt64(112, BigInt(value), true);
  }

  // 0x78: isize
  set GetCredentialsPasswordAt(value: bigint | number) {
    this.view.setBigInt64(120, BigInt(value), true);
  }

  // 0x80: isize
  set Clone(value: bigint | number) {
    this.view.setBigInt64(128, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_SubscriptionDeliveryOptions (size: 24)
 */
export interface MI_SubscriptionDeliveryOptions {
  /** u64 */
  reserved1: bigint | number;
  /** isize */
  reserved2: bigint | number;
  /** ptr */
  ft: Deno.PointerValue | Uint8Array;
}

export const sizeofMI_SubscriptionDeliveryOptions = 24;

export function allocMI_SubscriptionDeliveryOptions(data?: Partial<MI_SubscriptionDeliveryOptions>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_SubscriptionDeliveryOptions);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.reserved1 !== undefined) view.setBigUint64(0, BigInt(data.reserved1), true);
  // 0x08: isize
  if (data?.reserved2 !== undefined) view.setBigInt64(8, BigInt(data.reserved2), true);
  // 0x10: pointer
  if (data?.ft !== undefined) view.setBigUint64(16, data.ft === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ft))), true);
  return buf;
}

export class MI_SubscriptionDeliveryOptionsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get reserved1(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: isize
  get reserved2(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: pointer
  get ft(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u64
  set reserved1(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: isize
  set reserved2(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set ft(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_Serializer (size: 16)
 */
export interface MI_Serializer {
  /** u64 */
  reserved1: bigint | number;
  /** isize */
  reserved2: bigint | number;
}

export const sizeofMI_Serializer = 16;

export function allocMI_Serializer(data?: Partial<MI_Serializer>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Serializer);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.reserved1 !== undefined) view.setBigUint64(0, BigInt(data.reserved1), true);
  // 0x08: isize
  if (data?.reserved2 !== undefined) view.setBigInt64(8, BigInt(data.reserved2), true);
  return buf;
}

export class MI_SerializerView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get reserved1(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: isize
  get reserved2(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x00: u64
  set reserved1(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: isize
  set reserved2(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_Deserializer (size: 16)
 */
export interface MI_Deserializer {
  /** u64 */
  reserved1: bigint | number;
  /** isize */
  reserved2: bigint | number;
}

export const sizeofMI_Deserializer = 16;

export function allocMI_Deserializer(data?: Partial<MI_Deserializer>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Deserializer);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.reserved1 !== undefined) view.setBigUint64(0, BigInt(data.reserved1), true);
  // 0x08: isize
  if (data?.reserved2 !== undefined) view.setBigInt64(8, BigInt(data.reserved2), true);
  return buf;
}

export class MI_DeserializerView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get reserved1(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: isize
  get reserved2(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x00: u64
  set reserved1(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: isize
  set reserved2(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_SerializerFT (size: 24)
 */
export interface MI_SerializerFT {
  /** isize */
  Close: bigint | number;
  /** isize */
  SerializeClass: bigint | number;
  /** isize */
  SerializeInstance: bigint | number;
}

export const sizeofMI_SerializerFT = 24;

export function allocMI_SerializerFT(data?: Partial<MI_SerializerFT>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_SerializerFT);
  const view = new DataView(buf.buffer);
  // 0x00: isize
  if (data?.Close !== undefined) view.setBigInt64(0, BigInt(data.Close), true);
  // 0x08: isize
  if (data?.SerializeClass !== undefined) view.setBigInt64(8, BigInt(data.SerializeClass), true);
  // 0x10: isize
  if (data?.SerializeInstance !== undefined) view.setBigInt64(16, BigInt(data.SerializeInstance), true);
  return buf;
}

export class MI_SerializerFTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: isize
  get Close(): bigint | number {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: isize
  get SerializeClass(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: isize
  get SerializeInstance(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x00: isize
  set Close(value: bigint | number) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: isize
  set SerializeClass(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: isize
  set SerializeInstance(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_DeserializerFT (size: 48)
 */
export interface MI_DeserializerFT {
  /** isize */
  Close: bigint | number;
  /** isize */
  DeserializeClass: bigint | number;
  /** isize */
  Class_GetClassName: bigint | number;
  /** isize */
  Class_GetParentClassName: bigint | number;
  /** isize */
  DeserializeInstance: bigint | number;
  /** isize */
  Instance_GetClassName: bigint | number;
}

export const sizeofMI_DeserializerFT = 48;

export function allocMI_DeserializerFT(data?: Partial<MI_DeserializerFT>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_DeserializerFT);
  const view = new DataView(buf.buffer);
  // 0x00: isize
  if (data?.Close !== undefined) view.setBigInt64(0, BigInt(data.Close), true);
  // 0x08: isize
  if (data?.DeserializeClass !== undefined) view.setBigInt64(8, BigInt(data.DeserializeClass), true);
  // 0x10: isize
  if (data?.Class_GetClassName !== undefined) view.setBigInt64(16, BigInt(data.Class_GetClassName), true);
  // 0x18: isize
  if (data?.Class_GetParentClassName !== undefined) view.setBigInt64(24, BigInt(data.Class_GetParentClassName), true);
  // 0x20: isize
  if (data?.DeserializeInstance !== undefined) view.setBigInt64(32, BigInt(data.DeserializeInstance), true);
  // 0x28: isize
  if (data?.Instance_GetClassName !== undefined) view.setBigInt64(40, BigInt(data.Instance_GetClassName), true);
  return buf;
}

export class MI_DeserializerFTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: isize
  get Close(): bigint | number {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: isize
  get DeserializeClass(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: isize
  get Class_GetClassName(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: isize
  get Class_GetParentClassName(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: isize
  get DeserializeInstance(): bigint | number {
    return Number(this.view.getBigInt64(32, true));
  }

  // 0x28: isize
  get Instance_GetClassName(): bigint | number {
    return Number(this.view.getBigInt64(40, true));
  }

  // 0x00: isize
  set Close(value: bigint | number) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: isize
  set DeserializeClass(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: isize
  set Class_GetClassName(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: isize
  set Class_GetParentClassName(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: isize
  set DeserializeInstance(value: bigint | number) {
    this.view.setBigInt64(32, BigInt(value), true);
  }

  // 0x28: isize
  set Instance_GetClassName(value: bigint | number) {
    this.view.setBigInt64(40, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_ApplicationFT (size: 88)
 */
export interface MI_ApplicationFT {
  /** isize */
  Close: bigint | number;
  /** isize */
  NewSession: bigint | number;
  /** isize */
  NewHostedProvider: bigint | number;
  /** isize */
  NewInstance: bigint | number;
  /** isize */
  NewDestinationOptions: bigint | number;
  /** isize */
  NewOperationOptions: bigint | number;
  /** isize */
  NewSubscriptionDeliveryOptions: bigint | number;
  /** isize */
  NewSerializer: bigint | number;
  /** isize */
  NewDeserializer: bigint | number;
  /** isize */
  NewInstanceFromClass: bigint | number;
  /** isize */
  NewClass: bigint | number;
}

export const sizeofMI_ApplicationFT = 88;

export function allocMI_ApplicationFT(data?: Partial<MI_ApplicationFT>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ApplicationFT);
  const view = new DataView(buf.buffer);
  // 0x00: isize
  if (data?.Close !== undefined) view.setBigInt64(0, BigInt(data.Close), true);
  // 0x08: isize
  if (data?.NewSession !== undefined) view.setBigInt64(8, BigInt(data.NewSession), true);
  // 0x10: isize
  if (data?.NewHostedProvider !== undefined) view.setBigInt64(16, BigInt(data.NewHostedProvider), true);
  // 0x18: isize
  if (data?.NewInstance !== undefined) view.setBigInt64(24, BigInt(data.NewInstance), true);
  // 0x20: isize
  if (data?.NewDestinationOptions !== undefined) view.setBigInt64(32, BigInt(data.NewDestinationOptions), true);
  // 0x28: isize
  if (data?.NewOperationOptions !== undefined) view.setBigInt64(40, BigInt(data.NewOperationOptions), true);
  // 0x30: isize
  if (data?.NewSubscriptionDeliveryOptions !== undefined) view.setBigInt64(48, BigInt(data.NewSubscriptionDeliveryOptions), true);
  // 0x38: isize
  if (data?.NewSerializer !== undefined) view.setBigInt64(56, BigInt(data.NewSerializer), true);
  // 0x40: isize
  if (data?.NewDeserializer !== undefined) view.setBigInt64(64, BigInt(data.NewDeserializer), true);
  // 0x48: isize
  if (data?.NewInstanceFromClass !== undefined) view.setBigInt64(72, BigInt(data.NewInstanceFromClass), true);
  // 0x50: isize
  if (data?.NewClass !== undefined) view.setBigInt64(80, BigInt(data.NewClass), true);
  return buf;
}

export class MI_ApplicationFTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: isize
  get Close(): bigint | number {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: isize
  get NewSession(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: isize
  get NewHostedProvider(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: isize
  get NewInstance(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: isize
  get NewDestinationOptions(): bigint | number {
    return Number(this.view.getBigInt64(32, true));
  }

  // 0x28: isize
  get NewOperationOptions(): bigint | number {
    return Number(this.view.getBigInt64(40, true));
  }

  // 0x30: isize
  get NewSubscriptionDeliveryOptions(): bigint | number {
    return Number(this.view.getBigInt64(48, true));
  }

  // 0x38: isize
  get NewSerializer(): bigint | number {
    return Number(this.view.getBigInt64(56, true));
  }

  // 0x40: isize
  get NewDeserializer(): bigint | number {
    return Number(this.view.getBigInt64(64, true));
  }

  // 0x48: isize
  get NewInstanceFromClass(): bigint | number {
    return Number(this.view.getBigInt64(72, true));
  }

  // 0x50: isize
  get NewClass(): bigint | number {
    return Number(this.view.getBigInt64(80, true));
  }

  // 0x00: isize
  set Close(value: bigint | number) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: isize
  set NewSession(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: isize
  set NewHostedProvider(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: isize
  set NewInstance(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: isize
  set NewDestinationOptions(value: bigint | number) {
    this.view.setBigInt64(32, BigInt(value), true);
  }

  // 0x28: isize
  set NewOperationOptions(value: bigint | number) {
    this.view.setBigInt64(40, BigInt(value), true);
  }

  // 0x30: isize
  set NewSubscriptionDeliveryOptions(value: bigint | number) {
    this.view.setBigInt64(48, BigInt(value), true);
  }

  // 0x38: isize
  set NewSerializer(value: bigint | number) {
    this.view.setBigInt64(56, BigInt(value), true);
  }

  // 0x40: isize
  set NewDeserializer(value: bigint | number) {
    this.view.setBigInt64(64, BigInt(value), true);
  }

  // 0x48: isize
  set NewInstanceFromClass(value: bigint | number) {
    this.view.setBigInt64(72, BigInt(value), true);
  }

  // 0x50: isize
  set NewClass(value: bigint | number) {
    this.view.setBigInt64(80, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_HostedProviderFT (size: 16)
 */
export interface MI_HostedProviderFT {
  /** isize */
  Close: bigint | number;
  /** isize */
  GetApplication: bigint | number;
}

export const sizeofMI_HostedProviderFT = 16;

export function allocMI_HostedProviderFT(data?: Partial<MI_HostedProviderFT>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_HostedProviderFT);
  const view = new DataView(buf.buffer);
  // 0x00: isize
  if (data?.Close !== undefined) view.setBigInt64(0, BigInt(data.Close), true);
  // 0x08: isize
  if (data?.GetApplication !== undefined) view.setBigInt64(8, BigInt(data.GetApplication), true);
  return buf;
}

export class MI_HostedProviderFTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: isize
  get Close(): bigint | number {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: isize
  get GetApplication(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x00: isize
  set Close(value: bigint | number) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: isize
  set GetApplication(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_SessionFT (size: 120)
 */
export interface MI_SessionFT {
  /** isize */
  Close: bigint | number;
  /** isize */
  GetApplication: bigint | number;
  /** isize */
  GetInstance: bigint | number;
  /** isize */
  ModifyInstance: bigint | number;
  /** isize */
  CreateInstance: bigint | number;
  /** isize */
  DeleteInstance: bigint | number;
  /** isize */
  Invoke: bigint | number;
  /** isize */
  EnumerateInstances: bigint | number;
  /** isize */
  QueryInstances: bigint | number;
  /** isize */
  AssociatorInstances: bigint | number;
  /** isize */
  ReferenceInstances: bigint | number;
  /** isize */
  Subscribe: bigint | number;
  /** isize */
  GetClass: bigint | number;
  /** isize */
  EnumerateClasses: bigint | number;
  /** isize */
  TestConnection: bigint | number;
}

export const sizeofMI_SessionFT = 120;

export function allocMI_SessionFT(data?: Partial<MI_SessionFT>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_SessionFT);
  const view = new DataView(buf.buffer);
  // 0x00: isize
  if (data?.Close !== undefined) view.setBigInt64(0, BigInt(data.Close), true);
  // 0x08: isize
  if (data?.GetApplication !== undefined) view.setBigInt64(8, BigInt(data.GetApplication), true);
  // 0x10: isize
  if (data?.GetInstance !== undefined) view.setBigInt64(16, BigInt(data.GetInstance), true);
  // 0x18: isize
  if (data?.ModifyInstance !== undefined) view.setBigInt64(24, BigInt(data.ModifyInstance), true);
  // 0x20: isize
  if (data?.CreateInstance !== undefined) view.setBigInt64(32, BigInt(data.CreateInstance), true);
  // 0x28: isize
  if (data?.DeleteInstance !== undefined) view.setBigInt64(40, BigInt(data.DeleteInstance), true);
  // 0x30: isize
  if (data?.Invoke !== undefined) view.setBigInt64(48, BigInt(data.Invoke), true);
  // 0x38: isize
  if (data?.EnumerateInstances !== undefined) view.setBigInt64(56, BigInt(data.EnumerateInstances), true);
  // 0x40: isize
  if (data?.QueryInstances !== undefined) view.setBigInt64(64, BigInt(data.QueryInstances), true);
  // 0x48: isize
  if (data?.AssociatorInstances !== undefined) view.setBigInt64(72, BigInt(data.AssociatorInstances), true);
  // 0x50: isize
  if (data?.ReferenceInstances !== undefined) view.setBigInt64(80, BigInt(data.ReferenceInstances), true);
  // 0x58: isize
  if (data?.Subscribe !== undefined) view.setBigInt64(88, BigInt(data.Subscribe), true);
  // 0x60: isize
  if (data?.GetClass !== undefined) view.setBigInt64(96, BigInt(data.GetClass), true);
  // 0x68: isize
  if (data?.EnumerateClasses !== undefined) view.setBigInt64(104, BigInt(data.EnumerateClasses), true);
  // 0x70: isize
  if (data?.TestConnection !== undefined) view.setBigInt64(112, BigInt(data.TestConnection), true);
  return buf;
}

export class MI_SessionFTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: isize
  get Close(): bigint | number {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: isize
  get GetApplication(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: isize
  get GetInstance(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: isize
  get ModifyInstance(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: isize
  get CreateInstance(): bigint | number {
    return Number(this.view.getBigInt64(32, true));
  }

  // 0x28: isize
  get DeleteInstance(): bigint | number {
    return Number(this.view.getBigInt64(40, true));
  }

  // 0x30: isize
  get Invoke(): bigint | number {
    return Number(this.view.getBigInt64(48, true));
  }

  // 0x38: isize
  get EnumerateInstances(): bigint | number {
    return Number(this.view.getBigInt64(56, true));
  }

  // 0x40: isize
  get QueryInstances(): bigint | number {
    return Number(this.view.getBigInt64(64, true));
  }

  // 0x48: isize
  get AssociatorInstances(): bigint | number {
    return Number(this.view.getBigInt64(72, true));
  }

  // 0x50: isize
  get ReferenceInstances(): bigint | number {
    return Number(this.view.getBigInt64(80, true));
  }

  // 0x58: isize
  get Subscribe(): bigint | number {
    return Number(this.view.getBigInt64(88, true));
  }

  // 0x60: isize
  get GetClass(): bigint | number {
    return Number(this.view.getBigInt64(96, true));
  }

  // 0x68: isize
  get EnumerateClasses(): bigint | number {
    return Number(this.view.getBigInt64(104, true));
  }

  // 0x70: isize
  get TestConnection(): bigint | number {
    return Number(this.view.getBigInt64(112, true));
  }

  // 0x00: isize
  set Close(value: bigint | number) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: isize
  set GetApplication(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: isize
  set GetInstance(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: isize
  set ModifyInstance(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: isize
  set CreateInstance(value: bigint | number) {
    this.view.setBigInt64(32, BigInt(value), true);
  }

  // 0x28: isize
  set DeleteInstance(value: bigint | number) {
    this.view.setBigInt64(40, BigInt(value), true);
  }

  // 0x30: isize
  set Invoke(value: bigint | number) {
    this.view.setBigInt64(48, BigInt(value), true);
  }

  // 0x38: isize
  set EnumerateInstances(value: bigint | number) {
    this.view.setBigInt64(56, BigInt(value), true);
  }

  // 0x40: isize
  set QueryInstances(value: bigint | number) {
    this.view.setBigInt64(64, BigInt(value), true);
  }

  // 0x48: isize
  set AssociatorInstances(value: bigint | number) {
    this.view.setBigInt64(72, BigInt(value), true);
  }

  // 0x50: isize
  set ReferenceInstances(value: bigint | number) {
    this.view.setBigInt64(80, BigInt(value), true);
  }

  // 0x58: isize
  set Subscribe(value: bigint | number) {
    this.view.setBigInt64(88, BigInt(value), true);
  }

  // 0x60: isize
  set GetClass(value: bigint | number) {
    this.view.setBigInt64(96, BigInt(value), true);
  }

  // 0x68: isize
  set EnumerateClasses(value: bigint | number) {
    this.view.setBigInt64(104, BigInt(value), true);
  }

  // 0x70: isize
  set TestConnection(value: bigint | number) {
    this.view.setBigInt64(112, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_OperationFT (size: 48)
 */
export interface MI_OperationFT {
  /** isize */
  Close: bigint | number;
  /** isize */
  Cancel: bigint | number;
  /** isize */
  GetSession: bigint | number;
  /** isize */
  GetInstance: bigint | number;
  /** isize */
  GetIndication: bigint | number;
  /** isize */
  GetClass: bigint | number;
}

export const sizeofMI_OperationFT = 48;

export function allocMI_OperationFT(data?: Partial<MI_OperationFT>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_OperationFT);
  const view = new DataView(buf.buffer);
  // 0x00: isize
  if (data?.Close !== undefined) view.setBigInt64(0, BigInt(data.Close), true);
  // 0x08: isize
  if (data?.Cancel !== undefined) view.setBigInt64(8, BigInt(data.Cancel), true);
  // 0x10: isize
  if (data?.GetSession !== undefined) view.setBigInt64(16, BigInt(data.GetSession), true);
  // 0x18: isize
  if (data?.GetInstance !== undefined) view.setBigInt64(24, BigInt(data.GetInstance), true);
  // 0x20: isize
  if (data?.GetIndication !== undefined) view.setBigInt64(32, BigInt(data.GetIndication), true);
  // 0x28: isize
  if (data?.GetClass !== undefined) view.setBigInt64(40, BigInt(data.GetClass), true);
  return buf;
}

export class MI_OperationFTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: isize
  get Close(): bigint | number {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: isize
  get Cancel(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: isize
  get GetSession(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: isize
  get GetInstance(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: isize
  get GetIndication(): bigint | number {
    return Number(this.view.getBigInt64(32, true));
  }

  // 0x28: isize
  get GetClass(): bigint | number {
    return Number(this.view.getBigInt64(40, true));
  }

  // 0x00: isize
  set Close(value: bigint | number) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: isize
  set Cancel(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: isize
  set GetSession(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: isize
  set GetInstance(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: isize
  set GetIndication(value: bigint | number) {
    this.view.setBigInt64(32, BigInt(value), true);
  }

  // 0x28: isize
  set GetClass(value: bigint | number) {
    this.view.setBigInt64(40, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_DestinationOptionsFT (size: 120)
 */
export interface MI_DestinationOptionsFT {
  /** isize */
  Delete: bigint | number;
  /** isize */
  SetString: bigint | number;
  /** isize */
  SetNumber: bigint | number;
  /** isize */
  AddCredentials: bigint | number;
  /** isize */
  GetString: bigint | number;
  /** isize */
  GetNumber: bigint | number;
  /** isize */
  GetOptionCount: bigint | number;
  /** isize */
  GetOptionAt: bigint | number;
  /** isize */
  GetOption: bigint | number;
  /** isize */
  GetCredentialsCount: bigint | number;
  /** isize */
  GetCredentialsAt: bigint | number;
  /** isize */
  GetCredentialsPasswordAt: bigint | number;
  /** isize */
  Clone: bigint | number;
  /** isize */
  SetInterval: bigint | number;
  /** isize */
  GetInterval: bigint | number;
}

export const sizeofMI_DestinationOptionsFT = 120;

export function allocMI_DestinationOptionsFT(data?: Partial<MI_DestinationOptionsFT>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_DestinationOptionsFT);
  const view = new DataView(buf.buffer);
  // 0x00: isize
  if (data?.Delete !== undefined) view.setBigInt64(0, BigInt(data.Delete), true);
  // 0x08: isize
  if (data?.SetString !== undefined) view.setBigInt64(8, BigInt(data.SetString), true);
  // 0x10: isize
  if (data?.SetNumber !== undefined) view.setBigInt64(16, BigInt(data.SetNumber), true);
  // 0x18: isize
  if (data?.AddCredentials !== undefined) view.setBigInt64(24, BigInt(data.AddCredentials), true);
  // 0x20: isize
  if (data?.GetString !== undefined) view.setBigInt64(32, BigInt(data.GetString), true);
  // 0x28: isize
  if (data?.GetNumber !== undefined) view.setBigInt64(40, BigInt(data.GetNumber), true);
  // 0x30: isize
  if (data?.GetOptionCount !== undefined) view.setBigInt64(48, BigInt(data.GetOptionCount), true);
  // 0x38: isize
  if (data?.GetOptionAt !== undefined) view.setBigInt64(56, BigInt(data.GetOptionAt), true);
  // 0x40: isize
  if (data?.GetOption !== undefined) view.setBigInt64(64, BigInt(data.GetOption), true);
  // 0x48: isize
  if (data?.GetCredentialsCount !== undefined) view.setBigInt64(72, BigInt(data.GetCredentialsCount), true);
  // 0x50: isize
  if (data?.GetCredentialsAt !== undefined) view.setBigInt64(80, BigInt(data.GetCredentialsAt), true);
  // 0x58: isize
  if (data?.GetCredentialsPasswordAt !== undefined) view.setBigInt64(88, BigInt(data.GetCredentialsPasswordAt), true);
  // 0x60: isize
  if (data?.Clone !== undefined) view.setBigInt64(96, BigInt(data.Clone), true);
  // 0x68: isize
  if (data?.SetInterval !== undefined) view.setBigInt64(104, BigInt(data.SetInterval), true);
  // 0x70: isize
  if (data?.GetInterval !== undefined) view.setBigInt64(112, BigInt(data.GetInterval), true);
  return buf;
}

export class MI_DestinationOptionsFTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: isize
  get Delete(): bigint | number {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: isize
  get SetString(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: isize
  get SetNumber(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: isize
  get AddCredentials(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: isize
  get GetString(): bigint | number {
    return Number(this.view.getBigInt64(32, true));
  }

  // 0x28: isize
  get GetNumber(): bigint | number {
    return Number(this.view.getBigInt64(40, true));
  }

  // 0x30: isize
  get GetOptionCount(): bigint | number {
    return Number(this.view.getBigInt64(48, true));
  }

  // 0x38: isize
  get GetOptionAt(): bigint | number {
    return Number(this.view.getBigInt64(56, true));
  }

  // 0x40: isize
  get GetOption(): bigint | number {
    return Number(this.view.getBigInt64(64, true));
  }

  // 0x48: isize
  get GetCredentialsCount(): bigint | number {
    return Number(this.view.getBigInt64(72, true));
  }

  // 0x50: isize
  get GetCredentialsAt(): bigint | number {
    return Number(this.view.getBigInt64(80, true));
  }

  // 0x58: isize
  get GetCredentialsPasswordAt(): bigint | number {
    return Number(this.view.getBigInt64(88, true));
  }

  // 0x60: isize
  get Clone(): bigint | number {
    return Number(this.view.getBigInt64(96, true));
  }

  // 0x68: isize
  get SetInterval(): bigint | number {
    return Number(this.view.getBigInt64(104, true));
  }

  // 0x70: isize
  get GetInterval(): bigint | number {
    return Number(this.view.getBigInt64(112, true));
  }

  // 0x00: isize
  set Delete(value: bigint | number) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: isize
  set SetString(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: isize
  set SetNumber(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: isize
  set AddCredentials(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: isize
  set GetString(value: bigint | number) {
    this.view.setBigInt64(32, BigInt(value), true);
  }

  // 0x28: isize
  set GetNumber(value: bigint | number) {
    this.view.setBigInt64(40, BigInt(value), true);
  }

  // 0x30: isize
  set GetOptionCount(value: bigint | number) {
    this.view.setBigInt64(48, BigInt(value), true);
  }

  // 0x38: isize
  set GetOptionAt(value: bigint | number) {
    this.view.setBigInt64(56, BigInt(value), true);
  }

  // 0x40: isize
  set GetOption(value: bigint | number) {
    this.view.setBigInt64(64, BigInt(value), true);
  }

  // 0x48: isize
  set GetCredentialsCount(value: bigint | number) {
    this.view.setBigInt64(72, BigInt(value), true);
  }

  // 0x50: isize
  set GetCredentialsAt(value: bigint | number) {
    this.view.setBigInt64(80, BigInt(value), true);
  }

  // 0x58: isize
  set GetCredentialsPasswordAt(value: bigint | number) {
    this.view.setBigInt64(88, BigInt(value), true);
  }

  // 0x60: isize
  set Clone(value: bigint | number) {
    this.view.setBigInt64(96, BigInt(value), true);
  }

  // 0x68: isize
  set SetInterval(value: bigint | number) {
    this.view.setBigInt64(104, BigInt(value), true);
  }

  // 0x70: isize
  set GetInterval(value: bigint | number) {
    this.view.setBigInt64(112, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_OperationOptionsFT (size: 104)
 */
export interface MI_OperationOptionsFT {
  /** isize */
  Delete: bigint | number;
  /** isize */
  SetString: bigint | number;
  /** isize */
  SetNumber: bigint | number;
  /** isize */
  SetCustomOption: bigint | number;
  /** isize */
  GetString: bigint | number;
  /** isize */
  GetNumber: bigint | number;
  /** isize */
  GetOptionCount: bigint | number;
  /** isize */
  GetOptionAt: bigint | number;
  /** isize */
  GetOption: bigint | number;
  /** isize */
  GetEnabledChannels: bigint | number;
  /** isize */
  Clone: bigint | number;
  /** isize */
  SetInterval: bigint | number;
  /** isize */
  GetInterval: bigint | number;
}

export const sizeofMI_OperationOptionsFT = 104;

export function allocMI_OperationOptionsFT(data?: Partial<MI_OperationOptionsFT>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_OperationOptionsFT);
  const view = new DataView(buf.buffer);
  // 0x00: isize
  if (data?.Delete !== undefined) view.setBigInt64(0, BigInt(data.Delete), true);
  // 0x08: isize
  if (data?.SetString !== undefined) view.setBigInt64(8, BigInt(data.SetString), true);
  // 0x10: isize
  if (data?.SetNumber !== undefined) view.setBigInt64(16, BigInt(data.SetNumber), true);
  // 0x18: isize
  if (data?.SetCustomOption !== undefined) view.setBigInt64(24, BigInt(data.SetCustomOption), true);
  // 0x20: isize
  if (data?.GetString !== undefined) view.setBigInt64(32, BigInt(data.GetString), true);
  // 0x28: isize
  if (data?.GetNumber !== undefined) view.setBigInt64(40, BigInt(data.GetNumber), true);
  // 0x30: isize
  if (data?.GetOptionCount !== undefined) view.setBigInt64(48, BigInt(data.GetOptionCount), true);
  // 0x38: isize
  if (data?.GetOptionAt !== undefined) view.setBigInt64(56, BigInt(data.GetOptionAt), true);
  // 0x40: isize
  if (data?.GetOption !== undefined) view.setBigInt64(64, BigInt(data.GetOption), true);
  // 0x48: isize
  if (data?.GetEnabledChannels !== undefined) view.setBigInt64(72, BigInt(data.GetEnabledChannels), true);
  // 0x50: isize
  if (data?.Clone !== undefined) view.setBigInt64(80, BigInt(data.Clone), true);
  // 0x58: isize
  if (data?.SetInterval !== undefined) view.setBigInt64(88, BigInt(data.SetInterval), true);
  // 0x60: isize
  if (data?.GetInterval !== undefined) view.setBigInt64(96, BigInt(data.GetInterval), true);
  return buf;
}

export class MI_OperationOptionsFTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: isize
  get Delete(): bigint | number {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: isize
  get SetString(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: isize
  get SetNumber(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: isize
  get SetCustomOption(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: isize
  get GetString(): bigint | number {
    return Number(this.view.getBigInt64(32, true));
  }

  // 0x28: isize
  get GetNumber(): bigint | number {
    return Number(this.view.getBigInt64(40, true));
  }

  // 0x30: isize
  get GetOptionCount(): bigint | number {
    return Number(this.view.getBigInt64(48, true));
  }

  // 0x38: isize
  get GetOptionAt(): bigint | number {
    return Number(this.view.getBigInt64(56, true));
  }

  // 0x40: isize
  get GetOption(): bigint | number {
    return Number(this.view.getBigInt64(64, true));
  }

  // 0x48: isize
  get GetEnabledChannels(): bigint | number {
    return Number(this.view.getBigInt64(72, true));
  }

  // 0x50: isize
  get Clone(): bigint | number {
    return Number(this.view.getBigInt64(80, true));
  }

  // 0x58: isize
  get SetInterval(): bigint | number {
    return Number(this.view.getBigInt64(88, true));
  }

  // 0x60: isize
  get GetInterval(): bigint | number {
    return Number(this.view.getBigInt64(96, true));
  }

  // 0x00: isize
  set Delete(value: bigint | number) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: isize
  set SetString(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: isize
  set SetNumber(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: isize
  set SetCustomOption(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: isize
  set GetString(value: bigint | number) {
    this.view.setBigInt64(32, BigInt(value), true);
  }

  // 0x28: isize
  set GetNumber(value: bigint | number) {
    this.view.setBigInt64(40, BigInt(value), true);
  }

  // 0x30: isize
  set GetOptionCount(value: bigint | number) {
    this.view.setBigInt64(48, BigInt(value), true);
  }

  // 0x38: isize
  set GetOptionAt(value: bigint | number) {
    this.view.setBigInt64(56, BigInt(value), true);
  }

  // 0x40: isize
  set GetOption(value: bigint | number) {
    this.view.setBigInt64(64, BigInt(value), true);
  }

  // 0x48: isize
  set GetEnabledChannels(value: bigint | number) {
    this.view.setBigInt64(72, BigInt(value), true);
  }

  // 0x50: isize
  set Clone(value: bigint | number) {
    this.view.setBigInt64(80, BigInt(value), true);
  }

  // 0x58: isize
  set SetInterval(value: bigint | number) {
    this.view.setBigInt64(88, BigInt(value), true);
  }

  // 0x60: isize
  set GetInterval(value: bigint | number) {
    this.view.setBigInt64(96, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_Application (size: 24)
 */
export interface MI_Application {
  /** u64 */
  reserved1: bigint | number;
  /** isize */
  reserved2: bigint | number;
  /** ptr */
  ft: Deno.PointerValue | Uint8Array;
}

export const sizeofMI_Application = 24;

export function allocMI_Application(data?: Partial<MI_Application>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Application);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.reserved1 !== undefined) view.setBigUint64(0, BigInt(data.reserved1), true);
  // 0x08: isize
  if (data?.reserved2 !== undefined) view.setBigInt64(8, BigInt(data.reserved2), true);
  // 0x10: pointer
  if (data?.ft !== undefined) view.setBigUint64(16, data.ft === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ft))), true);
  return buf;
}

export class MI_ApplicationView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get reserved1(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: isize
  get reserved2(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: pointer
  get ft(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u64
  set reserved1(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: isize
  set reserved2(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set ft(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_Session (size: 24)
 */
export interface MI_Session {
  /** u64 */
  reserved1: bigint | number;
  /** isize */
  reserved2: bigint | number;
  /** ptr */
  ft: Deno.PointerValue | Uint8Array;
}

export const sizeofMI_Session = 24;

export function allocMI_Session(data?: Partial<MI_Session>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Session);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.reserved1 !== undefined) view.setBigUint64(0, BigInt(data.reserved1), true);
  // 0x08: isize
  if (data?.reserved2 !== undefined) view.setBigInt64(8, BigInt(data.reserved2), true);
  // 0x10: pointer
  if (data?.ft !== undefined) view.setBigUint64(16, data.ft === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ft))), true);
  return buf;
}

export class MI_SessionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get reserved1(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: isize
  get reserved2(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: pointer
  get ft(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u64
  set reserved1(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: isize
  set reserved2(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set ft(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_Operation (size: 24)
 */
export interface MI_Operation {
  /** u64 */
  reserved1: bigint | number;
  /** isize */
  reserved2: bigint | number;
  /** ptr */
  ft: Deno.PointerValue | Uint8Array;
}

export const sizeofMI_Operation = 24;

export function allocMI_Operation(data?: Partial<MI_Operation>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_Operation);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.reserved1 !== undefined) view.setBigUint64(0, BigInt(data.reserved1), true);
  // 0x08: isize
  if (data?.reserved2 !== undefined) view.setBigInt64(8, BigInt(data.reserved2), true);
  // 0x10: pointer
  if (data?.ft !== undefined) view.setBigUint64(16, data.ft === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ft))), true);
  return buf;
}

export class MI_OperationView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get reserved1(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: isize
  get reserved2(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: pointer
  get ft(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u64
  set reserved1(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: isize
  set reserved2(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set ft(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_HostedProvider (size: 24)
 */
export interface MI_HostedProvider {
  /** u64 */
  reserved1: bigint | number;
  /** isize */
  reserved2: bigint | number;
  /** ptr */
  ft: Deno.PointerValue | Uint8Array;
}

export const sizeofMI_HostedProvider = 24;

export function allocMI_HostedProvider(data?: Partial<MI_HostedProvider>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_HostedProvider);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.reserved1 !== undefined) view.setBigUint64(0, BigInt(data.reserved1), true);
  // 0x08: isize
  if (data?.reserved2 !== undefined) view.setBigInt64(8, BigInt(data.reserved2), true);
  // 0x10: pointer
  if (data?.ft !== undefined) view.setBigUint64(16, data.ft === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ft))), true);
  return buf;
}

export class MI_HostedProviderView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get reserved1(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: isize
  get reserved2(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: pointer
  get ft(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u64
  set reserved1(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: isize
  set reserved2(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set ft(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_DestinationOptions (size: 24)
 */
export interface MI_DestinationOptions {
  /** u64 */
  reserved1: bigint | number;
  /** isize */
  reserved2: bigint | number;
  /** ptr */
  ft: Deno.PointerValue | Uint8Array;
}

export const sizeofMI_DestinationOptions = 24;

export function allocMI_DestinationOptions(data?: Partial<MI_DestinationOptions>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_DestinationOptions);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.reserved1 !== undefined) view.setBigUint64(0, BigInt(data.reserved1), true);
  // 0x08: isize
  if (data?.reserved2 !== undefined) view.setBigInt64(8, BigInt(data.reserved2), true);
  // 0x10: pointer
  if (data?.ft !== undefined) view.setBigUint64(16, data.ft === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ft))), true);
  return buf;
}

export class MI_DestinationOptionsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get reserved1(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: isize
  get reserved2(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: pointer
  get ft(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u64
  set reserved1(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: isize
  set reserved2(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set ft(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_OperationOptions (size: 24)
 */
export interface MI_OperationOptions {
  /** u64 */
  reserved1: bigint | number;
  /** isize */
  reserved2: bigint | number;
  /** ptr */
  ft: Deno.PointerValue | Uint8Array;
}

export const sizeofMI_OperationOptions = 24;

export function allocMI_OperationOptions(data?: Partial<MI_OperationOptions>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_OperationOptions);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.reserved1 !== undefined) view.setBigUint64(0, BigInt(data.reserved1), true);
  // 0x08: isize
  if (data?.reserved2 !== undefined) view.setBigInt64(8, BigInt(data.reserved2), true);
  // 0x10: pointer
  if (data?.ft !== undefined) view.setBigUint64(16, data.ft === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ft))), true);
  return buf;
}

export class MI_OperationOptionsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get reserved1(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: isize
  get reserved2(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: pointer
  get ft(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u64
  set reserved1(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: isize
  set reserved2(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set ft(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_UtilitiesFT (size: 16)
 */
export interface MI_UtilitiesFT {
  /** isize */
  MapErrorToMiErrorCategory: bigint | number;
  /** isize */
  CimErrorFromErrorCode: bigint | number;
}

export const sizeofMI_UtilitiesFT = 16;

export function allocMI_UtilitiesFT(data?: Partial<MI_UtilitiesFT>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_UtilitiesFT);
  const view = new DataView(buf.buffer);
  // 0x00: isize
  if (data?.MapErrorToMiErrorCategory !== undefined) view.setBigInt64(0, BigInt(data.MapErrorToMiErrorCategory), true);
  // 0x08: isize
  if (data?.CimErrorFromErrorCode !== undefined) view.setBigInt64(8, BigInt(data.CimErrorFromErrorCode), true);
  return buf;
}

export class MI_UtilitiesFTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: isize
  get MapErrorToMiErrorCategory(): bigint | number {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: isize
  get CimErrorFromErrorCode(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x00: isize
  set MapErrorToMiErrorCategory(value: bigint | number) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: isize
  set CimErrorFromErrorCode(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Wmi.MI_ClientFT_V1 (size: 80)
 */
export interface MI_ClientFT_V1 {
  /** ptr */
  applicationFT: Deno.PointerValue | Uint8Array;
  /** ptr */
  sessionFT: Deno.PointerValue | Uint8Array;
  /** ptr */
  operationFT: Deno.PointerValue | Uint8Array;
  /** ptr */
  hostedProviderFT: Deno.PointerValue | Uint8Array;
  /** ptr */
  serializerFT: Deno.PointerValue | Uint8Array;
  /** ptr */
  deserializerFT: Deno.PointerValue | Uint8Array;
  /** ptr */
  subscribeDeliveryOptionsFT: Deno.PointerValue | Uint8Array;
  /** ptr */
  destinationOptionsFT: Deno.PointerValue | Uint8Array;
  /** ptr */
  operationOptionsFT: Deno.PointerValue | Uint8Array;
  /** ptr */
  utilitiesFT: Deno.PointerValue | Uint8Array;
}

export const sizeofMI_ClientFT_V1 = 80;

export function allocMI_ClientFT_V1(data?: Partial<MI_ClientFT_V1>): Uint8Array {
  const buf = new Uint8Array(sizeofMI_ClientFT_V1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.applicationFT !== undefined) view.setBigUint64(0, data.applicationFT === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.applicationFT))), true);
  // 0x08: pointer
  if (data?.sessionFT !== undefined) view.setBigUint64(8, data.sessionFT === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sessionFT))), true);
  // 0x10: pointer
  if (data?.operationFT !== undefined) view.setBigUint64(16, data.operationFT === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.operationFT))), true);
  // 0x18: pointer
  if (data?.hostedProviderFT !== undefined) view.setBigUint64(24, data.hostedProviderFT === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hostedProviderFT))), true);
  // 0x20: pointer
  if (data?.serializerFT !== undefined) view.setBigUint64(32, data.serializerFT === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.serializerFT))), true);
  // 0x28: pointer
  if (data?.deserializerFT !== undefined) view.setBigUint64(40, data.deserializerFT === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.deserializerFT))), true);
  // 0x30: pointer
  if (data?.subscribeDeliveryOptionsFT !== undefined) view.setBigUint64(48, data.subscribeDeliveryOptionsFT === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.subscribeDeliveryOptionsFT))), true);
  // 0x38: pointer
  if (data?.destinationOptionsFT !== undefined) view.setBigUint64(56, data.destinationOptionsFT === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.destinationOptionsFT))), true);
  // 0x40: pointer
  if (data?.operationOptionsFT !== undefined) view.setBigUint64(64, data.operationOptionsFT === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.operationOptionsFT))), true);
  // 0x48: pointer
  if (data?.utilitiesFT !== undefined) view.setBigUint64(72, data.utilitiesFT === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.utilitiesFT))), true);
  return buf;
}

export class MI_ClientFT_V1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get applicationFT(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get sessionFT(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get operationFT(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get hostedProviderFT(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get serializerFT(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get deserializerFT(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get subscribeDeliveryOptionsFT(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get destinationOptionsFT(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get operationOptionsFT(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get utilitiesFT(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set applicationFT(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set sessionFT(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set operationFT(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set hostedProviderFT(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set serializerFT(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set deserializerFT(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set subscribeDeliveryOptionsFT(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set destinationOptionsFT(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set operationOptionsFT(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set utilitiesFT(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type BOOL = number;

/**
 * Windows.Win32.System.Wmi.SWbemQueryQualifiedName (size: 48)
 */
export interface SWbemQueryQualifiedName {
  /** u32 */
  m_uVersion: number;
  /** u32 */
  m_uTokenType: number;
  /** u32 */
  m_uNameListSize: number;
  /** ptr */
  m_ppszNameList: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.BOOL */
  m_bArraysUsed: boolean;
  /** ptr */
  m_pbArrayElUsed: Deno.PointerValue | Uint8Array;
  /** ptr */
  m_puArrayIndex: Deno.PointerValue | Uint8Array;
}

export const sizeofSWbemQueryQualifiedName = 48;

export function allocSWbemQueryQualifiedName(data?: Partial<SWbemQueryQualifiedName>): Uint8Array {
  const buf = new Uint8Array(sizeofSWbemQueryQualifiedName);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.m_uVersion !== undefined) view.setUint32(0, Number(data.m_uVersion), true);
  // 0x04: u32
  if (data?.m_uTokenType !== undefined) view.setUint32(4, Number(data.m_uTokenType), true);
  // 0x08: u32
  if (data?.m_uNameListSize !== undefined) view.setUint32(8, Number(data.m_uNameListSize), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.m_ppszNameList !== undefined) view.setBigUint64(16, data.m_ppszNameList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.m_ppszNameList))), true);
  // 0x18: i32
  if (data?.m_bArraysUsed !== undefined) view.setInt32(24, Number(data.m_bArraysUsed), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.m_pbArrayElUsed !== undefined) view.setBigUint64(32, data.m_pbArrayElUsed === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.m_pbArrayElUsed))), true);
  // 0x28: pointer
  if (data?.m_puArrayIndex !== undefined) view.setBigUint64(40, data.m_puArrayIndex === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.m_puArrayIndex))), true);
  return buf;
}

export class SWbemQueryQualifiedNameView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get m_uVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get m_uTokenType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get m_uNameListSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get m_ppszNameList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get m_bArraysUsed(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get m_pbArrayElUsed(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get m_puArrayIndex(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set m_uVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set m_uTokenType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set m_uNameListSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set m_ppszNameList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set m_bArraysUsed(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set m_pbArrayElUsed(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set m_puArrayIndex(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type PWSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.System.Wmi.SWbemRpnConst (size: 48)
 */
export interface SWbemRpnConst {
  /** Windows.Win32.Foundation.PWSTR */
  m_pszStrVal: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.BOOL */
  m_bBoolVal: boolean;
  /** i32 */
  m_lLongVal: number;
  /** u32 */
  m_uLongVal: number;
  /** f64 */
  m_dblVal: number;
  /** i64 */
  m_lVal64: bigint | number;
  /** i64 */
  m_uVal64: bigint | number;
}

export const sizeofSWbemRpnConst = 48;

export function allocSWbemRpnConst(data?: Partial<SWbemRpnConst>): Uint8Array {
  const buf = new Uint8Array(sizeofSWbemRpnConst);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.m_pszStrVal !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.m_pszStrVal);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: i32
  if (data?.m_bBoolVal !== undefined) view.setInt32(8, Number(data.m_bBoolVal), true);
  // 0x0c: i32
  if (data?.m_lLongVal !== undefined) view.setInt32(12, Number(data.m_lLongVal), true);
  // 0x10: u32
  if (data?.m_uLongVal !== undefined) view.setUint32(16, Number(data.m_uLongVal), true);
  // 0x14: pad4
  // 0x18: f64
  if (data?.m_dblVal !== undefined) view.setFloat64(24, Number(data.m_dblVal), true);
  // 0x20: i64
  if (data?.m_lVal64 !== undefined) view.setBigInt64(32, BigInt(data.m_lVal64), true);
  // 0x28: i64
  if (data?.m_uVal64 !== undefined) view.setBigInt64(40, BigInt(data.m_uVal64), true);
  return buf;
}

export class SWbemRpnConstView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get m_pszStrVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get m_bBoolVal(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get m_lLongVal(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get m_uLongVal(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: f64
  get m_dblVal(): number {
    return this.view.getFloat64(24, true);
  }

  // 0x20: i64
  get m_lVal64(): bigint | number {
    return Number(this.view.getBigInt64(32, true));
  }

  // 0x28: i64
  get m_uVal64(): bigint | number {
    return Number(this.view.getBigInt64(40, true));
  }

  // 0x00: buffer
  set m_pszStrVal(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: i32
  set m_bBoolVal(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set m_lLongVal(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set m_uLongVal(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: f64
  set m_dblVal(value: number) {
    this.view.setFloat64(24, value, true);
  }

  // 0x20: i64
  set m_lVal64(value: bigint | number) {
    this.view.setBigInt64(32, BigInt(value), true);
  }

  // 0x28: i64
  set m_uVal64(value: bigint | number) {
    this.view.setBigInt64(40, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Wmi.SWbemRpnQueryToken (size: 80)
 */
export interface SWbemRpnQueryToken {
  /** u32 */
  m_uVersion: number;
  /** u32 */
  m_uTokenType: number;
  /** u32 */
  m_uSubexpressionShape: number;
  /** u32 */
  m_uOperator: number;
  /** ptr */
  m_pRightIdent: Deno.PointerValue | Uint8Array;
  /** ptr */
  m_pLeftIdent: Deno.PointerValue | Uint8Array;
  /** u32 */
  m_uConstApparentType: number;
  /** Windows.Win32.System.Wmi.SWbemRpnConst */
  m_Const: Uint8Array | Deno.PointerValue;
  /** u32 */
  m_uConst2ApparentType: number;
  /** Windows.Win32.System.Wmi.SWbemRpnConst */
  m_Const2: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  m_pszRightFunc: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  m_pszLeftFunc: string | null | Uint8Array | Uint16Array;
}

export const sizeofSWbemRpnQueryToken = 80;

export function allocSWbemRpnQueryToken(data?: Partial<SWbemRpnQueryToken>): Uint8Array {
  const buf = new Uint8Array(sizeofSWbemRpnQueryToken);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.m_uVersion !== undefined) view.setUint32(0, Number(data.m_uVersion), true);
  // 0x04: u32
  if (data?.m_uTokenType !== undefined) view.setUint32(4, Number(data.m_uTokenType), true);
  // 0x08: u32
  if (data?.m_uSubexpressionShape !== undefined) view.setUint32(8, Number(data.m_uSubexpressionShape), true);
  // 0x0c: u32
  if (data?.m_uOperator !== undefined) view.setUint32(12, Number(data.m_uOperator), true);
  // 0x10: pointer
  if (data?.m_pRightIdent !== undefined) view.setBigUint64(16, data.m_pRightIdent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.m_pRightIdent))), true);
  // 0x18: pointer
  if (data?.m_pLeftIdent !== undefined) view.setBigUint64(24, data.m_pLeftIdent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.m_pLeftIdent))), true);
  // 0x20: u32
  if (data?.m_uConstApparentType !== undefined) view.setUint32(32, Number(data.m_uConstApparentType), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.m_Const !== undefined) view.setBigUint64(40, data.m_Const === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.m_Const))), true);
  // 0x30: u32
  if (data?.m_uConst2ApparentType !== undefined) view.setUint32(48, Number(data.m_uConst2ApparentType), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.m_Const2 !== undefined) view.setBigUint64(56, data.m_Const2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.m_Const2))), true);
  // 0x40: buffer
  if (data?.m_pszRightFunc !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.m_pszRightFunc);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: buffer
  if (data?.m_pszLeftFunc !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.m_pszLeftFunc);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  return buf;
}

export class SWbemRpnQueryTokenView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get m_uVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get m_uTokenType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get m_uSubexpressionShape(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get m_uOperator(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get m_pRightIdent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get m_pLeftIdent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get m_uConstApparentType(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get m_Const(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get m_uConst2ApparentType(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get m_Const2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: buffer
  get m_pszRightFunc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: buffer
  get m_pszLeftFunc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set m_uVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set m_uTokenType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set m_uSubexpressionShape(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set m_uOperator(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set m_pRightIdent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set m_pLeftIdent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set m_uConstApparentType(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set m_Const(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set m_uConst2ApparentType(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set m_Const2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: buffer
  set m_pszRightFunc(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: buffer
  set m_pszLeftFunc(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }
}

/**
 * Windows.Win32.System.Wmi.SWbemRpnTokenList (size: 16)
 */
export interface SWbemRpnTokenList {
  /** u32 */
  m_uVersion: number;
  /** u32 */
  m_uTokenType: number;
  /** u32 */
  m_uNumTokens: number;
}

export const sizeofSWbemRpnTokenList = 16;

export function allocSWbemRpnTokenList(data?: Partial<SWbemRpnTokenList>): Uint8Array {
  const buf = new Uint8Array(sizeofSWbemRpnTokenList);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.m_uVersion !== undefined) view.setUint32(0, Number(data.m_uVersion), true);
  // 0x04: u32
  if (data?.m_uTokenType !== undefined) view.setUint32(4, Number(data.m_uTokenType), true);
  // 0x08: u32
  if (data?.m_uNumTokens !== undefined) view.setUint32(8, Number(data.m_uNumTokens), true);
  // 0x0c: pad4
  return buf;
}

export class SWbemRpnTokenListView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get m_uVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get m_uTokenType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get m_uNumTokens(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set m_uVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set m_uTokenType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set m_uNumTokens(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Wmi.SWbemRpnEncodedQuery (size: 136)
 */
export interface SWbemRpnEncodedQuery {
  /** u32 */
  m_uVersion: number;
  /** u32 */
  m_uTokenType: number;
  /** u64 */
  m_uParsedFeatureMask: bigint | number;
  /** u32 */
  m_uDetectedArraySize: number;
  /** ptr */
  m_puDetectedFeatures: Deno.PointerValue | Uint8Array;
  /** u32 */
  m_uSelectListSize: number;
  /** ptr */
  m_ppSelectList: Deno.PointerValue | Uint8Array;
  /** u32 */
  m_uFromTargetType: number;
  /** Windows.Win32.Foundation.PWSTR */
  m_pszOptionalFromPath: string | null | Uint8Array | Uint16Array;
  /** u32 */
  m_uFromListSize: number;
  /** ptr */
  m_ppszFromList: Deno.PointerValue | Uint8Array;
  /** u32 */
  m_uWhereClauseSize: number;
  /** ptr */
  m_ppRpnWhereClause: Deno.PointerValue | Uint8Array;
  /** f64 */
  m_dblWithinPolling: number;
  /** f64 */
  m_dblWithinWindow: number;
  /** u32 */
  m_uOrderByListSize: number;
  /** ptr */
  m_ppszOrderByList: Deno.PointerValue | Uint8Array;
  /** ptr */
  m_uOrderDirectionEl: Deno.PointerValue | Uint8Array;
}

export const sizeofSWbemRpnEncodedQuery = 136;

export function allocSWbemRpnEncodedQuery(data?: Partial<SWbemRpnEncodedQuery>): Uint8Array {
  const buf = new Uint8Array(sizeofSWbemRpnEncodedQuery);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.m_uVersion !== undefined) view.setUint32(0, Number(data.m_uVersion), true);
  // 0x04: u32
  if (data?.m_uTokenType !== undefined) view.setUint32(4, Number(data.m_uTokenType), true);
  // 0x08: u64
  if (data?.m_uParsedFeatureMask !== undefined) view.setBigUint64(8, BigInt(data.m_uParsedFeatureMask), true);
  // 0x10: u32
  if (data?.m_uDetectedArraySize !== undefined) view.setUint32(16, Number(data.m_uDetectedArraySize), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.m_puDetectedFeatures !== undefined) view.setBigUint64(24, data.m_puDetectedFeatures === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.m_puDetectedFeatures))), true);
  // 0x20: u32
  if (data?.m_uSelectListSize !== undefined) view.setUint32(32, Number(data.m_uSelectListSize), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.m_ppSelectList !== undefined) view.setBigUint64(40, data.m_ppSelectList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.m_ppSelectList))), true);
  // 0x30: u32
  if (data?.m_uFromTargetType !== undefined) view.setUint32(48, Number(data.m_uFromTargetType), true);
  // 0x34: pad4
  // 0x38: buffer
  if (data?.m_pszOptionalFromPath !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.m_pszOptionalFromPath);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f56))), true);
  }
  // 0x40: u32
  if (data?.m_uFromListSize !== undefined) view.setUint32(64, Number(data.m_uFromListSize), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.m_ppszFromList !== undefined) view.setBigUint64(72, data.m_ppszFromList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.m_ppszFromList))), true);
  // 0x50: u32
  if (data?.m_uWhereClauseSize !== undefined) view.setUint32(80, Number(data.m_uWhereClauseSize), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.m_ppRpnWhereClause !== undefined) view.setBigUint64(88, data.m_ppRpnWhereClause === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.m_ppRpnWhereClause))), true);
  // 0x60: f64
  if (data?.m_dblWithinPolling !== undefined) view.setFloat64(96, Number(data.m_dblWithinPolling), true);
  // 0x68: f64
  if (data?.m_dblWithinWindow !== undefined) view.setFloat64(104, Number(data.m_dblWithinWindow), true);
  // 0x70: u32
  if (data?.m_uOrderByListSize !== undefined) view.setUint32(112, Number(data.m_uOrderByListSize), true);
  // 0x74: pad4
  // 0x78: pointer
  if (data?.m_ppszOrderByList !== undefined) view.setBigUint64(120, data.m_ppszOrderByList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.m_ppszOrderByList))), true);
  // 0x80: pointer
  if (data?.m_uOrderDirectionEl !== undefined) view.setBigUint64(128, data.m_uOrderDirectionEl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.m_uOrderDirectionEl))), true);
  return buf;
}

export class SWbemRpnEncodedQueryView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get m_uVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get m_uTokenType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get m_uParsedFeatureMask(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u32
  get m_uDetectedArraySize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get m_puDetectedFeatures(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get m_uSelectListSize(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get m_ppSelectList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get m_uFromTargetType(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: buffer
  get m_pszOptionalFromPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get m_uFromListSize(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  get m_ppszFromList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: u32
  get m_uWhereClauseSize(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  get m_ppRpnWhereClause(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: f64
  get m_dblWithinPolling(): number {
    return this.view.getFloat64(96, true);
  }

  // 0x68: f64
  get m_dblWithinWindow(): number {
    return this.view.getFloat64(104, true);
  }

  // 0x70: u32
  get m_uOrderByListSize(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: pad4

  // 0x78: pointer
  get m_ppszOrderByList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: pointer
  get m_uOrderDirectionEl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set m_uVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set m_uTokenType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set m_uParsedFeatureMask(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u32
  set m_uDetectedArraySize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set m_puDetectedFeatures(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set m_uSelectListSize(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set m_ppSelectList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set m_uFromTargetType(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: buffer
  set m_pszOptionalFromPath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f56))), true);
  }

  // 0x40: u32
  set m_uFromListSize(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  set m_ppszFromList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: u32
  set m_uWhereClauseSize(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  set m_ppRpnWhereClause(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: f64
  set m_dblWithinPolling(value: number) {
    this.view.setFloat64(96, value, true);
  }

  // 0x68: f64
  set m_dblWithinWindow(value: number) {
    this.view.setFloat64(104, value, true);
  }

  // 0x70: u32
  set m_uOrderByListSize(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: pad4

  // 0x78: pointer
  set m_ppszOrderByList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: pointer
  set m_uOrderDirectionEl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Wmi.SWbemAnalysisMatrix (size: 40)
 */
export interface SWbemAnalysisMatrix {
  /** u32 */
  m_uVersion: number;
  /** u32 */
  m_uMatrixType: number;
  /** Windows.Win32.Foundation.PWSTR */
  m_pszProperty: string | null | Uint8Array | Uint16Array;
  /** u32 */
  m_uPropertyType: number;
  /** u32 */
  m_uEntries: number;
  /** ptr */
  m_pValues: Deno.PointerValue | Uint8Array;
  /** ptr */
  m_pbTruthTable: Deno.PointerValue | Uint8Array;
}

export const sizeofSWbemAnalysisMatrix = 40;

export function allocSWbemAnalysisMatrix(data?: Partial<SWbemAnalysisMatrix>): Uint8Array {
  const buf = new Uint8Array(sizeofSWbemAnalysisMatrix);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.m_uVersion !== undefined) view.setUint32(0, Number(data.m_uVersion), true);
  // 0x04: u32
  if (data?.m_uMatrixType !== undefined) view.setUint32(4, Number(data.m_uMatrixType), true);
  // 0x08: buffer
  if (data?.m_pszProperty !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.m_pszProperty);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.m_uPropertyType !== undefined) view.setUint32(16, Number(data.m_uPropertyType), true);
  // 0x14: u32
  if (data?.m_uEntries !== undefined) view.setUint32(20, Number(data.m_uEntries), true);
  // 0x18: pointer
  if (data?.m_pValues !== undefined) view.setBigUint64(24, data.m_pValues === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.m_pValues))), true);
  // 0x20: pointer
  if (data?.m_pbTruthTable !== undefined) view.setBigUint64(32, data.m_pbTruthTable === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.m_pbTruthTable))), true);
  return buf;
}

export class SWbemAnalysisMatrixView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get m_uVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get m_uMatrixType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get m_pszProperty(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get m_uPropertyType(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get m_uEntries(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get m_pValues(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get m_pbTruthTable(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set m_uVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set m_uMatrixType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set m_pszProperty(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set m_uPropertyType(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set m_uEntries(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set m_pValues(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set m_pbTruthTable(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Wmi.SWbemAnalysisMatrixList (size: 24)
 */
export interface SWbemAnalysisMatrixList {
  /** u32 */
  m_uVersion: number;
  /** u32 */
  m_uMatrixType: number;
  /** u32 */
  m_uNumMatrices: number;
  /** ptr */
  m_pMatrices: Deno.PointerValue | Uint8Array;
}

export const sizeofSWbemAnalysisMatrixList = 24;

export function allocSWbemAnalysisMatrixList(data?: Partial<SWbemAnalysisMatrixList>): Uint8Array {
  const buf = new Uint8Array(sizeofSWbemAnalysisMatrixList);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.m_uVersion !== undefined) view.setUint32(0, Number(data.m_uVersion), true);
  // 0x04: u32
  if (data?.m_uMatrixType !== undefined) view.setUint32(4, Number(data.m_uMatrixType), true);
  // 0x08: u32
  if (data?.m_uNumMatrices !== undefined) view.setUint32(8, Number(data.m_uNumMatrices), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.m_pMatrices !== undefined) view.setBigUint64(16, data.m_pMatrices === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.m_pMatrices))), true);
  return buf;
}

export class SWbemAnalysisMatrixListView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get m_uVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get m_uMatrixType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get m_uNumMatrices(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get m_pMatrices(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set m_uVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set m_uMatrixType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set m_uNumMatrices(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set m_pMatrices(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Wmi.SWbemAssocQueryInf (size: 88)
 */
export interface SWbemAssocQueryInf {
  /** u32 */
  m_uVersion: number;
  /** u32 */
  m_uAnalysisType: number;
  /** u32 */
  m_uFeatureMask: number;
  /** Windows.Win32.System.Wmi.IWbemPath */
  m_pPath: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  m_pszPath: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  m_pszQueryText: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  m_pszResultClass: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  m_pszAssocClass: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  m_pszRole: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  m_pszResultRole: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  m_pszRequiredQualifier: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  m_pszRequiredAssocQualifier: string | null | Uint8Array | Uint16Array;
}

export const sizeofSWbemAssocQueryInf = 88;

export function allocSWbemAssocQueryInf(data?: Partial<SWbemAssocQueryInf>): Uint8Array {
  const buf = new Uint8Array(sizeofSWbemAssocQueryInf);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.m_uVersion !== undefined) view.setUint32(0, Number(data.m_uVersion), true);
  // 0x04: u32
  if (data?.m_uAnalysisType !== undefined) view.setUint32(4, Number(data.m_uAnalysisType), true);
  // 0x08: u32
  if (data?.m_uFeatureMask !== undefined) view.setUint32(8, Number(data.m_uFeatureMask), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.m_pPath !== undefined) view.setBigUint64(16, data.m_pPath === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.m_pPath))), true);
  // 0x18: buffer
  if (data?.m_pszPath !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.m_pszPath);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.m_pszQueryText !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.m_pszQueryText);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.m_pszResultClass !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.m_pszResultClass);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.m_pszAssocClass !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.m_pszAssocClass);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: buffer
  if (data?.m_pszRole !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.m_pszRole);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f56))), true);
  }
  // 0x40: buffer
  if (data?.m_pszResultRole !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.m_pszResultRole);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: buffer
  if (data?.m_pszRequiredQualifier !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.m_pszRequiredQualifier);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  // 0x50: buffer
  if (data?.m_pszRequiredAssocQualifier !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.m_pszRequiredAssocQualifier);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f80))), true);
  }
  return buf;
}

export class SWbemAssocQueryInfView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get m_uVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get m_uAnalysisType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get m_uFeatureMask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get m_pPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get m_pszPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get m_pszQueryText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get m_pszResultClass(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get m_pszAssocClass(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: buffer
  get m_pszRole(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: buffer
  get m_pszResultRole(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: buffer
  get m_pszRequiredQualifier(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: buffer
  get m_pszRequiredAssocQualifier(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set m_uVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set m_uAnalysisType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set m_uFeatureMask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set m_pPath(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: buffer
  set m_pszPath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set m_pszQueryText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set m_pszResultClass(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set m_pszAssocClass(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: buffer
  set m_pszRole(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f56))), true);
  }

  // 0x40: buffer
  set m_pszResultRole(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: buffer
  set m_pszRequiredQualifier(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }

  // 0x50: buffer
  set m_pszRequiredAssocQualifier(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f80))), true);
  }
}

export type HRESULT = number;

/**
 * Windows.Win32.System.Wmi.WBEM_COMPILE_STATUS_INFO (size: 32)
 */
export interface WBEM_COMPILE_STATUS_INFO {
  /** i32 */
  lPhaseError: number;
  /** Windows.Win32.Foundation.HRESULT */
  hRes: Uint8Array | Deno.PointerValue;
  /** i32 */
  ObjectNum: number;
  /** i32 */
  FirstLine: number;
  /** i32 */
  LastLine: number;
  /** u32 */
  dwOutFlags: number;
}

export const sizeofWBEM_COMPILE_STATUS_INFO = 32;

export function allocWBEM_COMPILE_STATUS_INFO(data?: Partial<WBEM_COMPILE_STATUS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWBEM_COMPILE_STATUS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lPhaseError !== undefined) view.setInt32(0, Number(data.lPhaseError), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hRes !== undefined) view.setBigUint64(8, data.hRes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hRes))), true);
  // 0x10: i32
  if (data?.ObjectNum !== undefined) view.setInt32(16, Number(data.ObjectNum), true);
  // 0x14: i32
  if (data?.FirstLine !== undefined) view.setInt32(20, Number(data.FirstLine), true);
  // 0x18: i32
  if (data?.LastLine !== undefined) view.setInt32(24, Number(data.LastLine), true);
  // 0x1c: u32
  if (data?.dwOutFlags !== undefined) view.setUint32(28, Number(data.dwOutFlags), true);
  return buf;
}

export class WBEM_COMPILE_STATUS_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lPhaseError(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hRes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get ObjectNum(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get FirstLine(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get LastLine(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: u32
  get dwOutFlags(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: i32
  set lPhaseError(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hRes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set ObjectNum(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set FirstLine(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set LastLine(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: u32
  set dwOutFlags(value: number) {
    this.view.setUint32(28, value, true);
  }
}

// Native Libraries

try {
  var libmi_dll = Deno.dlopen("mi.dll", {
    MI_Application_InitializeV1: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function MI_Application_InitializeV1(
  flags: number /* u32 */,
  applicationID: Deno.PointerValue | Uint8Array /* ptr */,
  extendedError: Deno.PointerValue | Uint8Array /* ptr */,
  application: Deno.PointerValue | Uint8Array /* ptr */,
): MI_Result /* Windows.Win32.System.Wmi.MI_Result */ {
  return libmi_dll.MI_Application_InitializeV1!(flags, util.toPointer(applicationID), util.toPointer(extendedError), util.toPointer(application));
}

