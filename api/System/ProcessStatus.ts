/// Auto-generated by Deno Win32: Windows.Win32.System.ProcessStatus.Apis

import * as util from "../../util.ts";

// Enums
export type ENUM_PROCESS_MODULES_EX_FLAGS = number;

// Constants
export const LIST_MODULES_ALL = 3;
export const LIST_MODULES_DEFAULT = 0;
export const LIST_MODULES_32BIT = 1;
export const LIST_MODULES_64BIT = 2;
export const PSAPI_VERSION = 2;

// Structs

/**
 * Windows.Win32.System.ProcessStatus.MODULEINFO (size: 24)
 */
export interface MODULEINFO {
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  SizeOfImage: number;
  /** ptr */
  EntryPoint: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMODULEINFO = 24;

export function allocMODULEINFO(data?: Partial<MODULEINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMODULEINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(0, data.lpBaseOfDll === null ? 0n : BigInt(util.toPointer(data.lpBaseOfDll)), true);
  // 0x08: u32
  if (data?.SizeOfImage !== undefined) view.setUint32(8, Number(data.SizeOfImage), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.EntryPoint !== undefined) view.setBigUint64(16, data.EntryPoint === null ? 0n : BigInt(util.toPointer(data.EntryPoint)), true);
  return buf;
}

/**
 * Windows.Win32.System.ProcessStatus.PSAPI_WS_WATCH_INFORMATION (size: 16)
 */
export interface PSAPI_WS_WATCH_INFORMATION {
  /** ptr */
  FaultingPc: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  FaultingVa: Deno.PointerValue | Uint8Array | null;
}

export const sizeofPSAPI_WS_WATCH_INFORMATION = 16;

export function allocPSAPI_WS_WATCH_INFORMATION(data?: Partial<PSAPI_WS_WATCH_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPSAPI_WS_WATCH_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.FaultingPc !== undefined) view.setBigUint64(0, data.FaultingPc === null ? 0n : BigInt(util.toPointer(data.FaultingPc)), true);
  // 0x08: pointer
  if (data?.FaultingVa !== undefined) view.setBigUint64(8, data.FaultingVa === null ? 0n : BigInt(util.toPointer(data.FaultingVa)), true);
  return buf;
}

/**
 * Windows.Win32.System.ProcessStatus.PSAPI_WS_WATCH_INFORMATION_EX (size: 24)
 */
export interface PSAPI_WS_WATCH_INFORMATION_EX {
  /** Windows.Win32.System.ProcessStatus.PSAPI_WS_WATCH_INFORMATION */
  BasicInfo: Uint8Array | Deno.PointerValue | null;
  /** usize */
  FaultingThreadId: Deno.PointerValue;
  /** usize */
  Flags: Deno.PointerValue;
}

export const sizeofPSAPI_WS_WATCH_INFORMATION_EX = 24;

export function allocPSAPI_WS_WATCH_INFORMATION_EX(data?: Partial<PSAPI_WS_WATCH_INFORMATION_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofPSAPI_WS_WATCH_INFORMATION_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.BasicInfo !== undefined) view.setBigUint64(0, data.BasicInfo === null ? 0n : BigInt(util.toPointer(data.BasicInfo)), true);
  // 0x08: usize
  if (data?.FaultingThreadId !== undefined) view.setBigUint64(8, BigInt(data.FaultingThreadId), true);
  // 0x10: usize
  if (data?.Flags !== undefined) view.setBigUint64(16, BigInt(data.Flags), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * Windows.Win32.System.ProcessStatus.PSAPI_WORKING_SET_BLOCK (size: 16)
 */
export interface PSAPI_WORKING_SET_BLOCK {
  /** usize */
  Flags: Deno.PointerValue;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPSAPI_WORKING_SET_BLOCK = 16;

export function allocPSAPI_WORKING_SET_BLOCK(data?: Partial<PSAPI_WORKING_SET_BLOCK>): Uint8Array {
  const buf = new Uint8Array(sizeofPSAPI_WORKING_SET_BLOCK);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Flags !== undefined) view.setBigUint64(0, BigInt(data.Flags), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.ProcessStatus.PSAPI_WORKING_SET_INFORMATION (size: 16)
 */
export interface PSAPI_WORKING_SET_INFORMATION {
  /** usize */
  NumberOfEntries: Deno.PointerValue;
  /** array */
  WorkingSetInfo: Deno.PointerValue | null;
}

export const sizeofPSAPI_WORKING_SET_INFORMATION = 16;

export function allocPSAPI_WORKING_SET_INFORMATION(data?: Partial<PSAPI_WORKING_SET_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPSAPI_WORKING_SET_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.NumberOfEntries !== undefined) view.setBigUint64(0, BigInt(data.NumberOfEntries), true);
  // 0x08: pointer
  if (data?.WorkingSetInfo !== undefined) view.setBigUint64(8, data.WorkingSetInfo === null ? 0n : BigInt(util.toPointer(data.WorkingSetInfo)), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.System.ProcessStatus.PSAPI_WORKING_SET_EX_BLOCK (size: 16)
 */
export interface PSAPI_WORKING_SET_EX_BLOCK {
  /** usize */
  Flags: Deno.PointerValue;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPSAPI_WORKING_SET_EX_BLOCK = 16;

export function allocPSAPI_WORKING_SET_EX_BLOCK(data?: Partial<PSAPI_WORKING_SET_EX_BLOCK>): Uint8Array {
  const buf = new Uint8Array(sizeofPSAPI_WORKING_SET_EX_BLOCK);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Flags !== undefined) view.setBigUint64(0, BigInt(data.Flags), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.ProcessStatus.PSAPI_WORKING_SET_EX_INFORMATION (size: 16)
 */
export interface PSAPI_WORKING_SET_EX_INFORMATION {
  /** ptr */
  VirtualAddress: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.ProcessStatus.PSAPI_WORKING_SET_EX_BLOCK */
  VirtualAttributes: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPSAPI_WORKING_SET_EX_INFORMATION = 16;

export function allocPSAPI_WORKING_SET_EX_INFORMATION(data?: Partial<PSAPI_WORKING_SET_EX_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPSAPI_WORKING_SET_EX_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.VirtualAddress !== undefined) view.setBigUint64(0, data.VirtualAddress === null ? 0n : BigInt(util.toPointer(data.VirtualAddress)), true);
  // 0x08: pointer
  if (data?.VirtualAttributes !== undefined) view.setBigUint64(8, data.VirtualAttributes === null ? 0n : BigInt(util.toPointer(data.VirtualAttributes)), true);
  return buf;
}

/**
 * Windows.Win32.System.ProcessStatus.PROCESS_MEMORY_COUNTERS (size: 72)
 */
export interface PROCESS_MEMORY_COUNTERS {
  /** u32 */
  cb: number;
  /** u32 */
  PageFaultCount: number;
  /** usize */
  PeakWorkingSetSize: Deno.PointerValue;
  /** usize */
  WorkingSetSize: Deno.PointerValue;
  /** usize */
  QuotaPeakPagedPoolUsage: Deno.PointerValue;
  /** usize */
  QuotaPagedPoolUsage: Deno.PointerValue;
  /** usize */
  QuotaPeakNonPagedPoolUsage: Deno.PointerValue;
  /** usize */
  QuotaNonPagedPoolUsage: Deno.PointerValue;
  /** usize */
  PagefileUsage: Deno.PointerValue;
  /** usize */
  PeakPagefileUsage: Deno.PointerValue;
}

export const sizeofPROCESS_MEMORY_COUNTERS = 72;

export function allocPROCESS_MEMORY_COUNTERS(data?: Partial<PROCESS_MEMORY_COUNTERS>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_MEMORY_COUNTERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cb !== undefined) view.setUint32(0, Number(data.cb), true);
  // 0x04: u32
  if (data?.PageFaultCount !== undefined) view.setUint32(4, Number(data.PageFaultCount), true);
  // 0x08: usize
  if (data?.PeakWorkingSetSize !== undefined) view.setBigUint64(8, BigInt(data.PeakWorkingSetSize), true);
  // 0x10: usize
  if (data?.WorkingSetSize !== undefined) view.setBigUint64(16, BigInt(data.WorkingSetSize), true);
  // 0x18: usize
  if (data?.QuotaPeakPagedPoolUsage !== undefined) view.setBigUint64(24, BigInt(data.QuotaPeakPagedPoolUsage), true);
  // 0x20: usize
  if (data?.QuotaPagedPoolUsage !== undefined) view.setBigUint64(32, BigInt(data.QuotaPagedPoolUsage), true);
  // 0x28: usize
  if (data?.QuotaPeakNonPagedPoolUsage !== undefined) view.setBigUint64(40, BigInt(data.QuotaPeakNonPagedPoolUsage), true);
  // 0x30: usize
  if (data?.QuotaNonPagedPoolUsage !== undefined) view.setBigUint64(48, BigInt(data.QuotaNonPagedPoolUsage), true);
  // 0x38: usize
  if (data?.PagefileUsage !== undefined) view.setBigUint64(56, BigInt(data.PagefileUsage), true);
  // 0x40: usize
  if (data?.PeakPagefileUsage !== undefined) view.setBigUint64(64, BigInt(data.PeakPagefileUsage), true);
  return buf;
}

/**
 * Windows.Win32.System.ProcessStatus.PROCESS_MEMORY_COUNTERS_EX (size: 80)
 */
export interface PROCESS_MEMORY_COUNTERS_EX {
  /** u32 */
  cb: number;
  /** u32 */
  PageFaultCount: number;
  /** usize */
  PeakWorkingSetSize: Deno.PointerValue;
  /** usize */
  WorkingSetSize: Deno.PointerValue;
  /** usize */
  QuotaPeakPagedPoolUsage: Deno.PointerValue;
  /** usize */
  QuotaPagedPoolUsage: Deno.PointerValue;
  /** usize */
  QuotaPeakNonPagedPoolUsage: Deno.PointerValue;
  /** usize */
  QuotaNonPagedPoolUsage: Deno.PointerValue;
  /** usize */
  PagefileUsage: Deno.PointerValue;
  /** usize */
  PeakPagefileUsage: Deno.PointerValue;
  /** usize */
  PrivateUsage: Deno.PointerValue;
}

export const sizeofPROCESS_MEMORY_COUNTERS_EX = 80;

export function allocPROCESS_MEMORY_COUNTERS_EX(data?: Partial<PROCESS_MEMORY_COUNTERS_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_MEMORY_COUNTERS_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cb !== undefined) view.setUint32(0, Number(data.cb), true);
  // 0x04: u32
  if (data?.PageFaultCount !== undefined) view.setUint32(4, Number(data.PageFaultCount), true);
  // 0x08: usize
  if (data?.PeakWorkingSetSize !== undefined) view.setBigUint64(8, BigInt(data.PeakWorkingSetSize), true);
  // 0x10: usize
  if (data?.WorkingSetSize !== undefined) view.setBigUint64(16, BigInt(data.WorkingSetSize), true);
  // 0x18: usize
  if (data?.QuotaPeakPagedPoolUsage !== undefined) view.setBigUint64(24, BigInt(data.QuotaPeakPagedPoolUsage), true);
  // 0x20: usize
  if (data?.QuotaPagedPoolUsage !== undefined) view.setBigUint64(32, BigInt(data.QuotaPagedPoolUsage), true);
  // 0x28: usize
  if (data?.QuotaPeakNonPagedPoolUsage !== undefined) view.setBigUint64(40, BigInt(data.QuotaPeakNonPagedPoolUsage), true);
  // 0x30: usize
  if (data?.QuotaNonPagedPoolUsage !== undefined) view.setBigUint64(48, BigInt(data.QuotaNonPagedPoolUsage), true);
  // 0x38: usize
  if (data?.PagefileUsage !== undefined) view.setBigUint64(56, BigInt(data.PagefileUsage), true);
  // 0x40: usize
  if (data?.PeakPagefileUsage !== undefined) view.setBigUint64(64, BigInt(data.PeakPagefileUsage), true);
  // 0x48: usize
  if (data?.PrivateUsage !== undefined) view.setBigUint64(72, BigInt(data.PrivateUsage), true);
  return buf;
}

/**
 * Windows.Win32.System.ProcessStatus.PERFORMANCE_INFORMATION (size: 104)
 */
export interface PERFORMANCE_INFORMATION {
  /** u32 */
  cb: number;
  /** usize */
  CommitTotal: Deno.PointerValue;
  /** usize */
  CommitLimit: Deno.PointerValue;
  /** usize */
  CommitPeak: Deno.PointerValue;
  /** usize */
  PhysicalTotal: Deno.PointerValue;
  /** usize */
  PhysicalAvailable: Deno.PointerValue;
  /** usize */
  SystemCache: Deno.PointerValue;
  /** usize */
  KernelTotal: Deno.PointerValue;
  /** usize */
  KernelPaged: Deno.PointerValue;
  /** usize */
  KernelNonpaged: Deno.PointerValue;
  /** usize */
  PageSize: Deno.PointerValue;
  /** u32 */
  HandleCount: number;
  /** u32 */
  ProcessCount: number;
  /** u32 */
  ThreadCount: number;
}

export const sizeofPERFORMANCE_INFORMATION = 104;

export function allocPERFORMANCE_INFORMATION(data?: Partial<PERFORMANCE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPERFORMANCE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cb !== undefined) view.setUint32(0, Number(data.cb), true);
  // 0x04: pad4
  // 0x08: usize
  if (data?.CommitTotal !== undefined) view.setBigUint64(8, BigInt(data.CommitTotal), true);
  // 0x10: usize
  if (data?.CommitLimit !== undefined) view.setBigUint64(16, BigInt(data.CommitLimit), true);
  // 0x18: usize
  if (data?.CommitPeak !== undefined) view.setBigUint64(24, BigInt(data.CommitPeak), true);
  // 0x20: usize
  if (data?.PhysicalTotal !== undefined) view.setBigUint64(32, BigInt(data.PhysicalTotal), true);
  // 0x28: usize
  if (data?.PhysicalAvailable !== undefined) view.setBigUint64(40, BigInt(data.PhysicalAvailable), true);
  // 0x30: usize
  if (data?.SystemCache !== undefined) view.setBigUint64(48, BigInt(data.SystemCache), true);
  // 0x38: usize
  if (data?.KernelTotal !== undefined) view.setBigUint64(56, BigInt(data.KernelTotal), true);
  // 0x40: usize
  if (data?.KernelPaged !== undefined) view.setBigUint64(64, BigInt(data.KernelPaged), true);
  // 0x48: usize
  if (data?.KernelNonpaged !== undefined) view.setBigUint64(72, BigInt(data.KernelNonpaged), true);
  // 0x50: usize
  if (data?.PageSize !== undefined) view.setBigUint64(80, BigInt(data.PageSize), true);
  // 0x58: u32
  if (data?.HandleCount !== undefined) view.setUint32(88, Number(data.HandleCount), true);
  // 0x5c: u32
  if (data?.ProcessCount !== undefined) view.setUint32(92, Number(data.ProcessCount), true);
  // 0x60: u32
  if (data?.ThreadCount !== undefined) view.setUint32(96, Number(data.ThreadCount), true);
  // 0x64: pad4
  return buf;
}

/**
 * Windows.Win32.System.ProcessStatus.ENUM_PAGE_FILE_INFORMATION (size: 32)
 */
export interface ENUM_PAGE_FILE_INFORMATION {
  /** u32 */
  cb: number;
  /** u32 */
  Reserved: number;
  /** usize */
  TotalSize: Deno.PointerValue;
  /** usize */
  TotalInUse: Deno.PointerValue;
  /** usize */
  PeakUsage: Deno.PointerValue;
}

export const sizeofENUM_PAGE_FILE_INFORMATION = 32;

export function allocENUM_PAGE_FILE_INFORMATION(data?: Partial<ENUM_PAGE_FILE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofENUM_PAGE_FILE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cb !== undefined) view.setUint32(0, Number(data.cb), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  // 0x08: usize
  if (data?.TotalSize !== undefined) view.setBigUint64(8, BigInt(data.TotalSize), true);
  // 0x10: usize
  if (data?.TotalInUse !== undefined) view.setBigUint64(16, BigInt(data.TotalInUse), true);
  // 0x18: usize
  if (data?.PeakUsage !== undefined) view.setBigUint64(24, BigInt(data.PeakUsage), true);
  return buf;
}

export type BOOL = number;

export type HANDLE = Deno.PointerValue;

export type HINSTANCE = Deno.PointerValue;

export type PSTR = Deno.PointerValue | Uint8Array | null;

export type PWSTR = Deno.PointerValue | Uint8Array | null;

// Native Libraries

try {
  var libKERNEL32_dll = Deno.dlopen("KERNEL32.dll", {
    K32EnumProcesses: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    K32EnumProcessModules: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    K32EnumProcessModulesEx: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32"],
      result: "i32",
    },
    K32GetModuleBaseNameA: {
      parameters: ["pointer", "pointer", "buffer", "u32"],
      result: "u32",
    },
    K32GetModuleBaseNameW: {
      parameters: ["pointer", "pointer", "buffer", "u32"],
      result: "u32",
    },
    K32GetModuleFileNameExA: {
      parameters: ["pointer", "pointer", "buffer", "u32"],
      result: "u32",
    },
    K32GetModuleFileNameExW: {
      parameters: ["pointer", "pointer", "buffer", "u32"],
      result: "u32",
    },
    K32GetModuleInformation: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    K32EmptyWorkingSet: {
      parameters: ["pointer"],
      result: "i32",
    },
    K32InitializeProcessForWsWatch: {
      parameters: ["pointer"],
      result: "i32",
    },
    K32GetWsChanges: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    K32GetWsChangesEx: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    K32GetMappedFileNameW: {
      parameters: ["pointer", "pointer", "buffer", "u32"],
      result: "u32",
    },
    K32GetMappedFileNameA: {
      parameters: ["pointer", "pointer", "buffer", "u32"],
      result: "u32",
    },
    K32EnumDeviceDrivers: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    K32GetDeviceDriverBaseNameA: {
      parameters: ["pointer", "buffer", "u32"],
      result: "u32",
    },
    K32GetDeviceDriverBaseNameW: {
      parameters: ["pointer", "buffer", "u32"],
      result: "u32",
    },
    K32GetDeviceDriverFileNameA: {
      parameters: ["pointer", "buffer", "u32"],
      result: "u32",
    },
    K32GetDeviceDriverFileNameW: {
      parameters: ["pointer", "buffer", "u32"],
      result: "u32",
    },
    K32QueryWorkingSet: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    K32QueryWorkingSetEx: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    K32GetProcessMemoryInfo: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    K32GetPerformanceInfo: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    K32EnumPageFilesW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    K32EnumPageFilesA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    K32GetProcessImageFileNameA: {
      parameters: ["pointer", "buffer", "u32"],
      result: "u32",
    },
    K32GetProcessImageFileNameW: {
      parameters: ["pointer", "buffer", "u32"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function K32EnumProcesses(
  lpidProcess: Deno.PointerValue | Uint8Array | null /* ptr */,
  cb: number /* u32 */,
  lpcbNeeded: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.K32EnumProcesses(util.toPointer(lpidProcess), cb, util.toPointer(lpcbNeeded)));
}

export function K32EnumProcessModules(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lphModule: Deno.PointerValue | Uint8Array | null /* ptr */,
  cb: number /* u32 */,
  lpcbNeeded: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.K32EnumProcessModules(util.toPointer(hProcess), util.toPointer(lphModule), cb, util.toPointer(lpcbNeeded)));
}

export function K32EnumProcessModulesEx(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lphModule: Deno.PointerValue | Uint8Array | null /* ptr */,
  cb: number /* u32 */,
  lpcbNeeded: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFilterFlag: ENUM_PROCESS_MODULES_EX_FLAGS /* Windows.Win32.System.ProcessStatus.ENUM_PROCESS_MODULES_EX_FLAGS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.K32EnumProcessModulesEx(util.toPointer(hProcess), util.toPointer(lphModule), cb, util.toPointer(lpcbNeeded), dwFilterFlag));
}

export function K32GetModuleBaseNameA(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  hModule: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  lpBaseName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.K32GetModuleBaseNameA(util.toPointer(hProcess), util.toPointer(hModule), util.pstrToFfi(lpBaseName), nSize);
}

export function K32GetModuleBaseNameW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  hModule: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  lpBaseName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.K32GetModuleBaseNameW(util.toPointer(hProcess), util.toPointer(hModule), util.pwstrToFfi(lpBaseName), nSize);
}

export function K32GetModuleFileNameExA(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  hModule: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  lpFilename: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.K32GetModuleFileNameExA(util.toPointer(hProcess), util.toPointer(hModule), util.pstrToFfi(lpFilename), nSize);
}

export function K32GetModuleFileNameExW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  hModule: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  lpFilename: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.K32GetModuleFileNameExW(util.toPointer(hProcess), util.toPointer(hModule), util.pwstrToFfi(lpFilename), nSize);
}

export function K32GetModuleInformation(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  hModule: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  lpmodinfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  cb: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.K32GetModuleInformation(util.toPointer(hProcess), util.toPointer(hModule), util.toPointer(lpmodinfo), cb));
}

export function K32EmptyWorkingSet(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.K32EmptyWorkingSet(util.toPointer(hProcess)));
}

export function K32InitializeProcessForWsWatch(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.K32InitializeProcessForWsWatch(util.toPointer(hProcess)));
}

export function K32GetWsChanges(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpWatchInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  cb: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.K32GetWsChanges(util.toPointer(hProcess), util.toPointer(lpWatchInfo), cb));
}

export function K32GetWsChangesEx(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpWatchInfoEx: Deno.PointerValue | Uint8Array | null /* ptr */,
  cb: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.K32GetWsChangesEx(util.toPointer(hProcess), util.toPointer(lpWatchInfoEx), util.toPointer(cb)));
}

export function K32GetMappedFileNameW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpv: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpFilename: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.K32GetMappedFileNameW(util.toPointer(hProcess), util.toPointer(lpv), util.pwstrToFfi(lpFilename), nSize);
}

export function K32GetMappedFileNameA(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpv: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpFilename: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.K32GetMappedFileNameA(util.toPointer(hProcess), util.toPointer(lpv), util.pstrToFfi(lpFilename), nSize);
}

export function K32EnumDeviceDrivers(
  lpImageBase: Deno.PointerValue | Uint8Array | null /* ptr */,
  cb: number /* u32 */,
  lpcbNeeded: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.K32EnumDeviceDrivers(util.toPointer(lpImageBase), cb, util.toPointer(lpcbNeeded)));
}

export function K32GetDeviceDriverBaseNameA(
  ImageBase: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpFilename: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.K32GetDeviceDriverBaseNameA(util.toPointer(ImageBase), util.pstrToFfi(lpFilename), nSize);
}

export function K32GetDeviceDriverBaseNameW(
  ImageBase: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpBaseName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.K32GetDeviceDriverBaseNameW(util.toPointer(ImageBase), util.pwstrToFfi(lpBaseName), nSize);
}

export function K32GetDeviceDriverFileNameA(
  ImageBase: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpFilename: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.K32GetDeviceDriverFileNameA(util.toPointer(ImageBase), util.pstrToFfi(lpFilename), nSize);
}

export function K32GetDeviceDriverFileNameW(
  ImageBase: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpFilename: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.K32GetDeviceDriverFileNameW(util.toPointer(ImageBase), util.pwstrToFfi(lpFilename), nSize);
}

export function K32QueryWorkingSet(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pv: Deno.PointerValue | Uint8Array | null /* ptr */,
  cb: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.K32QueryWorkingSet(util.toPointer(hProcess), util.toPointer(pv), cb));
}

export function K32QueryWorkingSetEx(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pv: Deno.PointerValue | Uint8Array | null /* ptr */,
  cb: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.K32QueryWorkingSetEx(util.toPointer(hProcess), util.toPointer(pv), cb));
}

export function K32GetProcessMemoryInfo(
  Process: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ppsmemCounters: Deno.PointerValue | Uint8Array | null /* ptr */,
  cb: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.K32GetProcessMemoryInfo(util.toPointer(Process), util.toPointer(ppsmemCounters), cb));
}

export function K32GetPerformanceInfo(
  pPerformanceInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  cb: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.K32GetPerformanceInfo(util.toPointer(pPerformanceInformation), cb));
}

export function K32EnumPageFilesW(
  pCallBackRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.ProcessStatus.PENUM_PAGE_FILE_CALLBACKW */,
  pContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.K32EnumPageFilesW(util.toPointer(pCallBackRoutine), util.toPointer(pContext)));
}

export function K32EnumPageFilesA(
  pCallBackRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.ProcessStatus.PENUM_PAGE_FILE_CALLBACKA */,
  pContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.K32EnumPageFilesA(util.toPointer(pCallBackRoutine), util.toPointer(pContext)));
}

export function K32GetProcessImageFileNameA(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpImageFileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.K32GetProcessImageFileNameA(util.toPointer(hProcess), util.pstrToFfi(lpImageFileName), nSize);
}

export function K32GetProcessImageFileNameW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpImageFileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nSize: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.K32GetProcessImageFileNameW(util.toPointer(hProcess), util.pwstrToFfi(lpImageFileName), nSize);
}

