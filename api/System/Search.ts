/// Auto-generated by Deno Win32: Windows.Win32.System.Search.Apis

import * as util from "../../util.ts";

// Enums
export type VARENUM = number;
export type DBTYPEENUM = number;
export type DBTYPEENUM15 = number;
export type DBTYPEENUM20 = number;
export type DBPARTENUM = number;
export type DBPARAMIOENUM = number;
export type DBBINDFLAGENUM = number;
export type DBMEMOWNERENUM = number;
export type DBSTATUSENUM = number;
export type DBSTATUSENUM20 = number;
export type DBSTATUSENUM21 = number;
export type DBBINDURLFLAGENUM = number;
export type DBBINDURLSTATUSENUM = number;
export type DBSTATUSENUM25 = number;
export type DBROWSTATUSENUM = number;
export type DBROWSTATUSENUM20 = number;
export type DBSTATUSENUM26 = number;
export type DBCOLUMNFLAGSENUM = number;
export type DBCOLUMNFLAGSENUM20 = number;
export type DBCOLUMNFLAGS15ENUM = number;
export type DBCOLUMNFLAGSENUM21 = number;
export type DBCOLUMNFLAGSENUM26 = number;
export type DBTABLESTATISTICSTYPE26 = number;
export type DBBOOKMARK = number;
export type DBPROPENUM = number;
export type DBPROPENUM15 = number;
export type DBPROPENUM20 = number;
export type DBPROPENUM21 = number;
export type DBPROPENUM25 = number;
export type DBPROPENUM26 = number;
export type DBPARAMFLAGSENUM = number;
export type DBPARAMFLAGSENUM20 = number;
export type DBPROPFLAGSENUM = number;
export type DBPROPFLAGSENUM21 = number;
export type DBPROPFLAGSENUM25 = number;
export type DBPROPFLAGSENUM26 = number;
export type DBPROPOPTIONSENUM = number;
export type DBPROPSTATUSENUM = number;
export type DBPROPSTATUSENUM21 = number;
export type DBINDEX_COL_ORDERENUM = number;
export type DBCOLUMNDESCFLAGSENUM = number;
export type DBEVENTPHASEENUM = number;
export type DBREASONENUM = number;
export type DBREASONENUM15 = number;
export type DBCOMPAREOPSENUM = number;
export type DBCOMPAREOPSENUM20 = number;
export type DBASYNCHOPENUM = number;
export type DBASYNCHPHASEENUM = number;
export type DBSORTENUM = number;
export type DBCOMMANDPERSISTFLAGENUM = number;
export type DBCOMMANDPERSISTFLAGENUM21 = number;
export type DBCONSTRAINTTYPEENUM = number;
export type DBUPDELRULEENUM = number;
export type DBMATCHTYPEENUM = number;
export type DBDEFERRABILITYENUM = number;
export type DBACCESSORFLAGSENUM = number;
export type DBBINDSTATUSENUM = number;
export type DBCOMPAREENUM = number;
export type DBPOSITIONFLAGSENUM = number;
export type DBPENDINGSTATUSENUM = number;
export type DBSEEKENUM = number;
export type DBRANGEENUM = number;
export type DBRANGEENUM20 = number;
export type DBRESULTFLAGENUM = number;
export type DBCONVERTFLAGSENUM = number;
export type DBCONVERTFLAGSENUM20 = number;
export type DBSOURCETYPEENUM = number;
export type DBSOURCETYPEENUM20 = number;
export type DBSOURCETYPEENUM25 = number;
export type DBLITERALENUM = number;
export type DBLITERALENUM20 = number;
export type DBLITERALENUM21 = number;
export type ACCESS_MASKENUM = number;
export type DBCOPYFLAGSENUM = number;
export type DBMOVEFLAGSENUM = number;
export type DBDELETEFLAGSENUM = number;
export type STRUCTURED_QUERY_SYNTAX = number;
export type STRUCTURED_QUERY_SINGLE_OPTION = number;
export type STRUCTURED_QUERY_MULTIOPTION = number;
export type STRUCTURED_QUERY_PARSE_ERROR = number;
export type STRUCTURED_QUERY_RESOLVE_OPTION = number;
export type CASE_REQUIREMENT = number;
export type INTERVAL_LIMIT_KIND = number;
export type QUERY_PARSER_MANAGER_OPTION = number;
export type CONDITION_CREATION_OPTIONS = number;
export type NAMED_ENTITY_CERTAINTY = number;
export type PROXY_ACCESS = number;
export type AUTH_TYPE = number;
export type FOLLOW_FLAGS = number;
export type CLUSION_REASON = number;
export type SEARCH_KIND_OF_CHANGE = number;
export type SEARCH_NOTIFICATION_PRIORITY = number;
export type SEARCH_INDEXING_PHASE = number;
export type CatalogStatus = number;
export type CatalogPausedReason = number;
export type PRIORITIZE_FLAGS = number;
export type SEARCH_TERM_EXPANSION = number;
export type SEARCH_QUERY_SYNTAX = number;
export type PRIORITY_LEVEL = number;
export type ROWSETEVENT_ITEMSTATE = number;
export type ROWSETEVENT_TYPE = number;
export type SUBSCRIPTIONTYPE = number;
export type SUBSCRIPTIONINFOFLAGS = number;
export type CREATESUBSCRIPTIONFLAGS = number;
export type SUBSCRIPTIONSCHEDULE = number;
export type DELIVERY_AGENT_FLAGS = number;
export type WEBCRAWL_RECURSEFLAGS = number;
export type CHANNEL_AGENT_FLAGS = number;
export type DBDATACONVERTENUM = number;
export type DCINFOTYPEENUM = number;
export type OSPFORMAT = number;
export type OSPRW = number;
export type OSPFIND = number;
export type OSPCOMP = number;
export type OSPXFER = number;
export type EBindInfoOptions = number;
export type DBPROMPTOPTIONSENUM = number;
export type KAGREQDIAGFLAGSENUM = number;
export type MSDSDBINITPROPENUM = number;
export type MSDSSESSIONPROPENUM = number;
export type SQLINTERVAL = number;
export type DBPROPENUM25_DEPRECATED = number;
export type DBREASONENUM25 = number;
export type DBWATCHNOTIFYENUM = number;
export type DBWATCHMODEENUM = number;
export type DBROWCHANGEKINDENUM = number;
export type DBRESOURCEKINDENUM = number;
export type DBCOSTUNITENUM = number;
export type DBEXECLIMITSENUM = number;
export type PROPSPEC_KIND = number;
export type SQLVARENUM = number;
export type LOCKMODEENUM = number;
export type CONDITION_TYPE = number;
export type CONDITION_OPERATION = number;

// Constants
export const SI_TEMPORARY = 2147483648;
export const SUBSINFO_ALLFLAGS = 61311;
export const RS_READY = 1;
export const RS_SUSPENDED = 2;
export const RS_UPDATING = 4;
export const RS_SUSPENDONIDLE = 65536;
export const RS_MAYBOTHERUSER = 131072;
export const RS_COMPLETED = 2147483648;
export const SUBSMGRUPDATE_MINIMIZE = 1;
export const SUBSMGRUPDATE_MASK = 1;
export const SUBSMGRENUM_TEMP = 1;
export const SUBSMGRENUM_MASK = 1;
export const INET_E_AGENT_MAX_SIZE_EXCEEDED = 869055109433921408n;
export const INET_S_AGENT_PART_FAIL = 869056206798065537n;
export const INET_E_AGENT_CACHE_SIZE_EXCEEDED = 869057308457176962n;
export const INET_E_AGENT_CONNECTION_FAILED = 869058407968804739n;
export const INET_E_SCHEDULED_UPDATES_DISABLED = 869059507480432516n;
export const INET_E_SCHEDULED_UPDATES_RESTRICTED = 869060606992060293n;
export const INET_E_SCHEDULED_UPDATE_INTERVAL = 869061706503688070n;
export const INET_E_SCHEDULED_EXCLUDE_RANGE = 869071602108338055n;
export const INET_E_AGENT_EXCEEDING_CACHE_SIZE = 869071602108338064n;
export const INET_S_AGENT_INCREASED_CACHE_SIZE = 18445479652518268816n;
export const OLEDBVER = 624;
export const DB_NULL_HACCESSOR = 0;
export const DB_INVALID_HACCESSOR = 0;
export const DB_NULL_HROW = 0;
export const DB_NULL_HCHAPTER = 0;
export const DB_INVALID_HCHAPTER = 0;
export const STD_BOOKMARKLENGTH = 1;
export const DBPROPVAL_BMK_NUMERIC = 1;
export const DBPROPVAL_BMK_KEY = 2;
export const DBPROPVAL_CL_START = 1;
export const DBPROPVAL_CL_END = 2;
export const DBPROPVAL_CU_DML_STATEMENTS = 1;
export const DBPROPVAL_CU_TABLE_DEFINITION = 2;
export const DBPROPVAL_CU_INDEX_DEFINITION = 4;
export const DBPROPVAL_CU_PRIVILEGE_DEFINITION = 8;
export const DBPROPVAL_CD_NOTNULL = 1;
export const DBPROPVAL_CB_NULL = 1;
export const DBPROPVAL_CB_NON_NULL = 2;
export const DBPROPVAL_FU_NOT_SUPPORTED = 1;
export const DBPROPVAL_FU_COLUMN = 2;
export const DBPROPVAL_FU_TABLE = 4;
export const DBPROPVAL_FU_CATALOG = 8;
export const DBPROPVAL_GB_NOT_SUPPORTED = 1;
export const DBPROPVAL_GB_EQUALS_SELECT = 2;
export const DBPROPVAL_GB_CONTAINS_SELECT = 4;
export const DBPROPVAL_GB_NO_RELATION = 8;
export const DBPROPVAL_HT_DIFFERENT_CATALOGS = 1;
export const DBPROPVAL_HT_DIFFERENT_PROVIDERS = 2;
export const DBPROPVAL_IC_UPPER = 1;
export const DBPROPVAL_IC_LOWER = 2;
export const DBPROPVAL_IC_SENSITIVE = 4;
export const DBPROPVAL_IC_MIXED = 8;
export const DBPROPVAL_LM_NONE = 1;
export const DBPROPVAL_LM_READ = 2;
export const DBPROPVAL_LM_INTENT = 4;
export const DBPROPVAL_LM_RITE = 8;
export const DBPROPVAL_NP_OKTODO = 1;
export const DBPROPVAL_NP_ABOUTTODO = 2;
export const DBPROPVAL_NP_SYNCHAFTER = 4;
export const DBPROPVAL_NP_FAILEDTODO = 8;
export const DBPROPVAL_NP_DIDEVENT = 16;
export const DBPROPVAL_NC_END = 1;
export const DBPROPVAL_NC_HIGH = 2;
export const DBPROPVAL_NC_LOW = 4;
export const DBPROPVAL_NC_START = 8;
export const DBPROPVAL_OO_BLOB = 1;
export const DBPROPVAL_OO_IPERSIST = 2;
export const DBPROPVAL_CB_DELETE = 1;
export const DBPROPVAL_CB_PRESERVE = 2;
export const DBPROPVAL_SU_DML_STATEMENTS = 1;
export const DBPROPVAL_SU_TABLE_DEFINITION = 2;
export const DBPROPVAL_SU_INDEX_DEFINITION = 4;
export const DBPROPVAL_SU_PRIVILEGE_DEFINITION = 8;
export const DBPROPVAL_SQ_CORRELATEDSUBQUERIES = 1;
export const DBPROPVAL_SQ_COMPARISON = 2;
export const DBPROPVAL_SQ_EXISTS = 4;
export const DBPROPVAL_SQ_IN = 8;
export const DBPROPVAL_SQ_QUANTIFIED = 16;
export const DBPROPVAL_SQ_TABLE = 32;
export const DBPROPVAL_SS_ISEQUENTIALSTREAM = 1;
export const DBPROPVAL_SS_ISTREAM = 2;
export const DBPROPVAL_SS_ISTORAGE = 4;
export const DBPROPVAL_SS_ILOCKBYTES = 8;
export const DBPROPVAL_TI_CHAOS = 16;
export const DBPROPVAL_TI_READUNCOMMITTED = 256;
export const DBPROPVAL_TI_BROWSE = 256;
export const DBPROPVAL_TI_CURSORSTABILITY = 4096;
export const DBPROPVAL_TI_READCOMMITTED = 4096;
export const DBPROPVAL_TI_REPEATABLEREAD = 65536;
export const DBPROPVAL_TI_SERIALIZABLE = 1048576;
export const DBPROPVAL_TI_ISOLATED = 1048576;
export const DBPROPVAL_TR_COMMIT_DC = 1;
export const DBPROPVAL_TR_COMMIT = 2;
export const DBPROPVAL_TR_COMMIT_NO = 4;
export const DBPROPVAL_TR_ABORT_DC = 8;
export const DBPROPVAL_TR_ABORT = 16;
export const DBPROPVAL_TR_ABORT_NO = 32;
export const DBPROPVAL_TR_DONTCARE = 64;
export const DBPROPVAL_TR_BOTH = 128;
export const DBPROPVAL_TR_NONE = 256;
export const DBPROPVAL_TR_OPTIMISTIC = 512;
export const DBPROPVAL_RT_FREETHREAD = 1;
export const DBPROPVAL_RT_APTMTTHREAD = 2;
export const DBPROPVAL_RT_SINGLETHREAD = 4;
export const DBPROPVAL_UP_CHANGE = 1;
export const DBPROPVAL_UP_DELETE = 2;
export const DBPROPVAL_UP_INSERT = 4;
export const DBPROPVAL_SQL_NONE = 0;
export const DBPROPVAL_SQL_ODBC_MINIMUM = 1;
export const DBPROPVAL_SQL_ODBC_CORE = 2;
export const DBPROPVAL_SQL_ODBC_EXTENDED = 4;
export const DBPROPVAL_SQL_ANSI89_IEF = 8;
export const DBPROPVAL_SQL_ANSI92_ENTRY = 16;
export const DBPROPVAL_SQL_FIPS_TRANSITIONAL = 32;
export const DBPROPVAL_SQL_ANSI92_INTERMEDIATE = 64;
export const DBPROPVAL_SQL_ANSI92_FULL = 128;
export const DBPROPVAL_SQL_ESCAPECLAUSES = 256;
export const DBPROPVAL_IT_BTREE = 1;
export const DBPROPVAL_IT_HASH = 2;
export const DBPROPVAL_IT_CONTENT = 3;
export const DBPROPVAL_IT_OTHER = 4;
export const DBPROPVAL_IN_DISALLOWNULL = 1;
export const DBPROPVAL_IN_IGNORENULL = 2;
export const DBPROPVAL_IN_IGNOREANYNULL = 4;
export const DBPROPVAL_TC_NONE = 0;
export const DBPROPVAL_TC_DML = 1;
export const DBPROPVAL_TC_DDL_COMMIT = 2;
export const DBPROPVAL_TC_DDL_IGNORE = 4;
export const DBPROPVAL_TC_ALL = 8;
export const DBPROPVAL_OA_NOTSUPPORTED = 1;
export const DBPROPVAL_OA_ATEXECUTE = 2;
export const DBPROPVAL_OA_ATROWRELEASE = 4;
export const DBPROPVAL_MR_NOTSUPPORTED = 0;
export const DBPROPVAL_MR_SUPPORTED = 1;
export const DBPROPVAL_MR_CONCURRENT = 2;
export const DBPROPVAL_PT_GUID_NAME = 1;
export const DBPROPVAL_PT_GUID_PROPID = 2;
export const DBPROPVAL_PT_NAME = 4;
export const DBPROPVAL_PT_GUID = 8;
export const DBPROPVAL_PT_PROPID = 16;
export const DBPROPVAL_PT_PGUID_NAME = 32;
export const DBPROPVAL_PT_PGUID_PROPID = 64;
export const DBPROPVAL_NT_SINGLEROW = 1;
export const DBPROPVAL_NT_MULTIPLEROWS = 2;
export const DBPROPVAL_ASYNCH_INITIALIZE = 1;
export const DBPROPVAL_ASYNCH_SEQUENTIALPOPULATION = 2;
export const DBPROPVAL_ASYNCH_RANDOMPOPULATION = 4;
export const DBPROPVAL_OP_EQUAL = 1;
export const DBPROPVAL_OP_RELATIVE = 2;
export const DBPROPVAL_OP_STRING = 4;
export const DBPROPVAL_CO_EQUALITY = 1;
export const DBPROPVAL_CO_STRING = 2;
export const DBPROPVAL_CO_CASESENSITIVE = 4;
export const DBPROPVAL_CO_CASEINSENSITIVE = 8;
export const DBPROPVAL_CO_CONTAINS = 16;
export const DBPROPVAL_CO_BEGINSWITH = 32;
export const DBPROPVAL_ASYNCH_BACKGROUNDPOPULATION = 8;
export const DBPROPVAL_ASYNCH_PREPOPULATE = 16;
export const DBPROPVAL_ASYNCH_POPULATEONDEMAND = 32;
export const DBPROPVAL_LM_SINGLEROW = 2;
export const DBPROPVAL_SQL_SUBMINIMUM = 512;
export const DBPROPVAL_DST_TDP = 1;
export const DBPROPVAL_DST_MDP = 2;
export const DBPROPVAL_DST_TDPANDMDP = 3;
export const MDPROPVAL_AU_UNSUPPORTED = 0;
export const MDPROPVAL_AU_UNCHANGED = 1;
export const MDPROPVAL_AU_UNKNOWN = 2;
export const MDPROPVAL_MF_WITH_CALCMEMBERS = 1;
export const MDPROPVAL_MF_WITH_NAMEDSETS = 2;
export const MDPROPVAL_MF_CREATE_CALCMEMBERS = 4;
export const MDPROPVAL_MF_CREATE_NAMEDSETS = 8;
export const MDPROPVAL_MF_SCOPE_SESSION = 16;
export const MDPROPVAL_MF_SCOPE_GLOBAL = 32;
export const MDPROPVAL_MMF_COUSIN = 1;
export const MDPROPVAL_MMF_PARALLELPERIOD = 2;
export const MDPROPVAL_MMF_OPENINGPERIOD = 4;
export const MDPROPVAL_MMF_CLOSINGPERIOD = 8;
export const MDPROPVAL_MNF_MEDIAN = 1;
export const MDPROPVAL_MNF_VAR = 2;
export const MDPROPVAL_MNF_STDDEV = 4;
export const MDPROPVAL_MNF_RANK = 8;
export const MDPROPVAL_MNF_AGGREGATE = 16;
export const MDPROPVAL_MNF_COVARIANCE = 32;
export const MDPROPVAL_MNF_CORRELATION = 64;
export const MDPROPVAL_MNF_LINREGSLOPE = 128;
export const MDPROPVAL_MNF_LINREGVARIANCE = 256;
export const MDPROPVAL_MNF_LINREG2 = 512;
export const MDPROPVAL_MNF_LINREGPOINT = 1024;
export const MDPROPVAL_MNF_DRILLDOWNLEVEL = 2048;
export const MDPROPVAL_MNF_DRILLDOWNMEMBERTOP = 4096;
export const MDPROPVAL_MNF_DRILLDOWNMEMBERBOTTOM = 8192;
export const MDPROPVAL_MNF_DRILLDOWNLEVELTOP = 16384;
export const MDPROPVAL_MNF_DRILLDOWNLEVELBOTTOM = 32768;
export const MDPROPVAL_MNF_DRILLUPMEMBER = 65536;
export const MDPROPVAL_MNF_DRILLUPLEVEL = 131072;
export const MDPROPVAL_MSF_TOPPERCENT = 1;
export const MDPROPVAL_MSF_BOTTOMPERCENT = 2;
export const MDPROPVAL_MSF_TOPSUM = 4;
export const MDPROPVAL_MSF_BOTTOMSUM = 8;
export const MDPROPVAL_MSF_PERIODSTODATE = 16;
export const MDPROPVAL_MSF_LASTPERIODS = 32;
export const MDPROPVAL_MSF_YTD = 64;
export const MDPROPVAL_MSF_QTD = 128;
export const MDPROPVAL_MSF_MTD = 256;
export const MDPROPVAL_MSF_WTD = 512;
export const MDPROPVAL_MSF_DRILLDOWNMEMBBER = 1024;
export const MDPROPVAL_MSF_DRILLDOWNLEVEL = 2048;
export const MDPROPVAL_MSF_DRILLDOWNMEMBERTOP = 4096;
export const MDPROPVAL_MSF_DRILLDOWNMEMBERBOTTOM = 8192;
export const MDPROPVAL_MSF_DRILLDOWNLEVELTOP = 16384;
export const MDPROPVAL_MSF_DRILLDOWNLEVELBOTTOM = 32768;
export const MDPROPVAL_MSF_DRILLUPMEMBER = 65536;
export const MDPROPVAL_MSF_DRILLUPLEVEL = 131072;
export const MDPROPVAL_MSF_TOGGLEDRILLSTATE = 262144;
export const MDPROPVAL_MD_SELF = 1;
export const MDPROPVAL_MD_BEFORE = 2;
export const MDPROPVAL_MD_AFTER = 4;
export const MDPROPVAL_MSC_LESSTHAN = 1;
export const MDPROPVAL_MSC_GREATERTHAN = 2;
export const MDPROPVAL_MSC_LESSTHANEQUAL = 4;
export const MDPROPVAL_MSC_GREATERTHANEQUAL = 8;
export const MDPROPVAL_MC_SINGLECASE = 1;
export const MDPROPVAL_MC_SEARCHEDCASE = 2;
export const MDPROPVAL_MOQ_OUTERREFERENCE = 1;
export const MDPROPVAL_MOQ_DATASOURCE_CUBE = 1;
export const MDPROPVAL_MOQ_CATALOG_CUBE = 2;
export const MDPROPVAL_MOQ_SCHEMA_CUBE = 4;
export const MDPROPVAL_MOQ_CUBE_DIM = 8;
export const MDPROPVAL_MOQ_DIM_HIER = 16;
export const MDPROPVAL_MOQ_DIMHIER_LEVEL = 32;
export const MDPROPVAL_MOQ_LEVEL_MEMBER = 64;
export const MDPROPVAL_MOQ_MEMBER_MEMBER = 128;
export const MDPROPVAL_MOQ_DIMHIER_MEMBER = 256;
export const MDPROPVAL_FS_FULL_SUPPORT = 1;
export const MDPROPVAL_FS_GENERATED_COLUMN = 2;
export const MDPROPVAL_FS_GENERATED_DIMENSION = 3;
export const MDPROPVAL_FS_NO_SUPPORT = 4;
export const MDPROPVAL_NL_NAMEDLEVELS = 1;
export const MDPROPVAL_NL_NUMBEREDLEVELS = 2;
export const MDPROPVAL_MJC_SINGLECUBE = 1;
export const MDPROPVAL_MJC_MULTICUBES = 2;
export const MDPROPVAL_MJC_IMPLICITCUBE = 4;
export const MDPROPVAL_RR_NORANGEROWSET = 1;
export const MDPROPVAL_RR_READONLY = 2;
export const MDPROPVAL_RR_UPDATE = 4;
export const MDPROPVAL_MS_MULTIPLETUPLES = 1;
export const MDPROPVAL_MS_SINGLETUPLE = 2;
export const MDPROPVAL_NME_ALLDIMENSIONS = 0;
export const MDPROPVAL_NME_MEASURESONLY = 1;
export const DBPROPVAL_AO_SEQUENTIAL = 0;
export const DBPROPVAL_AO_SEQUENTIALSTORAGEOBJECTS = 1;
export const DBPROPVAL_AO_RANDOM = 2;
export const DBPROPVAL_BD_ROWSET = 0;
export const DBPROPVAL_BD_INTRANSACTION = 1;
export const DBPROPVAL_BD_XTRANSACTION = 2;
export const DBPROPVAL_BD_REORGANIZATION = 3;
export const BMK_DURABILITY_ROWSET = 0;
export const BMK_DURABILITY_INTRANSACTION = 1;
export const BMK_DURABILITY_XTRANSACTION = 2;
export const BMK_DURABILITY_REORGANIZATION = 3;
export const DBPROPVAL_BO_NOLOG = 0;
export const DBPROPVAL_BO_NOINDEXUPDATE = 1;
export const DBPROPVAL_BO_REFINTEGRITY = 2;
export const DBPROPVAL_STGM_DIRECT = 65536;
export const DBPROPVAL_STGM_TRANSACTED = 131072;
export const DBPROPVAL_STGM_CONVERT = 262144;
export const DBPROPVAL_STGM_FAILIFTHERE = 524288;
export const DBPROPVAL_STGM_PRIORITY = 1048576;
export const DBPROPVAL_STGM_DELETEONRELEASE = 2097152;
export const DBPROPVAL_GB_COLLATE = 16;
export const DBPROPVAL_CS_UNINITIALIZED = 0;
export const DBPROPVAL_CS_INITIALIZED = 1;
export const DBPROPVAL_CS_COMMUNICATIONFAILURE = 2;
export const DBPROPVAL_RD_RESETALL = `-1`;
export const DBPROPVAL_OS_RESOURCEPOOLING = 1;
export const DBPROPVAL_OS_TXNENLISTMENT = 2;
export const DBPROPVAL_OS_CLIENTCURSOR = 4;
export const DBPROPVAL_OS_ENABLEALL = `-1`;
export const DBPROPVAL_BI_CROSSROWSET = 1;
export const MDPROPVAL_NL_SCHEMAONLY = 4;
export const DBPROPVAL_OS_DISABLEALL = 0;
export const DBPROPVAL_OO_ROWOBJECT = 4;
export const DBPROPVAL_OO_SCOPED = 8;
export const DBPROPVAL_OO_DIRECTBIND = 16;
export const DBPROPVAL_DST_DOCSOURCE = 4;
export const DBPROPVAL_GU_NOTSUPPORTED = 1;
export const DBPROPVAL_GU_SUFFIX = 2;
export const DB_BINDFLAGS_DELAYFETCHCOLUMNS = 1;
export const DB_BINDFLAGS_DELAYFETCHSTREAM = 2;
export const DB_BINDFLAGS_RECURSIVE = 4;
export const DB_BINDFLAGS_OUTPUT = 8;
export const DB_BINDFLAGS_COLLECTION = 16;
export const DB_BINDFLAGS_OPENIFEXISTS = 32;
export const DB_BINDFLAGS_OVERWRITE = 64;
export const DB_BINDFLAGS_ISSTRUCTUREDDOCUMENT = 128;
export const DBPROPVAL_ORS_TABLE = 0;
export const DBPROPVAL_ORS_INDEX = 1;
export const DBPROPVAL_ORS_INTEGRATEDINDEX = 2;
export const DBPROPVAL_TC_DDL_LOCK = 16;
export const DBPROPVAL_ORS_STOREDPROC = 4;
export const DBPROPVAL_IN_ALLOWNULL = 0;
export const DBPROPVAL_OO_SINGLETON = 32;
export const DBPROPVAL_OS_AGR_AFTERSESSION = 8;
export const DBPROPVAL_CM_TRANSACTIONS = 1;
export const DBPROPVAL_TS_CARDINALITY = 1;
export const DBPROPVAL_TS_HISTOGRAM = 2;
export const DBPROPVAL_ORS_HISTOGRAM = 8;
export const MDPROPVAL_VISUAL_MODE_DEFAULT = 0;
export const MDPROPVAL_VISUAL_MODE_VISUAL = 1;
export const MDPROPVAL_VISUAL_MODE_VISUAL_OFF = 2;
export const DB_IMP_LEVEL_ANONYMOUS = 0;
export const DB_IMP_LEVEL_IDENTIFY = 1;
export const DB_IMP_LEVEL_IMPERSONATE = 2;
export const DB_IMP_LEVEL_DELEGATE = 3;
export const DBPROMPT_PROMPT = 1;
export const DBPROMPT_COMPLETE = 2;
export const DBPROMPT_COMPLETEREQUIRED = 3;
export const DBPROMPT_NOPROMPT = 4;
export const DB_PROT_LEVEL_NONE = 0;
export const DB_PROT_LEVEL_CONNECT = 1;
export const DB_PROT_LEVEL_CALL = 2;
export const DB_PROT_LEVEL_PKT = 3;
export const DB_PROT_LEVEL_PKT_INTEGRITY = 4;
export const DB_PROT_LEVEL_PKT_PRIVACY = 5;
export const DB_MODE_READ = 1;
export const DB_MODE_WRITE = 2;
export const DB_MODE_READWRITE = 3;
export const DB_MODE_SHARE_DENY_READ = 4;
export const DB_MODE_SHARE_DENY_WRITE = 8;
export const DB_MODE_SHARE_EXCLUSIVE = 12;
export const DB_MODE_SHARE_DENY_NONE = 16;
export const DBCOMPUTEMODE_COMPUTED = 1;
export const DBCOMPUTEMODE_DYNAMIC = 2;
export const DBCOMPUTEMODE_NOTCOMPUTED = 3;
export const DBPROPVAL_DF_INITIALLY_DEFERRED = 1;
export const DBPROPVAL_DF_INITIALLY_IMMEDIATE = 2;
export const DBPROPVAL_DF_NOT_DEFERRABLE = 3;
export const DBPARAMTYPE_INPUT = 1;
export const DBPARAMTYPE_INPUTOUTPUT = 2;
export const DBPARAMTYPE_OUTPUT = 3;
export const DBPARAMTYPE_RETURNVALUE = 4;
export const DB_PT_UNKNOWN = 1;
export const DB_PT_PROCEDURE = 2;
export const DB_PT_FUNCTION = 3;
export const DB_REMOTE = 1;
export const DB_LOCAL_SHARED = 2;
export const DB_LOCAL_EXCLUSIVE = 3;
export const DB_COLLATION_ASC = 1;
export const DB_COLLATION_DESC = 2;
export const DB_UNSEARCHABLE = 1;
export const DB_LIKE_ONLY = 2;
export const DB_ALL_EXCEPT_LIKE = 3;
export const DB_SEARCHABLE = 4;
export const MDTREEOP_CHILDREN = 1;
export const MDTREEOP_SIBLINGS = 2;
export const MDTREEOP_PARENT = 4;
export const MDTREEOP_SELF = 8;
export const MDTREEOP_DESCENDANTS = 16;
export const MDTREEOP_ANCESTORS = 32;
export const MD_DIMTYPE_UNKNOWN = 0;
export const MD_DIMTYPE_TIME = 1;
export const MD_DIMTYPE_MEASURE = 2;
export const MD_DIMTYPE_OTHER = 3;
export const MDLEVEL_TYPE_UNKNOWN = 0;
export const MDLEVEL_TYPE_REGULAR = 0;
export const MDLEVEL_TYPE_ALL = 1;
export const MDLEVEL_TYPE_CALCULATED = 2;
export const MDLEVEL_TYPE_TIME = 4;
export const MDLEVEL_TYPE_RESERVED1 = 8;
export const MDLEVEL_TYPE_TIME_YEARS = 20;
export const MDLEVEL_TYPE_TIME_HALF_YEAR = 36;
export const MDLEVEL_TYPE_TIME_QUARTERS = 68;
export const MDLEVEL_TYPE_TIME_MONTHS = 132;
export const MDLEVEL_TYPE_TIME_WEEKS = 260;
export const MDLEVEL_TYPE_TIME_DAYS = 516;
export const MDLEVEL_TYPE_TIME_HOURS = 772;
export const MDLEVEL_TYPE_TIME_MINUTES = 1028;
export const MDLEVEL_TYPE_TIME_SECONDS = 2052;
export const MDLEVEL_TYPE_TIME_UNDEFINED = 4100;
export const MDMEASURE_AGGR_UNKNOWN = 0;
export const MDMEASURE_AGGR_SUM = 1;
export const MDMEASURE_AGGR_COUNT = 2;
export const MDMEASURE_AGGR_MIN = 3;
export const MDMEASURE_AGGR_MAX = 4;
export const MDMEASURE_AGGR_AVG = 5;
export const MDMEASURE_AGGR_VAR = 6;
export const MDMEASURE_AGGR_STD = 7;
export const MDMEASURE_AGGR_CALCULATED = 127;
export const MDPROP_MEMBER = 1;
export const MDPROP_CELL = 2;
export const MDMEMBER_TYPE_UNKNOWN = 0;
export const MDMEMBER_TYPE_REGULAR = 1;
export const MDMEMBER_TYPE_ALL = 2;
export const MDMEMBER_TYPE_MEASURE = 3;
export const MDMEMBER_TYPE_FORMULA = 4;
export const MDMEMBER_TYPE_RESERVE1 = 5;
export const MDMEMBER_TYPE_RESERVE2 = 6;
export const MDMEMBER_TYPE_RESERVE3 = 7;
export const MDMEMBER_TYPE_RESERVE4 = 8;
export const MDDISPINFO_DRILLED_DOWN = 65536;
export const MDDISPINFO_PARENT_SAME_AS_PREV = 131072;
export const DB_COUNTUNAVAILABLE = `-1`;
export const MDFF_BOLD = 1;
export const MDFF_ITALIC = 2;
export const MDFF_UNDERLINE = 4;
export const MDFF_STRIKEOUT = 8;
export const MDAXIS_COLUMNS = 0;
export const MDAXIS_ROWS = 1;
export const MDAXIS_PAGES = 2;
export const MDAXIS_SECTIONS = 3;
export const MDAXIS_CHAPTERS = 4;
export const MDAXIS_SLICERS = 4294967295;
export const CRESTRICTIONS_DBSCHEMA_ASSERTIONS = 3;
export const CRESTRICTIONS_DBSCHEMA_CATALOGS = 1;
export const CRESTRICTIONS_DBSCHEMA_CHARACTER_SETS = 3;
export const CRESTRICTIONS_DBSCHEMA_COLLATIONS = 3;
export const CRESTRICTIONS_DBSCHEMA_COLUMNS = 4;
export const CRESTRICTIONS_DBSCHEMA_CHECK_CONSTRAINTS = 3;
export const CRESTRICTIONS_DBSCHEMA_CONSTRAINT_COLUMN_USAGE = 4;
export const CRESTRICTIONS_DBSCHEMA_CONSTRAINT_TABLE_USAGE = 3;
export const CRESTRICTIONS_DBSCHEMA_KEY_COLUMN_USAGE = 7;
export const CRESTRICTIONS_DBSCHEMA_REFERENTIAL_CONSTRAINTS = 3;
export const CRESTRICTIONS_DBSCHEMA_TABLE_CONSTRAINTS = 7;
export const CRESTRICTIONS_DBSCHEMA_COLUMN_DOMAIN_USAGE = 4;
export const CRESTRICTIONS_DBSCHEMA_INDEXES = 5;
export const CRESTRICTIONS_DBSCHEMA_OBJECT_ACTIONS = 1;
export const CRESTRICTIONS_DBSCHEMA_OBJECTS = 1;
export const CRESTRICTIONS_DBSCHEMA_COLUMN_PRIVILEGES = 6;
export const CRESTRICTIONS_DBSCHEMA_TABLE_PRIVILEGES = 5;
export const CRESTRICTIONS_DBSCHEMA_USAGE_PRIVILEGES = 6;
export const CRESTRICTIONS_DBSCHEMA_PROCEDURES = 4;
export const CRESTRICTIONS_DBSCHEMA_SCHEMATA = 3;
export const CRESTRICTIONS_DBSCHEMA_SQL_LANGUAGES = 0;
export const CRESTRICTIONS_DBSCHEMA_STATISTICS = 3;
export const CRESTRICTIONS_DBSCHEMA_TABLES = 4;
export const CRESTRICTIONS_DBSCHEMA_TRANSLATIONS = 3;
export const CRESTRICTIONS_DBSCHEMA_PROVIDER_TYPES = 2;
export const CRESTRICTIONS_DBSCHEMA_VIEWS = 3;
export const CRESTRICTIONS_DBSCHEMA_VIEW_COLUMN_USAGE = 3;
export const CRESTRICTIONS_DBSCHEMA_VIEW_TABLE_USAGE = 3;
export const CRESTRICTIONS_DBSCHEMA_PROCEDURE_PARAMETERS = 4;
export const CRESTRICTIONS_DBSCHEMA_FOREIGN_KEYS = 6;
export const CRESTRICTIONS_DBSCHEMA_PRIMARY_KEYS = 3;
export const CRESTRICTIONS_DBSCHEMA_PROCEDURE_COLUMNS = 4;
export const CRESTRICTIONS_DBSCHEMA_TABLES_INFO = 4;
export const CRESTRICTIONS_MDSCHEMA_CUBES = 3;
export const CRESTRICTIONS_MDSCHEMA_DIMENSIONS = 5;
export const CRESTRICTIONS_MDSCHEMA_HIERARCHIES = 6;
export const CRESTRICTIONS_MDSCHEMA_LEVELS = 7;
export const CRESTRICTIONS_MDSCHEMA_MEASURES = 5;
export const CRESTRICTIONS_MDSCHEMA_PROPERTIES = 9;
export const CRESTRICTIONS_MDSCHEMA_MEMBERS = 12;
export const CRESTRICTIONS_DBSCHEMA_TRUSTEE = 4;
export const CRESTRICTIONS_DBSCHEMA_TABLE_STATISTICS = 7;
export const CRESTRICTIONS_DBSCHEMA_CHECK_CONSTRAINTS_BY_TABLE = 6;
export const CRESTRICTIONS_MDSCHEMA_FUNCTIONS = 4;
export const CRESTRICTIONS_MDSCHEMA_ACTIONS = 8;
export const CRESTRICTIONS_MDSCHEMA_COMMANDS = 5;
export const CRESTRICTIONS_MDSCHEMA_SETS = 5;
export const IDENTIFIER_SDK_MASK = 4026531840;
export const IDENTIFIER_SDK_ERROR = 268435456;
export const DBPROP_MSDAORA_DETERMINEKEYCOLUMNS = 1;
export const DBPROP_MSDAORA8_DETERMINEKEYCOLUMNS = 2;
export const PWPROP_OSPVALUE = 2;
export const STGM_COLLECTION = 8192;
export const STGM_OUTPUT = 32768;
export const STGM_OPEN = `-2147483648`;
export const STGM_RECURSIVE = 16777216;
export const STGM_STRICTOPEN = 1073741824;
export const KAGPROP_QUERYBASEDUPDATES = 2;
export const KAGPROP_MARSHALLABLE = 3;
export const KAGPROP_POSITIONONNEWROW = 4;
export const KAGPROP_IRowsetChangeExtInfo = 5;
export const KAGPROP_CURSOR = 6;
export const KAGPROP_CONCURRENCY = 7;
export const KAGPROP_BLOBSONFOCURSOR = 8;
export const KAGPROP_INCLUDENONEXACT = 9;
export const KAGPROP_FORCESSFIREHOSEMODE = 10;
export const KAGPROP_FORCENOPARAMETERREBIND = 11;
export const KAGPROP_FORCENOPREPARE = 12;
export const KAGPROP_FORCENOREEXECUTE = 13;
export const KAGPROP_ACCESSIBLEPROCEDURES = 2;
export const KAGPROP_ACCESSIBLETABLES = 3;
export const KAGPROP_ODBCSQLOPTIEF = 4;
export const KAGPROP_OJCAPABILITY = 5;
export const KAGPROP_PROCEDURES = 6;
export const KAGPROP_DRIVERNAME = 7;
export const KAGPROP_DRIVERVER = 8;
export const KAGPROP_DRIVERODBCVER = 9;
export const KAGPROP_LIKEESCAPECLAUSE = 10;
export const KAGPROP_SPECIALCHARACTERS = 11;
export const KAGPROP_MAXCOLUMNSINGROUPBY = 12;
export const KAGPROP_MAXCOLUMNSININDEX = 13;
export const KAGPROP_MAXCOLUMNSINORDERBY = 14;
export const KAGPROP_MAXCOLUMNSINSELECT = 15;
export const KAGPROP_MAXCOLUMNSINTABLE = 16;
export const KAGPROP_NUMERICFUNCTIONS = 17;
export const KAGPROP_ODBCSQLCONFORMANCE = 18;
export const KAGPROP_OUTERJOINS = 19;
export const KAGPROP_STRINGFUNCTIONS = 20;
export const KAGPROP_SYSTEMFUNCTIONS = 21;
export const KAGPROP_TIMEDATEFUNCTIONS = 22;
export const KAGPROP_FILEUSAGE = 23;
export const KAGPROP_ACTIVESTATEMENTS = 24;
export const KAGPROP_AUTH_TRUSTEDCONNECTION = 2;
export const KAGPROP_AUTH_SERVERINTEGRATED = 3;
export const KAGPROPVAL_CONCUR_ROWVER = 1;
export const KAGPROPVAL_CONCUR_VALUES = 2;
export const KAGPROPVAL_CONCUR_LOCK = 4;
export const KAGPROPVAL_CONCUR_READ_ONLY = 8;
export const ODBCVER = 896;
export const ODBC_ADD_DSN = 1;
export const ODBC_CONFIG_DSN = 2;
export const ODBC_REMOVE_DSN = 3;
export const ODBC_ADD_SYS_DSN = 4;
export const ODBC_CONFIG_SYS_DSN = 5;
export const ODBC_REMOVE_SYS_DSN = 6;
export const ODBC_REMOVE_DEFAULT_DSN = 7;
export const ODBC_INSTALL_INQUIRY = 1;
export const ODBC_INSTALL_COMPLETE = 2;
export const ODBC_INSTALL_DRIVER = 1;
export const ODBC_REMOVE_DRIVER = 2;
export const ODBC_CONFIG_DRIVER = 3;
export const ODBC_CONFIG_DRIVER_MAX = 100;
export const ODBC_BOTH_DSN = 0;
export const ODBC_USER_DSN = 1;
export const ODBC_SYSTEM_DSN = 2;
export const ODBC_ERROR_GENERAL_ERR = 1;
export const ODBC_ERROR_INVALID_BUFF_LEN = 2;
export const ODBC_ERROR_INVALID_HWND = 3;
export const ODBC_ERROR_INVALID_STR = 4;
export const ODBC_ERROR_INVALID_REQUEST_TYPE = 5;
export const ODBC_ERROR_COMPONENT_NOT_FOUND = 6;
export const ODBC_ERROR_INVALID_NAME = 7;
export const ODBC_ERROR_INVALID_KEYWORD_VALUE = 8;
export const ODBC_ERROR_INVALID_DSN = 9;
export const ODBC_ERROR_INVALID_INF = 10;
export const ODBC_ERROR_REQUEST_FAILED = 11;
export const ODBC_ERROR_INVALID_PATH = 12;
export const ODBC_ERROR_LOAD_LIB_FAILED = 13;
export const ODBC_ERROR_INVALID_PARAM_SEQUENCE = 14;
export const ODBC_ERROR_INVALID_LOG_FILE = 15;
export const ODBC_ERROR_USER_CANCELED = 16;
export const ODBC_ERROR_USAGE_UPDATE_FAILED = 17;
export const ODBC_ERROR_CREATE_DSN_FAILED = 18;
export const ODBC_ERROR_WRITING_SYSINFO_FAILED = 19;
export const ODBC_ERROR_REMOVE_DSN_FAILED = 20;
export const ODBC_ERROR_OUT_OF_MEM = 21;
export const ODBC_ERROR_OUTPUT_STRING_TRUNCATED = 22;
export const ODBC_ERROR_NOTRANINFO = 23;
export const ODBC_ERROR_MAX = 23;
export const SQL_MAX_SQLSERVERNAME = 128;
export const SQL_COPT_SS_BASE = 1200;
export const SQL_COPT_SS_REMOTE_PWD = 1201;
export const SQL_COPT_SS_USE_PROC_FOR_PREP = 1202;
export const SQL_COPT_SS_INTEGRATED_SECURITY = 1203;
export const SQL_COPT_SS_PRESERVE_CURSORS = 1204;
export const SQL_COPT_SS_USER_DATA = 1205;
export const SQL_COPT_SS_FALLBACK_CONNECT = 1210;
export const SQL_COPT_SS_PERF_DATA = 1211;
export const SQL_COPT_SS_PERF_DATA_LOG = 1212;
export const SQL_COPT_SS_PERF_QUERY_INTERVAL = 1213;
export const SQL_COPT_SS_PERF_QUERY_LOG = 1214;
export const SQL_COPT_SS_PERF_QUERY = 1215;
export const SQL_COPT_SS_PERF_DATA_LOG_NOW = 1216;
export const SQL_COPT_SS_QUOTED_IDENT = 1217;
export const SQL_COPT_SS_ANSI_NPW = 1218;
export const SQL_COPT_SS_BCP = 1219;
export const SQL_COPT_SS_TRANSLATE = 1220;
export const SQL_COPT_SS_ATTACHDBFILENAME = 1221;
export const SQL_COPT_SS_CONCAT_NULL = 1222;
export const SQL_COPT_SS_ENCRYPT = 1223;
export const SQL_COPT_SS_MAX_USED = 1223;
export const SQL_SOPT_SS_BASE = 1225;
export const SQL_SOPT_SS_TEXTPTR_LOGGING = 1225;
export const SQL_SOPT_SS_CURRENT_COMMAND = 1226;
export const SQL_SOPT_SS_HIDDEN_COLUMNS = 1227;
export const SQL_SOPT_SS_NOBROWSETABLE = 1228;
export const SQL_SOPT_SS_REGIONALIZE = 1229;
export const SQL_SOPT_SS_CURSOR_OPTIONS = 1230;
export const SQL_SOPT_SS_NOCOUNT_STATUS = 1231;
export const SQL_SOPT_SS_DEFER_PREPARE = 1232;
export const SQL_SOPT_SS_MAX_USED = 1232;
export const SQL_COPT_SS_BASE_EX = 1240;
export const SQL_COPT_SS_BROWSE_CONNECT = 1241;
export const SQL_COPT_SS_BROWSE_SERVER = 1242;
export const SQL_COPT_SS_WARN_ON_CP_ERROR = 1243;
export const SQL_COPT_SS_CONNECTION_DEAD = 1244;
export const SQL_COPT_SS_BROWSE_CACHE_DATA = 1245;
export const SQL_COPT_SS_RESET_CONNECTION = 1246;
export const SQL_COPT_SS_EX_MAX_USED = 1246;
export const SQL_UP_OFF = 0;
export const SQL_UP_ON = 1;
export const SQL_UP_ON_DROP = 2;
export const SQL_UP_DEFAULT = 1;
export const SQL_IS_OFF = 0;
export const SQL_IS_ON = 1;
export const SQL_IS_DEFAULT = 0;
export const SQL_PC_OFF = 0;
export const SQL_PC_ON = 1;
export const SQL_PC_DEFAULT = 0;
export const SQL_XL_OFF = 0;
export const SQL_XL_ON = 1;
export const SQL_XL_DEFAULT = 1;
export const SQL_FB_OFF = 0;
export const SQL_FB_ON = 1;
export const SQL_FB_DEFAULT = 0;
export const SQL_BCP_OFF = 0;
export const SQL_BCP_ON = 1;
export const SQL_BCP_DEFAULT = 0;
export const SQL_QI_OFF = 0;
export const SQL_QI_ON = 1;
export const SQL_QI_DEFAULT = 1;
export const SQL_AD_OFF = 0;
export const SQL_AD_ON = 1;
export const SQL_AD_DEFAULT = 1;
export const SQL_CN_OFF = 0;
export const SQL_CN_ON = 1;
export const SQL_CN_DEFAULT = 1;
export const SQL_TL_OFF = 0;
export const SQL_TL_ON = 1;
export const SQL_TL_DEFAULT = 1;
export const SQL_HC_OFF = 0;
export const SQL_HC_ON = 1;
export const SQL_HC_DEFAULT = 0;
export const SQL_NB_OFF = 0;
export const SQL_NB_ON = 1;
export const SQL_NB_DEFAULT = 0;
export const SQL_RE_OFF = 0;
export const SQL_RE_ON = 1;
export const SQL_RE_DEFAULT = 0;
export const SQL_CO_OFF = 0;
export const SQL_CO_FFO = 1;
export const SQL_CO_AF = 2;
export const SQL_CO_FIREHOSE_AF = 4;
export const SQL_CO_DEFAULT = 0;
export const SQL_NC_OFF = 0;
export const SQL_NC_ON = 1;
export const SQL_DP_OFF = 0;
export const SQL_DP_ON = 1;
export const SQL_EN_OFF = 0;
export const SQL_EN_ON = 1;
export const SQL_MORE_INFO_NO = 0;
export const SQL_MORE_INFO_YES = 1;
export const SQL_CACHE_DATA_NO = 0;
export const SQL_CACHE_DATA_YES = 1;
export const SQL_RESET_YES = 1;
export const SQL_WARN_NO = 0;
export const SQL_WARN_YES = 1;
export const SQL_CURSOR_FAST_FORWARD_ONLY = 8;
export const SQL_CA_SS_BASE = 1200;
export const SQL_CA_SS_COLUMN_SSTYPE = 1200;
export const SQL_CA_SS_COLUMN_UTYPE = 1201;
export const SQL_CA_SS_NUM_ORDERS = 1202;
export const SQL_CA_SS_COLUMN_ORDER = 1203;
export const SQL_CA_SS_COLUMN_VARYLEN = 1204;
export const SQL_CA_SS_NUM_COMPUTES = 1205;
export const SQL_CA_SS_COMPUTE_ID = 1206;
export const SQL_CA_SS_COMPUTE_BYLIST = 1207;
export const SQL_CA_SS_COLUMN_ID = 1208;
export const SQL_CA_SS_COLUMN_OP = 1209;
export const SQL_CA_SS_COLUMN_SIZE = 1210;
export const SQL_CA_SS_COLUMN_HIDDEN = 1211;
export const SQL_CA_SS_COLUMN_KEY = 1212;
export const SQL_CA_SS_COLUMN_COLLATION = 1214;
export const SQL_CA_SS_VARIANT_TYPE = 1215;
export const SQL_CA_SS_VARIANT_SQL_TYPE = 1216;
export const SQL_CA_SS_VARIANT_SERVER_TYPE = 1217;
export const SQL_CA_SS_MAX_USED = 1218;
export const SQLTEXT = 35;
export const SQLVARBINARY = 37;
export const SQLINTN = 38;
export const SQLVARCHAR = 39;
export const SQLBINARY = 45;
export const SQLIMAGE = 34;
export const SQLCHARACTER = 47;
export const SQLINT1 = 48;
export const SQLBIT = 50;
export const SQLINT2 = 52;
export const SQLINT4 = 56;
export const SQLMONEY = 60;
export const SQLDATETIME = 61;
export const SQLFLT8 = 62;
export const SQLFLTN = 109;
export const SQLMONEYN = 110;
export const SQLDATETIMN = 111;
export const SQLFLT4 = 59;
export const SQLMONEY4 = 122;
export const SQLDATETIM4 = 58;
export const SQLDECIMAL = 106;
export const SQLNUMERIC = 108;
export const SQLUNIQUEID = 36;
export const SQLBIGCHAR = 175;
export const SQLBIGVARCHAR = 167;
export const SQLBIGBINARY = 173;
export const SQLBIGVARBINARY = 165;
export const SQLBITN = 104;
export const SQLNCHAR = 239;
export const SQLNVARCHAR = 231;
export const SQLNTEXT = 99;
export const SQLINT8 = 127;
export const SQLVARIANT = 98;
export const SQLudtBINARY = 3;
export const SQLudtBIT = 16;
export const SQLudtBITN = 0;
export const SQLudtCHAR = 1;
export const SQLudtDATETIM4 = 22;
export const SQLudtDATETIME = 12;
export const SQLudtDATETIMN = 15;
export const SQLudtDECML = 24;
export const SQLudtDECMLN = 26;
export const SQLudtFLT4 = 23;
export const SQLudtFLT8 = 8;
export const SQLudtFLTN = 14;
export const SQLudtIMAGE = 20;
export const SQLudtINT1 = 5;
export const SQLudtINT2 = 6;
export const SQLudtINT4 = 7;
export const SQLudtINTN = 13;
export const SQLudtMONEY = 11;
export const SQLudtMONEY4 = 21;
export const SQLudtMONEYN = 17;
export const SQLudtNUM = 10;
export const SQLudtNUMN = 25;
export const SQLudtSYSNAME = 18;
export const SQLudtTEXT = 19;
export const SQLudtTIMESTAMP = 80;
export const SQLudtUNIQUEIDENTIFIER = 0;
export const SQLudtVARBINARY = 4;
export const SQLudtVARCHAR = 2;
export const MIN_USER_DATATYPE = 256;
export const SQLAOPSTDEV = 48;
export const SQLAOPSTDEVP = 49;
export const SQLAOPVAR = 50;
export const SQLAOPVARP = 51;
export const SQLAOPCNT = 75;
export const SQLAOPSUM = 77;
export const SQLAOPAVG = 79;
export const SQLAOPMIN = 81;
export const SQLAOPMAX = 82;
export const SQLAOPANY = 83;
export const SQLAOPNOOP = 86;
export const SQL_INFO_SS_FIRST = 1199;
export const SQL_INFO_SS_NETLIB_NAMEW = 1199;
export const SQL_INFO_SS_NETLIB_NAMEA = 1200;
export const SQL_INFO_SS_MAX_USED = 1200;
export const SQL_INFO_SS_NETLIB_NAME = 1199;
export const SQL_SS_VARIANT = `-150`;
export const SQL_DIAG_SS_BASE = `-1150`;
export const SQL_DIAG_SS_MSGSTATE = `-1150`;
export const SQL_DIAG_DFC_SS_BASE = `-200`;
export const EX_ANY = 0;
export const EX_INFO = 10;
export const EX_MAXISEVERITY = 10;
export const EX_MISSING = 11;
export const EX_TYPE = 12;
export const EX_DEADLOCK = 13;
export const EX_PERMIT = 14;
export const EX_SYNTAX = 15;
export const EX_USER = 16;
export const EX_RESOURCE = 17;
export const EX_INTOK = 18;
export const MAXUSEVERITY = 18;
export const EX_LIMIT = 19;
export const EX_CMDFATAL = 20;
export const MINFATALERR = 20;
export const EX_DBFATAL = 21;
export const EX_TABCORRUPT = 22;
export const EX_DBCORRUPT = 23;
export const EX_HARDWARE = 24;
export const EX_CONTROL = 25;
export const DBMAXCHAR = 8001;
export const MAXNAME = 129;
export const MAXNUMERICLEN = 16;
export const SQL_PERF_START = 1;
export const SQL_PERF_STOP = 2;
export const SQL_SS_DL_DEFAULT = `STATS.LOG`;
export const SQL_SS_QL_DEFAULT = `QUERY.LOG`;
export const SQL_SS_QI_DEFAULT = 30000;
export const SUCCEED = 1;
export const FAIL = 0;
export const SUCCEED_ABORT = 2;
export const SUCCEED_ASYNC = 3;
export const DB_IN = 1;
export const DB_OUT = 2;
export const BCPMAXERRS = 1;
export const BCPFIRST = 2;
export const BCPLAST = 3;
export const BCPBATCH = 4;
export const BCPKEEPNULLS = 5;
export const BCPABORT = 6;
export const BCPODBC = 7;
export const BCPKEEPIDENTITY = 8;
export const BCP6xFILEFMT = 9;
export const BCPHINTSA = 10;
export const BCPHINTSW = 11;
export const BCPFILECP = 12;
export const BCPUNICODEFILE = 13;
export const BCPTEXTFILE = 14;
export const BCPFILEFMT = 15;
export const BCPFILECP_ACP = 0;
export const BCPFILECP_OEMCP = 1;
export const BCPFILECP_RAW = `-1`;
export const SQL_VARLEN_DATA = `-10`;
export const BCPHINTS = 11;
export const BCP_FMT_TYPE = 1;
export const BCP_FMT_INDICATOR_LEN = 2;
export const BCP_FMT_DATA_LEN = 3;
export const BCP_FMT_TERMINATOR = 4;
export const BCP_FMT_SERVER_COL = 5;
export const BCP_FMT_COLLATION = 6;
export const BCP_FMT_COLLATION_ID = 7;
export const SQL_FAST_CONNECT = 1200;
export const SQL_FC_OFF = 0;
export const SQL_FC_ON = 1;
export const SQL_FC_DEFAULT = 0;
export const SQL_COPT_SS_ANSI_OEM = 1206;
export const SQL_AO_OFF = 0;
export const SQL_AO_ON = 1;
export const SQL_AO_DEFAULT = 0;
export const SQL_REMOTE_PWD = 1201;
export const SQL_USE_PROCEDURE_FOR_PREPARE = 1202;
export const SQL_INTEGRATED_SECURITY = 1203;
export const SQL_PRESERVE_CURSORS = 1204;
export const SQL_TEXTPTR_LOGGING = 1225;
export const SQLDECIMALN = 106;
export const SQLNUMERICN = 108;
export const DB_E_BOGUS = 292171045153279743n;
export const DB_E_BADACCESSORHANDLE = 292172144664907264n;
export const DB_E_ROWLIMITEXCEEDED = 292173244176535041n;
export const DB_E_READONLYACCESSOR = 292174343688162818n;
export const DB_E_SCHEMAVIOLATION = 292175443199790595n;
export const DB_E_BADROWHANDLE = 292176542711418372n;
export const DB_E_OBJECTOPEN = 292177642223046149n;
export const DB_E_BADCHAPTER = 292178741734673926n;
export const DB_E_CANTCONVERTVALUE = 292179841246301703n;
export const DB_E_BADBINDINFO = 292180940757929480n;
export const DB_SEC_E_PERMISSIONDENIED = 292182040269557257n;
export const DB_E_NOTAREFERENCECOLUMN = 292183139781185034n;
export const DB_E_LIMITREJECTED = 292184239292812811n;
export const DB_E_NOCOMMAND = 292185338804440588n;
export const DB_E_COSTLIMIT = 292186438316068365n;
export const DB_E_BADBOOKMARK = 292187537827696142n;
export const DB_E_BADLOCKMODE = 292188637339323919n;
export const DB_E_PARAMNOTOPTIONAL = 292189736850951696n;
export const DB_E_BADCOLUMNID = 292190836362579473n;
export const DB_E_BADRATIO = 292191935874207250n;
export const DB_E_BADVALUES = 292193035385835027n;
export const DB_E_ERRORSINCOMMAND = 292194134897462804n;
export const DB_E_CANTCANCEL = 292195234409090581n;
export const DB_E_DIALECTNOTSUPPORTED = 292196333920718358n;
export const DB_E_DUPLICATEDATASOURCE = 292197433432346135n;
export const DB_E_CANNOTRESTART = 292198532943973912n;
export const DB_E_NOTFOUND = 292200731967229465n;
export const DB_E_NEWLYINSERTED = 292199632455601691n;
export const DB_E_CANNOTFREE = 292201831478857242n;
export const DB_E_GOALREJECTED = 292202930990485020n;
export const DB_E_UNSUPPORTEDCONVERSION = 292204030502112797n;
export const DB_E_BADSTARTPOSITION = 292205130013740574n;
export const DB_E_NOQUERY = 292206229525368351n;
export const DB_E_NOTREENTRANT = 292207329036996128n;
export const DB_E_ERRORSOCCURRED = 292208428548623905n;
export const DB_E_NOAGGREGATION = 292209528060251682n;
export const DB_E_DELETEDROW = 292210627571879459n;
export const DB_E_CANTFETCHBACKWARDS = 292211727083507236n;
export const DB_E_ROWSNOTRELEASED = 292212826595135013n;
export const DB_E_BADSTORAGEFLAG = 292213926106762790n;
export const DB_E_BADCOMPAREOP = 292215025618390567n;
export const DB_E_BADSTATUSVALUE = 292216125130018344n;
export const DB_E_CANTSCROLLBACKWARDS = 292217224641646121n;
export const DB_E_BADREGIONHANDLE = 292218324153273898n;
export const DB_E_NONCONTIGUOUSRANGE = 292219423664901675n;
export const DB_E_INVALIDTRANSITION = 292220523176529452n;
export const DB_E_NOTASUBREGION = 292221622688157229n;
export const DB_E_MULTIPLESTATEMENTS = 292222722199785006n;
export const DB_E_INTEGRITYVIOLATION = 292223821711412783n;
export const DB_E_BADTYPENAME = 292224921223040560n;
export const DB_E_ABORTLIMITREACHED = 292226020734668337n;
export const DB_E_ROWSETINCOMMAND = 292227120246296114n;
export const DB_E_CANTTRANSLATE = 292228219757923891n;
export const DB_E_DUPLICATEINDEXID = 292229319269551668n;
export const DB_E_NOINDEX = 292230418781179445n;
export const DB_E_INDEXINUSE = 292231518292807222n;
export const DB_E_NOTABLE = 292232617804434999n;
export const DB_E_CONCURRENCYVIOLATION = 292233717316062776n;
export const DB_E_BADCOPY = 292234816827690553n;
export const DB_E_BADPRECISION = 292235916339318330n;
export const DB_E_BADSCALE = 292237015850946107n;
export const DB_E_BADTABLEID = 292238115362573884n;
export const DB_E_BADID = `-2147217860`;
export const DB_E_BADTYPE = 292239214874201661n;
export const DB_E_DUPLICATECOLUMNID = 292240314385829438n;
export const DB_E_DUPLICATETABLEID = 292241413897457215n;
export const DB_E_TABLEINUSE = 292242513409084992n;
export const DB_E_NOLOCALE = 292243612920712769n;
export const DB_E_BADRECORDNUM = 292244712432340546n;
export const DB_E_BOOKMARKSKIPPED = 292245811943968323n;
export const DB_E_BADPROPERTYVALUE = 292246911455596100n;
export const DB_E_INVALID = 292248010967223877n;
export const DB_E_BADACCESSORFLAGS = 292249110478851654n;
export const DB_E_BADSTORAGEFLAGS = 292250209990479431n;
export const DB_E_BYREFACCESSORNOTSUPPORTED = 292251309502107208n;
export const DB_E_NULLACCESSORNOTSUPPORTED = 292252409013734985n;
export const DB_E_NOTPREPARED = 292253508525362762n;
export const DB_E_BADACCESSORTYPE = 292254608036990539n;
export const DB_E_WRITEONLYACCESSOR = 292255707548618316n;
export const DB_SEC_E_AUTH_FAILED = 292256807060246093n;
export const DB_E_CANCELED = 292257906571873870n;
export const DB_E_CHAPTERNOTRELEASED = 292259006083501647n;
export const DB_E_BADSOURCEHANDLE = 292260105595129424n;
export const DB_E_PARAMUNAVAILABLE = 292261205106757201n;
export const DB_E_ALREADYINITIALIZED = 292262304618384978n;
export const DB_E_NOTSUPPORTED = 292263404130012755n;
export const DB_E_MAXPENDCHANGESEXCEEDED = 292264503641640532n;
export const DB_E_BADORDINAL = 292265603153268309n;
export const DB_E_PENDINGCHANGES = 292266702664896086n;
export const DB_E_DATAOVERFLOW = 292267802176523863n;
export const DB_E_BADHRESULT = 292268901688151640n;
export const DB_E_BADLOOKUPID = 292270001199779417n;
export const DB_E_BADDYNAMICERRORID = 292271100711407194n;
export const DB_E_PENDINGINSERT = 292272200223034971n;
export const DB_E_BADCONVERTFLAG = 292273299734662748n;
export const DB_E_BADPARAMETERNAME = 292274399246290525n;
export const DB_E_MULTIPLESTORAGE = 292275498757918302n;
export const DB_E_CANTFILTER = 292276598269546079n;
export const DB_E_CANTORDER = 292277697781173856n;
export const MD_E_BADTUPLE = 292278797292801633n;
export const MD_E_BADCOORDINATE = 292279896804429410n;
export const MD_E_INVALIDAXIS = 292280996316057187n;
export const MD_E_INVALIDCELLRANGE = 292282095827684964n;
export const DB_E_NOCOLUMN = 292284294850940517n;
export const DB_E_COMMANDNOTPERSISTED = 292285394362568295n;
export const DB_E_DUPLICATEID = 292286493874196072n;
export const DB_E_OBJECTCREATIONLIMITREACHED = 292296389478846057n;
export const DB_E_BADINDEXID = 292297488990473842n;
export const DB_E_BADINITSTRING = 292298588502101619n;
export const DB_E_NOPROVIDERSREGISTERED = 292299688013729396n;
export const DB_E_MISMATCHEDPROVIDER = 292300787525357173n;
export const DB_E_BADCOMMANDID = 292287593385823862n;
export const SEC_E_PERMISSIONDENIED = `-2147217911`;
export const SEC_E_BADTRUSTEEID = 292288692897451626n;
export const SEC_E_NOTRUSTEEID = 292289792409079403n;
export const SEC_E_NOMEMBERSHIPSUPPORT = 292290891920707180n;
export const SEC_E_INVALIDOBJECT = 292291991432334957n;
export const SEC_E_NOOWNER = 292293090943962734n;
export const SEC_E_INVALIDACCESSENTRYLIST = 292294190455590511n;
export const SEC_E_INVALIDOWNER = 292295289967218288n;
export const SEC_E_INVALIDACCESSENTRY = 292301887036984945n;
export const DB_E_BADCONSTRAINTTYPE = 292302986548612727n;
export const DB_E_BADCONSTRAINTFORM = 292304086060240504n;
export const DB_E_BADDEFERRABILITY = 292311782641634937n;
export const DB_E_BADMATCHTYPE = 292322777757912704n;
export const DB_E_BADUPDATEDELETERULE = 292323877269540490n;
export const DB_E_BADCONSTRAINTID = 292324976781168267n;
export const DB_E_BADCOMMANDFLAGS = 292326076292796044n;
export const DB_E_OBJECTMISMATCH = 292330474339307149n;
export const DB_E_NOSOURCEOBJECT = 292331573850934929n;
export const DB_E_RESOURCELOCKED = 292332673362562706n;
export const DB_E_NOTCOLLECTION = 292333772874190483n;
export const DB_E_READONLY = 292334872385818260n;
export const DB_E_ASYNCNOTSUPPORTED = 292335971897446037n;
export const DB_E_CANNOTCONNECT = 292337071409073814n;
export const DB_E_TIMEOUT = 292338170920701591n;
export const DB_E_RESOURCEEXISTS = 292327175804423832n;
export const DB_E_RESOURCEOUTOFSCOPE = 292329374827679374n;
export const DB_E_DROPRESTRICTED = 292339270432329360n;
export const DB_E_DUPLICATECONSTRAINTID = 292340369943957145n;
export const DB_E_OUTOFSPACE = 292341469455584922n;
export const DB_SEC_E_SAFEMODE_DENIED = 292342568967212699n;
export const DB_E_NOSTATISTIC = 292343668478840476n;
export const DB_E_ALTERRESTRICTED = 292344767990468253n;
export const DB_E_RESOURCENOTSUPPORTED = 292345867502096030n;
export const DB_E_NOCONSTRAINT = 292346967013723807n;
export const DB_E_COLUMNUNAVAILABLE = 292382151385812640n;
export const DB_S_ROWLIMITEXCEEDED = 292383248749956800n;
export const DB_S_COLUMNTYPEMISMATCH = 292384348261584577n;
export const DB_S_TYPEINFOOVERRIDDEN = 292385447773212354n;
export const DB_S_BOOKMARKSKIPPED = 292387646796467907n;
export const DB_S_NONEXTROWSET = 292388746308095685n;
export const DB_S_ENDOFROWSET = 292389845819723462n;
export const DB_S_COMMANDREEXECUTED = 292390945331351239n;
export const DB_S_BUFFERFULL = 292392044842979016n;
export const DB_S_NORESULT = 292393144354606793n;
export const DB_S_CANTRELEASE = 292394243866234570n;
export const DB_S_GOALCHANGED = 292395343377862347n;
export const DB_S_UNWANTEDOPERATION = 292396442889490124n;
export const DB_S_DIALECTIGNORED = 292397542401117901n;
export const DB_S_UNWANTEDPHASE = 292398641912745678n;
export const DB_S_UNWANTEDREASON = 292399741424373455n;
export const DB_S_ASYNCHRONOUS = 292400840936001232n;
export const DB_S_COLUMNSCHANGED = 292401940447629009n;
export const DB_S_ERRORSRETURNED = 292403039959256786n;
export const DB_S_BADROWHANDLE = 292404139470884563n;
export const DB_S_DELETEDROW = 292405238982512340n;
export const DB_S_TOOMANYCHANGES = 292406338494140117n;
export const DB_S_STOPLIMITREACHED = 292408537517395670n;
export const DB_S_LOCKUPGRADED = 292409637029023448n;
export const DB_S_PROPERTIESCHANGED = 292410736540651225n;
export const DB_S_ERRORSOCCURRED = 292411836052279002n;
export const DB_S_PARAMUNAVAILABLE = 292412935563906779n;
export const DB_S_MULTIPLECHANGES = 292407438005767900n;
export const DB_S_NOTSINGLETON = 292414035075534551n;
export const DB_S_NOROWSPECIFICCOLUMNS = 5980865044853034717n;
export const DBPROPFLAGS_PERSIST = 8192;
export const DBPROPVAL_PERSIST_ADTG = 0;
export const DBPROPVAL_PERSIST_XML = 1;
export const DBPROP_PersistFormat = 2;
export const DBPROP_PersistSchema = 3;
export const DBPROP_HCHAPTER = 4;
export const DBPROP_MAINTAINPROPS = 5;
export const DBPROP_Unicode = 6;
export const DBPROP_INTERLEAVEDROWS = 8;
export const MS_PERSIST_PROGID = `MSPersist`;
export const DISPID_QUERY_RANKVECTOR = 2;
export const DISPID_QUERY_RANK = 3;
export const DISPID_QUERY_HITCOUNT = 4;
export const DISPID_QUERY_WORKID = 5;
export const DISPID_QUERY_ALL = 6;
export const DISPID_QUERY_UNFILTERED = 7;
export const DISPID_QUERY_REVNAME = 8;
export const DISPID_QUERY_VIRTUALPATH = 9;
export const DISPID_QUERY_LASTSEENTIME = 10;
export const CQUERYDISPIDS = 11;
export const DISPID_QUERY_METADATA_VROOTUSED = 2;
export const DISPID_QUERY_METADATA_VROOTAUTOMATIC = 3;
export const DISPID_QUERY_METADATA_VROOTMANUAL = 4;
export const DISPID_QUERY_METADATA_PROPGUID = 5;
export const DISPID_QUERY_METADATA_PROPDISPID = 6;
export const DISPID_QUERY_METADATA_PROPNAME = 7;
export const DISPID_QUERY_METADATA_STORELEVEL = 8;
export const DISPID_QUERY_METADATA_PROPMODIFIABLE = 9;
export const CQUERYMETADISPIDS = 10;
export const PROPID_DBBMK_BOOKMARK = 2;
export const PROPID_DBBMK_CHAPTER = 3;
export const CDBBMKDISPIDS = 8;
export const PROPID_DBSELF_SELF = 2;
export const CDBSELFDISPIDS = 8;
export const CDBCOLDISPIDS = 28;
export const CQUERYPROPERTY = 64;
export const QUERY_VALIDBITS = 3;
export const RTNone = 0;
export const RTAnd = 1;
export const RTOr = 2;
export const RTNot = 3;
export const RTContent = 4;
export const RTProperty = 5;
export const RTProximity = 6;
export const RTVector = 7;
export const RTNatLanguage = 8;
export const GENERATE_METHOD_PREFIXMATCH = 1;
export const GENERATE_METHOD_STEMMED = 2;
export const PRRE = 6;
export const PRAllBits = 7;
export const PRSomeBits = 8;
export const PRAll = 256;
export const PRAny = 512;
export const QUERY_SORTXASCEND = 2;
export const QUERY_SORTXDESCEND = 3;
export const QUERY_SORTDEFAULT = 4;
export const CATEGORIZE_UNIQUE = 0;
export const CATEGORIZE_CLUSTER = 1;
export const CATEGORIZE_BUCKETS = 2;
export const BUCKET_LINEAR = 0;
export const BUCKET_EXPONENTIAL = 1;
export const CATEGORIZE_RANGE = 3;
export const OCC_INVALID = 4294967295;
export const MAX_QUERY_RANK = 1000;
export const OSP_IndexLabel = 0;
export const SQL_NULL_DATA = `-1`;
export const SQL_DATA_AT_EXEC = `-2`;
export const SQL_SUCCESS = 0;
export const SQL_SUCCESS_WITH_INFO = 1;
export const SQL_NO_DATA = 100;
export const SQL_PARAM_DATA_AVAILABLE = 101;
export const SQL_ERROR = `-1`;
export const SQL_INVALID_HANDLE = `-2`;
export const SQL_STILL_EXECUTING = 2;
export const SQL_NEED_DATA = 99;
export const SQL_NTS = `-3`;
export const SQL_NTSL = `-3`;
export const SQL_MAX_MESSAGE_LENGTH = 512;
export const SQL_DATE_LEN = 10;
export const SQL_TIME_LEN = 8;
export const SQL_TIMESTAMP_LEN = 19;
export const SQL_HANDLE_ENV = 1;
export const SQL_HANDLE_DBC = 2;
export const SQL_HANDLE_STMT = 3;
export const SQL_HANDLE_DESC = 4;
export const SQL_ATTR_OUTPUT_NTS = 10001;
export const SQL_ATTR_AUTO_IPD = 10001;
export const SQL_ATTR_METADATA_ID = 10014;
export const SQL_ATTR_APP_ROW_DESC = 10010;
export const SQL_ATTR_APP_PARAM_DESC = 10011;
export const SQL_ATTR_IMP_ROW_DESC = 10012;
export const SQL_ATTR_IMP_PARAM_DESC = 10013;
export const SQL_ATTR_CURSOR_SCROLLABLE = `-1`;
export const SQL_ATTR_CURSOR_SENSITIVITY = `-2`;
export const SQL_NONSCROLLABLE = 0;
export const SQL_SCROLLABLE = 1;
export const SQL_DESC_COUNT = 1001;
export const SQL_DESC_TYPE = 1002;
export const SQL_DESC_LENGTH = 1003;
export const SQL_DESC_OCTET_LENGTH_PTR = 1004;
export const SQL_DESC_PRECISION = 1005;
export const SQL_DESC_SCALE = 1006;
export const SQL_DESC_DATETIME_INTERVAL_CODE = 1007;
export const SQL_DESC_NULLABLE = 1008;
export const SQL_DESC_INDICATOR_PTR = 1009;
export const SQL_DESC_DATA_PTR = 1010;
export const SQL_DESC_NAME = 1011;
export const SQL_DESC_UNNAMED = 1012;
export const SQL_DESC_OCTET_LENGTH = 1013;
export const SQL_DESC_ALLOC_TYPE = 1099;
export const SQL_DIAG_RETURNCODE = 1;
export const SQL_DIAG_NUMBER = 2;
export const SQL_DIAG_ROW_COUNT = 3;
export const SQL_DIAG_SQLSTATE = 4;
export const SQL_DIAG_NATIVE = 5;
export const SQL_DIAG_MESSAGE_TEXT = 6;
export const SQL_DIAG_DYNAMIC_FUNCTION = 7;
export const SQL_DIAG_CLASS_ORIGIN = 8;
export const SQL_DIAG_SUBCLASS_ORIGIN = 9;
export const SQL_DIAG_CONNECTION_NAME = 10;
export const SQL_DIAG_SERVER_NAME = 11;
export const SQL_DIAG_DYNAMIC_FUNCTION_CODE = 12;
export const SQL_DIAG_ALTER_DOMAIN = 3;
export const SQL_DIAG_ALTER_TABLE = 4;
export const SQL_DIAG_CALL = 7;
export const SQL_DIAG_CREATE_ASSERTION = 6;
export const SQL_DIAG_CREATE_CHARACTER_SET = 8;
export const SQL_DIAG_CREATE_COLLATION = 10;
export const SQL_DIAG_CREATE_DOMAIN = 23;
export const SQL_DIAG_CREATE_INDEX = `-1`;
export const SQL_DIAG_CREATE_SCHEMA = 64;
export const SQL_DIAG_CREATE_TABLE = 77;
export const SQL_DIAG_CREATE_TRANSLATION = 79;
export const SQL_DIAG_CREATE_VIEW = 84;
export const SQL_DIAG_DELETE_WHERE = 19;
export const SQL_DIAG_DROP_ASSERTION = 24;
export const SQL_DIAG_DROP_CHARACTER_SET = 25;
export const SQL_DIAG_DROP_COLLATION = 26;
export const SQL_DIAG_DROP_DOMAIN = 27;
export const SQL_DIAG_DROP_INDEX = `-2`;
export const SQL_DIAG_DROP_SCHEMA = 31;
export const SQL_DIAG_DROP_TABLE = 32;
export const SQL_DIAG_DROP_TRANSLATION = 33;
export const SQL_DIAG_DROP_VIEW = 36;
export const SQL_DIAG_DYNAMIC_DELETE_CURSOR = 38;
export const SQL_DIAG_DYNAMIC_UPDATE_CURSOR = 81;
export const SQL_DIAG_GRANT = 48;
export const SQL_DIAG_INSERT = 50;
export const SQL_DIAG_REVOKE = 59;
export const SQL_DIAG_SELECT_CURSOR = 85;
export const SQL_DIAG_UNKNOWN_STATEMENT = 0;
export const SQL_DIAG_UPDATE_WHERE = 82;
export const SQL_UNKNOWN_TYPE = 0;
export const SQL_CHAR = 1;
export const SQL_NUMERIC = 2;
export const SQL_DECIMAL = 3;
export const SQL_INTEGER = 4;
export const SQL_SMALLINT = 5;
export const SQL_FLOAT = 6;
export const SQL_REAL = 7;
export const SQL_DOUBLE = 8;
export const SQL_DATETIME = 9;
export const SQL_VARCHAR = 12;
export const SQL_TYPE_DATE = 91;
export const SQL_TYPE_TIME = 92;
export const SQL_TYPE_TIMESTAMP = 93;
export const SQL_UNSPECIFIED = 0;
export const SQL_INSENSITIVE = 1;
export const SQL_SENSITIVE = 2;
export const SQL_ALL_TYPES = 0;
export const SQL_DEFAULT = 99;
export const SQL_ARD_TYPE = `-99`;
export const SQL_APD_TYPE = `-100`;
export const SQL_CODE_DATE = 1;
export const SQL_CODE_TIME = 2;
export const SQL_CODE_TIMESTAMP = 3;
export const SQL_FALSE = 0;
export const SQL_TRUE = 1;
export const SQL_NO_NULLS = 0;
export const SQL_NULLABLE = 1;
export const SQL_NULLABLE_UNKNOWN = 2;
export const SQL_PRED_NONE = 0;
export const SQL_PRED_CHAR = 1;
export const SQL_PRED_BASIC = 2;
export const SQL_NAMED = 0;
export const SQL_UNNAMED = 1;
export const SQL_DESC_ALLOC_AUTO = 1;
export const SQL_DESC_ALLOC_USER = 2;
export const SQL_CLOSE = 0;
export const SQL_DROP = 1;
export const SQL_UNBIND = 2;
export const SQL_RESET_PARAMS = 3;
export const SQL_FETCH_NEXT = 1;
export const SQL_FETCH_FIRST = 2;
export const SQL_FETCH_LAST = 3;
export const SQL_FETCH_PRIOR = 4;
export const SQL_FETCH_ABSOLUTE = 5;
export const SQL_FETCH_RELATIVE = 6;
export const SQL_COMMIT = 0;
export const SQL_ROLLBACK = 1;
export const SQL_NULL_HENV = 0;
export const SQL_NULL_HDBC = 0;
export const SQL_NULL_HSTMT = 0;
export const SQL_NULL_HDESC = 0;
export const SQL_NULL_HANDLE = 0;
export const SQL_SCOPE_CURROW = 0;
export const SQL_SCOPE_TRANSACTION = 1;
export const SQL_SCOPE_SESSION = 2;
export const SQL_PC_UNKNOWN = 0;
export const SQL_PC_NON_PSEUDO = 1;
export const SQL_PC_PSEUDO = 2;
export const SQL_ROW_IDENTIFIER = 1;
export const SQL_INDEX_UNIQUE = 0;
export const SQL_INDEX_ALL = 1;
export const SQL_INDEX_CLUSTERED = 1;
export const SQL_INDEX_HASHED = 2;
export const SQL_INDEX_OTHER = 3;
export const SQL_API_SQLALLOCCONNECT = 1;
export const SQL_API_SQLALLOCENV = 2;
export const SQL_API_SQLALLOCHANDLE = 1001;
export const SQL_API_SQLALLOCSTMT = 3;
export const SQL_API_SQLBINDCOL = 4;
export const SQL_API_SQLBINDPARAM = 1002;
export const SQL_API_SQLCANCEL = 5;
export const SQL_API_SQLCLOSECURSOR = 1003;
export const SQL_API_SQLCOLATTRIBUTE = 6;
export const SQL_API_SQLCOLUMNS = 40;
export const SQL_API_SQLCONNECT = 7;
export const SQL_API_SQLCOPYDESC = 1004;
export const SQL_API_SQLDATASOURCES = 57;
export const SQL_API_SQLDESCRIBECOL = 8;
export const SQL_API_SQLDISCONNECT = 9;
export const SQL_API_SQLENDTRAN = 1005;
export const SQL_API_SQLERROR = 10;
export const SQL_API_SQLEXECDIRECT = 11;
export const SQL_API_SQLEXECUTE = 12;
export const SQL_API_SQLFETCH = 13;
export const SQL_API_SQLFETCHSCROLL = 1021;
export const SQL_API_SQLFREECONNECT = 14;
export const SQL_API_SQLFREEENV = 15;
export const SQL_API_SQLFREEHANDLE = 1006;
export const SQL_API_SQLFREESTMT = 16;
export const SQL_API_SQLGETCONNECTATTR = 1007;
export const SQL_API_SQLGETCONNECTOPTION = 42;
export const SQL_API_SQLGETCURSORNAME = 17;
export const SQL_API_SQLGETDATA = 43;
export const SQL_API_SQLGETDESCFIELD = 1008;
export const SQL_API_SQLGETDESCREC = 1009;
export const SQL_API_SQLGETDIAGFIELD = 1010;
export const SQL_API_SQLGETDIAGREC = 1011;
export const SQL_API_SQLGETENVATTR = 1012;
export const SQL_API_SQLGETFUNCTIONS = 44;
export const SQL_API_SQLGETINFO = 45;
export const SQL_API_SQLGETSTMTATTR = 1014;
export const SQL_API_SQLGETSTMTOPTION = 46;
export const SQL_API_SQLGETTYPEINFO = 47;
export const SQL_API_SQLNUMRESULTCOLS = 18;
export const SQL_API_SQLPARAMDATA = 48;
export const SQL_API_SQLPREPARE = 19;
export const SQL_API_SQLPUTDATA = 49;
export const SQL_API_SQLROWCOUNT = 20;
export const SQL_API_SQLSETCONNECTATTR = 1016;
export const SQL_API_SQLSETCONNECTOPTION = 50;
export const SQL_API_SQLSETCURSORNAME = 21;
export const SQL_API_SQLSETDESCFIELD = 1017;
export const SQL_API_SQLSETDESCREC = 1018;
export const SQL_API_SQLSETENVATTR = 1019;
export const SQL_API_SQLSETPARAM = 22;
export const SQL_API_SQLSETSTMTATTR = 1020;
export const SQL_API_SQLSETSTMTOPTION = 51;
export const SQL_API_SQLSPECIALCOLUMNS = 52;
export const SQL_API_SQLSTATISTICS = 53;
export const SQL_API_SQLTABLES = 54;
export const SQL_API_SQLTRANSACT = 23;
export const SQL_API_SQLCANCELHANDLE = 1550;
export const SQL_API_SQLCOMPLETEASYNC = 1551;
export const SQL_MAX_DRIVER_CONNECTIONS = 0;
export const SQL_MAXIMUM_DRIVER_CONNECTIONS = 0;
export const SQL_MAX_CONCURRENT_ACTIVITIES = 1;
export const SQL_MAXIMUM_CONCURRENT_ACTIVITIES = 1;
export const SQL_DATA_SOURCE_NAME = 2;
export const SQL_FETCH_DIRECTION = 8;
export const SQL_SERVER_NAME = 13;
export const SQL_SEARCH_PATTERN_ESCAPE = 14;
export const SQL_DBMS_NAME = 17;
export const SQL_DBMS_VER = 18;
export const SQL_ACCESSIBLE_TABLES = 19;
export const SQL_ACCESSIBLE_PROCEDURES = 20;
export const SQL_CURSOR_COMMIT_BEHAVIOR = 23;
export const SQL_DATA_SOURCE_READ_ONLY = 25;
export const SQL_DEFAULT_TXN_ISOLATION = 26;
export const SQL_IDENTIFIER_CASE = 28;
export const SQL_IDENTIFIER_QUOTE_CHAR = 29;
export const SQL_MAX_COLUMN_NAME_LEN = 30;
export const SQL_MAXIMUM_COLUMN_NAME_LENGTH = 30;
export const SQL_MAX_CURSOR_NAME_LEN = 31;
export const SQL_MAXIMUM_CURSOR_NAME_LENGTH = 31;
export const SQL_MAX_SCHEMA_NAME_LEN = 32;
export const SQL_MAXIMUM_SCHEMA_NAME_LENGTH = 32;
export const SQL_MAX_CATALOG_NAME_LEN = 34;
export const SQL_MAXIMUM_CATALOG_NAME_LENGTH = 34;
export const SQL_MAX_TABLE_NAME_LEN = 35;
export const SQL_SCROLL_CONCURRENCY = 43;
export const SQL_TXN_CAPABLE = 46;
export const SQL_TRANSACTION_CAPABLE = 46;
export const SQL_USER_NAME = 47;
export const SQL_TXN_ISOLATION_OPTION = 72;
export const SQL_TRANSACTION_ISOLATION_OPTION = 72;
export const SQL_INTEGRITY = 73;
export const SQL_GETDATA_EXTENSIONS = 81;
export const SQL_NULL_COLLATION = 85;
export const SQL_ALTER_TABLE = 86;
export const SQL_ORDER_BY_COLUMNS_IN_SELECT = 90;
export const SQL_SPECIAL_CHARACTERS = 94;
export const SQL_MAX_COLUMNS_IN_GROUP_BY = 97;
export const SQL_MAXIMUM_COLUMNS_IN_GROUP_BY = 97;
export const SQL_MAX_COLUMNS_IN_INDEX = 98;
export const SQL_MAXIMUM_COLUMNS_IN_INDEX = 98;
export const SQL_MAX_COLUMNS_IN_ORDER_BY = 99;
export const SQL_MAXIMUM_COLUMNS_IN_ORDER_BY = 99;
export const SQL_MAX_COLUMNS_IN_SELECT = 100;
export const SQL_MAXIMUM_COLUMNS_IN_SELECT = 100;
export const SQL_MAX_COLUMNS_IN_TABLE = 101;
export const SQL_MAX_INDEX_SIZE = 102;
export const SQL_MAXIMUM_INDEX_SIZE = 102;
export const SQL_MAX_ROW_SIZE = 104;
export const SQL_MAXIMUM_ROW_SIZE = 104;
export const SQL_MAX_STATEMENT_LEN = 105;
export const SQL_MAXIMUM_STATEMENT_LENGTH = 105;
export const SQL_MAX_TABLES_IN_SELECT = 106;
export const SQL_MAXIMUM_TABLES_IN_SELECT = 106;
export const SQL_MAX_USER_NAME_LEN = 107;
export const SQL_MAXIMUM_USER_NAME_LENGTH = 107;
export const SQL_OJ_CAPABILITIES = 115;
export const SQL_OUTER_JOIN_CAPABILITIES = 115;
export const SQL_XOPEN_CLI_YEAR = 10000;
export const SQL_CURSOR_SENSITIVITY = 10001;
export const SQL_DESCRIBE_PARAMETER = 10002;
export const SQL_CATALOG_NAME = 10003;
export const SQL_COLLATION_SEQ = 10004;
export const SQL_MAX_IDENTIFIER_LEN = 10005;
export const SQL_MAXIMUM_IDENTIFIER_LENGTH = 10005;
export const SQL_AT_ADD_COLUMN = 1;
export const SQL_AT_DROP_COLUMN = 2;
export const SQL_AT_ADD_CONSTRAINT = 8;
export const SQL_AM_NONE = 0;
export const SQL_AM_CONNECTION = 1;
export const SQL_AM_STATEMENT = 2;
export const SQL_CB_DELETE = 0;
export const SQL_CB_CLOSE = 1;
export const SQL_CB_PRESERVE = 2;
export const SQL_FD_FETCH_NEXT = 1;
export const SQL_FD_FETCH_FIRST = 2;
export const SQL_FD_FETCH_LAST = 4;
export const SQL_FD_FETCH_PRIOR = 8;
export const SQL_FD_FETCH_ABSOLUTE = 16;
export const SQL_FD_FETCH_RELATIVE = 32;
export const SQL_GD_ANY_COLUMN = 1;
export const SQL_GD_ANY_ORDER = 2;
export const SQL_IC_UPPER = 1;
export const SQL_IC_LOWER = 2;
export const SQL_IC_SENSITIVE = 3;
export const SQL_IC_MIXED = 4;
export const SQL_OJ_LEFT = 1;
export const SQL_OJ_RIGHT = 2;
export const SQL_OJ_FULL = 4;
export const SQL_OJ_NESTED = 8;
export const SQL_OJ_NOT_ORDERED = 16;
export const SQL_OJ_INNER = 32;
export const SQL_OJ_ALL_COMPARISON_OPS = 64;
export const SQL_SCCO_READ_ONLY = 1;
export const SQL_SCCO_LOCK = 2;
export const SQL_SCCO_OPT_ROWVER = 4;
export const SQL_SCCO_OPT_VALUES = 8;
export const SQL_TC_NONE = 0;
export const SQL_TC_DML = 1;
export const SQL_TC_ALL = 2;
export const SQL_TC_DDL_COMMIT = 3;
export const SQL_TC_DDL_IGNORE = 4;
export const SQL_TXN_READ_UNCOMMITTED = 1;
export const SQL_TRANSACTION_READ_UNCOMMITTED = 1;
export const SQL_TXN_READ_COMMITTED = 2;
export const SQL_TRANSACTION_READ_COMMITTED = 2;
export const SQL_TXN_REPEATABLE_READ = 4;
export const SQL_TRANSACTION_REPEATABLE_READ = 4;
export const SQL_TXN_SERIALIZABLE = 8;
export const SQL_TRANSACTION_SERIALIZABLE = 8;
export const SQL_NC_HIGH = 0;
export const SQL_NC_LOW = 1;
export const SQL_SPEC_MAJOR = 3;
export const SQL_SPEC_MINOR = 80;
export const SQL_SPEC_STRING = `03.80`;
export const SQL_SQLSTATE_SIZE = 5;
export const SQL_MAX_DSN_LENGTH = 32;
export const SQL_MAX_OPTION_STRING_LENGTH = 256;
export const SQL_NO_DATA_FOUND = 100;
export const SQL_HANDLE_SENV = 5;
export const SQL_ATTR_ODBC_VERSION = 200;
export const SQL_ATTR_CONNECTION_POOLING = 201;
export const SQL_ATTR_CP_MATCH = 202;
export const SQL_ATTR_APPLICATION_KEY = 203;
export const SQL_CP_OFF = 0;
export const SQL_CP_ONE_PER_DRIVER = 1;
export const SQL_CP_ONE_PER_HENV = 2;
export const SQL_CP_DRIVER_AWARE = 3;
export const SQL_CP_DEFAULT = 0;
export const SQL_CP_STRICT_MATCH = 0;
export const SQL_CP_RELAXED_MATCH = 1;
export const SQL_CP_MATCH_DEFAULT = 0;
export const SQL_OV_ODBC2 = 2;
export const SQL_OV_ODBC3 = 3;
export const SQL_OV_ODBC3_80 = 380;
export const SQL_ACCESS_MODE = 101;
export const SQL_AUTOCOMMIT = 102;
export const SQL_LOGIN_TIMEOUT = 103;
export const SQL_OPT_TRACE = 104;
export const SQL_OPT_TRACEFILE = 105;
export const SQL_TRANSLATE_DLL = 106;
export const SQL_TRANSLATE_OPTION = 107;
export const SQL_TXN_ISOLATION = 108;
export const SQL_CURRENT_QUALIFIER = 109;
export const SQL_ODBC_CURSORS = 110;
export const SQL_QUIET_MODE = 111;
export const SQL_PACKET_SIZE = 112;
export const SQL_ATTR_ACCESS_MODE = 101;
export const SQL_ATTR_AUTOCOMMIT = 102;
export const SQL_ATTR_CONNECTION_TIMEOUT = 113;
export const SQL_ATTR_CURRENT_CATALOG = 109;
export const SQL_ATTR_DISCONNECT_BEHAVIOR = 114;
export const SQL_ATTR_ENLIST_IN_DTC = 1207;
export const SQL_ATTR_ENLIST_IN_XA = 1208;
export const SQL_ATTR_LOGIN_TIMEOUT = 103;
export const SQL_ATTR_ODBC_CURSORS = 110;
export const SQL_ATTR_PACKET_SIZE = 112;
export const SQL_ATTR_QUIET_MODE = 111;
export const SQL_ATTR_TRACE = 104;
export const SQL_ATTR_TRACEFILE = 105;
export const SQL_ATTR_TRANSLATE_LIB = 106;
export const SQL_ATTR_TRANSLATE_OPTION = 107;
export const SQL_ATTR_TXN_ISOLATION = 108;
export const SQL_ATTR_CONNECTION_DEAD = 1209;
export const SQL_ATTR_ANSI_APP = 115;
export const SQL_ATTR_RESET_CONNECTION = 116;
export const SQL_ATTR_ASYNC_DBC_FUNCTIONS_ENABLE = 117;
export const SQL_ATTR_ASYNC_DBC_EVENT = 119;
export const SQL_CONNECT_OPT_DRVR_START = 1000;
export const SQL_CONN_OPT_MAX = 112;
export const SQL_CONN_OPT_MIN = 101;
export const SQL_MODE_READ_WRITE = 0;
export const SQL_MODE_READ_ONLY = 1;
export const SQL_MODE_DEFAULT = 0;
export const SQL_AUTOCOMMIT_OFF = 0;
export const SQL_AUTOCOMMIT_ON = 1;
export const SQL_AUTOCOMMIT_DEFAULT = 1;
export const SQL_LOGIN_TIMEOUT_DEFAULT = 15;
export const SQL_OPT_TRACE_OFF = 0;
export const SQL_OPT_TRACE_ON = 1;
export const SQL_OPT_TRACE_DEFAULT = 0;
export const SQL_OPT_TRACE_FILE_DEFAULT = `\\SQL.LOG`;
export const SQL_CUR_USE_IF_NEEDED = 0;
export const SQL_CUR_USE_ODBC = 1;
export const SQL_CUR_USE_DRIVER = 2;
export const SQL_CUR_DEFAULT = 2;
export const SQL_DB_RETURN_TO_POOL = 0;
export const SQL_DB_DISCONNECT = 1;
export const SQL_DB_DEFAULT = 0;
export const SQL_DTC_DONE = 0;
export const SQL_CD_TRUE = 1;
export const SQL_CD_FALSE = 0;
export const SQL_AA_TRUE = 1;
export const SQL_AA_FALSE = 0;
export const SQL_RESET_CONNECTION_YES = 1;
export const SQL_ASYNC_DBC_ENABLE_ON = 1;
export const SQL_ASYNC_DBC_ENABLE_OFF = 0;
export const SQL_ASYNC_DBC_ENABLE_DEFAULT = 0;
export const SQL_QUERY_TIMEOUT = 0;
export const SQL_MAX_ROWS = 1;
export const SQL_NOSCAN = 2;
export const SQL_MAX_LENGTH = 3;
export const SQL_ASYNC_ENABLE = 4;
export const SQL_BIND_TYPE = 5;
export const SQL_CURSOR_TYPE = 6;
export const SQL_CONCURRENCY = 7;
export const SQL_KEYSET_SIZE = 8;
export const SQL_ROWSET_SIZE = 9;
export const SQL_SIMULATE_CURSOR = 10;
export const SQL_RETRIEVE_DATA = 11;
export const SQL_USE_BOOKMARKS = 12;
export const SQL_GET_BOOKMARK = 13;
export const SQL_ROW_NUMBER = 14;
export const SQL_ATTR_ASYNC_ENABLE = 4;
export const SQL_ATTR_CONCURRENCY = 7;
export const SQL_ATTR_CURSOR_TYPE = 6;
export const SQL_ATTR_ENABLE_AUTO_IPD = 15;
export const SQL_ATTR_FETCH_BOOKMARK_PTR = 16;
export const SQL_ATTR_KEYSET_SIZE = 8;
export const SQL_ATTR_MAX_LENGTH = 3;
export const SQL_ATTR_MAX_ROWS = 1;
export const SQL_ATTR_NOSCAN = 2;
export const SQL_ATTR_PARAM_BIND_OFFSET_PTR = 17;
export const SQL_ATTR_PARAM_BIND_TYPE = 18;
export const SQL_ATTR_PARAM_OPERATION_PTR = 19;
export const SQL_ATTR_PARAM_STATUS_PTR = 20;
export const SQL_ATTR_PARAMS_PROCESSED_PTR = 21;
export const SQL_ATTR_PARAMSET_SIZE = 22;
export const SQL_ATTR_QUERY_TIMEOUT = 0;
export const SQL_ATTR_RETRIEVE_DATA = 11;
export const SQL_ATTR_ROW_BIND_OFFSET_PTR = 23;
export const SQL_ATTR_ROW_BIND_TYPE = 5;
export const SQL_ATTR_ROW_NUMBER = 14;
export const SQL_ATTR_ROW_OPERATION_PTR = 24;
export const SQL_ATTR_ROW_STATUS_PTR = 25;
export const SQL_ATTR_ROWS_FETCHED_PTR = 26;
export const SQL_ATTR_ROW_ARRAY_SIZE = 27;
export const SQL_ATTR_SIMULATE_CURSOR = 10;
export const SQL_ATTR_USE_BOOKMARKS = 12;
export const SQL_ATTR_ASYNC_STMT_EVENT = 29;
export const SQL_STMT_OPT_MAX = 14;
export const SQL_STMT_OPT_MIN = 0;
export const SQL_IS_POINTER = `-4`;
export const SQL_IS_UINTEGER = `-5`;
export const SQL_IS_INTEGER = `-6`;
export const SQL_IS_USMALLINT = `-7`;
export const SQL_IS_SMALLINT = `-8`;
export const SQL_PARAM_BIND_BY_COLUMN = 0;
export const SQL_PARAM_BIND_TYPE_DEFAULT = 0;
export const SQL_QUERY_TIMEOUT_DEFAULT = 0;
export const SQL_MAX_ROWS_DEFAULT = 0;
export const SQL_NOSCAN_OFF = 0;
export const SQL_NOSCAN_ON = 1;
export const SQL_NOSCAN_DEFAULT = 0;
export const SQL_MAX_LENGTH_DEFAULT = 0;
export const SQL_ASYNC_ENABLE_OFF = 0;
export const SQL_ASYNC_ENABLE_ON = 1;
export const SQL_ASYNC_ENABLE_DEFAULT = 0;
export const SQL_BIND_BY_COLUMN = 0;
export const SQL_BIND_TYPE_DEFAULT = 0;
export const SQL_CONCUR_READ_ONLY = 1;
export const SQL_CONCUR_LOCK = 2;
export const SQL_CONCUR_ROWVER = 3;
export const SQL_CONCUR_VALUES = 4;
export const SQL_CONCUR_DEFAULT = 1;
export const SQL_CURSOR_FORWARD_ONLY = 0;
export const SQL_CURSOR_KEYSET_DRIVEN = 1;
export const SQL_CURSOR_DYNAMIC = 2;
export const SQL_CURSOR_STATIC = 3;
export const SQL_CURSOR_TYPE_DEFAULT = 0;
export const SQL_ROWSET_SIZE_DEFAULT = 1;
export const SQL_KEYSET_SIZE_DEFAULT = 0;
export const SQL_SC_NON_UNIQUE = 0;
export const SQL_SC_TRY_UNIQUE = 1;
export const SQL_SC_UNIQUE = 2;
export const SQL_RD_OFF = 0;
export const SQL_RD_ON = 1;
export const SQL_RD_DEFAULT = 1;
export const SQL_UB_OFF = 0;
export const SQL_UB_ON = 1;
export const SQL_UB_DEFAULT = 0;
export const SQL_UB_FIXED = 1;
export const SQL_UB_VARIABLE = 2;
export const SQL_DESC_ARRAY_SIZE = 20;
export const SQL_DESC_ARRAY_STATUS_PTR = 21;
export const SQL_DESC_BASE_COLUMN_NAME = 22;
export const SQL_DESC_BASE_TABLE_NAME = 23;
export const SQL_DESC_BIND_OFFSET_PTR = 24;
export const SQL_DESC_BIND_TYPE = 25;
export const SQL_DESC_DATETIME_INTERVAL_PRECISION = 26;
export const SQL_DESC_LITERAL_PREFIX = 27;
export const SQL_DESC_LITERAL_SUFFIX = 28;
export const SQL_DESC_LOCAL_TYPE_NAME = 29;
export const SQL_DESC_MAXIMUM_SCALE = 30;
export const SQL_DESC_MINIMUM_SCALE = 31;
export const SQL_DESC_NUM_PREC_RADIX = 32;
export const SQL_DESC_PARAMETER_TYPE = 33;
export const SQL_DESC_ROWS_PROCESSED_PTR = 34;
export const SQL_DESC_ROWVER = 35;
export const SQL_DIAG_CURSOR_ROW_COUNT = `-1249`;
export const SQL_DIAG_ROW_NUMBER = `-1248`;
export const SQL_DIAG_COLUMN_NUMBER = `-1247`;
export const SQL_DATE = 9;
export const SQL_INTERVAL = 10;
export const SQL_TIME = 10;
export const SQL_TIMESTAMP = 11;
export const SQL_LONGVARCHAR = `-1`;
export const SQL_BINARY = `-2`;
export const SQL_VARBINARY = `-3`;
export const SQL_LONGVARBINARY = `-4`;
export const SQL_BIGINT = `-5`;
export const SQL_TINYINT = `-6`;
export const SQL_BIT = `-7`;
export const SQL_GUID = `-11`;
export const SQL_CODE_YEAR = 1;
export const SQL_CODE_MONTH = 2;
export const SQL_CODE_DAY = 3;
export const SQL_CODE_HOUR = 4;
export const SQL_CODE_MINUTE = 5;
export const SQL_CODE_SECOND = 6;
export const SQL_CODE_YEAR_TO_MONTH = 7;
export const SQL_CODE_DAY_TO_HOUR = 8;
export const SQL_CODE_DAY_TO_MINUTE = 9;
export const SQL_CODE_DAY_TO_SECOND = 10;
export const SQL_CODE_HOUR_TO_MINUTE = 11;
export const SQL_CODE_HOUR_TO_SECOND = 12;
export const SQL_CODE_MINUTE_TO_SECOND = 13;
export const SQL_INTERVAL_YEAR = `-80`;
export const SQL_INTERVAL_MONTH = `-81`;
export const SQL_INTERVAL_YEAR_TO_MONTH = `-82`;
export const SQL_INTERVAL_DAY = `-83`;
export const SQL_INTERVAL_HOUR = `-84`;
export const SQL_INTERVAL_MINUTE = `-85`;
export const SQL_INTERVAL_SECOND = `-86`;
export const SQL_INTERVAL_DAY_TO_HOUR = `-87`;
export const SQL_INTERVAL_DAY_TO_MINUTE = `-88`;
export const SQL_INTERVAL_DAY_TO_SECOND = `-89`;
export const SQL_INTERVAL_HOUR_TO_MINUTE = `-90`;
export const SQL_INTERVAL_HOUR_TO_SECOND = `-91`;
export const SQL_INTERVAL_MINUTE_TO_SECOND = `-92`;
export const SQL_UNICODE = `-95`;
export const SQL_UNICODE_VARCHAR = `-96`;
export const SQL_UNICODE_LONGVARCHAR = `-97`;
export const SQL_UNICODE_CHAR = `-95`;
export const SQL_TYPE_DRIVER_START = `-80`;
export const SQL_TYPE_DRIVER_END = `-97`;
export const SQL_C_CHAR = 1;
export const SQL_C_LONG = 4;
export const SQL_C_SHORT = 5;
export const SQL_C_FLOAT = 7;
export const SQL_C_DOUBLE = 8;
export const SQL_C_NUMERIC = 2;
export const SQL_C_DEFAULT = 99;
export const SQL_SIGNED_OFFSET = `-20`;
export const SQL_UNSIGNED_OFFSET = `-22`;
export const SQL_C_DATE = 9;
export const SQL_C_TIME = 10;
export const SQL_C_TIMESTAMP = 11;
export const SQL_C_TYPE_DATE = 91;
export const SQL_C_TYPE_TIME = 92;
export const SQL_C_TYPE_TIMESTAMP = 93;
export const SQL_C_INTERVAL_YEAR = `-80`;
export const SQL_C_INTERVAL_MONTH = `-81`;
export const SQL_C_INTERVAL_DAY = `-83`;
export const SQL_C_INTERVAL_HOUR = `-84`;
export const SQL_C_INTERVAL_MINUTE = `-85`;
export const SQL_C_INTERVAL_SECOND = `-86`;
export const SQL_C_INTERVAL_YEAR_TO_MONTH = `-82`;
export const SQL_C_INTERVAL_DAY_TO_HOUR = `-87`;
export const SQL_C_INTERVAL_DAY_TO_MINUTE = `-88`;
export const SQL_C_INTERVAL_DAY_TO_SECOND = `-89`;
export const SQL_C_INTERVAL_HOUR_TO_MINUTE = `-90`;
export const SQL_C_INTERVAL_HOUR_TO_SECOND = `-91`;
export const SQL_C_INTERVAL_MINUTE_TO_SECOND = `-92`;
export const SQL_C_BINARY = `-2`;
export const SQL_C_BIT = `-7`;
export const SQL_C_TINYINT = `-6`;
export const SQL_C_GUID = `-11`;
export const SQL_TYPE_NULL = 0;
export const SQL_TYPE_MIN = `-7`;
export const SQL_TYPE_MAX = 12;
export const SQL_DRIVER_C_TYPE_BASE = 16384;
export const SQL_DRIVER_SQL_TYPE_BASE = 16384;
export const SQL_DRIVER_DESC_FIELD_BASE = 16384;
export const SQL_DRIVER_DIAG_FIELD_BASE = 16384;
export const SQL_DRIVER_INFO_TYPE_BASE = 16384;
export const SQL_DRIVER_CONN_ATTR_BASE = 16384;
export const SQL_DRIVER_STMT_ATTR_BASE = 16384;
export const SQL_C_VARBOOKMARK = `-2`;
export const SQL_NO_ROW_NUMBER = `-1`;
export const SQL_NO_COLUMN_NUMBER = `-1`;
export const SQL_ROW_NUMBER_UNKNOWN = `-2`;
export const SQL_COLUMN_NUMBER_UNKNOWN = `-2`;
export const SQL_DEFAULT_PARAM = `-5`;
export const SQL_IGNORE = `-6`;
export const SQL_COLUMN_IGNORE = `-6`;
export const SQL_LEN_DATA_AT_EXEC_OFFSET = `-100`;
export const SQL_LEN_BINARY_ATTR_OFFSET = `-100`;
export const SQL_SETPARAM_VALUE_MAX = `-1`;
export const SQL_COLUMN_COUNT = 0;
export const SQL_COLUMN_NAME = 1;
export const SQL_COLUMN_TYPE = 2;
export const SQL_COLUMN_LENGTH = 3;
export const SQL_COLUMN_PRECISION = 4;
export const SQL_COLUMN_SCALE = 5;
export const SQL_COLUMN_DISPLAY_SIZE = 6;
export const SQL_COLUMN_NULLABLE = 7;
export const SQL_COLUMN_UNSIGNED = 8;
export const SQL_COLUMN_MONEY = 9;
export const SQL_COLUMN_UPDATABLE = 10;
export const SQL_COLUMN_AUTO_INCREMENT = 11;
export const SQL_COLUMN_CASE_SENSITIVE = 12;
export const SQL_COLUMN_SEARCHABLE = 13;
export const SQL_COLUMN_TYPE_NAME = 14;
export const SQL_COLUMN_TABLE_NAME = 15;
export const SQL_COLUMN_OWNER_NAME = 16;
export const SQL_COLUMN_QUALIFIER_NAME = 17;
export const SQL_COLUMN_LABEL = 18;
export const SQL_COLATT_OPT_MAX = 18;
export const SQL_COLUMN_DRIVER_START = 1000;
export const SQL_COLATT_OPT_MIN = 0;
export const SQL_ATTR_READONLY = 0;
export const SQL_ATTR_WRITE = 1;
export const SQL_ATTR_READWRITE_UNKNOWN = 2;
export const SQL_UNSEARCHABLE = 0;
export const SQL_LIKE_ONLY = 1;
export const SQL_ALL_EXCEPT_LIKE = 2;
export const SQL_SEARCHABLE = 3;
export const SQL_PRED_SEARCHABLE = 3;
export const SQL_NO_TOTAL = `-4`;
export const SQL_API_SQLALLOCHANDLESTD = 73;
export const SQL_API_SQLBULKOPERATIONS = 24;
export const SQL_API_SQLBINDPARAMETER = 72;
export const SQL_API_SQLBROWSECONNECT = 55;
export const SQL_API_SQLCOLATTRIBUTES = 6;
export const SQL_API_SQLCOLUMNPRIVILEGES = 56;
export const SQL_API_SQLDESCRIBEPARAM = 58;
export const SQL_API_SQLDRIVERCONNECT = 41;
export const SQL_API_SQLDRIVERS = 71;
export const SQL_API_SQLPRIVATEDRIVERS = 79;
export const SQL_API_SQLEXTENDEDFETCH = 59;
export const SQL_API_SQLFOREIGNKEYS = 60;
export const SQL_API_SQLMORERESULTS = 61;
export const SQL_API_SQLNATIVESQL = 62;
export const SQL_API_SQLNUMPARAMS = 63;
export const SQL_API_SQLPARAMOPTIONS = 64;
export const SQL_API_SQLPRIMARYKEYS = 65;
export const SQL_API_SQLPROCEDURECOLUMNS = 66;
export const SQL_API_SQLPROCEDURES = 67;
export const SQL_API_SQLSETPOS = 68;
export const SQL_API_SQLSETSCROLLOPTIONS = 69;
export const SQL_API_SQLTABLEPRIVILEGES = 70;
export const SQL_EXT_API_LAST = 72;
export const SQL_NUM_FUNCTIONS = 23;
export const SQL_EXT_API_START = 40;
export const SQL_API_ALL_FUNCTIONS = 0;
export const SQL_API_LOADBYORDINAL = 199;
export const SQL_API_ODBC3_ALL_FUNCTIONS = 999;
export const SQL_API_ODBC3_ALL_FUNCTIONS_SIZE = 250;
export const SQL_INFO_FIRST = 0;
export const SQL_ACTIVE_CONNECTIONS = 0;
export const SQL_ACTIVE_STATEMENTS = 1;
export const SQL_DRIVER_HDBC = 3;
export const SQL_DRIVER_HENV = 4;
export const SQL_DRIVER_HSTMT = 5;
export const SQL_DRIVER_NAME = 6;
export const SQL_DRIVER_VER = 7;
export const SQL_ODBC_API_CONFORMANCE = 9;
export const SQL_ODBC_VER = 10;
export const SQL_ROW_UPDATES = 11;
export const SQL_ODBC_SAG_CLI_CONFORMANCE = 12;
export const SQL_ODBC_SQL_CONFORMANCE = 15;
export const SQL_PROCEDURES = 21;
export const SQL_CONCAT_NULL_BEHAVIOR = 22;
export const SQL_CURSOR_ROLLBACK_BEHAVIOR = 24;
export const SQL_EXPRESSIONS_IN_ORDERBY = 27;
export const SQL_MAX_OWNER_NAME_LEN = 32;
export const SQL_MAX_PROCEDURE_NAME_LEN = 33;
export const SQL_MAX_QUALIFIER_NAME_LEN = 34;
export const SQL_MULT_RESULT_SETS = 36;
export const SQL_MULTIPLE_ACTIVE_TXN = 37;
export const SQL_OUTER_JOINS = 38;
export const SQL_OWNER_TERM = 39;
export const SQL_PROCEDURE_TERM = 40;
export const SQL_QUALIFIER_NAME_SEPARATOR = 41;
export const SQL_QUALIFIER_TERM = 42;
export const SQL_SCROLL_OPTIONS = 44;
export const SQL_TABLE_TERM = 45;
export const SQL_CONVERT_FUNCTIONS = 48;
export const SQL_NUMERIC_FUNCTIONS = 49;
export const SQL_STRING_FUNCTIONS = 50;
export const SQL_SYSTEM_FUNCTIONS = 51;
export const SQL_TIMEDATE_FUNCTIONS = 52;
export const SQL_CONVERT_BIGINT = 53;
export const SQL_CONVERT_BINARY = 54;
export const SQL_CONVERT_BIT = 55;
export const SQL_CONVERT_CHAR = 56;
export const SQL_CONVERT_DATE = 57;
export const SQL_CONVERT_DECIMAL = 58;
export const SQL_CONVERT_DOUBLE = 59;
export const SQL_CONVERT_FLOAT = 60;
export const SQL_CONVERT_INTEGER = 61;
export const SQL_CONVERT_LONGVARCHAR = 62;
export const SQL_CONVERT_NUMERIC = 63;
export const SQL_CONVERT_REAL = 64;
export const SQL_CONVERT_SMALLINT = 65;
export const SQL_CONVERT_TIME = 66;
export const SQL_CONVERT_TIMESTAMP = 67;
export const SQL_CONVERT_TINYINT = 68;
export const SQL_CONVERT_VARBINARY = 69;
export const SQL_CONVERT_VARCHAR = 70;
export const SQL_CONVERT_LONGVARBINARY = 71;
export const SQL_ODBC_SQL_OPT_IEF = 73;
export const SQL_CORRELATION_NAME = 74;
export const SQL_NON_NULLABLE_COLUMNS = 75;
export const SQL_DRIVER_HLIB = 76;
export const SQL_DRIVER_ODBC_VER = 77;
export const SQL_LOCK_TYPES = 78;
export const SQL_POS_OPERATIONS = 79;
export const SQL_POSITIONED_STATEMENTS = 80;
export const SQL_BOOKMARK_PERSISTENCE = 82;
export const SQL_STATIC_SENSITIVITY = 83;
export const SQL_FILE_USAGE = 84;
export const SQL_COLUMN_ALIAS = 87;
export const SQL_GROUP_BY = 88;
export const SQL_KEYWORDS = 89;
export const SQL_OWNER_USAGE = 91;
export const SQL_QUALIFIER_USAGE = 92;
export const SQL_QUOTED_IDENTIFIER_CASE = 93;
export const SQL_SUBQUERIES = 95;
export const SQL_UNION = 96;
export const SQL_MAX_ROW_SIZE_INCLUDES_LONG = 103;
export const SQL_MAX_CHAR_LITERAL_LEN = 108;
export const SQL_TIMEDATE_ADD_INTERVALS = 109;
export const SQL_TIMEDATE_DIFF_INTERVALS = 110;
export const SQL_NEED_LONG_DATA_LEN = 111;
export const SQL_MAX_BINARY_LITERAL_LEN = 112;
export const SQL_LIKE_ESCAPE_CLAUSE = 113;
export const SQL_QUALIFIER_LOCATION = 114;
export const SQL_INFO_LAST = 114;
export const SQL_INFO_DRIVER_START = 1000;
export const SQL_ACTIVE_ENVIRONMENTS = 116;
export const SQL_ALTER_DOMAIN = 117;
export const SQL_SQL_CONFORMANCE = 118;
export const SQL_DATETIME_LITERALS = 119;
export const SQL_ASYNC_MODE = 10021;
export const SQL_BATCH_ROW_COUNT = 120;
export const SQL_BATCH_SUPPORT = 121;
export const SQL_CATALOG_LOCATION = 114;
export const SQL_CATALOG_NAME_SEPARATOR = 41;
export const SQL_CATALOG_TERM = 42;
export const SQL_CATALOG_USAGE = 92;
export const SQL_CONVERT_WCHAR = 122;
export const SQL_CONVERT_INTERVAL_DAY_TIME = 123;
export const SQL_CONVERT_INTERVAL_YEAR_MONTH = 124;
export const SQL_CONVERT_WLONGVARCHAR = 125;
export const SQL_CONVERT_WVARCHAR = 126;
export const SQL_CREATE_ASSERTION = 127;
export const SQL_CREATE_CHARACTER_SET = 128;
export const SQL_CREATE_COLLATION = 129;
export const SQL_CREATE_DOMAIN = 130;
export const SQL_CREATE_SCHEMA = 131;
export const SQL_CREATE_TABLE = 132;
export const SQL_CREATE_TRANSLATION = 133;
export const SQL_CREATE_VIEW = 134;
export const SQL_DRIVER_HDESC = 135;
export const SQL_DROP_ASSERTION = 136;
export const SQL_DROP_CHARACTER_SET = 137;
export const SQL_DROP_COLLATION = 138;
export const SQL_DROP_DOMAIN = 139;
export const SQL_DROP_SCHEMA = 140;
export const SQL_DROP_TABLE = 141;
export const SQL_DROP_TRANSLATION = 142;
export const SQL_DROP_VIEW = 143;
export const SQL_DYNAMIC_CURSOR_ATTRIBUTES1 = 144;
export const SQL_DYNAMIC_CURSOR_ATTRIBUTES2 = 145;
export const SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES1 = 146;
export const SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES2 = 147;
export const SQL_INDEX_KEYWORDS = 148;
export const SQL_INFO_SCHEMA_VIEWS = 149;
export const SQL_KEYSET_CURSOR_ATTRIBUTES1 = 150;
export const SQL_KEYSET_CURSOR_ATTRIBUTES2 = 151;
export const SQL_MAX_ASYNC_CONCURRENT_STATEMENTS = 10022;
export const SQL_ODBC_INTERFACE_CONFORMANCE = 152;
export const SQL_PARAM_ARRAY_ROW_COUNTS = 153;
export const SQL_PARAM_ARRAY_SELECTS = 154;
export const SQL_SCHEMA_TERM = 39;
export const SQL_SCHEMA_USAGE = 91;
export const SQL_SQL92_DATETIME_FUNCTIONS = 155;
export const SQL_SQL92_FOREIGN_KEY_DELETE_RULE = 156;
export const SQL_SQL92_FOREIGN_KEY_UPDATE_RULE = 157;
export const SQL_SQL92_GRANT = 158;
export const SQL_SQL92_NUMERIC_VALUE_FUNCTIONS = 159;
export const SQL_SQL92_PREDICATES = 160;
export const SQL_SQL92_RELATIONAL_JOIN_OPERATORS = 161;
export const SQL_SQL92_REVOKE = 162;
export const SQL_SQL92_ROW_VALUE_CONSTRUCTOR = 163;
export const SQL_SQL92_STRING_FUNCTIONS = 164;
export const SQL_SQL92_VALUE_EXPRESSIONS = 165;
export const SQL_STANDARD_CLI_CONFORMANCE = 166;
export const SQL_STATIC_CURSOR_ATTRIBUTES1 = 167;
export const SQL_STATIC_CURSOR_ATTRIBUTES2 = 168;
export const SQL_AGGREGATE_FUNCTIONS = 169;
export const SQL_DDL_INDEX = 170;
export const SQL_DM_VER = 171;
export const SQL_INSERT_STATEMENT = 172;
export const SQL_CONVERT_GUID = 173;
export const SQL_UNION_STATEMENT = 96;
export const SQL_ASYNC_DBC_FUNCTIONS = 10023;
export const SQL_DRIVER_AWARE_POOLING_SUPPORTED = 10024;
export const SQL_ASYNC_NOTIFICATION = 10025;
export const SQL_ASYNC_NOTIFICATION_NOT_CAPABLE = 0;
export const SQL_ASYNC_NOTIFICATION_CAPABLE = 1;
export const SQL_DTC_TRANSITION_COST = 1750;
export const SQL_AT_ADD_COLUMN_SINGLE = 32;
export const SQL_AT_ADD_COLUMN_DEFAULT = 64;
export const SQL_AT_ADD_COLUMN_COLLATION = 128;
export const SQL_AT_SET_COLUMN_DEFAULT = 256;
export const SQL_AT_DROP_COLUMN_DEFAULT = 512;
export const SQL_AT_DROP_COLUMN_CASCADE = 1024;
export const SQL_AT_DROP_COLUMN_RESTRICT = 2048;
export const SQL_AT_ADD_TABLE_CONSTRAINT = 4096;
export const SQL_AT_DROP_TABLE_CONSTRAINT_CASCADE = 8192;
export const SQL_AT_DROP_TABLE_CONSTRAINT_RESTRICT = 16384;
export const SQL_AT_CONSTRAINT_NAME_DEFINITION = 32768;
export const SQL_AT_CONSTRAINT_INITIALLY_DEFERRED = 65536;
export const SQL_AT_CONSTRAINT_INITIALLY_IMMEDIATE = 131072;
export const SQL_AT_CONSTRAINT_DEFERRABLE = 262144;
export const SQL_AT_CONSTRAINT_NON_DEFERRABLE = 524288;
export const SQL_CVT_CHAR = 1;
export const SQL_CVT_NUMERIC = 2;
export const SQL_CVT_DECIMAL = 4;
export const SQL_CVT_INTEGER = 8;
export const SQL_CVT_SMALLINT = 16;
export const SQL_CVT_FLOAT = 32;
export const SQL_CVT_REAL = 64;
export const SQL_CVT_DOUBLE = 128;
export const SQL_CVT_VARCHAR = 256;
export const SQL_CVT_LONGVARCHAR = 512;
export const SQL_CVT_BINARY = 1024;
export const SQL_CVT_VARBINARY = 2048;
export const SQL_CVT_BIT = 4096;
export const SQL_CVT_TINYINT = 8192;
export const SQL_CVT_BIGINT = 16384;
export const SQL_CVT_DATE = 32768;
export const SQL_CVT_TIME = 65536;
export const SQL_CVT_TIMESTAMP = 131072;
export const SQL_CVT_LONGVARBINARY = 262144;
export const SQL_CVT_INTERVAL_YEAR_MONTH = 524288;
export const SQL_CVT_INTERVAL_DAY_TIME = 1048576;
export const SQL_CVT_WCHAR = 2097152;
export const SQL_CVT_WLONGVARCHAR = 4194304;
export const SQL_CVT_WVARCHAR = 8388608;
export const SQL_CVT_GUID = 16777216;
export const SQL_FN_CVT_CONVERT = 1;
export const SQL_FN_CVT_CAST = 2;
export const SQL_FN_STR_CONCAT = 1;
export const SQL_FN_STR_INSERT = 2;
export const SQL_FN_STR_LEFT = 4;
export const SQL_FN_STR_LTRIM = 8;
export const SQL_FN_STR_LENGTH = 16;
export const SQL_FN_STR_LOCATE = 32;
export const SQL_FN_STR_LCASE = 64;
export const SQL_FN_STR_REPEAT = 128;
export const SQL_FN_STR_REPLACE = 256;
export const SQL_FN_STR_RIGHT = 512;
export const SQL_FN_STR_RTRIM = 1024;
export const SQL_FN_STR_SUBSTRING = 2048;
export const SQL_FN_STR_UCASE = 4096;
export const SQL_FN_STR_ASCII = 8192;
export const SQL_FN_STR_CHAR = 16384;
export const SQL_FN_STR_DIFFERENCE = 32768;
export const SQL_FN_STR_LOCATE_2 = 65536;
export const SQL_FN_STR_SOUNDEX = 131072;
export const SQL_FN_STR_SPACE = 262144;
export const SQL_FN_STR_BIT_LENGTH = 524288;
export const SQL_FN_STR_CHAR_LENGTH = 1048576;
export const SQL_FN_STR_CHARACTER_LENGTH = 2097152;
export const SQL_FN_STR_OCTET_LENGTH = 4194304;
export const SQL_FN_STR_POSITION = 8388608;
export const SQL_SSF_CONVERT = 1;
export const SQL_SSF_LOWER = 2;
export const SQL_SSF_UPPER = 4;
export const SQL_SSF_SUBSTRING = 8;
export const SQL_SSF_TRANSLATE = 16;
export const SQL_SSF_TRIM_BOTH = 32;
export const SQL_SSF_TRIM_LEADING = 64;
export const SQL_SSF_TRIM_TRAILING = 128;
export const SQL_FN_NUM_ABS = 1;
export const SQL_FN_NUM_ACOS = 2;
export const SQL_FN_NUM_ASIN = 4;
export const SQL_FN_NUM_ATAN = 8;
export const SQL_FN_NUM_ATAN2 = 16;
export const SQL_FN_NUM_CEILING = 32;
export const SQL_FN_NUM_COS = 64;
export const SQL_FN_NUM_COT = 128;
export const SQL_FN_NUM_EXP = 256;
export const SQL_FN_NUM_FLOOR = 512;
export const SQL_FN_NUM_LOG = 1024;
export const SQL_FN_NUM_MOD = 2048;
export const SQL_FN_NUM_SIGN = 4096;
export const SQL_FN_NUM_SIN = 8192;
export const SQL_FN_NUM_SQRT = 16384;
export const SQL_FN_NUM_TAN = 32768;
export const SQL_FN_NUM_PI = 65536;
export const SQL_FN_NUM_RAND = 131072;
export const SQL_FN_NUM_DEGREES = 262144;
export const SQL_FN_NUM_LOG10 = 524288;
export const SQL_FN_NUM_POWER = 1048576;
export const SQL_FN_NUM_RADIANS = 2097152;
export const SQL_FN_NUM_ROUND = 4194304;
export const SQL_FN_NUM_TRUNCATE = 8388608;
export const SQL_SNVF_BIT_LENGTH = 1;
export const SQL_SNVF_CHAR_LENGTH = 2;
export const SQL_SNVF_CHARACTER_LENGTH = 4;
export const SQL_SNVF_EXTRACT = 8;
export const SQL_SNVF_OCTET_LENGTH = 16;
export const SQL_SNVF_POSITION = 32;
export const SQL_FN_TD_NOW = 1;
export const SQL_FN_TD_CURDATE = 2;
export const SQL_FN_TD_DAYOFMONTH = 4;
export const SQL_FN_TD_DAYOFWEEK = 8;
export const SQL_FN_TD_DAYOFYEAR = 16;
export const SQL_FN_TD_MONTH = 32;
export const SQL_FN_TD_QUARTER = 64;
export const SQL_FN_TD_WEEK = 128;
export const SQL_FN_TD_YEAR = 256;
export const SQL_FN_TD_CURTIME = 512;
export const SQL_FN_TD_HOUR = 1024;
export const SQL_FN_TD_MINUTE = 2048;
export const SQL_FN_TD_SECOND = 4096;
export const SQL_FN_TD_TIMESTAMPADD = 8192;
export const SQL_FN_TD_TIMESTAMPDIFF = 16384;
export const SQL_FN_TD_DAYNAME = 32768;
export const SQL_FN_TD_MONTHNAME = 65536;
export const SQL_FN_TD_CURRENT_DATE = 131072;
export const SQL_FN_TD_CURRENT_TIME = 262144;
export const SQL_FN_TD_CURRENT_TIMESTAMP = 524288;
export const SQL_FN_TD_EXTRACT = 1048576;
export const SQL_SDF_CURRENT_DATE = 1;
export const SQL_SDF_CURRENT_TIME = 2;
export const SQL_SDF_CURRENT_TIMESTAMP = 4;
export const SQL_FN_SYS_USERNAME = 1;
export const SQL_FN_SYS_DBNAME = 2;
export const SQL_FN_SYS_IFNULL = 4;
export const SQL_FN_TSI_FRAC_SECOND = 1;
export const SQL_FN_TSI_SECOND = 2;
export const SQL_FN_TSI_MINUTE = 4;
export const SQL_FN_TSI_HOUR = 8;
export const SQL_FN_TSI_DAY = 16;
export const SQL_FN_TSI_WEEK = 32;
export const SQL_FN_TSI_MONTH = 64;
export const SQL_FN_TSI_QUARTER = 128;
export const SQL_FN_TSI_YEAR = 256;
export const SQL_CA1_NEXT = 1;
export const SQL_CA1_ABSOLUTE = 2;
export const SQL_CA1_RELATIVE = 4;
export const SQL_CA1_BOOKMARK = 8;
export const SQL_CA1_LOCK_NO_CHANGE = 64;
export const SQL_CA1_LOCK_EXCLUSIVE = 128;
export const SQL_CA1_LOCK_UNLOCK = 256;
export const SQL_CA1_POS_POSITION = 512;
export const SQL_CA1_POS_UPDATE = 1024;
export const SQL_CA1_POS_DELETE = 2048;
export const SQL_CA1_POS_REFRESH = 4096;
export const SQL_CA1_POSITIONED_UPDATE = 8192;
export const SQL_CA1_POSITIONED_DELETE = 16384;
export const SQL_CA1_SELECT_FOR_UPDATE = 32768;
export const SQL_CA1_BULK_ADD = 65536;
export const SQL_CA1_BULK_UPDATE_BY_BOOKMARK = 131072;
export const SQL_CA1_BULK_DELETE_BY_BOOKMARK = 262144;
export const SQL_CA1_BULK_FETCH_BY_BOOKMARK = 524288;
export const SQL_CA2_READ_ONLY_CONCURRENCY = 1;
export const SQL_CA2_LOCK_CONCURRENCY = 2;
export const SQL_CA2_OPT_ROWVER_CONCURRENCY = 4;
export const SQL_CA2_OPT_VALUES_CONCURRENCY = 8;
export const SQL_CA2_SENSITIVITY_ADDITIONS = 16;
export const SQL_CA2_SENSITIVITY_DELETIONS = 32;
export const SQL_CA2_SENSITIVITY_UPDATES = 64;
export const SQL_CA2_MAX_ROWS_SELECT = 128;
export const SQL_CA2_MAX_ROWS_INSERT = 256;
export const SQL_CA2_MAX_ROWS_DELETE = 512;
export const SQL_CA2_MAX_ROWS_UPDATE = 1024;
export const SQL_CA2_MAX_ROWS_CATALOG = 2048;
export const SQL_CA2_CRC_EXACT = 4096;
export const SQL_CA2_CRC_APPROXIMATE = 8192;
export const SQL_CA2_SIMULATE_NON_UNIQUE = 16384;
export const SQL_CA2_SIMULATE_TRY_UNIQUE = 32768;
export const SQL_CA2_SIMULATE_UNIQUE = 65536;
export const SQL_OAC_NONE = 0;
export const SQL_OAC_LEVEL1 = 1;
export const SQL_OAC_LEVEL2 = 2;
export const SQL_OSCC_NOT_COMPLIANT = 0;
export const SQL_OSCC_COMPLIANT = 1;
export const SQL_OSC_MINIMUM = 0;
export const SQL_OSC_CORE = 1;
export const SQL_OSC_EXTENDED = 2;
export const SQL_CB_NULL = 0;
export const SQL_CB_NON_NULL = 1;
export const SQL_SO_FORWARD_ONLY = 1;
export const SQL_SO_KEYSET_DRIVEN = 2;
export const SQL_SO_DYNAMIC = 4;
export const SQL_SO_MIXED = 8;
export const SQL_SO_STATIC = 16;
export const SQL_FD_FETCH_RESUME = 64;
export const SQL_FD_FETCH_BOOKMARK = 128;
export const SQL_TXN_VERSIONING = 16;
export const SQL_CN_NONE = 0;
export const SQL_CN_DIFFERENT = 1;
export const SQL_CN_ANY = 2;
export const SQL_NNC_NULL = 0;
export const SQL_NNC_NON_NULL = 1;
export const SQL_NC_START = 2;
export const SQL_NC_END = 4;
export const SQL_FILE_NOT_SUPPORTED = 0;
export const SQL_FILE_TABLE = 1;
export const SQL_FILE_QUALIFIER = 2;
export const SQL_FILE_CATALOG = 2;
export const SQL_GD_BLOCK = 4;
export const SQL_GD_BOUND = 8;
export const SQL_GD_OUTPUT_PARAMS = 16;
export const SQL_PS_POSITIONED_DELETE = 1;
export const SQL_PS_POSITIONED_UPDATE = 2;
export const SQL_PS_SELECT_FOR_UPDATE = 4;
export const SQL_GB_NOT_SUPPORTED = 0;
export const SQL_GB_GROUP_BY_EQUALS_SELECT = 1;
export const SQL_GB_GROUP_BY_CONTAINS_SELECT = 2;
export const SQL_GB_NO_RELATION = 3;
export const SQL_GB_COLLATE = 4;
export const SQL_OU_DML_STATEMENTS = 1;
export const SQL_OU_PROCEDURE_INVOCATION = 2;
export const SQL_OU_TABLE_DEFINITION = 4;
export const SQL_OU_INDEX_DEFINITION = 8;
export const SQL_OU_PRIVILEGE_DEFINITION = 16;
export const SQL_SU_DML_STATEMENTS = 1;
export const SQL_SU_PROCEDURE_INVOCATION = 2;
export const SQL_SU_TABLE_DEFINITION = 4;
export const SQL_SU_INDEX_DEFINITION = 8;
export const SQL_SU_PRIVILEGE_DEFINITION = 16;
export const SQL_QU_DML_STATEMENTS = 1;
export const SQL_QU_PROCEDURE_INVOCATION = 2;
export const SQL_QU_TABLE_DEFINITION = 4;
export const SQL_QU_INDEX_DEFINITION = 8;
export const SQL_QU_PRIVILEGE_DEFINITION = 16;
export const SQL_CU_DML_STATEMENTS = 1;
export const SQL_CU_PROCEDURE_INVOCATION = 2;
export const SQL_CU_TABLE_DEFINITION = 4;
export const SQL_CU_INDEX_DEFINITION = 8;
export const SQL_CU_PRIVILEGE_DEFINITION = 16;
export const SQL_SQ_COMPARISON = 1;
export const SQL_SQ_EXISTS = 2;
export const SQL_SQ_IN = 4;
export const SQL_SQ_QUANTIFIED = 8;
export const SQL_SQ_CORRELATED_SUBQUERIES = 16;
export const SQL_U_UNION = 1;
export const SQL_U_UNION_ALL = 2;
export const SQL_BP_CLOSE = 1;
export const SQL_BP_DELETE = 2;
export const SQL_BP_DROP = 4;
export const SQL_BP_TRANSACTION = 8;
export const SQL_BP_UPDATE = 16;
export const SQL_BP_OTHER_HSTMT = 32;
export const SQL_BP_SCROLL = 64;
export const SQL_SS_ADDITIONS = 1;
export const SQL_SS_DELETIONS = 2;
export const SQL_SS_UPDATES = 4;
export const SQL_CV_CREATE_VIEW = 1;
export const SQL_CV_CHECK_OPTION = 2;
export const SQL_CV_CASCADED = 4;
export const SQL_CV_LOCAL = 8;
export const SQL_LCK_NO_CHANGE = 1;
export const SQL_LCK_EXCLUSIVE = 2;
export const SQL_LCK_UNLOCK = 4;
export const SQL_POS_POSITION = 1;
export const SQL_POS_REFRESH = 2;
export const SQL_POS_UPDATE = 4;
export const SQL_POS_DELETE = 8;
export const SQL_POS_ADD = 16;
export const SQL_QL_START = 1;
export const SQL_QL_END = 2;
export const SQL_AF_AVG = 1;
export const SQL_AF_COUNT = 2;
export const SQL_AF_MAX = 4;
export const SQL_AF_MIN = 8;
export const SQL_AF_SUM = 16;
export const SQL_AF_DISTINCT = 32;
export const SQL_AF_ALL = 64;
export const SQL_SC_SQL92_ENTRY = 1;
export const SQL_SC_FIPS127_2_TRANSITIONAL = 2;
export const SQL_SC_SQL92_INTERMEDIATE = 4;
export const SQL_SC_SQL92_FULL = 8;
export const SQL_DL_SQL92_DATE = 1;
export const SQL_DL_SQL92_TIME = 2;
export const SQL_DL_SQL92_TIMESTAMP = 4;
export const SQL_DL_SQL92_INTERVAL_YEAR = 8;
export const SQL_DL_SQL92_INTERVAL_MONTH = 16;
export const SQL_DL_SQL92_INTERVAL_DAY = 32;
export const SQL_DL_SQL92_INTERVAL_HOUR = 64;
export const SQL_DL_SQL92_INTERVAL_MINUTE = 128;
export const SQL_DL_SQL92_INTERVAL_SECOND = 256;
export const SQL_DL_SQL92_INTERVAL_YEAR_TO_MONTH = 512;
export const SQL_DL_SQL92_INTERVAL_DAY_TO_HOUR = 1024;
export const SQL_DL_SQL92_INTERVAL_DAY_TO_MINUTE = 2048;
export const SQL_DL_SQL92_INTERVAL_DAY_TO_SECOND = 4096;
export const SQL_DL_SQL92_INTERVAL_HOUR_TO_MINUTE = 8192;
export const SQL_DL_SQL92_INTERVAL_HOUR_TO_SECOND = 16384;
export const SQL_DL_SQL92_INTERVAL_MINUTE_TO_SECOND = 32768;
export const SQL_CL_START = 1;
export const SQL_CL_END = 2;
export const SQL_BRC_PROCEDURES = 1;
export const SQL_BRC_EXPLICIT = 2;
export const SQL_BRC_ROLLED_UP = 4;
export const SQL_BS_SELECT_EXPLICIT = 1;
export const SQL_BS_ROW_COUNT_EXPLICIT = 2;
export const SQL_BS_SELECT_PROC = 4;
export const SQL_BS_ROW_COUNT_PROC = 8;
export const SQL_PARC_BATCH = 1;
export const SQL_PARC_NO_BATCH = 2;
export const SQL_PAS_BATCH = 1;
export const SQL_PAS_NO_BATCH = 2;
export const SQL_PAS_NO_SELECT = 3;
export const SQL_IK_NONE = 0;
export const SQL_IK_ASC = 1;
export const SQL_IK_DESC = 2;
export const SQL_ISV_ASSERTIONS = 1;
export const SQL_ISV_CHARACTER_SETS = 2;
export const SQL_ISV_CHECK_CONSTRAINTS = 4;
export const SQL_ISV_COLLATIONS = 8;
export const SQL_ISV_COLUMN_DOMAIN_USAGE = 16;
export const SQL_ISV_COLUMN_PRIVILEGES = 32;
export const SQL_ISV_COLUMNS = 64;
export const SQL_ISV_CONSTRAINT_COLUMN_USAGE = 128;
export const SQL_ISV_CONSTRAINT_TABLE_USAGE = 256;
export const SQL_ISV_DOMAIN_CONSTRAINTS = 512;
export const SQL_ISV_DOMAINS = 1024;
export const SQL_ISV_KEY_COLUMN_USAGE = 2048;
export const SQL_ISV_REFERENTIAL_CONSTRAINTS = 4096;
export const SQL_ISV_SCHEMATA = 8192;
export const SQL_ISV_SQL_LANGUAGES = 16384;
export const SQL_ISV_TABLE_CONSTRAINTS = 32768;
export const SQL_ISV_TABLE_PRIVILEGES = 65536;
export const SQL_ISV_TABLES = 131072;
export const SQL_ISV_TRANSLATIONS = 262144;
export const SQL_ISV_USAGE_PRIVILEGES = 524288;
export const SQL_ISV_VIEW_COLUMN_USAGE = 1048576;
export const SQL_ISV_VIEW_TABLE_USAGE = 2097152;
export const SQL_ISV_VIEWS = 4194304;
export const SQL_AD_CONSTRAINT_NAME_DEFINITION = 1;
export const SQL_AD_ADD_DOMAIN_CONSTRAINT = 2;
export const SQL_AD_DROP_DOMAIN_CONSTRAINT = 4;
export const SQL_AD_ADD_DOMAIN_DEFAULT = 8;
export const SQL_AD_DROP_DOMAIN_DEFAULT = 16;
export const SQL_AD_ADD_CONSTRAINT_INITIALLY_DEFERRED = 32;
export const SQL_AD_ADD_CONSTRAINT_INITIALLY_IMMEDIATE = 64;
export const SQL_AD_ADD_CONSTRAINT_DEFERRABLE = 128;
export const SQL_AD_ADD_CONSTRAINT_NON_DEFERRABLE = 256;
export const SQL_CS_CREATE_SCHEMA = 1;
export const SQL_CS_AUTHORIZATION = 2;
export const SQL_CS_DEFAULT_CHARACTER_SET = 4;
export const SQL_CTR_CREATE_TRANSLATION = 1;
export const SQL_CA_CREATE_ASSERTION = 1;
export const SQL_CA_CONSTRAINT_INITIALLY_DEFERRED = 16;
export const SQL_CA_CONSTRAINT_INITIALLY_IMMEDIATE = 32;
export const SQL_CA_CONSTRAINT_DEFERRABLE = 64;
export const SQL_CA_CONSTRAINT_NON_DEFERRABLE = 128;
export const SQL_CCS_CREATE_CHARACTER_SET = 1;
export const SQL_CCS_COLLATE_CLAUSE = 2;
export const SQL_CCS_LIMITED_COLLATION = 4;
export const SQL_CCOL_CREATE_COLLATION = 1;
export const SQL_CDO_CREATE_DOMAIN = 1;
export const SQL_CDO_DEFAULT = 2;
export const SQL_CDO_CONSTRAINT = 4;
export const SQL_CDO_COLLATION = 8;
export const SQL_CDO_CONSTRAINT_NAME_DEFINITION = 16;
export const SQL_CDO_CONSTRAINT_INITIALLY_DEFERRED = 32;
export const SQL_CDO_CONSTRAINT_INITIALLY_IMMEDIATE = 64;
export const SQL_CDO_CONSTRAINT_DEFERRABLE = 128;
export const SQL_CDO_CONSTRAINT_NON_DEFERRABLE = 256;
export const SQL_CT_CREATE_TABLE = 1;
export const SQL_CT_COMMIT_PRESERVE = 2;
export const SQL_CT_COMMIT_DELETE = 4;
export const SQL_CT_GLOBAL_TEMPORARY = 8;
export const SQL_CT_LOCAL_TEMPORARY = 16;
export const SQL_CT_CONSTRAINT_INITIALLY_DEFERRED = 32;
export const SQL_CT_CONSTRAINT_INITIALLY_IMMEDIATE = 64;
export const SQL_CT_CONSTRAINT_DEFERRABLE = 128;
export const SQL_CT_CONSTRAINT_NON_DEFERRABLE = 256;
export const SQL_CT_COLUMN_CONSTRAINT = 512;
export const SQL_CT_COLUMN_DEFAULT = 1024;
export const SQL_CT_COLUMN_COLLATION = 2048;
export const SQL_CT_TABLE_CONSTRAINT = 4096;
export const SQL_CT_CONSTRAINT_NAME_DEFINITION = 8192;
export const SQL_DI_CREATE_INDEX = 1;
export const SQL_DI_DROP_INDEX = 2;
export const SQL_DC_DROP_COLLATION = 1;
export const SQL_DD_DROP_DOMAIN = 1;
export const SQL_DD_RESTRICT = 2;
export const SQL_DD_CASCADE = 4;
export const SQL_DS_DROP_SCHEMA = 1;
export const SQL_DS_RESTRICT = 2;
export const SQL_DS_CASCADE = 4;
export const SQL_DCS_DROP_CHARACTER_SET = 1;
export const SQL_DA_DROP_ASSERTION = 1;
export const SQL_DT_DROP_TABLE = 1;
export const SQL_DT_RESTRICT = 2;
export const SQL_DT_CASCADE = 4;
export const SQL_DTR_DROP_TRANSLATION = 1;
export const SQL_DV_DROP_VIEW = 1;
export const SQL_DV_RESTRICT = 2;
export const SQL_DV_CASCADE = 4;
export const SQL_IS_INSERT_LITERALS = 1;
export const SQL_IS_INSERT_SEARCHED = 2;
export const SQL_IS_SELECT_INTO = 4;
export const SQL_OIC_CORE = 1;
export const SQL_OIC_LEVEL1 = 2;
export const SQL_OIC_LEVEL2 = 3;
export const SQL_SFKD_CASCADE = 1;
export const SQL_SFKD_NO_ACTION = 2;
export const SQL_SFKD_SET_DEFAULT = 4;
export const SQL_SFKD_SET_NULL = 8;
export const SQL_SFKU_CASCADE = 1;
export const SQL_SFKU_NO_ACTION = 2;
export const SQL_SFKU_SET_DEFAULT = 4;
export const SQL_SFKU_SET_NULL = 8;
export const SQL_SG_USAGE_ON_DOMAIN = 1;
export const SQL_SG_USAGE_ON_CHARACTER_SET = 2;
export const SQL_SG_USAGE_ON_COLLATION = 4;
export const SQL_SG_USAGE_ON_TRANSLATION = 8;
export const SQL_SG_WITH_GRANT_OPTION = 16;
export const SQL_SG_DELETE_TABLE = 32;
export const SQL_SG_INSERT_TABLE = 64;
export const SQL_SG_INSERT_COLUMN = 128;
export const SQL_SG_REFERENCES_TABLE = 256;
export const SQL_SG_REFERENCES_COLUMN = 512;
export const SQL_SG_SELECT_TABLE = 1024;
export const SQL_SG_UPDATE_TABLE = 2048;
export const SQL_SG_UPDATE_COLUMN = 4096;
export const SQL_SP_EXISTS = 1;
export const SQL_SP_ISNOTNULL = 2;
export const SQL_SP_ISNULL = 4;
export const SQL_SP_MATCH_FULL = 8;
export const SQL_SP_MATCH_PARTIAL = 16;
export const SQL_SP_MATCH_UNIQUE_FULL = 32;
export const SQL_SP_MATCH_UNIQUE_PARTIAL = 64;
export const SQL_SP_OVERLAPS = 128;
export const SQL_SP_UNIQUE = 256;
export const SQL_SP_LIKE = 512;
export const SQL_SP_IN = 1024;
export const SQL_SP_BETWEEN = 2048;
export const SQL_SP_COMPARISON = 4096;
export const SQL_SP_QUANTIFIED_COMPARISON = 8192;
export const SQL_SRJO_CORRESPONDING_CLAUSE = 1;
export const SQL_SRJO_CROSS_JOIN = 2;
export const SQL_SRJO_EXCEPT_JOIN = 4;
export const SQL_SRJO_FULL_OUTER_JOIN = 8;
export const SQL_SRJO_INNER_JOIN = 16;
export const SQL_SRJO_INTERSECT_JOIN = 32;
export const SQL_SRJO_LEFT_OUTER_JOIN = 64;
export const SQL_SRJO_NATURAL_JOIN = 128;
export const SQL_SRJO_RIGHT_OUTER_JOIN = 256;
export const SQL_SRJO_UNION_JOIN = 512;
export const SQL_SR_USAGE_ON_DOMAIN = 1;
export const SQL_SR_USAGE_ON_CHARACTER_SET = 2;
export const SQL_SR_USAGE_ON_COLLATION = 4;
export const SQL_SR_USAGE_ON_TRANSLATION = 8;
export const SQL_SR_GRANT_OPTION_FOR = 16;
export const SQL_SR_CASCADE = 32;
export const SQL_SR_RESTRICT = 64;
export const SQL_SR_DELETE_TABLE = 128;
export const SQL_SR_INSERT_TABLE = 256;
export const SQL_SR_INSERT_COLUMN = 512;
export const SQL_SR_REFERENCES_TABLE = 1024;
export const SQL_SR_REFERENCES_COLUMN = 2048;
export const SQL_SR_SELECT_TABLE = 4096;
export const SQL_SR_UPDATE_TABLE = 8192;
export const SQL_SR_UPDATE_COLUMN = 16384;
export const SQL_SRVC_VALUE_EXPRESSION = 1;
export const SQL_SRVC_NULL = 2;
export const SQL_SRVC_DEFAULT = 4;
export const SQL_SRVC_ROW_SUBQUERY = 8;
export const SQL_SVE_CASE = 1;
export const SQL_SVE_CAST = 2;
export const SQL_SVE_COALESCE = 4;
export const SQL_SVE_NULLIF = 8;
export const SQL_SCC_XOPEN_CLI_VERSION1 = 1;
export const SQL_SCC_ISO92_CLI = 2;
export const SQL_US_UNION = 1;
export const SQL_US_UNION_ALL = 2;
export const SQL_DRIVER_AWARE_POOLING_NOT_CAPABLE = 0;
export const SQL_DRIVER_AWARE_POOLING_CAPABLE = 1;
export const SQL_DTC_ENLIST_EXPENSIVE = 1;
export const SQL_DTC_UNENLIST_EXPENSIVE = 2;
export const SQL_ASYNC_DBC_NOT_CAPABLE = 0;
export const SQL_ASYNC_DBC_CAPABLE = 1;
export const SQL_FETCH_FIRST_USER = 31;
export const SQL_FETCH_FIRST_SYSTEM = 32;
export const SQL_ENTIRE_ROWSET = 0;
export const SQL_POSITION = 0;
export const SQL_REFRESH = 1;
export const SQL_UPDATE = 2;
export const SQL_DELETE = 3;
export const SQL_ADD = 4;
export const SQL_SETPOS_MAX_OPTION_VALUE = 4;
export const SQL_UPDATE_BY_BOOKMARK = 5;
export const SQL_DELETE_BY_BOOKMARK = 6;
export const SQL_FETCH_BY_BOOKMARK = 7;
export const SQL_LOCK_NO_CHANGE = 0;
export const SQL_LOCK_EXCLUSIVE = 1;
export const SQL_LOCK_UNLOCK = 2;
export const SQL_SETPOS_MAX_LOCK_VALUE = 2;
export const SQL_BEST_ROWID = 1;
export const SQL_ROWVER = 2;
export const SQL_PC_NOT_PSEUDO = 1;
export const SQL_QUICK = 0;
export const SQL_ENSURE = 1;
export const SQL_TABLE_STAT = 0;
export const SQL_ALL_CATALOGS = `%`;
export const SQL_ALL_SCHEMAS = `%`;
export const SQL_ALL_TABLE_TYPES = `%`;
export const SQL_DRIVER_NOPROMPT = 0;
export const SQL_DRIVER_COMPLETE = 1;
export const SQL_DRIVER_PROMPT = 2;
export const SQL_DRIVER_COMPLETE_REQUIRED = 3;
export const SQL_FETCH_BOOKMARK = 8;
export const SQL_ROW_SUCCESS = 0;
export const SQL_ROW_DELETED = 1;
export const SQL_ROW_UPDATED = 2;
export const SQL_ROW_NOROW = 3;
export const SQL_ROW_ADDED = 4;
export const SQL_ROW_ERROR = 5;
export const SQL_ROW_SUCCESS_WITH_INFO = 6;
export const SQL_ROW_PROCEED = 0;
export const SQL_ROW_IGNORE = 1;
export const SQL_PARAM_SUCCESS = 0;
export const SQL_PARAM_SUCCESS_WITH_INFO = 6;
export const SQL_PARAM_ERROR = 5;
export const SQL_PARAM_UNUSED = 7;
export const SQL_PARAM_DIAG_UNAVAILABLE = 1;
export const SQL_PARAM_PROCEED = 0;
export const SQL_PARAM_IGNORE = 1;
export const SQL_CASCADE = 0;
export const SQL_RESTRICT = 1;
export const SQL_SET_NULL = 2;
export const SQL_NO_ACTION = 3;
export const SQL_SET_DEFAULT = 4;
export const SQL_INITIALLY_DEFERRED = 5;
export const SQL_INITIALLY_IMMEDIATE = 6;
export const SQL_NOT_DEFERRABLE = 7;
export const SQL_PARAM_TYPE_UNKNOWN = 0;
export const SQL_PARAM_INPUT = 1;
export const SQL_PARAM_INPUT_OUTPUT = 2;
export const SQL_RESULT_COL = 3;
export const SQL_PARAM_OUTPUT = 4;
export const SQL_RETURN_VALUE = 5;
export const SQL_PARAM_INPUT_OUTPUT_STREAM = 8;
export const SQL_PARAM_OUTPUT_STREAM = 16;
export const SQL_PT_UNKNOWN = 0;
export const SQL_PT_PROCEDURE = 1;
export const SQL_PT_FUNCTION = 2;
export const SQL_ODBC_KEYWORDS = `ABSOLUTE,ACTION,ADA,ADD,ALL,ALLOCATE,ALTER,AND,ANY,ARE,AS,ASC,ASSERTION,AT,AUTHORIZATION,AVG,BEGIN,BETWEEN,BIT,BIT_LENGTH,BOTH,BY,CASCADE,CASCADED,CASE,CAST,CATALOG,CHAR,CHAR_LENGTH,CHARACTER,CHARACTER_LENGTH,CHECK,CLOSE,COALESCE,COLLATE,COLLATION,COLUMN,COMMIT,CONNECT,CONNECTION,CONSTRAINT,CONSTRAINTS,CONTINUE,CONVERT,CORRESPONDING,COUNT,CREATE,CROSS,CURRENT,CURRENT_DATE,CURRENT_TIME,CURRENT_TIMESTAMP,CURRENT_USER,CURSOR,DATE,DAY,DEALLOCATE,DEC,DECIMAL,DECLARE,DEFAULT,DEFERRABLE,DEFERRED,DELETE,DESC,DESCRIBE,DESCRIPTOR,DIAGNOSTICS,DISCONNECT,DISTINCT,DOMAIN,DOUBLE,DROP,ELSE,END,END-EXEC,ESCAPE,EXCEPT,EXCEPTION,EXEC,EXECUTE,EXISTS,EXTERNAL,EXTRACT,FALSE,FETCH,FIRST,FLOAT,FOR,FOREIGN,FORTRAN,FOUND,FROM,FULL,GET,GLOBAL,GO,GOTO,GRANT,GROUP,HAVING,HOUR,IDENTITY,IMMEDIATE,IN,INCLUDE,INDEX,INDICATOR,INITIALLY,INNER,INPUT,INSENSITIVE,INSERT,INT,INTEGER,INTERSECT,INTERVAL,INTO,IS,ISOLATION,JOIN,KEY,LANGUAGE,LAST,LEADING,LEFT,LEVEL,LIKE,LOCAL,LOWER,MATCH,MAX,MIN,MINUTE,MODULE,MONTH,NAMES,NATIONAL,NATURAL,NCHAR,NEXT,NO,NONE,NOT,NULL,NULLIF,NUMERIC,OCTET_LENGTH,OF,ON,ONLY,OPEN,OPTION,OR,ORDER,OUTER,OUTPUT,OVERLAPS,PAD,PARTIAL,PASCAL,PLI,POSITION,PRECISION,PREPARE,PRESERVE,PRIMARY,PRIOR,PRIVILEGES,PROCEDURE,PUBLIC,READ,REAL,REFERENCES,RELATIVE,RESTRICT,REVOKE,RIGHT,ROLLBACK,ROWSSCHEMA,SCROLL,SECOND,SECTION,SELECT,SESSION,SESSION_USER,SET,SIZE,SMALLINT,SOME,SPACE,SQL,SQLCA,SQLCODE,SQLERROR,SQLSTATE,SQLWARNING,SUBSTRING,SUM,SYSTEM_USER,TABLE,TEMPORARY,THEN,TIME,TIMESTAMP,TIMEZONE_HOUR,TIMEZONE_MINUTE,TO,TRAILING,TRANSACTION,TRANSLATE,TRANSLATION,TRIM,TRUE,UNION,UNIQUE,UNKNOWN,UPDATE,UPPER,USAGE,USER,USING,VALUE,VALUES,VARCHAR,VARYING,VIEW,WHEN,WHENEVER,WHERE,WITH,WORK,WRITE,YEAR,ZONE`;
export const SQL_YEAR = 1;
export const SQL_MONTH = 2;
export const SQL_DAY = 3;
export const SQL_HOUR = 4;
export const SQL_MINUTE = 5;
export const SQL_SECOND = 6;
export const SQL_YEAR_TO_MONTH = 7;
export const SQL_DAY_TO_HOUR = 8;
export const SQL_DAY_TO_MINUTE = 9;
export const SQL_DAY_TO_SECOND = 10;
export const SQL_HOUR_TO_MINUTE = 11;
export const SQL_HOUR_TO_SECOND = 12;
export const SQL_MINUTE_TO_SECOND = 13;
export const SQL_DATABASE_NAME = 16;
export const SQL_FD_FETCH_PREV = 8;
export const SQL_FETCH_PREV = 4;
export const SQL_CONCUR_TIMESTAMP = 3;
export const SQL_SCCO_OPT_TIMESTAMP = 4;
export const SQL_CC_DELETE = 0;
export const SQL_CR_DELETE = 0;
export const SQL_CC_CLOSE = 1;
export const SQL_CR_CLOSE = 1;
export const SQL_CC_PRESERVE = 2;
export const SQL_CR_PRESERVE = 2;
export const SQL_FETCH_RESUME = 7;
export const SQL_SCROLL_FORWARD_ONLY = 0;
export const SQL_SCROLL_KEYSET_DRIVEN = `-1`;
export const SQL_SCROLL_DYNAMIC = `-2`;
export const SQL_SCROLL_STATIC = `-3`;
export const TRACE_VERSION = 1000;
export const TRACE_ON = 1;
export const TRACE_VS_EVENT_ON = 2;
export const ODBC_VS_FLAG_UNICODE_ARG = 1;
export const ODBC_VS_FLAG_UNICODE_COR = 2;
export const ODBC_VS_FLAG_RETCODE = 4;
export const ODBC_VS_FLAG_STOP = 8;
export const CRESTRICTIONS_DBSCHEMA_LINKEDSERVERS = 1;
export const SSPROP_ENABLEFASTLOAD = 2;
export const SSPROP_UNICODELCID = 2;
export const SSPROP_UNICODECOMPARISONSTYLE = 3;
export const SSPROP_COLUMNLEVELCOLLATION = 4;
export const SSPROP_CHARACTERSET = 5;
export const SSPROP_SORTORDER = 6;
export const SSPROP_CURRENTCOLLATION = 7;
export const SSPROP_INIT_CURRENTLANGUAGE = 4;
export const SSPROP_INIT_NETWORKADDRESS = 5;
export const SSPROP_INIT_NETWORKLIBRARY = 6;
export const SSPROP_INIT_USEPROCFORPREP = 7;
export const SSPROP_INIT_AUTOTRANSLATE = 8;
export const SSPROP_INIT_PACKETSIZE = 9;
export const SSPROP_INIT_APPNAME = 10;
export const SSPROP_INIT_WSID = 11;
export const SSPROP_INIT_FILENAME = 12;
export const SSPROP_INIT_ENCRYPT = 13;
export const SSPROP_AUTH_REPL_SERVER_NAME = 14;
export const SSPROP_INIT_TAGCOLUMNCOLLATION = 15;
export const SSPROPVAL_USEPROCFORPREP_OFF = 0;
export const SSPROPVAL_USEPROCFORPREP_ON = 1;
export const SSPROPVAL_USEPROCFORPREP_ON_DROP = 2;
export const SSPROP_QUOTEDCATALOGNAMES = 2;
export const SSPROP_ALLOWNATIVEVARIANT = 3;
export const SSPROP_SQLXMLXPROGID = 4;
export const SSPROP_MAXBLOBLENGTH = 8;
export const SSPROP_FASTLOADOPTIONS = 9;
export const SSPROP_FASTLOADKEEPNULLS = 10;
export const SSPROP_FASTLOADKEEPIDENTITY = 11;
export const SSPROP_CURSORAUTOFETCH = 12;
export const SSPROP_DEFERPREPARE = 13;
export const SSPROP_IRowsetFastLoad = 14;
export const SSPROP_COL_COLLATIONNAME = 14;
export const SSPROP_STREAM_MAPPINGSCHEMA = 15;
export const SSPROP_STREAM_XSL = 16;
export const SSPROP_STREAM_BASEPATH = 17;
export const SSPROP_STREAM_COMMANDTYPE = 18;
export const SSPROP_STREAM_XMLROOT = 19;
export const SSPROP_STREAM_FLAGS = 20;
export const SSPROP_STREAM_CONTENTTYPE = 23;
export const STREAM_FLAGS_DISALLOW_URL = 1;
export const STREAM_FLAGS_DISALLOW_ABSOLUTE_PATH = 2;
export const STREAM_FLAGS_DISALLOW_QUERY = 4;
export const STREAM_FLAGS_DONTCACHEMAPPINGSCHEMA = 8;
export const STREAM_FLAGS_DONTCACHETEMPLATE = 16;
export const STREAM_FLAGS_DONTCACHEXSL = 32;
export const STREAM_FLAGS_DISALLOW_UPDATEGRAMS = 64;
export const STREAM_FLAGS_RESERVED = 4294901760;
export const SSPROPVAL_COMMANDTYPE_REGULAR = 21;
export const SSPROPVAL_COMMANDTYPE_BULKLOAD = 22;
export const DBTYPE_SQLVARIANT = 144;
export const SQL_HANDLE_DBC_INFO_TOKEN = 6;
export const SQL_CONN_POOL_RATING_BEST = 100;
export const SQL_CONN_POOL_RATING_GOOD_ENOUGH = 99;
export const SQL_CONN_POOL_RATING_USELESS = 0;
export const SQL_ATTR_DBC_INFO_TOKEN = 118;
export const SQL_ATTR_ASYNC_DBC_NOTIFICATION_CALLBACK = 120;
export const SQL_ATTR_ASYNC_DBC_NOTIFICATION_CONTEXT = 121;
export const SQL_ATTR_ASYNC_STMT_NOTIFICATION_CALLBACK = 30;
export const SQL_ATTR_ASYNC_STMT_NOTIFICATION_CONTEXT = 31;
export const SQL_MAX_NUMERIC_LEN = 16;
export const SQL_WCHAR = `-8`;
export const SQL_WVARCHAR = `-9`;
export const SQL_WLONGVARCHAR = `-10`;
export const SQL_C_WCHAR = `-8`;
export const SQL_C_TCHAR = `-8`;
export const SQL_SQLSTATE_SIZEW = 10;
export const CSTORAGEPROPERTY = 23;
export const CATEGORY_SEARCH = 1;
export const CATEGORY_COLLATOR = 2;
export const CATEGORY_GATHERER = 3;
export const CATEGORY_INDEXER = 4;
export const EVENT_SSSEARCH_STARTED = 1073742827;
export const EVENT_SSSEARCH_STARTING_SETUP = 1073742828;
export const EVENT_SSSEARCH_SETUP_SUCCEEDED = 1073742829;
export const EVENT_SSSEARCH_SETUP_FAILED = `-1073740818`;
export const EVENT_OUTOFMEMORY = `-1073740817`;
export const EVENT_SSSEARCH_SETUP_CLEANUP_STARTED = `-2147482640`;
export const EVENT_EXCEPTION = `-1073740815`;
export const EVENT_SSSEARCH_SETUP_CLEANUP_SUCCEEDED = 1073742834;
export const EVENT_SSSEARCH_SETUP_CLEANUP_FAILED = `-1073740813`;
export const EVENT_SSSEARCH_STOPPED = 1073742837;
export const EVENT_SSSEARCH_CREATE_PATH_RULES_FAILED = `-2147482634`;
export const EVENT_SSSEARCH_DROPPED_EVENTS = `-2147482633`;
export const EVENT_SSSEARCH_DATAFILES_MOVE_FAILED = `-1073740808`;
export const EVENT_SSSEARCH_DATAFILES_MOVE_SUCCEEDED = 1073742841;
export const EVENT_SSSEARCH_DATAFILES_MOVE_ROLLBACK_ERRORS = `-2147482630`;
export const EVENT_SSSEARCH_CSM_SAVE_FAILED = `-1073740805`;
export const EVENT_CONFIG_SYNTAX = `-2147482604`;
export const EVENT_UNPRIVILEGED_SERVICE_ACCOUNT = `-2147482596`;
export const EVENT_SYSTEM_EXCEPTION = `-2147482595`;
export const EVENT_CONFIG_ERROR = `-1073738821`;
export const EVENT_GATHERSVC_PERFMON = `-1073738818`;
export const EVENT_GATHERER_PERFMON = `-1073738817`;
export const EVENT_HASHMAP_INSERT = `-1073738816`;
export const EVENT_TRANSLOG_CREATE_TRX = `-1073738815`;
export const EVENT_TRANSLOG_APPEND = `-1073738814`;
export const EVENT_TRANSLOG_UPDATE = `-1073738813`;
export const EVENT_HASHMAP_UPDATE = `-1073738811`;
export const EVENT_GATHER_EXCEPTION = `-1073738810`;
export const EVENT_TRANSACTION_READ = `-1073738809`;
export const EVENT_GATHER_END_CRAWL = 1073744842;
export const EVENT_GATHER_START_CRAWL = 1073744843;
export const EVENT_GATHER_INTERNAL = `-1073738804`;
export const EVENT_GATHER_CRAWL_NOT_STARTED = `-2147480625`;
export const EVENT_GATHER_CRAWL_SEED_ERROR = `-2147480624`;
export const EVENT_GATHER_CRITICAL_ERROR = `-1073738799`;
export const EVENT_GATHER_ADVISE_FAILED = `-1073738798`;
export const EVENT_GATHER_TRANSACTION_FAIL = `-1073738797`;
export const EVENT_GATHER_OBJ_INIT_FAILED = `-1073738796`;
export const EVENT_GATHER_PLUGIN_INIT_FAILED = `-1073738795`;
export const EVENT_GATHER_SERVICE_INIT = `-1073738794`;
export const EVENT_GATHER_CANT_CREATE_DOCID = `-1073738793`;
export const EVENT_GATHER_CANT_DELETE_DOCID = `-1073738792`;
export const EVENT_TRANSLOG_CREATE = `-1073738791`;
export const EVENT_REG_VERSION = `-1073738790`;
export const EVENT_GATHER_CRAWL_SEED_FAILED = `-2147480612`;
export const EVENT_GATHER_CRAWL_SEED_FAILED_INIT = `-2147480611`;
export const EVENT_GATHER_REG_MISSING = `-2147480610`;
export const EVENT_GATHER_CRAWL_IN_PROGRESS = `-2147480609`;
export const EVENT_GATHER_LOCK_FAILED = `-1073738784`;
export const EVENT_GATHER_RESET_START = 1073744865;
export const EVENT_GATHER_START_PAUSE = `-2147480606`;
export const EVENT_GATHER_THROTTLE = 1073744867;
export const EVENT_GATHER_RESUME = 1073744868;
export const EVENT_GATHER_AUTODESCLEN_ADJUSTED = `-2147480603`;
export const EVENT_GATHER_NO_CRAWL_SEEDS = `-2147480602`;
export const EVENT_GATHER_END_INCREMENTAL = 1073744871;
export const EVENT_GATHER_FROM_NOT_SET = `-1073738776`;
export const EVENT_GATHER_DELETING_HISTORY_ITEMS = `-1073738774`;
export const EVENT_GATHER_STOP_START = 1073744876;
export const EVENT_GATHER_START_CRAWL_IF_RESET = `-2147480595`;
export const EVENT_GATHER_DISK_FULL = `-2147480594`;
export const EVENT_GATHER_NO_SCHEMA = `-2147480593`;
export const EVENT_GATHER_AUTODESCENCODE_INVALID = `-2147480592`;
export const EVENT_GATHER_PLUGINMGR_INIT_FAILED = `-1073738767`;
export const EVENT_GATHER_APP_INIT_FAILED = `-1073738766`;
export const EVENT_FAILED_INITIALIZE_CRAWL = `-1073738765`;
export const EVENT_CRAWL_SCHEDULED = 1073744884;
export const EVENT_FAILED_CREATE_GATHERER_LOG = `-2147480587`;
export const EVENT_WBREAKER_NOT_LOADED = `-2147480586`;
export const EVENT_LEARN_PROPAGATION_COPY_FAILED = `-2147480585`;
export const EVENT_LEARN_CREATE_DB_FAILED = `-2147480584`;
export const EVENT_LEARN_COMPILE_FAILED = `-2147480583`;
export const EVENT_LEARN_PROPAGATION_FAILED = `-2147480582`;
export const EVENT_GATHER_END_ADAPTIVE = 1073744891;
export const EVENT_USING_DIFFERENT_WORD_BREAKER = `-2147480580`;
export const EVENT_GATHER_RESTORE_COMPLETE = 3069;
export const EVENT_GATHER_RESTORE_ERROR = `-1073738754`;
export const EVENT_AUTOCAT_PERFMON = `-1073738753`;
export const EVENT_GATHER_DIRTY_STARTUP = `-2147480576`;
export const EVENT_GATHER_HISTORY_CORRUPTION_DETECTED = `-2147480575`;
export const EVENT_GATHER_RESTOREAPP_ERROR = `-1073738750`;
export const EVENT_GATHER_RESTOREAPP_COMPLETE = 3075;
export const EVENT_GATHER_BACKUPAPP_ERROR = `-1073738748`;
export const EVENT_GATHER_BACKUPAPP_COMPLETE = 3077;
export const EVENT_GATHER_DAEMON_TERMINATED = `-2147480570`;
export const EVENT_NOTIFICATION_FAILURE = `-1073738745`;
export const EVENT_NOTIFICATION_FAILURE_SCOPE_EXCEEDED_LOGGING = `-2147480568`;
export const EVENT_NOTIFICATION_RESTORED = 1073744905;
export const EVENT_NOTIFICATION_RESTORED_SCOPE_EXCEEDED_LOGGING = `-2147480566`;
export const EVENT_GATHER_PROTOCOLHANDLER_LOAD_FAILED = `-1073738741`;
export const EVENT_GATHER_PROTOCOLHANDLER_INIT_FAILED = `-1073738740`;
export const EVENT_GATHER_INVALID_NETWORK_ACCESS_ACCOUNT = `-1073738739`;
export const EVENT_GATHER_SYSTEM_LCID_CHANGED = `-2147480562`;
export const EVENT_GATHER_FLUSH_FAILED = `-1073738737`;
export const EVENT_GATHER_CHECKPOINT_FAILED = `-1073738736`;
export const EVENT_GATHER_SAVE_FAILED = `-1073738735`;
export const EVENT_GATHER_RESTORE_CHECKPOINT_FAILED = `-1073738734`;
export const EVENT_GATHER_READ_CHECKPOINT_FAILED = `-1073738733`;
export const EVENT_GATHER_CHECKPOINT_CORRUPT = `-1073738732`;
export const EVENT_GATHER_CHECKPOINT_FILE_MISSING = `-1073738731`;
export const EVENT_STS_INIT_SECURITY_FAILED = `-2147480554`;
export const EVENT_LOCAL_GROUP_NOT_EXPANDED = 1073744919;
export const EVENT_LOCAL_GROUPS_CACHE_FLUSHED = 1073744920;
export const EVENT_GATHERER_DATASOURCE = `-1073738727`;
export const EVENT_AUTOCAT_CANT_CREATE_FILE_SHARE = `-1073738726`;
export const EVENT_NOTIFICATION_THREAD_EXIT_FAILED = `-1073738725`;
export const EVENT_FILTER_HOST_NOT_INITIALIZED = `-1073738724`;
export const EVENT_FILTER_HOST_NOT_TERMINATED = `-1073738723`;
export const EVENT_FILTERPOOL_ADD_FAILED = `-1073738722`;
export const EVENT_FILTERPOOL_DELETE_FAILED = `-1073738721`;
export const EVENT_ENUMERATE_SESSIONS_FAILED = `-1073738720`;
export const EVENT_DETAILED_FILTERPOOL_ADD_FAILED = `-1073738719`;
export const EVENT_AUDIENCECOMPUTATION_CANNOTSTART = `-1073738223`;
export const EVENT_GATHER_RECOVERY_FAILURE = `-1073738222`;
export const EVENT_INDEXER_STARTED = 1073748824;
export const EVENT_INDEXER_SCHEMA_COPY_ERROR = `-1073734823`;
export const EVENT_INDEXER_INIT_ERROR = `-1073734814`;
export const EVENT_INDEXER_INVALID_DIRECTORY = `-1073734813`;
export const EVENT_INDEXER_PROP_ERROR = `-1073734812`;
export const EVENT_INDEXER_PAUSED_FOR_DISKFULL = `-1073734811`;
export const EVENT_INDEXER_PROP_STOPPED = `-2147476633`;
export const EVENT_INDEXER_PROP_SUCCEEDED = 7016;
export const EVENT_INDEXER_PROP_STARTED = 1073748841;
export const EVENT_INDEXER_NO_SEARCH_SERVERS = `-2147476630`;
export const EVENT_INDEXER_ADD_DSS_SUCCEEDED = 7019;
export const EVENT_INDEXER_REMOVE_DSS_SUCCEEDED = 7020;
export const EVENT_INDEXER_ADD_DSS_FAILED = `-2147476627`;
export const EVENT_INDEXER_REMOVE_DSS_FAILED = `-1073734801`;
export const EVENT_INDEXER_DSS_CONTACT_FAILED = `-1073734800`;
export const EVENT_INDEXER_BUILD_FAILED = `-1073734797`;
export const EVENT_INDEXER_REG_MISSING = `-1073734796`;
export const EVENT_INDEXER_PROPSTORE_INIT_FAILED = `-1073734787`;
export const EVENT_INDEXER_CI_LOAD_ERROR = `-1073734785`;
export const EVENT_INDEXER_RESET_FOR_CORRUPTION = `-1073734784`;
export const EVENT_INDEXER_SHUTDOWN = 1073748866;
export const EVENT_INDEXER_LOAD_FAIL = `-1073734781`;
export const EVENT_INDEXER_PROP_STATE_CORRUPT = `-1073734780`;
export const EVENT_INDEXER_DSS_ALREADY_ADDED = 1073748870;
export const EVENT_INDEXER_BUILD_START = 1073748872;
export const EVENT_INDEXER_BUILD_ENDED = 1073748873;
export const EVENT_INDEXER_VERIFY_PROP_ACCOUNT = `-1073734768`;
export const EVENT_INDEXER_ADD_DSS_DISCONNECT = `-2147476585`;
export const EVENT_INDEXER_PERFMON = `-1073734760`;
export const EVENT_INDEXER_MISSING_APP_DIRECTORY = `-1073734758`;
export const EVENT_INDEXER_REG_ERROR = `-1073734756`;
export const EVENT_INDEXER_DSS_UNABLE_TO_REMOVE = `-1073734755`;
export const EVENT_INDEXER_NEW_PROJECT = `-1073734754`;
export const EVENT_INDEXER_REMOVED_PROJECT = `-1073734753`;
export const EVENT_INDEXER_PROP_COMMITTED = 1073748898;
export const EVENT_INDEXER_PROP_ABORTED = 1073748899;
export const EVENT_DSS_NOT_ENABLED = `-2147476572`;
export const EVENT_INDEXER_PROP_COMMIT_FAILED = `-1073734747`;
export const JET_INIT_ERROR = `-1073732824`;
export const JET_NEW_PROP_STORE_ERROR = `-1073732823`;
export const JET_GET_PROP_STORE_ERROR = `-1073732822`;
export const JET_MULTIINSTANCE_DISABLED = `-2147474645`;
export const EVENT_WARNING_CANNOT_UPGRADE_NOISE_FILES = `-2147473635`;
export const EVENT_WARNING_CANNOT_UPGRADE_NOISE_FILE = `-2147473634`;
export const EVENT_WIN32_ERROR = `-2147473633`;
export const EVENT_PERF_COUNTERS_NOT_LOADED = `-2147473628`;
export const EVENT_PERF_COUNTERS_REGISTRY_TROUBLE = `-2147473627`;
export const EVENT_PERF_COUNTERS_ALREADY_EXISTS = `-2147473626`;
export const EVENT_PROTOCOL_HOST_FORCE_TERMINATE = `-2147473625`;
export const EVENT_FILTER_HOST_FORCE_TERMINATE = `-2147473624`;
export const EVENT_INDEXER_OUT_OF_DATABASE_INSTANCE = `-1073731799`;
export const EVENT_INDEXER_FAIL_TO_SET_MAX_JETINSTANCE = `-1073731798`;
export const EVENT_INDEXER_FAIL_TO_CREATE_PER_USER_CATALOG = `-1073731797`;
export const EVENT_INDEXER_FAIL_TO_UNLOAD_PER_USER_CATALOG = `-1073731796`;
export const ERROR_SOURCE_NETWORKING = 768;
export const ERROR_SOURCE_DATASOURCE = 1024;
export const ERROR_SOURCE_COLLATOR = 1280;
export const ERROR_SOURCE_CONNMGR = 1536;
export const ERROR_SOURCE_QUERY = 1792;
export const ERROR_SOURCE_SCHEMA = 3072;
export const ERROR_SOURCE_GATHERER = 3328;
export const ERROR_SOURCE_INDEXER = 4352;
export const ERROR_SOURCE_SETUP = 4864;
export const ERROR_SOURCE_SECURITY = 5120;
export const ERROR_SOURCE_CMDLINE = 5376;
export const ERROR_SOURCE_NLADMIN = 6400;
export const ERROR_SOURCE_SCRIPTPI = 8192;
export const ERROR_SOURCE_MSS = 8448;
export const ERROR_SOURCE_XML = 8704;
export const ERROR_SOURCE_DAV = 8960;
export const ERROR_SOURCE_FLTRDMN = 9216;
export const ERROR_SOURCE_OLEDB_BINDER = 9472;
export const ERROR_SOURCE_NOTESPH = 9728;
export const ERROR_SOURCE_EXSTOREPH = 9984;
export const ERROR_SOURCE_SRCH_SCHEMA_CACHE = 13056;
export const ERROR_SOURCE_CONTENT_SOURCE = 13312;
export const ERROR_SOURCE_REMOTE_EXSTOREPH = 13568;
export const ERROR_SOURCE_PEOPLE_IMPORT = 16384;
export const ERROR_FTE = 13824;
export const ERROR_FTE_CB = 51968;
export const ERROR_FTE_FD = 64768;
export const XML_E_NODEFAULTNS = `-2147212800`;
export const XML_E_BADSXQL = `-2147212799`;
export const MSS_E_INVALIDAPPNAME = `-2147213056`;
export const MSS_E_APPNOTFOUND = `-2147213055`;
export const MSS_E_APPALREADYEXISTS = `-2147213054`;
export const MSS_E_CATALOGNOTFOUND = `-2147213053`;
export const MSS_E_CATALOGSTOPPING = `-2147213052`;
export const MSS_E_UNICODEFILEHEADERMISSING = `-2147213051`;
export const MSS_E_CATALOGALREADYEXISTS = `-2147213050`;
export const NET_E_GENERAL = `-2147220736`;
export const NET_E_DISCONNECTED = `-2147220733`;
export const NET_E_INVALIDPARAMS = `-2147220728`;
export const NET_E_OPERATIONINPROGRESS = `-2147220727`;
export const SEC_E_INVALIDCONTEXT = `-2147216381`;
export const SEC_E_INITFAILED = `-2147216383`;
export const SEC_E_NOTINITIALIZED = `-2147216382`;
export const SEC_E_ACCESSDENIED = `-2147216129`;
export const DS_E_NOMOREDATA = `-2147220480`;
export const DS_E_INVALIDDATASOURCE = `-2147220479`;
export const DS_E_DATASOURCENOTAVAILABLE = `-2147220478`;
export const DS_E_QUERYCANCELED = `-2147220477`;
export const DS_E_UNKNOWNREQUEST = `-2147220476`;
export const DS_E_BADREQUEST = `-2147220475`;
export const DS_E_SERVERCAPACITY = `-2147220474`;
export const DS_E_BADSEQUENCE = `-2147220473`;
export const DS_E_MESSAGETOOLONG = `-2147220472`;
export const DS_E_SERVERERROR = `-2147220471`;
export const DS_E_CONFIGBAD = `-2147220470`;
export const DS_E_DATANOTPRESENT = `-2147220464`;
export const DS_E_SETSTATUSINPROGRESS = `-2147220463`;
export const DS_E_DUPLICATEID = `-2147220462`;
export const DS_E_TOOMANYDATASOURCES = `-2147220461`;
export const DS_E_REGISTRY = `-2147220460`;
export const DS_E_DATASOURCENOTDISABLED = `-2147220459`;
export const DS_E_INVALIDTAGDB = `-2147220458`;
export const DS_E_INVALIDCATALOGNAME = `-2147220457`;
export const DS_E_CONFIGNOTRIGHTTYPE = `-2147220456`;
export const DS_E_PROTOCOLVERSION = `-2147220455`;
export const DS_E_ALREADYENABLED = `-2147220454`;
export const DS_E_INDEXDIRECTORY = `-2147220452`;
export const DS_E_VALUETOOLARGE = `-2147220451`;
export const DS_E_UNKNOWNPARAM = `-2147220450`;
export const DS_E_BUFFERTOOSMALL = `-2147220449`;
export const DS_E_PARAMOUTOFRANGE = `-2147220448`;
export const DS_E_ALREADYDISABLED = `-2147220447`;
export const DS_E_QUERYHUNG = `-2147220446`;
export const DS_E_BADRESULT = `-2147220445`;
export const DS_E_CANNOTWRITEREGISTRY = `-2147220444`;
export const DS_E_CANNOTREMOVECONCURRENT = `-2147220443`;
export const DS_E_SEARCHCATNAMECOLLISION = `-2147220442`;
export const DS_E_PROPVERSIONMISMATCH = `-2147220441`;
export const DS_E_MISSINGCATALOG = `-2147220440`;
export const COLL_E_BADSEQUENCE = `-2147220223`;
export const COLL_E_NOMOREDATA = `-2147220222`;
export const COLL_E_INCOMPATIBLECOLUMNS = `-2147220221`;
export const COLL_E_BUFFERTOOSMALL = `-2147220220`;
export const COLL_E_BADRESULT = `-2147220218`;
export const COLL_E_NOSORTCOLUMN = `-2147220217`;
export const COLL_E_DUPLICATEDBID = `-2147220216`;
export const COLL_E_TOOMANYMERGECOLUMNS = `-2147220215`;
export const COLL_E_NODEFAULTCATALOG = `-2147220214`;
export const COLL_E_MAXCONNEXCEEDED = `-2147220213`;
export const CM_E_TOOMANYDATASERVERS = `-2147219967`;
export const CM_E_TOOMANYDATASOURCES = `-2147219966`;
export const CM_E_NOQUERYCONNECTIONS = `-2147219965`;
export const CM_E_DATASOURCENOTAVAILABLE = `-2147219964`;
export const CM_E_CONNECTIONTIMEOUT = `-2147219963`;
export const CM_E_SERVERNOTFOUND = `-2147219962`;
export const CM_S_NODATASERVERS = 263687;
export const CM_E_REGISTRY = `-2147219960`;
export const CM_E_INVALIDDATASOURCE = `-2147219959`;
export const CM_E_TIMEOUT = `-2147219958`;
export const CM_E_INSUFFICIENTBUFFER = `-2147219957`;
export const QRY_E_QUERYSYNTAX = `-2147219711`;
export const QRY_E_TYPEMISMATCH = `-2147219710`;
export const QRY_E_UNHANDLEDTYPE = `-2147219709`;
export const QRY_S_NOROWSFOUND = 263940;
export const QRY_E_TOOMANYCOLUMNS = `-2147219707`;
export const QRY_E_TOOMANYDATABASES = `-2147219706`;
export const QRY_E_STARTHITTOBIG = `-2147219705`;
export const QRY_E_TOOMANYQUERYTERMS = `-2147219704`;
export const QRY_E_NODATASOURCES = `-2147219703`;
export const QRY_E_TIMEOUT = `-2147219702`;
export const QRY_E_COLUMNNOTSORTABLE = `-2147219701`;
export const QRY_E_COLUMNNOTSEARCHABLE = `-2147219700`;
export const QRY_E_INVALIDCOLUMN = `-2147219699`;
export const QRY_E_QUERYCORRUPT = `-2147219698`;
export const QRY_E_PREFIXWILDCARD = `-2147219697`;
export const QRY_E_INFIXWILDCARD = `-2147219696`;
export const QRY_E_WILDCARDPREFIXLENGTH = `-2147219695`;
export const QRY_S_TERMIGNORED = 263954;
export const QRY_E_ENGINEFAILED = `-2147219693`;
export const QRY_E_SEARCHTOOBIG = `-2147219692`;
export const QRY_E_NULLQUERY = `-2147219691`;
export const QRY_S_INEXACTRESULTS = 263958;
export const QRY_E_NOCOLUMNS = `-2147219689`;
export const QRY_E_INVALIDSCOPES = `-2147219688`;
export const QRY_E_INVALIDCATALOG = `-2147219687`;
export const QRY_E_SCOPECARDINALIDY = `-2147219686`;
export const QRY_E_UNEXPECTED = `-2147219685`;
export const QRY_E_INVALIDPATH = `-2147219684`;
export const QRY_E_LMNOTINITIALIZED = `-2147219683`;
export const QRY_E_INVALIDINTERVAL = `-2147219682`;
export const QRY_E_NOLOGMANAGER = `-2147219681`;
export const SCHEMA_E_LOAD_SPECIAL = `-2147218431`;
export const SCHEMA_E_FILENOTFOUND = `-2147218430`;
export const SCHEMA_E_NESTEDTAG = `-2147218429`;
export const SCHEMA_E_UNEXPECTEDTAG = `-2147218428`;
export const SCHEMA_E_VERSIONMISMATCH = `-2147218427`;
export const SCHEMA_E_CANNOTCREATEFILE = `-2147218426`;
export const SCHEMA_E_CANNOTWRITEFILE = `-2147218425`;
export const SCHEMA_E_EMPTYFILE = `-2147218424`;
export const SCHEMA_E_INVALIDFILETYPE = `-2147218423`;
export const SCHEMA_E_INVALIDDATATYPE = `-2147218422`;
export const SCHEMA_E_CANNOTCREATENOISEWORDFILE = `-2147218421`;
export const SCHEMA_E_ADDSTOPWORDS = `-2147218420`;
export const SCHEMA_E_NAMEEXISTS = `-2147218419`;
export const SCHEMA_E_INVALIDVALUE = `-2147218418`;
export const SCHEMA_E_BADPROPSPEC = `-2147218417`;
export const SCHEMA_E_NOMORECOLUMNS = `-2147218416`;
export const SCHEMA_E_FILECHANGED = `-2147218415`;
export const SCHEMA_E_BADCOLUMNNAME = `-2147218414`;
export const SCHEMA_E_BADPROPPID = `-2147218413`;
export const SCHEMA_E_BADATTRIBUTE = `-2147218412`;
export const SCHEMA_E_BADFILENAME = `-2147218411`;
export const SCHEMA_E_PROPEXISTS = `-2147218410`;
export const SCHEMA_E_DUPLICATENOISE = `-2147218409`;
export const GTHR_E_DUPLICATE_OBJECT = `-2147218174`;
export const GTHR_E_UNABLE_TO_READ_REGISTRY = `-2147218173`;
export const GTHR_E_ERROR_WRITING_REGISTRY = `-2147218172`;
export const GTHR_E_ERROR_INITIALIZING_PERFMON = `-2147218171`;
export const GTHR_E_ERROR_OBJECT_NOT_FOUND = `-2147218170`;
export const GTHR_E_URL_EXCLUDED = `-2147218169`;
export const GTHR_E_CONFIG_DUP_PROJECT = `-2147218166`;
export const GTHR_E_CONFIG_DUP_EXTENSION = `-2147218165`;
export const GTHR_E_DUPLICATE_URL = `-2147218163`;
export const GTHR_E_TOO_MANY_PLUGINS = `-2147218162`;
export const GTHR_E_INVALIDFUNCTION = `-2147218161`;
export const GTHR_E_NOFILTERSINK = `-2147218160`;
export const GTHR_E_FILTER_PROCESS_TERMINATED = `-2147218159`;
export const GTHR_E_FILTER_INVALID_MESSAGE = `-2147218158`;
export const GTHR_E_UNSUPPORTED_PROPERTY_TYPE = `-2147218157`;
export const GTHR_E_NAME_TOO_LONG = `-2147218156`;
export const GTHR_E_NO_IDENTITY = `-2147218155`;
export const GTHR_E_FILTER_NOT_FOUND = `-2147218154`;
export const GTHR_E_FILTER_NO_MORE_THREADS = `-2147218153`;
export const GTHR_E_PRT_HNDLR_PROGID_MISSING = `-2147218152`;
export const GTHR_E_FILTER_PROCESS_TERMINATED_QUOTA = `-2147218151`;
export const GTHR_E_UNKNOWN_PROTOCOL = `-2147218150`;
export const GTHR_E_PROJECT_NOT_INITIALIZED = `-2147218149`;
export const GTHR_S_STATUS_CHANGE_IGNORED = 265500;
export const GTHR_S_STATUS_END_CRAWL = 265501;
export const GTHR_S_STATUS_RESET = 265502;
export const GTHR_S_STATUS_THROTTLE = 265503;
export const GTHR_S_STATUS_RESUME = 265504;
export const GTHR_S_STATUS_PAUSE = 265505;
export const GTHR_E_INVALID_PROJECT_NAME = `-2147218142`;
export const GTHR_E_SHUTTING_DOWN = `-2147218141`;
export const GTHR_S_END_STD_CHUNKS = 265508;
export const GTHR_E_VALUE_NOT_AVAILABLE = `-2147218139`;
export const GTHR_E_OUT_OF_DOC_ID = `-2147218138`;
export const GTHR_E_NOTIFICATION_START_PAGE = `-2147218137`;
export const GTHR_E_DUP_PROPERTY_MAPPING = `-2147218134`;
export const GTHR_S_NO_CRAWL_SEEDS = 265515;
export const GTHR_E_INVALID_ACCOUNT = `-2147218132`;
export const GTHR_E_FILTER_INIT = `-2147218130`;
export const GTHR_E_INVALID_ACCOUNT_SYNTAX = `-2147218129`;
export const GTHR_S_CANNOT_FILTER = 265520;
export const GTHR_E_PROXY_NAME = `-2147218127`;
export const GTHR_E_SERVER_UNAVAILABLE = `-2147218126`;
export const GTHR_S_STATUS_STOP = 265523;
export const GTHR_E_INVALID_PATH = `-2147218124`;
export const GTHR_E_FILTER_NO_CODEPAGE = `-2147218123`;
export const GTHR_S_STATUS_START = 265526;
export const GTHR_E_NO_PRTCLHNLR = `-2147218121`;
export const GTHR_E_IE_OFFLINE = `-2147218120`;
export const GTHR_E_BAD_FILTER_DAEMON = `-2147218119`;
export const GTHR_E_INVALID_MAPPING = `-2147218112`;
export const GTHR_E_USER_AGENT_NOT_SPECIFIED = `-2147218111`;
export const GTHR_E_FROM_NOT_SPECIFIED = `-2147218109`;
export const GTHR_E_INVALID_STREAM_LOGS_COUNT = `-2147218108`;
export const GTHR_E_INVALID_EXTENSION = `-2147218107`;
export const GTHR_E_INVALID_GROW_FACTOR = `-2147218106`;
export const GTHR_E_INVALID_TIME_OUT = `-2147218105`;
export const GTHR_E_INVALID_RETRIES = `-2147218104`;
export const GTHR_E_INVALID_LOG_FILE_NAME = `-2147218103`;
export const GTHR_E_INVALID_HOST_NAME = `-2147218096`;
export const GTHR_E_INVALID_START_PAGE = `-2147218095`;
export const GTHR_E_DUPLICATE_PROJECT = `-2147218094`;
export const GTHR_E_INVALID_DIRECTORY = `-2147218093`;
export const GTHR_E_FILTER_INTERRUPTED = `-2147218092`;
export const GTHR_E_INVALID_PROXY_PORT = `-2147218091`;
export const GTHR_S_CONFIG_HAS_ACCOUNTS = 265558;
export const GTHR_E_SECRET_NOT_FOUND = `-2147218089`;
export const GTHR_E_INVALID_PATH_EXPRESSION = `-2147218088`;
export const GTHR_E_INVALID_START_PAGE_HOST = `-2147218087`;
export const GTHR_E_INVALID_START_PAGE_PATH = `-2147218080`;
export const GTHR_E_APPLICATION_NOT_FOUND = `-2147218079`;
export const GTHR_E_CANNOT_REMOVE_PLUGINMGR = `-2147218078`;
export const GTHR_E_INVALID_APPLICATION_NAME = `-2147218077`;
export const GTHR_E_FILTER_FAULT = `-2147218075`;
export const GTHR_E_NON_FIXED_DRIVE = `-2147218074`;
export const GTHR_S_PROB_NOT_MODIFIED = 265575;
export const GTHR_S_CRAWL_SCHEDULED = 265576;
export const GTHR_S_TRANSACTION_IGNORED = 265577;
export const GTHR_S_START_FILTER_FROM_PROTOCOL = 265578;
export const GTHR_E_FILTER_SINGLE_THREADED = `-2147218069`;
export const GTHR_S_BAD_FILE_LINK = 265580;
export const GTHR_E_URL_UNIDENTIFIED = `-2147218067`;
export const GTHR_S_NOT_ALL_PARTS = 265582;
export const GTHR_E_FORCE_NOTIFICATION_RESET = `-2147218065`;
export const GTHR_S_END_PROCESS_LOOP_NOTIFY_QUEUE = 265584;
export const GTHR_S_START_FILTER_FROM_BODY = 265585;
export const GTHR_E_CONTENT_ID_CONFLICT = `-2147218062`;
export const GTHR_E_UNABLE_TO_READ_EXCHANGE_STORE = `-2147218061`;
export const GTHR_E_RECOVERABLE_EXOLEDB_ERROR = `-2147218060`;
export const GTHR_E_INVALID_CALL_FROM_WBREAKER = `-2147218058`;
export const GTHR_E_PROPERTY_LIST_NOT_INITIALIZED = `-2147218057`;
export const GTHR_S_MODIFIED_PARTS = 265592;
export const GHTR_E_LOCAL_SERVER_UNAVAILABLE = `-2147218055`;
export const GTHR_E_SCHEMA_ERRORS_OCCURRED = `-2147218054`;
export const GTHR_E_TIMEOUT = `-2147218053`;
export const GTHR_S_CRAWL_FULL = 265603;
export const GTHR_S_CRAWL_INCREMENTAL = 265604;
export const GTHR_S_CRAWL_ADAPTIVE = 265605;
export const GTHR_E_NOTIFICATION_START_ADDRESS_INVALID = `-2147218042`;
export const GTHR_E_NOTIFICATION_TYPE_NOT_SUPPORTED = `-2147218041`;
export const GTHR_E_NOTIFICATION_FILE_SHARE_INFO_NOT_AVAILABLE = `-2147218040`;
export const GTHR_E_NOTIFICATION_LOCAL_PATH_MUST_USE_FIXED_DRIVE = `-2147218039`;
export const GHTR_E_INSUFFICIENT_DISK_SPACE = `-2147218037`;
export const GTHR_E_INVALID_RESOURCE_ID = `-2147218035`;
export const GTHR_E_NESTED_HIERARCHICAL_START_ADDRESSES = `-2147218034`;
export const GTHR_S_NO_INDEX = 265616;
export const GTHR_S_PAUSE_REASON_EXTERNAL = 265618;
export const GTHR_S_PAUSE_REASON_UPGRADING = 265619;
export const GTHR_S_PAUSE_REASON_BACKOFF = 265620;
export const GTHR_E_RETRY = `-2147218027`;
export const GTHR_E_JET_BACKUP_ERROR = `-2147218026`;
export const GTHR_E_JET_RESTORE_ERROR = `-2147218025`;
export const GTHR_S_OFFICE_CHILD = 265626;
export const GTHR_E_PLUGIN_NOT_REGISTERED = `-2147218021`;
export const GTHR_E_NOTIF_ACCESS_TOKEN_UPDATED = `-2147218020`;
export const GTHR_E_DIRMON_NOT_INITIALZED = `-2147218019`;
export const GTHR_E_NOTIF_BEING_REMOVED = `-2147218018`;
export const GTHR_E_NOTIF_EXCESSIVE_THROUGHPUT = `-2147218017`;
export const GTHR_E_INVALID_PATH_SPEC = `-2147218016`;
export const GTHR_E_INSUFFICIENT_FEATURE_TERMS = `-2147218015`;
export const GTHR_E_INSUFFICIENT_EXAMPLE_CATEGORIES = `-2147218014`;
export const GTHR_E_INSUFFICIENT_EXAMPLE_DOCUMENTS = `-2147218013`;
export const GTHR_E_AUTOCAT_UNEXPECTED = `-2147218012`;
export const GTHR_E_SINGLE_THREADED_EMBEDDING = `-2147218011`;
export const GTHR_S_CANNOT_WORDBREAK = 265638;
export const GTHR_S_USE_MIME_FILTER = 265639;
export const GTHR_E_FOLDER_CRAWLED_BY_ANOTHER_WORKSPACE = `-2147218007`;
export const GTHR_E_EMPTY_DACL = `-2147218006`;
export const GTHR_E_OBJECT_NOT_VALID = `-2147218005`;
export const GTHR_E_CANNOT_ENABLE_CHECKPOINT = `-2147218002`;
export const GTHR_E_SCOPES_EXCEEDED = `-2147218001`;
export const GTHR_E_PROPERTIES_EXCEEDED = `-2147218000`;
export const GTHR_E_INVALID_START_ADDRESS = `-2147217998`;
export const GTHR_S_PAUSE_REASON_PROFILE_IMPORT = 265651;
export const GTHR_E_PIPE_NOT_CONNECTTED = `-2147217996`;
export const GTHR_E_BACKUP_VALIDATION_FAIL = `-2147217994`;
export const GTHR_E_BAD_FILTER_HOST = `-2147217993`;
export const GTHR_E_NTF_CLIENT_NOT_SUBSCRIBED = `-1073476167`;
export const GTHR_E_FILTERPOOL_NOTFOUND = `-2147217990`;
export const GTHR_E_ADDLINKS_FAILED_WILL_RETRY_PARENT = `-2147217989`;
export const IDX_E_INVALIDTAG = `-2147217151`;
export const IDX_E_METAFILE_CORRUPT = `-2147217150`;
export const IDX_E_TOO_MANY_SEARCH_SERVERS = `-2147217149`;
export const IDX_E_SEARCH_SERVER_ALREADY_EXISTS = `-2147217148`;
export const IDX_E_BUILD_IN_PROGRESS = `-2147217147`;
export const IDX_E_IDXLSTFILE_CORRUPT = `-2147217146`;
export const IDX_E_REGISTRY_ENTRY = `-2147217145`;
export const IDX_E_OBJECT_NOT_FOUND = `-2147217144`;
export const IDX_E_SEARCH_SERVER_NOT_FOUND = `-2147217143`;
export const IDX_E_WB_NOTFOUND = `-2147217142`;
export const IDX_E_NOISELIST_NOTFOUND = `-2147217141`;
export const IDX_E_STEMMER_NOTFOUND = `-2147217140`;
export const IDX_E_PROP_STOPPED = `-2147217139`;
export const IDX_E_DISKFULL = `-2147217138`;
export const IDX_E_INVALID_INDEX = `-2147217137`;
export const IDX_E_CORRUPT_INDEX = `-2147217136`;
export const IDX_E_PROPSTORE_INIT_FAILED = `-2147217134`;
export const IDX_E_PROP_STATE_CORRUPT = `-2147217133`;
export const IDX_S_NO_BUILD_IN_PROGRESS = 266516;
export const IDX_S_SEARCH_SERVER_ALREADY_EXISTS = 266517;
export const IDX_S_SEARCH_SERVER_DOES_NOT_EXIST = 266518;
export const IDX_E_NOT_LOADED = `-2147217129`;
export const IDX_E_PROP_MAJOR_VERSION_MISMATCH = `-2147217128`;
export const IDX_E_PROP_MINOR_VERSION_MISMATCH = `-2147217127`;
export const IDX_E_DSS_NOT_CONNECTED = `-2147217126`;
export const IDX_E_DOCUMENT_ABORTED = `-2147217125`;
export const IDX_E_CATALOG_DISMOUNTED = `-2147217124`;
export const IDX_S_DSS_NOT_AVAILABLE = 266525;
export const IDX_E_USE_DEFAULT_CONTENTCLASS = `-2147217121`;
export const IDX_E_USE_APPGLOBAL_PROPTABLE = `-2147217120`;
export const JPS_E_JET_ERR = `-2147217025`;
export const JPS_S_DUPLICATE_DOC_DETECTED = 266624;
export const JPS_E_CATALOG_DECSRIPTION_MISSING = `-2147217023`;
export const JPS_E_MISSING_INFORMATION = `-2147217022`;
export const JPS_E_INSUFFICIENT_VERSION_STORAGE = `-2147217021`;
export const JPS_E_INSUFFICIENT_DATABASE_SESSIONS = `-2147217020`;
export const JPS_E_INSUFFICIENT_DATABASE_RESOURCES = `-2147217019`;
export const JPS_E_SCHEMA_ERROR = `-2147217018`;
export const JPS_E_PROPAGATION_FILE = `-2147217017`;
export const JPS_E_PROPAGATION_CORRUPTION = `-2147217016`;
export const JPS_E_PROPAGATION_VERSION_MISMATCH = `-2147217015`;
export const JPS_E_SHARING_VIOLATION = `-2147217014`;
export const EXCI_E_NO_CONFIG = `-2147216992`;
export const EXCI_E_INVALID_SERVER_CONFIG = `-2147216991`;
export const EXCI_E_ACCESS_DENIED = `-2147216990`;
export const EXCI_E_INVALID_EXCHANGE_SERVER = `-2147216989`;
export const EXCI_E_BADCONFIG_OR_ACCESSDENIED = `-2147216988`;
export const EXCI_E_WRONG_SERVER_OR_ACCT = `-2147216987`;
export const EXCI_E_NOT_ADMIN_OR_WRONG_SITE = `-2147216986`;
export const EXCI_E_NO_MAPI = `-2147216985`;
export const EXCI_E_INVALID_ACCOUNT_INFO = `-2147216984`;
export const PRTH_E_INTERNAL_ERROR = `-2147216892`;
export const PRTH_S_MAX_GROWTH = 266761;
export const PRTH_E_WININET = `-2147216886`;
export const PRTH_E_RETRY = `-2147216885`;
export const PRTH_S_MAX_DOWNLOAD = 266764;
export const PRTH_E_MIME_EXCLUDED = `-2147216883`;
export const PRTH_E_CANT_TRANSFORM_EXTERNAL_ACL = `-2147216882`;
export const PRTH_E_CANT_TRANSFORM_DENIED_ACE = `-2147216881`;
export const PRTH_E_NO_PROPERTY = `-2147216877`;
export const PRTH_S_USE_ROSEBUD = 266772;
export const PRTH_E_DATABASE_OPEN_ERROR = `-2147216875`;
export const PRTH_E_OPLOCK_BROKEN = `-2147216874`;
export const PRTH_E_LOAD_FAILED = `-2147216873`;
export const PRTH_E_INIT_FAILED = `-2147216872`;
export const PRTH_E_VOLUME_MOUNT_POINT = `-2147216871`;
export const PRTH_E_TRUNCATED = `-2147216870`;
export const GTHR_E_LOCAL_GROUPS_EXPANSION_INTERNAL_ERROR = `-2147216867`;
export const PRTH_E_HTTPS_CERTIFICATE_ERROR = `-2147216861`;
export const PRTH_E_HTTPS_REQUIRE_CERTIFICATE = `-2147216860`;
export const PRTH_S_TRY_IMPERSONATING = 266789;
export const CMDLINE_E_UNEXPECTED = `-2147216127`;
export const CMDLINE_E_PAREN = `-2147216126`;
export const CMDLINE_E_PARAM_SIZE = `-2147216125`;
export const CMDLINE_E_NOT_INIT = `-2147216124`;
export const CMDLINE_E_ALREADY_INIT = `-2147216123`;
export const CMDLINE_E_NUM_PARAMS = `-2147216122`;
export const NLADMIN_E_DUPLICATE_CATALOG = `-2147215103`;
export const NLADMIN_S_NOT_ALL_BUILD_CATALOGS_INITIALIZED = 268546;
export const NLADMIN_E_FAILED_TO_GIVE_ACCOUNT_PRIVILEGE = `-2147215101`;
export const NLADMIN_E_BUILD_CATALOG_NOT_INITIALIZED = `-2147215100`;
export const SCRIPTPI_E_CHUNK_NOT_TEXT = `-2147213312`;
export const SCRIPTPI_E_PID_NOT_NAME = `-2147213311`;
export const SCRIPTPI_E_PID_NOT_NUMERIC = `-2147213310`;
export const SCRIPTPI_E_CHUNK_NOT_VALUE = `-2147213309`;
export const SCRIPTPI_E_CANNOT_ALTER_CHUNK = `-2147213308`;
export const SCRIPTPI_E_ALREADY_COMPLETED = `-2147213307`;
export const _MAPI_E_NO_SUPPORT = `-2147221246`;
export const _MAPI_E_BAD_CHARWIDTH = `-2147221245`;
export const _MAPI_E_STRING_TOO_LONG = `-2147221243`;
export const _MAPI_E_UNKNOWN_FLAGS = `-2147221242`;
export const _MAPI_E_INVALID_ENTRYID = `-2147221241`;
export const _MAPI_E_INVALID_OBJECT = `-2147221240`;
export const _MAPI_E_OBJECT_CHANGED = `-2147221239`;
export const _MAPI_E_OBJECT_DELETED = `-2147221238`;
export const _MAPI_E_BUSY = `-2147221237`;
export const _MAPI_E_NOT_ENOUGH_DISK = `-2147221235`;
export const _MAPI_E_NOT_ENOUGH_RESOURCES = `-2147221234`;
export const _MAPI_E_NOT_FOUND = `-2147221233`;
export const _MAPI_E_VERSION = `-2147221232`;
export const _MAPI_E_LOGON_FAILED = `-2147221231`;
export const _MAPI_E_SESSION_LIMIT = `-2147221230`;
export const _MAPI_E_USER_CANCEL = `-2147221229`;
export const _MAPI_E_UNABLE_TO_ABORT = `-2147221228`;
export const _MAPI_E_NETWORK_ERROR = `-2147221227`;
export const _MAPI_E_DISK_ERROR = `-2147221226`;
export const _MAPI_E_TOO_COMPLEX = `-2147221225`;
export const _MAPI_E_BAD_COLUMN = `-2147221224`;
export const _MAPI_E_EXTENDED_ERROR = `-2147221223`;
export const _MAPI_E_COMPUTED = `-2147221222`;
export const _MAPI_E_CORRUPT_DATA = `-2147221221`;
export const _MAPI_E_UNCONFIGURED = `-2147221220`;
export const _MAPI_E_FAILONEPROVIDER = `-2147221219`;
export const _MAPI_E_UNKNOWN_CPID = `-2147221218`;
export const _MAPI_E_UNKNOWN_LCID = `-2147221217`;
export const _MAPI_E_PASSWORD_CHANGE_REQUIRED = `-2147221216`;
export const _MAPI_E_PASSWORD_EXPIRED = `-2147221215`;
export const _MAPI_E_INVALID_WORKSTATION_ACCOUNT = `-2147221214`;
export const _MAPI_E_INVALID_ACCESS_TIME = `-2147221213`;
export const _MAPI_E_ACCOUNT_DISABLED = `-2147221212`;
export const _MAPI_E_END_OF_SESSION = `-2147220992`;
export const _MAPI_E_UNKNOWN_ENTRYID = `-2147220991`;
export const _MAPI_E_MISSING_REQUIRED_COLUMN = `-2147220990`;
export const _MAPI_W_NO_SERVICE = 262659;
export const MSG_TEST_MESSAGE = 1074008064;
export const FLTRDMN_E_UNEXPECTED = `-2147212287`;
export const FLTRDMN_E_QI_FILTER_FAILED = `-2147212286`;
export const FLTRDMN_E_FILTER_INIT_FAILED = `-2147212284`;
export const FLTRDMN_E_ENCRYPTED_DOCUMENT = `-2147212283`;
export const FLTRDMN_E_CANNOT_DECRYPT_PASSWORD = `-2147212282`;
export const OLEDB_BINDER_CUSTOM_ERROR = `-2147212032`;
export const NOTESPH_E_UNEXPECTED_STATE = `-2147211775`;
export const NOTESPH_S_IGNORE_ID = 271874;
export const NOTESPH_E_UNSUPPORTED_CONTENT_FIELD_TYPE = `-2147211773`;
export const NOTESPH_E_ITEM_NOT_FOUND = `-2147211772`;
export const NOTESPH_E_SERVER_CONFIG = `-2147211771`;
export const NOTESPH_E_ATTACHMENTS = `-2147211770`;
export const NOTESPH_E_NO_NTID = `-2147211769`;
export const NOTESPH_E_DB_ACCESS_DENIED = `-2147211768`;
export const NOTESPH_E_NOTESSETUP_ID_MAPPING_ERROR = `-2147211767`;
export const NOTESPH_S_LISTKNOWNFIELDS = 271888;
export const NOTESPH_E_FAIL = `-2147211759`;
export const STS_ABORTXMLPARSE = `-2147211756`;
export const STS_WS_ERROR = `-2147211754`;
export const SPS_WS_ERROR = `-2147211753`;
export const EXSTOREPH_E_UNEXPECTED = `-2147211519`;
export const CERT_E_NOT_FOUND_OR_NO_PERMISSSION = `-2147211263`;
export const SRCH_SCHEMA_CACHE_E_UNEXPECTED = `-2147208447`;
export const CONTENT_SOURCE_E_PROPERTY_MAPPING_READ = `-2147208191`;
export const CONTENT_SOURCE_E_UNEXPECTED_NULL_POINTER = `-2147208190`;
export const CONTENT_SOURCE_E_PROPERTY_MAPPING_BAD_VECTOR_SIZE = `-2147208189`;
export const CONTENT_SOURCE_E_CONTENT_CLASS_READ = `-2147208188`;
export const CONTENT_SOURCE_E_UNEXPECTED_EXCEPTION = `-2147208187`;
export const CONTENT_SOURCE_E_NULL_CONTENT_CLASS_BSTR = `-2147208186`;
export const CONTENT_SOURCE_E_CONTENT_SOURCE_COLUMN_TYPE = `-2147208185`;
export const CONTENT_SOURCE_E_OUT_OF_RANGE = `-2147208184`;
export const CONTENT_SOURCE_E_NULL_URI = `-2147208183`;
export const REXSPH_E_INVALID_CALL = `-2147207936`;
export const REXSPH_S_REDIRECTED = 275713;
export const REXSPH_E_REDIRECT_ON_SECURITY_UPDATE = `-2147207934`;
export const REXSPH_E_MULTIPLE_REDIRECT = `-2147207933`;
export const REXSPH_E_NO_PROPERTY_ON_ROW = `-2147207932`;
export const REXSPH_E_TYPE_MISMATCH_ON_READ = `-2147207931`;
export const REXSPH_E_UNEXPECTED_DATA_STATUS = `-2147207930`;
export const REXSPH_E_UNKNOWN_DATA_TYPE = `-2147207929`;
export const REXSPH_E_UNEXPECTED_FILTER_STATE = `-2147207928`;
export const REXSPH_E_DUPLICATE_PROPERTY = `-2147207927`;
export const PEOPLE_IMPORT_E_DBCONNFAIL = `-2147205120`;
export const PEOPLE_IMPORT_NODSDEFINED = `-2147205119`;
export const PEOPLE_IMPORT_E_FAILTOGETDSDEF = `-2147205118`;
export const PEOPLE_IMPORT_NOMAPPINGDEFINED = `-2147205117`;
export const PEOPLE_IMPORT_E_FAILTOGETDSMAPPING = `-2147205116`;
export const PEOPLE_IMPORT_E_DATATYPENOTSUPPORTED = `-2147205115`;
export const PEOPLE_IMPORT_E_NOCASTINGSUPPORTED = `-2147205114`;
export const PEOPLE_IMPORT_E_UPDATE_DIRSYNC_COOKIE = `-2147205113`;
export const PEOPLE_IMPORT_E_DIRSYNC_ZERO_COOKIE = `-2147205112`;
export const PEOPLE_IMPORT_E_LDAPPATH_TOOLONG = `-2147205111`;
export const PEOPLE_IMPORT_E_CANONICALURL_TOOLONG = `-2147205110`;
export const PEOPLE_IMPORT_E_USERNAME_NOTRESOLVED = `-2147205109`;
export const PEOPLE_IMPORT_E_DC_NOT_AVAILABLE = `-2147205108`;
export const PEOPLE_IMPORT_E_DOMAIN_DISCOVER_FAILED = `-2147205107`;
export const PEOPLE_IMPORT_E_FAILTOGETLCID = `-2147205106`;
export const PEOPLE_IMPORT_E_DOMAIN_REMOVED = `-2147205105`;
export const PEOPLE_IMPORT_E_ENUM_ACCESSDENIED = `-2147205104`;
export const PEOPLE_IMPORT_E_DIRSYNC_NOTREFRESHED = `-2147205103`;
export const FTE_E_SECRET_NOT_FOUND = `-2147207678`;
export const FTE_E_PIPE_NOT_CONNECTED = `-2147207677`;
export const FTE_E_ADMIN_BLOB_CORRUPT = `-2147207676`;
export const FTE_E_FILTER_SINGLE_THREADED = `-2147207675`;
export const FTE_E_ERROR_WRITING_REGISTRY = `-2147207674`;
export const FTE_E_PROJECT_SHUTDOWN = `-2147207673`;
export const FTE_E_PROJECT_NOT_INITALIZED = `-2147207672`;
export const FTE_E_PIPE_DATA_CORRUPTED = `-2147207671`;
export const FTE_E_URB_TOO_BIG = `-2147207664`;
export const FTE_E_INVALID_DOCID = `-2147207663`;
export const FTE_E_PAUSE_EXTERNAL = `-2147207662`;
export const FTE_E_REJECTED_DUE_TO_PROJECT_STATUS = `-2147207661`;
export const FTE_E_FD_DID_NOT_CONNECT = `-2147207660`;
export const FTE_E_PROGID_REQUIRED = `-2147207658`;
export const FTE_E_STATIC_THREAD_INVALID_ARGUMENTS = `-2147207657`;
export const FTE_E_CATALOG_ALREADY_EXISTS = `-2147207656`;
export const FTE_S_RESOURCES_STARTING_TO_GET_LOW = 275993;
export const FTE_E_PATH_TOO_LONG = `-2147207654`;
export const FTE_INVALID_ADMIN_CLIENT = `-2147207653`;
export const FTE_E_COM_SIGNATURE_VALIDATION = `-2147207652`;
export const FTE_E_AFFINITY_MASK = `-2147207651`;
export const FTE_E_FD_OWNERSHIP_OBSOLETE = `-2147207650`;
export const FTE_E_EXCEEDED_MAX_PLUGINS = `-2147207647`;
export const FTE_S_BEYOND_QUOTA = 276002;
export const FTE_E_DUPLICATE_OBJECT = `-2147207644`;
export const FTE_S_REDUNDANT = 276005;
export const FTE_E_REDUNDANT_TRAN_FAILURE = `-2147207642`;
export const FTE_E_DEPENDENT_TRAN_FAILED_TO_PERSIST = `-2147207641`;
export const FTE_E_FD_SHUTDOWN = `-2147207640`;
export const FTE_E_CATALOG_DOES_NOT_EXIST = `-2147207639`;
export const FTE_E_NO_PLUGINS = `-2147207638`;
export const FTE_S_STATUS_CHANGE_REQUEST = 276011;
export const FTE_E_BATCH_ABORTED = `-2147207636`;
export const FTE_E_ANOTHER_STATUS_CHANGE_IS_ALREADY_ACTIVE = `-2147207635`;
export const FTE_S_RESUME = 276014;
export const FTE_E_NOT_PROCESSED_DUE_TO_PREVIOUS_ERRORS = `-2147207633`;
export const FTE_E_FD_TIMEOUT = `-2147207632`;
export const FTE_E_RESOURCE_SHUTDOWN = `-2147207631`;
export const FTE_E_INVALID_PROPERTY = `-2147207630`;
export const FTE_E_NO_MORE_PROPERTIES = `-2147207629`;
export const FTE_E_UNKNOWN_PLUGIN = `-2147207628`;
export const FTE_E_LIBRARY_NOT_LOADED = `-2147207627`;
export const FTE_E_PERFMON_FULL = `-2147207626`;
export const FTE_E_FAILED_TO_CREATE_ACCESSOR = `-2147207625`;
export const FTE_E_INVALID_TYPE = `-2147207624`;
export const FTE_E_OUT_OF_RANGE = `-2147207623`;
export const FTE_E_CORRUPT_PROPERTY_STORE = `-2147207622`;
export const FTE_E_PROPERTY_STORE_WORKID_NOTVALID = `-2147207621`;
export const FTE_S_PROPERTY_STORE_END_OF_ENUMERATION = 276028;
export const FTE_E_CORRUPT_GATHERER_HASH_MAP = `-2147207619`;
export const FTE_E_KEY_NOT_CACHED = `-2147207618`;
export const FTE_E_UPGRADE_INTERFACE_ALREADY_SHUTDOWN = `-2147207617`;
export const FTE_E_UPGRADE_INTERFACE_ALREADY_INSTANTIATED = `-2147207616`;
export const FTE_E_STACK_CORRUPTED = `-2147207615`;
export const FTE_E_INVALID_PROG_ID = `-2147207614`;
export const FTE_E_SERIAL_STREAM_CORRUPT = `-2147207613`;
export const FTE_E_READONLY_CATALOG = `-2147207612`;
export const FTE_E_PERF_NOT_LOADED = `-2147207611`;
export const FTE_S_READONLY_CATALOG = 276038;
export const FTE_E_RETRY_HUGE_DOC = `-2147207608`;
export const FTE_E_UNKNOWN_FD_TYPE = `-2147207607`;
export const FTE_E_DOC_TOO_HUGE = `-2147207606`;
export const FTE_E_DATATYPE_MISALIGNMENT = `-2147207605`;
export const FTE_E_ALREADY_INITIALIZED = `-2147207604`;
export const FTE_E_FD_USED_TOO_MUCH_MEMORY = `-2147207603`;
export const FTE_E_UNEXPECTED_EXIT = `-2147207602`;
export const FTE_E_HIGH_MEMORY_PRESSURE = `-2147207601`;
export const FTE_E_INVALID_ISOLATE_ERROR_BATCH = `-2147207600`;
export const FTE_E_RETRY_SINGLE_DOC_PER_BATCH = `-2147207599`;
export const FTE_E_INVALID_PROJECT_ID = `-2147207598`;
export const FTE_E_FAILURE_TO_POST_SETCOMPLETION_STATUS = `-2147207597`;
export const FTE_E_INVALID_CODEPAGE = `-2147207596`;
export const FTE_E_FD_IDLE = `-2147207595`;
export const FTE_E_FD_UNRESPONSIVE = `-2147207594`;
export const FTE_S_TRY_TO_FLUSH = 276055;
export const FTE_S_CATALOG_BLOB_MISMATCHED = 276056;
export const FTE_S_PROPERTY_RESET = 276057;
export const FTE_E_NO_PROPERTY_STORE = `-1073465766`;
export const FTE_E_CB_OUT_OF_MEMORY = `-2147169536`;
export const FTE_E_CB_CBID_OUT_OF_BOUND = `-2147169535`;
export const FTE_E_CB_NOT_ENOUGH_AVAIL_PHY_MEM = `-2147169534`;
export const FTE_E_CB_NOT_ENOUGH_OCC_BUFFER = `-2147169533`;
export const FTE_E_CORRUPT_WORDLIST = `-2147169532`;
export const FTE_E_FD_NO_IPERSIST_INTERFACE = `-2147156736`;
export const FTE_E_FD_IFILTER_INIT_FAILED = `-2147156735`;
export const FTE_E_FD_FAILED_TO_LOAD_IFILTER = `-2147156734`;
export const FTE_E_FD_DOC_TIMEOUT = `-2147156733`;
export const FTE_E_FD_UNEXPECTED_EXIT = `-2147156732`;
export const FTE_E_FD_DOC_UNEXPECTED_EXIT = `-2147156731`;
export const FTE_E_FD_NOISE_NO_TEXT_FILTER = `-2147156730`;
export const FTE_E_FD_NOISE_NO_IPERSISTSTREAM_ON_TEXT_FILTER = `-2147156729`;
export const FTE_E_FD_NOISE_TEXT_FILTER_LOAD_FAILED = `-2147156728`;
export const FTE_E_FD_NOISE_TEXT_FILTER_INIT_FAILED = `-2147156727`;
export const FTE_E_FD_OCCURRENCE_OVERFLOW = `-2147156726`;
export const FTE_E_FD_FILTER_CAUSED_SHARING_VIOLATION = `-2147156725`;
export const ERROR_SOURCE_PROTHNDLR = 4608;
export const QUERY_E_ALLNOISE_AND_NO_RELDOC = 294438238129755661n;
export const QUERY_E_NO_RELDOC = 294439337641383438n;
export const QUERY_E_ALLNOISE_AND_NO_RELPROP = 294440437153011215n;
export const QUERY_E_NO_RELPROP = 294441536664638992n;
export const QUERY_E_REPEATED_RELDOC = 294442636176266769n;
export const QUERY_E_RELDOC_SYNTAX_NOT_SUPPORTED = 294443735687894546n;
export const QUERY_E_INVALID_DOCUMENT_IDENTIFIER = 294444835199522323n;
export const QUERY_E_INCORRECT_VERSION = 294445934711150100n;
export const QUERY_E_INVALIDSCOPE_COALESCE = 294447034222777877n;
export const QUERY_E_INVALIDSORT_COALESCE = 294448133734405654n;
export const QUERY_E_INVALIDCOALESCE = 294449233246033431n;
export const QUERY_E_UPGRADEINPROGRESS = 294450332757661208n;
export const QUERY_E_AGGREGATE_NOT_SUPPORTED = 294451432269288985n;
export const QUERY_E_TOP_LEVEL_IN_GROUP = 294452531780916762n;
export const QUERY_E_DUPLICATE_RANGE_NAME = 295030874897126939n;
export const CI_S_NEW_AUXMETADATA = 295031972261271593n;
export const CI_E_NO_AUXMETADATA = 295033073920383018n;
export const CI_S_CLIENT_REQUESTED_ABORT = 295034171284527147n;
export const CI_S_RETRY_DOCUMENT = 295035270796154924n;
export const CI_E_CORRUPT_FWIDX = 295036373529008173n;
export const CI_E_DIACRITIC_SETTINGS_DIFFER = 295037473040635950n;
export const CI_E_INVALID_CATALOG_LIST_VERSION = 295038571478521903n;
export const CI_S_CATALOG_RESET = 295039668842666032n;
export const CI_E_NO_CATALOG_MANAGER = 295040771575519281n;
export const CI_E_INCONSISTENT_TRANSACTION = 295041871087147058n;
export const CI_E_PROTECTED_CATALOG_NOT_AVAILABLE = 295042970598774835n;
export const CI_E_NO_PROTECTED_USER = 295044070110402612n;
export const CI_E_MULTIPLE_PROTECTED_USERS_UNSUPPORTED = 295045169622030389n;
export const CI_E_PROTECTED_CATALOG_SID_MISMATCH = 295046269133658166n;
export const CI_E_PROTECTED_CATALOG_NON_INTERACTIVE_USER = 4510217098500151;
export const MSG_CI_MASTER_MERGE_STARTED = 4511314462380038;
export const MSG_CI_MASTER_MERGE_COMPLETED = 4512413974007815;
export const MSG_CI_MASTER_MERGE_ABORTED = 4513513485635592;
export const MSG_CI_MASTER_MERGE_CANT_START = 4514615144747017;
export const MSG_CI_MASTER_MERGE_CANT_RESTART = 4531107819163658;
export const MSG_CI_MASTER_MERGE_RESTARTED = 4549797369352217;
export const MSG_CI_CORRUPT_INDEX_COMPONENT = 4577285160046634;
export const MSG_CI_MASTER_MERGE_ABORTED_LOW_DISK = 4578384671674435;
export const MSG_CI_MASTER_MERGE_REASON_EXTERNAL = 4579484183302212;
export const MSG_CI_MASTER_MERGE_REASON_INDEX_LIMIT = 4580583694929989;
export const MSG_CI_MASTER_MERGE_REASON_EXPECTED_DOCS = 4581683206557766;
export const MSG_CI_MASTER_MERGE_REASON_NUMBER = 4582782718185543;
export const MSG_CI_CREATE_SEVER_ITEM_FAILED = 579044623956054088n;
export const NOT_N_PARSE_ERROR = 290815345169008942n;
export const IDS_MON_DEFAULT_ERROR = 290816444680374575n;
export const IDS_MON_ILLEGAL_PASSTHROUGH = 290817544192002352n;
export const IDS_MON_PARSE_ERR_1_PARAM = 290818643703630129n;
export const IDS_MON_PARSE_ERR_2_PARAM = 290819743215257906n;
export const IDS_MON_SEMI_COLON = 290820842726885683n;
export const IDS_MON_ORDINAL_OUT_OF_RANGE = 290821942238513460n;
export const IDS_MON_VIEW_NOT_DEFINED = 290823041750141237n;
export const IDS_MON_COLUMN_NOT_DEFINED = 290824141261769014n;
export const IDS_MON_BUILTIN_VIEW = 290825240773396791n;
export const IDS_MON_OUT_OF_MEMORY = 290826340285024568n;
export const IDS_MON_SELECT_STAR = 290827439796652345n;
export const IDS_MON_OR_NOT = 290828539308280122n;
export const IDS_MON_CANNOT_CONVERT = 290829638819907899n;
export const IDS_MON_OUT_OF_RANGE = 290830738331535676n;
export const IDS_MON_RELATIVE_INTERVAL = 290831837843163453n;
export const IDS_MON_NOT_COLUMN_OF_VIEW = 290832937354791230n;
export const IDS_MON_BUILTIN_PROPERTY = 290834036866419007n;
export const IDS_MON_WEIGHT_OUT_OF_RANGE = 290835136378046784n;
export const IDS_MON_MATCH_STRING = 290836235889674561n;
export const IDS_MON_PROPERTY_NAME_IN_VIEW = 290837335401302338n;
export const IDS_MON_VIEW_ALREADY_DEFINED = 290838434912930115n;
export const IDS_MON_INVALID_CATALOG = 290839534424557892n;
export const IDS_MON_INVALIDSELECT_COALESCE = 290840633936185669n;
export const IDS_MON_CANNOT_CAST = 290841733447813446n;
export const IDS_MON_DATE_OUT_OF_RANGE = 290842832959441223n;
export const IDS_MON_INVALID_IN_GROUP_CLAUSE = 434034465627703624n;
export const PROGID_MSPersist_W = `MSPersist`;
export const PROGID_MSPersist_Version_W = `MSPersist.1`;
export const VT_EMPTY = 0;
export const VT_NULL = 1;
export const VT_I2 = 2;
export const VT_I4 = 3;
export const VT_R4 = 4;
export const VT_R8 = 5;
export const VT_CY = 6;
export const VT_DATE = 7;
export const VT_BSTR = 8;
export const VT_DISPATCH = 9;
export const VT_ERROR = 10;
export const VT_BOOL = 11;
export const VT_VARIANT = 12;
export const VT_UNKNOWN = 13;
export const VT_DECIMAL = 14;
export const VT_I1 = 16;
export const VT_UI1 = 17;
export const VT_UI2 = 18;
export const VT_UI4 = 19;
export const VT_I8 = 20;
export const VT_UI8 = 21;
export const VT_INT = 22;
export const VT_UINT = 23;
export const VT_VOID = 24;
export const VT_HRESULT = 25;
export const VT_PTR = 26;
export const VT_SAFEARRAY = 27;
export const VT_CARRAY = 28;
export const VT_USERDEFINED = 29;
export const VT_LPSTR = 30;
export const VT_LPWSTR = 31;
export const VT_RECORD = 36;
export const VT_INT_PTR = 37;
export const VT_UINT_PTR = 38;
export const VT_FILETIME = 64;
export const VT_BLOB = 65;
export const VT_STREAM = 66;
export const VT_STORAGE = 67;
export const VT_STREAMED_OBJECT = 68;
export const VT_STORED_OBJECT = 69;
export const VT_BLOB_OBJECT = 70;
export const VT_CF = 71;
export const VT_CLSID = 72;
export const VT_VERSIONED_STREAM = 73;
export const VT_BSTR_BLOB = 4095;
export const VT_VECTOR = 4096;
export const VT_ARRAY = 8192;
export const VT_BYREF = 16384;
export const VT_RESERVED = 32768;
export const VT_ILLEGAL = 65535;
export const VT_ILLEGALMASKED = 4095;
export const VT_TYPEMASK = 4095;
export const DBTYPE_EMPTY = 0;
export const DBTYPE_NULL = 1;
export const DBTYPE_I2 = 2;
export const DBTYPE_I4 = 3;
export const DBTYPE_R4 = 4;
export const DBTYPE_R8 = 5;
export const DBTYPE_CY = 6;
export const DBTYPE_DATE = 7;
export const DBTYPE_BSTR = 8;
export const DBTYPE_IDISPATCH = 9;
export const DBTYPE_ERROR = 10;
export const DBTYPE_BOOL = 11;
export const DBTYPE_VARIANT = 12;
export const DBTYPE_IUNKNOWN = 13;
export const DBTYPE_DECIMAL = 14;
export const DBTYPE_UI1 = 17;
export const DBTYPE_ARRAY = 8192;
export const DBTYPE_BYREF = 16384;
export const DBTYPE_I1 = 16;
export const DBTYPE_UI2 = 18;
export const DBTYPE_UI4 = 19;
export const DBTYPE_I8 = 20;
export const DBTYPE_UI8 = 21;
export const DBTYPE_GUID = 72;
export const DBTYPE_VECTOR = 4096;
export const DBTYPE_RESERVED = 32768;
export const DBTYPE_BYTES = 128;
export const DBTYPE_STR = 129;
export const DBTYPE_WSTR = 130;
export const DBTYPE_NUMERIC = 131;
export const DBTYPE_UDT = 132;
export const DBTYPE_DBDATE = 133;
export const DBTYPE_DBTIME = 134;
export const DBTYPE_DBTIMESTAMP = 135;
export const DBTYPE_HCHAPTER = 136;
export const DBTYPE_FILETIME = 64;
export const DBTYPE_PROPVARIANT = 138;
export const DBTYPE_VARNUMERIC = 139;
export const DBPART_INVALID = 0;
export const DBPART_VALUE = 1;
export const DBPART_LENGTH = 2;
export const DBPART_STATUS = 4;
export const DBPARAMIO_NOTPARAM = 0;
export const DBPARAMIO_INPUT = 1;
export const DBPARAMIO_OUTPUT = 2;
export const DBBINDFLAG_HTML = 1;
export const DBMEMOWNER_CLIENTOWNED = 0;
export const DBMEMOWNER_PROVIDEROWNED = 1;
export const DBSTATUS_S_OK = 0;
export const DBSTATUS_E_BADACCESSOR = 1;
export const DBSTATUS_E_CANTCONVERTVALUE = 2;
export const DBSTATUS_S_ISNULL = 3;
export const DBSTATUS_S_TRUNCATED = 4;
export const DBSTATUS_E_SIGNMISMATCH = 5;
export const DBSTATUS_E_DATAOVERFLOW = 6;
export const DBSTATUS_E_CANTCREATE = 7;
export const DBSTATUS_E_UNAVAILABLE = 8;
export const DBSTATUS_E_PERMISSIONDENIED = 9;
export const DBSTATUS_E_INTEGRITYVIOLATION = 10;
export const DBSTATUS_E_SCHEMAVIOLATION = 11;
export const DBSTATUS_E_BADSTATUS = 12;
export const DBSTATUS_S_DEFAULT = 13;
export const MDSTATUS_S_CELLEMPTY = 14;
export const DBSTATUS_S_IGNORE = 15;
export const DBSTATUS_E_DOESNOTEXIST = 16;
export const DBSTATUS_E_INVALIDURL = 17;
export const DBSTATUS_E_RESOURCELOCKED = 18;
export const DBSTATUS_E_RESOURCEEXISTS = 19;
export const DBSTATUS_E_CANNOTCOMPLETE = 20;
export const DBSTATUS_E_VOLUMENOTFOUND = 21;
export const DBSTATUS_E_OUTOFSPACE = 22;
export const DBSTATUS_S_CANNOTDELETESOURCE = 23;
export const DBSTATUS_E_READONLY = 24;
export const DBSTATUS_E_RESOURCEOUTOFSCOPE = 25;
export const DBSTATUS_S_ALREADYEXISTS = 26;
export const DBBINDURLFLAG_READ = 1;
export const DBBINDURLFLAG_WRITE = 2;
export const DBBINDURLFLAG_READWRITE = 3;
export const DBBINDURLFLAG_SHARE_DENY_READ = 4;
export const DBBINDURLFLAG_SHARE_DENY_WRITE = 8;
export const DBBINDURLFLAG_SHARE_EXCLUSIVE = 12;
export const DBBINDURLFLAG_SHARE_DENY_NONE = 16;
export const DBBINDURLFLAG_ASYNCHRONOUS = 4096;
export const DBBINDURLFLAG_COLLECTION = 8192;
export const DBBINDURLFLAG_DELAYFETCHSTREAM = 16384;
export const DBBINDURLFLAG_DELAYFETCHCOLUMNS = 32768;
export const DBBINDURLFLAG_RECURSIVE = 4194304;
export const DBBINDURLFLAG_OUTPUT = 8388608;
export const DBBINDURLFLAG_WAITFORINIT = 16777216;
export const DBBINDURLFLAG_OPENIFEXISTS = 33554432;
export const DBBINDURLFLAG_OVERWRITE = 67108864;
export const DBBINDURLFLAG_ISSTRUCTUREDDOCUMENT = 134217728;
export const DBBINDURLSTATUS_S_OK = 0;
export const DBBINDURLSTATUS_S_DENYNOTSUPPORTED = 1;
export const DBBINDURLSTATUS_S_DENYTYPENOTSUPPORTED = 4;
export const DBBINDURLSTATUS_S_REDIRECTED = 8;
export const DBSTATUS_E_CANCELED = 27;
export const DBSTATUS_E_NOTCOLLECTION = 28;
export const DBROWSTATUS_S_OK = 0;
export const DBROWSTATUS_S_MULTIPLECHANGES = 2;
export const DBROWSTATUS_S_PENDINGCHANGES = 3;
export const DBROWSTATUS_E_CANCELED = 4;
export const DBROWSTATUS_E_CANTRELEASE = 6;
export const DBROWSTATUS_E_CONCURRENCYVIOLATION = 7;
export const DBROWSTATUS_E_DELETED = 8;
export const DBROWSTATUS_E_PENDINGINSERT = 9;
export const DBROWSTATUS_E_NEWLYINSERTED = 10;
export const DBROWSTATUS_E_INTEGRITYVIOLATION = 11;
export const DBROWSTATUS_E_INVALID = 12;
export const DBROWSTATUS_E_MAXPENDCHANGESEXCEEDED = 13;
export const DBROWSTATUS_E_OBJECTOPEN = 14;
export const DBROWSTATUS_E_OUTOFMEMORY = 15;
export const DBROWSTATUS_E_PERMISSIONDENIED = 16;
export const DBROWSTATUS_E_LIMITREACHED = 17;
export const DBROWSTATUS_E_SCHEMAVIOLATION = 18;
export const DBROWSTATUS_E_FAIL = 19;
export const DBROWSTATUS_S_NOCHANGE = 20;
export const DBSTATUS_S_ROWSETCOLUMN = 29;
export const DBCOLUMNFLAGS_ISBOOKMARK = 1;
export const DBCOLUMNFLAGS_MAYDEFER = 2;
export const DBCOLUMNFLAGS_WRITE = 4;
export const DBCOLUMNFLAGS_WRITEUNKNOWN = 8;
export const DBCOLUMNFLAGS_ISFIXEDLENGTH = 16;
export const DBCOLUMNFLAGS_ISNULLABLE = 32;
export const DBCOLUMNFLAGS_MAYBENULL = 64;
export const DBCOLUMNFLAGS_ISLONG = 128;
export const DBCOLUMNFLAGS_ISROWID = 256;
export const DBCOLUMNFLAGS_ISROWVER = 512;
export const DBCOLUMNFLAGS_CACHEDEFERRED = 4096;
export const DBCOLUMNFLAGS_SCALEISNEGATIVE = 16384;
export const DBCOLUMNFLAGS_RESERVED = 32768;
export const DBCOLUMNFLAGS_ISCHAPTER = 8192;
export const DBCOLUMNFLAGS_ISROWURL = 65536;
export const DBCOLUMNFLAGS_ISDEFAULTSTREAM = 131072;
export const DBCOLUMNFLAGS_ISCOLLECTION = 262144;
export const DBCOLUMNFLAGS_ISSTREAM = 524288;
export const DBCOLUMNFLAGS_ISROWSET = 1048576;
export const DBCOLUMNFLAGS_ISROW = 2097152;
export const DBCOLUMNFLAGS_ROWSPECIFICCOLUMN = 4194304;
export const DBSTAT_HISTOGRAM = 1;
export const DBSTAT_COLUMN_CARDINALITY = 2;
export const DBSTAT_TUPLE_CARDINALITY = 4;
export const DBBMK_INVALID = 0;
export const DBBMK_FIRST = 1;
export const DBBMK_LAST = 2;
export const DBPROP_ABORTPRESERVE = 2;
export const DBPROP_ACTIVESESSIONS = 3;
export const DBPROP_APPENDONLY = 187;
export const DBPROP_ASYNCTXNABORT = 168;
export const DBPROP_ASYNCTXNCOMMIT = 4;
export const DBPROP_AUTH_CACHE_AUTHINFO = 5;
export const DBPROP_AUTH_ENCRYPT_PASSWORD = 6;
export const DBPROP_AUTH_INTEGRATED = 7;
export const DBPROP_AUTH_MASK_PASSWORD = 8;
export const DBPROP_AUTH_PASSWORD = 9;
export const DBPROP_AUTH_PERSIST_ENCRYPTED = 10;
export const DBPROP_AUTH_PERSIST_SENSITIVE_AUTHINFO = 11;
export const DBPROP_AUTH_USERID = 12;
export const DBPROP_BLOCKINGSTORAGEOBJECTS = 13;
export const DBPROP_BOOKMARKS = 14;
export const DBPROP_BOOKMARKSKIPPED = 15;
export const DBPROP_BOOKMARKTYPE = 16;
export const DBPROP_BYREFACCESSORS = 120;
export const DBPROP_CACHEDEFERRED = 17;
export const DBPROP_CANFETCHBACKWARDS = 18;
export const DBPROP_CANHOLDROWS = 19;
export const DBPROP_CANSCROLLBACKWARDS = 21;
export const DBPROP_CATALOGLOCATION = 22;
export const DBPROP_CATALOGTERM = 23;
export const DBPROP_CATALOGUSAGE = 24;
export const DBPROP_CHANGEINSERTEDROWS = 188;
export const DBPROP_COL_AUTOINCREMENT = 26;
export const DBPROP_COL_DEFAULT = 27;
export const DBPROP_COL_DESCRIPTION = 28;
export const DBPROP_COL_FIXEDLENGTH = 167;
export const DBPROP_COL_NULLABLE = 29;
export const DBPROP_COL_PRIMARYKEY = 30;
export const DBPROP_COL_UNIQUE = 31;
export const DBPROP_COLUMNDEFINITION = 32;
export const DBPROP_COLUMNRESTRICT = 33;
export const DBPROP_COMMANDTIMEOUT = 34;
export const DBPROP_COMMITPRESERVE = 35;
export const DBPROP_CONCATNULLBEHAVIOR = 36;
export const DBPROP_CURRENTCATALOG = 37;
export const DBPROP_DATASOURCENAME = 38;
export const DBPROP_DATASOURCEREADONLY = 39;
export const DBPROP_DBMSNAME = 40;
export const DBPROP_DBMSVER = 41;
export const DBPROP_DEFERRED = 42;
export const DBPROP_DELAYSTORAGEOBJECTS = 43;
export const DBPROP_DSOTHREADMODEL = 169;
export const DBPROP_GROUPBY = 44;
export const DBPROP_HETEROGENEOUSTABLES = 45;
export const DBPROP_IAccessor = 121;
export const DBPROP_IColumnsInfo = 122;
export const DBPROP_IColumnsRowset = 123;
export const DBPROP_IConnectionPointContainer = 124;
export const DBPROP_IConvertType = 194;
export const DBPROP_IRowset = 126;
export const DBPROP_IRowsetChange = 127;
export const DBPROP_IRowsetIdentity = 128;
export const DBPROP_IRowsetIndex = 159;
export const DBPROP_IRowsetInfo = 129;
export const DBPROP_IRowsetLocate = 130;
export const DBPROP_IRowsetResynch = 132;
export const DBPROP_IRowsetScroll = 133;
export const DBPROP_IRowsetUpdate = 134;
export const DBPROP_ISupportErrorInfo = 135;
export const DBPROP_ILockBytes = 136;
export const DBPROP_ISequentialStream = 137;
export const DBPROP_IStorage = 138;
export const DBPROP_IStream = 139;
export const DBPROP_IDENTIFIERCASE = 46;
export const DBPROP_IMMOBILEROWS = 47;
export const DBPROP_INDEX_AUTOUPDATE = 48;
export const DBPROP_INDEX_CLUSTERED = 49;
export const DBPROP_INDEX_FILLFACTOR = 50;
export const DBPROP_INDEX_INITIALSIZE = 51;
export const DBPROP_INDEX_NULLCOLLATION = 52;
export const DBPROP_INDEX_NULLS = 53;
export const DBPROP_INDEX_PRIMARYKEY = 54;
export const DBPROP_INDEX_SORTBOOKMARKS = 55;
export const DBPROP_INDEX_TEMPINDEX = 163;
export const DBPROP_INDEX_TYPE = 56;
export const DBPROP_INDEX_UNIQUE = 57;
export const DBPROP_INIT_DATASOURCE = 59;
export const DBPROP_INIT_HWND = 60;
export const DBPROP_INIT_IMPERSONATION_LEVEL = 61;
export const DBPROP_INIT_LCID = 186;
export const DBPROP_INIT_LOCATION = 62;
export const DBPROP_INIT_MODE = 63;
export const DBPROP_INIT_PROMPT = 64;
export const DBPROP_INIT_PROTECTION_LEVEL = 65;
export const DBPROP_INIT_PROVIDERSTRING = 160;
export const DBPROP_INIT_TIMEOUT = 66;
export const DBPROP_LITERALBOOKMARKS = 67;
export const DBPROP_LITERALIDENTITY = 68;
export const DBPROP_MAXINDEXSIZE = 70;
export const DBPROP_MAXOPENROWS = 71;
export const DBPROP_MAXPENDINGROWS = 72;
export const DBPROP_MAXROWS = 73;
export const DBPROP_MAXROWSIZE = 74;
export const DBPROP_MAXROWSIZEINCLUDESBLOB = 75;
export const DBPROP_MAXTABLESINSELECT = 76;
export const DBPROP_MAYWRITECOLUMN = 77;
export const DBPROP_MEMORYUSAGE = 78;
export const DBPROP_MULTIPLEPARAMSETS = 191;
export const DBPROP_MULTIPLERESULTS = 196;
export const DBPROP_MULTIPLESTORAGEOBJECTS = 80;
export const DBPROP_MULTITABLEUPDATE = 81;
export const DBPROP_NOTIFICATIONGRANULARITY = 198;
export const DBPROP_NOTIFICATIONPHASES = 82;
export const DBPROP_NOTIFYCOLUMNSET = 171;
export const DBPROP_NOTIFYROWDELETE = 173;
export const DBPROP_NOTIFYROWFIRSTCHANGE = 174;
export const DBPROP_NOTIFYROWINSERT = 175;
export const DBPROP_NOTIFYROWRESYNCH = 177;
export const DBPROP_NOTIFYROWSETCHANGED = 211;
export const DBPROP_NOTIFYROWSETRELEASE = 178;
export const DBPROP_NOTIFYROWSETFETCHPOSITIONCHANGE = 179;
export const DBPROP_NOTIFYROWUNDOCHANGE = 180;
export const DBPROP_NOTIFYROWUNDODELETE = 181;
export const DBPROP_NOTIFYROWUNDOINSERT = 182;
export const DBPROP_NOTIFYROWUPDATE = 183;
export const DBPROP_NULLCOLLATION = 83;
export const DBPROP_OLEOBJECTS = 84;
export const DBPROP_ORDERBYCOLUMNSINSELECT = 85;
export const DBPROP_ORDEREDBOOKMARKS = 86;
export const DBPROP_OTHERINSERT = 87;
export const DBPROP_OTHERUPDATEDELETE = 88;
export const DBPROP_OUTPUTPARAMETERAVAILABILITY = 184;
export const DBPROP_OWNINSERT = 89;
export const DBPROP_OWNUPDATEDELETE = 90;
export const DBPROP_PERSISTENTIDTYPE = 185;
export const DBPROP_PREPAREABORTBEHAVIOR = 91;
export const DBPROP_PREPARECOMMITBEHAVIOR = 92;
export const DBPROP_PROCEDURETERM = 93;
export const DBPROP_PROVIDERNAME = 96;
export const DBPROP_PROVIDEROLEDBVER = 97;
export const DBPROP_PROVIDERVER = 98;
export const DBPROP_QUICKRESTART = 99;
export const DBPROP_QUOTEDIDENTIFIERCASE = 100;
export const DBPROP_REENTRANTEVENTS = 101;
export const DBPROP_REMOVEDELETED = 102;
export const DBPROP_REPORTMULTIPLECHANGES = 103;
export const DBPROP_RETURNPENDINGINSERTS = 189;
export const DBPROP_ROWRESTRICT = 104;
export const DBPROP_ROWSETCONVERSIONSONCOMMAND = 192;
export const DBPROP_ROWTHREADMODEL = 105;
export const DBPROP_SCHEMATERM = 106;
export const DBPROP_SCHEMAUSAGE = 107;
export const DBPROP_SERVERCURSOR = 108;
export const DBPROP_SESS_AUTOCOMMITISOLEVELS = 190;
export const DBPROP_SQLSUPPORT = 109;
export const DBPROP_STRONGIDENTITY = 119;
export const DBPROP_STRUCTUREDSTORAGE = 111;
export const DBPROP_SUBQUERIES = 112;
export const DBPROP_SUPPORTEDTXNDDL = 161;
export const DBPROP_SUPPORTEDTXNISOLEVELS = 113;
export const DBPROP_SUPPORTEDTXNISORETAIN = 114;
export const DBPROP_TABLETERM = 115;
export const DBPROP_TBL_TEMPTABLE = 140;
export const DBPROP_TRANSACTEDOBJECT = 116;
export const DBPROP_UPDATABILITY = 117;
export const DBPROP_USERNAME = 118;
export const DBPROP_FILTERCOMPAREOPS = 209;
export const DBPROP_FINDCOMPAREOPS = 210;
export const DBPROP_IChapteredRowset = 202;
export const DBPROP_IDBAsynchStatus = 203;
export const DBPROP_IRowsetFind = 204;
export const DBPROP_IRowsetView = 212;
export const DBPROP_IViewChapter = 213;
export const DBPROP_IViewFilter = 214;
export const DBPROP_IViewRowset = 215;
export const DBPROP_IViewSort = 216;
export const DBPROP_INIT_ASYNCH = 200;
export const DBPROP_MAXOPENCHAPTERS = 199;
export const DBPROP_MAXORSINFILTER = 205;
export const DBPROP_MAXSORTCOLUMNS = 206;
export const DBPROP_ROWSET_ASYNCH = 201;
export const DBPROP_SORTONINDEX = 207;
export const DBPROP_IMultipleResults = 217;
export const DBPROP_DATASOURCE_TYPE = 251;
export const MDPROP_AXES = 252;
export const MDPROP_FLATTENING_SUPPORT = 253;
export const MDPROP_MDX_JOINCUBES = 254;
export const MDPROP_NAMED_LEVELS = 255;
export const MDPROP_RANGEROWSET = 256;
export const MDPROP_MDX_SLICER = 218;
export const MDPROP_MDX_CUBEQUALIFICATION = 219;
export const MDPROP_MDX_OUTERREFERENCE = 220;
export const MDPROP_MDX_QUERYBYPROPERTY = 221;
export const MDPROP_MDX_CASESUPPORT = 222;
export const MDPROP_MDX_STRING_COMPOP = 224;
export const MDPROP_MDX_DESCFLAGS = 225;
export const MDPROP_MDX_SET_FUNCTIONS = 226;
export const MDPROP_MDX_MEMBER_FUNCTIONS = 227;
export const MDPROP_MDX_NUMERIC_FUNCTIONS = 228;
export const MDPROP_MDX_FORMULAS = 229;
export const MDPROP_AGGREGATECELL_UPDATE = 230;
export const MDPROP_MDX_AGGREGATECELL_UPDATE = 230;
export const MDPROP_MDX_OBJQUALIFICATION = 261;
export const MDPROP_MDX_NONMEASURE_EXPRESSIONS = 262;
export const DBPROP_ACCESSORDER = 231;
export const DBPROP_BOOKMARKINFO = 232;
export const DBPROP_INIT_CATALOG = 233;
export const DBPROP_ROW_BULKOPS = 234;
export const DBPROP_PROVIDERFRIENDLYNAME = 235;
export const DBPROP_LOCKMODE = 236;
export const DBPROP_MULTIPLECONNECTIONS = 237;
export const DBPROP_UNIQUEROWS = 238;
export const DBPROP_SERVERDATAONINSERT = 239;
export const DBPROP_STORAGEFLAGS = 240;
export const DBPROP_CONNECTIONSTATUS = 244;
export const DBPROP_ALTERCOLUMN = 245;
export const DBPROP_COLUMNLCID = 246;
export const DBPROP_RESETDATASOURCE = 247;
export const DBPROP_INIT_OLEDBSERVICES = 248;
export const DBPROP_IRowsetRefresh = 249;
export const DBPROP_SERVERNAME = 250;
export const DBPROP_IParentRowset = 257;
export const DBPROP_HIDDENCOLUMNS = 258;
export const DBPROP_PROVIDERMEMORY = 259;
export const DBPROP_CLIENTCURSOR = 260;
export const DBPROP_TRUSTEE_USERNAME = 241;
export const DBPROP_TRUSTEE_AUTHENTICATION = 242;
export const DBPROP_TRUSTEE_NEWAUTHENTICATION = 243;
export const DBPROP_IRow = 263;
export const DBPROP_IRowChange = 264;
export const DBPROP_IRowSchemaChange = 265;
export const DBPROP_IGetRow = 266;
export const DBPROP_IScopedOperations = 267;
export const DBPROP_IBindResource = 268;
export const DBPROP_ICreateRow = 269;
export const DBPROP_INIT_BINDFLAGS = 270;
export const DBPROP_INIT_LOCKOWNER = 271;
export const DBPROP_GENERATEURL = 273;
export const DBPROP_IDBBinderProperties = 274;
export const DBPROP_IColumnsInfo2 = 275;
export const DBPROP_IRegisterProvider = 276;
export const DBPROP_IGetSession = 277;
export const DBPROP_IGetSourceRow = 278;
export const DBPROP_IRowsetCurrentIndex = 279;
export const DBPROP_OPENROWSETSUPPORT = 280;
export const DBPROP_COL_ISLONG = 281;
export const DBPROP_COL_SEED = 282;
export const DBPROP_COL_INCREMENT = 283;
export const DBPROP_INIT_GENERALTIMEOUT = 284;
export const DBPROP_COMSERVICES = 285;
export const DBPROP_OUTPUTSTREAM = 286;
export const DBPROP_OUTPUTENCODING = 287;
export const DBPROP_TABLESTATISTICS = 288;
export const DBPROP_SKIPROWCOUNTRESULTS = 291;
export const DBPROP_IRowsetBookmark = 292;
export const MDPROP_VISUALMODE = 293;
export const DBPARAMFLAGS_ISINPUT = 1;
export const DBPARAMFLAGS_ISOUTPUT = 2;
export const DBPARAMFLAGS_ISSIGNED = 16;
export const DBPARAMFLAGS_ISNULLABLE = 64;
export const DBPARAMFLAGS_ISLONG = 128;
export const DBPARAMFLAGS_SCALEISNEGATIVE = 256;
export const DBPROPFLAGS_NOTSUPPORTED = 0;
export const DBPROPFLAGS_COLUMN = 1;
export const DBPROPFLAGS_DATASOURCE = 2;
export const DBPROPFLAGS_DATASOURCECREATE = 4;
export const DBPROPFLAGS_DATASOURCEINFO = 8;
export const DBPROPFLAGS_DBINIT = 16;
export const DBPROPFLAGS_INDEX = 32;
export const DBPROPFLAGS_ROWSET = 64;
export const DBPROPFLAGS_TABLE = 128;
export const DBPROPFLAGS_COLUMNOK = 256;
export const DBPROPFLAGS_READ = 512;
export const DBPROPFLAGS_WRITE = 1024;
export const DBPROPFLAGS_REQUIRED = 2048;
export const DBPROPFLAGS_SESSION = 4096;
export const DBPROPFLAGS_TRUSTEE = 8192;
export const DBPROPFLAGS_VIEW = 16384;
export const DBPROPFLAGS_STREAM = 32768;
export const DBPROPOPTIONS_REQUIRED = 0;
export const DBPROPOPTIONS_SETIFCHEAP = 1;
export const DBPROPOPTIONS_OPTIONAL = 1;
export const DBPROPSTATUS_OK = 0;
export const DBPROPSTATUS_NOTSUPPORTED = 1;
export const DBPROPSTATUS_BADVALUE = 2;
export const DBPROPSTATUS_BADOPTION = 3;
export const DBPROPSTATUS_BADCOLUMN = 4;
export const DBPROPSTATUS_NOTALLSETTABLE = 5;
export const DBPROPSTATUS_NOTSETTABLE = 6;
export const DBPROPSTATUS_NOTSET = 7;
export const DBPROPSTATUS_CONFLICTING = 8;
export const DBPROPSTATUS_NOTAVAILABLE = 9;
export const DBINDEX_COL_ORDER_ASC = 0;
export const DBINDEX_COL_ORDER_DESC = 1;
export const DBCOLUMNDESCFLAGS_TYPENAME = 1;
export const DBCOLUMNDESCFLAGS_ITYPEINFO = 2;
export const DBCOLUMNDESCFLAGS_PROPERTIES = 4;
export const DBCOLUMNDESCFLAGS_CLSID = 8;
export const DBCOLUMNDESCFLAGS_COLSIZE = 16;
export const DBCOLUMNDESCFLAGS_DBCID = 32;
export const DBCOLUMNDESCFLAGS_WTYPE = 64;
export const DBCOLUMNDESCFLAGS_PRECISION = 128;
export const DBCOLUMNDESCFLAGS_SCALE = 256;
export const DBEVENTPHASE_OKTODO = 0;
export const DBEVENTPHASE_ABOUTTODO = 1;
export const DBEVENTPHASE_SYNCHAFTER = 2;
export const DBEVENTPHASE_FAILEDTODO = 3;
export const DBEVENTPHASE_DIDEVENT = 4;
export const DBREASON_ROWSET_FETCHPOSITIONCHANGE = 0;
export const DBREASON_ROWSET_RELEASE = 1;
export const DBREASON_COLUMN_SET = 2;
export const DBREASON_COLUMN_RECALCULATED = 3;
export const DBREASON_ROW_ACTIVATE = 4;
export const DBREASON_ROW_RELEASE = 5;
export const DBREASON_ROW_DELETE = 6;
export const DBREASON_ROW_FIRSTCHANGE = 7;
export const DBREASON_ROW_INSERT = 8;
export const DBREASON_ROW_RESYNCH = 9;
export const DBREASON_ROW_UNDOCHANGE = 10;
export const DBREASON_ROW_UNDOINSERT = 11;
export const DBREASON_ROW_UNDODELETE = 12;
export const DBREASON_ROW_UPDATE = 13;
export const DBREASON_ROWSET_CHANGED = 14;
export const DBREASON_ROWPOSITION_CHANGED = 15;
export const DBREASON_ROWPOSITION_CHAPTERCHANGED = 16;
export const DBREASON_ROWPOSITION_CLEARED = 17;
export const DBREASON_ROW_ASYNCHINSERT = 18;
export const DBCOMPAREOPS_LT = 0;
export const DBCOMPAREOPS_LE = 1;
export const DBCOMPAREOPS_EQ = 2;
export const DBCOMPAREOPS_GE = 3;
export const DBCOMPAREOPS_GT = 4;
export const DBCOMPAREOPS_BEGINSWITH = 5;
export const DBCOMPAREOPS_CONTAINS = 6;
export const DBCOMPAREOPS_NE = 7;
export const DBCOMPAREOPS_IGNORE = 8;
export const DBCOMPAREOPS_CASESENSITIVE = 4096;
export const DBCOMPAREOPS_CASEINSENSITIVE = 8192;
export const DBCOMPAREOPS_NOTBEGINSWITH = 9;
export const DBCOMPAREOPS_NOTCONTAINS = 10;
export const DBASYNCHOP_OPEN = 0;
export const DBASYNCHPHASE_INITIALIZATION = 0;
export const DBASYNCHPHASE_POPULATION = 1;
export const DBASYNCHPHASE_COMPLETE = 2;
export const DBASYNCHPHASE_CANCELED = 3;
export const DBSORT_ASCENDING = 0;
export const DBSORT_DESCENDING = 1;
export const DBCOMMANDPERSISTFLAG_NOSAVE = 1;
export const DBCOMMANDPERSISTFLAG_DEFAULT = 0;
export const DBCOMMANDPERSISTFLAG_PERSISTVIEW = 2;
export const DBCOMMANDPERSISTFLAG_PERSISTPROCEDURE = 4;
export const DBCONSTRAINTTYPE_UNIQUE = 0;
export const DBCONSTRAINTTYPE_FOREIGNKEY = 1;
export const DBCONSTRAINTTYPE_PRIMARYKEY = 2;
export const DBCONSTRAINTTYPE_CHECK = 3;
export const DBUPDELRULE_NOACTION = 0;
export const DBUPDELRULE_CASCADE = 1;
export const DBUPDELRULE_SETNULL = 2;
export const DBUPDELRULE_SETDEFAULT = 3;
export const DBMATCHTYPE_FULL = 0;
export const DBMATCHTYPE_NONE = 1;
export const DBMATCHTYPE_PARTIAL = 2;
export const DBDEFERRABILITY_DEFERRED = 1;
export const DBDEFERRABILITY_DEFERRABLE = 2;
export const DBACCESSOR_INVALID = 0;
export const DBACCESSOR_PASSBYREF = 1;
export const DBACCESSOR_ROWDATA = 2;
export const DBACCESSOR_PARAMETERDATA = 4;
export const DBACCESSOR_OPTIMIZED = 8;
export const DBACCESSOR_INHERITED = 16;
export const DBBINDSTATUS_OK = 0;
export const DBBINDSTATUS_BADORDINAL = 1;
export const DBBINDSTATUS_UNSUPPORTEDCONVERSION = 2;
export const DBBINDSTATUS_BADBINDINFO = 3;
export const DBBINDSTATUS_BADSTORAGEFLAGS = 4;
export const DBBINDSTATUS_NOINTERFACE = 5;
export const DBBINDSTATUS_MULTIPLESTORAGE = 6;
export const DBCOMPARE_LT = 0;
export const DBCOMPARE_EQ = 1;
export const DBCOMPARE_GT = 2;
export const DBCOMPARE_NE = 3;
export const DBCOMPARE_NOTCOMPARABLE = 4;
export const DBPOSITION_OK = 0;
export const DBPOSITION_NOROW = 1;
export const DBPOSITION_BOF = 2;
export const DBPOSITION_EOF = 3;
export const DBPENDINGSTATUS_NEW = 1;
export const DBPENDINGSTATUS_CHANGED = 2;
export const DBPENDINGSTATUS_DELETED = 4;
export const DBPENDINGSTATUS_UNCHANGED = 8;
export const DBPENDINGSTATUS_INVALIDROW = 16;
export const DBSEEK_INVALID = 0;
export const DBSEEK_FIRSTEQ = 1;
export const DBSEEK_LASTEQ = 2;
export const DBSEEK_AFTEREQ = 4;
export const DBSEEK_AFTER = 8;
export const DBSEEK_BEFOREEQ = 16;
export const DBSEEK_BEFORE = 32;
export const DBRANGE_INCLUSIVESTART = 0;
export const DBRANGE_INCLUSIVEEND = 0;
export const DBRANGE_EXCLUSIVESTART = 1;
export const DBRANGE_EXCLUSIVEEND = 2;
export const DBRANGE_EXCLUDENULLS = 4;
export const DBRANGE_PREFIX = 8;
export const DBRANGE_MATCH = 16;
export const DBRANGE_MATCH_N_SHIFT = 24;
export const DBRANGE_MATCH_N_MASK = 255;
export const DBRESULTFLAG_DEFAULT = 0;
export const DBRESULTFLAG_ROWSET = 1;
export const DBRESULTFLAG_ROW = 2;
export const DBCONVERTFLAGS_COLUMN = 0;
export const DBCONVERTFLAGS_PARAMETER = 1;
export const DBCONVERTFLAGS_ISLONG = 2;
export const DBCONVERTFLAGS_ISFIXEDLENGTH = 4;
export const DBCONVERTFLAGS_FROMVARIANT = 8;
export const DBSOURCETYPE_DATASOURCE = 1;
export const DBSOURCETYPE_ENUMERATOR = 2;
export const DBSOURCETYPE_DATASOURCE_TDP = 1;
export const DBSOURCETYPE_DATASOURCE_MDP = 3;
export const DBSOURCETYPE_BINDER = 4;
export const DBLITERAL_INVALID = 0;
export const DBLITERAL_BINARY_LITERAL = 1;
export const DBLITERAL_CATALOG_NAME = 2;
export const DBLITERAL_CATALOG_SEPARATOR = 3;
export const DBLITERAL_CHAR_LITERAL = 4;
export const DBLITERAL_COLUMN_ALIAS = 5;
export const DBLITERAL_COLUMN_NAME = 6;
export const DBLITERAL_CORRELATION_NAME = 7;
export const DBLITERAL_CURSOR_NAME = 8;
export const DBLITERAL_ESCAPE_PERCENT = 9;
export const DBLITERAL_ESCAPE_UNDERSCORE = 10;
export const DBLITERAL_INDEX_NAME = 11;
export const DBLITERAL_LIKE_PERCENT = 12;
export const DBLITERAL_LIKE_UNDERSCORE = 13;
export const DBLITERAL_PROCEDURE_NAME = 14;
export const DBLITERAL_QUOTE = 15;
export const DBLITERAL_SCHEMA_NAME = 16;
export const DBLITERAL_TABLE_NAME = 17;
export const DBLITERAL_TEXT_COMMAND = 18;
export const DBLITERAL_USER_NAME = 19;
export const DBLITERAL_VIEW_NAME = 20;
export const DBLITERAL_CUBE_NAME = 21;
export const DBLITERAL_DIMENSION_NAME = 22;
export const DBLITERAL_HIERARCHY_NAME = 23;
export const DBLITERAL_LEVEL_NAME = 24;
export const DBLITERAL_MEMBER_NAME = 25;
export const DBLITERAL_PROPERTY_NAME = 26;
export const DBLITERAL_SCHEMA_SEPARATOR = 27;
export const DBLITERAL_QUOTE_SUFFIX = 28;
export const DBLITERAL_ESCAPE_PERCENT_SUFFIX = 29;
export const DBLITERAL_ESCAPE_UNDERSCORE_SUFFIX = 30;
export const PERM_EXCLUSIVE = 512;
export const PERM_READDESIGN = 1024;
export const PERM_WRITEDESIGN = 2048;
export const PERM_WITHGRANT = 4096;
export const PERM_REFERENCE = 8192;
export const PERM_CREATE = 16384;
export const PERM_INSERT = 32768;
export const PERM_DELETE = 65536;
export const PERM_READCONTROL = 131072;
export const PERM_WRITEPERMISSIONS = 262144;
export const PERM_WRITEOWNER = 524288;
export const PERM_MAXIMUM_ALLOWED = 33554432;
export const PERM_ALL = 268435456;
export const PERM_EXECUTE = 536870912;
export const PERM_READ = `-2147483648`;
export const PERM_UPDATE = 1073741824;
export const PERM_DROP = 256;
export const DBCOPY_ASYNC = 256;
export const DBCOPY_REPLACE_EXISTING = 512;
export const DBCOPY_ALLOW_EMULATION = 1024;
export const DBCOPY_NON_RECURSIVE = 2048;
export const DBCOPY_ATOMIC = 4096;
export const DBMOVE_REPLACE_EXISTING = 1;
export const DBMOVE_ASYNC = 256;
export const DBMOVE_DONT_UPDATE_LINKS = 512;
export const DBMOVE_ALLOW_EMULATION = 1024;
export const DBMOVE_ATOMIC = 4096;
export const DBDELETE_ASYNC = 256;
export const DBDELETE_ATOMIC = 4096;
export const SQS_NO_SYNTAX = 0;
export const SQS_ADVANCED_QUERY_SYNTAX = 1;
export const SQS_NATURAL_QUERY_SYNTAX = 2;
export const SQSO_SCHEMA = 0;
export const SQSO_LOCALE_WORD_BREAKING = 1;
export const SQSO_WORD_BREAKER = 2;
export const SQSO_NATURAL_SYNTAX = 3;
export const SQSO_AUTOMATIC_WILDCARD = 4;
export const SQSO_TRACE_LEVEL = 5;
export const SQSO_LANGUAGE_KEYWORDS = 6;
export const SQSO_SYNTAX = 7;
export const SQSO_TIME_ZONE = 8;
export const SQSO_IMPLICIT_CONNECTOR = 9;
export const SQSO_CONNECTOR_CASE = 10;
export const SQMO_VIRTUAL_PROPERTY = 0;
export const SQMO_DEFAULT_PROPERTY = 1;
export const SQMO_GENERATOR_FOR_TYPE = 2;
export const SQMO_MAP_PROPERTY = 3;
export const SQPE_NONE = 0;
export const SQPE_EXTRA_OPENING_PARENTHESIS = 1;
export const SQPE_EXTRA_CLOSING_PARENTHESIS = 2;
export const SQPE_IGNORED_MODIFIER = 3;
export const SQPE_IGNORED_CONNECTOR = 4;
export const SQPE_IGNORED_KEYWORD = 5;
export const SQPE_UNHANDLED = 6;
export const SQRO_DEFAULT = 0;
export const SQRO_DONT_RESOLVE_DATETIME = 1;
export const SQRO_ALWAYS_ONE_INTERVAL = 2;
export const SQRO_DONT_SIMPLIFY_CONDITION_TREES = 4;
export const SQRO_DONT_MAP_RELATIONS = 8;
export const SQRO_DONT_RESOLVE_RANGES = 16;
export const SQRO_DONT_REMOVE_UNRESTRICTED_KEYWORDS = 32;
export const SQRO_DONT_SPLIT_WORDS = 64;
export const SQRO_IGNORE_PHRASE_ORDER = 128;
export const SQRO_ADD_VALUE_TYPE_FOR_PLAIN_VALUES = 256;
export const SQRO_ADD_ROBUST_ITEM_NAME = 512;
export const CASE_REQUIREMENT_ANY = 0;
export const CASE_REQUIREMENT_UPPER_IF_AQS = 1;
export const ILK_EXPLICIT_INCLUDED = 0;
export const ILK_EXPLICIT_EXCLUDED = 1;
export const ILK_NEGATIVE_INFINITY = 2;
export const ILK_POSITIVE_INFINITY = 3;
export const QPMO_SCHEMA_BINARY_NAME = 0;
export const QPMO_PRELOCALIZED_SCHEMA_BINARY_PATH = 1;
export const QPMO_UNLOCALIZED_SCHEMA_BINARY_PATH = 2;
export const QPMO_LOCALIZED_SCHEMA_BINARY_PATH = 3;
export const QPMO_APPEND_LCID_TO_LOCALIZED_PATH = 4;
export const QPMO_LOCALIZER_SUPPORT = 5;
export const CONDITION_CREATION_DEFAULT = 0;
export const CONDITION_CREATION_NONE = 0;
export const CONDITION_CREATION_SIMPLIFY = 1;
export const CONDITION_CREATION_VECTOR_AND = 2;
export const CONDITION_CREATION_VECTOR_OR = 4;
export const CONDITION_CREATION_VECTOR_LEAF = 8;
export const CONDITION_CREATION_USE_CONTENT_LOCALE = 16;
export const NEC_LOW = 0;
export const NEC_MEDIUM = 1;
export const NEC_HIGH = 2;
export const PROXY_ACCESS_PRECONFIG = 0;
export const PROXY_ACCESS_DIRECT = 1;
export const PROXY_ACCESS_PROXY = 2;
export const eAUTH_TYPE_ANONYMOUS = 0;
export const eAUTH_TYPE_NTLM = 1;
export const eAUTH_TYPE_BASIC = 2;
export const FF_INDEXCOMPLEXURLS = 1;
export const FF_SUPPRESSINDEXING = 2;
export const CLUSIONREASON_UNKNOWNSCOPE = 0;
export const CLUSIONREASON_DEFAULT = 1;
export const CLUSIONREASON_USER = 2;
export const CLUSIONREASON_GROUPPOLICY = 3;
export const SEARCH_CHANGE_ADD = 0;
export const SEARCH_CHANGE_DELETE = 1;
export const SEARCH_CHANGE_MODIFY = 2;
export const SEARCH_CHANGE_MOVE_RENAME = 3;
export const SEARCH_CHANGE_SEMANTICS_DIRECTORY = 262144;
export const SEARCH_CHANGE_SEMANTICS_SHALLOW = 524288;
export const SEARCH_CHANGE_SEMANTICS_UPDATE_SECURITY = 4194304;
export const SEARCH_NORMAL_PRIORITY = 0;
export const SEARCH_HIGH_PRIORITY = 1;
export const SEARCH_INDEXING_PHASE_GATHERER = 0;
export const SEARCH_INDEXING_PHASE_QUERYABLE = 1;
export const SEARCH_INDEXING_PHASE_PERSISTED = 2;
export const CATALOG_STATUS_IDLE = 0;
export const CATALOG_STATUS_PAUSED = 1;
export const CATALOG_STATUS_RECOVERING = 2;
export const CATALOG_STATUS_FULL_CRAWL = 3;
export const CATALOG_STATUS_INCREMENTAL_CRAWL = 4;
export const CATALOG_STATUS_PROCESSING_NOTIFICATIONS = 5;
export const CATALOG_STATUS_SHUTTING_DOWN = 6;
export const CATALOG_PAUSED_REASON_NONE = 0;
export const CATALOG_PAUSED_REASON_HIGH_IO = 1;
export const CATALOG_PAUSED_REASON_HIGH_CPU = 2;
export const CATALOG_PAUSED_REASON_HIGH_NTF_RATE = 3;
export const CATALOG_PAUSED_REASON_LOW_BATTERY = 4;
export const CATALOG_PAUSED_REASON_LOW_MEMORY = 5;
export const CATALOG_PAUSED_REASON_LOW_DISK = 6;
export const CATALOG_PAUSED_REASON_DELAYED_RECOVERY = 7;
export const CATALOG_PAUSED_REASON_USER_ACTIVE = 8;
export const CATALOG_PAUSED_REASON_EXTERNAL = 9;
export const CATALOG_PAUSED_REASON_UPGRADING = 10;
export const PRIORITIZE_FLAG_RETRYFAILEDITEMS = 1;
export const PRIORITIZE_FLAG_IGNOREFAILURECOUNT = 2;
export const SEARCH_TERM_NO_EXPANSION = 0;
export const SEARCH_TERM_PREFIX_ALL = 1;
export const SEARCH_TERM_STEM_ALL = 2;
export const SEARCH_NO_QUERY_SYNTAX = 0;
export const SEARCH_ADVANCED_QUERY_SYNTAX = 1;
export const SEARCH_NATURAL_QUERY_SYNTAX = 2;
export const PRIORITY_LEVEL_FOREGROUND = 0;
export const PRIORITY_LEVEL_HIGH = 1;
export const PRIORITY_LEVEL_LOW = 2;
export const PRIORITY_LEVEL_DEFAULT = 3;
export const ROWSETEVENT_ITEMSTATE_NOTINROWSET = 0;
export const ROWSETEVENT_ITEMSTATE_INROWSET = 1;
export const ROWSETEVENT_ITEMSTATE_UNKNOWN = 2;
export const ROWSETEVENT_TYPE_DATAEXPIRED = 0;
export const ROWSETEVENT_TYPE_FOREGROUNDLOST = 1;
export const ROWSETEVENT_TYPE_SCOPESTATISTICS = 2;
export const SUBSTYPE_URL = 0;
export const SUBSTYPE_CHANNEL = 1;
export const SUBSTYPE_DESKTOPURL = 2;
export const SUBSTYPE_EXTERNAL = 3;
export const SUBSTYPE_DESKTOPCHANNEL = 4;
export const SUBSINFO_SCHEDULE = 1;
export const SUBSINFO_RECURSE = 2;
export const SUBSINFO_WEBCRAWL = 4;
export const SUBSINFO_MAILNOT = 8;
export const SUBSINFO_MAXSIZEKB = 16;
export const SUBSINFO_USER = 32;
export const SUBSINFO_PASSWORD = 64;
export const SUBSINFO_TASKFLAGS = 256;
export const SUBSINFO_GLEAM = 512;
export const SUBSINFO_CHANGESONLY = 1024;
export const SUBSINFO_CHANNELFLAGS = 2048;
export const SUBSINFO_FRIENDLYNAME = 8192;
export const SUBSINFO_NEEDPASSWORD = 16384;
export const SUBSINFO_TYPE = 32768;
export const CREATESUBS_ADDTOFAVORITES = 1;
export const CREATESUBS_FROMFAVORITES = 2;
export const CREATESUBS_NOUI = 4;
export const CREATESUBS_NOSAVE = 8;
export const CREATESUBS_SOFTWAREUPDATE = 16;
export const SUBSSCHED_AUTO = 0;
export const SUBSSCHED_DAILY = 1;
export const SUBSSCHED_WEEKLY = 2;
export const SUBSSCHED_CUSTOM = 3;
export const SUBSSCHED_MANUAL = 4;
export const DELIVERY_AGENT_FLAG_NO_BROADCAST = 4;
export const DELIVERY_AGENT_FLAG_NO_RESTRICTIONS = 8;
export const DELIVERY_AGENT_FLAG_SILENT_DIAL = 16;
export const WEBCRAWL_DONT_MAKE_STICKY = 1;
export const WEBCRAWL_GET_IMAGES = 2;
export const WEBCRAWL_GET_VIDEOS = 4;
export const WEBCRAWL_GET_BGSOUNDS = 8;
export const WEBCRAWL_GET_CONTROLS = 16;
export const WEBCRAWL_LINKS_ELSEWHERE = 32;
export const WEBCRAWL_IGNORE_ROBOTSTXT = 128;
export const WEBCRAWL_ONLY_LINKS_TO_HTML = 256;
export const CHANNEL_AGENT_DYNAMIC_SCHEDULE = 1;
export const CHANNEL_AGENT_PRECACHE_SOME = 2;
export const CHANNEL_AGENT_PRECACHE_ALL = 4;
export const CHANNEL_AGENT_PRECACHE_SCRNSAVER = 8;
export const DBDATACONVERT_DEFAULT = 0;
export const DBDATACONVERT_SETDATABEHAVIOR = 1;
export const DBDATACONVERT_LENGTHFROMNTS = 2;
export const DBDATACONVERT_DSTISFIXEDLENGTH = 4;
export const DBDATACONVERT_DECIMALSCALE = 8;
export const DCINFOTYPE_VERSION = 1;
export const OSPFORMAT_RAW = 0;
export const OSPFORMAT_DEFAULT = 0;
export const OSPFORMAT_FORMATTED = 1;
export const OSPFORMAT_HTML = 2;
export const OSPRW_DEFAULT = 1;
export const OSPRW_READONLY = 0;
export const OSPRW_READWRITE = 1;
export const OSPRW_MIXED = 2;
export const OSPFIND_DEFAULT = 0;
export const OSPFIND_UP = 1;
export const OSPFIND_CASESENSITIVE = 2;
export const OSPFIND_UPCASESENSITIVE = 3;
export const OSPCOMP_EQ = 1;
export const OSPCOMP_DEFAULT = 1;
export const OSPCOMP_LT = 2;
export const OSPCOMP_LE = 3;
export const OSPCOMP_GE = 4;
export const OSPCOMP_GT = 5;
export const OSPCOMP_NE = 6;
export const OSPXFER_COMPLETE = 0;
export const OSPXFER_ABORT = 1;
export const OSPXFER_ERROR = 2;
export const BIO_BINDER = 1;
export const DBPROMPTOPTIONS_NONE = 0;
export const DBPROMPTOPTIONS_WIZARDSHEET = 1;
export const DBPROMPTOPTIONS_PROPERTYSHEET = 2;
export const DBPROMPTOPTIONS_BROWSEONLY = 8;
export const DBPROMPTOPTIONS_DISABLE_PROVIDER_SELECTION = 16;
export const DBPROMPTOPTIONS_DISABLESAVEPASSWORD = 32;
export const KAGREQDIAGFLAGS_HEADER = 1;
export const KAGREQDIAGFLAGS_RECORD = 2;
export const DBPROP_MSDS_DBINIT_DATAPROVIDER = 2;
export const DBPROP_MSDS_SESS_UNIQUENAMES = 2;
export const SQL_IS_YEAR = 1;
export const SQL_IS_MONTH = 2;
export const SQL_IS_DAY = 3;
export const SQL_IS_HOUR = 4;
export const SQL_IS_MINUTE = 5;
export const SQL_IS_SECOND = 6;
export const SQL_IS_YEAR_TO_MONTH = 7;
export const SQL_IS_DAY_TO_HOUR = 8;
export const SQL_IS_DAY_TO_MINUTE = 9;
export const SQL_IS_DAY_TO_SECOND = 10;
export const SQL_IS_HOUR_TO_MINUTE = 11;
export const SQL_IS_HOUR_TO_SECOND = 12;
export const SQL_IS_MINUTE_TO_SECOND = 13;
export const DBPROP_ICommandCost = 141;
export const DBPROP_ICommandTree = 142;
export const DBPROP_ICommandValidate = 143;
export const DBPROP_IDBSchemaCommand = 144;
export const DBPROP_IProvideMoniker = 125;
export const DBPROP_IQuery = 146;
export const DBPROP_IReadData = 147;
export const DBPROP_IRowsetAsynch = 148;
export const DBPROP_IRowsetCopyRows = 149;
export const DBPROP_IRowsetKeys = 151;
export const DBPROP_IRowsetNewRowAfter = 152;
export const DBPROP_IRowsetNextRowset = 153;
export const DBPROP_IRowsetWatchAll = 155;
export const DBPROP_IRowsetWatchNotify = 156;
export const DBPROP_IRowsetWatchRegion = 157;
export const DBPROP_IRowsetWithParameters = 158;
export const DBREASON_ROWSET_ROWSADDED = 19;
export const DBREASON_ROWSET_POPULATIONCOMPLETE = 20;
export const DBREASON_ROWSET_POPULATIONSTOPPED = 21;
export const DBWATCHNOTIFY_ROWSCHANGED = 1;
export const DBWATCHNOTIFY_QUERYDONE = 2;
export const DBWATCHNOTIFY_QUERYREEXECUTED = 3;
export const DBWATCHMODE_ALL = 1;
export const DBWATCHMODE_EXTEND = 2;
export const DBWATCHMODE_MOVE = 4;
export const DBWATCHMODE_COUNT = 8;
export const DBROWCHANGEKIND_INSERT = 0;
export const DBROWCHANGEKIND_DELETE = 1;
export const DBROWCHANGEKIND_UPDATE = 2;
export const DBROWCHANGEKIND_COUNT = 3;
export const DBRESOURCE_INVALID = 0;
export const DBRESOURCE_TOTAL = 1;
export const DBRESOURCE_CPU = 2;
export const DBRESOURCE_MEMORY = 3;
export const DBRESOURCE_DISK = 4;
export const DBRESOURCE_NETWORK = 5;
export const DBRESOURCE_RESPONSE = 6;
export const DBRESOURCE_ROWS = 7;
export const DBRESOURCE_OTHER = 8;
export const DBUNIT_INVALID = 0;
export const DBUNIT_WEIGHT = 1;
export const DBUNIT_PERCENT = 2;
export const DBUNIT_MAXIMUM = 4;
export const DBUNIT_MINIMUM = 8;
export const DBUNIT_MICRO_SECOND = 16;
export const DBUNIT_MILLI_SECOND = 32;
export const DBUNIT_SECOND = 64;
export const DBUNIT_MINUTE = 128;
export const DBUNIT_HOUR = 256;
export const DBUNIT_BYTE = 512;
export const DBUNIT_KILO_BYTE = 1024;
export const DBUNIT_MEGA_BYTE = 2048;
export const DBUNIT_GIGA_BYTE = 4096;
export const DBUNIT_NUM_MSGS = 8192;
export const DBUNIT_NUM_LOCKS = 16384;
export const DBUNIT_NUM_ROWS = 32768;
export const DBUNIT_OTHER = 65536;
export const DBEXECLIMITS_ABORT = 1;
export const DBEXECLIMITS_STOP = 2;
export const DBEXECLIMITS_SUSPEND = 3;
export const PRSPEC_LPWSTR = 0;
export const PRSPEC_PROPID = 1;
export const VT_SS_EMPTY = 0;
export const VT_SS_NULL = 1;
export const VT_SS_UI1 = 17;
export const VT_SS_I2 = 2;
export const VT_SS_I4 = 3;
export const VT_SS_I8 = 20;
export const VT_SS_R4 = 4;
export const VT_SS_R8 = 5;
export const VT_SS_MONEY = 6;
export const VT_SS_SMALLMONEY = 200;
export const VT_SS_WSTRING = 201;
export const VT_SS_WVARSTRING = 202;
export const VT_SS_STRING = 203;
export const VT_SS_VARSTRING = 204;
export const VT_SS_BIT = 11;
export const VT_SS_GUID = 72;
export const VT_SS_NUMERIC = 131;
export const VT_SS_DECIMAL = 205;
export const VT_SS_DATETIME = 135;
export const VT_SS_SMALLDATETIME = 206;
export const VT_SS_BINARY = 207;
export const VT_SS_VARBINARY = 208;
export const VT_SS_UNKNOWN = 209;
export const LOCKMODE_INVALID = 0;
export const LOCKMODE_EXCLUSIVE = 1;
export const LOCKMODE_SHARED = 2;
export const CT_AND_CONDITION = 0;
export const CT_OR_CONDITION = 1;
export const CT_NOT_CONDITION = 2;
export const CT_LEAF_CONDITION = 3;
export const COP_IMPLICIT = 0;
export const COP_EQUAL = 1;
export const COP_NOTEQUAL = 2;
export const COP_LESSTHAN = 3;
export const COP_GREATERTHAN = 4;
export const COP_LESSTHANOREQUAL = 5;
export const COP_GREATERTHANOREQUAL = 6;
export const COP_VALUE_STARTSWITH = 7;
export const COP_VALUE_ENDSWITH = 8;
export const COP_VALUE_CONTAINS = 9;
export const COP_VALUE_NOTCONTAINS = 10;
export const COP_DOSWILDCARDS = 11;
export const COP_WORD_EQUAL = 12;
export const COP_WORD_STARTSWITH = 13;
export const COP_APPLICATION_SPECIFIC = 14;

// Structs

export type HACCESSOR = Deno.PointerValue;

/**
 * Windows.Win32.System.Search.DBVECTOR (size: 16)
 */
export interface DBVECTOR {
  /** usize */
  size: Deno.PointerValue;
  /** ptr */
  ptr: Deno.PointerValue | Uint8Array;
}

export const sizeofDBVECTOR = 16;

export function allocDBVECTOR(data?: Partial<DBVECTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofDBVECTOR);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.size !== undefined) view.setBigUint64(0, BigInt(data.size), true);
  // 0x08: pointer
  if (data?.ptr !== undefined) view.setBigUint64(8, data.ptr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ptr))), true);
  return buf;
}

export class DBVECTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get size(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: pointer
  get ptr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: usize
  set size(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: pointer
  set ptr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Search.DBTIMESTAMP (size: 16)
 */
export interface DBTIMESTAMP {
  /** i16 */
  year: number;
  /** u16 */
  month: number;
  /** u16 */
  day: number;
  /** u16 */
  hour: number;
  /** u16 */
  minute: number;
  /** u16 */
  second: number;
  /** u32 */
  fraction: number;
}

export const sizeofDBTIMESTAMP = 16;

export function allocDBTIMESTAMP(data?: Partial<DBTIMESTAMP>): Uint8Array {
  const buf = new Uint8Array(sizeofDBTIMESTAMP);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.year !== undefined) view.setInt16(0, Number(data.year), true);
  // 0x02: u16
  if (data?.month !== undefined) view.setUint16(2, Number(data.month), true);
  // 0x04: u16
  if (data?.day !== undefined) view.setUint16(4, Number(data.day), true);
  // 0x06: u16
  if (data?.hour !== undefined) view.setUint16(6, Number(data.hour), true);
  // 0x08: u16
  if (data?.minute !== undefined) view.setUint16(8, Number(data.minute), true);
  // 0x0a: u16
  if (data?.second !== undefined) view.setUint16(10, Number(data.second), true);
  // 0x0c: u32
  if (data?.fraction !== undefined) view.setUint32(12, Number(data.fraction), true);
  return buf;
}

export class DBTIMESTAMPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i16
  get year(): number {
    return this.view.getInt16(0, true);
  }

  // 0x02: u16
  get month(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get day(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get hour(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u16
  get minute(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get second(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u32
  get fraction(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: i16
  set year(value: number) {
    this.view.setInt16(0, value, true);
  }

  // 0x02: u16
  set month(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set day(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set hour(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u16
  set minute(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set second(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u32
  set fraction(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * _uGuid_e__Union (size: 16)
 */
export interface _uGuid_e__Union {
  /** System.Guid */
  guid: Uint8Array | Deno.PointerValue;
  /** ptr */
  pguid: Deno.PointerValue | Uint8Array;
}

export const sizeof_uGuid_e__Union = 16;

export function alloc_uGuid_e__Union(data?: Partial<_uGuid_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_uGuid_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guid !== undefined) view.setBigUint64(0, data.guid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guid))), true);
  // 0x08: pointer
  if (data?.pguid !== undefined) view.setBigUint64(8, data.pguid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pguid))), true);
  return buf;
}

export class _uGuid_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get guid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get pguid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set guid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set pguid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type PWSTR = Deno.PointerValue | Uint8Array;

/**
 * _uName_e__Union (size: 16)
 */
export interface _uName_e__Union {
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  ulPropid: number;
}

export const sizeof_uName_e__Union = 16;

export function alloc_uName_e__Union(data?: Partial<_uName_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_uName_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: u32
  if (data?.ulPropid !== undefined) view.setUint32(8, Number(data.ulPropid), true);
  // 0x0c: pad4
  return buf;
}

export class _uName_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pwszName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ulPropid(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: buffer
  set pwszName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: u32
  set ulPropid(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Storage.IndexServer.DBID (size: 24)
 */
export interface DBID {
  /** _uGuid_e__Union */
  uGuid: Uint8Array | Deno.PointerValue;
  /** u32 */
  eKind: number;
  /** _uName_e__Union */
  uName: Uint8Array | Deno.PointerValue;
}

export const sizeofDBID = 24;

export function allocDBID(data?: Partial<DBID>): Uint8Array {
  const buf = new Uint8Array(sizeofDBID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.uGuid !== undefined) view.setBigUint64(0, data.uGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.uGuid))), true);
  // 0x08: u32
  if (data?.eKind !== undefined) view.setUint32(8, Number(data.eKind), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.uName !== undefined) view.setBigUint64(16, data.uName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.uName))), true);
  return buf;
}

export class DBIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get uGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get eKind(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get uName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set uGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set eKind(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set uName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Search.SEC_OBJECT_ELEMENT (size: 16)
 */
export interface SEC_OBJECT_ELEMENT {
  /** System.Guid */
  guidObjectType: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.IndexServer.DBID */
  ObjectID: Uint8Array | Deno.PointerValue;
}

export const sizeofSEC_OBJECT_ELEMENT = 16;

export function allocSEC_OBJECT_ELEMENT(data?: Partial<SEC_OBJECT_ELEMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_OBJECT_ELEMENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guidObjectType !== undefined) view.setBigUint64(0, data.guidObjectType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidObjectType))), true);
  // 0x08: pointer
  if (data?.ObjectID !== undefined) view.setBigUint64(8, data.ObjectID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ObjectID))), true);
  return buf;
}

export class SEC_OBJECT_ELEMENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get guidObjectType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ObjectID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set guidObjectType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ObjectID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Search.SEC_OBJECT (size: 16)
 */
export interface SEC_OBJECT {
  /** u32 */
  cObjects: number;
  /** ptr */
  prgObjects: Deno.PointerValue | Uint8Array;
}

export const sizeofSEC_OBJECT = 16;

export function allocSEC_OBJECT(data?: Partial<SEC_OBJECT>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_OBJECT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cObjects !== undefined) view.setUint32(0, Number(data.cObjects), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.prgObjects !== undefined) view.setBigUint64(8, data.prgObjects === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.prgObjects))), true);
  return buf;
}

export class SEC_OBJECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cObjects(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get prgObjects(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cObjects(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set prgObjects(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Search.DBIMPLICITSESSION (size: 24)
 */
export interface DBIMPLICITSESSION {
  /** Windows.Win32.System.Com.IUnknown */
  pUnkOuter: Uint8Array | Deno.PointerValue;
  /** ptr */
  piid: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.System.Com.IUnknown */
  pSession: Uint8Array | Deno.PointerValue;
}

export const sizeofDBIMPLICITSESSION = 24;

export function allocDBIMPLICITSESSION(data?: Partial<DBIMPLICITSESSION>): Uint8Array {
  const buf = new Uint8Array(sizeofDBIMPLICITSESSION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pUnkOuter !== undefined) view.setBigUint64(0, data.pUnkOuter === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pUnkOuter))), true);
  // 0x08: pointer
  if (data?.piid !== undefined) view.setBigUint64(8, data.piid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.piid))), true);
  // 0x10: pointer
  if (data?.pSession !== undefined) view.setBigUint64(16, data.pSession === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pSession))), true);
  return buf;
}

export class DBIMPLICITSESSIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pUnkOuter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get piid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pSession(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set pUnkOuter(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set piid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set pSession(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Search.DBOBJECT (size: 16)
 */
export interface DBOBJECT {
  /** u32 */
  dwFlags: number;
  /** System.Guid */
  iid: Uint8Array | Deno.PointerValue;
}

export const sizeofDBOBJECT = 16;

export function allocDBOBJECT(data?: Partial<DBOBJECT>): Uint8Array {
  const buf = new Uint8Array(sizeofDBOBJECT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.iid !== undefined) view.setBigUint64(8, data.iid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.iid))), true);
  return buf;
}

export class DBOBJECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get iid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set iid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Search.DBBINDEXT (size: 16)
 */
export interface DBBINDEXT {
  /** ptr */
  pExtension: Deno.PointerValue | Uint8Array;
  /** usize */
  ulExtension: Deno.PointerValue;
}

export const sizeofDBBINDEXT = 16;

export function allocDBBINDEXT(data?: Partial<DBBINDEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofDBBINDEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pExtension !== undefined) view.setBigUint64(0, data.pExtension === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pExtension))), true);
  // 0x08: usize
  if (data?.ulExtension !== undefined) view.setBigUint64(8, BigInt(data.ulExtension), true);
  return buf;
}

export class DBBINDEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pExtension(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: usize
  get ulExtension(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: pointer
  set pExtension(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: usize
  set ulExtension(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Search.DBBINDING (size: 88)
 */
export interface DBBINDING {
  /** usize */
  iOrdinal: Deno.PointerValue;
  /** usize */
  obValue: Deno.PointerValue;
  /** usize */
  obLength: Deno.PointerValue;
  /** usize */
  obStatus: Deno.PointerValue;
  /** Windows.Win32.System.Com.ITypeInfo */
  pTypeInfo: Uint8Array | Deno.PointerValue;
  /** ptr */
  pObject: Deno.PointerValue | Uint8Array;
  /** ptr */
  pBindExt: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwPart: number;
  /** u32 */
  dwMemOwner: number;
  /** u32 */
  eParamIO: number;
  /** usize */
  cbMaxLen: Deno.PointerValue;
  /** u32 */
  dwFlags: number;
  /** u16 */
  wType: number;
  /** u8 */
  bPrecision: number;
  /** u8 */
  bScale: number;
}

export const sizeofDBBINDING = 88;

export function allocDBBINDING(data?: Partial<DBBINDING>): Uint8Array {
  const buf = new Uint8Array(sizeofDBBINDING);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.iOrdinal !== undefined) view.setBigUint64(0, BigInt(data.iOrdinal), true);
  // 0x08: usize
  if (data?.obValue !== undefined) view.setBigUint64(8, BigInt(data.obValue), true);
  // 0x10: usize
  if (data?.obLength !== undefined) view.setBigUint64(16, BigInt(data.obLength), true);
  // 0x18: usize
  if (data?.obStatus !== undefined) view.setBigUint64(24, BigInt(data.obStatus), true);
  // 0x20: pointer
  if (data?.pTypeInfo !== undefined) view.setBigUint64(32, data.pTypeInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pTypeInfo))), true);
  // 0x28: pointer
  if (data?.pObject !== undefined) view.setBigUint64(40, data.pObject === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pObject))), true);
  // 0x30: pointer
  if (data?.pBindExt !== undefined) view.setBigUint64(48, data.pBindExt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pBindExt))), true);
  // 0x38: u32
  if (data?.dwPart !== undefined) view.setUint32(56, Number(data.dwPart), true);
  // 0x3c: u32
  if (data?.dwMemOwner !== undefined) view.setUint32(60, Number(data.dwMemOwner), true);
  // 0x40: u32
  if (data?.eParamIO !== undefined) view.setUint32(64, Number(data.eParamIO), true);
  // 0x44: pad4
  // 0x48: usize
  if (data?.cbMaxLen !== undefined) view.setBigUint64(72, BigInt(data.cbMaxLen), true);
  // 0x50: u32
  if (data?.dwFlags !== undefined) view.setUint32(80, Number(data.dwFlags), true);
  // 0x54: u16
  if (data?.wType !== undefined) view.setUint16(84, Number(data.wType), true);
  // 0x56: u8
  if (data?.bPrecision !== undefined) view.setUint8(86, Number(data.bPrecision));
  // 0x57: u8
  if (data?.bScale !== undefined) view.setUint8(87, Number(data.bScale));
  return buf;
}

export class DBBINDINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get iOrdinal(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: usize
  get obValue(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: usize
  get obLength(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: usize
  get obStatus(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: pointer
  get pTypeInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get pObject(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get pBindExt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get dwPart(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwMemOwner(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get eParamIO(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: usize
  get cbMaxLen(): Deno.PointerValue {
    return Number(this.view.getBigUint64(72, true));
  }

  // 0x50: u32
  get dwFlags(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u16
  get wType(): number {
    return this.view.getUint16(84, true);
  }

  // 0x56: u8
  get bPrecision(): number {
    return this.view.getUint8(86);
  }

  // 0x57: u8
  get bScale(): number {
    return this.view.getUint8(87);
  }

  // 0x00: usize
  set iOrdinal(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: usize
  set obValue(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: usize
  set obLength(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: usize
  set obStatus(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: pointer
  set pTypeInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set pObject(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set pBindExt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set dwPart(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwMemOwner(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set eParamIO(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: usize
  set cbMaxLen(value: Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(value), true);
  }

  // 0x50: u32
  set dwFlags(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u16
  set wType(value: number) {
    this.view.setUint16(84, value, true);
  }

  // 0x56: u8
  set bPrecision(value: number) {
    this.view.setUint8(86, value);
  }

  // 0x57: u8
  set bScale(value: number) {
    this.view.setUint8(87, value);
  }
}

export type HRESULT = number;

/**
 * Windows.Win32.System.Search.DBFAILUREINFO (size: 24)
 */
export interface DBFAILUREINFO {
  /** usize */
  hRow: Deno.PointerValue;
  /** usize */
  iColumn: Deno.PointerValue;
  /** Windows.Win32.Foundation.HRESULT */
  failure: Uint8Array | Deno.PointerValue;
}

export const sizeofDBFAILUREINFO = 24;

export function allocDBFAILUREINFO(data?: Partial<DBFAILUREINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDBFAILUREINFO);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.hRow !== undefined) view.setBigUint64(0, BigInt(data.hRow), true);
  // 0x08: usize
  if (data?.iColumn !== undefined) view.setBigUint64(8, BigInt(data.iColumn), true);
  // 0x10: pointer
  if (data?.failure !== undefined) view.setBigUint64(16, data.failure === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.failure))), true);
  return buf;
}

export class DBFAILUREINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get hRow(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: usize
  get iColumn(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: pointer
  get failure(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: usize
  set hRow(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: usize
  set iColumn(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set failure(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Search.DBCOLUMNINFO (size: 56)
 */
export interface DBCOLUMNINFO {
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.System.Com.ITypeInfo */
  pTypeInfo: Uint8Array | Deno.PointerValue;
  /** usize */
  iOrdinal: Deno.PointerValue;
  /** u32 */
  dwFlags: number;
  /** usize */
  ulColumnSize: Deno.PointerValue;
  /** u16 */
  wType: number;
  /** u8 */
  bPrecision: number;
  /** u8 */
  bScale: number;
  /** Windows.Win32.Storage.IndexServer.DBID */
  columnid: Uint8Array | Deno.PointerValue;
}

export const sizeofDBCOLUMNINFO = 56;

export function allocDBCOLUMNINFO(data?: Partial<DBCOLUMNINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDBCOLUMNINFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: pointer
  if (data?.pTypeInfo !== undefined) view.setBigUint64(8, data.pTypeInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pTypeInfo))), true);
  // 0x10: usize
  if (data?.iOrdinal !== undefined) view.setBigUint64(16, BigInt(data.iOrdinal), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  // 0x20: usize
  if (data?.ulColumnSize !== undefined) view.setBigUint64(32, BigInt(data.ulColumnSize), true);
  // 0x28: u16
  if (data?.wType !== undefined) view.setUint16(40, Number(data.wType), true);
  // 0x2a: u8
  if (data?.bPrecision !== undefined) view.setUint8(42, Number(data.bPrecision));
  // 0x2b: u8
  if (data?.bScale !== undefined) view.setUint8(43, Number(data.bScale));
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.columnid !== undefined) view.setBigUint64(48, data.columnid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.columnid))), true);
  return buf;
}

export class DBCOLUMNINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pwszName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get pTypeInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: usize
  get iOrdinal(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u32
  get dwFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: usize
  get ulColumnSize(): Deno.PointerValue {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: u16
  get wType(): number {
    return this.view.getUint16(40, true);
  }

  // 0x2a: u8
  get bPrecision(): number {
    return this.view.getUint8(42);
  }

  // 0x2b: u8
  get bScale(): number {
    return this.view.getUint8(43);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get columnid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pwszName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: pointer
  set pTypeInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: usize
  set iOrdinal(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u32
  set dwFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: usize
  set ulColumnSize(value: Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: u16
  set wType(value: number) {
    this.view.setUint16(40, value, true);
  }

  // 0x2a: u8
  set bPrecision(value: number) {
    this.view.setUint8(42, value);
  }

  // 0x2b: u8
  set bScale(value: number) {
    this.view.setUint8(43, value);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set columnid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Search.DBPARAMS (size: 24)
 */
export interface DBPARAMS {
  /** ptr */
  pData: Deno.PointerValue | Uint8Array;
  /** usize */
  cParamSets: Deno.PointerValue;
  /** Windows.Win32.System.Search.HACCESSOR */
  hAccessor: Uint8Array | Deno.PointerValue;
}

export const sizeofDBPARAMS = 24;

export function allocDBPARAMS(data?: Partial<DBPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofDBPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pData !== undefined) view.setBigUint64(0, data.pData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pData))), true);
  // 0x08: usize
  if (data?.cParamSets !== undefined) view.setBigUint64(8, BigInt(data.cParamSets), true);
  // 0x10: pointer
  if (data?.hAccessor !== undefined) view.setBigUint64(16, data.hAccessor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hAccessor))), true);
  return buf;
}

export class DBPARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: usize
  get cParamSets(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: pointer
  get hAccessor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set pData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: usize
  set cParamSets(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set hAccessor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Search.DBPARAMINFO (size: 48)
 */
export interface DBPARAMINFO {
  /** u32 */
  dwFlags: number;
  /** usize */
  iOrdinal: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.System.Com.ITypeInfo */
  pTypeInfo: Uint8Array | Deno.PointerValue;
  /** usize */
  ulParamSize: Deno.PointerValue;
  /** u16 */
  wType: number;
  /** u8 */
  bPrecision: number;
  /** u8 */
  bScale: number;
}

export const sizeofDBPARAMINFO = 48;

export function allocDBPARAMINFO(data?: Partial<DBPARAMINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDBPARAMINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: usize
  if (data?.iOrdinal !== undefined) view.setBigUint64(8, BigInt(data.iOrdinal), true);
  // 0x10: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: pointer
  if (data?.pTypeInfo !== undefined) view.setBigUint64(24, data.pTypeInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pTypeInfo))), true);
  // 0x20: usize
  if (data?.ulParamSize !== undefined) view.setBigUint64(32, BigInt(data.ulParamSize), true);
  // 0x28: u16
  if (data?.wType !== undefined) view.setUint16(40, Number(data.wType), true);
  // 0x2a: u8
  if (data?.bPrecision !== undefined) view.setUint8(42, Number(data.bPrecision));
  // 0x2b: u8
  if (data?.bScale !== undefined) view.setUint8(43, Number(data.bScale));
  // 0x2c: pad4
  return buf;
}

export class DBPARAMINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: usize
  get iOrdinal(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: buffer
  get pwszName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get pTypeInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: usize
  get ulParamSize(): Deno.PointerValue {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: u16
  get wType(): number {
    return this.view.getUint16(40, true);
  }

  // 0x2a: u8
  get bPrecision(): number {
    return this.view.getUint8(42);
  }

  // 0x2b: u8
  get bScale(): number {
    return this.view.getUint8(43);
  }

  // 0x2c: pad4

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: usize
  set iOrdinal(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: buffer
  set pwszName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: pointer
  set pTypeInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: usize
  set ulParamSize(value: Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: u16
  set wType(value: number) {
    this.view.setUint16(40, value, true);
  }

  // 0x2a: u8
  set bPrecision(value: number) {
    this.view.setUint8(42, value);
  }

  // 0x2b: u8
  set bScale(value: number) {
    this.view.setUint8(43, value);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.System.Search.DBPROPIDSET (size: 24)
 */
export interface DBPROPIDSET {
  /** ptr */
  rgPropertyIDs: Deno.PointerValue | Uint8Array;
  /** u32 */
  cPropertyIDs: number;
  /** System.Guid */
  guidPropertySet: Uint8Array | Deno.PointerValue;
}

export const sizeofDBPROPIDSET = 24;

export function allocDBPROPIDSET(data?: Partial<DBPROPIDSET>): Uint8Array {
  const buf = new Uint8Array(sizeofDBPROPIDSET);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rgPropertyIDs !== undefined) view.setBigUint64(0, data.rgPropertyIDs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgPropertyIDs))), true);
  // 0x08: u32
  if (data?.cPropertyIDs !== undefined) view.setUint32(8, Number(data.cPropertyIDs), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.guidPropertySet !== undefined) view.setBigUint64(16, data.guidPropertySet === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidPropertySet))), true);
  return buf;
}

export class DBPROPIDSETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get rgPropertyIDs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get cPropertyIDs(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get guidPropertySet(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set rgPropertyIDs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set cPropertyIDs(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set guidPropertySet(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get Region(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set Alignment(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set Region(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** array */
  X: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.X))), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Com.VARIANT (size: 8)
 */
export interface VARIANT {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofVARIANT = 8;

export function allocVARIANT(data?: Partial<VARIANT>): Uint8Array {
  const buf = new Uint8Array(sizeofVARIANT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class VARIANTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Search.DBPROPINFO (size: 32)
 */
export interface DBPROPINFO {
  /** Windows.Win32.Foundation.PWSTR */
  pwszDescription: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwPropertyID: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.System.Com.VARENUM */
  vtType: VARENUM;
  /** Windows.Win32.System.Com.VARIANT */
  vValues: Uint8Array | Deno.PointerValue;
}

export const sizeofDBPROPINFO = 32;

export function allocDBPROPINFO(data?: Partial<DBPROPINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDBPROPINFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszDescription !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszDescription);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: u32
  if (data?.dwPropertyID !== undefined) view.setUint32(8, Number(data.dwPropertyID), true);
  // 0x0c: u32
  if (data?.dwFlags !== undefined) view.setUint32(12, Number(data.dwFlags), true);
  // 0x10: u16
  if (data?.vtType !== undefined) view.setUint16(16, Number(data.vtType), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.vValues !== undefined) view.setBigUint64(24, data.vValues === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.vValues))), true);
  return buf;
}

export class DBPROPINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pwszDescription(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwPropertyID(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwFlags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u16
  get vtType(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  get vValues(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pwszDescription(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: u32
  set dwPropertyID(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwFlags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u16
  set vtType(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  set vValues(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Search.DBPROPINFOSET (size: 24)
 */
export interface DBPROPINFOSET {
  /** ptr */
  rgPropertyInfos: Deno.PointerValue | Uint8Array;
  /** u32 */
  cPropertyInfos: number;
  /** System.Guid */
  guidPropertySet: Uint8Array | Deno.PointerValue;
}

export const sizeofDBPROPINFOSET = 24;

export function allocDBPROPINFOSET(data?: Partial<DBPROPINFOSET>): Uint8Array {
  const buf = new Uint8Array(sizeofDBPROPINFOSET);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rgPropertyInfos !== undefined) view.setBigUint64(0, data.rgPropertyInfos === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgPropertyInfos))), true);
  // 0x08: u32
  if (data?.cPropertyInfos !== undefined) view.setUint32(8, Number(data.cPropertyInfos), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.guidPropertySet !== undefined) view.setBigUint64(16, data.guidPropertySet === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidPropertySet))), true);
  return buf;
}

export class DBPROPINFOSETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get rgPropertyInfos(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get cPropertyInfos(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get guidPropertySet(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set rgPropertyInfos(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set cPropertyInfos(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set guidPropertySet(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Search.DBPROP (size: 32)
 */
export interface DBPROP {
  /** u32 */
  dwPropertyID: number;
  /** u32 */
  dwOptions: number;
  /** u32 */
  dwStatus: number;
  /** Windows.Win32.Storage.IndexServer.DBID */
  colid: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Com.VARIANT */
  vValue: Uint8Array | Deno.PointerValue;
}

export const sizeofDBPROP = 32;

export function allocDBPROP(data?: Partial<DBPROP>): Uint8Array {
  const buf = new Uint8Array(sizeofDBPROP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwPropertyID !== undefined) view.setUint32(0, Number(data.dwPropertyID), true);
  // 0x04: u32
  if (data?.dwOptions !== undefined) view.setUint32(4, Number(data.dwOptions), true);
  // 0x08: u32
  if (data?.dwStatus !== undefined) view.setUint32(8, Number(data.dwStatus), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.colid !== undefined) view.setBigUint64(16, data.colid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.colid))), true);
  // 0x18: pointer
  if (data?.vValue !== undefined) view.setBigUint64(24, data.vValue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.vValue))), true);
  return buf;
}

export class DBPROPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwPropertyID(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwOptions(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwStatus(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get colid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get vValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwPropertyID(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwOptions(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwStatus(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set colid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set vValue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Search.DBPROPSET (size: 24)
 */
export interface DBPROPSET {
  /** ptr */
  rgProperties: Deno.PointerValue | Uint8Array;
  /** u32 */
  cProperties: number;
  /** System.Guid */
  guidPropertySet: Uint8Array | Deno.PointerValue;
}

export const sizeofDBPROPSET = 24;

export function allocDBPROPSET(data?: Partial<DBPROPSET>): Uint8Array {
  const buf = new Uint8Array(sizeofDBPROPSET);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rgProperties !== undefined) view.setBigUint64(0, data.rgProperties === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgProperties))), true);
  // 0x08: u32
  if (data?.cProperties !== undefined) view.setUint32(8, Number(data.cProperties), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.guidPropertySet !== undefined) view.setBigUint64(16, data.guidPropertySet === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidPropertySet))), true);
  return buf;
}

export class DBPROPSETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get rgProperties(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get cProperties(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get guidPropertySet(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set rgProperties(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set cProperties(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set guidPropertySet(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Search.DBINDEXCOLUMNDESC (size: 16)
 */
export interface DBINDEXCOLUMNDESC {
  /** ptr */
  pColumnID: Deno.PointerValue | Uint8Array;
  /** u32 */
  eIndexColOrder: number;
}

export const sizeofDBINDEXCOLUMNDESC = 16;

export function allocDBINDEXCOLUMNDESC(data?: Partial<DBINDEXCOLUMNDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDBINDEXCOLUMNDESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pColumnID !== undefined) view.setBigUint64(0, data.pColumnID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pColumnID))), true);
  // 0x08: u32
  if (data?.eIndexColOrder !== undefined) view.setUint32(8, Number(data.eIndexColOrder), true);
  // 0x0c: pad4
  return buf;
}

export class DBINDEXCOLUMNDESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pColumnID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get eIndexColOrder(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set pColumnID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set eIndexColOrder(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Search.DBCOLUMNDESC (size: 64)
 */
export interface DBCOLUMNDESC {
  /** Windows.Win32.Foundation.PWSTR */
  pwszTypeName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.System.Com.ITypeInfo */
  pTypeInfo: Uint8Array | Deno.PointerValue;
  /** ptr */
  rgPropertySets: Deno.PointerValue | Uint8Array;
  /** ptr */
  pclsid: Deno.PointerValue | Uint8Array;
  /** u32 */
  cPropertySets: number;
  /** usize */
  ulColumnSize: Deno.PointerValue;
  /** Windows.Win32.Storage.IndexServer.DBID */
  dbcid: Uint8Array | Deno.PointerValue;
  /** u16 */
  wType: number;
  /** u8 */
  bPrecision: number;
  /** u8 */
  bScale: number;
}

export const sizeofDBCOLUMNDESC = 64;

export function allocDBCOLUMNDESC(data?: Partial<DBCOLUMNDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDBCOLUMNDESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszTypeName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszTypeName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: pointer
  if (data?.pTypeInfo !== undefined) view.setBigUint64(8, data.pTypeInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pTypeInfo))), true);
  // 0x10: pointer
  if (data?.rgPropertySets !== undefined) view.setBigUint64(16, data.rgPropertySets === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgPropertySets))), true);
  // 0x18: pointer
  if (data?.pclsid !== undefined) view.setBigUint64(24, data.pclsid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pclsid))), true);
  // 0x20: u32
  if (data?.cPropertySets !== undefined) view.setUint32(32, Number(data.cPropertySets), true);
  // 0x24: pad4
  // 0x28: usize
  if (data?.ulColumnSize !== undefined) view.setBigUint64(40, BigInt(data.ulColumnSize), true);
  // 0x30: pointer
  if (data?.dbcid !== undefined) view.setBigUint64(48, data.dbcid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dbcid))), true);
  // 0x38: u16
  if (data?.wType !== undefined) view.setUint16(56, Number(data.wType), true);
  // 0x3a: u8
  if (data?.bPrecision !== undefined) view.setUint8(58, Number(data.bPrecision));
  // 0x3b: u8
  if (data?.bScale !== undefined) view.setUint8(59, Number(data.bScale));
  // 0x3c: pad4
  return buf;
}

export class DBCOLUMNDESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pwszTypeName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get pTypeInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get rgPropertySets(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get pclsid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get cPropertySets(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: usize
  get ulColumnSize(): Deno.PointerValue {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x30: pointer
  get dbcid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u16
  get wType(): number {
    return this.view.getUint16(56, true);
  }

  // 0x3a: u8
  get bPrecision(): number {
    return this.view.getUint8(58);
  }

  // 0x3b: u8
  get bScale(): number {
    return this.view.getUint8(59);
  }

  // 0x3c: pad4

  // 0x00: buffer
  set pwszTypeName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: pointer
  set pTypeInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set rgPropertySets(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set pclsid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set cPropertySets(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: usize
  set ulColumnSize(value: Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(value), true);
  }

  // 0x30: pointer
  set dbcid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u16
  set wType(value: number) {
    this.view.setUint16(56, value, true);
  }

  // 0x3a: u8
  set bPrecision(value: number) {
    this.view.setUint8(58, value);
  }

  // 0x3b: u8
  set bScale(value: number) {
    this.view.setUint8(59, value);
  }

  // 0x3c: pad4
}

/**
 * Windows.Win32.System.Search.DBCOLUMNACCESS (size: 56)
 */
export interface DBCOLUMNACCESS {
  /** ptr */
  pData: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Storage.IndexServer.DBID */
  columnid: Uint8Array | Deno.PointerValue;
  /** usize */
  cbDataLen: Deno.PointerValue;
  /** u32 */
  dwStatus: number;
  /** usize */
  cbMaxLen: Deno.PointerValue;
  /** usize */
  dwReserved: Deno.PointerValue;
  /** u16 */
  wType: number;
  /** u8 */
  bPrecision: number;
  /** u8 */
  bScale: number;
}

export const sizeofDBCOLUMNACCESS = 56;

export function allocDBCOLUMNACCESS(data?: Partial<DBCOLUMNACCESS>): Uint8Array {
  const buf = new Uint8Array(sizeofDBCOLUMNACCESS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pData !== undefined) view.setBigUint64(0, data.pData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pData))), true);
  // 0x08: pointer
  if (data?.columnid !== undefined) view.setBigUint64(8, data.columnid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.columnid))), true);
  // 0x10: usize
  if (data?.cbDataLen !== undefined) view.setBigUint64(16, BigInt(data.cbDataLen), true);
  // 0x18: u32
  if (data?.dwStatus !== undefined) view.setUint32(24, Number(data.dwStatus), true);
  // 0x1c: pad4
  // 0x20: usize
  if (data?.cbMaxLen !== undefined) view.setBigUint64(32, BigInt(data.cbMaxLen), true);
  // 0x28: usize
  if (data?.dwReserved !== undefined) view.setBigUint64(40, BigInt(data.dwReserved), true);
  // 0x30: u16
  if (data?.wType !== undefined) view.setUint16(48, Number(data.wType), true);
  // 0x32: u8
  if (data?.bPrecision !== undefined) view.setUint8(50, Number(data.bPrecision));
  // 0x33: u8
  if (data?.bScale !== undefined) view.setUint8(51, Number(data.bScale));
  // 0x34: pad4
  return buf;
}

export class DBCOLUMNACCESSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get columnid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: usize
  get cbDataLen(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u32
  get dwStatus(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: usize
  get cbMaxLen(): Deno.PointerValue {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: usize
  get dwReserved(): Deno.PointerValue {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x30: u16
  get wType(): number {
    return this.view.getUint16(48, true);
  }

  // 0x32: u8
  get bPrecision(): number {
    return this.view.getUint8(50);
  }

  // 0x33: u8
  get bScale(): number {
    return this.view.getUint8(51);
  }

  // 0x34: pad4

  // 0x00: pointer
  set pData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set columnid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: usize
  set cbDataLen(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u32
  set dwStatus(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: usize
  set cbMaxLen(value: Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: usize
  set dwReserved(value: Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(value), true);
  }

  // 0x30: u16
  set wType(value: number) {
    this.view.setUint16(48, value, true);
  }

  // 0x32: u8
  set bPrecision(value: number) {
    this.view.setUint8(50, value);
  }

  // 0x33: u8
  set bScale(value: number) {
    this.view.setUint8(51, value);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.System.Search.DBCONSTRAINTDESC (size: 96)
 */
export interface DBCONSTRAINTDESC {
  /** ptr */
  pConstraintID: Deno.PointerValue | Uint8Array;
  /** u32 */
  ConstraintType: number;
  /** usize */
  cColumns: Deno.PointerValue;
  /** ptr */
  rgColumnList: Deno.PointerValue | Uint8Array;
  /** ptr */
  pReferencedTableID: Deno.PointerValue | Uint8Array;
  /** usize */
  cForeignKeyColumns: Deno.PointerValue;
  /** ptr */
  rgForeignKeyColumnList: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszConstraintText: string | null | Uint8Array | Uint16Array;
  /** u32 */
  UpdateRule: number;
  /** u32 */
  DeleteRule: number;
  /** u32 */
  MatchType: number;
  /** u32 */
  Deferrability: number;
  /** usize */
  cReserved: Deno.PointerValue;
  /** ptr */
  rgReserved: Deno.PointerValue | Uint8Array;
}

export const sizeofDBCONSTRAINTDESC = 96;

export function allocDBCONSTRAINTDESC(data?: Partial<DBCONSTRAINTDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDBCONSTRAINTDESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pConstraintID !== undefined) view.setBigUint64(0, data.pConstraintID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pConstraintID))), true);
  // 0x08: u32
  if (data?.ConstraintType !== undefined) view.setUint32(8, Number(data.ConstraintType), true);
  // 0x0c: pad4
  // 0x10: usize
  if (data?.cColumns !== undefined) view.setBigUint64(16, BigInt(data.cColumns), true);
  // 0x18: pointer
  if (data?.rgColumnList !== undefined) view.setBigUint64(24, data.rgColumnList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgColumnList))), true);
  // 0x20: pointer
  if (data?.pReferencedTableID !== undefined) view.setBigUint64(32, data.pReferencedTableID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pReferencedTableID))), true);
  // 0x28: usize
  if (data?.cForeignKeyColumns !== undefined) view.setBigUint64(40, BigInt(data.cForeignKeyColumns), true);
  // 0x30: pointer
  if (data?.rgForeignKeyColumnList !== undefined) view.setBigUint64(48, data.rgForeignKeyColumnList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgForeignKeyColumnList))), true);
  // 0x38: buffer
  if (data?.pwszConstraintText !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pwszConstraintText);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f56))), true);
  }
  // 0x40: u32
  if (data?.UpdateRule !== undefined) view.setUint32(64, Number(data.UpdateRule), true);
  // 0x44: u32
  if (data?.DeleteRule !== undefined) view.setUint32(68, Number(data.DeleteRule), true);
  // 0x48: u32
  if (data?.MatchType !== undefined) view.setUint32(72, Number(data.MatchType), true);
  // 0x4c: u32
  if (data?.Deferrability !== undefined) view.setUint32(76, Number(data.Deferrability), true);
  // 0x50: usize
  if (data?.cReserved !== undefined) view.setBigUint64(80, BigInt(data.cReserved), true);
  // 0x58: pointer
  if (data?.rgReserved !== undefined) view.setBigUint64(88, data.rgReserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgReserved))), true);
  return buf;
}

export class DBCONSTRAINTDESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pConstraintID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ConstraintType(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: usize
  get cColumns(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: pointer
  get rgColumnList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get pReferencedTableID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: usize
  get cForeignKeyColumns(): Deno.PointerValue {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x30: pointer
  get rgForeignKeyColumnList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: buffer
  get pwszConstraintText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get UpdateRule(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get DeleteRule(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get MatchType(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get Deferrability(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: usize
  get cReserved(): Deno.PointerValue {
    return Number(this.view.getBigUint64(80, true));
  }

  // 0x58: pointer
  get rgReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set pConstraintID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ConstraintType(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: usize
  set cColumns(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set rgColumnList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set pReferencedTableID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: usize
  set cForeignKeyColumns(value: Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(value), true);
  }

  // 0x30: pointer
  set rgForeignKeyColumnList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: buffer
  set pwszConstraintText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f56))), true);
  }

  // 0x40: u32
  set UpdateRule(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set DeleteRule(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set MatchType(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set Deferrability(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: usize
  set cReserved(value: Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(value), true);
  }

  // 0x58: pointer
  set rgReserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Search.MDAXISINFO (size: 48)
 */
export interface MDAXISINFO {
  /** usize */
  cbSize: Deno.PointerValue;
  /** usize */
  iAxis: Deno.PointerValue;
  /** usize */
  cDimensions: Deno.PointerValue;
  /** usize */
  cCoordinates: Deno.PointerValue;
  /** ptr */
  rgcColumns: Deno.PointerValue | Uint8Array;
  /** ptr */
  rgpwszDimensionNames: Deno.PointerValue | Uint8Array;
}

export const sizeofMDAXISINFO = 48;

export function allocMDAXISINFO(data?: Partial<MDAXISINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMDAXISINFO);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.cbSize !== undefined) view.setBigUint64(0, BigInt(data.cbSize), true);
  // 0x08: usize
  if (data?.iAxis !== undefined) view.setBigUint64(8, BigInt(data.iAxis), true);
  // 0x10: usize
  if (data?.cDimensions !== undefined) view.setBigUint64(16, BigInt(data.cDimensions), true);
  // 0x18: usize
  if (data?.cCoordinates !== undefined) view.setBigUint64(24, BigInt(data.cCoordinates), true);
  // 0x20: pointer
  if (data?.rgcColumns !== undefined) view.setBigUint64(32, data.rgcColumns === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgcColumns))), true);
  // 0x28: pointer
  if (data?.rgpwszDimensionNames !== undefined) view.setBigUint64(40, data.rgpwszDimensionNames === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgpwszDimensionNames))), true);
  return buf;
}

export class MDAXISINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get cbSize(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: usize
  get iAxis(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: usize
  get cDimensions(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: usize
  get cCoordinates(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: pointer
  get rgcColumns(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get rgpwszDimensionNames(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: usize
  set cbSize(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: usize
  set iAxis(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: usize
  set cDimensions(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: usize
  set cCoordinates(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: pointer
  set rgcColumns(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set rgpwszDimensionNames(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Search.RMTPACK (size: 104)
 */
export interface RMTPACK {
  /** Windows.Win32.System.Com.ISequentialStream */
  pISeqStream: Uint8Array | Deno.PointerValue;
  /** u32 */
  cbData: number;
  /** u32 */
  cBSTR: number;
  /** ptr */
  rgBSTR: Deno.PointerValue | Uint8Array;
  /** u32 */
  cVARIANT: number;
  /** ptr */
  rgVARIANT: Deno.PointerValue | Uint8Array;
  /** u32 */
  cIDISPATCH: number;
  /** ptr */
  rgIDISPATCH: Deno.PointerValue | Uint8Array;
  /** u32 */
  cIUNKNOWN: number;
  /** ptr */
  rgIUNKNOWN: Deno.PointerValue | Uint8Array;
  /** u32 */
  cPROPVARIANT: number;
  /** ptr */
  rgPROPVARIANT: Deno.PointerValue | Uint8Array;
  /** u32 */
  cArray: number;
  /** ptr */
  rgArray: Deno.PointerValue | Uint8Array;
}

export const sizeofRMTPACK = 104;

export function allocRMTPACK(data?: Partial<RMTPACK>): Uint8Array {
  const buf = new Uint8Array(sizeofRMTPACK);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pISeqStream !== undefined) view.setBigUint64(0, data.pISeqStream === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pISeqStream))), true);
  // 0x08: u32
  if (data?.cbData !== undefined) view.setUint32(8, Number(data.cbData), true);
  // 0x0c: u32
  if (data?.cBSTR !== undefined) view.setUint32(12, Number(data.cBSTR), true);
  // 0x10: pointer
  if (data?.rgBSTR !== undefined) view.setBigUint64(16, data.rgBSTR === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgBSTR))), true);
  // 0x18: u32
  if (data?.cVARIANT !== undefined) view.setUint32(24, Number(data.cVARIANT), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.rgVARIANT !== undefined) view.setBigUint64(32, data.rgVARIANT === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgVARIANT))), true);
  // 0x28: u32
  if (data?.cIDISPATCH !== undefined) view.setUint32(40, Number(data.cIDISPATCH), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.rgIDISPATCH !== undefined) view.setBigUint64(48, data.rgIDISPATCH === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgIDISPATCH))), true);
  // 0x38: u32
  if (data?.cIUNKNOWN !== undefined) view.setUint32(56, Number(data.cIUNKNOWN), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.rgIUNKNOWN !== undefined) view.setBigUint64(64, data.rgIUNKNOWN === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgIUNKNOWN))), true);
  // 0x48: u32
  if (data?.cPROPVARIANT !== undefined) view.setUint32(72, Number(data.cPROPVARIANT), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.rgPROPVARIANT !== undefined) view.setBigUint64(80, data.rgPROPVARIANT === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgPROPVARIANT))), true);
  // 0x58: u32
  if (data?.cArray !== undefined) view.setUint32(88, Number(data.cArray), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.rgArray !== undefined) view.setBigUint64(96, data.rgArray === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgArray))), true);
  return buf;
}

export class RMTPACKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pISeqStream(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get cbData(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get cBSTR(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get rgBSTR(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get cVARIANT(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get rgVARIANT(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get cIDISPATCH(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get rgIDISPATCH(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get cIUNKNOWN(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get rgIUNKNOWN(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get cPROPVARIANT(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get rgPROPVARIANT(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: u32
  get cArray(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  get rgArray(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set pISeqStream(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set cbData(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set cBSTR(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set rgBSTR(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set cVARIANT(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set rgVARIANT(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set cIDISPATCH(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set rgIDISPATCH(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set cIUNKNOWN(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set rgIUNKNOWN(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: u32
  set cPROPVARIANT(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set rgPROPVARIANT(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: u32
  set cArray(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  set rgArray(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Search.DBPARAMBINDINFO (size: 32)
 */
export interface DBPARAMBINDINFO {
  /** Windows.Win32.Foundation.PWSTR */
  pwszDataSourceType: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null | Uint8Array | Uint16Array;
  /** usize */
  ulParamSize: Deno.PointerValue;
  /** u32 */
  dwFlags: number;
  /** u8 */
  bPrecision: number;
  /** u8 */
  bScale: number;
}

export const sizeofDBPARAMBINDINFO = 32;

export function allocDBPARAMBINDINFO(data?: Partial<DBPARAMBINDINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDBPARAMBINDINFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszDataSourceType !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszDataSourceType);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: usize
  if (data?.ulParamSize !== undefined) view.setBigUint64(16, BigInt(data.ulParamSize), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: u8
  if (data?.bPrecision !== undefined) view.setUint8(28, Number(data.bPrecision));
  // 0x1d: u8
  if (data?.bScale !== undefined) view.setUint8(29, Number(data.bScale));
  // 0x1e: pad2
  return buf;
}

export class DBPARAMBINDINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pwszDataSourceType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pwszName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: usize
  get ulParamSize(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u32
  get dwFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u8
  get bPrecision(): number {
    return this.view.getUint8(28);
  }

  // 0x1d: u8
  get bScale(): number {
    return this.view.getUint8(29);
  }

  // 0x1e: pad2

  // 0x00: buffer
  set pwszDataSourceType(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pwszName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: usize
  set ulParamSize(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u32
  set dwFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u8
  set bPrecision(value: number) {
    this.view.setUint8(28, value);
  }

  // 0x1d: u8
  set bScale(value: number) {
    this.view.setUint8(29, value);
  }

  // 0x1e: pad2
}

export type BOOL = number;

/**
 * Windows.Win32.System.Search.DBLITERALINFO (size: 40)
 */
export interface DBLITERALINFO {
  /** Windows.Win32.Foundation.PWSTR */
  pwszLiteralValue: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszInvalidChars: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszInvalidStartingChars: string | null | Uint8Array | Uint16Array;
  /** u32 */
  lt: number;
  /** Windows.Win32.Foundation.BOOL */
  fSupported: boolean;
  /** u32 */
  cchMaxLen: number;
}

export const sizeofDBLITERALINFO = 40;

export function allocDBLITERALINFO(data?: Partial<DBLITERALINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDBLITERALINFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszLiteralValue !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszLiteralValue);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pwszInvalidChars !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszInvalidChars);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pwszInvalidStartingChars !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszInvalidStartingChars);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.lt !== undefined) view.setUint32(24, Number(data.lt), true);
  // 0x1c: i32
  if (data?.fSupported !== undefined) view.setInt32(28, Number(data.fSupported), true);
  // 0x20: u32
  if (data?.cchMaxLen !== undefined) view.setUint32(32, Number(data.cchMaxLen), true);
  // 0x24: pad4
  return buf;
}

export class DBLITERALINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pwszLiteralValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pwszInvalidChars(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pwszInvalidStartingChars(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get lt(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: i32
  get fSupported(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: u32
  get cchMaxLen(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: buffer
  set pwszLiteralValue(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pwszInvalidChars(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pwszInvalidStartingChars(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set lt(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: i32
  set fSupported(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: u32
  set cchMaxLen(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.System.Search.ERRORINFO (size: 40)
 */
export interface ERRORINFO {
  /** Windows.Win32.Foundation.HRESULT */
  hrError: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwMinor: number;
  /** System.Guid */
  clsid: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  iid: Uint8Array | Deno.PointerValue;
  /** i32 */
  dispid: number;
}

export const sizeofERRORINFO = 40;

export function allocERRORINFO(data?: Partial<ERRORINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofERRORINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hrError !== undefined) view.setBigUint64(0, data.hrError === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hrError))), true);
  // 0x08: u32
  if (data?.dwMinor !== undefined) view.setUint32(8, Number(data.dwMinor), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.clsid !== undefined) view.setBigUint64(16, data.clsid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.clsid))), true);
  // 0x18: pointer
  if (data?.iid !== undefined) view.setBigUint64(24, data.iid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.iid))), true);
  // 0x20: i32
  if (data?.dispid !== undefined) view.setInt32(32, Number(data.dispid), true);
  // 0x24: pad4
  return buf;
}

export class ERRORINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hrError(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwMinor(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get clsid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get iid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get dispid(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x00: pointer
  set hrError(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwMinor(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set clsid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set iid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: i32
  set dispid(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.System.Search.DBROWWATCHCHANGE (size: 32)
 */
export interface DBROWWATCHCHANGE {
  /** usize */
  hRegion: Deno.PointerValue;
  /** u32 */
  eChangeKind: number;
  /** usize */
  hRow: Deno.PointerValue;
  /** usize */
  iRow: Deno.PointerValue;
}

export const sizeofDBROWWATCHCHANGE = 32;

export function allocDBROWWATCHCHANGE(data?: Partial<DBROWWATCHCHANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofDBROWWATCHCHANGE);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.hRegion !== undefined) view.setBigUint64(0, BigInt(data.hRegion), true);
  // 0x08: u32
  if (data?.eChangeKind !== undefined) view.setUint32(8, Number(data.eChangeKind), true);
  // 0x0c: pad4
  // 0x10: usize
  if (data?.hRow !== undefined) view.setBigUint64(16, BigInt(data.hRow), true);
  // 0x18: usize
  if (data?.iRow !== undefined) view.setBigUint64(24, BigInt(data.iRow), true);
  return buf;
}

export class DBROWWATCHCHANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get hRegion(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u32
  get eChangeKind(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: usize
  get hRow(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: usize
  get iRow(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x00: usize
  set hRegion(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u32
  set eChangeKind(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: usize
  set hRow(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: usize
  set iRow(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Search.DBCOST (size: 16)
 */
export interface DBCOST {
  /** u32 */
  eKind: number;
  /** u32 */
  dwUnits: number;
  /** i32 */
  lValue: number;
}

export const sizeofDBCOST = 16;

export function allocDBCOST(data?: Partial<DBCOST>): Uint8Array {
  const buf = new Uint8Array(sizeofDBCOST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.eKind !== undefined) view.setUint32(0, Number(data.eKind), true);
  // 0x04: u32
  if (data?.dwUnits !== undefined) view.setUint32(4, Number(data.dwUnits), true);
  // 0x08: i32
  if (data?.lValue !== undefined) view.setInt32(8, Number(data.lValue), true);
  // 0x0c: pad4
  return buf;
}

export class DBCOSTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get eKind(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwUnits(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get lValue(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set eKind(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwUnits(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set lValue(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Search.TEXT_SOURCE (size: 24)
 */
export interface TEXT_SOURCE {
  /** Windows.Win32.System.Search.PFNFILLTEXTBUFFER */
  pfnFillTextBuffer: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  awcBuffer: string | null | Uint8Array | Uint16Array;
  /** u32 */
  iEnd: number;
  /** u32 */
  iCur: number;
}

export const sizeofTEXT_SOURCE = 24;

export function allocTEXT_SOURCE(data?: Partial<TEXT_SOURCE>): Uint8Array {
  const buf = new Uint8Array(sizeofTEXT_SOURCE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pfnFillTextBuffer !== undefined) view.setBigUint64(0, data.pfnFillTextBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfnFillTextBuffer))), true);
  // 0x08: buffer
  if (data?.awcBuffer !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.awcBuffer);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.iEnd !== undefined) view.setUint32(16, Number(data.iEnd), true);
  // 0x14: u32
  if (data?.iCur !== undefined) view.setUint32(20, Number(data.iCur), true);
  return buf;
}

export class TEXT_SOURCEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pfnFillTextBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get awcBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get iEnd(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get iCur(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: pointer
  set pfnFillTextBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set awcBuffer(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set iEnd(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set iCur(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.System.Search.FILTERED_DATA_SOURCES (size: 32)
 */
export interface FILTERED_DATA_SOURCES {
  /** Windows.Win32.Foundation.PWSTR */
  pwcsExtension: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwcsMime: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pClsid: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwcsOverride: string | null | Uint8Array | Uint16Array;
}

export const sizeofFILTERED_DATA_SOURCES = 32;

export function allocFILTERED_DATA_SOURCES(data?: Partial<FILTERED_DATA_SOURCES>): Uint8Array {
  const buf = new Uint8Array(sizeofFILTERED_DATA_SOURCES);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwcsExtension !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwcsExtension);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pwcsMime !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwcsMime);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.pClsid !== undefined) view.setBigUint64(16, data.pClsid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pClsid))), true);
  // 0x18: buffer
  if (data?.pwcsOverride !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwcsOverride);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  return buf;
}

export class FILTERED_DATA_SOURCESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pwcsExtension(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pwcsMime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pClsid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pwcsOverride(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pwcsExtension(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pwcsMime(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set pClsid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: buffer
  set pwcsOverride(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }
}

/**
 * Windows.Win32.System.Search.DB_NUMERIC (size: 16)
 */
export interface DB_NUMERIC {
  /** u8 */
  precision: number;
  /** u8 */
  scale: number;
  /** u8 */
  sign: number;
  /** array */
  val: Deno.PointerValue;
}

export const sizeofDB_NUMERIC = 16;

export function allocDB_NUMERIC(data?: Partial<DB_NUMERIC>): Uint8Array {
  const buf = new Uint8Array(sizeofDB_NUMERIC);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.precision !== undefined) view.setUint8(0, Number(data.precision));
  // 0x01: u8
  if (data?.scale !== undefined) view.setUint8(1, Number(data.scale));
  // 0x02: u8
  if (data?.sign !== undefined) view.setUint8(2, Number(data.sign));
  // 0x03: pad5
  // 0x08: pointer
  if (data?.val !== undefined) view.setBigUint64(8, data.val === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.val))), true);
  return buf;
}

export class DB_NUMERICView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get precision(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get scale(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get sign(): number {
    return this.view.getUint8(2);
  }

  // 0x03: pad5

  // 0x08: pointer
  get val(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set precision(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set scale(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set sign(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: pad5

  // 0x08: pointer
  set val(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Search.DBDATE (size: 8)
 */
export interface DBDATE {
  /** i16 */
  year: number;
  /** u16 */
  month: number;
  /** u16 */
  day: number;
}

export const sizeofDBDATE = 8;

export function allocDBDATE(data?: Partial<DBDATE>): Uint8Array {
  const buf = new Uint8Array(sizeofDBDATE);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.year !== undefined) view.setInt16(0, Number(data.year), true);
  // 0x02: u16
  if (data?.month !== undefined) view.setUint16(2, Number(data.month), true);
  // 0x04: u16
  if (data?.day !== undefined) view.setUint16(4, Number(data.day), true);
  // 0x06: pad2
  return buf;
}

export class DBDATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i16
  get year(): number {
    return this.view.getInt16(0, true);
  }

  // 0x02: u16
  get month(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get day(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: pad2

  // 0x00: i16
  set year(value: number) {
    this.view.setInt16(0, value, true);
  }

  // 0x02: u16
  set month(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set day(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: pad2
}

/**
 * Windows.Win32.System.Search.DBTIME (size: 8)
 */
export interface DBTIME {
  /** u16 */
  hour: number;
  /** u16 */
  minute: number;
  /** u16 */
  second: number;
}

export const sizeofDBTIME = 8;

export function allocDBTIME(data?: Partial<DBTIME>): Uint8Array {
  const buf = new Uint8Array(sizeofDBTIME);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.hour !== undefined) view.setUint16(0, Number(data.hour), true);
  // 0x02: u16
  if (data?.minute !== undefined) view.setUint16(2, Number(data.minute), true);
  // 0x04: u16
  if (data?.second !== undefined) view.setUint16(4, Number(data.second), true);
  // 0x06: pad2
  return buf;
}

export class DBTIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get hour(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get minute(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get second(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: pad2

  // 0x00: u16
  set hour(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set minute(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set second(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: pad2
}

/**
 * Windows.Win32.System.Search.DB_VARNUMERIC (size: 16)
 */
export interface DB_VARNUMERIC {
  /** u8 */
  precision: number;
  /** i8 */
  scale: number;
  /** u8 */
  sign: number;
  /** array */
  val: Deno.PointerValue;
}

export const sizeofDB_VARNUMERIC = 16;

export function allocDB_VARNUMERIC(data?: Partial<DB_VARNUMERIC>): Uint8Array {
  const buf = new Uint8Array(sizeofDB_VARNUMERIC);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.precision !== undefined) view.setUint8(0, Number(data.precision));
  // 0x01: i8
  if (data?.scale !== undefined) view.setInt8(1, Number(data.scale));
  // 0x02: u8
  if (data?.sign !== undefined) view.setUint8(2, Number(data.sign));
  // 0x03: pad5
  // 0x08: pointer
  if (data?.val !== undefined) view.setBigUint64(8, data.val === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.val))), true);
  return buf;
}

export class DB_VARNUMERICView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get precision(): number {
    return this.view.getUint8(0);
  }

  // 0x01: i8
  get scale(): number {
    return this.view.getInt8(1);
  }

  // 0x02: u8
  get sign(): number {
    return this.view.getUint8(2);
  }

  // 0x03: pad5

  // 0x08: pointer
  get val(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set precision(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: i8
  set scale(value: number) {
    this.view.setInt8(1, value);
  }

  // 0x02: u8
  set sign(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: pad5

  // 0x08: pointer
  set val(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Search.HITRANGE (size: 8)
 */
export interface HITRANGE {
  /** u32 */
  iPosition: number;
  /** u32 */
  cLength: number;
}

export const sizeofHITRANGE = 8;

export function allocHITRANGE(data?: Partial<HITRANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofHITRANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.iPosition !== undefined) view.setUint32(0, Number(data.iPosition), true);
  // 0x04: u32
  if (data?.cLength !== undefined) view.setUint32(4, Number(data.cLength), true);
  return buf;
}

export class HITRANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get iPosition(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set iPosition(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cLength(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Search.TIMEOUT_INFO (size: 16)
 */
export interface TIMEOUT_INFO {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwConnectTimeout: number;
  /** u32 */
  dwDataTimeout: number;
}

export const sizeofTIMEOUT_INFO = 16;

export function allocTIMEOUT_INFO(data?: Partial<TIMEOUT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofTIMEOUT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwConnectTimeout !== undefined) view.setUint32(4, Number(data.dwConnectTimeout), true);
  // 0x08: u32
  if (data?.dwDataTimeout !== undefined) view.setUint32(8, Number(data.dwDataTimeout), true);
  // 0x0c: pad4
  return buf;
}

export class TIMEOUT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwConnectTimeout(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwDataTimeout(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwConnectTimeout(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwDataTimeout(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Search.PROXY_INFO (size: 48)
 */
export interface PROXY_INFO {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  pcwszUserAgent: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.System.Search.PROXY_ACCESS */
  paUseProxy: PROXY_ACCESS;
  /** Windows.Win32.Foundation.BOOL */
  fLocalBypass: boolean;
  /** u32 */
  dwPortNumber: number;
  /** Windows.Win32.Foundation.PWSTR */
  pcwszProxyName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pcwszBypassList: string | null | Uint8Array | Uint16Array;
}

export const sizeofPROXY_INFO = 48;

export function allocPROXY_INFO(data?: Partial<PROXY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPROXY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pcwszUserAgent !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pcwszUserAgent);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: i32
  if (data?.paUseProxy !== undefined) view.setInt32(16, Number(data.paUseProxy), true);
  // 0x14: i32
  if (data?.fLocalBypass !== undefined) view.setInt32(20, Number(data.fLocalBypass), true);
  // 0x18: u32
  if (data?.dwPortNumber !== undefined) view.setUint32(24, Number(data.dwPortNumber), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.pcwszProxyName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pcwszProxyName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pcwszBypassList !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pcwszBypassList);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  return buf;
}

export class PROXY_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pcwszUserAgent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get paUseProxy(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get fLocalBypass(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: u32
  get dwPortNumber(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  get pcwszProxyName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pcwszBypassList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pcwszUserAgent(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: i32
  set paUseProxy(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set fLocalBypass(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: u32
  set dwPortNumber(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  set pcwszProxyName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pcwszBypassList(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }
}

/**
 * Windows.Win32.System.Search.AUTHENTICATION_INFO (size: 24)
 */
export interface AUTHENTICATION_INFO {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.System.Search.AUTH_TYPE */
  atAuthenticationType: AUTH_TYPE;
  /** Windows.Win32.Foundation.PWSTR */
  pcwszUser: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pcwszPassword: string | null | Uint8Array | Uint16Array;
}

export const sizeofAUTHENTICATION_INFO = 24;

export function allocAUTHENTICATION_INFO(data?: Partial<AUTHENTICATION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofAUTHENTICATION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: i32
  if (data?.atAuthenticationType !== undefined) view.setInt32(4, Number(data.atAuthenticationType), true);
  // 0x08: buffer
  if (data?.pcwszUser !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pcwszUser);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pcwszPassword !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pcwszPassword);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class AUTHENTICATION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get atAuthenticationType(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: buffer
  get pcwszUser(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pcwszPassword(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set atAuthenticationType(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: buffer
  set pcwszUser(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pcwszPassword(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.Foundation.FILETIME (size: 8)
 */
export interface FILETIME {
  /** u32 */
  dwLowDateTime: number;
  /** u32 */
  dwHighDateTime: number;
}

export const sizeofFILETIME = 8;

export function allocFILETIME(data?: Partial<FILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofFILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowDateTime !== undefined) view.setUint32(0, Number(data.dwLowDateTime), true);
  // 0x04: u32
  if (data?.dwHighDateTime !== undefined) view.setUint32(4, Number(data.dwHighDateTime), true);
  return buf;
}

export class FILETIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLowDateTime(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwHighDateTime(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwLowDateTime(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwHighDateTime(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Search.INCREMENTAL_ACCESS_INFO (size: 16)
 */
export interface INCREMENTAL_ACCESS_INFO {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.FILETIME */
  ftLastModifiedTime: Uint8Array | Deno.PointerValue;
}

export const sizeofINCREMENTAL_ACCESS_INFO = 16;

export function allocINCREMENTAL_ACCESS_INFO(data?: Partial<INCREMENTAL_ACCESS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofINCREMENTAL_ACCESS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ftLastModifiedTime !== undefined) view.setBigUint64(8, data.ftLastModifiedTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftLastModifiedTime))), true);
  return buf;
}

export class INCREMENTAL_ACCESS_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ftLastModifiedTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ftLastModifiedTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Search.ITEM_INFO (size: 40)
 */
export interface ITEM_INFO {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  pcwszFromEMail: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pcwszApplicationName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pcwszCatalogName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pcwszContentClass: string | null | Uint8Array | Uint16Array;
}

export const sizeofITEM_INFO = 40;

export function allocITEM_INFO(data?: Partial<ITEM_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofITEM_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pcwszFromEMail !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pcwszFromEMail);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pcwszApplicationName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pcwszApplicationName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pcwszCatalogName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pcwszCatalogName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pcwszContentClass !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pcwszContentClass);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  return buf;
}

export class ITEM_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pcwszFromEMail(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pcwszApplicationName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pcwszCatalogName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pcwszContentClass(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pcwszFromEMail(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pcwszApplicationName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pcwszCatalogName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pcwszContentClass(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }
}

/**
 * Windows.Win32.System.Search.SEARCH_ITEM_CHANGE (size: 32)
 */
export interface SEARCH_ITEM_CHANGE {
  /** Windows.Win32.System.Search.SEARCH_KIND_OF_CHANGE */
  Change: SEARCH_KIND_OF_CHANGE;
  /** Windows.Win32.System.Search.SEARCH_NOTIFICATION_PRIORITY */
  Priority: SEARCH_NOTIFICATION_PRIORITY;
  /** ptr */
  pUserData: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpwszURL: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpwszOldURL: string | null | Uint8Array | Uint16Array;
}

export const sizeofSEARCH_ITEM_CHANGE = 32;

export function allocSEARCH_ITEM_CHANGE(data?: Partial<SEARCH_ITEM_CHANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofSEARCH_ITEM_CHANGE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Change !== undefined) view.setInt32(0, Number(data.Change), true);
  // 0x04: i32
  if (data?.Priority !== undefined) view.setInt32(4, Number(data.Priority), true);
  // 0x08: pointer
  if (data?.pUserData !== undefined) view.setBigUint64(8, data.pUserData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pUserData))), true);
  // 0x10: buffer
  if (data?.lpwszURL !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpwszURL);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.lpwszOldURL !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpwszOldURL);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  return buf;
}

export class SEARCH_ITEM_CHANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Change(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get Priority(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get pUserData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get lpwszURL(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get lpwszOldURL(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set Change(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set Priority(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set pUserData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set lpwszURL(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set lpwszOldURL(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }
}

/**
 * Windows.Win32.System.Search.SEARCH_ITEM_PERSISTENT_CHANGE (size: 32)
 */
export interface SEARCH_ITEM_PERSISTENT_CHANGE {
  /** Windows.Win32.System.Search.SEARCH_KIND_OF_CHANGE */
  Change: SEARCH_KIND_OF_CHANGE;
  /** Windows.Win32.Foundation.PWSTR */
  URL: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  OldURL: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.System.Search.SEARCH_NOTIFICATION_PRIORITY */
  Priority: SEARCH_NOTIFICATION_PRIORITY;
}

export const sizeofSEARCH_ITEM_PERSISTENT_CHANGE = 32;

export function allocSEARCH_ITEM_PERSISTENT_CHANGE(data?: Partial<SEARCH_ITEM_PERSISTENT_CHANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofSEARCH_ITEM_PERSISTENT_CHANGE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Change !== undefined) view.setInt32(0, Number(data.Change), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.URL !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.URL);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.OldURL !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.OldURL);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: i32
  if (data?.Priority !== undefined) view.setInt32(24, Number(data.Priority), true);
  // 0x1c: pad4
  return buf;
}

export class SEARCH_ITEM_PERSISTENT_CHANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Change(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get URL(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get OldURL(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get Priority(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x00: i32
  set Change(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set URL(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set OldURL(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: i32
  set Priority(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.System.Search.SEARCH_ITEM_INDEXING_STATUS (size: 16)
 */
export interface SEARCH_ITEM_INDEXING_STATUS {
  /** u32 */
  dwDocID: number;
  /** Windows.Win32.Foundation.HRESULT */
  hrIndexingStatus: Uint8Array | Deno.PointerValue;
}

export const sizeofSEARCH_ITEM_INDEXING_STATUS = 16;

export function allocSEARCH_ITEM_INDEXING_STATUS(data?: Partial<SEARCH_ITEM_INDEXING_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofSEARCH_ITEM_INDEXING_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwDocID !== undefined) view.setUint32(0, Number(data.dwDocID), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hrIndexingStatus !== undefined) view.setBigUint64(8, data.hrIndexingStatus === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hrIndexingStatus))), true);
  return buf;
}

export class SEARCH_ITEM_INDEXING_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwDocID(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hrIndexingStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwDocID(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hrIndexingStatus(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Com.StructuredStorage.PROPVARIANT (size: 8)
 */
export interface PROPVARIANT {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofPROPVARIANT = 8;

export function allocPROPVARIANT(data?: Partial<PROPVARIANT>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPVARIANT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class PROPVARIANTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Search.SEARCH_COLUMN_PROPERTIES (size: 16)
 */
export interface SEARCH_COLUMN_PROPERTIES {
  /** Windows.Win32.System.Com.StructuredStorage.PROPVARIANT */
  Value: Uint8Array | Deno.PointerValue;
  /** u32 */
  lcid: number;
}

export const sizeofSEARCH_COLUMN_PROPERTIES = 16;

export function allocSEARCH_COLUMN_PROPERTIES(data?: Partial<SEARCH_COLUMN_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofSEARCH_COLUMN_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Value !== undefined) view.setBigUint64(0, data.Value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Value))), true);
  // 0x08: u32
  if (data?.lcid !== undefined) view.setUint32(8, Number(data.lcid), true);
  // 0x0c: pad4
  return buf;
}

export class SEARCH_COLUMN_PROPERTIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get lcid(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set lcid(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Search.ITEMPROP (size: 16)
 */
export interface ITEMPROP {
  /** Windows.Win32.System.Com.VARIANT */
  variantValue: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null | Uint8Array | Uint16Array;
}

export const sizeofITEMPROP = 16;

export function allocITEMPROP(data?: Partial<ITEMPROP>): Uint8Array {
  const buf = new Uint8Array(sizeofITEMPROP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.variantValue !== undefined) view.setBigUint64(0, data.variantValue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.variantValue))), true);
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class ITEMPROPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get variantValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pwszName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set variantValue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set pwszName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.System.Search.SUBSCRIPTIONITEMINFO (size: 32)
 */
export interface SUBSCRIPTIONITEMINFO {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwPriority: number;
  /** System.Guid */
  ScheduleGroup: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  clsidAgent: Uint8Array | Deno.PointerValue;
}

export const sizeofSUBSCRIPTIONITEMINFO = 32;

export function allocSUBSCRIPTIONITEMINFO(data?: Partial<SUBSCRIPTIONITEMINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSUBSCRIPTIONITEMINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwPriority !== undefined) view.setUint32(8, Number(data.dwPriority), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ScheduleGroup !== undefined) view.setBigUint64(16, data.ScheduleGroup === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ScheduleGroup))), true);
  // 0x18: pointer
  if (data?.clsidAgent !== undefined) view.setBigUint64(24, data.clsidAgent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.clsidAgent))), true);
  return buf;
}

export class SUBSCRIPTIONITEMINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwPriority(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ScheduleGroup(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get clsidAgent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwPriority(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ScheduleGroup(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set clsidAgent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type BSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.System.Search.SUBSCRIPTIONINFO (size: 104)
 */
export interface SUBSCRIPTIONINFO {
  /** u32 */
  cbSize: number;
  /** u32 */
  fUpdateFlags: number;
  /** Windows.Win32.System.Search.SUBSCRIPTIONSCHEDULE */
  schedule: SUBSCRIPTIONSCHEDULE;
  /** System.Guid */
  customGroupCookie: Uint8Array | Deno.PointerValue;
  /** ptr */
  pTrigger: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwRecurseLevels: number;
  /** u32 */
  fWebcrawlerFlags: number;
  /** Windows.Win32.Foundation.BOOL */
  bMailNotification: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bGleam: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bChangesOnly: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bNeedPassword: boolean;
  /** u32 */
  fChannelFlags: number;
  /** Windows.Win32.Foundation.BSTR */
  bstrUserName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BSTR */
  bstrPassword: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BSTR */
  bstrFriendlyName: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwMaxSizeKB: number;
  /** Windows.Win32.System.Search.SUBSCRIPTIONTYPE */
  subType: SUBSCRIPTIONTYPE;
  /** u32 */
  fTaskFlags: number;
  /** u32 */
  dwReserved: number;
}

export const sizeofSUBSCRIPTIONINFO = 104;

export function allocSUBSCRIPTIONINFO(data?: Partial<SUBSCRIPTIONINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSUBSCRIPTIONINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.fUpdateFlags !== undefined) view.setUint32(4, Number(data.fUpdateFlags), true);
  // 0x08: i32
  if (data?.schedule !== undefined) view.setInt32(8, Number(data.schedule), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.customGroupCookie !== undefined) view.setBigUint64(16, data.customGroupCookie === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.customGroupCookie))), true);
  // 0x18: pointer
  if (data?.pTrigger !== undefined) view.setBigUint64(24, data.pTrigger === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pTrigger))), true);
  // 0x20: u32
  if (data?.dwRecurseLevels !== undefined) view.setUint32(32, Number(data.dwRecurseLevels), true);
  // 0x24: u32
  if (data?.fWebcrawlerFlags !== undefined) view.setUint32(36, Number(data.fWebcrawlerFlags), true);
  // 0x28: i32
  if (data?.bMailNotification !== undefined) view.setInt32(40, Number(data.bMailNotification), true);
  // 0x2c: i32
  if (data?.bGleam !== undefined) view.setInt32(44, Number(data.bGleam), true);
  // 0x30: i32
  if (data?.bChangesOnly !== undefined) view.setInt32(48, Number(data.bChangesOnly), true);
  // 0x34: i32
  if (data?.bNeedPassword !== undefined) view.setInt32(52, Number(data.bNeedPassword), true);
  // 0x38: u32
  if (data?.fChannelFlags !== undefined) view.setUint32(56, Number(data.fChannelFlags), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.bstrUserName !== undefined) view.setBigUint64(64, data.bstrUserName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bstrUserName))), true);
  // 0x48: pointer
  if (data?.bstrPassword !== undefined) view.setBigUint64(72, data.bstrPassword === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bstrPassword))), true);
  // 0x50: pointer
  if (data?.bstrFriendlyName !== undefined) view.setBigUint64(80, data.bstrFriendlyName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bstrFriendlyName))), true);
  // 0x58: u32
  if (data?.dwMaxSizeKB !== undefined) view.setUint32(88, Number(data.dwMaxSizeKB), true);
  // 0x5c: i32
  if (data?.subType !== undefined) view.setInt32(92, Number(data.subType), true);
  // 0x60: u32
  if (data?.fTaskFlags !== undefined) view.setUint32(96, Number(data.fTaskFlags), true);
  // 0x64: u32
  if (data?.dwReserved !== undefined) view.setUint32(100, Number(data.dwReserved), true);
  return buf;
}

export class SUBSCRIPTIONINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get fUpdateFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get schedule(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get customGroupCookie(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get pTrigger(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwRecurseLevels(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get fWebcrawlerFlags(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: i32
  get bMailNotification(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: i32
  get bGleam(): number {
    return this.view.getInt32(44, true);
  }

  // 0x30: i32
  get bChangesOnly(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: i32
  get bNeedPassword(): number {
    return this.view.getInt32(52, true);
  }

  // 0x38: u32
  get fChannelFlags(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get bstrUserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get bstrPassword(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get bstrFriendlyName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: u32
  get dwMaxSizeKB(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: i32
  get subType(): number {
    return this.view.getInt32(92, true);
  }

  // 0x60: u32
  get fTaskFlags(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u32
  get dwReserved(): number {
    return this.view.getUint32(100, true);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set fUpdateFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set schedule(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set customGroupCookie(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set pTrigger(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwRecurseLevels(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set fWebcrawlerFlags(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: i32
  set bMailNotification(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: i32
  set bGleam(value: number) {
    this.view.setInt32(44, value, true);
  }

  // 0x30: i32
  set bChangesOnly(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: i32
  set bNeedPassword(value: number) {
    this.view.setInt32(52, value, true);
  }

  // 0x38: u32
  set fChannelFlags(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set bstrUserName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set bstrPassword(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set bstrFriendlyName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: u32
  set dwMaxSizeKB(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: i32
  set subType(value: number) {
    this.view.setInt32(92, value, true);
  }

  // 0x60: u32
  set fTaskFlags(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u32
  set dwReserved(value: number) {
    this.view.setUint32(100, value, true);
  }
}

/**
 * Windows.Win32.System.Search.DCINFO (size: 16)
 */
export interface DCINFO {
  /** u32 */
  eInfoType: number;
  /** Windows.Win32.System.Com.VARIANT */
  vData: Uint8Array | Deno.PointerValue;
}

export const sizeofDCINFO = 16;

export function allocDCINFO(data?: Partial<DCINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDCINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.eInfoType !== undefined) view.setUint32(0, Number(data.eInfoType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.vData !== undefined) view.setBigUint64(8, data.vData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.vData))), true);
  return buf;
}

export class DCINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get eInfoType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get vData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set eInfoType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set vData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Search.KAGREQDIAG (size: 8)
 */
export interface KAGREQDIAG {
  /** u32 */
  ulDiagFlags: number;
  /** Windows.Win32.System.Com.VARENUM */
  vt: VARENUM;
  /** i16 */
  sDiagField: number;
}

export const sizeofKAGREQDIAG = 8;

export function allocKAGREQDIAG(data?: Partial<KAGREQDIAG>): Uint8Array {
  const buf = new Uint8Array(sizeofKAGREQDIAG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulDiagFlags !== undefined) view.setUint32(0, Number(data.ulDiagFlags), true);
  // 0x04: u16
  if (data?.vt !== undefined) view.setUint16(4, Number(data.vt), true);
  // 0x06: i16
  if (data?.sDiagField !== undefined) view.setInt16(6, Number(data.sDiagField), true);
  return buf;
}

export class KAGREQDIAGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulDiagFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get vt(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: i16
  get sDiagField(): number {
    return this.view.getInt16(6, true);
  }

  // 0x00: u32
  set ulDiagFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set vt(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: i16
  set sDiagField(value: number) {
    this.view.setInt16(6, value, true);
  }
}

/**
 * Windows.Win32.System.Search.KAGGETDIAG (size: 24)
 */
export interface KAGGETDIAG {
  /** u32 */
  ulSize: number;
  /** Windows.Win32.System.Com.VARIANT */
  vDiagInfo: Uint8Array | Deno.PointerValue;
  /** i16 */
  sDiagField: number;
}

export const sizeofKAGGETDIAG = 24;

export function allocKAGGETDIAG(data?: Partial<KAGGETDIAG>): Uint8Array {
  const buf = new Uint8Array(sizeofKAGGETDIAG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulSize !== undefined) view.setUint32(0, Number(data.ulSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.vDiagInfo !== undefined) view.setBigUint64(8, data.vDiagInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.vDiagInfo))), true);
  // 0x10: i16
  if (data?.sDiagField !== undefined) view.setInt16(16, Number(data.sDiagField), true);
  // 0x12: pad6
  return buf;
}

export class KAGGETDIAGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get vDiagInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i16
  get sDiagField(): number {
    return this.view.getInt16(16, true);
  }

  // 0x12: pad6

  // 0x00: u32
  set ulSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set vDiagInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i16
  set sDiagField(value: number) {
    this.view.setInt16(16, value, true);
  }

  // 0x12: pad6
}

/**
 * Windows.Win32.System.Search.DATE_STRUCT (size: 8)
 */
export interface DATE_STRUCT {
  /** i16 */
  year: number;
  /** u16 */
  month: number;
  /** u16 */
  day: number;
}

export const sizeofDATE_STRUCT = 8;

export function allocDATE_STRUCT(data?: Partial<DATE_STRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofDATE_STRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.year !== undefined) view.setInt16(0, Number(data.year), true);
  // 0x02: u16
  if (data?.month !== undefined) view.setUint16(2, Number(data.month), true);
  // 0x04: u16
  if (data?.day !== undefined) view.setUint16(4, Number(data.day), true);
  // 0x06: pad2
  return buf;
}

export class DATE_STRUCTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i16
  get year(): number {
    return this.view.getInt16(0, true);
  }

  // 0x02: u16
  get month(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get day(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: pad2

  // 0x00: i16
  set year(value: number) {
    this.view.setInt16(0, value, true);
  }

  // 0x02: u16
  set month(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set day(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: pad2
}

/**
 * Windows.Win32.System.Search.TIME_STRUCT (size: 8)
 */
export interface TIME_STRUCT {
  /** u16 */
  hour: number;
  /** u16 */
  minute: number;
  /** u16 */
  second: number;
}

export const sizeofTIME_STRUCT = 8;

export function allocTIME_STRUCT(data?: Partial<TIME_STRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofTIME_STRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.hour !== undefined) view.setUint16(0, Number(data.hour), true);
  // 0x02: u16
  if (data?.minute !== undefined) view.setUint16(2, Number(data.minute), true);
  // 0x04: u16
  if (data?.second !== undefined) view.setUint16(4, Number(data.second), true);
  // 0x06: pad2
  return buf;
}

export class TIME_STRUCTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get hour(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get minute(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get second(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: pad2

  // 0x00: u16
  set hour(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set minute(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set second(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: pad2
}

/**
 * Windows.Win32.System.Search.TIMESTAMP_STRUCT (size: 16)
 */
export interface TIMESTAMP_STRUCT {
  /** i16 */
  year: number;
  /** u16 */
  month: number;
  /** u16 */
  day: number;
  /** u16 */
  hour: number;
  /** u16 */
  minute: number;
  /** u16 */
  second: number;
  /** u32 */
  fraction: number;
}

export const sizeofTIMESTAMP_STRUCT = 16;

export function allocTIMESTAMP_STRUCT(data?: Partial<TIMESTAMP_STRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofTIMESTAMP_STRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.year !== undefined) view.setInt16(0, Number(data.year), true);
  // 0x02: u16
  if (data?.month !== undefined) view.setUint16(2, Number(data.month), true);
  // 0x04: u16
  if (data?.day !== undefined) view.setUint16(4, Number(data.day), true);
  // 0x06: u16
  if (data?.hour !== undefined) view.setUint16(6, Number(data.hour), true);
  // 0x08: u16
  if (data?.minute !== undefined) view.setUint16(8, Number(data.minute), true);
  // 0x0a: u16
  if (data?.second !== undefined) view.setUint16(10, Number(data.second), true);
  // 0x0c: u32
  if (data?.fraction !== undefined) view.setUint32(12, Number(data.fraction), true);
  return buf;
}

export class TIMESTAMP_STRUCTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i16
  get year(): number {
    return this.view.getInt16(0, true);
  }

  // 0x02: u16
  get month(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get day(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get hour(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u16
  get minute(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get second(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u32
  get fraction(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: i16
  set year(value: number) {
    this.view.setInt16(0, value, true);
  }

  // 0x02: u16
  set month(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set day(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set hour(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u16
  set minute(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set second(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u32
  set fraction(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.System.Search.SQL_YEAR_MONTH_STRUCT (size: 8)
 */
export interface SQL_YEAR_MONTH_STRUCT {
  /** u32 */
  year: number;
  /** u32 */
  month: number;
}

export const sizeofSQL_YEAR_MONTH_STRUCT = 8;

export function allocSQL_YEAR_MONTH_STRUCT(data?: Partial<SQL_YEAR_MONTH_STRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofSQL_YEAR_MONTH_STRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.year !== undefined) view.setUint32(0, Number(data.year), true);
  // 0x04: u32
  if (data?.month !== undefined) view.setUint32(4, Number(data.month), true);
  return buf;
}

export class SQL_YEAR_MONTH_STRUCTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get year(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get month(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set year(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set month(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Search.SQL_DAY_SECOND_STRUCT (size: 24)
 */
export interface SQL_DAY_SECOND_STRUCT {
  /** u32 */
  day: number;
  /** u32 */
  hour: number;
  /** u32 */
  minute: number;
  /** u32 */
  second: number;
  /** u32 */
  fraction: number;
}

export const sizeofSQL_DAY_SECOND_STRUCT = 24;

export function allocSQL_DAY_SECOND_STRUCT(data?: Partial<SQL_DAY_SECOND_STRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofSQL_DAY_SECOND_STRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.day !== undefined) view.setUint32(0, Number(data.day), true);
  // 0x04: u32
  if (data?.hour !== undefined) view.setUint32(4, Number(data.hour), true);
  // 0x08: u32
  if (data?.minute !== undefined) view.setUint32(8, Number(data.minute), true);
  // 0x0c: u32
  if (data?.second !== undefined) view.setUint32(12, Number(data.second), true);
  // 0x10: u32
  if (data?.fraction !== undefined) view.setUint32(16, Number(data.fraction), true);
  // 0x14: pad4
  return buf;
}

export class SQL_DAY_SECOND_STRUCTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get day(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get hour(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get minute(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get second(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get fraction(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set day(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set hour(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set minute(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set second(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set fraction(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * _intval_e__Union (size: 16)
 */
export interface _intval_e__Union {
  /** Windows.Win32.System.Search.SQL_YEAR_MONTH_STRUCT */
  year_month: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Search.SQL_DAY_SECOND_STRUCT */
  day_second: Uint8Array | Deno.PointerValue;
}

export const sizeof_intval_e__Union = 16;

export function alloc_intval_e__Union(data?: Partial<_intval_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_intval_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.year_month !== undefined) view.setBigUint64(0, data.year_month === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.year_month))), true);
  // 0x08: pointer
  if (data?.day_second !== undefined) view.setBigUint64(8, data.day_second === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.day_second))), true);
  return buf;
}

export class _intval_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get year_month(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get day_second(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set year_month(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set day_second(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Search.SQL_INTERVAL_STRUCT (size: 16)
 */
export interface SQL_INTERVAL_STRUCT {
  /** Windows.Win32.System.Search.SQLINTERVAL */
  interval_type: SQLINTERVAL;
  /** i16 */
  interval_sign: number;
  /** _intval_e__Union */
  intval: Uint8Array | Deno.PointerValue;
}

export const sizeofSQL_INTERVAL_STRUCT = 16;

export function allocSQL_INTERVAL_STRUCT(data?: Partial<SQL_INTERVAL_STRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofSQL_INTERVAL_STRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.interval_type !== undefined) view.setInt32(0, Number(data.interval_type), true);
  // 0x04: i16
  if (data?.interval_sign !== undefined) view.setInt16(4, Number(data.interval_sign), true);
  // 0x06: pad2
  // 0x08: pointer
  if (data?.intval !== undefined) view.setBigUint64(8, data.intval === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.intval))), true);
  return buf;
}

export class SQL_INTERVAL_STRUCTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get interval_type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i16
  get interval_sign(): number {
    return this.view.getInt16(4, true);
  }

  // 0x06: pad2

  // 0x08: pointer
  get intval(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set interval_type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i16
  set interval_sign(value: number) {
    this.view.setInt16(4, value, true);
  }

  // 0x06: pad2

  // 0x08: pointer
  set intval(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Search.SQL_NUMERIC_STRUCT (size: 16)
 */
export interface SQL_NUMERIC_STRUCT {
  /** u8 */
  precision: number;
  /** i8 */
  scale: number;
  /** u8 */
  sign: number;
  /** array */
  val: Deno.PointerValue;
}

export const sizeofSQL_NUMERIC_STRUCT = 16;

export function allocSQL_NUMERIC_STRUCT(data?: Partial<SQL_NUMERIC_STRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofSQL_NUMERIC_STRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.precision !== undefined) view.setUint8(0, Number(data.precision));
  // 0x01: i8
  if (data?.scale !== undefined) view.setInt8(1, Number(data.scale));
  // 0x02: u8
  if (data?.sign !== undefined) view.setUint8(2, Number(data.sign));
  // 0x03: pad5
  // 0x08: pointer
  if (data?.val !== undefined) view.setBigUint64(8, data.val === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.val))), true);
  return buf;
}

export class SQL_NUMERIC_STRUCTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get precision(): number {
    return this.view.getUint8(0);
  }

  // 0x01: i8
  get scale(): number {
    return this.view.getInt8(1);
  }

  // 0x02: u8
  get sign(): number {
    return this.view.getUint8(2);
  }

  // 0x03: pad5

  // 0x08: pointer
  get val(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set precision(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: i8
  set scale(value: number) {
    this.view.setInt8(1, value);
  }

  // 0x02: u8
  set sign(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: pad5

  // 0x08: pointer
  set val(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Search.DBVARYCHAR (size: 16)
 */
export interface DBVARYCHAR {
  /** i16 */
  len: number;
  /** array */
  str: Deno.PointerValue;
}

export const sizeofDBVARYCHAR = 16;

export function allocDBVARYCHAR(data?: Partial<DBVARYCHAR>): Uint8Array {
  const buf = new Uint8Array(sizeofDBVARYCHAR);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.len !== undefined) view.setInt16(0, Number(data.len), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.str !== undefined) view.setBigUint64(8, data.str === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.str))), true);
  return buf;
}

export class DBVARYCHARView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i16
  get len(): number {
    return this.view.getInt16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get str(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i16
  set len(value: number) {
    this.view.setInt16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set str(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Search.DBVARYBIN (size: 16)
 */
export interface DBVARYBIN {
  /** i16 */
  len: number;
  /** array */
  array: Deno.PointerValue;
}

export const sizeofDBVARYBIN = 16;

export function allocDBVARYBIN(data?: Partial<DBVARYBIN>): Uint8Array {
  const buf = new Uint8Array(sizeofDBVARYBIN);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.len !== undefined) view.setInt16(0, Number(data.len), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.array !== undefined) view.setBigUint64(8, data.array === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.array))), true);
  return buf;
}

export class DBVARYBINView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i16
  get len(): number {
    return this.view.getInt16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get array(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i16
  set len(value: number) {
    this.view.setInt16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set array(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Search.DBMONEY (size: 8)
 */
export interface DBMONEY {
  /** i32 */
  mnyhigh: number;
  /** u32 */
  mnylow: number;
}

export const sizeofDBMONEY = 8;

export function allocDBMONEY(data?: Partial<DBMONEY>): Uint8Array {
  const buf = new Uint8Array(sizeofDBMONEY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.mnyhigh !== undefined) view.setInt32(0, Number(data.mnyhigh), true);
  // 0x04: u32
  if (data?.mnylow !== undefined) view.setUint32(4, Number(data.mnylow), true);
  return buf;
}

export class DBMONEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get mnyhigh(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get mnylow(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set mnyhigh(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set mnylow(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Search.DBDATETIME (size: 8)
 */
export interface DBDATETIME {
  /** i32 */
  dtdays: number;
  /** u32 */
  dttime: number;
}

export const sizeofDBDATETIME = 8;

export function allocDBDATETIME(data?: Partial<DBDATETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofDBDATETIME);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.dtdays !== undefined) view.setInt32(0, Number(data.dtdays), true);
  // 0x04: u32
  if (data?.dttime !== undefined) view.setUint32(4, Number(data.dttime), true);
  return buf;
}

export class DBDATETIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get dtdays(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get dttime(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set dtdays(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set dttime(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Search.DBDATETIM4 (size: 8)
 */
export interface DBDATETIM4 {
  /** u16 */
  numdays: number;
  /** u16 */
  nummins: number;
}

export const sizeofDBDATETIM4 = 8;

export function allocDBDATETIM4(data?: Partial<DBDATETIM4>): Uint8Array {
  const buf = new Uint8Array(sizeofDBDATETIM4);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.numdays !== undefined) view.setUint16(0, Number(data.numdays), true);
  // 0x02: u16
  if (data?.nummins !== undefined) view.setUint16(2, Number(data.nummins), true);
  // 0x04: pad4
  return buf;
}

export class DBDATETIM4View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get numdays(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get nummins(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u16
  set numdays(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set nummins(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Search.SQLPERF (size: 160)
 */
export interface SQLPERF {
  /** u32 */
  TimerResolution: number;
  /** u32 */
  SQLidu: number;
  /** u32 */
  SQLiduRows: number;
  /** u32 */
  SQLSelects: number;
  /** u32 */
  SQLSelectRows: number;
  /** u32 */
  Transactions: number;
  /** u32 */
  SQLPrepares: number;
  /** u32 */
  ExecDirects: number;
  /** u32 */
  SQLExecutes: number;
  /** u32 */
  CursorOpens: number;
  /** u32 */
  CursorSize: number;
  /** u32 */
  CursorUsed: number;
  /** f64 */
  PercentCursorUsed: number;
  /** f64 */
  AvgFetchTime: number;
  /** f64 */
  AvgCursorSize: number;
  /** f64 */
  AvgCursorUsed: number;
  /** u32 */
  SQLFetchTime: number;
  /** u32 */
  SQLFetchCount: number;
  /** u32 */
  CurrentStmtCount: number;
  /** u32 */
  MaxOpenStmt: number;
  /** u32 */
  SumOpenStmt: number;
  /** u32 */
  CurrentConnectionCount: number;
  /** u32 */
  MaxConnectionsOpened: number;
  /** u32 */
  SumConnectionsOpened: number;
  /** u32 */
  SumConnectiontime: number;
  /** f64 */
  AvgTimeOpened: number;
  /** u32 */
  ServerRndTrips: number;
  /** u32 */
  BuffersSent: number;
  /** u32 */
  BuffersRec: number;
  /** u32 */
  BytesSent: number;
  /** u32 */
  BytesRec: number;
  /** u32 */
  msExecutionTime: number;
  /** u32 */
  msNetWorkServerTime: number;
}

export const sizeofSQLPERF = 160;

export function allocSQLPERF(data?: Partial<SQLPERF>): Uint8Array {
  const buf = new Uint8Array(sizeofSQLPERF);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TimerResolution !== undefined) view.setUint32(0, Number(data.TimerResolution), true);
  // 0x04: u32
  if (data?.SQLidu !== undefined) view.setUint32(4, Number(data.SQLidu), true);
  // 0x08: u32
  if (data?.SQLiduRows !== undefined) view.setUint32(8, Number(data.SQLiduRows), true);
  // 0x0c: u32
  if (data?.SQLSelects !== undefined) view.setUint32(12, Number(data.SQLSelects), true);
  // 0x10: u32
  if (data?.SQLSelectRows !== undefined) view.setUint32(16, Number(data.SQLSelectRows), true);
  // 0x14: u32
  if (data?.Transactions !== undefined) view.setUint32(20, Number(data.Transactions), true);
  // 0x18: u32
  if (data?.SQLPrepares !== undefined) view.setUint32(24, Number(data.SQLPrepares), true);
  // 0x1c: u32
  if (data?.ExecDirects !== undefined) view.setUint32(28, Number(data.ExecDirects), true);
  // 0x20: u32
  if (data?.SQLExecutes !== undefined) view.setUint32(32, Number(data.SQLExecutes), true);
  // 0x24: u32
  if (data?.CursorOpens !== undefined) view.setUint32(36, Number(data.CursorOpens), true);
  // 0x28: u32
  if (data?.CursorSize !== undefined) view.setUint32(40, Number(data.CursorSize), true);
  // 0x2c: u32
  if (data?.CursorUsed !== undefined) view.setUint32(44, Number(data.CursorUsed), true);
  // 0x30: f64
  if (data?.PercentCursorUsed !== undefined) view.setFloat64(48, Number(data.PercentCursorUsed), true);
  // 0x38: f64
  if (data?.AvgFetchTime !== undefined) view.setFloat64(56, Number(data.AvgFetchTime), true);
  // 0x40: f64
  if (data?.AvgCursorSize !== undefined) view.setFloat64(64, Number(data.AvgCursorSize), true);
  // 0x48: f64
  if (data?.AvgCursorUsed !== undefined) view.setFloat64(72, Number(data.AvgCursorUsed), true);
  // 0x50: u32
  if (data?.SQLFetchTime !== undefined) view.setUint32(80, Number(data.SQLFetchTime), true);
  // 0x54: u32
  if (data?.SQLFetchCount !== undefined) view.setUint32(84, Number(data.SQLFetchCount), true);
  // 0x58: u32
  if (data?.CurrentStmtCount !== undefined) view.setUint32(88, Number(data.CurrentStmtCount), true);
  // 0x5c: u32
  if (data?.MaxOpenStmt !== undefined) view.setUint32(92, Number(data.MaxOpenStmt), true);
  // 0x60: u32
  if (data?.SumOpenStmt !== undefined) view.setUint32(96, Number(data.SumOpenStmt), true);
  // 0x64: u32
  if (data?.CurrentConnectionCount !== undefined) view.setUint32(100, Number(data.CurrentConnectionCount), true);
  // 0x68: u32
  if (data?.MaxConnectionsOpened !== undefined) view.setUint32(104, Number(data.MaxConnectionsOpened), true);
  // 0x6c: u32
  if (data?.SumConnectionsOpened !== undefined) view.setUint32(108, Number(data.SumConnectionsOpened), true);
  // 0x70: u32
  if (data?.SumConnectiontime !== undefined) view.setUint32(112, Number(data.SumConnectiontime), true);
  // 0x74: pad4
  // 0x78: f64
  if (data?.AvgTimeOpened !== undefined) view.setFloat64(120, Number(data.AvgTimeOpened), true);
  // 0x80: u32
  if (data?.ServerRndTrips !== undefined) view.setUint32(128, Number(data.ServerRndTrips), true);
  // 0x84: u32
  if (data?.BuffersSent !== undefined) view.setUint32(132, Number(data.BuffersSent), true);
  // 0x88: u32
  if (data?.BuffersRec !== undefined) view.setUint32(136, Number(data.BuffersRec), true);
  // 0x8c: u32
  if (data?.BytesSent !== undefined) view.setUint32(140, Number(data.BytesSent), true);
  // 0x90: u32
  if (data?.BytesRec !== undefined) view.setUint32(144, Number(data.BytesRec), true);
  // 0x94: u32
  if (data?.msExecutionTime !== undefined) view.setUint32(148, Number(data.msExecutionTime), true);
  // 0x98: u32
  if (data?.msNetWorkServerTime !== undefined) view.setUint32(152, Number(data.msNetWorkServerTime), true);
  // 0x9c: pad4
  return buf;
}

export class SQLPERFView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get TimerResolution(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SQLidu(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get SQLiduRows(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get SQLSelects(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get SQLSelectRows(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Transactions(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get SQLPrepares(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get ExecDirects(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get SQLExecutes(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get CursorOpens(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get CursorSize(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get CursorUsed(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: f64
  get PercentCursorUsed(): number {
    return this.view.getFloat64(48, true);
  }

  // 0x38: f64
  get AvgFetchTime(): number {
    return this.view.getFloat64(56, true);
  }

  // 0x40: f64
  get AvgCursorSize(): number {
    return this.view.getFloat64(64, true);
  }

  // 0x48: f64
  get AvgCursorUsed(): number {
    return this.view.getFloat64(72, true);
  }

  // 0x50: u32
  get SQLFetchTime(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get SQLFetchCount(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get CurrentStmtCount(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get MaxOpenStmt(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: u32
  get SumOpenStmt(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u32
  get CurrentConnectionCount(): number {
    return this.view.getUint32(100, true);
  }

  // 0x68: u32
  get MaxConnectionsOpened(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: u32
  get SumConnectionsOpened(): number {
    return this.view.getUint32(108, true);
  }

  // 0x70: u32
  get SumConnectiontime(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: pad4

  // 0x78: f64
  get AvgTimeOpened(): number {
    return this.view.getFloat64(120, true);
  }

  // 0x80: u32
  get ServerRndTrips(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: u32
  get BuffersSent(): number {
    return this.view.getUint32(132, true);
  }

  // 0x88: u32
  get BuffersRec(): number {
    return this.view.getUint32(136, true);
  }

  // 0x8c: u32
  get BytesSent(): number {
    return this.view.getUint32(140, true);
  }

  // 0x90: u32
  get BytesRec(): number {
    return this.view.getUint32(144, true);
  }

  // 0x94: u32
  get msExecutionTime(): number {
    return this.view.getUint32(148, true);
  }

  // 0x98: u32
  get msNetWorkServerTime(): number {
    return this.view.getUint32(152, true);
  }

  // 0x9c: pad4

  // 0x00: u32
  set TimerResolution(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SQLidu(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set SQLiduRows(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set SQLSelects(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set SQLSelectRows(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Transactions(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set SQLPrepares(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set ExecDirects(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set SQLExecutes(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set CursorOpens(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set CursorSize(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set CursorUsed(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: f64
  set PercentCursorUsed(value: number) {
    this.view.setFloat64(48, value, true);
  }

  // 0x38: f64
  set AvgFetchTime(value: number) {
    this.view.setFloat64(56, value, true);
  }

  // 0x40: f64
  set AvgCursorSize(value: number) {
    this.view.setFloat64(64, value, true);
  }

  // 0x48: f64
  set AvgCursorUsed(value: number) {
    this.view.setFloat64(72, value, true);
  }

  // 0x50: u32
  set SQLFetchTime(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set SQLFetchCount(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set CurrentStmtCount(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set MaxOpenStmt(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: u32
  set SumOpenStmt(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u32
  set CurrentConnectionCount(value: number) {
    this.view.setUint32(100, value, true);
  }

  // 0x68: u32
  set MaxConnectionsOpened(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: u32
  set SumConnectionsOpened(value: number) {
    this.view.setUint32(108, value, true);
  }

  // 0x70: u32
  set SumConnectiontime(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: pad4

  // 0x78: f64
  set AvgTimeOpened(value: number) {
    this.view.setFloat64(120, value, true);
  }

  // 0x80: u32
  set ServerRndTrips(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: u32
  set BuffersSent(value: number) {
    this.view.setUint32(132, value, true);
  }

  // 0x88: u32
  set BuffersRec(value: number) {
    this.view.setUint32(136, value, true);
  }

  // 0x8c: u32
  set BytesSent(value: number) {
    this.view.setUint32(140, value, true);
  }

  // 0x90: u32
  set BytesRec(value: number) {
    this.view.setUint32(144, value, true);
  }

  // 0x94: u32
  set msExecutionTime(value: number) {
    this.view.setUint32(148, value, true);
  }

  // 0x98: u32
  set msNetWorkServerTime(value: number) {
    this.view.setUint32(152, value, true);
  }

  // 0x9c: pad4
}

/**
 * Windows.Win32.System.Search.NOTRESTRICTION (size: 8)
 */
export interface NOTRESTRICTION {
  /** ptr */
  pRes: Deno.PointerValue | Uint8Array;
}

export const sizeofNOTRESTRICTION = 8;

export function allocNOTRESTRICTION(data?: Partial<NOTRESTRICTION>): Uint8Array {
  const buf = new Uint8Array(sizeofNOTRESTRICTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pRes !== undefined) view.setBigUint64(0, data.pRes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pRes))), true);
  return buf;
}

export class NOTRESTRICTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pRes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set pRes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Search.NODERESTRICTION (size: 24)
 */
export interface NODERESTRICTION {
  /** u32 */
  cRes: number;
  /** ptr */
  paRes: Deno.PointerValue | Uint8Array;
  /** u32 */
  reserved: number;
}

export const sizeofNODERESTRICTION = 24;

export function allocNODERESTRICTION(data?: Partial<NODERESTRICTION>): Uint8Array {
  const buf = new Uint8Array(sizeofNODERESTRICTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cRes !== undefined) view.setUint32(0, Number(data.cRes), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.paRes !== undefined) view.setBigUint64(8, data.paRes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.paRes))), true);
  // 0x10: u32
  if (data?.reserved !== undefined) view.setUint32(16, Number(data.reserved), true);
  // 0x14: pad4
  return buf;
}

export class NODERESTRICTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cRes(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get paRes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get reserved(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set cRes(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set paRes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set reserved(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.System.Search.VECTORRESTRICTION (size: 16)
 */
export interface VECTORRESTRICTION {
  /** Windows.Win32.System.Search.NODERESTRICTION */
  Node: Uint8Array | Deno.PointerValue;
  /** u32 */
  RankMethod: number;
}

export const sizeofVECTORRESTRICTION = 16;

export function allocVECTORRESTRICTION(data?: Partial<VECTORRESTRICTION>): Uint8Array {
  const buf = new Uint8Array(sizeofVECTORRESTRICTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Node !== undefined) view.setBigUint64(0, data.Node === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Node))), true);
  // 0x08: u32
  if (data?.RankMethod !== undefined) view.setUint32(8, Number(data.RankMethod), true);
  // 0x0c: pad4
  return buf;
}

export class VECTORRESTRICTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Node(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get RankMethod(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Node(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set RankMethod(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Com.StructuredStorage.PROPSPEC (size: 16)
 */
export interface PROPSPEC {
  /** Windows.Win32.System.Com.StructuredStorage.PROPSPEC_KIND */
  ulKind: PROPSPEC_KIND;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofPROPSPEC = 16;

export function allocPROPSPEC(data?: Partial<PROPSPEC>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPSPEC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulKind !== undefined) view.setUint32(0, Number(data.ulKind), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class PROPSPECView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulKind(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set ulKind(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.IndexServer.FULLPROPSPEC (size: 16)
 */
export interface FULLPROPSPEC {
  /** System.Guid */
  guidPropSet: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Com.StructuredStorage.PROPSPEC */
  psProperty: Uint8Array | Deno.PointerValue;
}

export const sizeofFULLPROPSPEC = 16;

export function allocFULLPROPSPEC(data?: Partial<FULLPROPSPEC>): Uint8Array {
  const buf = new Uint8Array(sizeofFULLPROPSPEC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guidPropSet !== undefined) view.setBigUint64(0, data.guidPropSet === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidPropSet))), true);
  // 0x08: pointer
  if (data?.psProperty !== undefined) view.setBigUint64(8, data.psProperty === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.psProperty))), true);
  return buf;
}

export class FULLPROPSPECView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get guidPropSet(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get psProperty(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set guidPropSet(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set psProperty(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Search.CONTENTRESTRICTION (size: 24)
 */
export interface CONTENTRESTRICTION {
  /** Windows.Win32.Storage.IndexServer.FULLPROPSPEC */
  prop: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pwcsPhrase: string | null | Uint8Array | Uint16Array;
  /** u32 */
  lcid: number;
  /** u32 */
  ulGenerateMethod: number;
}

export const sizeofCONTENTRESTRICTION = 24;

export function allocCONTENTRESTRICTION(data?: Partial<CONTENTRESTRICTION>): Uint8Array {
  const buf = new Uint8Array(sizeofCONTENTRESTRICTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.prop !== undefined) view.setBigUint64(0, data.prop === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.prop))), true);
  // 0x08: buffer
  if (data?.pwcsPhrase !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwcsPhrase);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.lcid !== undefined) view.setUint32(16, Number(data.lcid), true);
  // 0x14: u32
  if (data?.ulGenerateMethod !== undefined) view.setUint32(20, Number(data.ulGenerateMethod), true);
  return buf;
}

export class CONTENTRESTRICTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get prop(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pwcsPhrase(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get lcid(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ulGenerateMethod(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: pointer
  set prop(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set pwcsPhrase(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set lcid(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ulGenerateMethod(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.System.Search.NATLANGUAGERESTRICTION (size: 24)
 */
export interface NATLANGUAGERESTRICTION {
  /** Windows.Win32.Storage.IndexServer.FULLPROPSPEC */
  prop: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pwcsPhrase: string | null | Uint8Array | Uint16Array;
  /** u32 */
  lcid: number;
}

export const sizeofNATLANGUAGERESTRICTION = 24;

export function allocNATLANGUAGERESTRICTION(data?: Partial<NATLANGUAGERESTRICTION>): Uint8Array {
  const buf = new Uint8Array(sizeofNATLANGUAGERESTRICTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.prop !== undefined) view.setBigUint64(0, data.prop === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.prop))), true);
  // 0x08: buffer
  if (data?.pwcsPhrase !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwcsPhrase);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.lcid !== undefined) view.setUint32(16, Number(data.lcid), true);
  // 0x14: pad4
  return buf;
}

export class NATLANGUAGERESTRICTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get prop(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pwcsPhrase(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get lcid(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set prop(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set pwcsPhrase(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set lcid(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.System.Search.PROPERTYRESTRICTION (size: 24)
 */
export interface PROPERTYRESTRICTION {
  /** u32 */
  rel: number;
  /** Windows.Win32.Storage.IndexServer.FULLPROPSPEC */
  prop: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Com.StructuredStorage.PROPVARIANT */
  prval: Uint8Array | Deno.PointerValue;
}

export const sizeofPROPERTYRESTRICTION = 24;

export function allocPROPERTYRESTRICTION(data?: Partial<PROPERTYRESTRICTION>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPERTYRESTRICTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.rel !== undefined) view.setUint32(0, Number(data.rel), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.prop !== undefined) view.setBigUint64(8, data.prop === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.prop))), true);
  // 0x10: pointer
  if (data?.prval !== undefined) view.setBigUint64(16, data.prval === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.prval))), true);
  return buf;
}

export class PROPERTYRESTRICTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get rel(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get prop(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get prval(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set rel(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set prop(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set prval(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _URes (size: 64)
 */
export interface _URes {
  /** Windows.Win32.System.Search.NODERESTRICTION */
  ar: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Search.NODERESTRICTION */
  orRestriction: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Search.NODERESTRICTION */
  pxr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Search.VECTORRESTRICTION */
  vr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Search.NOTRESTRICTION */
  nr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Search.CONTENTRESTRICTION */
  cr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Search.NATLANGUAGERESTRICTION */
  nlr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Search.PROPERTYRESTRICTION */
  pr: Uint8Array | Deno.PointerValue;
}

export const sizeof_URes = 64;

export function alloc_URes(data?: Partial<_URes>): Uint8Array {
  const buf = new Uint8Array(sizeof_URes);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ar !== undefined) view.setBigUint64(0, data.ar === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ar))), true);
  // 0x08: pointer
  if (data?.orRestriction !== undefined) view.setBigUint64(8, data.orRestriction === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.orRestriction))), true);
  // 0x10: pointer
  if (data?.pxr !== undefined) view.setBigUint64(16, data.pxr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pxr))), true);
  // 0x18: pointer
  if (data?.vr !== undefined) view.setBigUint64(24, data.vr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.vr))), true);
  // 0x20: pointer
  if (data?.nr !== undefined) view.setBigUint64(32, data.nr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.nr))), true);
  // 0x28: pointer
  if (data?.cr !== undefined) view.setBigUint64(40, data.cr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.cr))), true);
  // 0x30: pointer
  if (data?.nlr !== undefined) view.setBigUint64(48, data.nlr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.nlr))), true);
  // 0x38: pointer
  if (data?.pr !== undefined) view.setBigUint64(56, data.pr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pr))), true);
  return buf;
}

export class _UResView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ar(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get orRestriction(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pxr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get vr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get nr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get cr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get nlr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get pr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ar(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set orRestriction(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set pxr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set vr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set nr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set cr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set nlr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set pr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Search.RESTRICTION (size: 16)
 */
export interface RESTRICTION {
  /** u32 */
  rt: number;
  /** u32 */
  weight: number;
  /** _URes */
  res: Uint8Array | Deno.PointerValue;
}

export const sizeofRESTRICTION = 16;

export function allocRESTRICTION(data?: Partial<RESTRICTION>): Uint8Array {
  const buf = new Uint8Array(sizeofRESTRICTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.rt !== undefined) view.setUint32(0, Number(data.rt), true);
  // 0x04: u32
  if (data?.weight !== undefined) view.setUint32(4, Number(data.weight), true);
  // 0x08: pointer
  if (data?.res !== undefined) view.setBigUint64(8, data.res === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.res))), true);
  return buf;
}

export class RESTRICTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get rt(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get weight(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get res(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set rt(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set weight(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set res(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Search.COLUMNSET (size: 16)
 */
export interface COLUMNSET {
  /** u32 */
  cCol: number;
  /** ptr */
  aCol: Deno.PointerValue | Uint8Array;
}

export const sizeofCOLUMNSET = 16;

export function allocCOLUMNSET(data?: Partial<COLUMNSET>): Uint8Array {
  const buf = new Uint8Array(sizeofCOLUMNSET);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cCol !== undefined) view.setUint32(0, Number(data.cCol), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.aCol !== undefined) view.setBigUint64(8, data.aCol === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.aCol))), true);
  return buf;
}

export class COLUMNSETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cCol(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get aCol(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cCol(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set aCol(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Search.SORTKEY (size: 16)
 */
export interface SORTKEY {
  /** Windows.Win32.Storage.IndexServer.FULLPROPSPEC */
  propColumn: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwOrder: number;
  /** u32 */
  locale: number;
}

export const sizeofSORTKEY = 16;

export function allocSORTKEY(data?: Partial<SORTKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofSORTKEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.propColumn !== undefined) view.setBigUint64(0, data.propColumn === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.propColumn))), true);
  // 0x08: u32
  if (data?.dwOrder !== undefined) view.setUint32(8, Number(data.dwOrder), true);
  // 0x0c: u32
  if (data?.locale !== undefined) view.setUint32(12, Number(data.locale), true);
  return buf;
}

export class SORTKEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get propColumn(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwOrder(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get locale(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set propColumn(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwOrder(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set locale(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.System.Search.SORTSET (size: 16)
 */
export interface SORTSET {
  /** u32 */
  cCol: number;
  /** ptr */
  aCol: Deno.PointerValue | Uint8Array;
}

export const sizeofSORTSET = 16;

export function allocSORTSET(data?: Partial<SORTSET>): Uint8Array {
  const buf = new Uint8Array(sizeofSORTSET);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cCol !== undefined) view.setUint32(0, Number(data.cCol), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.aCol !== undefined) view.setBigUint64(8, data.aCol === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.aCol))), true);
  return buf;
}

export class SORTSETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cCol(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get aCol(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cCol(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set aCol(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Search.BUCKETCATEGORIZE (size: 8)
 */
export interface BUCKETCATEGORIZE {
  /** u32 */
  cBuckets: number;
  /** u32 */
  Distribution: number;
}

export const sizeofBUCKETCATEGORIZE = 8;

export function allocBUCKETCATEGORIZE(data?: Partial<BUCKETCATEGORIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofBUCKETCATEGORIZE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cBuckets !== undefined) view.setUint32(0, Number(data.cBuckets), true);
  // 0x04: u32
  if (data?.Distribution !== undefined) view.setUint32(4, Number(data.Distribution), true);
  return buf;
}

export class BUCKETCATEGORIZEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cBuckets(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Distribution(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set cBuckets(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Distribution(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Search.RANGECATEGORIZE (size: 16)
 */
export interface RANGECATEGORIZE {
  /** u32 */
  cRange: number;
  /** ptr */
  aRangeBegin: Deno.PointerValue | Uint8Array;
}

export const sizeofRANGECATEGORIZE = 16;

export function allocRANGECATEGORIZE(data?: Partial<RANGECATEGORIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofRANGECATEGORIZE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cRange !== undefined) view.setUint32(0, Number(data.cRange), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.aRangeBegin !== undefined) view.setBigUint64(8, data.aRangeBegin === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.aRangeBegin))), true);
  return buf;
}

export class RANGECATEGORIZEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cRange(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get aRangeBegin(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cRange(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set aRangeBegin(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Search.CATEGORIZATION (size: 24)
 */
export interface CATEGORIZATION {
  /** u32 */
  ulCatType: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Search.COLUMNSET */
  csColumns: Uint8Array | Deno.PointerValue;
}

export const sizeofCATEGORIZATION = 24;

export function allocCATEGORIZATION(data?: Partial<CATEGORIZATION>): Uint8Array {
  const buf = new Uint8Array(sizeofCATEGORIZATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulCatType !== undefined) view.setUint32(0, Number(data.ulCatType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x10: pointer
  if (data?.csColumns !== undefined) view.setBigUint64(16, data.csColumns === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.csColumns))), true);
  return buf;
}

export class CATEGORIZATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulCatType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get csColumns(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set ulCatType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set csColumns(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Search.CATEGORIZATIONSET (size: 16)
 */
export interface CATEGORIZATIONSET {
  /** u32 */
  cCat: number;
  /** ptr */
  aCat: Deno.PointerValue | Uint8Array;
}

export const sizeofCATEGORIZATIONSET = 16;

export function allocCATEGORIZATIONSET(data?: Partial<CATEGORIZATIONSET>): Uint8Array {
  const buf = new Uint8Array(sizeofCATEGORIZATIONSET);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cCat !== undefined) view.setUint32(0, Number(data.cCat), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.aCat !== undefined) view.setBigUint64(8, data.aCat === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.aCat))), true);
  return buf;
}

export class CATEGORIZATIONSETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cCat(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get aCat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cCat(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set aCat(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _Anonymous1_e__Union (size: 64)
 */
export interface _Anonymous1_e__Union {
  /** usize */
  Data0: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  String: string | null | Uint8Array | Uint16Array;
  /** usize */
  u: Deno.PointerValue;
  /** ptr */
  psid: Deno.PointerValue | Uint8Array;
  /** ptr */
  pguid: Deno.PointerValue | Uint8Array;
  /** u32 */
  LogonId_LowPart: number;
  /** ptr */
  pObjectTypes: Deno.PointerValue | Uint8Array;
  /** ptr */
  pIpAddress: Deno.PointerValue | Uint8Array;
}

export const sizeof_Anonymous1_e__Union = 64;

export function alloc_Anonymous1_e__Union(data?: Partial<_Anonymous1_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous1_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data0 !== undefined) view.setBigUint64(0, BigInt(data.Data0), true);
  // 0x08: buffer
  if (data?.String !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.String);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: usize
  if (data?.u !== undefined) view.setBigUint64(16, BigInt(data.u), true);
  // 0x18: pointer
  if (data?.psid !== undefined) view.setBigUint64(24, data.psid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.psid))), true);
  // 0x20: pointer
  if (data?.pguid !== undefined) view.setBigUint64(32, data.pguid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pguid))), true);
  // 0x28: u32
  if (data?.LogonId_LowPart !== undefined) view.setUint32(40, Number(data.LogonId_LowPart), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pObjectTypes !== undefined) view.setBigUint64(48, data.pObjectTypes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pObjectTypes))), true);
  // 0x38: pointer
  if (data?.pIpAddress !== undefined) view.setBigUint64(56, data.pIpAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pIpAddress))), true);
  return buf;
}

export class _Anonymous1_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get Data0(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: buffer
  get String(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: usize
  get u(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: pointer
  get psid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get pguid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get LogonId_LowPart(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get pObjectTypes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get pIpAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: usize
  set Data0(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: buffer
  set String(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: usize
  set u(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set psid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set pguid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set LogonId_LowPart(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set pObjectTypes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set pIpAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _Anonymous2_e__Union (size: 16)
 */
export interface _Anonymous2_e__Union {
  /** usize */
  Data1: Deno.PointerValue;
  /** i32 */
  LogonId_HighPart: number;
}

export const sizeof_Anonymous2_e__Union = 16;

export function alloc_Anonymous2_e__Union(data?: Partial<_Anonymous2_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous2_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data1 !== undefined) view.setBigUint64(0, BigInt(data.Data1), true);
  // 0x08: i32
  if (data?.LogonId_HighPart !== undefined) view.setInt32(8, Number(data.LogonId_HighPart), true);
  // 0x0c: pad4
  return buf;
}

export class _Anonymous2_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get Data1(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: i32
  get LogonId_HighPart(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: usize
  set Data1(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: i32
  set LogonId_HighPart(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Search.ODBC_VS_ARGS (size: 40)
 */
export interface ODBC_VS_ARGS {
  /** ptr */
  pguidEvent: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFlags: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
  /** i16 */
  RetCode: number;
}

export const sizeofODBC_VS_ARGS = 40;

export function allocODBC_VS_ARGS(data?: Partial<ODBC_VS_ARGS>): Uint8Array {
  const buf = new Uint8Array(sizeofODBC_VS_ARGS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pguidEvent !== undefined) view.setBigUint64(0, data.pguidEvent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pguidEvent))), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(16, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x18: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(24, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  // 0x20: i16
  if (data?.RetCode !== undefined) view.setInt16(32, Number(data.RetCode), true);
  // 0x22: pad6
  return buf;
}

export class ODBC_VS_ARGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pguidEvent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i16
  get RetCode(): number {
    return this.view.getInt16(32, true);
  }

  // 0x22: pad6

  // 0x00: pointer
  set pguidEvent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: i16
  set RetCode(value: number) {
    this.view.setInt16(32, value, true);
  }

  // 0x22: pad6
}

/**
 * Windows.Win32.System.Search.SSVARIANT (size: 24)
 */
export interface SSVARIANT {
  /** u16 */
  vt: number;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofSSVARIANT = 24;

export function allocSSVARIANT(data?: Partial<SSVARIANT>): Uint8Array {
  const buf = new Uint8Array(sizeofSSVARIANT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.vt !== undefined) view.setUint16(0, Number(data.vt), true);
  // 0x02: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(2, Number(data.dwReserved1), true);
  // 0x06: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(6, Number(data.dwReserved2), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class SSVARIANTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get vt(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u32
  get dwReserved1(): number {
    return this.view.getUint32(2, true);
  }

  // 0x06: u32
  get dwReserved2(): number {
    return this.view.getUint32(6, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set vt(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u32
  set dwReserved1(value: number) {
    this.view.setUint32(2, value, true);
  }

  // 0x06: u32
  set dwReserved2(value: number) {
    this.view.setUint32(6, value, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Search.SSERRORINFO (size: 32)
 */
export interface SSERRORINFO {
  /** Windows.Win32.Foundation.PWSTR */
  pwszMessage: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszServer: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszProcedure: string | null | Uint8Array | Uint16Array;
  /** i32 */
  lNative: number;
  /** u8 */
  bState: number;
  /** u8 */
  bClass: number;
  /** u16 */
  wLineNumber: number;
}

export const sizeofSSERRORINFO = 32;

export function allocSSERRORINFO(data?: Partial<SSERRORINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSSERRORINFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszMessage !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszMessage);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pwszServer !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszServer);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pwszProcedure !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszProcedure);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: i32
  if (data?.lNative !== undefined) view.setInt32(24, Number(data.lNative), true);
  // 0x1c: u8
  if (data?.bState !== undefined) view.setUint8(28, Number(data.bState));
  // 0x1d: u8
  if (data?.bClass !== undefined) view.setUint8(29, Number(data.bClass));
  // 0x1e: u16
  if (data?.wLineNumber !== undefined) view.setUint16(30, Number(data.wLineNumber), true);
  return buf;
}

export class SSERRORINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pwszMessage(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pwszServer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pwszProcedure(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get lNative(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: u8
  get bState(): number {
    return this.view.getUint8(28);
  }

  // 0x1d: u8
  get bClass(): number {
    return this.view.getUint8(29);
  }

  // 0x1e: u16
  get wLineNumber(): number {
    return this.view.getUint16(30, true);
  }

  // 0x00: buffer
  set pwszMessage(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pwszServer(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pwszProcedure(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: i32
  set lNative(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: u8
  set bState(value: number) {
    this.view.setUint8(28, value);
  }

  // 0x1d: u8
  set bClass(value: number) {
    this.view.setUint8(29, value);
  }

  // 0x1e: u16
  set wLineNumber(value: number) {
    this.view.setUint16(30, value, true);
  }
}

export type PSTR = Deno.PointerValue | Uint8Array;

export type HANDLE = Deno.PointerValue;

// Native Libraries

try {
  var libODBC32_dll = Deno.dlopen("ODBC32.dll", {
    SQLBindCol: {
      parameters: ["pointer", "u16", "i16", "pointer", "i32", "pointer"],
      result: "i16",
    },
    SQLBindParam: {
      parameters: ["pointer", "u16", "i16", "i16", "u32", "i16", "pointer", "pointer"],
      result: "i16",
    },
    SQLColAttribute: {
      parameters: ["pointer", "u16", "u16", "pointer", "i16", "pointer", "pointer"],
      result: "i16",
    },
    SQLDescribeCol: {
      parameters: ["pointer", "u16", "pointer", "i16", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i16",
    },
    SQLFetchScroll: {
      parameters: ["pointer", "i16", "i32"],
      result: "i16",
    },
    SQLGetData: {
      parameters: ["pointer", "u16", "i16", "pointer", "i32", "pointer"],
      result: "i16",
    },
    SQLGetDescRec: {
      parameters: ["pointer", "i16", "pointer", "i16", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i16",
    },
    SQLPutData: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i16",
    },
    SQLRowCount: {
      parameters: ["pointer", "pointer"],
      result: "i16",
    },
    SQLSetConnectOption: {
      parameters: ["pointer", "u16", "u32"],
      result: "i16",
    },
    SQLSetDescRec: {
      parameters: ["pointer", "i16", "i16", "i16", "i32", "i16", "i16", "pointer", "pointer", "pointer"],
      result: "i16",
    },
    SQLSetParam: {
      parameters: ["pointer", "u16", "i16", "i16", "u32", "i16", "pointer", "pointer"],
      result: "i16",
    },
    SQLSetStmtOption: {
      parameters: ["pointer", "u16", "u32"],
      result: "i16",
    },
    SQLColAttributes: {
      parameters: ["pointer", "u16", "u16", "pointer", "i16", "pointer", "pointer"],
      result: "i16",
    },
    SQLDescribeParam: {
      parameters: ["pointer", "u16", "pointer", "pointer", "pointer", "pointer"],
      result: "i16",
    },
    SQLExtendedFetch: {
      parameters: ["pointer", "u16", "i32", "pointer", "pointer"],
      result: "i16",
    },
    SQLParamOptions: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i16",
    },
    SQLSetPos: {
      parameters: ["pointer", "u16", "u16", "u16"],
      result: "i16",
    },
    SQLBindParameter: {
      parameters: ["pointer", "u16", "i16", "i16", "i16", "u32", "i16", "pointer", "i32", "pointer"],
      result: "i16",
    },
    SQLSetScrollOptions: {
      parameters: ["pointer", "u16", "i32", "u16"],
      result: "i16",
    },
    SQLColAttributeW: {
      parameters: ["pointer", "u16", "u16", "pointer", "i16", "pointer", "pointer"],
      result: "i16",
    },
    SQLColAttributesW: {
      parameters: ["pointer", "u16", "u16", "pointer", "i16", "pointer", "pointer"],
      result: "i16",
    },
    SQLDescribeColW: {
      parameters: ["pointer", "u16", "pointer", "i16", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i16",
    },
    SQLGetDescRecW: {
      parameters: ["pointer", "i16", "pointer", "i16", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i16",
    },
    SQLSetConnectOptionW: {
      parameters: ["pointer", "u16", "u32"],
      result: "i16",
    },
    SQLColAttributeA: {
      parameters: ["pointer", "i16", "i16", "pointer", "i16", "pointer", "pointer"],
      result: "i16",
    },
    SQLColAttributesA: {
      parameters: ["pointer", "u16", "u16", "pointer", "i16", "pointer", "pointer"],
      result: "i16",
    },
    SQLDescribeColA: {
      parameters: ["pointer", "u16", "pointer", "i16", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i16",
    },
    SQLGetDescRecA: {
      parameters: ["pointer", "i16", "pointer", "i16", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i16",
    },
    SQLSetConnectOptionA: {
      parameters: ["pointer", "u16", "u32"],
      result: "i16",
    },
    SQLAllocConnect: {
      parameters: ["pointer", "pointer"],
      result: "i16",
    },
    SQLAllocEnv: {
      parameters: ["pointer"],
      result: "i16",
    },
    SQLAllocHandle: {
      parameters: ["i16", "pointer", "pointer"],
      result: "i16",
    },
    SQLAllocStmt: {
      parameters: ["pointer", "pointer"],
      result: "i16",
    },
    SQLCancel: {
      parameters: ["pointer"],
      result: "i16",
    },
    SQLCancelHandle: {
      parameters: ["i16", "pointer"],
      result: "i16",
    },
    SQLCloseCursor: {
      parameters: ["pointer"],
      result: "i16",
    },
    SQLColumns: {
      parameters: ["pointer", "pointer", "i16", "pointer", "i16", "pointer", "i16", "pointer", "i16"],
      result: "i16",
    },
    SQLCompleteAsync: {
      parameters: ["i16", "pointer", "pointer"],
      result: "i16",
    },
    SQLConnect: {
      parameters: ["pointer", "pointer", "i16", "pointer", "i16", "pointer", "i16"],
      result: "i16",
    },
    SQLCopyDesc: {
      parameters: ["pointer", "pointer"],
      result: "i16",
    },
    SQLDataSources: {
      parameters: ["pointer", "u16", "pointer", "i16", "pointer", "pointer", "i16", "pointer"],
      result: "i16",
    },
    SQLDisconnect: {
      parameters: ["pointer"],
      result: "i16",
    },
    SQLEndTran: {
      parameters: ["i16", "pointer", "i16"],
      result: "i16",
    },
    SQLError: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "i16", "pointer"],
      result: "i16",
    },
    SQLExecDirect: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i16",
    },
    SQLExecute: {
      parameters: ["pointer"],
      result: "i16",
    },
    SQLFetch: {
      parameters: ["pointer"],
      result: "i16",
    },
    SQLFreeConnect: {
      parameters: ["pointer"],
      result: "i16",
    },
    SQLFreeEnv: {
      parameters: ["pointer"],
      result: "i16",
    },
    SQLFreeHandle: {
      parameters: ["i16", "pointer"],
      result: "i16",
    },
    SQLFreeStmt: {
      parameters: ["pointer", "u16"],
      result: "i16",
    },
    SQLGetConnectAttr: {
      parameters: ["pointer", "i32", "pointer", "i32", "pointer"],
      result: "i16",
    },
    SQLGetConnectOption: {
      parameters: ["pointer", "u16", "pointer"],
      result: "i16",
    },
    SQLGetCursorName: {
      parameters: ["pointer", "pointer", "i16", "pointer"],
      result: "i16",
    },
    SQLGetDescField: {
      parameters: ["pointer", "i16", "i16", "pointer", "i32", "pointer"],
      result: "i16",
    },
    SQLGetDiagField: {
      parameters: ["i16", "pointer", "i16", "i16", "pointer", "i16", "pointer"],
      result: "i16",
    },
    SQLGetDiagRec: {
      parameters: ["i16", "pointer", "i16", "pointer", "pointer", "pointer", "i16", "pointer"],
      result: "i16",
    },
    SQLGetEnvAttr: {
      parameters: ["pointer", "i32", "pointer", "i32", "pointer"],
      result: "i16",
    },
    SQLGetFunctions: {
      parameters: ["pointer", "u16", "pointer"],
      result: "i16",
    },
    SQLGetInfo: {
      parameters: ["pointer", "u16", "pointer", "i16", "pointer"],
      result: "i16",
    },
    SQLGetStmtAttr: {
      parameters: ["pointer", "i32", "pointer", "i32", "pointer"],
      result: "i16",
    },
    SQLGetStmtOption: {
      parameters: ["pointer", "u16", "pointer"],
      result: "i16",
    },
    SQLGetTypeInfo: {
      parameters: ["pointer", "i16"],
      result: "i16",
    },
    SQLNumResultCols: {
      parameters: ["pointer", "pointer"],
      result: "i16",
    },
    SQLParamData: {
      parameters: ["pointer", "pointer"],
      result: "i16",
    },
    SQLPrepare: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i16",
    },
    SQLSetConnectAttr: {
      parameters: ["pointer", "i32", "pointer", "i32"],
      result: "i16",
    },
    SQLSetCursorName: {
      parameters: ["pointer", "pointer", "i16"],
      result: "i16",
    },
    SQLSetDescField: {
      parameters: ["pointer", "i16", "i16", "pointer", "i32"],
      result: "i16",
    },
    SQLSetEnvAttr: {
      parameters: ["pointer", "i32", "pointer", "i32"],
      result: "i16",
    },
    SQLSetStmtAttr: {
      parameters: ["pointer", "i32", "pointer", "i32"],
      result: "i16",
    },
    SQLSpecialColumns: {
      parameters: ["pointer", "u16", "pointer", "i16", "pointer", "i16", "pointer", "i16", "u16", "u16"],
      result: "i16",
    },
    SQLStatistics: {
      parameters: ["pointer", "pointer", "i16", "pointer", "i16", "pointer", "i16", "u16", "u16"],
      result: "i16",
    },
    SQLTables: {
      parameters: ["pointer", "pointer", "i16", "pointer", "i16", "pointer", "i16", "pointer", "i16"],
      result: "i16",
    },
    SQLTransact: {
      parameters: ["pointer", "pointer", "u16"],
      result: "i16",
    },
    SQLDriverConnect: {
      parameters: ["pointer", "isize", "pointer", "i16", "pointer", "i16", "pointer", "u16"],
      result: "i16",
    },
    SQLBrowseConnect: {
      parameters: ["pointer", "pointer", "i16", "pointer", "i16", "pointer"],
      result: "i16",
    },
    SQLBulkOperations: {
      parameters: ["pointer", "i16"],
      result: "i16",
    },
    SQLColumnPrivileges: {
      parameters: ["pointer", "pointer", "i16", "pointer", "i16", "pointer", "i16", "pointer", "i16"],
      result: "i16",
    },
    SQLForeignKeys: {
      parameters: ["pointer", "pointer", "i16", "pointer", "i16", "pointer", "i16", "pointer", "i16", "pointer", "i16", "pointer", "i16"],
      result: "i16",
    },
    SQLMoreResults: {
      parameters: ["pointer"],
      result: "i16",
    },
    SQLNativeSql: {
      parameters: ["pointer", "pointer", "i32", "pointer", "i32", "pointer"],
      result: "i16",
    },
    SQLNumParams: {
      parameters: ["pointer", "pointer"],
      result: "i16",
    },
    SQLPrimaryKeys: {
      parameters: ["pointer", "pointer", "i16", "pointer", "i16", "pointer", "i16"],
      result: "i16",
    },
    SQLProcedureColumns: {
      parameters: ["pointer", "pointer", "i16", "pointer", "i16", "pointer", "i16", "pointer", "i16"],
      result: "i16",
    },
    SQLProcedures: {
      parameters: ["pointer", "pointer", "i16", "pointer", "i16", "pointer", "i16"],
      result: "i16",
    },
    SQLTablePrivileges: {
      parameters: ["pointer", "pointer", "i16", "pointer", "i16", "pointer", "i16"],
      result: "i16",
    },
    SQLDrivers: {
      parameters: ["pointer", "u16", "pointer", "i16", "pointer", "pointer", "i16", "pointer"],
      result: "i16",
    },
    SQLAllocHandleStd: {
      parameters: ["i16", "pointer", "pointer"],
      result: "i16",
    },
    ODBCSetTryWaitValue: {
      parameters: ["u32"],
      result: "i32",
    },
    ODBCGetTryWaitValue: {
      parameters: [],
      result: "u32",
    },
    SQLConnectW: {
      parameters: ["pointer", "pointer", "i16", "pointer", "i16", "pointer", "i16"],
      result: "i16",
    },
    SQLErrorW: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "i16", "pointer"],
      result: "i16",
    },
    SQLExecDirectW: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i16",
    },
    SQLGetConnectAttrW: {
      parameters: ["pointer", "i32", "pointer", "i32", "pointer"],
      result: "i16",
    },
    SQLGetCursorNameW: {
      parameters: ["pointer", "pointer", "i16", "pointer"],
      result: "i16",
    },
    SQLSetDescFieldW: {
      parameters: ["pointer", "i16", "i16", "pointer", "i32"],
      result: "i16",
    },
    SQLGetDescFieldW: {
      parameters: ["pointer", "i16", "i16", "pointer", "i32", "pointer"],
      result: "i16",
    },
    SQLGetDiagFieldW: {
      parameters: ["i16", "pointer", "i16", "i16", "pointer", "i16", "pointer"],
      result: "i16",
    },
    SQLGetDiagRecW: {
      parameters: ["i16", "pointer", "i16", "pointer", "pointer", "pointer", "i16", "pointer"],
      result: "i16",
    },
    SQLPrepareW: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i16",
    },
    SQLSetConnectAttrW: {
      parameters: ["pointer", "i32", "pointer", "i32"],
      result: "i16",
    },
    SQLSetCursorNameW: {
      parameters: ["pointer", "pointer", "i16"],
      result: "i16",
    },
    SQLColumnsW: {
      parameters: ["pointer", "pointer", "i16", "pointer", "i16", "pointer", "i16", "pointer", "i16"],
      result: "i16",
    },
    SQLGetConnectOptionW: {
      parameters: ["pointer", "u16", "pointer"],
      result: "i16",
    },
    SQLGetInfoW: {
      parameters: ["pointer", "u16", "pointer", "i16", "pointer"],
      result: "i16",
    },
    SQLGetTypeInfoW: {
      parameters: ["pointer", "i16"],
      result: "i16",
    },
    SQLSpecialColumnsW: {
      parameters: ["pointer", "u16", "pointer", "i16", "pointer", "i16", "pointer", "i16", "u16", "u16"],
      result: "i16",
    },
    SQLStatisticsW: {
      parameters: ["pointer", "pointer", "i16", "pointer", "i16", "pointer", "i16", "u16", "u16"],
      result: "i16",
    },
    SQLTablesW: {
      parameters: ["pointer", "pointer", "i16", "pointer", "i16", "pointer", "i16", "pointer", "i16"],
      result: "i16",
    },
    SQLDataSourcesW: {
      parameters: ["pointer", "u16", "pointer", "i16", "pointer", "pointer", "i16", "pointer"],
      result: "i16",
    },
    SQLDriverConnectW: {
      parameters: ["pointer", "isize", "pointer", "i16", "pointer", "i16", "pointer", "u16"],
      result: "i16",
    },
    SQLBrowseConnectW: {
      parameters: ["pointer", "pointer", "i16", "pointer", "i16", "pointer"],
      result: "i16",
    },
    SQLColumnPrivilegesW: {
      parameters: ["pointer", "pointer", "i16", "pointer", "i16", "pointer", "i16", "pointer", "i16"],
      result: "i16",
    },
    SQLGetStmtAttrW: {
      parameters: ["pointer", "i32", "pointer", "i32", "pointer"],
      result: "i16",
    },
    SQLSetStmtAttrW: {
      parameters: ["pointer", "i32", "pointer", "i32"],
      result: "i16",
    },
    SQLForeignKeysW: {
      parameters: ["pointer", "pointer", "i16", "pointer", "i16", "pointer", "i16", "pointer", "i16", "pointer", "i16", "pointer", "i16"],
      result: "i16",
    },
    SQLNativeSqlW: {
      parameters: ["pointer", "pointer", "i32", "pointer", "i32", "pointer"],
      result: "i16",
    },
    SQLPrimaryKeysW: {
      parameters: ["pointer", "pointer", "i16", "pointer", "i16", "pointer", "i16"],
      result: "i16",
    },
    SQLProcedureColumnsW: {
      parameters: ["pointer", "pointer", "i16", "pointer", "i16", "pointer", "i16", "pointer", "i16"],
      result: "i16",
    },
    SQLProceduresW: {
      parameters: ["pointer", "pointer", "i16", "pointer", "i16", "pointer", "i16"],
      result: "i16",
    },
    SQLTablePrivilegesW: {
      parameters: ["pointer", "pointer", "i16", "pointer", "i16", "pointer", "i16"],
      result: "i16",
    },
    SQLDriversW: {
      parameters: ["pointer", "u16", "pointer", "i16", "pointer", "pointer", "i16", "pointer"],
      result: "i16",
    },
    SQLConnectA: {
      parameters: ["pointer", "pointer", "i16", "pointer", "i16", "pointer", "i16"],
      result: "i16",
    },
    SQLErrorA: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "i16", "pointer"],
      result: "i16",
    },
    SQLExecDirectA: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i16",
    },
    SQLGetConnectAttrA: {
      parameters: ["pointer", "i32", "pointer", "i32", "pointer"],
      result: "i16",
    },
    SQLGetCursorNameA: {
      parameters: ["pointer", "pointer", "i16", "pointer"],
      result: "i16",
    },
    SQLGetDescFieldA: {
      parameters: ["pointer", "i16", "i16", "pointer", "i32", "pointer"],
      result: "i16",
    },
    SQLGetDiagFieldA: {
      parameters: ["i16", "pointer", "i16", "i16", "pointer", "i16", "pointer"],
      result: "i16",
    },
    SQLGetDiagRecA: {
      parameters: ["i16", "pointer", "i16", "pointer", "pointer", "pointer", "i16", "pointer"],
      result: "i16",
    },
    SQLGetStmtAttrA: {
      parameters: ["pointer", "i32", "pointer", "i32", "pointer"],
      result: "i16",
    },
    SQLGetTypeInfoA: {
      parameters: ["pointer", "i16"],
      result: "i16",
    },
    SQLPrepareA: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i16",
    },
    SQLSetConnectAttrA: {
      parameters: ["pointer", "i32", "pointer", "i32"],
      result: "i16",
    },
    SQLSetCursorNameA: {
      parameters: ["pointer", "pointer", "i16"],
      result: "i16",
    },
    SQLColumnsA: {
      parameters: ["pointer", "pointer", "i16", "pointer", "i16", "pointer", "i16", "pointer", "i16"],
      result: "i16",
    },
    SQLGetConnectOptionA: {
      parameters: ["pointer", "u16", "pointer"],
      result: "i16",
    },
    SQLGetInfoA: {
      parameters: ["pointer", "u16", "pointer", "i16", "pointer"],
      result: "i16",
    },
    SQLSpecialColumnsA: {
      parameters: ["pointer", "u16", "pointer", "i16", "pointer", "i16", "pointer", "i16", "u16", "u16"],
      result: "i16",
    },
    SQLStatisticsA: {
      parameters: ["pointer", "pointer", "i16", "pointer", "i16", "pointer", "i16", "u16", "u16"],
      result: "i16",
    },
    SQLTablesA: {
      parameters: ["pointer", "pointer", "i16", "pointer", "i16", "pointer", "i16", "pointer", "i16"],
      result: "i16",
    },
    SQLDataSourcesA: {
      parameters: ["pointer", "u16", "pointer", "i16", "pointer", "pointer", "i16", "pointer"],
      result: "i16",
    },
    SQLDriverConnectA: {
      parameters: ["pointer", "isize", "pointer", "i16", "pointer", "i16", "pointer", "u16"],
      result: "i16",
    },
    SQLBrowseConnectA: {
      parameters: ["pointer", "pointer", "i16", "pointer", "i16", "pointer"],
      result: "i16",
    },
    SQLColumnPrivilegesA: {
      parameters: ["pointer", "pointer", "i16", "pointer", "i16", "pointer", "i16", "pointer", "i16"],
      result: "i16",
    },
    SQLForeignKeysA: {
      parameters: ["pointer", "pointer", "i16", "pointer", "i16", "pointer", "i16", "pointer", "i16", "pointer", "i16", "pointer", "i16"],
      result: "i16",
    },
    SQLNativeSqlA: {
      parameters: ["pointer", "pointer", "i32", "pointer", "i32", "pointer"],
      result: "i16",
    },
    SQLPrimaryKeysA: {
      parameters: ["pointer", "pointer", "i16", "pointer", "i16", "pointer", "i16"],
      result: "i16",
    },
    SQLProcedureColumnsA: {
      parameters: ["pointer", "pointer", "i16", "pointer", "i16", "pointer", "i16", "pointer", "i16"],
      result: "i16",
    },
    SQLProceduresA: {
      parameters: ["pointer", "pointer", "i16", "pointer", "i16", "pointer", "i16"],
      result: "i16",
    },
    SQLTablePrivilegesA: {
      parameters: ["pointer", "pointer", "i16", "pointer", "i16", "pointer", "i16"],
      result: "i16",
    },
    SQLDriversA: {
      parameters: ["pointer", "u16", "pointer", "i16", "pointer", "pointer", "i16", "pointer"],
      result: "i16",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libodbcbcp_dll = Deno.dlopen("odbcbcp.dll", {
    bcp_batch: {
      parameters: ["pointer"],
      result: "i32",
    },
    bcp_bind: {
      parameters: ["pointer", "pointer", "i32", "i32", "pointer", "i32", "i32", "i32"],
      result: "i16",
    },
    bcp_colfmt: {
      parameters: ["pointer", "i32", "u8", "i32", "i32", "pointer", "i32", "i32"],
      result: "i16",
    },
    bcp_collen: {
      parameters: ["pointer", "i32", "i32"],
      result: "i16",
    },
    bcp_colptr: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i16",
    },
    bcp_columns: {
      parameters: ["pointer", "i32"],
      result: "i16",
    },
    bcp_control: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i16",
    },
    bcp_done: {
      parameters: ["pointer"],
      result: "i32",
    },
    bcp_exec: {
      parameters: ["pointer", "pointer"],
      result: "i16",
    },
    bcp_getcolfmt: {
      parameters: ["pointer", "i32", "i32", "pointer", "i32", "pointer"],
      result: "i16",
    },
    bcp_initA: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "i32"],
      result: "i16",
    },
    bcp_initW: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "i32"],
      result: "i16",
    },
    bcp_moretext: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i16",
    },
    bcp_readfmtA: {
      parameters: ["pointer", "buffer"],
      result: "i16",
    },
    bcp_readfmtW: {
      parameters: ["pointer", "buffer"],
      result: "i16",
    },
    bcp_sendrow: {
      parameters: ["pointer"],
      result: "i16",
    },
    bcp_setcolfmt: {
      parameters: ["pointer", "i32", "i32", "pointer", "i32"],
      result: "i16",
    },
    bcp_writefmtA: {
      parameters: ["pointer", "buffer"],
      result: "i16",
    },
    bcp_writefmtW: {
      parameters: ["pointer", "buffer"],
      result: "i16",
    },
    dbprtypeA: {
      parameters: ["i32"],
      result: "buffer",
    },
    dbprtypeW: {
      parameters: ["i32"],
      result: "buffer",
    },
    SQLLinkedServers: {
      parameters: ["pointer"],
      result: "i16",
    },
    SQLLinkedCatalogsA: {
      parameters: ["pointer", "buffer", "i16"],
      result: "i16",
    },
    SQLLinkedCatalogsW: {
      parameters: ["pointer", "buffer", "i16"],
      result: "i16",
    },
    SQLInitEnumServers: {
      parameters: ["buffer", "buffer"],
      result: "pointer",
    },
    SQLGetNextEnumeration: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i16",
    },
    SQLCloseEnumServers: {
      parameters: ["pointer"],
      result: "i16",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function SQLBindCol(
  StatementHandle: Deno.PointerValue | Uint8Array /* ptr */,
  ColumnNumber: number /* u16 */,
  TargetType: number /* i16 */,
  TargetValue: Deno.PointerValue | Uint8Array /* ptr */,
  BufferLength: number /* i32 */,
  StrLen_or_Ind: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLBindCol(util.toPointer(StatementHandle), ColumnNumber, TargetType, util.toPointer(TargetValue), BufferLength, util.toPointer(StrLen_or_Ind));
}

export function SQLBindParam(
  StatementHandle: Deno.PointerValue | Uint8Array /* ptr */,
  ParameterNumber: number /* u16 */,
  ValueType: number /* i16 */,
  ParameterType: number /* i16 */,
  LengthPrecision: number /* u32 */,
  ParameterScale: number /* i16 */,
  ParameterValue: Deno.PointerValue | Uint8Array /* ptr */,
  StrLen_or_Ind: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLBindParam(util.toPointer(StatementHandle), ParameterNumber, ValueType, ParameterType, LengthPrecision, ParameterScale, util.toPointer(ParameterValue), util.toPointer(StrLen_or_Ind));
}

export function SQLColAttribute(
  StatementHandle: Deno.PointerValue | Uint8Array /* ptr */,
  ColumnNumber: number /* u16 */,
  FieldIdentifier: number /* u16 */,
  CharacterAttribute: Deno.PointerValue | Uint8Array /* ptr */,
  BufferLength: number /* i16 */,
  StringLength: Deno.PointerValue | Uint8Array /* ptr */,
  NumericAttribute: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLColAttribute(util.toPointer(StatementHandle), ColumnNumber, FieldIdentifier, util.toPointer(CharacterAttribute), BufferLength, util.toPointer(StringLength), util.toPointer(NumericAttribute));
}

export function SQLDescribeCol(
  StatementHandle: Deno.PointerValue | Uint8Array /* ptr */,
  ColumnNumber: number /* u16 */,
  ColumnName: Deno.PointerValue | Uint8Array /* ptr */,
  BufferLength: number /* i16 */,
  NameLength: Deno.PointerValue | Uint8Array /* ptr */,
  DataType: Deno.PointerValue | Uint8Array /* ptr */,
  ColumnSize: Deno.PointerValue | Uint8Array /* ptr */,
  DecimalDigits: Deno.PointerValue | Uint8Array /* ptr */,
  Nullable: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLDescribeCol(util.toPointer(StatementHandle), ColumnNumber, util.toPointer(ColumnName), BufferLength, util.toPointer(NameLength), util.toPointer(DataType), util.toPointer(ColumnSize), util.toPointer(DecimalDigits), util.toPointer(Nullable));
}

export function SQLFetchScroll(
  StatementHandle: Deno.PointerValue | Uint8Array /* ptr */,
  FetchOrientation: number /* i16 */,
  FetchOffset: number /* i32 */,
): number /* i16 */ {
  return libODBC32_dll.SQLFetchScroll(util.toPointer(StatementHandle), FetchOrientation, FetchOffset);
}

export function SQLGetData(
  StatementHandle: Deno.PointerValue | Uint8Array /* ptr */,
  ColumnNumber: number /* u16 */,
  TargetType: number /* i16 */,
  TargetValue: Deno.PointerValue | Uint8Array /* ptr */,
  BufferLength: number /* i32 */,
  StrLen_or_IndPtr: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLGetData(util.toPointer(StatementHandle), ColumnNumber, TargetType, util.toPointer(TargetValue), BufferLength, util.toPointer(StrLen_or_IndPtr));
}

export function SQLGetDescRec(
  DescriptorHandle: Deno.PointerValue | Uint8Array /* ptr */,
  RecNumber: number /* i16 */,
  Name: Deno.PointerValue | Uint8Array /* ptr */,
  BufferLength: number /* i16 */,
  StringLengthPtr: Deno.PointerValue | Uint8Array /* ptr */,
  TypePtr: Deno.PointerValue | Uint8Array /* ptr */,
  SubTypePtr: Deno.PointerValue | Uint8Array /* ptr */,
  LengthPtr: Deno.PointerValue | Uint8Array /* ptr */,
  PrecisionPtr: Deno.PointerValue | Uint8Array /* ptr */,
  ScalePtr: Deno.PointerValue | Uint8Array /* ptr */,
  NullablePtr: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLGetDescRec(util.toPointer(DescriptorHandle), RecNumber, util.toPointer(Name), BufferLength, util.toPointer(StringLengthPtr), util.toPointer(TypePtr), util.toPointer(SubTypePtr), util.toPointer(LengthPtr), util.toPointer(PrecisionPtr), util.toPointer(ScalePtr), util.toPointer(NullablePtr));
}

export function SQLPutData(
  StatementHandle: Deno.PointerValue | Uint8Array /* ptr */,
  Data: Deno.PointerValue | Uint8Array /* ptr */,
  StrLen_or_Ind: number /* i32 */,
): number /* i16 */ {
  return libODBC32_dll.SQLPutData(util.toPointer(StatementHandle), util.toPointer(Data), StrLen_or_Ind);
}

export function SQLRowCount(
  StatementHandle: Deno.PointerValue | Uint8Array /* ptr */,
  RowCount: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLRowCount(util.toPointer(StatementHandle), util.toPointer(RowCount));
}

export function SQLSetConnectOption(
  ConnectionHandle: Deno.PointerValue | Uint8Array /* ptr */,
  Option: number /* u16 */,
  Value: number /* u32 */,
): number /* i16 */ {
  return libODBC32_dll.SQLSetConnectOption(util.toPointer(ConnectionHandle), Option, Value);
}

export function SQLSetDescRec(
  DescriptorHandle: Deno.PointerValue | Uint8Array /* ptr */,
  RecNumber: number /* i16 */,
  Type: number /* i16 */,
  SubType: number /* i16 */,
  Length: number /* i32 */,
  Precision: number /* i16 */,
  Scale: number /* i16 */,
  Data: Deno.PointerValue | Uint8Array /* ptr */,
  StringLength: Deno.PointerValue | Uint8Array /* ptr */,
  Indicator: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLSetDescRec(util.toPointer(DescriptorHandle), RecNumber, Type, SubType, Length, Precision, Scale, util.toPointer(Data), util.toPointer(StringLength), util.toPointer(Indicator));
}

export function SQLSetParam(
  StatementHandle: Deno.PointerValue | Uint8Array /* ptr */,
  ParameterNumber: number /* u16 */,
  ValueType: number /* i16 */,
  ParameterType: number /* i16 */,
  LengthPrecision: number /* u32 */,
  ParameterScale: number /* i16 */,
  ParameterValue: Deno.PointerValue | Uint8Array /* ptr */,
  StrLen_or_Ind: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLSetParam(util.toPointer(StatementHandle), ParameterNumber, ValueType, ParameterType, LengthPrecision, ParameterScale, util.toPointer(ParameterValue), util.toPointer(StrLen_or_Ind));
}

export function SQLSetStmtOption(
  StatementHandle: Deno.PointerValue | Uint8Array /* ptr */,
  Option: number /* u16 */,
  Value: number /* u32 */,
): number /* i16 */ {
  return libODBC32_dll.SQLSetStmtOption(util.toPointer(StatementHandle), Option, Value);
}

export function SQLColAttributes(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  icol: number /* u16 */,
  fDescType: number /* u16 */,
  rgbDesc: Deno.PointerValue | Uint8Array /* ptr */,
  cbDescMax: number /* i16 */,
  pcbDesc: Deno.PointerValue | Uint8Array /* ptr */,
  pfDesc: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLColAttributes(util.toPointer(hstmt), icol, fDescType, util.toPointer(rgbDesc), cbDescMax, util.toPointer(pcbDesc), util.toPointer(pfDesc));
}

export function SQLDescribeParam(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  ipar: number /* u16 */,
  pfSqlType: Deno.PointerValue | Uint8Array /* ptr */,
  pcbParamDef: Deno.PointerValue | Uint8Array /* ptr */,
  pibScale: Deno.PointerValue | Uint8Array /* ptr */,
  pfNullable: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLDescribeParam(util.toPointer(hstmt), ipar, util.toPointer(pfSqlType), util.toPointer(pcbParamDef), util.toPointer(pibScale), util.toPointer(pfNullable));
}

export function SQLExtendedFetch(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  fFetchType: number /* u16 */,
  irow: number /* i32 */,
  pcrow: Deno.PointerValue | Uint8Array /* ptr */,
  rgfRowStatus: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLExtendedFetch(util.toPointer(hstmt), fFetchType, irow, util.toPointer(pcrow), util.toPointer(rgfRowStatus));
}

export function SQLParamOptions(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  crow: number /* u32 */,
  pirow: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLParamOptions(util.toPointer(hstmt), crow, util.toPointer(pirow));
}

export function SQLSetPos(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  irow: number /* u16 */,
  fOption: number /* u16 */,
  fLock: number /* u16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLSetPos(util.toPointer(hstmt), irow, fOption, fLock);
}

export function SQLBindParameter(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  ipar: number /* u16 */,
  fParamType: number /* i16 */,
  fCType: number /* i16 */,
  fSqlType: number /* i16 */,
  cbColDef: number /* u32 */,
  ibScale: number /* i16 */,
  rgbValue: Deno.PointerValue | Uint8Array /* ptr */,
  cbValueMax: number /* i32 */,
  pcbValue: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLBindParameter(util.toPointer(hstmt), ipar, fParamType, fCType, fSqlType, cbColDef, ibScale, util.toPointer(rgbValue), cbValueMax, util.toPointer(pcbValue));
}

export function SQLSetScrollOptions(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  fConcurrency: number /* u16 */,
  crowKeyset: number /* i32 */,
  crowRowset: number /* u16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLSetScrollOptions(util.toPointer(hstmt), fConcurrency, crowKeyset, crowRowset);
}

export function SQLColAttributeW(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  iCol: number /* u16 */,
  iField: number /* u16 */,
  pCharAttr: Deno.PointerValue | Uint8Array /* ptr */,
  cbDescMax: number /* i16 */,
  pcbCharAttr: Deno.PointerValue | Uint8Array /* ptr */,
  pNumAttr: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLColAttributeW(util.toPointer(hstmt), iCol, iField, util.toPointer(pCharAttr), cbDescMax, util.toPointer(pcbCharAttr), util.toPointer(pNumAttr));
}

export function SQLColAttributesW(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  icol: number /* u16 */,
  fDescType: number /* u16 */,
  rgbDesc: Deno.PointerValue | Uint8Array /* ptr */,
  cbDescMax: number /* i16 */,
  pcbDesc: Deno.PointerValue | Uint8Array /* ptr */,
  pfDesc: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLColAttributesW(util.toPointer(hstmt), icol, fDescType, util.toPointer(rgbDesc), cbDescMax, util.toPointer(pcbDesc), util.toPointer(pfDesc));
}

export function SQLDescribeColW(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  icol: number /* u16 */,
  szColName: Deno.PointerValue | Uint8Array /* ptr */,
  cchColNameMax: number /* i16 */,
  pcchColName: Deno.PointerValue | Uint8Array /* ptr */,
  pfSqlType: Deno.PointerValue | Uint8Array /* ptr */,
  pcbColDef: Deno.PointerValue | Uint8Array /* ptr */,
  pibScale: Deno.PointerValue | Uint8Array /* ptr */,
  pfNullable: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLDescribeColW(util.toPointer(hstmt), icol, util.toPointer(szColName), cchColNameMax, util.toPointer(pcchColName), util.toPointer(pfSqlType), util.toPointer(pcbColDef), util.toPointer(pibScale), util.toPointer(pfNullable));
}

export function SQLGetDescRecW(
  hdesc: Deno.PointerValue | Uint8Array /* ptr */,
  iRecord: number /* i16 */,
  szName: Deno.PointerValue | Uint8Array /* ptr */,
  cchNameMax: number /* i16 */,
  pcchName: Deno.PointerValue | Uint8Array /* ptr */,
  pfType: Deno.PointerValue | Uint8Array /* ptr */,
  pfSubType: Deno.PointerValue | Uint8Array /* ptr */,
  pLength: Deno.PointerValue | Uint8Array /* ptr */,
  pPrecision: Deno.PointerValue | Uint8Array /* ptr */,
  pScale: Deno.PointerValue | Uint8Array /* ptr */,
  pNullable: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLGetDescRecW(util.toPointer(hdesc), iRecord, util.toPointer(szName), cchNameMax, util.toPointer(pcchName), util.toPointer(pfType), util.toPointer(pfSubType), util.toPointer(pLength), util.toPointer(pPrecision), util.toPointer(pScale), util.toPointer(pNullable));
}

export function SQLSetConnectOptionW(
  hdbc: Deno.PointerValue | Uint8Array /* ptr */,
  fOption: number /* u16 */,
  vParam: number /* u32 */,
): number /* i16 */ {
  return libODBC32_dll.SQLSetConnectOptionW(util.toPointer(hdbc), fOption, vParam);
}

export function SQLColAttributeA(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  iCol: number /* i16 */,
  iField: number /* i16 */,
  pCharAttr: Deno.PointerValue | Uint8Array /* ptr */,
  cbCharAttrMax: number /* i16 */,
  pcbCharAttr: Deno.PointerValue | Uint8Array /* ptr */,
  pNumAttr: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLColAttributeA(util.toPointer(hstmt), iCol, iField, util.toPointer(pCharAttr), cbCharAttrMax, util.toPointer(pcbCharAttr), util.toPointer(pNumAttr));
}

export function SQLColAttributesA(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  icol: number /* u16 */,
  fDescType: number /* u16 */,
  rgbDesc: Deno.PointerValue | Uint8Array /* ptr */,
  cbDescMax: number /* i16 */,
  pcbDesc: Deno.PointerValue | Uint8Array /* ptr */,
  pfDesc: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLColAttributesA(util.toPointer(hstmt), icol, fDescType, util.toPointer(rgbDesc), cbDescMax, util.toPointer(pcbDesc), util.toPointer(pfDesc));
}

export function SQLDescribeColA(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  icol: number /* u16 */,
  szColName: Deno.PointerValue | Uint8Array /* ptr */,
  cbColNameMax: number /* i16 */,
  pcbColName: Deno.PointerValue | Uint8Array /* ptr */,
  pfSqlType: Deno.PointerValue | Uint8Array /* ptr */,
  pcbColDef: Deno.PointerValue | Uint8Array /* ptr */,
  pibScale: Deno.PointerValue | Uint8Array /* ptr */,
  pfNullable: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLDescribeColA(util.toPointer(hstmt), icol, util.toPointer(szColName), cbColNameMax, util.toPointer(pcbColName), util.toPointer(pfSqlType), util.toPointer(pcbColDef), util.toPointer(pibScale), util.toPointer(pfNullable));
}

export function SQLGetDescRecA(
  hdesc: Deno.PointerValue | Uint8Array /* ptr */,
  iRecord: number /* i16 */,
  szName: Deno.PointerValue | Uint8Array /* ptr */,
  cbNameMax: number /* i16 */,
  pcbName: Deno.PointerValue | Uint8Array /* ptr */,
  pfType: Deno.PointerValue | Uint8Array /* ptr */,
  pfSubType: Deno.PointerValue | Uint8Array /* ptr */,
  pLength: Deno.PointerValue | Uint8Array /* ptr */,
  pPrecision: Deno.PointerValue | Uint8Array /* ptr */,
  pScale: Deno.PointerValue | Uint8Array /* ptr */,
  pNullable: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLGetDescRecA(util.toPointer(hdesc), iRecord, util.toPointer(szName), cbNameMax, util.toPointer(pcbName), util.toPointer(pfType), util.toPointer(pfSubType), util.toPointer(pLength), util.toPointer(pPrecision), util.toPointer(pScale), util.toPointer(pNullable));
}

export function SQLSetConnectOptionA(
  hdbc: Deno.PointerValue | Uint8Array /* ptr */,
  fOption: number /* u16 */,
  vParam: number /* u32 */,
): number /* i16 */ {
  return libODBC32_dll.SQLSetConnectOptionA(util.toPointer(hdbc), fOption, vParam);
}

export function SQLAllocConnect(
  EnvironmentHandle: Deno.PointerValue | Uint8Array /* ptr */,
  ConnectionHandle: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLAllocConnect(util.toPointer(EnvironmentHandle), util.toPointer(ConnectionHandle));
}

export function SQLAllocEnv(
  EnvironmentHandle: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLAllocEnv(util.toPointer(EnvironmentHandle));
}

export function SQLAllocHandle(
  HandleType: number /* i16 */,
  InputHandle: Deno.PointerValue | Uint8Array /* ptr */,
  OutputHandle: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLAllocHandle(HandleType, util.toPointer(InputHandle), util.toPointer(OutputHandle));
}

export function SQLAllocStmt(
  ConnectionHandle: Deno.PointerValue | Uint8Array /* ptr */,
  StatementHandle: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLAllocStmt(util.toPointer(ConnectionHandle), util.toPointer(StatementHandle));
}

export function SQLCancel(
  StatementHandle: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLCancel(util.toPointer(StatementHandle));
}

export function SQLCancelHandle(
  HandleType: number /* i16 */,
  InputHandle: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLCancelHandle(HandleType, util.toPointer(InputHandle));
}

export function SQLCloseCursor(
  StatementHandle: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLCloseCursor(util.toPointer(StatementHandle));
}

export function SQLColumns(
  StatementHandle: Deno.PointerValue | Uint8Array /* ptr */,
  CatalogName: Deno.PointerValue | Uint8Array /* ptr */,
  NameLength1: number /* i16 */,
  SchemaName: Deno.PointerValue | Uint8Array /* ptr */,
  NameLength2: number /* i16 */,
  TableName: Deno.PointerValue | Uint8Array /* ptr */,
  NameLength3: number /* i16 */,
  ColumnName: Deno.PointerValue | Uint8Array /* ptr */,
  NameLength4: number /* i16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLColumns(util.toPointer(StatementHandle), util.toPointer(CatalogName), NameLength1, util.toPointer(SchemaName), NameLength2, util.toPointer(TableName), NameLength3, util.toPointer(ColumnName), NameLength4);
}

export function SQLCompleteAsync(
  HandleType: number /* i16 */,
  Handle: Deno.PointerValue | Uint8Array /* ptr */,
  AsyncRetCodePtr: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLCompleteAsync(HandleType, util.toPointer(Handle), util.toPointer(AsyncRetCodePtr));
}

export function SQLConnect(
  ConnectionHandle: Deno.PointerValue | Uint8Array /* ptr */,
  ServerName: Deno.PointerValue | Uint8Array /* ptr */,
  NameLength1: number /* i16 */,
  UserName: Deno.PointerValue | Uint8Array /* ptr */,
  NameLength2: number /* i16 */,
  Authentication: Deno.PointerValue | Uint8Array /* ptr */,
  NameLength3: number /* i16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLConnect(util.toPointer(ConnectionHandle), util.toPointer(ServerName), NameLength1, util.toPointer(UserName), NameLength2, util.toPointer(Authentication), NameLength3);
}

export function SQLCopyDesc(
  SourceDescHandle: Deno.PointerValue | Uint8Array /* ptr */,
  TargetDescHandle: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLCopyDesc(util.toPointer(SourceDescHandle), util.toPointer(TargetDescHandle));
}

export function SQLDataSources(
  EnvironmentHandle: Deno.PointerValue | Uint8Array /* ptr */,
  Direction: number /* u16 */,
  ServerName: Deno.PointerValue | Uint8Array /* ptr */,
  BufferLength1: number /* i16 */,
  NameLength1Ptr: Deno.PointerValue | Uint8Array /* ptr */,
  Description: Deno.PointerValue | Uint8Array /* ptr */,
  BufferLength2: number /* i16 */,
  NameLength2Ptr: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLDataSources(util.toPointer(EnvironmentHandle), Direction, util.toPointer(ServerName), BufferLength1, util.toPointer(NameLength1Ptr), util.toPointer(Description), BufferLength2, util.toPointer(NameLength2Ptr));
}

export function SQLDisconnect(
  ConnectionHandle: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLDisconnect(util.toPointer(ConnectionHandle));
}

export function SQLEndTran(
  HandleType: number /* i16 */,
  Handle: Deno.PointerValue | Uint8Array /* ptr */,
  CompletionType: number /* i16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLEndTran(HandleType, util.toPointer(Handle), CompletionType);
}

export function SQLError(
  EnvironmentHandle: Deno.PointerValue | Uint8Array /* ptr */,
  ConnectionHandle: Deno.PointerValue | Uint8Array /* ptr */,
  StatementHandle: Deno.PointerValue | Uint8Array /* ptr */,
  Sqlstate: Deno.PointerValue | Uint8Array /* ptr */,
  NativeError: Deno.PointerValue | Uint8Array /* ptr */,
  MessageText: Deno.PointerValue | Uint8Array /* ptr */,
  BufferLength: number /* i16 */,
  TextLength: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLError(util.toPointer(EnvironmentHandle), util.toPointer(ConnectionHandle), util.toPointer(StatementHandle), util.toPointer(Sqlstate), util.toPointer(NativeError), util.toPointer(MessageText), BufferLength, util.toPointer(TextLength));
}

export function SQLExecDirect(
  StatementHandle: Deno.PointerValue | Uint8Array /* ptr */,
  StatementText: Deno.PointerValue | Uint8Array /* ptr */,
  TextLength: number /* i32 */,
): number /* i16 */ {
  return libODBC32_dll.SQLExecDirect(util.toPointer(StatementHandle), util.toPointer(StatementText), TextLength);
}

export function SQLExecute(
  StatementHandle: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLExecute(util.toPointer(StatementHandle));
}

export function SQLFetch(
  StatementHandle: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLFetch(util.toPointer(StatementHandle));
}

export function SQLFreeConnect(
  ConnectionHandle: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLFreeConnect(util.toPointer(ConnectionHandle));
}

export function SQLFreeEnv(
  EnvironmentHandle: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLFreeEnv(util.toPointer(EnvironmentHandle));
}

export function SQLFreeHandle(
  HandleType: number /* i16 */,
  Handle: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLFreeHandle(HandleType, util.toPointer(Handle));
}

export function SQLFreeStmt(
  StatementHandle: Deno.PointerValue | Uint8Array /* ptr */,
  Option: number /* u16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLFreeStmt(util.toPointer(StatementHandle), Option);
}

export function SQLGetConnectAttr(
  ConnectionHandle: Deno.PointerValue | Uint8Array /* ptr */,
  Attribute: number /* i32 */,
  Value: Deno.PointerValue | Uint8Array /* ptr */,
  BufferLength: number /* i32 */,
  StringLengthPtr: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLGetConnectAttr(util.toPointer(ConnectionHandle), Attribute, util.toPointer(Value), BufferLength, util.toPointer(StringLengthPtr));
}

export function SQLGetConnectOption(
  ConnectionHandle: Deno.PointerValue | Uint8Array /* ptr */,
  Option: number /* u16 */,
  Value: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLGetConnectOption(util.toPointer(ConnectionHandle), Option, util.toPointer(Value));
}

export function SQLGetCursorName(
  StatementHandle: Deno.PointerValue | Uint8Array /* ptr */,
  CursorName: Deno.PointerValue | Uint8Array /* ptr */,
  BufferLength: number /* i16 */,
  NameLengthPtr: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLGetCursorName(util.toPointer(StatementHandle), util.toPointer(CursorName), BufferLength, util.toPointer(NameLengthPtr));
}

export function SQLGetDescField(
  DescriptorHandle: Deno.PointerValue | Uint8Array /* ptr */,
  RecNumber: number /* i16 */,
  FieldIdentifier: number /* i16 */,
  Value: Deno.PointerValue | Uint8Array /* ptr */,
  BufferLength: number /* i32 */,
  StringLength: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLGetDescField(util.toPointer(DescriptorHandle), RecNumber, FieldIdentifier, util.toPointer(Value), BufferLength, util.toPointer(StringLength));
}

export function SQLGetDiagField(
  HandleType: number /* i16 */,
  Handle: Deno.PointerValue | Uint8Array /* ptr */,
  RecNumber: number /* i16 */,
  DiagIdentifier: number /* i16 */,
  DiagInfo: Deno.PointerValue | Uint8Array /* ptr */,
  BufferLength: number /* i16 */,
  StringLength: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLGetDiagField(HandleType, util.toPointer(Handle), RecNumber, DiagIdentifier, util.toPointer(DiagInfo), BufferLength, util.toPointer(StringLength));
}

export function SQLGetDiagRec(
  HandleType: number /* i16 */,
  Handle: Deno.PointerValue | Uint8Array /* ptr */,
  RecNumber: number /* i16 */,
  Sqlstate: Deno.PointerValue | Uint8Array /* ptr */,
  NativeError: Deno.PointerValue | Uint8Array /* ptr */,
  MessageText: Deno.PointerValue | Uint8Array /* ptr */,
  BufferLength: number /* i16 */,
  TextLength: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLGetDiagRec(HandleType, util.toPointer(Handle), RecNumber, util.toPointer(Sqlstate), util.toPointer(NativeError), util.toPointer(MessageText), BufferLength, util.toPointer(TextLength));
}

export function SQLGetEnvAttr(
  EnvironmentHandle: Deno.PointerValue | Uint8Array /* ptr */,
  Attribute: number /* i32 */,
  Value: Deno.PointerValue | Uint8Array /* ptr */,
  BufferLength: number /* i32 */,
  StringLength: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLGetEnvAttr(util.toPointer(EnvironmentHandle), Attribute, util.toPointer(Value), BufferLength, util.toPointer(StringLength));
}

export function SQLGetFunctions(
  ConnectionHandle: Deno.PointerValue | Uint8Array /* ptr */,
  FunctionId: number /* u16 */,
  Supported: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLGetFunctions(util.toPointer(ConnectionHandle), FunctionId, util.toPointer(Supported));
}

export function SQLGetInfo(
  ConnectionHandle: Deno.PointerValue | Uint8Array /* ptr */,
  InfoType: number /* u16 */,
  InfoValue: Deno.PointerValue | Uint8Array /* ptr */,
  BufferLength: number /* i16 */,
  StringLengthPtr: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLGetInfo(util.toPointer(ConnectionHandle), InfoType, util.toPointer(InfoValue), BufferLength, util.toPointer(StringLengthPtr));
}

export function SQLGetStmtAttr(
  StatementHandle: Deno.PointerValue | Uint8Array /* ptr */,
  Attribute: number /* i32 */,
  Value: Deno.PointerValue | Uint8Array /* ptr */,
  BufferLength: number /* i32 */,
  StringLength: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLGetStmtAttr(util.toPointer(StatementHandle), Attribute, util.toPointer(Value), BufferLength, util.toPointer(StringLength));
}

export function SQLGetStmtOption(
  StatementHandle: Deno.PointerValue | Uint8Array /* ptr */,
  Option: number /* u16 */,
  Value: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLGetStmtOption(util.toPointer(StatementHandle), Option, util.toPointer(Value));
}

export function SQLGetTypeInfo(
  StatementHandle: Deno.PointerValue | Uint8Array /* ptr */,
  DataType: number /* i16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLGetTypeInfo(util.toPointer(StatementHandle), DataType);
}

export function SQLNumResultCols(
  StatementHandle: Deno.PointerValue | Uint8Array /* ptr */,
  ColumnCount: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLNumResultCols(util.toPointer(StatementHandle), util.toPointer(ColumnCount));
}

export function SQLParamData(
  StatementHandle: Deno.PointerValue | Uint8Array /* ptr */,
  Value: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLParamData(util.toPointer(StatementHandle), util.toPointer(Value));
}

export function SQLPrepare(
  StatementHandle: Deno.PointerValue | Uint8Array /* ptr */,
  StatementText: Deno.PointerValue | Uint8Array /* ptr */,
  TextLength: number /* i32 */,
): number /* i16 */ {
  return libODBC32_dll.SQLPrepare(util.toPointer(StatementHandle), util.toPointer(StatementText), TextLength);
}

export function SQLSetConnectAttr(
  ConnectionHandle: Deno.PointerValue | Uint8Array /* ptr */,
  Attribute: number /* i32 */,
  Value: Deno.PointerValue | Uint8Array /* ptr */,
  StringLength: number /* i32 */,
): number /* i16 */ {
  return libODBC32_dll.SQLSetConnectAttr(util.toPointer(ConnectionHandle), Attribute, util.toPointer(Value), StringLength);
}

export function SQLSetCursorName(
  StatementHandle: Deno.PointerValue | Uint8Array /* ptr */,
  CursorName: Deno.PointerValue | Uint8Array /* ptr */,
  NameLength: number /* i16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLSetCursorName(util.toPointer(StatementHandle), util.toPointer(CursorName), NameLength);
}

export function SQLSetDescField(
  DescriptorHandle: Deno.PointerValue | Uint8Array /* ptr */,
  RecNumber: number /* i16 */,
  FieldIdentifier: number /* i16 */,
  Value: Deno.PointerValue | Uint8Array /* ptr */,
  BufferLength: number /* i32 */,
): number /* i16 */ {
  return libODBC32_dll.SQLSetDescField(util.toPointer(DescriptorHandle), RecNumber, FieldIdentifier, util.toPointer(Value), BufferLength);
}

export function SQLSetEnvAttr(
  EnvironmentHandle: Deno.PointerValue | Uint8Array /* ptr */,
  Attribute: number /* i32 */,
  Value: Deno.PointerValue | Uint8Array /* ptr */,
  StringLength: number /* i32 */,
): number /* i16 */ {
  return libODBC32_dll.SQLSetEnvAttr(util.toPointer(EnvironmentHandle), Attribute, util.toPointer(Value), StringLength);
}

export function SQLSetStmtAttr(
  StatementHandle: Deno.PointerValue | Uint8Array /* ptr */,
  Attribute: number /* i32 */,
  Value: Deno.PointerValue | Uint8Array /* ptr */,
  StringLength: number /* i32 */,
): number /* i16 */ {
  return libODBC32_dll.SQLSetStmtAttr(util.toPointer(StatementHandle), Attribute, util.toPointer(Value), StringLength);
}

export function SQLSpecialColumns(
  StatementHandle: Deno.PointerValue | Uint8Array /* ptr */,
  IdentifierType: number /* u16 */,
  CatalogName: Deno.PointerValue | Uint8Array /* ptr */,
  NameLength1: number /* i16 */,
  SchemaName: Deno.PointerValue | Uint8Array /* ptr */,
  NameLength2: number /* i16 */,
  TableName: Deno.PointerValue | Uint8Array /* ptr */,
  NameLength3: number /* i16 */,
  Scope: number /* u16 */,
  Nullable: number /* u16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLSpecialColumns(util.toPointer(StatementHandle), IdentifierType, util.toPointer(CatalogName), NameLength1, util.toPointer(SchemaName), NameLength2, util.toPointer(TableName), NameLength3, Scope, Nullable);
}

export function SQLStatistics(
  StatementHandle: Deno.PointerValue | Uint8Array /* ptr */,
  CatalogName: Deno.PointerValue | Uint8Array /* ptr */,
  NameLength1: number /* i16 */,
  SchemaName: Deno.PointerValue | Uint8Array /* ptr */,
  NameLength2: number /* i16 */,
  TableName: Deno.PointerValue | Uint8Array /* ptr */,
  NameLength3: number /* i16 */,
  Unique: number /* u16 */,
  Reserved: number /* u16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLStatistics(util.toPointer(StatementHandle), util.toPointer(CatalogName), NameLength1, util.toPointer(SchemaName), NameLength2, util.toPointer(TableName), NameLength3, Unique, Reserved);
}

export function SQLTables(
  StatementHandle: Deno.PointerValue | Uint8Array /* ptr */,
  CatalogName: Deno.PointerValue | Uint8Array /* ptr */,
  NameLength1: number /* i16 */,
  SchemaName: Deno.PointerValue | Uint8Array /* ptr */,
  NameLength2: number /* i16 */,
  TableName: Deno.PointerValue | Uint8Array /* ptr */,
  NameLength3: number /* i16 */,
  TableType: Deno.PointerValue | Uint8Array /* ptr */,
  NameLength4: number /* i16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLTables(util.toPointer(StatementHandle), util.toPointer(CatalogName), NameLength1, util.toPointer(SchemaName), NameLength2, util.toPointer(TableName), NameLength3, util.toPointer(TableType), NameLength4);
}

export function SQLTransact(
  EnvironmentHandle: Deno.PointerValue | Uint8Array /* ptr */,
  ConnectionHandle: Deno.PointerValue | Uint8Array /* ptr */,
  CompletionType: number /* u16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLTransact(util.toPointer(EnvironmentHandle), util.toPointer(ConnectionHandle), CompletionType);
}

export function bcp_batch(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libodbcbcp_dll.bcp_batch(util.toPointer(param0));
}

export function bcp_bind(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
  param1: Deno.PointerValue | Uint8Array /* ptr */,
  param2: number /* i32 */,
  param3: number /* i32 */,
  param4: Deno.PointerValue | Uint8Array /* ptr */,
  param5: number /* i32 */,
  param6: number /* i32 */,
  param7: number /* i32 */,
): number /* i16 */ {
  return libodbcbcp_dll.bcp_bind(util.toPointer(param0), util.toPointer(param1), param2, param3, util.toPointer(param4), param5, param6, param7);
}

export function bcp_colfmt(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
  param1: number /* i32 */,
  param2: number /* u8 */,
  param3: number /* i32 */,
  param4: number /* i32 */,
  param5: Deno.PointerValue | Uint8Array /* ptr */,
  param6: number /* i32 */,
  param7: number /* i32 */,
): number /* i16 */ {
  return libodbcbcp_dll.bcp_colfmt(util.toPointer(param0), param1, param2, param3, param4, util.toPointer(param5), param6, param7);
}

export function bcp_collen(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
  param1: number /* i32 */,
  param2: number /* i32 */,
): number /* i16 */ {
  return libodbcbcp_dll.bcp_collen(util.toPointer(param0), param1, param2);
}

export function bcp_colptr(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
  param1: Deno.PointerValue | Uint8Array /* ptr */,
  param2: number /* i32 */,
): number /* i16 */ {
  return libodbcbcp_dll.bcp_colptr(util.toPointer(param0), util.toPointer(param1), param2);
}

export function bcp_columns(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
  param1: number /* i32 */,
): number /* i16 */ {
  return libodbcbcp_dll.bcp_columns(util.toPointer(param0), param1);
}

export function bcp_control(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
  param1: number /* i32 */,
  param2: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libodbcbcp_dll.bcp_control(util.toPointer(param0), param1, util.toPointer(param2));
}

export function bcp_done(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libodbcbcp_dll.bcp_done(util.toPointer(param0));
}

export function bcp_exec(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
  param1: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libodbcbcp_dll.bcp_exec(util.toPointer(param0), util.toPointer(param1));
}

export function bcp_getcolfmt(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
  param1: number /* i32 */,
  param2: number /* i32 */,
  param3: Deno.PointerValue | Uint8Array /* ptr */,
  param4: number /* i32 */,
  param5: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libodbcbcp_dll.bcp_getcolfmt(util.toPointer(param0), param1, param2, util.toPointer(param3), param4, util.toPointer(param5));
}

export function bcp_initA(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
  param1: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  param2: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  param3: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  param4: number /* i32 */,
): number /* i16 */ {
  return libodbcbcp_dll.bcp_initA(util.toPointer(param0), util.pstrToFfi(param1), util.pstrToFfi(param2), util.pstrToFfi(param3), param4);
}

export function bcp_initW(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
  param1: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  param2: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  param3: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  param4: number /* i32 */,
): number /* i16 */ {
  return libodbcbcp_dll.bcp_initW(util.toPointer(param0), util.pwstrToFfi(param1), util.pwstrToFfi(param2), util.pwstrToFfi(param3), param4);
}

export function bcp_moretext(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
  param1: number /* i32 */,
  param2: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libodbcbcp_dll.bcp_moretext(util.toPointer(param0), param1, util.toPointer(param2));
}

export function bcp_readfmtA(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
  param1: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* i16 */ {
  return libodbcbcp_dll.bcp_readfmtA(util.toPointer(param0), util.pstrToFfi(param1));
}

export function bcp_readfmtW(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
  param1: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* i16 */ {
  return libodbcbcp_dll.bcp_readfmtW(util.toPointer(param0), util.pwstrToFfi(param1));
}

export function bcp_sendrow(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libodbcbcp_dll.bcp_sendrow(util.toPointer(param0));
}

export function bcp_setcolfmt(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
  param1: number /* i32 */,
  param2: number /* i32 */,
  param3: Deno.PointerValue | Uint8Array /* ptr */,
  param4: number /* i32 */,
): number /* i16 */ {
  return libodbcbcp_dll.bcp_setcolfmt(util.toPointer(param0), param1, param2, util.toPointer(param3), param4);
}

export function bcp_writefmtA(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
  param1: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* i16 */ {
  return libodbcbcp_dll.bcp_writefmtA(util.toPointer(param0), util.pstrToFfi(param1));
}

export function bcp_writefmtW(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
  param1: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* i16 */ {
  return libodbcbcp_dll.bcp_writefmtW(util.toPointer(param0), util.pwstrToFfi(param1));
}

export function dbprtypeA(
  param0: number /* i32 */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libodbcbcp_dll.dbprtypeA(param0));
}

export function dbprtypeW(
  param0: number /* i32 */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libodbcbcp_dll.dbprtypeW(param0));
}

export function SQLLinkedServers(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libodbcbcp_dll.SQLLinkedServers(util.toPointer(param0));
}

export function SQLLinkedCatalogsA(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
  param1: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  param2: number /* i16 */,
): number /* i16 */ {
  return libodbcbcp_dll.SQLLinkedCatalogsA(util.toPointer(param0), util.pstrToFfi(param1), param2);
}

export function SQLLinkedCatalogsW(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
  param1: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  param2: number /* i16 */,
): number /* i16 */ {
  return libodbcbcp_dll.SQLLinkedCatalogsW(util.toPointer(param0), util.pwstrToFfi(param1), param2);
}

export function SQLInitEnumServers(
  pwchServerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwchInstanceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libodbcbcp_dll.SQLInitEnumServers(util.pwstrToFfi(pwchServerName), util.pwstrToFfi(pwchInstanceName));
}

export function SQLGetNextEnumeration(
  hEnumHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  prgEnumData: Deno.PointerValue | Uint8Array /* ptr */,
  piEnumLength: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libodbcbcp_dll.SQLGetNextEnumeration(util.toPointer(hEnumHandle), util.toPointer(prgEnumData), util.toPointer(piEnumLength));
}

export function SQLCloseEnumServers(
  hEnumHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): number /* i16 */ {
  return libodbcbcp_dll.SQLCloseEnumServers(util.toPointer(hEnumHandle));
}

export function SQLDriverConnect(
  hdbc: Deno.PointerValue | Uint8Array /* ptr */,
  hwnd: Deno.PointerValue /* isize */,
  szConnStrIn: Deno.PointerValue | Uint8Array /* ptr */,
  cchConnStrIn: number /* i16 */,
  szConnStrOut: Deno.PointerValue | Uint8Array /* ptr */,
  cchConnStrOutMax: number /* i16 */,
  pcchConnStrOut: Deno.PointerValue | Uint8Array /* ptr */,
  fDriverCompletion: number /* u16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLDriverConnect(util.toPointer(hdbc), hwnd, util.toPointer(szConnStrIn), cchConnStrIn, util.toPointer(szConnStrOut), cchConnStrOutMax, util.toPointer(pcchConnStrOut), fDriverCompletion);
}

export function SQLBrowseConnect(
  hdbc: Deno.PointerValue | Uint8Array /* ptr */,
  szConnStrIn: Deno.PointerValue | Uint8Array /* ptr */,
  cchConnStrIn: number /* i16 */,
  szConnStrOut: Deno.PointerValue | Uint8Array /* ptr */,
  cchConnStrOutMax: number /* i16 */,
  pcchConnStrOut: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLBrowseConnect(util.toPointer(hdbc), util.toPointer(szConnStrIn), cchConnStrIn, util.toPointer(szConnStrOut), cchConnStrOutMax, util.toPointer(pcchConnStrOut));
}

export function SQLBulkOperations(
  StatementHandle: Deno.PointerValue | Uint8Array /* ptr */,
  Operation: number /* i16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLBulkOperations(util.toPointer(StatementHandle), Operation);
}

export function SQLColumnPrivileges(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  szCatalogName: Deno.PointerValue | Uint8Array /* ptr */,
  cchCatalogName: number /* i16 */,
  szSchemaName: Deno.PointerValue | Uint8Array /* ptr */,
  cchSchemaName: number /* i16 */,
  szTableName: Deno.PointerValue | Uint8Array /* ptr */,
  cchTableName: number /* i16 */,
  szColumnName: Deno.PointerValue | Uint8Array /* ptr */,
  cchColumnName: number /* i16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLColumnPrivileges(util.toPointer(hstmt), util.toPointer(szCatalogName), cchCatalogName, util.toPointer(szSchemaName), cchSchemaName, util.toPointer(szTableName), cchTableName, util.toPointer(szColumnName), cchColumnName);
}

export function SQLForeignKeys(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  szPkCatalogName: Deno.PointerValue | Uint8Array /* ptr */,
  cchPkCatalogName: number /* i16 */,
  szPkSchemaName: Deno.PointerValue | Uint8Array /* ptr */,
  cchPkSchemaName: number /* i16 */,
  szPkTableName: Deno.PointerValue | Uint8Array /* ptr */,
  cchPkTableName: number /* i16 */,
  szFkCatalogName: Deno.PointerValue | Uint8Array /* ptr */,
  cchFkCatalogName: number /* i16 */,
  szFkSchemaName: Deno.PointerValue | Uint8Array /* ptr */,
  cchFkSchemaName: number /* i16 */,
  szFkTableName: Deno.PointerValue | Uint8Array /* ptr */,
  cchFkTableName: number /* i16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLForeignKeys(util.toPointer(hstmt), util.toPointer(szPkCatalogName), cchPkCatalogName, util.toPointer(szPkSchemaName), cchPkSchemaName, util.toPointer(szPkTableName), cchPkTableName, util.toPointer(szFkCatalogName), cchFkCatalogName, util.toPointer(szFkSchemaName), cchFkSchemaName, util.toPointer(szFkTableName), cchFkTableName);
}

export function SQLMoreResults(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLMoreResults(util.toPointer(hstmt));
}

export function SQLNativeSql(
  hdbc: Deno.PointerValue | Uint8Array /* ptr */,
  szSqlStrIn: Deno.PointerValue | Uint8Array /* ptr */,
  cchSqlStrIn: number /* i32 */,
  szSqlStr: Deno.PointerValue | Uint8Array /* ptr */,
  cchSqlStrMax: number /* i32 */,
  pcbSqlStr: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLNativeSql(util.toPointer(hdbc), util.toPointer(szSqlStrIn), cchSqlStrIn, util.toPointer(szSqlStr), cchSqlStrMax, util.toPointer(pcbSqlStr));
}

export function SQLNumParams(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  pcpar: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLNumParams(util.toPointer(hstmt), util.toPointer(pcpar));
}

export function SQLPrimaryKeys(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  szCatalogName: Deno.PointerValue | Uint8Array /* ptr */,
  cchCatalogName: number /* i16 */,
  szSchemaName: Deno.PointerValue | Uint8Array /* ptr */,
  cchSchemaName: number /* i16 */,
  szTableName: Deno.PointerValue | Uint8Array /* ptr */,
  cchTableName: number /* i16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLPrimaryKeys(util.toPointer(hstmt), util.toPointer(szCatalogName), cchCatalogName, util.toPointer(szSchemaName), cchSchemaName, util.toPointer(szTableName), cchTableName);
}

export function SQLProcedureColumns(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  szCatalogName: Deno.PointerValue | Uint8Array /* ptr */,
  cchCatalogName: number /* i16 */,
  szSchemaName: Deno.PointerValue | Uint8Array /* ptr */,
  cchSchemaName: number /* i16 */,
  szProcName: Deno.PointerValue | Uint8Array /* ptr */,
  cchProcName: number /* i16 */,
  szColumnName: Deno.PointerValue | Uint8Array /* ptr */,
  cchColumnName: number /* i16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLProcedureColumns(util.toPointer(hstmt), util.toPointer(szCatalogName), cchCatalogName, util.toPointer(szSchemaName), cchSchemaName, util.toPointer(szProcName), cchProcName, util.toPointer(szColumnName), cchColumnName);
}

export function SQLProcedures(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  szCatalogName: Deno.PointerValue | Uint8Array /* ptr */,
  cchCatalogName: number /* i16 */,
  szSchemaName: Deno.PointerValue | Uint8Array /* ptr */,
  cchSchemaName: number /* i16 */,
  szProcName: Deno.PointerValue | Uint8Array /* ptr */,
  cchProcName: number /* i16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLProcedures(util.toPointer(hstmt), util.toPointer(szCatalogName), cchCatalogName, util.toPointer(szSchemaName), cchSchemaName, util.toPointer(szProcName), cchProcName);
}

export function SQLTablePrivileges(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  szCatalogName: Deno.PointerValue | Uint8Array /* ptr */,
  cchCatalogName: number /* i16 */,
  szSchemaName: Deno.PointerValue | Uint8Array /* ptr */,
  cchSchemaName: number /* i16 */,
  szTableName: Deno.PointerValue | Uint8Array /* ptr */,
  cchTableName: number /* i16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLTablePrivileges(util.toPointer(hstmt), util.toPointer(szCatalogName), cchCatalogName, util.toPointer(szSchemaName), cchSchemaName, util.toPointer(szTableName), cchTableName);
}

export function SQLDrivers(
  henv: Deno.PointerValue | Uint8Array /* ptr */,
  fDirection: number /* u16 */,
  szDriverDesc: Deno.PointerValue | Uint8Array /* ptr */,
  cchDriverDescMax: number /* i16 */,
  pcchDriverDesc: Deno.PointerValue | Uint8Array /* ptr */,
  szDriverAttributes: Deno.PointerValue | Uint8Array /* ptr */,
  cchDrvrAttrMax: number /* i16 */,
  pcchDrvrAttr: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLDrivers(util.toPointer(henv), fDirection, util.toPointer(szDriverDesc), cchDriverDescMax, util.toPointer(pcchDriverDesc), util.toPointer(szDriverAttributes), cchDrvrAttrMax, util.toPointer(pcchDrvrAttr));
}

export function SQLAllocHandleStd(
  fHandleType: number /* i16 */,
  hInput: Deno.PointerValue | Uint8Array /* ptr */,
  phOutput: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLAllocHandleStd(fHandleType, util.toPointer(hInput), util.toPointer(phOutput));
}

export function ODBCSetTryWaitValue(
  dwValue: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libODBC32_dll.ODBCSetTryWaitValue(dwValue));
}

export function ODBCGetTryWaitValue(): number /* u32 */ {
  return libODBC32_dll.ODBCGetTryWaitValue();
}

export function SQLConnectW(
  hdbc: Deno.PointerValue | Uint8Array /* ptr */,
  szDSN: Deno.PointerValue | Uint8Array /* ptr */,
  cchDSN: number /* i16 */,
  szUID: Deno.PointerValue | Uint8Array /* ptr */,
  cchUID: number /* i16 */,
  szAuthStr: Deno.PointerValue | Uint8Array /* ptr */,
  cchAuthStr: number /* i16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLConnectW(util.toPointer(hdbc), util.toPointer(szDSN), cchDSN, util.toPointer(szUID), cchUID, util.toPointer(szAuthStr), cchAuthStr);
}

export function SQLErrorW(
  henv: Deno.PointerValue | Uint8Array /* ptr */,
  hdbc: Deno.PointerValue | Uint8Array /* ptr */,
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  wszSqlState: Deno.PointerValue | Uint8Array /* ptr */,
  pfNativeError: Deno.PointerValue | Uint8Array /* ptr */,
  wszErrorMsg: Deno.PointerValue | Uint8Array /* ptr */,
  cchErrorMsgMax: number /* i16 */,
  pcchErrorMsg: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLErrorW(util.toPointer(henv), util.toPointer(hdbc), util.toPointer(hstmt), util.toPointer(wszSqlState), util.toPointer(pfNativeError), util.toPointer(wszErrorMsg), cchErrorMsgMax, util.toPointer(pcchErrorMsg));
}

export function SQLExecDirectW(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  szSqlStr: Deno.PointerValue | Uint8Array /* ptr */,
  TextLength: number /* i32 */,
): number /* i16 */ {
  return libODBC32_dll.SQLExecDirectW(util.toPointer(hstmt), util.toPointer(szSqlStr), TextLength);
}

export function SQLGetConnectAttrW(
  hdbc: Deno.PointerValue | Uint8Array /* ptr */,
  fAttribute: number /* i32 */,
  rgbValue: Deno.PointerValue | Uint8Array /* ptr */,
  cbValueMax: number /* i32 */,
  pcbValue: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLGetConnectAttrW(util.toPointer(hdbc), fAttribute, util.toPointer(rgbValue), cbValueMax, util.toPointer(pcbValue));
}

export function SQLGetCursorNameW(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  szCursor: Deno.PointerValue | Uint8Array /* ptr */,
  cchCursorMax: number /* i16 */,
  pcchCursor: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLGetCursorNameW(util.toPointer(hstmt), util.toPointer(szCursor), cchCursorMax, util.toPointer(pcchCursor));
}

export function SQLSetDescFieldW(
  DescriptorHandle: Deno.PointerValue | Uint8Array /* ptr */,
  RecNumber: number /* i16 */,
  FieldIdentifier: number /* i16 */,
  Value: Deno.PointerValue | Uint8Array /* ptr */,
  BufferLength: number /* i32 */,
): number /* i16 */ {
  return libODBC32_dll.SQLSetDescFieldW(util.toPointer(DescriptorHandle), RecNumber, FieldIdentifier, util.toPointer(Value), BufferLength);
}

export function SQLGetDescFieldW(
  hdesc: Deno.PointerValue | Uint8Array /* ptr */,
  iRecord: number /* i16 */,
  iField: number /* i16 */,
  rgbValue: Deno.PointerValue | Uint8Array /* ptr */,
  cbBufferLength: number /* i32 */,
  StringLength: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLGetDescFieldW(util.toPointer(hdesc), iRecord, iField, util.toPointer(rgbValue), cbBufferLength, util.toPointer(StringLength));
}

export function SQLGetDiagFieldW(
  fHandleType: number /* i16 */,
  handle: Deno.PointerValue | Uint8Array /* ptr */,
  iRecord: number /* i16 */,
  fDiagField: number /* i16 */,
  rgbDiagInfo: Deno.PointerValue | Uint8Array /* ptr */,
  cbBufferLength: number /* i16 */,
  pcbStringLength: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLGetDiagFieldW(fHandleType, util.toPointer(handle), iRecord, fDiagField, util.toPointer(rgbDiagInfo), cbBufferLength, util.toPointer(pcbStringLength));
}

export function SQLGetDiagRecW(
  fHandleType: number /* i16 */,
  handle: Deno.PointerValue | Uint8Array /* ptr */,
  iRecord: number /* i16 */,
  szSqlState: Deno.PointerValue | Uint8Array /* ptr */,
  pfNativeError: Deno.PointerValue | Uint8Array /* ptr */,
  szErrorMsg: Deno.PointerValue | Uint8Array /* ptr */,
  cchErrorMsgMax: number /* i16 */,
  pcchErrorMsg: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLGetDiagRecW(fHandleType, util.toPointer(handle), iRecord, util.toPointer(szSqlState), util.toPointer(pfNativeError), util.toPointer(szErrorMsg), cchErrorMsgMax, util.toPointer(pcchErrorMsg));
}

export function SQLPrepareW(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  szSqlStr: Deno.PointerValue | Uint8Array /* ptr */,
  cchSqlStr: number /* i32 */,
): number /* i16 */ {
  return libODBC32_dll.SQLPrepareW(util.toPointer(hstmt), util.toPointer(szSqlStr), cchSqlStr);
}

export function SQLSetConnectAttrW(
  hdbc: Deno.PointerValue | Uint8Array /* ptr */,
  fAttribute: number /* i32 */,
  rgbValue: Deno.PointerValue | Uint8Array /* ptr */,
  cbValue: number /* i32 */,
): number /* i16 */ {
  return libODBC32_dll.SQLSetConnectAttrW(util.toPointer(hdbc), fAttribute, util.toPointer(rgbValue), cbValue);
}

export function SQLSetCursorNameW(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  szCursor: Deno.PointerValue | Uint8Array /* ptr */,
  cchCursor: number /* i16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLSetCursorNameW(util.toPointer(hstmt), util.toPointer(szCursor), cchCursor);
}

export function SQLColumnsW(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  szCatalogName: Deno.PointerValue | Uint8Array /* ptr */,
  cchCatalogName: number /* i16 */,
  szSchemaName: Deno.PointerValue | Uint8Array /* ptr */,
  cchSchemaName: number /* i16 */,
  szTableName: Deno.PointerValue | Uint8Array /* ptr */,
  cchTableName: number /* i16 */,
  szColumnName: Deno.PointerValue | Uint8Array /* ptr */,
  cchColumnName: number /* i16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLColumnsW(util.toPointer(hstmt), util.toPointer(szCatalogName), cchCatalogName, util.toPointer(szSchemaName), cchSchemaName, util.toPointer(szTableName), cchTableName, util.toPointer(szColumnName), cchColumnName);
}

export function SQLGetConnectOptionW(
  hdbc: Deno.PointerValue | Uint8Array /* ptr */,
  fOption: number /* u16 */,
  pvParam: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLGetConnectOptionW(util.toPointer(hdbc), fOption, util.toPointer(pvParam));
}

export function SQLGetInfoW(
  hdbc: Deno.PointerValue | Uint8Array /* ptr */,
  fInfoType: number /* u16 */,
  rgbInfoValue: Deno.PointerValue | Uint8Array /* ptr */,
  cbInfoValueMax: number /* i16 */,
  pcbInfoValue: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLGetInfoW(util.toPointer(hdbc), fInfoType, util.toPointer(rgbInfoValue), cbInfoValueMax, util.toPointer(pcbInfoValue));
}

export function SQLGetTypeInfoW(
  StatementHandle: Deno.PointerValue | Uint8Array /* ptr */,
  DataType: number /* i16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLGetTypeInfoW(util.toPointer(StatementHandle), DataType);
}

export function SQLSpecialColumnsW(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  fColType: number /* u16 */,
  szCatalogName: Deno.PointerValue | Uint8Array /* ptr */,
  cchCatalogName: number /* i16 */,
  szSchemaName: Deno.PointerValue | Uint8Array /* ptr */,
  cchSchemaName: number /* i16 */,
  szTableName: Deno.PointerValue | Uint8Array /* ptr */,
  cchTableName: number /* i16 */,
  fScope: number /* u16 */,
  fNullable: number /* u16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLSpecialColumnsW(util.toPointer(hstmt), fColType, util.toPointer(szCatalogName), cchCatalogName, util.toPointer(szSchemaName), cchSchemaName, util.toPointer(szTableName), cchTableName, fScope, fNullable);
}

export function SQLStatisticsW(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  szCatalogName: Deno.PointerValue | Uint8Array /* ptr */,
  cchCatalogName: number /* i16 */,
  szSchemaName: Deno.PointerValue | Uint8Array /* ptr */,
  cchSchemaName: number /* i16 */,
  szTableName: Deno.PointerValue | Uint8Array /* ptr */,
  cchTableName: number /* i16 */,
  fUnique: number /* u16 */,
  fAccuracy: number /* u16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLStatisticsW(util.toPointer(hstmt), util.toPointer(szCatalogName), cchCatalogName, util.toPointer(szSchemaName), cchSchemaName, util.toPointer(szTableName), cchTableName, fUnique, fAccuracy);
}

export function SQLTablesW(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  szCatalogName: Deno.PointerValue | Uint8Array /* ptr */,
  cchCatalogName: number /* i16 */,
  szSchemaName: Deno.PointerValue | Uint8Array /* ptr */,
  cchSchemaName: number /* i16 */,
  szTableName: Deno.PointerValue | Uint8Array /* ptr */,
  cchTableName: number /* i16 */,
  szTableType: Deno.PointerValue | Uint8Array /* ptr */,
  cchTableType: number /* i16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLTablesW(util.toPointer(hstmt), util.toPointer(szCatalogName), cchCatalogName, util.toPointer(szSchemaName), cchSchemaName, util.toPointer(szTableName), cchTableName, util.toPointer(szTableType), cchTableType);
}

export function SQLDataSourcesW(
  henv: Deno.PointerValue | Uint8Array /* ptr */,
  fDirection: number /* u16 */,
  szDSN: Deno.PointerValue | Uint8Array /* ptr */,
  cchDSNMax: number /* i16 */,
  pcchDSN: Deno.PointerValue | Uint8Array /* ptr */,
  wszDescription: Deno.PointerValue | Uint8Array /* ptr */,
  cchDescriptionMax: number /* i16 */,
  pcchDescription: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLDataSourcesW(util.toPointer(henv), fDirection, util.toPointer(szDSN), cchDSNMax, util.toPointer(pcchDSN), util.toPointer(wszDescription), cchDescriptionMax, util.toPointer(pcchDescription));
}

export function SQLDriverConnectW(
  hdbc: Deno.PointerValue | Uint8Array /* ptr */,
  hwnd: Deno.PointerValue /* isize */,
  szConnStrIn: Deno.PointerValue | Uint8Array /* ptr */,
  cchConnStrIn: number /* i16 */,
  szConnStrOut: Deno.PointerValue | Uint8Array /* ptr */,
  cchConnStrOutMax: number /* i16 */,
  pcchConnStrOut: Deno.PointerValue | Uint8Array /* ptr */,
  fDriverCompletion: number /* u16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLDriverConnectW(util.toPointer(hdbc), hwnd, util.toPointer(szConnStrIn), cchConnStrIn, util.toPointer(szConnStrOut), cchConnStrOutMax, util.toPointer(pcchConnStrOut), fDriverCompletion);
}

export function SQLBrowseConnectW(
  hdbc: Deno.PointerValue | Uint8Array /* ptr */,
  szConnStrIn: Deno.PointerValue | Uint8Array /* ptr */,
  cchConnStrIn: number /* i16 */,
  szConnStrOut: Deno.PointerValue | Uint8Array /* ptr */,
  cchConnStrOutMax: number /* i16 */,
  pcchConnStrOut: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLBrowseConnectW(util.toPointer(hdbc), util.toPointer(szConnStrIn), cchConnStrIn, util.toPointer(szConnStrOut), cchConnStrOutMax, util.toPointer(pcchConnStrOut));
}

export function SQLColumnPrivilegesW(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  szCatalogName: Deno.PointerValue | Uint8Array /* ptr */,
  cchCatalogName: number /* i16 */,
  szSchemaName: Deno.PointerValue | Uint8Array /* ptr */,
  cchSchemaName: number /* i16 */,
  szTableName: Deno.PointerValue | Uint8Array /* ptr */,
  cchTableName: number /* i16 */,
  szColumnName: Deno.PointerValue | Uint8Array /* ptr */,
  cchColumnName: number /* i16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLColumnPrivilegesW(util.toPointer(hstmt), util.toPointer(szCatalogName), cchCatalogName, util.toPointer(szSchemaName), cchSchemaName, util.toPointer(szTableName), cchTableName, util.toPointer(szColumnName), cchColumnName);
}

export function SQLGetStmtAttrW(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  fAttribute: number /* i32 */,
  rgbValue: Deno.PointerValue | Uint8Array /* ptr */,
  cbValueMax: number /* i32 */,
  pcbValue: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLGetStmtAttrW(util.toPointer(hstmt), fAttribute, util.toPointer(rgbValue), cbValueMax, util.toPointer(pcbValue));
}

export function SQLSetStmtAttrW(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  fAttribute: number /* i32 */,
  rgbValue: Deno.PointerValue | Uint8Array /* ptr */,
  cbValueMax: number /* i32 */,
): number /* i16 */ {
  return libODBC32_dll.SQLSetStmtAttrW(util.toPointer(hstmt), fAttribute, util.toPointer(rgbValue), cbValueMax);
}

export function SQLForeignKeysW(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  szPkCatalogName: Deno.PointerValue | Uint8Array /* ptr */,
  cchPkCatalogName: number /* i16 */,
  szPkSchemaName: Deno.PointerValue | Uint8Array /* ptr */,
  cchPkSchemaName: number /* i16 */,
  szPkTableName: Deno.PointerValue | Uint8Array /* ptr */,
  cchPkTableName: number /* i16 */,
  szFkCatalogName: Deno.PointerValue | Uint8Array /* ptr */,
  cchFkCatalogName: number /* i16 */,
  szFkSchemaName: Deno.PointerValue | Uint8Array /* ptr */,
  cchFkSchemaName: number /* i16 */,
  szFkTableName: Deno.PointerValue | Uint8Array /* ptr */,
  cchFkTableName: number /* i16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLForeignKeysW(util.toPointer(hstmt), util.toPointer(szPkCatalogName), cchPkCatalogName, util.toPointer(szPkSchemaName), cchPkSchemaName, util.toPointer(szPkTableName), cchPkTableName, util.toPointer(szFkCatalogName), cchFkCatalogName, util.toPointer(szFkSchemaName), cchFkSchemaName, util.toPointer(szFkTableName), cchFkTableName);
}

export function SQLNativeSqlW(
  hdbc: Deno.PointerValue | Uint8Array /* ptr */,
  szSqlStrIn: Deno.PointerValue | Uint8Array /* ptr */,
  cchSqlStrIn: number /* i32 */,
  szSqlStr: Deno.PointerValue | Uint8Array /* ptr */,
  cchSqlStrMax: number /* i32 */,
  pcchSqlStr: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLNativeSqlW(util.toPointer(hdbc), util.toPointer(szSqlStrIn), cchSqlStrIn, util.toPointer(szSqlStr), cchSqlStrMax, util.toPointer(pcchSqlStr));
}

export function SQLPrimaryKeysW(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  szCatalogName: Deno.PointerValue | Uint8Array /* ptr */,
  cchCatalogName: number /* i16 */,
  szSchemaName: Deno.PointerValue | Uint8Array /* ptr */,
  cchSchemaName: number /* i16 */,
  szTableName: Deno.PointerValue | Uint8Array /* ptr */,
  cchTableName: number /* i16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLPrimaryKeysW(util.toPointer(hstmt), util.toPointer(szCatalogName), cchCatalogName, util.toPointer(szSchemaName), cchSchemaName, util.toPointer(szTableName), cchTableName);
}

export function SQLProcedureColumnsW(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  szCatalogName: Deno.PointerValue | Uint8Array /* ptr */,
  cchCatalogName: number /* i16 */,
  szSchemaName: Deno.PointerValue | Uint8Array /* ptr */,
  cchSchemaName: number /* i16 */,
  szProcName: Deno.PointerValue | Uint8Array /* ptr */,
  cchProcName: number /* i16 */,
  szColumnName: Deno.PointerValue | Uint8Array /* ptr */,
  cchColumnName: number /* i16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLProcedureColumnsW(util.toPointer(hstmt), util.toPointer(szCatalogName), cchCatalogName, util.toPointer(szSchemaName), cchSchemaName, util.toPointer(szProcName), cchProcName, util.toPointer(szColumnName), cchColumnName);
}

export function SQLProceduresW(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  szCatalogName: Deno.PointerValue | Uint8Array /* ptr */,
  cchCatalogName: number /* i16 */,
  szSchemaName: Deno.PointerValue | Uint8Array /* ptr */,
  cchSchemaName: number /* i16 */,
  szProcName: Deno.PointerValue | Uint8Array /* ptr */,
  cchProcName: number /* i16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLProceduresW(util.toPointer(hstmt), util.toPointer(szCatalogName), cchCatalogName, util.toPointer(szSchemaName), cchSchemaName, util.toPointer(szProcName), cchProcName);
}

export function SQLTablePrivilegesW(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  szCatalogName: Deno.PointerValue | Uint8Array /* ptr */,
  cchCatalogName: number /* i16 */,
  szSchemaName: Deno.PointerValue | Uint8Array /* ptr */,
  cchSchemaName: number /* i16 */,
  szTableName: Deno.PointerValue | Uint8Array /* ptr */,
  cchTableName: number /* i16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLTablePrivilegesW(util.toPointer(hstmt), util.toPointer(szCatalogName), cchCatalogName, util.toPointer(szSchemaName), cchSchemaName, util.toPointer(szTableName), cchTableName);
}

export function SQLDriversW(
  henv: Deno.PointerValue | Uint8Array /* ptr */,
  fDirection: number /* u16 */,
  szDriverDesc: Deno.PointerValue | Uint8Array /* ptr */,
  cchDriverDescMax: number /* i16 */,
  pcchDriverDesc: Deno.PointerValue | Uint8Array /* ptr */,
  szDriverAttributes: Deno.PointerValue | Uint8Array /* ptr */,
  cchDrvrAttrMax: number /* i16 */,
  pcchDrvrAttr: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLDriversW(util.toPointer(henv), fDirection, util.toPointer(szDriverDesc), cchDriverDescMax, util.toPointer(pcchDriverDesc), util.toPointer(szDriverAttributes), cchDrvrAttrMax, util.toPointer(pcchDrvrAttr));
}

export function SQLConnectA(
  hdbc: Deno.PointerValue | Uint8Array /* ptr */,
  szDSN: Deno.PointerValue | Uint8Array /* ptr */,
  cbDSN: number /* i16 */,
  szUID: Deno.PointerValue | Uint8Array /* ptr */,
  cbUID: number /* i16 */,
  szAuthStr: Deno.PointerValue | Uint8Array /* ptr */,
  cbAuthStr: number /* i16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLConnectA(util.toPointer(hdbc), util.toPointer(szDSN), cbDSN, util.toPointer(szUID), cbUID, util.toPointer(szAuthStr), cbAuthStr);
}

export function SQLErrorA(
  henv: Deno.PointerValue | Uint8Array /* ptr */,
  hdbc: Deno.PointerValue | Uint8Array /* ptr */,
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  szSqlState: Deno.PointerValue | Uint8Array /* ptr */,
  pfNativeError: Deno.PointerValue | Uint8Array /* ptr */,
  szErrorMsg: Deno.PointerValue | Uint8Array /* ptr */,
  cbErrorMsgMax: number /* i16 */,
  pcbErrorMsg: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLErrorA(util.toPointer(henv), util.toPointer(hdbc), util.toPointer(hstmt), util.toPointer(szSqlState), util.toPointer(pfNativeError), util.toPointer(szErrorMsg), cbErrorMsgMax, util.toPointer(pcbErrorMsg));
}

export function SQLExecDirectA(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  szSqlStr: Deno.PointerValue | Uint8Array /* ptr */,
  cbSqlStr: number /* i32 */,
): number /* i16 */ {
  return libODBC32_dll.SQLExecDirectA(util.toPointer(hstmt), util.toPointer(szSqlStr), cbSqlStr);
}

export function SQLGetConnectAttrA(
  hdbc: Deno.PointerValue | Uint8Array /* ptr */,
  fAttribute: number /* i32 */,
  rgbValue: Deno.PointerValue | Uint8Array /* ptr */,
  cbValueMax: number /* i32 */,
  pcbValue: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLGetConnectAttrA(util.toPointer(hdbc), fAttribute, util.toPointer(rgbValue), cbValueMax, util.toPointer(pcbValue));
}

export function SQLGetCursorNameA(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  szCursor: Deno.PointerValue | Uint8Array /* ptr */,
  cbCursorMax: number /* i16 */,
  pcbCursor: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLGetCursorNameA(util.toPointer(hstmt), util.toPointer(szCursor), cbCursorMax, util.toPointer(pcbCursor));
}

export function SQLGetDescFieldA(
  hdesc: Deno.PointerValue | Uint8Array /* ptr */,
  iRecord: number /* i16 */,
  iField: number /* i16 */,
  rgbValue: Deno.PointerValue | Uint8Array /* ptr */,
  cbBufferLength: number /* i32 */,
  StringLength: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLGetDescFieldA(util.toPointer(hdesc), iRecord, iField, util.toPointer(rgbValue), cbBufferLength, util.toPointer(StringLength));
}

export function SQLGetDiagFieldA(
  fHandleType: number /* i16 */,
  handle: Deno.PointerValue | Uint8Array /* ptr */,
  iRecord: number /* i16 */,
  fDiagField: number /* i16 */,
  rgbDiagInfo: Deno.PointerValue | Uint8Array /* ptr */,
  cbDiagInfoMax: number /* i16 */,
  pcbDiagInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLGetDiagFieldA(fHandleType, util.toPointer(handle), iRecord, fDiagField, util.toPointer(rgbDiagInfo), cbDiagInfoMax, util.toPointer(pcbDiagInfo));
}

export function SQLGetDiagRecA(
  fHandleType: number /* i16 */,
  handle: Deno.PointerValue | Uint8Array /* ptr */,
  iRecord: number /* i16 */,
  szSqlState: Deno.PointerValue | Uint8Array /* ptr */,
  pfNativeError: Deno.PointerValue | Uint8Array /* ptr */,
  szErrorMsg: Deno.PointerValue | Uint8Array /* ptr */,
  cbErrorMsgMax: number /* i16 */,
  pcbErrorMsg: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLGetDiagRecA(fHandleType, util.toPointer(handle), iRecord, util.toPointer(szSqlState), util.toPointer(pfNativeError), util.toPointer(szErrorMsg), cbErrorMsgMax, util.toPointer(pcbErrorMsg));
}

export function SQLGetStmtAttrA(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  fAttribute: number /* i32 */,
  rgbValue: Deno.PointerValue | Uint8Array /* ptr */,
  cbValueMax: number /* i32 */,
  pcbValue: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLGetStmtAttrA(util.toPointer(hstmt), fAttribute, util.toPointer(rgbValue), cbValueMax, util.toPointer(pcbValue));
}

export function SQLGetTypeInfoA(
  StatementHandle: Deno.PointerValue | Uint8Array /* ptr */,
  DataType: number /* i16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLGetTypeInfoA(util.toPointer(StatementHandle), DataType);
}

export function SQLPrepareA(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  szSqlStr: Deno.PointerValue | Uint8Array /* ptr */,
  cbSqlStr: number /* i32 */,
): number /* i16 */ {
  return libODBC32_dll.SQLPrepareA(util.toPointer(hstmt), util.toPointer(szSqlStr), cbSqlStr);
}

export function SQLSetConnectAttrA(
  hdbc: Deno.PointerValue | Uint8Array /* ptr */,
  fAttribute: number /* i32 */,
  rgbValue: Deno.PointerValue | Uint8Array /* ptr */,
  cbValue: number /* i32 */,
): number /* i16 */ {
  return libODBC32_dll.SQLSetConnectAttrA(util.toPointer(hdbc), fAttribute, util.toPointer(rgbValue), cbValue);
}

export function SQLSetCursorNameA(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  szCursor: Deno.PointerValue | Uint8Array /* ptr */,
  cbCursor: number /* i16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLSetCursorNameA(util.toPointer(hstmt), util.toPointer(szCursor), cbCursor);
}

export function SQLColumnsA(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  szCatalogName: Deno.PointerValue | Uint8Array /* ptr */,
  cbCatalogName: number /* i16 */,
  szSchemaName: Deno.PointerValue | Uint8Array /* ptr */,
  cbSchemaName: number /* i16 */,
  szTableName: Deno.PointerValue | Uint8Array /* ptr */,
  cbTableName: number /* i16 */,
  szColumnName: Deno.PointerValue | Uint8Array /* ptr */,
  cbColumnName: number /* i16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLColumnsA(util.toPointer(hstmt), util.toPointer(szCatalogName), cbCatalogName, util.toPointer(szSchemaName), cbSchemaName, util.toPointer(szTableName), cbTableName, util.toPointer(szColumnName), cbColumnName);
}

export function SQLGetConnectOptionA(
  hdbc: Deno.PointerValue | Uint8Array /* ptr */,
  fOption: number /* u16 */,
  pvParam: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLGetConnectOptionA(util.toPointer(hdbc), fOption, util.toPointer(pvParam));
}

export function SQLGetInfoA(
  hdbc: Deno.PointerValue | Uint8Array /* ptr */,
  fInfoType: number /* u16 */,
  rgbInfoValue: Deno.PointerValue | Uint8Array /* ptr */,
  cbInfoValueMax: number /* i16 */,
  pcbInfoValue: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLGetInfoA(util.toPointer(hdbc), fInfoType, util.toPointer(rgbInfoValue), cbInfoValueMax, util.toPointer(pcbInfoValue));
}

export function SQLSpecialColumnsA(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  fColType: number /* u16 */,
  szCatalogName: Deno.PointerValue | Uint8Array /* ptr */,
  cbCatalogName: number /* i16 */,
  szSchemaName: Deno.PointerValue | Uint8Array /* ptr */,
  cbSchemaName: number /* i16 */,
  szTableName: Deno.PointerValue | Uint8Array /* ptr */,
  cbTableName: number /* i16 */,
  fScope: number /* u16 */,
  fNullable: number /* u16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLSpecialColumnsA(util.toPointer(hstmt), fColType, util.toPointer(szCatalogName), cbCatalogName, util.toPointer(szSchemaName), cbSchemaName, util.toPointer(szTableName), cbTableName, fScope, fNullable);
}

export function SQLStatisticsA(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  szCatalogName: Deno.PointerValue | Uint8Array /* ptr */,
  cbCatalogName: number /* i16 */,
  szSchemaName: Deno.PointerValue | Uint8Array /* ptr */,
  cbSchemaName: number /* i16 */,
  szTableName: Deno.PointerValue | Uint8Array /* ptr */,
  cbTableName: number /* i16 */,
  fUnique: number /* u16 */,
  fAccuracy: number /* u16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLStatisticsA(util.toPointer(hstmt), util.toPointer(szCatalogName), cbCatalogName, util.toPointer(szSchemaName), cbSchemaName, util.toPointer(szTableName), cbTableName, fUnique, fAccuracy);
}

export function SQLTablesA(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  szCatalogName: Deno.PointerValue | Uint8Array /* ptr */,
  cbCatalogName: number /* i16 */,
  szSchemaName: Deno.PointerValue | Uint8Array /* ptr */,
  cbSchemaName: number /* i16 */,
  szTableName: Deno.PointerValue | Uint8Array /* ptr */,
  cbTableName: number /* i16 */,
  szTableType: Deno.PointerValue | Uint8Array /* ptr */,
  cbTableType: number /* i16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLTablesA(util.toPointer(hstmt), util.toPointer(szCatalogName), cbCatalogName, util.toPointer(szSchemaName), cbSchemaName, util.toPointer(szTableName), cbTableName, util.toPointer(szTableType), cbTableType);
}

export function SQLDataSourcesA(
  henv: Deno.PointerValue | Uint8Array /* ptr */,
  fDirection: number /* u16 */,
  szDSN: Deno.PointerValue | Uint8Array /* ptr */,
  cbDSNMax: number /* i16 */,
  pcbDSN: Deno.PointerValue | Uint8Array /* ptr */,
  szDescription: Deno.PointerValue | Uint8Array /* ptr */,
  cbDescriptionMax: number /* i16 */,
  pcbDescription: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLDataSourcesA(util.toPointer(henv), fDirection, util.toPointer(szDSN), cbDSNMax, util.toPointer(pcbDSN), util.toPointer(szDescription), cbDescriptionMax, util.toPointer(pcbDescription));
}

export function SQLDriverConnectA(
  hdbc: Deno.PointerValue | Uint8Array /* ptr */,
  hwnd: Deno.PointerValue /* isize */,
  szConnStrIn: Deno.PointerValue | Uint8Array /* ptr */,
  cbConnStrIn: number /* i16 */,
  szConnStrOut: Deno.PointerValue | Uint8Array /* ptr */,
  cbConnStrOutMax: number /* i16 */,
  pcbConnStrOut: Deno.PointerValue | Uint8Array /* ptr */,
  fDriverCompletion: number /* u16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLDriverConnectA(util.toPointer(hdbc), hwnd, util.toPointer(szConnStrIn), cbConnStrIn, util.toPointer(szConnStrOut), cbConnStrOutMax, util.toPointer(pcbConnStrOut), fDriverCompletion);
}

export function SQLBrowseConnectA(
  hdbc: Deno.PointerValue | Uint8Array /* ptr */,
  szConnStrIn: Deno.PointerValue | Uint8Array /* ptr */,
  cbConnStrIn: number /* i16 */,
  szConnStrOut: Deno.PointerValue | Uint8Array /* ptr */,
  cbConnStrOutMax: number /* i16 */,
  pcbConnStrOut: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLBrowseConnectA(util.toPointer(hdbc), util.toPointer(szConnStrIn), cbConnStrIn, util.toPointer(szConnStrOut), cbConnStrOutMax, util.toPointer(pcbConnStrOut));
}

export function SQLColumnPrivilegesA(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  szCatalogName: Deno.PointerValue | Uint8Array /* ptr */,
  cbCatalogName: number /* i16 */,
  szSchemaName: Deno.PointerValue | Uint8Array /* ptr */,
  cbSchemaName: number /* i16 */,
  szTableName: Deno.PointerValue | Uint8Array /* ptr */,
  cbTableName: number /* i16 */,
  szColumnName: Deno.PointerValue | Uint8Array /* ptr */,
  cbColumnName: number /* i16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLColumnPrivilegesA(util.toPointer(hstmt), util.toPointer(szCatalogName), cbCatalogName, util.toPointer(szSchemaName), cbSchemaName, util.toPointer(szTableName), cbTableName, util.toPointer(szColumnName), cbColumnName);
}

export function SQLForeignKeysA(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  szPkCatalogName: Deno.PointerValue | Uint8Array /* ptr */,
  cbPkCatalogName: number /* i16 */,
  szPkSchemaName: Deno.PointerValue | Uint8Array /* ptr */,
  cbPkSchemaName: number /* i16 */,
  szPkTableName: Deno.PointerValue | Uint8Array /* ptr */,
  cbPkTableName: number /* i16 */,
  szFkCatalogName: Deno.PointerValue | Uint8Array /* ptr */,
  cbFkCatalogName: number /* i16 */,
  szFkSchemaName: Deno.PointerValue | Uint8Array /* ptr */,
  cbFkSchemaName: number /* i16 */,
  szFkTableName: Deno.PointerValue | Uint8Array /* ptr */,
  cbFkTableName: number /* i16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLForeignKeysA(util.toPointer(hstmt), util.toPointer(szPkCatalogName), cbPkCatalogName, util.toPointer(szPkSchemaName), cbPkSchemaName, util.toPointer(szPkTableName), cbPkTableName, util.toPointer(szFkCatalogName), cbFkCatalogName, util.toPointer(szFkSchemaName), cbFkSchemaName, util.toPointer(szFkTableName), cbFkTableName);
}

export function SQLNativeSqlA(
  hdbc: Deno.PointerValue | Uint8Array /* ptr */,
  szSqlStrIn: Deno.PointerValue | Uint8Array /* ptr */,
  cbSqlStrIn: number /* i32 */,
  szSqlStr: Deno.PointerValue | Uint8Array /* ptr */,
  cbSqlStrMax: number /* i32 */,
  pcbSqlStr: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLNativeSqlA(util.toPointer(hdbc), util.toPointer(szSqlStrIn), cbSqlStrIn, util.toPointer(szSqlStr), cbSqlStrMax, util.toPointer(pcbSqlStr));
}

export function SQLPrimaryKeysA(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  szCatalogName: Deno.PointerValue | Uint8Array /* ptr */,
  cbCatalogName: number /* i16 */,
  szSchemaName: Deno.PointerValue | Uint8Array /* ptr */,
  cbSchemaName: number /* i16 */,
  szTableName: Deno.PointerValue | Uint8Array /* ptr */,
  cbTableName: number /* i16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLPrimaryKeysA(util.toPointer(hstmt), util.toPointer(szCatalogName), cbCatalogName, util.toPointer(szSchemaName), cbSchemaName, util.toPointer(szTableName), cbTableName);
}

export function SQLProcedureColumnsA(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  szCatalogName: Deno.PointerValue | Uint8Array /* ptr */,
  cbCatalogName: number /* i16 */,
  szSchemaName: Deno.PointerValue | Uint8Array /* ptr */,
  cbSchemaName: number /* i16 */,
  szProcName: Deno.PointerValue | Uint8Array /* ptr */,
  cbProcName: number /* i16 */,
  szColumnName: Deno.PointerValue | Uint8Array /* ptr */,
  cbColumnName: number /* i16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLProcedureColumnsA(util.toPointer(hstmt), util.toPointer(szCatalogName), cbCatalogName, util.toPointer(szSchemaName), cbSchemaName, util.toPointer(szProcName), cbProcName, util.toPointer(szColumnName), cbColumnName);
}

export function SQLProceduresA(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  szCatalogName: Deno.PointerValue | Uint8Array /* ptr */,
  cbCatalogName: number /* i16 */,
  szSchemaName: Deno.PointerValue | Uint8Array /* ptr */,
  cbSchemaName: number /* i16 */,
  szProcName: Deno.PointerValue | Uint8Array /* ptr */,
  cbProcName: number /* i16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLProceduresA(util.toPointer(hstmt), util.toPointer(szCatalogName), cbCatalogName, util.toPointer(szSchemaName), cbSchemaName, util.toPointer(szProcName), cbProcName);
}

export function SQLTablePrivilegesA(
  hstmt: Deno.PointerValue | Uint8Array /* ptr */,
  szCatalogName: Deno.PointerValue | Uint8Array /* ptr */,
  cbCatalogName: number /* i16 */,
  szSchemaName: Deno.PointerValue | Uint8Array /* ptr */,
  cbSchemaName: number /* i16 */,
  szTableName: Deno.PointerValue | Uint8Array /* ptr */,
  cbTableName: number /* i16 */,
): number /* i16 */ {
  return libODBC32_dll.SQLTablePrivilegesA(util.toPointer(hstmt), util.toPointer(szCatalogName), cbCatalogName, util.toPointer(szSchemaName), cbSchemaName, util.toPointer(szTableName), cbTableName);
}

export function SQLDriversA(
  henv: Deno.PointerValue | Uint8Array /* ptr */,
  fDirection: number /* u16 */,
  szDriverDesc: Deno.PointerValue | Uint8Array /* ptr */,
  cbDriverDescMax: number /* i16 */,
  pcbDriverDesc: Deno.PointerValue | Uint8Array /* ptr */,
  szDriverAttributes: Deno.PointerValue | Uint8Array /* ptr */,
  cbDrvrAttrMax: number /* i16 */,
  pcbDrvrAttr: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i16 */ {
  return libODBC32_dll.SQLDriversA(util.toPointer(henv), fDirection, util.toPointer(szDriverDesc), cbDriverDescMax, util.toPointer(pcbDriverDesc), util.toPointer(szDriverAttributes), cbDrvrAttrMax, util.toPointer(pcbDrvrAttr));
}

