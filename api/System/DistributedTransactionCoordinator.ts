/// Auto-generated by Deno Win32: Windows.Win32.System.DistributedTransactionCoordinator.Apis

import * as util from "../../util.ts";

// Enums
export type DTC_STATUS_ = number;
export type TX_MISC_CONSTANTS = number;
export type ISOLATIONLEVEL = number;
export type ISOFLAG = number;
export type XACTTC = number;
export type XACTRM = number;
export type XACTCONST = number;
export type XACTHEURISTIC = number;
export type XACTSTAT = number;
export type AUTHENTICATION_LEVEL = number;
export type APPLICATIONTYPE = number;
export type XACT_DTC_CONSTANTS = number;
export type DTCINITIATEDRECOVERYWORK = number;
export type DTCLUXLN = number;
export type DTCLUXLNCONFIRMATION = number;
export type DTCLUXLNRESPONSE = number;
export type DTCLUXLNERROR = number;
export type DTCLUCOMPARESTATE = number;
export type DTCLUCOMPARESTATESCONFIRMATION = number;
export type DTCLUCOMPARESTATESERROR = number;
export type DTCLUCOMPARESTATESRESPONSE = number;

// Constants
export const DTCINSTALL_E_CLIENT_ALREADY_INSTALLED = 384;
export const DTCINSTALL_E_SERVER_ALREADY_INSTALLED = 385;
export const XA_SWITCH_F_DTC = 1;
export const XA_FMTID_DTC = 4478019;
export const XA_FMTID_DTC_VER1 = 21255235;
export const XIDDATASIZE = 128;
export const MAXGTRIDSIZE = 64;
export const MAXBQUALSIZE = 64;
export const RMNAMESZ = 32;
export const MAXINFOSIZE = 256;
export const TMNOFLAGS = 0;
export const TMREGISTER = 1;
export const TMNOMIGRATE = 2;
export const TMUSEASYNC = 4;
export const TMASYNC = `-2147483648`;
export const TMONEPHASE = 1073741824;
export const TMFAIL = 536870912;
export const TMNOWAIT = 268435456;
export const TMRESUME = 134217728;
export const TMSUCCESS = 67108864;
export const TMSUSPEND = 33554432;
export const TMSTARTRSCAN = 16777216;
export const TMENDRSCAN = 8388608;
export const TMMULTIPLE = 4194304;
export const TMJOIN = 2097152;
export const TMMIGRATE = 1048576;
export const TM_JOIN = 2;
export const TM_RESUME = 1;
export const TM_OK = 0;
export const TMER_TMERR = `-1`;
export const TMER_INVAL = `-2`;
export const TMER_PROTO = `-3`;
export const XA_RBBASE = 100;
export const XA_RBROLLBACK = 100;
export const XA_RBCOMMFAIL = 101;
export const XA_RBDEADLOCK = 102;
export const XA_RBINTEGRITY = 103;
export const XA_RBOTHER = 104;
export const XA_RBPROTO = 105;
export const XA_RBTIMEOUT = 106;
export const XA_RBTRANSIENT = 107;
export const XA_RBEND = 107;
export const XA_NOMIGRATE = 9;
export const XA_HEURHAZ = 8;
export const XA_HEURCOM = 7;
export const XA_HEURRB = 6;
export const XA_HEURMIX = 5;
export const XA_RETRY = 4;
export const XA_RDONLY = 3;
export const XA_OK = 0;
export const XAER_ASYNC = `-2`;
export const XAER_RMERR = `-3`;
export const XAER_NOTA = `-4`;
export const XAER_INVAL = `-5`;
export const XAER_PROTO = `-6`;
export const XAER_RMFAIL = `-7`;
export const XAER_DUPID = `-8`;
export const XAER_OUTSIDE = `-9`;
export const DTC_INSTALL_OVERWRITE_CLIENT = 1;
export const DTC_INSTALL_OVERWRITE_SERVER = 2;
export const OLE_TM_CONFIG_VERSION_1 = 1;
export const OLE_TM_CONFIG_VERSION_2 = 2;
export const OLE_TM_FLAG_NONE = 0;
export const OLE_TM_FLAG_NODEMANDSTART = 1;
export const OLE_TM_FLAG_NOAGILERECOVERY = 2;
export const OLE_TM_FLAG_QUERY_SERVICE_LOCKSTATUS = 2147483648;
export const OLE_TM_FLAG_INTERNAL_TO_TM = 1073741824;
export const DTC_STATUS_UNKNOWN = 0;
export const DTC_STATUS_STARTING = 1;
export const DTC_STATUS_STARTED = 2;
export const DTC_STATUS_PAUSING = 3;
export const DTC_STATUS_PAUSED = 4;
export const DTC_STATUS_CONTINUING = 5;
export const DTC_STATUS_STOPPING = 6;
export const DTC_STATUS_STOPPED = 7;
export const DTC_STATUS_E_CANTCONTROL = 8;
export const DTC_STATUS_FAILED = 9;
export const MAX_TRAN_DESC = 40;
export const ISOLATIONLEVEL_UNSPECIFIED = `-1`;
export const ISOLATIONLEVEL_CHAOS = 16;
export const ISOLATIONLEVEL_READUNCOMMITTED = 256;
export const ISOLATIONLEVEL_BROWSE = 256;
export const ISOLATIONLEVEL_CURSORSTABILITY = 4096;
export const ISOLATIONLEVEL_READCOMMITTED = 4096;
export const ISOLATIONLEVEL_REPEATABLEREAD = 65536;
export const ISOLATIONLEVEL_SERIALIZABLE = 1048576;
export const ISOLATIONLEVEL_ISOLATED = 1048576;
export const ISOFLAG_RETAIN_COMMIT_DC = 1;
export const ISOFLAG_RETAIN_COMMIT = 2;
export const ISOFLAG_RETAIN_COMMIT_NO = 3;
export const ISOFLAG_RETAIN_ABORT_DC = 4;
export const ISOFLAG_RETAIN_ABORT = 8;
export const ISOFLAG_RETAIN_ABORT_NO = 12;
export const ISOFLAG_RETAIN_DONTCARE = 5;
export const ISOFLAG_RETAIN_BOTH = 10;
export const ISOFLAG_RETAIN_NONE = 15;
export const ISOFLAG_OPTIMISTIC = 16;
export const ISOFLAG_READONLY = 32;
export const XACTTC_NONE = 0;
export const XACTTC_SYNC_PHASEONE = 1;
export const XACTTC_SYNC_PHASETWO = 2;
export const XACTTC_SYNC = 2;
export const XACTTC_ASYNC_PHASEONE = 4;
export const XACTTC_ASYNC = 4;
export const XACTRM_OPTIMISTICLASTWINS = 1;
export const XACTRM_NOREADONLYPREPARES = 2;
export const XACTCONST_TIMEOUTINFINITE = 0;
export const XACTHEURISTIC_ABORT = 1;
export const XACTHEURISTIC_COMMIT = 2;
export const XACTHEURISTIC_DAMAGE = 3;
export const XACTHEURISTIC_DANGER = 4;
export const XACTSTAT_NONE = 0;
export const XACTSTAT_OPENNORMAL = 1;
export const XACTSTAT_OPENREFUSED = 2;
export const XACTSTAT_PREPARING = 4;
export const XACTSTAT_PREPARED = 8;
export const XACTSTAT_PREPARERETAINING = 16;
export const XACTSTAT_PREPARERETAINED = 32;
export const XACTSTAT_COMMITTING = 64;
export const XACTSTAT_COMMITRETAINING = 128;
export const XACTSTAT_ABORTING = 256;
export const XACTSTAT_ABORTED = 512;
export const XACTSTAT_COMMITTED = 1024;
export const XACTSTAT_HEURISTIC_ABORT = 2048;
export const XACTSTAT_HEURISTIC_COMMIT = 4096;
export const XACTSTAT_HEURISTIC_DAMAGE = 8192;
export const XACTSTAT_HEURISTIC_DANGER = 16384;
export const XACTSTAT_FORCED_ABORT = 32768;
export const XACTSTAT_FORCED_COMMIT = 65536;
export const XACTSTAT_INDOUBT = 131072;
export const XACTSTAT_CLOSED = 262144;
export const XACTSTAT_OPEN = 3;
export const XACTSTAT_NOTPREPARED = 524227;
export const XACTSTAT_ALL = 524287;
export const NO_AUTHENTICATION_REQUIRED = 0;
export const INCOMING_AUTHENTICATION_REQUIRED = 1;
export const MUTUAL_AUTHENTICATION_REQUIRED = 2;
export const LOCAL_APPLICATIONTYPE = 0;
export const CLUSTERRESOURCE_APPLICATIONTYPE = 1;
export const XACT_E_CONNECTION_REQUEST_DENIED = `-2147168000`;
export const XACT_E_TOOMANY_ENLISTMENTS = `-2147167999`;
export const XACT_E_DUPLICATE_GUID = `-2147167998`;
export const XACT_E_NOTSINGLEPHASE = `-2147167997`;
export const XACT_E_RECOVERYALREADYDONE = `-2147167996`;
export const XACT_E_PROTOCOL = `-2147167995`;
export const XACT_E_RM_FAILURE = `-2147167994`;
export const XACT_E_RECOVERY_FAILED = `-2147167993`;
export const XACT_E_LU_NOT_FOUND = `-2147167992`;
export const XACT_E_DUPLICATE_LU = `-2147167991`;
export const XACT_E_LU_NOT_CONNECTED = `-2147167990`;
export const XACT_E_DUPLICATE_TRANSID = `-2147167989`;
export const XACT_E_LU_BUSY = `-2147167988`;
export const XACT_E_LU_NO_RECOVERY_PROCESS = `-2147167987`;
export const XACT_E_LU_DOWN = `-2147167986`;
export const XACT_E_LU_RECOVERING = `-2147167985`;
export const XACT_E_LU_RECOVERY_MISMATCH = `-2147167984`;
export const XACT_E_RM_UNAVAILABLE = `-2147167983`;
export const XACT_E_LRMRECOVERYALREADYDONE = `-2147167982`;
export const XACT_E_NOLASTRESOURCEINTERFACE = `-2147167981`;
export const XACT_S_NONOTIFY = 315648;
export const XACT_OK_NONOTIFY = 315649;
export const dwUSER_MS_SQLSERVER = 65535;
export const DTCINITIATEDRECOVERYWORK_CHECKLUSTATUS = 1;
export const DTCINITIATEDRECOVERYWORK_TRANS = 2;
export const DTCINITIATEDRECOVERYWORK_TMDOWN = 3;
export const DTCLUXLN_COLD = 1;
export const DTCLUXLN_WARM = 2;
export const DTCLUXLNCONFIRMATION_CONFIRM = 1;
export const DTCLUXLNCONFIRMATION_LOGNAMEMISMATCH = 2;
export const DTCLUXLNCONFIRMATION_COLDWARMMISMATCH = 3;
export const DTCLUXLNCONFIRMATION_OBSOLETE = 4;
export const DTCLUXLNRESPONSE_OK_SENDOURXLNBACK = 1;
export const DTCLUXLNRESPONSE_OK_SENDCONFIRMATION = 2;
export const DTCLUXLNRESPONSE_LOGNAMEMISMATCH = 3;
export const DTCLUXLNRESPONSE_COLDWARMMISMATCH = 4;
export const DTCLUXLNERROR_PROTOCOL = 1;
export const DTCLUXLNERROR_LOGNAMEMISMATCH = 2;
export const DTCLUXLNERROR_COLDWARMMISMATCH = 3;
export const DTCLUCOMPARESTATE_COMMITTED = 1;
export const DTCLUCOMPARESTATE_HEURISTICCOMMITTED = 2;
export const DTCLUCOMPARESTATE_HEURISTICMIXED = 3;
export const DTCLUCOMPARESTATE_HEURISTICRESET = 4;
export const DTCLUCOMPARESTATE_INDOUBT = 5;
export const DTCLUCOMPARESTATE_RESET = 6;
export const DTCLUCOMPARESTATESCONFIRMATION_CONFIRM = 1;
export const DTCLUCOMPARESTATESCONFIRMATION_PROTOCOL = 2;
export const DTCLUCOMPARESTATESERROR_PROTOCOL = 1;
export const DTCLUCOMPARESTATESRESPONSE_OK = 1;
export const DTCLUCOMPARESTATESRESPONSE_PROTOCOL = 2;

// Structs

/**
 * Windows.Win32.System.DistributedTransactionCoordinator.BOID (size: 8)
 */
export interface BOID {
  /** array */
  rgb: Deno.PointerValue;
}

export const sizeofBOID = 8;

export function allocBOID(data?: Partial<BOID>): Uint8Array {
  const buf = new Uint8Array(sizeofBOID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rgb !== undefined) view.setBigUint64(0, data.rgb === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgb))), true);
  return buf;
}

export class BOIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get rgb(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set rgb(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.DistributedTransactionCoordinator.XACTTRANSINFO (size: 32)
 */
export interface XACTTRANSINFO {
  /** Windows.Win32.System.DistributedTransactionCoordinator.BOID */
  uow: Uint8Array | Deno.PointerValue;
  /** i32 */
  isoLevel: number;
  /** u32 */
  isoFlags: number;
  /** u32 */
  grfTCSupported: number;
  /** u32 */
  grfRMSupported: number;
  /** u32 */
  grfTCSupportedRetaining: number;
  /** u32 */
  grfRMSupportedRetaining: number;
}

export const sizeofXACTTRANSINFO = 32;

export function allocXACTTRANSINFO(data?: Partial<XACTTRANSINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofXACTTRANSINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.uow !== undefined) view.setBigUint64(0, data.uow === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.uow))), true);
  // 0x08: i32
  if (data?.isoLevel !== undefined) view.setInt32(8, Number(data.isoLevel), true);
  // 0x0c: u32
  if (data?.isoFlags !== undefined) view.setUint32(12, Number(data.isoFlags), true);
  // 0x10: u32
  if (data?.grfTCSupported !== undefined) view.setUint32(16, Number(data.grfTCSupported), true);
  // 0x14: u32
  if (data?.grfRMSupported !== undefined) view.setUint32(20, Number(data.grfRMSupported), true);
  // 0x18: u32
  if (data?.grfTCSupportedRetaining !== undefined) view.setUint32(24, Number(data.grfTCSupportedRetaining), true);
  // 0x1c: u32
  if (data?.grfRMSupportedRetaining !== undefined) view.setUint32(28, Number(data.grfRMSupportedRetaining), true);
  return buf;
}

export class XACTTRANSINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get uow(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get isoLevel(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get isoFlags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get grfTCSupported(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get grfRMSupported(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get grfTCSupportedRetaining(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get grfRMSupportedRetaining(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: pointer
  set uow(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set isoLevel(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set isoFlags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set grfTCSupported(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set grfRMSupported(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set grfTCSupportedRetaining(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set grfRMSupportedRetaining(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Foundation.FILETIME (size: 8)
 */
export interface FILETIME {
  /** u32 */
  dwLowDateTime: number;
  /** u32 */
  dwHighDateTime: number;
}

export const sizeofFILETIME = 8;

export function allocFILETIME(data?: Partial<FILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofFILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowDateTime !== undefined) view.setUint32(0, Number(data.dwLowDateTime), true);
  // 0x04: u32
  if (data?.dwHighDateTime !== undefined) view.setUint32(4, Number(data.dwHighDateTime), true);
  return buf;
}

export class FILETIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLowDateTime(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwHighDateTime(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwLowDateTime(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwHighDateTime(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.DistributedTransactionCoordinator.XACTSTATS (size: 40)
 */
export interface XACTSTATS {
  /** u32 */
  cOpen: number;
  /** u32 */
  cCommitting: number;
  /** u32 */
  cCommitted: number;
  /** u32 */
  cAborting: number;
  /** u32 */
  cAborted: number;
  /** u32 */
  cInDoubt: number;
  /** u32 */
  cHeuristicDecision: number;
  /** Windows.Win32.Foundation.FILETIME */
  timeTransactionsUp: Uint8Array | Deno.PointerValue;
}

export const sizeofXACTSTATS = 40;

export function allocXACTSTATS(data?: Partial<XACTSTATS>): Uint8Array {
  const buf = new Uint8Array(sizeofXACTSTATS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cOpen !== undefined) view.setUint32(0, Number(data.cOpen), true);
  // 0x04: u32
  if (data?.cCommitting !== undefined) view.setUint32(4, Number(data.cCommitting), true);
  // 0x08: u32
  if (data?.cCommitted !== undefined) view.setUint32(8, Number(data.cCommitted), true);
  // 0x0c: u32
  if (data?.cAborting !== undefined) view.setUint32(12, Number(data.cAborting), true);
  // 0x10: u32
  if (data?.cAborted !== undefined) view.setUint32(16, Number(data.cAborted), true);
  // 0x14: u32
  if (data?.cInDoubt !== undefined) view.setUint32(20, Number(data.cInDoubt), true);
  // 0x18: u32
  if (data?.cHeuristicDecision !== undefined) view.setUint32(24, Number(data.cHeuristicDecision), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.timeTransactionsUp !== undefined) view.setBigUint64(32, data.timeTransactionsUp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.timeTransactionsUp))), true);
  return buf;
}

export class XACTSTATSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cOpen(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cCommitting(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cCommitted(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get cAborting(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get cAborted(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get cInDoubt(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get cHeuristicDecision(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get timeTransactionsUp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cOpen(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cCommitting(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cCommitted(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set cAborting(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set cAborted(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set cInDoubt(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set cHeuristicDecision(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set timeTransactionsUp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.DistributedTransactionCoordinator.XACTOPT (size: 16)
 */
export interface XACTOPT {
  /** u32 */
  ulTimeout: number;
  /** array */
  szDescription: Deno.PointerValue;
}

export const sizeofXACTOPT = 16;

export function allocXACTOPT(data?: Partial<XACTOPT>): Uint8Array {
  const buf = new Uint8Array(sizeofXACTOPT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulTimeout !== undefined) view.setUint32(0, Number(data.ulTimeout), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.szDescription !== undefined) view.setBigUint64(8, data.szDescription === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szDescription))), true);
  return buf;
}

export class XACTOPTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulTimeout(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get szDescription(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set ulTimeout(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set szDescription(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.DistributedTransactionCoordinator.XID (size: 24)
 */
export interface XID {
  /** i32 */
  formatID: number;
  /** i32 */
  gtrid_length: number;
  /** i32 */
  bqual_length: number;
  /** array */
  data: Deno.PointerValue;
}

export const sizeofXID = 24;

export function allocXID(data?: Partial<XID>): Uint8Array {
  const buf = new Uint8Array(sizeofXID);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.formatID !== undefined) view.setInt32(0, Number(data.formatID), true);
  // 0x04: i32
  if (data?.gtrid_length !== undefined) view.setInt32(4, Number(data.gtrid_length), true);
  // 0x08: i32
  if (data?.bqual_length !== undefined) view.setInt32(8, Number(data.bqual_length), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.data !== undefined) view.setBigUint64(16, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  return buf;
}

export class XIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get formatID(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get gtrid_length(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get bqual_length(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set formatID(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set gtrid_length(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set bqual_length(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.DistributedTransactionCoordinator.xa_switch_t (size: 96)
 */
export interface xa_switch_t {
  /** array */
  name: Deno.PointerValue;
  /** i32 */
  flags: number;
  /** i32 */
  version: number;
  /** isize */
  xa_open_entry: bigint | number;
  /** isize */
  xa_close_entry: bigint | number;
  /** isize */
  xa_start_entry: bigint | number;
  /** isize */
  xa_end_entry: bigint | number;
  /** isize */
  xa_rollback_entry: bigint | number;
  /** isize */
  xa_prepare_entry: bigint | number;
  /** isize */
  xa_commit_entry: bigint | number;
  /** isize */
  xa_recover_entry: bigint | number;
  /** isize */
  xa_forget_entry: bigint | number;
  /** isize */
  xa_complete_entry: bigint | number;
}

export const sizeofXa_switch_t = 96;

export function allocXa_switch_t(data?: Partial<xa_switch_t>): Uint8Array {
  const buf = new Uint8Array(sizeofXa_switch_t);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.name !== undefined) view.setBigUint64(0, data.name === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.name))), true);
  // 0x08: i32
  if (data?.flags !== undefined) view.setInt32(8, Number(data.flags), true);
  // 0x0c: i32
  if (data?.version !== undefined) view.setInt32(12, Number(data.version), true);
  // 0x10: isize
  if (data?.xa_open_entry !== undefined) view.setBigInt64(16, BigInt(data.xa_open_entry), true);
  // 0x18: isize
  if (data?.xa_close_entry !== undefined) view.setBigInt64(24, BigInt(data.xa_close_entry), true);
  // 0x20: isize
  if (data?.xa_start_entry !== undefined) view.setBigInt64(32, BigInt(data.xa_start_entry), true);
  // 0x28: isize
  if (data?.xa_end_entry !== undefined) view.setBigInt64(40, BigInt(data.xa_end_entry), true);
  // 0x30: isize
  if (data?.xa_rollback_entry !== undefined) view.setBigInt64(48, BigInt(data.xa_rollback_entry), true);
  // 0x38: isize
  if (data?.xa_prepare_entry !== undefined) view.setBigInt64(56, BigInt(data.xa_prepare_entry), true);
  // 0x40: isize
  if (data?.xa_commit_entry !== undefined) view.setBigInt64(64, BigInt(data.xa_commit_entry), true);
  // 0x48: isize
  if (data?.xa_recover_entry !== undefined) view.setBigInt64(72, BigInt(data.xa_recover_entry), true);
  // 0x50: isize
  if (data?.xa_forget_entry !== undefined) view.setBigInt64(80, BigInt(data.xa_forget_entry), true);
  // 0x58: isize
  if (data?.xa_complete_entry !== undefined) view.setBigInt64(88, BigInt(data.xa_complete_entry), true);
  return buf;
}

export class xa_switch_tView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get flags(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get version(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: isize
  get xa_open_entry(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: isize
  get xa_close_entry(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: isize
  get xa_start_entry(): bigint | number {
    return Number(this.view.getBigInt64(32, true));
  }

  // 0x28: isize
  get xa_end_entry(): bigint | number {
    return Number(this.view.getBigInt64(40, true));
  }

  // 0x30: isize
  get xa_rollback_entry(): bigint | number {
    return Number(this.view.getBigInt64(48, true));
  }

  // 0x38: isize
  get xa_prepare_entry(): bigint | number {
    return Number(this.view.getBigInt64(56, true));
  }

  // 0x40: isize
  get xa_commit_entry(): bigint | number {
    return Number(this.view.getBigInt64(64, true));
  }

  // 0x48: isize
  get xa_recover_entry(): bigint | number {
    return Number(this.view.getBigInt64(72, true));
  }

  // 0x50: isize
  get xa_forget_entry(): bigint | number {
    return Number(this.view.getBigInt64(80, true));
  }

  // 0x58: isize
  get xa_complete_entry(): bigint | number {
    return Number(this.view.getBigInt64(88, true));
  }

  // 0x00: pointer
  set name(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set flags(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set version(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: isize
  set xa_open_entry(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: isize
  set xa_close_entry(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: isize
  set xa_start_entry(value: bigint | number) {
    this.view.setBigInt64(32, BigInt(value), true);
  }

  // 0x28: isize
  set xa_end_entry(value: bigint | number) {
    this.view.setBigInt64(40, BigInt(value), true);
  }

  // 0x30: isize
  set xa_rollback_entry(value: bigint | number) {
    this.view.setBigInt64(48, BigInt(value), true);
  }

  // 0x38: isize
  set xa_prepare_entry(value: bigint | number) {
    this.view.setBigInt64(56, BigInt(value), true);
  }

  // 0x40: isize
  set xa_commit_entry(value: bigint | number) {
    this.view.setBigInt64(64, BigInt(value), true);
  }

  // 0x48: isize
  set xa_recover_entry(value: bigint | number) {
    this.view.setBigInt64(72, BigInt(value), true);
  }

  // 0x50: isize
  set xa_forget_entry(value: bigint | number) {
    this.view.setBigInt64(80, BigInt(value), true);
  }

  // 0x58: isize
  set xa_complete_entry(value: bigint | number) {
    this.view.setBigInt64(88, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.DistributedTransactionCoordinator.OLE_TM_CONFIG_PARAMS_V1 (size: 8)
 */
export interface OLE_TM_CONFIG_PARAMS_V1 {
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwcConcurrencyHint: number;
}

export const sizeofOLE_TM_CONFIG_PARAMS_V1 = 8;

export function allocOLE_TM_CONFIG_PARAMS_V1(data?: Partial<OLE_TM_CONFIG_PARAMS_V1>): Uint8Array {
  const buf = new Uint8Array(sizeofOLE_TM_CONFIG_PARAMS_V1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.dwcConcurrencyHint !== undefined) view.setUint32(4, Number(data.dwcConcurrencyHint), true);
  return buf;
}

export class OLE_TM_CONFIG_PARAMS_V1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwcConcurrencyHint(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwcConcurrencyHint(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.DistributedTransactionCoordinator.OLE_TM_CONFIG_PARAMS_V2 (size: 24)
 */
export interface OLE_TM_CONFIG_PARAMS_V2 {
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwcConcurrencyHint: number;
  /** Windows.Win32.System.DistributedTransactionCoordinator.APPLICATIONTYPE */
  applicationType: APPLICATIONTYPE;
  /** System.Guid */
  clusterResourceId: Uint8Array | Deno.PointerValue;
}

export const sizeofOLE_TM_CONFIG_PARAMS_V2 = 24;

export function allocOLE_TM_CONFIG_PARAMS_V2(data?: Partial<OLE_TM_CONFIG_PARAMS_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofOLE_TM_CONFIG_PARAMS_V2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.dwcConcurrencyHint !== undefined) view.setUint32(4, Number(data.dwcConcurrencyHint), true);
  // 0x08: i32
  if (data?.applicationType !== undefined) view.setInt32(8, Number(data.applicationType), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.clusterResourceId !== undefined) view.setBigUint64(16, data.clusterResourceId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.clusterResourceId))), true);
  return buf;
}

export class OLE_TM_CONFIG_PARAMS_V2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwcConcurrencyHint(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get applicationType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get clusterResourceId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwcConcurrencyHint(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set applicationType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set clusterResourceId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.DistributedTransactionCoordinator.PROXY_CONFIG_PARAMS (size: 8)
 */
export interface PROXY_CONFIG_PARAMS {
  /** u16 */
  wcThreadsMax: number;
}

export const sizeofPROXY_CONFIG_PARAMS = 8;

export function allocPROXY_CONFIG_PARAMS(data?: Partial<PROXY_CONFIG_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofPROXY_CONFIG_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wcThreadsMax !== undefined) view.setUint16(0, Number(data.wcThreadsMax), true);
  // 0x02: pad6
  return buf;
}

export class PROXY_CONFIG_PARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get wcThreadsMax(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x00: u16
  set wcThreadsMax(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6
}

export type PSTR = Deno.PointerValue | Uint8Array;

export type HRESULT = number;

export type PWSTR = Deno.PointerValue | Uint8Array;

// Native Libraries

try {
  var libXOLEHLP_dll = Deno.dlopen("XOLEHLP.dll", {
    DtcGetTransactionManager: {
      parameters: ["buffer", "buffer", "pointer", "u32", "u16", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    DtcGetTransactionManagerC: {
      parameters: ["buffer", "buffer", "pointer", "u32", "u16", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    DtcGetTransactionManagerExA: {
      parameters: ["buffer", "buffer", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    DtcGetTransactionManagerExW: {
      parameters: ["buffer", "buffer", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function DtcGetTransactionManager(
  i_pszHost: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  i_pszTmName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  i_riid: Deno.PointerValue | Uint8Array /* ptr */,
  i_dwReserved1: number /* u32 */,
  i_wcbReserved2: number /* u16 */,
  i_pvReserved2: Deno.PointerValue | Uint8Array /* ptr */,
  o_ppvObject: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libXOLEHLP_dll.DtcGetTransactionManager!(util.pstrToFfi(i_pszHost), util.pstrToFfi(i_pszTmName), util.toPointer(i_riid), i_dwReserved1, i_wcbReserved2, util.toPointer(i_pvReserved2), util.toPointer(o_ppvObject));
}

export function DtcGetTransactionManagerC(
  i_pszHost: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  i_pszTmName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  i_riid: Deno.PointerValue | Uint8Array /* ptr */,
  i_dwReserved1: number /* u32 */,
  i_wcbReserved2: number /* u16 */,
  i_pvReserved2: Deno.PointerValue | Uint8Array /* ptr */,
  o_ppvObject: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libXOLEHLP_dll.DtcGetTransactionManagerC!(util.pstrToFfi(i_pszHost), util.pstrToFfi(i_pszTmName), util.toPointer(i_riid), i_dwReserved1, i_wcbReserved2, util.toPointer(i_pvReserved2), util.toPointer(o_ppvObject));
}

export function DtcGetTransactionManagerExA(
  i_pszHost: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  i_pszTmName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  i_riid: Deno.PointerValue | Uint8Array /* ptr */,
  i_grfOptions: number /* u32 */,
  i_pvConfigParams: Deno.PointerValue | Uint8Array /* ptr */,
  o_ppvObject: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libXOLEHLP_dll.DtcGetTransactionManagerExA!(util.pstrToFfi(i_pszHost), util.pstrToFfi(i_pszTmName), util.toPointer(i_riid), i_grfOptions, util.toPointer(i_pvConfigParams), util.toPointer(o_ppvObject));
}

export function DtcGetTransactionManagerExW(
  i_pwszHost: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  i_pwszTmName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  i_riid: Deno.PointerValue | Uint8Array /* ptr */,
  i_grfOptions: number /* u32 */,
  i_pvConfigParams: Deno.PointerValue | Uint8Array /* ptr */,
  o_ppvObject: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libXOLEHLP_dll.DtcGetTransactionManagerExW!(util.pwstrToFfi(i_pwszHost), util.pwstrToFfi(i_pwszTmName), util.toPointer(i_riid), i_grfOptions, util.toPointer(i_pvConfigParams), util.toPointer(o_ppvObject));
}

