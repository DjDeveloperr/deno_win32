/// Auto-generated by Deno Win32: Windows.Win32.System.Ole.Apis

import * as util from "../../util.ts";

// Enums
export type UPDFCACHE_FLAGS = number;
export type ENUM_CONTROLS_WHICH_FLAGS = number;
export type MULTICLASSINFO_FLAGS = number;
export type VARENUM = number;
export type SF_TYPE = number;
export type TYPEFLAGS = number;
export type FUNCFLAGS = number;
export type VARFLAGS = number;
export type LIBFLAGS = number;
export type CHANGEKIND = number;
export type DISCARDCACHE = number;
export type OLEGETMONIKER = number;
export type OLEWHICHMK = number;
export type USERCLASSTYPE = number;
export type OLEMISC = number;
export type OLECLOSE = number;
export type OLERENDER = number;
export type OLEUPDATE = number;
export type OLELINKBIND = number;
export type BINDSPEED = number;
export type OLECONTF = number;
export type OLEVERBATTRIB = number;
export type REGKIND = number;
export type CALLCONV = number;
export type UASFLAGS = number;
export type READYSTATE = number;
export type GUIDKIND = number;
export type CTRLINFO = number;
export type XFORMCOORDS = number;
export type PROPPAGESTATUS = number;
export type PictureAttributes = number;
export type ACTIVATEFLAGS = number;
export type OLEDCFLAGS = number;
export type VIEWSTATUS = number;
export type HITRESULT = number;
export type DVASPECT2 = number;
export type ExtentMode = number;
export type AspectInfoFlag = number;
export type POINTERINACTIVE = number;
export type PROPBAG2_TYPE = number;
export type QACONTAINERFLAGS = number;
export type OLE_TRISTATE = number;
export type DOCMISC = number;
export type PRINTFLAG = number;
export type OLECMDF = number;
export type OLECMDTEXTF = number;
export type OLECMDEXECOPT = number;
export type OLECMDID = number;
export type MEDIAPLAYBACK_STATE = number;
export type IGNOREMIME = number;
export type WPCSETTING = number;
export type OLECMDID_REFRESHFLAG = number;
export type OLECMDID_PAGEACTIONFLAG = number;
export type OLECMDID_BROWSERSTATEFLAG = number;
export type OLECMDID_OPTICAL_ZOOMFLAG = number;
export type PAGEACTION_UI = number;
export type OLECMDID_WINDOWSTATE_FLAG = number;
export type OLECMDID_VIEWPORT_MODE_FLAG = number;
export type OLEUIPASTEFLAG = number;
export type SYSKIND = number;

// Constants
export const CTL_E_ILLEGALFUNCTIONCALL = "-2146828283";
export const CONNECT_E_FIRST = "-2147220992";
export const SELFREG_E_FIRST = "-2147220992";
export const PERPROP_E_FIRST = "-2147220992";
export const OLECMDERR_E_FIRST = 288528363130454272n;
export const OLECMDERR_E_DISABLED = 288514069479293185n;
export const OLECMDERR_E_NOHELP = 288515168990920962n;
export const OLECMDERR_E_CANCELED = 288529462642082051n;
export const OLECMDERR_E_UNKNOWNGROUP = 288795544456003844n;
export const CONNECT_E_NOCONNECTION = 288827430293209600n;
export const CONNECT_E_ADVISELIMIT = 288795544456004097n;
export const CONNECT_E_CANNOTCONNECT = 1187558720002;
export const CONNECT_E_OVERRIDDEN = 288797743479259651n;
export const SELFREG_E_TYPELIB = 288827430293209600n;
export const SELFREG_E_CLASS = 288795544456004097n;
export const PERPROP_E_NOPAGEAVAILABLE = 288827430293209600n;
export const PICTYPE_UNINITIALIZED = "-1";
export const PICTYPE_NONE = 0;
export const PICTYPE_BITMAP = 1;
export const PICTYPE_METAFILE = 2;
export const PICTYPE_ICON = 3;
export const PICTYPE_ENHMETAFILE = 4;
export const CONNECT_E_LAST = 288810937618792975n;
export const CONNECT_S_FIRST = 288827428145725952n;
export const CONNECT_S_LAST = 18446194335075795471n;
export const SELFREG_E_LAST = 288810937618792975n;
export const SELFREG_S_FIRST = 288827428145725952n;
export const SELFREG_S_LAST = 18446194335075795471n;
export const PERPROP_E_LAST = 288810937618792975n;
export const PERPROP_S_FIRST = 288827428145725952n;
export const PERPROP_S_LAST = 18446194335075795471n;
export const OLEIVERB_PROPERTIES = "-7";
export const VT_STREAMED_PROPSET = 73;
export const VT_STORED_PROPSET = 74;
export const VT_BLOB_PROPSET = 75;
export const VT_VERBOSE_ENUM = 76;
export const OCM__BASE = 8192;
export const LP_DEFAULT = 0;
export const LP_MONOCHROME = 1;
export const LP_VGACOLOR = 2;
export const LP_COLOR = 4;
export const DISPID_AUTOSIZE = "-500";
export const DISPID_BACKCOLOR = "-501";
export const DISPID_BACKSTYLE = "-502";
export const DISPID_BORDERCOLOR = "-503";
export const DISPID_BORDERSTYLE = "-504";
export const DISPID_BORDERWIDTH = "-505";
export const DISPID_DRAWMODE = "-507";
export const DISPID_DRAWSTYLE = "-508";
export const DISPID_DRAWWIDTH = "-509";
export const DISPID_FILLCOLOR = "-510";
export const DISPID_FILLSTYLE = "-511";
export const DISPID_FONT = "-512";
export const DISPID_FORECOLOR = "-513";
export const DISPID_ENABLED = "-514";
export const DISPID_HWND = "-515";
export const DISPID_TABSTOP = "-516";
export const DISPID_TEXT = "-517";
export const DISPID_CAPTION = "-518";
export const DISPID_BORDERVISIBLE = "-519";
export const DISPID_APPEARANCE = "-520";
export const DISPID_MOUSEPOINTER = "-521";
export const DISPID_MOUSEICON = "-522";
export const DISPID_PICTURE = "-523";
export const DISPID_VALID = "-524";
export const DISPID_READYSTATE = "-525";
export const DISPID_LISTINDEX = "-526";
export const DISPID_SELECTED = "-527";
export const DISPID_LIST = "-528";
export const DISPID_COLUMN = "-529";
export const DISPID_LISTCOUNT = "-531";
export const DISPID_MULTISELECT = "-532";
export const DISPID_MAXLENGTH = "-533";
export const DISPID_PASSWORDCHAR = "-534";
export const DISPID_SCROLLBARS = "-535";
export const DISPID_WORDWRAP = "-536";
export const DISPID_MULTILINE = "-537";
export const DISPID_NUMBEROFROWS = "-538";
export const DISPID_NUMBEROFCOLUMNS = "-539";
export const DISPID_DISPLAYSTYLE = "-540";
export const DISPID_GROUPNAME = "-541";
export const DISPID_IMEMODE = "-542";
export const DISPID_ACCELERATOR = "-543";
export const DISPID_ENTERKEYBEHAVIOR = "-544";
export const DISPID_TABKEYBEHAVIOR = "-545";
export const DISPID_SELTEXT = "-546";
export const DISPID_SELSTART = "-547";
export const DISPID_SELLENGTH = "-548";
export const DISPID_REFRESH = "-550";
export const DISPID_DOCLICK = "-551";
export const DISPID_ABOUTBOX = "-552";
export const DISPID_ADDITEM = "-553";
export const DISPID_CLEAR = "-554";
export const DISPID_REMOVEITEM = "-555";
export const DISPID_CLICK = "-600";
export const DISPID_DBLCLICK = "-601";
export const DISPID_KEYDOWN = "-602";
export const DISPID_KEYPRESS = "-603";
export const DISPID_KEYUP = "-604";
export const DISPID_MOUSEDOWN = "-605";
export const DISPID_MOUSEMOVE = "-606";
export const DISPID_MOUSEUP = "-607";
export const DISPID_ERROREVENT = "-608";
export const DISPID_READYSTATECHANGE = "-609";
export const DISPID_CLICK_VALUE = "-610";
export const DISPID_RIGHTTOLEFT = "-611";
export const DISPID_TOPTOBOTTOM = "-612";
export const DISPID_THIS = "-613";
export const DISPID_AMBIENT_BACKCOLOR = "-701";
export const DISPID_AMBIENT_DISPLAYNAME = "-702";
export const DISPID_AMBIENT_FONT = "-703";
export const DISPID_AMBIENT_FORECOLOR = "-704";
export const DISPID_AMBIENT_LOCALEID = "-705";
export const DISPID_AMBIENT_MESSAGEREFLECT = "-706";
export const DISPID_AMBIENT_SCALEUNITS = "-707";
export const DISPID_AMBIENT_TEXTALIGN = "-708";
export const DISPID_AMBIENT_USERMODE = "-709";
export const DISPID_AMBIENT_UIDEAD = "-710";
export const DISPID_AMBIENT_SHOWGRABHANDLES = "-711";
export const DISPID_AMBIENT_SHOWHATCHING = "-712";
export const DISPID_AMBIENT_DISPLAYASDEFAULT = "-713";
export const DISPID_AMBIENT_SUPPORTSMNEMONICS = "-714";
export const DISPID_AMBIENT_AUTOCLIP = "-715";
export const DISPID_AMBIENT_APPEARANCE = "-716";
export const DISPID_AMBIENT_CODEPAGE = "-725";
export const DISPID_AMBIENT_PALETTE = "-726";
export const DISPID_AMBIENT_CHARSET = "-727";
export const DISPID_AMBIENT_TRANSFERPRIORITY = "-728";
export const DISPID_AMBIENT_RIGHTTOLEFT = "-732";
export const DISPID_AMBIENT_TOPTOBOTTOM = "-733";
export const DISPID_Name = "-800";
export const DISPID_Delete = "-801";
export const DISPID_Object = "-802";
export const DISPID_Parent = "-803";
export const DISPID_FONT_NAME = 0;
export const DISPID_FONT_SIZE = 2;
export const DISPID_FONT_BOLD = 3;
export const DISPID_FONT_ITALIC = 4;
export const DISPID_FONT_UNDER = 5;
export const DISPID_FONT_STRIKE = 6;
export const DISPID_FONT_WEIGHT = 7;
export const DISPID_FONT_CHARSET = 8;
export const DISPID_FONT_CHANGED = 9;
export const DISPID_PICT_HANDLE = 0;
export const DISPID_PICT_HPAL = 2;
export const DISPID_PICT_TYPE = 3;
export const DISPID_PICT_WIDTH = 4;
export const DISPID_PICT_HEIGHT = 5;
export const DISPID_PICT_RENDER = 6;
export const GC_WCH_SIBLING = 1;
export const TIFLAGS_EXTENDDISPATCHONLY = 1;
export const OLECMDERR_E_NOTSUPPORTED = "-2147221248";
export const MSOCMDERR_E_FIRST = "-2147221248";
export const MSOCMDERR_E_NOTSUPPORTED = "-2147221248";
export const MSOCMDERR_E_DISABLED = "-2147221247";
export const MSOCMDERR_E_NOHELP = "-2147221246";
export const MSOCMDERR_E_CANCELED = "-2147221245";
export const MSOCMDERR_E_UNKNOWNGROUP = "-2147221244";
export const OLECMD_TASKDLGID_ONBEFOREUNLOAD = 1;
export const OLECMDARGINDEX_SHOWPAGEACTIONMENU_HWND = 0;
export const OLECMDARGINDEX_SHOWPAGEACTIONMENU_X = 1;
export const OLECMDARGINDEX_SHOWPAGEACTIONMENU_Y = 2;
export const OLECMDARGINDEX_ACTIVEXINSTALL_PUBLISHER = 0;
export const OLECMDARGINDEX_ACTIVEXINSTALL_DISPLAYNAME = 1;
export const OLECMDARGINDEX_ACTIVEXINSTALL_CLSID = 2;
export const OLECMDARGINDEX_ACTIVEXINSTALL_INSTALLSCOPE = 3;
export const OLECMDARGINDEX_ACTIVEXINSTALL_SOURCEURL = 4;
export const INSTALL_SCOPE_INVALID = 0;
export const INSTALL_SCOPE_MACHINE = 1;
export const INSTALL_SCOPE_USER = 2;
export const MK_ALT = 32;
export const DROPEFFECT_NONE = 0;
export const DROPEFFECT_COPY = 1;
export const DROPEFFECT_MOVE = 2;
export const DROPEFFECT_LINK = 4;
export const DROPEFFECT_SCROLL = 2147483648;
export const DD_DEFSCROLLINSET = 11;
export const DD_DEFSCROLLDELAY = 50;
export const DD_DEFSCROLLINTERVAL = 50;
export const DD_DEFDRAGDELAY = 200;
export const DD_DEFDRAGMINDIST = 2;
export const OT_LINK = 1;
export const OT_EMBEDDED = 2;
export const OT_STATIC = 3;
export const OLEVERB_PRIMARY = 0;
export const OF_SET = 1;
export const OF_GET = 2;
export const OF_HANDLER = 4;
export const WIN32 = 100;
export const OLEIVERB_PRIMARY = 0;
export const OLEIVERB_SHOW = "-1";
export const OLEIVERB_OPEN = "-2";
export const OLEIVERB_HIDE = "-3";
export const OLEIVERB_UIACTIVATE = "-4";
export const OLEIVERB_INPLACEACTIVATE = "-5";
export const OLEIVERB_DISCARDUNDOSTATE = "-6";
export const EMBDHLP_INPROC_HANDLER = 0;
export const EMBDHLP_INPROC_SERVER = 1;
export const EMBDHLP_CREATENOW = 0;
export const EMBDHLP_DELAYCREATE = 65536;
export const OLECREATE_LEAVERUNNING = 1;
export const IDC_OLEUIHELP = 99;
export const IDC_IO_CREATENEW = 2100;
export const IDC_IO_CREATEFROMFILE = 2101;
export const IDC_IO_LINKFILE = 2102;
export const IDC_IO_OBJECTTYPELIST = 2103;
export const IDC_IO_DISPLAYASICON = 2104;
export const IDC_IO_CHANGEICON = 2105;
export const IDC_IO_FILE = 2106;
export const IDC_IO_FILEDISPLAY = 2107;
export const IDC_IO_RESULTIMAGE = 2108;
export const IDC_IO_RESULTTEXT = 2109;
export const IDC_IO_ICONDISPLAY = 2110;
export const IDC_IO_OBJECTTYPETEXT = 2111;
export const IDC_IO_FILETEXT = 2112;
export const IDC_IO_FILETYPE = 2113;
export const IDC_IO_INSERTCONTROL = 2114;
export const IDC_IO_ADDCONTROL = 2115;
export const IDC_IO_CONTROLTYPELIST = 2116;
export const IDC_PS_PASTE = 500;
export const IDC_PS_PASTELINK = 501;
export const IDC_PS_SOURCETEXT = 502;
export const IDC_PS_PASTELIST = 503;
export const IDC_PS_PASTELINKLIST = 504;
export const IDC_PS_DISPLAYLIST = 505;
export const IDC_PS_DISPLAYASICON = 506;
export const IDC_PS_ICONDISPLAY = 507;
export const IDC_PS_CHANGEICON = 508;
export const IDC_PS_RESULTIMAGE = 509;
export const IDC_PS_RESULTTEXT = 510;
export const IDC_CI_GROUP = 120;
export const IDC_CI_CURRENT = 121;
export const IDC_CI_CURRENTICON = 122;
export const IDC_CI_DEFAULT = 123;
export const IDC_CI_DEFAULTICON = 124;
export const IDC_CI_FROMFILE = 125;
export const IDC_CI_FROMFILEEDIT = 126;
export const IDC_CI_ICONLIST = 127;
export const IDC_CI_LABEL = 128;
export const IDC_CI_LABELEDIT = 129;
export const IDC_CI_BROWSE = 130;
export const IDC_CI_ICONDISPLAY = 131;
export const IDC_CV_OBJECTTYPE = 150;
export const IDC_CV_DISPLAYASICON = 152;
export const IDC_CV_CHANGEICON = 153;
export const IDC_CV_ACTIVATELIST = 154;
export const IDC_CV_CONVERTTO = 155;
export const IDC_CV_ACTIVATEAS = 156;
export const IDC_CV_RESULTTEXT = 157;
export const IDC_CV_CONVERTLIST = 158;
export const IDC_CV_ICONDISPLAY = 165;
export const IDC_EL_CHANGESOURCE = 201;
export const IDC_EL_AUTOMATIC = 202;
export const IDC_EL_CANCELLINK = 209;
export const IDC_EL_UPDATENOW = 210;
export const IDC_EL_OPENSOURCE = 211;
export const IDC_EL_MANUAL = 212;
export const IDC_EL_LINKSOURCE = 216;
export const IDC_EL_LINKTYPE = 217;
export const IDC_EL_LINKSLISTBOX = 206;
export const IDC_EL_COL1 = 220;
export const IDC_EL_COL2 = 221;
export const IDC_EL_COL3 = 222;
export const IDC_BZ_RETRY = 600;
export const IDC_BZ_ICON = 601;
export const IDC_BZ_MESSAGE1 = 602;
export const IDC_BZ_SWITCHTO = 604;
export const IDC_UL_METER = 1029;
export const IDC_UL_STOP = 1030;
export const IDC_UL_PERCENT = 1031;
export const IDC_UL_PROGRESS = 1032;
export const IDC_PU_LINKS = 900;
export const IDC_PU_TEXT = 901;
export const IDC_PU_CONVERT = 902;
export const IDC_PU_ICON = 908;
export const IDC_GP_OBJECTNAME = 1009;
export const IDC_GP_OBJECTTYPE = 1010;
export const IDC_GP_OBJECTSIZE = 1011;
export const IDC_GP_CONVERT = 1013;
export const IDC_GP_OBJECTICON = 1014;
export const IDC_GP_OBJECTLOCATION = 1022;
export const IDC_VP_PERCENT = 1000;
export const IDC_VP_CHANGEICON = 1001;
export const IDC_VP_EDITABLE = 1002;
export const IDC_VP_ASICON = 1003;
export const IDC_VP_RELATIVE = 1005;
export const IDC_VP_SPIN = 1006;
export const IDC_VP_SCALETXT = 1034;
export const IDC_VP_ICONDISPLAY = 1021;
export const IDC_VP_RESULTIMAGE = 1033;
export const IDC_LP_OPENSOURCE = 1006;
export const IDC_LP_UPDATENOW = 1007;
export const IDC_LP_BREAKLINK = 1008;
export const IDC_LP_LINKSOURCE = 1012;
export const IDC_LP_CHANGESOURCE = 1015;
export const IDC_LP_AUTOMATIC = 1016;
export const IDC_LP_MANUAL = 1017;
export const IDC_LP_DATE = 1018;
export const IDC_LP_TIME = 1019;
export const IDD_INSERTOBJECT = 1000;
export const IDD_CHANGEICON = 1001;
export const IDD_CONVERT = 1002;
export const IDD_PASTESPECIAL = 1003;
export const IDD_EDITLINKS = 1004;
export const IDD_BUSY = 1006;
export const IDD_UPDATELINKS = 1007;
export const IDD_CHANGESOURCE = 1009;
export const IDD_INSERTFILEBROWSE = 1010;
export const IDD_CHANGEICONBROWSE = 1011;
export const IDD_CONVERTONLY = 1012;
export const IDD_CHANGESOURCE4 = 1013;
export const IDD_GNRLPROPS = 1100;
export const IDD_VIEWPROPS = 1101;
export const IDD_LINKPROPS = 1102;
export const IDD_CONVERT4 = 1103;
export const IDD_CONVERTONLY4 = 1104;
export const IDD_EDITLINKS4 = 1105;
export const IDD_GNRLPROPS4 = 1106;
export const IDD_LINKPROPS4 = 1107;
export const IDD_PASTESPECIAL4 = 1108;
export const IDD_CANNOTUPDATELINK = 1008;
export const IDD_LINKSOURCEUNAVAILABLE = 1020;
export const IDD_SERVERNOTFOUND = 1023;
export const IDD_OUTOFMEMORY = 1024;
export const IDD_SERVERNOTREGW = 1021;
export const IDD_LINKTYPECHANGEDW = 1022;
export const IDD_SERVERNOTREGA = 1025;
export const IDD_LINKTYPECHANGEDA = 1026;
export const IDD_SERVERNOTREG = 1021;
export const IDD_LINKTYPECHANGED = 1022;
export const ID_BROWSE_CHANGEICON = 1;
export const ID_BROWSE_INSERTFILE = 2;
export const ID_BROWSE_ADDCONTROL = 3;
export const ID_BROWSE_CHANGESOURCE = 4;
export const OLEUI_FALSE = 0;
export const OLEUI_SUCCESS = 1;
export const OLEUI_OK = 1;
export const OLEUI_CANCEL = 2;
export const OLEUI_ERR_STANDARDMIN = 100;
export const OLEUI_ERR_OLEMEMALLOC = 100;
export const OLEUI_ERR_STRUCTURENULL = 101;
export const OLEUI_ERR_STRUCTUREINVALID = 102;
export const OLEUI_ERR_CBSTRUCTINCORRECT = 103;
export const OLEUI_ERR_HWNDOWNERINVALID = 104;
export const OLEUI_ERR_LPSZCAPTIONINVALID = 105;
export const OLEUI_ERR_LPFNHOOKINVALID = 106;
export const OLEUI_ERR_HINSTANCEINVALID = 107;
export const OLEUI_ERR_LPSZTEMPLATEINVALID = 108;
export const OLEUI_ERR_HRESOURCEINVALID = 109;
export const OLEUI_ERR_FINDTEMPLATEFAILURE = 110;
export const OLEUI_ERR_LOADTEMPLATEFAILURE = 111;
export const OLEUI_ERR_DIALOGFAILURE = 112;
export const OLEUI_ERR_LOCALMEMALLOC = 113;
export const OLEUI_ERR_GLOBALMEMALLOC = 114;
export const OLEUI_ERR_LOADSTRING = 115;
export const OLEUI_ERR_STANDARDMAX = 116;
export const IOF_SHOWHELP = 1;
export const IOF_SELECTCREATENEW = 2;
export const IOF_SELECTCREATEFROMFILE = 4;
export const IOF_CHECKLINK = 8;
export const IOF_CHECKDISPLAYASICON = 16;
export const IOF_CREATENEWOBJECT = 32;
export const IOF_CREATEFILEOBJECT = 64;
export const IOF_CREATELINKOBJECT = 128;
export const IOF_DISABLELINK = 256;
export const IOF_VERIFYSERVERSEXIST = 512;
export const IOF_DISABLEDISPLAYASICON = 1024;
export const IOF_HIDECHANGEICON = 2048;
export const IOF_SHOWINSERTCONTROL = 4096;
export const IOF_SELECTCREATECONTROL = 8192;
export const OLEUI_IOERR_LPSZFILEINVALID = 116;
export const OLEUI_IOERR_LPSZLABELINVALID = 117;
export const OLEUI_IOERR_HICONINVALID = 118;
export const OLEUI_IOERR_LPFORMATETCINVALID = 119;
export const OLEUI_IOERR_PPVOBJINVALID = 120;
export const OLEUI_IOERR_LPIOLECLIENTSITEINVALID = 121;
export const OLEUI_IOERR_LPISTORAGEINVALID = 122;
export const OLEUI_IOERR_SCODEHASERROR = 123;
export const OLEUI_IOERR_LPCLSIDEXCLUDEINVALID = 124;
export const OLEUI_IOERR_CCHFILEINVALID = 125;
export const PS_MAXLINKTYPES = 8;
export const PSF_SHOWHELP = 1;
export const PSF_SELECTPASTE = 2;
export const PSF_SELECTPASTELINK = 4;
export const PSF_CHECKDISPLAYASICON = 8;
export const PSF_DISABLEDISPLAYASICON = 16;
export const PSF_HIDECHANGEICON = 32;
export const PSF_STAYONCLIPBOARDCHANGE = 64;
export const PSF_NOREFRESHDATAOBJECT = 128;
export const OLEUI_IOERR_SRCDATAOBJECTINVALID = 116;
export const OLEUI_IOERR_ARRPASTEENTRIESINVALID = 117;
export const OLEUI_IOERR_ARRLINKTYPESINVALID = 118;
export const OLEUI_PSERR_CLIPBOARDCHANGED = 119;
export const OLEUI_PSERR_GETCLIPBOARDFAILED = 120;
export const OLEUI_ELERR_LINKCNTRNULL = 116;
export const OLEUI_ELERR_LINKCNTRINVALID = 117;
export const ELF_SHOWHELP = 1;
export const ELF_DISABLEUPDATENOW = 2;
export const ELF_DISABLEOPENSOURCE = 4;
export const ELF_DISABLECHANGESOURCE = 8;
export const ELF_DISABLECANCELLINK = 16;
export const CIF_SHOWHELP = 1;
export const CIF_SELECTCURRENT = 2;
export const CIF_SELECTDEFAULT = 4;
export const CIF_SELECTFROMFILE = 8;
export const CIF_USEICONEXE = 16;
export const OLEUI_CIERR_MUSTHAVECLSID = 116;
export const OLEUI_CIERR_MUSTHAVECURRENTMETAFILE = 117;
export const OLEUI_CIERR_SZICONEXEINVALID = 118;
export const CF_SHOWHELPBUTTON = 1;
export const CF_SETCONVERTDEFAULT = 2;
export const CF_SETACTIVATEDEFAULT = 4;
export const CF_SELECTCONVERTTO = 8;
export const CF_SELECTACTIVATEAS = 16;
export const CF_DISABLEDISPLAYASICON = 32;
export const CF_DISABLEACTIVATEAS = 64;
export const CF_HIDECHANGEICON = 128;
export const CF_CONVERTONLY = 256;
export const OLEUI_CTERR_CLASSIDINVALID = 117;
export const OLEUI_CTERR_DVASPECTINVALID = 118;
export const OLEUI_CTERR_CBFORMATINVALID = 119;
export const OLEUI_CTERR_HMETAPICTINVALID = 120;
export const OLEUI_CTERR_STRINGINVALID = 121;
export const BZ_DISABLECANCELBUTTON = 1;
export const BZ_DISABLESWITCHTOBUTTON = 2;
export const BZ_DISABLERETRYBUTTON = 4;
export const BZ_NOTRESPONDINGDIALOG = 8;
export const OLEUI_BZERR_HTASKINVALID = 116;
export const OLEUI_BZ_SWITCHTOSELECTED = 117;
export const OLEUI_BZ_RETRYSELECTED = 118;
export const OLEUI_BZ_CALLUNBLOCKED = 119;
export const CSF_SHOWHELP = 1;
export const CSF_VALIDSOURCE = 2;
export const CSF_ONLYGETSOURCE = 4;
export const CSF_EXPLORER = 8;
export const OLEUI_CSERR_LINKCNTRNULL = 116;
export const OLEUI_CSERR_LINKCNTRINVALID = 117;
export const OLEUI_CSERR_FROMNOTNULL = 118;
export const OLEUI_CSERR_TONOTNULL = 119;
export const OLEUI_CSERR_SOURCENULL = 120;
export const OLEUI_CSERR_SOURCEINVALID = 121;
export const OLEUI_CSERR_SOURCEPARSERROR = 122;
export const OLEUI_CSERR_SOURCEPARSEERROR = 122;
export const VPF_SELECTRELATIVE = 1;
export const VPF_DISABLERELATIVE = 2;
export const VPF_DISABLESCALE = 4;
export const OPF_OBJECTISLINK = 1;
export const OPF_NOFILLDEFAULT = 2;
export const OPF_SHOWHELP = 4;
export const OPF_DISABLECONVERT = 8;
export const OLEUI_OPERR_SUBPROPNULL = 116;
export const OLEUI_OPERR_SUBPROPINVALID = 117;
export const OLEUI_OPERR_PROPSHEETNULL = 118;
export const OLEUI_OPERR_PROPSHEETINVALID = 119;
export const OLEUI_OPERR_SUPPROP = 120;
export const OLEUI_OPERR_PROPSINVALID = 121;
export const OLEUI_OPERR_PAGESINCORRECT = 122;
export const OLEUI_OPERR_INVALIDPAGES = 123;
export const OLEUI_OPERR_NOTSUPPORTED = 124;
export const OLEUI_OPERR_DLGPROCNOTNULL = 125;
export const OLEUI_OPERR_LPARAMNOTZERO = 126;
export const OLEUI_GPERR_STRINGINVALID = 127;
export const OLEUI_GPERR_CLASSIDINVALID = 128;
export const OLEUI_GPERR_LPCLSIDEXCLUDEINVALID = 129;
export const OLEUI_GPERR_CBFORMATINVALID = 130;
export const OLEUI_VPERR_METAPICTINVALID = 131;
export const OLEUI_VPERR_DVASPECTINVALID = 132;
export const OLEUI_LPERR_LINKCNTRNULL = 133;
export const OLEUI_LPERR_LINKCNTRINVALID = 134;
export const OLEUI_OPERR_PROPERTYSHEET = 135;
export const OLEUI_OPERR_OBJINFOINVALID = 136;
export const OLEUI_OPERR_LINKINFOINVALID = 137;
export const OLEUI_QUERY_GETCLASSID = 65280;
export const OLEUI_QUERY_LINKBROKEN = 65281;
export const FADF_AUTO = 1;
export const FADF_STATIC = 2;
export const FADF_EMBEDDED = 4;
export const FADF_FIXEDSIZE = 16;
export const FADF_RECORD = 32;
export const FADF_HAVEIID = 64;
export const FADF_HAVEVARTYPE = 128;
export const FADF_BSTR = 256;
export const FADF_UNKNOWN = 512;
export const FADF_DISPATCH = 1024;
export const FADF_VARIANT = 2048;
export const FADF_RESERVED = 61448;
export const PARAMFLAG_NONE = 0;
export const PARAMFLAG_FIN = 1;
export const PARAMFLAG_FOUT = 2;
export const PARAMFLAG_FLCID = 4;
export const PARAMFLAG_FRETVAL = 8;
export const PARAMFLAG_FOPT = 16;
export const PARAMFLAG_FHASDEFAULT = 32;
export const PARAMFLAG_FHASCUSTDATA = 64;
export const IDLFLAG_NONE = 0;
export const IDLFLAG_FIN = 1;
export const IDLFLAG_FOUT = 2;
export const IDLFLAG_FLCID = 4;
export const IDLFLAG_FRETVAL = 8;
export const IMPLTYPEFLAG_FDEFAULT = 1;
export const IMPLTYPEFLAG_FSOURCE = 2;
export const IMPLTYPEFLAG_FRESTRICTED = 4;
export const IMPLTYPEFLAG_FDEFAULTVTABLE = 8;
export const DISPID_UNKNOWN = "-1";
export const DISPID_VALUE = 0;
export const DISPID_PROPERTYPUT = "-3";
export const DISPID_NEWENUM = "-4";
export const DISPID_EVALUATE = "-5";
export const DISPID_CONSTRUCTOR = "-6";
export const DISPID_DESTRUCTOR = "-7";
export const DISPID_COLLECT = "-8";
export const STDOLE_MAJORVERNUM = 1;
export const STDOLE_MINORVERNUM = 0;
export const STDOLE_LCID = 0;
export const STDOLE2_MAJORVERNUM = 2;
export const STDOLE2_MINORVERNUM = 0;
export const STDOLE2_LCID = 0;
export const VARIANT_NOVALUEPROP = 1;
export const VARIANT_ALPHABOOL = 2;
export const VARIANT_NOUSEROVERRIDE = 4;
export const VARIANT_CALENDAR_HIJRI = 8;
export const VARIANT_LOCALBOOL = 16;
export const VARIANT_CALENDAR_THAI = 32;
export const VARIANT_CALENDAR_GREGORIAN = 64;
export const VARIANT_USE_NLS = 128;
export const LOCALE_USE_NLS = 268435456;
export const VTDATEGRE_MAX = 2958465;
export const VTDATEGRE_MIN = "-657434";
export const NUMPRS_LEADING_WHITE = 1;
export const NUMPRS_TRAILING_WHITE = 2;
export const NUMPRS_LEADING_PLUS = 4;
export const NUMPRS_TRAILING_PLUS = 8;
export const NUMPRS_LEADING_MINUS = 16;
export const NUMPRS_TRAILING_MINUS = 32;
export const NUMPRS_HEX_OCT = 64;
export const NUMPRS_PARENS = 128;
export const NUMPRS_DECIMAL = 256;
export const NUMPRS_THOUSANDS = 512;
export const NUMPRS_CURRENCY = 1024;
export const NUMPRS_EXPONENT = 2048;
export const NUMPRS_USE_ALL = 4096;
export const NUMPRS_STD = 8191;
export const NUMPRS_NEG = 65536;
export const NUMPRS_INEXACT = 131072;
export const VARCMP_LT = 0;
export const VARCMP_EQ = 1;
export const VARCMP_GT = 2;
export const VARCMP_NULL = 3;
export const MEMBERID_NIL = "-1";
export const ID_DEFAULTINST = "-2";
export const DISPATCH_METHOD = 1;
export const DISPATCH_PROPERTYGET = 2;
export const DISPATCH_PROPERTYPUT = 4;
export const DISPATCH_PROPERTYPUTREF = 8;
export const LOAD_TLB_AS_32BIT = 32;
export const LOAD_TLB_AS_64BIT = 64;
export const ACTIVEOBJECT_STRONG = 0;
export const ACTIVEOBJECT_WEAK = 1;
export const DISPATCH_CONSTRUCT = 16384;
export const DISPID_STARTENUM = "-1";
export const UPDFCACHE_ALL = 2147483647;
export const UPDFCACHE_ALLBUTNODATACACHE = 2147483646;
export const UPDFCACHE_NORMALCACHE = 8;
export const UPDFCACHE_IFBLANK = 16;
export const UPDFCACHE_ONLYIFBLANK = 2147483648;
export const UPDFCACHE_NODATACACHE = 1;
export const UPDFCACHE_ONSAVECACHE = 2;
export const UPDFCACHE_ONSTOPCACHE = 4;
export const UPDFCACHE_IFBLANKORONSAVECACHE = 18;
export const GCW_WCH_SIBLING = 1;
export const GC_WCH_CONTAINER = 2;
export const GC_WCH_CONTAINED = 3;
export const GC_WCH_ALL = 4;
export const GC_WCH_FREVERSEDIR = 134217728;
export const GC_WCH_FONLYAFTER = 268435456;
export const GC_WCH_FONLYBEFORE = 536870912;
export const GC_WCH_FSELECTED = 1073741824;
export const MULTICLASSINFO_GETTYPEINFO = 1;
export const MULTICLASSINFO_GETNUMRESERVEDDISPIDS = 2;
export const MULTICLASSINFO_GETIIDPRIMARY = 4;
export const MULTICLASSINFO_GETIIDSOURCE = 8;
export const VT_EMPTY = 0;
export const VT_NULL = 1;
export const VT_I2 = 2;
export const VT_I4 = 3;
export const VT_R4 = 4;
export const VT_R8 = 5;
export const VT_CY = 6;
export const VT_DATE = 7;
export const VT_BSTR = 8;
export const VT_DISPATCH = 9;
export const VT_ERROR = 10;
export const VT_BOOL = 11;
export const VT_VARIANT = 12;
export const VT_UNKNOWN = 13;
export const VT_DECIMAL = 14;
export const VT_I1 = 16;
export const VT_UI1 = 17;
export const VT_UI2 = 18;
export const VT_UI4 = 19;
export const VT_I8 = 20;
export const VT_UI8 = 21;
export const VT_INT = 22;
export const VT_UINT = 23;
export const VT_VOID = 24;
export const VT_HRESULT = 25;
export const VT_PTR = 26;
export const VT_SAFEARRAY = 27;
export const VT_CARRAY = 28;
export const VT_USERDEFINED = 29;
export const VT_LPSTR = 30;
export const VT_LPWSTR = 31;
export const VT_RECORD = 36;
export const VT_INT_PTR = 37;
export const VT_UINT_PTR = 38;
export const VT_FILETIME = 64;
export const VT_BLOB = 65;
export const VT_STREAM = 66;
export const VT_STORAGE = 67;
export const VT_STREAMED_OBJECT = 68;
export const VT_STORED_OBJECT = 69;
export const VT_BLOB_OBJECT = 70;
export const VT_CF = 71;
export const VT_CLSID = 72;
export const VT_VERSIONED_STREAM = 73;
export const VT_BSTR_BLOB = 4095;
export const VT_VECTOR = 4096;
export const VT_ARRAY = 8192;
export const VT_BYREF = 16384;
export const VT_RESERVED = 32768;
export const VT_ILLEGAL = 65535;
export const VT_ILLEGALMASKED = 4095;
export const VT_TYPEMASK = 4095;
export const SF_ERROR = 10;
export const SF_I1 = 16;
export const SF_I2 = 2;
export const SF_I4 = 3;
export const SF_I8 = 20;
export const SF_BSTR = 8;
export const SF_UNKNOWN = 13;
export const SF_DISPATCH = 9;
export const SF_VARIANT = 12;
export const SF_RECORD = 36;
export const SF_HAVEIID = 32781;
export const TYPEFLAG_FAPPOBJECT = 1;
export const TYPEFLAG_FCANCREATE = 2;
export const TYPEFLAG_FLICENSED = 4;
export const TYPEFLAG_FPREDECLID = 8;
export const TYPEFLAG_FHIDDEN = 16;
export const TYPEFLAG_FCONTROL = 32;
export const TYPEFLAG_FDUAL = 64;
export const TYPEFLAG_FNONEXTENSIBLE = 128;
export const TYPEFLAG_FOLEAUTOMATION = 256;
export const TYPEFLAG_FRESTRICTED = 512;
export const TYPEFLAG_FAGGREGATABLE = 1024;
export const TYPEFLAG_FREPLACEABLE = 2048;
export const TYPEFLAG_FDISPATCHABLE = 4096;
export const TYPEFLAG_FREVERSEBIND = 8192;
export const TYPEFLAG_FPROXY = 16384;
export const FUNCFLAG_FRESTRICTED = 1;
export const FUNCFLAG_FSOURCE = 2;
export const FUNCFLAG_FBINDABLE = 4;
export const FUNCFLAG_FREQUESTEDIT = 8;
export const FUNCFLAG_FDISPLAYBIND = 16;
export const FUNCFLAG_FDEFAULTBIND = 32;
export const FUNCFLAG_FHIDDEN = 64;
export const FUNCFLAG_FUSESGETLASTERROR = 128;
export const FUNCFLAG_FDEFAULTCOLLELEM = 256;
export const FUNCFLAG_FUIDEFAULT = 512;
export const FUNCFLAG_FNONBROWSABLE = 1024;
export const FUNCFLAG_FREPLACEABLE = 2048;
export const FUNCFLAG_FIMMEDIATEBIND = 4096;
export const VARFLAG_FREADONLY = 1;
export const VARFLAG_FSOURCE = 2;
export const VARFLAG_FBINDABLE = 4;
export const VARFLAG_FREQUESTEDIT = 8;
export const VARFLAG_FDISPLAYBIND = 16;
export const VARFLAG_FDEFAULTBIND = 32;
export const VARFLAG_FHIDDEN = 64;
export const VARFLAG_FRESTRICTED = 128;
export const VARFLAG_FDEFAULTCOLLELEM = 256;
export const VARFLAG_FUIDEFAULT = 512;
export const VARFLAG_FNONBROWSABLE = 1024;
export const VARFLAG_FREPLACEABLE = 2048;
export const VARFLAG_FIMMEDIATEBIND = 4096;
export const LIBFLAG_FRESTRICTED = 1;
export const LIBFLAG_FCONTROL = 2;
export const LIBFLAG_FHIDDEN = 4;
export const LIBFLAG_FHASDISKIMAGE = 8;
export const CHANGEKIND_ADDMEMBER = 0;
export const CHANGEKIND_DELETEMEMBER = 1;
export const CHANGEKIND_SETNAMES = 2;
export const CHANGEKIND_SETDOCUMENTATION = 3;
export const CHANGEKIND_GENERAL = 4;
export const CHANGEKIND_INVALIDATE = 5;
export const CHANGEKIND_CHANGEFAILED = 6;
export const CHANGEKIND_MAX = 7;
export const DISCARDCACHE_SAVEIFDIRTY = 0;
export const DISCARDCACHE_NOSAVE = 1;
export const OLEGETMONIKER_ONLYIFTHERE = 1;
export const OLEGETMONIKER_FORCEASSIGN = 2;
export const OLEGETMONIKER_UNASSIGN = 3;
export const OLEGETMONIKER_TEMPFORUSER = 4;
export const OLEWHICHMK_CONTAINER = 1;
export const OLEWHICHMK_OBJREL = 2;
export const OLEWHICHMK_OBJFULL = 3;
export const USERCLASSTYPE_FULL = 1;
export const USERCLASSTYPE_SHORT = 2;
export const USERCLASSTYPE_APPNAME = 3;
export const OLEMISC_RECOMPOSEONRESIZE = 1;
export const OLEMISC_ONLYICONIC = 2;
export const OLEMISC_INSERTNOTREPLACE = 4;
export const OLEMISC_STATIC = 8;
export const OLEMISC_CANTLINKINSIDE = 16;
export const OLEMISC_CANLINKBYOLE1 = 32;
export const OLEMISC_ISLINKOBJECT = 64;
export const OLEMISC_INSIDEOUT = 128;
export const OLEMISC_ACTIVATEWHENVISIBLE = 256;
export const OLEMISC_RENDERINGISDEVICEINDEPENDENT = 512;
export const OLEMISC_INVISIBLEATRUNTIME = 1024;
export const OLEMISC_ALWAYSRUN = 2048;
export const OLEMISC_ACTSLIKEBUTTON = 4096;
export const OLEMISC_ACTSLIKELABEL = 8192;
export const OLEMISC_NOUIACTIVATE = 16384;
export const OLEMISC_ALIGNABLE = 32768;
export const OLEMISC_SIMPLEFRAME = 65536;
export const OLEMISC_SETCLIENTSITEFIRST = 131072;
export const OLEMISC_IMEMODE = 262144;
export const OLEMISC_IGNOREACTIVATEWHENVISIBLE = 524288;
export const OLEMISC_WANTSTOMENUMERGE = 1048576;
export const OLEMISC_SUPPORTSMULTILEVELUNDO = 2097152;
export const OLECLOSE_SAVEIFDIRTY = 0;
export const OLECLOSE_NOSAVE = 1;
export const OLECLOSE_PROMPTSAVE = 2;
export const OLERENDER_NONE = 0;
export const OLERENDER_DRAW = 1;
export const OLERENDER_FORMAT = 2;
export const OLERENDER_ASIS = 3;
export const OLEUPDATE_ALWAYS = 1;
export const OLEUPDATE_ONCALL = 3;
export const OLELINKBIND_EVENIFCLASSDIFF = 1;
export const BINDSPEED_INDEFINITE = 1;
export const BINDSPEED_MODERATE = 2;
export const BINDSPEED_IMMEDIATE = 3;
export const OLECONTF_EMBEDDINGS = 1;
export const OLECONTF_LINKS = 2;
export const OLECONTF_OTHERS = 4;
export const OLECONTF_ONLYUSER = 8;
export const OLECONTF_ONLYIFRUNNING = 16;
export const OLEVERBATTRIB_NEVERDIRTIES = 1;
export const OLEVERBATTRIB_ONCONTAINERMENU = 2;
export const REGKIND_DEFAULT = 0;
export const REGKIND_REGISTER = 1;
export const REGKIND_NONE = 2;
export const CC_FASTCALL = 0;
export const CC_CDECL = 1;
export const CC_MSCPASCAL = 2;
export const CC_PASCAL = 2;
export const CC_MACPASCAL = 3;
export const CC_STDCALL = 4;
export const CC_FPFASTCALL = 5;
export const CC_SYSCALL = 6;
export const CC_MPWCDECL = 7;
export const CC_MPWPASCAL = 8;
export const CC_MAX = 9;
export const UAS_NORMAL = 0;
export const UAS_BLOCKED = 1;
export const UAS_NOPARENTENABLE = 2;
export const UAS_MASK = 3;
export const READYSTATE_UNINITIALIZED = 0;
export const READYSTATE_LOADING = 1;
export const READYSTATE_LOADED = 2;
export const READYSTATE_INTERACTIVE = 3;
export const READYSTATE_COMPLETE = 4;
export const GUIDKIND_DEFAULT_SOURCE_DISP_IID = 1;
export const CTRLINFO_EATS_RETURN = 1;
export const CTRLINFO_EATS_ESCAPE = 2;
export const XFORMCOORDS_POSITION = 1;
export const XFORMCOORDS_SIZE = 2;
export const XFORMCOORDS_HIMETRICTOCONTAINER = 4;
export const XFORMCOORDS_CONTAINERTOHIMETRIC = 8;
export const XFORMCOORDS_EVENTCOMPAT = 16;
export const PROPPAGESTATUS_DIRTY = 1;
export const PROPPAGESTATUS_VALIDATE = 2;
export const PROPPAGESTATUS_CLEAN = 4;
export const PICTURE_SCALABLE = 1;
export const PICTURE_TRANSPARENT = 2;
export const ACTIVATE_WINDOWLESS = 1;
export const OLEDC_NODRAW = 1;
export const OLEDC_PAINTBKGND = 2;
export const OLEDC_OFFSCREEN = 4;
export const VIEWSTATUS_OPAQUE = 1;
export const VIEWSTATUS_SOLIDBKGND = 2;
export const VIEWSTATUS_DVASPECTOPAQUE = 4;
export const VIEWSTATUS_DVASPECTTRANSPARENT = 8;
export const VIEWSTATUS_SURFACE = 16;
export const VIEWSTATUS_3DSURFACE = 32;
export const HITRESULT_OUTSIDE = 0;
export const HITRESULT_TRANSPARENT = 1;
export const HITRESULT_CLOSE = 2;
export const HITRESULT_HIT = 3;
export const DVASPECT_OPAQUE = 16;
export const DVASPECT_TRANSPARENT = 32;
export const DVEXTENT_CONTENT = 0;
export const DVEXTENT_INTEGRAL = 1;
export const DVASPECTINFOFLAG_CANOPTIMIZE = 1;
export const POINTERINACTIVE_ACTIVATEONENTRY = 1;
export const POINTERINACTIVE_DEACTIVATEONLEAVE = 2;
export const POINTERINACTIVE_ACTIVATEONDRAG = 4;
export const PROPBAG2_TYPE_UNDEFINED = 0;
export const PROPBAG2_TYPE_DATA = 1;
export const PROPBAG2_TYPE_URL = 2;
export const PROPBAG2_TYPE_OBJECT = 3;
export const PROPBAG2_TYPE_STREAM = 4;
export const PROPBAG2_TYPE_STORAGE = 5;
export const PROPBAG2_TYPE_MONIKER = 6;
export const QACONTAINER_SHOWHATCHING = 1;
export const QACONTAINER_SHOWGRABHANDLES = 2;
export const QACONTAINER_USERMODE = 4;
export const QACONTAINER_DISPLAYASDEFAULT = 8;
export const QACONTAINER_UIDEAD = 16;
export const QACONTAINER_AUTOCLIP = 32;
export const QACONTAINER_MESSAGEREFLECT = 64;
export const QACONTAINER_SUPPORTSMNEMONICS = 128;
export const triUnchecked = 0;
export const triChecked = 1;
export const triGray = 2;
export const DOCMISC_CANCREATEMULTIPLEVIEWS = 1;
export const DOCMISC_SUPPORTCOMPLEXRECTANGLES = 2;
export const DOCMISC_CANTOPENEDIT = 4;
export const DOCMISC_NOFILESUPPORT = 8;
export const PRINTFLAG_MAYBOTHERUSER = 1;
export const PRINTFLAG_PROMPTUSER = 2;
export const PRINTFLAG_USERMAYCHANGEPRINTER = 4;
export const PRINTFLAG_RECOMPOSETODEVICE = 8;
export const PRINTFLAG_DONTACTUALLYPRINT = 16;
export const PRINTFLAG_FORCEPROPERTIES = 32;
export const PRINTFLAG_PRINTTOFILE = 64;
export const OLECMDF_SUPPORTED = 1;
export const OLECMDF_ENABLED = 2;
export const OLECMDF_LATCHED = 4;
export const OLECMDF_NINCHED = 8;
export const OLECMDF_INVISIBLE = 16;
export const OLECMDF_DEFHIDEONCTXTMENU = 32;
export const OLECMDTEXTF_NONE = 0;
export const OLECMDTEXTF_NAME = 1;
export const OLECMDTEXTF_STATUS = 2;
export const OLECMDEXECOPT_DODEFAULT = 0;
export const OLECMDEXECOPT_PROMPTUSER = 1;
export const OLECMDEXECOPT_DONTPROMPTUSER = 2;
export const OLECMDEXECOPT_SHOWHELP = 3;
export const OLECMDID_OPEN = 1;
export const OLECMDID_NEW = 2;
export const OLECMDID_SAVE = 3;
export const OLECMDID_SAVEAS = 4;
export const OLECMDID_SAVECOPYAS = 5;
export const OLECMDID_PRINT = 6;
export const OLECMDID_PRINTPREVIEW = 7;
export const OLECMDID_PAGESETUP = 8;
export const OLECMDID_SPELL = 9;
export const OLECMDID_PROPERTIES = 10;
export const OLECMDID_CUT = 11;
export const OLECMDID_COPY = 12;
export const OLECMDID_PASTE = 13;
export const OLECMDID_PASTESPECIAL = 14;
export const OLECMDID_UNDO = 15;
export const OLECMDID_REDO = 16;
export const OLECMDID_SELECTALL = 17;
export const OLECMDID_CLEARSELECTION = 18;
export const OLECMDID_ZOOM = 19;
export const OLECMDID_GETZOOMRANGE = 20;
export const OLECMDID_UPDATECOMMANDS = 21;
export const OLECMDID_REFRESH = 22;
export const OLECMDID_STOP = 23;
export const OLECMDID_HIDETOOLBARS = 24;
export const OLECMDID_SETPROGRESSMAX = 25;
export const OLECMDID_SETPROGRESSPOS = 26;
export const OLECMDID_SETPROGRESSTEXT = 27;
export const OLECMDID_SETTITLE = 28;
export const OLECMDID_SETDOWNLOADSTATE = 29;
export const OLECMDID_STOPDOWNLOAD = 30;
export const OLECMDID_ONTOOLBARACTIVATED = 31;
export const OLECMDID_FIND = 32;
export const OLECMDID_DELETE = 33;
export const OLECMDID_HTTPEQUIV = 34;
export const OLECMDID_HTTPEQUIV_DONE = 35;
export const OLECMDID_ENABLE_INTERACTION = 36;
export const OLECMDID_ONUNLOAD = 37;
export const OLECMDID_PROPERTYBAG2 = 38;
export const OLECMDID_PREREFRESH = 39;
export const OLECMDID_SHOWSCRIPTERROR = 40;
export const OLECMDID_SHOWMESSAGE = 41;
export const OLECMDID_SHOWFIND = 42;
export const OLECMDID_SHOWPAGESETUP = 43;
export const OLECMDID_SHOWPRINT = 44;
export const OLECMDID_CLOSE = 45;
export const OLECMDID_ALLOWUILESSSAVEAS = 46;
export const OLECMDID_DONTDOWNLOADCSS = 47;
export const OLECMDID_UPDATEPAGESTATUS = 48;
export const OLECMDID_PRINT2 = 49;
export const OLECMDID_PRINTPREVIEW2 = 50;
export const OLECMDID_SETPRINTTEMPLATE = 51;
export const OLECMDID_GETPRINTTEMPLATE = 52;
export const OLECMDID_PAGEACTIONBLOCKED = 55;
export const OLECMDID_PAGEACTIONUIQUERY = 56;
export const OLECMDID_FOCUSVIEWCONTROLS = 57;
export const OLECMDID_FOCUSVIEWCONTROLSQUERY = 58;
export const OLECMDID_SHOWPAGEACTIONMENU = 59;
export const OLECMDID_ADDTRAVELENTRY = 60;
export const OLECMDID_UPDATETRAVELENTRY = 61;
export const OLECMDID_UPDATEBACKFORWARDSTATE = 62;
export const OLECMDID_OPTICAL_ZOOM = 63;
export const OLECMDID_OPTICAL_GETZOOMRANGE = 64;
export const OLECMDID_WINDOWSTATECHANGED = 65;
export const OLECMDID_ACTIVEXINSTALLSCOPE = 66;
export const OLECMDID_UPDATETRAVELENTRY_DATARECOVERY = 67;
export const OLECMDID_SHOWTASKDLG = 68;
export const OLECMDID_POPSTATEEVENT = 69;
export const OLECMDID_VIEWPORT_MODE = 70;
export const OLECMDID_LAYOUT_VIEWPORT_WIDTH = 71;
export const OLECMDID_VISUAL_VIEWPORT_EXCLUDE_BOTTOM = 72;
export const OLECMDID_USER_OPTICAL_ZOOM = 73;
export const OLECMDID_PAGEAVAILABLE = 74;
export const OLECMDID_GETUSERSCALABLE = 75;
export const OLECMDID_UPDATE_CARET = 76;
export const OLECMDID_ENABLE_VISIBILITY = 77;
export const OLECMDID_MEDIA_PLAYBACK = 78;
export const OLECMDID_SETFAVICON = 79;
export const OLECMDID_SET_HOST_FULLSCREENMODE = 80;
export const OLECMDID_EXITFULLSCREEN = 81;
export const OLECMDID_SCROLLCOMPLETE = 82;
export const OLECMDID_ONBEFOREUNLOAD = 83;
export const OLECMDID_SHOWMESSAGE_BLOCKABLE = 84;
export const OLECMDID_SHOWTASKDLG_BLOCKABLE = 85;
export const MEDIAPLAYBACK_RESUME = 0;
export const MEDIAPLAYBACK_PAUSE = 1;
export const MEDIAPLAYBACK_PAUSE_AND_SUSPEND = 2;
export const MEDIAPLAYBACK_RESUME_FROM_SUSPEND = 3;
export const IGNOREMIME_PROMPT = 1;
export const IGNOREMIME_TEXT = 2;
export const WPCSETTING_LOGGING_ENABLED = 1;
export const WPCSETTING_FILEDOWNLOAD_BLOCKED = 2;
export const OLECMDIDF_REFRESH_NORMAL = 0;
export const OLECMDIDF_REFRESH_IFEXPIRED = 1;
export const OLECMDIDF_REFRESH_CONTINUE = 2;
export const OLECMDIDF_REFRESH_COMPLETELY = 3;
export const OLECMDIDF_REFRESH_NO_CACHE = 4;
export const OLECMDIDF_REFRESH_RELOAD = 5;
export const OLECMDIDF_REFRESH_LEVELMASK = 255;
export const OLECMDIDF_REFRESH_CLEARUSERINPUT = 4096;
export const OLECMDIDF_REFRESH_PROMPTIFOFFLINE = 8192;
export const OLECMDIDF_REFRESH_THROUGHSCRIPT = 16384;
export const OLECMDIDF_REFRESH_SKIPBEFOREUNLOADEVENT = 32768;
export const OLECMDIDF_REFRESH_PAGEACTION_ACTIVEXINSTALL = 65536;
export const OLECMDIDF_REFRESH_PAGEACTION_FILEDOWNLOAD = 131072;
export const OLECMDIDF_REFRESH_PAGEACTION_LOCALMACHINE = 262144;
export const OLECMDIDF_REFRESH_PAGEACTION_POPUPWINDOW = 524288;
export const OLECMDIDF_REFRESH_PAGEACTION_PROTLOCKDOWNLOCALMACHINE = 1048576;
export const OLECMDIDF_REFRESH_PAGEACTION_PROTLOCKDOWNTRUSTED = 2097152;
export const OLECMDIDF_REFRESH_PAGEACTION_PROTLOCKDOWNINTRANET = 4194304;
export const OLECMDIDF_REFRESH_PAGEACTION_PROTLOCKDOWNINTERNET = 8388608;
export const OLECMDIDF_REFRESH_PAGEACTION_PROTLOCKDOWNRESTRICTED = 16777216;
export const OLECMDIDF_REFRESH_PAGEACTION_MIXEDCONTENT = 33554432;
export const OLECMDIDF_REFRESH_PAGEACTION_INVALID_CERT = 67108864;
export const OLECMDIDF_REFRESH_PAGEACTION_ALLOW_VERSION = 134217728;
export const OLECMDIDF_PAGEACTION_FILEDOWNLOAD = 1;
export const OLECMDIDF_PAGEACTION_ACTIVEXINSTALL = 2;
export const OLECMDIDF_PAGEACTION_ACTIVEXTRUSTFAIL = 4;
export const OLECMDIDF_PAGEACTION_ACTIVEXUSERDISABLE = 8;
export const OLECMDIDF_PAGEACTION_ACTIVEXDISALLOW = 16;
export const OLECMDIDF_PAGEACTION_ACTIVEXUNSAFE = 32;
export const OLECMDIDF_PAGEACTION_POPUPWINDOW = 64;
export const OLECMDIDF_PAGEACTION_LOCALMACHINE = 128;
export const OLECMDIDF_PAGEACTION_MIMETEXTPLAIN = 256;
export const OLECMDIDF_PAGEACTION_SCRIPTNAVIGATE = 512;
export const OLECMDIDF_PAGEACTION_SCRIPTNAVIGATE_ACTIVEXINSTALL = 512;
export const OLECMDIDF_PAGEACTION_PROTLOCKDOWNLOCALMACHINE = 1024;
export const OLECMDIDF_PAGEACTION_PROTLOCKDOWNTRUSTED = 2048;
export const OLECMDIDF_PAGEACTION_PROTLOCKDOWNINTRANET = 4096;
export const OLECMDIDF_PAGEACTION_PROTLOCKDOWNINTERNET = 8192;
export const OLECMDIDF_PAGEACTION_PROTLOCKDOWNRESTRICTED = 16384;
export const OLECMDIDF_PAGEACTION_PROTLOCKDOWNDENY = 32768;
export const OLECMDIDF_PAGEACTION_POPUPALLOWED = 65536;
export const OLECMDIDF_PAGEACTION_SCRIPTPROMPT = 131072;
export const OLECMDIDF_PAGEACTION_ACTIVEXUSERAPPROVAL = 262144;
export const OLECMDIDF_PAGEACTION_MIXEDCONTENT = 524288;
export const OLECMDIDF_PAGEACTION_INVALID_CERT = 1048576;
export const OLECMDIDF_PAGEACTION_INTRANETZONEREQUEST = 2097152;
export const OLECMDIDF_PAGEACTION_XSSFILTERED = 4194304;
export const OLECMDIDF_PAGEACTION_SPOOFABLEIDNHOST = 8388608;
export const OLECMDIDF_PAGEACTION_ACTIVEX_EPM_INCOMPATIBLE = 16777216;
export const OLECMDIDF_PAGEACTION_SCRIPTNAVIGATE_ACTIVEXUSERAPPROVAL = 33554432;
export const OLECMDIDF_PAGEACTION_WPCBLOCKED = 67108864;
export const OLECMDIDF_PAGEACTION_WPCBLOCKED_ACTIVEX = 134217728;
export const OLECMDIDF_PAGEACTION_EXTENSION_COMPAT_BLOCKED = 268435456;
export const OLECMDIDF_PAGEACTION_NORESETACTIVEX = 536870912;
export const OLECMDIDF_PAGEACTION_GENERIC_STATE = 1073741824;
export const OLECMDIDF_PAGEACTION_RESET = "-2147483648";
export const OLECMDIDF_BROWSERSTATE_EXTENSIONSOFF = 1;
export const OLECMDIDF_BROWSERSTATE_IESECURITY = 2;
export const OLECMDIDF_BROWSERSTATE_PROTECTEDMODE_OFF = 4;
export const OLECMDIDF_BROWSERSTATE_RESET = 8;
export const OLECMDIDF_BROWSERSTATE_REQUIRESACTIVEX = 16;
export const OLECMDIDF_BROWSERSTATE_DESKTOPHTMLDIALOG = 32;
export const OLECMDIDF_BROWSERSTATE_BLOCKEDVERSION = 64;
export const OLECMDIDF_OPTICAL_ZOOM_NOPERSIST = 1;
export const OLECMDIDF_OPTICAL_ZOOM_NOLAYOUT = 16;
export const OLECMDIDF_OPTICAL_ZOOM_NOTRANSIENT = 32;
export const OLECMDIDF_OPTICAL_ZOOM_RELOADFORNEWTAB = 64;
export const PAGEACTION_UI_DEFAULT = 0;
export const PAGEACTION_UI_MODAL = 1;
export const PAGEACTION_UI_MODELESS = 2;
export const PAGEACTION_UI_SILENT = 3;
export const OLECMDIDF_WINDOWSTATE_USERVISIBLE = 1;
export const OLECMDIDF_WINDOWSTATE_ENABLED = 2;
export const OLECMDIDF_WINDOWSTATE_USERVISIBLE_VALID = 65536;
export const OLECMDIDF_WINDOWSTATE_ENABLED_VALID = 131072;
export const OLECMDIDF_VIEWPORTMODE_FIXED_LAYOUT_WIDTH = 1;
export const OLECMDIDF_VIEWPORTMODE_EXCLUDE_VISUAL_BOTTOM = 2;
export const OLECMDIDF_VIEWPORTMODE_FIXED_LAYOUT_WIDTH_VALID = 65536;
export const OLECMDIDF_VIEWPORTMODE_EXCLUDE_VISUAL_BOTTOM_VALID = 131072;
export const OLEUIPASTE_ENABLEICON = 2048;
export const OLEUIPASTE_PASTEONLY = 0;
export const OLEUIPASTE_PASTE = 512;
export const OLEUIPASTE_LINKANYTYPE = 1024;
export const OLEUIPASTE_LINKTYPE1 = 1;
export const OLEUIPASTE_LINKTYPE2 = 2;
export const OLEUIPASTE_LINKTYPE3 = 4;
export const OLEUIPASTE_LINKTYPE4 = 8;
export const OLEUIPASTE_LINKTYPE5 = 16;
export const OLEUIPASTE_LINKTYPE6 = 32;
export const OLEUIPASTE_LINKTYPE7 = 64;
export const OLEUIPASTE_LINKTYPE8 = 128;
export const SYS_WIN16 = 0;
export const SYS_WIN32 = 1;
export const SYS_MAC = 2;
export const SYS_WIN64 = 3;

// Structs

/**
 * Windows.Win32.System.Ole._wireSAFEARR_BSTR (size: 16)
 */
export interface _wireSAFEARR_BSTR {
  /** u32 */
  Size: number;
  /** ptr */
  aBstr: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_wireSAFEARR_BSTR = 16;

export function alloc_wireSAFEARR_BSTR(data?: Partial<_wireSAFEARR_BSTR>): Uint8Array {
  const buf = new Uint8Array(sizeof_wireSAFEARR_BSTR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.aBstr !== undefined) view.setBigUint64(8, data.aBstr === null ? 0n : BigInt(util.toPointer(data.aBstr)), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole._wireSAFEARR_UNKNOWN (size: 16)
 */
export interface _wireSAFEARR_UNKNOWN {
  /** u32 */
  Size: number;
  /** ptr */
  apUnknown: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_wireSAFEARR_UNKNOWN = 16;

export function alloc_wireSAFEARR_UNKNOWN(data?: Partial<_wireSAFEARR_UNKNOWN>): Uint8Array {
  const buf = new Uint8Array(sizeof_wireSAFEARR_UNKNOWN);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.apUnknown !== undefined) view.setBigUint64(8, data.apUnknown === null ? 0n : BigInt(util.toPointer(data.apUnknown)), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole._wireSAFEARR_DISPATCH (size: 16)
 */
export interface _wireSAFEARR_DISPATCH {
  /** u32 */
  Size: number;
  /** ptr */
  apDispatch: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_wireSAFEARR_DISPATCH = 16;

export function alloc_wireSAFEARR_DISPATCH(data?: Partial<_wireSAFEARR_DISPATCH>): Uint8Array {
  const buf = new Uint8Array(sizeof_wireSAFEARR_DISPATCH);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.apDispatch !== undefined) view.setBigUint64(8, data.apDispatch === null ? 0n : BigInt(util.toPointer(data.apDispatch)), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole._wireSAFEARR_VARIANT (size: 16)
 */
export interface _wireSAFEARR_VARIANT {
  /** u32 */
  Size: number;
  /** ptr */
  aVariant: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_wireSAFEARR_VARIANT = 16;

export function alloc_wireSAFEARR_VARIANT(data?: Partial<_wireSAFEARR_VARIANT>): Uint8Array {
  const buf = new Uint8Array(sizeof_wireSAFEARR_VARIANT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.aVariant !== undefined) view.setBigUint64(8, data.aVariant === null ? 0n : BigInt(util.toPointer(data.aVariant)), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole._wireSAFEARR_BRECORD (size: 16)
 */
export interface _wireSAFEARR_BRECORD {
  /** u32 */
  Size: number;
  /** ptr */
  aRecord: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_wireSAFEARR_BRECORD = 16;

export function alloc_wireSAFEARR_BRECORD(data?: Partial<_wireSAFEARR_BRECORD>): Uint8Array {
  const buf = new Uint8Array(sizeof_wireSAFEARR_BRECORD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.aRecord !== undefined) view.setBigUint64(8, data.aRecord === null ? 0n : BigInt(util.toPointer(data.aRecord)), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole._wireSAFEARR_HAVEIID (size: 24)
 */
export interface _wireSAFEARR_HAVEIID {
  /** u32 */
  Size: number;
  /** ptr */
  apUnknown: Deno.PointerValue | Uint8Array | null;
  /** System.Guid */
  iid: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_wireSAFEARR_HAVEIID = 24;

export function alloc_wireSAFEARR_HAVEIID(data?: Partial<_wireSAFEARR_HAVEIID>): Uint8Array {
  const buf = new Uint8Array(sizeof_wireSAFEARR_HAVEIID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.apUnknown !== undefined) view.setBigUint64(8, data.apUnknown === null ? 0n : BigInt(util.toPointer(data.apUnknown)), true);
  // 0x10: pointer
  if (data?.iid !== undefined) view.setBigUint64(16, data.iid === null ? 0n : BigInt(util.toPointer(data.iid)), true);
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.System.Ole._wireSAFEARRAY_UNION (size: 16)
 */
export interface _wireSAFEARRAY_UNION {
  /** u32 */
  sfType: number;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_wireSAFEARRAY_UNION = 16;

export function alloc_wireSAFEARRAY_UNION(data?: Partial<_wireSAFEARRAY_UNION>): Uint8Array {
  const buf = new Uint8Array(sizeof_wireSAFEARRAY_UNION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sfType !== undefined) view.setUint32(0, Number(data.sfType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole._wireSAFEARRAY (size: 32)
 */
export interface _wireSAFEARRAY {
  /** u16 */
  cDims: number;
  /** u16 */
  fFeatures: number;
  /** u32 */
  cbElements: number;
  /** u32 */
  cLocks: number;
  /** Windows.Win32.System.Ole._wireSAFEARRAY_UNION */
  uArrayStructs: Uint8Array | Deno.PointerValue | null;
  /** array */
  rgsabound: Deno.PointerValue | null;
}

export const sizeof_wireSAFEARRAY = 32;

export function alloc_wireSAFEARRAY(data?: Partial<_wireSAFEARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeof_wireSAFEARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cDims !== undefined) view.setUint16(0, Number(data.cDims), true);
  // 0x02: u16
  if (data?.fFeatures !== undefined) view.setUint16(2, Number(data.fFeatures), true);
  // 0x04: u32
  if (data?.cbElements !== undefined) view.setUint32(4, Number(data.cbElements), true);
  // 0x08: u32
  if (data?.cLocks !== undefined) view.setUint32(8, Number(data.cLocks), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.uArrayStructs !== undefined) view.setBigUint64(16, data.uArrayStructs === null ? 0n : BigInt(util.toPointer(data.uArrayStructs)), true);
  // 0x18: pointer
  if (data?.rgsabound !== undefined) view.setBigUint64(24, data.rgsabound === null ? 0n : BigInt(util.toPointer(data.rgsabound)), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole._wireBRECORD (size: 24)
 */
export interface _wireBRECORD {
  /** u32 */
  fFlags: number;
  /** u32 */
  clSize: number;
  /** Windows.Win32.System.Ole.IRecordInfo */
  pRecInfo: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pRecord: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_wireBRECORD = 24;

export function alloc_wireBRECORD(data?: Partial<_wireBRECORD>): Uint8Array {
  const buf = new Uint8Array(sizeof_wireBRECORD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fFlags !== undefined) view.setUint32(0, Number(data.fFlags), true);
  // 0x04: u32
  if (data?.clSize !== undefined) view.setUint32(4, Number(data.clSize), true);
  // 0x08: pointer
  if (data?.pRecInfo !== undefined) view.setBigUint64(8, data.pRecInfo === null ? 0n : BigInt(util.toPointer(data.pRecInfo)), true);
  // 0x10: pointer
  if (data?.pRecord !== undefined) view.setBigUint64(16, data.pRecord === null ? 0n : BigInt(util.toPointer(data.pRecord)), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole._wireVARIANT (size: 24)
 */
export interface _wireVARIANT {
  /** u32 */
  clSize: number;
  /** u32 */
  rpcReserved: number;
  /** u16 */
  vt: number;
  /** u16 */
  wReserved1: number;
  /** u16 */
  wReserved2: number;
  /** u16 */
  wReserved3: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_wireVARIANT = 24;

export function alloc_wireVARIANT(data?: Partial<_wireVARIANT>): Uint8Array {
  const buf = new Uint8Array(sizeof_wireVARIANT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.clSize !== undefined) view.setUint32(0, Number(data.clSize), true);
  // 0x04: u32
  if (data?.rpcReserved !== undefined) view.setUint32(4, Number(data.rpcReserved), true);
  // 0x08: u16
  if (data?.vt !== undefined) view.setUint16(8, Number(data.vt), true);
  // 0x0a: u16
  if (data?.wReserved1 !== undefined) view.setUint16(10, Number(data.wReserved1), true);
  // 0x0c: u16
  if (data?.wReserved2 !== undefined) view.setUint16(12, Number(data.wReserved2), true);
  // 0x0e: u16
  if (data?.wReserved3 !== undefined) view.setUint16(14, Number(data.wReserved3), true);
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.TYPEDESC (size: 16)
 */
export interface TYPEDESC {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  vt: number;
}

export const sizeofTYPEDESC = 16;

export function allocTYPEDESC(data?: Partial<TYPEDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofTYPEDESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u16
  if (data?.vt !== undefined) view.setUint16(8, Number(data.vt), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.System.Ole.ARRAYDESC (size: 24)
 */
export interface ARRAYDESC {
  /** Windows.Win32.System.Com.TYPEDESC */
  tdescElem: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  cDims: number;
  /** array */
  rgbounds: Deno.PointerValue | null;
}

export const sizeofARRAYDESC = 24;

export function allocARRAYDESC(data?: Partial<ARRAYDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofARRAYDESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.tdescElem !== undefined) view.setBigUint64(0, data.tdescElem === null ? 0n : BigInt(util.toPointer(data.tdescElem)), true);
  // 0x08: u16
  if (data?.cDims !== undefined) view.setUint16(8, Number(data.cDims), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.rgbounds !== undefined) view.setBigUint64(16, data.rgbounds === null ? 0n : BigInt(util.toPointer(data.rgbounds)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.VARIANT (size: 8)
 */
export interface VARIANT {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVARIANT = 8;

export function allocVARIANT(data?: Partial<VARIANT>): Uint8Array {
  const buf = new Uint8Array(sizeofVARIANT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole.PARAMDESCEX (size: 16)
 */
export interface PARAMDESCEX {
  /** u32 */
  cBytes: number;
  /** Windows.Win32.System.Com.VARIANT */
  varDefaultValue: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPARAMDESCEX = 16;

export function allocPARAMDESCEX(data?: Partial<PARAMDESCEX>): Uint8Array {
  const buf = new Uint8Array(sizeofPARAMDESCEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cBytes !== undefined) view.setUint32(0, Number(data.cBytes), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.varDefaultValue !== undefined) view.setBigUint64(8, data.varDefaultValue === null ? 0n : BigInt(util.toPointer(data.varDefaultValue)), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole.PARAMDESC (size: 16)
 */
export interface PARAMDESC {
  /** ptr */
  pparamdescex: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  wParamFlags: number;
}

export const sizeofPARAMDESC = 16;

export function allocPARAMDESC(data?: Partial<PARAMDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofPARAMDESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pparamdescex !== undefined) view.setBigUint64(0, data.pparamdescex === null ? 0n : BigInt(util.toPointer(data.pparamdescex)), true);
  // 0x08: u16
  if (data?.wParamFlags !== undefined) view.setUint16(8, Number(data.wParamFlags), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.System.Ole.CLEANLOCALSTORAGE (size: 24)
 */
export interface CLEANLOCALSTORAGE {
  /** Windows.Win32.System.Com.IUnknown */
  pInterface: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pStorage: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  flags: number;
}

export const sizeofCLEANLOCALSTORAGE = 24;

export function allocCLEANLOCALSTORAGE(data?: Partial<CLEANLOCALSTORAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofCLEANLOCALSTORAGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pInterface !== undefined) view.setBigUint64(0, data.pInterface === null ? 0n : BigInt(util.toPointer(data.pInterface)), true);
  // 0x08: pointer
  if (data?.pStorage !== undefined) view.setBigUint64(8, data.pStorage === null ? 0n : BigInt(util.toPointer(data.pStorage)), true);
  // 0x10: u32
  if (data?.flags !== undefined) view.setUint32(16, Number(data.flags), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Foundation.SIZE (size: 8)
 */
export interface SIZE {
  /** i32 */
  cx: number;
  /** i32 */
  cy: number;
}

export const sizeofSIZE = 8;

export function allocSIZE(data?: Partial<SIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofSIZE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cx !== undefined) view.setInt32(0, Number(data.cx), true);
  // 0x04: i32
  if (data?.cy !== undefined) view.setInt32(4, Number(data.cy), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.POINTL (size: 8)
 */
export interface POINTL {
  /** i32 */
  x: number;
  /** i32 */
  y: number;
}

export const sizeofPOINTL = 8;

export function allocPOINTL(data?: Partial<POINTL>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINTL);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.x !== undefined) view.setInt32(0, Number(data.x), true);
  // 0x04: i32
  if (data?.y !== undefined) view.setInt32(4, Number(data.y), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole.OBJECTDESCRIPTOR (size: 56)
 */
export interface OBJECTDESCRIPTOR {
  /** u32 */
  cbSize: number;
  /** System.Guid */
  clsid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwDrawAspect: number;
  /** Windows.Win32.Foundation.SIZE */
  sizel: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.POINTL */
  pointl: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwStatus: number;
  /** u32 */
  dwFullUserTypeName: number;
  /** u32 */
  dwSrcOfCopy: number;
}

export const sizeofOBJECTDESCRIPTOR = 56;

export function allocOBJECTDESCRIPTOR(data?: Partial<OBJECTDESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofOBJECTDESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.clsid !== undefined) view.setBigUint64(8, data.clsid === null ? 0n : BigInt(util.toPointer(data.clsid)), true);
  // 0x10: u32
  if (data?.dwDrawAspect !== undefined) view.setUint32(16, Number(data.dwDrawAspect), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.sizel !== undefined) view.setBigUint64(24, data.sizel === null ? 0n : BigInt(util.toPointer(data.sizel)), true);
  // 0x20: pointer
  if (data?.pointl !== undefined) view.setBigUint64(32, data.pointl === null ? 0n : BigInt(util.toPointer(data.pointl)), true);
  // 0x28: u32
  if (data?.dwStatus !== undefined) view.setUint32(40, Number(data.dwStatus), true);
  // 0x2c: u32
  if (data?.dwFullUserTypeName !== undefined) view.setUint32(44, Number(data.dwFullUserTypeName), true);
  // 0x30: u32
  if (data?.dwSrcOfCopy !== undefined) view.setUint32(48, Number(data.dwSrcOfCopy), true);
  // 0x34: pad4
  return buf;
}

export type BOOL = number;

export type HWND = Deno.PointerValue;

export type HACCEL = Deno.PointerValue;

/**
 * Windows.Win32.System.Ole.OIFI (size: 32)
 */
export interface OIFI {
  /** u32 */
  cb: number;
  /** Windows.Win32.Foundation.BOOL */
  fMDIApp: boolean;
  /** Windows.Win32.Foundation.HWND */
  hwndFrame: Deno.PointerValue | null;
  /** Windows.Win32.UI.WindowsAndMessaging.HACCEL */
  haccel: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cAccelEntries: number;
}

export const sizeofOIFI = 32;

export function allocOIFI(data?: Partial<OIFI>): Uint8Array {
  const buf = new Uint8Array(sizeofOIFI);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cb !== undefined) view.setUint32(0, Number(data.cb), true);
  // 0x04: i32
  if (data?.fMDIApp !== undefined) view.setInt32(4, Number(data.fMDIApp), true);
  // 0x08: pointer
  if (data?.hwndFrame !== undefined) view.setBigUint64(8, data.hwndFrame === null ? 0n : BigInt(util.toPointer(data.hwndFrame)), true);
  // 0x10: pointer
  if (data?.haccel !== undefined) view.setBigUint64(16, data.haccel === null ? 0n : BigInt(util.toPointer(data.haccel)), true);
  // 0x18: u32
  if (data?.cAccelEntries !== undefined) view.setUint32(24, Number(data.cAccelEntries), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Ole.OleMenuGroupWidths (size: 8)
 */
export interface OleMenuGroupWidths {
  /** array */
  width: Deno.PointerValue | null;
}

export const sizeofOleMenuGroupWidths = 8;

export function allocOleMenuGroupWidths(data?: Partial<OleMenuGroupWidths>): Uint8Array {
  const buf = new Uint8Array(sizeofOleMenuGroupWidths);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.width !== undefined) view.setBigUint64(0, data.width === null ? 0n : BigInt(util.toPointer(data.width)), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole.OLEVERB (size: 24)
 */
export interface OLEVERB {
  /** i32 */
  lVerb: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszVerbName: string | null;
  /** u32 */
  fuFlags: number;
  /** u32 */
  grfAttribs: number;
}

export const sizeofOLEVERB = 24;

export function allocOLEVERB(data?: Partial<OLEVERB>): Uint8Array {
  const buf = new Uint8Array(sizeofOLEVERB);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lVerb !== undefined) view.setInt32(0, Number(data.lVerb), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpszVerbName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpszVerbName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.fuFlags !== undefined) view.setUint32(16, Number(data.fuFlags), true);
  // 0x14: u32
  if (data?.grfAttribs !== undefined) view.setUint32(20, Number(data.grfAttribs), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole.NUMPARSE (size: 24)
 */
export interface NUMPARSE {
  /** i32 */
  cDig: number;
  /** u32 */
  dwInFlags: number;
  /** u32 */
  dwOutFlags: number;
  /** i32 */
  cchUsed: number;
  /** i32 */
  nBaseShift: number;
  /** i32 */
  nPwr10: number;
}

export const sizeofNUMPARSE = 24;

export function allocNUMPARSE(data?: Partial<NUMPARSE>): Uint8Array {
  const buf = new Uint8Array(sizeofNUMPARSE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cDig !== undefined) view.setInt32(0, Number(data.cDig), true);
  // 0x04: u32
  if (data?.dwInFlags !== undefined) view.setUint32(4, Number(data.dwInFlags), true);
  // 0x08: u32
  if (data?.dwOutFlags !== undefined) view.setUint32(8, Number(data.dwOutFlags), true);
  // 0x0c: i32
  if (data?.cchUsed !== undefined) view.setInt32(12, Number(data.cchUsed), true);
  // 0x10: i32
  if (data?.nBaseShift !== undefined) view.setInt32(16, Number(data.nBaseShift), true);
  // 0x14: i32
  if (data?.nPwr10 !== undefined) view.setInt32(20, Number(data.nPwr10), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.SYSTEMTIME (size: 16)
 */
export interface SYSTEMTIME {
  /** u16 */
  wYear: number;
  /** u16 */
  wMonth: number;
  /** u16 */
  wDayOfWeek: number;
  /** u16 */
  wDay: number;
  /** u16 */
  wHour: number;
  /** u16 */
  wMinute: number;
  /** u16 */
  wSecond: number;
  /** u16 */
  wMilliseconds: number;
}

export const sizeofSYSTEMTIME = 16;

export function allocSYSTEMTIME(data?: Partial<SYSTEMTIME>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEMTIME);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wYear !== undefined) view.setUint16(0, Number(data.wYear), true);
  // 0x02: u16
  if (data?.wMonth !== undefined) view.setUint16(2, Number(data.wMonth), true);
  // 0x04: u16
  if (data?.wDayOfWeek !== undefined) view.setUint16(4, Number(data.wDayOfWeek), true);
  // 0x06: u16
  if (data?.wDay !== undefined) view.setUint16(6, Number(data.wDay), true);
  // 0x08: u16
  if (data?.wHour !== undefined) view.setUint16(8, Number(data.wHour), true);
  // 0x0a: u16
  if (data?.wMinute !== undefined) view.setUint16(10, Number(data.wMinute), true);
  // 0x0c: u16
  if (data?.wSecond !== undefined) view.setUint16(12, Number(data.wSecond), true);
  // 0x0e: u16
  if (data?.wMilliseconds !== undefined) view.setUint16(14, Number(data.wMilliseconds), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole.UDATE (size: 16)
 */
export interface UDATE {
  /** Windows.Win32.Foundation.SYSTEMTIME */
  st: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wDayOfYear: number;
}

export const sizeofUDATE = 16;

export function allocUDATE(data?: Partial<UDATE>): Uint8Array {
  const buf = new Uint8Array(sizeofUDATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.st !== undefined) view.setBigUint64(0, data.st === null ? 0n : BigInt(util.toPointer(data.st)), true);
  // 0x08: u16
  if (data?.wDayOfYear !== undefined) view.setUint16(8, Number(data.wDayOfYear), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.System.Ole.PARAMDATA (size: 16)
 */
export interface PARAMDATA {
  /** Windows.Win32.Foundation.PWSTR */
  szName: string | null;
  /** u16 */
  vt: number;
}

export const sizeofPARAMDATA = 16;

export function allocPARAMDATA(data?: Partial<PARAMDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofPARAMDATA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.szName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.szName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u16
  if (data?.vt !== undefined) view.setUint16(8, Number(data.vt), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.System.Ole.METHODDATA (size: 40)
 */
export interface METHODDATA {
  /** Windows.Win32.Foundation.PWSTR */
  szName: string | null;
  /** ptr */
  ppdata: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  dispid: number;
  /** u32 */
  iMeth: number;
  /** Windows.Win32.System.Com.CALLCONV */
  cc: CALLCONV;
  /** u32 */
  cArgs: number;
  /** u16 */
  wFlags: number;
  /** u16 */
  vtReturn: number;
}

export const sizeofMETHODDATA = 40;

export function allocMETHODDATA(data?: Partial<METHODDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofMETHODDATA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.szName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.szName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.ppdata !== undefined) view.setBigUint64(8, data.ppdata === null ? 0n : BigInt(util.toPointer(data.ppdata)), true);
  // 0x10: i32
  if (data?.dispid !== undefined) view.setInt32(16, Number(data.dispid), true);
  // 0x14: u32
  if (data?.iMeth !== undefined) view.setUint32(20, Number(data.iMeth), true);
  // 0x18: i32
  if (data?.cc !== undefined) view.setInt32(24, Number(data.cc), true);
  // 0x1c: u32
  if (data?.cArgs !== undefined) view.setUint32(28, Number(data.cArgs), true);
  // 0x20: u16
  if (data?.wFlags !== undefined) view.setUint16(32, Number(data.wFlags), true);
  // 0x22: u16
  if (data?.vtReturn !== undefined) view.setUint16(34, Number(data.vtReturn), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.System.Ole.INTERFACEDATA (size: 16)
 */
export interface INTERFACEDATA {
  /** ptr */
  pmethdata: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cMembers: number;
}

export const sizeofINTERFACEDATA = 16;

export function allocINTERFACEDATA(data?: Partial<INTERFACEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERFACEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pmethdata !== undefined) view.setBigUint64(0, data.pmethdata === null ? 0n : BigInt(util.toPointer(data.pmethdata)), true);
  // 0x08: u32
  if (data?.cMembers !== undefined) view.setUint32(8, Number(data.cMembers), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Ole.LICINFO (size: 16)
 */
export interface LICINFO {
  /** i32 */
  cbLicInfo: number;
  /** Windows.Win32.Foundation.BOOL */
  fRuntimeKeyAvail: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fLicVerified: boolean;
}

export const sizeofLICINFO = 16;

export function allocLICINFO(data?: Partial<LICINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofLICINFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cbLicInfo !== undefined) view.setInt32(0, Number(data.cbLicInfo), true);
  // 0x04: i32
  if (data?.fRuntimeKeyAvail !== undefined) view.setInt32(4, Number(data.fRuntimeKeyAvail), true);
  // 0x08: i32
  if (data?.fLicVerified !== undefined) view.setInt32(8, Number(data.fLicVerified), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Ole.CONTROLINFO (size: 24)
 */
export interface CONTROLINFO {
  /** u32 */
  cb: number;
  /** Windows.Win32.UI.WindowsAndMessaging.HACCEL */
  hAccel: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  cAccel: number;
  /** u32 */
  dwFlags: number;
}

export const sizeofCONTROLINFO = 24;

export function allocCONTROLINFO(data?: Partial<CONTROLINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCONTROLINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cb !== undefined) view.setUint32(0, Number(data.cb), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hAccel !== undefined) view.setBigUint64(8, data.hAccel === null ? 0n : BigInt(util.toPointer(data.hAccel)), true);
  // 0x10: u16
  if (data?.cAccel !== undefined) view.setUint16(16, Number(data.cAccel), true);
  // 0x12: u32
  if (data?.dwFlags !== undefined) view.setUint32(18, Number(data.dwFlags), true);
  // 0x16: pad2
  return buf;
}

/**
 * Windows.Win32.System.Ole.POINTF (size: 8)
 */
export interface POINTF {
  /** f32 */
  x: number;
  /** f32 */
  y: number;
}

export const sizeofPOINTF = 8;

export function allocPOINTF(data?: Partial<POINTF>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINTF);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.x !== undefined) view.setFloat32(0, Number(data.x), true);
  // 0x04: f32
  if (data?.y !== undefined) view.setFloat32(4, Number(data.y), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole.PROPPAGEINFO (size: 48)
 */
export interface PROPPAGEINFO {
  /** u32 */
  cb: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszTitle: string | null;
  /** Windows.Win32.Foundation.SIZE */
  size: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszDocString: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszHelpFile: string | null;
  /** u32 */
  dwHelpContext: number;
}

export const sizeofPROPPAGEINFO = 48;

export function allocPROPPAGEINFO(data?: Partial<PROPPAGEINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPPAGEINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cb !== undefined) view.setUint32(0, Number(data.cb), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszTitle !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszTitle);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.size !== undefined) view.setBigUint64(16, data.size === null ? 0n : BigInt(util.toPointer(data.size)), true);
  // 0x18: buffer
  if (data?.pszDocString !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszDocString);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pszHelpFile !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszHelpFile);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dwHelpContext !== undefined) view.setUint32(40, Number(data.dwHelpContext), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Ole.CAUUID (size: 16)
 */
export interface CAUUID {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCAUUID = 16;

export function allocCAUUID(data?: Partial<CAUUID>): Uint8Array {
  const buf = new Uint8Array(sizeofCAUUID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole.ExtentInfo (size: 16)
 */
export interface ExtentInfo {
  /** u32 */
  cb: number;
  /** u32 */
  dwExtentMode: number;
  /** Windows.Win32.Foundation.SIZE */
  sizelProposed: Uint8Array | Deno.PointerValue | null;
}

export const sizeofExtentInfo = 16;

export function allocExtentInfo(data?: Partial<ExtentInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofExtentInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cb !== undefined) view.setUint32(0, Number(data.cb), true);
  // 0x04: u32
  if (data?.dwExtentMode !== undefined) view.setUint32(4, Number(data.dwExtentMode), true);
  // 0x08: pointer
  if (data?.sizelProposed !== undefined) view.setBigUint64(8, data.sizelProposed === null ? 0n : BigInt(util.toPointer(data.sizelProposed)), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole.AspectInfo (size: 8)
 */
export interface AspectInfo {
  /** u32 */
  cb: number;
  /** u32 */
  dwFlags: number;
}

export const sizeofAspectInfo = 8;

export function allocAspectInfo(data?: Partial<AspectInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofAspectInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cb !== undefined) view.setUint32(0, Number(data.cb), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole.CALPOLESTR (size: 16)
 */
export interface CALPOLESTR {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCALPOLESTR = 16;

export function allocCALPOLESTR(data?: Partial<CALPOLESTR>): Uint8Array {
  const buf = new Uint8Array(sizeofCALPOLESTR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole.CADWORD (size: 16)
 */
export interface CADWORD {
  /** u32 */
  cElems: number;
  /** ptr */
  pElems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCADWORD = 16;

export function allocCADWORD(data?: Partial<CADWORD>): Uint8Array {
  const buf = new Uint8Array(sizeofCADWORD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cElems !== undefined) view.setUint32(0, Number(data.cElems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pElems !== undefined) view.setBigUint64(8, data.pElems === null ? 0n : BigInt(util.toPointer(data.pElems)), true);
  return buf;
}

export type HPALETTE = Deno.PointerValue;

/**
 * Windows.Win32.System.Ole.QACONTAINER (size: 112)
 */
export interface QACONTAINER {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.System.Ole.IOleClientSite */
  pClientSite: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Ole.IAdviseSinkEx */
  pAdviseSink: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Ole.IPropertyNotifySink */
  pPropertyNotifySink: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.IUnknown */
  pUnkEventSink: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwAmbientFlags: number;
  /** u32 */
  colorFore: number;
  /** u32 */
  colorBack: number;
  /** Windows.Win32.System.Ole.IFont */
  pFont: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Ole.IOleUndoManager */
  pUndoMgr: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwAppearance: number;
  /** i32 */
  lcid: number;
  /** Windows.Win32.Graphics.Gdi.HPALETTE */
  hpal: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.IBindHost */
  pBindHost: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Ole.IOleControlSite */
  pOleControlSite: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.IServiceProvider */
  pServiceProvider: Uint8Array | Deno.PointerValue | null;
}

export const sizeofQACONTAINER = 112;

export function allocQACONTAINER(data?: Partial<QACONTAINER>): Uint8Array {
  const buf = new Uint8Array(sizeofQACONTAINER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pClientSite !== undefined) view.setBigUint64(8, data.pClientSite === null ? 0n : BigInt(util.toPointer(data.pClientSite)), true);
  // 0x10: pointer
  if (data?.pAdviseSink !== undefined) view.setBigUint64(16, data.pAdviseSink === null ? 0n : BigInt(util.toPointer(data.pAdviseSink)), true);
  // 0x18: pointer
  if (data?.pPropertyNotifySink !== undefined) view.setBigUint64(24, data.pPropertyNotifySink === null ? 0n : BigInt(util.toPointer(data.pPropertyNotifySink)), true);
  // 0x20: pointer
  if (data?.pUnkEventSink !== undefined) view.setBigUint64(32, data.pUnkEventSink === null ? 0n : BigInt(util.toPointer(data.pUnkEventSink)), true);
  // 0x28: u32
  if (data?.dwAmbientFlags !== undefined) view.setUint32(40, Number(data.dwAmbientFlags), true);
  // 0x2c: u32
  if (data?.colorFore !== undefined) view.setUint32(44, Number(data.colorFore), true);
  // 0x30: u32
  if (data?.colorBack !== undefined) view.setUint32(48, Number(data.colorBack), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.pFont !== undefined) view.setBigUint64(56, data.pFont === null ? 0n : BigInt(util.toPointer(data.pFont)), true);
  // 0x40: pointer
  if (data?.pUndoMgr !== undefined) view.setBigUint64(64, data.pUndoMgr === null ? 0n : BigInt(util.toPointer(data.pUndoMgr)), true);
  // 0x48: u32
  if (data?.dwAppearance !== undefined) view.setUint32(72, Number(data.dwAppearance), true);
  // 0x4c: i32
  if (data?.lcid !== undefined) view.setInt32(76, Number(data.lcid), true);
  // 0x50: pointer
  if (data?.hpal !== undefined) view.setBigUint64(80, data.hpal === null ? 0n : BigInt(util.toPointer(data.hpal)), true);
  // 0x58: pointer
  if (data?.pBindHost !== undefined) view.setBigUint64(88, data.pBindHost === null ? 0n : BigInt(util.toPointer(data.pBindHost)), true);
  // 0x60: pointer
  if (data?.pOleControlSite !== undefined) view.setBigUint64(96, data.pOleControlSite === null ? 0n : BigInt(util.toPointer(data.pOleControlSite)), true);
  // 0x68: pointer
  if (data?.pServiceProvider !== undefined) view.setBigUint64(104, data.pServiceProvider === null ? 0n : BigInt(util.toPointer(data.pServiceProvider)), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole.QACONTROL (size: 24)
 */
export interface QACONTROL {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwMiscStatus: number;
  /** u32 */
  dwViewStatus: number;
  /** u32 */
  dwEventCookie: number;
  /** u32 */
  dwPropNotifyCookie: number;
  /** u32 */
  dwPointerActivationPolicy: number;
}

export const sizeofQACONTROL = 24;

export function allocQACONTROL(data?: Partial<QACONTROL>): Uint8Array {
  const buf = new Uint8Array(sizeofQACONTROL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwMiscStatus !== undefined) view.setUint32(4, Number(data.dwMiscStatus), true);
  // 0x08: u32
  if (data?.dwViewStatus !== undefined) view.setUint32(8, Number(data.dwViewStatus), true);
  // 0x0c: u32
  if (data?.dwEventCookie !== undefined) view.setUint32(12, Number(data.dwEventCookie), true);
  // 0x10: u32
  if (data?.dwPropNotifyCookie !== undefined) view.setUint32(16, Number(data.dwPropNotifyCookie), true);
  // 0x14: u32
  if (data?.dwPointerActivationPolicy !== undefined) view.setUint32(20, Number(data.dwPointerActivationPolicy), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole.OCPFIPARAMS (size: 72)
 */
export interface OCPFIPARAMS {
  /** u32 */
  cbStructSize: number;
  /** Windows.Win32.Foundation.HWND */
  hWndOwner: Deno.PointerValue | null;
  /** i32 */
  x: number;
  /** i32 */
  y: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszCaption: string | null;
  /** u32 */
  cObjects: number;
  /** ptr */
  lplpUnk: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cPages: number;
  /** ptr */
  lpPages: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  lcid: number;
  /** i32 */
  dispidInitialProperty: number;
}

export const sizeofOCPFIPARAMS = 72;

export function allocOCPFIPARAMS(data?: Partial<OCPFIPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofOCPFIPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStructSize !== undefined) view.setUint32(0, Number(data.cbStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hWndOwner !== undefined) view.setBigUint64(8, data.hWndOwner === null ? 0n : BigInt(util.toPointer(data.hWndOwner)), true);
  // 0x10: i32
  if (data?.x !== undefined) view.setInt32(16, Number(data.x), true);
  // 0x14: i32
  if (data?.y !== undefined) view.setInt32(20, Number(data.y), true);
  // 0x18: buffer
  if (data?.lpszCaption !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpszCaption);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.cObjects !== undefined) view.setUint32(32, Number(data.cObjects), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.lplpUnk !== undefined) view.setBigUint64(40, data.lplpUnk === null ? 0n : BigInt(util.toPointer(data.lplpUnk)), true);
  // 0x30: u32
  if (data?.cPages !== undefined) view.setUint32(48, Number(data.cPages), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.lpPages !== undefined) view.setBigUint64(56, data.lpPages === null ? 0n : BigInt(util.toPointer(data.lpPages)), true);
  // 0x40: u32
  if (data?.lcid !== undefined) view.setUint32(64, Number(data.lcid), true);
  // 0x44: i32
  if (data?.dispidInitialProperty !== undefined) view.setInt32(68, Number(data.dispidInitialProperty), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.CY (size: 16)
 */
export interface CY {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  int64: Deno.PointerValue;
}

export const sizeofCY = 16;

export function allocCY(data?: Partial<CY>): Uint8Array {
  const buf = new Uint8Array(sizeofCY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: i64
  if (data?.int64 !== undefined) view.setBigInt64(8, BigInt(data.int64), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole.FONTDESC (size: 40)
 */
export interface FONTDESC {
  /** u32 */
  cbSizeofstruct: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrName: string | null;
  /** Windows.Win32.System.Com.CY */
  cySize: Uint8Array | Deno.PointerValue | null;
  /** i16 */
  sWeight: number;
  /** i16 */
  sCharset: number;
  /** Windows.Win32.Foundation.BOOL */
  fItalic: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fUnderline: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fStrikethrough: boolean;
}

export const sizeofFONTDESC = 40;

export function allocFONTDESC(data?: Partial<FONTDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofFONTDESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSizeofstruct !== undefined) view.setUint32(0, Number(data.cbSizeofstruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpstrName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpstrName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.cySize !== undefined) view.setBigUint64(16, data.cySize === null ? 0n : BigInt(util.toPointer(data.cySize)), true);
  // 0x18: i16
  if (data?.sWeight !== undefined) view.setInt16(24, Number(data.sWeight), true);
  // 0x1a: i16
  if (data?.sCharset !== undefined) view.setInt16(26, Number(data.sCharset), true);
  // 0x1c: i32
  if (data?.fItalic !== undefined) view.setInt32(28, Number(data.fItalic), true);
  // 0x20: i32
  if (data?.fUnderline !== undefined) view.setInt32(32, Number(data.fUnderline), true);
  // 0x24: i32
  if (data?.fStrikethrough !== undefined) view.setInt32(36, Number(data.fStrikethrough), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole.PICTDESC (size: 16)
 */
export interface PICTDESC {
  /** u32 */
  cbSizeofstruct: number;
  /** u32 */
  picType: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPICTDESC = 16;

export function allocPICTDESC(data?: Partial<PICTDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofPICTDESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSizeofstruct !== undefined) view.setUint32(0, Number(data.cbSizeofstruct), true);
  // 0x04: u32
  if (data?.picType !== undefined) view.setUint32(4, Number(data.picType), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole.PAGERANGE (size: 8)
 */
export interface PAGERANGE {
  /** i32 */
  nFromPage: number;
  /** i32 */
  nToPage: number;
}

export const sizeofPAGERANGE = 8;

export function allocPAGERANGE(data?: Partial<PAGERANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofPAGERANGE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.nFromPage !== undefined) view.setInt32(0, Number(data.nFromPage), true);
  // 0x04: i32
  if (data?.nToPage !== undefined) view.setInt32(4, Number(data.nToPage), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole.PAGESET (size: 24)
 */
export interface PAGESET {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.BOOL */
  fOddPages: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fEvenPages: boolean;
  /** u32 */
  cPageRange: number;
  /** array */
  rgPages: Deno.PointerValue | null;
}

export const sizeofPAGESET = 24;

export function allocPAGESET(data?: Partial<PAGESET>): Uint8Array {
  const buf = new Uint8Array(sizeofPAGESET);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: i32
  if (data?.fOddPages !== undefined) view.setInt32(4, Number(data.fOddPages), true);
  // 0x08: i32
  if (data?.fEvenPages !== undefined) view.setInt32(8, Number(data.fEvenPages), true);
  // 0x0c: u32
  if (data?.cPageRange !== undefined) view.setUint32(12, Number(data.cPageRange), true);
  // 0x10: pointer
  if (data?.rgPages !== undefined) view.setBigUint64(16, data.rgPages === null ? 0n : BigInt(util.toPointer(data.rgPages)), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole.OLECMD (size: 8)
 */
export interface OLECMD {
  /** u32 */
  cmdID: number;
  /** u32 */
  cmdf: number;
}

export const sizeofOLECMD = 8;

export function allocOLECMD(data?: Partial<OLECMD>): Uint8Array {
  const buf = new Uint8Array(sizeofOLECMD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cmdID !== undefined) view.setUint32(0, Number(data.cmdID), true);
  // 0x04: u32
  if (data?.cmdf !== undefined) view.setUint32(4, Number(data.cmdf), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole.OLECMDTEXT (size: 24)
 */
export interface OLECMDTEXT {
  /** u32 */
  cmdtextf: number;
  /** u32 */
  cwActual: number;
  /** u32 */
  cwBuf: number;
  /** array */
  rgwz: Deno.PointerValue | null;
}

export const sizeofOLECMDTEXT = 24;

export function allocOLECMDTEXT(data?: Partial<OLECMDTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofOLECMDTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cmdtextf !== undefined) view.setUint32(0, Number(data.cmdtextf), true);
  // 0x04: u32
  if (data?.cwActual !== undefined) view.setUint32(4, Number(data.cwActual), true);
  // 0x08: u32
  if (data?.cwBuf !== undefined) view.setUint32(8, Number(data.cwBuf), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.rgwz !== undefined) view.setBigUint64(16, data.rgwz === null ? 0n : BigInt(util.toPointer(data.rgwz)), true);
  return buf;
}

export type LPARAM = Deno.PointerValue;

export type HINSTANCE = Deno.PointerValue;

export type HRSRC = Deno.PointerValue;

/**
 * Windows.Win32.System.Ole.OLEUIINSERTOBJECTW (size: 160)
 */
export interface OLEUIINSERTOBJECTW {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HWND */
  hWndOwner: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpszCaption: string | null;
  /** Windows.Win32.System.Ole.LPFNOLEUIHOOK */
  lpfnHook: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpszTemplate: string | null;
  /** Windows.Win32.Foundation.HRSRC */
  hResource: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  clsid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpszFile: string | null;
  /** u32 */
  cchFile: number;
  /** u32 */
  cClsidExclude: number;
  /** ptr */
  lpClsidExclude: Deno.PointerValue | Uint8Array | null;
  /** System.Guid */
  iid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  oleRender: number;
  /** ptr */
  lpFormatEtc: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Ole.IOleClientSite */
  lpIOleClientSite: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.StructuredStorage.IStorage */
  lpIStorage: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  ppvObj: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  sc: number;
  /** isize */
  hMetaPict: Deno.PointerValue;
}

export const sizeofOLEUIINSERTOBJECTW = 160;

export function allocOLEUIINSERTOBJECTW(data?: Partial<OLEUIINSERTOBJECTW>): Uint8Array {
  const buf = new Uint8Array(sizeofOLEUIINSERTOBJECTW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.hWndOwner !== undefined) view.setBigUint64(8, data.hWndOwner === null ? 0n : BigInt(util.toPointer(data.hWndOwner)), true);
  // 0x10: buffer
  if (data?.lpszCaption !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpszCaption);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(24, data.lpfnHook === null ? 0n : BigInt(util.toPointer(data.lpfnHook)), true);
  // 0x20: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(32, data.lCustData === null ? 0n : BigInt(util.toPointer(data.lCustData)), true);
  // 0x28: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(40, data.hInstance === null ? 0n : BigInt(util.toPointer(data.hInstance)), true);
  // 0x30: buffer
  if (data?.lpszTemplate !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.lpszTemplate);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: pointer
  if (data?.hResource !== undefined) view.setBigUint64(56, data.hResource === null ? 0n : BigInt(util.toPointer(data.hResource)), true);
  // 0x40: pointer
  if (data?.clsid !== undefined) view.setBigUint64(64, data.clsid === null ? 0n : BigInt(util.toPointer(data.clsid)), true);
  // 0x48: buffer
  if (data?.lpszFile !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.lpszFile);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: u32
  if (data?.cchFile !== undefined) view.setUint32(80, Number(data.cchFile), true);
  // 0x54: u32
  if (data?.cClsidExclude !== undefined) view.setUint32(84, Number(data.cClsidExclude), true);
  // 0x58: pointer
  if (data?.lpClsidExclude !== undefined) view.setBigUint64(88, data.lpClsidExclude === null ? 0n : BigInt(util.toPointer(data.lpClsidExclude)), true);
  // 0x60: pointer
  if (data?.iid !== undefined) view.setBigUint64(96, data.iid === null ? 0n : BigInt(util.toPointer(data.iid)), true);
  // 0x68: u32
  if (data?.oleRender !== undefined) view.setUint32(104, Number(data.oleRender), true);
  // 0x6c: pad4
  // 0x70: pointer
  if (data?.lpFormatEtc !== undefined) view.setBigUint64(112, data.lpFormatEtc === null ? 0n : BigInt(util.toPointer(data.lpFormatEtc)), true);
  // 0x78: pointer
  if (data?.lpIOleClientSite !== undefined) view.setBigUint64(120, data.lpIOleClientSite === null ? 0n : BigInt(util.toPointer(data.lpIOleClientSite)), true);
  // 0x80: pointer
  if (data?.lpIStorage !== undefined) view.setBigUint64(128, data.lpIStorage === null ? 0n : BigInt(util.toPointer(data.lpIStorage)), true);
  // 0x88: pointer
  if (data?.ppvObj !== undefined) view.setBigUint64(136, data.ppvObj === null ? 0n : BigInt(util.toPointer(data.ppvObj)), true);
  // 0x90: i32
  if (data?.sc !== undefined) view.setInt32(144, Number(data.sc), true);
  // 0x94: pad4
  // 0x98: isize
  if (data?.hMetaPict !== undefined) view.setBigInt64(152, BigInt(data.hMetaPict), true);
  return buf;
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.System.Ole.OLEUIINSERTOBJECTA (size: 160)
 */
export interface OLEUIINSERTOBJECTA {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HWND */
  hWndOwner: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  lpszCaption: string | null;
  /** Windows.Win32.System.Ole.LPFNOLEUIHOOK */
  lpfnHook: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  lpszTemplate: string | null;
  /** Windows.Win32.Foundation.HRSRC */
  hResource: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  clsid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  lpszFile: string | null;
  /** u32 */
  cchFile: number;
  /** u32 */
  cClsidExclude: number;
  /** ptr */
  lpClsidExclude: Deno.PointerValue | Uint8Array | null;
  /** System.Guid */
  iid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  oleRender: number;
  /** ptr */
  lpFormatEtc: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Ole.IOleClientSite */
  lpIOleClientSite: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.StructuredStorage.IStorage */
  lpIStorage: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  ppvObj: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  sc: number;
  /** isize */
  hMetaPict: Deno.PointerValue;
}

export const sizeofOLEUIINSERTOBJECTA = 160;

export function allocOLEUIINSERTOBJECTA(data?: Partial<OLEUIINSERTOBJECTA>): Uint8Array {
  const buf = new Uint8Array(sizeofOLEUIINSERTOBJECTA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.hWndOwner !== undefined) view.setBigUint64(8, data.hWndOwner === null ? 0n : BigInt(util.toPointer(data.hWndOwner)), true);
  // 0x10: buffer
  if (data?.lpszCaption !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpszCaption);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(24, data.lpfnHook === null ? 0n : BigInt(util.toPointer(data.lpfnHook)), true);
  // 0x20: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(32, data.lCustData === null ? 0n : BigInt(util.toPointer(data.lCustData)), true);
  // 0x28: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(40, data.hInstance === null ? 0n : BigInt(util.toPointer(data.hInstance)), true);
  // 0x30: buffer
  if (data?.lpszTemplate !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.lpszTemplate);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: pointer
  if (data?.hResource !== undefined) view.setBigUint64(56, data.hResource === null ? 0n : BigInt(util.toPointer(data.hResource)), true);
  // 0x40: pointer
  if (data?.clsid !== undefined) view.setBigUint64(64, data.clsid === null ? 0n : BigInt(util.toPointer(data.clsid)), true);
  // 0x48: buffer
  if (data?.lpszFile !== undefined) {
    (buf as any)._f72 = util.pstrToFfi(data.lpszFile);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: u32
  if (data?.cchFile !== undefined) view.setUint32(80, Number(data.cchFile), true);
  // 0x54: u32
  if (data?.cClsidExclude !== undefined) view.setUint32(84, Number(data.cClsidExclude), true);
  // 0x58: pointer
  if (data?.lpClsidExclude !== undefined) view.setBigUint64(88, data.lpClsidExclude === null ? 0n : BigInt(util.toPointer(data.lpClsidExclude)), true);
  // 0x60: pointer
  if (data?.iid !== undefined) view.setBigUint64(96, data.iid === null ? 0n : BigInt(util.toPointer(data.iid)), true);
  // 0x68: u32
  if (data?.oleRender !== undefined) view.setUint32(104, Number(data.oleRender), true);
  // 0x6c: pad4
  // 0x70: pointer
  if (data?.lpFormatEtc !== undefined) view.setBigUint64(112, data.lpFormatEtc === null ? 0n : BigInt(util.toPointer(data.lpFormatEtc)), true);
  // 0x78: pointer
  if (data?.lpIOleClientSite !== undefined) view.setBigUint64(120, data.lpIOleClientSite === null ? 0n : BigInt(util.toPointer(data.lpIOleClientSite)), true);
  // 0x80: pointer
  if (data?.lpIStorage !== undefined) view.setBigUint64(128, data.lpIStorage === null ? 0n : BigInt(util.toPointer(data.lpIStorage)), true);
  // 0x88: pointer
  if (data?.ppvObj !== undefined) view.setBigUint64(136, data.ppvObj === null ? 0n : BigInt(util.toPointer(data.ppvObj)), true);
  // 0x90: i32
  if (data?.sc !== undefined) view.setInt32(144, Number(data.sc), true);
  // 0x94: pad4
  // 0x98: isize
  if (data?.hMetaPict !== undefined) view.setBigInt64(152, BigInt(data.hMetaPict), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.FORMATETC (size: 32)
 */
export interface FORMATETC {
  /** u16 */
  cfFormat: number;
  /** ptr */
  ptd: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwAspect: number;
  /** i32 */
  lindex: number;
  /** u32 */
  tymed: number;
}

export const sizeofFORMATETC = 32;

export function allocFORMATETC(data?: Partial<FORMATETC>): Uint8Array {
  const buf = new Uint8Array(sizeofFORMATETC);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cfFormat !== undefined) view.setUint16(0, Number(data.cfFormat), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.ptd !== undefined) view.setBigUint64(8, data.ptd === null ? 0n : BigInt(util.toPointer(data.ptd)), true);
  // 0x10: u32
  if (data?.dwAspect !== undefined) view.setUint32(16, Number(data.dwAspect), true);
  // 0x14: i32
  if (data?.lindex !== undefined) view.setInt32(20, Number(data.lindex), true);
  // 0x18: u32
  if (data?.tymed !== undefined) view.setUint32(24, Number(data.tymed), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Ole.OLEUIPASTEENTRYW (size: 32)
 */
export interface OLEUIPASTEENTRYW {
  /** Windows.Win32.System.Com.FORMATETC */
  fmtetc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrFormatName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrResultText: string | null;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwScratchSpace: number;
}

export const sizeofOLEUIPASTEENTRYW = 32;

export function allocOLEUIPASTEENTRYW(data?: Partial<OLEUIPASTEENTRYW>): Uint8Array {
  const buf = new Uint8Array(sizeofOLEUIPASTEENTRYW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fmtetc !== undefined) view.setBigUint64(0, data.fmtetc === null ? 0n : BigInt(util.toPointer(data.fmtetc)), true);
  // 0x08: buffer
  if (data?.lpstrFormatName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpstrFormatName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.lpstrResultText !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpstrResultText);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: u32
  if (data?.dwScratchSpace !== undefined) view.setUint32(28, Number(data.dwScratchSpace), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole.OLEUIPASTEENTRYA (size: 32)
 */
export interface OLEUIPASTEENTRYA {
  /** Windows.Win32.System.Com.FORMATETC */
  fmtetc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  lpstrFormatName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpstrResultText: string | null;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwScratchSpace: number;
}

export const sizeofOLEUIPASTEENTRYA = 32;

export function allocOLEUIPASTEENTRYA(data?: Partial<OLEUIPASTEENTRYA>): Uint8Array {
  const buf = new Uint8Array(sizeofOLEUIPASTEENTRYA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fmtetc !== undefined) view.setBigUint64(0, data.fmtetc === null ? 0n : BigInt(util.toPointer(data.fmtetc)), true);
  // 0x08: buffer
  if (data?.lpstrFormatName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpstrFormatName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.lpstrResultText !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpstrResultText);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: u32
  if (data?.dwScratchSpace !== undefined) view.setUint32(28, Number(data.dwScratchSpace), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole.OLEUIPASTESPECIALW (size: 136)
 */
export interface OLEUIPASTESPECIALW {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HWND */
  hWndOwner: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpszCaption: string | null;
  /** Windows.Win32.System.Ole.LPFNOLEUIHOOK */
  lpfnHook: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpszTemplate: string | null;
  /** Windows.Win32.Foundation.HRSRC */
  hResource: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.IDataObject */
  lpSrcDataObj: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  arrPasteEntries: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  cPasteEntries: number;
  /** ptr */
  arrLinkTypes: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  cLinkTypes: number;
  /** u32 */
  cClsidExclude: number;
  /** ptr */
  lpClsidExclude: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  nSelectedIndex: number;
  /** Windows.Win32.Foundation.BOOL */
  fLink: boolean;
  /** isize */
  hMetaPict: Deno.PointerValue;
  /** Windows.Win32.Foundation.SIZE */
  sizel: Uint8Array | Deno.PointerValue | null;
}

export const sizeofOLEUIPASTESPECIALW = 136;

export function allocOLEUIPASTESPECIALW(data?: Partial<OLEUIPASTESPECIALW>): Uint8Array {
  const buf = new Uint8Array(sizeofOLEUIPASTESPECIALW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.hWndOwner !== undefined) view.setBigUint64(8, data.hWndOwner === null ? 0n : BigInt(util.toPointer(data.hWndOwner)), true);
  // 0x10: buffer
  if (data?.lpszCaption !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpszCaption);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(24, data.lpfnHook === null ? 0n : BigInt(util.toPointer(data.lpfnHook)), true);
  // 0x20: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(32, data.lCustData === null ? 0n : BigInt(util.toPointer(data.lCustData)), true);
  // 0x28: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(40, data.hInstance === null ? 0n : BigInt(util.toPointer(data.hInstance)), true);
  // 0x30: buffer
  if (data?.lpszTemplate !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.lpszTemplate);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: pointer
  if (data?.hResource !== undefined) view.setBigUint64(56, data.hResource === null ? 0n : BigInt(util.toPointer(data.hResource)), true);
  // 0x40: pointer
  if (data?.lpSrcDataObj !== undefined) view.setBigUint64(64, data.lpSrcDataObj === null ? 0n : BigInt(util.toPointer(data.lpSrcDataObj)), true);
  // 0x48: pointer
  if (data?.arrPasteEntries !== undefined) view.setBigUint64(72, data.arrPasteEntries === null ? 0n : BigInt(util.toPointer(data.arrPasteEntries)), true);
  // 0x50: i32
  if (data?.cPasteEntries !== undefined) view.setInt32(80, Number(data.cPasteEntries), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.arrLinkTypes !== undefined) view.setBigUint64(88, data.arrLinkTypes === null ? 0n : BigInt(util.toPointer(data.arrLinkTypes)), true);
  // 0x60: i32
  if (data?.cLinkTypes !== undefined) view.setInt32(96, Number(data.cLinkTypes), true);
  // 0x64: u32
  if (data?.cClsidExclude !== undefined) view.setUint32(100, Number(data.cClsidExclude), true);
  // 0x68: pointer
  if (data?.lpClsidExclude !== undefined) view.setBigUint64(104, data.lpClsidExclude === null ? 0n : BigInt(util.toPointer(data.lpClsidExclude)), true);
  // 0x70: i32
  if (data?.nSelectedIndex !== undefined) view.setInt32(112, Number(data.nSelectedIndex), true);
  // 0x74: i32
  if (data?.fLink !== undefined) view.setInt32(116, Number(data.fLink), true);
  // 0x78: isize
  if (data?.hMetaPict !== undefined) view.setBigInt64(120, BigInt(data.hMetaPict), true);
  // 0x80: pointer
  if (data?.sizel !== undefined) view.setBigUint64(128, data.sizel === null ? 0n : BigInt(util.toPointer(data.sizel)), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole.OLEUIPASTESPECIALA (size: 136)
 */
export interface OLEUIPASTESPECIALA {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HWND */
  hWndOwner: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  lpszCaption: string | null;
  /** Windows.Win32.System.Ole.LPFNOLEUIHOOK */
  lpfnHook: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  lpszTemplate: string | null;
  /** Windows.Win32.Foundation.HRSRC */
  hResource: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.IDataObject */
  lpSrcDataObj: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  arrPasteEntries: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  cPasteEntries: number;
  /** ptr */
  arrLinkTypes: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  cLinkTypes: number;
  /** u32 */
  cClsidExclude: number;
  /** ptr */
  lpClsidExclude: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  nSelectedIndex: number;
  /** Windows.Win32.Foundation.BOOL */
  fLink: boolean;
  /** isize */
  hMetaPict: Deno.PointerValue;
  /** Windows.Win32.Foundation.SIZE */
  sizel: Uint8Array | Deno.PointerValue | null;
}

export const sizeofOLEUIPASTESPECIALA = 136;

export function allocOLEUIPASTESPECIALA(data?: Partial<OLEUIPASTESPECIALA>): Uint8Array {
  const buf = new Uint8Array(sizeofOLEUIPASTESPECIALA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.hWndOwner !== undefined) view.setBigUint64(8, data.hWndOwner === null ? 0n : BigInt(util.toPointer(data.hWndOwner)), true);
  // 0x10: buffer
  if (data?.lpszCaption !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpszCaption);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(24, data.lpfnHook === null ? 0n : BigInt(util.toPointer(data.lpfnHook)), true);
  // 0x20: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(32, data.lCustData === null ? 0n : BigInt(util.toPointer(data.lCustData)), true);
  // 0x28: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(40, data.hInstance === null ? 0n : BigInt(util.toPointer(data.hInstance)), true);
  // 0x30: buffer
  if (data?.lpszTemplate !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.lpszTemplate);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: pointer
  if (data?.hResource !== undefined) view.setBigUint64(56, data.hResource === null ? 0n : BigInt(util.toPointer(data.hResource)), true);
  // 0x40: pointer
  if (data?.lpSrcDataObj !== undefined) view.setBigUint64(64, data.lpSrcDataObj === null ? 0n : BigInt(util.toPointer(data.lpSrcDataObj)), true);
  // 0x48: pointer
  if (data?.arrPasteEntries !== undefined) view.setBigUint64(72, data.arrPasteEntries === null ? 0n : BigInt(util.toPointer(data.arrPasteEntries)), true);
  // 0x50: i32
  if (data?.cPasteEntries !== undefined) view.setInt32(80, Number(data.cPasteEntries), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.arrLinkTypes !== undefined) view.setBigUint64(88, data.arrLinkTypes === null ? 0n : BigInt(util.toPointer(data.arrLinkTypes)), true);
  // 0x60: i32
  if (data?.cLinkTypes !== undefined) view.setInt32(96, Number(data.cLinkTypes), true);
  // 0x64: u32
  if (data?.cClsidExclude !== undefined) view.setUint32(100, Number(data.cClsidExclude), true);
  // 0x68: pointer
  if (data?.lpClsidExclude !== undefined) view.setBigUint64(104, data.lpClsidExclude === null ? 0n : BigInt(util.toPointer(data.lpClsidExclude)), true);
  // 0x70: i32
  if (data?.nSelectedIndex !== undefined) view.setInt32(112, Number(data.nSelectedIndex), true);
  // 0x74: i32
  if (data?.fLink !== undefined) view.setInt32(116, Number(data.fLink), true);
  // 0x78: isize
  if (data?.hMetaPict !== undefined) view.setBigInt64(120, BigInt(data.hMetaPict), true);
  // 0x80: pointer
  if (data?.sizel !== undefined) view.setBigUint64(128, data.sizel === null ? 0n : BigInt(util.toPointer(data.sizel)), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole.OLEUIEDITLINKSW (size: 72)
 */
export interface OLEUIEDITLINKSW {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HWND */
  hWndOwner: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpszCaption: string | null;
  /** Windows.Win32.System.Ole.LPFNOLEUIHOOK */
  lpfnHook: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpszTemplate: string | null;
  /** Windows.Win32.Foundation.HRSRC */
  hResource: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Ole.IOleUILinkContainerW */
  lpOleUILinkContainer: Uint8Array | Deno.PointerValue | null;
}

export const sizeofOLEUIEDITLINKSW = 72;

export function allocOLEUIEDITLINKSW(data?: Partial<OLEUIEDITLINKSW>): Uint8Array {
  const buf = new Uint8Array(sizeofOLEUIEDITLINKSW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.hWndOwner !== undefined) view.setBigUint64(8, data.hWndOwner === null ? 0n : BigInt(util.toPointer(data.hWndOwner)), true);
  // 0x10: buffer
  if (data?.lpszCaption !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpszCaption);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(24, data.lpfnHook === null ? 0n : BigInt(util.toPointer(data.lpfnHook)), true);
  // 0x20: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(32, data.lCustData === null ? 0n : BigInt(util.toPointer(data.lCustData)), true);
  // 0x28: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(40, data.hInstance === null ? 0n : BigInt(util.toPointer(data.hInstance)), true);
  // 0x30: buffer
  if (data?.lpszTemplate !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.lpszTemplate);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: pointer
  if (data?.hResource !== undefined) view.setBigUint64(56, data.hResource === null ? 0n : BigInt(util.toPointer(data.hResource)), true);
  // 0x40: pointer
  if (data?.lpOleUILinkContainer !== undefined) view.setBigUint64(64, data.lpOleUILinkContainer === null ? 0n : BigInt(util.toPointer(data.lpOleUILinkContainer)), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole.OLEUIEDITLINKSA (size: 72)
 */
export interface OLEUIEDITLINKSA {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HWND */
  hWndOwner: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  lpszCaption: string | null;
  /** Windows.Win32.System.Ole.LPFNOLEUIHOOK */
  lpfnHook: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  lpszTemplate: string | null;
  /** Windows.Win32.Foundation.HRSRC */
  hResource: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Ole.IOleUILinkContainerA */
  lpOleUILinkContainer: Uint8Array | Deno.PointerValue | null;
}

export const sizeofOLEUIEDITLINKSA = 72;

export function allocOLEUIEDITLINKSA(data?: Partial<OLEUIEDITLINKSA>): Uint8Array {
  const buf = new Uint8Array(sizeofOLEUIEDITLINKSA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.hWndOwner !== undefined) view.setBigUint64(8, data.hWndOwner === null ? 0n : BigInt(util.toPointer(data.hWndOwner)), true);
  // 0x10: buffer
  if (data?.lpszCaption !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpszCaption);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(24, data.lpfnHook === null ? 0n : BigInt(util.toPointer(data.lpfnHook)), true);
  // 0x20: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(32, data.lCustData === null ? 0n : BigInt(util.toPointer(data.lCustData)), true);
  // 0x28: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(40, data.hInstance === null ? 0n : BigInt(util.toPointer(data.hInstance)), true);
  // 0x30: buffer
  if (data?.lpszTemplate !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.lpszTemplate);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: pointer
  if (data?.hResource !== undefined) view.setBigUint64(56, data.hResource === null ? 0n : BigInt(util.toPointer(data.hResource)), true);
  // 0x40: pointer
  if (data?.lpOleUILinkContainer !== undefined) view.setBigUint64(64, data.lpOleUILinkContainer === null ? 0n : BigInt(util.toPointer(data.lpOleUILinkContainer)), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole.OLEUICHANGEICONW (size: 96)
 */
export interface OLEUICHANGEICONW {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HWND */
  hWndOwner: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpszCaption: string | null;
  /** Windows.Win32.System.Ole.LPFNOLEUIHOOK */
  lpfnHook: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpszTemplate: string | null;
  /** Windows.Win32.Foundation.HRSRC */
  hResource: Uint8Array | Deno.PointerValue | null;
  /** isize */
  hMetaPict: Deno.PointerValue;
  /** System.Guid */
  clsid: Uint8Array | Deno.PointerValue | null;
  /** array */
  szIconExe: Deno.PointerValue | null;
  /** i32 */
  cchIconExe: number;
}

export const sizeofOLEUICHANGEICONW = 96;

export function allocOLEUICHANGEICONW(data?: Partial<OLEUICHANGEICONW>): Uint8Array {
  const buf = new Uint8Array(sizeofOLEUICHANGEICONW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.hWndOwner !== undefined) view.setBigUint64(8, data.hWndOwner === null ? 0n : BigInt(util.toPointer(data.hWndOwner)), true);
  // 0x10: buffer
  if (data?.lpszCaption !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpszCaption);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(24, data.lpfnHook === null ? 0n : BigInt(util.toPointer(data.lpfnHook)), true);
  // 0x20: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(32, data.lCustData === null ? 0n : BigInt(util.toPointer(data.lCustData)), true);
  // 0x28: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(40, data.hInstance === null ? 0n : BigInt(util.toPointer(data.hInstance)), true);
  // 0x30: buffer
  if (data?.lpszTemplate !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.lpszTemplate);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: pointer
  if (data?.hResource !== undefined) view.setBigUint64(56, data.hResource === null ? 0n : BigInt(util.toPointer(data.hResource)), true);
  // 0x40: isize
  if (data?.hMetaPict !== undefined) view.setBigInt64(64, BigInt(data.hMetaPict), true);
  // 0x48: pointer
  if (data?.clsid !== undefined) view.setBigUint64(72, data.clsid === null ? 0n : BigInt(util.toPointer(data.clsid)), true);
  // 0x50: pointer
  if (data?.szIconExe !== undefined) view.setBigUint64(80, data.szIconExe === null ? 0n : BigInt(util.toPointer(data.szIconExe)), true);
  // 0x58: i32
  if (data?.cchIconExe !== undefined) view.setInt32(88, Number(data.cchIconExe), true);
  // 0x5c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Ole.OLEUICHANGEICONA (size: 96)
 */
export interface OLEUICHANGEICONA {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HWND */
  hWndOwner: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  lpszCaption: string | null;
  /** Windows.Win32.System.Ole.LPFNOLEUIHOOK */
  lpfnHook: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  lpszTemplate: string | null;
  /** Windows.Win32.Foundation.HRSRC */
  hResource: Uint8Array | Deno.PointerValue | null;
  /** isize */
  hMetaPict: Deno.PointerValue;
  /** System.Guid */
  clsid: Uint8Array | Deno.PointerValue | null;
  /** array */
  szIconExe: Deno.PointerValue | null;
  /** i32 */
  cchIconExe: number;
}

export const sizeofOLEUICHANGEICONA = 96;

export function allocOLEUICHANGEICONA(data?: Partial<OLEUICHANGEICONA>): Uint8Array {
  const buf = new Uint8Array(sizeofOLEUICHANGEICONA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.hWndOwner !== undefined) view.setBigUint64(8, data.hWndOwner === null ? 0n : BigInt(util.toPointer(data.hWndOwner)), true);
  // 0x10: buffer
  if (data?.lpszCaption !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpszCaption);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(24, data.lpfnHook === null ? 0n : BigInt(util.toPointer(data.lpfnHook)), true);
  // 0x20: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(32, data.lCustData === null ? 0n : BigInt(util.toPointer(data.lCustData)), true);
  // 0x28: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(40, data.hInstance === null ? 0n : BigInt(util.toPointer(data.hInstance)), true);
  // 0x30: buffer
  if (data?.lpszTemplate !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.lpszTemplate);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: pointer
  if (data?.hResource !== undefined) view.setBigUint64(56, data.hResource === null ? 0n : BigInt(util.toPointer(data.hResource)), true);
  // 0x40: isize
  if (data?.hMetaPict !== undefined) view.setBigInt64(64, BigInt(data.hMetaPict), true);
  // 0x48: pointer
  if (data?.clsid !== undefined) view.setBigUint64(72, data.clsid === null ? 0n : BigInt(util.toPointer(data.clsid)), true);
  // 0x50: pointer
  if (data?.szIconExe !== undefined) view.setBigUint64(80, data.szIconExe === null ? 0n : BigInt(util.toPointer(data.szIconExe)), true);
  // 0x58: i32
  if (data?.cchIconExe !== undefined) view.setInt32(88, Number(data.cchIconExe), true);
  // 0x5c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Ole.OLEUICONVERTW (size: 160)
 */
export interface OLEUICONVERTW {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HWND */
  hWndOwner: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpszCaption: string | null;
  /** Windows.Win32.System.Ole.LPFNOLEUIHOOK */
  lpfnHook: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpszTemplate: string | null;
  /** Windows.Win32.Foundation.HRSRC */
  hResource: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  clsid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  clsidConvertDefault: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  clsidActivateDefault: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  clsidNew: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dvAspect: number;
  /** u16 */
  wFormat: number;
  /** Windows.Win32.Foundation.BOOL */
  fIsLinkedObject: boolean;
  /** isize */
  hMetaPict: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpszUserType: string | null;
  /** Windows.Win32.Foundation.BOOL */
  fObjectsIconChanged: boolean;
  /** Windows.Win32.Foundation.PWSTR */
  lpszDefLabel: string | null;
  /** u32 */
  cClsidExclude: number;
  /** ptr */
  lpClsidExclude: Deno.PointerValue | Uint8Array | null;
}

export const sizeofOLEUICONVERTW = 160;

export function allocOLEUICONVERTW(data?: Partial<OLEUICONVERTW>): Uint8Array {
  const buf = new Uint8Array(sizeofOLEUICONVERTW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.hWndOwner !== undefined) view.setBigUint64(8, data.hWndOwner === null ? 0n : BigInt(util.toPointer(data.hWndOwner)), true);
  // 0x10: buffer
  if (data?.lpszCaption !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpszCaption);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(24, data.lpfnHook === null ? 0n : BigInt(util.toPointer(data.lpfnHook)), true);
  // 0x20: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(32, data.lCustData === null ? 0n : BigInt(util.toPointer(data.lCustData)), true);
  // 0x28: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(40, data.hInstance === null ? 0n : BigInt(util.toPointer(data.hInstance)), true);
  // 0x30: buffer
  if (data?.lpszTemplate !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.lpszTemplate);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: pointer
  if (data?.hResource !== undefined) view.setBigUint64(56, data.hResource === null ? 0n : BigInt(util.toPointer(data.hResource)), true);
  // 0x40: pointer
  if (data?.clsid !== undefined) view.setBigUint64(64, data.clsid === null ? 0n : BigInt(util.toPointer(data.clsid)), true);
  // 0x48: pointer
  if (data?.clsidConvertDefault !== undefined) view.setBigUint64(72, data.clsidConvertDefault === null ? 0n : BigInt(util.toPointer(data.clsidConvertDefault)), true);
  // 0x50: pointer
  if (data?.clsidActivateDefault !== undefined) view.setBigUint64(80, data.clsidActivateDefault === null ? 0n : BigInt(util.toPointer(data.clsidActivateDefault)), true);
  // 0x58: pointer
  if (data?.clsidNew !== undefined) view.setBigUint64(88, data.clsidNew === null ? 0n : BigInt(util.toPointer(data.clsidNew)), true);
  // 0x60: u32
  if (data?.dvAspect !== undefined) view.setUint32(96, Number(data.dvAspect), true);
  // 0x64: u16
  if (data?.wFormat !== undefined) view.setUint16(100, Number(data.wFormat), true);
  // 0x66: i32
  if (data?.fIsLinkedObject !== undefined) view.setInt32(102, Number(data.fIsLinkedObject), true);
  // 0x6a: pad6
  // 0x70: isize
  if (data?.hMetaPict !== undefined) view.setBigInt64(112, BigInt(data.hMetaPict), true);
  // 0x78: buffer
  if (data?.lpszUserType !== undefined) {
    (buf as any)._f120 = util.pwstrToFfi(data.lpszUserType);
    view.setBigUint64(120, (buf as any)._f120 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f120)), true);
  }
  // 0x80: i32
  if (data?.fObjectsIconChanged !== undefined) view.setInt32(128, Number(data.fObjectsIconChanged), true);
  // 0x84: pad4
  // 0x88: buffer
  if (data?.lpszDefLabel !== undefined) {
    (buf as any)._f136 = util.pwstrToFfi(data.lpszDefLabel);
    view.setBigUint64(136, (buf as any)._f136 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f136)), true);
  }
  // 0x90: u32
  if (data?.cClsidExclude !== undefined) view.setUint32(144, Number(data.cClsidExclude), true);
  // 0x94: pad4
  // 0x98: pointer
  if (data?.lpClsidExclude !== undefined) view.setBigUint64(152, data.lpClsidExclude === null ? 0n : BigInt(util.toPointer(data.lpClsidExclude)), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole.OLEUICONVERTA (size: 160)
 */
export interface OLEUICONVERTA {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HWND */
  hWndOwner: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  lpszCaption: string | null;
  /** Windows.Win32.System.Ole.LPFNOLEUIHOOK */
  lpfnHook: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  lpszTemplate: string | null;
  /** Windows.Win32.Foundation.HRSRC */
  hResource: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  clsid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  clsidConvertDefault: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  clsidActivateDefault: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  clsidNew: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dvAspect: number;
  /** u16 */
  wFormat: number;
  /** Windows.Win32.Foundation.BOOL */
  fIsLinkedObject: boolean;
  /** isize */
  hMetaPict: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpszUserType: string | null;
  /** Windows.Win32.Foundation.BOOL */
  fObjectsIconChanged: boolean;
  /** Windows.Win32.Foundation.PSTR */
  lpszDefLabel: string | null;
  /** u32 */
  cClsidExclude: number;
  /** ptr */
  lpClsidExclude: Deno.PointerValue | Uint8Array | null;
}

export const sizeofOLEUICONVERTA = 160;

export function allocOLEUICONVERTA(data?: Partial<OLEUICONVERTA>): Uint8Array {
  const buf = new Uint8Array(sizeofOLEUICONVERTA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.hWndOwner !== undefined) view.setBigUint64(8, data.hWndOwner === null ? 0n : BigInt(util.toPointer(data.hWndOwner)), true);
  // 0x10: buffer
  if (data?.lpszCaption !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpszCaption);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(24, data.lpfnHook === null ? 0n : BigInt(util.toPointer(data.lpfnHook)), true);
  // 0x20: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(32, data.lCustData === null ? 0n : BigInt(util.toPointer(data.lCustData)), true);
  // 0x28: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(40, data.hInstance === null ? 0n : BigInt(util.toPointer(data.hInstance)), true);
  // 0x30: buffer
  if (data?.lpszTemplate !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.lpszTemplate);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: pointer
  if (data?.hResource !== undefined) view.setBigUint64(56, data.hResource === null ? 0n : BigInt(util.toPointer(data.hResource)), true);
  // 0x40: pointer
  if (data?.clsid !== undefined) view.setBigUint64(64, data.clsid === null ? 0n : BigInt(util.toPointer(data.clsid)), true);
  // 0x48: pointer
  if (data?.clsidConvertDefault !== undefined) view.setBigUint64(72, data.clsidConvertDefault === null ? 0n : BigInt(util.toPointer(data.clsidConvertDefault)), true);
  // 0x50: pointer
  if (data?.clsidActivateDefault !== undefined) view.setBigUint64(80, data.clsidActivateDefault === null ? 0n : BigInt(util.toPointer(data.clsidActivateDefault)), true);
  // 0x58: pointer
  if (data?.clsidNew !== undefined) view.setBigUint64(88, data.clsidNew === null ? 0n : BigInt(util.toPointer(data.clsidNew)), true);
  // 0x60: u32
  if (data?.dvAspect !== undefined) view.setUint32(96, Number(data.dvAspect), true);
  // 0x64: u16
  if (data?.wFormat !== undefined) view.setUint16(100, Number(data.wFormat), true);
  // 0x66: i32
  if (data?.fIsLinkedObject !== undefined) view.setInt32(102, Number(data.fIsLinkedObject), true);
  // 0x6a: pad6
  // 0x70: isize
  if (data?.hMetaPict !== undefined) view.setBigInt64(112, BigInt(data.hMetaPict), true);
  // 0x78: buffer
  if (data?.lpszUserType !== undefined) {
    (buf as any)._f120 = util.pstrToFfi(data.lpszUserType);
    view.setBigUint64(120, (buf as any)._f120 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f120)), true);
  }
  // 0x80: i32
  if (data?.fObjectsIconChanged !== undefined) view.setInt32(128, Number(data.fObjectsIconChanged), true);
  // 0x84: pad4
  // 0x88: buffer
  if (data?.lpszDefLabel !== undefined) {
    (buf as any)._f136 = util.pstrToFfi(data.lpszDefLabel);
    view.setBigUint64(136, (buf as any)._f136 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f136)), true);
  }
  // 0x90: u32
  if (data?.cClsidExclude !== undefined) view.setUint32(144, Number(data.cClsidExclude), true);
  // 0x94: pad4
  // 0x98: pointer
  if (data?.lpClsidExclude !== undefined) view.setBigUint64(152, data.lpClsidExclude === null ? 0n : BigInt(util.toPointer(data.lpClsidExclude)), true);
  return buf;
}

export type HTASK = Deno.PointerValue;

/**
 * Windows.Win32.System.Ole.OLEUIBUSYW (size: 80)
 */
export interface OLEUIBUSYW {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HWND */
  hWndOwner: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpszCaption: string | null;
  /** Windows.Win32.System.Ole.LPFNOLEUIHOOK */
  lpfnHook: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpszTemplate: string | null;
  /** Windows.Win32.Foundation.HRSRC */
  hResource: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.HTASK */
  hTask: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lphWndDialog: Deno.PointerValue | Uint8Array | null;
}

export const sizeofOLEUIBUSYW = 80;

export function allocOLEUIBUSYW(data?: Partial<OLEUIBUSYW>): Uint8Array {
  const buf = new Uint8Array(sizeofOLEUIBUSYW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.hWndOwner !== undefined) view.setBigUint64(8, data.hWndOwner === null ? 0n : BigInt(util.toPointer(data.hWndOwner)), true);
  // 0x10: buffer
  if (data?.lpszCaption !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpszCaption);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(24, data.lpfnHook === null ? 0n : BigInt(util.toPointer(data.lpfnHook)), true);
  // 0x20: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(32, data.lCustData === null ? 0n : BigInt(util.toPointer(data.lCustData)), true);
  // 0x28: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(40, data.hInstance === null ? 0n : BigInt(util.toPointer(data.hInstance)), true);
  // 0x30: buffer
  if (data?.lpszTemplate !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.lpszTemplate);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: pointer
  if (data?.hResource !== undefined) view.setBigUint64(56, data.hResource === null ? 0n : BigInt(util.toPointer(data.hResource)), true);
  // 0x40: pointer
  if (data?.hTask !== undefined) view.setBigUint64(64, data.hTask === null ? 0n : BigInt(util.toPointer(data.hTask)), true);
  // 0x48: pointer
  if (data?.lphWndDialog !== undefined) view.setBigUint64(72, data.lphWndDialog === null ? 0n : BigInt(util.toPointer(data.lphWndDialog)), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole.OLEUIBUSYA (size: 80)
 */
export interface OLEUIBUSYA {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HWND */
  hWndOwner: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  lpszCaption: string | null;
  /** Windows.Win32.System.Ole.LPFNOLEUIHOOK */
  lpfnHook: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  lpszTemplate: string | null;
  /** Windows.Win32.Foundation.HRSRC */
  hResource: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.HTASK */
  hTask: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lphWndDialog: Deno.PointerValue | Uint8Array | null;
}

export const sizeofOLEUIBUSYA = 80;

export function allocOLEUIBUSYA(data?: Partial<OLEUIBUSYA>): Uint8Array {
  const buf = new Uint8Array(sizeofOLEUIBUSYA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.hWndOwner !== undefined) view.setBigUint64(8, data.hWndOwner === null ? 0n : BigInt(util.toPointer(data.hWndOwner)), true);
  // 0x10: buffer
  if (data?.lpszCaption !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpszCaption);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(24, data.lpfnHook === null ? 0n : BigInt(util.toPointer(data.lpfnHook)), true);
  // 0x20: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(32, data.lCustData === null ? 0n : BigInt(util.toPointer(data.lCustData)), true);
  // 0x28: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(40, data.hInstance === null ? 0n : BigInt(util.toPointer(data.hInstance)), true);
  // 0x30: buffer
  if (data?.lpszTemplate !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.lpszTemplate);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: pointer
  if (data?.hResource !== undefined) view.setBigUint64(56, data.hResource === null ? 0n : BigInt(util.toPointer(data.hResource)), true);
  // 0x40: pointer
  if (data?.hTask !== undefined) view.setBigUint64(64, data.hTask === null ? 0n : BigInt(util.toPointer(data.hTask)), true);
  // 0x48: pointer
  if (data?.lphWndDialog !== undefined) view.setBigUint64(72, data.lphWndDialog === null ? 0n : BigInt(util.toPointer(data.lphWndDialog)), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole.OLEUICHANGESOURCEW (size: 128)
 */
export interface OLEUICHANGESOURCEW {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HWND */
  hWndOwner: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpszCaption: string | null;
  /** Windows.Win32.System.Ole.LPFNOLEUIHOOK */
  lpfnHook: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpszTemplate: string | null;
  /** Windows.Win32.Foundation.HRSRC */
  hResource: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpOFN: Deno.PointerValue | Uint8Array | null;
  /** array */
  dwReserved1: Deno.PointerValue | null;
  /** Windows.Win32.System.Ole.IOleUILinkContainerW */
  lpOleUILinkContainer: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwLink: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszDisplayName: string | null;
  /** u32 */
  nFileLength: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszFrom: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpszTo: string | null;
}

export const sizeofOLEUICHANGESOURCEW = 128;

export function allocOLEUICHANGESOURCEW(data?: Partial<OLEUICHANGESOURCEW>): Uint8Array {
  const buf = new Uint8Array(sizeofOLEUICHANGESOURCEW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.hWndOwner !== undefined) view.setBigUint64(8, data.hWndOwner === null ? 0n : BigInt(util.toPointer(data.hWndOwner)), true);
  // 0x10: buffer
  if (data?.lpszCaption !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpszCaption);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(24, data.lpfnHook === null ? 0n : BigInt(util.toPointer(data.lpfnHook)), true);
  // 0x20: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(32, data.lCustData === null ? 0n : BigInt(util.toPointer(data.lCustData)), true);
  // 0x28: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(40, data.hInstance === null ? 0n : BigInt(util.toPointer(data.hInstance)), true);
  // 0x30: buffer
  if (data?.lpszTemplate !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.lpszTemplate);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: pointer
  if (data?.hResource !== undefined) view.setBigUint64(56, data.hResource === null ? 0n : BigInt(util.toPointer(data.hResource)), true);
  // 0x40: pointer
  if (data?.lpOFN !== undefined) view.setBigUint64(64, data.lpOFN === null ? 0n : BigInt(util.toPointer(data.lpOFN)), true);
  // 0x48: pointer
  if (data?.dwReserved1 !== undefined) view.setBigUint64(72, data.dwReserved1 === null ? 0n : BigInt(util.toPointer(data.dwReserved1)), true);
  // 0x50: pointer
  if (data?.lpOleUILinkContainer !== undefined) view.setBigUint64(80, data.lpOleUILinkContainer === null ? 0n : BigInt(util.toPointer(data.lpOleUILinkContainer)), true);
  // 0x58: u32
  if (data?.dwLink !== undefined) view.setUint32(88, Number(data.dwLink), true);
  // 0x5c: pad4
  // 0x60: buffer
  if (data?.lpszDisplayName !== undefined) {
    (buf as any)._f96 = util.pwstrToFfi(data.lpszDisplayName);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f96)), true);
  }
  // 0x68: u32
  if (data?.nFileLength !== undefined) view.setUint32(104, Number(data.nFileLength), true);
  // 0x6c: pad4
  // 0x70: buffer
  if (data?.lpszFrom !== undefined) {
    (buf as any)._f112 = util.pwstrToFfi(data.lpszFrom);
    view.setBigUint64(112, (buf as any)._f112 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f112)), true);
  }
  // 0x78: buffer
  if (data?.lpszTo !== undefined) {
    (buf as any)._f120 = util.pwstrToFfi(data.lpszTo);
    view.setBigUint64(120, (buf as any)._f120 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f120)), true);
  }
  return buf;
}

/**
 * Windows.Win32.System.Ole.OLEUICHANGESOURCEA (size: 128)
 */
export interface OLEUICHANGESOURCEA {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HWND */
  hWndOwner: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  lpszCaption: string | null;
  /** Windows.Win32.System.Ole.LPFNOLEUIHOOK */
  lpfnHook: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  lpszTemplate: string | null;
  /** Windows.Win32.Foundation.HRSRC */
  hResource: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpOFN: Deno.PointerValue | Uint8Array | null;
  /** array */
  dwReserved1: Deno.PointerValue | null;
  /** Windows.Win32.System.Ole.IOleUILinkContainerA */
  lpOleUILinkContainer: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwLink: number;
  /** Windows.Win32.Foundation.PSTR */
  lpszDisplayName: string | null;
  /** u32 */
  nFileLength: number;
  /** Windows.Win32.Foundation.PSTR */
  lpszFrom: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpszTo: string | null;
}

export const sizeofOLEUICHANGESOURCEA = 128;

export function allocOLEUICHANGESOURCEA(data?: Partial<OLEUICHANGESOURCEA>): Uint8Array {
  const buf = new Uint8Array(sizeofOLEUICHANGESOURCEA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.hWndOwner !== undefined) view.setBigUint64(8, data.hWndOwner === null ? 0n : BigInt(util.toPointer(data.hWndOwner)), true);
  // 0x10: buffer
  if (data?.lpszCaption !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpszCaption);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(24, data.lpfnHook === null ? 0n : BigInt(util.toPointer(data.lpfnHook)), true);
  // 0x20: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(32, data.lCustData === null ? 0n : BigInt(util.toPointer(data.lCustData)), true);
  // 0x28: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(40, data.hInstance === null ? 0n : BigInt(util.toPointer(data.hInstance)), true);
  // 0x30: buffer
  if (data?.lpszTemplate !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.lpszTemplate);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: pointer
  if (data?.hResource !== undefined) view.setBigUint64(56, data.hResource === null ? 0n : BigInt(util.toPointer(data.hResource)), true);
  // 0x40: pointer
  if (data?.lpOFN !== undefined) view.setBigUint64(64, data.lpOFN === null ? 0n : BigInt(util.toPointer(data.lpOFN)), true);
  // 0x48: pointer
  if (data?.dwReserved1 !== undefined) view.setBigUint64(72, data.dwReserved1 === null ? 0n : BigInt(util.toPointer(data.dwReserved1)), true);
  // 0x50: pointer
  if (data?.lpOleUILinkContainer !== undefined) view.setBigUint64(80, data.lpOleUILinkContainer === null ? 0n : BigInt(util.toPointer(data.lpOleUILinkContainer)), true);
  // 0x58: u32
  if (data?.dwLink !== undefined) view.setUint32(88, Number(data.dwLink), true);
  // 0x5c: pad4
  // 0x60: buffer
  if (data?.lpszDisplayName !== undefined) {
    (buf as any)._f96 = util.pstrToFfi(data.lpszDisplayName);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f96)), true);
  }
  // 0x68: u32
  if (data?.nFileLength !== undefined) view.setUint32(104, Number(data.nFileLength), true);
  // 0x6c: pad4
  // 0x70: buffer
  if (data?.lpszFrom !== undefined) {
    (buf as any)._f112 = util.pstrToFfi(data.lpszFrom);
    view.setBigUint64(112, (buf as any)._f112 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f112)), true);
  }
  // 0x78: buffer
  if (data?.lpszTo !== undefined) {
    (buf as any)._f120 = util.pstrToFfi(data.lpszTo);
    view.setBigUint64(120, (buf as any)._f120 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f120)), true);
  }
  return buf;
}

/**
 * Windows.Win32.System.Ole.OLEUIGNRLPROPSW (size: 48)
 */
export interface OLEUIGNRLPROPSW {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFlags: number;
  /** array */
  dwReserved1: Deno.PointerValue | null;
  /** Windows.Win32.System.Ole.LPFNOLEUIHOOK */
  lpfnHook: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue | null;
  /** array */
  dwReserved2: Deno.PointerValue | null;
  /** ptr */
  lpOP: Deno.PointerValue | Uint8Array | null;
}

export const sizeofOLEUIGNRLPROPSW = 48;

export function allocOLEUIGNRLPROPSW(data?: Partial<OLEUIGNRLPROPSW>): Uint8Array {
  const buf = new Uint8Array(sizeofOLEUIGNRLPROPSW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.dwReserved1 !== undefined) view.setBigUint64(8, data.dwReserved1 === null ? 0n : BigInt(util.toPointer(data.dwReserved1)), true);
  // 0x10: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(16, data.lpfnHook === null ? 0n : BigInt(util.toPointer(data.lpfnHook)), true);
  // 0x18: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(24, data.lCustData === null ? 0n : BigInt(util.toPointer(data.lCustData)), true);
  // 0x20: pointer
  if (data?.dwReserved2 !== undefined) view.setBigUint64(32, data.dwReserved2 === null ? 0n : BigInt(util.toPointer(data.dwReserved2)), true);
  // 0x28: pointer
  if (data?.lpOP !== undefined) view.setBigUint64(40, data.lpOP === null ? 0n : BigInt(util.toPointer(data.lpOP)), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole.OLEUIGNRLPROPSA (size: 48)
 */
export interface OLEUIGNRLPROPSA {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFlags: number;
  /** array */
  dwReserved1: Deno.PointerValue | null;
  /** Windows.Win32.System.Ole.LPFNOLEUIHOOK */
  lpfnHook: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue | null;
  /** array */
  dwReserved2: Deno.PointerValue | null;
  /** ptr */
  lpOP: Deno.PointerValue | Uint8Array | null;
}

export const sizeofOLEUIGNRLPROPSA = 48;

export function allocOLEUIGNRLPROPSA(data?: Partial<OLEUIGNRLPROPSA>): Uint8Array {
  const buf = new Uint8Array(sizeofOLEUIGNRLPROPSA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.dwReserved1 !== undefined) view.setBigUint64(8, data.dwReserved1 === null ? 0n : BigInt(util.toPointer(data.dwReserved1)), true);
  // 0x10: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(16, data.lpfnHook === null ? 0n : BigInt(util.toPointer(data.lpfnHook)), true);
  // 0x18: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(24, data.lCustData === null ? 0n : BigInt(util.toPointer(data.lCustData)), true);
  // 0x20: pointer
  if (data?.dwReserved2 !== undefined) view.setBigUint64(32, data.dwReserved2 === null ? 0n : BigInt(util.toPointer(data.dwReserved2)), true);
  // 0x28: pointer
  if (data?.lpOP !== undefined) view.setBigUint64(40, data.lpOP === null ? 0n : BigInt(util.toPointer(data.lpOP)), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole.OLEUIVIEWPROPSW (size: 56)
 */
export interface OLEUIVIEWPROPSW {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFlags: number;
  /** array */
  dwReserved1: Deno.PointerValue | null;
  /** Windows.Win32.System.Ole.LPFNOLEUIHOOK */
  lpfnHook: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue | null;
  /** array */
  dwReserved2: Deno.PointerValue | null;
  /** ptr */
  lpOP: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  nScaleMin: number;
  /** i32 */
  nScaleMax: number;
}

export const sizeofOLEUIVIEWPROPSW = 56;

export function allocOLEUIVIEWPROPSW(data?: Partial<OLEUIVIEWPROPSW>): Uint8Array {
  const buf = new Uint8Array(sizeofOLEUIVIEWPROPSW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.dwReserved1 !== undefined) view.setBigUint64(8, data.dwReserved1 === null ? 0n : BigInt(util.toPointer(data.dwReserved1)), true);
  // 0x10: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(16, data.lpfnHook === null ? 0n : BigInt(util.toPointer(data.lpfnHook)), true);
  // 0x18: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(24, data.lCustData === null ? 0n : BigInt(util.toPointer(data.lCustData)), true);
  // 0x20: pointer
  if (data?.dwReserved2 !== undefined) view.setBigUint64(32, data.dwReserved2 === null ? 0n : BigInt(util.toPointer(data.dwReserved2)), true);
  // 0x28: pointer
  if (data?.lpOP !== undefined) view.setBigUint64(40, data.lpOP === null ? 0n : BigInt(util.toPointer(data.lpOP)), true);
  // 0x30: i32
  if (data?.nScaleMin !== undefined) view.setInt32(48, Number(data.nScaleMin), true);
  // 0x34: i32
  if (data?.nScaleMax !== undefined) view.setInt32(52, Number(data.nScaleMax), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole.OLEUIVIEWPROPSA (size: 56)
 */
export interface OLEUIVIEWPROPSA {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFlags: number;
  /** array */
  dwReserved1: Deno.PointerValue | null;
  /** Windows.Win32.System.Ole.LPFNOLEUIHOOK */
  lpfnHook: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue | null;
  /** array */
  dwReserved2: Deno.PointerValue | null;
  /** ptr */
  lpOP: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  nScaleMin: number;
  /** i32 */
  nScaleMax: number;
}

export const sizeofOLEUIVIEWPROPSA = 56;

export function allocOLEUIVIEWPROPSA(data?: Partial<OLEUIVIEWPROPSA>): Uint8Array {
  const buf = new Uint8Array(sizeofOLEUIVIEWPROPSA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.dwReserved1 !== undefined) view.setBigUint64(8, data.dwReserved1 === null ? 0n : BigInt(util.toPointer(data.dwReserved1)), true);
  // 0x10: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(16, data.lpfnHook === null ? 0n : BigInt(util.toPointer(data.lpfnHook)), true);
  // 0x18: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(24, data.lCustData === null ? 0n : BigInt(util.toPointer(data.lCustData)), true);
  // 0x20: pointer
  if (data?.dwReserved2 !== undefined) view.setBigUint64(32, data.dwReserved2 === null ? 0n : BigInt(util.toPointer(data.dwReserved2)), true);
  // 0x28: pointer
  if (data?.lpOP !== undefined) view.setBigUint64(40, data.lpOP === null ? 0n : BigInt(util.toPointer(data.lpOP)), true);
  // 0x30: i32
  if (data?.nScaleMin !== undefined) view.setInt32(48, Number(data.nScaleMin), true);
  // 0x34: i32
  if (data?.nScaleMax !== undefined) view.setInt32(52, Number(data.nScaleMax), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole.OLEUILINKPROPSW (size: 48)
 */
export interface OLEUILINKPROPSW {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFlags: number;
  /** array */
  dwReserved1: Deno.PointerValue | null;
  /** Windows.Win32.System.Ole.LPFNOLEUIHOOK */
  lpfnHook: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue | null;
  /** array */
  dwReserved2: Deno.PointerValue | null;
  /** ptr */
  lpOP: Deno.PointerValue | Uint8Array | null;
}

export const sizeofOLEUILINKPROPSW = 48;

export function allocOLEUILINKPROPSW(data?: Partial<OLEUILINKPROPSW>): Uint8Array {
  const buf = new Uint8Array(sizeofOLEUILINKPROPSW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.dwReserved1 !== undefined) view.setBigUint64(8, data.dwReserved1 === null ? 0n : BigInt(util.toPointer(data.dwReserved1)), true);
  // 0x10: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(16, data.lpfnHook === null ? 0n : BigInt(util.toPointer(data.lpfnHook)), true);
  // 0x18: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(24, data.lCustData === null ? 0n : BigInt(util.toPointer(data.lCustData)), true);
  // 0x20: pointer
  if (data?.dwReserved2 !== undefined) view.setBigUint64(32, data.dwReserved2 === null ? 0n : BigInt(util.toPointer(data.dwReserved2)), true);
  // 0x28: pointer
  if (data?.lpOP !== undefined) view.setBigUint64(40, data.lpOP === null ? 0n : BigInt(util.toPointer(data.lpOP)), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole.OLEUILINKPROPSA (size: 48)
 */
export interface OLEUILINKPROPSA {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFlags: number;
  /** array */
  dwReserved1: Deno.PointerValue | null;
  /** Windows.Win32.System.Ole.LPFNOLEUIHOOK */
  lpfnHook: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue | null;
  /** array */
  dwReserved2: Deno.PointerValue | null;
  /** ptr */
  lpOP: Deno.PointerValue | Uint8Array | null;
}

export const sizeofOLEUILINKPROPSA = 48;

export function allocOLEUILINKPROPSA(data?: Partial<OLEUILINKPROPSA>): Uint8Array {
  const buf = new Uint8Array(sizeofOLEUILINKPROPSA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.dwReserved1 !== undefined) view.setBigUint64(8, data.dwReserved1 === null ? 0n : BigInt(util.toPointer(data.dwReserved1)), true);
  // 0x10: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(16, data.lpfnHook === null ? 0n : BigInt(util.toPointer(data.lpfnHook)), true);
  // 0x18: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(24, data.lCustData === null ? 0n : BigInt(util.toPointer(data.lCustData)), true);
  // 0x20: pointer
  if (data?.dwReserved2 !== undefined) view.setBigUint64(32, data.dwReserved2 === null ? 0n : BigInt(util.toPointer(data.dwReserved2)), true);
  // 0x28: pointer
  if (data?.lpOP !== undefined) view.setBigUint64(40, data.lpOP === null ? 0n : BigInt(util.toPointer(data.lpOP)), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole.OLEUIOBJECTPROPSW (size: 72)
 */
export interface OLEUIOBJECTPROPSW {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFlags: number;
  /** ptr */
  lpPS: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwObject: number;
  /** Windows.Win32.System.Ole.IOleUIObjInfoW */
  lpObjInfo: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwLink: number;
  /** Windows.Win32.System.Ole.IOleUILinkInfoW */
  lpLinkInfo: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpGP: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpVP: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpLP: Deno.PointerValue | Uint8Array | null;
}

export const sizeofOLEUIOBJECTPROPSW = 72;

export function allocOLEUIOBJECTPROPSW(data?: Partial<OLEUIOBJECTPROPSW>): Uint8Array {
  const buf = new Uint8Array(sizeofOLEUIOBJECTPROPSW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.lpPS !== undefined) view.setBigUint64(8, data.lpPS === null ? 0n : BigInt(util.toPointer(data.lpPS)), true);
  // 0x10: u32
  if (data?.dwObject !== undefined) view.setUint32(16, Number(data.dwObject), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lpObjInfo !== undefined) view.setBigUint64(24, data.lpObjInfo === null ? 0n : BigInt(util.toPointer(data.lpObjInfo)), true);
  // 0x20: u32
  if (data?.dwLink !== undefined) view.setUint32(32, Number(data.dwLink), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.lpLinkInfo !== undefined) view.setBigUint64(40, data.lpLinkInfo === null ? 0n : BigInt(util.toPointer(data.lpLinkInfo)), true);
  // 0x30: pointer
  if (data?.lpGP !== undefined) view.setBigUint64(48, data.lpGP === null ? 0n : BigInt(util.toPointer(data.lpGP)), true);
  // 0x38: pointer
  if (data?.lpVP !== undefined) view.setBigUint64(56, data.lpVP === null ? 0n : BigInt(util.toPointer(data.lpVP)), true);
  // 0x40: pointer
  if (data?.lpLP !== undefined) view.setBigUint64(64, data.lpLP === null ? 0n : BigInt(util.toPointer(data.lpLP)), true);
  return buf;
}

/**
 * Windows.Win32.System.Ole.OLEUIOBJECTPROPSA (size: 72)
 */
export interface OLEUIOBJECTPROPSA {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFlags: number;
  /** ptr */
  lpPS: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwObject: number;
  /** Windows.Win32.System.Ole.IOleUIObjInfoA */
  lpObjInfo: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwLink: number;
  /** Windows.Win32.System.Ole.IOleUILinkInfoA */
  lpLinkInfo: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpGP: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpVP: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpLP: Deno.PointerValue | Uint8Array | null;
}

export const sizeofOLEUIOBJECTPROPSA = 72;

export function allocOLEUIOBJECTPROPSA(data?: Partial<OLEUIOBJECTPROPSA>): Uint8Array {
  const buf = new Uint8Array(sizeofOLEUIOBJECTPROPSA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.lpPS !== undefined) view.setBigUint64(8, data.lpPS === null ? 0n : BigInt(util.toPointer(data.lpPS)), true);
  // 0x10: u32
  if (data?.dwObject !== undefined) view.setUint32(16, Number(data.dwObject), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lpObjInfo !== undefined) view.setBigUint64(24, data.lpObjInfo === null ? 0n : BigInt(util.toPointer(data.lpObjInfo)), true);
  // 0x20: u32
  if (data?.dwLink !== undefined) view.setUint32(32, Number(data.dwLink), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.lpLinkInfo !== undefined) view.setBigUint64(40, data.lpLinkInfo === null ? 0n : BigInt(util.toPointer(data.lpLinkInfo)), true);
  // 0x30: pointer
  if (data?.lpGP !== undefined) view.setBigUint64(48, data.lpGP === null ? 0n : BigInt(util.toPointer(data.lpGP)), true);
  // 0x38: pointer
  if (data?.lpVP !== undefined) view.setBigUint64(56, data.lpVP === null ? 0n : BigInt(util.toPointer(data.lpVP)), true);
  // 0x40: pointer
  if (data?.lpLP !== undefined) view.setBigUint64(64, data.lpLP === null ? 0n : BigInt(util.toPointer(data.lpLP)), true);
  return buf;
}

export type HRESULT = number;

export type BSTR = Deno.PointerValue | Uint8Array | null;

export type CHAR = number;

export type HMENU = Deno.PointerValue;

export type HANDLE = Deno.PointerValue;

export type HDC = Deno.PointerValue;

export type HICON = Deno.PointerValue;

export type HCURSOR = Deno.PointerValue;

// Native Libraries

try {
  var libOLEAUT32 = Deno.dlopen("OLEAUT32", {
    DosDateTimeToVariantTime: {
      parameters: ["u16", "u16", "pointer"],
      result: "i32",
    },
    VariantTimeToDosDateTime: {
      parameters: ["f64", "pointer", "pointer"],
      result: "i32",
    },
    SystemTimeToVariantTime: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    VariantTimeToSystemTime: {
      parameters: ["f64", "pointer"],
      result: "i32",
    },
    SafeArrayAllocDescriptor: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    SafeArrayAllocDescriptorEx: {
      parameters: ["u16", "u32", "pointer"],
      result: "pointer",
    },
    SafeArrayAllocData: {
      parameters: ["pointer"],
      result: "pointer",
    },
    SafeArrayCreate: {
      parameters: ["u16", "u32", "pointer"],
      result: "pointer",
    },
    SafeArrayCreateEx: {
      parameters: ["u16", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    SafeArrayCopyData: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    SafeArrayReleaseDescriptor: {
      parameters: ["pointer"],
      result: "void",
    },
    SafeArrayDestroyDescriptor: {
      parameters: ["pointer"],
      result: "pointer",
    },
    SafeArrayReleaseData: {
      parameters: ["pointer"],
      result: "void",
    },
    SafeArrayDestroyData: {
      parameters: ["pointer"],
      result: "pointer",
    },
    SafeArrayAddRef: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    SafeArrayDestroy: {
      parameters: ["pointer"],
      result: "pointer",
    },
    SafeArrayRedim: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    SafeArrayGetDim: {
      parameters: ["pointer"],
      result: "u32",
    },
    SafeArrayGetElemsize: {
      parameters: ["pointer"],
      result: "u32",
    },
    SafeArrayGetUBound: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    SafeArrayGetLBound: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    SafeArrayLock: {
      parameters: ["pointer"],
      result: "pointer",
    },
    SafeArrayUnlock: {
      parameters: ["pointer"],
      result: "pointer",
    },
    SafeArrayAccessData: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    SafeArrayUnaccessData: {
      parameters: ["pointer"],
      result: "pointer",
    },
    SafeArrayGetElement: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SafeArrayPutElement: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SafeArrayCopy: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    SafeArrayPtrOfIndex: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SafeArraySetRecordInfo: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    SafeArrayGetRecordInfo: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    SafeArraySetIID: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    SafeArrayGetIID: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    SafeArrayGetVartype: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    SafeArrayCreateVector: {
      parameters: ["u16", "i32", "u32"],
      result: "pointer",
    },
    SafeArrayCreateVectorEx: {
      parameters: ["u16", "i32", "u32", "pointer"],
      result: "pointer",
    },
    VariantInit: {
      parameters: ["pointer"],
      result: "void",
    },
    VariantClear: {
      parameters: ["pointer"],
      result: "pointer",
    },
    VariantCopy: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VariantCopyInd: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VariantChangeType: {
      parameters: ["pointer", "pointer", "u16", "u16"],
      result: "pointer",
    },
    VariantChangeTypeEx: {
      parameters: ["pointer", "pointer", "u32", "u16", "u16"],
      result: "pointer",
    },
    VectorFromBstr: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    BstrFromVector: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarUI1FromI2: {
      parameters: ["i16", "pointer"],
      result: "pointer",
    },
    VarUI1FromI4: {
      parameters: ["i32", "pointer"],
      result: "pointer",
    },
    VarUI1FromI8: {
      parameters: ["i64", "pointer"],
      result: "pointer",
    },
    VarUI1FromR4: {
      parameters: ["f32", "pointer"],
      result: "pointer",
    },
    VarUI1FromR8: {
      parameters: ["f64", "pointer"],
      result: "pointer",
    },
    VarUI1FromCy: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarUI1FromDate: {
      parameters: ["f64", "pointer"],
      result: "pointer",
    },
    VarUI1FromStr: {
      parameters: ["buffer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    VarUI1FromDisp: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    VarUI1FromBool: {
      parameters: ["i16", "pointer"],
      result: "pointer",
    },
    VarUI1FromI1: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarUI1FromUI2: {
      parameters: ["u16", "pointer"],
      result: "pointer",
    },
    VarUI1FromUI4: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    VarUI1FromUI8: {
      parameters: ["u64", "pointer"],
      result: "pointer",
    },
    VarUI1FromDec: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarI2FromUI1: {
      parameters: ["u8", "pointer"],
      result: "pointer",
    },
    VarI2FromI4: {
      parameters: ["i32", "pointer"],
      result: "pointer",
    },
    VarI2FromI8: {
      parameters: ["i64", "pointer"],
      result: "pointer",
    },
    VarI2FromR4: {
      parameters: ["f32", "pointer"],
      result: "pointer",
    },
    VarI2FromR8: {
      parameters: ["f64", "pointer"],
      result: "pointer",
    },
    VarI2FromCy: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarI2FromDate: {
      parameters: ["f64", "pointer"],
      result: "pointer",
    },
    VarI2FromStr: {
      parameters: ["buffer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    VarI2FromDisp: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    VarI2FromBool: {
      parameters: ["i16", "pointer"],
      result: "pointer",
    },
    VarI2FromI1: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarI2FromUI2: {
      parameters: ["u16", "pointer"],
      result: "pointer",
    },
    VarI2FromUI4: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    VarI2FromUI8: {
      parameters: ["u64", "pointer"],
      result: "pointer",
    },
    VarI2FromDec: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarI4FromUI1: {
      parameters: ["u8", "pointer"],
      result: "pointer",
    },
    VarI4FromI2: {
      parameters: ["i16", "pointer"],
      result: "pointer",
    },
    VarI4FromI8: {
      parameters: ["i64", "pointer"],
      result: "pointer",
    },
    VarI4FromR4: {
      parameters: ["f32", "pointer"],
      result: "pointer",
    },
    VarI4FromR8: {
      parameters: ["f64", "pointer"],
      result: "pointer",
    },
    VarI4FromCy: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarI4FromDate: {
      parameters: ["f64", "pointer"],
      result: "pointer",
    },
    VarI4FromStr: {
      parameters: ["buffer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    VarI4FromDisp: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    VarI4FromBool: {
      parameters: ["i16", "pointer"],
      result: "pointer",
    },
    VarI4FromI1: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarI4FromUI2: {
      parameters: ["u16", "pointer"],
      result: "pointer",
    },
    VarI4FromUI4: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    VarI4FromUI8: {
      parameters: ["u64", "pointer"],
      result: "pointer",
    },
    VarI4FromDec: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarI8FromUI1: {
      parameters: ["u8", "pointer"],
      result: "pointer",
    },
    VarI8FromI2: {
      parameters: ["i16", "pointer"],
      result: "pointer",
    },
    VarI8FromR4: {
      parameters: ["f32", "pointer"],
      result: "pointer",
    },
    VarI8FromR8: {
      parameters: ["f64", "pointer"],
      result: "pointer",
    },
    VarI8FromCy: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarI8FromDate: {
      parameters: ["f64", "pointer"],
      result: "pointer",
    },
    VarI8FromStr: {
      parameters: ["buffer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    VarI8FromDisp: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    VarI8FromBool: {
      parameters: ["i16", "pointer"],
      result: "pointer",
    },
    VarI8FromI1: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarI8FromUI2: {
      parameters: ["u16", "pointer"],
      result: "pointer",
    },
    VarI8FromUI4: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    VarI8FromUI8: {
      parameters: ["u64", "pointer"],
      result: "pointer",
    },
    VarI8FromDec: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarR4FromUI1: {
      parameters: ["u8", "pointer"],
      result: "pointer",
    },
    VarR4FromI2: {
      parameters: ["i16", "pointer"],
      result: "pointer",
    },
    VarR4FromI4: {
      parameters: ["i32", "pointer"],
      result: "pointer",
    },
    VarR4FromI8: {
      parameters: ["i64", "pointer"],
      result: "pointer",
    },
    VarR4FromR8: {
      parameters: ["f64", "pointer"],
      result: "pointer",
    },
    VarR4FromCy: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarR4FromDate: {
      parameters: ["f64", "pointer"],
      result: "pointer",
    },
    VarR4FromStr: {
      parameters: ["buffer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    VarR4FromDisp: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    VarR4FromBool: {
      parameters: ["i16", "pointer"],
      result: "pointer",
    },
    VarR4FromI1: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarR4FromUI2: {
      parameters: ["u16", "pointer"],
      result: "pointer",
    },
    VarR4FromUI4: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    VarR4FromUI8: {
      parameters: ["u64", "pointer"],
      result: "pointer",
    },
    VarR4FromDec: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarR8FromUI1: {
      parameters: ["u8", "pointer"],
      result: "pointer",
    },
    VarR8FromI2: {
      parameters: ["i16", "pointer"],
      result: "pointer",
    },
    VarR8FromI4: {
      parameters: ["i32", "pointer"],
      result: "pointer",
    },
    VarR8FromI8: {
      parameters: ["i64", "pointer"],
      result: "pointer",
    },
    VarR8FromR4: {
      parameters: ["f32", "pointer"],
      result: "pointer",
    },
    VarR8FromCy: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarR8FromDate: {
      parameters: ["f64", "pointer"],
      result: "pointer",
    },
    VarR8FromStr: {
      parameters: ["buffer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    VarR8FromDisp: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    VarR8FromBool: {
      parameters: ["i16", "pointer"],
      result: "pointer",
    },
    VarR8FromI1: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarR8FromUI2: {
      parameters: ["u16", "pointer"],
      result: "pointer",
    },
    VarR8FromUI4: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    VarR8FromUI8: {
      parameters: ["u64", "pointer"],
      result: "pointer",
    },
    VarR8FromDec: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarDateFromUI1: {
      parameters: ["u8", "pointer"],
      result: "pointer",
    },
    VarDateFromI2: {
      parameters: ["i16", "pointer"],
      result: "pointer",
    },
    VarDateFromI4: {
      parameters: ["i32", "pointer"],
      result: "pointer",
    },
    VarDateFromI8: {
      parameters: ["i64", "pointer"],
      result: "pointer",
    },
    VarDateFromR4: {
      parameters: ["f32", "pointer"],
      result: "pointer",
    },
    VarDateFromR8: {
      parameters: ["f64", "pointer"],
      result: "pointer",
    },
    VarDateFromCy: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarDateFromStr: {
      parameters: ["buffer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    VarDateFromDisp: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    VarDateFromBool: {
      parameters: ["i16", "pointer"],
      result: "pointer",
    },
    VarDateFromI1: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarDateFromUI2: {
      parameters: ["u16", "pointer"],
      result: "pointer",
    },
    VarDateFromUI4: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    VarDateFromUI8: {
      parameters: ["u64", "pointer"],
      result: "pointer",
    },
    VarDateFromDec: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarCyFromUI1: {
      parameters: ["u8", "pointer"],
      result: "pointer",
    },
    VarCyFromI2: {
      parameters: ["i16", "pointer"],
      result: "pointer",
    },
    VarCyFromI4: {
      parameters: ["i32", "pointer"],
      result: "pointer",
    },
    VarCyFromI8: {
      parameters: ["i64", "pointer"],
      result: "pointer",
    },
    VarCyFromR4: {
      parameters: ["f32", "pointer"],
      result: "pointer",
    },
    VarCyFromR8: {
      parameters: ["f64", "pointer"],
      result: "pointer",
    },
    VarCyFromDate: {
      parameters: ["f64", "pointer"],
      result: "pointer",
    },
    VarCyFromStr: {
      parameters: ["buffer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    VarCyFromDisp: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    VarCyFromBool: {
      parameters: ["i16", "pointer"],
      result: "pointer",
    },
    VarCyFromI1: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarCyFromUI2: {
      parameters: ["u16", "pointer"],
      result: "pointer",
    },
    VarCyFromUI4: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    VarCyFromUI8: {
      parameters: ["u64", "pointer"],
      result: "pointer",
    },
    VarCyFromDec: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarBstrFromUI1: {
      parameters: ["u8", "u32", "u32", "pointer"],
      result: "pointer",
    },
    VarBstrFromI2: {
      parameters: ["i16", "u32", "u32", "pointer"],
      result: "pointer",
    },
    VarBstrFromI4: {
      parameters: ["i32", "u32", "u32", "pointer"],
      result: "pointer",
    },
    VarBstrFromI8: {
      parameters: ["i64", "u32", "u32", "pointer"],
      result: "pointer",
    },
    VarBstrFromR4: {
      parameters: ["f32", "u32", "u32", "pointer"],
      result: "pointer",
    },
    VarBstrFromR8: {
      parameters: ["f64", "u32", "u32", "pointer"],
      result: "pointer",
    },
    VarBstrFromCy: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    VarBstrFromDate: {
      parameters: ["f64", "u32", "u32", "pointer"],
      result: "pointer",
    },
    VarBstrFromDisp: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    VarBstrFromBool: {
      parameters: ["i16", "u32", "u32", "pointer"],
      result: "pointer",
    },
    VarBstrFromI1: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    VarBstrFromUI2: {
      parameters: ["u16", "u32", "u32", "pointer"],
      result: "pointer",
    },
    VarBstrFromUI4: {
      parameters: ["u32", "u32", "u32", "pointer"],
      result: "pointer",
    },
    VarBstrFromUI8: {
      parameters: ["u64", "u32", "u32", "pointer"],
      result: "pointer",
    },
    VarBstrFromDec: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    VarBoolFromUI1: {
      parameters: ["u8", "pointer"],
      result: "pointer",
    },
    VarBoolFromI2: {
      parameters: ["i16", "pointer"],
      result: "pointer",
    },
    VarBoolFromI4: {
      parameters: ["i32", "pointer"],
      result: "pointer",
    },
    VarBoolFromI8: {
      parameters: ["i64", "pointer"],
      result: "pointer",
    },
    VarBoolFromR4: {
      parameters: ["f32", "pointer"],
      result: "pointer",
    },
    VarBoolFromR8: {
      parameters: ["f64", "pointer"],
      result: "pointer",
    },
    VarBoolFromDate: {
      parameters: ["f64", "pointer"],
      result: "pointer",
    },
    VarBoolFromCy: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarBoolFromStr: {
      parameters: ["buffer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    VarBoolFromDisp: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    VarBoolFromI1: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarBoolFromUI2: {
      parameters: ["u16", "pointer"],
      result: "pointer",
    },
    VarBoolFromUI4: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    VarBoolFromUI8: {
      parameters: ["u64", "pointer"],
      result: "pointer",
    },
    VarBoolFromDec: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarI1FromUI1: {
      parameters: ["u8", "buffer"],
      result: "pointer",
    },
    VarI1FromI2: {
      parameters: ["i16", "buffer"],
      result: "pointer",
    },
    VarI1FromI4: {
      parameters: ["i32", "buffer"],
      result: "pointer",
    },
    VarI1FromI8: {
      parameters: ["i64", "buffer"],
      result: "pointer",
    },
    VarI1FromR4: {
      parameters: ["f32", "buffer"],
      result: "pointer",
    },
    VarI1FromR8: {
      parameters: ["f64", "buffer"],
      result: "pointer",
    },
    VarI1FromDate: {
      parameters: ["f64", "buffer"],
      result: "pointer",
    },
    VarI1FromCy: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    VarI1FromStr: {
      parameters: ["buffer", "u32", "u32", "buffer"],
      result: "pointer",
    },
    VarI1FromDisp: {
      parameters: ["pointer", "u32", "buffer"],
      result: "pointer",
    },
    VarI1FromBool: {
      parameters: ["i16", "buffer"],
      result: "pointer",
    },
    VarI1FromUI2: {
      parameters: ["u16", "buffer"],
      result: "pointer",
    },
    VarI1FromUI4: {
      parameters: ["u32", "buffer"],
      result: "pointer",
    },
    VarI1FromUI8: {
      parameters: ["u64", "buffer"],
      result: "pointer",
    },
    VarI1FromDec: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    VarUI2FromUI1: {
      parameters: ["u8", "pointer"],
      result: "pointer",
    },
    VarUI2FromI2: {
      parameters: ["i16", "pointer"],
      result: "pointer",
    },
    VarUI2FromI4: {
      parameters: ["i32", "pointer"],
      result: "pointer",
    },
    VarUI2FromI8: {
      parameters: ["i64", "pointer"],
      result: "pointer",
    },
    VarUI2FromR4: {
      parameters: ["f32", "pointer"],
      result: "pointer",
    },
    VarUI2FromR8: {
      parameters: ["f64", "pointer"],
      result: "pointer",
    },
    VarUI2FromDate: {
      parameters: ["f64", "pointer"],
      result: "pointer",
    },
    VarUI2FromCy: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarUI2FromStr: {
      parameters: ["buffer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    VarUI2FromDisp: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    VarUI2FromBool: {
      parameters: ["i16", "pointer"],
      result: "pointer",
    },
    VarUI2FromI1: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarUI2FromUI4: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    VarUI2FromUI8: {
      parameters: ["u64", "pointer"],
      result: "pointer",
    },
    VarUI2FromDec: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarUI4FromUI1: {
      parameters: ["u8", "pointer"],
      result: "pointer",
    },
    VarUI4FromI2: {
      parameters: ["i16", "pointer"],
      result: "pointer",
    },
    VarUI4FromI4: {
      parameters: ["i32", "pointer"],
      result: "pointer",
    },
    VarUI4FromI8: {
      parameters: ["i64", "pointer"],
      result: "pointer",
    },
    VarUI4FromR4: {
      parameters: ["f32", "pointer"],
      result: "pointer",
    },
    VarUI4FromR8: {
      parameters: ["f64", "pointer"],
      result: "pointer",
    },
    VarUI4FromDate: {
      parameters: ["f64", "pointer"],
      result: "pointer",
    },
    VarUI4FromCy: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarUI4FromStr: {
      parameters: ["buffer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    VarUI4FromDisp: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    VarUI4FromBool: {
      parameters: ["i16", "pointer"],
      result: "pointer",
    },
    VarUI4FromI1: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarUI4FromUI2: {
      parameters: ["u16", "pointer"],
      result: "pointer",
    },
    VarUI4FromUI8: {
      parameters: ["u64", "pointer"],
      result: "pointer",
    },
    VarUI4FromDec: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarUI8FromUI1: {
      parameters: ["u8", "pointer"],
      result: "pointer",
    },
    VarUI8FromI2: {
      parameters: ["i16", "pointer"],
      result: "pointer",
    },
    VarUI8FromI8: {
      parameters: ["i64", "pointer"],
      result: "pointer",
    },
    VarUI8FromR4: {
      parameters: ["f32", "pointer"],
      result: "pointer",
    },
    VarUI8FromR8: {
      parameters: ["f64", "pointer"],
      result: "pointer",
    },
    VarUI8FromCy: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarUI8FromDate: {
      parameters: ["f64", "pointer"],
      result: "pointer",
    },
    VarUI8FromStr: {
      parameters: ["buffer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    VarUI8FromDisp: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    VarUI8FromBool: {
      parameters: ["i16", "pointer"],
      result: "pointer",
    },
    VarUI8FromI1: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarUI8FromUI2: {
      parameters: ["u16", "pointer"],
      result: "pointer",
    },
    VarUI8FromUI4: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    VarUI8FromDec: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarDecFromUI1: {
      parameters: ["u8", "pointer"],
      result: "pointer",
    },
    VarDecFromI2: {
      parameters: ["i16", "pointer"],
      result: "pointer",
    },
    VarDecFromI4: {
      parameters: ["i32", "pointer"],
      result: "pointer",
    },
    VarDecFromI8: {
      parameters: ["i64", "pointer"],
      result: "pointer",
    },
    VarDecFromR4: {
      parameters: ["f32", "pointer"],
      result: "pointer",
    },
    VarDecFromR8: {
      parameters: ["f64", "pointer"],
      result: "pointer",
    },
    VarDecFromDate: {
      parameters: ["f64", "pointer"],
      result: "pointer",
    },
    VarDecFromCy: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarDecFromStr: {
      parameters: ["buffer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    VarDecFromDisp: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    VarDecFromBool: {
      parameters: ["i16", "pointer"],
      result: "pointer",
    },
    VarDecFromI1: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarDecFromUI2: {
      parameters: ["u16", "pointer"],
      result: "pointer",
    },
    VarDecFromUI4: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    VarDecFromUI8: {
      parameters: ["u64", "pointer"],
      result: "pointer",
    },
    VarParseNumFromStr: {
      parameters: ["buffer", "u32", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    VarNumFromParseNum: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    VarAdd: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    VarAnd: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    VarCat: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    VarDiv: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    VarEqv: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    VarIdiv: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    VarImp: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    VarMod: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    VarMul: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    VarOr: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    VarPow: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    VarSub: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    VarXor: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    VarAbs: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarFix: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarInt: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarNeg: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarNot: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarRound: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    VarCmp: {
      parameters: ["pointer", "pointer", "u32", "u32"],
      result: "pointer",
    },
    VarDecAdd: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    VarDecDiv: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    VarDecMul: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    VarDecSub: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    VarDecAbs: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarDecFix: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarDecInt: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarDecNeg: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarDecRound: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    VarDecCmp: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarDecCmpR8: {
      parameters: ["pointer", "f64"],
      result: "pointer",
    },
    VarCyAdd: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    VarCyMul: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    VarCyMulI4: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    VarCyMulI8: {
      parameters: ["pointer", "i64", "pointer"],
      result: "pointer",
    },
    VarCySub: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    VarCyAbs: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarCyFix: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarCyInt: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarCyNeg: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarCyRound: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    VarCyCmp: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VarCyCmpR8: {
      parameters: ["pointer", "f64"],
      result: "pointer",
    },
    VarBstrCat: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    VarBstrCmp: {
      parameters: ["pointer", "pointer", "u32", "u32"],
      result: "pointer",
    },
    VarR8Pow: {
      parameters: ["f64", "f64", "pointer"],
      result: "pointer",
    },
    VarR4CmpR8: {
      parameters: ["f32", "f64"],
      result: "pointer",
    },
    VarR8Round: {
      parameters: ["f64", "i32", "pointer"],
      result: "pointer",
    },
    VarDateFromUdate: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    VarDateFromUdateEx: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    VarUdateFromDate: {
      parameters: ["f64", "u32", "pointer"],
      result: "pointer",
    },
    GetAltMonthNames: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    VarFormat: {
      parameters: ["pointer", "buffer", "i32", "i32", "u32", "pointer"],
      result: "pointer",
    },
    VarFormatDateTime: {
      parameters: ["pointer", "i32", "u32", "pointer"],
      result: "pointer",
    },
    VarFormatNumber: {
      parameters: ["pointer", "i32", "i32", "i32", "i32", "u32", "pointer"],
      result: "pointer",
    },
    VarFormatPercent: {
      parameters: ["pointer", "i32", "i32", "i32", "i32", "u32", "pointer"],
      result: "pointer",
    },
    VarFormatCurrency: {
      parameters: ["pointer", "i32", "i32", "i32", "i32", "u32", "pointer"],
      result: "pointer",
    },
    VarWeekdayName: {
      parameters: ["i32", "i32", "i32", "u32", "pointer"],
      result: "pointer",
    },
    VarMonthName: {
      parameters: ["i32", "i32", "u32", "pointer"],
      result: "pointer",
    },
    VarFormatFromTokens: {
      parameters: ["pointer", "buffer", "pointer", "u32", "pointer", "u32"],
      result: "pointer",
    },
    VarTokenizeFormatString: {
      parameters: ["buffer", "pointer", "i32", "i32", "i32", "u32", "pointer"],
      result: "pointer",
    },
    LHashValOfNameSysA: {
      parameters: ["i32", "u32", "buffer"],
      result: "u32",
    },
    LHashValOfNameSys: {
      parameters: ["i32", "u32", "buffer"],
      result: "u32",
    },
    LoadTypeLib: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    LoadTypeLibEx: {
      parameters: ["buffer", "i32", "pointer"],
      result: "pointer",
    },
    LoadRegTypeLib: {
      parameters: ["pointer", "u16", "u16", "u32", "pointer"],
      result: "pointer",
    },
    QueryPathOfRegTypeLib: {
      parameters: ["pointer", "u16", "u16", "u32", "pointer"],
      result: "pointer",
    },
    RegisterTypeLib: {
      parameters: ["pointer", "buffer", "buffer"],
      result: "pointer",
    },
    UnRegisterTypeLib: {
      parameters: ["pointer", "u16", "u16", "u32", "i32"],
      result: "pointer",
    },
    RegisterTypeLibForUser: {
      parameters: ["pointer", "buffer", "buffer"],
      result: "pointer",
    },
    UnRegisterTypeLibForUser: {
      parameters: ["pointer", "u16", "u16", "u32", "i32"],
      result: "pointer",
    },
    CreateTypeLib: {
      parameters: ["i32", "buffer", "pointer"],
      result: "pointer",
    },
    CreateTypeLib2: {
      parameters: ["i32", "buffer", "pointer"],
      result: "pointer",
    },
    DispGetParam: {
      parameters: ["pointer", "u32", "u16", "pointer", "pointer"],
      result: "pointer",
    },
    DispGetIDsOfNames: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    DispInvoke: {
      parameters: ["pointer", "pointer", "i32", "u16", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    CreateDispTypeInfo: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    CreateStdDispatch: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    DispCallFunc: {
      parameters: ["pointer", "usize", "i32", "u16", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    RegisterActiveObject: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    RevokeActiveObject: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    GetActiveObject: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    CreateErrorInfo: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetRecordInfoFromTypeInfo: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    GetRecordInfoFromGuids: {
      parameters: ["pointer", "u32", "u32", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    OaBuildVersion: {
      parameters: [],
      result: "u32",
    },
    ClearCustData: {
      parameters: ["pointer"],
      result: "void",
    },
    OaEnablePerUserTLibRegistration: {
      parameters: [],
      result: "void",
    },
    OleCreatePropertyFrame: {
      parameters: ["pointer", "u32", "u32", "buffer", "u32", "pointer", "u32", "pointer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    OleCreatePropertyFrameIndirect: {
      parameters: ["pointer"],
      result: "pointer",
    },
    OleTranslateColor: {
      parameters: ["u32", "pointer", "pointer"],
      result: "pointer",
    },
    OleCreateFontIndirect: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    OleCreatePictureIndirect: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "pointer",
    },
    OleLoadPicture: {
      parameters: ["pointer", "i32", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    OleLoadPictureEx: {
      parameters: ["pointer", "i32", "i32", "pointer", "u32", "u32", "u32", "pointer"],
      result: "pointer",
    },
    OleLoadPicturePath: {
      parameters: ["buffer", "pointer", "u32", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    OleLoadPictureFile: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    OleLoadPictureFileEx: {
      parameters: ["pointer", "u32", "u32", "u32", "pointer"],
      result: "pointer",
    },
    OleSavePictureFile: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    OleIconToCursor: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libole32 = Deno.dlopen("ole32", {
    OleBuildVersion: {
      parameters: [],
      result: "u32",
    },
    OleCreateEx: {
      parameters: ["pointer", "pointer", "u32", "u32", "u32", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    OleCreateFromDataEx: {
      parameters: ["pointer", "pointer", "u32", "u32", "u32", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    OleCreateLinkFromDataEx: {
      parameters: ["pointer", "pointer", "u32", "u32", "u32", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    OleCreateLink: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    OleCreateLinkEx: {
      parameters: ["pointer", "pointer", "u32", "u32", "u32", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    OleCreateLinkToFileEx: {
      parameters: ["buffer", "pointer", "u32", "u32", "u32", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    OleCreateFromFileEx: {
      parameters: ["pointer", "buffer", "pointer", "u32", "u32", "u32", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    OleNoteObjectVisible: {
      parameters: ["pointer", "i32"],
      result: "pointer",
    },
    OleGetClipboardWithEnterpriseInfo: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    OleCreateDefaultHandler: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    OleGetIconOfFile: {
      parameters: ["buffer", "i32"],
      result: "isize",
    },
    OleMetafilePictFromIconAndLabel: {
      parameters: ["pointer", "buffer", "buffer", "u32"],
      result: "isize",
    },
    OleRegEnumFormatEtc: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    OleDoAutoConvert: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    OleSetAutoConvert: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libOLE32 = Deno.dlopen("OLE32", {
    OleInitialize: {
      parameters: ["pointer"],
      result: "pointer",
    },
    OleUninitialize: {
      parameters: [],
      result: "void",
    },
    OleQueryLinkFromData: {
      parameters: ["pointer"],
      result: "pointer",
    },
    OleQueryCreateFromData: {
      parameters: ["pointer"],
      result: "pointer",
    },
    OleCreate: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    OleCreateFromData: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    OleCreateLinkFromData: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    OleCreateStaticFromData: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    OleCreateLinkToFile: {
      parameters: ["buffer", "pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    OleCreateFromFile: {
      parameters: ["pointer", "buffer", "pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    OleLoad: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    OleSave: {
      parameters: ["pointer", "pointer", "i32"],
      result: "pointer",
    },
    OleLoadFromStream: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    OleSaveToStream: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    OleSetContainedObject: {
      parameters: ["pointer", "i32"],
      result: "pointer",
    },
    RegisterDragDrop: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    RevokeDragDrop: {
      parameters: ["pointer"],
      result: "pointer",
    },
    DoDragDrop: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    OleSetClipboard: {
      parameters: ["pointer"],
      result: "pointer",
    },
    OleGetClipboard: {
      parameters: ["pointer"],
      result: "pointer",
    },
    OleFlushClipboard: {
      parameters: [],
      result: "pointer",
    },
    OleIsCurrentClipboard: {
      parameters: ["pointer"],
      result: "pointer",
    },
    OleCreateMenuDescriptor: {
      parameters: ["pointer", "pointer"],
      result: "isize",
    },
    OleSetMenuDescriptor: {
      parameters: ["isize", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    OleDestroyMenuDescriptor: {
      parameters: ["isize"],
      result: "pointer",
    },
    OleTranslateAccelerator: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    OleDuplicateData: {
      parameters: ["pointer", "u16", "u32"],
      result: "pointer",
    },
    OleDraw: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    OleRun: {
      parameters: ["pointer"],
      result: "pointer",
    },
    OleIsRunning: {
      parameters: ["pointer"],
      result: "i32",
    },
    OleLockRunning: {
      parameters: ["pointer", "i32", "i32"],
      result: "pointer",
    },
    ReleaseStgMedium: {
      parameters: ["pointer"],
      result: "void",
    },
    CreateOleAdviseHolder: {
      parameters: ["pointer"],
      result: "pointer",
    },
    OleCreateEmbeddingHelper: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    IsAccelerator: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    OleGetIconOfClass: {
      parameters: ["pointer", "buffer", "i32"],
      result: "isize",
    },
    OleRegGetUserType: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    OleRegGetMiscStatus: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    OleRegEnumVerbs: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    OleGetAutoConvert: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    HRGN_UserSize: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    HRGN_UserMarshal: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HRGN_UserUnmarshal: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HRGN_UserFree: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_marshal_l1_1_0 = Deno.dlopen("api-ms-win-core-marshal-l1-1-0", {
    HRGN_UserSize64: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    HRGN_UserMarshal64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HRGN_UserUnmarshal64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HRGN_UserFree64: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var liboledlg = Deno.dlopen("oledlg", {
    OleUIAddVerbMenuW: {
      parameters: ["pointer", "buffer", "pointer", "u32", "u32", "u32", "i32", "u32", "pointer"],
      result: "i32",
    },
    OleUIAddVerbMenuA: {
      parameters: ["pointer", "buffer", "pointer", "u32", "u32", "u32", "i32", "u32", "pointer"],
      result: "i32",
    },
    OleUIInsertObjectW: {
      parameters: ["pointer"],
      result: "u32",
    },
    OleUIInsertObjectA: {
      parameters: ["pointer"],
      result: "u32",
    },
    OleUIPasteSpecialW: {
      parameters: ["pointer"],
      result: "u32",
    },
    OleUIPasteSpecialA: {
      parameters: ["pointer"],
      result: "u32",
    },
    OleUIEditLinksW: {
      parameters: ["pointer"],
      result: "u32",
    },
    OleUIEditLinksA: {
      parameters: ["pointer"],
      result: "u32",
    },
    OleUIChangeIconW: {
      parameters: ["pointer"],
      result: "u32",
    },
    OleUIChangeIconA: {
      parameters: ["pointer"],
      result: "u32",
    },
    OleUIConvertW: {
      parameters: ["pointer"],
      result: "u32",
    },
    OleUIConvertA: {
      parameters: ["pointer"],
      result: "u32",
    },
    OleUICanConvertOrActivateAs: {
      parameters: ["pointer", "i32", "u16"],
      result: "i32",
    },
    OleUIBusyW: {
      parameters: ["pointer"],
      result: "u32",
    },
    OleUIBusyA: {
      parameters: ["pointer"],
      result: "u32",
    },
    OleUIChangeSourceW: {
      parameters: ["pointer"],
      result: "u32",
    },
    OleUIChangeSourceA: {
      parameters: ["pointer"],
      result: "u32",
    },
    OleUIObjectPropertiesW: {
      parameters: ["pointer"],
      result: "u32",
    },
    OleUIObjectPropertiesA: {
      parameters: ["pointer"],
      result: "u32",
    },
    OleUIPromptUserW: {
      parameters: ["i32", "pointer"],
      result: "i32",
    },
    OleUIPromptUserA: {
      parameters: ["i32", "pointer"],
      result: "i32",
    },
    OleUIUpdateLinksW: {
      parameters: ["pointer", "pointer", "buffer", "i32"],
      result: "i32",
    },
    OleUIUpdateLinksA: {
      parameters: ["pointer", "pointer", "buffer", "i32"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function DosDateTimeToVariantTime(
  wDosDate: number /* u16 */,
  wDosTime: number /* u16 */,
  pvtime: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libOLEAUT32.DosDateTimeToVariantTime(wDosDate, wDosTime, util.toPointer(pvtime));
}

export function VariantTimeToDosDateTime(
  vtime: number /* f64 */,
  pwDosDate: Deno.PointerValue | Uint8Array | null /* ptr */,
  pwDosTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libOLEAUT32.VariantTimeToDosDateTime(vtime, util.toPointer(pwDosDate), util.toPointer(pwDosTime));
}

export function SystemTimeToVariantTime(
  lpSystemTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvtime: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libOLEAUT32.SystemTimeToVariantTime(util.toPointer(lpSystemTime), util.toPointer(pvtime));
}

export function VariantTimeToSystemTime(
  vtime: number /* f64 */,
  lpSystemTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libOLEAUT32.VariantTimeToSystemTime(vtime, util.toPointer(lpSystemTime));
}

export function SafeArrayAllocDescriptor(
  cDims: number /* u32 */,
  ppsaOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.SafeArrayAllocDescriptor(cDims, util.toPointer(ppsaOut)));
}

export function SafeArrayAllocDescriptorEx(
  vt: number /* u16 */,
  cDims: number /* u32 */,
  ppsaOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.SafeArrayAllocDescriptorEx(vt, cDims, util.toPointer(ppsaOut)));
}

export function SafeArrayAllocData(
  psa: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.SafeArrayAllocData(util.toPointer(psa)));
}

export function SafeArrayCreate(
  vt: number /* u16 */,
  cDims: number /* u32 */,
  rgsabound: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLEAUT32.SafeArrayCreate(vt, cDims, util.toPointer(rgsabound)));
}

export function SafeArrayCreateEx(
  vt: number /* u16 */,
  cDims: number /* u32 */,
  rgsabound: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvExtra: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLEAUT32.SafeArrayCreateEx(vt, cDims, util.toPointer(rgsabound), util.toPointer(pvExtra)));
}

export function SafeArrayCopyData(
  psaSource: Deno.PointerValue | Uint8Array | null /* ptr */,
  psaTarget: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.SafeArrayCopyData(util.toPointer(psaSource), util.toPointer(psaTarget)));
}

export function SafeArrayReleaseDescriptor(
  psa: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOLEAUT32.SafeArrayReleaseDescriptor(util.toPointer(psa));
}

export function SafeArrayDestroyDescriptor(
  psa: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.SafeArrayDestroyDescriptor(util.toPointer(psa)));
}

export function SafeArrayReleaseData(
  pData: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOLEAUT32.SafeArrayReleaseData(util.toPointer(pData));
}

export function SafeArrayDestroyData(
  psa: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.SafeArrayDestroyData(util.toPointer(psa)));
}

export function SafeArrayAddRef(
  psa: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppDataToRelease: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.SafeArrayAddRef(util.toPointer(psa), util.toPointer(ppDataToRelease)));
}

export function SafeArrayDestroy(
  psa: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.SafeArrayDestroy(util.toPointer(psa)));
}

export function SafeArrayRedim(
  psa: Deno.PointerValue | Uint8Array | null /* ptr */,
  psaboundNew: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.SafeArrayRedim(util.toPointer(psa), util.toPointer(psaboundNew)));
}

export function SafeArrayGetDim(
  psa: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libOLEAUT32.SafeArrayGetDim(util.toPointer(psa));
}

export function SafeArrayGetElemsize(
  psa: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libOLEAUT32.SafeArrayGetElemsize(util.toPointer(psa));
}

export function SafeArrayGetUBound(
  psa: Deno.PointerValue | Uint8Array | null /* ptr */,
  nDim: number /* u32 */,
  plUbound: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.SafeArrayGetUBound(util.toPointer(psa), nDim, util.toPointer(plUbound)));
}

export function SafeArrayGetLBound(
  psa: Deno.PointerValue | Uint8Array | null /* ptr */,
  nDim: number /* u32 */,
  plLbound: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.SafeArrayGetLBound(util.toPointer(psa), nDim, util.toPointer(plLbound)));
}

export function SafeArrayLock(
  psa: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.SafeArrayLock(util.toPointer(psa)));
}

export function SafeArrayUnlock(
  psa: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.SafeArrayUnlock(util.toPointer(psa)));
}

export function SafeArrayAccessData(
  psa: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppvData: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.SafeArrayAccessData(util.toPointer(psa), util.toPointer(ppvData)));
}

export function SafeArrayUnaccessData(
  psa: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.SafeArrayUnaccessData(util.toPointer(psa)));
}

export function SafeArrayGetElement(
  psa: Deno.PointerValue | Uint8Array | null /* ptr */,
  rgIndices: Deno.PointerValue | Uint8Array | null /* ptr */,
  pv: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.SafeArrayGetElement(util.toPointer(psa), util.toPointer(rgIndices), util.toPointer(pv)));
}

export function SafeArrayPutElement(
  psa: Deno.PointerValue | Uint8Array | null /* ptr */,
  rgIndices: Deno.PointerValue | Uint8Array | null /* ptr */,
  pv: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.SafeArrayPutElement(util.toPointer(psa), util.toPointer(rgIndices), util.toPointer(pv)));
}

export function SafeArrayCopy(
  psa: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppsaOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.SafeArrayCopy(util.toPointer(psa), util.toPointer(ppsaOut)));
}

export function SafeArrayPtrOfIndex(
  psa: Deno.PointerValue | Uint8Array | null /* ptr */,
  rgIndices: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppvData: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.SafeArrayPtrOfIndex(util.toPointer(psa), util.toPointer(rgIndices), util.toPointer(ppvData)));
}

export function SafeArraySetRecordInfo(
  psa: Deno.PointerValue | Uint8Array | null /* ptr */,
  prinfo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Ole.IRecordInfo */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.SafeArraySetRecordInfo(util.toPointer(psa), util.toPointer(prinfo)));
}

export function SafeArrayGetRecordInfo(
  psa: Deno.PointerValue | Uint8Array | null /* ptr */,
  prinfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.SafeArrayGetRecordInfo(util.toPointer(psa), util.toPointer(prinfo)));
}

export function SafeArraySetIID(
  psa: Deno.PointerValue | Uint8Array | null /* ptr */,
  guid: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.SafeArraySetIID(util.toPointer(psa), util.toPointer(guid)));
}

export function SafeArrayGetIID(
  psa: Deno.PointerValue | Uint8Array | null /* ptr */,
  pguid: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.SafeArrayGetIID(util.toPointer(psa), util.toPointer(pguid)));
}

export function SafeArrayGetVartype(
  psa: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvt: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.SafeArrayGetVartype(util.toPointer(psa), util.toPointer(pvt)));
}

export function SafeArrayCreateVector(
  vt: number /* u16 */,
  lLbound: number /* i32 */,
  cElements: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLEAUT32.SafeArrayCreateVector(vt, lLbound, cElements));
}

export function SafeArrayCreateVectorEx(
  vt: number /* u16 */,
  lLbound: number /* i32 */,
  cElements: number /* u32 */,
  pvExtra: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLEAUT32.SafeArrayCreateVectorEx(vt, lLbound, cElements, util.toPointer(pvExtra)));
}

export function VariantInit(
  pvarg: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOLEAUT32.VariantInit(util.toPointer(pvarg));
}

export function VariantClear(
  pvarg: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VariantClear(util.toPointer(pvarg)));
}

export function VariantCopy(
  pvargDest: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvargSrc: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VariantCopy(util.toPointer(pvargDest), util.toPointer(pvargSrc)));
}

export function VariantCopyInd(
  pvarDest: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvargSrc: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VariantCopyInd(util.toPointer(pvarDest), util.toPointer(pvargSrc)));
}

export function VariantChangeType(
  pvargDest: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarSrc: Deno.PointerValue | Uint8Array | null /* ptr */,
  wFlags: number /* u16 */,
  vt: number /* u16 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VariantChangeType(util.toPointer(pvargDest), util.toPointer(pvarSrc), wFlags, vt));
}

export function VariantChangeTypeEx(
  pvargDest: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarSrc: Deno.PointerValue | Uint8Array | null /* ptr */,
  lcid: number /* u32 */,
  wFlags: number /* u16 */,
  vt: number /* u16 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VariantChangeTypeEx(util.toPointer(pvargDest), util.toPointer(pvarSrc), lcid, wFlags, vt));
}

export function VectorFromBstr(
  bstr: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.BSTR */,
  ppsa: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VectorFromBstr(util.toPointer(bstr), util.toPointer(ppsa)));
}

export function BstrFromVector(
  psa: Deno.PointerValue | Uint8Array | null /* ptr */,
  pbstr: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.BstrFromVector(util.toPointer(psa), util.toPointer(pbstr)));
}

export function VarUI1FromI2(
  sIn: number /* i16 */,
  pbOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI1FromI2(sIn, util.toPointer(pbOut)));
}

export function VarUI1FromI4(
  lIn: number /* i32 */,
  pbOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI1FromI4(lIn, util.toPointer(pbOut)));
}

export function VarUI1FromI8(
  i64In: Deno.PointerValue /* i64 */,
  pbOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI1FromI8(i64In, util.toPointer(pbOut)));
}

export function VarUI1FromR4(
  fltIn: number /* f32 */,
  pbOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI1FromR4(fltIn, util.toPointer(pbOut)));
}

export function VarUI1FromR8(
  dblIn: number /* f64 */,
  pbOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI1FromR8(dblIn, util.toPointer(pbOut)));
}

export function VarUI1FromCy(
  cyIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.CY */,
  pbOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI1FromCy(util.toPointer(cyIn), util.toPointer(pbOut)));
}

export function VarUI1FromDate(
  dateIn: number /* f64 */,
  pbOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI1FromDate(dateIn, util.toPointer(pbOut)));
}

export function VarUI1FromStr(
  strIn: string | null /* Windows.Win32.Foundation.PWSTR */,
  lcid: number /* u32 */,
  dwFlags: number /* u32 */,
  pbOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI1FromStr(util.pwstrToFfi(strIn), lcid, dwFlags, util.toPointer(pbOut)));
}

export function VarUI1FromDisp(
  pdispIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IDispatch */,
  lcid: number /* u32 */,
  pbOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI1FromDisp(util.toPointer(pdispIn), lcid, util.toPointer(pbOut)));
}

export function VarUI1FromBool(
  boolIn: number /* i16 */,
  pbOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI1FromBool(boolIn, util.toPointer(pbOut)));
}

export function VarUI1FromI1(
  cIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.CHAR */,
  pbOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI1FromI1(util.toPointer(cIn), util.toPointer(pbOut)));
}

export function VarUI1FromUI2(
  uiIn: number /* u16 */,
  pbOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI1FromUI2(uiIn, util.toPointer(pbOut)));
}

export function VarUI1FromUI4(
  ulIn: number /* u32 */,
  pbOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI1FromUI4(ulIn, util.toPointer(pbOut)));
}

export function VarUI1FromUI8(
  ui64In: Deno.PointerValue /* u64 */,
  pbOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI1FromUI8(ui64In, util.toPointer(pbOut)));
}

export function VarUI1FromDec(
  pdecIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  pbOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI1FromDec(util.toPointer(pdecIn), util.toPointer(pbOut)));
}

export function VarI2FromUI1(
  bIn: number /* u8 */,
  psOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI2FromUI1(bIn, util.toPointer(psOut)));
}

export function VarI2FromI4(
  lIn: number /* i32 */,
  psOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI2FromI4(lIn, util.toPointer(psOut)));
}

export function VarI2FromI8(
  i64In: Deno.PointerValue /* i64 */,
  psOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI2FromI8(i64In, util.toPointer(psOut)));
}

export function VarI2FromR4(
  fltIn: number /* f32 */,
  psOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI2FromR4(fltIn, util.toPointer(psOut)));
}

export function VarI2FromR8(
  dblIn: number /* f64 */,
  psOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI2FromR8(dblIn, util.toPointer(psOut)));
}

export function VarI2FromCy(
  cyIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.CY */,
  psOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI2FromCy(util.toPointer(cyIn), util.toPointer(psOut)));
}

export function VarI2FromDate(
  dateIn: number /* f64 */,
  psOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI2FromDate(dateIn, util.toPointer(psOut)));
}

export function VarI2FromStr(
  strIn: string | null /* Windows.Win32.Foundation.PWSTR */,
  lcid: number /* u32 */,
  dwFlags: number /* u32 */,
  psOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI2FromStr(util.pwstrToFfi(strIn), lcid, dwFlags, util.toPointer(psOut)));
}

export function VarI2FromDisp(
  pdispIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IDispatch */,
  lcid: number /* u32 */,
  psOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI2FromDisp(util.toPointer(pdispIn), lcid, util.toPointer(psOut)));
}

export function VarI2FromBool(
  boolIn: number /* i16 */,
  psOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI2FromBool(boolIn, util.toPointer(psOut)));
}

export function VarI2FromI1(
  cIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.CHAR */,
  psOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI2FromI1(util.toPointer(cIn), util.toPointer(psOut)));
}

export function VarI2FromUI2(
  uiIn: number /* u16 */,
  psOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI2FromUI2(uiIn, util.toPointer(psOut)));
}

export function VarI2FromUI4(
  ulIn: number /* u32 */,
  psOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI2FromUI4(ulIn, util.toPointer(psOut)));
}

export function VarI2FromUI8(
  ui64In: Deno.PointerValue /* u64 */,
  psOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI2FromUI8(ui64In, util.toPointer(psOut)));
}

export function VarI2FromDec(
  pdecIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  psOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI2FromDec(util.toPointer(pdecIn), util.toPointer(psOut)));
}

export function VarI4FromUI1(
  bIn: number /* u8 */,
  plOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI4FromUI1(bIn, util.toPointer(plOut)));
}

export function VarI4FromI2(
  sIn: number /* i16 */,
  plOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI4FromI2(sIn, util.toPointer(plOut)));
}

export function VarI4FromI8(
  i64In: Deno.PointerValue /* i64 */,
  plOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI4FromI8(i64In, util.toPointer(plOut)));
}

export function VarI4FromR4(
  fltIn: number /* f32 */,
  plOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI4FromR4(fltIn, util.toPointer(plOut)));
}

export function VarI4FromR8(
  dblIn: number /* f64 */,
  plOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI4FromR8(dblIn, util.toPointer(plOut)));
}

export function VarI4FromCy(
  cyIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.CY */,
  plOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI4FromCy(util.toPointer(cyIn), util.toPointer(plOut)));
}

export function VarI4FromDate(
  dateIn: number /* f64 */,
  plOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI4FromDate(dateIn, util.toPointer(plOut)));
}

export function VarI4FromStr(
  strIn: string | null /* Windows.Win32.Foundation.PWSTR */,
  lcid: number /* u32 */,
  dwFlags: number /* u32 */,
  plOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI4FromStr(util.pwstrToFfi(strIn), lcid, dwFlags, util.toPointer(plOut)));
}

export function VarI4FromDisp(
  pdispIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IDispatch */,
  lcid: number /* u32 */,
  plOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI4FromDisp(util.toPointer(pdispIn), lcid, util.toPointer(plOut)));
}

export function VarI4FromBool(
  boolIn: number /* i16 */,
  plOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI4FromBool(boolIn, util.toPointer(plOut)));
}

export function VarI4FromI1(
  cIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.CHAR */,
  plOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI4FromI1(util.toPointer(cIn), util.toPointer(plOut)));
}

export function VarI4FromUI2(
  uiIn: number /* u16 */,
  plOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI4FromUI2(uiIn, util.toPointer(plOut)));
}

export function VarI4FromUI4(
  ulIn: number /* u32 */,
  plOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI4FromUI4(ulIn, util.toPointer(plOut)));
}

export function VarI4FromUI8(
  ui64In: Deno.PointerValue /* u64 */,
  plOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI4FromUI8(ui64In, util.toPointer(plOut)));
}

export function VarI4FromDec(
  pdecIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  plOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI4FromDec(util.toPointer(pdecIn), util.toPointer(plOut)));
}

export function VarI8FromUI1(
  bIn: number /* u8 */,
  pi64Out: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI8FromUI1(bIn, util.toPointer(pi64Out)));
}

export function VarI8FromI2(
  sIn: number /* i16 */,
  pi64Out: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI8FromI2(sIn, util.toPointer(pi64Out)));
}

export function VarI8FromR4(
  fltIn: number /* f32 */,
  pi64Out: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI8FromR4(fltIn, util.toPointer(pi64Out)));
}

export function VarI8FromR8(
  dblIn: number /* f64 */,
  pi64Out: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI8FromR8(dblIn, util.toPointer(pi64Out)));
}

export function VarI8FromCy(
  cyIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.CY */,
  pi64Out: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI8FromCy(util.toPointer(cyIn), util.toPointer(pi64Out)));
}

export function VarI8FromDate(
  dateIn: number /* f64 */,
  pi64Out: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI8FromDate(dateIn, util.toPointer(pi64Out)));
}

export function VarI8FromStr(
  strIn: string | null /* Windows.Win32.Foundation.PWSTR */,
  lcid: number /* u32 */,
  dwFlags: number /* u32 */,
  pi64Out: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI8FromStr(util.pwstrToFfi(strIn), lcid, dwFlags, util.toPointer(pi64Out)));
}

export function VarI8FromDisp(
  pdispIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IDispatch */,
  lcid: number /* u32 */,
  pi64Out: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI8FromDisp(util.toPointer(pdispIn), lcid, util.toPointer(pi64Out)));
}

export function VarI8FromBool(
  boolIn: number /* i16 */,
  pi64Out: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI8FromBool(boolIn, util.toPointer(pi64Out)));
}

export function VarI8FromI1(
  cIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.CHAR */,
  pi64Out: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI8FromI1(util.toPointer(cIn), util.toPointer(pi64Out)));
}

export function VarI8FromUI2(
  uiIn: number /* u16 */,
  pi64Out: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI8FromUI2(uiIn, util.toPointer(pi64Out)));
}

export function VarI8FromUI4(
  ulIn: number /* u32 */,
  pi64Out: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI8FromUI4(ulIn, util.toPointer(pi64Out)));
}

export function VarI8FromUI8(
  ui64In: Deno.PointerValue /* u64 */,
  pi64Out: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI8FromUI8(ui64In, util.toPointer(pi64Out)));
}

export function VarI8FromDec(
  pdecIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  pi64Out: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI8FromDec(util.toPointer(pdecIn), util.toPointer(pi64Out)));
}

export function VarR4FromUI1(
  bIn: number /* u8 */,
  pfltOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarR4FromUI1(bIn, util.toPointer(pfltOut)));
}

export function VarR4FromI2(
  sIn: number /* i16 */,
  pfltOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarR4FromI2(sIn, util.toPointer(pfltOut)));
}

export function VarR4FromI4(
  lIn: number /* i32 */,
  pfltOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarR4FromI4(lIn, util.toPointer(pfltOut)));
}

export function VarR4FromI8(
  i64In: Deno.PointerValue /* i64 */,
  pfltOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarR4FromI8(i64In, util.toPointer(pfltOut)));
}

export function VarR4FromR8(
  dblIn: number /* f64 */,
  pfltOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarR4FromR8(dblIn, util.toPointer(pfltOut)));
}

export function VarR4FromCy(
  cyIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.CY */,
  pfltOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarR4FromCy(util.toPointer(cyIn), util.toPointer(pfltOut)));
}

export function VarR4FromDate(
  dateIn: number /* f64 */,
  pfltOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarR4FromDate(dateIn, util.toPointer(pfltOut)));
}

export function VarR4FromStr(
  strIn: string | null /* Windows.Win32.Foundation.PWSTR */,
  lcid: number /* u32 */,
  dwFlags: number /* u32 */,
  pfltOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarR4FromStr(util.pwstrToFfi(strIn), lcid, dwFlags, util.toPointer(pfltOut)));
}

export function VarR4FromDisp(
  pdispIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IDispatch */,
  lcid: number /* u32 */,
  pfltOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarR4FromDisp(util.toPointer(pdispIn), lcid, util.toPointer(pfltOut)));
}

export function VarR4FromBool(
  boolIn: number /* i16 */,
  pfltOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarR4FromBool(boolIn, util.toPointer(pfltOut)));
}

export function VarR4FromI1(
  cIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.CHAR */,
  pfltOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarR4FromI1(util.toPointer(cIn), util.toPointer(pfltOut)));
}

export function VarR4FromUI2(
  uiIn: number /* u16 */,
  pfltOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarR4FromUI2(uiIn, util.toPointer(pfltOut)));
}

export function VarR4FromUI4(
  ulIn: number /* u32 */,
  pfltOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarR4FromUI4(ulIn, util.toPointer(pfltOut)));
}

export function VarR4FromUI8(
  ui64In: Deno.PointerValue /* u64 */,
  pfltOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarR4FromUI8(ui64In, util.toPointer(pfltOut)));
}

export function VarR4FromDec(
  pdecIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  pfltOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarR4FromDec(util.toPointer(pdecIn), util.toPointer(pfltOut)));
}

export function VarR8FromUI1(
  bIn: number /* u8 */,
  pdblOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarR8FromUI1(bIn, util.toPointer(pdblOut)));
}

export function VarR8FromI2(
  sIn: number /* i16 */,
  pdblOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarR8FromI2(sIn, util.toPointer(pdblOut)));
}

export function VarR8FromI4(
  lIn: number /* i32 */,
  pdblOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarR8FromI4(lIn, util.toPointer(pdblOut)));
}

export function VarR8FromI8(
  i64In: Deno.PointerValue /* i64 */,
  pdblOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarR8FromI8(i64In, util.toPointer(pdblOut)));
}

export function VarR8FromR4(
  fltIn: number /* f32 */,
  pdblOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarR8FromR4(fltIn, util.toPointer(pdblOut)));
}

export function VarR8FromCy(
  cyIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.CY */,
  pdblOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarR8FromCy(util.toPointer(cyIn), util.toPointer(pdblOut)));
}

export function VarR8FromDate(
  dateIn: number /* f64 */,
  pdblOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarR8FromDate(dateIn, util.toPointer(pdblOut)));
}

export function VarR8FromStr(
  strIn: string | null /* Windows.Win32.Foundation.PWSTR */,
  lcid: number /* u32 */,
  dwFlags: number /* u32 */,
  pdblOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarR8FromStr(util.pwstrToFfi(strIn), lcid, dwFlags, util.toPointer(pdblOut)));
}

export function VarR8FromDisp(
  pdispIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IDispatch */,
  lcid: number /* u32 */,
  pdblOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarR8FromDisp(util.toPointer(pdispIn), lcid, util.toPointer(pdblOut)));
}

export function VarR8FromBool(
  boolIn: number /* i16 */,
  pdblOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarR8FromBool(boolIn, util.toPointer(pdblOut)));
}

export function VarR8FromI1(
  cIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.CHAR */,
  pdblOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarR8FromI1(util.toPointer(cIn), util.toPointer(pdblOut)));
}

export function VarR8FromUI2(
  uiIn: number /* u16 */,
  pdblOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarR8FromUI2(uiIn, util.toPointer(pdblOut)));
}

export function VarR8FromUI4(
  ulIn: number /* u32 */,
  pdblOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarR8FromUI4(ulIn, util.toPointer(pdblOut)));
}

export function VarR8FromUI8(
  ui64In: Deno.PointerValue /* u64 */,
  pdblOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarR8FromUI8(ui64In, util.toPointer(pdblOut)));
}

export function VarR8FromDec(
  pdecIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdblOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarR8FromDec(util.toPointer(pdecIn), util.toPointer(pdblOut)));
}

export function VarDateFromUI1(
  bIn: number /* u8 */,
  pdateOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDateFromUI1(bIn, util.toPointer(pdateOut)));
}

export function VarDateFromI2(
  sIn: number /* i16 */,
  pdateOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDateFromI2(sIn, util.toPointer(pdateOut)));
}

export function VarDateFromI4(
  lIn: number /* i32 */,
  pdateOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDateFromI4(lIn, util.toPointer(pdateOut)));
}

export function VarDateFromI8(
  i64In: Deno.PointerValue /* i64 */,
  pdateOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDateFromI8(i64In, util.toPointer(pdateOut)));
}

export function VarDateFromR4(
  fltIn: number /* f32 */,
  pdateOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDateFromR4(fltIn, util.toPointer(pdateOut)));
}

export function VarDateFromR8(
  dblIn: number /* f64 */,
  pdateOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDateFromR8(dblIn, util.toPointer(pdateOut)));
}

export function VarDateFromCy(
  cyIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.CY */,
  pdateOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDateFromCy(util.toPointer(cyIn), util.toPointer(pdateOut)));
}

export function VarDateFromStr(
  strIn: string | null /* Windows.Win32.Foundation.PWSTR */,
  lcid: number /* u32 */,
  dwFlags: number /* u32 */,
  pdateOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDateFromStr(util.pwstrToFfi(strIn), lcid, dwFlags, util.toPointer(pdateOut)));
}

export function VarDateFromDisp(
  pdispIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IDispatch */,
  lcid: number /* u32 */,
  pdateOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDateFromDisp(util.toPointer(pdispIn), lcid, util.toPointer(pdateOut)));
}

export function VarDateFromBool(
  boolIn: number /* i16 */,
  pdateOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDateFromBool(boolIn, util.toPointer(pdateOut)));
}

export function VarDateFromI1(
  cIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.CHAR */,
  pdateOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDateFromI1(util.toPointer(cIn), util.toPointer(pdateOut)));
}

export function VarDateFromUI2(
  uiIn: number /* u16 */,
  pdateOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDateFromUI2(uiIn, util.toPointer(pdateOut)));
}

export function VarDateFromUI4(
  ulIn: number /* u32 */,
  pdateOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDateFromUI4(ulIn, util.toPointer(pdateOut)));
}

export function VarDateFromUI8(
  ui64In: Deno.PointerValue /* u64 */,
  pdateOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDateFromUI8(ui64In, util.toPointer(pdateOut)));
}

export function VarDateFromDec(
  pdecIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdateOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDateFromDec(util.toPointer(pdecIn), util.toPointer(pdateOut)));
}

export function VarCyFromUI1(
  bIn: number /* u8 */,
  pcyOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarCyFromUI1(bIn, util.toPointer(pcyOut)));
}

export function VarCyFromI2(
  sIn: number /* i16 */,
  pcyOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarCyFromI2(sIn, util.toPointer(pcyOut)));
}

export function VarCyFromI4(
  lIn: number /* i32 */,
  pcyOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarCyFromI4(lIn, util.toPointer(pcyOut)));
}

export function VarCyFromI8(
  i64In: Deno.PointerValue /* i64 */,
  pcyOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarCyFromI8(i64In, util.toPointer(pcyOut)));
}

export function VarCyFromR4(
  fltIn: number /* f32 */,
  pcyOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarCyFromR4(fltIn, util.toPointer(pcyOut)));
}

export function VarCyFromR8(
  dblIn: number /* f64 */,
  pcyOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarCyFromR8(dblIn, util.toPointer(pcyOut)));
}

export function VarCyFromDate(
  dateIn: number /* f64 */,
  pcyOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarCyFromDate(dateIn, util.toPointer(pcyOut)));
}

export function VarCyFromStr(
  strIn: string | null /* Windows.Win32.Foundation.PWSTR */,
  lcid: number /* u32 */,
  dwFlags: number /* u32 */,
  pcyOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarCyFromStr(util.pwstrToFfi(strIn), lcid, dwFlags, util.toPointer(pcyOut)));
}

export function VarCyFromDisp(
  pdispIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IDispatch */,
  lcid: number /* u32 */,
  pcyOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarCyFromDisp(util.toPointer(pdispIn), lcid, util.toPointer(pcyOut)));
}

export function VarCyFromBool(
  boolIn: number /* i16 */,
  pcyOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarCyFromBool(boolIn, util.toPointer(pcyOut)));
}

export function VarCyFromI1(
  cIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.CHAR */,
  pcyOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarCyFromI1(util.toPointer(cIn), util.toPointer(pcyOut)));
}

export function VarCyFromUI2(
  uiIn: number /* u16 */,
  pcyOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarCyFromUI2(uiIn, util.toPointer(pcyOut)));
}

export function VarCyFromUI4(
  ulIn: number /* u32 */,
  pcyOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarCyFromUI4(ulIn, util.toPointer(pcyOut)));
}

export function VarCyFromUI8(
  ui64In: Deno.PointerValue /* u64 */,
  pcyOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarCyFromUI8(ui64In, util.toPointer(pcyOut)));
}

export function VarCyFromDec(
  pdecIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcyOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarCyFromDec(util.toPointer(pdecIn), util.toPointer(pcyOut)));
}

export function VarBstrFromUI1(
  bVal: number /* u8 */,
  lcid: number /* u32 */,
  dwFlags: number /* u32 */,
  pbstrOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarBstrFromUI1(bVal, lcid, dwFlags, util.toPointer(pbstrOut)));
}

export function VarBstrFromI2(
  iVal: number /* i16 */,
  lcid: number /* u32 */,
  dwFlags: number /* u32 */,
  pbstrOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarBstrFromI2(iVal, lcid, dwFlags, util.toPointer(pbstrOut)));
}

export function VarBstrFromI4(
  lIn: number /* i32 */,
  lcid: number /* u32 */,
  dwFlags: number /* u32 */,
  pbstrOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarBstrFromI4(lIn, lcid, dwFlags, util.toPointer(pbstrOut)));
}

export function VarBstrFromI8(
  i64In: Deno.PointerValue /* i64 */,
  lcid: number /* u32 */,
  dwFlags: number /* u32 */,
  pbstrOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarBstrFromI8(i64In, lcid, dwFlags, util.toPointer(pbstrOut)));
}

export function VarBstrFromR4(
  fltIn: number /* f32 */,
  lcid: number /* u32 */,
  dwFlags: number /* u32 */,
  pbstrOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarBstrFromR4(fltIn, lcid, dwFlags, util.toPointer(pbstrOut)));
}

export function VarBstrFromR8(
  dblIn: number /* f64 */,
  lcid: number /* u32 */,
  dwFlags: number /* u32 */,
  pbstrOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarBstrFromR8(dblIn, lcid, dwFlags, util.toPointer(pbstrOut)));
}

export function VarBstrFromCy(
  cyIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.CY */,
  lcid: number /* u32 */,
  dwFlags: number /* u32 */,
  pbstrOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarBstrFromCy(util.toPointer(cyIn), lcid, dwFlags, util.toPointer(pbstrOut)));
}

export function VarBstrFromDate(
  dateIn: number /* f64 */,
  lcid: number /* u32 */,
  dwFlags: number /* u32 */,
  pbstrOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarBstrFromDate(dateIn, lcid, dwFlags, util.toPointer(pbstrOut)));
}

export function VarBstrFromDisp(
  pdispIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IDispatch */,
  lcid: number /* u32 */,
  dwFlags: number /* u32 */,
  pbstrOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarBstrFromDisp(util.toPointer(pdispIn), lcid, dwFlags, util.toPointer(pbstrOut)));
}

export function VarBstrFromBool(
  boolIn: number /* i16 */,
  lcid: number /* u32 */,
  dwFlags: number /* u32 */,
  pbstrOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarBstrFromBool(boolIn, lcid, dwFlags, util.toPointer(pbstrOut)));
}

export function VarBstrFromI1(
  cIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.CHAR */,
  lcid: number /* u32 */,
  dwFlags: number /* u32 */,
  pbstrOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarBstrFromI1(util.toPointer(cIn), lcid, dwFlags, util.toPointer(pbstrOut)));
}

export function VarBstrFromUI2(
  uiIn: number /* u16 */,
  lcid: number /* u32 */,
  dwFlags: number /* u32 */,
  pbstrOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarBstrFromUI2(uiIn, lcid, dwFlags, util.toPointer(pbstrOut)));
}

export function VarBstrFromUI4(
  ulIn: number /* u32 */,
  lcid: number /* u32 */,
  dwFlags: number /* u32 */,
  pbstrOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarBstrFromUI4(ulIn, lcid, dwFlags, util.toPointer(pbstrOut)));
}

export function VarBstrFromUI8(
  ui64In: Deno.PointerValue /* u64 */,
  lcid: number /* u32 */,
  dwFlags: number /* u32 */,
  pbstrOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarBstrFromUI8(ui64In, lcid, dwFlags, util.toPointer(pbstrOut)));
}

export function VarBstrFromDec(
  pdecIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  lcid: number /* u32 */,
  dwFlags: number /* u32 */,
  pbstrOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarBstrFromDec(util.toPointer(pdecIn), lcid, dwFlags, util.toPointer(pbstrOut)));
}

export function VarBoolFromUI1(
  bIn: number /* u8 */,
  pboolOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarBoolFromUI1(bIn, util.toPointer(pboolOut)));
}

export function VarBoolFromI2(
  sIn: number /* i16 */,
  pboolOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarBoolFromI2(sIn, util.toPointer(pboolOut)));
}

export function VarBoolFromI4(
  lIn: number /* i32 */,
  pboolOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarBoolFromI4(lIn, util.toPointer(pboolOut)));
}

export function VarBoolFromI8(
  i64In: Deno.PointerValue /* i64 */,
  pboolOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarBoolFromI8(i64In, util.toPointer(pboolOut)));
}

export function VarBoolFromR4(
  fltIn: number /* f32 */,
  pboolOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarBoolFromR4(fltIn, util.toPointer(pboolOut)));
}

export function VarBoolFromR8(
  dblIn: number /* f64 */,
  pboolOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarBoolFromR8(dblIn, util.toPointer(pboolOut)));
}

export function VarBoolFromDate(
  dateIn: number /* f64 */,
  pboolOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarBoolFromDate(dateIn, util.toPointer(pboolOut)));
}

export function VarBoolFromCy(
  cyIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.CY */,
  pboolOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarBoolFromCy(util.toPointer(cyIn), util.toPointer(pboolOut)));
}

export function VarBoolFromStr(
  strIn: string | null /* Windows.Win32.Foundation.PWSTR */,
  lcid: number /* u32 */,
  dwFlags: number /* u32 */,
  pboolOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarBoolFromStr(util.pwstrToFfi(strIn), lcid, dwFlags, util.toPointer(pboolOut)));
}

export function VarBoolFromDisp(
  pdispIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IDispatch */,
  lcid: number /* u32 */,
  pboolOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarBoolFromDisp(util.toPointer(pdispIn), lcid, util.toPointer(pboolOut)));
}

export function VarBoolFromI1(
  cIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.CHAR */,
  pboolOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarBoolFromI1(util.toPointer(cIn), util.toPointer(pboolOut)));
}

export function VarBoolFromUI2(
  uiIn: number /* u16 */,
  pboolOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarBoolFromUI2(uiIn, util.toPointer(pboolOut)));
}

export function VarBoolFromUI4(
  ulIn: number /* u32 */,
  pboolOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarBoolFromUI4(ulIn, util.toPointer(pboolOut)));
}

export function VarBoolFromUI8(
  i64In: Deno.PointerValue /* u64 */,
  pboolOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarBoolFromUI8(i64In, util.toPointer(pboolOut)));
}

export function VarBoolFromDec(
  pdecIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  pboolOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarBoolFromDec(util.toPointer(pdecIn), util.toPointer(pboolOut)));
}

export function VarI1FromUI1(
  bIn: number /* u8 */,
  pcOut: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI1FromUI1(bIn, util.pstrToFfi(pcOut)));
}

export function VarI1FromI2(
  uiIn: number /* i16 */,
  pcOut: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI1FromI2(uiIn, util.pstrToFfi(pcOut)));
}

export function VarI1FromI4(
  lIn: number /* i32 */,
  pcOut: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI1FromI4(lIn, util.pstrToFfi(pcOut)));
}

export function VarI1FromI8(
  i64In: Deno.PointerValue /* i64 */,
  pcOut: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI1FromI8(i64In, util.pstrToFfi(pcOut)));
}

export function VarI1FromR4(
  fltIn: number /* f32 */,
  pcOut: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI1FromR4(fltIn, util.pstrToFfi(pcOut)));
}

export function VarI1FromR8(
  dblIn: number /* f64 */,
  pcOut: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI1FromR8(dblIn, util.pstrToFfi(pcOut)));
}

export function VarI1FromDate(
  dateIn: number /* f64 */,
  pcOut: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI1FromDate(dateIn, util.pstrToFfi(pcOut)));
}

export function VarI1FromCy(
  cyIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.CY */,
  pcOut: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI1FromCy(util.toPointer(cyIn), util.pstrToFfi(pcOut)));
}

export function VarI1FromStr(
  strIn: string | null /* Windows.Win32.Foundation.PWSTR */,
  lcid: number /* u32 */,
  dwFlags: number /* u32 */,
  pcOut: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI1FromStr(util.pwstrToFfi(strIn), lcid, dwFlags, util.pstrToFfi(pcOut)));
}

export function VarI1FromDisp(
  pdispIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IDispatch */,
  lcid: number /* u32 */,
  pcOut: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI1FromDisp(util.toPointer(pdispIn), lcid, util.pstrToFfi(pcOut)));
}

export function VarI1FromBool(
  boolIn: number /* i16 */,
  pcOut: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI1FromBool(boolIn, util.pstrToFfi(pcOut)));
}

export function VarI1FromUI2(
  uiIn: number /* u16 */,
  pcOut: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI1FromUI2(uiIn, util.pstrToFfi(pcOut)));
}

export function VarI1FromUI4(
  ulIn: number /* u32 */,
  pcOut: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI1FromUI4(ulIn, util.pstrToFfi(pcOut)));
}

export function VarI1FromUI8(
  i64In: Deno.PointerValue /* u64 */,
  pcOut: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI1FromUI8(i64In, util.pstrToFfi(pcOut)));
}

export function VarI1FromDec(
  pdecIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcOut: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarI1FromDec(util.toPointer(pdecIn), util.pstrToFfi(pcOut)));
}

export function VarUI2FromUI1(
  bIn: number /* u8 */,
  puiOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI2FromUI1(bIn, util.toPointer(puiOut)));
}

export function VarUI2FromI2(
  uiIn: number /* i16 */,
  puiOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI2FromI2(uiIn, util.toPointer(puiOut)));
}

export function VarUI2FromI4(
  lIn: number /* i32 */,
  puiOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI2FromI4(lIn, util.toPointer(puiOut)));
}

export function VarUI2FromI8(
  i64In: Deno.PointerValue /* i64 */,
  puiOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI2FromI8(i64In, util.toPointer(puiOut)));
}

export function VarUI2FromR4(
  fltIn: number /* f32 */,
  puiOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI2FromR4(fltIn, util.toPointer(puiOut)));
}

export function VarUI2FromR8(
  dblIn: number /* f64 */,
  puiOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI2FromR8(dblIn, util.toPointer(puiOut)));
}

export function VarUI2FromDate(
  dateIn: number /* f64 */,
  puiOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI2FromDate(dateIn, util.toPointer(puiOut)));
}

export function VarUI2FromCy(
  cyIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.CY */,
  puiOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI2FromCy(util.toPointer(cyIn), util.toPointer(puiOut)));
}

export function VarUI2FromStr(
  strIn: string | null /* Windows.Win32.Foundation.PWSTR */,
  lcid: number /* u32 */,
  dwFlags: number /* u32 */,
  puiOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI2FromStr(util.pwstrToFfi(strIn), lcid, dwFlags, util.toPointer(puiOut)));
}

export function VarUI2FromDisp(
  pdispIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IDispatch */,
  lcid: number /* u32 */,
  puiOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI2FromDisp(util.toPointer(pdispIn), lcid, util.toPointer(puiOut)));
}

export function VarUI2FromBool(
  boolIn: number /* i16 */,
  puiOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI2FromBool(boolIn, util.toPointer(puiOut)));
}

export function VarUI2FromI1(
  cIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.CHAR */,
  puiOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI2FromI1(util.toPointer(cIn), util.toPointer(puiOut)));
}

export function VarUI2FromUI4(
  ulIn: number /* u32 */,
  puiOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI2FromUI4(ulIn, util.toPointer(puiOut)));
}

export function VarUI2FromUI8(
  i64In: Deno.PointerValue /* u64 */,
  puiOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI2FromUI8(i64In, util.toPointer(puiOut)));
}

export function VarUI2FromDec(
  pdecIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  puiOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI2FromDec(util.toPointer(pdecIn), util.toPointer(puiOut)));
}

export function VarUI4FromUI1(
  bIn: number /* u8 */,
  pulOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI4FromUI1(bIn, util.toPointer(pulOut)));
}

export function VarUI4FromI2(
  uiIn: number /* i16 */,
  pulOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI4FromI2(uiIn, util.toPointer(pulOut)));
}

export function VarUI4FromI4(
  lIn: number /* i32 */,
  pulOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI4FromI4(lIn, util.toPointer(pulOut)));
}

export function VarUI4FromI8(
  i64In: Deno.PointerValue /* i64 */,
  plOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI4FromI8(i64In, util.toPointer(plOut)));
}

export function VarUI4FromR4(
  fltIn: number /* f32 */,
  pulOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI4FromR4(fltIn, util.toPointer(pulOut)));
}

export function VarUI4FromR8(
  dblIn: number /* f64 */,
  pulOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI4FromR8(dblIn, util.toPointer(pulOut)));
}

export function VarUI4FromDate(
  dateIn: number /* f64 */,
  pulOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI4FromDate(dateIn, util.toPointer(pulOut)));
}

export function VarUI4FromCy(
  cyIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.CY */,
  pulOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI4FromCy(util.toPointer(cyIn), util.toPointer(pulOut)));
}

export function VarUI4FromStr(
  strIn: string | null /* Windows.Win32.Foundation.PWSTR */,
  lcid: number /* u32 */,
  dwFlags: number /* u32 */,
  pulOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI4FromStr(util.pwstrToFfi(strIn), lcid, dwFlags, util.toPointer(pulOut)));
}

export function VarUI4FromDisp(
  pdispIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IDispatch */,
  lcid: number /* u32 */,
  pulOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI4FromDisp(util.toPointer(pdispIn), lcid, util.toPointer(pulOut)));
}

export function VarUI4FromBool(
  boolIn: number /* i16 */,
  pulOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI4FromBool(boolIn, util.toPointer(pulOut)));
}

export function VarUI4FromI1(
  cIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.CHAR */,
  pulOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI4FromI1(util.toPointer(cIn), util.toPointer(pulOut)));
}

export function VarUI4FromUI2(
  uiIn: number /* u16 */,
  pulOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI4FromUI2(uiIn, util.toPointer(pulOut)));
}

export function VarUI4FromUI8(
  ui64In: Deno.PointerValue /* u64 */,
  plOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI4FromUI8(ui64In, util.toPointer(plOut)));
}

export function VarUI4FromDec(
  pdecIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  pulOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI4FromDec(util.toPointer(pdecIn), util.toPointer(pulOut)));
}

export function VarUI8FromUI1(
  bIn: number /* u8 */,
  pi64Out: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI8FromUI1(bIn, util.toPointer(pi64Out)));
}

export function VarUI8FromI2(
  sIn: number /* i16 */,
  pi64Out: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI8FromI2(sIn, util.toPointer(pi64Out)));
}

export function VarUI8FromI8(
  ui64In: Deno.PointerValue /* i64 */,
  pi64Out: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI8FromI8(ui64In, util.toPointer(pi64Out)));
}

export function VarUI8FromR4(
  fltIn: number /* f32 */,
  pi64Out: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI8FromR4(fltIn, util.toPointer(pi64Out)));
}

export function VarUI8FromR8(
  dblIn: number /* f64 */,
  pi64Out: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI8FromR8(dblIn, util.toPointer(pi64Out)));
}

export function VarUI8FromCy(
  cyIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.CY */,
  pi64Out: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI8FromCy(util.toPointer(cyIn), util.toPointer(pi64Out)));
}

export function VarUI8FromDate(
  dateIn: number /* f64 */,
  pi64Out: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI8FromDate(dateIn, util.toPointer(pi64Out)));
}

export function VarUI8FromStr(
  strIn: string | null /* Windows.Win32.Foundation.PWSTR */,
  lcid: number /* u32 */,
  dwFlags: number /* u32 */,
  pi64Out: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI8FromStr(util.pwstrToFfi(strIn), lcid, dwFlags, util.toPointer(pi64Out)));
}

export function VarUI8FromDisp(
  pdispIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IDispatch */,
  lcid: number /* u32 */,
  pi64Out: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI8FromDisp(util.toPointer(pdispIn), lcid, util.toPointer(pi64Out)));
}

export function VarUI8FromBool(
  boolIn: number /* i16 */,
  pi64Out: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI8FromBool(boolIn, util.toPointer(pi64Out)));
}

export function VarUI8FromI1(
  cIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.CHAR */,
  pi64Out: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI8FromI1(util.toPointer(cIn), util.toPointer(pi64Out)));
}

export function VarUI8FromUI2(
  uiIn: number /* u16 */,
  pi64Out: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI8FromUI2(uiIn, util.toPointer(pi64Out)));
}

export function VarUI8FromUI4(
  ulIn: number /* u32 */,
  pi64Out: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI8FromUI4(ulIn, util.toPointer(pi64Out)));
}

export function VarUI8FromDec(
  pdecIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  pi64Out: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUI8FromDec(util.toPointer(pdecIn), util.toPointer(pi64Out)));
}

export function VarDecFromUI1(
  bIn: number /* u8 */,
  pdecOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDecFromUI1(bIn, util.toPointer(pdecOut)));
}

export function VarDecFromI2(
  uiIn: number /* i16 */,
  pdecOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDecFromI2(uiIn, util.toPointer(pdecOut)));
}

export function VarDecFromI4(
  lIn: number /* i32 */,
  pdecOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDecFromI4(lIn, util.toPointer(pdecOut)));
}

export function VarDecFromI8(
  i64In: Deno.PointerValue /* i64 */,
  pdecOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDecFromI8(i64In, util.toPointer(pdecOut)));
}

export function VarDecFromR4(
  fltIn: number /* f32 */,
  pdecOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDecFromR4(fltIn, util.toPointer(pdecOut)));
}

export function VarDecFromR8(
  dblIn: number /* f64 */,
  pdecOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDecFromR8(dblIn, util.toPointer(pdecOut)));
}

export function VarDecFromDate(
  dateIn: number /* f64 */,
  pdecOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDecFromDate(dateIn, util.toPointer(pdecOut)));
}

export function VarDecFromCy(
  cyIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.CY */,
  pdecOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDecFromCy(util.toPointer(cyIn), util.toPointer(pdecOut)));
}

export function VarDecFromStr(
  strIn: string | null /* Windows.Win32.Foundation.PWSTR */,
  lcid: number /* u32 */,
  dwFlags: number /* u32 */,
  pdecOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDecFromStr(util.pwstrToFfi(strIn), lcid, dwFlags, util.toPointer(pdecOut)));
}

export function VarDecFromDisp(
  pdispIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IDispatch */,
  lcid: number /* u32 */,
  pdecOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDecFromDisp(util.toPointer(pdispIn), lcid, util.toPointer(pdecOut)));
}

export function VarDecFromBool(
  boolIn: number /* i16 */,
  pdecOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDecFromBool(boolIn, util.toPointer(pdecOut)));
}

export function VarDecFromI1(
  cIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.CHAR */,
  pdecOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDecFromI1(util.toPointer(cIn), util.toPointer(pdecOut)));
}

export function VarDecFromUI2(
  uiIn: number /* u16 */,
  pdecOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDecFromUI2(uiIn, util.toPointer(pdecOut)));
}

export function VarDecFromUI4(
  ulIn: number /* u32 */,
  pdecOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDecFromUI4(ulIn, util.toPointer(pdecOut)));
}

export function VarDecFromUI8(
  ui64In: Deno.PointerValue /* u64 */,
  pdecOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDecFromUI8(ui64In, util.toPointer(pdecOut)));
}

export function VarParseNumFromStr(
  strIn: string | null /* Windows.Win32.Foundation.PWSTR */,
  lcid: number /* u32 */,
  dwFlags: number /* u32 */,
  pnumprs: Deno.PointerValue | Uint8Array | null /* ptr */,
  rgbDig: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarParseNumFromStr(util.pwstrToFfi(strIn), lcid, dwFlags, util.toPointer(pnumprs), util.toPointer(rgbDig)));
}

export function VarNumFromParseNum(
  pnumprs: Deno.PointerValue | Uint8Array | null /* ptr */,
  rgbDig: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwVtBits: number /* u32 */,
  pvar: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarNumFromParseNum(util.toPointer(pnumprs), util.toPointer(rgbDig), dwVtBits, util.toPointer(pvar)));
}

export function VarAdd(
  pvarLeft: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarRight: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarAdd(util.toPointer(pvarLeft), util.toPointer(pvarRight), util.toPointer(pvarResult)));
}

export function VarAnd(
  pvarLeft: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarRight: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarAnd(util.toPointer(pvarLeft), util.toPointer(pvarRight), util.toPointer(pvarResult)));
}

export function VarCat(
  pvarLeft: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarRight: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarCat(util.toPointer(pvarLeft), util.toPointer(pvarRight), util.toPointer(pvarResult)));
}

export function VarDiv(
  pvarLeft: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarRight: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDiv(util.toPointer(pvarLeft), util.toPointer(pvarRight), util.toPointer(pvarResult)));
}

export function VarEqv(
  pvarLeft: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarRight: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarEqv(util.toPointer(pvarLeft), util.toPointer(pvarRight), util.toPointer(pvarResult)));
}

export function VarIdiv(
  pvarLeft: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarRight: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarIdiv(util.toPointer(pvarLeft), util.toPointer(pvarRight), util.toPointer(pvarResult)));
}

export function VarImp(
  pvarLeft: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarRight: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarImp(util.toPointer(pvarLeft), util.toPointer(pvarRight), util.toPointer(pvarResult)));
}

export function VarMod(
  pvarLeft: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarRight: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarMod(util.toPointer(pvarLeft), util.toPointer(pvarRight), util.toPointer(pvarResult)));
}

export function VarMul(
  pvarLeft: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarRight: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarMul(util.toPointer(pvarLeft), util.toPointer(pvarRight), util.toPointer(pvarResult)));
}

export function VarOr(
  pvarLeft: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarRight: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarOr(util.toPointer(pvarLeft), util.toPointer(pvarRight), util.toPointer(pvarResult)));
}

export function VarPow(
  pvarLeft: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarRight: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarPow(util.toPointer(pvarLeft), util.toPointer(pvarRight), util.toPointer(pvarResult)));
}

export function VarSub(
  pvarLeft: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarRight: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarSub(util.toPointer(pvarLeft), util.toPointer(pvarRight), util.toPointer(pvarResult)));
}

export function VarXor(
  pvarLeft: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarRight: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarXor(util.toPointer(pvarLeft), util.toPointer(pvarRight), util.toPointer(pvarResult)));
}

export function VarAbs(
  pvarIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarAbs(util.toPointer(pvarIn), util.toPointer(pvarResult)));
}

export function VarFix(
  pvarIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarFix(util.toPointer(pvarIn), util.toPointer(pvarResult)));
}

export function VarInt(
  pvarIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarInt(util.toPointer(pvarIn), util.toPointer(pvarResult)));
}

export function VarNeg(
  pvarIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarNeg(util.toPointer(pvarIn), util.toPointer(pvarResult)));
}

export function VarNot(
  pvarIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarNot(util.toPointer(pvarIn), util.toPointer(pvarResult)));
}

export function VarRound(
  pvarIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  cDecimals: number /* i32 */,
  pvarResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarRound(util.toPointer(pvarIn), cDecimals, util.toPointer(pvarResult)));
}

export function VarCmp(
  pvarLeft: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarRight: Deno.PointerValue | Uint8Array | null /* ptr */,
  lcid: number /* u32 */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarCmp(util.toPointer(pvarLeft), util.toPointer(pvarRight), lcid, dwFlags));
}

export function VarDecAdd(
  pdecLeft: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdecRight: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdecResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDecAdd(util.toPointer(pdecLeft), util.toPointer(pdecRight), util.toPointer(pdecResult)));
}

export function VarDecDiv(
  pdecLeft: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdecRight: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdecResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDecDiv(util.toPointer(pdecLeft), util.toPointer(pdecRight), util.toPointer(pdecResult)));
}

export function VarDecMul(
  pdecLeft: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdecRight: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdecResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDecMul(util.toPointer(pdecLeft), util.toPointer(pdecRight), util.toPointer(pdecResult)));
}

export function VarDecSub(
  pdecLeft: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdecRight: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdecResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDecSub(util.toPointer(pdecLeft), util.toPointer(pdecRight), util.toPointer(pdecResult)));
}

export function VarDecAbs(
  pdecIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdecResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDecAbs(util.toPointer(pdecIn), util.toPointer(pdecResult)));
}

export function VarDecFix(
  pdecIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdecResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDecFix(util.toPointer(pdecIn), util.toPointer(pdecResult)));
}

export function VarDecInt(
  pdecIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdecResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDecInt(util.toPointer(pdecIn), util.toPointer(pdecResult)));
}

export function VarDecNeg(
  pdecIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdecResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDecNeg(util.toPointer(pdecIn), util.toPointer(pdecResult)));
}

export function VarDecRound(
  pdecIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  cDecimals: number /* i32 */,
  pdecResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDecRound(util.toPointer(pdecIn), cDecimals, util.toPointer(pdecResult)));
}

export function VarDecCmp(
  pdecLeft: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdecRight: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDecCmp(util.toPointer(pdecLeft), util.toPointer(pdecRight)));
}

export function VarDecCmpR8(
  pdecLeft: Deno.PointerValue | Uint8Array | null /* ptr */,
  dblRight: number /* f64 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDecCmpR8(util.toPointer(pdecLeft), dblRight));
}

export function VarCyAdd(
  cyLeft: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.CY */,
  cyRight: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.CY */,
  pcyResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarCyAdd(util.toPointer(cyLeft), util.toPointer(cyRight), util.toPointer(pcyResult)));
}

export function VarCyMul(
  cyLeft: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.CY */,
  cyRight: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.CY */,
  pcyResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarCyMul(util.toPointer(cyLeft), util.toPointer(cyRight), util.toPointer(pcyResult)));
}

export function VarCyMulI4(
  cyLeft: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.CY */,
  lRight: number /* i32 */,
  pcyResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarCyMulI4(util.toPointer(cyLeft), lRight, util.toPointer(pcyResult)));
}

export function VarCyMulI8(
  cyLeft: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.CY */,
  lRight: Deno.PointerValue /* i64 */,
  pcyResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarCyMulI8(util.toPointer(cyLeft), lRight, util.toPointer(pcyResult)));
}

export function VarCySub(
  cyLeft: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.CY */,
  cyRight: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.CY */,
  pcyResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarCySub(util.toPointer(cyLeft), util.toPointer(cyRight), util.toPointer(pcyResult)));
}

export function VarCyAbs(
  cyIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.CY */,
  pcyResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarCyAbs(util.toPointer(cyIn), util.toPointer(pcyResult)));
}

export function VarCyFix(
  cyIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.CY */,
  pcyResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarCyFix(util.toPointer(cyIn), util.toPointer(pcyResult)));
}

export function VarCyInt(
  cyIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.CY */,
  pcyResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarCyInt(util.toPointer(cyIn), util.toPointer(pcyResult)));
}

export function VarCyNeg(
  cyIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.CY */,
  pcyResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarCyNeg(util.toPointer(cyIn), util.toPointer(pcyResult)));
}

export function VarCyRound(
  cyIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.CY */,
  cDecimals: number /* i32 */,
  pcyResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarCyRound(util.toPointer(cyIn), cDecimals, util.toPointer(pcyResult)));
}

export function VarCyCmp(
  cyLeft: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.CY */,
  cyRight: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.CY */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarCyCmp(util.toPointer(cyLeft), util.toPointer(cyRight)));
}

export function VarCyCmpR8(
  cyLeft: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.CY */,
  dblRight: number /* f64 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarCyCmpR8(util.toPointer(cyLeft), dblRight));
}

export function VarBstrCat(
  bstrLeft: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.BSTR */,
  bstrRight: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.BSTR */,
  pbstrResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarBstrCat(util.toPointer(bstrLeft), util.toPointer(bstrRight), util.toPointer(pbstrResult)));
}

export function VarBstrCmp(
  bstrLeft: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.BSTR */,
  bstrRight: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.BSTR */,
  lcid: number /* u32 */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarBstrCmp(util.toPointer(bstrLeft), util.toPointer(bstrRight), lcid, dwFlags));
}

export function VarR8Pow(
  dblLeft: number /* f64 */,
  dblRight: number /* f64 */,
  pdblResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarR8Pow(dblLeft, dblRight, util.toPointer(pdblResult)));
}

export function VarR4CmpR8(
  fltLeft: number /* f32 */,
  dblRight: number /* f64 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarR4CmpR8(fltLeft, dblRight));
}

export function VarR8Round(
  dblIn: number /* f64 */,
  cDecimals: number /* i32 */,
  pdblResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarR8Round(dblIn, cDecimals, util.toPointer(pdblResult)));
}

export function VarDateFromUdate(
  pudateIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  pdateOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDateFromUdate(util.toPointer(pudateIn), dwFlags, util.toPointer(pdateOut)));
}

export function VarDateFromUdateEx(
  pudateIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  lcid: number /* u32 */,
  dwFlags: number /* u32 */,
  pdateOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarDateFromUdateEx(util.toPointer(pudateIn), lcid, dwFlags, util.toPointer(pdateOut)));
}

export function VarUdateFromDate(
  dateIn: number /* f64 */,
  dwFlags: number /* u32 */,
  pudateOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarUdateFromDate(dateIn, dwFlags, util.toPointer(pudateOut)));
}

export function GetAltMonthNames(
  lcid: number /* u32 */,
  prgp: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.GetAltMonthNames(lcid, util.toPointer(prgp)));
}

export function VarFormat(
  pvarIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  pstrFormat: string | null /* Windows.Win32.Foundation.PWSTR */,
  iFirstDay: number /* i32 */,
  iFirstWeek: number /* i32 */,
  dwFlags: number /* u32 */,
  pbstrOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarFormat(util.toPointer(pvarIn), util.pwstrToFfi(pstrFormat), iFirstDay, iFirstWeek, dwFlags, util.toPointer(pbstrOut)));
}

export function VarFormatDateTime(
  pvarIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  iNamedFormat: number /* i32 */,
  dwFlags: number /* u32 */,
  pbstrOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarFormatDateTime(util.toPointer(pvarIn), iNamedFormat, dwFlags, util.toPointer(pbstrOut)));
}

export function VarFormatNumber(
  pvarIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  iNumDig: number /* i32 */,
  iIncLead: number /* i32 */,
  iUseParens: number /* i32 */,
  iGroup: number /* i32 */,
  dwFlags: number /* u32 */,
  pbstrOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarFormatNumber(util.toPointer(pvarIn), iNumDig, iIncLead, iUseParens, iGroup, dwFlags, util.toPointer(pbstrOut)));
}

export function VarFormatPercent(
  pvarIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  iNumDig: number /* i32 */,
  iIncLead: number /* i32 */,
  iUseParens: number /* i32 */,
  iGroup: number /* i32 */,
  dwFlags: number /* u32 */,
  pbstrOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarFormatPercent(util.toPointer(pvarIn), iNumDig, iIncLead, iUseParens, iGroup, dwFlags, util.toPointer(pbstrOut)));
}

export function VarFormatCurrency(
  pvarIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  iNumDig: number /* i32 */,
  iIncLead: number /* i32 */,
  iUseParens: number /* i32 */,
  iGroup: number /* i32 */,
  dwFlags: number /* u32 */,
  pbstrOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarFormatCurrency(util.toPointer(pvarIn), iNumDig, iIncLead, iUseParens, iGroup, dwFlags, util.toPointer(pbstrOut)));
}

export function VarWeekdayName(
  iWeekday: number /* i32 */,
  fAbbrev: number /* i32 */,
  iFirstDay: number /* i32 */,
  dwFlags: number /* u32 */,
  pbstrOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarWeekdayName(iWeekday, fAbbrev, iFirstDay, dwFlags, util.toPointer(pbstrOut)));
}

export function VarMonthName(
  iMonth: number /* i32 */,
  fAbbrev: number /* i32 */,
  dwFlags: number /* u32 */,
  pbstrOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarMonthName(iMonth, fAbbrev, dwFlags, util.toPointer(pbstrOut)));
}

export function VarFormatFromTokens(
  pvarIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  pstrFormat: string | null /* Windows.Win32.Foundation.PWSTR */,
  pbTokCur: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  pbstrOut: Deno.PointerValue | Uint8Array | null /* ptr */,
  lcid: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarFormatFromTokens(util.toPointer(pvarIn), util.pwstrToFfi(pstrFormat), util.toPointer(pbTokCur), dwFlags, util.toPointer(pbstrOut), lcid));
}

export function VarTokenizeFormatString(
  pstrFormat: string | null /* Windows.Win32.Foundation.PWSTR */,
  rgbTok: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbTok: number /* i32 */,
  iFirstDay: number /* i32 */,
  iFirstWeek: number /* i32 */,
  lcid: number /* u32 */,
  pcbActual: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.VarTokenizeFormatString(util.pwstrToFfi(pstrFormat), util.toPointer(rgbTok), cbTok, iFirstDay, iFirstWeek, lcid, util.toPointer(pcbActual)));
}

export function LHashValOfNameSysA(
  syskind: SYSKIND /* Windows.Win32.System.Com.SYSKIND */,
  lcid: number /* u32 */,
  szName: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libOLEAUT32.LHashValOfNameSysA(syskind, lcid, util.pstrToFfi(szName));
}

export function LHashValOfNameSys(
  syskind: SYSKIND /* Windows.Win32.System.Com.SYSKIND */,
  lcid: number /* u32 */,
  szName: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libOLEAUT32.LHashValOfNameSys(syskind, lcid, util.pwstrToFfi(szName));
}

export function LoadTypeLib(
  szFile: string | null /* Windows.Win32.Foundation.PWSTR */,
  pptlib: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.LoadTypeLib(util.pwstrToFfi(szFile), util.toPointer(pptlib)));
}

export function LoadTypeLibEx(
  szFile: string | null /* Windows.Win32.Foundation.PWSTR */,
  regkind: REGKIND /* Windows.Win32.System.Ole.REGKIND */,
  pptlib: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.LoadTypeLibEx(util.pwstrToFfi(szFile), regkind, util.toPointer(pptlib)));
}

export function LoadRegTypeLib(
  rguid: Deno.PointerValue | Uint8Array | null /* ptr */,
  wVerMajor: number /* u16 */,
  wVerMinor: number /* u16 */,
  lcid: number /* u32 */,
  pptlib: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.LoadRegTypeLib(util.toPointer(rguid), wVerMajor, wVerMinor, lcid, util.toPointer(pptlib)));
}

export function QueryPathOfRegTypeLib(
  guid: Deno.PointerValue | Uint8Array | null /* ptr */,
  wMaj: number /* u16 */,
  wMin: number /* u16 */,
  lcid: number /* u32 */,
  lpbstrPathName: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.QueryPathOfRegTypeLib(util.toPointer(guid), wMaj, wMin, lcid, util.toPointer(lpbstrPathName)));
}

export function RegisterTypeLib(
  ptlib: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.ITypeLib */,
  szFullPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  szHelpDir: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.RegisterTypeLib(util.toPointer(ptlib), util.pwstrToFfi(szFullPath), util.pwstrToFfi(szHelpDir)));
}

export function UnRegisterTypeLib(
  libID: Deno.PointerValue | Uint8Array | null /* ptr */,
  wVerMajor: number /* u16 */,
  wVerMinor: number /* u16 */,
  lcid: number /* u32 */,
  syskind: SYSKIND /* Windows.Win32.System.Com.SYSKIND */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.UnRegisterTypeLib(util.toPointer(libID), wVerMajor, wVerMinor, lcid, syskind));
}

export function RegisterTypeLibForUser(
  ptlib: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.ITypeLib */,
  szFullPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  szHelpDir: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.RegisterTypeLibForUser(util.toPointer(ptlib), util.pwstrToFfi(szFullPath), util.pwstrToFfi(szHelpDir)));
}

export function UnRegisterTypeLibForUser(
  libID: Deno.PointerValue | Uint8Array | null /* ptr */,
  wMajorVerNum: number /* u16 */,
  wMinorVerNum: number /* u16 */,
  lcid: number /* u32 */,
  syskind: SYSKIND /* Windows.Win32.System.Com.SYSKIND */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.UnRegisterTypeLibForUser(util.toPointer(libID), wMajorVerNum, wMinorVerNum, lcid, syskind));
}

export function CreateTypeLib(
  syskind: SYSKIND /* Windows.Win32.System.Com.SYSKIND */,
  szFile: string | null /* Windows.Win32.Foundation.PWSTR */,
  ppctlib: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.CreateTypeLib(syskind, util.pwstrToFfi(szFile), util.toPointer(ppctlib)));
}

export function CreateTypeLib2(
  syskind: SYSKIND /* Windows.Win32.System.Com.SYSKIND */,
  szFile: string | null /* Windows.Win32.Foundation.PWSTR */,
  ppctlib: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.CreateTypeLib2(syskind, util.pwstrToFfi(szFile), util.toPointer(ppctlib)));
}

export function DispGetParam(
  pdispparams: Deno.PointerValue | Uint8Array | null /* ptr */,
  position: number /* u32 */,
  vtTarg: number /* u16 */,
  pvarResult: Deno.PointerValue | Uint8Array | null /* ptr */,
  puArgErr: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.DispGetParam(util.toPointer(pdispparams), position, vtTarg, util.toPointer(pvarResult), util.toPointer(puArgErr)));
}

export function DispGetIDsOfNames(
  ptinfo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.ITypeInfo */,
  rgszNames: Deno.PointerValue | Uint8Array | null /* ptr */,
  cNames: number /* u32 */,
  rgdispid: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.DispGetIDsOfNames(util.toPointer(ptinfo), util.toPointer(rgszNames), cNames, util.toPointer(rgdispid)));
}

export function DispInvoke(
  _this: Deno.PointerValue | Uint8Array | null /* ptr */,
  ptinfo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.ITypeInfo */,
  dispidMember: number /* i32 */,
  wFlags: number /* u16 */,
  pparams: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarResult: Deno.PointerValue | Uint8Array | null /* ptr */,
  pexcepinfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  puArgErr: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.DispInvoke(util.toPointer(_this), util.toPointer(ptinfo), dispidMember, wFlags, util.toPointer(pparams), util.toPointer(pvarResult), util.toPointer(pexcepinfo), util.toPointer(puArgErr)));
}

export function CreateDispTypeInfo(
  pidata: Deno.PointerValue | Uint8Array | null /* ptr */,
  lcid: number /* u32 */,
  pptinfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.CreateDispTypeInfo(util.toPointer(pidata), lcid, util.toPointer(pptinfo)));
}

export function CreateStdDispatch(
  punkOuter: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  pvThis: Deno.PointerValue | Uint8Array | null /* ptr */,
  ptinfo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.ITypeInfo */,
  ppunkStdDisp: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.CreateStdDispatch(util.toPointer(punkOuter), util.toPointer(pvThis), util.toPointer(ptinfo), util.toPointer(ppunkStdDisp)));
}

export function DispCallFunc(
  pvInstance: Deno.PointerValue | Uint8Array | null /* ptr */,
  oVft: Deno.PointerValue /* usize */,
  cc: CALLCONV /* Windows.Win32.System.Com.CALLCONV */,
  vtReturn: number /* u16 */,
  cActuals: number /* u32 */,
  prgvt: Deno.PointerValue | Uint8Array | null /* ptr */,
  prgpvarg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvargResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.DispCallFunc(util.toPointer(pvInstance), oVft, cc, vtReturn, cActuals, util.toPointer(prgvt), util.toPointer(prgpvarg), util.toPointer(pvargResult)));
}

export function RegisterActiveObject(
  punk: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  rclsid: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  pdwRegister: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.RegisterActiveObject(util.toPointer(punk), util.toPointer(rclsid), dwFlags, util.toPointer(pdwRegister)));
}

export function RevokeActiveObject(
  dwRegister: number /* u32 */,
  pvReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.RevokeActiveObject(dwRegister, util.toPointer(pvReserved)));
}

export function GetActiveObject(
  rclsid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppunk: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.GetActiveObject(util.toPointer(rclsid), util.toPointer(pvReserved), util.toPointer(ppunk)));
}

export function CreateErrorInfo(
  pperrinfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.CreateErrorInfo(util.toPointer(pperrinfo)));
}

export function GetRecordInfoFromTypeInfo(
  pTypeInfo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.ITypeInfo */,
  ppRecInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.GetRecordInfoFromTypeInfo(util.toPointer(pTypeInfo), util.toPointer(ppRecInfo)));
}

export function GetRecordInfoFromGuids(
  rGuidTypeLib: Deno.PointerValue | Uint8Array | null /* ptr */,
  uVerMajor: number /* u32 */,
  uVerMinor: number /* u32 */,
  lcid: number /* u32 */,
  rGuidTypeInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppRecInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.GetRecordInfoFromGuids(util.toPointer(rGuidTypeLib), uVerMajor, uVerMinor, lcid, util.toPointer(rGuidTypeInfo), util.toPointer(ppRecInfo)));
}

export function OaBuildVersion(): number /* u32 */ {
  return libOLEAUT32.OaBuildVersion();
}

export function ClearCustData(
  pCustData: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOLEAUT32.ClearCustData(util.toPointer(pCustData));
}

export function OaEnablePerUserTLibRegistration(): void /* void */ {
  return libOLEAUT32.OaEnablePerUserTLibRegistration();
}

export function OleBuildVersion(): number /* u32 */ {
  return libole32.OleBuildVersion();
}

export function OleInitialize(
  pvReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.OleInitialize(util.toPointer(pvReserved)));
}

export function OleUninitialize(): void /* void */ {
  return libOLE32.OleUninitialize();
}

export function OleQueryLinkFromData(
  pSrcDataObject: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IDataObject */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.OleQueryLinkFromData(util.toPointer(pSrcDataObject)));
}

export function OleQueryCreateFromData(
  pSrcDataObject: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IDataObject */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.OleQueryCreateFromData(util.toPointer(pSrcDataObject)));
}

export function OleCreate(
  rclsid: Deno.PointerValue | Uint8Array | null /* ptr */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  renderopt: number /* u32 */,
  pFormatEtc: Deno.PointerValue | Uint8Array | null /* ptr */,
  pClientSite: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Ole.IOleClientSite */,
  pStg: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.StructuredStorage.IStorage */,
  ppvObj: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.OleCreate(util.toPointer(rclsid), util.toPointer(riid), renderopt, util.toPointer(pFormatEtc), util.toPointer(pClientSite), util.toPointer(pStg), util.toPointer(ppvObj)));
}

export function OleCreateEx(
  rclsid: Deno.PointerValue | Uint8Array | null /* ptr */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  renderopt: number /* u32 */,
  cFormats: number /* u32 */,
  rgAdvf: Deno.PointerValue | Uint8Array | null /* ptr */,
  rgFormatEtc: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpAdviseSink: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IAdviseSink */,
  rgdwConnection: Deno.PointerValue | Uint8Array | null /* ptr */,
  pClientSite: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Ole.IOleClientSite */,
  pStg: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.StructuredStorage.IStorage */,
  ppvObj: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libole32.OleCreateEx(util.toPointer(rclsid), util.toPointer(riid), dwFlags, renderopt, cFormats, util.toPointer(rgAdvf), util.toPointer(rgFormatEtc), util.toPointer(lpAdviseSink), util.toPointer(rgdwConnection), util.toPointer(pClientSite), util.toPointer(pStg), util.toPointer(ppvObj)));
}

export function OleCreateFromData(
  pSrcDataObj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IDataObject */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  renderopt: number /* u32 */,
  pFormatEtc: Deno.PointerValue | Uint8Array | null /* ptr */,
  pClientSite: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Ole.IOleClientSite */,
  pStg: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.StructuredStorage.IStorage */,
  ppvObj: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.OleCreateFromData(util.toPointer(pSrcDataObj), util.toPointer(riid), renderopt, util.toPointer(pFormatEtc), util.toPointer(pClientSite), util.toPointer(pStg), util.toPointer(ppvObj)));
}

export function OleCreateFromDataEx(
  pSrcDataObj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IDataObject */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  renderopt: number /* u32 */,
  cFormats: number /* u32 */,
  rgAdvf: Deno.PointerValue | Uint8Array | null /* ptr */,
  rgFormatEtc: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpAdviseSink: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IAdviseSink */,
  rgdwConnection: Deno.PointerValue | Uint8Array | null /* ptr */,
  pClientSite: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Ole.IOleClientSite */,
  pStg: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.StructuredStorage.IStorage */,
  ppvObj: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libole32.OleCreateFromDataEx(util.toPointer(pSrcDataObj), util.toPointer(riid), dwFlags, renderopt, cFormats, util.toPointer(rgAdvf), util.toPointer(rgFormatEtc), util.toPointer(lpAdviseSink), util.toPointer(rgdwConnection), util.toPointer(pClientSite), util.toPointer(pStg), util.toPointer(ppvObj)));
}

export function OleCreateLinkFromData(
  pSrcDataObj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IDataObject */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  renderopt: number /* u32 */,
  pFormatEtc: Deno.PointerValue | Uint8Array | null /* ptr */,
  pClientSite: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Ole.IOleClientSite */,
  pStg: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.StructuredStorage.IStorage */,
  ppvObj: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.OleCreateLinkFromData(util.toPointer(pSrcDataObj), util.toPointer(riid), renderopt, util.toPointer(pFormatEtc), util.toPointer(pClientSite), util.toPointer(pStg), util.toPointer(ppvObj)));
}

export function OleCreateLinkFromDataEx(
  pSrcDataObj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IDataObject */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  renderopt: number /* u32 */,
  cFormats: number /* u32 */,
  rgAdvf: Deno.PointerValue | Uint8Array | null /* ptr */,
  rgFormatEtc: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpAdviseSink: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IAdviseSink */,
  rgdwConnection: Deno.PointerValue | Uint8Array | null /* ptr */,
  pClientSite: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Ole.IOleClientSite */,
  pStg: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.StructuredStorage.IStorage */,
  ppvObj: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libole32.OleCreateLinkFromDataEx(util.toPointer(pSrcDataObj), util.toPointer(riid), dwFlags, renderopt, cFormats, util.toPointer(rgAdvf), util.toPointer(rgFormatEtc), util.toPointer(lpAdviseSink), util.toPointer(rgdwConnection), util.toPointer(pClientSite), util.toPointer(pStg), util.toPointer(ppvObj)));
}

export function OleCreateStaticFromData(
  pSrcDataObj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IDataObject */,
  iid: Deno.PointerValue | Uint8Array | null /* ptr */,
  renderopt: number /* u32 */,
  pFormatEtc: Deno.PointerValue | Uint8Array | null /* ptr */,
  pClientSite: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Ole.IOleClientSite */,
  pStg: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.StructuredStorage.IStorage */,
  ppvObj: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.OleCreateStaticFromData(util.toPointer(pSrcDataObj), util.toPointer(iid), renderopt, util.toPointer(pFormatEtc), util.toPointer(pClientSite), util.toPointer(pStg), util.toPointer(ppvObj)));
}

export function OleCreateLink(
  pmkLinkSrc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IMoniker */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  renderopt: number /* u32 */,
  lpFormatEtc: Deno.PointerValue | Uint8Array | null /* ptr */,
  pClientSite: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Ole.IOleClientSite */,
  pStg: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.StructuredStorage.IStorage */,
  ppvObj: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libole32.OleCreateLink(util.toPointer(pmkLinkSrc), util.toPointer(riid), renderopt, util.toPointer(lpFormatEtc), util.toPointer(pClientSite), util.toPointer(pStg), util.toPointer(ppvObj)));
}

export function OleCreateLinkEx(
  pmkLinkSrc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IMoniker */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  renderopt: number /* u32 */,
  cFormats: number /* u32 */,
  rgAdvf: Deno.PointerValue | Uint8Array | null /* ptr */,
  rgFormatEtc: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpAdviseSink: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IAdviseSink */,
  rgdwConnection: Deno.PointerValue | Uint8Array | null /* ptr */,
  pClientSite: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Ole.IOleClientSite */,
  pStg: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.StructuredStorage.IStorage */,
  ppvObj: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libole32.OleCreateLinkEx(util.toPointer(pmkLinkSrc), util.toPointer(riid), dwFlags, renderopt, cFormats, util.toPointer(rgAdvf), util.toPointer(rgFormatEtc), util.toPointer(lpAdviseSink), util.toPointer(rgdwConnection), util.toPointer(pClientSite), util.toPointer(pStg), util.toPointer(ppvObj)));
}

export function OleCreateLinkToFile(
  lpszFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  renderopt: number /* u32 */,
  lpFormatEtc: Deno.PointerValue | Uint8Array | null /* ptr */,
  pClientSite: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Ole.IOleClientSite */,
  pStg: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.StructuredStorage.IStorage */,
  ppvObj: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.OleCreateLinkToFile(util.pwstrToFfi(lpszFileName), util.toPointer(riid), renderopt, util.toPointer(lpFormatEtc), util.toPointer(pClientSite), util.toPointer(pStg), util.toPointer(ppvObj)));
}

export function OleCreateLinkToFileEx(
  lpszFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  renderopt: number /* u32 */,
  cFormats: number /* u32 */,
  rgAdvf: Deno.PointerValue | Uint8Array | null /* ptr */,
  rgFormatEtc: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpAdviseSink: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IAdviseSink */,
  rgdwConnection: Deno.PointerValue | Uint8Array | null /* ptr */,
  pClientSite: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Ole.IOleClientSite */,
  pStg: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.StructuredStorage.IStorage */,
  ppvObj: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libole32.OleCreateLinkToFileEx(util.pwstrToFfi(lpszFileName), util.toPointer(riid), dwFlags, renderopt, cFormats, util.toPointer(rgAdvf), util.toPointer(rgFormatEtc), util.toPointer(lpAdviseSink), util.toPointer(rgdwConnection), util.toPointer(pClientSite), util.toPointer(pStg), util.toPointer(ppvObj)));
}

export function OleCreateFromFile(
  rclsid: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  renderopt: number /* u32 */,
  lpFormatEtc: Deno.PointerValue | Uint8Array | null /* ptr */,
  pClientSite: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Ole.IOleClientSite */,
  pStg: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.StructuredStorage.IStorage */,
  ppvObj: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.OleCreateFromFile(util.toPointer(rclsid), util.pwstrToFfi(lpszFileName), util.toPointer(riid), renderopt, util.toPointer(lpFormatEtc), util.toPointer(pClientSite), util.toPointer(pStg), util.toPointer(ppvObj)));
}

export function OleCreateFromFileEx(
  rclsid: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  renderopt: number /* u32 */,
  cFormats: number /* u32 */,
  rgAdvf: Deno.PointerValue | Uint8Array | null /* ptr */,
  rgFormatEtc: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpAdviseSink: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IAdviseSink */,
  rgdwConnection: Deno.PointerValue | Uint8Array | null /* ptr */,
  pClientSite: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Ole.IOleClientSite */,
  pStg: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.StructuredStorage.IStorage */,
  ppvObj: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libole32.OleCreateFromFileEx(util.toPointer(rclsid), util.pwstrToFfi(lpszFileName), util.toPointer(riid), dwFlags, renderopt, cFormats, util.toPointer(rgAdvf), util.toPointer(rgFormatEtc), util.toPointer(lpAdviseSink), util.toPointer(rgdwConnection), util.toPointer(pClientSite), util.toPointer(pStg), util.toPointer(ppvObj)));
}

export function OleLoad(
  pStg: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.StructuredStorage.IStorage */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pClientSite: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Ole.IOleClientSite */,
  ppvObj: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.OleLoad(util.toPointer(pStg), util.toPointer(riid), util.toPointer(pClientSite), util.toPointer(ppvObj)));
}

export function OleSave(
  pPS: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.StructuredStorage.IPersistStorage */,
  pStg: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.StructuredStorage.IStorage */,
  fSameAsLoad: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.OleSave(util.toPointer(pPS), util.toPointer(pStg), util.boolToFfi(fSameAsLoad)));
}

export function OleLoadFromStream(
  pStm: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IStream */,
  iidInterface: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppvObj: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.OleLoadFromStream(util.toPointer(pStm), util.toPointer(iidInterface), util.toPointer(ppvObj)));
}

export function OleSaveToStream(
  pPStm: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IPersistStream */,
  pStm: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IStream */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.OleSaveToStream(util.toPointer(pPStm), util.toPointer(pStm)));
}

export function OleSetContainedObject(
  pUnknown: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  fContained: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.OleSetContainedObject(util.toPointer(pUnknown), util.boolToFfi(fContained)));
}

export function OleNoteObjectVisible(
  pUnknown: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  fVisible: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libole32.OleNoteObjectVisible(util.toPointer(pUnknown), util.boolToFfi(fVisible)));
}

export function RegisterDragDrop(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pDropTarget: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Ole.IDropTarget */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.RegisterDragDrop(util.hwndToFfi(hwnd), util.toPointer(pDropTarget)));
}

export function RevokeDragDrop(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.RevokeDragDrop(util.hwndToFfi(hwnd)));
}

export function DoDragDrop(
  pDataObj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IDataObject */,
  pDropSource: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Ole.IDropSource */,
  dwOKEffects: number /* u32 */,
  pdwEffect: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.DoDragDrop(util.toPointer(pDataObj), util.toPointer(pDropSource), dwOKEffects, util.toPointer(pdwEffect)));
}

export function OleSetClipboard(
  pDataObj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IDataObject */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.OleSetClipboard(util.toPointer(pDataObj)));
}

export function OleGetClipboard(
  ppDataObj: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.OleGetClipboard(util.toPointer(ppDataObj)));
}

export function OleGetClipboardWithEnterpriseInfo(
  dataObject: Deno.PointerValue | Uint8Array | null /* ptr */,
  dataEnterpriseId: Deno.PointerValue | Uint8Array | null /* ptr */,
  sourceDescription: Deno.PointerValue | Uint8Array | null /* ptr */,
  targetDescription: Deno.PointerValue | Uint8Array | null /* ptr */,
  dataDescription: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libole32.OleGetClipboardWithEnterpriseInfo(util.toPointer(dataObject), util.toPointer(dataEnterpriseId), util.toPointer(sourceDescription), util.toPointer(targetDescription), util.toPointer(dataDescription)));
}

export function OleFlushClipboard(): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.OleFlushClipboard());
}

export function OleIsCurrentClipboard(
  pDataObj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IDataObject */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.OleIsCurrentClipboard(util.toPointer(pDataObj)));
}

export function OleCreateMenuDescriptor(
  hmenuCombined: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.WindowsAndMessaging.HMENU */,
  lpMenuWidths: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue /* isize */ {
  return libOLE32.OleCreateMenuDescriptor(util.toPointer(hmenuCombined), util.toPointer(lpMenuWidths));
}

export function OleSetMenuDescriptor(
  holemenu: Deno.PointerValue /* isize */,
  hwndFrame: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  hwndActiveObject: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  lpFrame: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Ole.IOleInPlaceFrame */,
  lpActiveObj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Ole.IOleInPlaceActiveObject */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.OleSetMenuDescriptor(holemenu, util.hwndToFfi(hwndFrame), util.hwndToFfi(hwndActiveObject), util.toPointer(lpFrame), util.toPointer(lpActiveObj)));
}

export function OleDestroyMenuDescriptor(
  holemenu: Deno.PointerValue /* isize */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.OleDestroyMenuDescriptor(holemenu));
}

export function OleTranslateAccelerator(
  lpFrame: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Ole.IOleInPlaceFrame */,
  lpFrameInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpmsg: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.OleTranslateAccelerator(util.toPointer(lpFrame), util.toPointer(lpFrameInfo), util.toPointer(lpmsg)));
}

export function OleDuplicateData(
  hSrc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  cfFormat: number /* u16 */,
  uiFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libOLE32.OleDuplicateData(util.toPointer(hSrc), cfFormat, uiFlags));
}

export function OleDraw(
  pUnknown: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  dwAspect: number /* u32 */,
  hdcDraw: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
  lprcBounds: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.OleDraw(util.toPointer(pUnknown), dwAspect, util.toPointer(hdcDraw), util.toPointer(lprcBounds)));
}

export function OleRun(
  pUnknown: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.OleRun(util.toPointer(pUnknown)));
}

export function OleIsRunning(
  pObject: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Ole.IOleObject */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libOLE32.OleIsRunning(util.toPointer(pObject)));
}

export function OleLockRunning(
  pUnknown: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  fLock: boolean /* Windows.Win32.Foundation.BOOL */,
  fLastUnlockCloses: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.OleLockRunning(util.toPointer(pUnknown), util.boolToFfi(fLock), util.boolToFfi(fLastUnlockCloses)));
}

export function ReleaseStgMedium(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOLE32.ReleaseStgMedium(util.toPointer(param0));
}

export function CreateOleAdviseHolder(
  ppOAHolder: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.CreateOleAdviseHolder(util.toPointer(ppOAHolder)));
}

export function OleCreateDefaultHandler(
  clsid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pUnkOuter: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  lplpObj: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libole32.OleCreateDefaultHandler(util.toPointer(clsid), util.toPointer(pUnkOuter), util.toPointer(riid), util.toPointer(lplpObj)));
}

export function OleCreateEmbeddingHelper(
  clsid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pUnkOuter: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  flags: number /* u32 */,
  pCF: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IClassFactory */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  lplpObj: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.OleCreateEmbeddingHelper(util.toPointer(clsid), util.toPointer(pUnkOuter), flags, util.toPointer(pCF), util.toPointer(riid), util.toPointer(lplpObj)));
}

export function IsAccelerator(
  hAccel: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.WindowsAndMessaging.HACCEL */,
  cAccelEntries: number /* i32 */,
  lpMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpwCmd: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libOLE32.IsAccelerator(util.toPointer(hAccel), cAccelEntries, util.toPointer(lpMsg), util.toPointer(lpwCmd)));
}

export function OleGetIconOfFile(
  lpszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  fUseFileAsLabel: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue /* isize */ {
  return libole32.OleGetIconOfFile(util.pwstrToFfi(lpszPath), util.boolToFfi(fUseFileAsLabel));
}

export function OleGetIconOfClass(
  rclsid: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszLabel: string | null /* Windows.Win32.Foundation.PWSTR */,
  fUseTypeAsLabel: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue /* isize */ {
  return libOLE32.OleGetIconOfClass(util.toPointer(rclsid), util.pwstrToFfi(lpszLabel), util.boolToFfi(fUseTypeAsLabel));
}

export function OleMetafilePictFromIconAndLabel(
  hIcon: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.WindowsAndMessaging.HICON */,
  lpszLabel: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszSourceFile: string | null /* Windows.Win32.Foundation.PWSTR */,
  iIconIndex: number /* u32 */,
): Deno.PointerValue /* isize */ {
  return libole32.OleMetafilePictFromIconAndLabel(util.toPointer(hIcon), util.pwstrToFfi(lpszLabel), util.pwstrToFfi(lpszSourceFile), iIconIndex);
}

export function OleRegGetUserType(
  clsid: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFormOfType: number /* u32 */,
  pszUserType: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.OleRegGetUserType(util.toPointer(clsid), dwFormOfType, util.toPointer(pszUserType)));
}

export function OleRegGetMiscStatus(
  clsid: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwAspect: number /* u32 */,
  pdwStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.OleRegGetMiscStatus(util.toPointer(clsid), dwAspect, util.toPointer(pdwStatus)));
}

export function OleRegEnumFormatEtc(
  clsid: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwDirection: number /* u32 */,
  ppenum: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libole32.OleRegEnumFormatEtc(util.toPointer(clsid), dwDirection, util.toPointer(ppenum)));
}

export function OleRegEnumVerbs(
  clsid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppenum: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.OleRegEnumVerbs(util.toPointer(clsid), util.toPointer(ppenum)));
}

export function OleDoAutoConvert(
  pStg: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.StructuredStorage.IStorage */,
  pClsidNew: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libole32.OleDoAutoConvert(util.toPointer(pStg), util.toPointer(pClsidNew)));
}

export function OleGetAutoConvert(
  clsidOld: Deno.PointerValue | Uint8Array | null /* ptr */,
  pClsidNew: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32.OleGetAutoConvert(util.toPointer(clsidOld), util.toPointer(pClsidNew)));
}

export function OleSetAutoConvert(
  clsidOld: Deno.PointerValue | Uint8Array | null /* ptr */,
  clsidNew: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libole32.OleSetAutoConvert(util.toPointer(clsidOld), util.toPointer(clsidNew)));
}

export function HRGN_UserSize(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libOLE32.HRGN_UserSize(util.toPointer(param0), param1, util.toPointer(param2));
}

export function HRGN_UserMarshal(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.HRGN_UserMarshal(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HRGN_UserUnmarshal(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32.HRGN_UserUnmarshal(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HRGN_UserFree(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOLE32.HRGN_UserFree(util.toPointer(param0), util.toPointer(param1));
}

export function HRGN_UserSize64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libapi_ms_win_core_marshal_l1_1_0.HRGN_UserSize64(util.toPointer(param0), param1, util.toPointer(param2));
}

export function HRGN_UserMarshal64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libapi_ms_win_core_marshal_l1_1_0.HRGN_UserMarshal64(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HRGN_UserUnmarshal64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libapi_ms_win_core_marshal_l1_1_0.HRGN_UserUnmarshal64(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HRGN_UserFree64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libapi_ms_win_core_marshal_l1_1_0.HRGN_UserFree64(util.toPointer(param0), util.toPointer(param1));
}

export function OleCreatePropertyFrame(
  hwndOwner: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  x: number /* u32 */,
  y: number /* u32 */,
  lpszCaption: string | null /* Windows.Win32.Foundation.PWSTR */,
  cObjects: number /* u32 */,
  ppUnk: Deno.PointerValue | Uint8Array | null /* ptr */,
  cPages: number /* u32 */,
  pPageClsID: Deno.PointerValue | Uint8Array | null /* ptr */,
  lcid: number /* u32 */,
  dwReserved: number /* u32 */,
  pvReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.OleCreatePropertyFrame(util.hwndToFfi(hwndOwner), x, y, util.pwstrToFfi(lpszCaption), cObjects, util.toPointer(ppUnk), cPages, util.toPointer(pPageClsID), lcid, dwReserved, util.toPointer(pvReserved)));
}

export function OleCreatePropertyFrameIndirect(
  lpParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.OleCreatePropertyFrameIndirect(util.toPointer(lpParams)));
}

export function OleTranslateColor(
  clr: number /* u32 */,
  hpal: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HPALETTE */,
  lpcolorref: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.OleTranslateColor(clr, util.toPointer(hpal), util.toPointer(lpcolorref)));
}

export function OleCreateFontIndirect(
  lpFontDesc: Deno.PointerValue | Uint8Array | null /* ptr */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  lplpvObj: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.OleCreateFontIndirect(util.toPointer(lpFontDesc), util.toPointer(riid), util.toPointer(lplpvObj)));
}

export function OleCreatePictureIndirect(
  lpPictDesc: Deno.PointerValue | Uint8Array | null /* ptr */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  fOwn: boolean /* Windows.Win32.Foundation.BOOL */,
  lplpvObj: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.OleCreatePictureIndirect(util.toPointer(lpPictDesc), util.toPointer(riid), util.boolToFfi(fOwn), util.toPointer(lplpvObj)));
}

export function OleLoadPicture(
  lpstream: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IStream */,
  lSize: number /* i32 */,
  fRunmode: boolean /* Windows.Win32.Foundation.BOOL */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  lplpvObj: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.OleLoadPicture(util.toPointer(lpstream), lSize, util.boolToFfi(fRunmode), util.toPointer(riid), util.toPointer(lplpvObj)));
}

export function OleLoadPictureEx(
  lpstream: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IStream */,
  lSize: number /* i32 */,
  fRunmode: boolean /* Windows.Win32.Foundation.BOOL */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  xSizeDesired: number /* u32 */,
  ySizeDesired: number /* u32 */,
  dwFlags: number /* u32 */,
  lplpvObj: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.OleLoadPictureEx(util.toPointer(lpstream), lSize, util.boolToFfi(fRunmode), util.toPointer(riid), xSizeDesired, ySizeDesired, dwFlags, util.toPointer(lplpvObj)));
}

export function OleLoadPicturePath(
  szURLorPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  punkCaller: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  dwReserved: number /* u32 */,
  clrReserved: number /* u32 */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppvRet: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.OleLoadPicturePath(util.pwstrToFfi(szURLorPath), util.toPointer(punkCaller), dwReserved, clrReserved, util.toPointer(riid), util.toPointer(ppvRet)));
}

export function OleLoadPictureFile(
  varFileName: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.VARIANT */,
  lplpdispPicture: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.OleLoadPictureFile(util.toPointer(varFileName), util.toPointer(lplpdispPicture)));
}

export function OleLoadPictureFileEx(
  varFileName: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.VARIANT */,
  xSizeDesired: number /* u32 */,
  ySizeDesired: number /* u32 */,
  dwFlags: number /* u32 */,
  lplpdispPicture: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.OleLoadPictureFileEx(util.toPointer(varFileName), xSizeDesired, ySizeDesired, dwFlags, util.toPointer(lplpdispPicture)));
}

export function OleSavePictureFile(
  lpdispPicture: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IDispatch */,
  bstrFileName: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.BSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEAUT32.OleSavePictureFile(util.toPointer(lpdispPicture), util.toPointer(bstrFileName)));
}

export function OleIconToCursor(
  hinstExe: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  hIcon: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.WindowsAndMessaging.HICON */,
): Deno.PointerValue | null /* Windows.Win32.UI.WindowsAndMessaging.HCURSOR */ {
  return util.pointerFromFfi(libOLEAUT32.OleIconToCursor(util.toPointer(hinstExe), util.toPointer(hIcon)));
}

export function OleUIAddVerbMenuW(
  lpOleObj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Ole.IOleObject */,
  lpszShortType: string | null /* Windows.Win32.Foundation.PWSTR */,
  hMenu: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.WindowsAndMessaging.HMENU */,
  uPos: number /* u32 */,
  uIDVerbMin: number /* u32 */,
  uIDVerbMax: number /* u32 */,
  bAddConvert: boolean /* Windows.Win32.Foundation.BOOL */,
  idConvert: number /* u32 */,
  lphMenu: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(liboledlg.OleUIAddVerbMenuW(util.toPointer(lpOleObj), util.pwstrToFfi(lpszShortType), util.toPointer(hMenu), uPos, uIDVerbMin, uIDVerbMax, util.boolToFfi(bAddConvert), idConvert, util.toPointer(lphMenu)));
}

export function OleUIAddVerbMenuA(
  lpOleObj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Ole.IOleObject */,
  lpszShortType: string | null /* Windows.Win32.Foundation.PSTR */,
  hMenu: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.WindowsAndMessaging.HMENU */,
  uPos: number /* u32 */,
  uIDVerbMin: number /* u32 */,
  uIDVerbMax: number /* u32 */,
  bAddConvert: boolean /* Windows.Win32.Foundation.BOOL */,
  idConvert: number /* u32 */,
  lphMenu: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(liboledlg.OleUIAddVerbMenuA(util.toPointer(lpOleObj), util.pstrToFfi(lpszShortType), util.toPointer(hMenu), uPos, uIDVerbMin, uIDVerbMax, util.boolToFfi(bAddConvert), idConvert, util.toPointer(lphMenu)));
}

export function OleUIInsertObjectW(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return liboledlg.OleUIInsertObjectW(util.toPointer(param0));
}

export function OleUIInsertObjectA(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return liboledlg.OleUIInsertObjectA(util.toPointer(param0));
}

export function OleUIPasteSpecialW(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return liboledlg.OleUIPasteSpecialW(util.toPointer(param0));
}

export function OleUIPasteSpecialA(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return liboledlg.OleUIPasteSpecialA(util.toPointer(param0));
}

export function OleUIEditLinksW(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return liboledlg.OleUIEditLinksW(util.toPointer(param0));
}

export function OleUIEditLinksA(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return liboledlg.OleUIEditLinksA(util.toPointer(param0));
}

export function OleUIChangeIconW(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return liboledlg.OleUIChangeIconW(util.toPointer(param0));
}

export function OleUIChangeIconA(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return liboledlg.OleUIChangeIconA(util.toPointer(param0));
}

export function OleUIConvertW(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return liboledlg.OleUIConvertW(util.toPointer(param0));
}

export function OleUIConvertA(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return liboledlg.OleUIConvertA(util.toPointer(param0));
}

export function OleUICanConvertOrActivateAs(
  rClsid: Deno.PointerValue | Uint8Array | null /* ptr */,
  fIsLinkedObject: boolean /* Windows.Win32.Foundation.BOOL */,
  wFormat: number /* u16 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(liboledlg.OleUICanConvertOrActivateAs(util.toPointer(rClsid), util.boolToFfi(fIsLinkedObject), wFormat));
}

export function OleUIBusyW(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return liboledlg.OleUIBusyW(util.toPointer(param0));
}

export function OleUIBusyA(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return liboledlg.OleUIBusyA(util.toPointer(param0));
}

export function OleUIChangeSourceW(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return liboledlg.OleUIChangeSourceW(util.toPointer(param0));
}

export function OleUIChangeSourceA(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return liboledlg.OleUIChangeSourceA(util.toPointer(param0));
}

export function OleUIObjectPropertiesW(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return liboledlg.OleUIObjectPropertiesW(util.toPointer(param0));
}

export function OleUIObjectPropertiesA(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return liboledlg.OleUIObjectPropertiesA(util.toPointer(param0));
}

export function OleUIPromptUserW(
  nTemplate: number /* i32 */,
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): number /* i32 */ {
  return liboledlg.OleUIPromptUserW(nTemplate, util.hwndToFfi(hwndParent));
}

export function OleUIPromptUserA(
  nTemplate: number /* i32 */,
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): number /* i32 */ {
  return liboledlg.OleUIPromptUserA(nTemplate, util.hwndToFfi(hwndParent));
}

export function OleUIUpdateLinksW(
  lpOleUILinkCntr: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Ole.IOleUILinkContainerW */,
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  lpszTitle: string | null /* Windows.Win32.Foundation.PWSTR */,
  cLinks: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(liboledlg.OleUIUpdateLinksW(util.toPointer(lpOleUILinkCntr), util.hwndToFfi(hwndParent), util.pwstrToFfi(lpszTitle), cLinks));
}

export function OleUIUpdateLinksA(
  lpOleUILinkCntr: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Ole.IOleUILinkContainerA */,
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  lpszTitle: string | null /* Windows.Win32.Foundation.PSTR */,
  cLinks: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(liboledlg.OleUIUpdateLinksA(util.toPointer(lpOleUILinkCntr), util.hwndToFfi(hwndParent), util.pstrToFfi(lpszTitle), cLinks));
}

