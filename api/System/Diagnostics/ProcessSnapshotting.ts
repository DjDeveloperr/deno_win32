/// Auto-generated by Deno Win32: Windows.Win32.System.Diagnostics.ProcessSnapshotting.Apis

import * as util from "../../../util.ts";

// Enums
export type PSS_HANDLE_FLAGS = number;
export type PSS_OBJECT_TYPE = number;
export type PSS_CAPTURE_FLAGS = number;
export type PSS_QUERY_INFORMATION_CLASS = number;
export type PSS_WALK_INFORMATION_CLASS = number;
export type PSS_DUPLICATE_FLAGS = number;
export type PSS_PROCESS_FLAGS = number;
export type PAGE_PROTECTION_FLAGS = number;
export type VIRTUAL_ALLOCATION_TYPE = number;
export type PAGE_TYPE = number;
export type PSS_THREAD_FLAGS = number;

// Constants
export const PSS_PERF_RESOLUTION = 1000000;
export const PSS_HANDLE_NONE = 0;
export const PSS_HANDLE_HAVE_TYPE = 1;
export const PSS_HANDLE_HAVE_NAME = 2;
export const PSS_HANDLE_HAVE_BASIC_INFORMATION = 4;
export const PSS_HANDLE_HAVE_TYPE_SPECIFIC_INFORMATION = 8;
export const PSS_OBJECT_TYPE_UNKNOWN = 0;
export const PSS_OBJECT_TYPE_PROCESS = 1;
export const PSS_OBJECT_TYPE_THREAD = 2;
export const PSS_OBJECT_TYPE_MUTANT = 3;
export const PSS_OBJECT_TYPE_EVENT = 4;
export const PSS_OBJECT_TYPE_SECTION = 5;
export const PSS_OBJECT_TYPE_SEMAPHORE = 6;
export const PSS_CAPTURE_NONE = 0;
export const PSS_CAPTURE_VA_CLONE = 1;
export const PSS_CAPTURE_RESERVED_00000002 = 2;
export const PSS_CAPTURE_HANDLES = 4;
export const PSS_CAPTURE_HANDLE_NAME_INFORMATION = 8;
export const PSS_CAPTURE_HANDLE_BASIC_INFORMATION = 16;
export const PSS_CAPTURE_HANDLE_TYPE_SPECIFIC_INFORMATION = 32;
export const PSS_CAPTURE_HANDLE_TRACE = 64;
export const PSS_CAPTURE_THREADS = 128;
export const PSS_CAPTURE_THREAD_CONTEXT = 256;
export const PSS_CAPTURE_THREAD_CONTEXT_EXTENDED = 512;
export const PSS_CAPTURE_RESERVED_00000400 = 1024;
export const PSS_CAPTURE_VA_SPACE = 2048;
export const PSS_CAPTURE_VA_SPACE_SECTION_INFORMATION = 4096;
export const PSS_CAPTURE_IPT_TRACE = 8192;
export const PSS_CAPTURE_RESERVED_00004000 = 16384;
export const PSS_CREATE_BREAKAWAY_OPTIONAL = 67108864;
export const PSS_CREATE_BREAKAWAY = 134217728;
export const PSS_CREATE_FORCE_BREAKAWAY = 268435456;
export const PSS_CREATE_USE_VM_ALLOCATIONS = 536870912;
export const PSS_CREATE_MEASURE_PERFORMANCE = 1073741824;
export const PSS_CREATE_RELEASE_SECTION = 2147483648;
export const PSS_QUERY_PROCESS_INFORMATION = 0;
export const PSS_QUERY_VA_CLONE_INFORMATION = 1;
export const PSS_QUERY_AUXILIARY_PAGES_INFORMATION = 2;
export const PSS_QUERY_VA_SPACE_INFORMATION = 3;
export const PSS_QUERY_HANDLE_INFORMATION = 4;
export const PSS_QUERY_THREAD_INFORMATION = 5;
export const PSS_QUERY_HANDLE_TRACE_INFORMATION = 6;
export const PSS_QUERY_PERFORMANCE_COUNTERS = 7;
export const PSS_WALK_AUXILIARY_PAGES = 0;
export const PSS_WALK_VA_SPACE = 1;
export const PSS_WALK_HANDLES = 2;
export const PSS_WALK_THREADS = 3;
export const PSS_DUPLICATE_NONE = 0;
export const PSS_DUPLICATE_CLOSE_SOURCE = 1;
export const PSS_PROCESS_FLAGS_NONE = 0;
export const PSS_PROCESS_FLAGS_PROTECTED = 1;
export const PSS_PROCESS_FLAGS_WOW64 = 2;
export const PSS_PROCESS_FLAGS_RESERVED_03 = 4;
export const PSS_PROCESS_FLAGS_RESERVED_04 = 8;
export const PSS_PROCESS_FLAGS_FROZEN = 16;
export const PAGE_NOACCESS = 1;
export const PAGE_READONLY = 2;
export const PAGE_READWRITE = 4;
export const PAGE_WRITECOPY = 8;
export const PAGE_EXECUTE = 16;
export const PAGE_EXECUTE_READ = 32;
export const PAGE_EXECUTE_READWRITE = 64;
export const PAGE_EXECUTE_WRITECOPY = 128;
export const PAGE_GUARD = 256;
export const PAGE_NOCACHE = 512;
export const PAGE_WRITECOMBINE = 1024;
export const PAGE_GRAPHICS_NOACCESS = 2048;
export const PAGE_GRAPHICS_READONLY = 4096;
export const PAGE_GRAPHICS_READWRITE = 8192;
export const PAGE_GRAPHICS_EXECUTE = 16384;
export const PAGE_GRAPHICS_EXECUTE_READ = 32768;
export const PAGE_GRAPHICS_EXECUTE_READWRITE = 65536;
export const PAGE_GRAPHICS_COHERENT = 131072;
export const PAGE_GRAPHICS_NOCACHE = 262144;
export const PAGE_ENCLAVE_THREAD_CONTROL = 2147483648;
export const PAGE_REVERT_TO_FILE_MAP = 2147483648;
export const PAGE_TARGETS_NO_UPDATE = 1073741824;
export const PAGE_TARGETS_INVALID = 1073741824;
export const PAGE_ENCLAVE_UNVALIDATED = 536870912;
export const PAGE_ENCLAVE_MASK = 268435456;
export const PAGE_ENCLAVE_DECOMMIT = 268435456;
export const PAGE_ENCLAVE_SS_FIRST = 268435457;
export const PAGE_ENCLAVE_SS_REST = 268435458;
export const SEC_PARTITION_OWNER_HANDLE = 262144;
export const SEC_64K_PAGES = 524288;
export const SEC_FILE = 8388608;
export const SEC_IMAGE = 16777216;
export const SEC_PROTECTED_IMAGE = 33554432;
export const SEC_RESERVE = 67108864;
export const SEC_COMMIT = 134217728;
export const SEC_NOCACHE = 268435456;
export const SEC_WRITECOMBINE = 1073741824;
export const SEC_LARGE_PAGES = 2147483648;
export const SEC_IMAGE_NO_EXECUTE = 285212672;
export const MEM_COMMIT = 4096;
export const MEM_RESERVE = 8192;
export const MEM_RESET = 524288;
export const MEM_RESET_UNDO = 16777216;
export const MEM_REPLACE_PLACEHOLDER = 16384;
export const MEM_LARGE_PAGES = 536870912;
export const MEM_RESERVE_PLACEHOLDER = 262144;
export const MEM_FREE = 65536;
export const MEM_PRIVATE = 131072;
export const MEM_MAPPED = 262144;
export const MEM_IMAGE = 16777216;
export const PSS_THREAD_FLAGS_NONE = 0;
export const PSS_THREAD_FLAGS_TERMINATED = 1;

// Structs

export type HPSS = Deno.PointerValue;

export type HPSSWALK = Deno.PointerValue;

/**
 * Windows.Win32.Foundation.FILETIME (size: 8)
 */
export interface FILETIME {
  /** u32 */
  dwLowDateTime: number;
  /** u32 */
  dwHighDateTime: number;
}

export const sizeofFILETIME = 8;

export function allocFILETIME(data?: Partial<FILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofFILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowDateTime !== undefined) view.setUint32(0, Number(data.dwLowDateTime), true);
  // 0x04: u32
  if (data?.dwHighDateTime !== undefined) view.setUint32(4, Number(data.dwHighDateTime), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.ProcessSnapshotting.PSS_PROCESS_INFORMATION (size: 192)
 */
export interface PSS_PROCESS_INFORMATION {
  /** u32 */
  ExitStatus: number;
  /** ptr */
  PebBaseAddress: Deno.PointerValue | Uint8Array | null;
  /** usize */
  AffinityMask: Deno.PointerValue;
  /** i32 */
  BasePriority: number;
  /** u32 */
  ProcessId: number;
  /** u32 */
  ParentProcessId: number;
  /** Windows.Win32.System.Diagnostics.ProcessSnapshotting.PSS_PROCESS_FLAGS */
  Flags: PSS_PROCESS_FLAGS;
  /** Windows.Win32.Foundation.FILETIME */
  CreateTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  ExitTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  KernelTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  UserTime: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  PriorityClass: number;
  /** usize */
  PeakVirtualSize: Deno.PointerValue;
  /** usize */
  VirtualSize: Deno.PointerValue;
  /** u32 */
  PageFaultCount: number;
  /** usize */
  PeakWorkingSetSize: Deno.PointerValue;
  /** usize */
  WorkingSetSize: Deno.PointerValue;
  /** usize */
  QuotaPeakPagedPoolUsage: Deno.PointerValue;
  /** usize */
  QuotaPagedPoolUsage: Deno.PointerValue;
  /** usize */
  QuotaPeakNonPagedPoolUsage: Deno.PointerValue;
  /** usize */
  QuotaNonPagedPoolUsage: Deno.PointerValue;
  /** usize */
  PagefileUsage: Deno.PointerValue;
  /** usize */
  PeakPagefileUsage: Deno.PointerValue;
  /** usize */
  PrivateUsage: Deno.PointerValue;
  /** u32 */
  ExecuteFlags: number;
  /** array */
  ImageFileName: Deno.PointerValue | null;
}

export const sizeofPSS_PROCESS_INFORMATION = 192;

export function allocPSS_PROCESS_INFORMATION(data?: Partial<PSS_PROCESS_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPSS_PROCESS_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ExitStatus !== undefined) view.setUint32(0, Number(data.ExitStatus), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.PebBaseAddress !== undefined) view.setBigUint64(8, data.PebBaseAddress === null ? 0n : BigInt(util.toPointer(data.PebBaseAddress)), true);
  // 0x10: usize
  if (data?.AffinityMask !== undefined) view.setBigUint64(16, BigInt(data.AffinityMask), true);
  // 0x18: i32
  if (data?.BasePriority !== undefined) view.setInt32(24, Number(data.BasePriority), true);
  // 0x1c: u32
  if (data?.ProcessId !== undefined) view.setUint32(28, Number(data.ProcessId), true);
  // 0x20: u32
  if (data?.ParentProcessId !== undefined) view.setUint32(32, Number(data.ParentProcessId), true);
  // 0x24: u32
  if (data?.Flags !== undefined) view.setUint32(36, Number(data.Flags), true);
  // 0x28: pointer
  if (data?.CreateTime !== undefined) view.setBigUint64(40, data.CreateTime === null ? 0n : BigInt(util.toPointer(data.CreateTime)), true);
  // 0x30: pointer
  if (data?.ExitTime !== undefined) view.setBigUint64(48, data.ExitTime === null ? 0n : BigInt(util.toPointer(data.ExitTime)), true);
  // 0x38: pointer
  if (data?.KernelTime !== undefined) view.setBigUint64(56, data.KernelTime === null ? 0n : BigInt(util.toPointer(data.KernelTime)), true);
  // 0x40: pointer
  if (data?.UserTime !== undefined) view.setBigUint64(64, data.UserTime === null ? 0n : BigInt(util.toPointer(data.UserTime)), true);
  // 0x48: u32
  if (data?.PriorityClass !== undefined) view.setUint32(72, Number(data.PriorityClass), true);
  // 0x4c: pad4
  // 0x50: usize
  if (data?.PeakVirtualSize !== undefined) view.setBigUint64(80, BigInt(data.PeakVirtualSize), true);
  // 0x58: usize
  if (data?.VirtualSize !== undefined) view.setBigUint64(88, BigInt(data.VirtualSize), true);
  // 0x60: u32
  if (data?.PageFaultCount !== undefined) view.setUint32(96, Number(data.PageFaultCount), true);
  // 0x64: pad4
  // 0x68: usize
  if (data?.PeakWorkingSetSize !== undefined) view.setBigUint64(104, BigInt(data.PeakWorkingSetSize), true);
  // 0x70: usize
  if (data?.WorkingSetSize !== undefined) view.setBigUint64(112, BigInt(data.WorkingSetSize), true);
  // 0x78: usize
  if (data?.QuotaPeakPagedPoolUsage !== undefined) view.setBigUint64(120, BigInt(data.QuotaPeakPagedPoolUsage), true);
  // 0x80: usize
  if (data?.QuotaPagedPoolUsage !== undefined) view.setBigUint64(128, BigInt(data.QuotaPagedPoolUsage), true);
  // 0x88: usize
  if (data?.QuotaPeakNonPagedPoolUsage !== undefined) view.setBigUint64(136, BigInt(data.QuotaPeakNonPagedPoolUsage), true);
  // 0x90: usize
  if (data?.QuotaNonPagedPoolUsage !== undefined) view.setBigUint64(144, BigInt(data.QuotaNonPagedPoolUsage), true);
  // 0x98: usize
  if (data?.PagefileUsage !== undefined) view.setBigUint64(152, BigInt(data.PagefileUsage), true);
  // 0xa0: usize
  if (data?.PeakPagefileUsage !== undefined) view.setBigUint64(160, BigInt(data.PeakPagefileUsage), true);
  // 0xa8: usize
  if (data?.PrivateUsage !== undefined) view.setBigUint64(168, BigInt(data.PrivateUsage), true);
  // 0xb0: u32
  if (data?.ExecuteFlags !== undefined) view.setUint32(176, Number(data.ExecuteFlags), true);
  // 0xb4: pad4
  // 0xb8: pointer
  if (data?.ImageFileName !== undefined) view.setBigUint64(184, data.ImageFileName === null ? 0n : BigInt(util.toPointer(data.ImageFileName)), true);
  return buf;
}

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.System.Diagnostics.ProcessSnapshotting.PSS_VA_CLONE_INFORMATION (size: 8)
 */
export interface PSS_VA_CLONE_INFORMATION {
  /** Windows.Win32.Foundation.HANDLE */
  VaCloneHandle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPSS_VA_CLONE_INFORMATION = 8;

export function allocPSS_VA_CLONE_INFORMATION(data?: Partial<PSS_VA_CLONE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPSS_VA_CLONE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.VaCloneHandle !== undefined) view.setBigUint64(0, data.VaCloneHandle === null ? 0n : BigInt(util.toPointer(data.VaCloneHandle)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.ProcessSnapshotting.PSS_AUXILIARY_PAGES_INFORMATION (size: 8)
 */
export interface PSS_AUXILIARY_PAGES_INFORMATION {
  /** u32 */
  AuxPagesCaptured: number;
}

export const sizeofPSS_AUXILIARY_PAGES_INFORMATION = 8;

export function allocPSS_AUXILIARY_PAGES_INFORMATION(data?: Partial<PSS_AUXILIARY_PAGES_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPSS_AUXILIARY_PAGES_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AuxPagesCaptured !== undefined) view.setUint32(0, Number(data.AuxPagesCaptured), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.ProcessSnapshotting.PSS_VA_SPACE_INFORMATION (size: 8)
 */
export interface PSS_VA_SPACE_INFORMATION {
  /** u32 */
  RegionCount: number;
}

export const sizeofPSS_VA_SPACE_INFORMATION = 8;

export function allocPSS_VA_SPACE_INFORMATION(data?: Partial<PSS_VA_SPACE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPSS_VA_SPACE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.RegionCount !== undefined) view.setUint32(0, Number(data.RegionCount), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.ProcessSnapshotting.PSS_HANDLE_INFORMATION (size: 8)
 */
export interface PSS_HANDLE_INFORMATION {
  /** u32 */
  HandlesCaptured: number;
}

export const sizeofPSS_HANDLE_INFORMATION = 8;

export function allocPSS_HANDLE_INFORMATION(data?: Partial<PSS_HANDLE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPSS_HANDLE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.HandlesCaptured !== undefined) view.setUint32(0, Number(data.HandlesCaptured), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.ProcessSnapshotting.PSS_THREAD_INFORMATION (size: 8)
 */
export interface PSS_THREAD_INFORMATION {
  /** u32 */
  ThreadsCaptured: number;
  /** u32 */
  ContextLength: number;
}

export const sizeofPSS_THREAD_INFORMATION = 8;

export function allocPSS_THREAD_INFORMATION(data?: Partial<PSS_THREAD_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPSS_THREAD_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ThreadsCaptured !== undefined) view.setUint32(0, Number(data.ThreadsCaptured), true);
  // 0x04: u32
  if (data?.ContextLength !== undefined) view.setUint32(4, Number(data.ContextLength), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.ProcessSnapshotting.PSS_HANDLE_TRACE_INFORMATION (size: 16)
 */
export interface PSS_HANDLE_TRACE_INFORMATION {
  /** Windows.Win32.Foundation.HANDLE */
  SectionHandle: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Size: number;
}

export const sizeofPSS_HANDLE_TRACE_INFORMATION = 16;

export function allocPSS_HANDLE_TRACE_INFORMATION(data?: Partial<PSS_HANDLE_TRACE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPSS_HANDLE_TRACE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SectionHandle !== undefined) view.setBigUint64(0, data.SectionHandle === null ? 0n : BigInt(util.toPointer(data.SectionHandle)), true);
  // 0x08: u32
  if (data?.Size !== undefined) view.setUint32(8, Number(data.Size), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.ProcessSnapshotting.PSS_PERFORMANCE_COUNTERS (size: 96)
 */
export interface PSS_PERFORMANCE_COUNTERS {
  /** u64 */
  TotalCycleCount: Deno.PointerValue;
  /** u64 */
  TotalWallClockPeriod: Deno.PointerValue;
  /** u64 */
  VaCloneCycleCount: Deno.PointerValue;
  /** u64 */
  VaCloneWallClockPeriod: Deno.PointerValue;
  /** u64 */
  VaSpaceCycleCount: Deno.PointerValue;
  /** u64 */
  VaSpaceWallClockPeriod: Deno.PointerValue;
  /** u64 */
  AuxPagesCycleCount: Deno.PointerValue;
  /** u64 */
  AuxPagesWallClockPeriod: Deno.PointerValue;
  /** u64 */
  HandlesCycleCount: Deno.PointerValue;
  /** u64 */
  HandlesWallClockPeriod: Deno.PointerValue;
  /** u64 */
  ThreadsCycleCount: Deno.PointerValue;
  /** u64 */
  ThreadsWallClockPeriod: Deno.PointerValue;
}

export const sizeofPSS_PERFORMANCE_COUNTERS = 96;

export function allocPSS_PERFORMANCE_COUNTERS(data?: Partial<PSS_PERFORMANCE_COUNTERS>): Uint8Array {
  const buf = new Uint8Array(sizeofPSS_PERFORMANCE_COUNTERS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.TotalCycleCount !== undefined) view.setBigUint64(0, BigInt(data.TotalCycleCount), true);
  // 0x08: u64
  if (data?.TotalWallClockPeriod !== undefined) view.setBigUint64(8, BigInt(data.TotalWallClockPeriod), true);
  // 0x10: u64
  if (data?.VaCloneCycleCount !== undefined) view.setBigUint64(16, BigInt(data.VaCloneCycleCount), true);
  // 0x18: u64
  if (data?.VaCloneWallClockPeriod !== undefined) view.setBigUint64(24, BigInt(data.VaCloneWallClockPeriod), true);
  // 0x20: u64
  if (data?.VaSpaceCycleCount !== undefined) view.setBigUint64(32, BigInt(data.VaSpaceCycleCount), true);
  // 0x28: u64
  if (data?.VaSpaceWallClockPeriod !== undefined) view.setBigUint64(40, BigInt(data.VaSpaceWallClockPeriod), true);
  // 0x30: u64
  if (data?.AuxPagesCycleCount !== undefined) view.setBigUint64(48, BigInt(data.AuxPagesCycleCount), true);
  // 0x38: u64
  if (data?.AuxPagesWallClockPeriod !== undefined) view.setBigUint64(56, BigInt(data.AuxPagesWallClockPeriod), true);
  // 0x40: u64
  if (data?.HandlesCycleCount !== undefined) view.setBigUint64(64, BigInt(data.HandlesCycleCount), true);
  // 0x48: u64
  if (data?.HandlesWallClockPeriod !== undefined) view.setBigUint64(72, BigInt(data.HandlesWallClockPeriod), true);
  // 0x50: u64
  if (data?.ThreadsCycleCount !== undefined) view.setBigUint64(80, BigInt(data.ThreadsCycleCount), true);
  // 0x58: u64
  if (data?.ThreadsWallClockPeriod !== undefined) view.setBigUint64(88, BigInt(data.ThreadsWallClockPeriod), true);
  return buf;
}

/**
 * Windows.Win32.System.Memory.MEMORY_BASIC_INFORMATION (size: 48)
 */
export interface MEMORY_BASIC_INFORMATION {
  /** ptr */
  BaseAddress: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  AllocationBase: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Memory.PAGE_PROTECTION_FLAGS */
  AllocationProtect: PAGE_PROTECTION_FLAGS;
  /** u16 */
  PartitionId: number;
  /** usize */
  RegionSize: Deno.PointerValue;
  /** Windows.Win32.System.Memory.VIRTUAL_ALLOCATION_TYPE */
  State: VIRTUAL_ALLOCATION_TYPE;
  /** Windows.Win32.System.Memory.PAGE_PROTECTION_FLAGS */
  Protect: PAGE_PROTECTION_FLAGS;
  /** Windows.Win32.System.Memory.PAGE_TYPE */
  Type: PAGE_TYPE;
}

export const sizeofMEMORY_BASIC_INFORMATION = 48;

export function allocMEMORY_BASIC_INFORMATION(data?: Partial<MEMORY_BASIC_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofMEMORY_BASIC_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.BaseAddress !== undefined) view.setBigUint64(0, data.BaseAddress === null ? 0n : BigInt(util.toPointer(data.BaseAddress)), true);
  // 0x08: pointer
  if (data?.AllocationBase !== undefined) view.setBigUint64(8, data.AllocationBase === null ? 0n : BigInt(util.toPointer(data.AllocationBase)), true);
  // 0x10: u32
  if (data?.AllocationProtect !== undefined) view.setUint32(16, Number(data.AllocationProtect), true);
  // 0x14: u16
  if (data?.PartitionId !== undefined) view.setUint16(20, Number(data.PartitionId), true);
  // 0x16: pad2
  // 0x18: usize
  if (data?.RegionSize !== undefined) view.setBigUint64(24, BigInt(data.RegionSize), true);
  // 0x20: u32
  if (data?.State !== undefined) view.setUint32(32, Number(data.State), true);
  // 0x24: u32
  if (data?.Protect !== undefined) view.setUint32(36, Number(data.Protect), true);
  // 0x28: u32
  if (data?.Type !== undefined) view.setUint32(40, Number(data.Type), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.ProcessSnapshotting.PSS_AUXILIARY_PAGE_ENTRY (size: 40)
 */
export interface PSS_AUXILIARY_PAGE_ENTRY {
  /** ptr */
  Address: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Memory.MEMORY_BASIC_INFORMATION */
  BasicInformation: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  CaptureTime: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  PageContents: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  PageSize: number;
}

export const sizeofPSS_AUXILIARY_PAGE_ENTRY = 40;

export function allocPSS_AUXILIARY_PAGE_ENTRY(data?: Partial<PSS_AUXILIARY_PAGE_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofPSS_AUXILIARY_PAGE_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Address !== undefined) view.setBigUint64(0, data.Address === null ? 0n : BigInt(util.toPointer(data.Address)), true);
  // 0x08: pointer
  if (data?.BasicInformation !== undefined) view.setBigUint64(8, data.BasicInformation === null ? 0n : BigInt(util.toPointer(data.BasicInformation)), true);
  // 0x10: pointer
  if (data?.CaptureTime !== undefined) view.setBigUint64(16, data.CaptureTime === null ? 0n : BigInt(util.toPointer(data.CaptureTime)), true);
  // 0x18: pointer
  if (data?.PageContents !== undefined) view.setBigUint64(24, data.PageContents === null ? 0n : BigInt(util.toPointer(data.PageContents)), true);
  // 0x20: u32
  if (data?.PageSize !== undefined) view.setUint32(32, Number(data.PageSize), true);
  // 0x24: pad4
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.System.Diagnostics.ProcessSnapshotting.PSS_VA_SPACE_ENTRY (size: 80)
 */
export interface PSS_VA_SPACE_ENTRY {
  /** ptr */
  BaseAddress: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  AllocationBase: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  AllocationProtect: number;
  /** usize */
  RegionSize: Deno.PointerValue;
  /** u32 */
  State: number;
  /** u32 */
  Protect: number;
  /** u32 */
  Type: number;
  /** u32 */
  TimeDateStamp: number;
  /** u32 */
  SizeOfImage: number;
  /** ptr */
  ImageBase: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  CheckSum: number;
  /** u16 */
  MappedFileNameLength: number;
  /** Windows.Win32.Foundation.PWSTR */
  MappedFileName: string | null;
}

export const sizeofPSS_VA_SPACE_ENTRY = 80;

export function allocPSS_VA_SPACE_ENTRY(data?: Partial<PSS_VA_SPACE_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofPSS_VA_SPACE_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.BaseAddress !== undefined) view.setBigUint64(0, data.BaseAddress === null ? 0n : BigInt(util.toPointer(data.BaseAddress)), true);
  // 0x08: pointer
  if (data?.AllocationBase !== undefined) view.setBigUint64(8, data.AllocationBase === null ? 0n : BigInt(util.toPointer(data.AllocationBase)), true);
  // 0x10: u32
  if (data?.AllocationProtect !== undefined) view.setUint32(16, Number(data.AllocationProtect), true);
  // 0x14: pad4
  // 0x18: usize
  if (data?.RegionSize !== undefined) view.setBigUint64(24, BigInt(data.RegionSize), true);
  // 0x20: u32
  if (data?.State !== undefined) view.setUint32(32, Number(data.State), true);
  // 0x24: u32
  if (data?.Protect !== undefined) view.setUint32(36, Number(data.Protect), true);
  // 0x28: u32
  if (data?.Type !== undefined) view.setUint32(40, Number(data.Type), true);
  // 0x2c: u32
  if (data?.TimeDateStamp !== undefined) view.setUint32(44, Number(data.TimeDateStamp), true);
  // 0x30: u32
  if (data?.SizeOfImage !== undefined) view.setUint32(48, Number(data.SizeOfImage), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.ImageBase !== undefined) view.setBigUint64(56, data.ImageBase === null ? 0n : BigInt(util.toPointer(data.ImageBase)), true);
  // 0x40: u32
  if (data?.CheckSum !== undefined) view.setUint32(64, Number(data.CheckSum), true);
  // 0x44: u16
  if (data?.MappedFileNameLength !== undefined) view.setUint16(68, Number(data.MappedFileNameLength), true);
  // 0x46: pad2
  // 0x48: buffer
  if (data?.MappedFileName !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.MappedFileName);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  return buf;
}

/**
 * _Process_e__Struct (size: 40)
 */
export interface _Process_e__Struct {
  /** u32 */
  ExitStatus: number;
  /** ptr */
  PebBaseAddress: Deno.PointerValue | Uint8Array | null;
  /** usize */
  AffinityMask: Deno.PointerValue;
  /** i32 */
  BasePriority: number;
  /** u32 */
  ProcessId: number;
  /** u32 */
  ParentProcessId: number;
  /** u32 */
  Flags: number;
}

export const sizeof_Process_e__Struct = 40;

export function alloc_Process_e__Struct(data?: Partial<_Process_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Process_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ExitStatus !== undefined) view.setUint32(0, Number(data.ExitStatus), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.PebBaseAddress !== undefined) view.setBigUint64(8, data.PebBaseAddress === null ? 0n : BigInt(util.toPointer(data.PebBaseAddress)), true);
  // 0x10: usize
  if (data?.AffinityMask !== undefined) view.setBigUint64(16, BigInt(data.AffinityMask), true);
  // 0x18: i32
  if (data?.BasePriority !== undefined) view.setInt32(24, Number(data.BasePriority), true);
  // 0x1c: u32
  if (data?.ProcessId !== undefined) view.setUint32(28, Number(data.ProcessId), true);
  // 0x20: u32
  if (data?.ParentProcessId !== undefined) view.setUint32(32, Number(data.ParentProcessId), true);
  // 0x24: u32
  if (data?.Flags !== undefined) view.setUint32(36, Number(data.Flags), true);
  return buf;
}

/**
 * _Thread_e__Struct (size: 48)
 */
export interface _Thread_e__Struct {
  /** u32 */
  ExitStatus: number;
  /** ptr */
  TebBaseAddress: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ProcessId: number;
  /** u32 */
  ThreadId: number;
  /** usize */
  AffinityMask: Deno.PointerValue;
  /** i32 */
  Priority: number;
  /** i32 */
  BasePriority: number;
  /** ptr */
  Win32StartAddress: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_Thread_e__Struct = 48;

export function alloc_Thread_e__Struct(data?: Partial<_Thread_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Thread_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ExitStatus !== undefined) view.setUint32(0, Number(data.ExitStatus), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.TebBaseAddress !== undefined) view.setBigUint64(8, data.TebBaseAddress === null ? 0n : BigInt(util.toPointer(data.TebBaseAddress)), true);
  // 0x10: u32
  if (data?.ProcessId !== undefined) view.setUint32(16, Number(data.ProcessId), true);
  // 0x14: u32
  if (data?.ThreadId !== undefined) view.setUint32(20, Number(data.ThreadId), true);
  // 0x18: usize
  if (data?.AffinityMask !== undefined) view.setBigUint64(24, BigInt(data.AffinityMask), true);
  // 0x20: i32
  if (data?.Priority !== undefined) view.setInt32(32, Number(data.Priority), true);
  // 0x24: i32
  if (data?.BasePriority !== undefined) view.setInt32(36, Number(data.BasePriority), true);
  // 0x28: pointer
  if (data?.Win32StartAddress !== undefined) view.setBigUint64(40, data.Win32StartAddress === null ? 0n : BigInt(util.toPointer(data.Win32StartAddress)), true);
  return buf;
}

export type BOOL = number;

/**
 * _Mutant_e__Struct (size: 16)
 */
export interface _Mutant_e__Struct {
  /** i32 */
  CurrentCount: number;
  /** Windows.Win32.Foundation.BOOL */
  Abandoned: boolean;
  /** u32 */
  OwnerProcessId: number;
  /** u32 */
  OwnerThreadId: number;
}

export const sizeof_Mutant_e__Struct = 16;

export function alloc_Mutant_e__Struct(data?: Partial<_Mutant_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Mutant_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.CurrentCount !== undefined) view.setInt32(0, Number(data.CurrentCount), true);
  // 0x04: i32
  if (data?.Abandoned !== undefined) view.setInt32(4, Number(data.Abandoned), true);
  // 0x08: u32
  if (data?.OwnerProcessId !== undefined) view.setUint32(8, Number(data.OwnerProcessId), true);
  // 0x0c: u32
  if (data?.OwnerThreadId !== undefined) view.setUint32(12, Number(data.OwnerThreadId), true);
  return buf;
}

/**
 * _Event_e__Struct (size: 8)
 */
export interface _Event_e__Struct {
  /** u32 */
  ConnectionId: number;
}

export const sizeof_Event_e__Struct = 8;

export function alloc_Event_e__Struct(data?: Partial<_Event_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Event_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ConnectionId !== undefined) view.setUint32(0, Number(data.ConnectionId), true);
  // 0x04: pad4
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Foundation.LARGE_INTEGER (size: 24)
 */
export interface LARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  QuadPart: Deno.PointerValue;
}

export const sizeofLARGE_INTEGER = 24;

export function allocLARGE_INTEGER(data?: Partial<LARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofLARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  // 0x10: i64
  if (data?.QuadPart !== undefined) view.setBigInt64(16, BigInt(data.QuadPart), true);
  return buf;
}

/**
 * _Section_e__Struct (size: 24)
 */
export interface _Section_e__Struct {
  /** ptr */
  BaseAddress: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  AllocationAttributes: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  MaximumSize: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Section_e__Struct = 24;

export function alloc_Section_e__Struct(data?: Partial<_Section_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Section_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.BaseAddress !== undefined) view.setBigUint64(0, data.BaseAddress === null ? 0n : BigInt(util.toPointer(data.BaseAddress)), true);
  // 0x08: u32
  if (data?.AllocationAttributes !== undefined) view.setUint32(8, Number(data.AllocationAttributes), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.MaximumSize !== undefined) view.setBigUint64(16, data.MaximumSize === null ? 0n : BigInt(util.toPointer(data.MaximumSize)), true);
  return buf;
}

/**
 * _Semaphore_e__Struct (size: 8)
 */
export interface _Semaphore_e__Struct {
  /** i32 */
  CurrentCount: number;
  /** i32 */
  MaximumCount: number;
}

export const sizeof_Semaphore_e__Struct = 8;

export function alloc_Semaphore_e__Struct(data?: Partial<_Semaphore_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Semaphore_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.CurrentCount !== undefined) view.setInt32(0, Number(data.CurrentCount), true);
  // 0x04: i32
  if (data?.MaximumCount !== undefined) view.setInt32(4, Number(data.MaximumCount), true);
  return buf;
}

/**
 * _TypeSpecificInformation_e__Union (size: 48)
 */
export interface _TypeSpecificInformation_e__Union {
  /** _Process_e__Struct */
  Process: Uint8Array | Deno.PointerValue | null;
  /** _Thread_e__Struct */
  Thread: Uint8Array | Deno.PointerValue | null;
  /** _Mutant_e__Struct */
  Mutant: Uint8Array | Deno.PointerValue | null;
  /** _Event_e__Struct */
  Event: Uint8Array | Deno.PointerValue | null;
  /** _Section_e__Struct */
  Section: Uint8Array | Deno.PointerValue | null;
  /** _Semaphore_e__Struct */
  Semaphore: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_TypeSpecificInformation_e__Union = 48;

export function alloc_TypeSpecificInformation_e__Union(data?: Partial<_TypeSpecificInformation_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_TypeSpecificInformation_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Process !== undefined) view.setBigUint64(0, data.Process === null ? 0n : BigInt(util.toPointer(data.Process)), true);
  // 0x08: pointer
  if (data?.Thread !== undefined) view.setBigUint64(8, data.Thread === null ? 0n : BigInt(util.toPointer(data.Thread)), true);
  // 0x10: pointer
  if (data?.Mutant !== undefined) view.setBigUint64(16, data.Mutant === null ? 0n : BigInt(util.toPointer(data.Mutant)), true);
  // 0x18: pointer
  if (data?.Event !== undefined) view.setBigUint64(24, data.Event === null ? 0n : BigInt(util.toPointer(data.Event)), true);
  // 0x20: pointer
  if (data?.Section !== undefined) view.setBigUint64(32, data.Section === null ? 0n : BigInt(util.toPointer(data.Section)), true);
  // 0x28: pointer
  if (data?.Semaphore !== undefined) view.setBigUint64(40, data.Semaphore === null ? 0n : BigInt(util.toPointer(data.Semaphore)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.ProcessSnapshotting.PSS_HANDLE_ENTRY (size: 96)
 */
export interface PSS_HANDLE_ENTRY {
  /** Windows.Win32.Foundation.HANDLE */
  Handle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.ProcessSnapshotting.PSS_HANDLE_FLAGS */
  Flags: PSS_HANDLE_FLAGS;
  /** Windows.Win32.System.Diagnostics.ProcessSnapshotting.PSS_OBJECT_TYPE */
  ObjectType: PSS_OBJECT_TYPE;
  /** Windows.Win32.Foundation.FILETIME */
  CaptureTime: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Attributes: number;
  /** u32 */
  GrantedAccess: number;
  /** u32 */
  HandleCount: number;
  /** u32 */
  PointerCount: number;
  /** u32 */
  PagedPoolCharge: number;
  /** u32 */
  NonPagedPoolCharge: number;
  /** Windows.Win32.Foundation.FILETIME */
  CreationTime: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  TypeNameLength: number;
  /** Windows.Win32.Foundation.PWSTR */
  TypeName: string | null;
  /** u16 */
  ObjectNameLength: number;
  /** Windows.Win32.Foundation.PWSTR */
  ObjectName: string | null;
  /** _TypeSpecificInformation_e__Union */
  TypeSpecificInformation: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPSS_HANDLE_ENTRY = 96;

export function allocPSS_HANDLE_ENTRY(data?: Partial<PSS_HANDLE_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofPSS_HANDLE_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Handle !== undefined) view.setBigUint64(0, data.Handle === null ? 0n : BigInt(util.toPointer(data.Handle)), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: i32
  if (data?.ObjectType !== undefined) view.setInt32(12, Number(data.ObjectType), true);
  // 0x10: pointer
  if (data?.CaptureTime !== undefined) view.setBigUint64(16, data.CaptureTime === null ? 0n : BigInt(util.toPointer(data.CaptureTime)), true);
  // 0x18: u32
  if (data?.Attributes !== undefined) view.setUint32(24, Number(data.Attributes), true);
  // 0x1c: u32
  if (data?.GrantedAccess !== undefined) view.setUint32(28, Number(data.GrantedAccess), true);
  // 0x20: u32
  if (data?.HandleCount !== undefined) view.setUint32(32, Number(data.HandleCount), true);
  // 0x24: u32
  if (data?.PointerCount !== undefined) view.setUint32(36, Number(data.PointerCount), true);
  // 0x28: u32
  if (data?.PagedPoolCharge !== undefined) view.setUint32(40, Number(data.PagedPoolCharge), true);
  // 0x2c: u32
  if (data?.NonPagedPoolCharge !== undefined) view.setUint32(44, Number(data.NonPagedPoolCharge), true);
  // 0x30: pointer
  if (data?.CreationTime !== undefined) view.setBigUint64(48, data.CreationTime === null ? 0n : BigInt(util.toPointer(data.CreationTime)), true);
  // 0x38: u16
  if (data?.TypeNameLength !== undefined) view.setUint16(56, Number(data.TypeNameLength), true);
  // 0x3a: pad6
  // 0x40: buffer
  if (data?.TypeName !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.TypeName);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: u16
  if (data?.ObjectNameLength !== undefined) view.setUint16(72, Number(data.ObjectNameLength), true);
  // 0x4a: pad6
  // 0x50: buffer
  if (data?.ObjectName !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.ObjectName);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  // 0x58: pointer
  if (data?.TypeSpecificInformation !== undefined) view.setBigUint64(88, data.TypeSpecificInformation === null ? 0n : BigInt(util.toPointer(data.TypeSpecificInformation)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.ProcessSnapshotting.PSS_THREAD_ENTRY (size: 120)
 */
export interface PSS_THREAD_ENTRY {
  /** u32 */
  ExitStatus: number;
  /** ptr */
  TebBaseAddress: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ProcessId: number;
  /** u32 */
  ThreadId: number;
  /** usize */
  AffinityMask: Deno.PointerValue;
  /** i32 */
  Priority: number;
  /** i32 */
  BasePriority: number;
  /** ptr */
  LastSyscallFirstArgument: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  LastSyscallNumber: number;
  /** Windows.Win32.Foundation.FILETIME */
  CreateTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  ExitTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  KernelTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  UserTime: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Win32StartAddress: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.FILETIME */
  CaptureTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.ProcessSnapshotting.PSS_THREAD_FLAGS */
  Flags: PSS_THREAD_FLAGS;
  /** u16 */
  SuspendCount: number;
  /** u16 */
  SizeOfContextRecord: number;
  /** ptr */
  ContextRecord: Deno.PointerValue | Uint8Array | null;
}

export const sizeofPSS_THREAD_ENTRY = 120;

export function allocPSS_THREAD_ENTRY(data?: Partial<PSS_THREAD_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofPSS_THREAD_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ExitStatus !== undefined) view.setUint32(0, Number(data.ExitStatus), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.TebBaseAddress !== undefined) view.setBigUint64(8, data.TebBaseAddress === null ? 0n : BigInt(util.toPointer(data.TebBaseAddress)), true);
  // 0x10: u32
  if (data?.ProcessId !== undefined) view.setUint32(16, Number(data.ProcessId), true);
  // 0x14: u32
  if (data?.ThreadId !== undefined) view.setUint32(20, Number(data.ThreadId), true);
  // 0x18: usize
  if (data?.AffinityMask !== undefined) view.setBigUint64(24, BigInt(data.AffinityMask), true);
  // 0x20: i32
  if (data?.Priority !== undefined) view.setInt32(32, Number(data.Priority), true);
  // 0x24: i32
  if (data?.BasePriority !== undefined) view.setInt32(36, Number(data.BasePriority), true);
  // 0x28: pointer
  if (data?.LastSyscallFirstArgument !== undefined) view.setBigUint64(40, data.LastSyscallFirstArgument === null ? 0n : BigInt(util.toPointer(data.LastSyscallFirstArgument)), true);
  // 0x30: u16
  if (data?.LastSyscallNumber !== undefined) view.setUint16(48, Number(data.LastSyscallNumber), true);
  // 0x32: pad6
  // 0x38: pointer
  if (data?.CreateTime !== undefined) view.setBigUint64(56, data.CreateTime === null ? 0n : BigInt(util.toPointer(data.CreateTime)), true);
  // 0x40: pointer
  if (data?.ExitTime !== undefined) view.setBigUint64(64, data.ExitTime === null ? 0n : BigInt(util.toPointer(data.ExitTime)), true);
  // 0x48: pointer
  if (data?.KernelTime !== undefined) view.setBigUint64(72, data.KernelTime === null ? 0n : BigInt(util.toPointer(data.KernelTime)), true);
  // 0x50: pointer
  if (data?.UserTime !== undefined) view.setBigUint64(80, data.UserTime === null ? 0n : BigInt(util.toPointer(data.UserTime)), true);
  // 0x58: pointer
  if (data?.Win32StartAddress !== undefined) view.setBigUint64(88, data.Win32StartAddress === null ? 0n : BigInt(util.toPointer(data.Win32StartAddress)), true);
  // 0x60: pointer
  if (data?.CaptureTime !== undefined) view.setBigUint64(96, data.CaptureTime === null ? 0n : BigInt(util.toPointer(data.CaptureTime)), true);
  // 0x68: u32
  if (data?.Flags !== undefined) view.setUint32(104, Number(data.Flags), true);
  // 0x6c: u16
  if (data?.SuspendCount !== undefined) view.setUint16(108, Number(data.SuspendCount), true);
  // 0x6e: u16
  if (data?.SizeOfContextRecord !== undefined) view.setUint16(110, Number(data.SizeOfContextRecord), true);
  // 0x70: pointer
  if (data?.ContextRecord !== undefined) view.setBigUint64(112, data.ContextRecord === null ? 0n : BigInt(util.toPointer(data.ContextRecord)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.ProcessSnapshotting.PSS_ALLOCATOR (size: 24)
 */
export interface PSS_ALLOCATOR {
  /** ptr */
  Context: Deno.PointerValue | Uint8Array | null;
  /** isize */
  AllocRoutine: Deno.PointerValue;
  /** isize */
  FreeRoutine: Deno.PointerValue;
}

export const sizeofPSS_ALLOCATOR = 24;

export function allocPSS_ALLOCATOR(data?: Partial<PSS_ALLOCATOR>): Uint8Array {
  const buf = new Uint8Array(sizeofPSS_ALLOCATOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Context !== undefined) view.setBigUint64(0, data.Context === null ? 0n : BigInt(util.toPointer(data.Context)), true);
  // 0x08: isize
  if (data?.AllocRoutine !== undefined) view.setBigInt64(8, BigInt(data.AllocRoutine), true);
  // 0x10: isize
  if (data?.FreeRoutine !== undefined) view.setBigInt64(16, BigInt(data.FreeRoutine), true);
  return buf;
}

// Native Libraries

try {
  var libKERNEL32_dll = Deno.dlopen("KERNEL32.dll", {
    PssCaptureSnapshot: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "u32",
    },
    PssFreeSnapshot: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    PssQuerySnapshot: {
      parameters: ["pointer", "i32", "pointer", "u32"],
      result: "u32",
    },
    PssWalkSnapshot: {
      parameters: ["pointer", "i32", "pointer", "pointer", "u32"],
      result: "u32",
    },
    PssDuplicateSnapshot: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32"],
      result: "u32",
    },
    PssWalkMarkerCreate: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    PssWalkMarkerFree: {
      parameters: ["pointer"],
      result: "u32",
    },
    PssWalkMarkerGetPosition: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    PssWalkMarkerSetPosition: {
      parameters: ["pointer", "usize"],
      result: "u32",
    },
    PssWalkMarkerSeekToBeginning: {
      parameters: ["pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function PssCaptureSnapshot(
  ProcessHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  CaptureFlags: PSS_CAPTURE_FLAGS /* Windows.Win32.System.Diagnostics.ProcessSnapshotting.PSS_CAPTURE_FLAGS */,
  ThreadContextFlags: number /* u32 */,
  SnapshotHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libKERNEL32_dll.PssCaptureSnapshot(util.toPointer(ProcessHandle), CaptureFlags, ThreadContextFlags, util.toPointer(SnapshotHandle));
}

export function PssFreeSnapshot(
  ProcessHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  SnapshotHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.ProcessSnapshotting.HPSS */,
): number /* u32 */ {
  return libKERNEL32_dll.PssFreeSnapshot(util.toPointer(ProcessHandle), util.toPointer(SnapshotHandle));
}

export function PssQuerySnapshot(
  SnapshotHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.ProcessSnapshotting.HPSS */,
  InformationClass: PSS_QUERY_INFORMATION_CLASS /* Windows.Win32.System.Diagnostics.ProcessSnapshotting.PSS_QUERY_INFORMATION_CLASS */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferLength: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.PssQuerySnapshot(util.toPointer(SnapshotHandle), InformationClass, util.toPointer(Buffer), BufferLength);
}

export function PssWalkSnapshot(
  SnapshotHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.ProcessSnapshotting.HPSS */,
  InformationClass: PSS_WALK_INFORMATION_CLASS /* Windows.Win32.System.Diagnostics.ProcessSnapshotting.PSS_WALK_INFORMATION_CLASS */,
  WalkMarkerHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.ProcessSnapshotting.HPSSWALK */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferLength: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.PssWalkSnapshot(util.toPointer(SnapshotHandle), InformationClass, util.toPointer(WalkMarkerHandle), util.toPointer(Buffer), BufferLength);
}

export function PssDuplicateSnapshot(
  SourceProcessHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  SnapshotHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.ProcessSnapshotting.HPSS */,
  TargetProcessHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  TargetSnapshotHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: PSS_DUPLICATE_FLAGS /* Windows.Win32.System.Diagnostics.ProcessSnapshotting.PSS_DUPLICATE_FLAGS */,
): number /* u32 */ {
  return libKERNEL32_dll.PssDuplicateSnapshot(util.toPointer(SourceProcessHandle), util.toPointer(SnapshotHandle), util.toPointer(TargetProcessHandle), util.toPointer(TargetSnapshotHandle), Flags);
}

export function PssWalkMarkerCreate(
  Allocator: Deno.PointerValue | Uint8Array | null /* ptr */,
  WalkMarkerHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libKERNEL32_dll.PssWalkMarkerCreate(util.toPointer(Allocator), util.toPointer(WalkMarkerHandle));
}

export function PssWalkMarkerFree(
  WalkMarkerHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.ProcessSnapshotting.HPSSWALK */,
): number /* u32 */ {
  return libKERNEL32_dll.PssWalkMarkerFree(util.toPointer(WalkMarkerHandle));
}

export function PssWalkMarkerGetPosition(
  WalkMarkerHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.ProcessSnapshotting.HPSSWALK */,
  Position: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libKERNEL32_dll.PssWalkMarkerGetPosition(util.toPointer(WalkMarkerHandle), util.toPointer(Position));
}

export function PssWalkMarkerSetPosition(
  WalkMarkerHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.ProcessSnapshotting.HPSSWALK */,
  Position: Deno.PointerValue /* usize */,
): number /* u32 */ {
  return libKERNEL32_dll.PssWalkMarkerSetPosition(util.toPointer(WalkMarkerHandle), Position);
}

export function PssWalkMarkerSeekToBeginning(
  WalkMarkerHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.ProcessSnapshotting.HPSSWALK */,
): number /* u32 */ {
  return libKERNEL32_dll.PssWalkMarkerSeekToBeginning(util.toPointer(WalkMarkerHandle));
}

