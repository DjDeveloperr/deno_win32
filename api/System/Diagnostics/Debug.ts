/// Auto-generated by Deno Win32: Windows.Win32.System.Diagnostics.Debug.Apis

import * as util from "../../../util.ts";

// Enums
export type SYM_LOAD_FLAGS = number;
export type IMAGE_SECTION_CHARACTERISTICS = number;
export type IMAGE_SUBSYSTEM = number;
export type IMAGE_DLL_CHARACTERISTICS = number;
export type IMAGE_OPTIONAL_HEADER_MAGIC = number;
export type BUGCHECK_ERROR = number;
export type FACILITY_CODE = number;
export type THREAD_ERROR_MODE = number;
export type FORMAT_MESSAGE_OPTIONS = number;
export type RTL_VIRTUAL_UNWIND_HANDLER_TYPE = number;
export type OPEN_THREAD_WAIT_CHAIN_SESSION_FLAGS = number;
export type SYM_SRV_STORE_FILE_FLAGS = number;
export type PROCESSOR_ARCHITECTURE = number;
export type IMAGE_DIRECTORY_ENTRY = number;
export type WAIT_CHAIN_THREAD_OPTIONS = number;
export type SYM_FIND_ID_OPTION = number;
export type IMAGE_FILE_CHARACTERISTICS = number;
export type IMAGE_FILE_CHARACTERISTICS2 = number;
export type SYMBOL_INFO_FLAGS = number;
export type IMAGEHLP_CBA_EVENT_SEVERITY = number;
export type IMAGEHLP_GET_TYPE_INFO_FLAGS = number;
export type RIP_INFO_TYPE = number;
export type VER_PLATFORM = number;
export type IMAGE_DEBUG_TYPE = number;
export type MINIDUMP_THREAD_INFO_DUMP_FLAGS = number;
export type DEBUG_EVENT_CODE = number;
export type MINIDUMP_MISC_INFO_FLAGS = number;
export type MODLOAD_DATA_TYPE = number;
export type ModelObjectKind = number;
export type SymbolKind = number;
export type TypeKind = number;
export type IntrinsicKind = number;
export type PointerKind = number;
export type CallingConventionKind = number;
export type LocationKind = number;
export type PreferredFormat = number;
export type RawSearchFlags = number;
export type ErrorClass = number;
export type SignatureComparison = number;
export type SymbolSearchOptions = number;
export type LanguageKind = number;
export type VarArgsKind = number;
export type ScriptChangeKind = number;
export type ScriptDebugState = number;
export type ScriptDebugEventFilter = number;
export type ScriptDebugEvent = number;
export type ScriptExecutionKind = number;
export type EXT_TDOP = number;
export type DBGKD_MAJOR_TYPES = number;
export type IMAGE_FILE_MACHINE = number;
export type WCT_OBJECT_TYPE = number;
export type WCT_OBJECT_STATUS = number;
export type MINIDUMP_STREAM_TYPE = number;
export type VS_FIXEDFILEINFO_FILE_FLAGS = number;
export type VS_FIXEDFILEINFO_FILE_OS = number;
export type VS_FIXEDFILEINFO_FILE_TYPE = number;
export type VS_FIXEDFILEINFO_FILE_SUBTYPE = number;
export type MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE = number;
export type VIRTUAL_ALLOCATION_TYPE = number;
export type MINIDUMP_CALLBACK_TYPE = number;
export type THREAD_WRITE_FLAGS = number;
export type MODULE_WRITE_FLAGS = number;
export type MINIDUMP_TYPE = number;
export type MINIDUMP_SECONDARY_FLAGS = number;
export type SCRIPTLANGUAGEVERSION = number;
export type SCRIPTSTATE = number;
export type SCRIPTTRACEINFO = number;
export type SCRIPTTHREADSTATE = number;
export type SCRIPTGCTYPE = number;
export type SCRIPTUICITEM = number;
export type SCRIPTUICHANDLING = number;
export type DBGPROP_ATTRIB_FLAGS = number;
export type DBGPROP_INFO = number;
export type OBJECT_ATTRIB_FLAGS = number;
export type PROP_INFO_FLAGS = number;
export type EX_PROP_INFO_FLAGS = number;
export type BREAKPOINT_STATE = number;
export type BREAKREASON = number;
export type BREAKRESUMEACTION = number;
export type ERRORRESUMEACTION = number;
export type DOCUMENTNAMETYPE = number;
export type PROFILER_SCRIPT_TYPE = number;
export type PROFILER_EVENT_MASK = number;
export type PROFILER_HEAP_OBJECT_FLAGS = number;
export type PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE = number;
export type PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS = number;
export type PROFILER_HEAP_ENUM_FLAGS = number;
export type PROFILER_RELATIONSHIP_INFO = number;
export type PROFILER_HEAP_SUMMARY_VERSION = number;
export type IMAGEHLP_STATUS_REASON = number;
export type ADDRESS_MODE = number;
export type SYM_TYPE = number;
export type IMAGEHLP_HD_TYPE = number;
export type IMAGEHLP_EXTENDED_OPTIONS = number;
export type IMAGEHLP_SYMBOL_TYPE_INFO = number;
export type IMAGEHLP_SF_TYPE = number;
export type APPLICATION_NODE_EVENT_FILTER = number;
export type SCRIPT_DEBUGGER_OPTIONS = number;
export type SCRIPT_ERROR_DEBUG_EXCEPTION_THROWN_KIND = number;
export type SCRIPT_INVOCATION_CONTEXT_TYPE = number;
export type DEBUG_STACKFRAME_TYPE = number;
export type DEBUG_EVENT_INFO_TYPE = number;
export type JS_PROPERTY_MEMBERS = number;
export type JS_PROPERTY_ATTRIBUTES = number;
export type JsDebugReadMemoryFlags = number;
export type DUMP_TYPE = number;
export type WHEA_ERROR_SOURCE_TYPE = number;
export type WHEA_ERROR_SOURCE_STATE = number;
export type NtmsDriveState = number;
export type FILE_DEVICE_TYPE = number;
export type NtmsLibraryType = number;
export type NtmsInventoryMethod = number;
export type NtmsLibraryFlags = number;
export type NtmsDoorState = number;
export type NtmsPortContent = number;
export type NtmsPortPosition = number;
export type NtmsBarCodeState = number;
export type NtmsMediaState = number;
export type NtmsPartitionState = number;
export type NtmsReadWriteCharacteristics = number;
export type NtmsLmOperation = number;
export type NtmsLmState = number;
export type NtmsOpreqCommand = number;
export type NtmsOpreqState = number;
export type NtmsObjectsTypes = number;
export type IPMI_OS_SEL_RECORD_TYPE = number;
export type MESSAGEBOX_STYLE = number;

// Constants
export const SLMFLAG_NONE = 0;
export const SLMFLAG_VIRTUAL = 1;
export const SLMFLAG_ALT_INDEX = 2;
export const SLMFLAG_NO_SYMBOLS = 4;
export const IMAGE_SCN_TYPE_NO_PAD = 8;
export const IMAGE_SCN_CNT_CODE = 32;
export const IMAGE_SCN_CNT_INITIALIZED_DATA = 64;
export const IMAGE_SCN_CNT_UNINITIALIZED_DATA = 128;
export const IMAGE_SCN_LNK_OTHER = 256;
export const IMAGE_SCN_LNK_INFO = 512;
export const IMAGE_SCN_LNK_REMOVE = 2048;
export const IMAGE_SCN_LNK_COMDAT = 4096;
export const IMAGE_SCN_NO_DEFER_SPEC_EXC = 16384;
export const IMAGE_SCN_GPREL = 32768;
export const IMAGE_SCN_MEM_FARDATA = 32768;
export const IMAGE_SCN_MEM_PURGEABLE = 131072;
export const IMAGE_SCN_MEM_16BIT = 131072;
export const IMAGE_SCN_MEM_LOCKED = 262144;
export const IMAGE_SCN_MEM_PRELOAD = 524288;
export const IMAGE_SCN_ALIGN_1BYTES = 1048576;
export const IMAGE_SCN_ALIGN_2BYTES = 2097152;
export const IMAGE_SCN_ALIGN_4BYTES = 3145728;
export const IMAGE_SCN_ALIGN_8BYTES = 4194304;
export const IMAGE_SCN_ALIGN_16BYTES = 5242880;
export const IMAGE_SCN_ALIGN_32BYTES = 6291456;
export const IMAGE_SCN_ALIGN_64BYTES = 7340032;
export const IMAGE_SCN_ALIGN_128BYTES = 8388608;
export const IMAGE_SCN_ALIGN_256BYTES = 9437184;
export const IMAGE_SCN_ALIGN_512BYTES = 10485760;
export const IMAGE_SCN_ALIGN_1024BYTES = 11534336;
export const IMAGE_SCN_ALIGN_2048BYTES = 12582912;
export const IMAGE_SCN_ALIGN_4096BYTES = 13631488;
export const IMAGE_SCN_ALIGN_8192BYTES = 14680064;
export const IMAGE_SCN_ALIGN_MASK = 15728640;
export const IMAGE_SCN_LNK_NRELOC_OVFL = 16777216;
export const IMAGE_SCN_MEM_DISCARDABLE = 33554432;
export const IMAGE_SCN_MEM_NOT_CACHED = 67108864;
export const IMAGE_SCN_MEM_NOT_PAGED = 134217728;
export const IMAGE_SCN_MEM_SHARED = 268435456;
export const IMAGE_SCN_MEM_EXECUTE = 536870912;
export const IMAGE_SCN_MEM_READ = 1073741824;
export const IMAGE_SCN_MEM_WRITE = 2147483648;
export const IMAGE_SCN_SCALE_INDEX = 1;
export const IMAGE_SUBSYSTEM_UNKNOWN = 0;
export const IMAGE_SUBSYSTEM_NATIVE = 1;
export const IMAGE_SUBSYSTEM_WINDOWS_GUI = 2;
export const IMAGE_SUBSYSTEM_WINDOWS_CUI = 3;
export const IMAGE_SUBSYSTEM_OS2_CUI = 5;
export const IMAGE_SUBSYSTEM_POSIX_CUI = 7;
export const IMAGE_SUBSYSTEM_NATIVE_WINDOWS = 8;
export const IMAGE_SUBSYSTEM_WINDOWS_CE_GUI = 9;
export const IMAGE_SUBSYSTEM_EFI_APPLICATION = 10;
export const IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER = 11;
export const IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER = 12;
export const IMAGE_SUBSYSTEM_EFI_ROM = 13;
export const IMAGE_SUBSYSTEM_XBOX = 14;
export const IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION = 16;
export const IMAGE_SUBSYSTEM_XBOX_CODE_CATALOG = 17;
export const IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA = 32;
export const IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE = 64;
export const IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY = 128;
export const IMAGE_DLLCHARACTERISTICS_NX_COMPAT = 256;
export const IMAGE_DLLCHARACTERISTICS_NO_ISOLATION = 512;
export const IMAGE_DLLCHARACTERISTICS_NO_SEH = 1024;
export const IMAGE_DLLCHARACTERISTICS_NO_BIND = 2048;
export const IMAGE_DLLCHARACTERISTICS_APPCONTAINER = 4096;
export const IMAGE_DLLCHARACTERISTICS_WDM_DRIVER = 8192;
export const IMAGE_DLLCHARACTERISTICS_GUARD_CF = 16384;
export const IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE = 32768;
export const IMAGE_DLLCHARACTERISTICS_EX_CET_COMPAT = 1;
export const IMAGE_DLLCHARACTERISTICS_EX_CET_COMPAT_STRICT_MODE = 2;
export const IMAGE_DLLCHARACTERISTICS_EX_CET_SET_CONTEXT_IP_VALIDATION_RELAXED_MODE = 4;
export const IMAGE_DLLCHARACTERISTICS_EX_CET_DYNAMIC_APIS_ALLOW_IN_PROC = 8;
export const IMAGE_DLLCHARACTERISTICS_EX_CET_RESERVED_1 = 16;
export const IMAGE_DLLCHARACTERISTICS_EX_CET_RESERVED_2 = 32;
export const IMAGE_NT_OPTIONAL_HDR_MAGIC = 523;
export const IMAGE_NT_OPTIONAL_HDR32_MAGIC = 267;
export const IMAGE_NT_OPTIONAL_HDR64_MAGIC = 523;
export const IMAGE_ROM_OPTIONAL_HDR_MAGIC = 263;
export const HARDWARE_PROFILE_UNDOCKED_STRING = 1073807361;
export const HARDWARE_PROFILE_DOCKED_STRING = 1073807362;
export const HARDWARE_PROFILE_UNKNOWN_STRING = 1073807363;
export const WINDOWS_NT_BANNER = 1073741950;
export const WINDOWS_NT_CSD_STRING = 1073741959;
export const WINDOWS_NT_INFO_STRING = 1073741960;
export const WINDOWS_NT_MP_STRING = 1073741961;
export const THREAD_TERMINATE_HELD_MUTEX = 1073741962;
export const WINDOWS_NT_INFO_STRING_PLURAL = 1073741981;
export const WINDOWS_NT_RC_STRING = 1073741982;
export const APC_INDEX_MISMATCH = 1;
export const DEVICE_QUEUE_NOT_BUSY = 2;
export const INVALID_AFFINITY_SET = 3;
export const INVALID_DATA_ACCESS_TRAP = 4;
export const INVALID_PROCESS_ATTACH_ATTEMPT = 5;
export const INVALID_PROCESS_DETACH_ATTEMPT = 6;
export const INVALID_SOFTWARE_INTERRUPT = 7;
export const IRQL_NOT_DISPATCH_LEVEL = 8;
export const IRQL_NOT_GREATER_OR_EQUAL = 9;
export const IRQL_NOT_LESS_OR_EQUAL = 10;
export const NO_EXCEPTION_HANDLING_SUPPORT = 11;
export const MAXIMUM_WAIT_OBJECTS_EXCEEDED = 12;
export const MUTEX_LEVEL_NUMBER_VIOLATION = 13;
export const NO_USER_MODE_CONTEXT = 14;
export const SPIN_LOCK_ALREADY_OWNED = 15;
export const SPIN_LOCK_NOT_OWNED = 16;
export const THREAD_NOT_MUTEX_OWNER = 17;
export const TRAP_CAUSE_UNKNOWN = 18;
export const EMPTY_THREAD_REAPER_LIST = 19;
export const CREATE_DELETE_LOCK_NOT_LOCKED = 20;
export const LAST_CHANCE_CALLED_FROM_KMODE = 21;
export const CID_HANDLE_CREATION = 22;
export const CID_HANDLE_DELETION = 23;
export const REFERENCE_BY_POINTER = 24;
export const BAD_POOL_HEADER = 25;
export const MEMORY_MANAGEMENT = 26;
export const PFN_SHARE_COUNT = 27;
export const PFN_REFERENCE_COUNT = 28;
export const NO_SPIN_LOCK_AVAILABLE = 29;
export const KMODE_EXCEPTION_NOT_HANDLED = 30;
export const SHARED_RESOURCE_CONV_ERROR = 31;
export const KERNEL_APC_PENDING_DURING_EXIT = 32;
export const QUOTA_UNDERFLOW = 33;
export const FILE_SYSTEM = 34;
export const FAT_FILE_SYSTEM = 35;
export const NTFS_FILE_SYSTEM = 36;
export const NPFS_FILE_SYSTEM = 37;
export const CDFS_FILE_SYSTEM = 38;
export const RDR_FILE_SYSTEM = 39;
export const CORRUPT_ACCESS_TOKEN = 40;
export const SECURITY_SYSTEM = 41;
export const INCONSISTENT_IRP = 42;
export const PANIC_STACK_SWITCH = 43;
export const PORT_DRIVER_INTERNAL = 44;
export const SCSI_DISK_DRIVER_INTERNAL = 45;
export const DATA_BUS_ERROR = 46;
export const INSTRUCTION_BUS_ERROR = 47;
export const SET_OF_INVALID_CONTEXT = 48;
export const PHASE0_INITIALIZATION_FAILED = 49;
export const PHASE1_INITIALIZATION_FAILED = 50;
export const UNEXPECTED_INITIALIZATION_CALL = 51;
export const CACHE_MANAGER = 52;
export const NO_MORE_IRP_STACK_LOCATIONS = 53;
export const DEVICE_REFERENCE_COUNT_NOT_ZERO = 54;
export const FLOPPY_INTERNAL_ERROR = 55;
export const SERIAL_DRIVER_INTERNAL = 56;
export const SYSTEM_EXIT_OWNED_MUTEX = 57;
export const SYSTEM_UNWIND_PREVIOUS_USER = 58;
export const SYSTEM_SERVICE_EXCEPTION = 59;
export const INTERRUPT_UNWIND_ATTEMPTED = 60;
export const INTERRUPT_EXCEPTION_NOT_HANDLED = 61;
export const MULTIPROCESSOR_CONFIGURATION_NOT_SUPPORTED = 62;
export const NO_MORE_SYSTEM_PTES = 63;
export const TARGET_MDL_TOO_SMALL = 64;
export const MUST_SUCCEED_POOL_EMPTY = 65;
export const ATDISK_DRIVER_INTERNAL = 66;
export const NO_SUCH_PARTITION = 67;
export const MULTIPLE_IRP_COMPLETE_REQUESTS = 68;
export const INSUFFICIENT_SYSTEM_MAP_REGS = 69;
export const DEREF_UNKNOWN_LOGON_SESSION = 70;
export const REF_UNKNOWN_LOGON_SESSION = 71;
export const CANCEL_STATE_IN_COMPLETED_IRP = 72;
export const PAGE_FAULT_WITH_INTERRUPTS_OFF = 73;
export const IRQL_GT_ZERO_AT_SYSTEM_SERVICE = 74;
export const STREAMS_INTERNAL_ERROR = 75;
export const FATAL_UNHANDLED_HARD_ERROR = 76;
export const NO_PAGES_AVAILABLE = 77;
export const PFN_LIST_CORRUPT = 78;
export const NDIS_INTERNAL_ERROR = 79;
export const PAGE_FAULT_IN_NONPAGED_AREA = 80;
export const PAGE_FAULT_IN_NONPAGED_AREA_M = 268435536;
export const REGISTRY_ERROR = 81;
export const MAILSLOT_FILE_SYSTEM = 82;
export const NO_BOOT_DEVICE = 83;
export const LM_SERVER_INTERNAL_ERROR = 84;
export const DATA_COHERENCY_EXCEPTION = 85;
export const INSTRUCTION_COHERENCY_EXCEPTION = 86;
export const XNS_INTERNAL_ERROR = 87;
export const VOLMGRX_INTERNAL_ERROR = 88;
export const PINBALL_FILE_SYSTEM = 89;
export const CRITICAL_SERVICE_FAILED = 90;
export const SET_ENV_VAR_FAILED = 91;
export const HAL_INITIALIZATION_FAILED = 92;
export const UNSUPPORTED_PROCESSOR = 93;
export const OBJECT_INITIALIZATION_FAILED = 94;
export const SECURITY_INITIALIZATION_FAILED = 95;
export const PROCESS_INITIALIZATION_FAILED = 96;
export const HAL1_INITIALIZATION_FAILED = 97;
export const OBJECT1_INITIALIZATION_FAILED = 98;
export const SECURITY1_INITIALIZATION_FAILED = 99;
export const SYMBOLIC_INITIALIZATION_FAILED = 100;
export const MEMORY1_INITIALIZATION_FAILED = 101;
export const CACHE_INITIALIZATION_FAILED = 102;
export const CONFIG_INITIALIZATION_FAILED = 103;
export const FILE_INITIALIZATION_FAILED = 104;
export const IO1_INITIALIZATION_FAILED = 105;
export const LPC_INITIALIZATION_FAILED = 106;
export const PROCESS1_INITIALIZATION_FAILED = 107;
export const REFMON_INITIALIZATION_FAILED = 108;
export const SESSION1_INITIALIZATION_FAILED = 109;
export const BOOTPROC_INITIALIZATION_FAILED = 110;
export const VSL_INITIALIZATION_FAILED = 111;
export const SOFT_RESTART_FATAL_ERROR = 112;
export const ASSIGN_DRIVE_LETTERS_FAILED = 114;
export const CONFIG_LIST_FAILED = 115;
export const BAD_SYSTEM_CONFIG_INFO = 116;
export const CANNOT_WRITE_CONFIGURATION = 117;
export const PROCESS_HAS_LOCKED_PAGES = 118;
export const KERNEL_STACK_INPAGE_ERROR = 119;
export const PHASE0_EXCEPTION = 120;
export const MISMATCHED_HAL = 121;
export const KERNEL_DATA_INPAGE_ERROR = 122;
export const INACCESSIBLE_BOOT_DEVICE = 123;
export const BUGCODE_NDIS_DRIVER = 124;
export const INSTALL_MORE_MEMORY = 125;
export const SYSTEM_THREAD_EXCEPTION_NOT_HANDLED = 126;
export const SYSTEM_THREAD_EXCEPTION_NOT_HANDLED_M = 268435582;
export const UNEXPECTED_KERNEL_MODE_TRAP = 127;
export const UNEXPECTED_KERNEL_MODE_TRAP_M = 268435583;
export const NMI_HARDWARE_FAILURE = 128;
export const SPIN_LOCK_INIT_FAILURE = 129;
export const DFS_FILE_SYSTEM = 130;
export const OFS_FILE_SYSTEM = 131;
export const RECOM_DRIVER = 132;
export const SETUP_FAILURE = 133;
export const AUDIT_FAILURE = 134;
export const MBR_CHECKSUM_MISMATCH = 139;
export const KERNEL_MODE_EXCEPTION_NOT_HANDLED = 142;
export const KERNEL_MODE_EXCEPTION_NOT_HANDLED_M = 268435598;
export const PP0_INITIALIZATION_FAILED = 143;
export const PP1_INITIALIZATION_FAILED = 144;
export const WIN32K_INIT_OR_RIT_FAILURE = 145;
export const UP_DRIVER_ON_MP_SYSTEM = 146;
export const INVALID_KERNEL_HANDLE = 147;
export const KERNEL_STACK_LOCKED_AT_EXIT = 148;
export const PNP_INTERNAL_ERROR = 149;
export const INVALID_WORK_QUEUE_ITEM = 150;
export const BOUND_IMAGE_UNSUPPORTED = 151;
export const END_OF_NT_EVALUATION_PERIOD = 152;
export const INVALID_REGION_OR_SEGMENT = 153;
export const SYSTEM_LICENSE_VIOLATION = 154;
export const UDFS_FILE_SYSTEM = 155;
export const MACHINE_CHECK_EXCEPTION = 156;
export const USER_MODE_HEALTH_MONITOR = 158;
export const DRIVER_POWER_STATE_FAILURE = 159;
export const INTERNAL_POWER_ERROR = 160;
export const PCI_BUS_DRIVER_INTERNAL = 161;
export const MEMORY_IMAGE_CORRUPT = 162;
export const ACPI_DRIVER_INTERNAL = 163;
export const CNSS_FILE_SYSTEM_FILTER = 164;
export const ACPI_BIOS_ERROR = 165;
export const FP_EMULATION_ERROR = 166;
export const BAD_EXHANDLE = 167;
export const BOOTING_IN_SAFEMODE_MINIMAL = 168;
export const BOOTING_IN_SAFEMODE_NETWORK = 169;
export const BOOTING_IN_SAFEMODE_DSREPAIR = 170;
export const SESSION_HAS_VALID_POOL_ON_EXIT = 171;
export const HAL_MEMORY_ALLOCATION = 172;
export const VIDEO_DRIVER_DEBUG_REPORT_REQUEST = 1073741997;
export const BGI_DETECTED_VIOLATION = 177;
export const VIDEO_DRIVER_INIT_FAILURE = 180;
export const BOOTLOG_LOADED = 181;
export const BOOTLOG_NOT_LOADED = 182;
export const BOOTLOG_ENABLED = 183;
export const ATTEMPTED_SWITCH_FROM_DPC = 184;
export const CHIPSET_DETECTED_ERROR = 185;
export const SESSION_HAS_VALID_VIEWS_ON_EXIT = 186;
export const NETWORK_BOOT_INITIALIZATION_FAILED = 187;
export const NETWORK_BOOT_DUPLICATE_ADDRESS = 188;
export const INVALID_HIBERNATED_STATE = 189;
export const ATTEMPTED_WRITE_TO_READONLY_MEMORY = 190;
export const MUTEX_ALREADY_OWNED = 191;
export const PCI_CONFIG_SPACE_ACCESS_FAILURE = 192;
export const SPECIAL_POOL_DETECTED_MEMORY_CORRUPTION = 193;
export const BAD_POOL_CALLER = 194;
export const SYSTEM_IMAGE_BAD_SIGNATURE = 195;
export const DRIVER_VERIFIER_DETECTED_VIOLATION = 196;
export const DRIVER_CORRUPTED_EXPOOL = 197;
export const DRIVER_CAUGHT_MODIFYING_FREED_POOL = 198;
export const TIMER_OR_DPC_INVALID = 199;
export const IRQL_UNEXPECTED_VALUE = 200;
export const DRIVER_VERIFIER_IOMANAGER_VIOLATION = 201;
export const PNP_DETECTED_FATAL_ERROR = 202;
export const DRIVER_LEFT_LOCKED_PAGES_IN_PROCESS = 203;
export const PAGE_FAULT_IN_FREED_SPECIAL_POOL = 204;
export const PAGE_FAULT_BEYOND_END_OF_ALLOCATION = 205;
export const DRIVER_UNLOADED_WITHOUT_CANCELLING_PENDING_OPERATIONS = 206;
export const TERMINAL_SERVER_DRIVER_MADE_INCORRECT_MEMORY_REFERENCE = 207;
export const DRIVER_CORRUPTED_MMPOOL = 208;
export const DRIVER_IRQL_NOT_LESS_OR_EQUAL = 209;
export const BUGCODE_ID_DRIVER = 210;
export const DRIVER_PORTION_MUST_BE_NONPAGED = 211;
export const SYSTEM_SCAN_AT_RAISED_IRQL_CAUGHT_IMPROPER_DRIVER_UNLOAD = 212;
export const DRIVER_PAGE_FAULT_IN_FREED_SPECIAL_POOL = 213;
export const DRIVER_PAGE_FAULT_BEYOND_END_OF_ALLOCATION = 214;
export const DRIVER_PAGE_FAULT_BEYOND_END_OF_ALLOCATION_M = 268435670;
export const DRIVER_UNMAPPING_INVALID_VIEW = 215;
export const DRIVER_USED_EXCESSIVE_PTES = 216;
export const LOCKED_PAGES_TRACKER_CORRUPTION = 217;
export const SYSTEM_PTE_MISUSE = 218;
export const DRIVER_CORRUPTED_SYSPTES = 219;
export const DRIVER_INVALID_STACK_ACCESS = 220;
export const POOL_CORRUPTION_IN_FILE_AREA = 222;
export const IMPERSONATING_WORKER_THREAD = 223;
export const ACPI_BIOS_FATAL_ERROR = 224;
export const WORKER_THREAD_RETURNED_AT_BAD_IRQL = 225;
export const MANUALLY_INITIATED_CRASH = 226;
export const RESOURCE_NOT_OWNED = 227;
export const WORKER_INVALID = 228;
export const POWER_FAILURE_SIMULATE = 229;
export const DRIVER_VERIFIER_DMA_VIOLATION = 230;
export const INVALID_FLOATING_POINT_STATE = 231;
export const INVALID_CANCEL_OF_FILE_OPEN = 232;
export const ACTIVE_EX_WORKER_THREAD_TERMINATION = 233;
export const SAVER_UNSPECIFIED = 61440;
export const SAVER_BLANKSCREEN = 61442;
export const SAVER_INPUT = 61443;
export const SAVER_WATCHDOG = 61444;
export const SAVER_STARTNOTVISIBLE = 61445;
export const SAVER_NAVIGATIONMODEL = 61446;
export const SAVER_OUTOFMEMORY = 61447;
export const SAVER_GRAPHICS = 61448;
export const SAVER_NAVSERVERTIMEOUT = 61449;
export const SAVER_CHROMEPROCESSCRASH = 61450;
export const SAVER_NOTIFICATIONDISMISSAL = 61451;
export const SAVER_SPEECHDISMISSAL = 61452;
export const SAVER_CALLDISMISSAL = 61453;
export const SAVER_APPBARDISMISSAL = 61454;
export const SAVER_RILADAPTATIONCRASH = 61455;
export const SAVER_APPLISTUNREACHABLE = 61456;
export const SAVER_REPORTNOTIFICATIONFAILURE = 61457;
export const SAVER_UNEXPECTEDSHUTDOWN = 61458;
export const SAVER_RPCFAILURE = 61459;
export const SAVER_AUXILIARYFULLDUMP = 61460;
export const SAVER_ACCOUNTPROVSVCINITFAILURE = 61461;
export const SAVER_MTBFCOMMANDTIMEOUT = 789;
export const SAVER_MTBFCOMMANDHANG = 61697;
export const SAVER_MTBFPASSBUGCHECK = 61698;
export const SAVER_MTBFIOERROR = 61699;
export const SAVER_RENDERTHREADHANG = 61952;
export const SAVER_RENDERMOBILEUIOOM = 61953;
export const SAVER_DEVICEUPDATEUNSPECIFIED = 62208;
export const SAVER_AUDIODRIVERHANG = 62464;
export const SAVER_BATTERYPULLOUT = 62720;
export const SAVER_MEDIACORETESTHANG = 62976;
export const SAVER_RESOURCEMANAGEMENT = 63232;
export const SAVER_CAPTURESERVICE = 63488;
export const SAVER_WAITFORSHELLREADY = 63744;
export const SAVER_NONRESPONSIVEPROCESS = 404;
export const SAVER_SICKAPPLICATION = 34918;
export const THREAD_STUCK_IN_DEVICE_DRIVER = 234;
export const THREAD_STUCK_IN_DEVICE_DRIVER_M = 268435690;
export const DIRTY_MAPPED_PAGES_CONGESTION = 235;
export const SESSION_HAS_VALID_SPECIAL_POOL_ON_EXIT = 236;
export const UNMOUNTABLE_BOOT_VOLUME = 237;
export const CRITICAL_PROCESS_DIED = 239;
export const STORAGE_MINIPORT_ERROR = 240;
export const SCSI_VERIFIER_DETECTED_VIOLATION = 241;
export const HARDWARE_INTERRUPT_STORM = 242;
export const DISORDERLY_SHUTDOWN = 243;
export const CRITICAL_OBJECT_TERMINATION = 244;
export const FLTMGR_FILE_SYSTEM = 245;
export const PCI_VERIFIER_DETECTED_VIOLATION = 246;
export const DRIVER_OVERRAN_STACK_BUFFER = 247;
export const RAMDISK_BOOT_INITIALIZATION_FAILED = 248;
export const DRIVER_RETURNED_STATUS_REPARSE_FOR_VOLUME_OPEN = 249;
export const HTTP_DRIVER_CORRUPTED = 250;
export const RECURSIVE_MACHINE_CHECK = 251;
export const ATTEMPTED_EXECUTE_OF_NOEXECUTE_MEMORY = 252;
export const DIRTY_NOWRITE_PAGES_CONGESTION = 253;
export const BUGCODE_USB_DRIVER = 254;
export const BC_BLUETOOTH_VERIFIER_FAULT = 3070;
export const BC_BTHMINI_VERIFIER_FAULT = 3071;
export const RESERVE_QUEUE_OVERFLOW = 255;
export const LOADER_BLOCK_MISMATCH = 256;
export const CLOCK_WATCHDOG_TIMEOUT = 257;
export const DPC_WATCHDOG_TIMEOUT = 258;
export const MUP_FILE_SYSTEM = 259;
export const AGP_INVALID_ACCESS = 260;
export const AGP_GART_CORRUPTION = 261;
export const AGP_ILLEGALLY_REPROGRAMMED = 262;
export const KERNEL_EXPAND_STACK_ACTIVE = 263;
export const THIRD_PARTY_FILE_SYSTEM_FAILURE = 264;
export const CRITICAL_STRUCTURE_CORRUPTION = 265;
export const APP_TAGGING_INITIALIZATION_FAILED = 266;
export const DFSC_FILE_SYSTEM = 267;
export const FSRTL_EXTRA_CREATE_PARAMETER_VIOLATION = 268;
export const WDF_VIOLATION = 269;
export const VIDEO_MEMORY_MANAGEMENT_INTERNAL = 270;
export const DRIVER_INVALID_CRUNTIME_PARAMETER = 272;
export const RECURSIVE_NMI = 273;
export const MSRPC_STATE_VIOLATION = 274;
export const VIDEO_DXGKRNL_FATAL_ERROR = 275;
export const VIDEO_SHADOW_DRIVER_FATAL_ERROR = 276;
export const AGP_INTERNAL = 277;
export const VIDEO_TDR_FAILURE = 278;
export const VIDEO_TDR_TIMEOUT_DETECTED = 279;
export const NTHV_GUEST_ERROR = 280;
export const VIDEO_SCHEDULER_INTERNAL_ERROR = 281;
export const EM_INITIALIZATION_ERROR = 282;
export const DRIVER_RETURNED_HOLDING_CANCEL_LOCK = 283;
export const ATTEMPTED_WRITE_TO_CM_PROTECTED_STORAGE = 284;
export const EVENT_TRACING_FATAL_ERROR = 285;
export const TOO_MANY_RECURSIVE_FAULTS = 286;
export const INVALID_DRIVER_HANDLE = 287;
export const BITLOCKER_FATAL_ERROR = 288;
export const DRIVER_VIOLATION = 289;
export const WHEA_INTERNAL_ERROR = 290;
export const CRYPTO_SELF_TEST_FAILURE = 291;
export const WHEA_UNCORRECTABLE_ERROR = 292;
export const NMR_INVALID_STATE = 293;
export const NETIO_INVALID_POOL_CALLER = 294;
export const PAGE_NOT_ZERO = 295;
export const WORKER_THREAD_RETURNED_WITH_BAD_IO_PRIORITY = 296;
export const WORKER_THREAD_RETURNED_WITH_BAD_PAGING_IO_PRIORITY = 297;
export const MUI_NO_VALID_SYSTEM_LANGUAGE = 298;
export const FAULTY_HARDWARE_CORRUPTED_PAGE = 299;
export const EXFAT_FILE_SYSTEM = 300;
export const VOLSNAP_OVERLAPPED_TABLE_ACCESS = 301;
export const INVALID_MDL_RANGE = 302;
export const VHD_BOOT_INITIALIZATION_FAILED = 303;
export const DYNAMIC_ADD_PROCESSOR_MISMATCH = 304;
export const INVALID_EXTENDED_PROCESSOR_STATE = 305;
export const RESOURCE_OWNER_POINTER_INVALID = 306;
export const DPC_WATCHDOG_VIOLATION = 307;
export const DRIVE_EXTENDER = 308;
export const REGISTRY_FILTER_DRIVER_EXCEPTION = 309;
export const VHD_BOOT_HOST_VOLUME_NOT_ENOUGH_SPACE = 310;
export const WIN32K_HANDLE_MANAGER = 311;
export const GPIO_CONTROLLER_DRIVER_ERROR = 312;
export const KERNEL_SECURITY_CHECK_FAILURE = 313;
export const KERNEL_MODE_HEAP_CORRUPTION = 314;
export const PASSIVE_INTERRUPT_ERROR = 315;
export const INVALID_IO_BOOST_STATE = 316;
export const CRITICAL_INITIALIZATION_FAILURE = 317;
export const ERRATA_WORKAROUND_UNSUCCESSFUL = 318;
export const REGISTRY_CALLBACK_DRIVER_EXCEPTION = 319;
export const STORAGE_DEVICE_ABNORMALITY_DETECTED = 320;
export const VIDEO_ENGINE_TIMEOUT_DETECTED = 321;
export const VIDEO_TDR_APPLICATION_BLOCKED = 322;
export const PROCESSOR_DRIVER_INTERNAL = 323;
export const BUGCODE_USB3_DRIVER = 324;
export const SECURE_BOOT_VIOLATION = 325;
export const NDIS_NET_BUFFER_LIST_INFO_ILLEGALLY_TRANSFERRED = 326;
export const ABNORMAL_RESET_DETECTED = 327;
export const IO_OBJECT_INVALID = 328;
export const REFS_FILE_SYSTEM = 329;
export const KERNEL_WMI_INTERNAL = 330;
export const SOC_SUBSYSTEM_FAILURE = 331;
export const FATAL_ABNORMAL_RESET_ERROR = 332;
export const EXCEPTION_SCOPE_INVALID = 333;
export const SOC_CRITICAL_DEVICE_REMOVED = 334;
export const PDC_WATCHDOG_TIMEOUT = 335;
export const TCPIP_AOAC_NIC_ACTIVE_REFERENCE_LEAK = 336;
export const UNSUPPORTED_INSTRUCTION_MODE = 337;
export const INVALID_PUSH_LOCK_FLAGS = 338;
export const KERNEL_LOCK_ENTRY_LEAKED_ON_THREAD_TERMINATION = 339;
export const UNEXPECTED_STORE_EXCEPTION = 340;
export const OS_DATA_TAMPERING = 341;
export const WINSOCK_DETECTED_HUNG_CLOSESOCKET_LIVEDUMP = 342;
export const KERNEL_THREAD_PRIORITY_FLOOR_VIOLATION = 343;
export const ILLEGAL_IOMMU_PAGE_FAULT = 344;
export const HAL_ILLEGAL_IOMMU_PAGE_FAULT = 345;
export const SDBUS_INTERNAL_ERROR = 346;
export const WORKER_THREAD_RETURNED_WITH_SYSTEM_PAGE_PRIORITY_ACTIVE = 347;
export const PDC_WATCHDOG_TIMEOUT_LIVEDUMP = 348;
export const SOC_SUBSYSTEM_FAILURE_LIVEDUMP = 349;
export const BUGCODE_NDIS_DRIVER_LIVE_DUMP = 350;
export const CONNECTED_STANDBY_WATCHDOG_TIMEOUT_LIVEDUMP = 351;
export const WIN32K_ATOMIC_CHECK_FAILURE = 352;
export const LIVE_SYSTEM_DUMP = 353;
export const KERNEL_AUTO_BOOST_INVALID_LOCK_RELEASE = 354;
export const WORKER_THREAD_TEST_CONDITION = 355;
export const WIN32K_CRITICAL_FAILURE = 356;
export const CLUSTER_CSV_STATUS_IO_TIMEOUT_LIVEDUMP = 357;
export const CLUSTER_RESOURCE_CALL_TIMEOUT_LIVEDUMP = 358;
export const CLUSTER_CSV_SNAPSHOT_DEVICE_INFO_TIMEOUT_LIVEDUMP = 359;
export const CLUSTER_CSV_STATE_TRANSITION_TIMEOUT_LIVEDUMP = 360;
export const CLUSTER_CSV_VOLUME_ARRIVAL_LIVEDUMP = 361;
export const CLUSTER_CSV_VOLUME_REMOVAL_LIVEDUMP = 362;
export const CLUSTER_CSV_CLUSTER_WATCHDOG_LIVEDUMP = 363;
export const INVALID_RUNDOWN_PROTECTION_FLAGS = 364;
export const INVALID_SLOT_ALLOCATOR_FLAGS = 365;
export const ERESOURCE_INVALID_RELEASE = 366;
export const CLUSTER_CSV_STATE_TRANSITION_INTERVAL_TIMEOUT_LIVEDUMP = 367;
export const CLUSTER_CSV_CLUSSVC_DISCONNECT_WATCHDOG = 368;
export const CRYPTO_LIBRARY_INTERNAL_ERROR = 369;
export const COREMSGCALL_INTERNAL_ERROR = 371;
export const COREMSG_INTERNAL_ERROR = 372;
export const PREVIOUS_FATAL_ABNORMAL_RESET_ERROR = 373;
export const ELAM_DRIVER_DETECTED_FATAL_ERROR = 376;
export const CLUSTER_CLUSPORT_STATUS_IO_TIMEOUT_LIVEDUMP = 377;
export const PROFILER_CONFIGURATION_ILLEGAL = 379;
export const PDC_LOCK_WATCHDOG_LIVEDUMP = 380;
export const PDC_UNEXPECTED_REVOCATION_LIVEDUMP = 381;
export const MICROCODE_REVISION_MISMATCH = 382;
export const HYPERGUARD_INITIALIZATION_FAILURE = 383;
export const WVR_LIVEDUMP_REPLICATION_IOCONTEXT_TIMEOUT = 384;
export const WVR_LIVEDUMP_STATE_TRANSITION_TIMEOUT = 385;
export const WVR_LIVEDUMP_RECOVERY_IOCONTEXT_TIMEOUT = 386;
export const WVR_LIVEDUMP_APP_IO_TIMEOUT = 387;
export const WVR_LIVEDUMP_MANUALLY_INITIATED = 388;
export const WVR_LIVEDUMP_STATE_FAILURE = 389;
export const WVR_LIVEDUMP_CRITICAL_ERROR = 390;
export const VIDEO_DWMINIT_TIMEOUT_FALLBACK_BDD = 391;
export const CLUSTER_CSVFS_LIVEDUMP = 392;
export const BAD_OBJECT_HEADER = 393;
export const SILO_CORRUPT = 394;
export const SECURE_KERNEL_ERROR = 395;
export const HYPERGUARD_VIOLATION = 396;
export const SECURE_FAULT_UNHANDLED = 397;
export const KERNEL_PARTITION_REFERENCE_VIOLATION = 398;
export const SYNTHETIC_EXCEPTION_UNHANDLED = 399;
export const WIN32K_CRITICAL_FAILURE_LIVEDUMP = 400;
export const PF_DETECTED_CORRUPTION = 401;
export const KERNEL_AUTO_BOOST_LOCK_ACQUISITION_WITH_RAISED_IRQL = 402;
export const VIDEO_DXGKRNL_LIVEDUMP = 403;
export const KERNEL_STORAGE_SLOT_IN_USE = 409;
export const SMB_SERVER_LIVEDUMP = 405;
export const LOADER_ROLLBACK_DETECTED = 406;
export const WIN32K_SECURITY_FAILURE = 407;
export const UFX_LIVEDUMP = 408;
export const WORKER_THREAD_RETURNED_WHILE_ATTACHED_TO_SILO = 410;
export const TTM_FATAL_ERROR = 411;
export const WIN32K_POWER_WATCHDOG_TIMEOUT = 412;
export const CLUSTER_SVHDX_LIVEDUMP = 413;
export const BUGCODE_NETADAPTER_DRIVER = 414;
export const PDC_PRIVILEGE_CHECK_LIVEDUMP = 415;
export const TTM_WATCHDOG_TIMEOUT = 416;
export const WIN32K_CALLOUT_WATCHDOG_LIVEDUMP = 417;
export const WIN32K_CALLOUT_WATCHDOG_BUGCHECK = 418;
export const CALL_HAS_NOT_RETURNED_WATCHDOG_TIMEOUT_LIVEDUMP = 419;
export const DRIPS_SW_HW_DIVERGENCE_LIVEDUMP = 420;
export const USB_DRIPS_BLOCKER_SURPRISE_REMOVAL_LIVEDUMP = 421;
export const BLUETOOTH_ERROR_RECOVERY_LIVEDUMP = 422;
export const SMB_REDIRECTOR_LIVEDUMP = 423;
export const VIDEO_DXGKRNL_BLACK_SCREEN_LIVEDUMP = 424;
export const DIRECTED_FX_TRANSITION_LIVEDUMP = 425;
export const EXCEPTION_ON_INVALID_STACK = 426;
export const UNWIND_ON_INVALID_STACK = 427;
export const VIDEO_MINIPORT_FAILED_LIVEDUMP = 432;
export const VIDEO_MINIPORT_BLACK_SCREEN_LIVEDUMP = 440;
export const DRIVER_VERIFIER_DETECTED_VIOLATION_LIVEDUMP = 452;
export const IO_THREADPOOL_DEADLOCK_LIVEDUMP = 453;
export const FAST_ERESOURCE_PRECONDITION_VIOLATION = 454;
export const STORE_DATA_STRUCTURE_CORRUPTION = 455;
export const MANUALLY_INITIATED_POWER_BUTTON_HOLD = 456;
export const USER_MODE_HEALTH_MONITOR_LIVEDUMP = 457;
export const SYNTHETIC_WATCHDOG_TIMEOUT = 458;
export const INVALID_SILO_DETACH = 459;
export const EXRESOURCE_TIMEOUT_LIVEDUMP = 460;
export const INVALID_CALLBACK_STACK_ADDRESS = 461;
export const INVALID_KERNEL_STACK_ADDRESS = 462;
export const HARDWARE_WATCHDOG_TIMEOUT = 463;
export const ACPI_FIRMWARE_WATCHDOG_TIMEOUT = 464;
export const TELEMETRY_ASSERTS_LIVEDUMP = 465;
export const WORKER_THREAD_INVALID_STATE = 466;
export const WFP_INVALID_OPERATION = 467;
export const UCMUCSI_LIVEDUMP = 468;
export const DRIVER_PNP_WATCHDOG = 469;
export const WORKER_THREAD_RETURNED_WITH_NON_DEFAULT_WORKLOAD_CLASS = 470;
export const EFS_FATAL_ERROR = 471;
export const UCMUCSI_FAILURE = 472;
export const HAL_IOMMU_INTERNAL_ERROR = 473;
export const HAL_BLOCKED_PROCESSOR_INTERNAL_ERROR = 474;
export const IPI_WATCHDOG_TIMEOUT = 475;
export const DMA_COMMON_BUFFER_VECTOR_ERROR = 476;
export const BUGCODE_MBBADAPTER_DRIVER = 477;
export const BUGCODE_WIFIADAPTER_DRIVER = 478;
export const PROCESSOR_START_TIMEOUT = 479;
export const INVALID_ALTERNATE_SYSTEM_CALL_HANDLER_REGISTRATION = 480;
export const DEVICE_DIAGNOSTIC_LOG_LIVEDUMP = 481;
export const AZURE_DEVICE_FW_DUMP = 482;
export const BREAKAWAY_CABLE_TRANSITION = 483;
export const VIDEO_DXGKRNL_SYSMM_FATAL_ERROR = 484;
export const DRIVER_VERIFIER_TRACKING_LIVE_DUMP = 485;
export const CRASHDUMP_WATCHDOG_TIMEOUT = 486;
export const REGISTRY_LIVE_DUMP = 487;
export const INVALID_THREAD_AFFINITY_STATE = 488;
export const ILLEGAL_ATS_INITIALIZATION = 489;
export const SECURE_PCI_CONFIG_SPACE_ACCESS_VIOLATION = 490;
export const DAM_WATCHDOG_TIMEOUT = 491;
export const XBOX_VMCTRL_CS_TIMEOUT = 854;
export const XBOX_CORRUPTED_IMAGE = 855;
export const XBOX_INVERTED_FUNCTION_TABLE_OVERFLOW = 856;
export const XBOX_CORRUPTED_IMAGE_BASE = 857;
export const XBOX_XDS_WATCHDOG_TIMEOUT = 858;
export const XBOX_SHUTDOWN_WATCHDOG_TIMEOUT = 859;
export const XBOX_360_SYSTEM_CRASH = 864;
export const XBOX_360_SYSTEM_CRASH_RESERVED = 1056;
export const XBOX_SECURITY_FAILUE = 1057;
export const KERNEL_CFG_INIT_FAILURE = 1058;
export const MANUALLY_INITIATED_POWER_BUTTON_HOLD_LIVE_DUMP = 4552;
export const HYPERVISOR_ERROR = 131073;
export const WINLOGON_FATAL_ERROR = 3221226010;
export const MANUALLY_INITIATED_CRASH1 = 3735936685;
export const BUGCHECK_CONTEXT_MODIFIER = 2147483648;
export const FACILITY_NULL = 0;
export const FACILITY_RPC = 1;
export const FACILITY_DISPATCH = 2;
export const FACILITY_STORAGE = 3;
export const FACILITY_ITF = 4;
export const FACILITY_WIN32 = 7;
export const FACILITY_WINDOWS = 8;
export const FACILITY_SSPI = 9;
export const FACILITY_SECURITY = 9;
export const FACILITY_CONTROL = 10;
export const FACILITY_CERT = 11;
export const FACILITY_INTERNET = 12;
export const FACILITY_MEDIASERVER = 13;
export const FACILITY_MSMQ = 14;
export const FACILITY_SETUPAPI = 15;
export const FACILITY_SCARD = 16;
export const FACILITY_COMPLUS = 17;
export const FACILITY_AAF = 18;
export const FACILITY_URT = 19;
export const FACILITY_ACS = 20;
export const FACILITY_DPLAY = 21;
export const FACILITY_UMI = 22;
export const FACILITY_SXS = 23;
export const FACILITY_WINDOWS_CE = 24;
export const FACILITY_HTTP = 25;
export const FACILITY_USERMODE_COMMONLOG = 26;
export const FACILITY_WER = 27;
export const FACILITY_USERMODE_FILTER_MANAGER = 31;
export const FACILITY_BACKGROUNDCOPY = 32;
export const FACILITY_CONFIGURATION = 33;
export const FACILITY_WIA = 33;
export const FACILITY_STATE_MANAGEMENT = 34;
export const FACILITY_METADIRECTORY = 35;
export const FACILITY_WINDOWSUPDATE = 36;
export const FACILITY_DIRECTORYSERVICE = 37;
export const FACILITY_GRAPHICS = 38;
export const FACILITY_SHELL = 39;
export const FACILITY_NAP = 39;
export const FACILITY_TPM_SERVICES = 40;
export const FACILITY_TPM_SOFTWARE = 41;
export const FACILITY_UI = 42;
export const FACILITY_XAML = 43;
export const FACILITY_ACTION_QUEUE = 44;
export const FACILITY_PLA = 48;
export const FACILITY_WINDOWS_SETUP = 48;
export const FACILITY_FVE = 49;
export const FACILITY_FWP = 50;
export const FACILITY_WINRM = 51;
export const FACILITY_NDIS = 52;
export const FACILITY_USERMODE_HYPERVISOR = 53;
export const FACILITY_CMI = 54;
export const FACILITY_USERMODE_VIRTUALIZATION = 55;
export const FACILITY_USERMODE_VOLMGR = 56;
export const FACILITY_BCD = 57;
export const FACILITY_USERMODE_VHD = 58;
export const FACILITY_USERMODE_HNS = 59;
export const FACILITY_SDIAG = 60;
export const FACILITY_WEBSERVICES = 61;
export const FACILITY_WINPE = 61;
export const FACILITY_WPN = 62;
export const FACILITY_WINDOWS_STORE = 63;
export const FACILITY_INPUT = 64;
export const FACILITY_QUIC = 65;
export const FACILITY_EAP = 66;
export const FACILITY_IORING = 70;
export const FACILITY_WINDOWS_DEFENDER = 80;
export const FACILITY_OPC = 81;
export const FACILITY_XPS = 82;
export const FACILITY_MBN = 84;
export const FACILITY_POWERSHELL = 84;
export const FACILITY_RAS = 83;
export const FACILITY_P2P_INT = 98;
export const FACILITY_P2P = 99;
export const FACILITY_DAF = 100;
export const FACILITY_BLUETOOTH_ATT = 101;
export const FACILITY_AUDIO = 102;
export const FACILITY_STATEREPOSITORY = 103;
export const FACILITY_VISUALCPP = 109;
export const FACILITY_SCRIPT = 112;
export const FACILITY_PARSE = 113;
export const FACILITY_BLB = 120;
export const FACILITY_BLB_CLI = 121;
export const FACILITY_WSBAPP = 122;
export const FACILITY_BLBUI = 128;
export const FACILITY_USN = 129;
export const FACILITY_USERMODE_VOLSNAP = 130;
export const FACILITY_TIERING = 131;
export const FACILITY_WSB_ONLINE = 133;
export const FACILITY_ONLINE_ID = 134;
export const FACILITY_DEVICE_UPDATE_AGENT = 135;
export const FACILITY_DRVSERVICING = 136;
export const FACILITY_DLS = 153;
export const FACILITY_DELIVERY_OPTIMIZATION = 208;
export const FACILITY_USERMODE_SPACES = 231;
export const FACILITY_USER_MODE_SECURITY_CORE = 232;
export const FACILITY_USERMODE_LICENSING = 234;
export const FACILITY_SOS = 160;
export const FACILITY_OCP_UPDATE_AGENT = 173;
export const FACILITY_DEBUGGERS = 176;
export const FACILITY_SPP = 256;
export const FACILITY_RESTORE = 256;
export const FACILITY_DMSERVER = 256;
export const FACILITY_DEPLOYMENT_SERVICES_SERVER = 257;
export const FACILITY_DEPLOYMENT_SERVICES_IMAGING = 258;
export const FACILITY_DEPLOYMENT_SERVICES_MANAGEMENT = 259;
export const FACILITY_DEPLOYMENT_SERVICES_UTIL = 260;
export const FACILITY_DEPLOYMENT_SERVICES_BINLSVC = 261;
export const FACILITY_DEPLOYMENT_SERVICES_PXE = 263;
export const FACILITY_DEPLOYMENT_SERVICES_TFTP = 264;
export const FACILITY_DEPLOYMENT_SERVICES_TRANSPORT_MANAGEMENT = 272;
export const FACILITY_DEPLOYMENT_SERVICES_DRIVER_PROVISIONING = 278;
export const FACILITY_DEPLOYMENT_SERVICES_MULTICAST_SERVER = 289;
export const FACILITY_DEPLOYMENT_SERVICES_MULTICAST_CLIENT = 290;
export const FACILITY_DEPLOYMENT_SERVICES_CONTENT_PROVIDER = 293;
export const FACILITY_HSP_SERVICES = 296;
export const FACILITY_HSP_SOFTWARE = 297;
export const FACILITY_LINGUISTIC_SERVICES = 305;
export const FACILITY_AUDIOSTREAMING = 1094;
export const FACILITY_TTD = 1490;
export const FACILITY_ACCELERATOR = 1536;
export const FACILITY_WMAAECMA = 1996;
export const FACILITY_DIRECTMUSIC = 2168;
export const FACILITY_DIRECT3D10 = 2169;
export const FACILITY_DXGI = 2170;
export const FACILITY_DXGI_DDI = 2171;
export const FACILITY_DIRECT3D11 = 2172;
export const FACILITY_DIRECT3D11_DEBUG = 2173;
export const FACILITY_DIRECT3D12 = 2174;
export const FACILITY_DIRECT3D12_DEBUG = 2175;
export const FACILITY_DXCORE = 2176;
export const FACILITY_PRESENTATION = 2177;
export const FACILITY_LEAP = 2184;
export const FACILITY_AUDCLNT = 2185;
export const FACILITY_WINCODEC_DWRITE_DWM = 2200;
export const FACILITY_WINML = 2192;
export const FACILITY_DIRECT2D = 2201;
export const FACILITY_DEFRAG = 2304;
export const FACILITY_USERMODE_SDBUS = 2305;
export const FACILITY_JSCRIPT = 2306;
export const FACILITY_PIDGENX = 2561;
export const FACILITY_EAS = 85;
export const FACILITY_WEB = 885;
export const FACILITY_WEB_SOCKET = 886;
export const FACILITY_MOBILE = 1793;
export const FACILITY_SQLITE = 1967;
export const FACILITY_SERVICE_FABRIC = 1968;
export const FACILITY_UTC = 1989;
export const FACILITY_WEP = 2049;
export const FACILITY_SYNCENGINE = 2050;
export const FACILITY_XBOX = 2339;
export const FACILITY_GAME = 2340;
export const FACILITY_PIX = 2748;
export const FACILITY_NT_BIT = 268435456;
export const SEM_ALL_ERRORS = 0;
export const SEM_FAILCRITICALERRORS = 1;
export const SEM_NOGPFAULTERRORBOX = 2;
export const SEM_NOOPENFILEERRORBOX = 32768;
export const SEM_NOALIGNMENTFAULTEXCEPT = 4;
export const FORMAT_MESSAGE_ALLOCATE_BUFFER = 256;
export const FORMAT_MESSAGE_ARGUMENT_ARRAY = 8192;
export const FORMAT_MESSAGE_FROM_HMODULE = 2048;
export const FORMAT_MESSAGE_FROM_STRING = 1024;
export const FORMAT_MESSAGE_FROM_SYSTEM = 4096;
export const FORMAT_MESSAGE_IGNORE_INSERTS = 512;
export const UNW_FLAG_NHANDLER = 0;
export const UNW_FLAG_EHANDLER = 1;
export const UNW_FLAG_UHANDLER = 2;
export const UNW_FLAG_CHAININFO = 4;
export const WCT_ASYNC_OPEN_FLAG = 1;
export const SYMSTOREOPT_COMPRESS = 1;
export const SYMSTOREOPT_OVERWRITE = 2;
export const SYMSTOREOPT_PASS_IF_EXISTS = 64;
export const SYMSTOREOPT_POINTER = 8;
export const SYMSTOREOPT_RETURNINDEX = 4;
export const PROCESSOR_ARCHITECTURE_AMD64 = 9;
export const PROCESSOR_ARCHITECTURE_IA64 = 6;
export const PROCESSOR_ARCHITECTURE_INTEL = 0;
export const PROCESSOR_ARCHITECTURE_ARM = 5;
export const PROCESSOR_ARCHITECTURE_UNKNOWN = 65535;
export const IMAGE_DIRECTORY_ENTRY_ARCHITECTURE = 7;
export const IMAGE_DIRECTORY_ENTRY_BASERELOC = 5;
export const IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT = 11;
export const IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR = 14;
export const IMAGE_DIRECTORY_ENTRY_DEBUG = 6;
export const IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT = 13;
export const IMAGE_DIRECTORY_ENTRY_EXCEPTION = 3;
export const IMAGE_DIRECTORY_ENTRY_EXPORT = 0;
export const IMAGE_DIRECTORY_ENTRY_GLOBALPTR = 8;
export const IMAGE_DIRECTORY_ENTRY_IAT = 12;
export const IMAGE_DIRECTORY_ENTRY_IMPORT = 1;
export const IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG = 10;
export const IMAGE_DIRECTORY_ENTRY_RESOURCE = 2;
export const IMAGE_DIRECTORY_ENTRY_SECURITY = 4;
export const IMAGE_DIRECTORY_ENTRY_TLS = 9;
export const WCT_OUT_OF_PROC_COM_FLAG = 2;
export const WCT_OUT_OF_PROC_CS_FLAG = 4;
export const WCT_OUT_OF_PROC_FLAG = 1;
export const SSRVOPT_DWORD = 2;
export const SSRVOPT_DWORDPTR = 4;
export const SSRVOPT_GUIDPTR = 8;
export const IMAGE_FILE_RELOCS_STRIPPED = 1;
export const IMAGE_FILE_EXECUTABLE_IMAGE = 2;
export const IMAGE_FILE_LINE_NUMS_STRIPPED = 4;
export const IMAGE_FILE_LOCAL_SYMS_STRIPPED = 8;
export const IMAGE_FILE_AGGRESIVE_WS_TRIM = 16;
export const IMAGE_FILE_LARGE_ADDRESS_AWARE = 32;
export const IMAGE_FILE_BYTES_REVERSED_LO = 128;
export const IMAGE_FILE_32BIT_MACHINE = 256;
export const IMAGE_FILE_DEBUG_STRIPPED = 512;
export const IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP = 1024;
export const IMAGE_FILE_NET_RUN_FROM_SWAP = 2048;
export const IMAGE_FILE_SYSTEM = 4096;
export const IMAGE_FILE_DLL = 8192;
export const IMAGE_FILE_UP_SYSTEM_ONLY = 16384;
export const IMAGE_FILE_BYTES_REVERSED_HI = 32768;
export const IMAGE_FILE_RELOCS_STRIPPED2 = 1;
export const IMAGE_FILE_EXECUTABLE_IMAGE2 = 2;
export const IMAGE_FILE_LINE_NUMS_STRIPPED2 = 4;
export const IMAGE_FILE_LOCAL_SYMS_STRIPPED2 = 8;
export const IMAGE_FILE_AGGRESIVE_WS_TRIM2 = 16;
export const IMAGE_FILE_LARGE_ADDRESS_AWARE2 = 32;
export const IMAGE_FILE_BYTES_REVERSED_LO2 = 128;
export const IMAGE_FILE_32BIT_MACHINE2 = 256;
export const IMAGE_FILE_DEBUG_STRIPPED2 = 512;
export const IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP2 = 1024;
export const IMAGE_FILE_NET_RUN_FROM_SWAP2 = 2048;
export const IMAGE_FILE_SYSTEM_2 = 4096;
export const IMAGE_FILE_DLL_2 = 8192;
export const IMAGE_FILE_UP_SYSTEM_ONLY_2 = 16384;
export const IMAGE_FILE_BYTES_REVERSED_HI_2 = 32768;
export const SYMFLAG_CLR_TOKEN = 262144;
export const SYMFLAG_CONSTANT = 256;
export const SYMFLAG_EXPORT = 512;
export const SYMFLAG_FORWARDER = 1024;
export const SYMFLAG_FRAMEREL = 32;
export const SYMFLAG_FUNCTION = 2048;
export const SYMFLAG_ILREL = 65536;
export const SYMFLAG_LOCAL = 128;
export const SYMFLAG_METADATA = 131072;
export const SYMFLAG_PARAMETER = 64;
export const SYMFLAG_REGISTER = 8;
export const SYMFLAG_REGREL = 16;
export const SYMFLAG_SLOT = 32768;
export const SYMFLAG_THUNK = 8192;
export const SYMFLAG_TLSREL = 16384;
export const SYMFLAG_VALUEPRESENT = 1;
export const SYMFLAG_VIRTUAL = 4096;
export const sevInfo = 0;
export const sevProblem = 1;
export const sevAttn = 2;
export const sevFatal = 3;
export const IMAGEHLP_GET_TYPE_INFO_CHILDREN = 2;
export const IMAGEHLP_GET_TYPE_INFO_UNCACHED = 1;
export const SLE_ERROR = 1;
export const SLE_MINORERROR = 2;
export const SLE_WARNING = 3;
export const VER_PLATFORM_WIN32s = 0;
export const VER_PLATFORM_WIN32_WINDOWS = 1;
export const VER_PLATFORM_WIN32_NT = 2;
export const IMAGE_DEBUG_TYPE_UNKNOWN = 0;
export const IMAGE_DEBUG_TYPE_COFF = 1;
export const IMAGE_DEBUG_TYPE_CODEVIEW = 2;
export const IMAGE_DEBUG_TYPE_FPO = 3;
export const IMAGE_DEBUG_TYPE_MISC = 4;
export const IMAGE_DEBUG_TYPE_EXCEPTION = 5;
export const IMAGE_DEBUG_TYPE_FIXUP = 6;
export const IMAGE_DEBUG_TYPE_BORLAND = 9;
export const MINIDUMP_THREAD_INFO_ERROR_THREAD = 1;
export const MINIDUMP_THREAD_INFO_EXITED_THREAD = 4;
export const MINIDUMP_THREAD_INFO_INVALID_CONTEXT = 16;
export const MINIDUMP_THREAD_INFO_INVALID_INFO = 8;
export const MINIDUMP_THREAD_INFO_INVALID_TEB = 32;
export const MINIDUMP_THREAD_INFO_WRITING_THREAD = 2;
export const CREATE_PROCESS_DEBUG_EVENT = 3;
export const CREATE_THREAD_DEBUG_EVENT = 2;
export const EXCEPTION_DEBUG_EVENT = 1;
export const EXIT_PROCESS_DEBUG_EVENT = 5;
export const EXIT_THREAD_DEBUG_EVENT = 4;
export const LOAD_DLL_DEBUG_EVENT = 6;
export const OUTPUT_DEBUG_STRING_EVENT = 8;
export const RIP_EVENT = 9;
export const UNLOAD_DLL_DEBUG_EVENT = 7;
export const MINIDUMP_MISC1_PROCESS_ID = 1;
export const MINIDUMP_MISC1_PROCESS_TIMES = 2;
export const DBHHEADER_DEBUGDIRS = 1;
export const DBHHEADER_CVMISC = 2;
export const WOW64_CONTEXT_i386 = 65536;
export const WOW64_CONTEXT_i486 = 65536;
export const WOW64_CONTEXT_EXCEPTION_ACTIVE = 134217728;
export const WOW64_CONTEXT_SERVICE_ACTIVE = 268435456;
export const WOW64_CONTEXT_EXCEPTION_REQUEST = 1073741824;
export const WOW64_CONTEXT_EXCEPTION_REPORTING = 2147483648;
export const WOW64_SIZE_OF_80387_REGISTERS = 80;
export const WOW64_MAXIMUM_SUPPORTED_EXTENSION = 512;
export const ERROR_DBG_CANCELLED = 3221226695;
export const ERROR_DBG_TIMEOUT = 3221226932;
export const DEBUG_GET_TEXT_COMPLETIONS_NO_DOT_COMMANDS = 1;
export const DEBUG_GET_TEXT_COMPLETIONS_NO_EXTENSION_COMMANDS = 2;
export const DEBUG_GET_TEXT_COMPLETIONS_NO_SYMBOLS = 4;
export const DEBUG_GET_TEXT_COMPLETIONS_IS_DOT_COMMAND = 1;
export const DEBUG_GET_TEXT_COMPLETIONS_IS_EXTENSION_COMMAND = 2;
export const DEBUG_GET_TEXT_COMPLETIONS_IS_SYMBOL = 4;
export const DEBUG_REQUEST_SOURCE_PATH_HAS_SOURCE_SERVER = 0;
export const DEBUG_REQUEST_TARGET_EXCEPTION_CONTEXT = 1;
export const DEBUG_REQUEST_TARGET_EXCEPTION_THREAD = 2;
export const DEBUG_REQUEST_TARGET_EXCEPTION_RECORD = 3;
export const DEBUG_REQUEST_GET_ADDITIONAL_CREATE_OPTIONS = 4;
export const DEBUG_REQUEST_SET_ADDITIONAL_CREATE_OPTIONS = 5;
export const DEBUG_REQUEST_GET_WIN32_MAJOR_MINOR_VERSIONS = 6;
export const DEBUG_REQUEST_READ_USER_MINIDUMP_STREAM = 7;
export const DEBUG_REQUEST_TARGET_CAN_DETACH = 8;
export const DEBUG_REQUEST_SET_LOCAL_IMPLICIT_COMMAND_LINE = 9;
export const DEBUG_REQUEST_GET_CAPTURED_EVENT_CODE_OFFSET = 10;
export const DEBUG_REQUEST_READ_CAPTURED_EVENT_CODE_STREAM = 11;
export const DEBUG_REQUEST_EXT_TYPED_DATA_ANSI = 12;
export const DEBUG_REQUEST_GET_EXTENSION_SEARCH_PATH_WIDE = 13;
export const DEBUG_REQUEST_GET_TEXT_COMPLETIONS_WIDE = 14;
export const DEBUG_REQUEST_GET_CACHED_SYMBOL_INFO = 15;
export const DEBUG_REQUEST_ADD_CACHED_SYMBOL_INFO = 16;
export const DEBUG_REQUEST_REMOVE_CACHED_SYMBOL_INFO = 17;
export const DEBUG_REQUEST_GET_TEXT_COMPLETIONS_ANSI = 18;
export const DEBUG_REQUEST_CURRENT_OUTPUT_CALLBACKS_ARE_DML_AWARE = 19;
export const DEBUG_REQUEST_GET_OFFSET_UNWIND_INFORMATION = 20;
export const DEBUG_REQUEST_GET_DUMP_HEADER = 21;
export const DEBUG_REQUEST_SET_DUMP_HEADER = 22;
export const DEBUG_REQUEST_MIDORI = 23;
export const DEBUG_REQUEST_PROCESS_DESCRIPTORS = 24;
export const DEBUG_REQUEST_MISC_INFORMATION = 25;
export const DEBUG_REQUEST_OPEN_PROCESS_TOKEN = 26;
export const DEBUG_REQUEST_OPEN_THREAD_TOKEN = 27;
export const DEBUG_REQUEST_DUPLICATE_TOKEN = 28;
export const DEBUG_REQUEST_QUERY_INFO_TOKEN = 29;
export const DEBUG_REQUEST_CLOSE_TOKEN = 30;
export const DEBUG_REQUEST_WOW_PROCESS = 31;
export const DEBUG_REQUEST_WOW_MODULE = 32;
export const DEBUG_LIVE_USER_NON_INVASIVE = 33;
export const DEBUG_REQUEST_RESUME_THREAD = 34;
export const DEBUG_REQUEST_INLINE_QUERY = 35;
export const DEBUG_REQUEST_TL_INSTRUMENTATION_AWARE = 36;
export const DEBUG_REQUEST_GET_INSTRUMENTATION_VERSION = 37;
export const DEBUG_REQUEST_GET_MODULE_ARCHITECTURE = 38;
export const DEBUG_SRCFILE_SYMBOL_TOKEN = 0;
export const DEBUG_SRCFILE_SYMBOL_TOKEN_SOURCE_COMMAND_WIDE = 1;
export const DEBUG_SRCFILE_SYMBOL_CHECKSUMINFO = 2;
export const DEBUG_SYMINFO_BREAKPOINT_SOURCE_LINE = 0;
export const DEBUG_SYMINFO_IMAGEHLP_MODULEW64 = 1;
export const DEBUG_SYMINFO_GET_SYMBOL_NAME_BY_OFFSET_AND_TAG_WIDE = 2;
export const DEBUG_SYMINFO_GET_MODULE_SYMBOL_NAMES_AND_OFFSETS = 3;
export const DEBUG_SYSOBJINFO_THREAD_BASIC_INFORMATION = 0;
export const DEBUG_SYSOBJINFO_THREAD_NAME_WIDE = 1;
export const DEBUG_SYSOBJINFO_CURRENT_PROCESS_COOKIE = 2;
export const DEBUG_TBINFO_EXIT_STATUS = 1;
export const DEBUG_TBINFO_PRIORITY_CLASS = 2;
export const DEBUG_TBINFO_PRIORITY = 4;
export const DEBUG_TBINFO_TIMES = 8;
export const DEBUG_TBINFO_START_OFFSET = 16;
export const DEBUG_TBINFO_AFFINITY = 32;
export const DEBUG_TBINFO_ALL = 63;
export const DEBUG_BREAKPOINT_CODE = 0;
export const DEBUG_BREAKPOINT_DATA = 1;
export const DEBUG_BREAKPOINT_TIME = 2;
export const DEBUG_BREAKPOINT_INLINE = 3;
export const DEBUG_BREAKPOINT_GO_ONLY = 1;
export const DEBUG_BREAKPOINT_DEFERRED = 2;
export const DEBUG_BREAKPOINT_ENABLED = 4;
export const DEBUG_BREAKPOINT_ADDER_ONLY = 8;
export const DEBUG_BREAKPOINT_ONE_SHOT = 16;
export const DEBUG_BREAK_READ = 1;
export const DEBUG_BREAK_WRITE = 2;
export const DEBUG_BREAK_EXECUTE = 4;
export const DEBUG_BREAK_IO = 8;
export const DEBUG_ATTACH_KERNEL_CONNECTION = 0;
export const DEBUG_ATTACH_LOCAL_KERNEL = 1;
export const DEBUG_ATTACH_EXDI_DRIVER = 2;
export const DEBUG_ATTACH_INSTALL_DRIVER = 4;
export const DEBUG_GET_PROC_DEFAULT = 0;
export const DEBUG_GET_PROC_FULL_MATCH = 1;
export const DEBUG_GET_PROC_ONLY_MATCH = 2;
export const DEBUG_GET_PROC_SERVICE_NAME = 4;
export const DEBUG_PROC_DESC_DEFAULT = 0;
export const DEBUG_PROC_DESC_NO_PATHS = 1;
export const DEBUG_PROC_DESC_NO_SERVICES = 2;
export const DEBUG_PROC_DESC_NO_MTS_PACKAGES = 4;
export const DEBUG_PROC_DESC_NO_COMMAND_LINE = 8;
export const DEBUG_PROC_DESC_NO_SESSION_ID = 16;
export const DEBUG_PROC_DESC_NO_USER_NAME = 32;
export const DEBUG_PROC_DESC_WITH_PACKAGEFAMILY = 64;
export const DEBUG_ATTACH_DEFAULT = 0;
export const DEBUG_ATTACH_NONINVASIVE = 1;
export const DEBUG_ATTACH_EXISTING = 2;
export const DEBUG_ATTACH_NONINVASIVE_NO_SUSPEND = 4;
export const DEBUG_ATTACH_INVASIVE_NO_INITIAL_BREAK = 8;
export const DEBUG_ATTACH_INVASIVE_RESUME_PROCESS = 16;
export const DEBUG_ATTACH_NONINVASIVE_ALLOW_PARTIAL = 32;
export const DEBUG_ECREATE_PROCESS_DEFAULT = 0;
export const DEBUG_ECREATE_PROCESS_INHERIT_HANDLES = 1;
export const DEBUG_ECREATE_PROCESS_USE_VERIFIER_FLAGS = 2;
export const DEBUG_ECREATE_PROCESS_USE_IMPLICIT_COMMAND_LINE = 4;
export const DEBUG_PROCESS_DETACH_ON_EXIT = 1;
export const DEBUG_PROCESS_ONLY_THIS_PROCESS = 2;
export const DEBUG_CONNECT_SESSION_DEFAULT = 0;
export const DEBUG_CONNECT_SESSION_NO_VERSION = 1;
export const DEBUG_CONNECT_SESSION_NO_ANNOUNCE = 2;
export const DEBUG_SERVERS_DEBUGGER = 1;
export const DEBUG_SERVERS_PROCESS = 2;
export const DEBUG_SERVERS_ALL = 3;
export const DEBUG_END_PASSIVE = 0;
export const DEBUG_END_ACTIVE_TERMINATE = 1;
export const DEBUG_END_ACTIVE_DETACH = 2;
export const DEBUG_END_REENTRANT = 3;
export const DEBUG_END_DISCONNECT = 4;
export const DEBUG_OUTPUT_NORMAL = 1;
export const DEBUG_OUTPUT_ERROR = 2;
export const DEBUG_OUTPUT_WARNING = 4;
export const DEBUG_OUTPUT_VERBOSE = 8;
export const DEBUG_OUTPUT_PROMPT = 16;
export const DEBUG_OUTPUT_PROMPT_REGISTERS = 32;
export const DEBUG_OUTPUT_EXTENSION_WARNING = 64;
export const DEBUG_OUTPUT_DEBUGGEE = 128;
export const DEBUG_OUTPUT_DEBUGGEE_PROMPT = 256;
export const DEBUG_OUTPUT_SYMBOLS = 512;
export const DEBUG_OUTPUT_STATUS = 1024;
export const DEBUG_OUTPUT_XML = 2048;
export const DEBUG_IOUTPUT_KD_PROTOCOL = 2147483648;
export const DEBUG_IOUTPUT_REMOTING = 1073741824;
export const DEBUG_IOUTPUT_BREAKPOINT = 536870912;
export const DEBUG_IOUTPUT_EVENT = 268435456;
export const DEBUG_IOUTPUT_ADDR_TRANSLATE = 134217728;
export const DEBUG_OUTPUT_IDENTITY_DEFAULT = 0;
export const DEBUG_CLIENT_UNKNOWN = 0;
export const DEBUG_CLIENT_VSINT = 1;
export const DEBUG_CLIENT_NTSD = 2;
export const DEBUG_CLIENT_NTKD = 3;
export const DEBUG_CLIENT_CDB = 4;
export const DEBUG_CLIENT_KD = 5;
export const DEBUG_CLIENT_WINDBG = 6;
export const DEBUG_CLIENT_WINIDE = 7;
export const DEBUG_FORMAT_DEFAULT = 0;
export const DEBUG_FORMAT_CAB_SECONDARY_ALL_IMAGES = 268435456;
export const DEBUG_FORMAT_WRITE_CAB = 536870912;
export const DEBUG_FORMAT_CAB_SECONDARY_FILES = 1073741824;
export const DEBUG_FORMAT_NO_OVERWRITE = 2147483648;
export const DEBUG_FORMAT_USER_SMALL_FULL_MEMORY = 1;
export const DEBUG_FORMAT_USER_SMALL_HANDLE_DATA = 2;
export const DEBUG_FORMAT_USER_SMALL_UNLOADED_MODULES = 4;
export const DEBUG_FORMAT_USER_SMALL_INDIRECT_MEMORY = 8;
export const DEBUG_FORMAT_USER_SMALL_DATA_SEGMENTS = 16;
export const DEBUG_FORMAT_USER_SMALL_FILTER_MEMORY = 32;
export const DEBUG_FORMAT_USER_SMALL_FILTER_PATHS = 64;
export const DEBUG_FORMAT_USER_SMALL_PROCESS_THREAD_DATA = 128;
export const DEBUG_FORMAT_USER_SMALL_PRIVATE_READ_WRITE_MEMORY = 256;
export const DEBUG_FORMAT_USER_SMALL_NO_OPTIONAL_DATA = 512;
export const DEBUG_FORMAT_USER_SMALL_FULL_MEMORY_INFO = 1024;
export const DEBUG_FORMAT_USER_SMALL_THREAD_INFO = 2048;
export const DEBUG_FORMAT_USER_SMALL_CODE_SEGMENTS = 4096;
export const DEBUG_FORMAT_USER_SMALL_NO_AUXILIARY_STATE = 8192;
export const DEBUG_FORMAT_USER_SMALL_FULL_AUXILIARY_STATE = 16384;
export const DEBUG_FORMAT_USER_SMALL_MODULE_HEADERS = 32768;
export const DEBUG_FORMAT_USER_SMALL_FILTER_TRIAGE = 65536;
export const DEBUG_FORMAT_USER_SMALL_ADD_AVX_XSTATE_CONTEXT = 131072;
export const DEBUG_FORMAT_USER_SMALL_IPT_TRACE = 262144;
export const DEBUG_FORMAT_USER_SMALL_IGNORE_INACCESSIBLE_MEM = 134217728;
export const DEBUG_FORMAT_USER_SMALL_SCAN_PARTIAL_PAGES = 268435456;
export const DEBUG_DUMP_FILE_BASE = 4294967295;
export const DEBUG_DUMP_FILE_PAGE_FILE_DUMP = 0;
export const DEBUG_DUMP_FILE_LOAD_FAILED_INDEX = 4294967295;
export const DEBUG_DUMP_FILE_ORIGINAL_CAB_INDEX = 4294967294;
export const DEBUG_STATUS_NO_CHANGE = 0;
export const DEBUG_STATUS_GO = 1;
export const DEBUG_STATUS_GO_HANDLED = 2;
export const DEBUG_STATUS_GO_NOT_HANDLED = 3;
export const DEBUG_STATUS_STEP_OVER = 4;
export const DEBUG_STATUS_STEP_INTO = 5;
export const DEBUG_STATUS_BREAK = 6;
export const DEBUG_STATUS_NO_DEBUGGEE = 7;
export const DEBUG_STATUS_STEP_BRANCH = 8;
export const DEBUG_STATUS_IGNORE_EVENT = 9;
export const DEBUG_STATUS_RESTART_REQUESTED = 10;
export const DEBUG_STATUS_REVERSE_GO = 11;
export const DEBUG_STATUS_REVERSE_STEP_BRANCH = 12;
export const DEBUG_STATUS_REVERSE_STEP_OVER = 13;
export const DEBUG_STATUS_REVERSE_STEP_INTO = 14;
export const DEBUG_STATUS_OUT_OF_SYNC = 15;
export const DEBUG_STATUS_WAIT_INPUT = 16;
export const DEBUG_STATUS_TIMEOUT = 17;
export const DEBUG_STATUS_MASK = 31;
export const DEBUG_STATUS_INSIDE_WAIT = 4294967296;
export const DEBUG_STATUS_WAIT_TIMEOUT = 8589934592;
export const DEBUG_OUTCTL_THIS_CLIENT = 0;
export const DEBUG_OUTCTL_ALL_CLIENTS = 1;
export const DEBUG_OUTCTL_ALL_OTHER_CLIENTS = 2;
export const DEBUG_OUTCTL_IGNORE = 3;
export const DEBUG_OUTCTL_LOG_ONLY = 4;
export const DEBUG_OUTCTL_SEND_MASK = 7;
export const DEBUG_OUTCTL_NOT_LOGGED = 8;
export const DEBUG_OUTCTL_OVERRIDE_MASK = 16;
export const DEBUG_OUTCTL_DML = 32;
export const DEBUG_OUTCTL_AMBIENT_DML = 4294967294;
export const DEBUG_OUTCTL_AMBIENT_TEXT = 4294967295;
export const DEBUG_OUTCTL_AMBIENT = 4294967295;
export const DEBUG_INTERRUPT_ACTIVE = 0;
export const DEBUG_INTERRUPT_PASSIVE = 1;
export const DEBUG_INTERRUPT_EXIT = 2;
export const DEBUG_CURRENT_DEFAULT = 15;
export const DEBUG_CURRENT_SYMBOL = 1;
export const DEBUG_CURRENT_DISASM = 2;
export const DEBUG_CURRENT_REGISTERS = 4;
export const DEBUG_CURRENT_SOURCE_LINE = 8;
export const DEBUG_DISASM_EFFECTIVE_ADDRESS = 1;
export const DEBUG_DISASM_MATCHING_SYMBOLS = 2;
export const DEBUG_DISASM_SOURCE_LINE_NUMBER = 4;
export const DEBUG_DISASM_SOURCE_FILE_NAME = 8;
export const DEBUG_LEVEL_SOURCE = 0;
export const DEBUG_LEVEL_ASSEMBLY = 1;
export const DEBUG_ENGOPT_IGNORE_DBGHELP_VERSION = 1;
export const DEBUG_ENGOPT_IGNORE_EXTENSION_VERSIONS = 2;
export const DEBUG_ENGOPT_ALLOW_NETWORK_PATHS = 4;
export const DEBUG_ENGOPT_DISALLOW_NETWORK_PATHS = 8;
export const DEBUG_ENGOPT_IGNORE_LOADER_EXCEPTIONS = 16;
export const DEBUG_ENGOPT_INITIAL_BREAK = 32;
export const DEBUG_ENGOPT_INITIAL_MODULE_BREAK = 64;
export const DEBUG_ENGOPT_FINAL_BREAK = 128;
export const DEBUG_ENGOPT_NO_EXECUTE_REPEAT = 256;
export const DEBUG_ENGOPT_FAIL_INCOMPLETE_INFORMATION = 512;
export const DEBUG_ENGOPT_ALLOW_READ_ONLY_BREAKPOINTS = 1024;
export const DEBUG_ENGOPT_SYNCHRONIZE_BREAKPOINTS = 2048;
export const DEBUG_ENGOPT_DISALLOW_SHELL_COMMANDS = 4096;
export const DEBUG_ENGOPT_KD_QUIET_MODE = 8192;
export const DEBUG_ENGOPT_DISABLE_MANAGED_SUPPORT = 16384;
export const DEBUG_ENGOPT_DISABLE_MODULE_SYMBOL_LOAD = 32768;
export const DEBUG_ENGOPT_DISABLE_EXECUTION_COMMANDS = 65536;
export const DEBUG_ENGOPT_DISALLOW_IMAGE_FILE_MAPPING = 131072;
export const DEBUG_ENGOPT_PREFER_DML = 262144;
export const DEBUG_ENGOPT_DISABLESQM = 524288;
export const DEBUG_ENGOPT_DISABLE_STEPLINES_OPTIONS = 2097152;
export const DEBUG_ENGOPT_DEBUGGING_SENSITIVE_DATA = 4194304;
export const DEBUG_ENGOPT_PREFER_TRACE_FILES = 8388608;
export const DEBUG_ENGOPT_ALL = 15728639;
export const DEBUG_ANY_ID = 4294967295;
export const DBG_FRAME_DEFAULT = 0;
export const DBG_FRAME_IGNORE_INLINE = 4294967295;
export const STACK_FRAME_TYPE_INIT = 0;
export const STACK_FRAME_TYPE_STACK = 1;
export const STACK_FRAME_TYPE_INLINE = 2;
export const STACK_FRAME_TYPE_RA = 128;
export const STACK_FRAME_TYPE_IGNORE = 255;
export const DEBUG_STACK_ARGUMENTS = 1;
export const DEBUG_STACK_FUNCTION_INFO = 2;
export const DEBUG_STACK_SOURCE_LINE = 4;
export const DEBUG_STACK_FRAME_ADDRESSES = 8;
export const DEBUG_STACK_COLUMN_NAMES = 16;
export const DEBUG_STACK_NONVOLATILE_REGISTERS = 32;
export const DEBUG_STACK_FRAME_NUMBERS = 64;
export const DEBUG_STACK_PARAMETERS = 128;
export const DEBUG_STACK_FRAME_ADDRESSES_RA_ONLY = 256;
export const DEBUG_STACK_FRAME_MEMORY_USAGE = 512;
export const DEBUG_STACK_PARAMETERS_NEWLINE = 1024;
export const DEBUG_STACK_DML = 2048;
export const DEBUG_STACK_FRAME_OFFSETS = 4096;
export const DEBUG_STACK_PROVIDER = 8192;
export const DEBUG_STACK_FRAME_ARCH = 16384;
export const DEBUG_CLASS_UNINITIALIZED = 0;
export const DEBUG_CLASS_KERNEL = 1;
export const DEBUG_CLASS_USER_WINDOWS = 2;
export const DEBUG_CLASS_IMAGE_FILE = 3;
export const DEBUG_DUMP_SMALL = 1024;
export const DEBUG_DUMP_DEFAULT = 1025;
export const DEBUG_DUMP_FULL = 1026;
export const DEBUG_DUMP_IMAGE_FILE = 1027;
export const DEBUG_DUMP_TRACE_LOG = 1028;
export const DEBUG_DUMP_WINDOWS_CE = 1029;
export const DEBUG_DUMP_ACTIVE = 1030;
export const DEBUG_KERNEL_CONNECTION = 0;
export const DEBUG_KERNEL_LOCAL = 1;
export const DEBUG_KERNEL_EXDI_DRIVER = 2;
export const DEBUG_KERNEL_IDNA = 3;
export const DEBUG_KERNEL_INSTALL_DRIVER = 4;
export const DEBUG_KERNEL_REPT = 5;
export const DEBUG_KERNEL_SMALL_DUMP = 1024;
export const DEBUG_KERNEL_DUMP = 1025;
export const DEBUG_KERNEL_ACTIVE_DUMP = 1030;
export const DEBUG_KERNEL_FULL_DUMP = 1026;
export const DEBUG_KERNEL_TRACE_LOG = 1028;
export const DEBUG_USER_WINDOWS_PROCESS = 0;
export const DEBUG_USER_WINDOWS_PROCESS_SERVER = 1;
export const DEBUG_USER_WINDOWS_IDNA = 2;
export const DEBUG_USER_WINDOWS_REPT = 3;
export const DEBUG_USER_WINDOWS_SMALL_DUMP = 1024;
export const DEBUG_USER_WINDOWS_DUMP = 1025;
export const DEBUG_USER_WINDOWS_DUMP_WINDOWS_CE = 1029;
export const DEBUG_EXTENSION_AT_ENGINE = 0;
export const DEBUG_EXECUTE_DEFAULT = 0;
export const DEBUG_EXECUTE_ECHO = 1;
export const DEBUG_EXECUTE_NOT_LOGGED = 2;
export const DEBUG_EXECUTE_NO_REPEAT = 4;
export const DEBUG_EXECUTE_USER_TYPED = 8;
export const DEBUG_EXECUTE_USER_CLICKED = 16;
export const DEBUG_EXECUTE_EXTENSION = 32;
export const DEBUG_EXECUTE_INTERNAL = 64;
export const DEBUG_EXECUTE_SCRIPT = 128;
export const DEBUG_EXECUTE_TOOLBAR = 256;
export const DEBUG_EXECUTE_MENU = 512;
export const DEBUG_EXECUTE_HOTKEY = 1024;
export const DEBUG_EXECUTE_EVENT = 2048;
export const DEBUG_FILTER_CREATE_THREAD = 0;
export const DEBUG_FILTER_EXIT_THREAD = 1;
export const DEBUG_FILTER_CREATE_PROCESS = 2;
export const DEBUG_FILTER_EXIT_PROCESS = 3;
export const DEBUG_FILTER_LOAD_MODULE = 4;
export const DEBUG_FILTER_UNLOAD_MODULE = 5;
export const DEBUG_FILTER_SYSTEM_ERROR = 6;
export const DEBUG_FILTER_INITIAL_BREAKPOINT = 7;
export const DEBUG_FILTER_INITIAL_MODULE_LOAD = 8;
export const DEBUG_FILTER_DEBUGGEE_OUTPUT = 9;
export const DEBUG_FILTER_BREAK = 0;
export const DEBUG_FILTER_SECOND_CHANCE_BREAK = 1;
export const DEBUG_FILTER_OUTPUT = 2;
export const DEBUG_FILTER_IGNORE = 3;
export const DEBUG_FILTER_REMOVE = 4;
export const DEBUG_FILTER_GO_HANDLED = 0;
export const DEBUG_FILTER_GO_NOT_HANDLED = 1;
export const DEBUG_WAIT_DEFAULT = 0;
export const DEBUG_VALUE_INVALID = 0;
export const DEBUG_VALUE_INT8 = 1;
export const DEBUG_VALUE_INT16 = 2;
export const DEBUG_VALUE_INT32 = 3;
export const DEBUG_VALUE_INT64 = 4;
export const DEBUG_VALUE_FLOAT32 = 5;
export const DEBUG_VALUE_FLOAT64 = 6;
export const DEBUG_VALUE_FLOAT80 = 7;
export const DEBUG_VALUE_FLOAT82 = 8;
export const DEBUG_VALUE_FLOAT128 = 9;
export const DEBUG_VALUE_VECTOR64 = 10;
export const DEBUG_VALUE_VECTOR128 = 11;
export const DEBUG_VALUE_TYPES = 12;
export const DEBUG_OUT_TEXT_REPL_DEFAULT = 0;
export const DEBUG_ASMOPT_DEFAULT = 0;
export const DEBUG_ASMOPT_VERBOSE = 1;
export const DEBUG_ASMOPT_NO_CODE_BYTES = 2;
export const DEBUG_ASMOPT_IGNORE_OUTPUT_WIDTH = 4;
export const DEBUG_ASMOPT_SOURCE_LINE_NUMBER = 8;
export const DEBUG_EXPR_MASM = 0;
export const DEBUG_EXPR_CPLUSPLUS = 1;
export const DEBUG_EINDEX_NAME = 0;
export const DEBUG_EINDEX_FROM_START = 0;
export const DEBUG_EINDEX_FROM_END = 1;
export const DEBUG_EINDEX_FROM_CURRENT = 2;
export const DEBUG_LOG_DEFAULT = 0;
export const DEBUG_LOG_APPEND = 1;
export const DEBUG_LOG_UNICODE = 2;
export const DEBUG_LOG_DML = 4;
export const DEBUG_SYSVERSTR_SERVICE_PACK = 0;
export const DEBUG_SYSVERSTR_BUILD = 1;
export const DEBUG_MANAGED_DISABLED = 0;
export const DEBUG_MANAGED_ALLOWED = 1;
export const DEBUG_MANAGED_DLL_LOADED = 2;
export const DEBUG_MANSTR_NONE = 0;
export const DEBUG_MANSTR_LOADED_SUPPORT_DLL = 1;
export const DEBUG_MANSTR_LOAD_STATUS = 2;
export const DEBUG_MANRESET_DEFAULT = 0;
export const DEBUG_MANRESET_LOAD_DLL = 1;
export const DEBUG_EXEC_FLAGS_NONBLOCK = 1;
export const DEBUG_DATA_SPACE_VIRTUAL = 0;
export const DEBUG_DATA_SPACE_PHYSICAL = 1;
export const DEBUG_DATA_SPACE_CONTROL = 2;
export const DEBUG_DATA_SPACE_IO = 3;
export const DEBUG_DATA_SPACE_MSR = 4;
export const DEBUG_DATA_SPACE_BUS_DATA = 5;
export const DEBUG_DATA_SPACE_DEBUGGER_DATA = 6;
export const DEBUG_DATA_SPACE_COUNT = 7;
export const DEBUG_DATA_KernBase = 24;
export const DEBUG_DATA_BreakpointWithStatusAddr = 32;
export const DEBUG_DATA_SavedContextAddr = 40;
export const DEBUG_DATA_KiCallUserModeAddr = 56;
export const DEBUG_DATA_KeUserCallbackDispatcherAddr = 64;
export const DEBUG_DATA_PsLoadedModuleListAddr = 72;
export const DEBUG_DATA_PsActiveProcessHeadAddr = 80;
export const DEBUG_DATA_PspCidTableAddr = 88;
export const DEBUG_DATA_ExpSystemResourcesListAddr = 96;
export const DEBUG_DATA_ExpPagedPoolDescriptorAddr = 104;
export const DEBUG_DATA_ExpNumberOfPagedPoolsAddr = 112;
export const DEBUG_DATA_KeTimeIncrementAddr = 120;
export const DEBUG_DATA_KeBugCheckCallbackListHeadAddr = 128;
export const DEBUG_DATA_KiBugcheckDataAddr = 136;
export const DEBUG_DATA_IopErrorLogListHeadAddr = 144;
export const DEBUG_DATA_ObpRootDirectoryObjectAddr = 152;
export const DEBUG_DATA_ObpTypeObjectTypeAddr = 160;
export const DEBUG_DATA_MmSystemCacheStartAddr = 168;
export const DEBUG_DATA_MmSystemCacheEndAddr = 176;
export const DEBUG_DATA_MmSystemCacheWsAddr = 184;
export const DEBUG_DATA_MmPfnDatabaseAddr = 192;
export const DEBUG_DATA_MmSystemPtesStartAddr = 200;
export const DEBUG_DATA_MmSystemPtesEndAddr = 208;
export const DEBUG_DATA_MmSubsectionBaseAddr = 216;
export const DEBUG_DATA_MmNumberOfPagingFilesAddr = 224;
export const DEBUG_DATA_MmLowestPhysicalPageAddr = 232;
export const DEBUG_DATA_MmHighestPhysicalPageAddr = 240;
export const DEBUG_DATA_MmNumberOfPhysicalPagesAddr = 248;
export const DEBUG_DATA_MmMaximumNonPagedPoolInBytesAddr = 256;
export const DEBUG_DATA_MmNonPagedSystemStartAddr = 264;
export const DEBUG_DATA_MmNonPagedPoolStartAddr = 272;
export const DEBUG_DATA_MmNonPagedPoolEndAddr = 280;
export const DEBUG_DATA_MmPagedPoolStartAddr = 288;
export const DEBUG_DATA_MmPagedPoolEndAddr = 296;
export const DEBUG_DATA_MmPagedPoolInformationAddr = 304;
export const DEBUG_DATA_MmPageSize = 312;
export const DEBUG_DATA_MmSizeOfPagedPoolInBytesAddr = 320;
export const DEBUG_DATA_MmTotalCommitLimitAddr = 328;
export const DEBUG_DATA_MmTotalCommittedPagesAddr = 336;
export const DEBUG_DATA_MmSharedCommitAddr = 344;
export const DEBUG_DATA_MmDriverCommitAddr = 352;
export const DEBUG_DATA_MmProcessCommitAddr = 360;
export const DEBUG_DATA_MmPagedPoolCommitAddr = 368;
export const DEBUG_DATA_MmExtendedCommitAddr = 376;
export const DEBUG_DATA_MmZeroedPageListHeadAddr = 384;
export const DEBUG_DATA_MmFreePageListHeadAddr = 392;
export const DEBUG_DATA_MmStandbyPageListHeadAddr = 400;
export const DEBUG_DATA_MmModifiedPageListHeadAddr = 408;
export const DEBUG_DATA_MmModifiedNoWritePageListHeadAddr = 416;
export const DEBUG_DATA_MmAvailablePagesAddr = 424;
export const DEBUG_DATA_MmResidentAvailablePagesAddr = 432;
export const DEBUG_DATA_PoolTrackTableAddr = 440;
export const DEBUG_DATA_NonPagedPoolDescriptorAddr = 448;
export const DEBUG_DATA_MmHighestUserAddressAddr = 456;
export const DEBUG_DATA_MmSystemRangeStartAddr = 464;
export const DEBUG_DATA_MmUserProbeAddressAddr = 472;
export const DEBUG_DATA_KdPrintCircularBufferAddr = 480;
export const DEBUG_DATA_KdPrintCircularBufferEndAddr = 488;
export const DEBUG_DATA_KdPrintWritePointerAddr = 496;
export const DEBUG_DATA_KdPrintRolloverCountAddr = 504;
export const DEBUG_DATA_MmLoadedUserImageListAddr = 512;
export const DEBUG_DATA_NtBuildLabAddr = 520;
export const DEBUG_DATA_KiNormalSystemCall = 528;
export const DEBUG_DATA_KiProcessorBlockAddr = 536;
export const DEBUG_DATA_MmUnloadedDriversAddr = 544;
export const DEBUG_DATA_MmLastUnloadedDriverAddr = 552;
export const DEBUG_DATA_MmTriageActionTakenAddr = 560;
export const DEBUG_DATA_MmSpecialPoolTagAddr = 568;
export const DEBUG_DATA_KernelVerifierAddr = 576;
export const DEBUG_DATA_MmVerifierDataAddr = 584;
export const DEBUG_DATA_MmAllocatedNonPagedPoolAddr = 592;
export const DEBUG_DATA_MmPeakCommitmentAddr = 600;
export const DEBUG_DATA_MmTotalCommitLimitMaximumAddr = 608;
export const DEBUG_DATA_CmNtCSDVersionAddr = 616;
export const DEBUG_DATA_MmPhysicalMemoryBlockAddr = 624;
export const DEBUG_DATA_MmSessionBase = 632;
export const DEBUG_DATA_MmSessionSize = 640;
export const DEBUG_DATA_MmSystemParentTablePage = 648;
export const DEBUG_DATA_MmVirtualTranslationBase = 656;
export const DEBUG_DATA_OffsetKThreadNextProcessor = 664;
export const DEBUG_DATA_OffsetKThreadTeb = 666;
export const DEBUG_DATA_OffsetKThreadKernelStack = 668;
export const DEBUG_DATA_OffsetKThreadInitialStack = 670;
export const DEBUG_DATA_OffsetKThreadApcProcess = 672;
export const DEBUG_DATA_OffsetKThreadState = 674;
export const DEBUG_DATA_OffsetKThreadBStore = 676;
export const DEBUG_DATA_OffsetKThreadBStoreLimit = 678;
export const DEBUG_DATA_SizeEProcess = 680;
export const DEBUG_DATA_OffsetEprocessPeb = 682;
export const DEBUG_DATA_OffsetEprocessParentCID = 684;
export const DEBUG_DATA_OffsetEprocessDirectoryTableBase = 686;
export const DEBUG_DATA_SizePrcb = 688;
export const DEBUG_DATA_OffsetPrcbDpcRoutine = 690;
export const DEBUG_DATA_OffsetPrcbCurrentThread = 692;
export const DEBUG_DATA_OffsetPrcbMhz = 694;
export const DEBUG_DATA_OffsetPrcbCpuType = 696;
export const DEBUG_DATA_OffsetPrcbVendorString = 698;
export const DEBUG_DATA_OffsetPrcbProcessorState = 700;
export const DEBUG_DATA_OffsetPrcbNumber = 702;
export const DEBUG_DATA_SizeEThread = 704;
export const DEBUG_DATA_KdPrintCircularBufferPtrAddr = 712;
export const DEBUG_DATA_KdPrintBufferSizeAddr = 720;
export const DEBUG_DATA_MmBadPagesDetected = 800;
export const DEBUG_DATA_EtwpDebuggerData = 816;
export const DEBUG_DATA_PteBase = 864;
export const DEBUG_DATA_PaeEnabled = 100000;
export const DEBUG_DATA_SharedUserData = 100008;
export const DEBUG_DATA_ProductType = 100016;
export const DEBUG_DATA_SuiteMask = 100024;
export const DEBUG_DATA_DumpWriterStatus = 100032;
export const DEBUG_DATA_DumpFormatVersion = 100040;
export const DEBUG_DATA_DumpWriterVersion = 100048;
export const DEBUG_DATA_DumpPowerState = 100056;
export const DEBUG_DATA_DumpMmStorage = 100064;
export const DEBUG_DATA_DumpAttributes = 100072;
export const DEBUG_DATA_KPCR_OFFSET = 0;
export const DEBUG_DATA_KPRCB_OFFSET = 1;
export const DEBUG_DATA_KTHREAD_OFFSET = 2;
export const DEBUG_DATA_BASE_TRANSLATION_VIRTUAL_OFFSET = 3;
export const DEBUG_DATA_PROCESSOR_IDENTIFICATION = 4;
export const DEBUG_DATA_PROCESSOR_SPEED = 5;
export const DEBUG_HANDLE_DATA_TYPE_BASIC = 0;
export const DEBUG_HANDLE_DATA_TYPE_TYPE_NAME = 1;
export const DEBUG_HANDLE_DATA_TYPE_OBJECT_NAME = 2;
export const DEBUG_HANDLE_DATA_TYPE_HANDLE_COUNT = 3;
export const DEBUG_HANDLE_DATA_TYPE_TYPE_NAME_WIDE = 4;
export const DEBUG_HANDLE_DATA_TYPE_OBJECT_NAME_WIDE = 5;
export const DEBUG_HANDLE_DATA_TYPE_MINI_THREAD_1 = 6;
export const DEBUG_HANDLE_DATA_TYPE_MINI_MUTANT_1 = 7;
export const DEBUG_HANDLE_DATA_TYPE_MINI_MUTANT_2 = 8;
export const DEBUG_HANDLE_DATA_TYPE_PER_HANDLE_OPERATIONS = 9;
export const DEBUG_HANDLE_DATA_TYPE_ALL_HANDLE_OPERATIONS = 10;
export const DEBUG_HANDLE_DATA_TYPE_MINI_PROCESS_1 = 11;
export const DEBUG_HANDLE_DATA_TYPE_MINI_PROCESS_2 = 12;
export const DEBUG_HANDLE_DATA_TYPE_MINI_EVENT_1 = 13;
export const DEBUG_HANDLE_DATA_TYPE_MINI_SECTION_1 = 14;
export const DEBUG_HANDLE_DATA_TYPE_MINI_SEMAPHORE_1 = 15;
export const DEBUG_OFFSINFO_VIRTUAL_SOURCE = 1;
export const DEBUG_VSOURCE_INVALID = 0;
export const DEBUG_VSOURCE_DEBUGGEE = 1;
export const DEBUG_VSOURCE_MAPPED_IMAGE = 2;
export const DEBUG_VSOURCE_DUMP_WITHOUT_MEMINFO = 3;
export const DEBUG_VSEARCH_DEFAULT = 0;
export const DEBUG_VSEARCH_WRITABLE_ONLY = 1;
export const DEBUG_PHYSICAL_DEFAULT = 0;
export const DEBUG_PHYSICAL_CACHED = 1;
export const DEBUG_PHYSICAL_UNCACHED = 2;
export const DEBUG_PHYSICAL_WRITE_COMBINED = 3;
export const DEBUG_EVENT_BREAKPOINT = 1;
export const DEBUG_EVENT_EXCEPTION = 2;
export const DEBUG_EVENT_CREATE_THREAD = 4;
export const DEBUG_EVENT_EXIT_THREAD = 8;
export const DEBUG_EVENT_CREATE_PROCESS = 16;
export const DEBUG_EVENT_EXIT_PROCESS = 32;
export const DEBUG_EVENT_LOAD_MODULE = 64;
export const DEBUG_EVENT_UNLOAD_MODULE = 128;
export const DEBUG_EVENT_SYSTEM_ERROR = 256;
export const DEBUG_EVENT_SESSION_STATUS = 512;
export const DEBUG_EVENT_CHANGE_DEBUGGEE_STATE = 1024;
export const DEBUG_EVENT_CHANGE_ENGINE_STATE = 2048;
export const DEBUG_EVENT_CHANGE_SYMBOL_STATE = 4096;
export const DEBUG_EVENT_SERVICE_EXCEPTION = 8192;
export const DEBUG_SESSION_ACTIVE = 0;
export const DEBUG_SESSION_END_SESSION_ACTIVE_TERMINATE = 1;
export const DEBUG_SESSION_END_SESSION_ACTIVE_DETACH = 2;
export const DEBUG_SESSION_END_SESSION_PASSIVE = 3;
export const DEBUG_SESSION_END = 4;
export const DEBUG_SESSION_REBOOT = 5;
export const DEBUG_SESSION_HIBERNATE = 6;
export const DEBUG_SESSION_FAILURE = 7;
export const DEBUG_CDS_ALL = 4294967295;
export const DEBUG_CDS_REGISTERS = 1;
export const DEBUG_CDS_DATA = 2;
export const DEBUG_CDS_REFRESH = 4;
export const DEBUG_CDS_REFRESH_EVALUATE = 1;
export const DEBUG_CDS_REFRESH_EXECUTE = 2;
export const DEBUG_CDS_REFRESH_EXECUTECOMMANDFILE = 3;
export const DEBUG_CDS_REFRESH_ADDBREAKPOINT = 4;
export const DEBUG_CDS_REFRESH_REMOVEBREAKPOINT = 5;
export const DEBUG_CDS_REFRESH_WRITEVIRTUAL = 6;
export const DEBUG_CDS_REFRESH_WRITEVIRTUALUNCACHED = 7;
export const DEBUG_CDS_REFRESH_WRITEPHYSICAL = 8;
export const DEBUG_CDS_REFRESH_WRITEPHYSICAL2 = 9;
export const DEBUG_CDS_REFRESH_SETVALUE = 10;
export const DEBUG_CDS_REFRESH_SETVALUE2 = 11;
export const DEBUG_CDS_REFRESH_SETSCOPE = 12;
export const DEBUG_CDS_REFRESH_SETSCOPEFRAMEBYINDEX = 13;
export const DEBUG_CDS_REFRESH_SETSCOPEFROMJITDEBUGINFO = 14;
export const DEBUG_CDS_REFRESH_SETSCOPEFROMSTOREDEVENT = 15;
export const DEBUG_CDS_REFRESH_INLINESTEP = 16;
export const DEBUG_CDS_REFRESH_INLINESTEP_PSEUDO = 17;
export const DEBUG_CES_ALL = 4294967295;
export const DEBUG_CES_CURRENT_THREAD = 1;
export const DEBUG_CES_EFFECTIVE_PROCESSOR = 2;
export const DEBUG_CES_BREAKPOINTS = 4;
export const DEBUG_CES_CODE_LEVEL = 8;
export const DEBUG_CES_EXECUTION_STATUS = 16;
export const DEBUG_CES_ENGINE_OPTIONS = 32;
export const DEBUG_CES_LOG_FILE = 64;
export const DEBUG_CES_RADIX = 128;
export const DEBUG_CES_EVENT_FILTERS = 256;
export const DEBUG_CES_PROCESS_OPTIONS = 512;
export const DEBUG_CES_EXTENSIONS = 1024;
export const DEBUG_CES_SYSTEMS = 2048;
export const DEBUG_CES_ASSEMBLY_OPTIONS = 4096;
export const DEBUG_CES_EXPRESSION_SYNTAX = 8192;
export const DEBUG_CES_TEXT_REPLACEMENTS = 16384;
export const DEBUG_CSS_ALL = 4294967295;
export const DEBUG_CSS_LOADS = 1;
export const DEBUG_CSS_UNLOADS = 2;
export const DEBUG_CSS_SCOPE = 4;
export const DEBUG_CSS_PATHS = 8;
export const DEBUG_CSS_SYMBOL_OPTIONS = 16;
export const DEBUG_CSS_TYPE_OPTIONS = 32;
export const DEBUG_CSS_COLLAPSE_CHILDREN = 64;
export const DEBUG_OUTCBI_EXPLICIT_FLUSH = 1;
export const DEBUG_OUTCBI_TEXT = 2;
export const DEBUG_OUTCBI_DML = 4;
export const DEBUG_OUTCBI_ANY_FORMAT = 6;
export const DEBUG_OUTCB_TEXT = 0;
export const DEBUG_OUTCB_DML = 1;
export const DEBUG_OUTCB_EXPLICIT_FLUSH = 2;
export const DEBUG_OUTCBF_COMBINED_EXPLICIT_FLUSH = 1;
export const DEBUG_OUTCBF_DML_HAS_TAGS = 2;
export const DEBUG_OUTCBF_DML_HAS_SPECIAL_CHARACTERS = 4;
export const DEBUG_REGISTERS_DEFAULT = 0;
export const DEBUG_REGISTERS_INT32 = 1;
export const DEBUG_REGISTERS_INT64 = 2;
export const DEBUG_REGISTERS_FLOAT = 4;
export const DEBUG_REGISTERS_ALL = 7;
export const DEBUG_REGISTER_SUB_REGISTER = 1;
export const DEBUG_REGSRC_DEBUGGEE = 0;
export const DEBUG_REGSRC_EXPLICIT = 1;
export const DEBUG_REGSRC_FRAME = 2;
export const DEBUG_OUTPUT_SYMBOLS_DEFAULT = 0;
export const DEBUG_OUTPUT_SYMBOLS_NO_NAMES = 1;
export const DEBUG_OUTPUT_SYMBOLS_NO_OFFSETS = 2;
export const DEBUG_OUTPUT_SYMBOLS_NO_VALUES = 4;
export const DEBUG_OUTPUT_SYMBOLS_NO_TYPES = 16;
export const DEBUG_OUTPUT_NAME_END = `**NAME**`;
export const DEBUG_OUTPUT_OFFSET_END = `**OFF**`;
export const DEBUG_OUTPUT_VALUE_END = `**VALUE**`;
export const DEBUG_OUTPUT_TYPE_END = `**TYPE**`;
export const DEBUG_OUTPUT_NAME_END_WIDE = `**NAME**`;
export const DEBUG_OUTPUT_OFFSET_END_WIDE = `**OFF**`;
export const DEBUG_OUTPUT_VALUE_END_WIDE = `**VALUE**`;
export const DEBUG_OUTPUT_TYPE_END_WIDE = `**TYPE**`;
export const DEBUG_OUTPUT_NAME_END_T = `**NAME**`;
export const DEBUG_OUTPUT_OFFSET_END_T = `**OFF**`;
export const DEBUG_OUTPUT_VALUE_END_T = `**VALUE**`;
export const DEBUG_OUTPUT_TYPE_END_T = `**TYPE**`;
export const DEBUG_SYMBOL_EXPANSION_LEVEL_MASK = 15;
export const DEBUG_SYMBOL_EXPANDED = 16;
export const DEBUG_SYMBOL_READ_ONLY = 32;
export const DEBUG_SYMBOL_IS_ARRAY = 64;
export const DEBUG_SYMBOL_IS_FLOAT = 128;
export const DEBUG_SYMBOL_IS_ARGUMENT = 256;
export const DEBUG_SYMBOL_IS_LOCAL = 512;
export const DEBUG_SYMENT_IS_CODE = 1;
export const DEBUG_SYMENT_IS_DATA = 2;
export const DEBUG_SYMENT_IS_PARAMETER = 4;
export const DEBUG_SYMENT_IS_LOCAL = 8;
export const DEBUG_SYMENT_IS_MANAGED = 16;
export const DEBUG_SYMENT_IS_SYNTHETIC = 32;
export const DEBUG_MODULE_LOADED = 0;
export const DEBUG_MODULE_UNLOADED = 1;
export const DEBUG_MODULE_USER_MODE = 2;
export const DEBUG_MODULE_EXE_MODULE = 4;
export const DEBUG_MODULE_EXPLICIT = 8;
export const DEBUG_MODULE_SECONDARY = 16;
export const DEBUG_MODULE_SYNTHETIC = 32;
export const DEBUG_MODULE_SYM_BAD_CHECKSUM = 65536;
export const DEBUG_SYMTYPE_NONE = 0;
export const DEBUG_SYMTYPE_COFF = 1;
export const DEBUG_SYMTYPE_CODEVIEW = 2;
export const DEBUG_SYMTYPE_PDB = 3;
export const DEBUG_SYMTYPE_EXPORT = 4;
export const DEBUG_SYMTYPE_DEFERRED = 5;
export const DEBUG_SYMTYPE_SYM = 6;
export const DEBUG_SYMTYPE_DIA = 7;
export const DEBUG_SCOPE_GROUP_ARGUMENTS = 1;
export const DEBUG_SCOPE_GROUP_LOCALS = 2;
export const DEBUG_SCOPE_GROUP_ALL = 3;
export const DEBUG_SCOPE_GROUP_BY_DATAMODEL = 4;
export const DEBUG_OUTTYPE_DEFAULT = 0;
export const DEBUG_OUTTYPE_NO_INDENT = 1;
export const DEBUG_OUTTYPE_NO_OFFSET = 2;
export const DEBUG_OUTTYPE_VERBOSE = 4;
export const DEBUG_OUTTYPE_COMPACT_OUTPUT = 8;
export const DEBUG_OUTTYPE_ADDRESS_OF_FIELD = 65536;
export const DEBUG_OUTTYPE_ADDRESS_AT_END = 131072;
export const DEBUG_OUTTYPE_BLOCK_RECURSE = 2097152;
export const DEBUG_FIND_SOURCE_DEFAULT = 0;
export const DEBUG_FIND_SOURCE_FULL_PATH = 1;
export const DEBUG_FIND_SOURCE_BEST_MATCH = 2;
export const DEBUG_FIND_SOURCE_NO_SRCSRV = 4;
export const DEBUG_FIND_SOURCE_TOKEN_LOOKUP = 8;
export const DEBUG_FIND_SOURCE_WITH_CHECKSUM = 16;
export const DEBUG_FIND_SOURCE_WITH_CHECKSUM_STRICT = 32;
export const MODULE_ORDERS_MASK = 4026531840;
export const MODULE_ORDERS_LOADTIME = 268435456;
export const MODULE_ORDERS_MODULENAME = 536870912;
export const DEBUG_MODNAME_IMAGE = 0;
export const DEBUG_MODNAME_MODULE = 1;
export const DEBUG_MODNAME_LOADED_IMAGE = 2;
export const DEBUG_MODNAME_SYMBOL_FILE = 3;
export const DEBUG_MODNAME_MAPPED_IMAGE = 4;
export const DEBUG_TYPEOPTS_UNICODE_DISPLAY = 1;
export const DEBUG_TYPEOPTS_LONGSTATUS_DISPLAY = 2;
export const DEBUG_TYPEOPTS_FORCERADIX_OUTPUT = 4;
export const DEBUG_TYPEOPTS_MATCH_MAXSIZE = 8;
export const DEBUG_GETMOD_DEFAULT = 0;
export const DEBUG_GETMOD_NO_LOADED_MODULES = 1;
export const DEBUG_GETMOD_NO_UNLOADED_MODULES = 2;
export const DEBUG_ADDSYNTHMOD_DEFAULT = 0;
export const DEBUG_ADDSYNTHMOD_ZEROBASE = 1;
export const DEBUG_ADDSYNTHSYM_DEFAULT = 0;
export const DEBUG_OUTSYM_DEFAULT = 0;
export const DEBUG_OUTSYM_FORCE_OFFSET = 1;
export const DEBUG_OUTSYM_SOURCE_LINE = 2;
export const DEBUG_OUTSYM_ALLOW_DISPLACEMENT = 4;
export const DEBUG_GETFNENT_DEFAULT = 0;
export const DEBUG_GETFNENT_RAW_ENTRY_ONLY = 1;
export const DEBUG_SOURCE_IS_STATEMENT = 1;
export const DEBUG_GSEL_DEFAULT = 0;
export const DEBUG_GSEL_NO_SYMBOL_LOADS = 1;
export const DEBUG_GSEL_ALLOW_LOWER = 2;
export const DEBUG_GSEL_ALLOW_HIGHER = 4;
export const DEBUG_GSEL_NEAREST_ONLY = 8;
export const DEBUG_GSEL_INLINE_CALLSITE = 16;
export const DEBUG_FRAME_DEFAULT = 0;
export const DEBUG_FRAME_IGNORE_INLINE = 1;
export const DEBUG_COMMAND_EXCEPTION_ID = 3688893886;
export const DEBUG_CMDEX_INVALID = 0;
export const DEBUG_CMDEX_ADD_EVENT_STRING = 1;
export const DEBUG_CMDEX_RESET_EVENT_STRINGS = 2;
export const DEBUG_EXTINIT_HAS_COMMAND_HELP = 1;
export const DEBUG_NOTIFY_SESSION_ACTIVE = 0;
export const DEBUG_NOTIFY_SESSION_INACTIVE = 1;
export const DEBUG_NOTIFY_SESSION_ACCESSIBLE = 2;
export const DEBUG_NOTIFY_SESSION_INACCESSIBLE = 3;
export const DEBUG_KNOWN_STRUCT_GET_NAMES = 1;
export const DEBUG_KNOWN_STRUCT_GET_SINGLE_LINE_OUTPUT = 2;
export const DEBUG_KNOWN_STRUCT_SUPPRESS_TYPE_NAME = 3;
export const DEBUG_EXT_QVALUE_DEFAULT = 0;
export const DEBUG_EXT_PVALUE_DEFAULT = 0;
export const DEBUG_EXT_PVTYPE_IS_VALUE = 0;
export const DEBUG_EXT_PVTYPE_IS_POINTER = 1;
export const CROSS_PLATFORM_MAXIMUM_PROCESSORS = 2048;
export const EXT_API_VERSION_NUMBER = 5;
export const EXT_API_VERSION_NUMBER32 = 5;
export const EXT_API_VERSION_NUMBER64 = 6;
export const IG_KD_CONTEXT = 1;
export const IG_READ_CONTROL_SPACE = 2;
export const IG_WRITE_CONTROL_SPACE = 3;
export const IG_READ_IO_SPACE = 4;
export const IG_WRITE_IO_SPACE = 5;
export const IG_READ_PHYSICAL = 6;
export const IG_WRITE_PHYSICAL = 7;
export const IG_READ_IO_SPACE_EX = 8;
export const IG_WRITE_IO_SPACE_EX = 9;
export const IG_KSTACK_HELP = 10;
export const IG_SET_THREAD = 11;
export const IG_READ_MSR = 12;
export const IG_WRITE_MSR = 13;
export const IG_GET_DEBUGGER_DATA = 14;
export const IG_GET_KERNEL_VERSION = 15;
export const IG_RELOAD_SYMBOLS = 16;
export const IG_GET_SET_SYMPATH = 17;
export const IG_GET_EXCEPTION_RECORD = 18;
export const IG_IS_PTR64 = 19;
export const IG_GET_BUS_DATA = 20;
export const IG_SET_BUS_DATA = 21;
export const IG_DUMP_SYMBOL_INFO = 22;
export const IG_LOWMEM_CHECK = 23;
export const IG_SEARCH_MEMORY = 24;
export const IG_GET_CURRENT_THREAD = 25;
export const IG_GET_CURRENT_PROCESS = 26;
export const IG_GET_TYPE_SIZE = 27;
export const IG_GET_CURRENT_PROCESS_HANDLE = 28;
export const IG_GET_INPUT_LINE = 29;
export const IG_GET_EXPRESSION_EX = 30;
export const IG_TRANSLATE_VIRTUAL_TO_PHYSICAL = 31;
export const IG_GET_CACHE_SIZE = 32;
export const IG_READ_PHYSICAL_WITH_FLAGS = 33;
export const IG_WRITE_PHYSICAL_WITH_FLAGS = 34;
export const IG_POINTER_SEARCH_PHYSICAL = 35;
export const IG_OBSOLETE_PLACEHOLDER_36 = 36;
export const IG_GET_THREAD_OS_INFO = 37;
export const IG_GET_CLR_DATA_INTERFACE = 38;
export const IG_MATCH_PATTERN_A = 39;
export const IG_FIND_FILE = 40;
export const IG_TYPED_DATA_OBSOLETE = 41;
export const IG_QUERY_TARGET_INTERFACE = 42;
export const IG_TYPED_DATA = 43;
export const IG_DISASSEMBLE_BUFFER = 44;
export const IG_GET_ANY_MODULE_IN_RANGE = 45;
export const IG_VIRTUAL_TO_PHYSICAL = 46;
export const IG_PHYSICAL_TO_VIRTUAL = 47;
export const IG_GET_CONTEXT_EX = 48;
export const IG_GET_TEB_ADDRESS = 128;
export const IG_GET_PEB_ADDRESS = 129;
export const PHYS_FLAG_DEFAULT = 0;
export const PHYS_FLAG_CACHED = 1;
export const PHYS_FLAG_UNCACHED = 2;
export const PHYS_FLAG_WRITE_COMBINED = 3;
export const PTR_SEARCH_PHYS_ALL_HITS = 1;
export const PTR_SEARCH_PHYS_PTE = 2;
export const PTR_SEARCH_PHYS_RANGE_CHECK_ONLY = 4;
export const PTR_SEARCH_PHYS_SIZE_SHIFT = 3;
export const PTR_SEARCH_NO_SYMBOL_CHECK = 2147483648;
export const EXT_FIND_FILE_ALLOW_GIVEN_PATH = 1;
export const DEBUG_TYPED_DATA_IS_IN_MEMORY = 1;
export const DEBUG_TYPED_DATA_PHYSICAL_DEFAULT = 2;
export const DEBUG_TYPED_DATA_PHYSICAL_CACHED = 4;
export const DEBUG_TYPED_DATA_PHYSICAL_UNCACHED = 6;
export const DEBUG_TYPED_DATA_PHYSICAL_WRITE_COMBINED = 8;
export const DEBUG_TYPED_DATA_PHYSICAL_MEMORY = 14;
export const EXT_TDF_PHYSICAL_DEFAULT = 2;
export const EXT_TDF_PHYSICAL_CACHED = 4;
export const EXT_TDF_PHYSICAL_UNCACHED = 6;
export const EXT_TDF_PHYSICAL_WRITE_COMBINED = 8;
export const EXT_TDF_PHYSICAL_MEMORY = 14;
export const WDBGEXTS_ADDRESS_DEFAULT = 0;
export const WDBGEXTS_ADDRESS_SEG16 = 1;
export const WDBGEXTS_ADDRESS_SEG32 = 2;
export const WDBGEXTS_ADDRESS_RESERVED0 = 2147483648;
export const DBGKD_VERS_FLAG_MP = 1;
export const DBGKD_VERS_FLAG_DATA = 2;
export const DBGKD_VERS_FLAG_PTR64 = 4;
export const DBGKD_VERS_FLAG_NOMM = 8;
export const DBGKD_VERS_FLAG_HSS = 16;
export const DBGKD_VERS_FLAG_PARTITIONS = 32;
export const DBGKD_VERS_FLAG_HAL_IN_NTOS = 64;
export const KD_SECONDARY_VERSION_DEFAULT = 0;
export const KD_SECONDARY_VERSION_AMD64_OBSOLETE_CONTEXT_1 = 0;
export const KD_SECONDARY_VERSION_AMD64_OBSOLETE_CONTEXT_2 = 1;
export const KD_SECONDARY_VERSION_AMD64_CONTEXT = 2;
export const CURRENT_KD_SECONDARY_VERSION = 2;
export const DBG_DUMP_NO_INDENT = 1;
export const DBG_DUMP_NO_OFFSET = 2;
export const DBG_DUMP_VERBOSE = 4;
export const DBG_DUMP_CALL_FOR_EACH = 8;
export const DBG_DUMP_LIST = 32;
export const DBG_DUMP_NO_PRINT = 64;
export const DBG_DUMP_GET_SIZE_ONLY = 128;
export const DBG_DUMP_COMPACT_OUT = 8192;
export const DBG_DUMP_ARRAY = 32768;
export const DBG_DUMP_ADDRESS_OF_FIELD = 65536;
export const DBG_DUMP_ADDRESS_AT_END = 131072;
export const DBG_DUMP_COPY_TYPE_DATA = 262144;
export const DBG_DUMP_READ_PHYSICAL = 524288;
export const DBG_DUMP_FUNCTION_FORMAT = 1048576;
export const DBG_DUMP_BLOCK_RECURSE = 2097152;
export const DBG_DUMP_MATCH_SIZE = 4194304;
export const DBG_RETURN_TYPE = 0;
export const DBG_RETURN_SUBTYPES = 0;
export const DBG_RETURN_TYPE_VALUES = 0;
export const DBG_DUMP_FIELD_CALL_BEFORE_PRINT = 1;
export const DBG_DUMP_FIELD_NO_CALLBACK_REQ = 2;
export const DBG_DUMP_FIELD_RECUR_ON_THIS = 4;
export const DBG_DUMP_FIELD_FULL_NAME = 8;
export const DBG_DUMP_FIELD_ARRAY = 16;
export const DBG_DUMP_FIELD_COPY_FIELD_DATA = 32;
export const DBG_DUMP_FIELD_RETURN_ADDRESS = 4096;
export const DBG_DUMP_FIELD_SIZE_IN_BITS = 8192;
export const DBG_DUMP_FIELD_NO_PRINT = 16384;
export const DBG_DUMP_FIELD_DEFAULT_STRING = 65536;
export const DBG_DUMP_FIELD_WCHAR_STRING = 131072;
export const DBG_DUMP_FIELD_MULTI_STRING = 262144;
export const DBG_DUMP_FIELD_GUID_STRING = 524288;
export const DBG_DUMP_FIELD_UTF32_STRING = 1048576;
export const MEMORY_READ_ERROR = 1;
export const SYMBOL_TYPE_INDEX_NOT_FOUND = 2;
export const SYMBOL_TYPE_INFO_NOT_FOUND = 3;
export const FIELDS_DID_NOT_MATCH = 4;
export const NULL_SYM_DUMP_PARAM = 5;
export const NULL_FIELD_NAME = 6;
export const INCORRECT_VERSION_INFO = 7;
export const EXIT_ON_CONTROLC = 8;
export const CANNOT_ALLOCATE_MEMORY = 9;
export const INSUFFICIENT_SPACE_TO_COPY = 10;
export const ADDRESS_TYPE_INDEX_NOT_FOUND = 11;
export const UNAVAILABLE_ERROR = 12;
export const SCRIPTITEM_ISVISIBLE = 2;
export const SCRIPTITEM_ISSOURCE = 4;
export const SCRIPTITEM_GLOBALMEMBERS = 8;
export const SCRIPTITEM_ISPERSISTENT = 64;
export const SCRIPTITEM_CODEONLY = 512;
export const SCRIPTITEM_NOCODE = 1024;
export const SCRIPTTYPELIB_ISCONTROL = 16;
export const SCRIPTTYPELIB_ISPERSISTENT = 64;
export const SCRIPTTEXT_DELAYEXECUTION = 1;
export const SCRIPTTEXT_ISVISIBLE = 2;
export const SCRIPTTEXT_ISEXPRESSION = 32;
export const SCRIPTTEXT_ISPERSISTENT = 64;
export const SCRIPTTEXT_HOSTMANAGESSOURCE = 128;
export const SCRIPTTEXT_ISXDOMAIN = 256;
export const SCRIPTTEXT_ISNONUSERCODE = 512;
export const SCRIPTPROC_ISEXPRESSION = 32;
export const SCRIPTPROC_HOSTMANAGESSOURCE = 128;
export const SCRIPTPROC_IMPLICIT_THIS = 256;
export const SCRIPTPROC_IMPLICIT_PARENTS = 512;
export const SCRIPTPROC_ISXDOMAIN = 1024;
export const SCRIPTINFO_IUNKNOWN = 1;
export const SCRIPTINFO_ITYPEINFO = 2;
export const SCRIPTINTERRUPT_DEBUG = 1;
export const SCRIPTINTERRUPT_RAISEEXCEPTION = 2;
export const SCRIPTSTAT_STATEMENT_COUNT = 1;
export const SCRIPTSTAT_INSTRUCTION_COUNT = 2;
export const SCRIPTSTAT_INTSTRUCTION_TIME = 3;
export const SCRIPTSTAT_TOTAL_TIME = 4;
export const SCRIPT_ENCODE_SECTION = 1;
export const SCRIPT_ENCODE_DEFAULT_LANGUAGE = 1;
export const SCRIPT_ENCODE_NO_ASP_LANGUAGE = 2;
export const SCRIPTPROP_NAME = 0;
export const SCRIPTPROP_MAJORVERSION = 1;
export const SCRIPTPROP_MINORVERSION = 2;
export const SCRIPTPROP_BUILDNUMBER = 3;
export const SCRIPTPROP_DELAYEDEVENTSINKING = 4096;
export const SCRIPTPROP_CATCHEXCEPTION = 4097;
export const SCRIPTPROP_CONVERSIONLCID = 4098;
export const SCRIPTPROP_HOSTSTACKREQUIRED = 4099;
export const SCRIPTPROP_SCRIPTSAREFULLYTRUSTED = 4100;
export const SCRIPTPROP_DEBUGGER = 4352;
export const SCRIPTPROP_JITDEBUG = 4353;
export const SCRIPTPROP_GCCONTROLSOFTCLOSE = 8192;
export const SCRIPTPROP_INTEGERMODE = 12288;
export const SCRIPTPROP_STRINGCOMPAREINSTANCE = 12289;
export const SCRIPTPROP_INVOKEVERSIONING = 16384;
export const SCRIPTPROP_HACK_FIBERSUPPORT = 1879048192;
export const SCRIPTPROP_HACK_TRIDENTEVENTSINK = 1879048193;
export const SCRIPTPROP_ABBREVIATE_GLOBALNAME_RESOLUTION = 1879048194;
export const SCRIPTPROP_HOSTKEEPALIVE = 1879048196;
export const SCRIPT_E_RECORDED = `-2040119292`;
export const SCRIPT_E_REPORTED = `-2147352319`;
export const SCRIPT_E_PROPAGATE = `-2147352318`;
export const MINIDUMP_VERSION = 42899;
export const MINIDUMP_MISC1_PROCESSOR_POWER_INFO = 4;
export const MINIDUMP_MISC3_PROCESS_INTEGRITY = 16;
export const MINIDUMP_MISC3_PROCESS_EXECUTE_FLAGS = 32;
export const MINIDUMP_MISC3_TIMEZONE = 64;
export const MINIDUMP_MISC3_PROTECTED_PROCESS = 128;
export const MINIDUMP_MISC4_BUILDSTRING = 256;
export const MINIDUMP_MISC5_PROCESS_COOKIE = 512;
export const MINIDUMP_SYSMEMINFO1_FILECACHE_TRANSITIONREPURPOSECOUNT_FLAGS = 1;
export const MINIDUMP_SYSMEMINFO1_BASICPERF = 2;
export const MINIDUMP_SYSMEMINFO1_PERF_CCTOTALDIRTYPAGES_CCDIRTYPAGETHRESHOLD = 4;
export const MINIDUMP_SYSMEMINFO1_PERF_RESIDENTAVAILABLEPAGES_SHAREDCOMMITPAGES = 8;
export const MINIDUMP_PROCESS_VM_COUNTERS = 1;
export const MINIDUMP_PROCESS_VM_COUNTERS_VIRTUALSIZE = 2;
export const MINIDUMP_PROCESS_VM_COUNTERS_EX = 4;
export const MINIDUMP_PROCESS_VM_COUNTERS_EX2 = 8;
export const MINIDUMP_PROCESS_VM_COUNTERS_JOB = 16;
export const MAX_SYM_NAME = 2000;
export const BIND_NO_BOUND_IMPORTS = 1;
export const BIND_NO_UPDATE = 2;
export const BIND_ALL_IMAGES = 4;
export const BIND_CACHE_IMPORT_DLLS = 8;
export const BIND_REPORT_64BIT_VA = 16;
export const CHECKSUM_SUCCESS = 0;
export const CHECKSUM_OPEN_FAILURE = 1;
export const CHECKSUM_MAP_FAILURE = 2;
export const CHECKSUM_MAPVIEW_FAILURE = 3;
export const CHECKSUM_UNICODE_FAILURE = 4;
export const SPLITSYM_REMOVE_PRIVATE = 1;
export const SPLITSYM_EXTRACT_ALL = 2;
export const SPLITSYM_SYMBOLPATH_IS_SRC = 4;
export const CERT_PE_IMAGE_DIGEST_DEBUG_INFO = 1;
export const CERT_PE_IMAGE_DIGEST_RESOURCES = 2;
export const CERT_PE_IMAGE_DIGEST_ALL_IMPORT_INFO = 4;
export const CERT_PE_IMAGE_DIGEST_NON_PE_INFO = 8;
export const CERT_SECTION_TYPE_ANY = 255;
export const ERROR_IMAGE_NOT_STRIPPED = 34816;
export const ERROR_NO_DBG_POINTER = 34817;
export const ERROR_NO_PDB_POINTER = 34818;
export const UNDNAME_COMPLETE = 0;
export const UNDNAME_NO_LEADING_UNDERSCORES = 1;
export const UNDNAME_NO_MS_KEYWORDS = 2;
export const UNDNAME_NO_FUNCTION_RETURNS = 4;
export const UNDNAME_NO_ALLOCATION_MODEL = 8;
export const UNDNAME_NO_ALLOCATION_LANGUAGE = 16;
export const UNDNAME_NO_MS_THISTYPE = 32;
export const UNDNAME_NO_CV_THISTYPE = 64;
export const UNDNAME_NO_THISTYPE = 96;
export const UNDNAME_NO_ACCESS_SPECIFIERS = 128;
export const UNDNAME_NO_THROW_SIGNATURES = 256;
export const UNDNAME_NO_MEMBER_TYPE = 512;
export const UNDNAME_NO_RETURN_UDT_MODEL = 1024;
export const UNDNAME_32_BIT_DECODE = 2048;
export const UNDNAME_NAME_ONLY = 4096;
export const UNDNAME_NO_ARGUMENTS = 8192;
export const UNDNAME_NO_SPECIAL_SYMS = 16384;
export const DBHHEADER_PDBGUID = 3;
export const INLINE_FRAME_CONTEXT_INIT = 0;
export const INLINE_FRAME_CONTEXT_IGNORE = 4294967295;
export const SYM_STKWALK_DEFAULT = 0;
export const SYM_STKWALK_FORCE_FRAMEPTR = 1;
export const SYM_STKWALK_ZEROEXTEND_PTRS = 2;
export const API_VERSION_NUMBER = 12;
export const SYMFLAG_NULL = 524288;
export const SYMFLAG_FUNC_NO_RETURN = 1048576;
export const SYMFLAG_SYNTHETIC_ZEROBASE = 2097152;
export const SYMFLAG_PUBLIC_CODE = 4194304;
export const SYMFLAG_REGREL_ALIASINDIR = 8388608;
export const SYMFLAG_FIXUP_ARM64X = 16777216;
export const SYMFLAG_GLOBAL = 33554432;
export const SYMFLAG_RESET = 2147483648;
export const IMAGEHLP_MODULE_REGION_DLLBASE = 1;
export const IMAGEHLP_MODULE_REGION_DLLRANGE = 2;
export const IMAGEHLP_MODULE_REGION_ADDITIONAL = 4;
export const IMAGEHLP_MODULE_REGION_JIT = 8;
export const IMAGEHLP_MODULE_REGION_ALL = 255;
export const CBA_DEFERRED_SYMBOL_LOAD_START = 1;
export const CBA_DEFERRED_SYMBOL_LOAD_COMPLETE = 2;
export const CBA_DEFERRED_SYMBOL_LOAD_FAILURE = 3;
export const CBA_SYMBOLS_UNLOADED = 4;
export const CBA_DUPLICATE_SYMBOL = 5;
export const CBA_READ_MEMORY = 6;
export const CBA_DEFERRED_SYMBOL_LOAD_CANCEL = 7;
export const CBA_SET_OPTIONS = 8;
export const CBA_EVENT = 16;
export const CBA_DEFERRED_SYMBOL_LOAD_PARTIAL = 32;
export const CBA_DEBUG_INFO = 268435456;
export const CBA_SRCSRV_INFO = 536870912;
export const CBA_SRCSRV_EVENT = 1073741824;
export const CBA_UPDATE_STATUS_BAR = 1342177280;
export const CBA_ENGINE_PRESENT = 1610612736;
export const CBA_CHECK_ENGOPT_DISALLOW_NETWORK_PATHS = 1879048192;
export const CBA_CHECK_ARM_MACHINE_THUMB_TYPE_OVERRIDE = 2147483648;
export const CBA_XML_LOG = 2415919104;
export const CBA_MAP_JIT_SYMBOL = 2684354560;
export const EVENT_SRCSPEW_START = 100;
export const EVENT_SRCSPEW = 100;
export const EVENT_SRCSPEW_END = 199;
export const DSLFLAG_MISMATCHED_PDB = 1;
export const DSLFLAG_MISMATCHED_DBG = 2;
export const FLAG_ENGINE_PRESENT = 4;
export const FLAG_ENGOPT_DISALLOW_NETWORK_PATHS = 8;
export const FLAG_OVERRIDE_ARM_MACHINE_TYPE = 16;
export const SYMOPT_CASE_INSENSITIVE = 1;
export const SYMOPT_UNDNAME = 2;
export const SYMOPT_DEFERRED_LOADS = 4;
export const SYMOPT_NO_CPP = 8;
export const SYMOPT_LOAD_LINES = 16;
export const SYMOPT_OMAP_FIND_NEAREST = 32;
export const SYMOPT_LOAD_ANYTHING = 64;
export const SYMOPT_IGNORE_CVREC = 128;
export const SYMOPT_NO_UNQUALIFIED_LOADS = 256;
export const SYMOPT_FAIL_CRITICAL_ERRORS = 512;
export const SYMOPT_EXACT_SYMBOLS = 1024;
export const SYMOPT_ALLOW_ABSOLUTE_SYMBOLS = 2048;
export const SYMOPT_IGNORE_NT_SYMPATH = 4096;
export const SYMOPT_INCLUDE_32BIT_MODULES = 8192;
export const SYMOPT_PUBLICS_ONLY = 16384;
export const SYMOPT_NO_PUBLICS = 32768;
export const SYMOPT_AUTO_PUBLICS = 65536;
export const SYMOPT_NO_IMAGE_SEARCH = 131072;
export const SYMOPT_SECURE = 262144;
export const SYMOPT_NO_PROMPTS = 524288;
export const SYMOPT_OVERWRITE = 1048576;
export const SYMOPT_IGNORE_IMAGEDIR = 2097152;
export const SYMOPT_FLAT_DIRECTORY = 4194304;
export const SYMOPT_FAVOR_COMPRESSED = 8388608;
export const SYMOPT_ALLOW_ZERO_ADDRESS = 16777216;
export const SYMOPT_DISABLE_SYMSRV_AUTODETECT = 33554432;
export const SYMOPT_READONLY_CACHE = 67108864;
export const SYMOPT_SYMPATH_LAST = 134217728;
export const SYMOPT_DISABLE_FAST_SYMBOLS = 268435456;
export const SYMOPT_DISABLE_SYMSRV_TIMEOUT = 536870912;
export const SYMOPT_DISABLE_SRVSTAR_ON_STARTUP = 1073741824;
export const SYMOPT_DEBUG = 2147483648;
export const SYM_INLINE_COMP_ERROR = 0;
export const SYM_INLINE_COMP_IDENTICAL = 1;
export const SYM_INLINE_COMP_STEPIN = 2;
export const SYM_INLINE_COMP_STEPOUT = 3;
export const SYM_INLINE_COMP_STEPOVER = 4;
export const SYM_INLINE_COMP_DIFFERENT = 5;
export const ESLFLAG_FULLPATH = 1;
export const ESLFLAG_NEAREST = 2;
export const ESLFLAG_PREV = 4;
export const ESLFLAG_NEXT = 8;
export const ESLFLAG_INLINE_SITE = 16;
export const SYMENUM_OPTIONS_DEFAULT = 1;
export const SYMENUM_OPTIONS_INLINE = 2;
export const SYMSEARCH_MASKOBJS = 1;
export const SYMSEARCH_RECURSE = 2;
export const SYMSEARCH_GLOBALSONLY = 4;
export const SYMSEARCH_ALLITEMS = 8;
export const EXT_OUTPUT_VER = 1;
export const SYMSRV_VERSION = 2;
export const SSRVOPT_CALLBACK = 1;
export const SSRVOPT_OLDGUIDPTR = 16;
export const SSRVOPT_UNATTENDED = 32;
export const SSRVOPT_NOCOPY = 64;
export const SSRVOPT_GETPATH = 64;
export const SSRVOPT_PARENTWIN = 128;
export const SSRVOPT_PARAMTYPE = 256;
export const SSRVOPT_SECURE = 512;
export const SSRVOPT_TRACE = 1024;
export const SSRVOPT_SETCONTEXT = 2048;
export const SSRVOPT_PROXY = 4096;
export const SSRVOPT_DOWNSTREAM_STORE = 8192;
export const SSRVOPT_OVERWRITE = 16384;
export const SSRVOPT_RESETTOU = 32768;
export const SSRVOPT_CALLBACKW = 65536;
export const SSRVOPT_FLAT_DEFAULT_STORE = 131072;
export const SSRVOPT_PROXYW = 262144;
export const SSRVOPT_MESSAGE = 524288;
export const SSRVOPT_SERVICE = 1048576;
export const SSRVOPT_FAVOR_COMPRESSED = 2097152;
export const SSRVOPT_STRING = 4194304;
export const SSRVOPT_WINHTTP = 8388608;
export const SSRVOPT_WININET = 16777216;
export const SSRVOPT_DONT_UNCOMPRESS = 33554432;
export const SSRVOPT_DISABLE_PING_HOST = 67108864;
export const SSRVOPT_DISABLE_TIMEOUT = 134217728;
export const SSRVOPT_ENABLE_COMM_MSG = 268435456;
export const SSRVOPT_URI_FILTER = 536870912;
export const SSRVOPT_URI_TIERS = 1073741824;
export const SSRVOPT_RETRY_APP_HANG = 2147483648;
export const SSRVOPT_MAX = 2147483648;
export const NUM_SSRVOPTS = 32;
export const SSRVURI_HTTP_NORMAL = 1;
export const SSRVURI_HTTP_COMPRESSED = 2;
export const SSRVURI_HTTP_FILEPTR = 4;
export const SSRVURI_UNC_NORMAL = 16;
export const SSRVURI_UNC_COMPRESSED = 32;
export const SSRVURI_UNC_FILEPTR = 64;
export const SSRVURI_HTTP_MASK = 15;
export const SSRVURI_UNC_MASK = 240;
export const SSRVURI_ALL = 255;
export const SSRVURI_NORMAL = 1;
export const SSRVURI_COMPRESSED = 2;
export const SSRVURI_FILEPTR = 4;
export const SSRVACTION_TRACE = 1;
export const SSRVACTION_QUERYCANCEL = 2;
export const SSRVACTION_EVENT = 3;
export const SSRVACTION_EVENTW = 4;
export const SSRVACTION_SIZE = 5;
export const SSRVACTION_HTTPSTATUS = 6;
export const SSRVACTION_XMLOUTPUT = 7;
export const SSRVACTION_CHECKSUMSTATUS = 8;
export const SYMSTOREOPT_ALT_INDEX = 16;
export const SYMSTOREOPT_UNICODE = 32;
export const SYMF_OMAP_GENERATED = 1;
export const SYMF_OMAP_MODIFIED = 2;
export const SYMF_REGISTER = 8;
export const SYMF_REGREL = 16;
export const SYMF_FRAMEREL = 32;
export const SYMF_PARAMETER = 64;
export const SYMF_LOCAL = 128;
export const SYMF_CONSTANT = 256;
export const SYMF_EXPORT = 512;
export const SYMF_FORWARDER = 1024;
export const SYMF_FUNCTION = 2048;
export const SYMF_VIRTUAL = 4096;
export const SYMF_THUNK = 8192;
export const SYMF_TLSREL = 16384;
export const IMAGEHLP_SYMBOL_INFO_VALUEPRESENT = 1;
export const IMAGEHLP_SYMBOL_INFO_REGISTER = 8;
export const IMAGEHLP_SYMBOL_INFO_REGRELATIVE = 16;
export const IMAGEHLP_SYMBOL_INFO_FRAMERELATIVE = 32;
export const IMAGEHLP_SYMBOL_INFO_PARAMETER = 64;
export const IMAGEHLP_SYMBOL_INFO_LOCAL = 128;
export const IMAGEHLP_SYMBOL_INFO_CONSTANT = 256;
export const IMAGEHLP_SYMBOL_FUNCTION = 2048;
export const IMAGEHLP_SYMBOL_VIRTUAL = 4096;
export const IMAGEHLP_SYMBOL_THUNK = 8192;
export const IMAGEHLP_SYMBOL_INFO_TLSRELATIVE = 16384;
export const IMAGEHLP_RMAP_MAPPED_FLAT = 1;
export const IMAGEHLP_RMAP_BIG_ENDIAN = 2;
export const IMAGEHLP_RMAP_IGNORE_MISCOMPARE = 4;
export const IMAGEHLP_RMAP_FIXUP_ARM64X = 268435456;
export const IMAGEHLP_RMAP_LOAD_RW_DATA_SECTIONS = 536870912;
export const IMAGEHLP_RMAP_OMIT_SHARED_RW_DATA_SECTIONS = 1073741824;
export const IMAGEHLP_RMAP_FIXUP_IMAGEBASE = 2147483648;
export const WCT_MAX_NODE_COUNT = 16;
export const WCT_OBJNAME_LENGTH = 128;
export const WCT_NETWORK_IO_FLAG = 8;
export const RESTORE_LAST_ERROR_NAME_A = `RestoreLastError`;
export const RESTORE_LAST_ERROR_NAME_W = `RestoreLastError`;
export const RESTORE_LAST_ERROR_NAME = `RestoreLastError`;
export const APPBREAKFLAG_DEBUGGER_BLOCK = 1;
export const APPBREAKFLAG_DEBUGGER_HALT = 2;
export const APPBREAKFLAG_STEP = 65536;
export const APPBREAKFLAG_NESTED = 131072;
export const APPBREAKFLAG_STEPTYPE_SOURCE = 0;
export const APPBREAKFLAG_STEPTYPE_BYTECODE = 1048576;
export const APPBREAKFLAG_STEPTYPE_MACHINE = 2097152;
export const APPBREAKFLAG_STEPTYPE_MASK = 15728640;
export const APPBREAKFLAG_IN_BREAKPOINT = 2147483648;
export const SOURCETEXT_ATTR_KEYWORD = 1;
export const SOURCETEXT_ATTR_COMMENT = 2;
export const SOURCETEXT_ATTR_NONSOURCE = 4;
export const SOURCETEXT_ATTR_OPERATOR = 8;
export const SOURCETEXT_ATTR_NUMBER = 16;
export const SOURCETEXT_ATTR_STRING = 32;
export const SOURCETEXT_ATTR_FUNCTION_START = 64;
export const TEXT_DOC_ATTR_READONLY = 1;
export const TEXT_DOC_ATTR_TYPE_PRIMARY = 2;
export const TEXT_DOC_ATTR_TYPE_WORKER = 4;
export const TEXT_DOC_ATTR_TYPE_SCRIPT = 8;
export const DEBUG_TEXT_ISEXPRESSION = 1;
export const DEBUG_TEXT_RETURNVALUE = 2;
export const DEBUG_TEXT_NOSIDEEFFECTS = 4;
export const DEBUG_TEXT_ALLOWBREAKPOINTS = 8;
export const DEBUG_TEXT_ALLOWERRORREPORT = 16;
export const DEBUG_TEXT_EVALUATETOCODECONTEXT = 32;
export const DEBUG_TEXT_ISNONUSERCODE = 64;
export const THREAD_STATE_RUNNING = 1;
export const THREAD_STATE_SUSPENDED = 2;
export const THREAD_BLOCKED = 4;
export const THREAD_OUT_OF_CONTEXT = 8;
export const FACILITY_JsDEBUG = 3527;
export const E_JsDEBUG_MISMATCHED_RUNTIME = 14339463432129413121n;
export const E_JsDEBUG_UNKNOWN_THREAD = 14339465631152668674n;
export const E_JsDEBUG_OUTSIDE_OF_VM = 14339466730664296452n;
export const E_JsDEBUG_INVALID_MEMORY_ADDRESS = 14339467830175924229n;
export const E_JsDEBUG_SOURCE_LOCATION_NOT_FOUND = 14339468929687552006n;
export const E_JsDEBUG_RUNTIME_NOT_IN_DEBUG_MODE = 2454461816475418631n;
export const DMP_PHYSICAL_MEMORY_BLOCK_SIZE_32 = 700;
export const DMP_CONTEXT_RECORD_SIZE_32 = 1200;
export const DMP_RESERVED_0_SIZE_32 = 1760;
export const DMP_RESERVED_2_SIZE_32 = 16;
export const DMP_RESERVED_3_SIZE_32 = 56;
export const DMP_PHYSICAL_MEMORY_BLOCK_SIZE_64 = 700;
export const DMP_CONTEXT_RECORD_SIZE_64 = 3000;
export const DMP_RESERVED_0_SIZE_64 = 4008;
export const DMP_HEADER_COMMENT_SIZE = 128;
export const DUMP_SUMMARY_VALID_KERNEL_VA = 1;
export const DUMP_SUMMARY_VALID_CURRENT_USER_VA = 2;
export const INTERFACESAFE_FOR_UNTRUSTED_CALLER = 1;
export const INTERFACESAFE_FOR_UNTRUSTED_DATA = 2;
export const INTERFACE_USES_DISPEX = 4;
export const INTERFACE_USES_SECURITY_MANAGER = 8;
export const WHEA_ERROR_SOURCE_DESCRIPTOR_VERSION_10 = 10;
export const WHEA_ERROR_SOURCE_DESCRIPTOR_VERSION_11 = 11;
export const WHEA_MAX_MC_BANKS = 32;
export const WHEA_ERROR_SOURCE_FLAG_FIRMWAREFIRST = 1;
export const WHEA_ERROR_SOURCE_FLAG_GLOBAL = 2;
export const WHEA_ERROR_SOURCE_FLAG_GHES_ASSIST = 4;
export const WHEA_ERROR_SOURCE_FLAG_DEFAULTSOURCE = 2147483648;
export const WHEA_ERROR_SOURCE_INVALID_RELATED_SOURCE = 65535;
export const WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_XPFMCE = 0;
export const WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_XPFCMC = 1;
export const WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_XPFNMI = 2;
export const WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_IPFMCA = 3;
export const WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_IPFCMC = 4;
export const WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_IPFCPE = 5;
export const WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_AERROOTPORT = 6;
export const WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_AERENDPOINT = 7;
export const WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_AERBRIDGE = 8;
export const WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_GENERIC = 9;
export const WHEA_ERROR_SOURCE_DESCRIPTOR_TYPE_GENERIC_V2 = 10;
export const WHEA_XPF_MC_BANK_STATUSFORMAT_IA32MCA = 0;
export const WHEA_XPF_MC_BANK_STATUSFORMAT_Intel64MCA = 1;
export const WHEA_XPF_MC_BANK_STATUSFORMAT_AMD64MCA = 2;
export const WHEA_NOTIFICATION_TYPE_POLLED = 0;
export const WHEA_NOTIFICATION_TYPE_EXTERNALINTERRUPT = 1;
export const WHEA_NOTIFICATION_TYPE_LOCALINTERRUPT = 2;
export const WHEA_NOTIFICATION_TYPE_SCI = 3;
export const WHEA_NOTIFICATION_TYPE_NMI = 4;
export const WHEA_NOTIFICATION_TYPE_CMCI = 5;
export const WHEA_NOTIFICATION_TYPE_MCE = 6;
export const WHEA_NOTIFICATION_TYPE_GPIO_SIGNAL = 7;
export const WHEA_NOTIFICATION_TYPE_ARMV8_SEA = 8;
export const WHEA_NOTIFICATION_TYPE_ARMV8_SEI = 9;
export const WHEA_NOTIFICATION_TYPE_EXTERNALINTERRUPT_GSIV = 10;
export const WHEA_NOTIFICATION_TYPE_SDEI = 11;
export const WHEA_DEVICE_DRIVER_CONFIG_V1 = 1;
export const WHEA_DEVICE_DRIVER_CONFIG_V2 = 2;
export const WHEA_DEVICE_DRIVER_CONFIG_MIN = 1;
export const WHEA_DEVICE_DRIVER_CONFIG_MAX = 2;
export const WHEA_DEVICE_DRIVER_BUFFER_SET_V1 = 1;
export const WHEA_DEVICE_DRIVER_BUFFER_SET_MIN = 1;
export const WHEA_DEVICE_DRIVER_BUFFER_SET_MAX = 1;
export const WHEA_DISABLE_OFFLINE = 0;
export const WHEA_MEM_PERSISTOFFLINE = 1;
export const WHEA_MEM_PFA_DISABLE = 2;
export const WHEA_MEM_PFA_PAGECOUNT = 3;
export const WHEA_MEM_PFA_THRESHOLD = 4;
export const WHEA_MEM_PFA_TIMEOUT = 5;
export const WHEA_DISABLE_DUMMY_WRITE = 6;
export const WHEA_RESTORE_CMCI_ENABLED = 7;
export const WHEA_RESTORE_CMCI_ATTEMPTS = 8;
export const WHEA_RESTORE_CMCI_ERR_LIMIT = 9;
export const WHEA_CMCI_THRESHOLD_COUNT = 10;
export const WHEA_CMCI_THRESHOLD_TIME = 11;
export const WHEA_CMCI_THRESHOLD_POLL_COUNT = 12;
export const WHEA_PENDING_PAGE_LIST_SZ = 13;
export const WHEA_BAD_PAGE_LIST_MAX_SIZE = 14;
export const WHEA_BAD_PAGE_LIST_LOCATION = 15;
export const WHEA_NOTIFY_ALL_OFFLINES = 16;
export const IPMI_OS_SEL_RECORD_VERSION_1 = 1;
export const IPMI_OS_SEL_RECORD_VERSION = 1;
export const IPMI_IOCTL_INDEX = 1024;
export const IOCTL_IPMI_INTERNAL_RECORD_SEL_EVENT = 2232320;
export const IPMI_OS_SEL_RECORD_MASK = 65535;
export const DBGKD_SIMULATION_NONE = 0;
export const DBGKD_SIMULATION_EXDI = 1;
export const ACTIVPROF_E_PROFILER_PRESENT = 288827430293209600n;
export const ACTIVPROF_E_PROFILER_ABSENT = 288795544456004097n;
export const ACTIVPROF_E_UNABLE_TO_APPLY_ACTION = 1187558720002;
export const PROFILER_HEAP_OBJECT_NAME_ID_UNAVAILABLE = 4294967295;
export const sevMax = 4;
export const fasaPreferInternalHandler = 1;
export const fasaSupportInternalHandler = 2;
export const fasaCaseSensitive = 4;
export const SCRIPT_CMPL_NOLIST = 0;
export const SCRIPT_CMPL_MEMBERLIST = 1;
export const SCRIPT_CMPL_ENUMLIST = 2;
export const SCRIPT_CMPL_PARAMTIP = 4;
export const SCRIPT_CMPL_GLOBALLIST = 8;
export const SCRIPT_CMPL_ENUM_TRIGGER = 1;
export const SCRIPT_CMPL_MEMBER_TRIGGER = 2;
export const SCRIPT_CMPL_PARAM_TRIGGER = 3;
export const SCRIPT_CMPL_COMMIT = 4;
export const GETATTRTYPE_NORMAL = 0;
export const GETATTRTYPE_DEPSCAN = 1;
export const GETATTRFLAG_THIS = 256;
export const GETATTRFLAG_HUMANTEXT = 32768;
export const SOURCETEXT_ATTR_HUMANTEXT = 32768;
export const SOURCETEXT_ATTR_IDENTIFIER = 256;
export const SOURCETEXT_ATTR_MEMBERLOOKUP = 512;
export const SOURCETEXT_ATTR_THIS = 1024;
export const ObjectPropertyAccessor = 0;
export const ObjectContext = 1;
export const ObjectTargetObject = 2;
export const ObjectTargetObjectReference = 3;
export const ObjectSynthetic = 4;
export const ObjectNoValue = 5;
export const ObjectError = 6;
export const ObjectIntrinsic = 7;
export const ObjectMethod = 8;
export const ObjectKeyReference = 9;
export const Symbol = 0;
export const SymbolModule = 1;
export const SymbolType = 2;
export const SymbolField = 3;
export const SymbolConstant = 4;
export const SymbolData = 5;
export const SymbolBaseClass = 6;
export const SymbolPublic = 7;
export const SymbolFunction = 8;
export const TypeUDT = 0;
export const TypePointer = 1;
export const TypeMemberPointer = 2;
export const TypeArray = 3;
export const TypeFunction = 4;
export const TypeTypedef = 5;
export const TypeEnum = 6;
export const TypeIntrinsic = 7;
export const TypeExtendedArray = 8;
export const IntrinsicVoid = 0;
export const IntrinsicBool = 1;
export const IntrinsicChar = 2;
export const IntrinsicWChar = 3;
export const IntrinsicInt = 4;
export const IntrinsicUInt = 5;
export const IntrinsicLong = 6;
export const IntrinsicULong = 7;
export const IntrinsicFloat = 8;
export const IntrinsicHRESULT = 9;
export const IntrinsicChar16 = 10;
export const IntrinsicChar32 = 11;
export const PointerStandard = 0;
export const PointerReference = 1;
export const PointerRValueReference = 2;
export const PointerCXHat = 3;
export const PointerManagedReference = 4;
export const CallingConventionUnknown = 0;
export const CallingConventionCDecl = 1;
export const CallingConventionFastCall = 2;
export const CallingConventionStdCall = 3;
export const CallingConventionSysCall = 4;
export const CallingConventionThisCall = 5;
export const LocationMember = 0;
export const LocationStatic = 1;
export const LocationConstant = 2;
export const LocationNone = 3;
export const FormatNone = 0;
export const FormatSingleCharacter = 1;
export const FormatQuotedString = 2;
export const FormatString = 3;
export const FormatQuotedUnicodeString = 4;
export const FormatUnicodeString = 5;
export const FormatQuotedUTF8String = 6;
export const FormatUTF8String = 7;
export const FormatBSTRString = 8;
export const FormatQuotedHString = 9;
export const FormatHString = 10;
export const FormatRaw = 11;
export const FormatEnumNameOnly = 12;
export const FormatEscapedStringWithQuote = 13;
export const FormatUTF32String = 14;
export const FormatQuotedUTF32String = 15;
export const RawSearchNone = 0;
export const RawSearchNoBases = 1;
export const ErrorClassWarning = 0;
export const ErrorClassError = 1;
export const Unrelated = 0;
export const Ambiguous = 1;
export const LessSpecific = 2;
export const MoreSpecific = 3;
export const Identical = 4;
export const SymbolSearchNone = 0;
export const SymbolSearchCompletion = 1;
export const SymbolSearchCaseInsensitive = 2;
export const LanguageUnknown = 0;
export const LanguageC = 1;
export const LanguageCPP = 2;
export const LanguageAssembly = 3;
export const VarArgsNone = 0;
export const VarArgsCStyle = 1;
export const ScriptRename = 0;
export const ScriptDebugNoDebugger = 0;
export const ScriptDebugNotExecuting = 1;
export const ScriptDebugExecuting = 2;
export const ScriptDebugBreak = 3;
export const ScriptDebugEventFilterEntry = 0;
export const ScriptDebugEventFilterException = 1;
export const ScriptDebugEventFilterUnhandledException = 2;
export const ScriptDebugEventFilterAbort = 3;
export const ScriptDebugBreakpoint = 0;
export const ScriptDebugStep = 1;
export const ScriptDebugException = 2;
export const ScriptDebugAsyncBreak = 3;
export const ScriptExecutionNormal = 0;
export const ScriptExecutionStepIn = 1;
export const ScriptExecutionStepOut = 2;
export const ScriptExecutionStepOver = 3;
export const EXT_TDOP_COPY = 0;
export const EXT_TDOP_RELEASE = 1;
export const EXT_TDOP_SET_FROM_EXPR = 2;
export const EXT_TDOP_SET_FROM_U64_EXPR = 3;
export const EXT_TDOP_GET_FIELD = 4;
export const EXT_TDOP_EVALUATE = 5;
export const EXT_TDOP_GET_TYPE_NAME = 6;
export const EXT_TDOP_OUTPUT_TYPE_NAME = 7;
export const EXT_TDOP_OUTPUT_SIMPLE_VALUE = 8;
export const EXT_TDOP_OUTPUT_FULL_VALUE = 9;
export const EXT_TDOP_HAS_FIELD = 10;
export const EXT_TDOP_GET_FIELD_OFFSET = 11;
export const EXT_TDOP_GET_ARRAY_ELEMENT = 12;
export const EXT_TDOP_GET_DEREFERENCE = 13;
export const EXT_TDOP_GET_TYPE_SIZE = 14;
export const EXT_TDOP_OUTPUT_TYPE_DEFINITION = 15;
export const EXT_TDOP_GET_POINTER_TO = 16;
export const EXT_TDOP_SET_FROM_TYPE_ID_AND_U64 = 17;
export const EXT_TDOP_SET_PTR_FROM_TYPE_ID_AND_U64 = 18;
export const EXT_TDOP_COUNT = 19;
export const DBGKD_MAJOR_NT = 0;
export const DBGKD_MAJOR_XBOX = 1;
export const DBGKD_MAJOR_BIG = 2;
export const DBGKD_MAJOR_EXDI = 3;
export const DBGKD_MAJOR_NTBD = 4;
export const DBGKD_MAJOR_EFI = 5;
export const DBGKD_MAJOR_TNT = 6;
export const DBGKD_MAJOR_SINGULARITY = 7;
export const DBGKD_MAJOR_HYPERVISOR = 8;
export const DBGKD_MAJOR_MIDORI = 9;
export const DBGKD_MAJOR_CE = 10;
export const DBGKD_MAJOR_COUNT = 11;
export const IMAGE_FILE_MACHINE_AXP64 = 644;
export const IMAGE_FILE_MACHINE_I386 = 332;
export const IMAGE_FILE_MACHINE_IA64 = 512;
export const IMAGE_FILE_MACHINE_AMD64 = 34404;
export const IMAGE_FILE_MACHINE_UNKNOWN = 0;
export const IMAGE_FILE_MACHINE_TARGET_HOST = 1;
export const IMAGE_FILE_MACHINE_R3000 = 354;
export const IMAGE_FILE_MACHINE_R4000 = 358;
export const IMAGE_FILE_MACHINE_R10000 = 360;
export const IMAGE_FILE_MACHINE_WCEMIPSV2 = 361;
export const IMAGE_FILE_MACHINE_ALPHA = 388;
export const IMAGE_FILE_MACHINE_SH3 = 418;
export const IMAGE_FILE_MACHINE_SH3DSP = 419;
export const IMAGE_FILE_MACHINE_SH3E = 420;
export const IMAGE_FILE_MACHINE_SH4 = 422;
export const IMAGE_FILE_MACHINE_SH5 = 424;
export const IMAGE_FILE_MACHINE_ARM = 448;
export const IMAGE_FILE_MACHINE_THUMB = 450;
export const IMAGE_FILE_MACHINE_ARMNT = 452;
export const IMAGE_FILE_MACHINE_AM33 = 467;
export const IMAGE_FILE_MACHINE_POWERPC = 496;
export const IMAGE_FILE_MACHINE_POWERPCFP = 497;
export const IMAGE_FILE_MACHINE_MIPS16 = 614;
export const IMAGE_FILE_MACHINE_ALPHA64 = 644;
export const IMAGE_FILE_MACHINE_MIPSFPU = 870;
export const IMAGE_FILE_MACHINE_MIPSFPU16 = 1126;
export const IMAGE_FILE_MACHINE_TRICORE = 1312;
export const IMAGE_FILE_MACHINE_CEF = 3311;
export const IMAGE_FILE_MACHINE_EBC = 3772;
export const IMAGE_FILE_MACHINE_M32R = 36929;
export const IMAGE_FILE_MACHINE_ARM64 = 43620;
export const IMAGE_FILE_MACHINE_CEE = 49390;
export const WctCriticalSectionType = 1;
export const WctSendMessageType = 2;
export const WctMutexType = 3;
export const WctAlpcType = 4;
export const WctComType = 5;
export const WctThreadWaitType = 6;
export const WctProcessWaitType = 7;
export const WctThreadType = 8;
export const WctComActivationType = 9;
export const WctUnknownType = 10;
export const WctSocketIoType = 11;
export const WctSmbIoType = 12;
export const WctMaxType = 13;
export const WctStatusNoAccess = 1;
export const WctStatusRunning = 2;
export const WctStatusBlocked = 3;
export const WctStatusPidOnly = 4;
export const WctStatusPidOnlyRpcss = 5;
export const WctStatusOwned = 6;
export const WctStatusNotOwned = 7;
export const WctStatusAbandoned = 8;
export const WctStatusUnknown = 9;
export const WctStatusError = 10;
export const WctStatusMax = 11;
export const UnusedStream = 0;
export const ReservedStream0 = 1;
export const ReservedStream1 = 2;
export const ThreadListStream = 3;
export const ModuleListStream = 4;
export const MemoryListStream = 5;
export const ExceptionStream = 6;
export const SystemInfoStream = 7;
export const ThreadExListStream = 8;
export const Memory64ListStream = 9;
export const CommentStreamA = 10;
export const CommentStreamW = 11;
export const HandleDataStream = 12;
export const FunctionTableStream = 13;
export const UnloadedModuleListStream = 14;
export const MiscInfoStream = 15;
export const MemoryInfoListStream = 16;
export const ThreadInfoListStream = 17;
export const HandleOperationListStream = 18;
export const TokenStream = 19;
export const JavaScriptDataStream = 20;
export const SystemMemoryInfoStream = 21;
export const ProcessVmCountersStream = 22;
export const IptTraceStream = 23;
export const ThreadNamesStream = 24;
export const ceStreamNull = 32768;
export const ceStreamSystemInfo = 32769;
export const ceStreamException = 32770;
export const ceStreamModuleList = 32771;
export const ceStreamProcessList = 32772;
export const ceStreamThreadList = 32773;
export const ceStreamThreadContextList = 32774;
export const ceStreamThreadCallStackList = 32775;
export const ceStreamMemoryVirtualList = 32776;
export const ceStreamMemoryPhysicalList = 32777;
export const ceStreamBucketParameters = 32778;
export const ceStreamProcessModuleMap = 32779;
export const ceStreamDiagnosisList = 32780;
export const LastReservedStream = 65535;
export const VS_FF_DEBUG = 1;
export const VS_FF_PRERELEASE = 2;
export const VS_FF_PATCHED = 4;
export const VS_FF_PRIVATEBUILD = 8;
export const VS_FF_INFOINFERRED = 16;
export const VS_FF_SPECIALBUILD = 32;
export const VOS_UNKNOWN = 0;
export const VOS_DOS = 65536;
export const VOS_OS216 = 131072;
export const VOS_OS232 = 196608;
export const VOS_NT = 262144;
export const VOS_WINCE = 327680;
export const VOS__BASE = 0;
export const VOS__WINDOWS16 = 1;
export const VOS__PM16 = 2;
export const VOS__PM32 = 3;
export const VOS__WINDOWS32 = 4;
export const VOS_DOS_WINDOWS16 = 65537;
export const VOS_DOS_WINDOWS32 = 65540;
export const VOS_OS216_PM16 = 131074;
export const VOS_OS232_PM32 = 196611;
export const VOS_NT_WINDOWS32 = 262148;
export const VFT_UNKNOWN = 0;
export const VFT_APP = 1;
export const VFT_DLL = 2;
export const VFT_DRV = 3;
export const VFT_FONT = 4;
export const VFT_VXD = 5;
export const VFT_STATIC_LIB = 7;
export const VFT2_UNKNOWN = 0;
export const VFT2_DRV_PRINTER = 1;
export const VFT2_DRV_KEYBOARD = 2;
export const VFT2_DRV_LANGUAGE = 3;
export const VFT2_DRV_DISPLAY = 4;
export const VFT2_DRV_MOUSE = 5;
export const VFT2_DRV_NETWORK = 6;
export const VFT2_DRV_SYSTEM = 7;
export const VFT2_DRV_INSTALLABLE = 8;
export const VFT2_DRV_SOUND = 9;
export const VFT2_DRV_COMM = 10;
export const VFT2_DRV_INPUTMETHOD = 11;
export const VFT2_DRV_VERSIONED_PRINTER = 12;
export const VFT2_FONT_RASTER = 1;
export const VFT2_FONT_VECTOR = 2;
export const VFT2_FONT_TRUETYPE = 3;
export const MiniHandleObjectInformationNone = 0;
export const MiniThreadInformation1 = 1;
export const MiniMutantInformation1 = 2;
export const MiniMutantInformation2 = 3;
export const MiniProcessInformation1 = 4;
export const MiniProcessInformation2 = 5;
export const MiniEventInformation1 = 6;
export const MiniSectionInformation1 = 7;
export const MiniSemaphoreInformation1 = 8;
export const MiniHandleObjectInformationTypeMax = 9;
export const MEM_COMMIT = 4096;
export const MEM_RESERVE = 8192;
export const MEM_RESET = 524288;
export const MEM_RESET_UNDO = 16777216;
export const MEM_REPLACE_PLACEHOLDER = 16384;
export const MEM_LARGE_PAGES = 536870912;
export const MEM_RESERVE_PLACEHOLDER = 262144;
export const MEM_FREE = 65536;
export const ModuleCallback = 0;
export const ThreadCallback = 1;
export const ThreadExCallback = 2;
export const IncludeThreadCallback = 3;
export const IncludeModuleCallback = 4;
export const MemoryCallback = 5;
export const CancelCallback = 6;
export const WriteKernelMinidumpCallback = 7;
export const KernelMinidumpStatusCallback = 8;
export const RemoveMemoryCallback = 9;
export const IncludeVmRegionCallback = 10;
export const IoStartCallback = 11;
export const IoWriteAllCallback = 12;
export const IoFinishCallback = 13;
export const ReadMemoryFailureCallback = 14;
export const SecondaryFlagsCallback = 15;
export const IsProcessSnapshotCallback = 16;
export const VmStartCallback = 17;
export const VmQueryCallback = 18;
export const VmPreReadCallback = 19;
export const VmPostReadCallback = 20;
export const ThreadWriteThread = 1;
export const ThreadWriteStack = 2;
export const ThreadWriteContext = 4;
export const ThreadWriteBackingStore = 8;
export const ThreadWriteInstructionWindow = 16;
export const ThreadWriteThreadData = 32;
export const ThreadWriteThreadInfo = 64;
export const ModuleWriteModule = 1;
export const ModuleWriteDataSeg = 2;
export const ModuleWriteMiscRecord = 4;
export const ModuleWriteCvRecord = 8;
export const ModuleReferencedByMemory = 16;
export const ModuleWriteTlsData = 32;
export const ModuleWriteCodeSegs = 64;
export const MiniDumpNormal = 0;
export const MiniDumpWithDataSegs = 1;
export const MiniDumpWithFullMemory = 2;
export const MiniDumpWithHandleData = 4;
export const MiniDumpFilterMemory = 8;
export const MiniDumpScanMemory = 16;
export const MiniDumpWithUnloadedModules = 32;
export const MiniDumpWithIndirectlyReferencedMemory = 64;
export const MiniDumpFilterModulePaths = 128;
export const MiniDumpWithProcessThreadData = 256;
export const MiniDumpWithPrivateReadWriteMemory = 512;
export const MiniDumpWithoutOptionalData = 1024;
export const MiniDumpWithFullMemoryInfo = 2048;
export const MiniDumpWithThreadInfo = 4096;
export const MiniDumpWithCodeSegs = 8192;
export const MiniDumpWithoutAuxiliaryState = 16384;
export const MiniDumpWithFullAuxiliaryState = 32768;
export const MiniDumpWithPrivateWriteCopyMemory = 65536;
export const MiniDumpIgnoreInaccessibleMemory = 131072;
export const MiniDumpWithTokenInformation = 262144;
export const MiniDumpWithModuleHeaders = 524288;
export const MiniDumpFilterTriage = 1048576;
export const MiniDumpWithAvxXStateContext = 2097152;
export const MiniDumpWithIptTrace = 4194304;
export const MiniDumpScanInaccessiblePartialPages = 8388608;
export const MiniDumpFilterWriteCombinedMemory = 16777216;
export const MiniDumpValidTypeFlags = 33554431;
export const MiniSecondaryWithoutPowerInfo = 1;
export const MiniSecondaryValidFlags = 1;
export const SCRIPTLANGUAGEVERSION_DEFAULT = 0;
export const SCRIPTLANGUAGEVERSION_5_7 = 1;
export const SCRIPTLANGUAGEVERSION_5_8 = 2;
export const SCRIPTLANGUAGEVERSION_MAX = 255;
export const SCRIPTSTATE_UNINITIALIZED = 0;
export const SCRIPTSTATE_INITIALIZED = 5;
export const SCRIPTSTATE_STARTED = 1;
export const SCRIPTSTATE_CONNECTED = 2;
export const SCRIPTSTATE_DISCONNECTED = 3;
export const SCRIPTSTATE_CLOSED = 4;
export const SCRIPTTRACEINFO_SCRIPTSTART = 0;
export const SCRIPTTRACEINFO_SCRIPTEND = 1;
export const SCRIPTTRACEINFO_COMCALLSTART = 2;
export const SCRIPTTRACEINFO_COMCALLEND = 3;
export const SCRIPTTRACEINFO_CREATEOBJSTART = 4;
export const SCRIPTTRACEINFO_CREATEOBJEND = 5;
export const SCRIPTTRACEINFO_GETOBJSTART = 6;
export const SCRIPTTRACEINFO_GETOBJEND = 7;
export const SCRIPTTHREADSTATE_NOTINSCRIPT = 0;
export const SCRIPTTHREADSTATE_RUNNING = 1;
export const SCRIPTGCTYPE_NORMAL = 0;
export const SCRIPTGCTYPE_EXHAUSTIVE = 1;
export const SCRIPTUICITEM_INPUTBOX = 1;
export const SCRIPTUICITEM_MSGBOX = 2;
export const SCRIPTUICHANDLING_ALLOW = 0;
export const SCRIPTUICHANDLING_NOUIERROR = 1;
export const SCRIPTUICHANDLING_NOUIDEFAULT = 2;
export const DBGPROP_ATTRIB_NO_ATTRIB = 0;
export const DBGPROP_ATTRIB_VALUE_IS_INVALID = 8;
export const DBGPROP_ATTRIB_VALUE_IS_EXPANDABLE = 16;
export const DBGPROP_ATTRIB_VALUE_IS_FAKE = 32;
export const DBGPROP_ATTRIB_VALUE_IS_METHOD = 256;
export const DBGPROP_ATTRIB_VALUE_IS_EVENT = 512;
export const DBGPROP_ATTRIB_VALUE_IS_RAW_STRING = 1024;
export const DBGPROP_ATTRIB_VALUE_READONLY = 2048;
export const DBGPROP_ATTRIB_ACCESS_PUBLIC = 4096;
export const DBGPROP_ATTRIB_ACCESS_PRIVATE = 8192;
export const DBGPROP_ATTRIB_ACCESS_PROTECTED = 16384;
export const DBGPROP_ATTRIB_ACCESS_FINAL = 32768;
export const DBGPROP_ATTRIB_STORAGE_GLOBAL = 65536;
export const DBGPROP_ATTRIB_STORAGE_STATIC = 131072;
export const DBGPROP_ATTRIB_STORAGE_FIELD = 262144;
export const DBGPROP_ATTRIB_STORAGE_VIRTUAL = 524288;
export const DBGPROP_ATTRIB_TYPE_IS_CONSTANT = 1048576;
export const DBGPROP_ATTRIB_TYPE_IS_SYNCHRONIZED = 2097152;
export const DBGPROP_ATTRIB_TYPE_IS_VOLATILE = 4194304;
export const DBGPROP_ATTRIB_HAS_EXTENDED_ATTRIBS = 8388608;
export const DBGPROP_ATTRIB_FRAME_INTRYBLOCK = 16777216;
export const DBGPROP_ATTRIB_FRAME_INCATCHBLOCK = 33554432;
export const DBGPROP_ATTRIB_FRAME_INFINALLYBLOCK = 67108864;
export const DBGPROP_ATTRIB_VALUE_IS_RETURN_VALUE = 134217728;
export const DBGPROP_ATTRIB_VALUE_PENDING_MUTATION = 268435456;
export const DBGPROP_INFO_NAME = 1;
export const DBGPROP_INFO_TYPE = 2;
export const DBGPROP_INFO_VALUE = 4;
export const DBGPROP_INFO_FULLNAME = 32;
export const DBGPROP_INFO_ATTRIBUTES = 8;
export const DBGPROP_INFO_DEBUGPROP = 16;
export const DBGPROP_INFO_BEAUTIFY = 33554432;
export const DBGPROP_INFO_CALLTOSTRING = 67108864;
export const DBGPROP_INFO_AUTOEXPAND = 134217728;
export const OBJECT_ATTRIB_NO_ATTRIB = 0;
export const OBJECT_ATTRIB_NO_NAME = 1;
export const OBJECT_ATTRIB_NO_TYPE = 2;
export const OBJECT_ATTRIB_NO_VALUE = 4;
export const OBJECT_ATTRIB_VALUE_IS_INVALID = 8;
export const OBJECT_ATTRIB_VALUE_IS_OBJECT = 16;
export const OBJECT_ATTRIB_VALUE_IS_ENUM = 32;
export const OBJECT_ATTRIB_VALUE_IS_CUSTOM = 64;
export const OBJECT_ATTRIB_OBJECT_IS_EXPANDABLE = 112;
export const OBJECT_ATTRIB_VALUE_HAS_CODE = 128;
export const OBJECT_ATTRIB_TYPE_IS_OBJECT = 256;
export const OBJECT_ATTRIB_TYPE_HAS_CODE = 512;
export const OBJECT_ATTRIB_TYPE_IS_EXPANDABLE = 256;
export const OBJECT_ATTRIB_SLOT_IS_CATEGORY = 1024;
export const OBJECT_ATTRIB_VALUE_READONLY = 2048;
export const OBJECT_ATTRIB_ACCESS_PUBLIC = 4096;
export const OBJECT_ATTRIB_ACCESS_PRIVATE = 8192;
export const OBJECT_ATTRIB_ACCESS_PROTECTED = 16384;
export const OBJECT_ATTRIB_ACCESS_FINAL = 32768;
export const OBJECT_ATTRIB_STORAGE_GLOBAL = 65536;
export const OBJECT_ATTRIB_STORAGE_STATIC = 131072;
export const OBJECT_ATTRIB_STORAGE_FIELD = 262144;
export const OBJECT_ATTRIB_STORAGE_VIRTUAL = 524288;
export const OBJECT_ATTRIB_TYPE_IS_CONSTANT = 1048576;
export const OBJECT_ATTRIB_TYPE_IS_SYNCHRONIZED = 2097152;
export const OBJECT_ATTRIB_TYPE_IS_VOLATILE = 4194304;
export const OBJECT_ATTRIB_HAS_EXTENDED_ATTRIBS = 8388608;
export const OBJECT_ATTRIB_IS_CLASS = 16777216;
export const OBJECT_ATTRIB_IS_FUNCTION = 33554432;
export const OBJECT_ATTRIB_IS_VARIABLE = 67108864;
export const OBJECT_ATTRIB_IS_PROPERTY = 134217728;
export const OBJECT_ATTRIB_IS_MACRO = 268435456;
export const OBJECT_ATTRIB_IS_TYPE = 536870912;
export const OBJECT_ATTRIB_IS_INHERITED = 1073741824;
export const OBJECT_ATTRIB_IS_INTERFACE = `-2147483648`;
export const PROP_INFO_NAME = 1;
export const PROP_INFO_TYPE = 2;
export const PROP_INFO_VALUE = 4;
export const PROP_INFO_FULLNAME = 32;
export const PROP_INFO_ATTRIBUTES = 8;
export const PROP_INFO_DEBUGPROP = 16;
export const PROP_INFO_AUTOEXPAND = 134217728;
export const EX_PROP_INFO_ID = 256;
export const EX_PROP_INFO_NTYPE = 512;
export const EX_PROP_INFO_NVALUE = 1024;
export const EX_PROP_INFO_LOCKBYTES = 2048;
export const EX_PROP_INFO_DEBUGEXTPROP = 4096;
export const BREAKPOINT_DELETED = 0;
export const BREAKPOINT_DISABLED = 1;
export const BREAKPOINT_ENABLED = 2;
export const BREAKREASON_STEP = 0;
export const BREAKREASON_BREAKPOINT = 1;
export const BREAKREASON_DEBUGGER_BLOCK = 2;
export const BREAKREASON_HOST_INITIATED = 3;
export const BREAKREASON_LANGUAGE_INITIATED = 4;
export const BREAKREASON_DEBUGGER_HALT = 5;
export const BREAKREASON_ERROR = 6;
export const BREAKREASON_JIT = 7;
export const BREAKREASON_MUTATION_BREAKPOINT = 8;
export const BREAKRESUMEACTION_ABORT = 0;
export const BREAKRESUMEACTION_CONTINUE = 1;
export const BREAKRESUMEACTION_STEP_INTO = 2;
export const BREAKRESUMEACTION_STEP_OVER = 3;
export const BREAKRESUMEACTION_STEP_OUT = 4;
export const BREAKRESUMEACTION_IGNORE = 5;
export const BREAKRESUMEACTION_STEP_DOCUMENT = 6;
export const ERRORRESUMEACTION_ReexecuteErrorStatement = 0;
export const ERRORRESUMEACTION_AbortCallAndReturnErrorToCaller = 1;
export const ERRORRESUMEACTION_SkipErrorStatement = 2;
export const DOCUMENTNAMETYPE_APPNODE = 0;
export const DOCUMENTNAMETYPE_TITLE = 1;
export const DOCUMENTNAMETYPE_FILE_TAIL = 2;
export const DOCUMENTNAMETYPE_URL = 3;
export const DOCUMENTNAMETYPE_UNIQUE_TITLE = 4;
export const DOCUMENTNAMETYPE_SOURCE_MAP_URL = 5;
export const PROFILER_SCRIPT_TYPE_USER = 0;
export const PROFILER_SCRIPT_TYPE_DYNAMIC = 1;
export const PROFILER_SCRIPT_TYPE_NATIVE = 2;
export const PROFILER_SCRIPT_TYPE_DOM = 3;
export const PROFILER_EVENT_MASK_TRACE_SCRIPT_FUNCTION_CALL = 1;
export const PROFILER_EVENT_MASK_TRACE_NATIVE_FUNCTION_CALL = 2;
export const PROFILER_EVENT_MASK_TRACE_DOM_FUNCTION_CALL = 4;
export const PROFILER_EVENT_MASK_TRACE_ALL = 3;
export const PROFILER_EVENT_MASK_TRACE_ALL_WITH_DOM = 7;
export const PROFILER_HEAP_OBJECT_FLAGS_NEW_OBJECT = 1;
export const PROFILER_HEAP_OBJECT_FLAGS_IS_ROOT = 2;
export const PROFILER_HEAP_OBJECT_FLAGS_SITE_CLOSED = 4;
export const PROFILER_HEAP_OBJECT_FLAGS_EXTERNAL = 8;
export const PROFILER_HEAP_OBJECT_FLAGS_EXTERNAL_UNKNOWN = 16;
export const PROFILER_HEAP_OBJECT_FLAGS_EXTERNAL_DISPATCH = 32;
export const PROFILER_HEAP_OBJECT_FLAGS_SIZE_APPROXIMATE = 64;
export const PROFILER_HEAP_OBJECT_FLAGS_SIZE_UNAVAILABLE = 128;
export const PROFILER_HEAP_OBJECT_FLAGS_NEW_STATE_UNAVAILABLE = 256;
export const PROFILER_HEAP_OBJECT_FLAGS_WINRT_INSTANCE = 512;
export const PROFILER_HEAP_OBJECT_FLAGS_WINRT_RUNTIMECLASS = 1024;
export const PROFILER_HEAP_OBJECT_FLAGS_WINRT_DELEGATE = 2048;
export const PROFILER_HEAP_OBJECT_FLAGS_WINRT_NAMESPACE = 4096;
export const PROFILER_HEAP_OBJECT_OPTIONAL_INFO_PROTOTYPE = 1;
export const PROFILER_HEAP_OBJECT_OPTIONAL_INFO_FUNCTION_NAME = 2;
export const PROFILER_HEAP_OBJECT_OPTIONAL_INFO_SCOPE_LIST = 3;
export const PROFILER_HEAP_OBJECT_OPTIONAL_INFO_INTERNAL_PROPERTY = 4;
export const PROFILER_HEAP_OBJECT_OPTIONAL_INFO_NAME_PROPERTIES = 5;
export const PROFILER_HEAP_OBJECT_OPTIONAL_INFO_INDEX_PROPERTIES = 6;
export const PROFILER_HEAP_OBJECT_OPTIONAL_INFO_ELEMENT_ATTRIBUTES_SIZE = 7;
export const PROFILER_HEAP_OBJECT_OPTIONAL_INFO_ELEMENT_TEXT_CHILDREN_SIZE = 8;
export const PROFILER_HEAP_OBJECT_OPTIONAL_INFO_RELATIONSHIPS = 9;
export const PROFILER_HEAP_OBJECT_OPTIONAL_INFO_WINRTEVENTS = 10;
export const PROFILER_HEAP_OBJECT_OPTIONAL_INFO_WEAKMAP_COLLECTION_LIST = 11;
export const PROFILER_HEAP_OBJECT_OPTIONAL_INFO_MAP_COLLECTION_LIST = 12;
export const PROFILER_HEAP_OBJECT_OPTIONAL_INFO_SET_COLLECTION_LIST = 13;
export const PROFILER_HEAP_OBJECT_OPTIONAL_INFO_MAX_VALUE = 13;
export const PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS_NONE = 0;
export const PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS_IS_GET_ACCESSOR = 65536;
export const PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS_IS_SET_ACCESSOR = 131072;
export const PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS_LET_VARIABLE = 262144;
export const PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS_CONST_VARIABLE = 524288;
export const PROFILER_HEAP_ENUM_FLAGS_NONE = 0;
export const PROFILER_HEAP_ENUM_FLAGS_STORE_RELATIONSHIP_FLAGS = 1;
export const PROFILER_HEAP_ENUM_FLAGS_SUBSTRINGS = 2;
export const PROFILER_HEAP_ENUM_FLAGS_RELATIONSHIP_SUBSTRINGS = 3;
export const PROFILER_PROPERTY_TYPE_NUMBER = 1;
export const PROFILER_PROPERTY_TYPE_STRING = 2;
export const PROFILER_PROPERTY_TYPE_HEAP_OBJECT = 3;
export const PROFILER_PROPERTY_TYPE_EXTERNAL_OBJECT = 4;
export const PROFILER_PROPERTY_TYPE_BSTR = 5;
export const PROFILER_PROPERTY_TYPE_SUBSTRING = 6;
export const PROFILER_HEAP_SUMMARY_VERSION_1 = 1;
export const BindOutOfMemory = 0;
export const BindRvaToVaFailed = 1;
export const BindNoRoomInImage = 2;
export const BindImportModuleFailed = 3;
export const BindImportProcedureFailed = 4;
export const BindImportModule = 5;
export const BindImportProcedure = 6;
export const BindForwarder = 7;
export const BindForwarderNOT = 8;
export const BindImageModified = 9;
export const BindExpandFileHeaders = 10;
export const BindImageComplete = 11;
export const BindMismatchedSymbols = 12;
export const BindSymbolsNotUpdated = 13;
export const BindImportProcedure32 = 14;
export const BindImportProcedure64 = 15;
export const BindForwarder32 = 16;
export const BindForwarder64 = 17;
export const BindForwarderNOT32 = 18;
export const BindForwarderNOT64 = 19;
export const AddrMode1616 = 0;
export const AddrMode1632 = 1;
export const AddrModeReal = 2;
export const AddrModeFlat = 3;
export const SymNone = 0;
export const SymCoff = 1;
export const SymCv = 2;
export const SymPdb = 3;
export const SymExport = 4;
export const SymDeferred = 5;
export const SymSym = 6;
export const SymDia = 7;
export const SymVirtual = 8;
export const NumSymTypes = 9;
export const hdBase = 0;
export const hdSym = 1;
export const hdSrc = 2;
export const hdMax = 3;
export const SYMOPT_EX_DISABLEACCESSTIMEUPDATE = 0;
export const SYMOPT_EX_LASTVALIDDEBUGDIRECTORY = 1;
export const SYMOPT_EX_NOIMPLICITPATTERNSEARCH = 2;
export const SYMOPT_EX_NEVERLOADSYMBOLS = 3;
export const SYMOPT_EX_MAX = 4;
export const TI_GET_SYMTAG = 0;
export const TI_GET_SYMNAME = 1;
export const TI_GET_LENGTH = 2;
export const TI_GET_TYPE = 3;
export const TI_GET_TYPEID = 4;
export const TI_GET_BASETYPE = 5;
export const TI_GET_ARRAYINDEXTYPEID = 6;
export const TI_FINDCHILDREN = 7;
export const TI_GET_DATAKIND = 8;
export const TI_GET_ADDRESSOFFSET = 9;
export const TI_GET_OFFSET = 10;
export const TI_GET_VALUE = 11;
export const TI_GET_COUNT = 12;
export const TI_GET_CHILDRENCOUNT = 13;
export const TI_GET_BITPOSITION = 14;
export const TI_GET_VIRTUALBASECLASS = 15;
export const TI_GET_VIRTUALTABLESHAPEID = 16;
export const TI_GET_VIRTUALBASEPOINTEROFFSET = 17;
export const TI_GET_CLASSPARENTID = 18;
export const TI_GET_NESTED = 19;
export const TI_GET_SYMINDEX = 20;
export const TI_GET_LEXICALPARENT = 21;
export const TI_GET_ADDRESS = 22;
export const TI_GET_THISADJUST = 23;
export const TI_GET_UDTKIND = 24;
export const TI_IS_EQUIV_TO = 25;
export const TI_GET_CALLING_CONVENTION = 26;
export const TI_IS_CLOSE_EQUIV_TO = 27;
export const TI_GTIEX_REQS_VALID = 28;
export const TI_GET_VIRTUALBASEOFFSET = 29;
export const TI_GET_VIRTUALBASEDISPINDEX = 30;
export const TI_GET_IS_REFERENCE = 31;
export const TI_GET_INDIRECTVIRTUALBASECLASS = 32;
export const TI_GET_VIRTUALBASETABLETYPE = 33;
export const TI_GET_OBJECTPOINTERTYPE = 34;
export const IMAGEHLP_SYMBOL_TYPE_INFO_MAX = 35;
export const sfImage = 0;
export const sfDbg = 1;
export const sfPdb = 2;
export const sfMpd = 3;
export const sfMax = 4;
export const FILTER_EXCLUDE_NOTHING = 0;
export const FILTER_EXCLUDE_ANONYMOUS_CODE = 1;
export const FILTER_EXCLUDE_EVAL_CODE = 2;
export const SDO_NONE = 0;
export const SDO_ENABLE_FIRST_CHANCE_EXCEPTIONS = 1;
export const SDO_ENABLE_WEB_WORKER_SUPPORT = 2;
export const SDO_ENABLE_NONUSER_CODE_SUPPORT = 4;
export const SDO_ENABLE_LIBRARY_STACK_FRAME = 8;
export const ETK_FIRST_CHANCE = 0;
export const ETK_USER_UNHANDLED = 1;
export const ETK_UNHANDLED = 2;
export const SICT_Event = 0;
export const SICT_SetTimeout = 1;
export const SICT_SetInterval = 2;
export const SICT_SetImmediate = 3;
export const SICT_RequestAnimationFrame = 4;
export const SICT_ToString = 5;
export const SICT_MutationObserverCheckpoint = 6;
export const SICT_WWAExecUnsafeLocalFunction = 7;
export const SICT_WWAExecAtPriority = 8;
export const DST_SCRIPT_FRAME = 0;
export const DST_INTERNAL_FRAME = 1;
export const DST_INVOCATION_FRAME = 2;
export const DEIT_GENERAL = 0;
export const DEIT_ASMJS_IN_DEBUGGING = 1;
export const DEIT_ASMJS_SUCCEEDED = 2;
export const DEIT_ASMJS_FAILED = 3;
export const JS_PROPERTY_MEMBERS_ALL = 0;
export const JS_PROPERTY_MEMBERS_ARGUMENTS = 1;
export const JS_PROPERTY_ATTRIBUTE_NONE = 0;
export const JS_PROPERTY_HAS_CHILDREN = 1;
export const JS_PROPERTY_FAKE = 2;
export const JS_PROPERTY_METHOD = 4;
export const JS_PROPERTY_READONLY = 8;
export const JS_PROPERTY_NATIVE_WINRT_POINTER = 16;
export const JS_PROPERTY_FRAME_INTRYBLOCK = 32;
export const JS_PROPERTY_FRAME_INCATCHBLOCK = 64;
export const JS_PROPERTY_FRAME_INFINALLYBLOCK = 128;
export const None = 0;
export const JsDebugAllowPartialRead = 1;
export const DUMP_TYPE_INVALID = `-1`;
export const DUMP_TYPE_UNKNOWN = 0;
export const DUMP_TYPE_FULL = 1;
export const DUMP_TYPE_SUMMARY = 2;
export const DUMP_TYPE_HEADER = 3;
export const DUMP_TYPE_TRIAGE = 4;
export const DUMP_TYPE_BITMAP_FULL = 5;
export const DUMP_TYPE_BITMAP_KERNEL = 6;
export const DUMP_TYPE_AUTOMATIC = 7;
export const WheaErrSrcTypeMCE = 0;
export const WheaErrSrcTypeCMC = 1;
export const WheaErrSrcTypeCPE = 2;
export const WheaErrSrcTypeNMI = 3;
export const WheaErrSrcTypePCIe = 4;
export const WheaErrSrcTypeGeneric = 5;
export const WheaErrSrcTypeINIT = 6;
export const WheaErrSrcTypeBOOT = 7;
export const WheaErrSrcTypeSCIGeneric = 8;
export const WheaErrSrcTypeIPFMCA = 9;
export const WheaErrSrcTypeIPFCMC = 10;
export const WheaErrSrcTypeIPFCPE = 11;
export const WheaErrSrcTypeGenericV2 = 12;
export const WheaErrSrcTypeSCIGenericV2 = 13;
export const WheaErrSrcTypeBMC = 14;
export const WheaErrSrcTypePMEM = 15;
export const WheaErrSrcTypeDeviceDriver = 16;
export const WheaErrSrcTypeMax = 17;
export const WheaErrSrcStateStopped = 1;
export const WheaErrSrcStateStarted = 2;
export const WheaErrSrcStateRemoved = 3;
export const WheaErrSrcStateRemovePending = 4;
export const NTMS_DRIVESTATE_DISMOUNTED = 0;
export const NTMS_DRIVESTATE_MOUNTED = 1;
export const NTMS_DRIVESTATE_LOADED = 2;
export const NTMS_DRIVESTATE_UNLOADED = 5;
export const NTMS_DRIVESTATE_BEING_CLEANED = 6;
export const NTMS_DRIVESTATE_DISMOUNTABLE = 7;
export const FILE_DEVICE_CD_ROM = 2;
export const FILE_DEVICE_DISK = 7;
export const FILE_DEVICE_TAPE = 31;
export const FILE_DEVICE_DVD = 51;
export const NTMS_LIBRARYTYPE_UNKNOWN = 0;
export const NTMS_LIBRARYTYPE_OFFLINE = 1;
export const NTMS_LIBRARYTYPE_ONLINE = 2;
export const NTMS_LIBRARYTYPE_STANDALONE = 3;
export const NTMS_INVENTORY_NONE = 0;
export const NTMS_INVENTORY_FAST = 1;
export const NTMS_INVENTORY_OMID = 2;
export const NTMS_INVENTORY_DEFAULT = 3;
export const NTMS_INVENTORY_SLOT = 4;
export const NTMS_INVENTORY_STOP = 5;
export const NTMS_INVENTORY_MAX = 6;
export const NTMS_LIBRARYFLAG_FIXEDOFFLINE = 1;
export const NTMS_LIBRARYFLAG_CLEANERPRESENT = 2;
export const NTMS_LIBRARYFLAG_AUTODETECTCHANGE = 4;
export const NTMS_LIBRARYFLAG_IGNORECLEANERUSESREMAINING = 8;
export const NTMS_LIBRARYFLAG_RECOGNIZECLEANERBARCODE = 16;
export const NTMS_DOORSTATE_UNKNOWN = 0;
export const NTMS_DOORSTATE_CLOSED = 1;
export const NTMS_DOORSTATE_OPEN = 2;
export const NTMS_PORTCONTENT_UNKNOWN = 0;
export const NTMS_PORTCONTENT_FULL = 1;
export const NTMS_PORTCONTENT_EMPTY = 2;
export const NTMS_PORTPOSITION_UNKNOWN = 0;
export const NTMS_PORTPOSITION_EXTENDED = 1;
export const NTMS_PORTPOSITION_RETRACTED = 2;
export const NTMS_BARCODESTATE_OK = 1;
export const NTMS_BARCODESTATE_UNREADABLE = 2;
export const NTMS_MEDIASTATE_IDLE = 0;
export const NTMS_MEDIASTATE_INUSE = 1;
export const NTMS_MEDIASTATE_MOUNTED = 2;
export const NTMS_MEDIASTATE_LOADED = 3;
export const NTMS_MEDIASTATE_UNLOADED = 4;
export const NTMS_MEDIASTATE_OPERROR = 5;
export const NTMS_MEDIASTATE_OPREQ = 6;
export const NTMS_PARTSTATE_UNKNOWN = 0;
export const NTMS_PARTSTATE_UNPREPARED = 1;
export const NTMS_PARTSTATE_INCOMPATIBLE = 2;
export const NTMS_PARTSTATE_DECOMMISSIONED = 3;
export const NTMS_PARTSTATE_AVAILABLE = 4;
export const NTMS_PARTSTATE_ALLOCATED = 5;
export const NTMS_PARTSTATE_COMPLETE = 6;
export const NTMS_PARTSTATE_FOREIGN = 7;
export const NTMS_PARTSTATE_IMPORT = 8;
export const NTMS_PARTSTATE_RESERVED = 9;
export const NTMS_MEDIARW_UNKNOWN = 0;
export const NTMS_MEDIARW_REWRITABLE = 1;
export const NTMS_MEDIARW_WRITEONCE = 2;
export const NTMS_MEDIARW_READONLY = 3;
export const NTMS_LM_REMOVE = 0;
export const NTMS_LM_DISABLECHANGER = 1;
export const NTMS_LM_DISABLELIBRARY = 1;
export const NTMS_LM_ENABLECHANGER = 2;
export const NTMS_LM_ENABLELIBRARY = 2;
export const NTMS_LM_DISABLEDRIVE = 3;
export const NTMS_LM_ENABLEDRIVE = 4;
export const NTMS_LM_DISABLEMEDIA = 5;
export const NTMS_LM_ENABLEMEDIA = 6;
export const NTMS_LM_UPDATEOMID = 7;
export const NTMS_LM_INVENTORY = 8;
export const NTMS_LM_DOORACCESS = 9;
export const NTMS_LM_EJECT = 10;
export const NTMS_LM_EJECTCLEANER = 11;
export const NTMS_LM_INJECT = 12;
export const NTMS_LM_INJECTCLEANER = 13;
export const NTMS_LM_PROCESSOMID = 14;
export const NTMS_LM_CLEANDRIVE = 15;
export const NTMS_LM_DISMOUNT = 16;
export const NTMS_LM_MOUNT = 17;
export const NTMS_LM_WRITESCRATCH = 18;
export const NTMS_LM_CLASSIFY = 19;
export const NTMS_LM_RESERVECLEANER = 20;
export const NTMS_LM_RELEASECLEANER = 21;
export const NTMS_LM_MAXWORKITEM = 22;
export const NTMS_LM_QUEUED = 0;
export const NTMS_LM_INPROCESS = 1;
export const NTMS_LM_PASSED = 2;
export const NTMS_LM_FAILED = 3;
export const NTMS_LM_INVALID = 4;
export const NTMS_LM_WAITING = 5;
export const NTMS_LM_DEFERRED = 6;
export const NTMS_LM_DEFFERED = 6;
export const NTMS_LM_CANCELLED = 7;
export const NTMS_LM_STOPPED = 8;
export const NTMS_OPREQ_UNKNOWN = 0;
export const NTMS_OPREQ_NEWMEDIA = 1;
export const NTMS_OPREQ_CLEANER = 2;
export const NTMS_OPREQ_DEVICESERVICE = 3;
export const NTMS_OPREQ_MOVEMEDIA = 4;
export const NTMS_OPREQ_MESSAGE = 5;
export const NTMS_OPSTATE_UNKNOWN = 0;
export const NTMS_OPSTATE_SUBMITTED = 1;
export const NTMS_OPSTATE_ACTIVE = 2;
export const NTMS_OPSTATE_INPROGRESS = 3;
export const NTMS_OPSTATE_REFUSED = 4;
export const NTMS_OPSTATE_COMPLETE = 5;
export const NTMS_UNKNOWN = 0;
export const NTMS_OBJECT = 1;
export const NTMS_CHANGER = 2;
export const NTMS_CHANGER_TYPE = 3;
export const NTMS_COMPUTER = 4;
export const NTMS_DRIVE = 5;
export const NTMS_DRIVE_TYPE = 6;
export const NTMS_IEDOOR = 7;
export const NTMS_IEPORT = 8;
export const NTMS_LIBRARY = 9;
export const NTMS_LIBREQUEST = 10;
export const NTMS_LOGICAL_MEDIA = 11;
export const NTMS_MEDIA_POOL = 12;
export const NTMS_MEDIA_TYPE = 13;
export const NTMS_PARTITION = 14;
export const NTMS_PHYSICAL_MEDIA = 15;
export const NTMS_STORAGESLOT = 16;
export const NTMS_OPREQUEST = 17;
export const NTMS_UI_DESTINATION = 18;
export const NTMS_NUMBER_OF_OBJECT_TYPES = 19;
export const IpmiOsSelRecordTypeWhea = 0;
export const IpmiOsSelRecordTypeOther = 1;
export const IpmiOsSelRecordTypeWheaErrorXpfMca = 2;
export const IpmiOsSelRecordTypeWheaErrorPci = 3;
export const IpmiOsSelRecordTypeWheaErrorNmi = 4;
export const IpmiOsSelRecordTypeWheaErrorOther = 5;
export const IpmiOsSelRecordTypeRaw = 6;
export const IpmiOsSelRecordTypeDriver = 7;
export const IpmiOsSelRecordTypeBugcheckRecovery = 8;
export const IpmiOsSelRecordTypeBugcheckData = 9;
export const IpmiOsSelRecordTypeMax = 10;
export const MB_ABORTRETRYIGNORE = 2;
export const MB_CANCELTRYCONTINUE = 6;
export const MB_HELP = 16384;
export const MB_OK = 0;
export const MB_OKCANCEL = 1;
export const MB_RETRYCANCEL = 5;
export const MB_YESNO = 4;
export const MB_YESNOCANCEL = 3;
export const MB_ICONHAND = 16;
export const MB_ICONQUESTION = 32;
export const MB_ICONEXCLAMATION = 48;
export const MB_ICONASTERISK = 64;
export const MB_USERICON = 128;
export const MB_ICONWARNING = 48;
export const MB_ICONERROR = 16;
export const MB_ICONINFORMATION = 64;
export const MB_ICONSTOP = 16;
export const MB_DEFBUTTON1 = 0;
export const MB_DEFBUTTON2 = 256;
export const MB_DEFBUTTON3 = 512;
export const MB_DEFBUTTON4 = 768;
export const MB_APPLMODAL = 0;
export const MB_SYSTEMMODAL = 4096;
export const MB_TASKMODAL = 8192;
export const MB_NOFOCUS = 32768;
export const MB_SETFOREGROUND = 65536;
export const MB_DEFAULT_DESKTOP_ONLY = 131072;
export const MB_TOPMOST = 262144;
export const MB_RIGHT = 524288;
export const MB_RTLREADING = 1048576;
export const MB_SERVICE_NOTIFICATION = 2097152;
export const MB_SERVICE_NOTIFICATION_NT3X = 262144;
export const MB_TYPEMASK = 15;
export const MB_ICONMASK = 240;
export const MB_DEFMASK = 3840;
export const MB_MODEMASK = 12288;
export const MB_MISCMASK = 49152;

// Structs

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: number | bigint;
  /** u64 */
  Region: number | bigint;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, util.toBigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, util.toBigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get Region(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u64
  set Alignment(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set Region(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : util.toBigInt(util.toPointer(data.X)), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.CONTEXT (size: 80)
 */
export interface CONTEXT {
  /** u32 */
  ContextFlags: number;
  /** u32 */
  Cpsr: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  Sp: number | bigint;
  /** u64 */
  Pc: number | bigint;
  /** array */
  V: Deno.PointerValue | null;
  /** u32 */
  Fpcr: number;
  /** u32 */
  Fpsr: number;
  /** array */
  Bcr: Deno.PointerValue | null;
  /** array */
  Bvr: Deno.PointerValue | null;
  /** array */
  Wcr: Deno.PointerValue | null;
  /** array */
  Wvr: Deno.PointerValue | null;
}

export const sizeofCONTEXT = 80;

export function allocCONTEXT(data?: Partial<CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofCONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ContextFlags !== undefined) view.setUint32(0, Number(data.ContextFlags), true);
  // 0x04: u32
  if (data?.Cpsr !== undefined) view.setUint32(4, Number(data.Cpsr), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: u64
  if (data?.Sp !== undefined) view.setBigUint64(16, util.toBigInt(data.Sp), true);
  // 0x18: u64
  if (data?.Pc !== undefined) view.setBigUint64(24, util.toBigInt(data.Pc), true);
  // 0x20: pointer
  if (data?.V !== undefined) view.setBigUint64(32, data.V === null ? 0n : util.toBigInt(util.toPointer(data.V)), true);
  // 0x28: u32
  if (data?.Fpcr !== undefined) view.setUint32(40, Number(data.Fpcr), true);
  // 0x2c: u32
  if (data?.Fpsr !== undefined) view.setUint32(44, Number(data.Fpsr), true);
  // 0x30: pointer
  if (data?.Bcr !== undefined) view.setBigUint64(48, data.Bcr === null ? 0n : util.toBigInt(util.toPointer(data.Bcr)), true);
  // 0x38: pointer
  if (data?.Bvr !== undefined) view.setBigUint64(56, data.Bvr === null ? 0n : util.toBigInt(util.toPointer(data.Bvr)), true);
  // 0x40: pointer
  if (data?.Wcr !== undefined) view.setBigUint64(64, data.Wcr === null ? 0n : util.toBigInt(util.toPointer(data.Wcr)), true);
  // 0x48: pointer
  if (data?.Wvr !== undefined) view.setBigUint64(72, data.Wvr === null ? 0n : util.toBigInt(util.toPointer(data.Wvr)), true);
  return buf;
}

export class CONTEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ContextFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Cpsr(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u64
  get Sp(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get Pc(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: pointer
  get V(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get Fpcr(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get Fpsr(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: pointer
  get Bcr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get Bvr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get Wcr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get Wvr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ContextFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Cpsr(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u64
  set Sp(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set Pc(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: pointer
  set V(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set Fpcr(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set Fpsr(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: pointer
  set Bcr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set Bvr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set Wcr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set Wvr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }
}

export type BOOLEAN = number;

/**
 * Windows.Win32.System.Diagnostics.Debug.DISPATCHER_CONTEXT (size: 96)
 */
export interface DISPATCHER_CONTEXT {
  /** usize */
  ControlPc: number | bigint;
  /** usize */
  ImageBase: number | bigint;
  /** ptr */
  FunctionEntry: Deno.PointerValue | Uint8Array | null;
  /** usize */
  EstablisherFrame: number | bigint;
  /** usize */
  TargetPc: number | bigint;
  /** ptr */
  ContextRecord: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Kernel.EXCEPTION_ROUTINE */
  LanguageHandler: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  HandlerData: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  HistoryTable: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ScopeIndex: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  ControlPcIsUnwound: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  NonVolatileRegisters: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDISPATCHER_CONTEXT = 96;

export function allocDISPATCHER_CONTEXT(data?: Partial<DISPATCHER_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofDISPATCHER_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.ControlPc !== undefined) view.setBigUint64(0, util.toBigInt(data.ControlPc), true);
  // 0x08: usize
  if (data?.ImageBase !== undefined) view.setBigUint64(8, util.toBigInt(data.ImageBase), true);
  // 0x10: pointer
  if (data?.FunctionEntry !== undefined) view.setBigUint64(16, data.FunctionEntry === null ? 0n : util.toBigInt(util.toPointer(data.FunctionEntry)), true);
  // 0x18: usize
  if (data?.EstablisherFrame !== undefined) view.setBigUint64(24, util.toBigInt(data.EstablisherFrame), true);
  // 0x20: usize
  if (data?.TargetPc !== undefined) view.setBigUint64(32, util.toBigInt(data.TargetPc), true);
  // 0x28: pointer
  if (data?.ContextRecord !== undefined) view.setBigUint64(40, data.ContextRecord === null ? 0n : util.toBigInt(util.toPointer(data.ContextRecord)), true);
  // 0x30: pointer
  if (data?.LanguageHandler !== undefined) view.setBigUint64(48, data.LanguageHandler === null ? 0n : util.toBigInt(util.toPointer(data.LanguageHandler)), true);
  // 0x38: pointer
  if (data?.HandlerData !== undefined) view.setBigUint64(56, data.HandlerData === null ? 0n : util.toBigInt(util.toPointer(data.HandlerData)), true);
  // 0x40: pointer
  if (data?.HistoryTable !== undefined) view.setBigUint64(64, data.HistoryTable === null ? 0n : util.toBigInt(util.toPointer(data.HistoryTable)), true);
  // 0x48: u32
  if (data?.ScopeIndex !== undefined) view.setUint32(72, Number(data.ScopeIndex), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.ControlPcIsUnwound !== undefined) view.setBigUint64(80, data.ControlPcIsUnwound === null ? 0n : util.toBigInt(util.toPointer(data.ControlPcIsUnwound)), true);
  // 0x58: pointer
  if (data?.NonVolatileRegisters !== undefined) view.setBigUint64(88, data.NonVolatileRegisters === null ? 0n : util.toBigInt(util.toPointer(data.NonVolatileRegisters)), true);
  return buf;
}

export class DISPATCHER_CONTEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get ControlPc(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: usize
  get ImageBase(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: pointer
  get FunctionEntry(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: usize
  get EstablisherFrame(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: usize
  get TargetPc(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: pointer
  get ContextRecord(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get LanguageHandler(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get HandlerData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get HistoryTable(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: u32
  get ScopeIndex(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get ControlPcIsUnwound(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get NonVolatileRegisters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: usize
  set ControlPc(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: usize
  set ImageBase(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: pointer
  set FunctionEntry(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: usize
  set EstablisherFrame(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: usize
  set TargetPc(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: pointer
  set ContextRecord(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set LanguageHandler(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set HandlerData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set HistoryTable(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: u32
  set ScopeIndex(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set ControlPcIsUnwound(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set NonVolatileRegisters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.KNONVOLATILE_CONTEXT_POINTERS_ARM64 (size: 160)
 */
export interface KNONVOLATILE_CONTEXT_POINTERS_ARM64 {
  /** ptr */
  X19: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  X20: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  X21: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  X22: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  X23: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  X24: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  X25: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  X26: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  X27: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  X28: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Fp: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Lr: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  D8: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  D9: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  D10: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  D11: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  D12: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  D13: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  D14: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  D15: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKNONVOLATILE_CONTEXT_POINTERS_ARM64 = 160;

export function allocKNONVOLATILE_CONTEXT_POINTERS_ARM64(data?: Partial<KNONVOLATILE_CONTEXT_POINTERS_ARM64>): Uint8Array {
  const buf = new Uint8Array(sizeofKNONVOLATILE_CONTEXT_POINTERS_ARM64);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.X19 !== undefined) view.setBigUint64(0, data.X19 === null ? 0n : util.toBigInt(util.toPointer(data.X19)), true);
  // 0x08: pointer
  if (data?.X20 !== undefined) view.setBigUint64(8, data.X20 === null ? 0n : util.toBigInt(util.toPointer(data.X20)), true);
  // 0x10: pointer
  if (data?.X21 !== undefined) view.setBigUint64(16, data.X21 === null ? 0n : util.toBigInt(util.toPointer(data.X21)), true);
  // 0x18: pointer
  if (data?.X22 !== undefined) view.setBigUint64(24, data.X22 === null ? 0n : util.toBigInt(util.toPointer(data.X22)), true);
  // 0x20: pointer
  if (data?.X23 !== undefined) view.setBigUint64(32, data.X23 === null ? 0n : util.toBigInt(util.toPointer(data.X23)), true);
  // 0x28: pointer
  if (data?.X24 !== undefined) view.setBigUint64(40, data.X24 === null ? 0n : util.toBigInt(util.toPointer(data.X24)), true);
  // 0x30: pointer
  if (data?.X25 !== undefined) view.setBigUint64(48, data.X25 === null ? 0n : util.toBigInt(util.toPointer(data.X25)), true);
  // 0x38: pointer
  if (data?.X26 !== undefined) view.setBigUint64(56, data.X26 === null ? 0n : util.toBigInt(util.toPointer(data.X26)), true);
  // 0x40: pointer
  if (data?.X27 !== undefined) view.setBigUint64(64, data.X27 === null ? 0n : util.toBigInt(util.toPointer(data.X27)), true);
  // 0x48: pointer
  if (data?.X28 !== undefined) view.setBigUint64(72, data.X28 === null ? 0n : util.toBigInt(util.toPointer(data.X28)), true);
  // 0x50: pointer
  if (data?.Fp !== undefined) view.setBigUint64(80, data.Fp === null ? 0n : util.toBigInt(util.toPointer(data.Fp)), true);
  // 0x58: pointer
  if (data?.Lr !== undefined) view.setBigUint64(88, data.Lr === null ? 0n : util.toBigInt(util.toPointer(data.Lr)), true);
  // 0x60: pointer
  if (data?.D8 !== undefined) view.setBigUint64(96, data.D8 === null ? 0n : util.toBigInt(util.toPointer(data.D8)), true);
  // 0x68: pointer
  if (data?.D9 !== undefined) view.setBigUint64(104, data.D9 === null ? 0n : util.toBigInt(util.toPointer(data.D9)), true);
  // 0x70: pointer
  if (data?.D10 !== undefined) view.setBigUint64(112, data.D10 === null ? 0n : util.toBigInt(util.toPointer(data.D10)), true);
  // 0x78: pointer
  if (data?.D11 !== undefined) view.setBigUint64(120, data.D11 === null ? 0n : util.toBigInt(util.toPointer(data.D11)), true);
  // 0x80: pointer
  if (data?.D12 !== undefined) view.setBigUint64(128, data.D12 === null ? 0n : util.toBigInt(util.toPointer(data.D12)), true);
  // 0x88: pointer
  if (data?.D13 !== undefined) view.setBigUint64(136, data.D13 === null ? 0n : util.toBigInt(util.toPointer(data.D13)), true);
  // 0x90: pointer
  if (data?.D14 !== undefined) view.setBigUint64(144, data.D14 === null ? 0n : util.toBigInt(util.toPointer(data.D14)), true);
  // 0x98: pointer
  if (data?.D15 !== undefined) view.setBigUint64(152, data.D15 === null ? 0n : util.toBigInt(util.toPointer(data.D15)), true);
  return buf;
}

export class KNONVOLATILE_CONTEXT_POINTERS_ARM64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get X19(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get X20(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get X21(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get X22(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get X23(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get X24(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get X25(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get X26(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get X27(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get X28(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get Fp(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get Lr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: pointer
  get D8(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: pointer
  get D9(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: pointer
  get D10(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(112, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x78: pointer
  get D11(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(120, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x80: pointer
  get D12(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(128, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x88: pointer
  get D13(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(136, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x90: pointer
  get D14(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(144, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x98: pointer
  get D15(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(152, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set X19(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set X20(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set X21(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set X22(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set X23(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set X24(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set X25(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set X26(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set X27(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set X28(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set Fp(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set Lr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x60: pointer
  set D8(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x68: pointer
  set D9(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x70: pointer
  set D10(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(112, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x78: pointer
  set D11(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(120, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x80: pointer
  set D12(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(128, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x88: pointer
  set D13(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(136, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x90: pointer
  set D14(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(144, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x98: pointer
  set D15(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(152, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.UNWIND_HISTORY_TABLE_ENTRY (size: 16)
 */
export interface UNWIND_HISTORY_TABLE_ENTRY {
  /** usize */
  ImageBase: number | bigint;
  /** ptr */
  FunctionEntry: Deno.PointerValue | Uint8Array | null;
}

export const sizeofUNWIND_HISTORY_TABLE_ENTRY = 16;

export function allocUNWIND_HISTORY_TABLE_ENTRY(data?: Partial<UNWIND_HISTORY_TABLE_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofUNWIND_HISTORY_TABLE_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.ImageBase !== undefined) view.setBigUint64(0, util.toBigInt(data.ImageBase), true);
  // 0x08: pointer
  if (data?.FunctionEntry !== undefined) view.setBigUint64(8, data.FunctionEntry === null ? 0n : util.toBigInt(util.toPointer(data.FunctionEntry)), true);
  return buf;
}

export class UNWIND_HISTORY_TABLE_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get ImageBase(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: pointer
  get FunctionEntry(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: usize
  set ImageBase(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: pointer
  set FunctionEntry(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

export type HANDLE = number | bigint;

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_THREAD_CALLBACK (size: 56)
 */
export interface MINIDUMP_THREAD_CALLBACK {
  /** u32 */
  ThreadId: number;
  /** Windows.Win32.Foundation.HANDLE */
  ThreadHandle: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Pad: number;
  /** Windows.Win32.System.Diagnostics.Debug.CONTEXT */
  Context: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SizeOfContext: number;
  /** u64 */
  StackBase: number | bigint;
  /** u64 */
  StackEnd: number | bigint;
}

export const sizeofMINIDUMP_THREAD_CALLBACK = 56;

export function allocMINIDUMP_THREAD_CALLBACK(data?: Partial<MINIDUMP_THREAD_CALLBACK>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_THREAD_CALLBACK);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ThreadId !== undefined) view.setUint32(0, Number(data.ThreadId), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ThreadHandle !== undefined) view.setBigUint64(8, data.ThreadHandle === null ? 0n : util.toBigInt(util.toPointer(data.ThreadHandle)), true);
  // 0x10: u32
  if (data?.Pad !== undefined) view.setUint32(16, Number(data.Pad), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Context !== undefined) view.setBigUint64(24, data.Context === null ? 0n : util.toBigInt(util.toPointer(data.Context)), true);
  // 0x20: u32
  if (data?.SizeOfContext !== undefined) view.setUint32(32, Number(data.SizeOfContext), true);
  // 0x24: pad4
  // 0x28: u64
  if (data?.StackBase !== undefined) view.setBigUint64(40, util.toBigInt(data.StackBase), true);
  // 0x30: u64
  if (data?.StackEnd !== undefined) view.setBigUint64(48, util.toBigInt(data.StackEnd), true);
  return buf;
}

export class MINIDUMP_THREAD_CALLBACKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ThreadId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ThreadHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get Pad(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Context(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get SizeOfContext(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: u64
  get StackBase(): number | bigint {
    return this.view.getBigUint64(40, true);
  }

  // 0x30: u64
  get StackEnd(): number | bigint {
    return this.view.getBigUint64(48, true);
  }

  // 0x00: u32
  set ThreadId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ThreadHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set Pad(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Context(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set SizeOfContext(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: u64
  set StackBase(value: number | bigint) {
    this.view.setBigUint64(40, util.toBigInt(value), true);
  }

  // 0x30: u64
  set StackEnd(value: number | bigint) {
    this.view.setBigUint64(48, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_THREAD_EX_CALLBACK (size: 72)
 */
export interface MINIDUMP_THREAD_EX_CALLBACK {
  /** u32 */
  ThreadId: number;
  /** Windows.Win32.Foundation.HANDLE */
  ThreadHandle: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Pad: number;
  /** Windows.Win32.System.Diagnostics.Debug.CONTEXT */
  Context: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SizeOfContext: number;
  /** u64 */
  StackBase: number | bigint;
  /** u64 */
  StackEnd: number | bigint;
  /** u64 */
  BackingStoreBase: number | bigint;
  /** u64 */
  BackingStoreEnd: number | bigint;
}

export const sizeofMINIDUMP_THREAD_EX_CALLBACK = 72;

export function allocMINIDUMP_THREAD_EX_CALLBACK(data?: Partial<MINIDUMP_THREAD_EX_CALLBACK>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_THREAD_EX_CALLBACK);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ThreadId !== undefined) view.setUint32(0, Number(data.ThreadId), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ThreadHandle !== undefined) view.setBigUint64(8, data.ThreadHandle === null ? 0n : util.toBigInt(util.toPointer(data.ThreadHandle)), true);
  // 0x10: u32
  if (data?.Pad !== undefined) view.setUint32(16, Number(data.Pad), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Context !== undefined) view.setBigUint64(24, data.Context === null ? 0n : util.toBigInt(util.toPointer(data.Context)), true);
  // 0x20: u32
  if (data?.SizeOfContext !== undefined) view.setUint32(32, Number(data.SizeOfContext), true);
  // 0x24: pad4
  // 0x28: u64
  if (data?.StackBase !== undefined) view.setBigUint64(40, util.toBigInt(data.StackBase), true);
  // 0x30: u64
  if (data?.StackEnd !== undefined) view.setBigUint64(48, util.toBigInt(data.StackEnd), true);
  // 0x38: u64
  if (data?.BackingStoreBase !== undefined) view.setBigUint64(56, util.toBigInt(data.BackingStoreBase), true);
  // 0x40: u64
  if (data?.BackingStoreEnd !== undefined) view.setBigUint64(64, util.toBigInt(data.BackingStoreEnd), true);
  return buf;
}

export class MINIDUMP_THREAD_EX_CALLBACKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ThreadId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ThreadHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get Pad(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Context(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get SizeOfContext(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: u64
  get StackBase(): number | bigint {
    return this.view.getBigUint64(40, true);
  }

  // 0x30: u64
  get StackEnd(): number | bigint {
    return this.view.getBigUint64(48, true);
  }

  // 0x38: u64
  get BackingStoreBase(): number | bigint {
    return this.view.getBigUint64(56, true);
  }

  // 0x40: u64
  get BackingStoreEnd(): number | bigint {
    return this.view.getBigUint64(64, true);
  }

  // 0x00: u32
  set ThreadId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ThreadHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set Pad(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Context(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set SizeOfContext(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: u64
  set StackBase(value: number | bigint) {
    this.view.setBigUint64(40, util.toBigInt(value), true);
  }

  // 0x30: u64
  set StackEnd(value: number | bigint) {
    this.view.setBigUint64(48, util.toBigInt(value), true);
  }

  // 0x38: u64
  set BackingStoreBase(value: number | bigint) {
    this.view.setBigUint64(56, util.toBigInt(value), true);
  }

  // 0x40: u64
  set BackingStoreEnd(value: number | bigint) {
    this.view.setBigUint64(64, util.toBigInt(value), true);
  }
}

export type NTSTATUS = number;

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD (size: 48)
 */
export interface EXCEPTION_RECORD {
  /** Windows.Win32.Foundation.NTSTATUS */
  ExceptionCode: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ExceptionFlags: number;
  /** ptr */
  ExceptionRecord: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ExceptionAddress: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumberParameters: number;
  /** array */
  ExceptionInformation: Deno.PointerValue | null;
}

export const sizeofEXCEPTION_RECORD = 48;

export function allocEXCEPTION_RECORD(data?: Partial<EXCEPTION_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionCode !== undefined) view.setBigUint64(0, data.ExceptionCode === null ? 0n : util.toBigInt(util.toPointer(data.ExceptionCode)), true);
  // 0x08: u32
  if (data?.ExceptionFlags !== undefined) view.setUint32(8, Number(data.ExceptionFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(16, data.ExceptionRecord === null ? 0n : util.toBigInt(util.toPointer(data.ExceptionRecord)), true);
  // 0x18: pointer
  if (data?.ExceptionAddress !== undefined) view.setBigUint64(24, data.ExceptionAddress === null ? 0n : util.toBigInt(util.toPointer(data.ExceptionAddress)), true);
  // 0x20: u32
  if (data?.NumberParameters !== undefined) view.setUint32(32, Number(data.NumberParameters), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ExceptionInformation !== undefined) view.setBigUint64(40, data.ExceptionInformation === null ? 0n : util.toBigInt(util.toPointer(data.ExceptionInformation)), true);
  return buf;
}

export class EXCEPTION_RECORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ExceptionCode(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ExceptionFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ExceptionRecord(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get ExceptionAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get NumberParameters(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get ExceptionInformation(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ExceptionCode(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ExceptionFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ExceptionRecord(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set ExceptionAddress(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set NumberParameters(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set ExceptionInformation(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_DEBUG_INFO (size: 16)
 */
export interface EXCEPTION_DEBUG_INFO {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD */
  ExceptionRecord: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFirstChance: number;
}

export const sizeofEXCEPTION_DEBUG_INFO = 16;

export function allocEXCEPTION_DEBUG_INFO(data?: Partial<EXCEPTION_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(0, data.ExceptionRecord === null ? 0n : util.toBigInt(util.toPointer(data.ExceptionRecord)), true);
  // 0x08: u32
  if (data?.dwFirstChance !== undefined) view.setUint32(8, Number(data.dwFirstChance), true);
  // 0x0c: pad4
  return buf;
}

export class EXCEPTION_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ExceptionRecord(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwFirstChance(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set ExceptionRecord(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set dwFirstChance(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.CREATE_THREAD_DEBUG_INFO (size: 24)
 */
export interface CREATE_THREAD_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpThreadLocalBase: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */
  lpStartAddress: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCREATE_THREAD_DEBUG_INFO = 24;

export function allocCREATE_THREAD_DEBUG_INFO(data?: Partial<CREATE_THREAD_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_THREAD_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hThread !== undefined) view.setBigUint64(0, data.hThread === null ? 0n : util.toBigInt(util.toPointer(data.hThread)), true);
  // 0x08: pointer
  if (data?.lpThreadLocalBase !== undefined) view.setBigUint64(8, data.lpThreadLocalBase === null ? 0n : util.toBigInt(util.toPointer(data.lpThreadLocalBase)), true);
  // 0x10: pointer
  if (data?.lpStartAddress !== undefined) view.setBigUint64(16, data.lpStartAddress === null ? 0n : util.toBigInt(util.toPointer(data.lpStartAddress)), true);
  return buf;
}

export class CREATE_THREAD_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hThread(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get lpThreadLocalBase(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get lpStartAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set hThread(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set lpThreadLocalBase(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set lpStartAddress(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.CREATE_PROCESS_DEBUG_INFO (size: 72)
 */
export interface CREATE_PROCESS_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hProcess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpBaseOfImage: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwDebugInfoFileOffset: number;
  /** u32 */
  nDebugInfoSize: number;
  /** ptr */
  lpThreadLocalBase: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */
  lpStartAddress: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpImageName: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  fUnicode: number;
}

export const sizeofCREATE_PROCESS_DEBUG_INFO = 72;

export function allocCREATE_PROCESS_DEBUG_INFO(data?: Partial<CREATE_PROCESS_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_PROCESS_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : util.toBigInt(util.toPointer(data.hFile)), true);
  // 0x08: pointer
  if (data?.hProcess !== undefined) view.setBigUint64(8, data.hProcess === null ? 0n : util.toBigInt(util.toPointer(data.hProcess)), true);
  // 0x10: pointer
  if (data?.hThread !== undefined) view.setBigUint64(16, data.hThread === null ? 0n : util.toBigInt(util.toPointer(data.hThread)), true);
  // 0x18: pointer
  if (data?.lpBaseOfImage !== undefined) view.setBigUint64(24, data.lpBaseOfImage === null ? 0n : util.toBigInt(util.toPointer(data.lpBaseOfImage)), true);
  // 0x20: u32
  if (data?.dwDebugInfoFileOffset !== undefined) view.setUint32(32, Number(data.dwDebugInfoFileOffset), true);
  // 0x24: u32
  if (data?.nDebugInfoSize !== undefined) view.setUint32(36, Number(data.nDebugInfoSize), true);
  // 0x28: pointer
  if (data?.lpThreadLocalBase !== undefined) view.setBigUint64(40, data.lpThreadLocalBase === null ? 0n : util.toBigInt(util.toPointer(data.lpThreadLocalBase)), true);
  // 0x30: pointer
  if (data?.lpStartAddress !== undefined) view.setBigUint64(48, data.lpStartAddress === null ? 0n : util.toBigInt(util.toPointer(data.lpStartAddress)), true);
  // 0x38: pointer
  if (data?.lpImageName !== undefined) view.setBigUint64(56, data.lpImageName === null ? 0n : util.toBigInt(util.toPointer(data.lpImageName)), true);
  // 0x40: u16
  if (data?.fUnicode !== undefined) view.setUint16(64, Number(data.fUnicode), true);
  // 0x42: pad6
  return buf;
}

export class CREATE_PROCESS_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hFile(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get hProcess(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get hThread(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get lpBaseOfImage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get dwDebugInfoFileOffset(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get nDebugInfoSize(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get lpThreadLocalBase(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get lpStartAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get lpImageName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: u16
  get fUnicode(): number {
    return this.view.getUint16(64, true);
  }

  // 0x42: pad6

  // 0x00: pointer
  set hFile(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set hProcess(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set hThread(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set lpBaseOfImage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set dwDebugInfoFileOffset(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set nDebugInfoSize(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set lpThreadLocalBase(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set lpStartAddress(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set lpImageName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: u16
  set fUnicode(value: number) {
    this.view.setUint16(64, value, true);
  }

  // 0x42: pad6
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXIT_THREAD_DEBUG_INFO (size: 8)
 */
export interface EXIT_THREAD_DEBUG_INFO {
  /** u32 */
  dwExitCode: number;
}

export const sizeofEXIT_THREAD_DEBUG_INFO = 8;

export function allocEXIT_THREAD_DEBUG_INFO(data?: Partial<EXIT_THREAD_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXIT_THREAD_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExitCode !== undefined) view.setUint32(0, Number(data.dwExitCode), true);
  // 0x04: pad4
  return buf;
}

export class EXIT_THREAD_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwExitCode(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set dwExitCode(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXIT_PROCESS_DEBUG_INFO (size: 8)
 */
export interface EXIT_PROCESS_DEBUG_INFO {
  /** u32 */
  dwExitCode: number;
}

export const sizeofEXIT_PROCESS_DEBUG_INFO = 8;

export function allocEXIT_PROCESS_DEBUG_INFO(data?: Partial<EXIT_PROCESS_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXIT_PROCESS_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExitCode !== undefined) view.setUint32(0, Number(data.dwExitCode), true);
  // 0x04: pad4
  return buf;
}

export class EXIT_PROCESS_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwExitCode(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set dwExitCode(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.LOAD_DLL_DEBUG_INFO (size: 40)
 */
export interface LOAD_DLL_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwDebugInfoFileOffset: number;
  /** u32 */
  nDebugInfoSize: number;
  /** ptr */
  lpImageName: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  fUnicode: number;
}

export const sizeofLOAD_DLL_DEBUG_INFO = 40;

export function allocLOAD_DLL_DEBUG_INFO(data?: Partial<LOAD_DLL_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofLOAD_DLL_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : util.toBigInt(util.toPointer(data.hFile)), true);
  // 0x08: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(8, data.lpBaseOfDll === null ? 0n : util.toBigInt(util.toPointer(data.lpBaseOfDll)), true);
  // 0x10: u32
  if (data?.dwDebugInfoFileOffset !== undefined) view.setUint32(16, Number(data.dwDebugInfoFileOffset), true);
  // 0x14: u32
  if (data?.nDebugInfoSize !== undefined) view.setUint32(20, Number(data.nDebugInfoSize), true);
  // 0x18: pointer
  if (data?.lpImageName !== undefined) view.setBigUint64(24, data.lpImageName === null ? 0n : util.toBigInt(util.toPointer(data.lpImageName)), true);
  // 0x20: u16
  if (data?.fUnicode !== undefined) view.setUint16(32, Number(data.fUnicode), true);
  // 0x22: pad6
  return buf;
}

export class LOAD_DLL_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hFile(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get lpBaseOfDll(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwDebugInfoFileOffset(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get nDebugInfoSize(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get lpImageName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u16
  get fUnicode(): number {
    return this.view.getUint16(32, true);
  }

  // 0x22: pad6

  // 0x00: pointer
  set hFile(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set lpBaseOfDll(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwDebugInfoFileOffset(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set nDebugInfoSize(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set lpImageName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u16
  set fUnicode(value: number) {
    this.view.setUint16(32, value, true);
  }

  // 0x22: pad6
}

/**
 * Windows.Win32.System.Diagnostics.Debug.UNLOAD_DLL_DEBUG_INFO (size: 8)
 */
export interface UNLOAD_DLL_DEBUG_INFO {
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array | null;
}

export const sizeofUNLOAD_DLL_DEBUG_INFO = 8;

export function allocUNLOAD_DLL_DEBUG_INFO(data?: Partial<UNLOAD_DLL_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofUNLOAD_DLL_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(0, data.lpBaseOfDll === null ? 0n : util.toBigInt(util.toPointer(data.lpBaseOfDll)), true);
  return buf;
}

export class UNLOAD_DLL_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpBaseOfDll(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set lpBaseOfDll(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.System.Diagnostics.Debug.OUTPUT_DEBUG_STRING_INFO (size: 16)
 */
export interface OUTPUT_DEBUG_STRING_INFO {
  /** Windows.Win32.Foundation.PSTR */
  lpDebugStringData: string | null | Uint8Array;
  /** u16 */
  fUnicode: number;
  /** u16 */
  nDebugStringLength: number;
}

export const sizeofOUTPUT_DEBUG_STRING_INFO = 16;

export function allocOUTPUT_DEBUG_STRING_INFO(data?: Partial<OUTPUT_DEBUG_STRING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofOUTPUT_DEBUG_STRING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpDebugStringData !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpDebugStringData);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u16
  if (data?.fUnicode !== undefined) view.setUint16(8, Number(data.fUnicode), true);
  // 0x0a: u16
  if (data?.nDebugStringLength !== undefined) view.setUint16(10, Number(data.nDebugStringLength), true);
  // 0x0c: pad4
  return buf;
}

export class OUTPUT_DEBUG_STRING_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get lpDebugStringData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u16
  get fUnicode(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get nDebugStringLength(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: pad4

  // 0x00: buffer
  set lpDebugStringData(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u16
  set fUnicode(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set nDebugStringLength(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.RIP_INFO (size: 8)
 */
export interface RIP_INFO {
  /** u32 */
  dwError: number;
  /** Windows.Win32.System.Diagnostics.Debug.RIP_INFO_TYPE */
  dwType: RIP_INFO_TYPE;
}

export const sizeofRIP_INFO = 8;

export function allocRIP_INFO(data?: Partial<RIP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRIP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwError !== undefined) view.setUint32(0, Number(data.dwError), true);
  // 0x04: u32
  if (data?.dwType !== undefined) view.setUint32(4, Number(data.dwType), true);
  return buf;
}

export class RIP_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwError(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwError(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwType(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * _u_e__Union (size: 72)
 */
export interface _u_e__Union {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_DEBUG_INFO */
  Exception: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.CREATE_THREAD_DEBUG_INFO */
  CreateThread: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.CREATE_PROCESS_DEBUG_INFO */
  CreateProcessInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.EXIT_THREAD_DEBUG_INFO */
  ExitThread: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.EXIT_PROCESS_DEBUG_INFO */
  ExitProcess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.LOAD_DLL_DEBUG_INFO */
  LoadDll: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.UNLOAD_DLL_DEBUG_INFO */
  UnloadDll: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.OUTPUT_DEBUG_STRING_INFO */
  DebugString: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.RIP_INFO */
  RipInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_u_e__Union = 72;

export function alloc_u_e__Union(data?: Partial<_u_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Exception !== undefined) view.setBigUint64(0, data.Exception === null ? 0n : util.toBigInt(util.toPointer(data.Exception)), true);
  // 0x08: pointer
  if (data?.CreateThread !== undefined) view.setBigUint64(8, data.CreateThread === null ? 0n : util.toBigInt(util.toPointer(data.CreateThread)), true);
  // 0x10: pointer
  if (data?.CreateProcessInfo !== undefined) view.setBigUint64(16, data.CreateProcessInfo === null ? 0n : util.toBigInt(util.toPointer(data.CreateProcessInfo)), true);
  // 0x18: pointer
  if (data?.ExitThread !== undefined) view.setBigUint64(24, data.ExitThread === null ? 0n : util.toBigInt(util.toPointer(data.ExitThread)), true);
  // 0x20: pointer
  if (data?.ExitProcess !== undefined) view.setBigUint64(32, data.ExitProcess === null ? 0n : util.toBigInt(util.toPointer(data.ExitProcess)), true);
  // 0x28: pointer
  if (data?.LoadDll !== undefined) view.setBigUint64(40, data.LoadDll === null ? 0n : util.toBigInt(util.toPointer(data.LoadDll)), true);
  // 0x30: pointer
  if (data?.UnloadDll !== undefined) view.setBigUint64(48, data.UnloadDll === null ? 0n : util.toBigInt(util.toPointer(data.UnloadDll)), true);
  // 0x38: pointer
  if (data?.DebugString !== undefined) view.setBigUint64(56, data.DebugString === null ? 0n : util.toBigInt(util.toPointer(data.DebugString)), true);
  // 0x40: pointer
  if (data?.RipInfo !== undefined) view.setBigUint64(64, data.RipInfo === null ? 0n : util.toBigInt(util.toPointer(data.RipInfo)), true);
  return buf;
}

export class _u_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Exception(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get CreateThread(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get CreateProcessInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get ExitThread(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get ExitProcess(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get LoadDll(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get UnloadDll(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get DebugString(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get RipInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Exception(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set CreateThread(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set CreateProcessInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set ExitThread(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set ExitProcess(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set LoadDll(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set UnloadDll(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set DebugString(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set RipInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_EVENT (size: 24)
 */
export interface DEBUG_EVENT {
  /** Windows.Win32.System.Diagnostics.Debug.DEBUG_EVENT_CODE */
  dwDebugEventCode: DEBUG_EVENT_CODE;
  /** u32 */
  dwProcessId: number;
  /** u32 */
  dwThreadId: number;
  /** _u_e__Union */
  u: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDEBUG_EVENT = 24;

export function allocDEBUG_EVENT(data?: Partial<DEBUG_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwDebugEventCode !== undefined) view.setUint32(0, Number(data.dwDebugEventCode), true);
  // 0x04: u32
  if (data?.dwProcessId !== undefined) view.setUint32(4, Number(data.dwProcessId), true);
  // 0x08: u32
  if (data?.dwThreadId !== undefined) view.setUint32(8, Number(data.dwThreadId), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.u !== undefined) view.setBigUint64(16, data.u === null ? 0n : util.toBigInt(util.toPointer(data.u)), true);
  return buf;
}

export class DEBUG_EVENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwDebugEventCode(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwProcessId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwThreadId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get u(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwDebugEventCode(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwProcessId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwThreadId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set u(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_OFFSET_REGION (size: 16)
 */
export interface DEBUG_OFFSET_REGION {
  /** u64 */
  Base: number | bigint;
  /** u64 */
  Size: number | bigint;
}

export const sizeofDEBUG_OFFSET_REGION = 16;

export function allocDEBUG_OFFSET_REGION(data?: Partial<DEBUG_OFFSET_REGION>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_OFFSET_REGION);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Base !== undefined) view.setBigUint64(0, util.toBigInt(data.Base), true);
  // 0x08: u64
  if (data?.Size !== undefined) view.setBigUint64(8, util.toBigInt(data.Size), true);
  return buf;
}

export class DEBUG_OFFSET_REGIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Base(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get Size(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u64
  set Base(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set Size(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_READ_USER_MINIDUMP_STREAM (size: 32)
 */
export interface DEBUG_READ_USER_MINIDUMP_STREAM {
  /** u32 */
  StreamType: number;
  /** u32 */
  Flags: number;
  /** u64 */
  Offset: number | bigint;
  /** ptr */
  Buffer: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  BufferSize: number;
  /** u32 */
  BufferUsed: number;
}

export const sizeofDEBUG_READ_USER_MINIDUMP_STREAM = 32;

export function allocDEBUG_READ_USER_MINIDUMP_STREAM(data?: Partial<DEBUG_READ_USER_MINIDUMP_STREAM>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_READ_USER_MINIDUMP_STREAM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.StreamType !== undefined) view.setUint32(0, Number(data.StreamType), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u64
  if (data?.Offset !== undefined) view.setBigUint64(8, util.toBigInt(data.Offset), true);
  // 0x10: pointer
  if (data?.Buffer !== undefined) view.setBigUint64(16, data.Buffer === null ? 0n : util.toBigInt(util.toPointer(data.Buffer)), true);
  // 0x18: u32
  if (data?.BufferSize !== undefined) view.setUint32(24, Number(data.BufferSize), true);
  // 0x1c: u32
  if (data?.BufferUsed !== undefined) view.setUint32(28, Number(data.BufferUsed), true);
  return buf;
}

export class DEBUG_READ_USER_MINIDUMP_STREAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get StreamType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get Offset(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: pointer
  get Buffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get BufferSize(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get BufferUsed(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: u32
  set StreamType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set Offset(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: pointer
  set Buffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set BufferSize(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set BufferUsed(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_GET_TEXT_COMPLETIONS_IN (size: 16)
 */
export interface DEBUG_GET_TEXT_COMPLETIONS_IN {
  /** u32 */
  Flags: number;
  /** u32 */
  MatchCountLimit: number;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofDEBUG_GET_TEXT_COMPLETIONS_IN = 16;

export function allocDEBUG_GET_TEXT_COMPLETIONS_IN(data?: Partial<DEBUG_GET_TEXT_COMPLETIONS_IN>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_GET_TEXT_COMPLETIONS_IN);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.MatchCountLimit !== undefined) view.setUint32(4, Number(data.MatchCountLimit), true);
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

export class DEBUG_GET_TEXT_COMPLETIONS_INView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MatchCountLimit(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MatchCountLimit(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_GET_TEXT_COMPLETIONS_OUT (size: 24)
 */
export interface DEBUG_GET_TEXT_COMPLETIONS_OUT {
  /** u32 */
  Flags: number;
  /** u32 */
  ReplaceIndex: number;
  /** u32 */
  MatchCount: number;
  /** u32 */
  Reserved1: number;
  /** array */
  Reserved2: Deno.PointerValue | null;
}

export const sizeofDEBUG_GET_TEXT_COMPLETIONS_OUT = 24;

export function allocDEBUG_GET_TEXT_COMPLETIONS_OUT(data?: Partial<DEBUG_GET_TEXT_COMPLETIONS_OUT>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_GET_TEXT_COMPLETIONS_OUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.ReplaceIndex !== undefined) view.setUint32(4, Number(data.ReplaceIndex), true);
  // 0x08: u32
  if (data?.MatchCount !== undefined) view.setUint32(8, Number(data.MatchCount), true);
  // 0x0c: u32
  if (data?.Reserved1 !== undefined) view.setUint32(12, Number(data.Reserved1), true);
  // 0x10: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(16, data.Reserved2 === null ? 0n : util.toBigInt(util.toPointer(data.Reserved2)), true);
  return buf;
}

export class DEBUG_GET_TEXT_COMPLETIONS_OUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ReplaceIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get MatchCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Reserved1(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get Reserved2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ReplaceIndex(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set MatchCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Reserved1(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set Reserved2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_CACHED_SYMBOL_INFO (size: 32)
 */
export interface DEBUG_CACHED_SYMBOL_INFO {
  /** u64 */
  ModBase: number | bigint;
  /** u64 */
  Arg1: number | bigint;
  /** u64 */
  Arg2: number | bigint;
  /** u32 */
  Id: number;
  /** u32 */
  Arg3: number;
}

export const sizeofDEBUG_CACHED_SYMBOL_INFO = 32;

export function allocDEBUG_CACHED_SYMBOL_INFO(data?: Partial<DEBUG_CACHED_SYMBOL_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_CACHED_SYMBOL_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.ModBase !== undefined) view.setBigUint64(0, util.toBigInt(data.ModBase), true);
  // 0x08: u64
  if (data?.Arg1 !== undefined) view.setBigUint64(8, util.toBigInt(data.Arg1), true);
  // 0x10: u64
  if (data?.Arg2 !== undefined) view.setBigUint64(16, util.toBigInt(data.Arg2), true);
  // 0x18: u32
  if (data?.Id !== undefined) view.setUint32(24, Number(data.Id), true);
  // 0x1c: u32
  if (data?.Arg3 !== undefined) view.setUint32(28, Number(data.Arg3), true);
  return buf;
}

export class DEBUG_CACHED_SYMBOL_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get ModBase(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get Arg1(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get Arg2(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u32
  get Id(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get Arg3(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: u64
  set ModBase(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set Arg1(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set Arg2(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u32
  set Id(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set Arg3(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.PROCESS_NAME_ENTRY (size: 16)
 */
export interface PROCESS_NAME_ENTRY {
  /** u32 */
  ProcessId: number;
  /** u32 */
  NameOffset: number;
  /** u32 */
  NameSize: number;
  /** u32 */
  NextEntry: number;
}

export const sizeofPROCESS_NAME_ENTRY = 16;

export function allocPROCESS_NAME_ENTRY(data?: Partial<PROCESS_NAME_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_NAME_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ProcessId !== undefined) view.setUint32(0, Number(data.ProcessId), true);
  // 0x04: u32
  if (data?.NameOffset !== undefined) view.setUint32(4, Number(data.NameOffset), true);
  // 0x08: u32
  if (data?.NameSize !== undefined) view.setUint32(8, Number(data.NameSize), true);
  // 0x0c: u32
  if (data?.NextEntry !== undefined) view.setUint32(12, Number(data.NextEntry), true);
  return buf;
}

export class PROCESS_NAME_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ProcessId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NameOffset(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get NameSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get NextEntry(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set ProcessId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NameOffset(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set NameSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set NextEntry(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_THREAD_BASIC_INFORMATION (size: 64)
 */
export interface DEBUG_THREAD_BASIC_INFORMATION {
  /** u32 */
  Valid: number;
  /** u32 */
  ExitStatus: number;
  /** u32 */
  PriorityClass: number;
  /** u32 */
  Priority: number;
  /** u64 */
  CreateTime: number | bigint;
  /** u64 */
  ExitTime: number | bigint;
  /** u64 */
  KernelTime: number | bigint;
  /** u64 */
  UserTime: number | bigint;
  /** u64 */
  StartOffset: number | bigint;
  /** u64 */
  Affinity: number | bigint;
}

export const sizeofDEBUG_THREAD_BASIC_INFORMATION = 64;

export function allocDEBUG_THREAD_BASIC_INFORMATION(data?: Partial<DEBUG_THREAD_BASIC_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_THREAD_BASIC_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Valid !== undefined) view.setUint32(0, Number(data.Valid), true);
  // 0x04: u32
  if (data?.ExitStatus !== undefined) view.setUint32(4, Number(data.ExitStatus), true);
  // 0x08: u32
  if (data?.PriorityClass !== undefined) view.setUint32(8, Number(data.PriorityClass), true);
  // 0x0c: u32
  if (data?.Priority !== undefined) view.setUint32(12, Number(data.Priority), true);
  // 0x10: u64
  if (data?.CreateTime !== undefined) view.setBigUint64(16, util.toBigInt(data.CreateTime), true);
  // 0x18: u64
  if (data?.ExitTime !== undefined) view.setBigUint64(24, util.toBigInt(data.ExitTime), true);
  // 0x20: u64
  if (data?.KernelTime !== undefined) view.setBigUint64(32, util.toBigInt(data.KernelTime), true);
  // 0x28: u64
  if (data?.UserTime !== undefined) view.setBigUint64(40, util.toBigInt(data.UserTime), true);
  // 0x30: u64
  if (data?.StartOffset !== undefined) view.setBigUint64(48, util.toBigInt(data.StartOffset), true);
  // 0x38: u64
  if (data?.Affinity !== undefined) view.setBigUint64(56, util.toBigInt(data.Affinity), true);
  return buf;
}

export class DEBUG_THREAD_BASIC_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Valid(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ExitStatus(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get PriorityClass(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Priority(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u64
  get CreateTime(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get ExitTime(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u64
  get KernelTime(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: u64
  get UserTime(): number | bigint {
    return this.view.getBigUint64(40, true);
  }

  // 0x30: u64
  get StartOffset(): number | bigint {
    return this.view.getBigUint64(48, true);
  }

  // 0x38: u64
  get Affinity(): number | bigint {
    return this.view.getBigUint64(56, true);
  }

  // 0x00: u32
  set Valid(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ExitStatus(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set PriorityClass(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Priority(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u64
  set CreateTime(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set ExitTime(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u64
  set KernelTime(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: u64
  set UserTime(value: number | bigint) {
    this.view.setBigUint64(40, util.toBigInt(value), true);
  }

  // 0x30: u64
  set StartOffset(value: number | bigint) {
    this.view.setBigUint64(48, util.toBigInt(value), true);
  }

  // 0x38: u64
  set Affinity(value: number | bigint) {
    this.view.setBigUint64(56, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.SYMBOL_INFO_EX (size: 32)
 */
export interface SYMBOL_INFO_EX {
  /** u32 */
  SizeOfStruct: number;
  /** u32 */
  TypeOfInfo: number;
  /** u64 */
  Offset: number | bigint;
  /** u32 */
  Line: number;
  /** u32 */
  Displacement: number;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofSYMBOL_INFO_EX = 32;

export function allocSYMBOL_INFO_EX(data?: Partial<SYMBOL_INFO_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofSYMBOL_INFO_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: u32
  if (data?.TypeOfInfo !== undefined) view.setUint32(4, Number(data.TypeOfInfo), true);
  // 0x08: u64
  if (data?.Offset !== undefined) view.setBigUint64(8, util.toBigInt(data.Offset), true);
  // 0x10: u32
  if (data?.Line !== undefined) view.setUint32(16, Number(data.Line), true);
  // 0x14: u32
  if (data?.Displacement !== undefined) view.setUint32(20, Number(data.Displacement), true);
  // 0x18: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(24, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

export class SYMBOL_INFO_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SizeOfStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get TypeOfInfo(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get Offset(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u32
  get Line(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Displacement(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set SizeOfStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set TypeOfInfo(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set Offset(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u32
  set Line(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Displacement(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_BREAKPOINT_PARAMETERS (size: 56)
 */
export interface DEBUG_BREAKPOINT_PARAMETERS {
  /** u64 */
  Offset: number | bigint;
  /** u32 */
  Id: number;
  /** u32 */
  BreakType: number;
  /** u32 */
  ProcType: number;
  /** u32 */
  Flags: number;
  /** u32 */
  DataSize: number;
  /** u32 */
  DataAccessType: number;
  /** u32 */
  PassCount: number;
  /** u32 */
  CurrentPassCount: number;
  /** u32 */
  MatchThread: number;
  /** u32 */
  CommandSize: number;
  /** u32 */
  OffsetExpressionSize: number;
}

export const sizeofDEBUG_BREAKPOINT_PARAMETERS = 56;

export function allocDEBUG_BREAKPOINT_PARAMETERS(data?: Partial<DEBUG_BREAKPOINT_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_BREAKPOINT_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Offset !== undefined) view.setBigUint64(0, util.toBigInt(data.Offset), true);
  // 0x08: u32
  if (data?.Id !== undefined) view.setUint32(8, Number(data.Id), true);
  // 0x0c: u32
  if (data?.BreakType !== undefined) view.setUint32(12, Number(data.BreakType), true);
  // 0x10: u32
  if (data?.ProcType !== undefined) view.setUint32(16, Number(data.ProcType), true);
  // 0x14: u32
  if (data?.Flags !== undefined) view.setUint32(20, Number(data.Flags), true);
  // 0x18: u32
  if (data?.DataSize !== undefined) view.setUint32(24, Number(data.DataSize), true);
  // 0x1c: u32
  if (data?.DataAccessType !== undefined) view.setUint32(28, Number(data.DataAccessType), true);
  // 0x20: u32
  if (data?.PassCount !== undefined) view.setUint32(32, Number(data.PassCount), true);
  // 0x24: u32
  if (data?.CurrentPassCount !== undefined) view.setUint32(36, Number(data.CurrentPassCount), true);
  // 0x28: u32
  if (data?.MatchThread !== undefined) view.setUint32(40, Number(data.MatchThread), true);
  // 0x2c: u32
  if (data?.CommandSize !== undefined) view.setUint32(44, Number(data.CommandSize), true);
  // 0x30: u32
  if (data?.OffsetExpressionSize !== undefined) view.setUint32(48, Number(data.OffsetExpressionSize), true);
  // 0x34: pad4
  return buf;
}

export class DEBUG_BREAKPOINT_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Offset(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u32
  get Id(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get BreakType(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ProcType(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Flags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get DataSize(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get DataAccessType(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get PassCount(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get CurrentPassCount(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get MatchThread(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get CommandSize(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get OffsetExpressionSize(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x00: u64
  set Offset(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u32
  set Id(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set BreakType(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ProcType(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Flags(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set DataSize(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set DataAccessType(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set PassCount(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set CurrentPassCount(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set MatchThread(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set CommandSize(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set OffsetExpressionSize(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_CREATE_PROCESS_OPTIONS (size: 16)
 */
export interface DEBUG_CREATE_PROCESS_OPTIONS {
  /** u32 */
  CreateFlags: number;
  /** u32 */
  EngCreateFlags: number;
  /** u32 */
  VerifierFlags: number;
  /** u32 */
  Reserved: number;
}

export const sizeofDEBUG_CREATE_PROCESS_OPTIONS = 16;

export function allocDEBUG_CREATE_PROCESS_OPTIONS(data?: Partial<DEBUG_CREATE_PROCESS_OPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_CREATE_PROCESS_OPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CreateFlags !== undefined) view.setUint32(0, Number(data.CreateFlags), true);
  // 0x04: u32
  if (data?.EngCreateFlags !== undefined) view.setUint32(4, Number(data.EngCreateFlags), true);
  // 0x08: u32
  if (data?.VerifierFlags !== undefined) view.setUint32(8, Number(data.VerifierFlags), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

export class DEBUG_CREATE_PROCESS_OPTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get CreateFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get EngCreateFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get VerifierFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Reserved(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set CreateFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set EngCreateFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set VerifierFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Reserved(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_CLIENT_CONTEXT (size: 8)
 */
export interface DEBUG_CLIENT_CONTEXT {
  /** u32 */
  cbSize: number;
  /** u32 */
  eClient: number;
}

export const sizeofDEBUG_CLIENT_CONTEXT = 8;

export function allocDEBUG_CLIENT_CONTEXT(data?: Partial<DEBUG_CLIENT_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_CLIENT_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.eClient !== undefined) view.setUint32(4, Number(data.eClient), true);
  return buf;
}

export class DEBUG_CLIENT_CONTEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get eClient(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set eClient(value: number) {
    this.view.setUint32(4, value, true);
  }
}

export type BOOL = number;

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_STACK_FRAME (size: 64)
 */
export interface DEBUG_STACK_FRAME {
  /** u64 */
  InstructionOffset: number | bigint;
  /** u64 */
  ReturnOffset: number | bigint;
  /** u64 */
  FrameOffset: number | bigint;
  /** u64 */
  StackOffset: number | bigint;
  /** u64 */
  FuncTableEntry: number | bigint;
  /** array */
  Params: Deno.PointerValue | null;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  Virtual: boolean;
  /** u32 */
  FrameNumber: number;
}

export const sizeofDEBUG_STACK_FRAME = 64;

export function allocDEBUG_STACK_FRAME(data?: Partial<DEBUG_STACK_FRAME>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_STACK_FRAME);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.InstructionOffset !== undefined) view.setBigUint64(0, util.toBigInt(data.InstructionOffset), true);
  // 0x08: u64
  if (data?.ReturnOffset !== undefined) view.setBigUint64(8, util.toBigInt(data.ReturnOffset), true);
  // 0x10: u64
  if (data?.FrameOffset !== undefined) view.setBigUint64(16, util.toBigInt(data.FrameOffset), true);
  // 0x18: u64
  if (data?.StackOffset !== undefined) view.setBigUint64(24, util.toBigInt(data.StackOffset), true);
  // 0x20: u64
  if (data?.FuncTableEntry !== undefined) view.setBigUint64(32, util.toBigInt(data.FuncTableEntry), true);
  // 0x28: pointer
  if (data?.Params !== undefined) view.setBigUint64(40, data.Params === null ? 0n : util.toBigInt(util.toPointer(data.Params)), true);
  // 0x30: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(48, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  // 0x38: i32
  if (data?.Virtual !== undefined) view.setInt32(56, Number(data.Virtual), true);
  // 0x3c: u32
  if (data?.FrameNumber !== undefined) view.setUint32(60, Number(data.FrameNumber), true);
  return buf;
}

export class DEBUG_STACK_FRAMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get InstructionOffset(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get ReturnOffset(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get FrameOffset(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get StackOffset(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u64
  get FuncTableEntry(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: pointer
  get Params(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: i32
  get Virtual(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: u32
  get FrameNumber(): number {
    return this.view.getUint32(60, true);
  }

  // 0x00: u64
  set InstructionOffset(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set ReturnOffset(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set FrameOffset(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set StackOffset(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u64
  set FuncTableEntry(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: pointer
  set Params(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: i32
  set Virtual(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: u32
  set FrameNumber(value: number) {
    this.view.setUint32(60, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_STACK_FRAME_EX (size: 72)
 */
export interface DEBUG_STACK_FRAME_EX {
  /** u64 */
  InstructionOffset: number | bigint;
  /** u64 */
  ReturnOffset: number | bigint;
  /** u64 */
  FrameOffset: number | bigint;
  /** u64 */
  StackOffset: number | bigint;
  /** u64 */
  FuncTableEntry: number | bigint;
  /** array */
  Params: Deno.PointerValue | null;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  Virtual: boolean;
  /** u32 */
  FrameNumber: number;
  /** u32 */
  InlineFrameContext: number;
  /** u32 */
  Reserved1: number;
}

export const sizeofDEBUG_STACK_FRAME_EX = 72;

export function allocDEBUG_STACK_FRAME_EX(data?: Partial<DEBUG_STACK_FRAME_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_STACK_FRAME_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.InstructionOffset !== undefined) view.setBigUint64(0, util.toBigInt(data.InstructionOffset), true);
  // 0x08: u64
  if (data?.ReturnOffset !== undefined) view.setBigUint64(8, util.toBigInt(data.ReturnOffset), true);
  // 0x10: u64
  if (data?.FrameOffset !== undefined) view.setBigUint64(16, util.toBigInt(data.FrameOffset), true);
  // 0x18: u64
  if (data?.StackOffset !== undefined) view.setBigUint64(24, util.toBigInt(data.StackOffset), true);
  // 0x20: u64
  if (data?.FuncTableEntry !== undefined) view.setBigUint64(32, util.toBigInt(data.FuncTableEntry), true);
  // 0x28: pointer
  if (data?.Params !== undefined) view.setBigUint64(40, data.Params === null ? 0n : util.toBigInt(util.toPointer(data.Params)), true);
  // 0x30: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(48, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  // 0x38: i32
  if (data?.Virtual !== undefined) view.setInt32(56, Number(data.Virtual), true);
  // 0x3c: u32
  if (data?.FrameNumber !== undefined) view.setUint32(60, Number(data.FrameNumber), true);
  // 0x40: u32
  if (data?.InlineFrameContext !== undefined) view.setUint32(64, Number(data.InlineFrameContext), true);
  // 0x44: u32
  if (data?.Reserved1 !== undefined) view.setUint32(68, Number(data.Reserved1), true);
  return buf;
}

export class DEBUG_STACK_FRAME_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get InstructionOffset(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get ReturnOffset(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get FrameOffset(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get StackOffset(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u64
  get FuncTableEntry(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: pointer
  get Params(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: i32
  get Virtual(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: u32
  get FrameNumber(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get InlineFrameContext(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get Reserved1(): number {
    return this.view.getUint32(68, true);
  }

  // 0x00: u64
  set InstructionOffset(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set ReturnOffset(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set FrameOffset(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set StackOffset(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u64
  set FuncTableEntry(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: pointer
  set Params(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: i32
  set Virtual(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: u32
  set FrameNumber(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set InlineFrameContext(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set Reserved1(value: number) {
    this.view.setUint32(68, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.INLINE_FRAME_CONTEXT (size: 16)
 */
export interface INLINE_FRAME_CONTEXT {
  /** u32 */
  ContextValue: number;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofINLINE_FRAME_CONTEXT = 16;

export function allocINLINE_FRAME_CONTEXT(data?: Partial<INLINE_FRAME_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofINLINE_FRAME_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ContextValue !== undefined) view.setUint32(0, Number(data.ContextValue), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class INLINE_FRAME_CONTEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ContextValue(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ContextValue(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.System.Diagnostics.Debug.STACK_SRC_INFO (size: 40)
 */
export interface STACK_SRC_INFO {
  /** Windows.Win32.Foundation.PWSTR */
  ImagePath: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  ModuleName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  Function: string | null | Uint8Array | Uint16Array;
  /** u32 */
  Displacement: number;
  /** u32 */
  Row: number;
  /** u32 */
  Column: number;
}

export const sizeofSTACK_SRC_INFO = 40;

export function allocSTACK_SRC_INFO(data?: Partial<STACK_SRC_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSTACK_SRC_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.ImagePath !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.ImagePath);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.ModuleName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.ModuleName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.Function !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.Function);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.Displacement !== undefined) view.setUint32(24, Number(data.Displacement), true);
  // 0x1c: u32
  if (data?.Row !== undefined) view.setUint32(28, Number(data.Row), true);
  // 0x20: u32
  if (data?.Column !== undefined) view.setUint32(32, Number(data.Column), true);
  // 0x24: pad4
  return buf;
}

export class STACK_SRC_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get ImagePath(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get ModuleName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get Function(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get Displacement(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get Row(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get Column(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: buffer
  set ImagePath(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set ModuleName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set Function(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, util.toBigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: u32
  set Displacement(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set Row(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set Column(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.STACK_SYM_FRAME_INFO (size: 16)
 */
export interface STACK_SYM_FRAME_INFO {
  /** Windows.Win32.System.Diagnostics.Debug.DEBUG_STACK_FRAME_EX */
  StackFrameEx: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.STACK_SRC_INFO */
  SrcInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSTACK_SYM_FRAME_INFO = 16;

export function allocSTACK_SYM_FRAME_INFO(data?: Partial<STACK_SYM_FRAME_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSTACK_SYM_FRAME_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.StackFrameEx !== undefined) view.setBigUint64(0, data.StackFrameEx === null ? 0n : util.toBigInt(util.toPointer(data.StackFrameEx)), true);
  // 0x08: pointer
  if (data?.SrcInfo !== undefined) view.setBigUint64(8, data.SrcInfo === null ? 0n : util.toBigInt(util.toPointer(data.SrcInfo)), true);
  return buf;
}

export class STACK_SYM_FRAME_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get StackFrameEx(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get SrcInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set StackFrameEx(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set SrcInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_SPECIFIC_FILTER_PARAMETERS (size: 24)
 */
export interface DEBUG_SPECIFIC_FILTER_PARAMETERS {
  /** u32 */
  ExecutionOption: number;
  /** u32 */
  ContinueOption: number;
  /** u32 */
  TextSize: number;
  /** u32 */
  CommandSize: number;
  /** u32 */
  ArgumentSize: number;
}

export const sizeofDEBUG_SPECIFIC_FILTER_PARAMETERS = 24;

export function allocDEBUG_SPECIFIC_FILTER_PARAMETERS(data?: Partial<DEBUG_SPECIFIC_FILTER_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_SPECIFIC_FILTER_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ExecutionOption !== undefined) view.setUint32(0, Number(data.ExecutionOption), true);
  // 0x04: u32
  if (data?.ContinueOption !== undefined) view.setUint32(4, Number(data.ContinueOption), true);
  // 0x08: u32
  if (data?.TextSize !== undefined) view.setUint32(8, Number(data.TextSize), true);
  // 0x0c: u32
  if (data?.CommandSize !== undefined) view.setUint32(12, Number(data.CommandSize), true);
  // 0x10: u32
  if (data?.ArgumentSize !== undefined) view.setUint32(16, Number(data.ArgumentSize), true);
  // 0x14: pad4
  return buf;
}

export class DEBUG_SPECIFIC_FILTER_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ExecutionOption(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ContinueOption(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get TextSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get CommandSize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ArgumentSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set ExecutionOption(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ContinueOption(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set TextSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set CommandSize(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ArgumentSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_EXCEPTION_FILTER_PARAMETERS (size: 24)
 */
export interface DEBUG_EXCEPTION_FILTER_PARAMETERS {
  /** u32 */
  ExecutionOption: number;
  /** u32 */
  ContinueOption: number;
  /** u32 */
  TextSize: number;
  /** u32 */
  CommandSize: number;
  /** u32 */
  SecondCommandSize: number;
  /** u32 */
  ExceptionCode: number;
}

export const sizeofDEBUG_EXCEPTION_FILTER_PARAMETERS = 24;

export function allocDEBUG_EXCEPTION_FILTER_PARAMETERS(data?: Partial<DEBUG_EXCEPTION_FILTER_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_EXCEPTION_FILTER_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ExecutionOption !== undefined) view.setUint32(0, Number(data.ExecutionOption), true);
  // 0x04: u32
  if (data?.ContinueOption !== undefined) view.setUint32(4, Number(data.ContinueOption), true);
  // 0x08: u32
  if (data?.TextSize !== undefined) view.setUint32(8, Number(data.TextSize), true);
  // 0x0c: u32
  if (data?.CommandSize !== undefined) view.setUint32(12, Number(data.CommandSize), true);
  // 0x10: u32
  if (data?.SecondCommandSize !== undefined) view.setUint32(16, Number(data.SecondCommandSize), true);
  // 0x14: u32
  if (data?.ExceptionCode !== undefined) view.setUint32(20, Number(data.ExceptionCode), true);
  return buf;
}

export class DEBUG_EXCEPTION_FILTER_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ExecutionOption(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ContinueOption(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get TextSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get CommandSize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get SecondCommandSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ExceptionCode(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set ExecutionOption(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ContinueOption(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set TextSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set CommandSize(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set SecondCommandSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ExceptionCode(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_LAST_EVENT_INFO_BREAKPOINT (size: 8)
 */
export interface DEBUG_LAST_EVENT_INFO_BREAKPOINT {
  /** u32 */
  Id: number;
}

export const sizeofDEBUG_LAST_EVENT_INFO_BREAKPOINT = 8;

export function allocDEBUG_LAST_EVENT_INFO_BREAKPOINT(data?: Partial<DEBUG_LAST_EVENT_INFO_BREAKPOINT>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_LAST_EVENT_INFO_BREAKPOINT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Id !== undefined) view.setUint32(0, Number(data.Id), true);
  // 0x04: pad4
  return buf;
}

export class DEBUG_LAST_EVENT_INFO_BREAKPOINTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Id(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set Id(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD64 (size: 48)
 */
export interface EXCEPTION_RECORD64 {
  /** Windows.Win32.Foundation.NTSTATUS */
  ExceptionCode: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ExceptionFlags: number;
  /** u64 */
  ExceptionRecord: number | bigint;
  /** u64 */
  ExceptionAddress: number | bigint;
  /** u32 */
  NumberParameters: number;
  /** u32 */
  __unusedAlignment: number;
  /** array */
  ExceptionInformation: Deno.PointerValue | null;
}

export const sizeofEXCEPTION_RECORD64 = 48;

export function allocEXCEPTION_RECORD64(data?: Partial<EXCEPTION_RECORD64>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_RECORD64);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionCode !== undefined) view.setBigUint64(0, data.ExceptionCode === null ? 0n : util.toBigInt(util.toPointer(data.ExceptionCode)), true);
  // 0x08: u32
  if (data?.ExceptionFlags !== undefined) view.setUint32(8, Number(data.ExceptionFlags), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(16, util.toBigInt(data.ExceptionRecord), true);
  // 0x18: u64
  if (data?.ExceptionAddress !== undefined) view.setBigUint64(24, util.toBigInt(data.ExceptionAddress), true);
  // 0x20: u32
  if (data?.NumberParameters !== undefined) view.setUint32(32, Number(data.NumberParameters), true);
  // 0x24: u32
  if (data?.__unusedAlignment !== undefined) view.setUint32(36, Number(data.__unusedAlignment), true);
  // 0x28: pointer
  if (data?.ExceptionInformation !== undefined) view.setBigUint64(40, data.ExceptionInformation === null ? 0n : util.toBigInt(util.toPointer(data.ExceptionInformation)), true);
  return buf;
}

export class EXCEPTION_RECORD64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ExceptionCode(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ExceptionFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: u64
  get ExceptionRecord(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get ExceptionAddress(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u32
  get NumberParameters(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get __unusedAlignment(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get ExceptionInformation(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ExceptionCode(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ExceptionFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: u64
  set ExceptionRecord(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set ExceptionAddress(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u32
  set NumberParameters(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set __unusedAlignment(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set ExceptionInformation(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_LAST_EVENT_INFO_EXCEPTION (size: 16)
 */
export interface DEBUG_LAST_EVENT_INFO_EXCEPTION {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD64 */
  ExceptionRecord: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  FirstChance: number;
}

export const sizeofDEBUG_LAST_EVENT_INFO_EXCEPTION = 16;

export function allocDEBUG_LAST_EVENT_INFO_EXCEPTION(data?: Partial<DEBUG_LAST_EVENT_INFO_EXCEPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_LAST_EVENT_INFO_EXCEPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(0, data.ExceptionRecord === null ? 0n : util.toBigInt(util.toPointer(data.ExceptionRecord)), true);
  // 0x08: u32
  if (data?.FirstChance !== undefined) view.setUint32(8, Number(data.FirstChance), true);
  // 0x0c: pad4
  return buf;
}

export class DEBUG_LAST_EVENT_INFO_EXCEPTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ExceptionRecord(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get FirstChance(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set ExceptionRecord(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set FirstChance(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_LAST_EVENT_INFO_EXIT_THREAD (size: 8)
 */
export interface DEBUG_LAST_EVENT_INFO_EXIT_THREAD {
  /** u32 */
  ExitCode: number;
}

export const sizeofDEBUG_LAST_EVENT_INFO_EXIT_THREAD = 8;

export function allocDEBUG_LAST_EVENT_INFO_EXIT_THREAD(data?: Partial<DEBUG_LAST_EVENT_INFO_EXIT_THREAD>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_LAST_EVENT_INFO_EXIT_THREAD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ExitCode !== undefined) view.setUint32(0, Number(data.ExitCode), true);
  // 0x04: pad4
  return buf;
}

export class DEBUG_LAST_EVENT_INFO_EXIT_THREADView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ExitCode(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set ExitCode(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_LAST_EVENT_INFO_EXIT_PROCESS (size: 8)
 */
export interface DEBUG_LAST_EVENT_INFO_EXIT_PROCESS {
  /** u32 */
  ExitCode: number;
}

export const sizeofDEBUG_LAST_EVENT_INFO_EXIT_PROCESS = 8;

export function allocDEBUG_LAST_EVENT_INFO_EXIT_PROCESS(data?: Partial<DEBUG_LAST_EVENT_INFO_EXIT_PROCESS>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_LAST_EVENT_INFO_EXIT_PROCESS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ExitCode !== undefined) view.setUint32(0, Number(data.ExitCode), true);
  // 0x04: pad4
  return buf;
}

export class DEBUG_LAST_EVENT_INFO_EXIT_PROCESSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ExitCode(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set ExitCode(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_LAST_EVENT_INFO_LOAD_MODULE (size: 8)
 */
export interface DEBUG_LAST_EVENT_INFO_LOAD_MODULE {
  /** u64 */
  Base: number | bigint;
}

export const sizeofDEBUG_LAST_EVENT_INFO_LOAD_MODULE = 8;

export function allocDEBUG_LAST_EVENT_INFO_LOAD_MODULE(data?: Partial<DEBUG_LAST_EVENT_INFO_LOAD_MODULE>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_LAST_EVENT_INFO_LOAD_MODULE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Base !== undefined) view.setBigUint64(0, util.toBigInt(data.Base), true);
  return buf;
}

export class DEBUG_LAST_EVENT_INFO_LOAD_MODULEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Base(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x00: u64
  set Base(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_LAST_EVENT_INFO_UNLOAD_MODULE (size: 8)
 */
export interface DEBUG_LAST_EVENT_INFO_UNLOAD_MODULE {
  /** u64 */
  Base: number | bigint;
}

export const sizeofDEBUG_LAST_EVENT_INFO_UNLOAD_MODULE = 8;

export function allocDEBUG_LAST_EVENT_INFO_UNLOAD_MODULE(data?: Partial<DEBUG_LAST_EVENT_INFO_UNLOAD_MODULE>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_LAST_EVENT_INFO_UNLOAD_MODULE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Base !== undefined) view.setBigUint64(0, util.toBigInt(data.Base), true);
  return buf;
}

export class DEBUG_LAST_EVENT_INFO_UNLOAD_MODULEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Base(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x00: u64
  set Base(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_LAST_EVENT_INFO_SYSTEM_ERROR (size: 8)
 */
export interface DEBUG_LAST_EVENT_INFO_SYSTEM_ERROR {
  /** u32 */
  Error: number;
  /** u32 */
  Level: number;
}

export const sizeofDEBUG_LAST_EVENT_INFO_SYSTEM_ERROR = 8;

export function allocDEBUG_LAST_EVENT_INFO_SYSTEM_ERROR(data?: Partial<DEBUG_LAST_EVENT_INFO_SYSTEM_ERROR>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_LAST_EVENT_INFO_SYSTEM_ERROR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Error !== undefined) view.setUint32(0, Number(data.Error), true);
  // 0x04: u32
  if (data?.Level !== undefined) view.setUint32(4, Number(data.Level), true);
  return buf;
}

export class DEBUG_LAST_EVENT_INFO_SYSTEM_ERRORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Error(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Level(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set Error(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Level(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_LAST_EVENT_INFO_SERVICE_EXCEPTION (size: 16)
 */
export interface DEBUG_LAST_EVENT_INFO_SERVICE_EXCEPTION {
  /** u32 */
  Kind: number;
  /** u32 */
  DataSize: number;
  /** u64 */
  Address: number | bigint;
}

export const sizeofDEBUG_LAST_EVENT_INFO_SERVICE_EXCEPTION = 16;

export function allocDEBUG_LAST_EVENT_INFO_SERVICE_EXCEPTION(data?: Partial<DEBUG_LAST_EVENT_INFO_SERVICE_EXCEPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_LAST_EVENT_INFO_SERVICE_EXCEPTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Kind !== undefined) view.setUint32(0, Number(data.Kind), true);
  // 0x04: u32
  if (data?.DataSize !== undefined) view.setUint32(4, Number(data.DataSize), true);
  // 0x08: u64
  if (data?.Address !== undefined) view.setBigUint64(8, util.toBigInt(data.Address), true);
  return buf;
}

export class DEBUG_LAST_EVENT_INFO_SERVICE_EXCEPTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Kind(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get DataSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get Address(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u32
  set Kind(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set DataSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set Address(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_VALUE (size: 16)
 */
export interface DEBUG_VALUE {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  TailOfRawBytes: number;
  /** u32 */
  Type: number;
}

export const sizeofDEBUG_VALUE = 16;

export function allocDEBUG_VALUE(data?: Partial<DEBUG_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u32
  if (data?.TailOfRawBytes !== undefined) view.setUint32(8, Number(data.TailOfRawBytes), true);
  // 0x0c: u32
  if (data?.Type !== undefined) view.setUint32(12, Number(data.Type), true);
  return buf;
}

export class DEBUG_VALUEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get TailOfRawBytes(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Type(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set TailOfRawBytes(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Type(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_PROCESSOR_IDENTIFICATION_ALPHA (size: 8)
 */
export interface DEBUG_PROCESSOR_IDENTIFICATION_ALPHA {
  /** u32 */
  Type: number;
  /** u32 */
  Revision: number;
}

export const sizeofDEBUG_PROCESSOR_IDENTIFICATION_ALPHA = 8;

export function allocDEBUG_PROCESSOR_IDENTIFICATION_ALPHA(data?: Partial<DEBUG_PROCESSOR_IDENTIFICATION_ALPHA>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_PROCESSOR_IDENTIFICATION_ALPHA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Type !== undefined) view.setUint32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Revision !== undefined) view.setUint32(4, Number(data.Revision), true);
  return buf;
}

export class DEBUG_PROCESSOR_IDENTIFICATION_ALPHAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Type(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Revision(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set Type(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Revision(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_PROCESSOR_IDENTIFICATION_AMD64 (size: 24)
 */
export interface DEBUG_PROCESSOR_IDENTIFICATION_AMD64 {
  /** u32 */
  Family: number;
  /** u32 */
  Model: number;
  /** u32 */
  Stepping: number;
  /** array */
  VendorString: Deno.PointerValue | null;
}

export const sizeofDEBUG_PROCESSOR_IDENTIFICATION_AMD64 = 24;

export function allocDEBUG_PROCESSOR_IDENTIFICATION_AMD64(data?: Partial<DEBUG_PROCESSOR_IDENTIFICATION_AMD64>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_PROCESSOR_IDENTIFICATION_AMD64);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Family !== undefined) view.setUint32(0, Number(data.Family), true);
  // 0x04: u32
  if (data?.Model !== undefined) view.setUint32(4, Number(data.Model), true);
  // 0x08: u32
  if (data?.Stepping !== undefined) view.setUint32(8, Number(data.Stepping), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.VendorString !== undefined) view.setBigUint64(16, data.VendorString === null ? 0n : util.toBigInt(util.toPointer(data.VendorString)), true);
  return buf;
}

export class DEBUG_PROCESSOR_IDENTIFICATION_AMD64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Family(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Model(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Stepping(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get VendorString(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Family(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Model(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Stepping(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set VendorString(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_PROCESSOR_IDENTIFICATION_IA64 (size: 24)
 */
export interface DEBUG_PROCESSOR_IDENTIFICATION_IA64 {
  /** u32 */
  Model: number;
  /** u32 */
  Revision: number;
  /** u32 */
  Family: number;
  /** u32 */
  ArchRev: number;
  /** array */
  VendorString: Deno.PointerValue | null;
}

export const sizeofDEBUG_PROCESSOR_IDENTIFICATION_IA64 = 24;

export function allocDEBUG_PROCESSOR_IDENTIFICATION_IA64(data?: Partial<DEBUG_PROCESSOR_IDENTIFICATION_IA64>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_PROCESSOR_IDENTIFICATION_IA64);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Model !== undefined) view.setUint32(0, Number(data.Model), true);
  // 0x04: u32
  if (data?.Revision !== undefined) view.setUint32(4, Number(data.Revision), true);
  // 0x08: u32
  if (data?.Family !== undefined) view.setUint32(8, Number(data.Family), true);
  // 0x0c: u32
  if (data?.ArchRev !== undefined) view.setUint32(12, Number(data.ArchRev), true);
  // 0x10: pointer
  if (data?.VendorString !== undefined) view.setBigUint64(16, data.VendorString === null ? 0n : util.toBigInt(util.toPointer(data.VendorString)), true);
  return buf;
}

export class DEBUG_PROCESSOR_IDENTIFICATION_IA64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Model(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Revision(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Family(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ArchRev(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get VendorString(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Model(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Revision(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Family(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ArchRev(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set VendorString(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_PROCESSOR_IDENTIFICATION_X86 (size: 24)
 */
export interface DEBUG_PROCESSOR_IDENTIFICATION_X86 {
  /** u32 */
  Family: number;
  /** u32 */
  Model: number;
  /** u32 */
  Stepping: number;
  /** array */
  VendorString: Deno.PointerValue | null;
}

export const sizeofDEBUG_PROCESSOR_IDENTIFICATION_X86 = 24;

export function allocDEBUG_PROCESSOR_IDENTIFICATION_X86(data?: Partial<DEBUG_PROCESSOR_IDENTIFICATION_X86>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_PROCESSOR_IDENTIFICATION_X86);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Family !== undefined) view.setUint32(0, Number(data.Family), true);
  // 0x04: u32
  if (data?.Model !== undefined) view.setUint32(4, Number(data.Model), true);
  // 0x08: u32
  if (data?.Stepping !== undefined) view.setUint32(8, Number(data.Stepping), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.VendorString !== undefined) view.setBigUint64(16, data.VendorString === null ? 0n : util.toBigInt(util.toPointer(data.VendorString)), true);
  return buf;
}

export class DEBUG_PROCESSOR_IDENTIFICATION_X86View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Family(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Model(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Stepping(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get VendorString(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Family(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Model(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Stepping(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set VendorString(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_PROCESSOR_IDENTIFICATION_ARM (size: 16)
 */
export interface DEBUG_PROCESSOR_IDENTIFICATION_ARM {
  /** u32 */
  Model: number;
  /** u32 */
  Revision: number;
  /** array */
  VendorString: Deno.PointerValue | null;
}

export const sizeofDEBUG_PROCESSOR_IDENTIFICATION_ARM = 16;

export function allocDEBUG_PROCESSOR_IDENTIFICATION_ARM(data?: Partial<DEBUG_PROCESSOR_IDENTIFICATION_ARM>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_PROCESSOR_IDENTIFICATION_ARM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Model !== undefined) view.setUint32(0, Number(data.Model), true);
  // 0x04: u32
  if (data?.Revision !== undefined) view.setUint32(4, Number(data.Revision), true);
  // 0x08: pointer
  if (data?.VendorString !== undefined) view.setBigUint64(8, data.VendorString === null ? 0n : util.toBigInt(util.toPointer(data.VendorString)), true);
  return buf;
}

export class DEBUG_PROCESSOR_IDENTIFICATION_ARMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Model(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Revision(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get VendorString(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Model(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Revision(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set VendorString(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_PROCESSOR_IDENTIFICATION_ARM64 (size: 16)
 */
export interface DEBUG_PROCESSOR_IDENTIFICATION_ARM64 {
  /** u32 */
  Model: number;
  /** u32 */
  Revision: number;
  /** array */
  VendorString: Deno.PointerValue | null;
}

export const sizeofDEBUG_PROCESSOR_IDENTIFICATION_ARM64 = 16;

export function allocDEBUG_PROCESSOR_IDENTIFICATION_ARM64(data?: Partial<DEBUG_PROCESSOR_IDENTIFICATION_ARM64>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_PROCESSOR_IDENTIFICATION_ARM64);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Model !== undefined) view.setUint32(0, Number(data.Model), true);
  // 0x04: u32
  if (data?.Revision !== undefined) view.setUint32(4, Number(data.Revision), true);
  // 0x08: pointer
  if (data?.VendorString !== undefined) view.setBigUint64(8, data.VendorString === null ? 0n : util.toBigInt(util.toPointer(data.VendorString)), true);
  return buf;
}

export class DEBUG_PROCESSOR_IDENTIFICATION_ARM64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Model(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Revision(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get VendorString(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Model(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Revision(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set VendorString(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_PROCESSOR_IDENTIFICATION_ALL (size: 48)
 */
export interface DEBUG_PROCESSOR_IDENTIFICATION_ALL {
  /** Windows.Win32.System.Diagnostics.Debug.DEBUG_PROCESSOR_IDENTIFICATION_ALPHA */
  Alpha: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.DEBUG_PROCESSOR_IDENTIFICATION_AMD64 */
  Amd64: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.DEBUG_PROCESSOR_IDENTIFICATION_IA64 */
  Ia64: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.DEBUG_PROCESSOR_IDENTIFICATION_X86 */
  X86: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.DEBUG_PROCESSOR_IDENTIFICATION_ARM */
  Arm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.DEBUG_PROCESSOR_IDENTIFICATION_ARM64 */
  Arm64: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDEBUG_PROCESSOR_IDENTIFICATION_ALL = 48;

export function allocDEBUG_PROCESSOR_IDENTIFICATION_ALL(data?: Partial<DEBUG_PROCESSOR_IDENTIFICATION_ALL>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_PROCESSOR_IDENTIFICATION_ALL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Alpha !== undefined) view.setBigUint64(0, data.Alpha === null ? 0n : util.toBigInt(util.toPointer(data.Alpha)), true);
  // 0x08: pointer
  if (data?.Amd64 !== undefined) view.setBigUint64(8, data.Amd64 === null ? 0n : util.toBigInt(util.toPointer(data.Amd64)), true);
  // 0x10: pointer
  if (data?.Ia64 !== undefined) view.setBigUint64(16, data.Ia64 === null ? 0n : util.toBigInt(util.toPointer(data.Ia64)), true);
  // 0x18: pointer
  if (data?.X86 !== undefined) view.setBigUint64(24, data.X86 === null ? 0n : util.toBigInt(util.toPointer(data.X86)), true);
  // 0x20: pointer
  if (data?.Arm !== undefined) view.setBigUint64(32, data.Arm === null ? 0n : util.toBigInt(util.toPointer(data.Arm)), true);
  // 0x28: pointer
  if (data?.Arm64 !== undefined) view.setBigUint64(40, data.Arm64 === null ? 0n : util.toBigInt(util.toPointer(data.Arm64)), true);
  return buf;
}

export class DEBUG_PROCESSOR_IDENTIFICATION_ALLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Alpha(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Amd64(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Ia64(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get X86(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get Arm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get Arm64(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Alpha(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Amd64(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Ia64(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set X86(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set Arm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set Arm64(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_HANDLE_DATA_BASIC (size: 24)
 */
export interface DEBUG_HANDLE_DATA_BASIC {
  /** u32 */
  TypeNameSize: number;
  /** u32 */
  ObjectNameSize: number;
  /** u32 */
  Attributes: number;
  /** u32 */
  GrantedAccess: number;
  /** u32 */
  HandleCount: number;
  /** u32 */
  PointerCount: number;
}

export const sizeofDEBUG_HANDLE_DATA_BASIC = 24;

export function allocDEBUG_HANDLE_DATA_BASIC(data?: Partial<DEBUG_HANDLE_DATA_BASIC>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_HANDLE_DATA_BASIC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TypeNameSize !== undefined) view.setUint32(0, Number(data.TypeNameSize), true);
  // 0x04: u32
  if (data?.ObjectNameSize !== undefined) view.setUint32(4, Number(data.ObjectNameSize), true);
  // 0x08: u32
  if (data?.Attributes !== undefined) view.setUint32(8, Number(data.Attributes), true);
  // 0x0c: u32
  if (data?.GrantedAccess !== undefined) view.setUint32(12, Number(data.GrantedAccess), true);
  // 0x10: u32
  if (data?.HandleCount !== undefined) view.setUint32(16, Number(data.HandleCount), true);
  // 0x14: u32
  if (data?.PointerCount !== undefined) view.setUint32(20, Number(data.PointerCount), true);
  return buf;
}

export class DEBUG_HANDLE_DATA_BASICView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get TypeNameSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ObjectNameSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Attributes(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get GrantedAccess(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get HandleCount(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get PointerCount(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set TypeNameSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ObjectNameSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Attributes(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set GrantedAccess(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set HandleCount(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set PointerCount(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_EVENT_CONTEXT (size: 16)
 */
export interface DEBUG_EVENT_CONTEXT {
  /** u32 */
  Size: number;
  /** u32 */
  ProcessEngineId: number;
  /** u32 */
  ThreadEngineId: number;
  /** u32 */
  FrameEngineId: number;
}

export const sizeofDEBUG_EVENT_CONTEXT = 16;

export function allocDEBUG_EVENT_CONTEXT(data?: Partial<DEBUG_EVENT_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_EVENT_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.ProcessEngineId !== undefined) view.setUint32(4, Number(data.ProcessEngineId), true);
  // 0x08: u32
  if (data?.ThreadEngineId !== undefined) view.setUint32(8, Number(data.ThreadEngineId), true);
  // 0x0c: u32
  if (data?.FrameEngineId !== undefined) view.setUint32(12, Number(data.FrameEngineId), true);
  return buf;
}

export class DEBUG_EVENT_CONTEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ProcessEngineId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ThreadEngineId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get FrameEngineId(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ProcessEngineId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ThreadEngineId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set FrameEngineId(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_REGISTER_DESCRIPTION (size: 32)
 */
export interface DEBUG_REGISTER_DESCRIPTION {
  /** u32 */
  Type: number;
  /** u32 */
  Flags: number;
  /** u32 */
  SubregMaster: number;
  /** u32 */
  SubregLength: number;
  /** u64 */
  SubregMask: number | bigint;
  /** u32 */
  SubregShift: number;
  /** u32 */
  Reserved0: number;
}

export const sizeofDEBUG_REGISTER_DESCRIPTION = 32;

export function allocDEBUG_REGISTER_DESCRIPTION(data?: Partial<DEBUG_REGISTER_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_REGISTER_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Type !== undefined) view.setUint32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.SubregMaster !== undefined) view.setUint32(8, Number(data.SubregMaster), true);
  // 0x0c: u32
  if (data?.SubregLength !== undefined) view.setUint32(12, Number(data.SubregLength), true);
  // 0x10: u64
  if (data?.SubregMask !== undefined) view.setBigUint64(16, util.toBigInt(data.SubregMask), true);
  // 0x18: u32
  if (data?.SubregShift !== undefined) view.setUint32(24, Number(data.SubregShift), true);
  // 0x1c: u32
  if (data?.Reserved0 !== undefined) view.setUint32(28, Number(data.Reserved0), true);
  return buf;
}

export class DEBUG_REGISTER_DESCRIPTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Type(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get SubregMaster(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get SubregLength(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u64
  get SubregMask(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u32
  get SubregShift(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get Reserved0(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: u32
  set Type(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set SubregMaster(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set SubregLength(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u64
  set SubregMask(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u32
  set SubregShift(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set Reserved0(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_SYMBOL_PARAMETERS (size: 32)
 */
export interface DEBUG_SYMBOL_PARAMETERS {
  /** u64 */
  Module: number | bigint;
  /** u32 */
  TypeId: number;
  /** u32 */
  ParentSymbol: number;
  /** u32 */
  SubElements: number;
  /** u32 */
  Flags: number;
  /** u64 */
  Reserved: number | bigint;
}

export const sizeofDEBUG_SYMBOL_PARAMETERS = 32;

export function allocDEBUG_SYMBOL_PARAMETERS(data?: Partial<DEBUG_SYMBOL_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_SYMBOL_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Module !== undefined) view.setBigUint64(0, util.toBigInt(data.Module), true);
  // 0x08: u32
  if (data?.TypeId !== undefined) view.setUint32(8, Number(data.TypeId), true);
  // 0x0c: u32
  if (data?.ParentSymbol !== undefined) view.setUint32(12, Number(data.ParentSymbol), true);
  // 0x10: u32
  if (data?.SubElements !== undefined) view.setUint32(16, Number(data.SubElements), true);
  // 0x14: u32
  if (data?.Flags !== undefined) view.setUint32(20, Number(data.Flags), true);
  // 0x18: u64
  if (data?.Reserved !== undefined) view.setBigUint64(24, util.toBigInt(data.Reserved), true);
  return buf;
}

export class DEBUG_SYMBOL_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Module(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u32
  get TypeId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ParentSymbol(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get SubElements(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Flags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u64
  get Reserved(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x00: u64
  set Module(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u32
  set TypeId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ParentSymbol(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set SubElements(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Flags(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u64
  set Reserved(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_SYMBOL_ENTRY (size: 64)
 */
export interface DEBUG_SYMBOL_ENTRY {
  /** u64 */
  ModuleBase: number | bigint;
  /** u64 */
  Offset: number | bigint;
  /** u64 */
  Id: number | bigint;
  /** u64 */
  Arg64: number | bigint;
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
  /** u32 */
  TypeId: number;
  /** u32 */
  NameSize: number;
  /** u32 */
  Token: number;
  /** u32 */
  Tag: number;
  /** u32 */
  Arg32: number;
  /** u32 */
  Reserved: number;
}

export const sizeofDEBUG_SYMBOL_ENTRY = 64;

export function allocDEBUG_SYMBOL_ENTRY(data?: Partial<DEBUG_SYMBOL_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_SYMBOL_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.ModuleBase !== undefined) view.setBigUint64(0, util.toBigInt(data.ModuleBase), true);
  // 0x08: u64
  if (data?.Offset !== undefined) view.setBigUint64(8, util.toBigInt(data.Offset), true);
  // 0x10: u64
  if (data?.Id !== undefined) view.setBigUint64(16, util.toBigInt(data.Id), true);
  // 0x18: u64
  if (data?.Arg64 !== undefined) view.setBigUint64(24, util.toBigInt(data.Arg64), true);
  // 0x20: u32
  if (data?.Size !== undefined) view.setUint32(32, Number(data.Size), true);
  // 0x24: u32
  if (data?.Flags !== undefined) view.setUint32(36, Number(data.Flags), true);
  // 0x28: u32
  if (data?.TypeId !== undefined) view.setUint32(40, Number(data.TypeId), true);
  // 0x2c: u32
  if (data?.NameSize !== undefined) view.setUint32(44, Number(data.NameSize), true);
  // 0x30: u32
  if (data?.Token !== undefined) view.setUint32(48, Number(data.Token), true);
  // 0x34: u32
  if (data?.Tag !== undefined) view.setUint32(52, Number(data.Tag), true);
  // 0x38: u32
  if (data?.Arg32 !== undefined) view.setUint32(56, Number(data.Arg32), true);
  // 0x3c: u32
  if (data?.Reserved !== undefined) view.setUint32(60, Number(data.Reserved), true);
  return buf;
}

export class DEBUG_SYMBOL_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get ModuleBase(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get Offset(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get Id(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get Arg64(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u32
  get Size(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get Flags(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get TypeId(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get NameSize(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get Token(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get Tag(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get Arg32(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get Reserved(): number {
    return this.view.getUint32(60, true);
  }

  // 0x00: u64
  set ModuleBase(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set Offset(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set Id(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set Arg64(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u32
  set Size(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set Flags(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set TypeId(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set NameSize(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set Token(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set Tag(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set Arg32(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set Reserved(value: number) {
    this.view.setUint32(60, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_MODULE_PARAMETERS (size: 56)
 */
export interface DEBUG_MODULE_PARAMETERS {
  /** u64 */
  Base: number | bigint;
  /** u32 */
  Size: number;
  /** u32 */
  TimeDateStamp: number;
  /** u32 */
  Checksum: number;
  /** u32 */
  Flags: number;
  /** u32 */
  SymbolType: number;
  /** u32 */
  ImageNameSize: number;
  /** u32 */
  ModuleNameSize: number;
  /** u32 */
  LoadedImageNameSize: number;
  /** u32 */
  SymbolFileNameSize: number;
  /** u32 */
  MappedImageNameSize: number;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofDEBUG_MODULE_PARAMETERS = 56;

export function allocDEBUG_MODULE_PARAMETERS(data?: Partial<DEBUG_MODULE_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_MODULE_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Base !== undefined) view.setBigUint64(0, util.toBigInt(data.Base), true);
  // 0x08: u32
  if (data?.Size !== undefined) view.setUint32(8, Number(data.Size), true);
  // 0x0c: u32
  if (data?.TimeDateStamp !== undefined) view.setUint32(12, Number(data.TimeDateStamp), true);
  // 0x10: u32
  if (data?.Checksum !== undefined) view.setUint32(16, Number(data.Checksum), true);
  // 0x14: u32
  if (data?.Flags !== undefined) view.setUint32(20, Number(data.Flags), true);
  // 0x18: u32
  if (data?.SymbolType !== undefined) view.setUint32(24, Number(data.SymbolType), true);
  // 0x1c: u32
  if (data?.ImageNameSize !== undefined) view.setUint32(28, Number(data.ImageNameSize), true);
  // 0x20: u32
  if (data?.ModuleNameSize !== undefined) view.setUint32(32, Number(data.ModuleNameSize), true);
  // 0x24: u32
  if (data?.LoadedImageNameSize !== undefined) view.setUint32(36, Number(data.LoadedImageNameSize), true);
  // 0x28: u32
  if (data?.SymbolFileNameSize !== undefined) view.setUint32(40, Number(data.SymbolFileNameSize), true);
  // 0x2c: u32
  if (data?.MappedImageNameSize !== undefined) view.setUint32(44, Number(data.MappedImageNameSize), true);
  // 0x30: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(48, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

export class DEBUG_MODULE_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Base(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u32
  get Size(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get TimeDateStamp(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Checksum(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Flags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get SymbolType(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get ImageNameSize(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get ModuleNameSize(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get LoadedImageNameSize(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get SymbolFileNameSize(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get MappedImageNameSize(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u64
  set Base(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u32
  set Size(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set TimeDateStamp(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Checksum(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Flags(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set SymbolType(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set ImageNameSize(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set ModuleNameSize(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set LoadedImageNameSize(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set SymbolFileNameSize(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set MappedImageNameSize(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_MODULE_AND_ID (size: 16)
 */
export interface DEBUG_MODULE_AND_ID {
  /** u64 */
  ModuleBase: number | bigint;
  /** u64 */
  Id: number | bigint;
}

export const sizeofDEBUG_MODULE_AND_ID = 16;

export function allocDEBUG_MODULE_AND_ID(data?: Partial<DEBUG_MODULE_AND_ID>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_MODULE_AND_ID);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.ModuleBase !== undefined) view.setBigUint64(0, util.toBigInt(data.ModuleBase), true);
  // 0x08: u64
  if (data?.Id !== undefined) view.setBigUint64(8, util.toBigInt(data.Id), true);
  return buf;
}

export class DEBUG_MODULE_AND_IDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get ModuleBase(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get Id(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u64
  set ModuleBase(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set Id(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_SYMBOL_SOURCE_ENTRY (size: 64)
 */
export interface DEBUG_SYMBOL_SOURCE_ENTRY {
  /** u64 */
  ModuleBase: number | bigint;
  /** u64 */
  Offset: number | bigint;
  /** u64 */
  FileNameId: number | bigint;
  /** u64 */
  EngineInternal: number | bigint;
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
  /** u32 */
  FileNameSize: number;
  /** u32 */
  StartLine: number;
  /** u32 */
  EndLine: number;
  /** u32 */
  StartColumn: number;
  /** u32 */
  EndColumn: number;
  /** u32 */
  Reserved: number;
}

export const sizeofDEBUG_SYMBOL_SOURCE_ENTRY = 64;

export function allocDEBUG_SYMBOL_SOURCE_ENTRY(data?: Partial<DEBUG_SYMBOL_SOURCE_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_SYMBOL_SOURCE_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.ModuleBase !== undefined) view.setBigUint64(0, util.toBigInt(data.ModuleBase), true);
  // 0x08: u64
  if (data?.Offset !== undefined) view.setBigUint64(8, util.toBigInt(data.Offset), true);
  // 0x10: u64
  if (data?.FileNameId !== undefined) view.setBigUint64(16, util.toBigInt(data.FileNameId), true);
  // 0x18: u64
  if (data?.EngineInternal !== undefined) view.setBigUint64(24, util.toBigInt(data.EngineInternal), true);
  // 0x20: u32
  if (data?.Size !== undefined) view.setUint32(32, Number(data.Size), true);
  // 0x24: u32
  if (data?.Flags !== undefined) view.setUint32(36, Number(data.Flags), true);
  // 0x28: u32
  if (data?.FileNameSize !== undefined) view.setUint32(40, Number(data.FileNameSize), true);
  // 0x2c: u32
  if (data?.StartLine !== undefined) view.setUint32(44, Number(data.StartLine), true);
  // 0x30: u32
  if (data?.EndLine !== undefined) view.setUint32(48, Number(data.EndLine), true);
  // 0x34: u32
  if (data?.StartColumn !== undefined) view.setUint32(52, Number(data.StartColumn), true);
  // 0x38: u32
  if (data?.EndColumn !== undefined) view.setUint32(56, Number(data.EndColumn), true);
  // 0x3c: u32
  if (data?.Reserved !== undefined) view.setUint32(60, Number(data.Reserved), true);
  return buf;
}

export class DEBUG_SYMBOL_SOURCE_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get ModuleBase(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get Offset(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get FileNameId(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get EngineInternal(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u32
  get Size(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get Flags(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get FileNameSize(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get StartLine(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get EndLine(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get StartColumn(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get EndColumn(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get Reserved(): number {
    return this.view.getUint32(60, true);
  }

  // 0x00: u64
  set ModuleBase(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set Offset(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set FileNameId(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set EngineInternal(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u32
  set Size(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set Flags(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set FileNameSize(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set StartLine(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set EndLine(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set StartColumn(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set EndColumn(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set Reserved(value: number) {
    this.view.setUint32(60, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.Location (size: 16)
 */
export interface Location {
  /** u64 */
  HostDefined: number | bigint;
  /** u64 */
  Offset: number | bigint;
}

export const sizeofLocation = 16;

export function allocLocation(data?: Partial<Location>): Uint8Array {
  const buf = new Uint8Array(sizeofLocation);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.HostDefined !== undefined) view.setBigUint64(0, util.toBigInt(data.HostDefined), true);
  // 0x08: u64
  if (data?.Offset !== undefined) view.setBigUint64(8, util.toBigInt(data.Offset), true);
  return buf;
}

export class LocationView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get HostDefined(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get Offset(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u64
  set HostDefined(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set Offset(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.ArrayDimension (size: 24)
 */
export interface ArrayDimension {
  /** i64 */
  LowerBound: number | bigint;
  /** u64 */
  Length: number | bigint;
  /** u64 */
  Stride: number | bigint;
}

export const sizeofArrayDimension = 24;

export function allocArrayDimension(data?: Partial<ArrayDimension>): Uint8Array {
  const buf = new Uint8Array(sizeofArrayDimension);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.LowerBound !== undefined) view.setBigInt64(0, util.toBigInt(data.LowerBound), true);
  // 0x08: u64
  if (data?.Length !== undefined) view.setBigUint64(8, util.toBigInt(data.Length), true);
  // 0x10: u64
  if (data?.Stride !== undefined) view.setBigUint64(16, util.toBigInt(data.Stride), true);
  return buf;
}

export class ArrayDimensionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get LowerBound(): number | bigint {
    return this.view.getBigInt64(0, true);
  }

  // 0x08: u64
  get Length(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get Stride(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x00: i64
  set LowerBound(value: number | bigint) {
    this.view.setBigInt64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set Length(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set Stride(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.ScriptDebugPosition (size: 8)
 */
export interface ScriptDebugPosition {
  /** u32 */
  Line: number;
  /** u32 */
  Column: number;
}

export const sizeofScriptDebugPosition = 8;

export function allocScriptDebugPosition(data?: Partial<ScriptDebugPosition>): Uint8Array {
  const buf = new Uint8Array(sizeofScriptDebugPosition);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Line !== undefined) view.setUint32(0, Number(data.Line), true);
  // 0x04: u32
  if (data?.Column !== undefined) view.setUint32(4, Number(data.Column), true);
  return buf;
}

export class ScriptDebugPositionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Line(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Column(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set Line(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Column(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.ScriptDebugEventInformation (size: 32)
 */
export interface ScriptDebugEventInformation {
  /** Windows.Win32.System.Diagnostics.Debug.ScriptDebugEvent */
  DebugEvent: ScriptDebugEvent;
  /** Windows.Win32.System.Diagnostics.Debug.ScriptDebugPosition */
  EventPosition: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.ScriptDebugPosition */
  EventSpanEnd: Uint8Array | Deno.PointerValue | null;
  /** _u_e__Union */
  u: Uint8Array | Deno.PointerValue | null;
}

export const sizeofScriptDebugEventInformation = 32;

export function allocScriptDebugEventInformation(data?: Partial<ScriptDebugEventInformation>): Uint8Array {
  const buf = new Uint8Array(sizeofScriptDebugEventInformation);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.DebugEvent !== undefined) view.setInt32(0, Number(data.DebugEvent), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.EventPosition !== undefined) view.setBigUint64(8, data.EventPosition === null ? 0n : util.toBigInt(util.toPointer(data.EventPosition)), true);
  // 0x10: pointer
  if (data?.EventSpanEnd !== undefined) view.setBigUint64(16, data.EventSpanEnd === null ? 0n : util.toBigInt(util.toPointer(data.EventSpanEnd)), true);
  // 0x18: pointer
  if (data?.u !== undefined) view.setBigUint64(24, data.u === null ? 0n : util.toBigInt(util.toPointer(data.u)), true);
  return buf;
}

export class ScriptDebugEventInformationView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get DebugEvent(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get EventPosition(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get EventSpanEnd(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get u(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set DebugEvent(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set EventPosition(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set EventSpanEnd(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set u(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXTSTACKTRACE (size: 24)
 */
export interface EXTSTACKTRACE {
  /** u32 */
  FramePointer: number;
  /** u32 */
  ProgramCounter: number;
  /** u32 */
  ReturnAddress: number;
  /** array */
  Args: Deno.PointerValue | null;
}

export const sizeofEXTSTACKTRACE = 24;

export function allocEXTSTACKTRACE(data?: Partial<EXTSTACKTRACE>): Uint8Array {
  const buf = new Uint8Array(sizeofEXTSTACKTRACE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FramePointer !== undefined) view.setUint32(0, Number(data.FramePointer), true);
  // 0x04: u32
  if (data?.ProgramCounter !== undefined) view.setUint32(4, Number(data.ProgramCounter), true);
  // 0x08: u32
  if (data?.ReturnAddress !== undefined) view.setUint32(8, Number(data.ReturnAddress), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Args !== undefined) view.setBigUint64(16, data.Args === null ? 0n : util.toBigInt(util.toPointer(data.Args)), true);
  return buf;
}

export class EXTSTACKTRACEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get FramePointer(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ProgramCounter(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ReturnAddress(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Args(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set FramePointer(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ProgramCounter(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ReturnAddress(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Args(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXTSTACKTRACE32 (size: 24)
 */
export interface EXTSTACKTRACE32 {
  /** u32 */
  FramePointer: number;
  /** u32 */
  ProgramCounter: number;
  /** u32 */
  ReturnAddress: number;
  /** array */
  Args: Deno.PointerValue | null;
}

export const sizeofEXTSTACKTRACE32 = 24;

export function allocEXTSTACKTRACE32(data?: Partial<EXTSTACKTRACE32>): Uint8Array {
  const buf = new Uint8Array(sizeofEXTSTACKTRACE32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FramePointer !== undefined) view.setUint32(0, Number(data.FramePointer), true);
  // 0x04: u32
  if (data?.ProgramCounter !== undefined) view.setUint32(4, Number(data.ProgramCounter), true);
  // 0x08: u32
  if (data?.ReturnAddress !== undefined) view.setUint32(8, Number(data.ReturnAddress), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Args !== undefined) view.setBigUint64(16, data.Args === null ? 0n : util.toBigInt(util.toPointer(data.Args)), true);
  return buf;
}

export class EXTSTACKTRACE32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get FramePointer(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ProgramCounter(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ReturnAddress(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Args(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set FramePointer(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ProgramCounter(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ReturnAddress(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Args(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXTSTACKTRACE64 (size: 32)
 */
export interface EXTSTACKTRACE64 {
  /** u64 */
  FramePointer: number | bigint;
  /** u64 */
  ProgramCounter: number | bigint;
  /** u64 */
  ReturnAddress: number | bigint;
  /** array */
  Args: Deno.PointerValue | null;
}

export const sizeofEXTSTACKTRACE64 = 32;

export function allocEXTSTACKTRACE64(data?: Partial<EXTSTACKTRACE64>): Uint8Array {
  const buf = new Uint8Array(sizeofEXTSTACKTRACE64);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.FramePointer !== undefined) view.setBigUint64(0, util.toBigInt(data.FramePointer), true);
  // 0x08: u64
  if (data?.ProgramCounter !== undefined) view.setBigUint64(8, util.toBigInt(data.ProgramCounter), true);
  // 0x10: u64
  if (data?.ReturnAddress !== undefined) view.setBigUint64(16, util.toBigInt(data.ReturnAddress), true);
  // 0x18: pointer
  if (data?.Args !== undefined) view.setBigUint64(24, data.Args === null ? 0n : util.toBigInt(util.toPointer(data.Args)), true);
  return buf;
}

export class EXTSTACKTRACE64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get FramePointer(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get ProgramCounter(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get ReturnAddress(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: pointer
  get Args(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u64
  set FramePointer(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set ProgramCounter(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set ReturnAddress(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: pointer
  set Args(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.WINDBG_EXTENSION_APIS (size: 96)
 */
export interface WINDBG_EXTENSION_APIS {
  /** u32 */
  nSize: number;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_OUTPUT_ROUTINE */
  lpOutputRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_GET_EXPRESSION */
  lpGetExpressionRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_GET_SYMBOL */
  lpGetSymbolRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_DISASM */
  lpDisasmRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_CHECK_CONTROL_C */
  lpCheckControlCRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_READ_PROCESS_MEMORY_ROUTINE */
  lpReadProcessMemoryRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE */
  lpWriteProcessMemoryRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_GET_THREAD_CONTEXT_ROUTINE */
  lpGetThreadContextRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_SET_THREAD_CONTEXT_ROUTINE */
  lpSetThreadContextRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_IOCTL_ROUTINE */
  lpIoctlRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_STACKTRACE_ROUTINE */
  lpStackTraceRoutine: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWINDBG_EXTENSION_APIS = 96;

export function allocWINDBG_EXTENSION_APIS(data?: Partial<WINDBG_EXTENSION_APIS>): Uint8Array {
  const buf = new Uint8Array(sizeofWINDBG_EXTENSION_APIS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.nSize !== undefined) view.setUint32(0, Number(data.nSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpOutputRoutine !== undefined) view.setBigUint64(8, data.lpOutputRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpOutputRoutine)), true);
  // 0x10: pointer
  if (data?.lpGetExpressionRoutine !== undefined) view.setBigUint64(16, data.lpGetExpressionRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpGetExpressionRoutine)), true);
  // 0x18: pointer
  if (data?.lpGetSymbolRoutine !== undefined) view.setBigUint64(24, data.lpGetSymbolRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpGetSymbolRoutine)), true);
  // 0x20: pointer
  if (data?.lpDisasmRoutine !== undefined) view.setBigUint64(32, data.lpDisasmRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpDisasmRoutine)), true);
  // 0x28: pointer
  if (data?.lpCheckControlCRoutine !== undefined) view.setBigUint64(40, data.lpCheckControlCRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpCheckControlCRoutine)), true);
  // 0x30: pointer
  if (data?.lpReadProcessMemoryRoutine !== undefined) view.setBigUint64(48, data.lpReadProcessMemoryRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpReadProcessMemoryRoutine)), true);
  // 0x38: pointer
  if (data?.lpWriteProcessMemoryRoutine !== undefined) view.setBigUint64(56, data.lpWriteProcessMemoryRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpWriteProcessMemoryRoutine)), true);
  // 0x40: pointer
  if (data?.lpGetThreadContextRoutine !== undefined) view.setBigUint64(64, data.lpGetThreadContextRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpGetThreadContextRoutine)), true);
  // 0x48: pointer
  if (data?.lpSetThreadContextRoutine !== undefined) view.setBigUint64(72, data.lpSetThreadContextRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpSetThreadContextRoutine)), true);
  // 0x50: pointer
  if (data?.lpIoctlRoutine !== undefined) view.setBigUint64(80, data.lpIoctlRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpIoctlRoutine)), true);
  // 0x58: pointer
  if (data?.lpStackTraceRoutine !== undefined) view.setBigUint64(88, data.lpStackTraceRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpStackTraceRoutine)), true);
  return buf;
}

export class WINDBG_EXTENSION_APISView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get nSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpOutputRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get lpGetExpressionRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get lpGetSymbolRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get lpDisasmRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get lpCheckControlCRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get lpReadProcessMemoryRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get lpWriteProcessMemoryRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get lpGetThreadContextRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get lpSetThreadContextRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get lpIoctlRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get lpStackTraceRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set nSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpOutputRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set lpGetExpressionRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set lpGetSymbolRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set lpDisasmRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set lpCheckControlCRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set lpReadProcessMemoryRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set lpWriteProcessMemoryRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set lpGetThreadContextRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set lpSetThreadContextRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set lpIoctlRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set lpStackTraceRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.WINDBG_EXTENSION_APIS32 (size: 96)
 */
export interface WINDBG_EXTENSION_APIS32 {
  /** u32 */
  nSize: number;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_OUTPUT_ROUTINE */
  lpOutputRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_GET_EXPRESSION32 */
  lpGetExpressionRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_GET_SYMBOL32 */
  lpGetSymbolRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_DISASM32 */
  lpDisasmRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_CHECK_CONTROL_C */
  lpCheckControlCRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_READ_PROCESS_MEMORY_ROUTINE32 */
  lpReadProcessMemoryRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE32 */
  lpWriteProcessMemoryRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_GET_THREAD_CONTEXT_ROUTINE */
  lpGetThreadContextRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_SET_THREAD_CONTEXT_ROUTINE */
  lpSetThreadContextRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_IOCTL_ROUTINE */
  lpIoctlRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_STACKTRACE_ROUTINE32 */
  lpStackTraceRoutine: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWINDBG_EXTENSION_APIS32 = 96;

export function allocWINDBG_EXTENSION_APIS32(data?: Partial<WINDBG_EXTENSION_APIS32>): Uint8Array {
  const buf = new Uint8Array(sizeofWINDBG_EXTENSION_APIS32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.nSize !== undefined) view.setUint32(0, Number(data.nSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpOutputRoutine !== undefined) view.setBigUint64(8, data.lpOutputRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpOutputRoutine)), true);
  // 0x10: pointer
  if (data?.lpGetExpressionRoutine !== undefined) view.setBigUint64(16, data.lpGetExpressionRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpGetExpressionRoutine)), true);
  // 0x18: pointer
  if (data?.lpGetSymbolRoutine !== undefined) view.setBigUint64(24, data.lpGetSymbolRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpGetSymbolRoutine)), true);
  // 0x20: pointer
  if (data?.lpDisasmRoutine !== undefined) view.setBigUint64(32, data.lpDisasmRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpDisasmRoutine)), true);
  // 0x28: pointer
  if (data?.lpCheckControlCRoutine !== undefined) view.setBigUint64(40, data.lpCheckControlCRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpCheckControlCRoutine)), true);
  // 0x30: pointer
  if (data?.lpReadProcessMemoryRoutine !== undefined) view.setBigUint64(48, data.lpReadProcessMemoryRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpReadProcessMemoryRoutine)), true);
  // 0x38: pointer
  if (data?.lpWriteProcessMemoryRoutine !== undefined) view.setBigUint64(56, data.lpWriteProcessMemoryRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpWriteProcessMemoryRoutine)), true);
  // 0x40: pointer
  if (data?.lpGetThreadContextRoutine !== undefined) view.setBigUint64(64, data.lpGetThreadContextRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpGetThreadContextRoutine)), true);
  // 0x48: pointer
  if (data?.lpSetThreadContextRoutine !== undefined) view.setBigUint64(72, data.lpSetThreadContextRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpSetThreadContextRoutine)), true);
  // 0x50: pointer
  if (data?.lpIoctlRoutine !== undefined) view.setBigUint64(80, data.lpIoctlRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpIoctlRoutine)), true);
  // 0x58: pointer
  if (data?.lpStackTraceRoutine !== undefined) view.setBigUint64(88, data.lpStackTraceRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpStackTraceRoutine)), true);
  return buf;
}

export class WINDBG_EXTENSION_APIS32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get nSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpOutputRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get lpGetExpressionRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get lpGetSymbolRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get lpDisasmRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get lpCheckControlCRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get lpReadProcessMemoryRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get lpWriteProcessMemoryRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get lpGetThreadContextRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get lpSetThreadContextRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get lpIoctlRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get lpStackTraceRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set nSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpOutputRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set lpGetExpressionRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set lpGetSymbolRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set lpDisasmRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set lpCheckControlCRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set lpReadProcessMemoryRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set lpWriteProcessMemoryRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set lpGetThreadContextRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set lpSetThreadContextRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set lpIoctlRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set lpStackTraceRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.WINDBG_EXTENSION_APIS64 (size: 96)
 */
export interface WINDBG_EXTENSION_APIS64 {
  /** u32 */
  nSize: number;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_OUTPUT_ROUTINE */
  lpOutputRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_GET_EXPRESSION64 */
  lpGetExpressionRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_GET_SYMBOL64 */
  lpGetSymbolRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_DISASM64 */
  lpDisasmRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_CHECK_CONTROL_C */
  lpCheckControlCRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_READ_PROCESS_MEMORY_ROUTINE64 */
  lpReadProcessMemoryRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE64 */
  lpWriteProcessMemoryRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_GET_THREAD_CONTEXT_ROUTINE */
  lpGetThreadContextRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_SET_THREAD_CONTEXT_ROUTINE */
  lpSetThreadContextRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_IOCTL_ROUTINE */
  lpIoctlRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_STACKTRACE_ROUTINE64 */
  lpStackTraceRoutine: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWINDBG_EXTENSION_APIS64 = 96;

export function allocWINDBG_EXTENSION_APIS64(data?: Partial<WINDBG_EXTENSION_APIS64>): Uint8Array {
  const buf = new Uint8Array(sizeofWINDBG_EXTENSION_APIS64);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.nSize !== undefined) view.setUint32(0, Number(data.nSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpOutputRoutine !== undefined) view.setBigUint64(8, data.lpOutputRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpOutputRoutine)), true);
  // 0x10: pointer
  if (data?.lpGetExpressionRoutine !== undefined) view.setBigUint64(16, data.lpGetExpressionRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpGetExpressionRoutine)), true);
  // 0x18: pointer
  if (data?.lpGetSymbolRoutine !== undefined) view.setBigUint64(24, data.lpGetSymbolRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpGetSymbolRoutine)), true);
  // 0x20: pointer
  if (data?.lpDisasmRoutine !== undefined) view.setBigUint64(32, data.lpDisasmRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpDisasmRoutine)), true);
  // 0x28: pointer
  if (data?.lpCheckControlCRoutine !== undefined) view.setBigUint64(40, data.lpCheckControlCRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpCheckControlCRoutine)), true);
  // 0x30: pointer
  if (data?.lpReadProcessMemoryRoutine !== undefined) view.setBigUint64(48, data.lpReadProcessMemoryRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpReadProcessMemoryRoutine)), true);
  // 0x38: pointer
  if (data?.lpWriteProcessMemoryRoutine !== undefined) view.setBigUint64(56, data.lpWriteProcessMemoryRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpWriteProcessMemoryRoutine)), true);
  // 0x40: pointer
  if (data?.lpGetThreadContextRoutine !== undefined) view.setBigUint64(64, data.lpGetThreadContextRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpGetThreadContextRoutine)), true);
  // 0x48: pointer
  if (data?.lpSetThreadContextRoutine !== undefined) view.setBigUint64(72, data.lpSetThreadContextRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpSetThreadContextRoutine)), true);
  // 0x50: pointer
  if (data?.lpIoctlRoutine !== undefined) view.setBigUint64(80, data.lpIoctlRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpIoctlRoutine)), true);
  // 0x58: pointer
  if (data?.lpStackTraceRoutine !== undefined) view.setBigUint64(88, data.lpStackTraceRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpStackTraceRoutine)), true);
  return buf;
}

export class WINDBG_EXTENSION_APIS64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get nSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpOutputRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get lpGetExpressionRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get lpGetSymbolRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get lpDisasmRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get lpCheckControlCRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get lpReadProcessMemoryRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get lpWriteProcessMemoryRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get lpGetThreadContextRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get lpSetThreadContextRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get lpIoctlRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get lpStackTraceRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set nSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpOutputRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set lpGetExpressionRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set lpGetSymbolRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set lpDisasmRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set lpCheckControlCRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set lpReadProcessMemoryRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set lpWriteProcessMemoryRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set lpGetThreadContextRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set lpSetThreadContextRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set lpIoctlRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set lpStackTraceRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.WINDBG_OLD_EXTENSION_APIS (size: 48)
 */
export interface WINDBG_OLD_EXTENSION_APIS {
  /** u32 */
  nSize: number;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_OUTPUT_ROUTINE */
  lpOutputRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_GET_EXPRESSION */
  lpGetExpressionRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_GET_SYMBOL */
  lpGetSymbolRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_DISASM */
  lpDisasmRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_CHECK_CONTROL_C */
  lpCheckControlCRoutine: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWINDBG_OLD_EXTENSION_APIS = 48;

export function allocWINDBG_OLD_EXTENSION_APIS(data?: Partial<WINDBG_OLD_EXTENSION_APIS>): Uint8Array {
  const buf = new Uint8Array(sizeofWINDBG_OLD_EXTENSION_APIS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.nSize !== undefined) view.setUint32(0, Number(data.nSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpOutputRoutine !== undefined) view.setBigUint64(8, data.lpOutputRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpOutputRoutine)), true);
  // 0x10: pointer
  if (data?.lpGetExpressionRoutine !== undefined) view.setBigUint64(16, data.lpGetExpressionRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpGetExpressionRoutine)), true);
  // 0x18: pointer
  if (data?.lpGetSymbolRoutine !== undefined) view.setBigUint64(24, data.lpGetSymbolRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpGetSymbolRoutine)), true);
  // 0x20: pointer
  if (data?.lpDisasmRoutine !== undefined) view.setBigUint64(32, data.lpDisasmRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpDisasmRoutine)), true);
  // 0x28: pointer
  if (data?.lpCheckControlCRoutine !== undefined) view.setBigUint64(40, data.lpCheckControlCRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpCheckControlCRoutine)), true);
  return buf;
}

export class WINDBG_OLD_EXTENSION_APISView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get nSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpOutputRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get lpGetExpressionRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get lpGetSymbolRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get lpDisasmRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get lpCheckControlCRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set nSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpOutputRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set lpGetExpressionRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set lpGetSymbolRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set lpDisasmRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set lpCheckControlCRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.WINDBG_OLDKD_EXTENSION_APIS (size: 80)
 */
export interface WINDBG_OLDKD_EXTENSION_APIS {
  /** u32 */
  nSize: number;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_OUTPUT_ROUTINE */
  lpOutputRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_GET_EXPRESSION32 */
  lpGetExpressionRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_GET_SYMBOL32 */
  lpGetSymbolRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_DISASM32 */
  lpDisasmRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_CHECK_CONTROL_C */
  lpCheckControlCRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_READ_PROCESS_MEMORY_ROUTINE32 */
  lpReadVirtualMemRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE32 */
  lpWriteVirtualMemRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_OLDKD_READ_PHYSICAL_MEMORY */
  lpReadPhysicalMemRoutine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PWINDBG_OLDKD_WRITE_PHYSICAL_MEMORY */
  lpWritePhysicalMemRoutine: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWINDBG_OLDKD_EXTENSION_APIS = 80;

export function allocWINDBG_OLDKD_EXTENSION_APIS(data?: Partial<WINDBG_OLDKD_EXTENSION_APIS>): Uint8Array {
  const buf = new Uint8Array(sizeofWINDBG_OLDKD_EXTENSION_APIS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.nSize !== undefined) view.setUint32(0, Number(data.nSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpOutputRoutine !== undefined) view.setBigUint64(8, data.lpOutputRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpOutputRoutine)), true);
  // 0x10: pointer
  if (data?.lpGetExpressionRoutine !== undefined) view.setBigUint64(16, data.lpGetExpressionRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpGetExpressionRoutine)), true);
  // 0x18: pointer
  if (data?.lpGetSymbolRoutine !== undefined) view.setBigUint64(24, data.lpGetSymbolRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpGetSymbolRoutine)), true);
  // 0x20: pointer
  if (data?.lpDisasmRoutine !== undefined) view.setBigUint64(32, data.lpDisasmRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpDisasmRoutine)), true);
  // 0x28: pointer
  if (data?.lpCheckControlCRoutine !== undefined) view.setBigUint64(40, data.lpCheckControlCRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpCheckControlCRoutine)), true);
  // 0x30: pointer
  if (data?.lpReadVirtualMemRoutine !== undefined) view.setBigUint64(48, data.lpReadVirtualMemRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpReadVirtualMemRoutine)), true);
  // 0x38: pointer
  if (data?.lpWriteVirtualMemRoutine !== undefined) view.setBigUint64(56, data.lpWriteVirtualMemRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpWriteVirtualMemRoutine)), true);
  // 0x40: pointer
  if (data?.lpReadPhysicalMemRoutine !== undefined) view.setBigUint64(64, data.lpReadPhysicalMemRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpReadPhysicalMemRoutine)), true);
  // 0x48: pointer
  if (data?.lpWritePhysicalMemRoutine !== undefined) view.setBigUint64(72, data.lpWritePhysicalMemRoutine === null ? 0n : util.toBigInt(util.toPointer(data.lpWritePhysicalMemRoutine)), true);
  return buf;
}

export class WINDBG_OLDKD_EXTENSION_APISView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get nSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpOutputRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get lpGetExpressionRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get lpGetSymbolRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get lpDisasmRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get lpCheckControlCRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get lpReadVirtualMemRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get lpWriteVirtualMemRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get lpReadPhysicalMemRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get lpWritePhysicalMemRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set nSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpOutputRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set lpGetExpressionRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set lpGetSymbolRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set lpDisasmRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set lpCheckControlCRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set lpReadVirtualMemRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set lpWriteVirtualMemRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set lpReadPhysicalMemRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set lpWritePhysicalMemRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXT_API_VERSION (size: 8)
 */
export interface EXT_API_VERSION {
  /** u16 */
  MajorVersion: number;
  /** u16 */
  MinorVersion: number;
  /** u16 */
  Revision: number;
  /** u16 */
  Reserved: number;
}

export const sizeofEXT_API_VERSION = 8;

export function allocEXT_API_VERSION(data?: Partial<EXT_API_VERSION>): Uint8Array {
  const buf = new Uint8Array(sizeofEXT_API_VERSION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.MajorVersion !== undefined) view.setUint16(0, Number(data.MajorVersion), true);
  // 0x02: u16
  if (data?.MinorVersion !== undefined) view.setUint16(2, Number(data.MinorVersion), true);
  // 0x04: u16
  if (data?.Revision !== undefined) view.setUint16(4, Number(data.Revision), true);
  // 0x06: u16
  if (data?.Reserved !== undefined) view.setUint16(6, Number(data.Reserved), true);
  return buf;
}

export class EXT_API_VERSIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get MajorVersion(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get MinorVersion(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get Revision(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get Reserved(): number {
    return this.view.getUint16(6, true);
  }

  // 0x00: u16
  set MajorVersion(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set MinorVersion(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set Revision(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set Reserved(value: number) {
    this.view.setUint16(6, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.PROCESSORINFO (size: 8)
 */
export interface PROCESSORINFO {
  /** u16 */
  Processor: number;
  /** u16 */
  NumberProcessors: number;
}

export const sizeofPROCESSORINFO = 8;

export function allocPROCESSORINFO(data?: Partial<PROCESSORINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESSORINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Processor !== undefined) view.setUint16(0, Number(data.Processor), true);
  // 0x02: u16
  if (data?.NumberProcessors !== undefined) view.setUint16(2, Number(data.NumberProcessors), true);
  // 0x04: pad4
  return buf;
}

export class PROCESSORINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Processor(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get NumberProcessors(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u16
  set Processor(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set NumberProcessors(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.READCONTROLSPACE (size: 24)
 */
export interface READCONTROLSPACE {
  /** u16 */
  Processor: number;
  /** u32 */
  Address: number;
  /** u32 */
  BufLen: number;
  /** array */
  Buf: Deno.PointerValue | null;
}

export const sizeofREADCONTROLSPACE = 24;

export function allocREADCONTROLSPACE(data?: Partial<READCONTROLSPACE>): Uint8Array {
  const buf = new Uint8Array(sizeofREADCONTROLSPACE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Processor !== undefined) view.setUint16(0, Number(data.Processor), true);
  // 0x02: u32
  if (data?.Address !== undefined) view.setUint32(2, Number(data.Address), true);
  // 0x06: u32
  if (data?.BufLen !== undefined) view.setUint32(6, Number(data.BufLen), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.Buf !== undefined) view.setBigUint64(16, data.Buf === null ? 0n : util.toBigInt(util.toPointer(data.Buf)), true);
  return buf;
}

export class READCONTROLSPACEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Processor(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u32
  get Address(): number {
    return this.view.getUint32(2, true);
  }

  // 0x06: u32
  get BufLen(): number {
    return this.view.getUint32(6, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  get Buf(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set Processor(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u32
  set Address(value: number) {
    this.view.setUint32(2, value, true);
  }

  // 0x06: u32
  set BufLen(value: number) {
    this.view.setUint32(6, value, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  set Buf(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.READCONTROLSPACE32 (size: 24)
 */
export interface READCONTROLSPACE32 {
  /** u16 */
  Processor: number;
  /** u32 */
  Address: number;
  /** u32 */
  BufLen: number;
  /** array */
  Buf: Deno.PointerValue | null;
}

export const sizeofREADCONTROLSPACE32 = 24;

export function allocREADCONTROLSPACE32(data?: Partial<READCONTROLSPACE32>): Uint8Array {
  const buf = new Uint8Array(sizeofREADCONTROLSPACE32);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Processor !== undefined) view.setUint16(0, Number(data.Processor), true);
  // 0x02: u32
  if (data?.Address !== undefined) view.setUint32(2, Number(data.Address), true);
  // 0x06: u32
  if (data?.BufLen !== undefined) view.setUint32(6, Number(data.BufLen), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.Buf !== undefined) view.setBigUint64(16, data.Buf === null ? 0n : util.toBigInt(util.toPointer(data.Buf)), true);
  return buf;
}

export class READCONTROLSPACE32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Processor(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u32
  get Address(): number {
    return this.view.getUint32(2, true);
  }

  // 0x06: u32
  get BufLen(): number {
    return this.view.getUint32(6, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  get Buf(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set Processor(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u32
  set Address(value: number) {
    this.view.setUint32(2, value, true);
  }

  // 0x06: u32
  set BufLen(value: number) {
    this.view.setUint32(6, value, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  set Buf(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.READCONTROLSPACE64 (size: 32)
 */
export interface READCONTROLSPACE64 {
  /** u16 */
  Processor: number;
  /** u64 */
  Address: number | bigint;
  /** u32 */
  BufLen: number;
  /** array */
  Buf: Deno.PointerValue | null;
}

export const sizeofREADCONTROLSPACE64 = 32;

export function allocREADCONTROLSPACE64(data?: Partial<READCONTROLSPACE64>): Uint8Array {
  const buf = new Uint8Array(sizeofREADCONTROLSPACE64);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Processor !== undefined) view.setUint16(0, Number(data.Processor), true);
  // 0x02: pad6
  // 0x08: u64
  if (data?.Address !== undefined) view.setBigUint64(8, util.toBigInt(data.Address), true);
  // 0x10: u32
  if (data?.BufLen !== undefined) view.setUint32(16, Number(data.BufLen), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Buf !== undefined) view.setBigUint64(24, data.Buf === null ? 0n : util.toBigInt(util.toPointer(data.Buf)), true);
  return buf;
}

export class READCONTROLSPACE64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Processor(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: u64
  get Address(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u32
  get BufLen(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Buf(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set Processor(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: u64
  set Address(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u32
  set BufLen(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Buf(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IOSPACE (size: 16)
 */
export interface IOSPACE {
  /** u32 */
  Address: number;
  /** u32 */
  Length: number;
  /** u32 */
  Data: number;
}

export const sizeofIOSPACE = 16;

export function allocIOSPACE(data?: Partial<IOSPACE>): Uint8Array {
  const buf = new Uint8Array(sizeofIOSPACE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Address !== undefined) view.setUint32(0, Number(data.Address), true);
  // 0x04: u32
  if (data?.Length !== undefined) view.setUint32(4, Number(data.Length), true);
  // 0x08: u32
  if (data?.Data !== undefined) view.setUint32(8, Number(data.Data), true);
  // 0x0c: pad4
  return buf;
}

export class IOSPACEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Address(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Length(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Data(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set Address(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Length(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Data(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IOSPACE32 (size: 16)
 */
export interface IOSPACE32 {
  /** u32 */
  Address: number;
  /** u32 */
  Length: number;
  /** u32 */
  Data: number;
}

export const sizeofIOSPACE32 = 16;

export function allocIOSPACE32(data?: Partial<IOSPACE32>): Uint8Array {
  const buf = new Uint8Array(sizeofIOSPACE32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Address !== undefined) view.setUint32(0, Number(data.Address), true);
  // 0x04: u32
  if (data?.Length !== undefined) view.setUint32(4, Number(data.Length), true);
  // 0x08: u32
  if (data?.Data !== undefined) view.setUint32(8, Number(data.Data), true);
  // 0x0c: pad4
  return buf;
}

export class IOSPACE32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Address(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Length(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Data(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set Address(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Length(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Data(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IOSPACE64 (size: 16)
 */
export interface IOSPACE64 {
  /** u64 */
  Address: number | bigint;
  /** u32 */
  Length: number;
  /** u32 */
  Data: number;
}

export const sizeofIOSPACE64 = 16;

export function allocIOSPACE64(data?: Partial<IOSPACE64>): Uint8Array {
  const buf = new Uint8Array(sizeofIOSPACE64);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Address !== undefined) view.setBigUint64(0, util.toBigInt(data.Address), true);
  // 0x08: u32
  if (data?.Length !== undefined) view.setUint32(8, Number(data.Length), true);
  // 0x0c: u32
  if (data?.Data !== undefined) view.setUint32(12, Number(data.Data), true);
  return buf;
}

export class IOSPACE64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Address(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u32
  get Length(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Data(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u64
  set Address(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u32
  set Length(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Data(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IOSPACE_EX (size: 24)
 */
export interface IOSPACE_EX {
  /** u32 */
  Address: number;
  /** u32 */
  Length: number;
  /** u32 */
  Data: number;
  /** u32 */
  InterfaceType: number;
  /** u32 */
  BusNumber: number;
  /** u32 */
  AddressSpace: number;
}

export const sizeofIOSPACE_EX = 24;

export function allocIOSPACE_EX(data?: Partial<IOSPACE_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofIOSPACE_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Address !== undefined) view.setUint32(0, Number(data.Address), true);
  // 0x04: u32
  if (data?.Length !== undefined) view.setUint32(4, Number(data.Length), true);
  // 0x08: u32
  if (data?.Data !== undefined) view.setUint32(8, Number(data.Data), true);
  // 0x0c: u32
  if (data?.InterfaceType !== undefined) view.setUint32(12, Number(data.InterfaceType), true);
  // 0x10: u32
  if (data?.BusNumber !== undefined) view.setUint32(16, Number(data.BusNumber), true);
  // 0x14: u32
  if (data?.AddressSpace !== undefined) view.setUint32(20, Number(data.AddressSpace), true);
  return buf;
}

export class IOSPACE_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Address(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Length(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Data(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get InterfaceType(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get BusNumber(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get AddressSpace(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set Address(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Length(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Data(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set InterfaceType(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set BusNumber(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set AddressSpace(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IOSPACE_EX32 (size: 24)
 */
export interface IOSPACE_EX32 {
  /** u32 */
  Address: number;
  /** u32 */
  Length: number;
  /** u32 */
  Data: number;
  /** u32 */
  InterfaceType: number;
  /** u32 */
  BusNumber: number;
  /** u32 */
  AddressSpace: number;
}

export const sizeofIOSPACE_EX32 = 24;

export function allocIOSPACE_EX32(data?: Partial<IOSPACE_EX32>): Uint8Array {
  const buf = new Uint8Array(sizeofIOSPACE_EX32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Address !== undefined) view.setUint32(0, Number(data.Address), true);
  // 0x04: u32
  if (data?.Length !== undefined) view.setUint32(4, Number(data.Length), true);
  // 0x08: u32
  if (data?.Data !== undefined) view.setUint32(8, Number(data.Data), true);
  // 0x0c: u32
  if (data?.InterfaceType !== undefined) view.setUint32(12, Number(data.InterfaceType), true);
  // 0x10: u32
  if (data?.BusNumber !== undefined) view.setUint32(16, Number(data.BusNumber), true);
  // 0x14: u32
  if (data?.AddressSpace !== undefined) view.setUint32(20, Number(data.AddressSpace), true);
  return buf;
}

export class IOSPACE_EX32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Address(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Length(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Data(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get InterfaceType(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get BusNumber(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get AddressSpace(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set Address(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Length(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Data(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set InterfaceType(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set BusNumber(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set AddressSpace(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IOSPACE_EX64 (size: 32)
 */
export interface IOSPACE_EX64 {
  /** u64 */
  Address: number | bigint;
  /** u32 */
  Length: number;
  /** u32 */
  Data: number;
  /** u32 */
  InterfaceType: number;
  /** u32 */
  BusNumber: number;
  /** u32 */
  AddressSpace: number;
}

export const sizeofIOSPACE_EX64 = 32;

export function allocIOSPACE_EX64(data?: Partial<IOSPACE_EX64>): Uint8Array {
  const buf = new Uint8Array(sizeofIOSPACE_EX64);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Address !== undefined) view.setBigUint64(0, util.toBigInt(data.Address), true);
  // 0x08: u32
  if (data?.Length !== undefined) view.setUint32(8, Number(data.Length), true);
  // 0x0c: u32
  if (data?.Data !== undefined) view.setUint32(12, Number(data.Data), true);
  // 0x10: u32
  if (data?.InterfaceType !== undefined) view.setUint32(16, Number(data.InterfaceType), true);
  // 0x14: u32
  if (data?.BusNumber !== undefined) view.setUint32(20, Number(data.BusNumber), true);
  // 0x18: u32
  if (data?.AddressSpace !== undefined) view.setUint32(24, Number(data.AddressSpace), true);
  // 0x1c: pad4
  return buf;
}

export class IOSPACE_EX64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Address(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u32
  get Length(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Data(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get InterfaceType(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get BusNumber(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get AddressSpace(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u64
  set Address(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u32
  set Length(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Data(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set InterfaceType(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set BusNumber(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set AddressSpace(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.BUSDATA (size: 32)
 */
export interface BUSDATA {
  /** u32 */
  BusDataType: number;
  /** u32 */
  BusNumber: number;
  /** u32 */
  SlotNumber: number;
  /** ptr */
  Buffer: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Offset: number;
  /** u32 */
  Length: number;
}

export const sizeofBUSDATA = 32;

export function allocBUSDATA(data?: Partial<BUSDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofBUSDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BusDataType !== undefined) view.setUint32(0, Number(data.BusDataType), true);
  // 0x04: u32
  if (data?.BusNumber !== undefined) view.setUint32(4, Number(data.BusNumber), true);
  // 0x08: u32
  if (data?.SlotNumber !== undefined) view.setUint32(8, Number(data.SlotNumber), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Buffer !== undefined) view.setBigUint64(16, data.Buffer === null ? 0n : util.toBigInt(util.toPointer(data.Buffer)), true);
  // 0x18: u32
  if (data?.Offset !== undefined) view.setUint32(24, Number(data.Offset), true);
  // 0x1c: u32
  if (data?.Length !== undefined) view.setUint32(28, Number(data.Length), true);
  return buf;
}

export class BUSDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get BusDataType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get BusNumber(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get SlotNumber(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Buffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get Offset(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get Length(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: u32
  set BusDataType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set BusNumber(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set SlotNumber(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Buffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set Offset(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set Length(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.SEARCHMEMORY (size: 40)
 */
export interface SEARCHMEMORY {
  /** u64 */
  SearchAddress: number | bigint;
  /** u64 */
  SearchLength: number | bigint;
  /** u64 */
  FoundAddress: number | bigint;
  /** u32 */
  PatternLength: number;
  /** ptr */
  Pattern: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSEARCHMEMORY = 40;

export function allocSEARCHMEMORY(data?: Partial<SEARCHMEMORY>): Uint8Array {
  const buf = new Uint8Array(sizeofSEARCHMEMORY);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.SearchAddress !== undefined) view.setBigUint64(0, util.toBigInt(data.SearchAddress), true);
  // 0x08: u64
  if (data?.SearchLength !== undefined) view.setBigUint64(8, util.toBigInt(data.SearchLength), true);
  // 0x10: u64
  if (data?.FoundAddress !== undefined) view.setBigUint64(16, util.toBigInt(data.FoundAddress), true);
  // 0x18: u32
  if (data?.PatternLength !== undefined) view.setUint32(24, Number(data.PatternLength), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Pattern !== undefined) view.setBigUint64(32, data.Pattern === null ? 0n : util.toBigInt(util.toPointer(data.Pattern)), true);
  return buf;
}

export class SEARCHMEMORYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get SearchAddress(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get SearchLength(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get FoundAddress(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u32
  get PatternLength(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get Pattern(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u64
  set SearchAddress(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set SearchLength(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set FoundAddress(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u32
  set PatternLength(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set Pattern(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.PHYSICAL (size: 24)
 */
export interface PHYSICAL {
  /** u64 */
  Address: number | bigint;
  /** u32 */
  BufLen: number;
  /** array */
  Buf: Deno.PointerValue | null;
}

export const sizeofPHYSICAL = 24;

export function allocPHYSICAL(data?: Partial<PHYSICAL>): Uint8Array {
  const buf = new Uint8Array(sizeofPHYSICAL);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Address !== undefined) view.setBigUint64(0, util.toBigInt(data.Address), true);
  // 0x08: u32
  if (data?.BufLen !== undefined) view.setUint32(8, Number(data.BufLen), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Buf !== undefined) view.setBigUint64(16, data.Buf === null ? 0n : util.toBigInt(util.toPointer(data.Buf)), true);
  return buf;
}

export class PHYSICALView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Address(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u32
  get BufLen(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Buf(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u64
  set Address(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u32
  set BufLen(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Buf(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.PHYSICAL_WITH_FLAGS (size: 24)
 */
export interface PHYSICAL_WITH_FLAGS {
  /** u64 */
  Address: number | bigint;
  /** u32 */
  BufLen: number;
  /** u32 */
  Flags: number;
  /** array */
  Buf: Deno.PointerValue | null;
}

export const sizeofPHYSICAL_WITH_FLAGS = 24;

export function allocPHYSICAL_WITH_FLAGS(data?: Partial<PHYSICAL_WITH_FLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofPHYSICAL_WITH_FLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Address !== undefined) view.setBigUint64(0, util.toBigInt(data.Address), true);
  // 0x08: u32
  if (data?.BufLen !== undefined) view.setUint32(8, Number(data.BufLen), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: pointer
  if (data?.Buf !== undefined) view.setBigUint64(16, data.Buf === null ? 0n : util.toBigInt(util.toPointer(data.Buf)), true);
  return buf;
}

export class PHYSICAL_WITH_FLAGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Address(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u32
  get BufLen(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Flags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get Buf(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u64
  set Address(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u32
  set BufLen(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Flags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set Buf(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.READ_WRITE_MSR (size: 16)
 */
export interface READ_WRITE_MSR {
  /** u32 */
  Msr: number;
  /** i64 */
  Value: number | bigint;
}

export const sizeofREAD_WRITE_MSR = 16;

export function allocREAD_WRITE_MSR(data?: Partial<READ_WRITE_MSR>): Uint8Array {
  const buf = new Uint8Array(sizeofREAD_WRITE_MSR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Msr !== undefined) view.setUint32(0, Number(data.Msr), true);
  // 0x04: pad4
  // 0x08: i64
  if (data?.Value !== undefined) view.setBigInt64(8, util.toBigInt(data.Value), true);
  return buf;
}

export class READ_WRITE_MSRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Msr(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: i64
  get Value(): number | bigint {
    return this.view.getBigInt64(8, true);
  }

  // 0x00: u32
  set Msr(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: i64
  set Value(value: number | bigint) {
    this.view.setBigInt64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.GET_SET_SYMPATH (size: 24)
 */
export interface GET_SET_SYMPATH {
  /** Windows.Win32.Foundation.PSTR */
  Args: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  Result: string | null | Uint8Array;
  /** i32 */
  Length: number;
}

export const sizeofGET_SET_SYMPATH = 24;

export function allocGET_SET_SYMPATH(data?: Partial<GET_SET_SYMPATH>): Uint8Array {
  const buf = new Uint8Array(sizeofGET_SET_SYMPATH);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Args !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Args);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.Result !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.Result);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: i32
  if (data?.Length !== undefined) view.setInt32(16, Number(data.Length), true);
  // 0x14: pad4
  return buf;
}

export class GET_SET_SYMPATHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Args(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get Result(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i32
  get Length(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: buffer
  set Args(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set Result(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: i32
  set Length(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.GET_TEB_ADDRESS (size: 8)
 */
export interface GET_TEB_ADDRESS {
  /** u64 */
  Address: number | bigint;
}

export const sizeofGET_TEB_ADDRESS = 8;

export function allocGET_TEB_ADDRESS(data?: Partial<GET_TEB_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofGET_TEB_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Address !== undefined) view.setBigUint64(0, util.toBigInt(data.Address), true);
  return buf;
}

export class GET_TEB_ADDRESSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Address(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x00: u64
  set Address(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.GET_PEB_ADDRESS (size: 16)
 */
export interface GET_PEB_ADDRESS {
  /** u64 */
  CurrentThread: number | bigint;
  /** u64 */
  Address: number | bigint;
}

export const sizeofGET_PEB_ADDRESS = 16;

export function allocGET_PEB_ADDRESS(data?: Partial<GET_PEB_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofGET_PEB_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.CurrentThread !== undefined) view.setBigUint64(0, util.toBigInt(data.CurrentThread), true);
  // 0x08: u64
  if (data?.Address !== undefined) view.setBigUint64(8, util.toBigInt(data.Address), true);
  return buf;
}

export class GET_PEB_ADDRESSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get CurrentThread(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get Address(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u64
  set CurrentThread(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set Address(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.GET_CURRENT_THREAD_ADDRESS (size: 16)
 */
export interface GET_CURRENT_THREAD_ADDRESS {
  /** u32 */
  Processor: number;
  /** u64 */
  Address: number | bigint;
}

export const sizeofGET_CURRENT_THREAD_ADDRESS = 16;

export function allocGET_CURRENT_THREAD_ADDRESS(data?: Partial<GET_CURRENT_THREAD_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofGET_CURRENT_THREAD_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Processor !== undefined) view.setUint32(0, Number(data.Processor), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.Address !== undefined) view.setBigUint64(8, util.toBigInt(data.Address), true);
  return buf;
}

export class GET_CURRENT_THREAD_ADDRESSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Processor(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: u64
  get Address(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u32
  set Processor(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: u64
  set Address(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.GET_CURRENT_PROCESS_ADDRESS (size: 24)
 */
export interface GET_CURRENT_PROCESS_ADDRESS {
  /** u32 */
  Processor: number;
  /** u64 */
  CurrentThread: number | bigint;
  /** u64 */
  Address: number | bigint;
}

export const sizeofGET_CURRENT_PROCESS_ADDRESS = 24;

export function allocGET_CURRENT_PROCESS_ADDRESS(data?: Partial<GET_CURRENT_PROCESS_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofGET_CURRENT_PROCESS_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Processor !== undefined) view.setUint32(0, Number(data.Processor), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.CurrentThread !== undefined) view.setBigUint64(8, util.toBigInt(data.CurrentThread), true);
  // 0x10: u64
  if (data?.Address !== undefined) view.setBigUint64(16, util.toBigInt(data.Address), true);
  return buf;
}

export class GET_CURRENT_PROCESS_ADDRESSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Processor(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: u64
  get CurrentThread(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get Address(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x00: u32
  set Processor(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: u64
  set CurrentThread(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set Address(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.GET_INPUT_LINE (size: 24)
 */
export interface GET_INPUT_LINE {
  /** Windows.Win32.Foundation.PSTR */
  Prompt: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  Buffer: string | null | Uint8Array;
  /** u32 */
  BufferSize: number;
  /** u32 */
  InputSize: number;
}

export const sizeofGET_INPUT_LINE = 24;

export function allocGET_INPUT_LINE(data?: Partial<GET_INPUT_LINE>): Uint8Array {
  const buf = new Uint8Array(sizeofGET_INPUT_LINE);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Prompt !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Prompt);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.Buffer !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.Buffer);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.BufferSize !== undefined) view.setUint32(16, Number(data.BufferSize), true);
  // 0x14: u32
  if (data?.InputSize !== undefined) view.setUint32(20, Number(data.InputSize), true);
  return buf;
}

export class GET_INPUT_LINEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Prompt(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get Buffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get BufferSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get InputSize(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: buffer
  set Prompt(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set Buffer(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: u32
  set BufferSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set InputSize(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.GET_EXPRESSION_EX (size: 24)
 */
export interface GET_EXPRESSION_EX {
  /** Windows.Win32.Foundation.PSTR */
  Expression: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  Remainder: string | null | Uint8Array;
  /** u64 */
  Value: number | bigint;
}

export const sizeofGET_EXPRESSION_EX = 24;

export function allocGET_EXPRESSION_EX(data?: Partial<GET_EXPRESSION_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofGET_EXPRESSION_EX);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Expression !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Expression);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.Remainder !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.Remainder);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u64
  if (data?.Value !== undefined) view.setBigUint64(16, util.toBigInt(data.Value), true);
  return buf;
}

export class GET_EXPRESSION_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Expression(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get Remainder(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u64
  get Value(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x00: buffer
  set Expression(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set Remainder(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: u64
  set Value(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.TRANSLATE_VIRTUAL_TO_PHYSICAL (size: 16)
 */
export interface TRANSLATE_VIRTUAL_TO_PHYSICAL {
  /** u64 */
  Virtual: number | bigint;
  /** u64 */
  Physical: number | bigint;
}

export const sizeofTRANSLATE_VIRTUAL_TO_PHYSICAL = 16;

export function allocTRANSLATE_VIRTUAL_TO_PHYSICAL(data?: Partial<TRANSLATE_VIRTUAL_TO_PHYSICAL>): Uint8Array {
  const buf = new Uint8Array(sizeofTRANSLATE_VIRTUAL_TO_PHYSICAL);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Virtual !== undefined) view.setBigUint64(0, util.toBigInt(data.Virtual), true);
  // 0x08: u64
  if (data?.Physical !== undefined) view.setBigUint64(8, util.toBigInt(data.Physical), true);
  return buf;
}

export class TRANSLATE_VIRTUAL_TO_PHYSICALView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Virtual(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get Physical(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u64
  set Virtual(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set Physical(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.VIRTUAL_TO_PHYSICAL (size: 32)
 */
export interface VIRTUAL_TO_PHYSICAL {
  /** u32 */
  Status: number;
  /** u32 */
  Size: number;
  /** u64 */
  PdeAddress: number | bigint;
  /** u64 */
  Virtual: number | bigint;
  /** u64 */
  Physical: number | bigint;
}

export const sizeofVIRTUAL_TO_PHYSICAL = 32;

export function allocVIRTUAL_TO_PHYSICAL(data?: Partial<VIRTUAL_TO_PHYSICAL>): Uint8Array {
  const buf = new Uint8Array(sizeofVIRTUAL_TO_PHYSICAL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Status !== undefined) view.setUint32(0, Number(data.Status), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u64
  if (data?.PdeAddress !== undefined) view.setBigUint64(8, util.toBigInt(data.PdeAddress), true);
  // 0x10: u64
  if (data?.Virtual !== undefined) view.setBigUint64(16, util.toBigInt(data.Virtual), true);
  // 0x18: u64
  if (data?.Physical !== undefined) view.setBigUint64(24, util.toBigInt(data.Physical), true);
  return buf;
}

export class VIRTUAL_TO_PHYSICALView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Status(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get PdeAddress(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get Virtual(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get Physical(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x00: u32
  set Status(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set PdeAddress(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set Virtual(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set Physical(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.PHYSICAL_TO_VIRTUAL (size: 16)
 */
export interface PHYSICAL_TO_VIRTUAL {
  /** u32 */
  Status: number;
  /** u32 */
  Size: number;
  /** u64 */
  PdeAddress: number | bigint;
}

export const sizeofPHYSICAL_TO_VIRTUAL = 16;

export function allocPHYSICAL_TO_VIRTUAL(data?: Partial<PHYSICAL_TO_VIRTUAL>): Uint8Array {
  const buf = new Uint8Array(sizeofPHYSICAL_TO_VIRTUAL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Status !== undefined) view.setUint32(0, Number(data.Status), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u64
  if (data?.PdeAddress !== undefined) view.setBigUint64(8, util.toBigInt(data.PdeAddress), true);
  return buf;
}

export class PHYSICAL_TO_VIRTUALView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Status(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get PdeAddress(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u32
  set Status(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set PdeAddress(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.GET_CONTEXT_EX (size: 16)
 */
export interface GET_CONTEXT_EX {
  /** u32 */
  Status: number;
  /** u32 */
  ContextSize: number;
  /** ptr */
  pContext: Deno.PointerValue | Uint8Array | null;
}

export const sizeofGET_CONTEXT_EX = 16;

export function allocGET_CONTEXT_EX(data?: Partial<GET_CONTEXT_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofGET_CONTEXT_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Status !== undefined) view.setUint32(0, Number(data.Status), true);
  // 0x04: u32
  if (data?.ContextSize !== undefined) view.setUint32(4, Number(data.ContextSize), true);
  // 0x08: pointer
  if (data?.pContext !== undefined) view.setBigUint64(8, data.pContext === null ? 0n : util.toBigInt(util.toPointer(data.pContext)), true);
  return buf;
}

export class GET_CONTEXT_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Status(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ContextSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Status(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ContextSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.POINTER_SEARCH_PHYSICAL (size: 56)
 */
export interface POINTER_SEARCH_PHYSICAL {
  /** u64 */
  Offset: number | bigint;
  /** u64 */
  Length: number | bigint;
  /** u64 */
  PointerMin: number | bigint;
  /** u64 */
  PointerMax: number | bigint;
  /** u32 */
  Flags: number;
  /** ptr */
  MatchOffsets: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  MatchOffsetsSize: number;
  /** u32 */
  MatchOffsetsCount: number;
}

export const sizeofPOINTER_SEARCH_PHYSICAL = 56;

export function allocPOINTER_SEARCH_PHYSICAL(data?: Partial<POINTER_SEARCH_PHYSICAL>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINTER_SEARCH_PHYSICAL);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Offset !== undefined) view.setBigUint64(0, util.toBigInt(data.Offset), true);
  // 0x08: u64
  if (data?.Length !== undefined) view.setBigUint64(8, util.toBigInt(data.Length), true);
  // 0x10: u64
  if (data?.PointerMin !== undefined) view.setBigUint64(16, util.toBigInt(data.PointerMin), true);
  // 0x18: u64
  if (data?.PointerMax !== undefined) view.setBigUint64(24, util.toBigInt(data.PointerMax), true);
  // 0x20: u32
  if (data?.Flags !== undefined) view.setUint32(32, Number(data.Flags), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.MatchOffsets !== undefined) view.setBigUint64(40, data.MatchOffsets === null ? 0n : util.toBigInt(util.toPointer(data.MatchOffsets)), true);
  // 0x30: u32
  if (data?.MatchOffsetsSize !== undefined) view.setUint32(48, Number(data.MatchOffsetsSize), true);
  // 0x34: u32
  if (data?.MatchOffsetsCount !== undefined) view.setUint32(52, Number(data.MatchOffsetsCount), true);
  return buf;
}

export class POINTER_SEARCH_PHYSICALView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Offset(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get Length(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get PointerMin(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get PointerMax(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u32
  get Flags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get MatchOffsets(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get MatchOffsetsSize(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get MatchOffsetsCount(): number {
    return this.view.getUint32(52, true);
  }

  // 0x00: u64
  set Offset(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set Length(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set PointerMin(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set PointerMax(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u32
  set Flags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set MatchOffsets(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set MatchOffsetsSize(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set MatchOffsetsCount(value: number) {
    this.view.setUint32(52, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.WDBGEXTS_THREAD_OS_INFO (size: 64)
 */
export interface WDBGEXTS_THREAD_OS_INFO {
  /** u32 */
  ThreadId: number;
  /** u32 */
  ExitStatus: number;
  /** u32 */
  PriorityClass: number;
  /** u32 */
  Priority: number;
  /** u64 */
  CreateTime: number | bigint;
  /** u64 */
  ExitTime: number | bigint;
  /** u64 */
  KernelTime: number | bigint;
  /** u64 */
  UserTime: number | bigint;
  /** u64 */
  StartOffset: number | bigint;
  /** u64 */
  Affinity: number | bigint;
}

export const sizeofWDBGEXTS_THREAD_OS_INFO = 64;

export function allocWDBGEXTS_THREAD_OS_INFO(data?: Partial<WDBGEXTS_THREAD_OS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWDBGEXTS_THREAD_OS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ThreadId !== undefined) view.setUint32(0, Number(data.ThreadId), true);
  // 0x04: u32
  if (data?.ExitStatus !== undefined) view.setUint32(4, Number(data.ExitStatus), true);
  // 0x08: u32
  if (data?.PriorityClass !== undefined) view.setUint32(8, Number(data.PriorityClass), true);
  // 0x0c: u32
  if (data?.Priority !== undefined) view.setUint32(12, Number(data.Priority), true);
  // 0x10: u64
  if (data?.CreateTime !== undefined) view.setBigUint64(16, util.toBigInt(data.CreateTime), true);
  // 0x18: u64
  if (data?.ExitTime !== undefined) view.setBigUint64(24, util.toBigInt(data.ExitTime), true);
  // 0x20: u64
  if (data?.KernelTime !== undefined) view.setBigUint64(32, util.toBigInt(data.KernelTime), true);
  // 0x28: u64
  if (data?.UserTime !== undefined) view.setBigUint64(40, util.toBigInt(data.UserTime), true);
  // 0x30: u64
  if (data?.StartOffset !== undefined) view.setBigUint64(48, util.toBigInt(data.StartOffset), true);
  // 0x38: u64
  if (data?.Affinity !== undefined) view.setBigUint64(56, util.toBigInt(data.Affinity), true);
  return buf;
}

export class WDBGEXTS_THREAD_OS_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ThreadId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ExitStatus(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get PriorityClass(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Priority(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u64
  get CreateTime(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get ExitTime(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u64
  get KernelTime(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: u64
  get UserTime(): number | bigint {
    return this.view.getBigUint64(40, true);
  }

  // 0x30: u64
  get StartOffset(): number | bigint {
    return this.view.getBigUint64(48, true);
  }

  // 0x38: u64
  get Affinity(): number | bigint {
    return this.view.getBigUint64(56, true);
  }

  // 0x00: u32
  set ThreadId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ExitStatus(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set PriorityClass(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Priority(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u64
  set CreateTime(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set ExitTime(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u64
  set KernelTime(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: u64
  set UserTime(value: number | bigint) {
    this.view.setBigUint64(40, util.toBigInt(value), true);
  }

  // 0x30: u64
  set StartOffset(value: number | bigint) {
    this.view.setBigUint64(48, util.toBigInt(value), true);
  }

  // 0x38: u64
  set Affinity(value: number | bigint) {
    this.view.setBigUint64(56, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.WDBGEXTS_CLR_DATA_INTERFACE (size: 16)
 */
export interface WDBGEXTS_CLR_DATA_INTERFACE {
  /** ptr */
  Iid: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Iface: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWDBGEXTS_CLR_DATA_INTERFACE = 16;

export function allocWDBGEXTS_CLR_DATA_INTERFACE(data?: Partial<WDBGEXTS_CLR_DATA_INTERFACE>): Uint8Array {
  const buf = new Uint8Array(sizeofWDBGEXTS_CLR_DATA_INTERFACE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Iid !== undefined) view.setBigUint64(0, data.Iid === null ? 0n : util.toBigInt(util.toPointer(data.Iid)), true);
  // 0x08: pointer
  if (data?.Iface !== undefined) view.setBigUint64(8, data.Iface === null ? 0n : util.toBigInt(util.toPointer(data.Iface)), true);
  return buf;
}

export class WDBGEXTS_CLR_DATA_INTERFACEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Iid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Iface(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Iid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Iface(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXT_MATCH_PATTERN_A (size: 24)
 */
export interface EXT_MATCH_PATTERN_A {
  /** Windows.Win32.Foundation.PSTR */
  Str: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  Pattern: string | null | Uint8Array;
  /** u32 */
  CaseSensitive: number;
}

export const sizeofEXT_MATCH_PATTERN_A = 24;

export function allocEXT_MATCH_PATTERN_A(data?: Partial<EXT_MATCH_PATTERN_A>): Uint8Array {
  const buf = new Uint8Array(sizeofEXT_MATCH_PATTERN_A);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Str !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Str);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.Pattern !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.Pattern);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.CaseSensitive !== undefined) view.setUint32(16, Number(data.CaseSensitive), true);
  // 0x14: pad4
  return buf;
}

export class EXT_MATCH_PATTERN_AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Str(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get Pattern(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get CaseSensitive(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: buffer
  set Str(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set Pattern(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: u32
  set CaseSensitive(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXT_FIND_FILE (size: 80)
 */
export interface EXT_FIND_FILE {
  /** Windows.Win32.Foundation.PWSTR */
  FileName: string | null | Uint8Array | Uint16Array;
  /** u64 */
  IndexedSize: number | bigint;
  /** u32 */
  ImageTimeDateStamp: number;
  /** u32 */
  ImageCheckSum: number;
  /** ptr */
  ExtraInfo: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ExtraInfoSize: number;
  /** u32 */
  Flags: number;
  /** ptr */
  FileMapping: Deno.PointerValue | Uint8Array | null;
  /** u64 */
  FileMappingSize: number | bigint;
  /** Windows.Win32.Foundation.HANDLE */
  FileHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  FoundFileName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  FoundFileNameChars: number;
}

export const sizeofEXT_FIND_FILE = 80;

export function allocEXT_FIND_FILE(data?: Partial<EXT_FIND_FILE>): Uint8Array {
  const buf = new Uint8Array(sizeofEXT_FIND_FILE);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.FileName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.FileName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u64
  if (data?.IndexedSize !== undefined) view.setBigUint64(8, util.toBigInt(data.IndexedSize), true);
  // 0x10: u32
  if (data?.ImageTimeDateStamp !== undefined) view.setUint32(16, Number(data.ImageTimeDateStamp), true);
  // 0x14: u32
  if (data?.ImageCheckSum !== undefined) view.setUint32(20, Number(data.ImageCheckSum), true);
  // 0x18: pointer
  if (data?.ExtraInfo !== undefined) view.setBigUint64(24, data.ExtraInfo === null ? 0n : util.toBigInt(util.toPointer(data.ExtraInfo)), true);
  // 0x20: u32
  if (data?.ExtraInfoSize !== undefined) view.setUint32(32, Number(data.ExtraInfoSize), true);
  // 0x24: u32
  if (data?.Flags !== undefined) view.setUint32(36, Number(data.Flags), true);
  // 0x28: pointer
  if (data?.FileMapping !== undefined) view.setBigUint64(40, data.FileMapping === null ? 0n : util.toBigInt(util.toPointer(data.FileMapping)), true);
  // 0x30: u64
  if (data?.FileMappingSize !== undefined) view.setBigUint64(48, util.toBigInt(data.FileMappingSize), true);
  // 0x38: pointer
  if (data?.FileHandle !== undefined) view.setBigUint64(56, data.FileHandle === null ? 0n : util.toBigInt(util.toPointer(data.FileHandle)), true);
  // 0x40: buffer
  if (data?.FoundFileName !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.FoundFileName);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: u32
  if (data?.FoundFileNameChars !== undefined) view.setUint32(72, Number(data.FoundFileNameChars), true);
  // 0x4c: pad4
  return buf;
}

export class EXT_FIND_FILEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get FileName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u64
  get IndexedSize(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u32
  get ImageTimeDateStamp(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ImageCheckSum(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get ExtraInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get ExtraInfoSize(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get Flags(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get FileMapping(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u64
  get FileMappingSize(): number | bigint {
    return this.view.getBigUint64(48, true);
  }

  // 0x38: pointer
  get FileHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: buffer
  get FoundFileName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: u32
  get FoundFileNameChars(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x00: buffer
  set FileName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u64
  set IndexedSize(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u32
  set ImageTimeDateStamp(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ImageCheckSum(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set ExtraInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set ExtraInfoSize(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set Flags(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set FileMapping(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: u64
  set FileMappingSize(value: number | bigint) {
    this.view.setBigUint64(48, util.toBigInt(value), true);
  }

  // 0x38: pointer
  set FileHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: buffer
  set FoundFileName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, util.toBigInt(util.toPointer((this.buf as any)._f64)), true);
  }

  // 0x48: u32
  set FoundFileNameChars(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DEBUG_TYPED_DATA (size: 64)
 */
export interface DEBUG_TYPED_DATA {
  /** u64 */
  ModBase: number | bigint;
  /** u64 */
  Offset: number | bigint;
  /** u64 */
  EngineHandle: number | bigint;
  /** u64 */
  Data: number | bigint;
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
  /** u32 */
  TypeId: number;
  /** u32 */
  BaseTypeId: number;
  /** u32 */
  Tag: number;
  /** u32 */
  Register: number;
  /** array */
  Internal: Deno.PointerValue | null;
}

export const sizeofDEBUG_TYPED_DATA = 64;

export function allocDEBUG_TYPED_DATA(data?: Partial<DEBUG_TYPED_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDEBUG_TYPED_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.ModBase !== undefined) view.setBigUint64(0, util.toBigInt(data.ModBase), true);
  // 0x08: u64
  if (data?.Offset !== undefined) view.setBigUint64(8, util.toBigInt(data.Offset), true);
  // 0x10: u64
  if (data?.EngineHandle !== undefined) view.setBigUint64(16, util.toBigInt(data.EngineHandle), true);
  // 0x18: u64
  if (data?.Data !== undefined) view.setBigUint64(24, util.toBigInt(data.Data), true);
  // 0x20: u32
  if (data?.Size !== undefined) view.setUint32(32, Number(data.Size), true);
  // 0x24: u32
  if (data?.Flags !== undefined) view.setUint32(36, Number(data.Flags), true);
  // 0x28: u32
  if (data?.TypeId !== undefined) view.setUint32(40, Number(data.TypeId), true);
  // 0x2c: u32
  if (data?.BaseTypeId !== undefined) view.setUint32(44, Number(data.BaseTypeId), true);
  // 0x30: u32
  if (data?.Tag !== undefined) view.setUint32(48, Number(data.Tag), true);
  // 0x34: u32
  if (data?.Register !== undefined) view.setUint32(52, Number(data.Register), true);
  // 0x38: pointer
  if (data?.Internal !== undefined) view.setBigUint64(56, data.Internal === null ? 0n : util.toBigInt(util.toPointer(data.Internal)), true);
  return buf;
}

export class DEBUG_TYPED_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get ModBase(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get Offset(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get EngineHandle(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get Data(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u32
  get Size(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get Flags(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get TypeId(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get BaseTypeId(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get Tag(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get Register(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: pointer
  get Internal(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u64
  set ModBase(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set Offset(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set EngineHandle(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set Data(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u32
  set Size(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set Flags(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set TypeId(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set BaseTypeId(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set Tag(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set Register(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: pointer
  set Internal(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }
}

export type HRESULT = number;

/**
 * Windows.Win32.System.Diagnostics.Debug.EXT_TYPED_DATA (size: 96)
 */
export interface EXT_TYPED_DATA {
  /** Windows.Win32.System.Diagnostics.Debug.EXT_TDOP */
  Operation: EXT_TDOP;
  /** u32 */
  Flags: number;
  /** Windows.Win32.System.Diagnostics.Debug.DEBUG_TYPED_DATA */
  InData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.DEBUG_TYPED_DATA */
  OutData: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  InStrIndex: number;
  /** u32 */
  In32: number;
  /** u32 */
  Out32: number;
  /** u64 */
  In64: number | bigint;
  /** u64 */
  Out64: number | bigint;
  /** u32 */
  StrBufferIndex: number;
  /** u32 */
  StrBufferChars: number;
  /** u32 */
  StrCharsNeeded: number;
  /** u32 */
  DataBufferIndex: number;
  /** u32 */
  DataBufferBytes: number;
  /** u32 */
  DataBytesNeeded: number;
  /** Windows.Win32.Foundation.HRESULT */
  Status: Uint8Array | Deno.PointerValue | null;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofEXT_TYPED_DATA = 96;

export function allocEXT_TYPED_DATA(data?: Partial<EXT_TYPED_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofEXT_TYPED_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Operation !== undefined) view.setInt32(0, Number(data.Operation), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.InData !== undefined) view.setBigUint64(8, data.InData === null ? 0n : util.toBigInt(util.toPointer(data.InData)), true);
  // 0x10: pointer
  if (data?.OutData !== undefined) view.setBigUint64(16, data.OutData === null ? 0n : util.toBigInt(util.toPointer(data.OutData)), true);
  // 0x18: u32
  if (data?.InStrIndex !== undefined) view.setUint32(24, Number(data.InStrIndex), true);
  // 0x1c: u32
  if (data?.In32 !== undefined) view.setUint32(28, Number(data.In32), true);
  // 0x20: u32
  if (data?.Out32 !== undefined) view.setUint32(32, Number(data.Out32), true);
  // 0x24: pad4
  // 0x28: u64
  if (data?.In64 !== undefined) view.setBigUint64(40, util.toBigInt(data.In64), true);
  // 0x30: u64
  if (data?.Out64 !== undefined) view.setBigUint64(48, util.toBigInt(data.Out64), true);
  // 0x38: u32
  if (data?.StrBufferIndex !== undefined) view.setUint32(56, Number(data.StrBufferIndex), true);
  // 0x3c: u32
  if (data?.StrBufferChars !== undefined) view.setUint32(60, Number(data.StrBufferChars), true);
  // 0x40: u32
  if (data?.StrCharsNeeded !== undefined) view.setUint32(64, Number(data.StrCharsNeeded), true);
  // 0x44: u32
  if (data?.DataBufferIndex !== undefined) view.setUint32(68, Number(data.DataBufferIndex), true);
  // 0x48: u32
  if (data?.DataBufferBytes !== undefined) view.setUint32(72, Number(data.DataBufferBytes), true);
  // 0x4c: u32
  if (data?.DataBytesNeeded !== undefined) view.setUint32(76, Number(data.DataBytesNeeded), true);
  // 0x50: pointer
  if (data?.Status !== undefined) view.setBigUint64(80, data.Status === null ? 0n : util.toBigInt(util.toPointer(data.Status)), true);
  // 0x58: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(88, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

export class EXT_TYPED_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Operation(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get InData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get OutData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get InStrIndex(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get In32(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get Out32(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: u64
  get In64(): number | bigint {
    return this.view.getBigUint64(40, true);
  }

  // 0x30: u64
  get Out64(): number | bigint {
    return this.view.getBigUint64(48, true);
  }

  // 0x38: u32
  get StrBufferIndex(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get StrBufferChars(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get StrCharsNeeded(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get DataBufferIndex(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get DataBufferBytes(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get DataBytesNeeded(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: pointer
  get Status(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set Operation(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set InData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set OutData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set InStrIndex(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set In32(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set Out32(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: u64
  set In64(value: number | bigint) {
    this.view.setBigUint64(40, util.toBigInt(value), true);
  }

  // 0x30: u64
  set Out64(value: number | bigint) {
    this.view.setBigUint64(48, util.toBigInt(value), true);
  }

  // 0x38: u32
  set StrBufferIndex(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set StrBufferChars(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set StrCharsNeeded(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set DataBufferIndex(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set DataBufferBytes(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set DataBytesNeeded(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: pointer
  set Status(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.WDBGEXTS_QUERY_INTERFACE (size: 16)
 */
export interface WDBGEXTS_QUERY_INTERFACE {
  /** ptr */
  Iid: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Iface: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWDBGEXTS_QUERY_INTERFACE = 16;

export function allocWDBGEXTS_QUERY_INTERFACE(data?: Partial<WDBGEXTS_QUERY_INTERFACE>): Uint8Array {
  const buf = new Uint8Array(sizeofWDBGEXTS_QUERY_INTERFACE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Iid !== undefined) view.setBigUint64(0, data.Iid === null ? 0n : util.toBigInt(util.toPointer(data.Iid)), true);
  // 0x08: pointer
  if (data?.Iface !== undefined) view.setBigUint64(8, data.Iface === null ? 0n : util.toBigInt(util.toPointer(data.Iface)), true);
  return buf;
}

export class WDBGEXTS_QUERY_INTERFACEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Iid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Iface(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Iid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Iface(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.WDBGEXTS_DISASSEMBLE_BUFFER (size: 56)
 */
export interface WDBGEXTS_DISASSEMBLE_BUFFER {
  /** u64 */
  InOffset: number | bigint;
  /** u64 */
  OutOffset: number | bigint;
  /** u32 */
  AddrFlags: number;
  /** u32 */
  FormatFlags: number;
  /** u32 */
  DataBufferBytes: number;
  /** u32 */
  DisasmBufferChars: number;
  /** ptr */
  DataBuffer: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  DisasmBuffer: string | null | Uint8Array | Uint16Array;
  /** array */
  Reserved0: Deno.PointerValue | null;
}

export const sizeofWDBGEXTS_DISASSEMBLE_BUFFER = 56;

export function allocWDBGEXTS_DISASSEMBLE_BUFFER(data?: Partial<WDBGEXTS_DISASSEMBLE_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofWDBGEXTS_DISASSEMBLE_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.InOffset !== undefined) view.setBigUint64(0, util.toBigInt(data.InOffset), true);
  // 0x08: u64
  if (data?.OutOffset !== undefined) view.setBigUint64(8, util.toBigInt(data.OutOffset), true);
  // 0x10: u32
  if (data?.AddrFlags !== undefined) view.setUint32(16, Number(data.AddrFlags), true);
  // 0x14: u32
  if (data?.FormatFlags !== undefined) view.setUint32(20, Number(data.FormatFlags), true);
  // 0x18: u32
  if (data?.DataBufferBytes !== undefined) view.setUint32(24, Number(data.DataBufferBytes), true);
  // 0x1c: u32
  if (data?.DisasmBufferChars !== undefined) view.setUint32(28, Number(data.DisasmBufferChars), true);
  // 0x20: pointer
  if (data?.DataBuffer !== undefined) view.setBigUint64(32, data.DataBuffer === null ? 0n : util.toBigInt(util.toPointer(data.DataBuffer)), true);
  // 0x28: buffer
  if (data?.DisasmBuffer !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.DisasmBuffer);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: pointer
  if (data?.Reserved0 !== undefined) view.setBigUint64(48, data.Reserved0 === null ? 0n : util.toBigInt(util.toPointer(data.Reserved0)), true);
  return buf;
}

export class WDBGEXTS_DISASSEMBLE_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get InOffset(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get OutOffset(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u32
  get AddrFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get FormatFlags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get DataBufferBytes(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get DisasmBufferChars(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get DataBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: buffer
  get DisasmBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get Reserved0(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u64
  set InOffset(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set OutOffset(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u32
  set AddrFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set FormatFlags(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set DataBufferBytes(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set DisasmBufferChars(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set DataBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: buffer
  set DisasmBuffer(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, util.toBigInt(util.toPointer((this.buf as any)._f40)), true);
  }

  // 0x30: pointer
  set Reserved0(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.WDBGEXTS_MODULE_IN_RANGE (size: 32)
 */
export interface WDBGEXTS_MODULE_IN_RANGE {
  /** u64 */
  Start: number | bigint;
  /** u64 */
  End: number | bigint;
  /** u64 */
  FoundModBase: number | bigint;
  /** u32 */
  FoundModSize: number;
}

export const sizeofWDBGEXTS_MODULE_IN_RANGE = 32;

export function allocWDBGEXTS_MODULE_IN_RANGE(data?: Partial<WDBGEXTS_MODULE_IN_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofWDBGEXTS_MODULE_IN_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Start !== undefined) view.setBigUint64(0, util.toBigInt(data.Start), true);
  // 0x08: u64
  if (data?.End !== undefined) view.setBigUint64(8, util.toBigInt(data.End), true);
  // 0x10: u64
  if (data?.FoundModBase !== undefined) view.setBigUint64(16, util.toBigInt(data.FoundModBase), true);
  // 0x18: u32
  if (data?.FoundModSize !== undefined) view.setUint32(24, Number(data.FoundModSize), true);
  // 0x1c: pad4
  return buf;
}

export class WDBGEXTS_MODULE_IN_RANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Start(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get End(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get FoundModBase(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u32
  get FoundModSize(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u64
  set Start(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set End(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set FoundModBase(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u32
  set FoundModSize(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DBGKD_GET_VERSION32 (size: 40)
 */
export interface DBGKD_GET_VERSION32 {
  /** u16 */
  MajorVersion: number;
  /** u16 */
  MinorVersion: number;
  /** u16 */
  ProtocolVersion: number;
  /** u16 */
  Flags: number;
  /** u32 */
  KernBase: number;
  /** u32 */
  PsLoadedModuleList: number;
  /** u16 */
  MachineType: number;
  /** u16 */
  ThCallbackStack: number;
  /** u16 */
  NextCallback: number;
  /** u16 */
  FramePointer: number;
  /** u32 */
  KiCallUserMode: number;
  /** u32 */
  KeUserCallbackDispatcher: number;
  /** u32 */
  BreakpointWithStatus: number;
  /** u32 */
  DebuggerDataList: number;
}

export const sizeofDBGKD_GET_VERSION32 = 40;

export function allocDBGKD_GET_VERSION32(data?: Partial<DBGKD_GET_VERSION32>): Uint8Array {
  const buf = new Uint8Array(sizeofDBGKD_GET_VERSION32);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.MajorVersion !== undefined) view.setUint16(0, Number(data.MajorVersion), true);
  // 0x02: u16
  if (data?.MinorVersion !== undefined) view.setUint16(2, Number(data.MinorVersion), true);
  // 0x04: u16
  if (data?.ProtocolVersion !== undefined) view.setUint16(4, Number(data.ProtocolVersion), true);
  // 0x06: u16
  if (data?.Flags !== undefined) view.setUint16(6, Number(data.Flags), true);
  // 0x08: u32
  if (data?.KernBase !== undefined) view.setUint32(8, Number(data.KernBase), true);
  // 0x0c: u32
  if (data?.PsLoadedModuleList !== undefined) view.setUint32(12, Number(data.PsLoadedModuleList), true);
  // 0x10: u16
  if (data?.MachineType !== undefined) view.setUint16(16, Number(data.MachineType), true);
  // 0x12: u16
  if (data?.ThCallbackStack !== undefined) view.setUint16(18, Number(data.ThCallbackStack), true);
  // 0x14: u16
  if (data?.NextCallback !== undefined) view.setUint16(20, Number(data.NextCallback), true);
  // 0x16: u16
  if (data?.FramePointer !== undefined) view.setUint16(22, Number(data.FramePointer), true);
  // 0x18: u32
  if (data?.KiCallUserMode !== undefined) view.setUint32(24, Number(data.KiCallUserMode), true);
  // 0x1c: u32
  if (data?.KeUserCallbackDispatcher !== undefined) view.setUint32(28, Number(data.KeUserCallbackDispatcher), true);
  // 0x20: u32
  if (data?.BreakpointWithStatus !== undefined) view.setUint32(32, Number(data.BreakpointWithStatus), true);
  // 0x24: u32
  if (data?.DebuggerDataList !== undefined) view.setUint32(36, Number(data.DebuggerDataList), true);
  return buf;
}

export class DBGKD_GET_VERSION32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get MajorVersion(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get MinorVersion(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get ProtocolVersion(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get Flags(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u32
  get KernBase(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get PsLoadedModuleList(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u16
  get MachineType(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: u16
  get ThCallbackStack(): number {
    return this.view.getUint16(18, true);
  }

  // 0x14: u16
  get NextCallback(): number {
    return this.view.getUint16(20, true);
  }

  // 0x16: u16
  get FramePointer(): number {
    return this.view.getUint16(22, true);
  }

  // 0x18: u32
  get KiCallUserMode(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get KeUserCallbackDispatcher(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get BreakpointWithStatus(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get DebuggerDataList(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: u16
  set MajorVersion(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set MinorVersion(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set ProtocolVersion(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set Flags(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u32
  set KernBase(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set PsLoadedModuleList(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u16
  set MachineType(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: u16
  set ThCallbackStack(value: number) {
    this.view.setUint16(18, value, true);
  }

  // 0x14: u16
  set NextCallback(value: number) {
    this.view.setUint16(20, value, true);
  }

  // 0x16: u16
  set FramePointer(value: number) {
    this.view.setUint16(22, value, true);
  }

  // 0x18: u32
  set KiCallUserMode(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set KeUserCallbackDispatcher(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set BreakpointWithStatus(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set DebuggerDataList(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.System.Kernel.LIST_ENTRY32 (size: 8)
 */
export interface LIST_ENTRY32 {
  /** u32 */
  Flink: number;
  /** u32 */
  Blink: number;
}

export const sizeofLIST_ENTRY32 = 8;

export function allocLIST_ENTRY32(data?: Partial<LIST_ENTRY32>): Uint8Array {
  const buf = new Uint8Array(sizeofLIST_ENTRY32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flink !== undefined) view.setUint32(0, Number(data.Flink), true);
  // 0x04: u32
  if (data?.Blink !== undefined) view.setUint32(4, Number(data.Blink), true);
  return buf;
}

export class LIST_ENTRY32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flink(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Blink(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set Flink(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Blink(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DBGKD_DEBUG_DATA_HEADER32 (size: 16)
 */
export interface DBGKD_DEBUG_DATA_HEADER32 {
  /** Windows.Win32.System.Kernel.LIST_ENTRY32 */
  List: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  OwnerTag: number;
  /** u32 */
  Size: number;
}

export const sizeofDBGKD_DEBUG_DATA_HEADER32 = 16;

export function allocDBGKD_DEBUG_DATA_HEADER32(data?: Partial<DBGKD_DEBUG_DATA_HEADER32>): Uint8Array {
  const buf = new Uint8Array(sizeofDBGKD_DEBUG_DATA_HEADER32);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.List !== undefined) view.setBigUint64(0, data.List === null ? 0n : util.toBigInt(util.toPointer(data.List)), true);
  // 0x08: u32
  if (data?.OwnerTag !== undefined) view.setUint32(8, Number(data.OwnerTag), true);
  // 0x0c: u32
  if (data?.Size !== undefined) view.setUint32(12, Number(data.Size), true);
  return buf;
}

export class DBGKD_DEBUG_DATA_HEADER32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get List(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get OwnerTag(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Size(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set List(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set OwnerTag(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Size(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.KDDEBUGGER_DATA32 (size: 264)
 */
export interface KDDEBUGGER_DATA32 {
  /** Windows.Win32.System.Diagnostics.Debug.DBGKD_DEBUG_DATA_HEADER32 */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  KernBase: number;
  /** u32 */
  BreakpointWithStatus: number;
  /** u32 */
  SavedContext: number;
  /** u16 */
  ThCallbackStack: number;
  /** u16 */
  NextCallback: number;
  /** u16 */
  FramePointer: number;
  /** u16 */
  _bitfield: number;
  /** u32 */
  KiCallUserMode: number;
  /** u32 */
  KeUserCallbackDispatcher: number;
  /** u32 */
  PsLoadedModuleList: number;
  /** u32 */
  PsActiveProcessHead: number;
  /** u32 */
  PspCidTable: number;
  /** u32 */
  ExpSystemResourcesList: number;
  /** u32 */
  ExpPagedPoolDescriptor: number;
  /** u32 */
  ExpNumberOfPagedPools: number;
  /** u32 */
  KeTimeIncrement: number;
  /** u32 */
  KeBugCheckCallbackListHead: number;
  /** u32 */
  KiBugcheckData: number;
  /** u32 */
  IopErrorLogListHead: number;
  /** u32 */
  ObpRootDirectoryObject: number;
  /** u32 */
  ObpTypeObjectType: number;
  /** u32 */
  MmSystemCacheStart: number;
  /** u32 */
  MmSystemCacheEnd: number;
  /** u32 */
  MmSystemCacheWs: number;
  /** u32 */
  MmPfnDatabase: number;
  /** u32 */
  MmSystemPtesStart: number;
  /** u32 */
  MmSystemPtesEnd: number;
  /** u32 */
  MmSubsectionBase: number;
  /** u32 */
  MmNumberOfPagingFiles: number;
  /** u32 */
  MmLowestPhysicalPage: number;
  /** u32 */
  MmHighestPhysicalPage: number;
  /** u32 */
  MmNumberOfPhysicalPages: number;
  /** u32 */
  MmMaximumNonPagedPoolInBytes: number;
  /** u32 */
  MmNonPagedSystemStart: number;
  /** u32 */
  MmNonPagedPoolStart: number;
  /** u32 */
  MmNonPagedPoolEnd: number;
  /** u32 */
  MmPagedPoolStart: number;
  /** u32 */
  MmPagedPoolEnd: number;
  /** u32 */
  MmPagedPoolInformation: number;
  /** u32 */
  MmPageSize: number;
  /** u32 */
  MmSizeOfPagedPoolInBytes: number;
  /** u32 */
  MmTotalCommitLimit: number;
  /** u32 */
  MmTotalCommittedPages: number;
  /** u32 */
  MmSharedCommit: number;
  /** u32 */
  MmDriverCommit: number;
  /** u32 */
  MmProcessCommit: number;
  /** u32 */
  MmPagedPoolCommit: number;
  /** u32 */
  MmExtendedCommit: number;
  /** u32 */
  MmZeroedPageListHead: number;
  /** u32 */
  MmFreePageListHead: number;
  /** u32 */
  MmStandbyPageListHead: number;
  /** u32 */
  MmModifiedPageListHead: number;
  /** u32 */
  MmModifiedNoWritePageListHead: number;
  /** u32 */
  MmAvailablePages: number;
  /** u32 */
  MmResidentAvailablePages: number;
  /** u32 */
  PoolTrackTable: number;
  /** u32 */
  NonPagedPoolDescriptor: number;
  /** u32 */
  MmHighestUserAddress: number;
  /** u32 */
  MmSystemRangeStart: number;
  /** u32 */
  MmUserProbeAddress: number;
  /** u32 */
  KdPrintCircularBuffer: number;
  /** u32 */
  KdPrintCircularBufferEnd: number;
  /** u32 */
  KdPrintWritePointer: number;
  /** u32 */
  KdPrintRolloverCount: number;
  /** u32 */
  MmLoadedUserImageList: number;
}

export const sizeofKDDEBUGGER_DATA32 = 264;

export function allocKDDEBUGGER_DATA32(data?: Partial<KDDEBUGGER_DATA32>): Uint8Array {
  const buf = new Uint8Array(sizeofKDDEBUGGER_DATA32);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : util.toBigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.KernBase !== undefined) view.setUint32(8, Number(data.KernBase), true);
  // 0x0c: u32
  if (data?.BreakpointWithStatus !== undefined) view.setUint32(12, Number(data.BreakpointWithStatus), true);
  // 0x10: u32
  if (data?.SavedContext !== undefined) view.setUint32(16, Number(data.SavedContext), true);
  // 0x14: u16
  if (data?.ThCallbackStack !== undefined) view.setUint16(20, Number(data.ThCallbackStack), true);
  // 0x16: u16
  if (data?.NextCallback !== undefined) view.setUint16(22, Number(data.NextCallback), true);
  // 0x18: u16
  if (data?.FramePointer !== undefined) view.setUint16(24, Number(data.FramePointer), true);
  // 0x1a: u16
  if (data?._bitfield !== undefined) view.setUint16(26, Number(data._bitfield), true);
  // 0x1c: u32
  if (data?.KiCallUserMode !== undefined) view.setUint32(28, Number(data.KiCallUserMode), true);
  // 0x20: u32
  if (data?.KeUserCallbackDispatcher !== undefined) view.setUint32(32, Number(data.KeUserCallbackDispatcher), true);
  // 0x24: u32
  if (data?.PsLoadedModuleList !== undefined) view.setUint32(36, Number(data.PsLoadedModuleList), true);
  // 0x28: u32
  if (data?.PsActiveProcessHead !== undefined) view.setUint32(40, Number(data.PsActiveProcessHead), true);
  // 0x2c: u32
  if (data?.PspCidTable !== undefined) view.setUint32(44, Number(data.PspCidTable), true);
  // 0x30: u32
  if (data?.ExpSystemResourcesList !== undefined) view.setUint32(48, Number(data.ExpSystemResourcesList), true);
  // 0x34: u32
  if (data?.ExpPagedPoolDescriptor !== undefined) view.setUint32(52, Number(data.ExpPagedPoolDescriptor), true);
  // 0x38: u32
  if (data?.ExpNumberOfPagedPools !== undefined) view.setUint32(56, Number(data.ExpNumberOfPagedPools), true);
  // 0x3c: u32
  if (data?.KeTimeIncrement !== undefined) view.setUint32(60, Number(data.KeTimeIncrement), true);
  // 0x40: u32
  if (data?.KeBugCheckCallbackListHead !== undefined) view.setUint32(64, Number(data.KeBugCheckCallbackListHead), true);
  // 0x44: u32
  if (data?.KiBugcheckData !== undefined) view.setUint32(68, Number(data.KiBugcheckData), true);
  // 0x48: u32
  if (data?.IopErrorLogListHead !== undefined) view.setUint32(72, Number(data.IopErrorLogListHead), true);
  // 0x4c: u32
  if (data?.ObpRootDirectoryObject !== undefined) view.setUint32(76, Number(data.ObpRootDirectoryObject), true);
  // 0x50: u32
  if (data?.ObpTypeObjectType !== undefined) view.setUint32(80, Number(data.ObpTypeObjectType), true);
  // 0x54: u32
  if (data?.MmSystemCacheStart !== undefined) view.setUint32(84, Number(data.MmSystemCacheStart), true);
  // 0x58: u32
  if (data?.MmSystemCacheEnd !== undefined) view.setUint32(88, Number(data.MmSystemCacheEnd), true);
  // 0x5c: u32
  if (data?.MmSystemCacheWs !== undefined) view.setUint32(92, Number(data.MmSystemCacheWs), true);
  // 0x60: u32
  if (data?.MmPfnDatabase !== undefined) view.setUint32(96, Number(data.MmPfnDatabase), true);
  // 0x64: u32
  if (data?.MmSystemPtesStart !== undefined) view.setUint32(100, Number(data.MmSystemPtesStart), true);
  // 0x68: u32
  if (data?.MmSystemPtesEnd !== undefined) view.setUint32(104, Number(data.MmSystemPtesEnd), true);
  // 0x6c: u32
  if (data?.MmSubsectionBase !== undefined) view.setUint32(108, Number(data.MmSubsectionBase), true);
  // 0x70: u32
  if (data?.MmNumberOfPagingFiles !== undefined) view.setUint32(112, Number(data.MmNumberOfPagingFiles), true);
  // 0x74: u32
  if (data?.MmLowestPhysicalPage !== undefined) view.setUint32(116, Number(data.MmLowestPhysicalPage), true);
  // 0x78: u32
  if (data?.MmHighestPhysicalPage !== undefined) view.setUint32(120, Number(data.MmHighestPhysicalPage), true);
  // 0x7c: u32
  if (data?.MmNumberOfPhysicalPages !== undefined) view.setUint32(124, Number(data.MmNumberOfPhysicalPages), true);
  // 0x80: u32
  if (data?.MmMaximumNonPagedPoolInBytes !== undefined) view.setUint32(128, Number(data.MmMaximumNonPagedPoolInBytes), true);
  // 0x84: u32
  if (data?.MmNonPagedSystemStart !== undefined) view.setUint32(132, Number(data.MmNonPagedSystemStart), true);
  // 0x88: u32
  if (data?.MmNonPagedPoolStart !== undefined) view.setUint32(136, Number(data.MmNonPagedPoolStart), true);
  // 0x8c: u32
  if (data?.MmNonPagedPoolEnd !== undefined) view.setUint32(140, Number(data.MmNonPagedPoolEnd), true);
  // 0x90: u32
  if (data?.MmPagedPoolStart !== undefined) view.setUint32(144, Number(data.MmPagedPoolStart), true);
  // 0x94: u32
  if (data?.MmPagedPoolEnd !== undefined) view.setUint32(148, Number(data.MmPagedPoolEnd), true);
  // 0x98: u32
  if (data?.MmPagedPoolInformation !== undefined) view.setUint32(152, Number(data.MmPagedPoolInformation), true);
  // 0x9c: u32
  if (data?.MmPageSize !== undefined) view.setUint32(156, Number(data.MmPageSize), true);
  // 0xa0: u32
  if (data?.MmSizeOfPagedPoolInBytes !== undefined) view.setUint32(160, Number(data.MmSizeOfPagedPoolInBytes), true);
  // 0xa4: u32
  if (data?.MmTotalCommitLimit !== undefined) view.setUint32(164, Number(data.MmTotalCommitLimit), true);
  // 0xa8: u32
  if (data?.MmTotalCommittedPages !== undefined) view.setUint32(168, Number(data.MmTotalCommittedPages), true);
  // 0xac: u32
  if (data?.MmSharedCommit !== undefined) view.setUint32(172, Number(data.MmSharedCommit), true);
  // 0xb0: u32
  if (data?.MmDriverCommit !== undefined) view.setUint32(176, Number(data.MmDriverCommit), true);
  // 0xb4: u32
  if (data?.MmProcessCommit !== undefined) view.setUint32(180, Number(data.MmProcessCommit), true);
  // 0xb8: u32
  if (data?.MmPagedPoolCommit !== undefined) view.setUint32(184, Number(data.MmPagedPoolCommit), true);
  // 0xbc: u32
  if (data?.MmExtendedCommit !== undefined) view.setUint32(188, Number(data.MmExtendedCommit), true);
  // 0xc0: u32
  if (data?.MmZeroedPageListHead !== undefined) view.setUint32(192, Number(data.MmZeroedPageListHead), true);
  // 0xc4: u32
  if (data?.MmFreePageListHead !== undefined) view.setUint32(196, Number(data.MmFreePageListHead), true);
  // 0xc8: u32
  if (data?.MmStandbyPageListHead !== undefined) view.setUint32(200, Number(data.MmStandbyPageListHead), true);
  // 0xcc: u32
  if (data?.MmModifiedPageListHead !== undefined) view.setUint32(204, Number(data.MmModifiedPageListHead), true);
  // 0xd0: u32
  if (data?.MmModifiedNoWritePageListHead !== undefined) view.setUint32(208, Number(data.MmModifiedNoWritePageListHead), true);
  // 0xd4: u32
  if (data?.MmAvailablePages !== undefined) view.setUint32(212, Number(data.MmAvailablePages), true);
  // 0xd8: u32
  if (data?.MmResidentAvailablePages !== undefined) view.setUint32(216, Number(data.MmResidentAvailablePages), true);
  // 0xdc: u32
  if (data?.PoolTrackTable !== undefined) view.setUint32(220, Number(data.PoolTrackTable), true);
  // 0xe0: u32
  if (data?.NonPagedPoolDescriptor !== undefined) view.setUint32(224, Number(data.NonPagedPoolDescriptor), true);
  // 0xe4: u32
  if (data?.MmHighestUserAddress !== undefined) view.setUint32(228, Number(data.MmHighestUserAddress), true);
  // 0xe8: u32
  if (data?.MmSystemRangeStart !== undefined) view.setUint32(232, Number(data.MmSystemRangeStart), true);
  // 0xec: u32
  if (data?.MmUserProbeAddress !== undefined) view.setUint32(236, Number(data.MmUserProbeAddress), true);
  // 0xf0: u32
  if (data?.KdPrintCircularBuffer !== undefined) view.setUint32(240, Number(data.KdPrintCircularBuffer), true);
  // 0xf4: u32
  if (data?.KdPrintCircularBufferEnd !== undefined) view.setUint32(244, Number(data.KdPrintCircularBufferEnd), true);
  // 0xf8: u32
  if (data?.KdPrintWritePointer !== undefined) view.setUint32(248, Number(data.KdPrintWritePointer), true);
  // 0xfc: u32
  if (data?.KdPrintRolloverCount !== undefined) view.setUint32(252, Number(data.KdPrintRolloverCount), true);
  // 0x100: u32
  if (data?.MmLoadedUserImageList !== undefined) view.setUint32(256, Number(data.MmLoadedUserImageList), true);
  // 0x104: pad4
  return buf;
}

export class KDDEBUGGER_DATA32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get KernBase(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get BreakpointWithStatus(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get SavedContext(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u16
  get ThCallbackStack(): number {
    return this.view.getUint16(20, true);
  }

  // 0x16: u16
  get NextCallback(): number {
    return this.view.getUint16(22, true);
  }

  // 0x18: u16
  get FramePointer(): number {
    return this.view.getUint16(24, true);
  }

  // 0x1a: u16
  get _bitfield(): number {
    return this.view.getUint16(26, true);
  }

  // 0x1c: u32
  get KiCallUserMode(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get KeUserCallbackDispatcher(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get PsLoadedModuleList(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get PsActiveProcessHead(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get PspCidTable(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get ExpSystemResourcesList(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get ExpPagedPoolDescriptor(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get ExpNumberOfPagedPools(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get KeTimeIncrement(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get KeBugCheckCallbackListHead(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get KiBugcheckData(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get IopErrorLogListHead(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get ObpRootDirectoryObject(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get ObpTypeObjectType(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get MmSystemCacheStart(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get MmSystemCacheEnd(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get MmSystemCacheWs(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: u32
  get MmPfnDatabase(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u32
  get MmSystemPtesStart(): number {
    return this.view.getUint32(100, true);
  }

  // 0x68: u32
  get MmSystemPtesEnd(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: u32
  get MmSubsectionBase(): number {
    return this.view.getUint32(108, true);
  }

  // 0x70: u32
  get MmNumberOfPagingFiles(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: u32
  get MmLowestPhysicalPage(): number {
    return this.view.getUint32(116, true);
  }

  // 0x78: u32
  get MmHighestPhysicalPage(): number {
    return this.view.getUint32(120, true);
  }

  // 0x7c: u32
  get MmNumberOfPhysicalPages(): number {
    return this.view.getUint32(124, true);
  }

  // 0x80: u32
  get MmMaximumNonPagedPoolInBytes(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: u32
  get MmNonPagedSystemStart(): number {
    return this.view.getUint32(132, true);
  }

  // 0x88: u32
  get MmNonPagedPoolStart(): number {
    return this.view.getUint32(136, true);
  }

  // 0x8c: u32
  get MmNonPagedPoolEnd(): number {
    return this.view.getUint32(140, true);
  }

  // 0x90: u32
  get MmPagedPoolStart(): number {
    return this.view.getUint32(144, true);
  }

  // 0x94: u32
  get MmPagedPoolEnd(): number {
    return this.view.getUint32(148, true);
  }

  // 0x98: u32
  get MmPagedPoolInformation(): number {
    return this.view.getUint32(152, true);
  }

  // 0x9c: u32
  get MmPageSize(): number {
    return this.view.getUint32(156, true);
  }

  // 0xa0: u32
  get MmSizeOfPagedPoolInBytes(): number {
    return this.view.getUint32(160, true);
  }

  // 0xa4: u32
  get MmTotalCommitLimit(): number {
    return this.view.getUint32(164, true);
  }

  // 0xa8: u32
  get MmTotalCommittedPages(): number {
    return this.view.getUint32(168, true);
  }

  // 0xac: u32
  get MmSharedCommit(): number {
    return this.view.getUint32(172, true);
  }

  // 0xb0: u32
  get MmDriverCommit(): number {
    return this.view.getUint32(176, true);
  }

  // 0xb4: u32
  get MmProcessCommit(): number {
    return this.view.getUint32(180, true);
  }

  // 0xb8: u32
  get MmPagedPoolCommit(): number {
    return this.view.getUint32(184, true);
  }

  // 0xbc: u32
  get MmExtendedCommit(): number {
    return this.view.getUint32(188, true);
  }

  // 0xc0: u32
  get MmZeroedPageListHead(): number {
    return this.view.getUint32(192, true);
  }

  // 0xc4: u32
  get MmFreePageListHead(): number {
    return this.view.getUint32(196, true);
  }

  // 0xc8: u32
  get MmStandbyPageListHead(): number {
    return this.view.getUint32(200, true);
  }

  // 0xcc: u32
  get MmModifiedPageListHead(): number {
    return this.view.getUint32(204, true);
  }

  // 0xd0: u32
  get MmModifiedNoWritePageListHead(): number {
    return this.view.getUint32(208, true);
  }

  // 0xd4: u32
  get MmAvailablePages(): number {
    return this.view.getUint32(212, true);
  }

  // 0xd8: u32
  get MmResidentAvailablePages(): number {
    return this.view.getUint32(216, true);
  }

  // 0xdc: u32
  get PoolTrackTable(): number {
    return this.view.getUint32(220, true);
  }

  // 0xe0: u32
  get NonPagedPoolDescriptor(): number {
    return this.view.getUint32(224, true);
  }

  // 0xe4: u32
  get MmHighestUserAddress(): number {
    return this.view.getUint32(228, true);
  }

  // 0xe8: u32
  get MmSystemRangeStart(): number {
    return this.view.getUint32(232, true);
  }

  // 0xec: u32
  get MmUserProbeAddress(): number {
    return this.view.getUint32(236, true);
  }

  // 0xf0: u32
  get KdPrintCircularBuffer(): number {
    return this.view.getUint32(240, true);
  }

  // 0xf4: u32
  get KdPrintCircularBufferEnd(): number {
    return this.view.getUint32(244, true);
  }

  // 0xf8: u32
  get KdPrintWritePointer(): number {
    return this.view.getUint32(248, true);
  }

  // 0xfc: u32
  get KdPrintRolloverCount(): number {
    return this.view.getUint32(252, true);
  }

  // 0x100: u32
  get MmLoadedUserImageList(): number {
    return this.view.getUint32(256, true);
  }

  // 0x104: pad4

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set KernBase(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set BreakpointWithStatus(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set SavedContext(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u16
  set ThCallbackStack(value: number) {
    this.view.setUint16(20, value, true);
  }

  // 0x16: u16
  set NextCallback(value: number) {
    this.view.setUint16(22, value, true);
  }

  // 0x18: u16
  set FramePointer(value: number) {
    this.view.setUint16(24, value, true);
  }

  // 0x1a: u16
  set _bitfield(value: number) {
    this.view.setUint16(26, value, true);
  }

  // 0x1c: u32
  set KiCallUserMode(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set KeUserCallbackDispatcher(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set PsLoadedModuleList(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set PsActiveProcessHead(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set PspCidTable(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set ExpSystemResourcesList(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set ExpPagedPoolDescriptor(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set ExpNumberOfPagedPools(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set KeTimeIncrement(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set KeBugCheckCallbackListHead(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set KiBugcheckData(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set IopErrorLogListHead(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set ObpRootDirectoryObject(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set ObpTypeObjectType(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set MmSystemCacheStart(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set MmSystemCacheEnd(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set MmSystemCacheWs(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: u32
  set MmPfnDatabase(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u32
  set MmSystemPtesStart(value: number) {
    this.view.setUint32(100, value, true);
  }

  // 0x68: u32
  set MmSystemPtesEnd(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: u32
  set MmSubsectionBase(value: number) {
    this.view.setUint32(108, value, true);
  }

  // 0x70: u32
  set MmNumberOfPagingFiles(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: u32
  set MmLowestPhysicalPage(value: number) {
    this.view.setUint32(116, value, true);
  }

  // 0x78: u32
  set MmHighestPhysicalPage(value: number) {
    this.view.setUint32(120, value, true);
  }

  // 0x7c: u32
  set MmNumberOfPhysicalPages(value: number) {
    this.view.setUint32(124, value, true);
  }

  // 0x80: u32
  set MmMaximumNonPagedPoolInBytes(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: u32
  set MmNonPagedSystemStart(value: number) {
    this.view.setUint32(132, value, true);
  }

  // 0x88: u32
  set MmNonPagedPoolStart(value: number) {
    this.view.setUint32(136, value, true);
  }

  // 0x8c: u32
  set MmNonPagedPoolEnd(value: number) {
    this.view.setUint32(140, value, true);
  }

  // 0x90: u32
  set MmPagedPoolStart(value: number) {
    this.view.setUint32(144, value, true);
  }

  // 0x94: u32
  set MmPagedPoolEnd(value: number) {
    this.view.setUint32(148, value, true);
  }

  // 0x98: u32
  set MmPagedPoolInformation(value: number) {
    this.view.setUint32(152, value, true);
  }

  // 0x9c: u32
  set MmPageSize(value: number) {
    this.view.setUint32(156, value, true);
  }

  // 0xa0: u32
  set MmSizeOfPagedPoolInBytes(value: number) {
    this.view.setUint32(160, value, true);
  }

  // 0xa4: u32
  set MmTotalCommitLimit(value: number) {
    this.view.setUint32(164, value, true);
  }

  // 0xa8: u32
  set MmTotalCommittedPages(value: number) {
    this.view.setUint32(168, value, true);
  }

  // 0xac: u32
  set MmSharedCommit(value: number) {
    this.view.setUint32(172, value, true);
  }

  // 0xb0: u32
  set MmDriverCommit(value: number) {
    this.view.setUint32(176, value, true);
  }

  // 0xb4: u32
  set MmProcessCommit(value: number) {
    this.view.setUint32(180, value, true);
  }

  // 0xb8: u32
  set MmPagedPoolCommit(value: number) {
    this.view.setUint32(184, value, true);
  }

  // 0xbc: u32
  set MmExtendedCommit(value: number) {
    this.view.setUint32(188, value, true);
  }

  // 0xc0: u32
  set MmZeroedPageListHead(value: number) {
    this.view.setUint32(192, value, true);
  }

  // 0xc4: u32
  set MmFreePageListHead(value: number) {
    this.view.setUint32(196, value, true);
  }

  // 0xc8: u32
  set MmStandbyPageListHead(value: number) {
    this.view.setUint32(200, value, true);
  }

  // 0xcc: u32
  set MmModifiedPageListHead(value: number) {
    this.view.setUint32(204, value, true);
  }

  // 0xd0: u32
  set MmModifiedNoWritePageListHead(value: number) {
    this.view.setUint32(208, value, true);
  }

  // 0xd4: u32
  set MmAvailablePages(value: number) {
    this.view.setUint32(212, value, true);
  }

  // 0xd8: u32
  set MmResidentAvailablePages(value: number) {
    this.view.setUint32(216, value, true);
  }

  // 0xdc: u32
  set PoolTrackTable(value: number) {
    this.view.setUint32(220, value, true);
  }

  // 0xe0: u32
  set NonPagedPoolDescriptor(value: number) {
    this.view.setUint32(224, value, true);
  }

  // 0xe4: u32
  set MmHighestUserAddress(value: number) {
    this.view.setUint32(228, value, true);
  }

  // 0xe8: u32
  set MmSystemRangeStart(value: number) {
    this.view.setUint32(232, value, true);
  }

  // 0xec: u32
  set MmUserProbeAddress(value: number) {
    this.view.setUint32(236, value, true);
  }

  // 0xf0: u32
  set KdPrintCircularBuffer(value: number) {
    this.view.setUint32(240, value, true);
  }

  // 0xf4: u32
  set KdPrintCircularBufferEnd(value: number) {
    this.view.setUint32(244, value, true);
  }

  // 0xf8: u32
  set KdPrintWritePointer(value: number) {
    this.view.setUint32(248, value, true);
  }

  // 0xfc: u32
  set KdPrintRolloverCount(value: number) {
    this.view.setUint32(252, value, true);
  }

  // 0x100: u32
  set MmLoadedUserImageList(value: number) {
    this.view.setUint32(256, value, true);
  }

  // 0x104: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DBGKD_GET_VERSION64 (size: 48)
 */
export interface DBGKD_GET_VERSION64 {
  /** u16 */
  MajorVersion: number;
  /** u16 */
  MinorVersion: number;
  /** u8 */
  ProtocolVersion: number;
  /** u8 */
  KdSecondaryVersion: number;
  /** u16 */
  Flags: number;
  /** u16 */
  MachineType: number;
  /** u8 */
  MaxPacketType: number;
  /** u8 */
  MaxStateChange: number;
  /** u8 */
  MaxManipulate: number;
  /** u8 */
  Simulation: number;
  /** array */
  Unused: Deno.PointerValue | null;
  /** u64 */
  KernBase: number | bigint;
  /** u64 */
  PsLoadedModuleList: number | bigint;
  /** u64 */
  DebuggerDataList: number | bigint;
}

export const sizeofDBGKD_GET_VERSION64 = 48;

export function allocDBGKD_GET_VERSION64(data?: Partial<DBGKD_GET_VERSION64>): Uint8Array {
  const buf = new Uint8Array(sizeofDBGKD_GET_VERSION64);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.MajorVersion !== undefined) view.setUint16(0, Number(data.MajorVersion), true);
  // 0x02: u16
  if (data?.MinorVersion !== undefined) view.setUint16(2, Number(data.MinorVersion), true);
  // 0x04: u8
  if (data?.ProtocolVersion !== undefined) view.setUint8(4, Number(data.ProtocolVersion));
  // 0x05: u8
  if (data?.KdSecondaryVersion !== undefined) view.setUint8(5, Number(data.KdSecondaryVersion));
  // 0x06: u16
  if (data?.Flags !== undefined) view.setUint16(6, Number(data.Flags), true);
  // 0x08: u16
  if (data?.MachineType !== undefined) view.setUint16(8, Number(data.MachineType), true);
  // 0x0a: u8
  if (data?.MaxPacketType !== undefined) view.setUint8(10, Number(data.MaxPacketType));
  // 0x0b: u8
  if (data?.MaxStateChange !== undefined) view.setUint8(11, Number(data.MaxStateChange));
  // 0x0c: u8
  if (data?.MaxManipulate !== undefined) view.setUint8(12, Number(data.MaxManipulate));
  // 0x0d: u8
  if (data?.Simulation !== undefined) view.setUint8(13, Number(data.Simulation));
  // 0x0e: pad2
  // 0x10: pointer
  if (data?.Unused !== undefined) view.setBigUint64(16, data.Unused === null ? 0n : util.toBigInt(util.toPointer(data.Unused)), true);
  // 0x18: u64
  if (data?.KernBase !== undefined) view.setBigUint64(24, util.toBigInt(data.KernBase), true);
  // 0x20: u64
  if (data?.PsLoadedModuleList !== undefined) view.setBigUint64(32, util.toBigInt(data.PsLoadedModuleList), true);
  // 0x28: u64
  if (data?.DebuggerDataList !== undefined) view.setBigUint64(40, util.toBigInt(data.DebuggerDataList), true);
  return buf;
}

export class DBGKD_GET_VERSION64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get MajorVersion(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get MinorVersion(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u8
  get ProtocolVersion(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get KdSecondaryVersion(): number {
    return this.view.getUint8(5);
  }

  // 0x06: u16
  get Flags(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u16
  get MachineType(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u8
  get MaxPacketType(): number {
    return this.view.getUint8(10);
  }

  // 0x0b: u8
  get MaxStateChange(): number {
    return this.view.getUint8(11);
  }

  // 0x0c: u8
  get MaxManipulate(): number {
    return this.view.getUint8(12);
  }

  // 0x0d: u8
  get Simulation(): number {
    return this.view.getUint8(13);
  }

  // 0x0e: pad2

  // 0x10: pointer
  get Unused(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u64
  get KernBase(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u64
  get PsLoadedModuleList(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: u64
  get DebuggerDataList(): number | bigint {
    return this.view.getBigUint64(40, true);
  }

  // 0x00: u16
  set MajorVersion(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set MinorVersion(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u8
  set ProtocolVersion(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set KdSecondaryVersion(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: u16
  set Flags(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u16
  set MachineType(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u8
  set MaxPacketType(value: number) {
    this.view.setUint8(10, value);
  }

  // 0x0b: u8
  set MaxStateChange(value: number) {
    this.view.setUint8(11, value);
  }

  // 0x0c: u8
  set MaxManipulate(value: number) {
    this.view.setUint8(12, value);
  }

  // 0x0d: u8
  set Simulation(value: number) {
    this.view.setUint8(13, value);
  }

  // 0x0e: pad2

  // 0x10: pointer
  set Unused(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u64
  set KernBase(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u64
  set PsLoadedModuleList(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: u64
  set DebuggerDataList(value: number | bigint) {
    this.view.setBigUint64(40, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Kernel.LIST_ENTRY64 (size: 16)
 */
export interface LIST_ENTRY64 {
  /** u64 */
  Flink: number | bigint;
  /** u64 */
  Blink: number | bigint;
}

export const sizeofLIST_ENTRY64 = 16;

export function allocLIST_ENTRY64(data?: Partial<LIST_ENTRY64>): Uint8Array {
  const buf = new Uint8Array(sizeofLIST_ENTRY64);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Flink !== undefined) view.setBigUint64(0, util.toBigInt(data.Flink), true);
  // 0x08: u64
  if (data?.Blink !== undefined) view.setBigUint64(8, util.toBigInt(data.Blink), true);
  return buf;
}

export class LIST_ENTRY64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Flink(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get Blink(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u64
  set Flink(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set Blink(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DBGKD_DEBUG_DATA_HEADER64 (size: 16)
 */
export interface DBGKD_DEBUG_DATA_HEADER64 {
  /** Windows.Win32.System.Kernel.LIST_ENTRY64 */
  List: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  OwnerTag: number;
  /** u32 */
  Size: number;
}

export const sizeofDBGKD_DEBUG_DATA_HEADER64 = 16;

export function allocDBGKD_DEBUG_DATA_HEADER64(data?: Partial<DBGKD_DEBUG_DATA_HEADER64>): Uint8Array {
  const buf = new Uint8Array(sizeofDBGKD_DEBUG_DATA_HEADER64);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.List !== undefined) view.setBigUint64(0, data.List === null ? 0n : util.toBigInt(util.toPointer(data.List)), true);
  // 0x08: u32
  if (data?.OwnerTag !== undefined) view.setUint32(8, Number(data.OwnerTag), true);
  // 0x0c: u32
  if (data?.Size !== undefined) view.setUint32(12, Number(data.Size), true);
  return buf;
}

export class DBGKD_DEBUG_DATA_HEADER64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get List(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get OwnerTag(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Size(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set List(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set OwnerTag(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Size(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.KDDEBUGGER_DATA64 (size: 880)
 */
export interface KDDEBUGGER_DATA64 {
  /** Windows.Win32.System.Diagnostics.Debug.DBGKD_DEBUG_DATA_HEADER64 */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  KernBase: number | bigint;
  /** u64 */
  BreakpointWithStatus: number | bigint;
  /** u64 */
  SavedContext: number | bigint;
  /** u16 */
  ThCallbackStack: number;
  /** u16 */
  NextCallback: number;
  /** u16 */
  FramePointer: number;
  /** u16 */
  _bitfield: number;
  /** u64 */
  KiCallUserMode: number | bigint;
  /** u64 */
  KeUserCallbackDispatcher: number | bigint;
  /** u64 */
  PsLoadedModuleList: number | bigint;
  /** u64 */
  PsActiveProcessHead: number | bigint;
  /** u64 */
  PspCidTable: number | bigint;
  /** u64 */
  ExpSystemResourcesList: number | bigint;
  /** u64 */
  ExpPagedPoolDescriptor: number | bigint;
  /** u64 */
  ExpNumberOfPagedPools: number | bigint;
  /** u64 */
  KeTimeIncrement: number | bigint;
  /** u64 */
  KeBugCheckCallbackListHead: number | bigint;
  /** u64 */
  KiBugcheckData: number | bigint;
  /** u64 */
  IopErrorLogListHead: number | bigint;
  /** u64 */
  ObpRootDirectoryObject: number | bigint;
  /** u64 */
  ObpTypeObjectType: number | bigint;
  /** u64 */
  MmSystemCacheStart: number | bigint;
  /** u64 */
  MmSystemCacheEnd: number | bigint;
  /** u64 */
  MmSystemCacheWs: number | bigint;
  /** u64 */
  MmPfnDatabase: number | bigint;
  /** u64 */
  MmSystemPtesStart: number | bigint;
  /** u64 */
  MmSystemPtesEnd: number | bigint;
  /** u64 */
  MmSubsectionBase: number | bigint;
  /** u64 */
  MmNumberOfPagingFiles: number | bigint;
  /** u64 */
  MmLowestPhysicalPage: number | bigint;
  /** u64 */
  MmHighestPhysicalPage: number | bigint;
  /** u64 */
  MmNumberOfPhysicalPages: number | bigint;
  /** u64 */
  MmMaximumNonPagedPoolInBytes: number | bigint;
  /** u64 */
  MmNonPagedSystemStart: number | bigint;
  /** u64 */
  MmNonPagedPoolStart: number | bigint;
  /** u64 */
  MmNonPagedPoolEnd: number | bigint;
  /** u64 */
  MmPagedPoolStart: number | bigint;
  /** u64 */
  MmPagedPoolEnd: number | bigint;
  /** u64 */
  MmPagedPoolInformation: number | bigint;
  /** u64 */
  MmPageSize: number | bigint;
  /** u64 */
  MmSizeOfPagedPoolInBytes: number | bigint;
  /** u64 */
  MmTotalCommitLimit: number | bigint;
  /** u64 */
  MmTotalCommittedPages: number | bigint;
  /** u64 */
  MmSharedCommit: number | bigint;
  /** u64 */
  MmDriverCommit: number | bigint;
  /** u64 */
  MmProcessCommit: number | bigint;
  /** u64 */
  MmPagedPoolCommit: number | bigint;
  /** u64 */
  MmExtendedCommit: number | bigint;
  /** u64 */
  MmZeroedPageListHead: number | bigint;
  /** u64 */
  MmFreePageListHead: number | bigint;
  /** u64 */
  MmStandbyPageListHead: number | bigint;
  /** u64 */
  MmModifiedPageListHead: number | bigint;
  /** u64 */
  MmModifiedNoWritePageListHead: number | bigint;
  /** u64 */
  MmAvailablePages: number | bigint;
  /** u64 */
  MmResidentAvailablePages: number | bigint;
  /** u64 */
  PoolTrackTable: number | bigint;
  /** u64 */
  NonPagedPoolDescriptor: number | bigint;
  /** u64 */
  MmHighestUserAddress: number | bigint;
  /** u64 */
  MmSystemRangeStart: number | bigint;
  /** u64 */
  MmUserProbeAddress: number | bigint;
  /** u64 */
  KdPrintCircularBuffer: number | bigint;
  /** u64 */
  KdPrintCircularBufferEnd: number | bigint;
  /** u64 */
  KdPrintWritePointer: number | bigint;
  /** u64 */
  KdPrintRolloverCount: number | bigint;
  /** u64 */
  MmLoadedUserImageList: number | bigint;
  /** u64 */
  NtBuildLab: number | bigint;
  /** u64 */
  KiNormalSystemCall: number | bigint;
  /** u64 */
  KiProcessorBlock: number | bigint;
  /** u64 */
  MmUnloadedDrivers: number | bigint;
  /** u64 */
  MmLastUnloadedDriver: number | bigint;
  /** u64 */
  MmTriageActionTaken: number | bigint;
  /** u64 */
  MmSpecialPoolTag: number | bigint;
  /** u64 */
  KernelVerifier: number | bigint;
  /** u64 */
  MmVerifierData: number | bigint;
  /** u64 */
  MmAllocatedNonPagedPool: number | bigint;
  /** u64 */
  MmPeakCommitment: number | bigint;
  /** u64 */
  MmTotalCommitLimitMaximum: number | bigint;
  /** u64 */
  CmNtCSDVersion: number | bigint;
  /** u64 */
  MmPhysicalMemoryBlock: number | bigint;
  /** u64 */
  MmSessionBase: number | bigint;
  /** u64 */
  MmSessionSize: number | bigint;
  /** u64 */
  MmSystemParentTablePage: number | bigint;
  /** u64 */
  MmVirtualTranslationBase: number | bigint;
  /** u16 */
  OffsetKThreadNextProcessor: number;
  /** u16 */
  OffsetKThreadTeb: number;
  /** u16 */
  OffsetKThreadKernelStack: number;
  /** u16 */
  OffsetKThreadInitialStack: number;
  /** u16 */
  OffsetKThreadApcProcess: number;
  /** u16 */
  OffsetKThreadState: number;
  /** u16 */
  OffsetKThreadBStore: number;
  /** u16 */
  OffsetKThreadBStoreLimit: number;
  /** u16 */
  SizeEProcess: number;
  /** u16 */
  OffsetEprocessPeb: number;
  /** u16 */
  OffsetEprocessParentCID: number;
  /** u16 */
  OffsetEprocessDirectoryTableBase: number;
  /** u16 */
  SizePrcb: number;
  /** u16 */
  OffsetPrcbDpcRoutine: number;
  /** u16 */
  OffsetPrcbCurrentThread: number;
  /** u16 */
  OffsetPrcbMhz: number;
  /** u16 */
  OffsetPrcbCpuType: number;
  /** u16 */
  OffsetPrcbVendorString: number;
  /** u16 */
  OffsetPrcbProcStateContext: number;
  /** u16 */
  OffsetPrcbNumber: number;
  /** u16 */
  SizeEThread: number;
  /** u8 */
  L1tfHighPhysicalBitIndex: number;
  /** u8 */
  L1tfSwizzleBitIndex: number;
  /** u32 */
  Padding0: number;
  /** u64 */
  KdPrintCircularBufferPtr: number | bigint;
  /** u64 */
  KdPrintBufferSize: number | bigint;
  /** u64 */
  KeLoaderBlock: number | bigint;
  /** u16 */
  SizePcr: number;
  /** u16 */
  OffsetPcrSelfPcr: number;
  /** u16 */
  OffsetPcrCurrentPrcb: number;
  /** u16 */
  OffsetPcrContainedPrcb: number;
  /** u16 */
  OffsetPcrInitialBStore: number;
  /** u16 */
  OffsetPcrBStoreLimit: number;
  /** u16 */
  OffsetPcrInitialStack: number;
  /** u16 */
  OffsetPcrStackLimit: number;
  /** u16 */
  OffsetPrcbPcrPage: number;
  /** u16 */
  OffsetPrcbProcStateSpecialReg: number;
  /** u16 */
  GdtR0Code: number;
  /** u16 */
  GdtR0Data: number;
  /** u16 */
  GdtR0Pcr: number;
  /** u16 */
  GdtR3Code: number;
  /** u16 */
  GdtR3Data: number;
  /** u16 */
  GdtR3Teb: number;
  /** u16 */
  GdtLdt: number;
  /** u16 */
  GdtTss: number;
  /** u16 */
  Gdt64R3CmCode: number;
  /** u16 */
  Gdt64R3CmTeb: number;
  /** u64 */
  IopNumTriageDumpDataBlocks: number | bigint;
  /** u64 */
  IopTriageDumpDataBlocks: number | bigint;
  /** u64 */
  VfCrashDataBlock: number | bigint;
  /** u64 */
  MmBadPagesDetected: number | bigint;
  /** u64 */
  MmZeroedPageSingleBitErrorsDetected: number | bigint;
  /** u64 */
  EtwpDebuggerData: number | bigint;
  /** u16 */
  OffsetPrcbContext: number;
  /** u16 */
  OffsetPrcbMaxBreakpoints: number;
  /** u16 */
  OffsetPrcbMaxWatchpoints: number;
  /** u32 */
  OffsetKThreadStackLimit: number;
  /** u32 */
  OffsetKThreadStackBase: number;
  /** u32 */
  OffsetKThreadQueueListEntry: number;
  /** u32 */
  OffsetEThreadIrpList: number;
  /** u16 */
  OffsetPrcbIdleThread: number;
  /** u16 */
  OffsetPrcbNormalDpcState: number;
  /** u16 */
  OffsetPrcbDpcStack: number;
  /** u16 */
  OffsetPrcbIsrStack: number;
  /** u16 */
  SizeKDPC_STACK_FRAME: number;
  /** u16 */
  OffsetKPriQueueThreadListHead: number;
  /** u16 */
  OffsetKThreadWaitReason: number;
  /** u16 */
  Padding1: number;
  /** u64 */
  PteBase: number | bigint;
  /** u64 */
  RetpolineStubFunctionTable: number | bigint;
  /** u32 */
  RetpolineStubFunctionTableSize: number;
  /** u32 */
  RetpolineStubOffset: number;
  /** u32 */
  RetpolineStubSize: number;
  /** u16 */
  OffsetEProcessMmHotPatchContext: number;
}

export const sizeofKDDEBUGGER_DATA64 = 880;

export function allocKDDEBUGGER_DATA64(data?: Partial<KDDEBUGGER_DATA64>): Uint8Array {
  const buf = new Uint8Array(sizeofKDDEBUGGER_DATA64);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : util.toBigInt(util.toPointer(data.Header)), true);
  // 0x08: u64
  if (data?.KernBase !== undefined) view.setBigUint64(8, util.toBigInt(data.KernBase), true);
  // 0x10: u64
  if (data?.BreakpointWithStatus !== undefined) view.setBigUint64(16, util.toBigInt(data.BreakpointWithStatus), true);
  // 0x18: u64
  if (data?.SavedContext !== undefined) view.setBigUint64(24, util.toBigInt(data.SavedContext), true);
  // 0x20: u16
  if (data?.ThCallbackStack !== undefined) view.setUint16(32, Number(data.ThCallbackStack), true);
  // 0x22: u16
  if (data?.NextCallback !== undefined) view.setUint16(34, Number(data.NextCallback), true);
  // 0x24: u16
  if (data?.FramePointer !== undefined) view.setUint16(36, Number(data.FramePointer), true);
  // 0x26: u16
  if (data?._bitfield !== undefined) view.setUint16(38, Number(data._bitfield), true);
  // 0x28: u64
  if (data?.KiCallUserMode !== undefined) view.setBigUint64(40, util.toBigInt(data.KiCallUserMode), true);
  // 0x30: u64
  if (data?.KeUserCallbackDispatcher !== undefined) view.setBigUint64(48, util.toBigInt(data.KeUserCallbackDispatcher), true);
  // 0x38: u64
  if (data?.PsLoadedModuleList !== undefined) view.setBigUint64(56, util.toBigInt(data.PsLoadedModuleList), true);
  // 0x40: u64
  if (data?.PsActiveProcessHead !== undefined) view.setBigUint64(64, util.toBigInt(data.PsActiveProcessHead), true);
  // 0x48: u64
  if (data?.PspCidTable !== undefined) view.setBigUint64(72, util.toBigInt(data.PspCidTable), true);
  // 0x50: u64
  if (data?.ExpSystemResourcesList !== undefined) view.setBigUint64(80, util.toBigInt(data.ExpSystemResourcesList), true);
  // 0x58: u64
  if (data?.ExpPagedPoolDescriptor !== undefined) view.setBigUint64(88, util.toBigInt(data.ExpPagedPoolDescriptor), true);
  // 0x60: u64
  if (data?.ExpNumberOfPagedPools !== undefined) view.setBigUint64(96, util.toBigInt(data.ExpNumberOfPagedPools), true);
  // 0x68: u64
  if (data?.KeTimeIncrement !== undefined) view.setBigUint64(104, util.toBigInt(data.KeTimeIncrement), true);
  // 0x70: u64
  if (data?.KeBugCheckCallbackListHead !== undefined) view.setBigUint64(112, util.toBigInt(data.KeBugCheckCallbackListHead), true);
  // 0x78: u64
  if (data?.KiBugcheckData !== undefined) view.setBigUint64(120, util.toBigInt(data.KiBugcheckData), true);
  // 0x80: u64
  if (data?.IopErrorLogListHead !== undefined) view.setBigUint64(128, util.toBigInt(data.IopErrorLogListHead), true);
  // 0x88: u64
  if (data?.ObpRootDirectoryObject !== undefined) view.setBigUint64(136, util.toBigInt(data.ObpRootDirectoryObject), true);
  // 0x90: u64
  if (data?.ObpTypeObjectType !== undefined) view.setBigUint64(144, util.toBigInt(data.ObpTypeObjectType), true);
  // 0x98: u64
  if (data?.MmSystemCacheStart !== undefined) view.setBigUint64(152, util.toBigInt(data.MmSystemCacheStart), true);
  // 0xa0: u64
  if (data?.MmSystemCacheEnd !== undefined) view.setBigUint64(160, util.toBigInt(data.MmSystemCacheEnd), true);
  // 0xa8: u64
  if (data?.MmSystemCacheWs !== undefined) view.setBigUint64(168, util.toBigInt(data.MmSystemCacheWs), true);
  // 0xb0: u64
  if (data?.MmPfnDatabase !== undefined) view.setBigUint64(176, util.toBigInt(data.MmPfnDatabase), true);
  // 0xb8: u64
  if (data?.MmSystemPtesStart !== undefined) view.setBigUint64(184, util.toBigInt(data.MmSystemPtesStart), true);
  // 0xc0: u64
  if (data?.MmSystemPtesEnd !== undefined) view.setBigUint64(192, util.toBigInt(data.MmSystemPtesEnd), true);
  // 0xc8: u64
  if (data?.MmSubsectionBase !== undefined) view.setBigUint64(200, util.toBigInt(data.MmSubsectionBase), true);
  // 0xd0: u64
  if (data?.MmNumberOfPagingFiles !== undefined) view.setBigUint64(208, util.toBigInt(data.MmNumberOfPagingFiles), true);
  // 0xd8: u64
  if (data?.MmLowestPhysicalPage !== undefined) view.setBigUint64(216, util.toBigInt(data.MmLowestPhysicalPage), true);
  // 0xe0: u64
  if (data?.MmHighestPhysicalPage !== undefined) view.setBigUint64(224, util.toBigInt(data.MmHighestPhysicalPage), true);
  // 0xe8: u64
  if (data?.MmNumberOfPhysicalPages !== undefined) view.setBigUint64(232, util.toBigInt(data.MmNumberOfPhysicalPages), true);
  // 0xf0: u64
  if (data?.MmMaximumNonPagedPoolInBytes !== undefined) view.setBigUint64(240, util.toBigInt(data.MmMaximumNonPagedPoolInBytes), true);
  // 0xf8: u64
  if (data?.MmNonPagedSystemStart !== undefined) view.setBigUint64(248, util.toBigInt(data.MmNonPagedSystemStart), true);
  // 0x100: u64
  if (data?.MmNonPagedPoolStart !== undefined) view.setBigUint64(256, util.toBigInt(data.MmNonPagedPoolStart), true);
  // 0x108: u64
  if (data?.MmNonPagedPoolEnd !== undefined) view.setBigUint64(264, util.toBigInt(data.MmNonPagedPoolEnd), true);
  // 0x110: u64
  if (data?.MmPagedPoolStart !== undefined) view.setBigUint64(272, util.toBigInt(data.MmPagedPoolStart), true);
  // 0x118: u64
  if (data?.MmPagedPoolEnd !== undefined) view.setBigUint64(280, util.toBigInt(data.MmPagedPoolEnd), true);
  // 0x120: u64
  if (data?.MmPagedPoolInformation !== undefined) view.setBigUint64(288, util.toBigInt(data.MmPagedPoolInformation), true);
  // 0x128: u64
  if (data?.MmPageSize !== undefined) view.setBigUint64(296, util.toBigInt(data.MmPageSize), true);
  // 0x130: u64
  if (data?.MmSizeOfPagedPoolInBytes !== undefined) view.setBigUint64(304, util.toBigInt(data.MmSizeOfPagedPoolInBytes), true);
  // 0x138: u64
  if (data?.MmTotalCommitLimit !== undefined) view.setBigUint64(312, util.toBigInt(data.MmTotalCommitLimit), true);
  // 0x140: u64
  if (data?.MmTotalCommittedPages !== undefined) view.setBigUint64(320, util.toBigInt(data.MmTotalCommittedPages), true);
  // 0x148: u64
  if (data?.MmSharedCommit !== undefined) view.setBigUint64(328, util.toBigInt(data.MmSharedCommit), true);
  // 0x150: u64
  if (data?.MmDriverCommit !== undefined) view.setBigUint64(336, util.toBigInt(data.MmDriverCommit), true);
  // 0x158: u64
  if (data?.MmProcessCommit !== undefined) view.setBigUint64(344, util.toBigInt(data.MmProcessCommit), true);
  // 0x160: u64
  if (data?.MmPagedPoolCommit !== undefined) view.setBigUint64(352, util.toBigInt(data.MmPagedPoolCommit), true);
  // 0x168: u64
  if (data?.MmExtendedCommit !== undefined) view.setBigUint64(360, util.toBigInt(data.MmExtendedCommit), true);
  // 0x170: u64
  if (data?.MmZeroedPageListHead !== undefined) view.setBigUint64(368, util.toBigInt(data.MmZeroedPageListHead), true);
  // 0x178: u64
  if (data?.MmFreePageListHead !== undefined) view.setBigUint64(376, util.toBigInt(data.MmFreePageListHead), true);
  // 0x180: u64
  if (data?.MmStandbyPageListHead !== undefined) view.setBigUint64(384, util.toBigInt(data.MmStandbyPageListHead), true);
  // 0x188: u64
  if (data?.MmModifiedPageListHead !== undefined) view.setBigUint64(392, util.toBigInt(data.MmModifiedPageListHead), true);
  // 0x190: u64
  if (data?.MmModifiedNoWritePageListHead !== undefined) view.setBigUint64(400, util.toBigInt(data.MmModifiedNoWritePageListHead), true);
  // 0x198: u64
  if (data?.MmAvailablePages !== undefined) view.setBigUint64(408, util.toBigInt(data.MmAvailablePages), true);
  // 0x1a0: u64
  if (data?.MmResidentAvailablePages !== undefined) view.setBigUint64(416, util.toBigInt(data.MmResidentAvailablePages), true);
  // 0x1a8: u64
  if (data?.PoolTrackTable !== undefined) view.setBigUint64(424, util.toBigInt(data.PoolTrackTable), true);
  // 0x1b0: u64
  if (data?.NonPagedPoolDescriptor !== undefined) view.setBigUint64(432, util.toBigInt(data.NonPagedPoolDescriptor), true);
  // 0x1b8: u64
  if (data?.MmHighestUserAddress !== undefined) view.setBigUint64(440, util.toBigInt(data.MmHighestUserAddress), true);
  // 0x1c0: u64
  if (data?.MmSystemRangeStart !== undefined) view.setBigUint64(448, util.toBigInt(data.MmSystemRangeStart), true);
  // 0x1c8: u64
  if (data?.MmUserProbeAddress !== undefined) view.setBigUint64(456, util.toBigInt(data.MmUserProbeAddress), true);
  // 0x1d0: u64
  if (data?.KdPrintCircularBuffer !== undefined) view.setBigUint64(464, util.toBigInt(data.KdPrintCircularBuffer), true);
  // 0x1d8: u64
  if (data?.KdPrintCircularBufferEnd !== undefined) view.setBigUint64(472, util.toBigInt(data.KdPrintCircularBufferEnd), true);
  // 0x1e0: u64
  if (data?.KdPrintWritePointer !== undefined) view.setBigUint64(480, util.toBigInt(data.KdPrintWritePointer), true);
  // 0x1e8: u64
  if (data?.KdPrintRolloverCount !== undefined) view.setBigUint64(488, util.toBigInt(data.KdPrintRolloverCount), true);
  // 0x1f0: u64
  if (data?.MmLoadedUserImageList !== undefined) view.setBigUint64(496, util.toBigInt(data.MmLoadedUserImageList), true);
  // 0x1f8: u64
  if (data?.NtBuildLab !== undefined) view.setBigUint64(504, util.toBigInt(data.NtBuildLab), true);
  // 0x200: u64
  if (data?.KiNormalSystemCall !== undefined) view.setBigUint64(512, util.toBigInt(data.KiNormalSystemCall), true);
  // 0x208: u64
  if (data?.KiProcessorBlock !== undefined) view.setBigUint64(520, util.toBigInt(data.KiProcessorBlock), true);
  // 0x210: u64
  if (data?.MmUnloadedDrivers !== undefined) view.setBigUint64(528, util.toBigInt(data.MmUnloadedDrivers), true);
  // 0x218: u64
  if (data?.MmLastUnloadedDriver !== undefined) view.setBigUint64(536, util.toBigInt(data.MmLastUnloadedDriver), true);
  // 0x220: u64
  if (data?.MmTriageActionTaken !== undefined) view.setBigUint64(544, util.toBigInt(data.MmTriageActionTaken), true);
  // 0x228: u64
  if (data?.MmSpecialPoolTag !== undefined) view.setBigUint64(552, util.toBigInt(data.MmSpecialPoolTag), true);
  // 0x230: u64
  if (data?.KernelVerifier !== undefined) view.setBigUint64(560, util.toBigInt(data.KernelVerifier), true);
  // 0x238: u64
  if (data?.MmVerifierData !== undefined) view.setBigUint64(568, util.toBigInt(data.MmVerifierData), true);
  // 0x240: u64
  if (data?.MmAllocatedNonPagedPool !== undefined) view.setBigUint64(576, util.toBigInt(data.MmAllocatedNonPagedPool), true);
  // 0x248: u64
  if (data?.MmPeakCommitment !== undefined) view.setBigUint64(584, util.toBigInt(data.MmPeakCommitment), true);
  // 0x250: u64
  if (data?.MmTotalCommitLimitMaximum !== undefined) view.setBigUint64(592, util.toBigInt(data.MmTotalCommitLimitMaximum), true);
  // 0x258: u64
  if (data?.CmNtCSDVersion !== undefined) view.setBigUint64(600, util.toBigInt(data.CmNtCSDVersion), true);
  // 0x260: u64
  if (data?.MmPhysicalMemoryBlock !== undefined) view.setBigUint64(608, util.toBigInt(data.MmPhysicalMemoryBlock), true);
  // 0x268: u64
  if (data?.MmSessionBase !== undefined) view.setBigUint64(616, util.toBigInt(data.MmSessionBase), true);
  // 0x270: u64
  if (data?.MmSessionSize !== undefined) view.setBigUint64(624, util.toBigInt(data.MmSessionSize), true);
  // 0x278: u64
  if (data?.MmSystemParentTablePage !== undefined) view.setBigUint64(632, util.toBigInt(data.MmSystemParentTablePage), true);
  // 0x280: u64
  if (data?.MmVirtualTranslationBase !== undefined) view.setBigUint64(640, util.toBigInt(data.MmVirtualTranslationBase), true);
  // 0x288: u16
  if (data?.OffsetKThreadNextProcessor !== undefined) view.setUint16(648, Number(data.OffsetKThreadNextProcessor), true);
  // 0x28a: u16
  if (data?.OffsetKThreadTeb !== undefined) view.setUint16(650, Number(data.OffsetKThreadTeb), true);
  // 0x28c: u16
  if (data?.OffsetKThreadKernelStack !== undefined) view.setUint16(652, Number(data.OffsetKThreadKernelStack), true);
  // 0x28e: u16
  if (data?.OffsetKThreadInitialStack !== undefined) view.setUint16(654, Number(data.OffsetKThreadInitialStack), true);
  // 0x290: u16
  if (data?.OffsetKThreadApcProcess !== undefined) view.setUint16(656, Number(data.OffsetKThreadApcProcess), true);
  // 0x292: u16
  if (data?.OffsetKThreadState !== undefined) view.setUint16(658, Number(data.OffsetKThreadState), true);
  // 0x294: u16
  if (data?.OffsetKThreadBStore !== undefined) view.setUint16(660, Number(data.OffsetKThreadBStore), true);
  // 0x296: u16
  if (data?.OffsetKThreadBStoreLimit !== undefined) view.setUint16(662, Number(data.OffsetKThreadBStoreLimit), true);
  // 0x298: u16
  if (data?.SizeEProcess !== undefined) view.setUint16(664, Number(data.SizeEProcess), true);
  // 0x29a: u16
  if (data?.OffsetEprocessPeb !== undefined) view.setUint16(666, Number(data.OffsetEprocessPeb), true);
  // 0x29c: u16
  if (data?.OffsetEprocessParentCID !== undefined) view.setUint16(668, Number(data.OffsetEprocessParentCID), true);
  // 0x29e: u16
  if (data?.OffsetEprocessDirectoryTableBase !== undefined) view.setUint16(670, Number(data.OffsetEprocessDirectoryTableBase), true);
  // 0x2a0: u16
  if (data?.SizePrcb !== undefined) view.setUint16(672, Number(data.SizePrcb), true);
  // 0x2a2: u16
  if (data?.OffsetPrcbDpcRoutine !== undefined) view.setUint16(674, Number(data.OffsetPrcbDpcRoutine), true);
  // 0x2a4: u16
  if (data?.OffsetPrcbCurrentThread !== undefined) view.setUint16(676, Number(data.OffsetPrcbCurrentThread), true);
  // 0x2a6: u16
  if (data?.OffsetPrcbMhz !== undefined) view.setUint16(678, Number(data.OffsetPrcbMhz), true);
  // 0x2a8: u16
  if (data?.OffsetPrcbCpuType !== undefined) view.setUint16(680, Number(data.OffsetPrcbCpuType), true);
  // 0x2aa: u16
  if (data?.OffsetPrcbVendorString !== undefined) view.setUint16(682, Number(data.OffsetPrcbVendorString), true);
  // 0x2ac: u16
  if (data?.OffsetPrcbProcStateContext !== undefined) view.setUint16(684, Number(data.OffsetPrcbProcStateContext), true);
  // 0x2ae: u16
  if (data?.OffsetPrcbNumber !== undefined) view.setUint16(686, Number(data.OffsetPrcbNumber), true);
  // 0x2b0: u16
  if (data?.SizeEThread !== undefined) view.setUint16(688, Number(data.SizeEThread), true);
  // 0x2b2: u8
  if (data?.L1tfHighPhysicalBitIndex !== undefined) view.setUint8(690, Number(data.L1tfHighPhysicalBitIndex));
  // 0x2b3: u8
  if (data?.L1tfSwizzleBitIndex !== undefined) view.setUint8(691, Number(data.L1tfSwizzleBitIndex));
  // 0x2b4: u32
  if (data?.Padding0 !== undefined) view.setUint32(692, Number(data.Padding0), true);
  // 0x2b8: u64
  if (data?.KdPrintCircularBufferPtr !== undefined) view.setBigUint64(696, util.toBigInt(data.KdPrintCircularBufferPtr), true);
  // 0x2c0: u64
  if (data?.KdPrintBufferSize !== undefined) view.setBigUint64(704, util.toBigInt(data.KdPrintBufferSize), true);
  // 0x2c8: u64
  if (data?.KeLoaderBlock !== undefined) view.setBigUint64(712, util.toBigInt(data.KeLoaderBlock), true);
  // 0x2d0: u16
  if (data?.SizePcr !== undefined) view.setUint16(720, Number(data.SizePcr), true);
  // 0x2d2: u16
  if (data?.OffsetPcrSelfPcr !== undefined) view.setUint16(722, Number(data.OffsetPcrSelfPcr), true);
  // 0x2d4: u16
  if (data?.OffsetPcrCurrentPrcb !== undefined) view.setUint16(724, Number(data.OffsetPcrCurrentPrcb), true);
  // 0x2d6: u16
  if (data?.OffsetPcrContainedPrcb !== undefined) view.setUint16(726, Number(data.OffsetPcrContainedPrcb), true);
  // 0x2d8: u16
  if (data?.OffsetPcrInitialBStore !== undefined) view.setUint16(728, Number(data.OffsetPcrInitialBStore), true);
  // 0x2da: u16
  if (data?.OffsetPcrBStoreLimit !== undefined) view.setUint16(730, Number(data.OffsetPcrBStoreLimit), true);
  // 0x2dc: u16
  if (data?.OffsetPcrInitialStack !== undefined) view.setUint16(732, Number(data.OffsetPcrInitialStack), true);
  // 0x2de: u16
  if (data?.OffsetPcrStackLimit !== undefined) view.setUint16(734, Number(data.OffsetPcrStackLimit), true);
  // 0x2e0: u16
  if (data?.OffsetPrcbPcrPage !== undefined) view.setUint16(736, Number(data.OffsetPrcbPcrPage), true);
  // 0x2e2: u16
  if (data?.OffsetPrcbProcStateSpecialReg !== undefined) view.setUint16(738, Number(data.OffsetPrcbProcStateSpecialReg), true);
  // 0x2e4: u16
  if (data?.GdtR0Code !== undefined) view.setUint16(740, Number(data.GdtR0Code), true);
  // 0x2e6: u16
  if (data?.GdtR0Data !== undefined) view.setUint16(742, Number(data.GdtR0Data), true);
  // 0x2e8: u16
  if (data?.GdtR0Pcr !== undefined) view.setUint16(744, Number(data.GdtR0Pcr), true);
  // 0x2ea: u16
  if (data?.GdtR3Code !== undefined) view.setUint16(746, Number(data.GdtR3Code), true);
  // 0x2ec: u16
  if (data?.GdtR3Data !== undefined) view.setUint16(748, Number(data.GdtR3Data), true);
  // 0x2ee: u16
  if (data?.GdtR3Teb !== undefined) view.setUint16(750, Number(data.GdtR3Teb), true);
  // 0x2f0: u16
  if (data?.GdtLdt !== undefined) view.setUint16(752, Number(data.GdtLdt), true);
  // 0x2f2: u16
  if (data?.GdtTss !== undefined) view.setUint16(754, Number(data.GdtTss), true);
  // 0x2f4: u16
  if (data?.Gdt64R3CmCode !== undefined) view.setUint16(756, Number(data.Gdt64R3CmCode), true);
  // 0x2f6: u16
  if (data?.Gdt64R3CmTeb !== undefined) view.setUint16(758, Number(data.Gdt64R3CmTeb), true);
  // 0x2f8: u64
  if (data?.IopNumTriageDumpDataBlocks !== undefined) view.setBigUint64(760, util.toBigInt(data.IopNumTriageDumpDataBlocks), true);
  // 0x300: u64
  if (data?.IopTriageDumpDataBlocks !== undefined) view.setBigUint64(768, util.toBigInt(data.IopTriageDumpDataBlocks), true);
  // 0x308: u64
  if (data?.VfCrashDataBlock !== undefined) view.setBigUint64(776, util.toBigInt(data.VfCrashDataBlock), true);
  // 0x310: u64
  if (data?.MmBadPagesDetected !== undefined) view.setBigUint64(784, util.toBigInt(data.MmBadPagesDetected), true);
  // 0x318: u64
  if (data?.MmZeroedPageSingleBitErrorsDetected !== undefined) view.setBigUint64(792, util.toBigInt(data.MmZeroedPageSingleBitErrorsDetected), true);
  // 0x320: u64
  if (data?.EtwpDebuggerData !== undefined) view.setBigUint64(800, util.toBigInt(data.EtwpDebuggerData), true);
  // 0x328: u16
  if (data?.OffsetPrcbContext !== undefined) view.setUint16(808, Number(data.OffsetPrcbContext), true);
  // 0x32a: u16
  if (data?.OffsetPrcbMaxBreakpoints !== undefined) view.setUint16(810, Number(data.OffsetPrcbMaxBreakpoints), true);
  // 0x32c: u16
  if (data?.OffsetPrcbMaxWatchpoints !== undefined) view.setUint16(812, Number(data.OffsetPrcbMaxWatchpoints), true);
  // 0x32e: u32
  if (data?.OffsetKThreadStackLimit !== undefined) view.setUint32(814, Number(data.OffsetKThreadStackLimit), true);
  // 0x332: u32
  if (data?.OffsetKThreadStackBase !== undefined) view.setUint32(818, Number(data.OffsetKThreadStackBase), true);
  // 0x336: u32
  if (data?.OffsetKThreadQueueListEntry !== undefined) view.setUint32(822, Number(data.OffsetKThreadQueueListEntry), true);
  // 0x33a: u32
  if (data?.OffsetEThreadIrpList !== undefined) view.setUint32(826, Number(data.OffsetEThreadIrpList), true);
  // 0x33e: u16
  if (data?.OffsetPrcbIdleThread !== undefined) view.setUint16(830, Number(data.OffsetPrcbIdleThread), true);
  // 0x340: u16
  if (data?.OffsetPrcbNormalDpcState !== undefined) view.setUint16(832, Number(data.OffsetPrcbNormalDpcState), true);
  // 0x342: u16
  if (data?.OffsetPrcbDpcStack !== undefined) view.setUint16(834, Number(data.OffsetPrcbDpcStack), true);
  // 0x344: u16
  if (data?.OffsetPrcbIsrStack !== undefined) view.setUint16(836, Number(data.OffsetPrcbIsrStack), true);
  // 0x346: u16
  if (data?.SizeKDPC_STACK_FRAME !== undefined) view.setUint16(838, Number(data.SizeKDPC_STACK_FRAME), true);
  // 0x348: u16
  if (data?.OffsetKPriQueueThreadListHead !== undefined) view.setUint16(840, Number(data.OffsetKPriQueueThreadListHead), true);
  // 0x34a: u16
  if (data?.OffsetKThreadWaitReason !== undefined) view.setUint16(842, Number(data.OffsetKThreadWaitReason), true);
  // 0x34c: u16
  if (data?.Padding1 !== undefined) view.setUint16(844, Number(data.Padding1), true);
  // 0x34e: pad2
  // 0x350: u64
  if (data?.PteBase !== undefined) view.setBigUint64(848, util.toBigInt(data.PteBase), true);
  // 0x358: u64
  if (data?.RetpolineStubFunctionTable !== undefined) view.setBigUint64(856, util.toBigInt(data.RetpolineStubFunctionTable), true);
  // 0x360: u32
  if (data?.RetpolineStubFunctionTableSize !== undefined) view.setUint32(864, Number(data.RetpolineStubFunctionTableSize), true);
  // 0x364: u32
  if (data?.RetpolineStubOffset !== undefined) view.setUint32(868, Number(data.RetpolineStubOffset), true);
  // 0x368: u32
  if (data?.RetpolineStubSize !== undefined) view.setUint32(872, Number(data.RetpolineStubSize), true);
  // 0x36c: u16
  if (data?.OffsetEProcessMmHotPatchContext !== undefined) view.setUint16(876, Number(data.OffsetEProcessMmHotPatchContext), true);
  // 0x36e: pad2
  return buf;
}

export class KDDEBUGGER_DATA64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u64
  get KernBase(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get BreakpointWithStatus(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get SavedContext(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u16
  get ThCallbackStack(): number {
    return this.view.getUint16(32, true);
  }

  // 0x22: u16
  get NextCallback(): number {
    return this.view.getUint16(34, true);
  }

  // 0x24: u16
  get FramePointer(): number {
    return this.view.getUint16(36, true);
  }

  // 0x26: u16
  get _bitfield(): number {
    return this.view.getUint16(38, true);
  }

  // 0x28: u64
  get KiCallUserMode(): number | bigint {
    return this.view.getBigUint64(40, true);
  }

  // 0x30: u64
  get KeUserCallbackDispatcher(): number | bigint {
    return this.view.getBigUint64(48, true);
  }

  // 0x38: u64
  get PsLoadedModuleList(): number | bigint {
    return this.view.getBigUint64(56, true);
  }

  // 0x40: u64
  get PsActiveProcessHead(): number | bigint {
    return this.view.getBigUint64(64, true);
  }

  // 0x48: u64
  get PspCidTable(): number | bigint {
    return this.view.getBigUint64(72, true);
  }

  // 0x50: u64
  get ExpSystemResourcesList(): number | bigint {
    return this.view.getBigUint64(80, true);
  }

  // 0x58: u64
  get ExpPagedPoolDescriptor(): number | bigint {
    return this.view.getBigUint64(88, true);
  }

  // 0x60: u64
  get ExpNumberOfPagedPools(): number | bigint {
    return this.view.getBigUint64(96, true);
  }

  // 0x68: u64
  get KeTimeIncrement(): number | bigint {
    return this.view.getBigUint64(104, true);
  }

  // 0x70: u64
  get KeBugCheckCallbackListHead(): number | bigint {
    return this.view.getBigUint64(112, true);
  }

  // 0x78: u64
  get KiBugcheckData(): number | bigint {
    return this.view.getBigUint64(120, true);
  }

  // 0x80: u64
  get IopErrorLogListHead(): number | bigint {
    return this.view.getBigUint64(128, true);
  }

  // 0x88: u64
  get ObpRootDirectoryObject(): number | bigint {
    return this.view.getBigUint64(136, true);
  }

  // 0x90: u64
  get ObpTypeObjectType(): number | bigint {
    return this.view.getBigUint64(144, true);
  }

  // 0x98: u64
  get MmSystemCacheStart(): number | bigint {
    return this.view.getBigUint64(152, true);
  }

  // 0xa0: u64
  get MmSystemCacheEnd(): number | bigint {
    return this.view.getBigUint64(160, true);
  }

  // 0xa8: u64
  get MmSystemCacheWs(): number | bigint {
    return this.view.getBigUint64(168, true);
  }

  // 0xb0: u64
  get MmPfnDatabase(): number | bigint {
    return this.view.getBigUint64(176, true);
  }

  // 0xb8: u64
  get MmSystemPtesStart(): number | bigint {
    return this.view.getBigUint64(184, true);
  }

  // 0xc0: u64
  get MmSystemPtesEnd(): number | bigint {
    return this.view.getBigUint64(192, true);
  }

  // 0xc8: u64
  get MmSubsectionBase(): number | bigint {
    return this.view.getBigUint64(200, true);
  }

  // 0xd0: u64
  get MmNumberOfPagingFiles(): number | bigint {
    return this.view.getBigUint64(208, true);
  }

  // 0xd8: u64
  get MmLowestPhysicalPage(): number | bigint {
    return this.view.getBigUint64(216, true);
  }

  // 0xe0: u64
  get MmHighestPhysicalPage(): number | bigint {
    return this.view.getBigUint64(224, true);
  }

  // 0xe8: u64
  get MmNumberOfPhysicalPages(): number | bigint {
    return this.view.getBigUint64(232, true);
  }

  // 0xf0: u64
  get MmMaximumNonPagedPoolInBytes(): number | bigint {
    return this.view.getBigUint64(240, true);
  }

  // 0xf8: u64
  get MmNonPagedSystemStart(): number | bigint {
    return this.view.getBigUint64(248, true);
  }

  // 0x100: u64
  get MmNonPagedPoolStart(): number | bigint {
    return this.view.getBigUint64(256, true);
  }

  // 0x108: u64
  get MmNonPagedPoolEnd(): number | bigint {
    return this.view.getBigUint64(264, true);
  }

  // 0x110: u64
  get MmPagedPoolStart(): number | bigint {
    return this.view.getBigUint64(272, true);
  }

  // 0x118: u64
  get MmPagedPoolEnd(): number | bigint {
    return this.view.getBigUint64(280, true);
  }

  // 0x120: u64
  get MmPagedPoolInformation(): number | bigint {
    return this.view.getBigUint64(288, true);
  }

  // 0x128: u64
  get MmPageSize(): number | bigint {
    return this.view.getBigUint64(296, true);
  }

  // 0x130: u64
  get MmSizeOfPagedPoolInBytes(): number | bigint {
    return this.view.getBigUint64(304, true);
  }

  // 0x138: u64
  get MmTotalCommitLimit(): number | bigint {
    return this.view.getBigUint64(312, true);
  }

  // 0x140: u64
  get MmTotalCommittedPages(): number | bigint {
    return this.view.getBigUint64(320, true);
  }

  // 0x148: u64
  get MmSharedCommit(): number | bigint {
    return this.view.getBigUint64(328, true);
  }

  // 0x150: u64
  get MmDriverCommit(): number | bigint {
    return this.view.getBigUint64(336, true);
  }

  // 0x158: u64
  get MmProcessCommit(): number | bigint {
    return this.view.getBigUint64(344, true);
  }

  // 0x160: u64
  get MmPagedPoolCommit(): number | bigint {
    return this.view.getBigUint64(352, true);
  }

  // 0x168: u64
  get MmExtendedCommit(): number | bigint {
    return this.view.getBigUint64(360, true);
  }

  // 0x170: u64
  get MmZeroedPageListHead(): number | bigint {
    return this.view.getBigUint64(368, true);
  }

  // 0x178: u64
  get MmFreePageListHead(): number | bigint {
    return this.view.getBigUint64(376, true);
  }

  // 0x180: u64
  get MmStandbyPageListHead(): number | bigint {
    return this.view.getBigUint64(384, true);
  }

  // 0x188: u64
  get MmModifiedPageListHead(): number | bigint {
    return this.view.getBigUint64(392, true);
  }

  // 0x190: u64
  get MmModifiedNoWritePageListHead(): number | bigint {
    return this.view.getBigUint64(400, true);
  }

  // 0x198: u64
  get MmAvailablePages(): number | bigint {
    return this.view.getBigUint64(408, true);
  }

  // 0x1a0: u64
  get MmResidentAvailablePages(): number | bigint {
    return this.view.getBigUint64(416, true);
  }

  // 0x1a8: u64
  get PoolTrackTable(): number | bigint {
    return this.view.getBigUint64(424, true);
  }

  // 0x1b0: u64
  get NonPagedPoolDescriptor(): number | bigint {
    return this.view.getBigUint64(432, true);
  }

  // 0x1b8: u64
  get MmHighestUserAddress(): number | bigint {
    return this.view.getBigUint64(440, true);
  }

  // 0x1c0: u64
  get MmSystemRangeStart(): number | bigint {
    return this.view.getBigUint64(448, true);
  }

  // 0x1c8: u64
  get MmUserProbeAddress(): number | bigint {
    return this.view.getBigUint64(456, true);
  }

  // 0x1d0: u64
  get KdPrintCircularBuffer(): number | bigint {
    return this.view.getBigUint64(464, true);
  }

  // 0x1d8: u64
  get KdPrintCircularBufferEnd(): number | bigint {
    return this.view.getBigUint64(472, true);
  }

  // 0x1e0: u64
  get KdPrintWritePointer(): number | bigint {
    return this.view.getBigUint64(480, true);
  }

  // 0x1e8: u64
  get KdPrintRolloverCount(): number | bigint {
    return this.view.getBigUint64(488, true);
  }

  // 0x1f0: u64
  get MmLoadedUserImageList(): number | bigint {
    return this.view.getBigUint64(496, true);
  }

  // 0x1f8: u64
  get NtBuildLab(): number | bigint {
    return this.view.getBigUint64(504, true);
  }

  // 0x200: u64
  get KiNormalSystemCall(): number | bigint {
    return this.view.getBigUint64(512, true);
  }

  // 0x208: u64
  get KiProcessorBlock(): number | bigint {
    return this.view.getBigUint64(520, true);
  }

  // 0x210: u64
  get MmUnloadedDrivers(): number | bigint {
    return this.view.getBigUint64(528, true);
  }

  // 0x218: u64
  get MmLastUnloadedDriver(): number | bigint {
    return this.view.getBigUint64(536, true);
  }

  // 0x220: u64
  get MmTriageActionTaken(): number | bigint {
    return this.view.getBigUint64(544, true);
  }

  // 0x228: u64
  get MmSpecialPoolTag(): number | bigint {
    return this.view.getBigUint64(552, true);
  }

  // 0x230: u64
  get KernelVerifier(): number | bigint {
    return this.view.getBigUint64(560, true);
  }

  // 0x238: u64
  get MmVerifierData(): number | bigint {
    return this.view.getBigUint64(568, true);
  }

  // 0x240: u64
  get MmAllocatedNonPagedPool(): number | bigint {
    return this.view.getBigUint64(576, true);
  }

  // 0x248: u64
  get MmPeakCommitment(): number | bigint {
    return this.view.getBigUint64(584, true);
  }

  // 0x250: u64
  get MmTotalCommitLimitMaximum(): number | bigint {
    return this.view.getBigUint64(592, true);
  }

  // 0x258: u64
  get CmNtCSDVersion(): number | bigint {
    return this.view.getBigUint64(600, true);
  }

  // 0x260: u64
  get MmPhysicalMemoryBlock(): number | bigint {
    return this.view.getBigUint64(608, true);
  }

  // 0x268: u64
  get MmSessionBase(): number | bigint {
    return this.view.getBigUint64(616, true);
  }

  // 0x270: u64
  get MmSessionSize(): number | bigint {
    return this.view.getBigUint64(624, true);
  }

  // 0x278: u64
  get MmSystemParentTablePage(): number | bigint {
    return this.view.getBigUint64(632, true);
  }

  // 0x280: u64
  get MmVirtualTranslationBase(): number | bigint {
    return this.view.getBigUint64(640, true);
  }

  // 0x288: u16
  get OffsetKThreadNextProcessor(): number {
    return this.view.getUint16(648, true);
  }

  // 0x28a: u16
  get OffsetKThreadTeb(): number {
    return this.view.getUint16(650, true);
  }

  // 0x28c: u16
  get OffsetKThreadKernelStack(): number {
    return this.view.getUint16(652, true);
  }

  // 0x28e: u16
  get OffsetKThreadInitialStack(): number {
    return this.view.getUint16(654, true);
  }

  // 0x290: u16
  get OffsetKThreadApcProcess(): number {
    return this.view.getUint16(656, true);
  }

  // 0x292: u16
  get OffsetKThreadState(): number {
    return this.view.getUint16(658, true);
  }

  // 0x294: u16
  get OffsetKThreadBStore(): number {
    return this.view.getUint16(660, true);
  }

  // 0x296: u16
  get OffsetKThreadBStoreLimit(): number {
    return this.view.getUint16(662, true);
  }

  // 0x298: u16
  get SizeEProcess(): number {
    return this.view.getUint16(664, true);
  }

  // 0x29a: u16
  get OffsetEprocessPeb(): number {
    return this.view.getUint16(666, true);
  }

  // 0x29c: u16
  get OffsetEprocessParentCID(): number {
    return this.view.getUint16(668, true);
  }

  // 0x29e: u16
  get OffsetEprocessDirectoryTableBase(): number {
    return this.view.getUint16(670, true);
  }

  // 0x2a0: u16
  get SizePrcb(): number {
    return this.view.getUint16(672, true);
  }

  // 0x2a2: u16
  get OffsetPrcbDpcRoutine(): number {
    return this.view.getUint16(674, true);
  }

  // 0x2a4: u16
  get OffsetPrcbCurrentThread(): number {
    return this.view.getUint16(676, true);
  }

  // 0x2a6: u16
  get OffsetPrcbMhz(): number {
    return this.view.getUint16(678, true);
  }

  // 0x2a8: u16
  get OffsetPrcbCpuType(): number {
    return this.view.getUint16(680, true);
  }

  // 0x2aa: u16
  get OffsetPrcbVendorString(): number {
    return this.view.getUint16(682, true);
  }

  // 0x2ac: u16
  get OffsetPrcbProcStateContext(): number {
    return this.view.getUint16(684, true);
  }

  // 0x2ae: u16
  get OffsetPrcbNumber(): number {
    return this.view.getUint16(686, true);
  }

  // 0x2b0: u16
  get SizeEThread(): number {
    return this.view.getUint16(688, true);
  }

  // 0x2b2: u8
  get L1tfHighPhysicalBitIndex(): number {
    return this.view.getUint8(690);
  }

  // 0x2b3: u8
  get L1tfSwizzleBitIndex(): number {
    return this.view.getUint8(691);
  }

  // 0x2b4: u32
  get Padding0(): number {
    return this.view.getUint32(692, true);
  }

  // 0x2b8: u64
  get KdPrintCircularBufferPtr(): number | bigint {
    return this.view.getBigUint64(696, true);
  }

  // 0x2c0: u64
  get KdPrintBufferSize(): number | bigint {
    return this.view.getBigUint64(704, true);
  }

  // 0x2c8: u64
  get KeLoaderBlock(): number | bigint {
    return this.view.getBigUint64(712, true);
  }

  // 0x2d0: u16
  get SizePcr(): number {
    return this.view.getUint16(720, true);
  }

  // 0x2d2: u16
  get OffsetPcrSelfPcr(): number {
    return this.view.getUint16(722, true);
  }

  // 0x2d4: u16
  get OffsetPcrCurrentPrcb(): number {
    return this.view.getUint16(724, true);
  }

  // 0x2d6: u16
  get OffsetPcrContainedPrcb(): number {
    return this.view.getUint16(726, true);
  }

  // 0x2d8: u16
  get OffsetPcrInitialBStore(): number {
    return this.view.getUint16(728, true);
  }

  // 0x2da: u16
  get OffsetPcrBStoreLimit(): number {
    return this.view.getUint16(730, true);
  }

  // 0x2dc: u16
  get OffsetPcrInitialStack(): number {
    return this.view.getUint16(732, true);
  }

  // 0x2de: u16
  get OffsetPcrStackLimit(): number {
    return this.view.getUint16(734, true);
  }

  // 0x2e0: u16
  get OffsetPrcbPcrPage(): number {
    return this.view.getUint16(736, true);
  }

  // 0x2e2: u16
  get OffsetPrcbProcStateSpecialReg(): number {
    return this.view.getUint16(738, true);
  }

  // 0x2e4: u16
  get GdtR0Code(): number {
    return this.view.getUint16(740, true);
  }

  // 0x2e6: u16
  get GdtR0Data(): number {
    return this.view.getUint16(742, true);
  }

  // 0x2e8: u16
  get GdtR0Pcr(): number {
    return this.view.getUint16(744, true);
  }

  // 0x2ea: u16
  get GdtR3Code(): number {
    return this.view.getUint16(746, true);
  }

  // 0x2ec: u16
  get GdtR3Data(): number {
    return this.view.getUint16(748, true);
  }

  // 0x2ee: u16
  get GdtR3Teb(): number {
    return this.view.getUint16(750, true);
  }

  // 0x2f0: u16
  get GdtLdt(): number {
    return this.view.getUint16(752, true);
  }

  // 0x2f2: u16
  get GdtTss(): number {
    return this.view.getUint16(754, true);
  }

  // 0x2f4: u16
  get Gdt64R3CmCode(): number {
    return this.view.getUint16(756, true);
  }

  // 0x2f6: u16
  get Gdt64R3CmTeb(): number {
    return this.view.getUint16(758, true);
  }

  // 0x2f8: u64
  get IopNumTriageDumpDataBlocks(): number | bigint {
    return this.view.getBigUint64(760, true);
  }

  // 0x300: u64
  get IopTriageDumpDataBlocks(): number | bigint {
    return this.view.getBigUint64(768, true);
  }

  // 0x308: u64
  get VfCrashDataBlock(): number | bigint {
    return this.view.getBigUint64(776, true);
  }

  // 0x310: u64
  get MmBadPagesDetected(): number | bigint {
    return this.view.getBigUint64(784, true);
  }

  // 0x318: u64
  get MmZeroedPageSingleBitErrorsDetected(): number | bigint {
    return this.view.getBigUint64(792, true);
  }

  // 0x320: u64
  get EtwpDebuggerData(): number | bigint {
    return this.view.getBigUint64(800, true);
  }

  // 0x328: u16
  get OffsetPrcbContext(): number {
    return this.view.getUint16(808, true);
  }

  // 0x32a: u16
  get OffsetPrcbMaxBreakpoints(): number {
    return this.view.getUint16(810, true);
  }

  // 0x32c: u16
  get OffsetPrcbMaxWatchpoints(): number {
    return this.view.getUint16(812, true);
  }

  // 0x32e: u32
  get OffsetKThreadStackLimit(): number {
    return this.view.getUint32(814, true);
  }

  // 0x332: u32
  get OffsetKThreadStackBase(): number {
    return this.view.getUint32(818, true);
  }

  // 0x336: u32
  get OffsetKThreadQueueListEntry(): number {
    return this.view.getUint32(822, true);
  }

  // 0x33a: u32
  get OffsetEThreadIrpList(): number {
    return this.view.getUint32(826, true);
  }

  // 0x33e: u16
  get OffsetPrcbIdleThread(): number {
    return this.view.getUint16(830, true);
  }

  // 0x340: u16
  get OffsetPrcbNormalDpcState(): number {
    return this.view.getUint16(832, true);
  }

  // 0x342: u16
  get OffsetPrcbDpcStack(): number {
    return this.view.getUint16(834, true);
  }

  // 0x344: u16
  get OffsetPrcbIsrStack(): number {
    return this.view.getUint16(836, true);
  }

  // 0x346: u16
  get SizeKDPC_STACK_FRAME(): number {
    return this.view.getUint16(838, true);
  }

  // 0x348: u16
  get OffsetKPriQueueThreadListHead(): number {
    return this.view.getUint16(840, true);
  }

  // 0x34a: u16
  get OffsetKThreadWaitReason(): number {
    return this.view.getUint16(842, true);
  }

  // 0x34c: u16
  get Padding1(): number {
    return this.view.getUint16(844, true);
  }

  // 0x34e: pad2

  // 0x350: u64
  get PteBase(): number | bigint {
    return this.view.getBigUint64(848, true);
  }

  // 0x358: u64
  get RetpolineStubFunctionTable(): number | bigint {
    return this.view.getBigUint64(856, true);
  }

  // 0x360: u32
  get RetpolineStubFunctionTableSize(): number {
    return this.view.getUint32(864, true);
  }

  // 0x364: u32
  get RetpolineStubOffset(): number {
    return this.view.getUint32(868, true);
  }

  // 0x368: u32
  get RetpolineStubSize(): number {
    return this.view.getUint32(872, true);
  }

  // 0x36c: u16
  get OffsetEProcessMmHotPatchContext(): number {
    return this.view.getUint16(876, true);
  }

  // 0x36e: pad2

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u64
  set KernBase(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set BreakpointWithStatus(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set SavedContext(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u16
  set ThCallbackStack(value: number) {
    this.view.setUint16(32, value, true);
  }

  // 0x22: u16
  set NextCallback(value: number) {
    this.view.setUint16(34, value, true);
  }

  // 0x24: u16
  set FramePointer(value: number) {
    this.view.setUint16(36, value, true);
  }

  // 0x26: u16
  set _bitfield(value: number) {
    this.view.setUint16(38, value, true);
  }

  // 0x28: u64
  set KiCallUserMode(value: number | bigint) {
    this.view.setBigUint64(40, util.toBigInt(value), true);
  }

  // 0x30: u64
  set KeUserCallbackDispatcher(value: number | bigint) {
    this.view.setBigUint64(48, util.toBigInt(value), true);
  }

  // 0x38: u64
  set PsLoadedModuleList(value: number | bigint) {
    this.view.setBigUint64(56, util.toBigInt(value), true);
  }

  // 0x40: u64
  set PsActiveProcessHead(value: number | bigint) {
    this.view.setBigUint64(64, util.toBigInt(value), true);
  }

  // 0x48: u64
  set PspCidTable(value: number | bigint) {
    this.view.setBigUint64(72, util.toBigInt(value), true);
  }

  // 0x50: u64
  set ExpSystemResourcesList(value: number | bigint) {
    this.view.setBigUint64(80, util.toBigInt(value), true);
  }

  // 0x58: u64
  set ExpPagedPoolDescriptor(value: number | bigint) {
    this.view.setBigUint64(88, util.toBigInt(value), true);
  }

  // 0x60: u64
  set ExpNumberOfPagedPools(value: number | bigint) {
    this.view.setBigUint64(96, util.toBigInt(value), true);
  }

  // 0x68: u64
  set KeTimeIncrement(value: number | bigint) {
    this.view.setBigUint64(104, util.toBigInt(value), true);
  }

  // 0x70: u64
  set KeBugCheckCallbackListHead(value: number | bigint) {
    this.view.setBigUint64(112, util.toBigInt(value), true);
  }

  // 0x78: u64
  set KiBugcheckData(value: number | bigint) {
    this.view.setBigUint64(120, util.toBigInt(value), true);
  }

  // 0x80: u64
  set IopErrorLogListHead(value: number | bigint) {
    this.view.setBigUint64(128, util.toBigInt(value), true);
  }

  // 0x88: u64
  set ObpRootDirectoryObject(value: number | bigint) {
    this.view.setBigUint64(136, util.toBigInt(value), true);
  }

  // 0x90: u64
  set ObpTypeObjectType(value: number | bigint) {
    this.view.setBigUint64(144, util.toBigInt(value), true);
  }

  // 0x98: u64
  set MmSystemCacheStart(value: number | bigint) {
    this.view.setBigUint64(152, util.toBigInt(value), true);
  }

  // 0xa0: u64
  set MmSystemCacheEnd(value: number | bigint) {
    this.view.setBigUint64(160, util.toBigInt(value), true);
  }

  // 0xa8: u64
  set MmSystemCacheWs(value: number | bigint) {
    this.view.setBigUint64(168, util.toBigInt(value), true);
  }

  // 0xb0: u64
  set MmPfnDatabase(value: number | bigint) {
    this.view.setBigUint64(176, util.toBigInt(value), true);
  }

  // 0xb8: u64
  set MmSystemPtesStart(value: number | bigint) {
    this.view.setBigUint64(184, util.toBigInt(value), true);
  }

  // 0xc0: u64
  set MmSystemPtesEnd(value: number | bigint) {
    this.view.setBigUint64(192, util.toBigInt(value), true);
  }

  // 0xc8: u64
  set MmSubsectionBase(value: number | bigint) {
    this.view.setBigUint64(200, util.toBigInt(value), true);
  }

  // 0xd0: u64
  set MmNumberOfPagingFiles(value: number | bigint) {
    this.view.setBigUint64(208, util.toBigInt(value), true);
  }

  // 0xd8: u64
  set MmLowestPhysicalPage(value: number | bigint) {
    this.view.setBigUint64(216, util.toBigInt(value), true);
  }

  // 0xe0: u64
  set MmHighestPhysicalPage(value: number | bigint) {
    this.view.setBigUint64(224, util.toBigInt(value), true);
  }

  // 0xe8: u64
  set MmNumberOfPhysicalPages(value: number | bigint) {
    this.view.setBigUint64(232, util.toBigInt(value), true);
  }

  // 0xf0: u64
  set MmMaximumNonPagedPoolInBytes(value: number | bigint) {
    this.view.setBigUint64(240, util.toBigInt(value), true);
  }

  // 0xf8: u64
  set MmNonPagedSystemStart(value: number | bigint) {
    this.view.setBigUint64(248, util.toBigInt(value), true);
  }

  // 0x100: u64
  set MmNonPagedPoolStart(value: number | bigint) {
    this.view.setBigUint64(256, util.toBigInt(value), true);
  }

  // 0x108: u64
  set MmNonPagedPoolEnd(value: number | bigint) {
    this.view.setBigUint64(264, util.toBigInt(value), true);
  }

  // 0x110: u64
  set MmPagedPoolStart(value: number | bigint) {
    this.view.setBigUint64(272, util.toBigInt(value), true);
  }

  // 0x118: u64
  set MmPagedPoolEnd(value: number | bigint) {
    this.view.setBigUint64(280, util.toBigInt(value), true);
  }

  // 0x120: u64
  set MmPagedPoolInformation(value: number | bigint) {
    this.view.setBigUint64(288, util.toBigInt(value), true);
  }

  // 0x128: u64
  set MmPageSize(value: number | bigint) {
    this.view.setBigUint64(296, util.toBigInt(value), true);
  }

  // 0x130: u64
  set MmSizeOfPagedPoolInBytes(value: number | bigint) {
    this.view.setBigUint64(304, util.toBigInt(value), true);
  }

  // 0x138: u64
  set MmTotalCommitLimit(value: number | bigint) {
    this.view.setBigUint64(312, util.toBigInt(value), true);
  }

  // 0x140: u64
  set MmTotalCommittedPages(value: number | bigint) {
    this.view.setBigUint64(320, util.toBigInt(value), true);
  }

  // 0x148: u64
  set MmSharedCommit(value: number | bigint) {
    this.view.setBigUint64(328, util.toBigInt(value), true);
  }

  // 0x150: u64
  set MmDriverCommit(value: number | bigint) {
    this.view.setBigUint64(336, util.toBigInt(value), true);
  }

  // 0x158: u64
  set MmProcessCommit(value: number | bigint) {
    this.view.setBigUint64(344, util.toBigInt(value), true);
  }

  // 0x160: u64
  set MmPagedPoolCommit(value: number | bigint) {
    this.view.setBigUint64(352, util.toBigInt(value), true);
  }

  // 0x168: u64
  set MmExtendedCommit(value: number | bigint) {
    this.view.setBigUint64(360, util.toBigInt(value), true);
  }

  // 0x170: u64
  set MmZeroedPageListHead(value: number | bigint) {
    this.view.setBigUint64(368, util.toBigInt(value), true);
  }

  // 0x178: u64
  set MmFreePageListHead(value: number | bigint) {
    this.view.setBigUint64(376, util.toBigInt(value), true);
  }

  // 0x180: u64
  set MmStandbyPageListHead(value: number | bigint) {
    this.view.setBigUint64(384, util.toBigInt(value), true);
  }

  // 0x188: u64
  set MmModifiedPageListHead(value: number | bigint) {
    this.view.setBigUint64(392, util.toBigInt(value), true);
  }

  // 0x190: u64
  set MmModifiedNoWritePageListHead(value: number | bigint) {
    this.view.setBigUint64(400, util.toBigInt(value), true);
  }

  // 0x198: u64
  set MmAvailablePages(value: number | bigint) {
    this.view.setBigUint64(408, util.toBigInt(value), true);
  }

  // 0x1a0: u64
  set MmResidentAvailablePages(value: number | bigint) {
    this.view.setBigUint64(416, util.toBigInt(value), true);
  }

  // 0x1a8: u64
  set PoolTrackTable(value: number | bigint) {
    this.view.setBigUint64(424, util.toBigInt(value), true);
  }

  // 0x1b0: u64
  set NonPagedPoolDescriptor(value: number | bigint) {
    this.view.setBigUint64(432, util.toBigInt(value), true);
  }

  // 0x1b8: u64
  set MmHighestUserAddress(value: number | bigint) {
    this.view.setBigUint64(440, util.toBigInt(value), true);
  }

  // 0x1c0: u64
  set MmSystemRangeStart(value: number | bigint) {
    this.view.setBigUint64(448, util.toBigInt(value), true);
  }

  // 0x1c8: u64
  set MmUserProbeAddress(value: number | bigint) {
    this.view.setBigUint64(456, util.toBigInt(value), true);
  }

  // 0x1d0: u64
  set KdPrintCircularBuffer(value: number | bigint) {
    this.view.setBigUint64(464, util.toBigInt(value), true);
  }

  // 0x1d8: u64
  set KdPrintCircularBufferEnd(value: number | bigint) {
    this.view.setBigUint64(472, util.toBigInt(value), true);
  }

  // 0x1e0: u64
  set KdPrintWritePointer(value: number | bigint) {
    this.view.setBigUint64(480, util.toBigInt(value), true);
  }

  // 0x1e8: u64
  set KdPrintRolloverCount(value: number | bigint) {
    this.view.setBigUint64(488, util.toBigInt(value), true);
  }

  // 0x1f0: u64
  set MmLoadedUserImageList(value: number | bigint) {
    this.view.setBigUint64(496, util.toBigInt(value), true);
  }

  // 0x1f8: u64
  set NtBuildLab(value: number | bigint) {
    this.view.setBigUint64(504, util.toBigInt(value), true);
  }

  // 0x200: u64
  set KiNormalSystemCall(value: number | bigint) {
    this.view.setBigUint64(512, util.toBigInt(value), true);
  }

  // 0x208: u64
  set KiProcessorBlock(value: number | bigint) {
    this.view.setBigUint64(520, util.toBigInt(value), true);
  }

  // 0x210: u64
  set MmUnloadedDrivers(value: number | bigint) {
    this.view.setBigUint64(528, util.toBigInt(value), true);
  }

  // 0x218: u64
  set MmLastUnloadedDriver(value: number | bigint) {
    this.view.setBigUint64(536, util.toBigInt(value), true);
  }

  // 0x220: u64
  set MmTriageActionTaken(value: number | bigint) {
    this.view.setBigUint64(544, util.toBigInt(value), true);
  }

  // 0x228: u64
  set MmSpecialPoolTag(value: number | bigint) {
    this.view.setBigUint64(552, util.toBigInt(value), true);
  }

  // 0x230: u64
  set KernelVerifier(value: number | bigint) {
    this.view.setBigUint64(560, util.toBigInt(value), true);
  }

  // 0x238: u64
  set MmVerifierData(value: number | bigint) {
    this.view.setBigUint64(568, util.toBigInt(value), true);
  }

  // 0x240: u64
  set MmAllocatedNonPagedPool(value: number | bigint) {
    this.view.setBigUint64(576, util.toBigInt(value), true);
  }

  // 0x248: u64
  set MmPeakCommitment(value: number | bigint) {
    this.view.setBigUint64(584, util.toBigInt(value), true);
  }

  // 0x250: u64
  set MmTotalCommitLimitMaximum(value: number | bigint) {
    this.view.setBigUint64(592, util.toBigInt(value), true);
  }

  // 0x258: u64
  set CmNtCSDVersion(value: number | bigint) {
    this.view.setBigUint64(600, util.toBigInt(value), true);
  }

  // 0x260: u64
  set MmPhysicalMemoryBlock(value: number | bigint) {
    this.view.setBigUint64(608, util.toBigInt(value), true);
  }

  // 0x268: u64
  set MmSessionBase(value: number | bigint) {
    this.view.setBigUint64(616, util.toBigInt(value), true);
  }

  // 0x270: u64
  set MmSessionSize(value: number | bigint) {
    this.view.setBigUint64(624, util.toBigInt(value), true);
  }

  // 0x278: u64
  set MmSystemParentTablePage(value: number | bigint) {
    this.view.setBigUint64(632, util.toBigInt(value), true);
  }

  // 0x280: u64
  set MmVirtualTranslationBase(value: number | bigint) {
    this.view.setBigUint64(640, util.toBigInt(value), true);
  }

  // 0x288: u16
  set OffsetKThreadNextProcessor(value: number) {
    this.view.setUint16(648, value, true);
  }

  // 0x28a: u16
  set OffsetKThreadTeb(value: number) {
    this.view.setUint16(650, value, true);
  }

  // 0x28c: u16
  set OffsetKThreadKernelStack(value: number) {
    this.view.setUint16(652, value, true);
  }

  // 0x28e: u16
  set OffsetKThreadInitialStack(value: number) {
    this.view.setUint16(654, value, true);
  }

  // 0x290: u16
  set OffsetKThreadApcProcess(value: number) {
    this.view.setUint16(656, value, true);
  }

  // 0x292: u16
  set OffsetKThreadState(value: number) {
    this.view.setUint16(658, value, true);
  }

  // 0x294: u16
  set OffsetKThreadBStore(value: number) {
    this.view.setUint16(660, value, true);
  }

  // 0x296: u16
  set OffsetKThreadBStoreLimit(value: number) {
    this.view.setUint16(662, value, true);
  }

  // 0x298: u16
  set SizeEProcess(value: number) {
    this.view.setUint16(664, value, true);
  }

  // 0x29a: u16
  set OffsetEprocessPeb(value: number) {
    this.view.setUint16(666, value, true);
  }

  // 0x29c: u16
  set OffsetEprocessParentCID(value: number) {
    this.view.setUint16(668, value, true);
  }

  // 0x29e: u16
  set OffsetEprocessDirectoryTableBase(value: number) {
    this.view.setUint16(670, value, true);
  }

  // 0x2a0: u16
  set SizePrcb(value: number) {
    this.view.setUint16(672, value, true);
  }

  // 0x2a2: u16
  set OffsetPrcbDpcRoutine(value: number) {
    this.view.setUint16(674, value, true);
  }

  // 0x2a4: u16
  set OffsetPrcbCurrentThread(value: number) {
    this.view.setUint16(676, value, true);
  }

  // 0x2a6: u16
  set OffsetPrcbMhz(value: number) {
    this.view.setUint16(678, value, true);
  }

  // 0x2a8: u16
  set OffsetPrcbCpuType(value: number) {
    this.view.setUint16(680, value, true);
  }

  // 0x2aa: u16
  set OffsetPrcbVendorString(value: number) {
    this.view.setUint16(682, value, true);
  }

  // 0x2ac: u16
  set OffsetPrcbProcStateContext(value: number) {
    this.view.setUint16(684, value, true);
  }

  // 0x2ae: u16
  set OffsetPrcbNumber(value: number) {
    this.view.setUint16(686, value, true);
  }

  // 0x2b0: u16
  set SizeEThread(value: number) {
    this.view.setUint16(688, value, true);
  }

  // 0x2b2: u8
  set L1tfHighPhysicalBitIndex(value: number) {
    this.view.setUint8(690, value);
  }

  // 0x2b3: u8
  set L1tfSwizzleBitIndex(value: number) {
    this.view.setUint8(691, value);
  }

  // 0x2b4: u32
  set Padding0(value: number) {
    this.view.setUint32(692, value, true);
  }

  // 0x2b8: u64
  set KdPrintCircularBufferPtr(value: number | bigint) {
    this.view.setBigUint64(696, util.toBigInt(value), true);
  }

  // 0x2c0: u64
  set KdPrintBufferSize(value: number | bigint) {
    this.view.setBigUint64(704, util.toBigInt(value), true);
  }

  // 0x2c8: u64
  set KeLoaderBlock(value: number | bigint) {
    this.view.setBigUint64(712, util.toBigInt(value), true);
  }

  // 0x2d0: u16
  set SizePcr(value: number) {
    this.view.setUint16(720, value, true);
  }

  // 0x2d2: u16
  set OffsetPcrSelfPcr(value: number) {
    this.view.setUint16(722, value, true);
  }

  // 0x2d4: u16
  set OffsetPcrCurrentPrcb(value: number) {
    this.view.setUint16(724, value, true);
  }

  // 0x2d6: u16
  set OffsetPcrContainedPrcb(value: number) {
    this.view.setUint16(726, value, true);
  }

  // 0x2d8: u16
  set OffsetPcrInitialBStore(value: number) {
    this.view.setUint16(728, value, true);
  }

  // 0x2da: u16
  set OffsetPcrBStoreLimit(value: number) {
    this.view.setUint16(730, value, true);
  }

  // 0x2dc: u16
  set OffsetPcrInitialStack(value: number) {
    this.view.setUint16(732, value, true);
  }

  // 0x2de: u16
  set OffsetPcrStackLimit(value: number) {
    this.view.setUint16(734, value, true);
  }

  // 0x2e0: u16
  set OffsetPrcbPcrPage(value: number) {
    this.view.setUint16(736, value, true);
  }

  // 0x2e2: u16
  set OffsetPrcbProcStateSpecialReg(value: number) {
    this.view.setUint16(738, value, true);
  }

  // 0x2e4: u16
  set GdtR0Code(value: number) {
    this.view.setUint16(740, value, true);
  }

  // 0x2e6: u16
  set GdtR0Data(value: number) {
    this.view.setUint16(742, value, true);
  }

  // 0x2e8: u16
  set GdtR0Pcr(value: number) {
    this.view.setUint16(744, value, true);
  }

  // 0x2ea: u16
  set GdtR3Code(value: number) {
    this.view.setUint16(746, value, true);
  }

  // 0x2ec: u16
  set GdtR3Data(value: number) {
    this.view.setUint16(748, value, true);
  }

  // 0x2ee: u16
  set GdtR3Teb(value: number) {
    this.view.setUint16(750, value, true);
  }

  // 0x2f0: u16
  set GdtLdt(value: number) {
    this.view.setUint16(752, value, true);
  }

  // 0x2f2: u16
  set GdtTss(value: number) {
    this.view.setUint16(754, value, true);
  }

  // 0x2f4: u16
  set Gdt64R3CmCode(value: number) {
    this.view.setUint16(756, value, true);
  }

  // 0x2f6: u16
  set Gdt64R3CmTeb(value: number) {
    this.view.setUint16(758, value, true);
  }

  // 0x2f8: u64
  set IopNumTriageDumpDataBlocks(value: number | bigint) {
    this.view.setBigUint64(760, util.toBigInt(value), true);
  }

  // 0x300: u64
  set IopTriageDumpDataBlocks(value: number | bigint) {
    this.view.setBigUint64(768, util.toBigInt(value), true);
  }

  // 0x308: u64
  set VfCrashDataBlock(value: number | bigint) {
    this.view.setBigUint64(776, util.toBigInt(value), true);
  }

  // 0x310: u64
  set MmBadPagesDetected(value: number | bigint) {
    this.view.setBigUint64(784, util.toBigInt(value), true);
  }

  // 0x318: u64
  set MmZeroedPageSingleBitErrorsDetected(value: number | bigint) {
    this.view.setBigUint64(792, util.toBigInt(value), true);
  }

  // 0x320: u64
  set EtwpDebuggerData(value: number | bigint) {
    this.view.setBigUint64(800, util.toBigInt(value), true);
  }

  // 0x328: u16
  set OffsetPrcbContext(value: number) {
    this.view.setUint16(808, value, true);
  }

  // 0x32a: u16
  set OffsetPrcbMaxBreakpoints(value: number) {
    this.view.setUint16(810, value, true);
  }

  // 0x32c: u16
  set OffsetPrcbMaxWatchpoints(value: number) {
    this.view.setUint16(812, value, true);
  }

  // 0x32e: u32
  set OffsetKThreadStackLimit(value: number) {
    this.view.setUint32(814, value, true);
  }

  // 0x332: u32
  set OffsetKThreadStackBase(value: number) {
    this.view.setUint32(818, value, true);
  }

  // 0x336: u32
  set OffsetKThreadQueueListEntry(value: number) {
    this.view.setUint32(822, value, true);
  }

  // 0x33a: u32
  set OffsetEThreadIrpList(value: number) {
    this.view.setUint32(826, value, true);
  }

  // 0x33e: u16
  set OffsetPrcbIdleThread(value: number) {
    this.view.setUint16(830, value, true);
  }

  // 0x340: u16
  set OffsetPrcbNormalDpcState(value: number) {
    this.view.setUint16(832, value, true);
  }

  // 0x342: u16
  set OffsetPrcbDpcStack(value: number) {
    this.view.setUint16(834, value, true);
  }

  // 0x344: u16
  set OffsetPrcbIsrStack(value: number) {
    this.view.setUint16(836, value, true);
  }

  // 0x346: u16
  set SizeKDPC_STACK_FRAME(value: number) {
    this.view.setUint16(838, value, true);
  }

  // 0x348: u16
  set OffsetKPriQueueThreadListHead(value: number) {
    this.view.setUint16(840, value, true);
  }

  // 0x34a: u16
  set OffsetKThreadWaitReason(value: number) {
    this.view.setUint16(842, value, true);
  }

  // 0x34c: u16
  set Padding1(value: number) {
    this.view.setUint16(844, value, true);
  }

  // 0x34e: pad2

  // 0x350: u64
  set PteBase(value: number | bigint) {
    this.view.setBigUint64(848, util.toBigInt(value), true);
  }

  // 0x358: u64
  set RetpolineStubFunctionTable(value: number | bigint) {
    this.view.setBigUint64(856, util.toBigInt(value), true);
  }

  // 0x360: u32
  set RetpolineStubFunctionTableSize(value: number) {
    this.view.setUint32(864, value, true);
  }

  // 0x364: u32
  set RetpolineStubOffset(value: number) {
    this.view.setUint32(868, value, true);
  }

  // 0x368: u32
  set RetpolineStubSize(value: number) {
    this.view.setUint32(872, value, true);
  }

  // 0x36c: u16
  set OffsetEProcessMmHotPatchContext(value: number) {
    this.view.setUint16(876, value, true);
  }

  // 0x36e: pad2
}

/**
 * _BitField (size: 8)
 */
export interface _BitField {
  /** u16 */
  Position: number;
  /** u16 */
  Size: number;
}

export const sizeof_BitField = 8;

export function alloc_BitField(data?: Partial<_BitField>): Uint8Array {
  const buf = new Uint8Array(sizeof_BitField);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Position !== undefined) view.setUint16(0, Number(data.Position), true);
  // 0x02: u16
  if (data?.Size !== undefined) view.setUint16(2, Number(data.Size), true);
  // 0x04: pad4
  return buf;
}

export class _BitFieldView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Position(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Size(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u16
  set Position(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Size(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.FIELD_INFO (size: 72)
 */
export interface FIELD_INFO {
  /** ptr */
  fName: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  printName: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  size: number;
  /** u32 */
  fOptions: number;
  /** u64 */
  address: number | bigint;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  TypeId: number;
  /** u32 */
  FieldOffset: number;
  /** u32 */
  BufferSize: number;
  /** _BitField */
  BitField: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  _bitfield: number;
}

export const sizeofFIELD_INFO = 72;

export function allocFIELD_INFO(data?: Partial<FIELD_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofFIELD_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fName !== undefined) view.setBigUint64(0, data.fName === null ? 0n : util.toBigInt(util.toPointer(data.fName)), true);
  // 0x08: pointer
  if (data?.printName !== undefined) view.setBigUint64(8, data.printName === null ? 0n : util.toBigInt(util.toPointer(data.printName)), true);
  // 0x10: u32
  if (data?.size !== undefined) view.setUint32(16, Number(data.size), true);
  // 0x14: u32
  if (data?.fOptions !== undefined) view.setUint32(20, Number(data.fOptions), true);
  // 0x18: u64
  if (data?.address !== undefined) view.setBigUint64(24, util.toBigInt(data.address), true);
  // 0x20: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(32, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x28: u32
  if (data?.TypeId !== undefined) view.setUint32(40, Number(data.TypeId), true);
  // 0x2c: u32
  if (data?.FieldOffset !== undefined) view.setUint32(44, Number(data.FieldOffset), true);
  // 0x30: u32
  if (data?.BufferSize !== undefined) view.setUint32(48, Number(data.BufferSize), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.BitField !== undefined) view.setBigUint64(56, data.BitField === null ? 0n : util.toBigInt(util.toPointer(data.BitField)), true);
  // 0x40: u32
  if (data?._bitfield !== undefined) view.setUint32(64, Number(data._bitfield), true);
  // 0x44: pad4
  return buf;
}

export class FIELD_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get fName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get printName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get size(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get fOptions(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u64
  get address(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get TypeId(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get FieldOffset(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get BufferSize(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get BitField(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: u32
  get _bitfield(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x00: pointer
  set fName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set printName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set size(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set fOptions(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u64
  set address(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set TypeId(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set FieldOffset(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set BufferSize(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set BitField(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: u32
  set _bitfield(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.SYM_DUMP_PARAM (size: 96)
 */
export interface SYM_DUMP_PARAM {
  /** u32 */
  size: number;
  /** ptr */
  sName: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Options: number;
  /** u64 */
  addr: number | bigint;
  /** ptr */
  listLink: Deno.PointerValue | Uint8Array | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.PSYM_DUMP_FIELD_CALLBACK */
  CallbackRoutine: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  nFields: number;
  /** ptr */
  Fields: Deno.PointerValue | Uint8Array | null;
  /** u64 */
  ModBase: number | bigint;
  /** u32 */
  TypeId: number;
  /** u32 */
  TypeSize: number;
  /** u32 */
  BufferSize: number;
  /** u32 */
  _bitfield: number;
}

export const sizeofSYM_DUMP_PARAM = 96;

export function allocSYM_DUMP_PARAM(data?: Partial<SYM_DUMP_PARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofSYM_DUMP_PARAM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.size !== undefined) view.setUint32(0, Number(data.size), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.sName !== undefined) view.setBigUint64(8, data.sName === null ? 0n : util.toBigInt(util.toPointer(data.sName)), true);
  // 0x10: u32
  if (data?.Options !== undefined) view.setUint32(16, Number(data.Options), true);
  // 0x14: pad4
  // 0x18: u64
  if (data?.addr !== undefined) view.setBigUint64(24, util.toBigInt(data.addr), true);
  // 0x20: pointer
  if (data?.listLink !== undefined) view.setBigUint64(32, data.listLink === null ? 0n : util.toBigInt(util.toPointer(data.listLink)), true);
  // 0x28: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(40, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x30: pointer
  if (data?.CallbackRoutine !== undefined) view.setBigUint64(48, data.CallbackRoutine === null ? 0n : util.toBigInt(util.toPointer(data.CallbackRoutine)), true);
  // 0x38: u32
  if (data?.nFields !== undefined) view.setUint32(56, Number(data.nFields), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.Fields !== undefined) view.setBigUint64(64, data.Fields === null ? 0n : util.toBigInt(util.toPointer(data.Fields)), true);
  // 0x48: u64
  if (data?.ModBase !== undefined) view.setBigUint64(72, util.toBigInt(data.ModBase), true);
  // 0x50: u32
  if (data?.TypeId !== undefined) view.setUint32(80, Number(data.TypeId), true);
  // 0x54: u32
  if (data?.TypeSize !== undefined) view.setUint32(84, Number(data.TypeSize), true);
  // 0x58: u32
  if (data?.BufferSize !== undefined) view.setUint32(88, Number(data.BufferSize), true);
  // 0x5c: u32
  if (data?._bitfield !== undefined) view.setUint32(92, Number(data._bitfield), true);
  return buf;
}

export class SYM_DUMP_PARAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get sName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get Options(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: u64
  get addr(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: pointer
  get listLink(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get CallbackRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get nFields(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get Fields(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: u64
  get ModBase(): number | bigint {
    return this.view.getBigUint64(72, true);
  }

  // 0x50: u32
  get TypeId(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get TypeSize(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get BufferSize(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get _bitfield(): number {
    return this.view.getUint32(92, true);
  }

  // 0x00: u32
  set size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set sName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set Options(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: u64
  set addr(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: pointer
  set listLink(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set CallbackRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set nFields(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set Fields(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: u64
  set ModBase(value: number | bigint) {
    this.view.setBigUint64(72, util.toBigInt(value), true);
  }

  // 0x50: u32
  set TypeId(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set TypeSize(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set BufferSize(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set _bitfield(value: number) {
    this.view.setUint32(92, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.XSAVE_FORMAT (size: 56)
 */
export interface XSAVE_FORMAT {
  /** u16 */
  ControlWord: number;
  /** u16 */
  StatusWord: number;
  /** u8 */
  TagWord: number;
  /** u8 */
  Reserved1: number;
  /** u16 */
  ErrorOpcode: number;
  /** u32 */
  ErrorOffset: number;
  /** u16 */
  ErrorSelector: number;
  /** u16 */
  Reserved2: number;
  /** u32 */
  DataOffset: number;
  /** u16 */
  DataSelector: number;
  /** u16 */
  Reserved3: number;
  /** u32 */
  MxCsr: number;
  /** u32 */
  MxCsr_Mask: number;
  /** array */
  FloatRegisters: Deno.PointerValue | null;
  /** array */
  XmmRegisters: Deno.PointerValue | null;
  /** array */
  Reserved4: Deno.PointerValue | null;
}

export const sizeofXSAVE_FORMAT = 56;

export function allocXSAVE_FORMAT(data?: Partial<XSAVE_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofXSAVE_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ControlWord !== undefined) view.setUint16(0, Number(data.ControlWord), true);
  // 0x02: u16
  if (data?.StatusWord !== undefined) view.setUint16(2, Number(data.StatusWord), true);
  // 0x04: u8
  if (data?.TagWord !== undefined) view.setUint8(4, Number(data.TagWord));
  // 0x05: u8
  if (data?.Reserved1 !== undefined) view.setUint8(5, Number(data.Reserved1));
  // 0x06: u16
  if (data?.ErrorOpcode !== undefined) view.setUint16(6, Number(data.ErrorOpcode), true);
  // 0x08: u32
  if (data?.ErrorOffset !== undefined) view.setUint32(8, Number(data.ErrorOffset), true);
  // 0x0c: u16
  if (data?.ErrorSelector !== undefined) view.setUint16(12, Number(data.ErrorSelector), true);
  // 0x0e: u16
  if (data?.Reserved2 !== undefined) view.setUint16(14, Number(data.Reserved2), true);
  // 0x10: u32
  if (data?.DataOffset !== undefined) view.setUint32(16, Number(data.DataOffset), true);
  // 0x14: u16
  if (data?.DataSelector !== undefined) view.setUint16(20, Number(data.DataSelector), true);
  // 0x16: u16
  if (data?.Reserved3 !== undefined) view.setUint16(22, Number(data.Reserved3), true);
  // 0x18: u32
  if (data?.MxCsr !== undefined) view.setUint32(24, Number(data.MxCsr), true);
  // 0x1c: u32
  if (data?.MxCsr_Mask !== undefined) view.setUint32(28, Number(data.MxCsr_Mask), true);
  // 0x20: pointer
  if (data?.FloatRegisters !== undefined) view.setBigUint64(32, data.FloatRegisters === null ? 0n : util.toBigInt(util.toPointer(data.FloatRegisters)), true);
  // 0x28: pointer
  if (data?.XmmRegisters !== undefined) view.setBigUint64(40, data.XmmRegisters === null ? 0n : util.toBigInt(util.toPointer(data.XmmRegisters)), true);
  // 0x30: pointer
  if (data?.Reserved4 !== undefined) view.setBigUint64(48, data.Reserved4 === null ? 0n : util.toBigInt(util.toPointer(data.Reserved4)), true);
  return buf;
}

export class XSAVE_FORMATView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get ControlWord(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get StatusWord(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u8
  get TagWord(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get Reserved1(): number {
    return this.view.getUint8(5);
  }

  // 0x06: u16
  get ErrorOpcode(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u32
  get ErrorOffset(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u16
  get ErrorSelector(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get Reserved2(): number {
    return this.view.getUint16(14, true);
  }

  // 0x10: u32
  get DataOffset(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u16
  get DataSelector(): number {
    return this.view.getUint16(20, true);
  }

  // 0x16: u16
  get Reserved3(): number {
    return this.view.getUint16(22, true);
  }

  // 0x18: u32
  get MxCsr(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get MxCsr_Mask(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get FloatRegisters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get XmmRegisters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get Reserved4(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set ControlWord(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set StatusWord(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u8
  set TagWord(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set Reserved1(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: u16
  set ErrorOpcode(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u32
  set ErrorOffset(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u16
  set ErrorSelector(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set Reserved2(value: number) {
    this.view.setUint16(14, value, true);
  }

  // 0x10: u32
  set DataOffset(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u16
  set DataSelector(value: number) {
    this.view.setUint16(20, value, true);
  }

  // 0x16: u16
  set Reserved3(value: number) {
    this.view.setUint16(22, value, true);
  }

  // 0x18: u32
  set MxCsr(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set MxCsr_Mask(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set FloatRegisters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set XmmRegisters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set Reserved4(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.XSTATE_CONTEXT (size: 32)
 */
export interface XSTATE_CONTEXT {
  /** u64 */
  Mask: number | bigint;
  /** u32 */
  Length: number;
  /** u32 */
  Reserved1: number;
  /** ptr */
  Area: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Buffer: Deno.PointerValue | Uint8Array | null;
}

export const sizeofXSTATE_CONTEXT = 32;

export function allocXSTATE_CONTEXT(data?: Partial<XSTATE_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofXSTATE_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Mask !== undefined) view.setBigUint64(0, util.toBigInt(data.Mask), true);
  // 0x08: u32
  if (data?.Length !== undefined) view.setUint32(8, Number(data.Length), true);
  // 0x0c: u32
  if (data?.Reserved1 !== undefined) view.setUint32(12, Number(data.Reserved1), true);
  // 0x10: pointer
  if (data?.Area !== undefined) view.setBigUint64(16, data.Area === null ? 0n : util.toBigInt(util.toPointer(data.Area)), true);
  // 0x18: pointer
  if (data?.Buffer !== undefined) view.setBigUint64(24, data.Buffer === null ? 0n : util.toBigInt(util.toPointer(data.Buffer)), true);
  return buf;
}

export class XSTATE_CONTEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Mask(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u32
  get Length(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Reserved1(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get Area(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Buffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u64
  set Mask(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u32
  set Length(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Reserved1(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set Area(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Buffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * _Anonymous1_e__Union (size: 64)
 */
export interface _Anonymous1_e__Union {
  /** usize */
  Data0: number | bigint;
  /** Windows.Win32.Foundation.PWSTR */
  String: string | null | Uint8Array | Uint16Array;
  /** usize */
  u: number | bigint;
  /** ptr */
  psid: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pguid: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  LogonId_LowPart: number;
  /** ptr */
  pObjectTypes: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pIpAddress: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_Anonymous1_e__Union = 64;

export function alloc_Anonymous1_e__Union(data?: Partial<_Anonymous1_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous1_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data0 !== undefined) view.setBigUint64(0, util.toBigInt(data.Data0), true);
  // 0x08: buffer
  if (data?.String !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.String);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: usize
  if (data?.u !== undefined) view.setBigUint64(16, util.toBigInt(data.u), true);
  // 0x18: pointer
  if (data?.psid !== undefined) view.setBigUint64(24, data.psid === null ? 0n : util.toBigInt(util.toPointer(data.psid)), true);
  // 0x20: pointer
  if (data?.pguid !== undefined) view.setBigUint64(32, data.pguid === null ? 0n : util.toBigInt(util.toPointer(data.pguid)), true);
  // 0x28: u32
  if (data?.LogonId_LowPart !== undefined) view.setUint32(40, Number(data.LogonId_LowPart), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pObjectTypes !== undefined) view.setBigUint64(48, data.pObjectTypes === null ? 0n : util.toBigInt(util.toPointer(data.pObjectTypes)), true);
  // 0x38: pointer
  if (data?.pIpAddress !== undefined) view.setBigUint64(56, data.pIpAddress === null ? 0n : util.toBigInt(util.toPointer(data.pIpAddress)), true);
  return buf;
}

export class _Anonymous1_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get Data0(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: buffer
  get String(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: usize
  get u(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: pointer
  get psid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get pguid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get LogonId_LowPart(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get pObjectTypes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get pIpAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: usize
  set Data0(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: buffer
  set String(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: usize
  set u(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: pointer
  set psid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set pguid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set LogonId_LowPart(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set pObjectTypes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set pIpAddress(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * _Anonymous2_e__Union (size: 16)
 */
export interface _Anonymous2_e__Union {
  /** usize */
  Data1: number | bigint;
  /** i32 */
  LogonId_HighPart: number;
}

export const sizeof_Anonymous2_e__Union = 16;

export function alloc_Anonymous2_e__Union(data?: Partial<_Anonymous2_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous2_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data1 !== undefined) view.setBigUint64(0, util.toBigInt(data.Data1), true);
  // 0x08: i32
  if (data?.LogonId_HighPart !== undefined) view.setInt32(8, Number(data.LogonId_HighPart), true);
  // 0x0c: pad4
  return buf;
}

export class _Anonymous2_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get Data1(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: i32
  get LogonId_HighPart(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: usize
  set Data1(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: i32
  set LogonId_HighPart(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.KNONVOLATILE_CONTEXT_POINTERS (size: 16)
 */
export interface KNONVOLATILE_CONTEXT_POINTERS {
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKNONVOLATILE_CONTEXT_POINTERS = 16;

export function allocKNONVOLATILE_CONTEXT_POINTERS(data?: Partial<KNONVOLATILE_CONTEXT_POINTERS>): Uint8Array {
  const buf = new Uint8Array(sizeofKNONVOLATILE_CONTEXT_POINTERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(0, data.Anonymous1 === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous1)), true);
  // 0x08: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(8, data.Anonymous2 === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous2)), true);
  return buf;
}

export class KNONVOLATILE_CONTEXT_POINTERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.UNWIND_HISTORY_TABLE (size: 32)
 */
export interface UNWIND_HISTORY_TABLE {
  /** u32 */
  Count: number;
  /** u8 */
  LocalHint: number;
  /** u8 */
  GlobalHint: number;
  /** u8 */
  Search: number;
  /** u8 */
  Once: number;
  /** usize */
  LowAddress: number | bigint;
  /** usize */
  HighAddress: number | bigint;
  /** array */
  Entry: Deno.PointerValue | null;
}

export const sizeofUNWIND_HISTORY_TABLE = 32;

export function allocUNWIND_HISTORY_TABLE(data?: Partial<UNWIND_HISTORY_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofUNWIND_HISTORY_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Count !== undefined) view.setUint32(0, Number(data.Count), true);
  // 0x04: u8
  if (data?.LocalHint !== undefined) view.setUint8(4, Number(data.LocalHint));
  // 0x05: u8
  if (data?.GlobalHint !== undefined) view.setUint8(5, Number(data.GlobalHint));
  // 0x06: u8
  if (data?.Search !== undefined) view.setUint8(6, Number(data.Search));
  // 0x07: u8
  if (data?.Once !== undefined) view.setUint8(7, Number(data.Once));
  // 0x08: usize
  if (data?.LowAddress !== undefined) view.setBigUint64(8, util.toBigInt(data.LowAddress), true);
  // 0x10: usize
  if (data?.HighAddress !== undefined) view.setBigUint64(16, util.toBigInt(data.HighAddress), true);
  // 0x18: pointer
  if (data?.Entry !== undefined) view.setBigUint64(24, data.Entry === null ? 0n : util.toBigInt(util.toPointer(data.Entry)), true);
  return buf;
}

export class UNWIND_HISTORY_TABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Count(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u8
  get LocalHint(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get GlobalHint(): number {
    return this.view.getUint8(5);
  }

  // 0x06: u8
  get Search(): number {
    return this.view.getUint8(6);
  }

  // 0x07: u8
  get Once(): number {
    return this.view.getUint8(7);
  }

  // 0x08: usize
  get LowAddress(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: usize
  get HighAddress(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: pointer
  get Entry(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Count(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u8
  set LocalHint(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set GlobalHint(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: u8
  set Search(value: number) {
    this.view.setUint8(6, value);
  }

  // 0x07: u8
  set Once(value: number) {
    this.view.setUint8(7, value);
  }

  // 0x08: usize
  set LowAddress(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: usize
  set HighAddress(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: pointer
  set Entry(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Kernel.LIST_ENTRY (size: 16)
 */
export interface LIST_ENTRY {
  /** ptr */
  Flink: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Blink: Deno.PointerValue | Uint8Array | null;
}

export const sizeofLIST_ENTRY = 16;

export function allocLIST_ENTRY(data?: Partial<LIST_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofLIST_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Flink !== undefined) view.setBigUint64(0, data.Flink === null ? 0n : util.toBigInt(util.toPointer(data.Flink)), true);
  // 0x08: pointer
  if (data?.Blink !== undefined) view.setBigUint64(8, data.Blink === null ? 0n : util.toBigInt(util.toPointer(data.Blink)), true);
  return buf;
}

export class LIST_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Flink(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Blink(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Flink(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Blink(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.LOADED_IMAGE (size: 112)
 */
export interface LOADED_IMAGE {
  /** Windows.Win32.Foundation.PSTR */
  ModuleName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  MappedAddress: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  FileHeader: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  LastRvaSection: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumberOfSections: number;
  /** ptr */
  Sections: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Diagnostics.Debug.IMAGE_FILE_CHARACTERISTICS2 */
  Characteristics: IMAGE_FILE_CHARACTERISTICS2;
  /** Windows.Win32.Foundation.BOOLEAN */
  fSystemImage: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  fDOSImage: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  fReadOnly: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  Version: number;
  /** Windows.Win32.System.Kernel.LIST_ENTRY */
  Links: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SizeOfImage: number;
}

export const sizeofLOADED_IMAGE = 112;

export function allocLOADED_IMAGE(data?: Partial<LOADED_IMAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofLOADED_IMAGE);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.ModuleName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.ModuleName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.hFile !== undefined) view.setBigUint64(8, data.hFile === null ? 0n : util.toBigInt(util.toPointer(data.hFile)), true);
  // 0x10: pointer
  if (data?.MappedAddress !== undefined) view.setBigUint64(16, data.MappedAddress === null ? 0n : util.toBigInt(util.toPointer(data.MappedAddress)), true);
  // 0x18: pointer
  if (data?.FileHeader !== undefined) view.setBigUint64(24, data.FileHeader === null ? 0n : util.toBigInt(util.toPointer(data.FileHeader)), true);
  // 0x20: pointer
  if (data?.LastRvaSection !== undefined) view.setBigUint64(32, data.LastRvaSection === null ? 0n : util.toBigInt(util.toPointer(data.LastRvaSection)), true);
  // 0x28: u32
  if (data?.NumberOfSections !== undefined) view.setUint32(40, Number(data.NumberOfSections), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.Sections !== undefined) view.setBigUint64(48, data.Sections === null ? 0n : util.toBigInt(util.toPointer(data.Sections)), true);
  // 0x38: u32
  if (data?.Characteristics !== undefined) view.setUint32(56, Number(data.Characteristics), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.fSystemImage !== undefined) view.setBigUint64(64, data.fSystemImage === null ? 0n : util.toBigInt(util.toPointer(data.fSystemImage)), true);
  // 0x48: pointer
  if (data?.fDOSImage !== undefined) view.setBigUint64(72, data.fDOSImage === null ? 0n : util.toBigInt(util.toPointer(data.fDOSImage)), true);
  // 0x50: pointer
  if (data?.fReadOnly !== undefined) view.setBigUint64(80, data.fReadOnly === null ? 0n : util.toBigInt(util.toPointer(data.fReadOnly)), true);
  // 0x58: u8
  if (data?.Version !== undefined) view.setUint8(88, Number(data.Version));
  // 0x59: pad7
  // 0x60: pointer
  if (data?.Links !== undefined) view.setBigUint64(96, data.Links === null ? 0n : util.toBigInt(util.toPointer(data.Links)), true);
  // 0x68: u32
  if (data?.SizeOfImage !== undefined) view.setUint32(104, Number(data.SizeOfImage), true);
  // 0x6c: pad4
  return buf;
}

export class LOADED_IMAGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get ModuleName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get hFile(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get MappedAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get FileHeader(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get LastRvaSection(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get NumberOfSections(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get Sections(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get Characteristics(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get fSystemImage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get fDOSImage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get fReadOnly(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: u8
  get Version(): number {
    return this.view.getUint8(88);
  }

  // 0x59: pad7

  // 0x60: pointer
  get Links(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: u32
  get SizeOfImage(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: pad4

  // 0x00: buffer
  set ModuleName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: pointer
  set hFile(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set MappedAddress(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set FileHeader(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set LastRvaSection(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set NumberOfSections(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set Sections(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set Characteristics(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set fSystemImage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set fDOSImage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set fReadOnly(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x58: u8
  set Version(value: number) {
    this.view.setUint8(88, value);
  }

  // 0x59: pad7

  // 0x60: pointer
  set Links(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x68: u32
  set SizeOfImage(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.M128A (size: 16)
 */
export interface M128A {
  /** u64 */
  Low: number | bigint;
  /** i64 */
  High: number | bigint;
}

export const sizeofM128A = 16;

export function allocM128A(data?: Partial<M128A>): Uint8Array {
  const buf = new Uint8Array(sizeofM128A);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Low !== undefined) view.setBigUint64(0, util.toBigInt(data.Low), true);
  // 0x08: i64
  if (data?.High !== undefined) view.setBigInt64(8, util.toBigInt(data.High), true);
  return buf;
}

export class M128AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Low(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: i64
  get High(): number | bigint {
    return this.view.getBigInt64(8, true);
  }

  // 0x00: u64
  set Low(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: i64
  set High(value: number | bigint) {
    this.view.setBigInt64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.XSAVE_AREA_HEADER (size: 24)
 */
export interface XSAVE_AREA_HEADER {
  /** u64 */
  Mask: number | bigint;
  /** u64 */
  CompactionMask: number | bigint;
  /** array */
  Reserved2: Deno.PointerValue | null;
}

export const sizeofXSAVE_AREA_HEADER = 24;

export function allocXSAVE_AREA_HEADER(data?: Partial<XSAVE_AREA_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofXSAVE_AREA_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Mask !== undefined) view.setBigUint64(0, util.toBigInt(data.Mask), true);
  // 0x08: u64
  if (data?.CompactionMask !== undefined) view.setBigUint64(8, util.toBigInt(data.CompactionMask), true);
  // 0x10: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(16, data.Reserved2 === null ? 0n : util.toBigInt(util.toPointer(data.Reserved2)), true);
  return buf;
}

export class XSAVE_AREA_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Mask(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get CompactionMask(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: pointer
  get Reserved2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u64
  set Mask(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set CompactionMask(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: pointer
  set Reserved2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.XSAVE_AREA (size: 16)
 */
export interface XSAVE_AREA {
  /** Windows.Win32.System.Diagnostics.Debug.XSAVE_FORMAT */
  LegacyState: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.XSAVE_AREA_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
}

export const sizeofXSAVE_AREA = 16;

export function allocXSAVE_AREA(data?: Partial<XSAVE_AREA>): Uint8Array {
  const buf = new Uint8Array(sizeofXSAVE_AREA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LegacyState !== undefined) view.setBigUint64(0, data.LegacyState === null ? 0n : util.toBigInt(util.toPointer(data.LegacyState)), true);
  // 0x08: pointer
  if (data?.Header !== undefined) view.setBigUint64(8, data.Header === null ? 0n : util.toBigInt(util.toPointer(data.Header)), true);
  return buf;
}

export class XSAVE_AREAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get LegacyState(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set LegacyState(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.ARM64_NT_NEON128 (size: 40)
 */
export interface ARM64_NT_NEON128 {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  D: Deno.PointerValue | null;
  /** array */
  S: Deno.PointerValue | null;
  /** array */
  H: Deno.PointerValue | null;
  /** array */
  B: Deno.PointerValue | null;
}

export const sizeofARM64_NT_NEON128 = 40;

export function allocARM64_NT_NEON128(data?: Partial<ARM64_NT_NEON128>): Uint8Array {
  const buf = new Uint8Array(sizeofARM64_NT_NEON128);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.D !== undefined) view.setBigUint64(8, data.D === null ? 0n : util.toBigInt(util.toPointer(data.D)), true);
  // 0x10: pointer
  if (data?.S !== undefined) view.setBigUint64(16, data.S === null ? 0n : util.toBigInt(util.toPointer(data.S)), true);
  // 0x18: pointer
  if (data?.H !== undefined) view.setBigUint64(24, data.H === null ? 0n : util.toBigInt(util.toPointer(data.H)), true);
  // 0x20: pointer
  if (data?.B !== undefined) view.setBigUint64(32, data.B === null ? 0n : util.toBigInt(util.toPointer(data.B)), true);
  return buf;
}

export class ARM64_NT_NEON128View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get D(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get S(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get H(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get B(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set D(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set S(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set H(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set B(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.ARM64_NT_CONTEXT (size: 80)
 */
export interface ARM64_NT_CONTEXT {
  /** u32 */
  ContextFlags: number;
  /** u32 */
  Cpsr: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  Sp: number | bigint;
  /** u64 */
  Pc: number | bigint;
  /** array */
  V: Deno.PointerValue | null;
  /** u32 */
  Fpcr: number;
  /** u32 */
  Fpsr: number;
  /** array */
  Bcr: Deno.PointerValue | null;
  /** array */
  Bvr: Deno.PointerValue | null;
  /** array */
  Wcr: Deno.PointerValue | null;
  /** array */
  Wvr: Deno.PointerValue | null;
}

export const sizeofARM64_NT_CONTEXT = 80;

export function allocARM64_NT_CONTEXT(data?: Partial<ARM64_NT_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofARM64_NT_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ContextFlags !== undefined) view.setUint32(0, Number(data.ContextFlags), true);
  // 0x04: u32
  if (data?.Cpsr !== undefined) view.setUint32(4, Number(data.Cpsr), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: u64
  if (data?.Sp !== undefined) view.setBigUint64(16, util.toBigInt(data.Sp), true);
  // 0x18: u64
  if (data?.Pc !== undefined) view.setBigUint64(24, util.toBigInt(data.Pc), true);
  // 0x20: pointer
  if (data?.V !== undefined) view.setBigUint64(32, data.V === null ? 0n : util.toBigInt(util.toPointer(data.V)), true);
  // 0x28: u32
  if (data?.Fpcr !== undefined) view.setUint32(40, Number(data.Fpcr), true);
  // 0x2c: u32
  if (data?.Fpsr !== undefined) view.setUint32(44, Number(data.Fpsr), true);
  // 0x30: pointer
  if (data?.Bcr !== undefined) view.setBigUint64(48, data.Bcr === null ? 0n : util.toBigInt(util.toPointer(data.Bcr)), true);
  // 0x38: pointer
  if (data?.Bvr !== undefined) view.setBigUint64(56, data.Bvr === null ? 0n : util.toBigInt(util.toPointer(data.Bvr)), true);
  // 0x40: pointer
  if (data?.Wcr !== undefined) view.setBigUint64(64, data.Wcr === null ? 0n : util.toBigInt(util.toPointer(data.Wcr)), true);
  // 0x48: pointer
  if (data?.Wvr !== undefined) view.setBigUint64(72, data.Wvr === null ? 0n : util.toBigInt(util.toPointer(data.Wvr)), true);
  return buf;
}

export class ARM64_NT_CONTEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ContextFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Cpsr(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u64
  get Sp(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get Pc(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: pointer
  get V(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get Fpcr(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get Fpsr(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: pointer
  get Bcr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get Bvr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get Wcr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get Wvr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ContextFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Cpsr(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u64
  set Sp(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set Pc(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: pointer
  set V(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set Fpcr(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set Fpsr(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: pointer
  set Bcr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set Bvr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set Wcr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set Wvr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * _Bytes_e__Struct (size: 8)
 */
export interface _Bytes_e__Struct {
  /** u8 */
  BaseMid: number;
  /** u8 */
  Flags1: number;
  /** u8 */
  Flags2: number;
  /** u8 */
  BaseHi: number;
}

export const sizeof_Bytes_e__Struct = 8;

export function alloc_Bytes_e__Struct(data?: Partial<_Bytes_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Bytes_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.BaseMid !== undefined) view.setUint8(0, Number(data.BaseMid));
  // 0x01: u8
  if (data?.Flags1 !== undefined) view.setUint8(1, Number(data.Flags1));
  // 0x02: u8
  if (data?.Flags2 !== undefined) view.setUint8(2, Number(data.Flags2));
  // 0x03: u8
  if (data?.BaseHi !== undefined) view.setUint8(3, Number(data.BaseHi));
  // 0x04: pad4
  return buf;
}

export class _Bytes_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get BaseMid(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Flags1(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get Flags2(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get BaseHi(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x00: u8
  set BaseMid(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Flags1(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set Flags2(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set BaseHi(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4
}

/**
 * _Bits_e__Struct (size: 8)
 */
export interface _Bits_e__Struct {
  /** u32 */
  _bitfield: number;
}

export const sizeof_Bits_e__Struct = 8;

export function alloc_Bits_e__Struct(data?: Partial<_Bits_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Bits_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?._bitfield !== undefined) view.setUint32(0, Number(data._bitfield), true);
  // 0x04: pad4
  return buf;
}

export class _Bits_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get _bitfield(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set _bitfield(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * _HighWord_e__Union (size: 16)
 */
export interface _HighWord_e__Union {
  /** _Bytes_e__Struct */
  Bytes: Uint8Array | Deno.PointerValue | null;
  /** _Bits_e__Struct */
  Bits: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_HighWord_e__Union = 16;

export function alloc_HighWord_e__Union(data?: Partial<_HighWord_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_HighWord_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Bytes !== undefined) view.setBigUint64(0, data.Bytes === null ? 0n : util.toBigInt(util.toPointer(data.Bytes)), true);
  // 0x08: pointer
  if (data?.Bits !== undefined) view.setBigUint64(8, data.Bits === null ? 0n : util.toBigInt(util.toPointer(data.Bits)), true);
  return buf;
}

export class _HighWord_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Bytes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Bits(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Bytes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Bits(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.LDT_ENTRY (size: 16)
 */
export interface LDT_ENTRY {
  /** u16 */
  LimitLow: number;
  /** u16 */
  BaseLow: number;
  /** _HighWord_e__Union */
  HighWord: Uint8Array | Deno.PointerValue | null;
}

export const sizeofLDT_ENTRY = 16;

export function allocLDT_ENTRY(data?: Partial<LDT_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofLDT_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.LimitLow !== undefined) view.setUint16(0, Number(data.LimitLow), true);
  // 0x02: u16
  if (data?.BaseLow !== undefined) view.setUint16(2, Number(data.BaseLow), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.HighWord !== undefined) view.setBigUint64(8, data.HighWord === null ? 0n : util.toBigInt(util.toPointer(data.HighWord)), true);
  return buf;
}

export class LDT_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get LimitLow(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get BaseLow(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get HighWord(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set LimitLow(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set BaseLow(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set HighWord(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.WOW64_FLOATING_SAVE_AREA (size: 48)
 */
export interface WOW64_FLOATING_SAVE_AREA {
  /** u32 */
  ControlWord: number;
  /** u32 */
  StatusWord: number;
  /** u32 */
  TagWord: number;
  /** u32 */
  ErrorOffset: number;
  /** u32 */
  ErrorSelector: number;
  /** u32 */
  DataOffset: number;
  /** u32 */
  DataSelector: number;
  /** array */
  RegisterArea: Deno.PointerValue | null;
  /** u32 */
  Cr0NpxState: number;
}

export const sizeofWOW64_FLOATING_SAVE_AREA = 48;

export function allocWOW64_FLOATING_SAVE_AREA(data?: Partial<WOW64_FLOATING_SAVE_AREA>): Uint8Array {
  const buf = new Uint8Array(sizeofWOW64_FLOATING_SAVE_AREA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ControlWord !== undefined) view.setUint32(0, Number(data.ControlWord), true);
  // 0x04: u32
  if (data?.StatusWord !== undefined) view.setUint32(4, Number(data.StatusWord), true);
  // 0x08: u32
  if (data?.TagWord !== undefined) view.setUint32(8, Number(data.TagWord), true);
  // 0x0c: u32
  if (data?.ErrorOffset !== undefined) view.setUint32(12, Number(data.ErrorOffset), true);
  // 0x10: u32
  if (data?.ErrorSelector !== undefined) view.setUint32(16, Number(data.ErrorSelector), true);
  // 0x14: u32
  if (data?.DataOffset !== undefined) view.setUint32(20, Number(data.DataOffset), true);
  // 0x18: u32
  if (data?.DataSelector !== undefined) view.setUint32(24, Number(data.DataSelector), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.RegisterArea !== undefined) view.setBigUint64(32, data.RegisterArea === null ? 0n : util.toBigInt(util.toPointer(data.RegisterArea)), true);
  // 0x28: u32
  if (data?.Cr0NpxState !== undefined) view.setUint32(40, Number(data.Cr0NpxState), true);
  // 0x2c: pad4
  return buf;
}

export class WOW64_FLOATING_SAVE_AREAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ControlWord(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get StatusWord(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get TagWord(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ErrorOffset(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ErrorSelector(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get DataOffset(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get DataSelector(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get RegisterArea(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get Cr0NpxState(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: u32
  set ControlWord(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set StatusWord(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set TagWord(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ErrorOffset(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ErrorSelector(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set DataOffset(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set DataSelector(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set RegisterArea(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set Cr0NpxState(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.WOW64_CONTEXT (size: 112)
 */
export interface WOW64_CONTEXT {
  /** u32 */
  ContextFlags: number;
  /** u32 */
  Dr0: number;
  /** u32 */
  Dr1: number;
  /** u32 */
  Dr2: number;
  /** u32 */
  Dr3: number;
  /** u32 */
  Dr6: number;
  /** u32 */
  Dr7: number;
  /** Windows.Win32.System.Diagnostics.Debug.WOW64_FLOATING_SAVE_AREA */
  FloatSave: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SegGs: number;
  /** u32 */
  SegFs: number;
  /** u32 */
  SegEs: number;
  /** u32 */
  SegDs: number;
  /** u32 */
  Edi: number;
  /** u32 */
  Esi: number;
  /** u32 */
  Ebx: number;
  /** u32 */
  Edx: number;
  /** u32 */
  Ecx: number;
  /** u32 */
  Eax: number;
  /** u32 */
  Ebp: number;
  /** u32 */
  Eip: number;
  /** u32 */
  SegCs: number;
  /** u32 */
  EFlags: number;
  /** u32 */
  Esp: number;
  /** u32 */
  SegSs: number;
  /** array */
  ExtendedRegisters: Deno.PointerValue | null;
}

export const sizeofWOW64_CONTEXT = 112;

export function allocWOW64_CONTEXT(data?: Partial<WOW64_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWOW64_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ContextFlags !== undefined) view.setUint32(0, Number(data.ContextFlags), true);
  // 0x04: u32
  if (data?.Dr0 !== undefined) view.setUint32(4, Number(data.Dr0), true);
  // 0x08: u32
  if (data?.Dr1 !== undefined) view.setUint32(8, Number(data.Dr1), true);
  // 0x0c: u32
  if (data?.Dr2 !== undefined) view.setUint32(12, Number(data.Dr2), true);
  // 0x10: u32
  if (data?.Dr3 !== undefined) view.setUint32(16, Number(data.Dr3), true);
  // 0x14: u32
  if (data?.Dr6 !== undefined) view.setUint32(20, Number(data.Dr6), true);
  // 0x18: u32
  if (data?.Dr7 !== undefined) view.setUint32(24, Number(data.Dr7), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.FloatSave !== undefined) view.setBigUint64(32, data.FloatSave === null ? 0n : util.toBigInt(util.toPointer(data.FloatSave)), true);
  // 0x28: u32
  if (data?.SegGs !== undefined) view.setUint32(40, Number(data.SegGs), true);
  // 0x2c: u32
  if (data?.SegFs !== undefined) view.setUint32(44, Number(data.SegFs), true);
  // 0x30: u32
  if (data?.SegEs !== undefined) view.setUint32(48, Number(data.SegEs), true);
  // 0x34: u32
  if (data?.SegDs !== undefined) view.setUint32(52, Number(data.SegDs), true);
  // 0x38: u32
  if (data?.Edi !== undefined) view.setUint32(56, Number(data.Edi), true);
  // 0x3c: u32
  if (data?.Esi !== undefined) view.setUint32(60, Number(data.Esi), true);
  // 0x40: u32
  if (data?.Ebx !== undefined) view.setUint32(64, Number(data.Ebx), true);
  // 0x44: u32
  if (data?.Edx !== undefined) view.setUint32(68, Number(data.Edx), true);
  // 0x48: u32
  if (data?.Ecx !== undefined) view.setUint32(72, Number(data.Ecx), true);
  // 0x4c: u32
  if (data?.Eax !== undefined) view.setUint32(76, Number(data.Eax), true);
  // 0x50: u32
  if (data?.Ebp !== undefined) view.setUint32(80, Number(data.Ebp), true);
  // 0x54: u32
  if (data?.Eip !== undefined) view.setUint32(84, Number(data.Eip), true);
  // 0x58: u32
  if (data?.SegCs !== undefined) view.setUint32(88, Number(data.SegCs), true);
  // 0x5c: u32
  if (data?.EFlags !== undefined) view.setUint32(92, Number(data.EFlags), true);
  // 0x60: u32
  if (data?.Esp !== undefined) view.setUint32(96, Number(data.Esp), true);
  // 0x64: u32
  if (data?.SegSs !== undefined) view.setUint32(100, Number(data.SegSs), true);
  // 0x68: pointer
  if (data?.ExtendedRegisters !== undefined) view.setBigUint64(104, data.ExtendedRegisters === null ? 0n : util.toBigInt(util.toPointer(data.ExtendedRegisters)), true);
  return buf;
}

export class WOW64_CONTEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ContextFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Dr0(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Dr1(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Dr2(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Dr3(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Dr6(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get Dr7(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get FloatSave(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get SegGs(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get SegFs(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get SegEs(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get SegDs(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get Edi(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get Esi(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get Ebx(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get Edx(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get Ecx(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get Eax(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get Ebp(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get Eip(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get SegCs(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get EFlags(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: u32
  get Esp(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u32
  get SegSs(): number {
    return this.view.getUint32(100, true);
  }

  // 0x68: pointer
  get ExtendedRegisters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ContextFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Dr0(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Dr1(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Dr2(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Dr3(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Dr6(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set Dr7(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set FloatSave(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set SegGs(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set SegFs(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set SegEs(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set SegDs(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set Edi(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set Esi(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set Ebx(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set Edx(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set Ecx(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set Eax(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set Ebp(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set Eip(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set SegCs(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set EFlags(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: u32
  set Esp(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u32
  set SegSs(value: number) {
    this.view.setUint32(100, value, true);
  }

  // 0x68: pointer
  set ExtendedRegisters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.WOW64_LDT_ENTRY (size: 16)
 */
export interface WOW64_LDT_ENTRY {
  /** u16 */
  LimitLow: number;
  /** u16 */
  BaseLow: number;
  /** _HighWord_e__Union */
  HighWord: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWOW64_LDT_ENTRY = 16;

export function allocWOW64_LDT_ENTRY(data?: Partial<WOW64_LDT_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofWOW64_LDT_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.LimitLow !== undefined) view.setUint16(0, Number(data.LimitLow), true);
  // 0x02: u16
  if (data?.BaseLow !== undefined) view.setUint16(2, Number(data.BaseLow), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.HighWord !== undefined) view.setBigUint64(8, data.HighWord === null ? 0n : util.toBigInt(util.toPointer(data.HighWord)), true);
  return buf;
}

export class WOW64_LDT_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get LimitLow(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get BaseLow(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get HighWord(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set LimitLow(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set BaseLow(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set HighWord(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.WOW64_DESCRIPTOR_TABLE_ENTRY (size: 16)
 */
export interface WOW64_DESCRIPTOR_TABLE_ENTRY {
  /** u32 */
  Selector: number;
  /** Windows.Win32.System.Diagnostics.Debug.WOW64_LDT_ENTRY */
  Descriptor: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWOW64_DESCRIPTOR_TABLE_ENTRY = 16;

export function allocWOW64_DESCRIPTOR_TABLE_ENTRY(data?: Partial<WOW64_DESCRIPTOR_TABLE_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofWOW64_DESCRIPTOR_TABLE_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Selector !== undefined) view.setUint32(0, Number(data.Selector), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Descriptor !== undefined) view.setBigUint64(8, data.Descriptor === null ? 0n : util.toBigInt(util.toPointer(data.Descriptor)), true);
  return buf;
}

export class WOW64_DESCRIPTOR_TABLE_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Selector(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Descriptor(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Selector(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Descriptor(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD32 (size: 32)
 */
export interface EXCEPTION_RECORD32 {
  /** Windows.Win32.Foundation.NTSTATUS */
  ExceptionCode: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ExceptionFlags: number;
  /** u32 */
  ExceptionRecord: number;
  /** u32 */
  ExceptionAddress: number;
  /** u32 */
  NumberParameters: number;
  /** array */
  ExceptionInformation: Deno.PointerValue | null;
}

export const sizeofEXCEPTION_RECORD32 = 32;

export function allocEXCEPTION_RECORD32(data?: Partial<EXCEPTION_RECORD32>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_RECORD32);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionCode !== undefined) view.setBigUint64(0, data.ExceptionCode === null ? 0n : util.toBigInt(util.toPointer(data.ExceptionCode)), true);
  // 0x08: u32
  if (data?.ExceptionFlags !== undefined) view.setUint32(8, Number(data.ExceptionFlags), true);
  // 0x0c: u32
  if (data?.ExceptionRecord !== undefined) view.setUint32(12, Number(data.ExceptionRecord), true);
  // 0x10: u32
  if (data?.ExceptionAddress !== undefined) view.setUint32(16, Number(data.ExceptionAddress), true);
  // 0x14: u32
  if (data?.NumberParameters !== undefined) view.setUint32(20, Number(data.NumberParameters), true);
  // 0x18: pointer
  if (data?.ExceptionInformation !== undefined) view.setBigUint64(24, data.ExceptionInformation === null ? 0n : util.toBigInt(util.toPointer(data.ExceptionInformation)), true);
  return buf;
}

export class EXCEPTION_RECORD32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ExceptionCode(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ExceptionFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ExceptionRecord(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ExceptionAddress(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get NumberParameters(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get ExceptionInformation(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ExceptionCode(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ExceptionFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ExceptionRecord(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ExceptionAddress(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set NumberParameters(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set ExceptionInformation(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_POINTERS (size: 16)
 */
export interface EXCEPTION_POINTERS {
  /** ptr */
  ExceptionRecord: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ContextRecord: Deno.PointerValue | Uint8Array | null;
}

export const sizeofEXCEPTION_POINTERS = 16;

export function allocEXCEPTION_POINTERS(data?: Partial<EXCEPTION_POINTERS>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_POINTERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(0, data.ExceptionRecord === null ? 0n : util.toBigInt(util.toPointer(data.ExceptionRecord)), true);
  // 0x08: pointer
  if (data?.ContextRecord !== undefined) view.setBigUint64(8, data.ContextRecord === null ? 0n : util.toBigInt(util.toPointer(data.ContextRecord)), true);
  return buf;
}

export class EXCEPTION_POINTERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ExceptionRecord(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get ContextRecord(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ExceptionRecord(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set ContextRecord(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.XSTATE_FEATURE (size: 8)
 */
export interface XSTATE_FEATURE {
  /** u32 */
  Offset: number;
  /** u32 */
  Size: number;
}

export const sizeofXSTATE_FEATURE = 8;

export function allocXSTATE_FEATURE(data?: Partial<XSTATE_FEATURE>): Uint8Array {
  const buf = new Uint8Array(sizeofXSTATE_FEATURE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Offset !== undefined) view.setUint32(0, Number(data.Offset), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  return buf;
}

export class XSTATE_FEATUREView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Offset(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set Offset(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.XSTATE_CONFIGURATION (size: 96)
 */
export interface XSTATE_CONFIGURATION {
  /** u64 */
  EnabledFeatures: number | bigint;
  /** u64 */
  EnabledVolatileFeatures: number | bigint;
  /** u32 */
  Size: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  Features: Deno.PointerValue | null;
  /** u64 */
  EnabledSupervisorFeatures: number | bigint;
  /** u64 */
  AlignedFeatures: number | bigint;
  /** u32 */
  AllFeatureSize: number;
  /** array */
  AllFeatures: Deno.PointerValue | null;
  /** u64 */
  EnabledUserVisibleSupervisorFeatures: number | bigint;
  /** u64 */
  ExtendedFeatureDisableFeatures: number | bigint;
  /** u32 */
  AllNonLargeFeatureSize: number;
  /** u32 */
  Spare: number;
}

export const sizeofXSTATE_CONFIGURATION = 96;

export function allocXSTATE_CONFIGURATION(data?: Partial<XSTATE_CONFIGURATION>): Uint8Array {
  const buf = new Uint8Array(sizeofXSTATE_CONFIGURATION);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.EnabledFeatures !== undefined) view.setBigUint64(0, util.toBigInt(data.EnabledFeatures), true);
  // 0x08: u64
  if (data?.EnabledVolatileFeatures !== undefined) view.setBigUint64(8, util.toBigInt(data.EnabledVolatileFeatures), true);
  // 0x10: u32
  if (data?.Size !== undefined) view.setUint32(16, Number(data.Size), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(24, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x20: pointer
  if (data?.Features !== undefined) view.setBigUint64(32, data.Features === null ? 0n : util.toBigInt(util.toPointer(data.Features)), true);
  // 0x28: u64
  if (data?.EnabledSupervisorFeatures !== undefined) view.setBigUint64(40, util.toBigInt(data.EnabledSupervisorFeatures), true);
  // 0x30: u64
  if (data?.AlignedFeatures !== undefined) view.setBigUint64(48, util.toBigInt(data.AlignedFeatures), true);
  // 0x38: u32
  if (data?.AllFeatureSize !== undefined) view.setUint32(56, Number(data.AllFeatureSize), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.AllFeatures !== undefined) view.setBigUint64(64, data.AllFeatures === null ? 0n : util.toBigInt(util.toPointer(data.AllFeatures)), true);
  // 0x48: u64
  if (data?.EnabledUserVisibleSupervisorFeatures !== undefined) view.setBigUint64(72, util.toBigInt(data.EnabledUserVisibleSupervisorFeatures), true);
  // 0x50: u64
  if (data?.ExtendedFeatureDisableFeatures !== undefined) view.setBigUint64(80, util.toBigInt(data.ExtendedFeatureDisableFeatures), true);
  // 0x58: u32
  if (data?.AllNonLargeFeatureSize !== undefined) view.setUint32(88, Number(data.AllNonLargeFeatureSize), true);
  // 0x5c: u32
  if (data?.Spare !== undefined) view.setUint32(92, Number(data.Spare), true);
  return buf;
}

export class XSTATE_CONFIGURATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get EnabledFeatures(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get EnabledVolatileFeatures(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u32
  get Size(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get Features(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u64
  get EnabledSupervisorFeatures(): number | bigint {
    return this.view.getBigUint64(40, true);
  }

  // 0x30: u64
  get AlignedFeatures(): number | bigint {
    return this.view.getBigUint64(48, true);
  }

  // 0x38: u32
  get AllFeatureSize(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get AllFeatures(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: u64
  get EnabledUserVisibleSupervisorFeatures(): number | bigint {
    return this.view.getBigUint64(72, true);
  }

  // 0x50: u64
  get ExtendedFeatureDisableFeatures(): number | bigint {
    return this.view.getBigUint64(80, true);
  }

  // 0x58: u32
  get AllNonLargeFeatureSize(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get Spare(): number {
    return this.view.getUint32(92, true);
  }

  // 0x00: u64
  set EnabledFeatures(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set EnabledVolatileFeatures(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u32
  set Size(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set Features(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: u64
  set EnabledSupervisorFeatures(value: number | bigint) {
    this.view.setBigUint64(40, util.toBigInt(value), true);
  }

  // 0x30: u64
  set AlignedFeatures(value: number | bigint) {
    this.view.setBigUint64(48, util.toBigInt(value), true);
  }

  // 0x38: u32
  set AllFeatureSize(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set AllFeatures(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: u64
  set EnabledUserVisibleSupervisorFeatures(value: number | bigint) {
    this.view.setBigUint64(72, util.toBigInt(value), true);
  }

  // 0x50: u64
  set ExtendedFeatureDisableFeatures(value: number | bigint) {
    this.view.setBigUint64(80, util.toBigInt(value), true);
  }

  // 0x58: u32
  set AllNonLargeFeatureSize(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set Spare(value: number) {
    this.view.setUint32(92, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGE_FILE_HEADER (size: 24)
 */
export interface IMAGE_FILE_HEADER {
  /** Windows.Win32.System.SystemInformation.IMAGE_FILE_MACHINE */
  Machine: IMAGE_FILE_MACHINE;
  /** u16 */
  NumberOfSections: number;
  /** u32 */
  TimeDateStamp: number;
  /** u32 */
  PointerToSymbolTable: number;
  /** u32 */
  NumberOfSymbols: number;
  /** u16 */
  SizeOfOptionalHeader: number;
  /** Windows.Win32.System.Diagnostics.Debug.IMAGE_FILE_CHARACTERISTICS */
  Characteristics: IMAGE_FILE_CHARACTERISTICS;
}

export const sizeofIMAGE_FILE_HEADER = 24;

export function allocIMAGE_FILE_HEADER(data?: Partial<IMAGE_FILE_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_FILE_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Machine !== undefined) view.setUint16(0, Number(data.Machine), true);
  // 0x02: u16
  if (data?.NumberOfSections !== undefined) view.setUint16(2, Number(data.NumberOfSections), true);
  // 0x04: u32
  if (data?.TimeDateStamp !== undefined) view.setUint32(4, Number(data.TimeDateStamp), true);
  // 0x08: u32
  if (data?.PointerToSymbolTable !== undefined) view.setUint32(8, Number(data.PointerToSymbolTable), true);
  // 0x0c: u32
  if (data?.NumberOfSymbols !== undefined) view.setUint32(12, Number(data.NumberOfSymbols), true);
  // 0x10: u16
  if (data?.SizeOfOptionalHeader !== undefined) view.setUint16(16, Number(data.SizeOfOptionalHeader), true);
  // 0x12: u16
  if (data?.Characteristics !== undefined) view.setUint16(18, Number(data.Characteristics), true);
  // 0x14: pad4
  return buf;
}

export class IMAGE_FILE_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Machine(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get NumberOfSections(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get TimeDateStamp(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get PointerToSymbolTable(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get NumberOfSymbols(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u16
  get SizeOfOptionalHeader(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: u16
  get Characteristics(): number {
    return this.view.getUint16(18, true);
  }

  // 0x14: pad4

  // 0x00: u16
  set Machine(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set NumberOfSections(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set TimeDateStamp(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set PointerToSymbolTable(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set NumberOfSymbols(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u16
  set SizeOfOptionalHeader(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: u16
  set Characteristics(value: number) {
    this.view.setUint16(18, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGE_DATA_DIRECTORY (size: 8)
 */
export interface IMAGE_DATA_DIRECTORY {
  /** u32 */
  VirtualAddress: number;
  /** u32 */
  Size: number;
}

export const sizeofIMAGE_DATA_DIRECTORY = 8;

export function allocIMAGE_DATA_DIRECTORY(data?: Partial<IMAGE_DATA_DIRECTORY>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_DATA_DIRECTORY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.VirtualAddress !== undefined) view.setUint32(0, Number(data.VirtualAddress), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  return buf;
}

export class IMAGE_DATA_DIRECTORYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get VirtualAddress(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set VirtualAddress(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGE_OPTIONAL_HEADER32 (size: 104)
 */
export interface IMAGE_OPTIONAL_HEADER32 {
  /** Windows.Win32.System.Diagnostics.Debug.IMAGE_OPTIONAL_HEADER_MAGIC */
  Magic: IMAGE_OPTIONAL_HEADER_MAGIC;
  /** u8 */
  MajorLinkerVersion: number;
  /** u8 */
  MinorLinkerVersion: number;
  /** u32 */
  SizeOfCode: number;
  /** u32 */
  SizeOfInitializedData: number;
  /** u32 */
  SizeOfUninitializedData: number;
  /** u32 */
  AddressOfEntryPoint: number;
  /** u32 */
  BaseOfCode: number;
  /** u32 */
  BaseOfData: number;
  /** u32 */
  ImageBase: number;
  /** u32 */
  SectionAlignment: number;
  /** u32 */
  FileAlignment: number;
  /** u16 */
  MajorOperatingSystemVersion: number;
  /** u16 */
  MinorOperatingSystemVersion: number;
  /** u16 */
  MajorImageVersion: number;
  /** u16 */
  MinorImageVersion: number;
  /** u16 */
  MajorSubsystemVersion: number;
  /** u16 */
  MinorSubsystemVersion: number;
  /** u32 */
  Win32VersionValue: number;
  /** u32 */
  SizeOfImage: number;
  /** u32 */
  SizeOfHeaders: number;
  /** u32 */
  CheckSum: number;
  /** Windows.Win32.System.Diagnostics.Debug.IMAGE_SUBSYSTEM */
  Subsystem: IMAGE_SUBSYSTEM;
  /** Windows.Win32.System.Diagnostics.Debug.IMAGE_DLL_CHARACTERISTICS */
  DllCharacteristics: IMAGE_DLL_CHARACTERISTICS;
  /** u32 */
  SizeOfStackReserve: number;
  /** u32 */
  SizeOfStackCommit: number;
  /** u32 */
  SizeOfHeapReserve: number;
  /** u32 */
  SizeOfHeapCommit: number;
  /** u32 */
  LoaderFlags: number;
  /** u32 */
  NumberOfRvaAndSizes: number;
  /** array */
  DataDirectory: Deno.PointerValue | null;
}

export const sizeofIMAGE_OPTIONAL_HEADER32 = 104;

export function allocIMAGE_OPTIONAL_HEADER32(data?: Partial<IMAGE_OPTIONAL_HEADER32>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_OPTIONAL_HEADER32);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Magic !== undefined) view.setUint16(0, Number(data.Magic), true);
  // 0x02: u8
  if (data?.MajorLinkerVersion !== undefined) view.setUint8(2, Number(data.MajorLinkerVersion));
  // 0x03: u8
  if (data?.MinorLinkerVersion !== undefined) view.setUint8(3, Number(data.MinorLinkerVersion));
  // 0x04: u32
  if (data?.SizeOfCode !== undefined) view.setUint32(4, Number(data.SizeOfCode), true);
  // 0x08: u32
  if (data?.SizeOfInitializedData !== undefined) view.setUint32(8, Number(data.SizeOfInitializedData), true);
  // 0x0c: u32
  if (data?.SizeOfUninitializedData !== undefined) view.setUint32(12, Number(data.SizeOfUninitializedData), true);
  // 0x10: u32
  if (data?.AddressOfEntryPoint !== undefined) view.setUint32(16, Number(data.AddressOfEntryPoint), true);
  // 0x14: u32
  if (data?.BaseOfCode !== undefined) view.setUint32(20, Number(data.BaseOfCode), true);
  // 0x18: u32
  if (data?.BaseOfData !== undefined) view.setUint32(24, Number(data.BaseOfData), true);
  // 0x1c: u32
  if (data?.ImageBase !== undefined) view.setUint32(28, Number(data.ImageBase), true);
  // 0x20: u32
  if (data?.SectionAlignment !== undefined) view.setUint32(32, Number(data.SectionAlignment), true);
  // 0x24: u32
  if (data?.FileAlignment !== undefined) view.setUint32(36, Number(data.FileAlignment), true);
  // 0x28: u16
  if (data?.MajorOperatingSystemVersion !== undefined) view.setUint16(40, Number(data.MajorOperatingSystemVersion), true);
  // 0x2a: u16
  if (data?.MinorOperatingSystemVersion !== undefined) view.setUint16(42, Number(data.MinorOperatingSystemVersion), true);
  // 0x2c: u16
  if (data?.MajorImageVersion !== undefined) view.setUint16(44, Number(data.MajorImageVersion), true);
  // 0x2e: u16
  if (data?.MinorImageVersion !== undefined) view.setUint16(46, Number(data.MinorImageVersion), true);
  // 0x30: u16
  if (data?.MajorSubsystemVersion !== undefined) view.setUint16(48, Number(data.MajorSubsystemVersion), true);
  // 0x32: u16
  if (data?.MinorSubsystemVersion !== undefined) view.setUint16(50, Number(data.MinorSubsystemVersion), true);
  // 0x34: u32
  if (data?.Win32VersionValue !== undefined) view.setUint32(52, Number(data.Win32VersionValue), true);
  // 0x38: u32
  if (data?.SizeOfImage !== undefined) view.setUint32(56, Number(data.SizeOfImage), true);
  // 0x3c: u32
  if (data?.SizeOfHeaders !== undefined) view.setUint32(60, Number(data.SizeOfHeaders), true);
  // 0x40: u32
  if (data?.CheckSum !== undefined) view.setUint32(64, Number(data.CheckSum), true);
  // 0x44: u16
  if (data?.Subsystem !== undefined) view.setUint16(68, Number(data.Subsystem), true);
  // 0x46: u16
  if (data?.DllCharacteristics !== undefined) view.setUint16(70, Number(data.DllCharacteristics), true);
  // 0x48: u32
  if (data?.SizeOfStackReserve !== undefined) view.setUint32(72, Number(data.SizeOfStackReserve), true);
  // 0x4c: u32
  if (data?.SizeOfStackCommit !== undefined) view.setUint32(76, Number(data.SizeOfStackCommit), true);
  // 0x50: u32
  if (data?.SizeOfHeapReserve !== undefined) view.setUint32(80, Number(data.SizeOfHeapReserve), true);
  // 0x54: u32
  if (data?.SizeOfHeapCommit !== undefined) view.setUint32(84, Number(data.SizeOfHeapCommit), true);
  // 0x58: u32
  if (data?.LoaderFlags !== undefined) view.setUint32(88, Number(data.LoaderFlags), true);
  // 0x5c: u32
  if (data?.NumberOfRvaAndSizes !== undefined) view.setUint32(92, Number(data.NumberOfRvaAndSizes), true);
  // 0x60: pointer
  if (data?.DataDirectory !== undefined) view.setBigUint64(96, data.DataDirectory === null ? 0n : util.toBigInt(util.toPointer(data.DataDirectory)), true);
  return buf;
}

export class IMAGE_OPTIONAL_HEADER32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Magic(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get MajorLinkerVersion(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get MinorLinkerVersion(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u32
  get SizeOfCode(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get SizeOfInitializedData(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get SizeOfUninitializedData(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get AddressOfEntryPoint(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get BaseOfCode(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get BaseOfData(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get ImageBase(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get SectionAlignment(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get FileAlignment(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u16
  get MajorOperatingSystemVersion(): number {
    return this.view.getUint16(40, true);
  }

  // 0x2a: u16
  get MinorOperatingSystemVersion(): number {
    return this.view.getUint16(42, true);
  }

  // 0x2c: u16
  get MajorImageVersion(): number {
    return this.view.getUint16(44, true);
  }

  // 0x2e: u16
  get MinorImageVersion(): number {
    return this.view.getUint16(46, true);
  }

  // 0x30: u16
  get MajorSubsystemVersion(): number {
    return this.view.getUint16(48, true);
  }

  // 0x32: u16
  get MinorSubsystemVersion(): number {
    return this.view.getUint16(50, true);
  }

  // 0x34: u32
  get Win32VersionValue(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get SizeOfImage(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get SizeOfHeaders(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get CheckSum(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u16
  get Subsystem(): number {
    return this.view.getUint16(68, true);
  }

  // 0x46: u16
  get DllCharacteristics(): number {
    return this.view.getUint16(70, true);
  }

  // 0x48: u32
  get SizeOfStackReserve(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get SizeOfStackCommit(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get SizeOfHeapReserve(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get SizeOfHeapCommit(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get LoaderFlags(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get NumberOfRvaAndSizes(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: pointer
  get DataDirectory(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set Magic(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set MajorLinkerVersion(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set MinorLinkerVersion(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u32
  set SizeOfCode(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set SizeOfInitializedData(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set SizeOfUninitializedData(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set AddressOfEntryPoint(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set BaseOfCode(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set BaseOfData(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set ImageBase(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set SectionAlignment(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set FileAlignment(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u16
  set MajorOperatingSystemVersion(value: number) {
    this.view.setUint16(40, value, true);
  }

  // 0x2a: u16
  set MinorOperatingSystemVersion(value: number) {
    this.view.setUint16(42, value, true);
  }

  // 0x2c: u16
  set MajorImageVersion(value: number) {
    this.view.setUint16(44, value, true);
  }

  // 0x2e: u16
  set MinorImageVersion(value: number) {
    this.view.setUint16(46, value, true);
  }

  // 0x30: u16
  set MajorSubsystemVersion(value: number) {
    this.view.setUint16(48, value, true);
  }

  // 0x32: u16
  set MinorSubsystemVersion(value: number) {
    this.view.setUint16(50, value, true);
  }

  // 0x34: u32
  set Win32VersionValue(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set SizeOfImage(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set SizeOfHeaders(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set CheckSum(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u16
  set Subsystem(value: number) {
    this.view.setUint16(68, value, true);
  }

  // 0x46: u16
  set DllCharacteristics(value: number) {
    this.view.setUint16(70, value, true);
  }

  // 0x48: u32
  set SizeOfStackReserve(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set SizeOfStackCommit(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set SizeOfHeapReserve(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set SizeOfHeapCommit(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set LoaderFlags(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set NumberOfRvaAndSizes(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: pointer
  set DataDirectory(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGE_ROM_OPTIONAL_HEADER (size: 56)
 */
export interface IMAGE_ROM_OPTIONAL_HEADER {
  /** u16 */
  Magic: number;
  /** u8 */
  MajorLinkerVersion: number;
  /** u8 */
  MinorLinkerVersion: number;
  /** u32 */
  SizeOfCode: number;
  /** u32 */
  SizeOfInitializedData: number;
  /** u32 */
  SizeOfUninitializedData: number;
  /** u32 */
  AddressOfEntryPoint: number;
  /** u32 */
  BaseOfCode: number;
  /** u32 */
  BaseOfData: number;
  /** u32 */
  BaseOfBss: number;
  /** u32 */
  GprMask: number;
  /** array */
  CprMask: Deno.PointerValue | null;
  /** u32 */
  GpValue: number;
}

export const sizeofIMAGE_ROM_OPTIONAL_HEADER = 56;

export function allocIMAGE_ROM_OPTIONAL_HEADER(data?: Partial<IMAGE_ROM_OPTIONAL_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_ROM_OPTIONAL_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Magic !== undefined) view.setUint16(0, Number(data.Magic), true);
  // 0x02: u8
  if (data?.MajorLinkerVersion !== undefined) view.setUint8(2, Number(data.MajorLinkerVersion));
  // 0x03: u8
  if (data?.MinorLinkerVersion !== undefined) view.setUint8(3, Number(data.MinorLinkerVersion));
  // 0x04: u32
  if (data?.SizeOfCode !== undefined) view.setUint32(4, Number(data.SizeOfCode), true);
  // 0x08: u32
  if (data?.SizeOfInitializedData !== undefined) view.setUint32(8, Number(data.SizeOfInitializedData), true);
  // 0x0c: u32
  if (data?.SizeOfUninitializedData !== undefined) view.setUint32(12, Number(data.SizeOfUninitializedData), true);
  // 0x10: u32
  if (data?.AddressOfEntryPoint !== undefined) view.setUint32(16, Number(data.AddressOfEntryPoint), true);
  // 0x14: u32
  if (data?.BaseOfCode !== undefined) view.setUint32(20, Number(data.BaseOfCode), true);
  // 0x18: u32
  if (data?.BaseOfData !== undefined) view.setUint32(24, Number(data.BaseOfData), true);
  // 0x1c: u32
  if (data?.BaseOfBss !== undefined) view.setUint32(28, Number(data.BaseOfBss), true);
  // 0x20: u32
  if (data?.GprMask !== undefined) view.setUint32(32, Number(data.GprMask), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.CprMask !== undefined) view.setBigUint64(40, data.CprMask === null ? 0n : util.toBigInt(util.toPointer(data.CprMask)), true);
  // 0x30: u32
  if (data?.GpValue !== undefined) view.setUint32(48, Number(data.GpValue), true);
  // 0x34: pad4
  return buf;
}

export class IMAGE_ROM_OPTIONAL_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Magic(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get MajorLinkerVersion(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get MinorLinkerVersion(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u32
  get SizeOfCode(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get SizeOfInitializedData(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get SizeOfUninitializedData(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get AddressOfEntryPoint(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get BaseOfCode(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get BaseOfData(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get BaseOfBss(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get GprMask(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get CprMask(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get GpValue(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x00: u16
  set Magic(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set MajorLinkerVersion(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set MinorLinkerVersion(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u32
  set SizeOfCode(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set SizeOfInitializedData(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set SizeOfUninitializedData(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set AddressOfEntryPoint(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set BaseOfCode(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set BaseOfData(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set BaseOfBss(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set GprMask(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set CprMask(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set GpValue(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGE_OPTIONAL_HEADER64 (size: 120)
 */
export interface IMAGE_OPTIONAL_HEADER64 {
  /** Windows.Win32.System.Diagnostics.Debug.IMAGE_OPTIONAL_HEADER_MAGIC */
  Magic: IMAGE_OPTIONAL_HEADER_MAGIC;
  /** u8 */
  MajorLinkerVersion: number;
  /** u8 */
  MinorLinkerVersion: number;
  /** u32 */
  SizeOfCode: number;
  /** u32 */
  SizeOfInitializedData: number;
  /** u32 */
  SizeOfUninitializedData: number;
  /** u32 */
  AddressOfEntryPoint: number;
  /** u32 */
  BaseOfCode: number;
  /** u64 */
  ImageBase: number | bigint;
  /** u32 */
  SectionAlignment: number;
  /** u32 */
  FileAlignment: number;
  /** u16 */
  MajorOperatingSystemVersion: number;
  /** u16 */
  MinorOperatingSystemVersion: number;
  /** u16 */
  MajorImageVersion: number;
  /** u16 */
  MinorImageVersion: number;
  /** u16 */
  MajorSubsystemVersion: number;
  /** u16 */
  MinorSubsystemVersion: number;
  /** u32 */
  Win32VersionValue: number;
  /** u32 */
  SizeOfImage: number;
  /** u32 */
  SizeOfHeaders: number;
  /** u32 */
  CheckSum: number;
  /** Windows.Win32.System.Diagnostics.Debug.IMAGE_SUBSYSTEM */
  Subsystem: IMAGE_SUBSYSTEM;
  /** Windows.Win32.System.Diagnostics.Debug.IMAGE_DLL_CHARACTERISTICS */
  DllCharacteristics: IMAGE_DLL_CHARACTERISTICS;
  /** u64 */
  SizeOfStackReserve: number | bigint;
  /** u64 */
  SizeOfStackCommit: number | bigint;
  /** u64 */
  SizeOfHeapReserve: number | bigint;
  /** u64 */
  SizeOfHeapCommit: number | bigint;
  /** u32 */
  LoaderFlags: number;
  /** u32 */
  NumberOfRvaAndSizes: number;
  /** array */
  DataDirectory: Deno.PointerValue | null;
}

export const sizeofIMAGE_OPTIONAL_HEADER64 = 120;

export function allocIMAGE_OPTIONAL_HEADER64(data?: Partial<IMAGE_OPTIONAL_HEADER64>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_OPTIONAL_HEADER64);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Magic !== undefined) view.setUint16(0, Number(data.Magic), true);
  // 0x02: u8
  if (data?.MajorLinkerVersion !== undefined) view.setUint8(2, Number(data.MajorLinkerVersion));
  // 0x03: u8
  if (data?.MinorLinkerVersion !== undefined) view.setUint8(3, Number(data.MinorLinkerVersion));
  // 0x04: u32
  if (data?.SizeOfCode !== undefined) view.setUint32(4, Number(data.SizeOfCode), true);
  // 0x08: u32
  if (data?.SizeOfInitializedData !== undefined) view.setUint32(8, Number(data.SizeOfInitializedData), true);
  // 0x0c: u32
  if (data?.SizeOfUninitializedData !== undefined) view.setUint32(12, Number(data.SizeOfUninitializedData), true);
  // 0x10: u32
  if (data?.AddressOfEntryPoint !== undefined) view.setUint32(16, Number(data.AddressOfEntryPoint), true);
  // 0x14: u32
  if (data?.BaseOfCode !== undefined) view.setUint32(20, Number(data.BaseOfCode), true);
  // 0x18: u64
  if (data?.ImageBase !== undefined) view.setBigUint64(24, util.toBigInt(data.ImageBase), true);
  // 0x20: u32
  if (data?.SectionAlignment !== undefined) view.setUint32(32, Number(data.SectionAlignment), true);
  // 0x24: u32
  if (data?.FileAlignment !== undefined) view.setUint32(36, Number(data.FileAlignment), true);
  // 0x28: u16
  if (data?.MajorOperatingSystemVersion !== undefined) view.setUint16(40, Number(data.MajorOperatingSystemVersion), true);
  // 0x2a: u16
  if (data?.MinorOperatingSystemVersion !== undefined) view.setUint16(42, Number(data.MinorOperatingSystemVersion), true);
  // 0x2c: u16
  if (data?.MajorImageVersion !== undefined) view.setUint16(44, Number(data.MajorImageVersion), true);
  // 0x2e: u16
  if (data?.MinorImageVersion !== undefined) view.setUint16(46, Number(data.MinorImageVersion), true);
  // 0x30: u16
  if (data?.MajorSubsystemVersion !== undefined) view.setUint16(48, Number(data.MajorSubsystemVersion), true);
  // 0x32: u16
  if (data?.MinorSubsystemVersion !== undefined) view.setUint16(50, Number(data.MinorSubsystemVersion), true);
  // 0x34: u32
  if (data?.Win32VersionValue !== undefined) view.setUint32(52, Number(data.Win32VersionValue), true);
  // 0x38: u32
  if (data?.SizeOfImage !== undefined) view.setUint32(56, Number(data.SizeOfImage), true);
  // 0x3c: u32
  if (data?.SizeOfHeaders !== undefined) view.setUint32(60, Number(data.SizeOfHeaders), true);
  // 0x40: u32
  if (data?.CheckSum !== undefined) view.setUint32(64, Number(data.CheckSum), true);
  // 0x44: u16
  if (data?.Subsystem !== undefined) view.setUint16(68, Number(data.Subsystem), true);
  // 0x46: u16
  if (data?.DllCharacteristics !== undefined) view.setUint16(70, Number(data.DllCharacteristics), true);
  // 0x48: u64
  if (data?.SizeOfStackReserve !== undefined) view.setBigUint64(72, util.toBigInt(data.SizeOfStackReserve), true);
  // 0x50: u64
  if (data?.SizeOfStackCommit !== undefined) view.setBigUint64(80, util.toBigInt(data.SizeOfStackCommit), true);
  // 0x58: u64
  if (data?.SizeOfHeapReserve !== undefined) view.setBigUint64(88, util.toBigInt(data.SizeOfHeapReserve), true);
  // 0x60: u64
  if (data?.SizeOfHeapCommit !== undefined) view.setBigUint64(96, util.toBigInt(data.SizeOfHeapCommit), true);
  // 0x68: u32
  if (data?.LoaderFlags !== undefined) view.setUint32(104, Number(data.LoaderFlags), true);
  // 0x6c: u32
  if (data?.NumberOfRvaAndSizes !== undefined) view.setUint32(108, Number(data.NumberOfRvaAndSizes), true);
  // 0x70: pointer
  if (data?.DataDirectory !== undefined) view.setBigUint64(112, data.DataDirectory === null ? 0n : util.toBigInt(util.toPointer(data.DataDirectory)), true);
  return buf;
}

export class IMAGE_OPTIONAL_HEADER64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Magic(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get MajorLinkerVersion(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get MinorLinkerVersion(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u32
  get SizeOfCode(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get SizeOfInitializedData(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get SizeOfUninitializedData(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get AddressOfEntryPoint(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get BaseOfCode(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u64
  get ImageBase(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u32
  get SectionAlignment(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get FileAlignment(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u16
  get MajorOperatingSystemVersion(): number {
    return this.view.getUint16(40, true);
  }

  // 0x2a: u16
  get MinorOperatingSystemVersion(): number {
    return this.view.getUint16(42, true);
  }

  // 0x2c: u16
  get MajorImageVersion(): number {
    return this.view.getUint16(44, true);
  }

  // 0x2e: u16
  get MinorImageVersion(): number {
    return this.view.getUint16(46, true);
  }

  // 0x30: u16
  get MajorSubsystemVersion(): number {
    return this.view.getUint16(48, true);
  }

  // 0x32: u16
  get MinorSubsystemVersion(): number {
    return this.view.getUint16(50, true);
  }

  // 0x34: u32
  get Win32VersionValue(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get SizeOfImage(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get SizeOfHeaders(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get CheckSum(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u16
  get Subsystem(): number {
    return this.view.getUint16(68, true);
  }

  // 0x46: u16
  get DllCharacteristics(): number {
    return this.view.getUint16(70, true);
  }

  // 0x48: u64
  get SizeOfStackReserve(): number | bigint {
    return this.view.getBigUint64(72, true);
  }

  // 0x50: u64
  get SizeOfStackCommit(): number | bigint {
    return this.view.getBigUint64(80, true);
  }

  // 0x58: u64
  get SizeOfHeapReserve(): number | bigint {
    return this.view.getBigUint64(88, true);
  }

  // 0x60: u64
  get SizeOfHeapCommit(): number | bigint {
    return this.view.getBigUint64(96, true);
  }

  // 0x68: u32
  get LoaderFlags(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: u32
  get NumberOfRvaAndSizes(): number {
    return this.view.getUint32(108, true);
  }

  // 0x70: pointer
  get DataDirectory(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(112, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set Magic(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set MajorLinkerVersion(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set MinorLinkerVersion(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u32
  set SizeOfCode(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set SizeOfInitializedData(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set SizeOfUninitializedData(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set AddressOfEntryPoint(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set BaseOfCode(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u64
  set ImageBase(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u32
  set SectionAlignment(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set FileAlignment(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u16
  set MajorOperatingSystemVersion(value: number) {
    this.view.setUint16(40, value, true);
  }

  // 0x2a: u16
  set MinorOperatingSystemVersion(value: number) {
    this.view.setUint16(42, value, true);
  }

  // 0x2c: u16
  set MajorImageVersion(value: number) {
    this.view.setUint16(44, value, true);
  }

  // 0x2e: u16
  set MinorImageVersion(value: number) {
    this.view.setUint16(46, value, true);
  }

  // 0x30: u16
  set MajorSubsystemVersion(value: number) {
    this.view.setUint16(48, value, true);
  }

  // 0x32: u16
  set MinorSubsystemVersion(value: number) {
    this.view.setUint16(50, value, true);
  }

  // 0x34: u32
  set Win32VersionValue(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set SizeOfImage(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set SizeOfHeaders(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set CheckSum(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u16
  set Subsystem(value: number) {
    this.view.setUint16(68, value, true);
  }

  // 0x46: u16
  set DllCharacteristics(value: number) {
    this.view.setUint16(70, value, true);
  }

  // 0x48: u64
  set SizeOfStackReserve(value: number | bigint) {
    this.view.setBigUint64(72, util.toBigInt(value), true);
  }

  // 0x50: u64
  set SizeOfStackCommit(value: number | bigint) {
    this.view.setBigUint64(80, util.toBigInt(value), true);
  }

  // 0x58: u64
  set SizeOfHeapReserve(value: number | bigint) {
    this.view.setBigUint64(88, util.toBigInt(value), true);
  }

  // 0x60: u64
  set SizeOfHeapCommit(value: number | bigint) {
    this.view.setBigUint64(96, util.toBigInt(value), true);
  }

  // 0x68: u32
  set LoaderFlags(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: u32
  set NumberOfRvaAndSizes(value: number) {
    this.view.setUint32(108, value, true);
  }

  // 0x70: pointer
  set DataDirectory(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(112, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGE_NT_HEADERS64 (size: 24)
 */
export interface IMAGE_NT_HEADERS64 {
  /** u32 */
  Signature: number;
  /** Windows.Win32.System.Diagnostics.Debug.IMAGE_FILE_HEADER */
  FileHeader: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.IMAGE_OPTIONAL_HEADER64 */
  OptionalHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIMAGE_NT_HEADERS64 = 24;

export function allocIMAGE_NT_HEADERS64(data?: Partial<IMAGE_NT_HEADERS64>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_NT_HEADERS64);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Signature !== undefined) view.setUint32(0, Number(data.Signature), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.FileHeader !== undefined) view.setBigUint64(8, data.FileHeader === null ? 0n : util.toBigInt(util.toPointer(data.FileHeader)), true);
  // 0x10: pointer
  if (data?.OptionalHeader !== undefined) view.setBigUint64(16, data.OptionalHeader === null ? 0n : util.toBigInt(util.toPointer(data.OptionalHeader)), true);
  return buf;
}

export class IMAGE_NT_HEADERS64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Signature(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get FileHeader(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get OptionalHeader(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Signature(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set FileHeader(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set OptionalHeader(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGE_NT_HEADERS32 (size: 24)
 */
export interface IMAGE_NT_HEADERS32 {
  /** u32 */
  Signature: number;
  /** Windows.Win32.System.Diagnostics.Debug.IMAGE_FILE_HEADER */
  FileHeader: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.IMAGE_OPTIONAL_HEADER32 */
  OptionalHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIMAGE_NT_HEADERS32 = 24;

export function allocIMAGE_NT_HEADERS32(data?: Partial<IMAGE_NT_HEADERS32>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_NT_HEADERS32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Signature !== undefined) view.setUint32(0, Number(data.Signature), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.FileHeader !== undefined) view.setBigUint64(8, data.FileHeader === null ? 0n : util.toBigInt(util.toPointer(data.FileHeader)), true);
  // 0x10: pointer
  if (data?.OptionalHeader !== undefined) view.setBigUint64(16, data.OptionalHeader === null ? 0n : util.toBigInt(util.toPointer(data.OptionalHeader)), true);
  return buf;
}

export class IMAGE_NT_HEADERS32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Signature(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get FileHeader(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get OptionalHeader(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Signature(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set FileHeader(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set OptionalHeader(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGE_ROM_HEADERS (size: 16)
 */
export interface IMAGE_ROM_HEADERS {
  /** Windows.Win32.System.Diagnostics.Debug.IMAGE_FILE_HEADER */
  FileHeader: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.IMAGE_ROM_OPTIONAL_HEADER */
  OptionalHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIMAGE_ROM_HEADERS = 16;

export function allocIMAGE_ROM_HEADERS(data?: Partial<IMAGE_ROM_HEADERS>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_ROM_HEADERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.FileHeader !== undefined) view.setBigUint64(0, data.FileHeader === null ? 0n : util.toBigInt(util.toPointer(data.FileHeader)), true);
  // 0x08: pointer
  if (data?.OptionalHeader !== undefined) view.setBigUint64(8, data.OptionalHeader === null ? 0n : util.toBigInt(util.toPointer(data.OptionalHeader)), true);
  return buf;
}

export class IMAGE_ROM_HEADERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get FileHeader(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get OptionalHeader(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set FileHeader(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set OptionalHeader(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * _LnSz_e__Struct (size: 8)
 */
export interface _LnSz_e__Struct {
  /** u16 */
  Linenumber: number;
  /** u16 */
  Size: number;
}

export const sizeof_LnSz_e__Struct = 8;

export function alloc_LnSz_e__Struct(data?: Partial<_LnSz_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_LnSz_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Linenumber !== undefined) view.setUint16(0, Number(data.Linenumber), true);
  // 0x02: u16
  if (data?.Size !== undefined) view.setUint16(2, Number(data.Size), true);
  // 0x04: pad4
  return buf;
}

export class _LnSz_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Linenumber(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Size(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u16
  set Linenumber(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Size(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * _Misc_e__Union (size: 16)
 */
export interface _Misc_e__Union {
  /** _LnSz_e__Struct */
  LnSz: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  TotalSize: number;
}

export const sizeof_Misc_e__Union = 16;

export function alloc_Misc_e__Union(data?: Partial<_Misc_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Misc_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LnSz !== undefined) view.setBigUint64(0, data.LnSz === null ? 0n : util.toBigInt(util.toPointer(data.LnSz)), true);
  // 0x08: u32
  if (data?.TotalSize !== undefined) view.setUint32(8, Number(data.TotalSize), true);
  // 0x0c: pad4
  return buf;
}

export class _Misc_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get LnSz(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get TotalSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set LnSz(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set TotalSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGE_SECTION_HEADER (size: 48)
 */
export interface IMAGE_SECTION_HEADER {
  /** array */
  Name: Deno.PointerValue | null;
  /** _Misc_e__Union */
  Misc: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  VirtualAddress: number;
  /** u32 */
  SizeOfRawData: number;
  /** u32 */
  PointerToRawData: number;
  /** u32 */
  PointerToRelocations: number;
  /** u32 */
  PointerToLinenumbers: number;
  /** u16 */
  NumberOfRelocations: number;
  /** u16 */
  NumberOfLinenumbers: number;
  /** Windows.Win32.System.Diagnostics.Debug.IMAGE_SECTION_CHARACTERISTICS */
  Characteristics: IMAGE_SECTION_CHARACTERISTICS;
}

export const sizeofIMAGE_SECTION_HEADER = 48;

export function allocIMAGE_SECTION_HEADER(data?: Partial<IMAGE_SECTION_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_SECTION_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Name !== undefined) view.setBigUint64(0, data.Name === null ? 0n : util.toBigInt(util.toPointer(data.Name)), true);
  // 0x08: pointer
  if (data?.Misc !== undefined) view.setBigUint64(8, data.Misc === null ? 0n : util.toBigInt(util.toPointer(data.Misc)), true);
  // 0x10: u32
  if (data?.VirtualAddress !== undefined) view.setUint32(16, Number(data.VirtualAddress), true);
  // 0x14: u32
  if (data?.SizeOfRawData !== undefined) view.setUint32(20, Number(data.SizeOfRawData), true);
  // 0x18: u32
  if (data?.PointerToRawData !== undefined) view.setUint32(24, Number(data.PointerToRawData), true);
  // 0x1c: u32
  if (data?.PointerToRelocations !== undefined) view.setUint32(28, Number(data.PointerToRelocations), true);
  // 0x20: u32
  if (data?.PointerToLinenumbers !== undefined) view.setUint32(32, Number(data.PointerToLinenumbers), true);
  // 0x24: u16
  if (data?.NumberOfRelocations !== undefined) view.setUint16(36, Number(data.NumberOfRelocations), true);
  // 0x26: u16
  if (data?.NumberOfLinenumbers !== undefined) view.setUint16(38, Number(data.NumberOfLinenumbers), true);
  // 0x28: u32
  if (data?.Characteristics !== undefined) view.setUint32(40, Number(data.Characteristics), true);
  // 0x2c: pad4
  return buf;
}

export class IMAGE_SECTION_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Misc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get VirtualAddress(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get SizeOfRawData(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get PointerToRawData(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get PointerToRelocations(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get PointerToLinenumbers(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u16
  get NumberOfRelocations(): number {
    return this.view.getUint16(36, true);
  }

  // 0x26: u16
  get NumberOfLinenumbers(): number {
    return this.view.getUint16(38, true);
  }

  // 0x28: u32
  get Characteristics(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: pointer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Misc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set VirtualAddress(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set SizeOfRawData(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set PointerToRawData(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set PointerToRelocations(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set PointerToLinenumbers(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u16
  set NumberOfRelocations(value: number) {
    this.view.setUint16(36, value, true);
  }

  // 0x26: u16
  set NumberOfLinenumbers(value: number) {
    this.view.setUint16(38, value, true);
  }

  // 0x28: u32
  set Characteristics(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGE_LOAD_CONFIG_CODE_INTEGRITY (size: 16)
 */
export interface IMAGE_LOAD_CONFIG_CODE_INTEGRITY {
  /** u16 */
  Flags: number;
  /** u16 */
  Catalog: number;
  /** u32 */
  CatalogOffset: number;
  /** u32 */
  Reserved: number;
}

export const sizeofIMAGE_LOAD_CONFIG_CODE_INTEGRITY = 16;

export function allocIMAGE_LOAD_CONFIG_CODE_INTEGRITY(data?: Partial<IMAGE_LOAD_CONFIG_CODE_INTEGRITY>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_LOAD_CONFIG_CODE_INTEGRITY);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Flags !== undefined) view.setUint16(0, Number(data.Flags), true);
  // 0x02: u16
  if (data?.Catalog !== undefined) view.setUint16(2, Number(data.Catalog), true);
  // 0x04: u32
  if (data?.CatalogOffset !== undefined) view.setUint32(4, Number(data.CatalogOffset), true);
  // 0x08: u32
  if (data?.Reserved !== undefined) view.setUint32(8, Number(data.Reserved), true);
  // 0x0c: pad4
  return buf;
}

export class IMAGE_LOAD_CONFIG_CODE_INTEGRITYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Flags(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Catalog(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get CatalogOffset(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Reserved(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u16
  set Flags(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Catalog(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set CatalogOffset(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Reserved(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGE_LOAD_CONFIG_DIRECTORY32 (size: 192)
 */
export interface IMAGE_LOAD_CONFIG_DIRECTORY32 {
  /** u32 */
  Size: number;
  /** u32 */
  TimeDateStamp: number;
  /** u16 */
  MajorVersion: number;
  /** u16 */
  MinorVersion: number;
  /** u32 */
  GlobalFlagsClear: number;
  /** u32 */
  GlobalFlagsSet: number;
  /** u32 */
  CriticalSectionDefaultTimeout: number;
  /** u32 */
  DeCommitFreeBlockThreshold: number;
  /** u32 */
  DeCommitTotalFreeThreshold: number;
  /** u32 */
  LockPrefixTable: number;
  /** u32 */
  MaximumAllocationSize: number;
  /** u32 */
  VirtualMemoryThreshold: number;
  /** u32 */
  ProcessHeapFlags: number;
  /** u32 */
  ProcessAffinityMask: number;
  /** u16 */
  CSDVersion: number;
  /** u16 */
  DependentLoadFlags: number;
  /** u32 */
  EditList: number;
  /** u32 */
  SecurityCookie: number;
  /** u32 */
  SEHandlerTable: number;
  /** u32 */
  SEHandlerCount: number;
  /** u32 */
  GuardCFCheckFunctionPointer: number;
  /** u32 */
  GuardCFDispatchFunctionPointer: number;
  /** u32 */
  GuardCFFunctionTable: number;
  /** u32 */
  GuardCFFunctionCount: number;
  /** u32 */
  GuardFlags: number;
  /** Windows.Win32.System.Diagnostics.Debug.IMAGE_LOAD_CONFIG_CODE_INTEGRITY */
  CodeIntegrity: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  GuardAddressTakenIatEntryTable: number;
  /** u32 */
  GuardAddressTakenIatEntryCount: number;
  /** u32 */
  GuardLongJumpTargetTable: number;
  /** u32 */
  GuardLongJumpTargetCount: number;
  /** u32 */
  DynamicValueRelocTable: number;
  /** u32 */
  CHPEMetadataPointer: number;
  /** u32 */
  GuardRFFailureRoutine: number;
  /** u32 */
  GuardRFFailureRoutineFunctionPointer: number;
  /** u32 */
  DynamicValueRelocTableOffset: number;
  /** u16 */
  DynamicValueRelocTableSection: number;
  /** u16 */
  Reserved2: number;
  /** u32 */
  GuardRFVerifyStackPointerFunctionPointer: number;
  /** u32 */
  HotPatchTableOffset: number;
  /** u32 */
  Reserved3: number;
  /** u32 */
  EnclaveConfigurationPointer: number;
  /** u32 */
  VolatileMetadataPointer: number;
  /** u32 */
  GuardEHContinuationTable: number;
  /** u32 */
  GuardEHContinuationCount: number;
  /** u32 */
  GuardXFGCheckFunctionPointer: number;
  /** u32 */
  GuardXFGDispatchFunctionPointer: number;
  /** u32 */
  GuardXFGTableDispatchFunctionPointer: number;
  /** u32 */
  CastGuardOsDeterminedFailureMode: number;
}

export const sizeofIMAGE_LOAD_CONFIG_DIRECTORY32 = 192;

export function allocIMAGE_LOAD_CONFIG_DIRECTORY32(data?: Partial<IMAGE_LOAD_CONFIG_DIRECTORY32>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_LOAD_CONFIG_DIRECTORY32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.TimeDateStamp !== undefined) view.setUint32(4, Number(data.TimeDateStamp), true);
  // 0x08: u16
  if (data?.MajorVersion !== undefined) view.setUint16(8, Number(data.MajorVersion), true);
  // 0x0a: u16
  if (data?.MinorVersion !== undefined) view.setUint16(10, Number(data.MinorVersion), true);
  // 0x0c: u32
  if (data?.GlobalFlagsClear !== undefined) view.setUint32(12, Number(data.GlobalFlagsClear), true);
  // 0x10: u32
  if (data?.GlobalFlagsSet !== undefined) view.setUint32(16, Number(data.GlobalFlagsSet), true);
  // 0x14: u32
  if (data?.CriticalSectionDefaultTimeout !== undefined) view.setUint32(20, Number(data.CriticalSectionDefaultTimeout), true);
  // 0x18: u32
  if (data?.DeCommitFreeBlockThreshold !== undefined) view.setUint32(24, Number(data.DeCommitFreeBlockThreshold), true);
  // 0x1c: u32
  if (data?.DeCommitTotalFreeThreshold !== undefined) view.setUint32(28, Number(data.DeCommitTotalFreeThreshold), true);
  // 0x20: u32
  if (data?.LockPrefixTable !== undefined) view.setUint32(32, Number(data.LockPrefixTable), true);
  // 0x24: u32
  if (data?.MaximumAllocationSize !== undefined) view.setUint32(36, Number(data.MaximumAllocationSize), true);
  // 0x28: u32
  if (data?.VirtualMemoryThreshold !== undefined) view.setUint32(40, Number(data.VirtualMemoryThreshold), true);
  // 0x2c: u32
  if (data?.ProcessHeapFlags !== undefined) view.setUint32(44, Number(data.ProcessHeapFlags), true);
  // 0x30: u32
  if (data?.ProcessAffinityMask !== undefined) view.setUint32(48, Number(data.ProcessAffinityMask), true);
  // 0x34: u16
  if (data?.CSDVersion !== undefined) view.setUint16(52, Number(data.CSDVersion), true);
  // 0x36: u16
  if (data?.DependentLoadFlags !== undefined) view.setUint16(54, Number(data.DependentLoadFlags), true);
  // 0x38: u32
  if (data?.EditList !== undefined) view.setUint32(56, Number(data.EditList), true);
  // 0x3c: u32
  if (data?.SecurityCookie !== undefined) view.setUint32(60, Number(data.SecurityCookie), true);
  // 0x40: u32
  if (data?.SEHandlerTable !== undefined) view.setUint32(64, Number(data.SEHandlerTable), true);
  // 0x44: u32
  if (data?.SEHandlerCount !== undefined) view.setUint32(68, Number(data.SEHandlerCount), true);
  // 0x48: u32
  if (data?.GuardCFCheckFunctionPointer !== undefined) view.setUint32(72, Number(data.GuardCFCheckFunctionPointer), true);
  // 0x4c: u32
  if (data?.GuardCFDispatchFunctionPointer !== undefined) view.setUint32(76, Number(data.GuardCFDispatchFunctionPointer), true);
  // 0x50: u32
  if (data?.GuardCFFunctionTable !== undefined) view.setUint32(80, Number(data.GuardCFFunctionTable), true);
  // 0x54: u32
  if (data?.GuardCFFunctionCount !== undefined) view.setUint32(84, Number(data.GuardCFFunctionCount), true);
  // 0x58: u32
  if (data?.GuardFlags !== undefined) view.setUint32(88, Number(data.GuardFlags), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.CodeIntegrity !== undefined) view.setBigUint64(96, data.CodeIntegrity === null ? 0n : util.toBigInt(util.toPointer(data.CodeIntegrity)), true);
  // 0x68: u32
  if (data?.GuardAddressTakenIatEntryTable !== undefined) view.setUint32(104, Number(data.GuardAddressTakenIatEntryTable), true);
  // 0x6c: u32
  if (data?.GuardAddressTakenIatEntryCount !== undefined) view.setUint32(108, Number(data.GuardAddressTakenIatEntryCount), true);
  // 0x70: u32
  if (data?.GuardLongJumpTargetTable !== undefined) view.setUint32(112, Number(data.GuardLongJumpTargetTable), true);
  // 0x74: u32
  if (data?.GuardLongJumpTargetCount !== undefined) view.setUint32(116, Number(data.GuardLongJumpTargetCount), true);
  // 0x78: u32
  if (data?.DynamicValueRelocTable !== undefined) view.setUint32(120, Number(data.DynamicValueRelocTable), true);
  // 0x7c: u32
  if (data?.CHPEMetadataPointer !== undefined) view.setUint32(124, Number(data.CHPEMetadataPointer), true);
  // 0x80: u32
  if (data?.GuardRFFailureRoutine !== undefined) view.setUint32(128, Number(data.GuardRFFailureRoutine), true);
  // 0x84: u32
  if (data?.GuardRFFailureRoutineFunctionPointer !== undefined) view.setUint32(132, Number(data.GuardRFFailureRoutineFunctionPointer), true);
  // 0x88: u32
  if (data?.DynamicValueRelocTableOffset !== undefined) view.setUint32(136, Number(data.DynamicValueRelocTableOffset), true);
  // 0x8c: u16
  if (data?.DynamicValueRelocTableSection !== undefined) view.setUint16(140, Number(data.DynamicValueRelocTableSection), true);
  // 0x8e: u16
  if (data?.Reserved2 !== undefined) view.setUint16(142, Number(data.Reserved2), true);
  // 0x90: u32
  if (data?.GuardRFVerifyStackPointerFunctionPointer !== undefined) view.setUint32(144, Number(data.GuardRFVerifyStackPointerFunctionPointer), true);
  // 0x94: u32
  if (data?.HotPatchTableOffset !== undefined) view.setUint32(148, Number(data.HotPatchTableOffset), true);
  // 0x98: u32
  if (data?.Reserved3 !== undefined) view.setUint32(152, Number(data.Reserved3), true);
  // 0x9c: u32
  if (data?.EnclaveConfigurationPointer !== undefined) view.setUint32(156, Number(data.EnclaveConfigurationPointer), true);
  // 0xa0: u32
  if (data?.VolatileMetadataPointer !== undefined) view.setUint32(160, Number(data.VolatileMetadataPointer), true);
  // 0xa4: u32
  if (data?.GuardEHContinuationTable !== undefined) view.setUint32(164, Number(data.GuardEHContinuationTable), true);
  // 0xa8: u32
  if (data?.GuardEHContinuationCount !== undefined) view.setUint32(168, Number(data.GuardEHContinuationCount), true);
  // 0xac: u32
  if (data?.GuardXFGCheckFunctionPointer !== undefined) view.setUint32(172, Number(data.GuardXFGCheckFunctionPointer), true);
  // 0xb0: u32
  if (data?.GuardXFGDispatchFunctionPointer !== undefined) view.setUint32(176, Number(data.GuardXFGDispatchFunctionPointer), true);
  // 0xb4: u32
  if (data?.GuardXFGTableDispatchFunctionPointer !== undefined) view.setUint32(180, Number(data.GuardXFGTableDispatchFunctionPointer), true);
  // 0xb8: u32
  if (data?.CastGuardOsDeterminedFailureMode !== undefined) view.setUint32(184, Number(data.CastGuardOsDeterminedFailureMode), true);
  // 0xbc: pad4
  return buf;
}

export class IMAGE_LOAD_CONFIG_DIRECTORY32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get TimeDateStamp(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u16
  get MajorVersion(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get MinorVersion(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u32
  get GlobalFlagsClear(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get GlobalFlagsSet(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get CriticalSectionDefaultTimeout(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get DeCommitFreeBlockThreshold(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get DeCommitTotalFreeThreshold(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get LockPrefixTable(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get MaximumAllocationSize(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get VirtualMemoryThreshold(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get ProcessHeapFlags(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get ProcessAffinityMask(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u16
  get CSDVersion(): number {
    return this.view.getUint16(52, true);
  }

  // 0x36: u16
  get DependentLoadFlags(): number {
    return this.view.getUint16(54, true);
  }

  // 0x38: u32
  get EditList(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get SecurityCookie(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get SEHandlerTable(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get SEHandlerCount(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get GuardCFCheckFunctionPointer(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get GuardCFDispatchFunctionPointer(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get GuardCFFunctionTable(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get GuardCFFunctionCount(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get GuardFlags(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  get CodeIntegrity(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: u32
  get GuardAddressTakenIatEntryTable(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: u32
  get GuardAddressTakenIatEntryCount(): number {
    return this.view.getUint32(108, true);
  }

  // 0x70: u32
  get GuardLongJumpTargetTable(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: u32
  get GuardLongJumpTargetCount(): number {
    return this.view.getUint32(116, true);
  }

  // 0x78: u32
  get DynamicValueRelocTable(): number {
    return this.view.getUint32(120, true);
  }

  // 0x7c: u32
  get CHPEMetadataPointer(): number {
    return this.view.getUint32(124, true);
  }

  // 0x80: u32
  get GuardRFFailureRoutine(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: u32
  get GuardRFFailureRoutineFunctionPointer(): number {
    return this.view.getUint32(132, true);
  }

  // 0x88: u32
  get DynamicValueRelocTableOffset(): number {
    return this.view.getUint32(136, true);
  }

  // 0x8c: u16
  get DynamicValueRelocTableSection(): number {
    return this.view.getUint16(140, true);
  }

  // 0x8e: u16
  get Reserved2(): number {
    return this.view.getUint16(142, true);
  }

  // 0x90: u32
  get GuardRFVerifyStackPointerFunctionPointer(): number {
    return this.view.getUint32(144, true);
  }

  // 0x94: u32
  get HotPatchTableOffset(): number {
    return this.view.getUint32(148, true);
  }

  // 0x98: u32
  get Reserved3(): number {
    return this.view.getUint32(152, true);
  }

  // 0x9c: u32
  get EnclaveConfigurationPointer(): number {
    return this.view.getUint32(156, true);
  }

  // 0xa0: u32
  get VolatileMetadataPointer(): number {
    return this.view.getUint32(160, true);
  }

  // 0xa4: u32
  get GuardEHContinuationTable(): number {
    return this.view.getUint32(164, true);
  }

  // 0xa8: u32
  get GuardEHContinuationCount(): number {
    return this.view.getUint32(168, true);
  }

  // 0xac: u32
  get GuardXFGCheckFunctionPointer(): number {
    return this.view.getUint32(172, true);
  }

  // 0xb0: u32
  get GuardXFGDispatchFunctionPointer(): number {
    return this.view.getUint32(176, true);
  }

  // 0xb4: u32
  get GuardXFGTableDispatchFunctionPointer(): number {
    return this.view.getUint32(180, true);
  }

  // 0xb8: u32
  get CastGuardOsDeterminedFailureMode(): number {
    return this.view.getUint32(184, true);
  }

  // 0xbc: pad4

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set TimeDateStamp(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u16
  set MajorVersion(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set MinorVersion(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u32
  set GlobalFlagsClear(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set GlobalFlagsSet(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set CriticalSectionDefaultTimeout(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set DeCommitFreeBlockThreshold(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set DeCommitTotalFreeThreshold(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set LockPrefixTable(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set MaximumAllocationSize(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set VirtualMemoryThreshold(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set ProcessHeapFlags(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set ProcessAffinityMask(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u16
  set CSDVersion(value: number) {
    this.view.setUint16(52, value, true);
  }

  // 0x36: u16
  set DependentLoadFlags(value: number) {
    this.view.setUint16(54, value, true);
  }

  // 0x38: u32
  set EditList(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set SecurityCookie(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set SEHandlerTable(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set SEHandlerCount(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set GuardCFCheckFunctionPointer(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set GuardCFDispatchFunctionPointer(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set GuardCFFunctionTable(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set GuardCFFunctionCount(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set GuardFlags(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  set CodeIntegrity(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x68: u32
  set GuardAddressTakenIatEntryTable(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: u32
  set GuardAddressTakenIatEntryCount(value: number) {
    this.view.setUint32(108, value, true);
  }

  // 0x70: u32
  set GuardLongJumpTargetTable(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: u32
  set GuardLongJumpTargetCount(value: number) {
    this.view.setUint32(116, value, true);
  }

  // 0x78: u32
  set DynamicValueRelocTable(value: number) {
    this.view.setUint32(120, value, true);
  }

  // 0x7c: u32
  set CHPEMetadataPointer(value: number) {
    this.view.setUint32(124, value, true);
  }

  // 0x80: u32
  set GuardRFFailureRoutine(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: u32
  set GuardRFFailureRoutineFunctionPointer(value: number) {
    this.view.setUint32(132, value, true);
  }

  // 0x88: u32
  set DynamicValueRelocTableOffset(value: number) {
    this.view.setUint32(136, value, true);
  }

  // 0x8c: u16
  set DynamicValueRelocTableSection(value: number) {
    this.view.setUint16(140, value, true);
  }

  // 0x8e: u16
  set Reserved2(value: number) {
    this.view.setUint16(142, value, true);
  }

  // 0x90: u32
  set GuardRFVerifyStackPointerFunctionPointer(value: number) {
    this.view.setUint32(144, value, true);
  }

  // 0x94: u32
  set HotPatchTableOffset(value: number) {
    this.view.setUint32(148, value, true);
  }

  // 0x98: u32
  set Reserved3(value: number) {
    this.view.setUint32(152, value, true);
  }

  // 0x9c: u32
  set EnclaveConfigurationPointer(value: number) {
    this.view.setUint32(156, value, true);
  }

  // 0xa0: u32
  set VolatileMetadataPointer(value: number) {
    this.view.setUint32(160, value, true);
  }

  // 0xa4: u32
  set GuardEHContinuationTable(value: number) {
    this.view.setUint32(164, value, true);
  }

  // 0xa8: u32
  set GuardEHContinuationCount(value: number) {
    this.view.setUint32(168, value, true);
  }

  // 0xac: u32
  set GuardXFGCheckFunctionPointer(value: number) {
    this.view.setUint32(172, value, true);
  }

  // 0xb0: u32
  set GuardXFGDispatchFunctionPointer(value: number) {
    this.view.setUint32(176, value, true);
  }

  // 0xb4: u32
  set GuardXFGTableDispatchFunctionPointer(value: number) {
    this.view.setUint32(180, value, true);
  }

  // 0xb8: u32
  set CastGuardOsDeterminedFailureMode(value: number) {
    this.view.setUint32(184, value, true);
  }

  // 0xbc: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGE_LOAD_CONFIG_DIRECTORY64 (size: 312)
 */
export interface IMAGE_LOAD_CONFIG_DIRECTORY64 {
  /** u32 */
  Size: number;
  /** u32 */
  TimeDateStamp: number;
  /** u16 */
  MajorVersion: number;
  /** u16 */
  MinorVersion: number;
  /** u32 */
  GlobalFlagsClear: number;
  /** u32 */
  GlobalFlagsSet: number;
  /** u32 */
  CriticalSectionDefaultTimeout: number;
  /** u64 */
  DeCommitFreeBlockThreshold: number | bigint;
  /** u64 */
  DeCommitTotalFreeThreshold: number | bigint;
  /** u64 */
  LockPrefixTable: number | bigint;
  /** u64 */
  MaximumAllocationSize: number | bigint;
  /** u64 */
  VirtualMemoryThreshold: number | bigint;
  /** u64 */
  ProcessAffinityMask: number | bigint;
  /** u32 */
  ProcessHeapFlags: number;
  /** u16 */
  CSDVersion: number;
  /** u16 */
  DependentLoadFlags: number;
  /** u64 */
  EditList: number | bigint;
  /** u64 */
  SecurityCookie: number | bigint;
  /** u64 */
  SEHandlerTable: number | bigint;
  /** u64 */
  SEHandlerCount: number | bigint;
  /** u64 */
  GuardCFCheckFunctionPointer: number | bigint;
  /** u64 */
  GuardCFDispatchFunctionPointer: number | bigint;
  /** u64 */
  GuardCFFunctionTable: number | bigint;
  /** u64 */
  GuardCFFunctionCount: number | bigint;
  /** u32 */
  GuardFlags: number;
  /** Windows.Win32.System.Diagnostics.Debug.IMAGE_LOAD_CONFIG_CODE_INTEGRITY */
  CodeIntegrity: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  GuardAddressTakenIatEntryTable: number | bigint;
  /** u64 */
  GuardAddressTakenIatEntryCount: number | bigint;
  /** u64 */
  GuardLongJumpTargetTable: number | bigint;
  /** u64 */
  GuardLongJumpTargetCount: number | bigint;
  /** u64 */
  DynamicValueRelocTable: number | bigint;
  /** u64 */
  CHPEMetadataPointer: number | bigint;
  /** u64 */
  GuardRFFailureRoutine: number | bigint;
  /** u64 */
  GuardRFFailureRoutineFunctionPointer: number | bigint;
  /** u32 */
  DynamicValueRelocTableOffset: number;
  /** u16 */
  DynamicValueRelocTableSection: number;
  /** u16 */
  Reserved2: number;
  /** u64 */
  GuardRFVerifyStackPointerFunctionPointer: number | bigint;
  /** u32 */
  HotPatchTableOffset: number;
  /** u32 */
  Reserved3: number;
  /** u64 */
  EnclaveConfigurationPointer: number | bigint;
  /** u64 */
  VolatileMetadataPointer: number | bigint;
  /** u64 */
  GuardEHContinuationTable: number | bigint;
  /** u64 */
  GuardEHContinuationCount: number | bigint;
  /** u64 */
  GuardXFGCheckFunctionPointer: number | bigint;
  /** u64 */
  GuardXFGDispatchFunctionPointer: number | bigint;
  /** u64 */
  GuardXFGTableDispatchFunctionPointer: number | bigint;
  /** u64 */
  CastGuardOsDeterminedFailureMode: number | bigint;
}

export const sizeofIMAGE_LOAD_CONFIG_DIRECTORY64 = 312;

export function allocIMAGE_LOAD_CONFIG_DIRECTORY64(data?: Partial<IMAGE_LOAD_CONFIG_DIRECTORY64>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_LOAD_CONFIG_DIRECTORY64);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.TimeDateStamp !== undefined) view.setUint32(4, Number(data.TimeDateStamp), true);
  // 0x08: u16
  if (data?.MajorVersion !== undefined) view.setUint16(8, Number(data.MajorVersion), true);
  // 0x0a: u16
  if (data?.MinorVersion !== undefined) view.setUint16(10, Number(data.MinorVersion), true);
  // 0x0c: u32
  if (data?.GlobalFlagsClear !== undefined) view.setUint32(12, Number(data.GlobalFlagsClear), true);
  // 0x10: u32
  if (data?.GlobalFlagsSet !== undefined) view.setUint32(16, Number(data.GlobalFlagsSet), true);
  // 0x14: u32
  if (data?.CriticalSectionDefaultTimeout !== undefined) view.setUint32(20, Number(data.CriticalSectionDefaultTimeout), true);
  // 0x18: u64
  if (data?.DeCommitFreeBlockThreshold !== undefined) view.setBigUint64(24, util.toBigInt(data.DeCommitFreeBlockThreshold), true);
  // 0x20: u64
  if (data?.DeCommitTotalFreeThreshold !== undefined) view.setBigUint64(32, util.toBigInt(data.DeCommitTotalFreeThreshold), true);
  // 0x28: u64
  if (data?.LockPrefixTable !== undefined) view.setBigUint64(40, util.toBigInt(data.LockPrefixTable), true);
  // 0x30: u64
  if (data?.MaximumAllocationSize !== undefined) view.setBigUint64(48, util.toBigInt(data.MaximumAllocationSize), true);
  // 0x38: u64
  if (data?.VirtualMemoryThreshold !== undefined) view.setBigUint64(56, util.toBigInt(data.VirtualMemoryThreshold), true);
  // 0x40: u64
  if (data?.ProcessAffinityMask !== undefined) view.setBigUint64(64, util.toBigInt(data.ProcessAffinityMask), true);
  // 0x48: u32
  if (data?.ProcessHeapFlags !== undefined) view.setUint32(72, Number(data.ProcessHeapFlags), true);
  // 0x4c: u16
  if (data?.CSDVersion !== undefined) view.setUint16(76, Number(data.CSDVersion), true);
  // 0x4e: u16
  if (data?.DependentLoadFlags !== undefined) view.setUint16(78, Number(data.DependentLoadFlags), true);
  // 0x50: u64
  if (data?.EditList !== undefined) view.setBigUint64(80, util.toBigInt(data.EditList), true);
  // 0x58: u64
  if (data?.SecurityCookie !== undefined) view.setBigUint64(88, util.toBigInt(data.SecurityCookie), true);
  // 0x60: u64
  if (data?.SEHandlerTable !== undefined) view.setBigUint64(96, util.toBigInt(data.SEHandlerTable), true);
  // 0x68: u64
  if (data?.SEHandlerCount !== undefined) view.setBigUint64(104, util.toBigInt(data.SEHandlerCount), true);
  // 0x70: u64
  if (data?.GuardCFCheckFunctionPointer !== undefined) view.setBigUint64(112, util.toBigInt(data.GuardCFCheckFunctionPointer), true);
  // 0x78: u64
  if (data?.GuardCFDispatchFunctionPointer !== undefined) view.setBigUint64(120, util.toBigInt(data.GuardCFDispatchFunctionPointer), true);
  // 0x80: u64
  if (data?.GuardCFFunctionTable !== undefined) view.setBigUint64(128, util.toBigInt(data.GuardCFFunctionTable), true);
  // 0x88: u64
  if (data?.GuardCFFunctionCount !== undefined) view.setBigUint64(136, util.toBigInt(data.GuardCFFunctionCount), true);
  // 0x90: u32
  if (data?.GuardFlags !== undefined) view.setUint32(144, Number(data.GuardFlags), true);
  // 0x94: pad4
  // 0x98: pointer
  if (data?.CodeIntegrity !== undefined) view.setBigUint64(152, data.CodeIntegrity === null ? 0n : util.toBigInt(util.toPointer(data.CodeIntegrity)), true);
  // 0xa0: u64
  if (data?.GuardAddressTakenIatEntryTable !== undefined) view.setBigUint64(160, util.toBigInt(data.GuardAddressTakenIatEntryTable), true);
  // 0xa8: u64
  if (data?.GuardAddressTakenIatEntryCount !== undefined) view.setBigUint64(168, util.toBigInt(data.GuardAddressTakenIatEntryCount), true);
  // 0xb0: u64
  if (data?.GuardLongJumpTargetTable !== undefined) view.setBigUint64(176, util.toBigInt(data.GuardLongJumpTargetTable), true);
  // 0xb8: u64
  if (data?.GuardLongJumpTargetCount !== undefined) view.setBigUint64(184, util.toBigInt(data.GuardLongJumpTargetCount), true);
  // 0xc0: u64
  if (data?.DynamicValueRelocTable !== undefined) view.setBigUint64(192, util.toBigInt(data.DynamicValueRelocTable), true);
  // 0xc8: u64
  if (data?.CHPEMetadataPointer !== undefined) view.setBigUint64(200, util.toBigInt(data.CHPEMetadataPointer), true);
  // 0xd0: u64
  if (data?.GuardRFFailureRoutine !== undefined) view.setBigUint64(208, util.toBigInt(data.GuardRFFailureRoutine), true);
  // 0xd8: u64
  if (data?.GuardRFFailureRoutineFunctionPointer !== undefined) view.setBigUint64(216, util.toBigInt(data.GuardRFFailureRoutineFunctionPointer), true);
  // 0xe0: u32
  if (data?.DynamicValueRelocTableOffset !== undefined) view.setUint32(224, Number(data.DynamicValueRelocTableOffset), true);
  // 0xe4: u16
  if (data?.DynamicValueRelocTableSection !== undefined) view.setUint16(228, Number(data.DynamicValueRelocTableSection), true);
  // 0xe6: u16
  if (data?.Reserved2 !== undefined) view.setUint16(230, Number(data.Reserved2), true);
  // 0xe8: u64
  if (data?.GuardRFVerifyStackPointerFunctionPointer !== undefined) view.setBigUint64(232, util.toBigInt(data.GuardRFVerifyStackPointerFunctionPointer), true);
  // 0xf0: u32
  if (data?.HotPatchTableOffset !== undefined) view.setUint32(240, Number(data.HotPatchTableOffset), true);
  // 0xf4: u32
  if (data?.Reserved3 !== undefined) view.setUint32(244, Number(data.Reserved3), true);
  // 0xf8: u64
  if (data?.EnclaveConfigurationPointer !== undefined) view.setBigUint64(248, util.toBigInt(data.EnclaveConfigurationPointer), true);
  // 0x100: u64
  if (data?.VolatileMetadataPointer !== undefined) view.setBigUint64(256, util.toBigInt(data.VolatileMetadataPointer), true);
  // 0x108: u64
  if (data?.GuardEHContinuationTable !== undefined) view.setBigUint64(264, util.toBigInt(data.GuardEHContinuationTable), true);
  // 0x110: u64
  if (data?.GuardEHContinuationCount !== undefined) view.setBigUint64(272, util.toBigInt(data.GuardEHContinuationCount), true);
  // 0x118: u64
  if (data?.GuardXFGCheckFunctionPointer !== undefined) view.setBigUint64(280, util.toBigInt(data.GuardXFGCheckFunctionPointer), true);
  // 0x120: u64
  if (data?.GuardXFGDispatchFunctionPointer !== undefined) view.setBigUint64(288, util.toBigInt(data.GuardXFGDispatchFunctionPointer), true);
  // 0x128: u64
  if (data?.GuardXFGTableDispatchFunctionPointer !== undefined) view.setBigUint64(296, util.toBigInt(data.GuardXFGTableDispatchFunctionPointer), true);
  // 0x130: u64
  if (data?.CastGuardOsDeterminedFailureMode !== undefined) view.setBigUint64(304, util.toBigInt(data.CastGuardOsDeterminedFailureMode), true);
  return buf;
}

export class IMAGE_LOAD_CONFIG_DIRECTORY64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get TimeDateStamp(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u16
  get MajorVersion(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get MinorVersion(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u32
  get GlobalFlagsClear(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get GlobalFlagsSet(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get CriticalSectionDefaultTimeout(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u64
  get DeCommitFreeBlockThreshold(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u64
  get DeCommitTotalFreeThreshold(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: u64
  get LockPrefixTable(): number | bigint {
    return this.view.getBigUint64(40, true);
  }

  // 0x30: u64
  get MaximumAllocationSize(): number | bigint {
    return this.view.getBigUint64(48, true);
  }

  // 0x38: u64
  get VirtualMemoryThreshold(): number | bigint {
    return this.view.getBigUint64(56, true);
  }

  // 0x40: u64
  get ProcessAffinityMask(): number | bigint {
    return this.view.getBigUint64(64, true);
  }

  // 0x48: u32
  get ProcessHeapFlags(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u16
  get CSDVersion(): number {
    return this.view.getUint16(76, true);
  }

  // 0x4e: u16
  get DependentLoadFlags(): number {
    return this.view.getUint16(78, true);
  }

  // 0x50: u64
  get EditList(): number | bigint {
    return this.view.getBigUint64(80, true);
  }

  // 0x58: u64
  get SecurityCookie(): number | bigint {
    return this.view.getBigUint64(88, true);
  }

  // 0x60: u64
  get SEHandlerTable(): number | bigint {
    return this.view.getBigUint64(96, true);
  }

  // 0x68: u64
  get SEHandlerCount(): number | bigint {
    return this.view.getBigUint64(104, true);
  }

  // 0x70: u64
  get GuardCFCheckFunctionPointer(): number | bigint {
    return this.view.getBigUint64(112, true);
  }

  // 0x78: u64
  get GuardCFDispatchFunctionPointer(): number | bigint {
    return this.view.getBigUint64(120, true);
  }

  // 0x80: u64
  get GuardCFFunctionTable(): number | bigint {
    return this.view.getBigUint64(128, true);
  }

  // 0x88: u64
  get GuardCFFunctionCount(): number | bigint {
    return this.view.getBigUint64(136, true);
  }

  // 0x90: u32
  get GuardFlags(): number {
    return this.view.getUint32(144, true);
  }

  // 0x94: pad4

  // 0x98: pointer
  get CodeIntegrity(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(152, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xa0: u64
  get GuardAddressTakenIatEntryTable(): number | bigint {
    return this.view.getBigUint64(160, true);
  }

  // 0xa8: u64
  get GuardAddressTakenIatEntryCount(): number | bigint {
    return this.view.getBigUint64(168, true);
  }

  // 0xb0: u64
  get GuardLongJumpTargetTable(): number | bigint {
    return this.view.getBigUint64(176, true);
  }

  // 0xb8: u64
  get GuardLongJumpTargetCount(): number | bigint {
    return this.view.getBigUint64(184, true);
  }

  // 0xc0: u64
  get DynamicValueRelocTable(): number | bigint {
    return this.view.getBigUint64(192, true);
  }

  // 0xc8: u64
  get CHPEMetadataPointer(): number | bigint {
    return this.view.getBigUint64(200, true);
  }

  // 0xd0: u64
  get GuardRFFailureRoutine(): number | bigint {
    return this.view.getBigUint64(208, true);
  }

  // 0xd8: u64
  get GuardRFFailureRoutineFunctionPointer(): number | bigint {
    return this.view.getBigUint64(216, true);
  }

  // 0xe0: u32
  get DynamicValueRelocTableOffset(): number {
    return this.view.getUint32(224, true);
  }

  // 0xe4: u16
  get DynamicValueRelocTableSection(): number {
    return this.view.getUint16(228, true);
  }

  // 0xe6: u16
  get Reserved2(): number {
    return this.view.getUint16(230, true);
  }

  // 0xe8: u64
  get GuardRFVerifyStackPointerFunctionPointer(): number | bigint {
    return this.view.getBigUint64(232, true);
  }

  // 0xf0: u32
  get HotPatchTableOffset(): number {
    return this.view.getUint32(240, true);
  }

  // 0xf4: u32
  get Reserved3(): number {
    return this.view.getUint32(244, true);
  }

  // 0xf8: u64
  get EnclaveConfigurationPointer(): number | bigint {
    return this.view.getBigUint64(248, true);
  }

  // 0x100: u64
  get VolatileMetadataPointer(): number | bigint {
    return this.view.getBigUint64(256, true);
  }

  // 0x108: u64
  get GuardEHContinuationTable(): number | bigint {
    return this.view.getBigUint64(264, true);
  }

  // 0x110: u64
  get GuardEHContinuationCount(): number | bigint {
    return this.view.getBigUint64(272, true);
  }

  // 0x118: u64
  get GuardXFGCheckFunctionPointer(): number | bigint {
    return this.view.getBigUint64(280, true);
  }

  // 0x120: u64
  get GuardXFGDispatchFunctionPointer(): number | bigint {
    return this.view.getBigUint64(288, true);
  }

  // 0x128: u64
  get GuardXFGTableDispatchFunctionPointer(): number | bigint {
    return this.view.getBigUint64(296, true);
  }

  // 0x130: u64
  get CastGuardOsDeterminedFailureMode(): number | bigint {
    return this.view.getBigUint64(304, true);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set TimeDateStamp(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u16
  set MajorVersion(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set MinorVersion(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u32
  set GlobalFlagsClear(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set GlobalFlagsSet(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set CriticalSectionDefaultTimeout(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u64
  set DeCommitFreeBlockThreshold(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u64
  set DeCommitTotalFreeThreshold(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: u64
  set LockPrefixTable(value: number | bigint) {
    this.view.setBigUint64(40, util.toBigInt(value), true);
  }

  // 0x30: u64
  set MaximumAllocationSize(value: number | bigint) {
    this.view.setBigUint64(48, util.toBigInt(value), true);
  }

  // 0x38: u64
  set VirtualMemoryThreshold(value: number | bigint) {
    this.view.setBigUint64(56, util.toBigInt(value), true);
  }

  // 0x40: u64
  set ProcessAffinityMask(value: number | bigint) {
    this.view.setBigUint64(64, util.toBigInt(value), true);
  }

  // 0x48: u32
  set ProcessHeapFlags(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u16
  set CSDVersion(value: number) {
    this.view.setUint16(76, value, true);
  }

  // 0x4e: u16
  set DependentLoadFlags(value: number) {
    this.view.setUint16(78, value, true);
  }

  // 0x50: u64
  set EditList(value: number | bigint) {
    this.view.setBigUint64(80, util.toBigInt(value), true);
  }

  // 0x58: u64
  set SecurityCookie(value: number | bigint) {
    this.view.setBigUint64(88, util.toBigInt(value), true);
  }

  // 0x60: u64
  set SEHandlerTable(value: number | bigint) {
    this.view.setBigUint64(96, util.toBigInt(value), true);
  }

  // 0x68: u64
  set SEHandlerCount(value: number | bigint) {
    this.view.setBigUint64(104, util.toBigInt(value), true);
  }

  // 0x70: u64
  set GuardCFCheckFunctionPointer(value: number | bigint) {
    this.view.setBigUint64(112, util.toBigInt(value), true);
  }

  // 0x78: u64
  set GuardCFDispatchFunctionPointer(value: number | bigint) {
    this.view.setBigUint64(120, util.toBigInt(value), true);
  }

  // 0x80: u64
  set GuardCFFunctionTable(value: number | bigint) {
    this.view.setBigUint64(128, util.toBigInt(value), true);
  }

  // 0x88: u64
  set GuardCFFunctionCount(value: number | bigint) {
    this.view.setBigUint64(136, util.toBigInt(value), true);
  }

  // 0x90: u32
  set GuardFlags(value: number) {
    this.view.setUint32(144, value, true);
  }

  // 0x94: pad4

  // 0x98: pointer
  set CodeIntegrity(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(152, util.toBigInt(util.toPointer(value)), true);
  }

  // 0xa0: u64
  set GuardAddressTakenIatEntryTable(value: number | bigint) {
    this.view.setBigUint64(160, util.toBigInt(value), true);
  }

  // 0xa8: u64
  set GuardAddressTakenIatEntryCount(value: number | bigint) {
    this.view.setBigUint64(168, util.toBigInt(value), true);
  }

  // 0xb0: u64
  set GuardLongJumpTargetTable(value: number | bigint) {
    this.view.setBigUint64(176, util.toBigInt(value), true);
  }

  // 0xb8: u64
  set GuardLongJumpTargetCount(value: number | bigint) {
    this.view.setBigUint64(184, util.toBigInt(value), true);
  }

  // 0xc0: u64
  set DynamicValueRelocTable(value: number | bigint) {
    this.view.setBigUint64(192, util.toBigInt(value), true);
  }

  // 0xc8: u64
  set CHPEMetadataPointer(value: number | bigint) {
    this.view.setBigUint64(200, util.toBigInt(value), true);
  }

  // 0xd0: u64
  set GuardRFFailureRoutine(value: number | bigint) {
    this.view.setBigUint64(208, util.toBigInt(value), true);
  }

  // 0xd8: u64
  set GuardRFFailureRoutineFunctionPointer(value: number | bigint) {
    this.view.setBigUint64(216, util.toBigInt(value), true);
  }

  // 0xe0: u32
  set DynamicValueRelocTableOffset(value: number) {
    this.view.setUint32(224, value, true);
  }

  // 0xe4: u16
  set DynamicValueRelocTableSection(value: number) {
    this.view.setUint16(228, value, true);
  }

  // 0xe6: u16
  set Reserved2(value: number) {
    this.view.setUint16(230, value, true);
  }

  // 0xe8: u64
  set GuardRFVerifyStackPointerFunctionPointer(value: number | bigint) {
    this.view.setBigUint64(232, util.toBigInt(value), true);
  }

  // 0xf0: u32
  set HotPatchTableOffset(value: number) {
    this.view.setUint32(240, value, true);
  }

  // 0xf4: u32
  set Reserved3(value: number) {
    this.view.setUint32(244, value, true);
  }

  // 0xf8: u64
  set EnclaveConfigurationPointer(value: number | bigint) {
    this.view.setBigUint64(248, util.toBigInt(value), true);
  }

  // 0x100: u64
  set VolatileMetadataPointer(value: number | bigint) {
    this.view.setBigUint64(256, util.toBigInt(value), true);
  }

  // 0x108: u64
  set GuardEHContinuationTable(value: number | bigint) {
    this.view.setBigUint64(264, util.toBigInt(value), true);
  }

  // 0x110: u64
  set GuardEHContinuationCount(value: number | bigint) {
    this.view.setBigUint64(272, util.toBigInt(value), true);
  }

  // 0x118: u64
  set GuardXFGCheckFunctionPointer(value: number | bigint) {
    this.view.setBigUint64(280, util.toBigInt(value), true);
  }

  // 0x120: u64
  set GuardXFGDispatchFunctionPointer(value: number | bigint) {
    this.view.setBigUint64(288, util.toBigInt(value), true);
  }

  // 0x128: u64
  set GuardXFGTableDispatchFunctionPointer(value: number | bigint) {
    this.view.setBigUint64(296, util.toBigInt(value), true);
  }

  // 0x130: u64
  set CastGuardOsDeterminedFailureMode(value: number | bigint) {
    this.view.setBigUint64(304, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY (size: 16)
 */
export interface IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY {
  /** u32 */
  BeginAddress: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIMAGE_ARM64_RUNTIME_FUNCTION_ENTRY = 16;

export function allocIMAGE_ARM64_RUNTIME_FUNCTION_ENTRY(data?: Partial<IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_ARM64_RUNTIME_FUNCTION_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BeginAddress !== undefined) view.setUint32(0, Number(data.BeginAddress), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class IMAGE_ARM64_RUNTIME_FUNCTION_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get BeginAddress(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set BeginAddress(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGE_RUNTIME_FUNCTION_ENTRY (size: 16)
 */
export interface IMAGE_RUNTIME_FUNCTION_ENTRY {
  /** u32 */
  BeginAddress: number;
  /** u32 */
  EndAddress: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIMAGE_RUNTIME_FUNCTION_ENTRY = 16;

export function allocIMAGE_RUNTIME_FUNCTION_ENTRY(data?: Partial<IMAGE_RUNTIME_FUNCTION_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_RUNTIME_FUNCTION_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BeginAddress !== undefined) view.setUint32(0, Number(data.BeginAddress), true);
  // 0x04: u32
  if (data?.EndAddress !== undefined) view.setUint32(4, Number(data.EndAddress), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class IMAGE_RUNTIME_FUNCTION_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get BeginAddress(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get EndAddress(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set BeginAddress(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set EndAddress(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGE_DEBUG_DIRECTORY (size: 32)
 */
export interface IMAGE_DEBUG_DIRECTORY {
  /** u32 */
  Characteristics: number;
  /** u32 */
  TimeDateStamp: number;
  /** u16 */
  MajorVersion: number;
  /** u16 */
  MinorVersion: number;
  /** Windows.Win32.System.Diagnostics.Debug.IMAGE_DEBUG_TYPE */
  Type: IMAGE_DEBUG_TYPE;
  /** u32 */
  SizeOfData: number;
  /** u32 */
  AddressOfRawData: number;
  /** u32 */
  PointerToRawData: number;
}

export const sizeofIMAGE_DEBUG_DIRECTORY = 32;

export function allocIMAGE_DEBUG_DIRECTORY(data?: Partial<IMAGE_DEBUG_DIRECTORY>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_DEBUG_DIRECTORY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Characteristics !== undefined) view.setUint32(0, Number(data.Characteristics), true);
  // 0x04: u32
  if (data?.TimeDateStamp !== undefined) view.setUint32(4, Number(data.TimeDateStamp), true);
  // 0x08: u16
  if (data?.MajorVersion !== undefined) view.setUint16(8, Number(data.MajorVersion), true);
  // 0x0a: u16
  if (data?.MinorVersion !== undefined) view.setUint16(10, Number(data.MinorVersion), true);
  // 0x0c: u32
  if (data?.Type !== undefined) view.setUint32(12, Number(data.Type), true);
  // 0x10: u32
  if (data?.SizeOfData !== undefined) view.setUint32(16, Number(data.SizeOfData), true);
  // 0x14: u32
  if (data?.AddressOfRawData !== undefined) view.setUint32(20, Number(data.AddressOfRawData), true);
  // 0x18: u32
  if (data?.PointerToRawData !== undefined) view.setUint32(24, Number(data.PointerToRawData), true);
  // 0x1c: pad4
  return buf;
}

export class IMAGE_DEBUG_DIRECTORYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Characteristics(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get TimeDateStamp(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u16
  get MajorVersion(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get MinorVersion(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u32
  get Type(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get SizeOfData(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get AddressOfRawData(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get PointerToRawData(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set Characteristics(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set TimeDateStamp(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u16
  set MajorVersion(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set MinorVersion(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u32
  set Type(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set SizeOfData(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set AddressOfRawData(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set PointerToRawData(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGE_COFF_SYMBOLS_HEADER (size: 32)
 */
export interface IMAGE_COFF_SYMBOLS_HEADER {
  /** u32 */
  NumberOfSymbols: number;
  /** u32 */
  LvaToFirstSymbol: number;
  /** u32 */
  NumberOfLinenumbers: number;
  /** u32 */
  LvaToFirstLinenumber: number;
  /** u32 */
  RvaToFirstByteOfCode: number;
  /** u32 */
  RvaToLastByteOfCode: number;
  /** u32 */
  RvaToFirstByteOfData: number;
  /** u32 */
  RvaToLastByteOfData: number;
}

export const sizeofIMAGE_COFF_SYMBOLS_HEADER = 32;

export function allocIMAGE_COFF_SYMBOLS_HEADER(data?: Partial<IMAGE_COFF_SYMBOLS_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_COFF_SYMBOLS_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumberOfSymbols !== undefined) view.setUint32(0, Number(data.NumberOfSymbols), true);
  // 0x04: u32
  if (data?.LvaToFirstSymbol !== undefined) view.setUint32(4, Number(data.LvaToFirstSymbol), true);
  // 0x08: u32
  if (data?.NumberOfLinenumbers !== undefined) view.setUint32(8, Number(data.NumberOfLinenumbers), true);
  // 0x0c: u32
  if (data?.LvaToFirstLinenumber !== undefined) view.setUint32(12, Number(data.LvaToFirstLinenumber), true);
  // 0x10: u32
  if (data?.RvaToFirstByteOfCode !== undefined) view.setUint32(16, Number(data.RvaToFirstByteOfCode), true);
  // 0x14: u32
  if (data?.RvaToLastByteOfCode !== undefined) view.setUint32(20, Number(data.RvaToLastByteOfCode), true);
  // 0x18: u32
  if (data?.RvaToFirstByteOfData !== undefined) view.setUint32(24, Number(data.RvaToFirstByteOfData), true);
  // 0x1c: u32
  if (data?.RvaToLastByteOfData !== undefined) view.setUint32(28, Number(data.RvaToLastByteOfData), true);
  return buf;
}

export class IMAGE_COFF_SYMBOLS_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumberOfSymbols(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get LvaToFirstSymbol(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get NumberOfLinenumbers(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get LvaToFirstLinenumber(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get RvaToFirstByteOfCode(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get RvaToLastByteOfCode(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get RvaToFirstByteOfData(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get RvaToLastByteOfData(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: u32
  set NumberOfSymbols(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set LvaToFirstSymbol(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set NumberOfLinenumbers(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set LvaToFirstLinenumber(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set RvaToFirstByteOfCode(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set RvaToLastByteOfCode(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set RvaToFirstByteOfData(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set RvaToLastByteOfData(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.FPO_DATA (size: 16)
 */
export interface FPO_DATA {
  /** u32 */
  ulOffStart: number;
  /** u32 */
  cbProcSize: number;
  /** u32 */
  cdwLocals: number;
  /** u16 */
  cdwParams: number;
  /** u16 */
  _bitfield: number;
}

export const sizeofFPO_DATA = 16;

export function allocFPO_DATA(data?: Partial<FPO_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofFPO_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulOffStart !== undefined) view.setUint32(0, Number(data.ulOffStart), true);
  // 0x04: u32
  if (data?.cbProcSize !== undefined) view.setUint32(4, Number(data.cbProcSize), true);
  // 0x08: u32
  if (data?.cdwLocals !== undefined) view.setUint32(8, Number(data.cdwLocals), true);
  // 0x0c: u16
  if (data?.cdwParams !== undefined) view.setUint16(12, Number(data.cdwParams), true);
  // 0x0e: u16
  if (data?._bitfield !== undefined) view.setUint16(14, Number(data._bitfield), true);
  return buf;
}

export class FPO_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulOffStart(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbProcSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cdwLocals(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u16
  get cdwParams(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get _bitfield(): number {
    return this.view.getUint16(14, true);
  }

  // 0x00: u32
  set ulOffStart(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbProcSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cdwLocals(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u16
  set cdwParams(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set _bitfield(value: number) {
    this.view.setUint16(14, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGE_FUNCTION_ENTRY (size: 16)
 */
export interface IMAGE_FUNCTION_ENTRY {
  /** u32 */
  StartingAddress: number;
  /** u32 */
  EndingAddress: number;
  /** u32 */
  EndOfPrologue: number;
}

export const sizeofIMAGE_FUNCTION_ENTRY = 16;

export function allocIMAGE_FUNCTION_ENTRY(data?: Partial<IMAGE_FUNCTION_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_FUNCTION_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.StartingAddress !== undefined) view.setUint32(0, Number(data.StartingAddress), true);
  // 0x04: u32
  if (data?.EndingAddress !== undefined) view.setUint32(4, Number(data.EndingAddress), true);
  // 0x08: u32
  if (data?.EndOfPrologue !== undefined) view.setUint32(8, Number(data.EndOfPrologue), true);
  // 0x0c: pad4
  return buf;
}

export class IMAGE_FUNCTION_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get StartingAddress(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get EndingAddress(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get EndOfPrologue(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set StartingAddress(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set EndingAddress(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set EndOfPrologue(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGE_FUNCTION_ENTRY64 (size: 24)
 */
export interface IMAGE_FUNCTION_ENTRY64 {
  /** u64 */
  StartingAddress: number | bigint;
  /** u64 */
  EndingAddress: number | bigint;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIMAGE_FUNCTION_ENTRY64 = 24;

export function allocIMAGE_FUNCTION_ENTRY64(data?: Partial<IMAGE_FUNCTION_ENTRY64>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_FUNCTION_ENTRY64);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.StartingAddress !== undefined) view.setBigUint64(0, util.toBigInt(data.StartingAddress), true);
  // 0x08: u64
  if (data?.EndingAddress !== undefined) view.setBigUint64(8, util.toBigInt(data.EndingAddress), true);
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class IMAGE_FUNCTION_ENTRY64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get StartingAddress(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get EndingAddress(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u64
  set StartingAddress(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set EndingAddress(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGE_COR20_HEADER (size: 80)
 */
export interface IMAGE_COR20_HEADER {
  /** u32 */
  cb: number;
  /** u16 */
  MajorRuntimeVersion: number;
  /** u16 */
  MinorRuntimeVersion: number;
  /** Windows.Win32.System.Diagnostics.Debug.IMAGE_DATA_DIRECTORY */
  MetaData: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.IMAGE_DATA_DIRECTORY */
  Resources: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.IMAGE_DATA_DIRECTORY */
  StrongNameSignature: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.IMAGE_DATA_DIRECTORY */
  CodeManagerTable: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.IMAGE_DATA_DIRECTORY */
  VTableFixups: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.IMAGE_DATA_DIRECTORY */
  ExportAddressTableJumps: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.IMAGE_DATA_DIRECTORY */
  ManagedNativeHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIMAGE_COR20_HEADER = 80;

export function allocIMAGE_COR20_HEADER(data?: Partial<IMAGE_COR20_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_COR20_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cb !== undefined) view.setUint32(0, Number(data.cb), true);
  // 0x04: u16
  if (data?.MajorRuntimeVersion !== undefined) view.setUint16(4, Number(data.MajorRuntimeVersion), true);
  // 0x06: u16
  if (data?.MinorRuntimeVersion !== undefined) view.setUint16(6, Number(data.MinorRuntimeVersion), true);
  // 0x08: pointer
  if (data?.MetaData !== undefined) view.setBigUint64(8, data.MetaData === null ? 0n : util.toBigInt(util.toPointer(data.MetaData)), true);
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(24, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x20: pointer
  if (data?.Resources !== undefined) view.setBigUint64(32, data.Resources === null ? 0n : util.toBigInt(util.toPointer(data.Resources)), true);
  // 0x28: pointer
  if (data?.StrongNameSignature !== undefined) view.setBigUint64(40, data.StrongNameSignature === null ? 0n : util.toBigInt(util.toPointer(data.StrongNameSignature)), true);
  // 0x30: pointer
  if (data?.CodeManagerTable !== undefined) view.setBigUint64(48, data.CodeManagerTable === null ? 0n : util.toBigInt(util.toPointer(data.CodeManagerTable)), true);
  // 0x38: pointer
  if (data?.VTableFixups !== undefined) view.setBigUint64(56, data.VTableFixups === null ? 0n : util.toBigInt(util.toPointer(data.VTableFixups)), true);
  // 0x40: pointer
  if (data?.ExportAddressTableJumps !== undefined) view.setBigUint64(64, data.ExportAddressTableJumps === null ? 0n : util.toBigInt(util.toPointer(data.ExportAddressTableJumps)), true);
  // 0x48: pointer
  if (data?.ManagedNativeHeader !== undefined) view.setBigUint64(72, data.ManagedNativeHeader === null ? 0n : util.toBigInt(util.toPointer(data.ManagedNativeHeader)), true);
  return buf;
}

export class IMAGE_COR20_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cb(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get MajorRuntimeVersion(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get MinorRuntimeVersion(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: pointer
  get MetaData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get Flags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get Resources(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get StrongNameSignature(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get CodeManagerTable(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get VTableFixups(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get ExportAddressTableJumps(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get ManagedNativeHeader(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cb(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set MajorRuntimeVersion(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set MinorRuntimeVersion(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: pointer
  set MetaData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set Flags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set Resources(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set StrongNameSignature(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set CodeManagerTable(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set VTableFixups(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set ExportAddressTableJumps(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set ManagedNativeHeader(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.WAITCHAIN_NODE_INFO (size: 16)
 */
export interface WAITCHAIN_NODE_INFO {
  /** Windows.Win32.System.Diagnostics.Debug.WCT_OBJECT_TYPE */
  ObjectType: WCT_OBJECT_TYPE;
  /** Windows.Win32.System.Diagnostics.Debug.WCT_OBJECT_STATUS */
  ObjectStatus: WCT_OBJECT_STATUS;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWAITCHAIN_NODE_INFO = 16;

export function allocWAITCHAIN_NODE_INFO(data?: Partial<WAITCHAIN_NODE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWAITCHAIN_NODE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ObjectType !== undefined) view.setInt32(0, Number(data.ObjectType), true);
  // 0x04: i32
  if (data?.ObjectStatus !== undefined) view.setInt32(4, Number(data.ObjectStatus), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class WAITCHAIN_NODE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get ObjectType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get ObjectStatus(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set ObjectType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set ObjectStatus(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_LOCATION_DESCRIPTOR (size: 8)
 */
export interface MINIDUMP_LOCATION_DESCRIPTOR {
  /** u32 */
  DataSize: number;
  /** u32 */
  Rva: number;
}

export const sizeofMINIDUMP_LOCATION_DESCRIPTOR = 8;

export function allocMINIDUMP_LOCATION_DESCRIPTOR(data?: Partial<MINIDUMP_LOCATION_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_LOCATION_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DataSize !== undefined) view.setUint32(0, Number(data.DataSize), true);
  // 0x04: u32
  if (data?.Rva !== undefined) view.setUint32(4, Number(data.Rva), true);
  return buf;
}

export class MINIDUMP_LOCATION_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get DataSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Rva(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set DataSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Rva(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_LOCATION_DESCRIPTOR64 (size: 16)
 */
export interface MINIDUMP_LOCATION_DESCRIPTOR64 {
  /** u64 */
  DataSize: number | bigint;
  /** u64 */
  Rva: number | bigint;
}

export const sizeofMINIDUMP_LOCATION_DESCRIPTOR64 = 16;

export function allocMINIDUMP_LOCATION_DESCRIPTOR64(data?: Partial<MINIDUMP_LOCATION_DESCRIPTOR64>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_LOCATION_DESCRIPTOR64);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.DataSize !== undefined) view.setBigUint64(0, util.toBigInt(data.DataSize), true);
  // 0x08: u64
  if (data?.Rva !== undefined) view.setBigUint64(8, util.toBigInt(data.Rva), true);
  return buf;
}

export class MINIDUMP_LOCATION_DESCRIPTOR64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get DataSize(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get Rva(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u64
  set DataSize(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set Rva(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_MEMORY_DESCRIPTOR (size: 16)
 */
export interface MINIDUMP_MEMORY_DESCRIPTOR {
  /** u64 */
  StartOfMemoryRange: number | bigint;
  /** Windows.Win32.System.Diagnostics.Debug.MINIDUMP_LOCATION_DESCRIPTOR */
  Memory: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMINIDUMP_MEMORY_DESCRIPTOR = 16;

export function allocMINIDUMP_MEMORY_DESCRIPTOR(data?: Partial<MINIDUMP_MEMORY_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_MEMORY_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.StartOfMemoryRange !== undefined) view.setBigUint64(0, util.toBigInt(data.StartOfMemoryRange), true);
  // 0x08: pointer
  if (data?.Memory !== undefined) view.setBigUint64(8, data.Memory === null ? 0n : util.toBigInt(util.toPointer(data.Memory)), true);
  return buf;
}

export class MINIDUMP_MEMORY_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get StartOfMemoryRange(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: pointer
  get Memory(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u64
  set StartOfMemoryRange(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: pointer
  set Memory(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_MEMORY_DESCRIPTOR64 (size: 16)
 */
export interface MINIDUMP_MEMORY_DESCRIPTOR64 {
  /** u64 */
  StartOfMemoryRange: number | bigint;
  /** u64 */
  DataSize: number | bigint;
}

export const sizeofMINIDUMP_MEMORY_DESCRIPTOR64 = 16;

export function allocMINIDUMP_MEMORY_DESCRIPTOR64(data?: Partial<MINIDUMP_MEMORY_DESCRIPTOR64>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_MEMORY_DESCRIPTOR64);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.StartOfMemoryRange !== undefined) view.setBigUint64(0, util.toBigInt(data.StartOfMemoryRange), true);
  // 0x08: u64
  if (data?.DataSize !== undefined) view.setBigUint64(8, util.toBigInt(data.DataSize), true);
  return buf;
}

export class MINIDUMP_MEMORY_DESCRIPTOR64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get StartOfMemoryRange(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get DataSize(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u64
  set StartOfMemoryRange(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set DataSize(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_HEADER (size: 40)
 */
export interface MINIDUMP_HEADER {
  /** u32 */
  Signature: number;
  /** u32 */
  Version: number;
  /** u32 */
  NumberOfStreams: number;
  /** u32 */
  StreamDirectoryRva: number;
  /** u32 */
  CheckSum: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  Flags: number | bigint;
}

export const sizeofMINIDUMP_HEADER = 40;

export function allocMINIDUMP_HEADER(data?: Partial<MINIDUMP_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Signature !== undefined) view.setUint32(0, Number(data.Signature), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u32
  if (data?.NumberOfStreams !== undefined) view.setUint32(8, Number(data.NumberOfStreams), true);
  // 0x0c: u32
  if (data?.StreamDirectoryRva !== undefined) view.setUint32(12, Number(data.StreamDirectoryRva), true);
  // 0x10: u32
  if (data?.CheckSum !== undefined) view.setUint32(16, Number(data.CheckSum), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(24, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x20: u64
  if (data?.Flags !== undefined) view.setBigUint64(32, util.toBigInt(data.Flags), true);
  return buf;
}

export class MINIDUMP_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Signature(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Version(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get NumberOfStreams(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get StreamDirectoryRva(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get CheckSum(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u64
  get Flags(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x00: u32
  set Signature(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Version(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set NumberOfStreams(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set StreamDirectoryRva(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set CheckSum(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u64
  set Flags(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_DIRECTORY (size: 16)
 */
export interface MINIDUMP_DIRECTORY {
  /** u32 */
  StreamType: number;
  /** Windows.Win32.System.Diagnostics.Debug.MINIDUMP_LOCATION_DESCRIPTOR */
  Location: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMINIDUMP_DIRECTORY = 16;

export function allocMINIDUMP_DIRECTORY(data?: Partial<MINIDUMP_DIRECTORY>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_DIRECTORY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.StreamType !== undefined) view.setUint32(0, Number(data.StreamType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Location !== undefined) view.setBigUint64(8, data.Location === null ? 0n : util.toBigInt(util.toPointer(data.Location)), true);
  return buf;
}

export class MINIDUMP_DIRECTORYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get StreamType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Location(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set StreamType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Location(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_STRING (size: 16)
 */
export interface MINIDUMP_STRING {
  /** u32 */
  Length: number;
  /** array */
  Buffer: Deno.PointerValue | null;
}

export const sizeofMINIDUMP_STRING = 16;

export function allocMINIDUMP_STRING(data?: Partial<MINIDUMP_STRING>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_STRING);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Buffer !== undefined) view.setBigUint64(8, data.Buffer === null ? 0n : util.toBigInt(util.toPointer(data.Buffer)), true);
  return buf;
}

export class MINIDUMP_STRINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Length(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Buffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Length(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Buffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * _X86CpuInfo_e__Struct (size: 24)
 */
export interface _X86CpuInfo_e__Struct {
  /** array */
  VendorId: Deno.PointerValue | null;
  /** u32 */
  VersionInformation: number;
  /** u32 */
  FeatureInformation: number;
  /** u32 */
  AMDExtendedCpuFeatures: number;
}

export const sizeof_X86CpuInfo_e__Struct = 24;

export function alloc_X86CpuInfo_e__Struct(data?: Partial<_X86CpuInfo_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_X86CpuInfo_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.VendorId !== undefined) view.setBigUint64(0, data.VendorId === null ? 0n : util.toBigInt(util.toPointer(data.VendorId)), true);
  // 0x08: u32
  if (data?.VersionInformation !== undefined) view.setUint32(8, Number(data.VersionInformation), true);
  // 0x0c: u32
  if (data?.FeatureInformation !== undefined) view.setUint32(12, Number(data.FeatureInformation), true);
  // 0x10: u32
  if (data?.AMDExtendedCpuFeatures !== undefined) view.setUint32(16, Number(data.AMDExtendedCpuFeatures), true);
  // 0x14: pad4
  return buf;
}

export class _X86CpuInfo_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get VendorId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get VersionInformation(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get FeatureInformation(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get AMDExtendedCpuFeatures(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set VendorId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set VersionInformation(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set FeatureInformation(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set AMDExtendedCpuFeatures(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * _OtherCpuInfo_e__Struct (size: 8)
 */
export interface _OtherCpuInfo_e__Struct {
  /** array */
  ProcessorFeatures: Deno.PointerValue | null;
}

export const sizeof_OtherCpuInfo_e__Struct = 8;

export function alloc_OtherCpuInfo_e__Struct(data?: Partial<_OtherCpuInfo_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_OtherCpuInfo_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ProcessorFeatures !== undefined) view.setBigUint64(0, data.ProcessorFeatures === null ? 0n : util.toBigInt(util.toPointer(data.ProcessorFeatures)), true);
  return buf;
}

export class _OtherCpuInfo_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ProcessorFeatures(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ProcessorFeatures(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.CPU_INFORMATION (size: 16)
 */
export interface CPU_INFORMATION {
  /** _X86CpuInfo_e__Struct */
  X86CpuInfo: Uint8Array | Deno.PointerValue | null;
  /** _OtherCpuInfo_e__Struct */
  OtherCpuInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCPU_INFORMATION = 16;

export function allocCPU_INFORMATION(data?: Partial<CPU_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofCPU_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.X86CpuInfo !== undefined) view.setBigUint64(0, data.X86CpuInfo === null ? 0n : util.toBigInt(util.toPointer(data.X86CpuInfo)), true);
  // 0x08: pointer
  if (data?.OtherCpuInfo !== undefined) view.setBigUint64(8, data.OtherCpuInfo === null ? 0n : util.toBigInt(util.toPointer(data.OtherCpuInfo)), true);
  return buf;
}

export class CPU_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get X86CpuInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get OtherCpuInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set X86CpuInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set OtherCpuInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_SYSTEM_INFO (size: 56)
 */
export interface MINIDUMP_SYSTEM_INFO {
  /** Windows.Win32.System.Diagnostics.Debug.PROCESSOR_ARCHITECTURE */
  ProcessorArchitecture: PROCESSOR_ARCHITECTURE;
  /** u16 */
  ProcessorLevel: number;
  /** u16 */
  ProcessorRevision: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  MajorVersion: number;
  /** u32 */
  MinorVersion: number;
  /** u32 */
  BuildNumber: number;
  /** Windows.Win32.System.Diagnostics.Debug.VER_PLATFORM */
  PlatformId: VER_PLATFORM;
  /** u32 */
  CSDVersionRva: number;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.CPU_INFORMATION */
  Cpu: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMINIDUMP_SYSTEM_INFO = 56;

export function allocMINIDUMP_SYSTEM_INFO(data?: Partial<MINIDUMP_SYSTEM_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_SYSTEM_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ProcessorArchitecture !== undefined) view.setUint16(0, Number(data.ProcessorArchitecture), true);
  // 0x02: u16
  if (data?.ProcessorLevel !== undefined) view.setUint16(2, Number(data.ProcessorLevel), true);
  // 0x04: u16
  if (data?.ProcessorRevision !== undefined) view.setUint16(4, Number(data.ProcessorRevision), true);
  // 0x06: pad2
  // 0x08: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(8, data.Anonymous1 === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous1)), true);
  // 0x10: u32
  if (data?.MajorVersion !== undefined) view.setUint32(16, Number(data.MajorVersion), true);
  // 0x14: u32
  if (data?.MinorVersion !== undefined) view.setUint32(20, Number(data.MinorVersion), true);
  // 0x18: u32
  if (data?.BuildNumber !== undefined) view.setUint32(24, Number(data.BuildNumber), true);
  // 0x1c: u32
  if (data?.PlatformId !== undefined) view.setUint32(28, Number(data.PlatformId), true);
  // 0x20: u32
  if (data?.CSDVersionRva !== undefined) view.setUint32(32, Number(data.CSDVersionRva), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(40, data.Anonymous2 === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous2)), true);
  // 0x30: pointer
  if (data?.Cpu !== undefined) view.setBigUint64(48, data.Cpu === null ? 0n : util.toBigInt(util.toPointer(data.Cpu)), true);
  return buf;
}

export class MINIDUMP_SYSTEM_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get ProcessorArchitecture(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get ProcessorLevel(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get ProcessorRevision(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: pad2

  // 0x08: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get MajorVersion(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get MinorVersion(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get BuildNumber(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get PlatformId(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get CSDVersionRva(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get Cpu(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set ProcessorArchitecture(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set ProcessorLevel(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set ProcessorRevision(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: pad2

  // 0x08: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set MajorVersion(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set MinorVersion(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set BuildNumber(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set PlatformId(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set CSDVersionRva(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set Cpu(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_THREAD (size: 40)
 */
export interface MINIDUMP_THREAD {
  /** u32 */
  ThreadId: number;
  /** u32 */
  SuspendCount: number;
  /** u32 */
  PriorityClass: number;
  /** u32 */
  Priority: number;
  /** u64 */
  Teb: number | bigint;
  /** Windows.Win32.System.Diagnostics.Debug.MINIDUMP_MEMORY_DESCRIPTOR */
  Stack: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.MINIDUMP_LOCATION_DESCRIPTOR */
  ThreadContext: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMINIDUMP_THREAD = 40;

export function allocMINIDUMP_THREAD(data?: Partial<MINIDUMP_THREAD>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_THREAD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ThreadId !== undefined) view.setUint32(0, Number(data.ThreadId), true);
  // 0x04: u32
  if (data?.SuspendCount !== undefined) view.setUint32(4, Number(data.SuspendCount), true);
  // 0x08: u32
  if (data?.PriorityClass !== undefined) view.setUint32(8, Number(data.PriorityClass), true);
  // 0x0c: u32
  if (data?.Priority !== undefined) view.setUint32(12, Number(data.Priority), true);
  // 0x10: u64
  if (data?.Teb !== undefined) view.setBigUint64(16, util.toBigInt(data.Teb), true);
  // 0x18: pointer
  if (data?.Stack !== undefined) view.setBigUint64(24, data.Stack === null ? 0n : util.toBigInt(util.toPointer(data.Stack)), true);
  // 0x20: pointer
  if (data?.ThreadContext !== undefined) view.setBigUint64(32, data.ThreadContext === null ? 0n : util.toBigInt(util.toPointer(data.ThreadContext)), true);
  return buf;
}

export class MINIDUMP_THREADView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ThreadId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SuspendCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get PriorityClass(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Priority(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u64
  get Teb(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: pointer
  get Stack(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get ThreadContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ThreadId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SuspendCount(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set PriorityClass(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Priority(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u64
  set Teb(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: pointer
  set Stack(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set ThreadContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_THREAD_LIST (size: 16)
 */
export interface MINIDUMP_THREAD_LIST {
  /** u32 */
  NumberOfThreads: number;
  /** array */
  Threads: Deno.PointerValue | null;
}

export const sizeofMINIDUMP_THREAD_LIST = 16;

export function allocMINIDUMP_THREAD_LIST(data?: Partial<MINIDUMP_THREAD_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_THREAD_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumberOfThreads !== undefined) view.setUint32(0, Number(data.NumberOfThreads), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Threads !== undefined) view.setBigUint64(8, data.Threads === null ? 0n : util.toBigInt(util.toPointer(data.Threads)), true);
  return buf;
}

export class MINIDUMP_THREAD_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumberOfThreads(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Threads(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set NumberOfThreads(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Threads(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_THREAD_EX (size: 48)
 */
export interface MINIDUMP_THREAD_EX {
  /** u32 */
  ThreadId: number;
  /** u32 */
  SuspendCount: number;
  /** u32 */
  PriorityClass: number;
  /** u32 */
  Priority: number;
  /** u64 */
  Teb: number | bigint;
  /** Windows.Win32.System.Diagnostics.Debug.MINIDUMP_MEMORY_DESCRIPTOR */
  Stack: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.MINIDUMP_LOCATION_DESCRIPTOR */
  ThreadContext: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.MINIDUMP_MEMORY_DESCRIPTOR */
  BackingStore: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMINIDUMP_THREAD_EX = 48;

export function allocMINIDUMP_THREAD_EX(data?: Partial<MINIDUMP_THREAD_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_THREAD_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ThreadId !== undefined) view.setUint32(0, Number(data.ThreadId), true);
  // 0x04: u32
  if (data?.SuspendCount !== undefined) view.setUint32(4, Number(data.SuspendCount), true);
  // 0x08: u32
  if (data?.PriorityClass !== undefined) view.setUint32(8, Number(data.PriorityClass), true);
  // 0x0c: u32
  if (data?.Priority !== undefined) view.setUint32(12, Number(data.Priority), true);
  // 0x10: u64
  if (data?.Teb !== undefined) view.setBigUint64(16, util.toBigInt(data.Teb), true);
  // 0x18: pointer
  if (data?.Stack !== undefined) view.setBigUint64(24, data.Stack === null ? 0n : util.toBigInt(util.toPointer(data.Stack)), true);
  // 0x20: pointer
  if (data?.ThreadContext !== undefined) view.setBigUint64(32, data.ThreadContext === null ? 0n : util.toBigInt(util.toPointer(data.ThreadContext)), true);
  // 0x28: pointer
  if (data?.BackingStore !== undefined) view.setBigUint64(40, data.BackingStore === null ? 0n : util.toBigInt(util.toPointer(data.BackingStore)), true);
  return buf;
}

export class MINIDUMP_THREAD_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ThreadId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SuspendCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get PriorityClass(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Priority(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u64
  get Teb(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: pointer
  get Stack(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get ThreadContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get BackingStore(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ThreadId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SuspendCount(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set PriorityClass(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Priority(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u64
  set Teb(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: pointer
  set Stack(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set ThreadContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set BackingStore(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_THREAD_EX_LIST (size: 16)
 */
export interface MINIDUMP_THREAD_EX_LIST {
  /** u32 */
  NumberOfThreads: number;
  /** array */
  Threads: Deno.PointerValue | null;
}

export const sizeofMINIDUMP_THREAD_EX_LIST = 16;

export function allocMINIDUMP_THREAD_EX_LIST(data?: Partial<MINIDUMP_THREAD_EX_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_THREAD_EX_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumberOfThreads !== undefined) view.setUint32(0, Number(data.NumberOfThreads), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Threads !== undefined) view.setBigUint64(8, data.Threads === null ? 0n : util.toBigInt(util.toPointer(data.Threads)), true);
  return buf;
}

export class MINIDUMP_THREAD_EX_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumberOfThreads(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Threads(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set NumberOfThreads(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Threads(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_EXCEPTION (size: 40)
 */
export interface MINIDUMP_EXCEPTION {
  /** u32 */
  ExceptionCode: number;
  /** u32 */
  ExceptionFlags: number;
  /** u64 */
  ExceptionRecord: number | bigint;
  /** u64 */
  ExceptionAddress: number | bigint;
  /** u32 */
  NumberParameters: number;
  /** u32 */
  __unusedAlignment: number;
  /** array */
  ExceptionInformation: Deno.PointerValue | null;
}

export const sizeofMINIDUMP_EXCEPTION = 40;

export function allocMINIDUMP_EXCEPTION(data?: Partial<MINIDUMP_EXCEPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_EXCEPTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ExceptionCode !== undefined) view.setUint32(0, Number(data.ExceptionCode), true);
  // 0x04: u32
  if (data?.ExceptionFlags !== undefined) view.setUint32(4, Number(data.ExceptionFlags), true);
  // 0x08: u64
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(8, util.toBigInt(data.ExceptionRecord), true);
  // 0x10: u64
  if (data?.ExceptionAddress !== undefined) view.setBigUint64(16, util.toBigInt(data.ExceptionAddress), true);
  // 0x18: u32
  if (data?.NumberParameters !== undefined) view.setUint32(24, Number(data.NumberParameters), true);
  // 0x1c: u32
  if (data?.__unusedAlignment !== undefined) view.setUint32(28, Number(data.__unusedAlignment), true);
  // 0x20: pointer
  if (data?.ExceptionInformation !== undefined) view.setBigUint64(32, data.ExceptionInformation === null ? 0n : util.toBigInt(util.toPointer(data.ExceptionInformation)), true);
  return buf;
}

export class MINIDUMP_EXCEPTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ExceptionCode(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ExceptionFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get ExceptionRecord(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get ExceptionAddress(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u32
  get NumberParameters(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get __unusedAlignment(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get ExceptionInformation(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ExceptionCode(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ExceptionFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set ExceptionRecord(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set ExceptionAddress(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u32
  set NumberParameters(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set __unusedAlignment(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set ExceptionInformation(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_EXCEPTION_STREAM (size: 24)
 */
export interface MINIDUMP_EXCEPTION_STREAM {
  /** u32 */
  ThreadId: number;
  /** u32 */
  __alignment: number;
  /** Windows.Win32.System.Diagnostics.Debug.MINIDUMP_EXCEPTION */
  ExceptionRecord: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.MINIDUMP_LOCATION_DESCRIPTOR */
  ThreadContext: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMINIDUMP_EXCEPTION_STREAM = 24;

export function allocMINIDUMP_EXCEPTION_STREAM(data?: Partial<MINIDUMP_EXCEPTION_STREAM>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_EXCEPTION_STREAM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ThreadId !== undefined) view.setUint32(0, Number(data.ThreadId), true);
  // 0x04: u32
  if (data?.__alignment !== undefined) view.setUint32(4, Number(data.__alignment), true);
  // 0x08: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(8, data.ExceptionRecord === null ? 0n : util.toBigInt(util.toPointer(data.ExceptionRecord)), true);
  // 0x10: pointer
  if (data?.ThreadContext !== undefined) view.setBigUint64(16, data.ThreadContext === null ? 0n : util.toBigInt(util.toPointer(data.ThreadContext)), true);
  return buf;
}

export class MINIDUMP_EXCEPTION_STREAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ThreadId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get __alignment(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ExceptionRecord(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get ThreadContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ThreadId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set __alignment(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ExceptionRecord(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set ThreadContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Storage.FileSystem.VS_FIXEDFILEINFO (size: 56)
 */
export interface VS_FIXEDFILEINFO {
  /** u32 */
  dwSignature: number;
  /** u32 */
  dwStrucVersion: number;
  /** u32 */
  dwFileVersionMS: number;
  /** u32 */
  dwFileVersionLS: number;
  /** u32 */
  dwProductVersionMS: number;
  /** u32 */
  dwProductVersionLS: number;
  /** u32 */
  dwFileFlagsMask: number;
  /** Windows.Win32.Storage.FileSystem.VS_FIXEDFILEINFO_FILE_FLAGS */
  dwFileFlags: VS_FIXEDFILEINFO_FILE_FLAGS;
  /** Windows.Win32.Storage.FileSystem.VS_FIXEDFILEINFO_FILE_OS */
  dwFileOS: VS_FIXEDFILEINFO_FILE_OS;
  /** Windows.Win32.Storage.FileSystem.VS_FIXEDFILEINFO_FILE_TYPE */
  dwFileType: VS_FIXEDFILEINFO_FILE_TYPE;
  /** Windows.Win32.Storage.FileSystem.VS_FIXEDFILEINFO_FILE_SUBTYPE */
  dwFileSubtype: VS_FIXEDFILEINFO_FILE_SUBTYPE;
  /** u32 */
  dwFileDateMS: number;
  /** u32 */
  dwFileDateLS: number;
}

export const sizeofVS_FIXEDFILEINFO = 56;

export function allocVS_FIXEDFILEINFO(data?: Partial<VS_FIXEDFILEINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofVS_FIXEDFILEINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSignature !== undefined) view.setUint32(0, Number(data.dwSignature), true);
  // 0x04: u32
  if (data?.dwStrucVersion !== undefined) view.setUint32(4, Number(data.dwStrucVersion), true);
  // 0x08: u32
  if (data?.dwFileVersionMS !== undefined) view.setUint32(8, Number(data.dwFileVersionMS), true);
  // 0x0c: u32
  if (data?.dwFileVersionLS !== undefined) view.setUint32(12, Number(data.dwFileVersionLS), true);
  // 0x10: u32
  if (data?.dwProductVersionMS !== undefined) view.setUint32(16, Number(data.dwProductVersionMS), true);
  // 0x14: u32
  if (data?.dwProductVersionLS !== undefined) view.setUint32(20, Number(data.dwProductVersionLS), true);
  // 0x18: u32
  if (data?.dwFileFlagsMask !== undefined) view.setUint32(24, Number(data.dwFileFlagsMask), true);
  // 0x1c: u32
  if (data?.dwFileFlags !== undefined) view.setUint32(28, Number(data.dwFileFlags), true);
  // 0x20: i32
  if (data?.dwFileOS !== undefined) view.setInt32(32, Number(data.dwFileOS), true);
  // 0x24: i32
  if (data?.dwFileType !== undefined) view.setInt32(36, Number(data.dwFileType), true);
  // 0x28: i32
  if (data?.dwFileSubtype !== undefined) view.setInt32(40, Number(data.dwFileSubtype), true);
  // 0x2c: u32
  if (data?.dwFileDateMS !== undefined) view.setUint32(44, Number(data.dwFileDateMS), true);
  // 0x30: u32
  if (data?.dwFileDateLS !== undefined) view.setUint32(48, Number(data.dwFileDateLS), true);
  // 0x34: pad4
  return buf;
}

export class VS_FIXEDFILEINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSignature(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwStrucVersion(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwFileVersionMS(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwFileVersionLS(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwProductVersionMS(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwProductVersionLS(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwFileFlagsMask(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwFileFlags(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: i32
  get dwFileOS(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get dwFileType(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: i32
  get dwFileSubtype(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: u32
  get dwFileDateMS(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get dwFileDateLS(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x00: u32
  set dwSignature(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwStrucVersion(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwFileVersionMS(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwFileVersionLS(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwProductVersionMS(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwProductVersionLS(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwFileFlagsMask(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwFileFlags(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: i32
  set dwFileOS(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set dwFileType(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: i32
  set dwFileSubtype(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: u32
  set dwFileDateMS(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set dwFileDateLS(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_MODULE (size: 64)
 */
export interface MINIDUMP_MODULE {
  /** u64 */
  BaseOfImage: number | bigint;
  /** u32 */
  SizeOfImage: number;
  /** u32 */
  CheckSum: number;
  /** u32 */
  TimeDateStamp: number;
  /** u32 */
  ModuleNameRva: number;
  /** Windows.Win32.Storage.FileSystem.VS_FIXEDFILEINFO */
  VersionInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.MINIDUMP_LOCATION_DESCRIPTOR */
  CvRecord: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.MINIDUMP_LOCATION_DESCRIPTOR */
  MiscRecord: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  Reserved0: number | bigint;
  /** u64 */
  Reserved1: number | bigint;
}

export const sizeofMINIDUMP_MODULE = 64;

export function allocMINIDUMP_MODULE(data?: Partial<MINIDUMP_MODULE>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_MODULE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.BaseOfImage !== undefined) view.setBigUint64(0, util.toBigInt(data.BaseOfImage), true);
  // 0x08: u32
  if (data?.SizeOfImage !== undefined) view.setUint32(8, Number(data.SizeOfImage), true);
  // 0x0c: u32
  if (data?.CheckSum !== undefined) view.setUint32(12, Number(data.CheckSum), true);
  // 0x10: u32
  if (data?.TimeDateStamp !== undefined) view.setUint32(16, Number(data.TimeDateStamp), true);
  // 0x14: u32
  if (data?.ModuleNameRva !== undefined) view.setUint32(20, Number(data.ModuleNameRva), true);
  // 0x18: pointer
  if (data?.VersionInfo !== undefined) view.setBigUint64(24, data.VersionInfo === null ? 0n : util.toBigInt(util.toPointer(data.VersionInfo)), true);
  // 0x20: pointer
  if (data?.CvRecord !== undefined) view.setBigUint64(32, data.CvRecord === null ? 0n : util.toBigInt(util.toPointer(data.CvRecord)), true);
  // 0x28: pointer
  if (data?.MiscRecord !== undefined) view.setBigUint64(40, data.MiscRecord === null ? 0n : util.toBigInt(util.toPointer(data.MiscRecord)), true);
  // 0x30: u64
  if (data?.Reserved0 !== undefined) view.setBigUint64(48, util.toBigInt(data.Reserved0), true);
  // 0x38: u64
  if (data?.Reserved1 !== undefined) view.setBigUint64(56, util.toBigInt(data.Reserved1), true);
  return buf;
}

export class MINIDUMP_MODULEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get BaseOfImage(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u32
  get SizeOfImage(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get CheckSum(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get TimeDateStamp(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ModuleNameRva(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get VersionInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get CvRecord(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get MiscRecord(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u64
  get Reserved0(): number | bigint {
    return this.view.getBigUint64(48, true);
  }

  // 0x38: u64
  get Reserved1(): number | bigint {
    return this.view.getBigUint64(56, true);
  }

  // 0x00: u64
  set BaseOfImage(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u32
  set SizeOfImage(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set CheckSum(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set TimeDateStamp(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ModuleNameRva(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set VersionInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set CvRecord(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set MiscRecord(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: u64
  set Reserved0(value: number | bigint) {
    this.view.setBigUint64(48, util.toBigInt(value), true);
  }

  // 0x38: u64
  set Reserved1(value: number | bigint) {
    this.view.setBigUint64(56, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_MODULE_LIST (size: 16)
 */
export interface MINIDUMP_MODULE_LIST {
  /** u32 */
  NumberOfModules: number;
  /** array */
  Modules: Deno.PointerValue | null;
}

export const sizeofMINIDUMP_MODULE_LIST = 16;

export function allocMINIDUMP_MODULE_LIST(data?: Partial<MINIDUMP_MODULE_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_MODULE_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumberOfModules !== undefined) view.setUint32(0, Number(data.NumberOfModules), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Modules !== undefined) view.setBigUint64(8, data.Modules === null ? 0n : util.toBigInt(util.toPointer(data.Modules)), true);
  return buf;
}

export class MINIDUMP_MODULE_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumberOfModules(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Modules(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set NumberOfModules(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Modules(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_MEMORY_LIST (size: 16)
 */
export interface MINIDUMP_MEMORY_LIST {
  /** u32 */
  NumberOfMemoryRanges: number;
  /** array */
  MemoryRanges: Deno.PointerValue | null;
}

export const sizeofMINIDUMP_MEMORY_LIST = 16;

export function allocMINIDUMP_MEMORY_LIST(data?: Partial<MINIDUMP_MEMORY_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_MEMORY_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumberOfMemoryRanges !== undefined) view.setUint32(0, Number(data.NumberOfMemoryRanges), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.MemoryRanges !== undefined) view.setBigUint64(8, data.MemoryRanges === null ? 0n : util.toBigInt(util.toPointer(data.MemoryRanges)), true);
  return buf;
}

export class MINIDUMP_MEMORY_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumberOfMemoryRanges(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get MemoryRanges(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set NumberOfMemoryRanges(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set MemoryRanges(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_MEMORY64_LIST (size: 24)
 */
export interface MINIDUMP_MEMORY64_LIST {
  /** u64 */
  NumberOfMemoryRanges: number | bigint;
  /** u64 */
  BaseRva: number | bigint;
  /** array */
  MemoryRanges: Deno.PointerValue | null;
}

export const sizeofMINIDUMP_MEMORY64_LIST = 24;

export function allocMINIDUMP_MEMORY64_LIST(data?: Partial<MINIDUMP_MEMORY64_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_MEMORY64_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.NumberOfMemoryRanges !== undefined) view.setBigUint64(0, util.toBigInt(data.NumberOfMemoryRanges), true);
  // 0x08: u64
  if (data?.BaseRva !== undefined) view.setBigUint64(8, util.toBigInt(data.BaseRva), true);
  // 0x10: pointer
  if (data?.MemoryRanges !== undefined) view.setBigUint64(16, data.MemoryRanges === null ? 0n : util.toBigInt(util.toPointer(data.MemoryRanges)), true);
  return buf;
}

export class MINIDUMP_MEMORY64_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get NumberOfMemoryRanges(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get BaseRva(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: pointer
  get MemoryRanges(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u64
  set NumberOfMemoryRanges(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set BaseRva(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: pointer
  set MemoryRanges(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_EXCEPTION_INFORMATION (size: 24)
 */
export interface MINIDUMP_EXCEPTION_INFORMATION {
  /** u32 */
  ThreadId: number;
  /** ptr */
  ExceptionPointers: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  ClientPointers: boolean;
}

export const sizeofMINIDUMP_EXCEPTION_INFORMATION = 24;

export function allocMINIDUMP_EXCEPTION_INFORMATION(data?: Partial<MINIDUMP_EXCEPTION_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_EXCEPTION_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ThreadId !== undefined) view.setUint32(0, Number(data.ThreadId), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ExceptionPointers !== undefined) view.setBigUint64(8, data.ExceptionPointers === null ? 0n : util.toBigInt(util.toPointer(data.ExceptionPointers)), true);
  // 0x10: i32
  if (data?.ClientPointers !== undefined) view.setInt32(16, Number(data.ClientPointers), true);
  // 0x14: pad4
  return buf;
}

export class MINIDUMP_EXCEPTION_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ThreadId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ExceptionPointers(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i32
  get ClientPointers(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set ThreadId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ExceptionPointers(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: i32
  set ClientPointers(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_EXCEPTION_INFORMATION64 (size: 32)
 */
export interface MINIDUMP_EXCEPTION_INFORMATION64 {
  /** u32 */
  ThreadId: number;
  /** u64 */
  ExceptionRecord: number | bigint;
  /** u64 */
  ContextRecord: number | bigint;
  /** Windows.Win32.Foundation.BOOL */
  ClientPointers: boolean;
}

export const sizeofMINIDUMP_EXCEPTION_INFORMATION64 = 32;

export function allocMINIDUMP_EXCEPTION_INFORMATION64(data?: Partial<MINIDUMP_EXCEPTION_INFORMATION64>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_EXCEPTION_INFORMATION64);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ThreadId !== undefined) view.setUint32(0, Number(data.ThreadId), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(8, util.toBigInt(data.ExceptionRecord), true);
  // 0x10: u64
  if (data?.ContextRecord !== undefined) view.setBigUint64(16, util.toBigInt(data.ContextRecord), true);
  // 0x18: i32
  if (data?.ClientPointers !== undefined) view.setInt32(24, Number(data.ClientPointers), true);
  // 0x1c: pad4
  return buf;
}

export class MINIDUMP_EXCEPTION_INFORMATION64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ThreadId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: u64
  get ExceptionRecord(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get ContextRecord(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: i32
  get ClientPointers(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set ThreadId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: u64
  set ExceptionRecord(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set ContextRecord(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: i32
  set ClientPointers(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_HANDLE_OBJECT_INFORMATION (size: 16)
 */
export interface MINIDUMP_HANDLE_OBJECT_INFORMATION {
  /** u32 */
  NextInfoRva: number;
  /** u32 */
  InfoType: number;
  /** u32 */
  SizeOfInfo: number;
}

export const sizeofMINIDUMP_HANDLE_OBJECT_INFORMATION = 16;

export function allocMINIDUMP_HANDLE_OBJECT_INFORMATION(data?: Partial<MINIDUMP_HANDLE_OBJECT_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_HANDLE_OBJECT_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NextInfoRva !== undefined) view.setUint32(0, Number(data.NextInfoRva), true);
  // 0x04: u32
  if (data?.InfoType !== undefined) view.setUint32(4, Number(data.InfoType), true);
  // 0x08: u32
  if (data?.SizeOfInfo !== undefined) view.setUint32(8, Number(data.SizeOfInfo), true);
  // 0x0c: pad4
  return buf;
}

export class MINIDUMP_HANDLE_OBJECT_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NextInfoRva(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get InfoType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get SizeOfInfo(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set NextInfoRva(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set InfoType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set SizeOfInfo(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_HANDLE_DESCRIPTOR (size: 32)
 */
export interface MINIDUMP_HANDLE_DESCRIPTOR {
  /** u64 */
  Handle: number | bigint;
  /** u32 */
  TypeNameRva: number;
  /** u32 */
  ObjectNameRva: number;
  /** u32 */
  Attributes: number;
  /** u32 */
  GrantedAccess: number;
  /** u32 */
  HandleCount: number;
  /** u32 */
  PointerCount: number;
}

export const sizeofMINIDUMP_HANDLE_DESCRIPTOR = 32;

export function allocMINIDUMP_HANDLE_DESCRIPTOR(data?: Partial<MINIDUMP_HANDLE_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_HANDLE_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Handle !== undefined) view.setBigUint64(0, util.toBigInt(data.Handle), true);
  // 0x08: u32
  if (data?.TypeNameRva !== undefined) view.setUint32(8, Number(data.TypeNameRva), true);
  // 0x0c: u32
  if (data?.ObjectNameRva !== undefined) view.setUint32(12, Number(data.ObjectNameRva), true);
  // 0x10: u32
  if (data?.Attributes !== undefined) view.setUint32(16, Number(data.Attributes), true);
  // 0x14: u32
  if (data?.GrantedAccess !== undefined) view.setUint32(20, Number(data.GrantedAccess), true);
  // 0x18: u32
  if (data?.HandleCount !== undefined) view.setUint32(24, Number(data.HandleCount), true);
  // 0x1c: u32
  if (data?.PointerCount !== undefined) view.setUint32(28, Number(data.PointerCount), true);
  return buf;
}

export class MINIDUMP_HANDLE_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Handle(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u32
  get TypeNameRva(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ObjectNameRva(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Attributes(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get GrantedAccess(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get HandleCount(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get PointerCount(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: u64
  set Handle(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u32
  set TypeNameRva(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ObjectNameRva(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Attributes(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set GrantedAccess(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set HandleCount(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set PointerCount(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_HANDLE_DESCRIPTOR_2 (size: 40)
 */
export interface MINIDUMP_HANDLE_DESCRIPTOR_2 {
  /** u64 */
  Handle: number | bigint;
  /** u32 */
  TypeNameRva: number;
  /** u32 */
  ObjectNameRva: number;
  /** u32 */
  Attributes: number;
  /** u32 */
  GrantedAccess: number;
  /** u32 */
  HandleCount: number;
  /** u32 */
  PointerCount: number;
  /** u32 */
  ObjectInfoRva: number;
  /** u32 */
  Reserved0: number;
}

export const sizeofMINIDUMP_HANDLE_DESCRIPTOR_2 = 40;

export function allocMINIDUMP_HANDLE_DESCRIPTOR_2(data?: Partial<MINIDUMP_HANDLE_DESCRIPTOR_2>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_HANDLE_DESCRIPTOR_2);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Handle !== undefined) view.setBigUint64(0, util.toBigInt(data.Handle), true);
  // 0x08: u32
  if (data?.TypeNameRva !== undefined) view.setUint32(8, Number(data.TypeNameRva), true);
  // 0x0c: u32
  if (data?.ObjectNameRva !== undefined) view.setUint32(12, Number(data.ObjectNameRva), true);
  // 0x10: u32
  if (data?.Attributes !== undefined) view.setUint32(16, Number(data.Attributes), true);
  // 0x14: u32
  if (data?.GrantedAccess !== undefined) view.setUint32(20, Number(data.GrantedAccess), true);
  // 0x18: u32
  if (data?.HandleCount !== undefined) view.setUint32(24, Number(data.HandleCount), true);
  // 0x1c: u32
  if (data?.PointerCount !== undefined) view.setUint32(28, Number(data.PointerCount), true);
  // 0x20: u32
  if (data?.ObjectInfoRva !== undefined) view.setUint32(32, Number(data.ObjectInfoRva), true);
  // 0x24: u32
  if (data?.Reserved0 !== undefined) view.setUint32(36, Number(data.Reserved0), true);
  return buf;
}

export class MINIDUMP_HANDLE_DESCRIPTOR_2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Handle(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u32
  get TypeNameRva(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ObjectNameRva(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Attributes(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get GrantedAccess(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get HandleCount(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get PointerCount(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get ObjectInfoRva(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get Reserved0(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: u64
  set Handle(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u32
  set TypeNameRva(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ObjectNameRva(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Attributes(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set GrantedAccess(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set HandleCount(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set PointerCount(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set ObjectInfoRva(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set Reserved0(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_HANDLE_DATA_STREAM (size: 16)
 */
export interface MINIDUMP_HANDLE_DATA_STREAM {
  /** u32 */
  SizeOfHeader: number;
  /** u32 */
  SizeOfDescriptor: number;
  /** u32 */
  NumberOfDescriptors: number;
  /** u32 */
  Reserved: number;
}

export const sizeofMINIDUMP_HANDLE_DATA_STREAM = 16;

export function allocMINIDUMP_HANDLE_DATA_STREAM(data?: Partial<MINIDUMP_HANDLE_DATA_STREAM>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_HANDLE_DATA_STREAM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfHeader !== undefined) view.setUint32(0, Number(data.SizeOfHeader), true);
  // 0x04: u32
  if (data?.SizeOfDescriptor !== undefined) view.setUint32(4, Number(data.SizeOfDescriptor), true);
  // 0x08: u32
  if (data?.NumberOfDescriptors !== undefined) view.setUint32(8, Number(data.NumberOfDescriptors), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

export class MINIDUMP_HANDLE_DATA_STREAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SizeOfHeader(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SizeOfDescriptor(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get NumberOfDescriptors(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Reserved(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set SizeOfHeader(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SizeOfDescriptor(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set NumberOfDescriptors(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Reserved(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_HANDLE_OPERATION_LIST (size: 16)
 */
export interface MINIDUMP_HANDLE_OPERATION_LIST {
  /** u32 */
  SizeOfHeader: number;
  /** u32 */
  SizeOfEntry: number;
  /** u32 */
  NumberOfEntries: number;
  /** u32 */
  Reserved: number;
}

export const sizeofMINIDUMP_HANDLE_OPERATION_LIST = 16;

export function allocMINIDUMP_HANDLE_OPERATION_LIST(data?: Partial<MINIDUMP_HANDLE_OPERATION_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_HANDLE_OPERATION_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfHeader !== undefined) view.setUint32(0, Number(data.SizeOfHeader), true);
  // 0x04: u32
  if (data?.SizeOfEntry !== undefined) view.setUint32(4, Number(data.SizeOfEntry), true);
  // 0x08: u32
  if (data?.NumberOfEntries !== undefined) view.setUint32(8, Number(data.NumberOfEntries), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

export class MINIDUMP_HANDLE_OPERATION_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SizeOfHeader(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SizeOfEntry(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get NumberOfEntries(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Reserved(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set SizeOfHeader(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SizeOfEntry(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set NumberOfEntries(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Reserved(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_FUNCTION_TABLE_DESCRIPTOR (size: 32)
 */
export interface MINIDUMP_FUNCTION_TABLE_DESCRIPTOR {
  /** u64 */
  MinimumAddress: number | bigint;
  /** u64 */
  MaximumAddress: number | bigint;
  /** u64 */
  BaseAddress: number | bigint;
  /** u32 */
  EntryCount: number;
  /** u32 */
  SizeOfAlignPad: number;
}

export const sizeofMINIDUMP_FUNCTION_TABLE_DESCRIPTOR = 32;

export function allocMINIDUMP_FUNCTION_TABLE_DESCRIPTOR(data?: Partial<MINIDUMP_FUNCTION_TABLE_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_FUNCTION_TABLE_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.MinimumAddress !== undefined) view.setBigUint64(0, util.toBigInt(data.MinimumAddress), true);
  // 0x08: u64
  if (data?.MaximumAddress !== undefined) view.setBigUint64(8, util.toBigInt(data.MaximumAddress), true);
  // 0x10: u64
  if (data?.BaseAddress !== undefined) view.setBigUint64(16, util.toBigInt(data.BaseAddress), true);
  // 0x18: u32
  if (data?.EntryCount !== undefined) view.setUint32(24, Number(data.EntryCount), true);
  // 0x1c: u32
  if (data?.SizeOfAlignPad !== undefined) view.setUint32(28, Number(data.SizeOfAlignPad), true);
  return buf;
}

export class MINIDUMP_FUNCTION_TABLE_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get MinimumAddress(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get MaximumAddress(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get BaseAddress(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u32
  get EntryCount(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get SizeOfAlignPad(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: u64
  set MinimumAddress(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set MaximumAddress(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set BaseAddress(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u32
  set EntryCount(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set SizeOfAlignPad(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_FUNCTION_TABLE_STREAM (size: 24)
 */
export interface MINIDUMP_FUNCTION_TABLE_STREAM {
  /** u32 */
  SizeOfHeader: number;
  /** u32 */
  SizeOfDescriptor: number;
  /** u32 */
  SizeOfNativeDescriptor: number;
  /** u32 */
  SizeOfFunctionEntry: number;
  /** u32 */
  NumberOfDescriptors: number;
  /** u32 */
  SizeOfAlignPad: number;
}

export const sizeofMINIDUMP_FUNCTION_TABLE_STREAM = 24;

export function allocMINIDUMP_FUNCTION_TABLE_STREAM(data?: Partial<MINIDUMP_FUNCTION_TABLE_STREAM>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_FUNCTION_TABLE_STREAM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfHeader !== undefined) view.setUint32(0, Number(data.SizeOfHeader), true);
  // 0x04: u32
  if (data?.SizeOfDescriptor !== undefined) view.setUint32(4, Number(data.SizeOfDescriptor), true);
  // 0x08: u32
  if (data?.SizeOfNativeDescriptor !== undefined) view.setUint32(8, Number(data.SizeOfNativeDescriptor), true);
  // 0x0c: u32
  if (data?.SizeOfFunctionEntry !== undefined) view.setUint32(12, Number(data.SizeOfFunctionEntry), true);
  // 0x10: u32
  if (data?.NumberOfDescriptors !== undefined) view.setUint32(16, Number(data.NumberOfDescriptors), true);
  // 0x14: u32
  if (data?.SizeOfAlignPad !== undefined) view.setUint32(20, Number(data.SizeOfAlignPad), true);
  return buf;
}

export class MINIDUMP_FUNCTION_TABLE_STREAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SizeOfHeader(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SizeOfDescriptor(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get SizeOfNativeDescriptor(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get SizeOfFunctionEntry(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get NumberOfDescriptors(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get SizeOfAlignPad(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set SizeOfHeader(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SizeOfDescriptor(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set SizeOfNativeDescriptor(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set SizeOfFunctionEntry(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set NumberOfDescriptors(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set SizeOfAlignPad(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_UNLOADED_MODULE (size: 24)
 */
export interface MINIDUMP_UNLOADED_MODULE {
  /** u64 */
  BaseOfImage: number | bigint;
  /** u32 */
  SizeOfImage: number;
  /** u32 */
  CheckSum: number;
  /** u32 */
  TimeDateStamp: number;
  /** u32 */
  ModuleNameRva: number;
}

export const sizeofMINIDUMP_UNLOADED_MODULE = 24;

export function allocMINIDUMP_UNLOADED_MODULE(data?: Partial<MINIDUMP_UNLOADED_MODULE>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_UNLOADED_MODULE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.BaseOfImage !== undefined) view.setBigUint64(0, util.toBigInt(data.BaseOfImage), true);
  // 0x08: u32
  if (data?.SizeOfImage !== undefined) view.setUint32(8, Number(data.SizeOfImage), true);
  // 0x0c: u32
  if (data?.CheckSum !== undefined) view.setUint32(12, Number(data.CheckSum), true);
  // 0x10: u32
  if (data?.TimeDateStamp !== undefined) view.setUint32(16, Number(data.TimeDateStamp), true);
  // 0x14: u32
  if (data?.ModuleNameRva !== undefined) view.setUint32(20, Number(data.ModuleNameRva), true);
  return buf;
}

export class MINIDUMP_UNLOADED_MODULEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get BaseOfImage(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u32
  get SizeOfImage(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get CheckSum(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get TimeDateStamp(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ModuleNameRva(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u64
  set BaseOfImage(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u32
  set SizeOfImage(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set CheckSum(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set TimeDateStamp(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ModuleNameRva(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_UNLOADED_MODULE_LIST (size: 16)
 */
export interface MINIDUMP_UNLOADED_MODULE_LIST {
  /** u32 */
  SizeOfHeader: number;
  /** u32 */
  SizeOfEntry: number;
  /** u32 */
  NumberOfEntries: number;
}

export const sizeofMINIDUMP_UNLOADED_MODULE_LIST = 16;

export function allocMINIDUMP_UNLOADED_MODULE_LIST(data?: Partial<MINIDUMP_UNLOADED_MODULE_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_UNLOADED_MODULE_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfHeader !== undefined) view.setUint32(0, Number(data.SizeOfHeader), true);
  // 0x04: u32
  if (data?.SizeOfEntry !== undefined) view.setUint32(4, Number(data.SizeOfEntry), true);
  // 0x08: u32
  if (data?.NumberOfEntries !== undefined) view.setUint32(8, Number(data.NumberOfEntries), true);
  // 0x0c: pad4
  return buf;
}

export class MINIDUMP_UNLOADED_MODULE_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SizeOfHeader(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SizeOfEntry(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get NumberOfEntries(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set SizeOfHeader(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SizeOfEntry(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set NumberOfEntries(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.XSTATE_CONFIG_FEATURE_MSC_INFO (size: 24)
 */
export interface XSTATE_CONFIG_FEATURE_MSC_INFO {
  /** u32 */
  SizeOfInfo: number;
  /** u32 */
  ContextSize: number;
  /** u64 */
  EnabledFeatures: number | bigint;
  /** array */
  Features: Deno.PointerValue | null;
}

export const sizeofXSTATE_CONFIG_FEATURE_MSC_INFO = 24;

export function allocXSTATE_CONFIG_FEATURE_MSC_INFO(data?: Partial<XSTATE_CONFIG_FEATURE_MSC_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofXSTATE_CONFIG_FEATURE_MSC_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfInfo !== undefined) view.setUint32(0, Number(data.SizeOfInfo), true);
  // 0x04: u32
  if (data?.ContextSize !== undefined) view.setUint32(4, Number(data.ContextSize), true);
  // 0x08: u64
  if (data?.EnabledFeatures !== undefined) view.setBigUint64(8, util.toBigInt(data.EnabledFeatures), true);
  // 0x10: pointer
  if (data?.Features !== undefined) view.setBigUint64(16, data.Features === null ? 0n : util.toBigInt(util.toPointer(data.Features)), true);
  return buf;
}

export class XSTATE_CONFIG_FEATURE_MSC_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SizeOfInfo(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ContextSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get EnabledFeatures(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: pointer
  get Features(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set SizeOfInfo(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ContextSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set EnabledFeatures(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: pointer
  set Features(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_MISC_INFO (size: 24)
 */
export interface MINIDUMP_MISC_INFO {
  /** u32 */
  SizeOfInfo: number;
  /** Windows.Win32.System.Diagnostics.Debug.MINIDUMP_MISC_INFO_FLAGS */
  Flags1: MINIDUMP_MISC_INFO_FLAGS;
  /** u32 */
  ProcessId: number;
  /** u32 */
  ProcessCreateTime: number;
  /** u32 */
  ProcessUserTime: number;
  /** u32 */
  ProcessKernelTime: number;
}

export const sizeofMINIDUMP_MISC_INFO = 24;

export function allocMINIDUMP_MISC_INFO(data?: Partial<MINIDUMP_MISC_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_MISC_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfInfo !== undefined) view.setUint32(0, Number(data.SizeOfInfo), true);
  // 0x04: u32
  if (data?.Flags1 !== undefined) view.setUint32(4, Number(data.Flags1), true);
  // 0x08: u32
  if (data?.ProcessId !== undefined) view.setUint32(8, Number(data.ProcessId), true);
  // 0x0c: u32
  if (data?.ProcessCreateTime !== undefined) view.setUint32(12, Number(data.ProcessCreateTime), true);
  // 0x10: u32
  if (data?.ProcessUserTime !== undefined) view.setUint32(16, Number(data.ProcessUserTime), true);
  // 0x14: u32
  if (data?.ProcessKernelTime !== undefined) view.setUint32(20, Number(data.ProcessKernelTime), true);
  return buf;
}

export class MINIDUMP_MISC_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SizeOfInfo(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags1(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ProcessId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ProcessCreateTime(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ProcessUserTime(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ProcessKernelTime(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set SizeOfInfo(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags1(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ProcessId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ProcessCreateTime(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ProcessUserTime(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ProcessKernelTime(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_MISC_INFO_2 (size: 48)
 */
export interface MINIDUMP_MISC_INFO_2 {
  /** u32 */
  SizeOfInfo: number;
  /** u32 */
  Flags1: number;
  /** u32 */
  ProcessId: number;
  /** u32 */
  ProcessCreateTime: number;
  /** u32 */
  ProcessUserTime: number;
  /** u32 */
  ProcessKernelTime: number;
  /** u32 */
  ProcessorMaxMhz: number;
  /** u32 */
  ProcessorCurrentMhz: number;
  /** u32 */
  ProcessorMhzLimit: number;
  /** u32 */
  ProcessorMaxIdleState: number;
  /** u32 */
  ProcessorCurrentIdleState: number;
}

export const sizeofMINIDUMP_MISC_INFO_2 = 48;

export function allocMINIDUMP_MISC_INFO_2(data?: Partial<MINIDUMP_MISC_INFO_2>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_MISC_INFO_2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfInfo !== undefined) view.setUint32(0, Number(data.SizeOfInfo), true);
  // 0x04: u32
  if (data?.Flags1 !== undefined) view.setUint32(4, Number(data.Flags1), true);
  // 0x08: u32
  if (data?.ProcessId !== undefined) view.setUint32(8, Number(data.ProcessId), true);
  // 0x0c: u32
  if (data?.ProcessCreateTime !== undefined) view.setUint32(12, Number(data.ProcessCreateTime), true);
  // 0x10: u32
  if (data?.ProcessUserTime !== undefined) view.setUint32(16, Number(data.ProcessUserTime), true);
  // 0x14: u32
  if (data?.ProcessKernelTime !== undefined) view.setUint32(20, Number(data.ProcessKernelTime), true);
  // 0x18: u32
  if (data?.ProcessorMaxMhz !== undefined) view.setUint32(24, Number(data.ProcessorMaxMhz), true);
  // 0x1c: u32
  if (data?.ProcessorCurrentMhz !== undefined) view.setUint32(28, Number(data.ProcessorCurrentMhz), true);
  // 0x20: u32
  if (data?.ProcessorMhzLimit !== undefined) view.setUint32(32, Number(data.ProcessorMhzLimit), true);
  // 0x24: u32
  if (data?.ProcessorMaxIdleState !== undefined) view.setUint32(36, Number(data.ProcessorMaxIdleState), true);
  // 0x28: u32
  if (data?.ProcessorCurrentIdleState !== undefined) view.setUint32(40, Number(data.ProcessorCurrentIdleState), true);
  // 0x2c: pad4
  return buf;
}

export class MINIDUMP_MISC_INFO_2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SizeOfInfo(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags1(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ProcessId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ProcessCreateTime(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ProcessUserTime(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ProcessKernelTime(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get ProcessorMaxMhz(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get ProcessorCurrentMhz(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get ProcessorMhzLimit(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get ProcessorMaxIdleState(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get ProcessorCurrentIdleState(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: u32
  set SizeOfInfo(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags1(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ProcessId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ProcessCreateTime(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ProcessUserTime(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ProcessKernelTime(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set ProcessorMaxMhz(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set ProcessorCurrentMhz(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set ProcessorMhzLimit(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set ProcessorMaxIdleState(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set ProcessorCurrentIdleState(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Foundation.SYSTEMTIME (size: 16)
 */
export interface SYSTEMTIME {
  /** u16 */
  wYear: number;
  /** u16 */
  wMonth: number;
  /** u16 */
  wDayOfWeek: number;
  /** u16 */
  wDay: number;
  /** u16 */
  wHour: number;
  /** u16 */
  wMinute: number;
  /** u16 */
  wSecond: number;
  /** u16 */
  wMilliseconds: number;
}

export const sizeofSYSTEMTIME = 16;

export function allocSYSTEMTIME(data?: Partial<SYSTEMTIME>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEMTIME);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wYear !== undefined) view.setUint16(0, Number(data.wYear), true);
  // 0x02: u16
  if (data?.wMonth !== undefined) view.setUint16(2, Number(data.wMonth), true);
  // 0x04: u16
  if (data?.wDayOfWeek !== undefined) view.setUint16(4, Number(data.wDayOfWeek), true);
  // 0x06: u16
  if (data?.wDay !== undefined) view.setUint16(6, Number(data.wDay), true);
  // 0x08: u16
  if (data?.wHour !== undefined) view.setUint16(8, Number(data.wHour), true);
  // 0x0a: u16
  if (data?.wMinute !== undefined) view.setUint16(10, Number(data.wMinute), true);
  // 0x0c: u16
  if (data?.wSecond !== undefined) view.setUint16(12, Number(data.wSecond), true);
  // 0x0e: u16
  if (data?.wMilliseconds !== undefined) view.setUint16(14, Number(data.wMilliseconds), true);
  return buf;
}

export class SYSTEMTIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get wYear(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get wMonth(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get wDayOfWeek(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get wDay(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u16
  get wHour(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get wMinute(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u16
  get wSecond(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get wMilliseconds(): number {
    return this.view.getUint16(14, true);
  }

  // 0x00: u16
  set wYear(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set wMonth(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set wDayOfWeek(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set wDay(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u16
  set wHour(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set wMinute(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u16
  set wSecond(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set wMilliseconds(value: number) {
    this.view.setUint16(14, value, true);
  }
}

/**
 * Windows.Win32.System.Time.TIME_ZONE_INFORMATION (size: 56)
 */
export interface TIME_ZONE_INFORMATION {
  /** i32 */
  Bias: number;
  /** array */
  StandardName: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  StandardDate: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  StandardBias: number;
  /** array */
  DaylightName: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  DaylightDate: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  DaylightBias: number;
}

export const sizeofTIME_ZONE_INFORMATION = 56;

export function allocTIME_ZONE_INFORMATION(data?: Partial<TIME_ZONE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofTIME_ZONE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Bias !== undefined) view.setInt32(0, Number(data.Bias), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.StandardName !== undefined) view.setBigUint64(8, data.StandardName === null ? 0n : util.toBigInt(util.toPointer(data.StandardName)), true);
  // 0x10: pointer
  if (data?.StandardDate !== undefined) view.setBigUint64(16, data.StandardDate === null ? 0n : util.toBigInt(util.toPointer(data.StandardDate)), true);
  // 0x18: i32
  if (data?.StandardBias !== undefined) view.setInt32(24, Number(data.StandardBias), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.DaylightName !== undefined) view.setBigUint64(32, data.DaylightName === null ? 0n : util.toBigInt(util.toPointer(data.DaylightName)), true);
  // 0x28: pointer
  if (data?.DaylightDate !== undefined) view.setBigUint64(40, data.DaylightDate === null ? 0n : util.toBigInt(util.toPointer(data.DaylightDate)), true);
  // 0x30: i32
  if (data?.DaylightBias !== undefined) view.setInt32(48, Number(data.DaylightBias), true);
  // 0x34: pad4
  return buf;
}

export class TIME_ZONE_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Bias(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get StandardName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get StandardDate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: i32
  get StandardBias(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get DaylightName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get DaylightDate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: i32
  get DaylightBias(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: pad4

  // 0x00: i32
  set Bias(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set StandardName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set StandardDate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: i32
  set StandardBias(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set DaylightName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set DaylightDate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: i32
  set DaylightBias(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_MISC_INFO_3 (size: 72)
 */
export interface MINIDUMP_MISC_INFO_3 {
  /** u32 */
  SizeOfInfo: number;
  /** u32 */
  Flags1: number;
  /** u32 */
  ProcessId: number;
  /** u32 */
  ProcessCreateTime: number;
  /** u32 */
  ProcessUserTime: number;
  /** u32 */
  ProcessKernelTime: number;
  /** u32 */
  ProcessorMaxMhz: number;
  /** u32 */
  ProcessorCurrentMhz: number;
  /** u32 */
  ProcessorMhzLimit: number;
  /** u32 */
  ProcessorMaxIdleState: number;
  /** u32 */
  ProcessorCurrentIdleState: number;
  /** u32 */
  ProcessIntegrityLevel: number;
  /** u32 */
  ProcessExecuteFlags: number;
  /** u32 */
  ProtectedProcess: number;
  /** u32 */
  TimeZoneId: number;
  /** Windows.Win32.System.Time.TIME_ZONE_INFORMATION */
  TimeZone: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMINIDUMP_MISC_INFO_3 = 72;

export function allocMINIDUMP_MISC_INFO_3(data?: Partial<MINIDUMP_MISC_INFO_3>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_MISC_INFO_3);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfInfo !== undefined) view.setUint32(0, Number(data.SizeOfInfo), true);
  // 0x04: u32
  if (data?.Flags1 !== undefined) view.setUint32(4, Number(data.Flags1), true);
  // 0x08: u32
  if (data?.ProcessId !== undefined) view.setUint32(8, Number(data.ProcessId), true);
  // 0x0c: u32
  if (data?.ProcessCreateTime !== undefined) view.setUint32(12, Number(data.ProcessCreateTime), true);
  // 0x10: u32
  if (data?.ProcessUserTime !== undefined) view.setUint32(16, Number(data.ProcessUserTime), true);
  // 0x14: u32
  if (data?.ProcessKernelTime !== undefined) view.setUint32(20, Number(data.ProcessKernelTime), true);
  // 0x18: u32
  if (data?.ProcessorMaxMhz !== undefined) view.setUint32(24, Number(data.ProcessorMaxMhz), true);
  // 0x1c: u32
  if (data?.ProcessorCurrentMhz !== undefined) view.setUint32(28, Number(data.ProcessorCurrentMhz), true);
  // 0x20: u32
  if (data?.ProcessorMhzLimit !== undefined) view.setUint32(32, Number(data.ProcessorMhzLimit), true);
  // 0x24: u32
  if (data?.ProcessorMaxIdleState !== undefined) view.setUint32(36, Number(data.ProcessorMaxIdleState), true);
  // 0x28: u32
  if (data?.ProcessorCurrentIdleState !== undefined) view.setUint32(40, Number(data.ProcessorCurrentIdleState), true);
  // 0x2c: u32
  if (data?.ProcessIntegrityLevel !== undefined) view.setUint32(44, Number(data.ProcessIntegrityLevel), true);
  // 0x30: u32
  if (data?.ProcessExecuteFlags !== undefined) view.setUint32(48, Number(data.ProcessExecuteFlags), true);
  // 0x34: u32
  if (data?.ProtectedProcess !== undefined) view.setUint32(52, Number(data.ProtectedProcess), true);
  // 0x38: u32
  if (data?.TimeZoneId !== undefined) view.setUint32(56, Number(data.TimeZoneId), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.TimeZone !== undefined) view.setBigUint64(64, data.TimeZone === null ? 0n : util.toBigInt(util.toPointer(data.TimeZone)), true);
  return buf;
}

export class MINIDUMP_MISC_INFO_3View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SizeOfInfo(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags1(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ProcessId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ProcessCreateTime(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ProcessUserTime(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ProcessKernelTime(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get ProcessorMaxMhz(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get ProcessorCurrentMhz(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get ProcessorMhzLimit(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get ProcessorMaxIdleState(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get ProcessorCurrentIdleState(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get ProcessIntegrityLevel(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get ProcessExecuteFlags(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get ProtectedProcess(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get TimeZoneId(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get TimeZone(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set SizeOfInfo(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags1(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ProcessId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ProcessCreateTime(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ProcessUserTime(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ProcessKernelTime(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set ProcessorMaxMhz(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set ProcessorCurrentMhz(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set ProcessorMhzLimit(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set ProcessorMaxIdleState(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set ProcessorCurrentIdleState(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set ProcessIntegrityLevel(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set ProcessExecuteFlags(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set ProtectedProcess(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set TimeZoneId(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set TimeZone(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_MISC_INFO_4 (size: 88)
 */
export interface MINIDUMP_MISC_INFO_4 {
  /** u32 */
  SizeOfInfo: number;
  /** u32 */
  Flags1: number;
  /** u32 */
  ProcessId: number;
  /** u32 */
  ProcessCreateTime: number;
  /** u32 */
  ProcessUserTime: number;
  /** u32 */
  ProcessKernelTime: number;
  /** u32 */
  ProcessorMaxMhz: number;
  /** u32 */
  ProcessorCurrentMhz: number;
  /** u32 */
  ProcessorMhzLimit: number;
  /** u32 */
  ProcessorMaxIdleState: number;
  /** u32 */
  ProcessorCurrentIdleState: number;
  /** u32 */
  ProcessIntegrityLevel: number;
  /** u32 */
  ProcessExecuteFlags: number;
  /** u32 */
  ProtectedProcess: number;
  /** u32 */
  TimeZoneId: number;
  /** Windows.Win32.System.Time.TIME_ZONE_INFORMATION */
  TimeZone: Uint8Array | Deno.PointerValue | null;
  /** array */
  BuildString: Deno.PointerValue | null;
  /** array */
  DbgBldStr: Deno.PointerValue | null;
}

export const sizeofMINIDUMP_MISC_INFO_4 = 88;

export function allocMINIDUMP_MISC_INFO_4(data?: Partial<MINIDUMP_MISC_INFO_4>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_MISC_INFO_4);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfInfo !== undefined) view.setUint32(0, Number(data.SizeOfInfo), true);
  // 0x04: u32
  if (data?.Flags1 !== undefined) view.setUint32(4, Number(data.Flags1), true);
  // 0x08: u32
  if (data?.ProcessId !== undefined) view.setUint32(8, Number(data.ProcessId), true);
  // 0x0c: u32
  if (data?.ProcessCreateTime !== undefined) view.setUint32(12, Number(data.ProcessCreateTime), true);
  // 0x10: u32
  if (data?.ProcessUserTime !== undefined) view.setUint32(16, Number(data.ProcessUserTime), true);
  // 0x14: u32
  if (data?.ProcessKernelTime !== undefined) view.setUint32(20, Number(data.ProcessKernelTime), true);
  // 0x18: u32
  if (data?.ProcessorMaxMhz !== undefined) view.setUint32(24, Number(data.ProcessorMaxMhz), true);
  // 0x1c: u32
  if (data?.ProcessorCurrentMhz !== undefined) view.setUint32(28, Number(data.ProcessorCurrentMhz), true);
  // 0x20: u32
  if (data?.ProcessorMhzLimit !== undefined) view.setUint32(32, Number(data.ProcessorMhzLimit), true);
  // 0x24: u32
  if (data?.ProcessorMaxIdleState !== undefined) view.setUint32(36, Number(data.ProcessorMaxIdleState), true);
  // 0x28: u32
  if (data?.ProcessorCurrentIdleState !== undefined) view.setUint32(40, Number(data.ProcessorCurrentIdleState), true);
  // 0x2c: u32
  if (data?.ProcessIntegrityLevel !== undefined) view.setUint32(44, Number(data.ProcessIntegrityLevel), true);
  // 0x30: u32
  if (data?.ProcessExecuteFlags !== undefined) view.setUint32(48, Number(data.ProcessExecuteFlags), true);
  // 0x34: u32
  if (data?.ProtectedProcess !== undefined) view.setUint32(52, Number(data.ProtectedProcess), true);
  // 0x38: u32
  if (data?.TimeZoneId !== undefined) view.setUint32(56, Number(data.TimeZoneId), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.TimeZone !== undefined) view.setBigUint64(64, data.TimeZone === null ? 0n : util.toBigInt(util.toPointer(data.TimeZone)), true);
  // 0x48: pointer
  if (data?.BuildString !== undefined) view.setBigUint64(72, data.BuildString === null ? 0n : util.toBigInt(util.toPointer(data.BuildString)), true);
  // 0x50: pointer
  if (data?.DbgBldStr !== undefined) view.setBigUint64(80, data.DbgBldStr === null ? 0n : util.toBigInt(util.toPointer(data.DbgBldStr)), true);
  return buf;
}

export class MINIDUMP_MISC_INFO_4View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SizeOfInfo(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags1(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ProcessId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ProcessCreateTime(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ProcessUserTime(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ProcessKernelTime(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get ProcessorMaxMhz(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get ProcessorCurrentMhz(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get ProcessorMhzLimit(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get ProcessorMaxIdleState(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get ProcessorCurrentIdleState(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get ProcessIntegrityLevel(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get ProcessExecuteFlags(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get ProtectedProcess(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get TimeZoneId(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get TimeZone(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get BuildString(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get DbgBldStr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set SizeOfInfo(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags1(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ProcessId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ProcessCreateTime(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ProcessUserTime(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ProcessKernelTime(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set ProcessorMaxMhz(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set ProcessorCurrentMhz(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set ProcessorMhzLimit(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set ProcessorMaxIdleState(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set ProcessorCurrentIdleState(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set ProcessIntegrityLevel(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set ProcessExecuteFlags(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set ProtectedProcess(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set TimeZoneId(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set TimeZone(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set BuildString(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set DbgBldStr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_MISC_INFO_5 (size: 104)
 */
export interface MINIDUMP_MISC_INFO_5 {
  /** u32 */
  SizeOfInfo: number;
  /** u32 */
  Flags1: number;
  /** u32 */
  ProcessId: number;
  /** u32 */
  ProcessCreateTime: number;
  /** u32 */
  ProcessUserTime: number;
  /** u32 */
  ProcessKernelTime: number;
  /** u32 */
  ProcessorMaxMhz: number;
  /** u32 */
  ProcessorCurrentMhz: number;
  /** u32 */
  ProcessorMhzLimit: number;
  /** u32 */
  ProcessorMaxIdleState: number;
  /** u32 */
  ProcessorCurrentIdleState: number;
  /** u32 */
  ProcessIntegrityLevel: number;
  /** u32 */
  ProcessExecuteFlags: number;
  /** u32 */
  ProtectedProcess: number;
  /** u32 */
  TimeZoneId: number;
  /** Windows.Win32.System.Time.TIME_ZONE_INFORMATION */
  TimeZone: Uint8Array | Deno.PointerValue | null;
  /** array */
  BuildString: Deno.PointerValue | null;
  /** array */
  DbgBldStr: Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.XSTATE_CONFIG_FEATURE_MSC_INFO */
  XStateData: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ProcessCookie: number;
}

export const sizeofMINIDUMP_MISC_INFO_5 = 104;

export function allocMINIDUMP_MISC_INFO_5(data?: Partial<MINIDUMP_MISC_INFO_5>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_MISC_INFO_5);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfInfo !== undefined) view.setUint32(0, Number(data.SizeOfInfo), true);
  // 0x04: u32
  if (data?.Flags1 !== undefined) view.setUint32(4, Number(data.Flags1), true);
  // 0x08: u32
  if (data?.ProcessId !== undefined) view.setUint32(8, Number(data.ProcessId), true);
  // 0x0c: u32
  if (data?.ProcessCreateTime !== undefined) view.setUint32(12, Number(data.ProcessCreateTime), true);
  // 0x10: u32
  if (data?.ProcessUserTime !== undefined) view.setUint32(16, Number(data.ProcessUserTime), true);
  // 0x14: u32
  if (data?.ProcessKernelTime !== undefined) view.setUint32(20, Number(data.ProcessKernelTime), true);
  // 0x18: u32
  if (data?.ProcessorMaxMhz !== undefined) view.setUint32(24, Number(data.ProcessorMaxMhz), true);
  // 0x1c: u32
  if (data?.ProcessorCurrentMhz !== undefined) view.setUint32(28, Number(data.ProcessorCurrentMhz), true);
  // 0x20: u32
  if (data?.ProcessorMhzLimit !== undefined) view.setUint32(32, Number(data.ProcessorMhzLimit), true);
  // 0x24: u32
  if (data?.ProcessorMaxIdleState !== undefined) view.setUint32(36, Number(data.ProcessorMaxIdleState), true);
  // 0x28: u32
  if (data?.ProcessorCurrentIdleState !== undefined) view.setUint32(40, Number(data.ProcessorCurrentIdleState), true);
  // 0x2c: u32
  if (data?.ProcessIntegrityLevel !== undefined) view.setUint32(44, Number(data.ProcessIntegrityLevel), true);
  // 0x30: u32
  if (data?.ProcessExecuteFlags !== undefined) view.setUint32(48, Number(data.ProcessExecuteFlags), true);
  // 0x34: u32
  if (data?.ProtectedProcess !== undefined) view.setUint32(52, Number(data.ProtectedProcess), true);
  // 0x38: u32
  if (data?.TimeZoneId !== undefined) view.setUint32(56, Number(data.TimeZoneId), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.TimeZone !== undefined) view.setBigUint64(64, data.TimeZone === null ? 0n : util.toBigInt(util.toPointer(data.TimeZone)), true);
  // 0x48: pointer
  if (data?.BuildString !== undefined) view.setBigUint64(72, data.BuildString === null ? 0n : util.toBigInt(util.toPointer(data.BuildString)), true);
  // 0x50: pointer
  if (data?.DbgBldStr !== undefined) view.setBigUint64(80, data.DbgBldStr === null ? 0n : util.toBigInt(util.toPointer(data.DbgBldStr)), true);
  // 0x58: pointer
  if (data?.XStateData !== undefined) view.setBigUint64(88, data.XStateData === null ? 0n : util.toBigInt(util.toPointer(data.XStateData)), true);
  // 0x60: u32
  if (data?.ProcessCookie !== undefined) view.setUint32(96, Number(data.ProcessCookie), true);
  // 0x64: pad4
  return buf;
}

export class MINIDUMP_MISC_INFO_5View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SizeOfInfo(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags1(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ProcessId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ProcessCreateTime(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ProcessUserTime(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ProcessKernelTime(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get ProcessorMaxMhz(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get ProcessorCurrentMhz(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get ProcessorMhzLimit(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get ProcessorMaxIdleState(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get ProcessorCurrentIdleState(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get ProcessIntegrityLevel(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get ProcessExecuteFlags(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get ProtectedProcess(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get TimeZoneId(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get TimeZone(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get BuildString(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get DbgBldStr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get XStateData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: u32
  get ProcessCookie(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x00: u32
  set SizeOfInfo(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags1(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ProcessId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ProcessCreateTime(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ProcessUserTime(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ProcessKernelTime(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set ProcessorMaxMhz(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set ProcessorCurrentMhz(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set ProcessorMhzLimit(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set ProcessorMaxIdleState(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set ProcessorCurrentIdleState(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set ProcessIntegrityLevel(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set ProcessExecuteFlags(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set ProtectedProcess(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set TimeZoneId(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set TimeZone(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set BuildString(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set DbgBldStr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set XStateData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x60: u32
  set ProcessCookie(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_MEMORY_INFO (size: 48)
 */
export interface MINIDUMP_MEMORY_INFO {
  /** u64 */
  BaseAddress: number | bigint;
  /** u64 */
  AllocationBase: number | bigint;
  /** u32 */
  AllocationProtect: number;
  /** u32 */
  __alignment1: number;
  /** u64 */
  RegionSize: number | bigint;
  /** Windows.Win32.System.Memory.VIRTUAL_ALLOCATION_TYPE */
  State: VIRTUAL_ALLOCATION_TYPE;
  /** u32 */
  Protect: number;
  /** u32 */
  Type: number;
  /** u32 */
  __alignment2: number;
}

export const sizeofMINIDUMP_MEMORY_INFO = 48;

export function allocMINIDUMP_MEMORY_INFO(data?: Partial<MINIDUMP_MEMORY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_MEMORY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.BaseAddress !== undefined) view.setBigUint64(0, util.toBigInt(data.BaseAddress), true);
  // 0x08: u64
  if (data?.AllocationBase !== undefined) view.setBigUint64(8, util.toBigInt(data.AllocationBase), true);
  // 0x10: u32
  if (data?.AllocationProtect !== undefined) view.setUint32(16, Number(data.AllocationProtect), true);
  // 0x14: u32
  if (data?.__alignment1 !== undefined) view.setUint32(20, Number(data.__alignment1), true);
  // 0x18: u64
  if (data?.RegionSize !== undefined) view.setBigUint64(24, util.toBigInt(data.RegionSize), true);
  // 0x20: u32
  if (data?.State !== undefined) view.setUint32(32, Number(data.State), true);
  // 0x24: u32
  if (data?.Protect !== undefined) view.setUint32(36, Number(data.Protect), true);
  // 0x28: u32
  if (data?.Type !== undefined) view.setUint32(40, Number(data.Type), true);
  // 0x2c: u32
  if (data?.__alignment2 !== undefined) view.setUint32(44, Number(data.__alignment2), true);
  return buf;
}

export class MINIDUMP_MEMORY_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get BaseAddress(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get AllocationBase(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u32
  get AllocationProtect(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get __alignment1(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u64
  get RegionSize(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u32
  get State(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get Protect(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get Type(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get __alignment2(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: u64
  set BaseAddress(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set AllocationBase(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u32
  set AllocationProtect(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set __alignment1(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u64
  set RegionSize(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u32
  set State(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set Protect(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set Type(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set __alignment2(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_MEMORY_INFO_LIST (size: 16)
 */
export interface MINIDUMP_MEMORY_INFO_LIST {
  /** u32 */
  SizeOfHeader: number;
  /** u32 */
  SizeOfEntry: number;
  /** u64 */
  NumberOfEntries: number | bigint;
}

export const sizeofMINIDUMP_MEMORY_INFO_LIST = 16;

export function allocMINIDUMP_MEMORY_INFO_LIST(data?: Partial<MINIDUMP_MEMORY_INFO_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_MEMORY_INFO_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfHeader !== undefined) view.setUint32(0, Number(data.SizeOfHeader), true);
  // 0x04: u32
  if (data?.SizeOfEntry !== undefined) view.setUint32(4, Number(data.SizeOfEntry), true);
  // 0x08: u64
  if (data?.NumberOfEntries !== undefined) view.setBigUint64(8, util.toBigInt(data.NumberOfEntries), true);
  return buf;
}

export class MINIDUMP_MEMORY_INFO_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SizeOfHeader(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SizeOfEntry(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get NumberOfEntries(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u32
  set SizeOfHeader(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SizeOfEntry(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set NumberOfEntries(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_THREAD_NAME (size: 16)
 */
export interface MINIDUMP_THREAD_NAME {
  /** u32 */
  ThreadId: number;
  /** u64 */
  RvaOfThreadName: number | bigint;
}

export const sizeofMINIDUMP_THREAD_NAME = 16;

export function allocMINIDUMP_THREAD_NAME(data?: Partial<MINIDUMP_THREAD_NAME>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_THREAD_NAME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ThreadId !== undefined) view.setUint32(0, Number(data.ThreadId), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.RvaOfThreadName !== undefined) view.setBigUint64(8, util.toBigInt(data.RvaOfThreadName), true);
  return buf;
}

export class MINIDUMP_THREAD_NAMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ThreadId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: u64
  get RvaOfThreadName(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u32
  set ThreadId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: u64
  set RvaOfThreadName(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_THREAD_NAME_LIST (size: 16)
 */
export interface MINIDUMP_THREAD_NAME_LIST {
  /** u32 */
  NumberOfThreadNames: number;
  /** array */
  ThreadNames: Deno.PointerValue | null;
}

export const sizeofMINIDUMP_THREAD_NAME_LIST = 16;

export function allocMINIDUMP_THREAD_NAME_LIST(data?: Partial<MINIDUMP_THREAD_NAME_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_THREAD_NAME_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumberOfThreadNames !== undefined) view.setUint32(0, Number(data.NumberOfThreadNames), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ThreadNames !== undefined) view.setBigUint64(8, data.ThreadNames === null ? 0n : util.toBigInt(util.toPointer(data.ThreadNames)), true);
  return buf;
}

export class MINIDUMP_THREAD_NAME_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumberOfThreadNames(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ThreadNames(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set NumberOfThreadNames(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ThreadNames(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_THREAD_INFO (size: 64)
 */
export interface MINIDUMP_THREAD_INFO {
  /** u32 */
  ThreadId: number;
  /** Windows.Win32.System.Diagnostics.Debug.MINIDUMP_THREAD_INFO_DUMP_FLAGS */
  DumpFlags: MINIDUMP_THREAD_INFO_DUMP_FLAGS;
  /** u32 */
  DumpError: number;
  /** u32 */
  ExitStatus: number;
  /** u64 */
  CreateTime: number | bigint;
  /** u64 */
  ExitTime: number | bigint;
  /** u64 */
  KernelTime: number | bigint;
  /** u64 */
  UserTime: number | bigint;
  /** u64 */
  StartAddress: number | bigint;
  /** u64 */
  Affinity: number | bigint;
}

export const sizeofMINIDUMP_THREAD_INFO = 64;

export function allocMINIDUMP_THREAD_INFO(data?: Partial<MINIDUMP_THREAD_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_THREAD_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ThreadId !== undefined) view.setUint32(0, Number(data.ThreadId), true);
  // 0x04: u32
  if (data?.DumpFlags !== undefined) view.setUint32(4, Number(data.DumpFlags), true);
  // 0x08: u32
  if (data?.DumpError !== undefined) view.setUint32(8, Number(data.DumpError), true);
  // 0x0c: u32
  if (data?.ExitStatus !== undefined) view.setUint32(12, Number(data.ExitStatus), true);
  // 0x10: u64
  if (data?.CreateTime !== undefined) view.setBigUint64(16, util.toBigInt(data.CreateTime), true);
  // 0x18: u64
  if (data?.ExitTime !== undefined) view.setBigUint64(24, util.toBigInt(data.ExitTime), true);
  // 0x20: u64
  if (data?.KernelTime !== undefined) view.setBigUint64(32, util.toBigInt(data.KernelTime), true);
  // 0x28: u64
  if (data?.UserTime !== undefined) view.setBigUint64(40, util.toBigInt(data.UserTime), true);
  // 0x30: u64
  if (data?.StartAddress !== undefined) view.setBigUint64(48, util.toBigInt(data.StartAddress), true);
  // 0x38: u64
  if (data?.Affinity !== undefined) view.setBigUint64(56, util.toBigInt(data.Affinity), true);
  return buf;
}

export class MINIDUMP_THREAD_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ThreadId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get DumpFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get DumpError(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ExitStatus(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u64
  get CreateTime(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get ExitTime(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u64
  get KernelTime(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: u64
  get UserTime(): number | bigint {
    return this.view.getBigUint64(40, true);
  }

  // 0x30: u64
  get StartAddress(): number | bigint {
    return this.view.getBigUint64(48, true);
  }

  // 0x38: u64
  get Affinity(): number | bigint {
    return this.view.getBigUint64(56, true);
  }

  // 0x00: u32
  set ThreadId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set DumpFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set DumpError(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ExitStatus(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u64
  set CreateTime(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set ExitTime(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u64
  set KernelTime(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: u64
  set UserTime(value: number | bigint) {
    this.view.setBigUint64(40, util.toBigInt(value), true);
  }

  // 0x30: u64
  set StartAddress(value: number | bigint) {
    this.view.setBigUint64(48, util.toBigInt(value), true);
  }

  // 0x38: u64
  set Affinity(value: number | bigint) {
    this.view.setBigUint64(56, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_THREAD_INFO_LIST (size: 16)
 */
export interface MINIDUMP_THREAD_INFO_LIST {
  /** u32 */
  SizeOfHeader: number;
  /** u32 */
  SizeOfEntry: number;
  /** u32 */
  NumberOfEntries: number;
}

export const sizeofMINIDUMP_THREAD_INFO_LIST = 16;

export function allocMINIDUMP_THREAD_INFO_LIST(data?: Partial<MINIDUMP_THREAD_INFO_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_THREAD_INFO_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfHeader !== undefined) view.setUint32(0, Number(data.SizeOfHeader), true);
  // 0x04: u32
  if (data?.SizeOfEntry !== undefined) view.setUint32(4, Number(data.SizeOfEntry), true);
  // 0x08: u32
  if (data?.NumberOfEntries !== undefined) view.setUint32(8, Number(data.NumberOfEntries), true);
  // 0x0c: pad4
  return buf;
}

export class MINIDUMP_THREAD_INFO_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SizeOfHeader(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SizeOfEntry(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get NumberOfEntries(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set SizeOfHeader(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SizeOfEntry(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set NumberOfEntries(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_TOKEN_INFO_HEADER (size: 16)
 */
export interface MINIDUMP_TOKEN_INFO_HEADER {
  /** u32 */
  TokenSize: number;
  /** u32 */
  TokenId: number;
  /** u64 */
  TokenHandle: number | bigint;
}

export const sizeofMINIDUMP_TOKEN_INFO_HEADER = 16;

export function allocMINIDUMP_TOKEN_INFO_HEADER(data?: Partial<MINIDUMP_TOKEN_INFO_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_TOKEN_INFO_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TokenSize !== undefined) view.setUint32(0, Number(data.TokenSize), true);
  // 0x04: u32
  if (data?.TokenId !== undefined) view.setUint32(4, Number(data.TokenId), true);
  // 0x08: u64
  if (data?.TokenHandle !== undefined) view.setBigUint64(8, util.toBigInt(data.TokenHandle), true);
  return buf;
}

export class MINIDUMP_TOKEN_INFO_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get TokenSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get TokenId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get TokenHandle(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u32
  set TokenSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set TokenId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set TokenHandle(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_TOKEN_INFO_LIST (size: 16)
 */
export interface MINIDUMP_TOKEN_INFO_LIST {
  /** u32 */
  TokenListSize: number;
  /** u32 */
  TokenListEntries: number;
  /** u32 */
  ListHeaderSize: number;
  /** u32 */
  ElementHeaderSize: number;
}

export const sizeofMINIDUMP_TOKEN_INFO_LIST = 16;

export function allocMINIDUMP_TOKEN_INFO_LIST(data?: Partial<MINIDUMP_TOKEN_INFO_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_TOKEN_INFO_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TokenListSize !== undefined) view.setUint32(0, Number(data.TokenListSize), true);
  // 0x04: u32
  if (data?.TokenListEntries !== undefined) view.setUint32(4, Number(data.TokenListEntries), true);
  // 0x08: u32
  if (data?.ListHeaderSize !== undefined) view.setUint32(8, Number(data.ListHeaderSize), true);
  // 0x0c: u32
  if (data?.ElementHeaderSize !== undefined) view.setUint32(12, Number(data.ElementHeaderSize), true);
  return buf;
}

export class MINIDUMP_TOKEN_INFO_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get TokenListSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get TokenListEntries(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ListHeaderSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ElementHeaderSize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set TokenListSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set TokenListEntries(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ListHeaderSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ElementHeaderSize(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_SYSTEM_BASIC_INFORMATION (size: 56)
 */
export interface MINIDUMP_SYSTEM_BASIC_INFORMATION {
  /** u32 */
  TimerResolution: number;
  /** u32 */
  PageSize: number;
  /** u32 */
  NumberOfPhysicalPages: number;
  /** u32 */
  LowestPhysicalPageNumber: number;
  /** u32 */
  HighestPhysicalPageNumber: number;
  /** u32 */
  AllocationGranularity: number;
  /** u64 */
  MinimumUserModeAddress: number | bigint;
  /** u64 */
  MaximumUserModeAddress: number | bigint;
  /** u64 */
  ActiveProcessorsAffinityMask: number | bigint;
  /** u32 */
  NumberOfProcessors: number;
}

export const sizeofMINIDUMP_SYSTEM_BASIC_INFORMATION = 56;

export function allocMINIDUMP_SYSTEM_BASIC_INFORMATION(data?: Partial<MINIDUMP_SYSTEM_BASIC_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_SYSTEM_BASIC_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TimerResolution !== undefined) view.setUint32(0, Number(data.TimerResolution), true);
  // 0x04: u32
  if (data?.PageSize !== undefined) view.setUint32(4, Number(data.PageSize), true);
  // 0x08: u32
  if (data?.NumberOfPhysicalPages !== undefined) view.setUint32(8, Number(data.NumberOfPhysicalPages), true);
  // 0x0c: u32
  if (data?.LowestPhysicalPageNumber !== undefined) view.setUint32(12, Number(data.LowestPhysicalPageNumber), true);
  // 0x10: u32
  if (data?.HighestPhysicalPageNumber !== undefined) view.setUint32(16, Number(data.HighestPhysicalPageNumber), true);
  // 0x14: u32
  if (data?.AllocationGranularity !== undefined) view.setUint32(20, Number(data.AllocationGranularity), true);
  // 0x18: u64
  if (data?.MinimumUserModeAddress !== undefined) view.setBigUint64(24, util.toBigInt(data.MinimumUserModeAddress), true);
  // 0x20: u64
  if (data?.MaximumUserModeAddress !== undefined) view.setBigUint64(32, util.toBigInt(data.MaximumUserModeAddress), true);
  // 0x28: u64
  if (data?.ActiveProcessorsAffinityMask !== undefined) view.setBigUint64(40, util.toBigInt(data.ActiveProcessorsAffinityMask), true);
  // 0x30: u32
  if (data?.NumberOfProcessors !== undefined) view.setUint32(48, Number(data.NumberOfProcessors), true);
  // 0x34: pad4
  return buf;
}

export class MINIDUMP_SYSTEM_BASIC_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get TimerResolution(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get PageSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get NumberOfPhysicalPages(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get LowestPhysicalPageNumber(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get HighestPhysicalPageNumber(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get AllocationGranularity(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u64
  get MinimumUserModeAddress(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u64
  get MaximumUserModeAddress(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: u64
  get ActiveProcessorsAffinityMask(): number | bigint {
    return this.view.getBigUint64(40, true);
  }

  // 0x30: u32
  get NumberOfProcessors(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x00: u32
  set TimerResolution(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set PageSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set NumberOfPhysicalPages(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set LowestPhysicalPageNumber(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set HighestPhysicalPageNumber(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set AllocationGranularity(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u64
  set MinimumUserModeAddress(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u64
  set MaximumUserModeAddress(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: u64
  set ActiveProcessorsAffinityMask(value: number | bigint) {
    this.view.setBigUint64(40, util.toBigInt(value), true);
  }

  // 0x30: u32
  set NumberOfProcessors(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_SYSTEM_FILECACHE_INFORMATION (size: 64)
 */
export interface MINIDUMP_SYSTEM_FILECACHE_INFORMATION {
  /** u64 */
  CurrentSize: number | bigint;
  /** u64 */
  PeakSize: number | bigint;
  /** u32 */
  PageFaultCount: number;
  /** u64 */
  MinimumWorkingSet: number | bigint;
  /** u64 */
  MaximumWorkingSet: number | bigint;
  /** u64 */
  CurrentSizeIncludingTransitionInPages: number | bigint;
  /** u64 */
  PeakSizeIncludingTransitionInPages: number | bigint;
  /** u32 */
  TransitionRePurposeCount: number;
  /** u32 */
  Flags: number;
}

export const sizeofMINIDUMP_SYSTEM_FILECACHE_INFORMATION = 64;

export function allocMINIDUMP_SYSTEM_FILECACHE_INFORMATION(data?: Partial<MINIDUMP_SYSTEM_FILECACHE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_SYSTEM_FILECACHE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.CurrentSize !== undefined) view.setBigUint64(0, util.toBigInt(data.CurrentSize), true);
  // 0x08: u64
  if (data?.PeakSize !== undefined) view.setBigUint64(8, util.toBigInt(data.PeakSize), true);
  // 0x10: u32
  if (data?.PageFaultCount !== undefined) view.setUint32(16, Number(data.PageFaultCount), true);
  // 0x14: pad4
  // 0x18: u64
  if (data?.MinimumWorkingSet !== undefined) view.setBigUint64(24, util.toBigInt(data.MinimumWorkingSet), true);
  // 0x20: u64
  if (data?.MaximumWorkingSet !== undefined) view.setBigUint64(32, util.toBigInt(data.MaximumWorkingSet), true);
  // 0x28: u64
  if (data?.CurrentSizeIncludingTransitionInPages !== undefined) view.setBigUint64(40, util.toBigInt(data.CurrentSizeIncludingTransitionInPages), true);
  // 0x30: u64
  if (data?.PeakSizeIncludingTransitionInPages !== undefined) view.setBigUint64(48, util.toBigInt(data.PeakSizeIncludingTransitionInPages), true);
  // 0x38: u32
  if (data?.TransitionRePurposeCount !== undefined) view.setUint32(56, Number(data.TransitionRePurposeCount), true);
  // 0x3c: u32
  if (data?.Flags !== undefined) view.setUint32(60, Number(data.Flags), true);
  return buf;
}

export class MINIDUMP_SYSTEM_FILECACHE_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get CurrentSize(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get PeakSize(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u32
  get PageFaultCount(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: u64
  get MinimumWorkingSet(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u64
  get MaximumWorkingSet(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: u64
  get CurrentSizeIncludingTransitionInPages(): number | bigint {
    return this.view.getBigUint64(40, true);
  }

  // 0x30: u64
  get PeakSizeIncludingTransitionInPages(): number | bigint {
    return this.view.getBigUint64(48, true);
  }

  // 0x38: u32
  get TransitionRePurposeCount(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get Flags(): number {
    return this.view.getUint32(60, true);
  }

  // 0x00: u64
  set CurrentSize(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set PeakSize(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u32
  set PageFaultCount(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: u64
  set MinimumWorkingSet(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u64
  set MaximumWorkingSet(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: u64
  set CurrentSizeIncludingTransitionInPages(value: number | bigint) {
    this.view.setBigUint64(40, util.toBigInt(value), true);
  }

  // 0x30: u64
  set PeakSizeIncludingTransitionInPages(value: number | bigint) {
    this.view.setBigUint64(48, util.toBigInt(value), true);
  }

  // 0x38: u32
  set TransitionRePurposeCount(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set Flags(value: number) {
    this.view.setUint32(60, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_SYSTEM_BASIC_PERFORMANCE_INFORMATION (size: 32)
 */
export interface MINIDUMP_SYSTEM_BASIC_PERFORMANCE_INFORMATION {
  /** u64 */
  AvailablePages: number | bigint;
  /** u64 */
  CommittedPages: number | bigint;
  /** u64 */
  CommitLimit: number | bigint;
  /** u64 */
  PeakCommitment: number | bigint;
}

export const sizeofMINIDUMP_SYSTEM_BASIC_PERFORMANCE_INFORMATION = 32;

export function allocMINIDUMP_SYSTEM_BASIC_PERFORMANCE_INFORMATION(data?: Partial<MINIDUMP_SYSTEM_BASIC_PERFORMANCE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_SYSTEM_BASIC_PERFORMANCE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.AvailablePages !== undefined) view.setBigUint64(0, util.toBigInt(data.AvailablePages), true);
  // 0x08: u64
  if (data?.CommittedPages !== undefined) view.setBigUint64(8, util.toBigInt(data.CommittedPages), true);
  // 0x10: u64
  if (data?.CommitLimit !== undefined) view.setBigUint64(16, util.toBigInt(data.CommitLimit), true);
  // 0x18: u64
  if (data?.PeakCommitment !== undefined) view.setBigUint64(24, util.toBigInt(data.PeakCommitment), true);
  return buf;
}

export class MINIDUMP_SYSTEM_BASIC_PERFORMANCE_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get AvailablePages(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get CommittedPages(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get CommitLimit(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get PeakCommitment(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x00: u64
  set AvailablePages(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set CommittedPages(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set CommitLimit(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set PeakCommitment(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_SYSTEM_PERFORMANCE_INFORMATION (size: 344)
 */
export interface MINIDUMP_SYSTEM_PERFORMANCE_INFORMATION {
  /** u64 */
  IdleProcessTime: number | bigint;
  /** u64 */
  IoReadTransferCount: number | bigint;
  /** u64 */
  IoWriteTransferCount: number | bigint;
  /** u64 */
  IoOtherTransferCount: number | bigint;
  /** u32 */
  IoReadOperationCount: number;
  /** u32 */
  IoWriteOperationCount: number;
  /** u32 */
  IoOtherOperationCount: number;
  /** u32 */
  AvailablePages: number;
  /** u32 */
  CommittedPages: number;
  /** u32 */
  CommitLimit: number;
  /** u32 */
  PeakCommitment: number;
  /** u32 */
  PageFaultCount: number;
  /** u32 */
  CopyOnWriteCount: number;
  /** u32 */
  TransitionCount: number;
  /** u32 */
  CacheTransitionCount: number;
  /** u32 */
  DemandZeroCount: number;
  /** u32 */
  PageReadCount: number;
  /** u32 */
  PageReadIoCount: number;
  /** u32 */
  CacheReadCount: number;
  /** u32 */
  CacheIoCount: number;
  /** u32 */
  DirtyPagesWriteCount: number;
  /** u32 */
  DirtyWriteIoCount: number;
  /** u32 */
  MappedPagesWriteCount: number;
  /** u32 */
  MappedWriteIoCount: number;
  /** u32 */
  PagedPoolPages: number;
  /** u32 */
  NonPagedPoolPages: number;
  /** u32 */
  PagedPoolAllocs: number;
  /** u32 */
  PagedPoolFrees: number;
  /** u32 */
  NonPagedPoolAllocs: number;
  /** u32 */
  NonPagedPoolFrees: number;
  /** u32 */
  FreeSystemPtes: number;
  /** u32 */
  ResidentSystemCodePage: number;
  /** u32 */
  TotalSystemDriverPages: number;
  /** u32 */
  TotalSystemCodePages: number;
  /** u32 */
  NonPagedPoolLookasideHits: number;
  /** u32 */
  PagedPoolLookasideHits: number;
  /** u32 */
  AvailablePagedPoolPages: number;
  /** u32 */
  ResidentSystemCachePage: number;
  /** u32 */
  ResidentPagedPoolPage: number;
  /** u32 */
  ResidentSystemDriverPage: number;
  /** u32 */
  CcFastReadNoWait: number;
  /** u32 */
  CcFastReadWait: number;
  /** u32 */
  CcFastReadResourceMiss: number;
  /** u32 */
  CcFastReadNotPossible: number;
  /** u32 */
  CcFastMdlReadNoWait: number;
  /** u32 */
  CcFastMdlReadWait: number;
  /** u32 */
  CcFastMdlReadResourceMiss: number;
  /** u32 */
  CcFastMdlReadNotPossible: number;
  /** u32 */
  CcMapDataNoWait: number;
  /** u32 */
  CcMapDataWait: number;
  /** u32 */
  CcMapDataNoWaitMiss: number;
  /** u32 */
  CcMapDataWaitMiss: number;
  /** u32 */
  CcPinMappedDataCount: number;
  /** u32 */
  CcPinReadNoWait: number;
  /** u32 */
  CcPinReadWait: number;
  /** u32 */
  CcPinReadNoWaitMiss: number;
  /** u32 */
  CcPinReadWaitMiss: number;
  /** u32 */
  CcCopyReadNoWait: number;
  /** u32 */
  CcCopyReadWait: number;
  /** u32 */
  CcCopyReadNoWaitMiss: number;
  /** u32 */
  CcCopyReadWaitMiss: number;
  /** u32 */
  CcMdlReadNoWait: number;
  /** u32 */
  CcMdlReadWait: number;
  /** u32 */
  CcMdlReadNoWaitMiss: number;
  /** u32 */
  CcMdlReadWaitMiss: number;
  /** u32 */
  CcReadAheadIos: number;
  /** u32 */
  CcLazyWriteIos: number;
  /** u32 */
  CcLazyWritePages: number;
  /** u32 */
  CcDataFlushes: number;
  /** u32 */
  CcDataPages: number;
  /** u32 */
  ContextSwitches: number;
  /** u32 */
  FirstLevelTbFills: number;
  /** u32 */
  SecondLevelTbFills: number;
  /** u32 */
  SystemCalls: number;
  /** u64 */
  CcTotalDirtyPages: number | bigint;
  /** u64 */
  CcDirtyPageThreshold: number | bigint;
  /** i64 */
  ResidentAvailablePages: number | bigint;
  /** u64 */
  SharedCommittedPages: number | bigint;
}

export const sizeofMINIDUMP_SYSTEM_PERFORMANCE_INFORMATION = 344;

export function allocMINIDUMP_SYSTEM_PERFORMANCE_INFORMATION(data?: Partial<MINIDUMP_SYSTEM_PERFORMANCE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_SYSTEM_PERFORMANCE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.IdleProcessTime !== undefined) view.setBigUint64(0, util.toBigInt(data.IdleProcessTime), true);
  // 0x08: u64
  if (data?.IoReadTransferCount !== undefined) view.setBigUint64(8, util.toBigInt(data.IoReadTransferCount), true);
  // 0x10: u64
  if (data?.IoWriteTransferCount !== undefined) view.setBigUint64(16, util.toBigInt(data.IoWriteTransferCount), true);
  // 0x18: u64
  if (data?.IoOtherTransferCount !== undefined) view.setBigUint64(24, util.toBigInt(data.IoOtherTransferCount), true);
  // 0x20: u32
  if (data?.IoReadOperationCount !== undefined) view.setUint32(32, Number(data.IoReadOperationCount), true);
  // 0x24: u32
  if (data?.IoWriteOperationCount !== undefined) view.setUint32(36, Number(data.IoWriteOperationCount), true);
  // 0x28: u32
  if (data?.IoOtherOperationCount !== undefined) view.setUint32(40, Number(data.IoOtherOperationCount), true);
  // 0x2c: u32
  if (data?.AvailablePages !== undefined) view.setUint32(44, Number(data.AvailablePages), true);
  // 0x30: u32
  if (data?.CommittedPages !== undefined) view.setUint32(48, Number(data.CommittedPages), true);
  // 0x34: u32
  if (data?.CommitLimit !== undefined) view.setUint32(52, Number(data.CommitLimit), true);
  // 0x38: u32
  if (data?.PeakCommitment !== undefined) view.setUint32(56, Number(data.PeakCommitment), true);
  // 0x3c: u32
  if (data?.PageFaultCount !== undefined) view.setUint32(60, Number(data.PageFaultCount), true);
  // 0x40: u32
  if (data?.CopyOnWriteCount !== undefined) view.setUint32(64, Number(data.CopyOnWriteCount), true);
  // 0x44: u32
  if (data?.TransitionCount !== undefined) view.setUint32(68, Number(data.TransitionCount), true);
  // 0x48: u32
  if (data?.CacheTransitionCount !== undefined) view.setUint32(72, Number(data.CacheTransitionCount), true);
  // 0x4c: u32
  if (data?.DemandZeroCount !== undefined) view.setUint32(76, Number(data.DemandZeroCount), true);
  // 0x50: u32
  if (data?.PageReadCount !== undefined) view.setUint32(80, Number(data.PageReadCount), true);
  // 0x54: u32
  if (data?.PageReadIoCount !== undefined) view.setUint32(84, Number(data.PageReadIoCount), true);
  // 0x58: u32
  if (data?.CacheReadCount !== undefined) view.setUint32(88, Number(data.CacheReadCount), true);
  // 0x5c: u32
  if (data?.CacheIoCount !== undefined) view.setUint32(92, Number(data.CacheIoCount), true);
  // 0x60: u32
  if (data?.DirtyPagesWriteCount !== undefined) view.setUint32(96, Number(data.DirtyPagesWriteCount), true);
  // 0x64: u32
  if (data?.DirtyWriteIoCount !== undefined) view.setUint32(100, Number(data.DirtyWriteIoCount), true);
  // 0x68: u32
  if (data?.MappedPagesWriteCount !== undefined) view.setUint32(104, Number(data.MappedPagesWriteCount), true);
  // 0x6c: u32
  if (data?.MappedWriteIoCount !== undefined) view.setUint32(108, Number(data.MappedWriteIoCount), true);
  // 0x70: u32
  if (data?.PagedPoolPages !== undefined) view.setUint32(112, Number(data.PagedPoolPages), true);
  // 0x74: u32
  if (data?.NonPagedPoolPages !== undefined) view.setUint32(116, Number(data.NonPagedPoolPages), true);
  // 0x78: u32
  if (data?.PagedPoolAllocs !== undefined) view.setUint32(120, Number(data.PagedPoolAllocs), true);
  // 0x7c: u32
  if (data?.PagedPoolFrees !== undefined) view.setUint32(124, Number(data.PagedPoolFrees), true);
  // 0x80: u32
  if (data?.NonPagedPoolAllocs !== undefined) view.setUint32(128, Number(data.NonPagedPoolAllocs), true);
  // 0x84: u32
  if (data?.NonPagedPoolFrees !== undefined) view.setUint32(132, Number(data.NonPagedPoolFrees), true);
  // 0x88: u32
  if (data?.FreeSystemPtes !== undefined) view.setUint32(136, Number(data.FreeSystemPtes), true);
  // 0x8c: u32
  if (data?.ResidentSystemCodePage !== undefined) view.setUint32(140, Number(data.ResidentSystemCodePage), true);
  // 0x90: u32
  if (data?.TotalSystemDriverPages !== undefined) view.setUint32(144, Number(data.TotalSystemDriverPages), true);
  // 0x94: u32
  if (data?.TotalSystemCodePages !== undefined) view.setUint32(148, Number(data.TotalSystemCodePages), true);
  // 0x98: u32
  if (data?.NonPagedPoolLookasideHits !== undefined) view.setUint32(152, Number(data.NonPagedPoolLookasideHits), true);
  // 0x9c: u32
  if (data?.PagedPoolLookasideHits !== undefined) view.setUint32(156, Number(data.PagedPoolLookasideHits), true);
  // 0xa0: u32
  if (data?.AvailablePagedPoolPages !== undefined) view.setUint32(160, Number(data.AvailablePagedPoolPages), true);
  // 0xa4: u32
  if (data?.ResidentSystemCachePage !== undefined) view.setUint32(164, Number(data.ResidentSystemCachePage), true);
  // 0xa8: u32
  if (data?.ResidentPagedPoolPage !== undefined) view.setUint32(168, Number(data.ResidentPagedPoolPage), true);
  // 0xac: u32
  if (data?.ResidentSystemDriverPage !== undefined) view.setUint32(172, Number(data.ResidentSystemDriverPage), true);
  // 0xb0: u32
  if (data?.CcFastReadNoWait !== undefined) view.setUint32(176, Number(data.CcFastReadNoWait), true);
  // 0xb4: u32
  if (data?.CcFastReadWait !== undefined) view.setUint32(180, Number(data.CcFastReadWait), true);
  // 0xb8: u32
  if (data?.CcFastReadResourceMiss !== undefined) view.setUint32(184, Number(data.CcFastReadResourceMiss), true);
  // 0xbc: u32
  if (data?.CcFastReadNotPossible !== undefined) view.setUint32(188, Number(data.CcFastReadNotPossible), true);
  // 0xc0: u32
  if (data?.CcFastMdlReadNoWait !== undefined) view.setUint32(192, Number(data.CcFastMdlReadNoWait), true);
  // 0xc4: u32
  if (data?.CcFastMdlReadWait !== undefined) view.setUint32(196, Number(data.CcFastMdlReadWait), true);
  // 0xc8: u32
  if (data?.CcFastMdlReadResourceMiss !== undefined) view.setUint32(200, Number(data.CcFastMdlReadResourceMiss), true);
  // 0xcc: u32
  if (data?.CcFastMdlReadNotPossible !== undefined) view.setUint32(204, Number(data.CcFastMdlReadNotPossible), true);
  // 0xd0: u32
  if (data?.CcMapDataNoWait !== undefined) view.setUint32(208, Number(data.CcMapDataNoWait), true);
  // 0xd4: u32
  if (data?.CcMapDataWait !== undefined) view.setUint32(212, Number(data.CcMapDataWait), true);
  // 0xd8: u32
  if (data?.CcMapDataNoWaitMiss !== undefined) view.setUint32(216, Number(data.CcMapDataNoWaitMiss), true);
  // 0xdc: u32
  if (data?.CcMapDataWaitMiss !== undefined) view.setUint32(220, Number(data.CcMapDataWaitMiss), true);
  // 0xe0: u32
  if (data?.CcPinMappedDataCount !== undefined) view.setUint32(224, Number(data.CcPinMappedDataCount), true);
  // 0xe4: u32
  if (data?.CcPinReadNoWait !== undefined) view.setUint32(228, Number(data.CcPinReadNoWait), true);
  // 0xe8: u32
  if (data?.CcPinReadWait !== undefined) view.setUint32(232, Number(data.CcPinReadWait), true);
  // 0xec: u32
  if (data?.CcPinReadNoWaitMiss !== undefined) view.setUint32(236, Number(data.CcPinReadNoWaitMiss), true);
  // 0xf0: u32
  if (data?.CcPinReadWaitMiss !== undefined) view.setUint32(240, Number(data.CcPinReadWaitMiss), true);
  // 0xf4: u32
  if (data?.CcCopyReadNoWait !== undefined) view.setUint32(244, Number(data.CcCopyReadNoWait), true);
  // 0xf8: u32
  if (data?.CcCopyReadWait !== undefined) view.setUint32(248, Number(data.CcCopyReadWait), true);
  // 0xfc: u32
  if (data?.CcCopyReadNoWaitMiss !== undefined) view.setUint32(252, Number(data.CcCopyReadNoWaitMiss), true);
  // 0x100: u32
  if (data?.CcCopyReadWaitMiss !== undefined) view.setUint32(256, Number(data.CcCopyReadWaitMiss), true);
  // 0x104: u32
  if (data?.CcMdlReadNoWait !== undefined) view.setUint32(260, Number(data.CcMdlReadNoWait), true);
  // 0x108: u32
  if (data?.CcMdlReadWait !== undefined) view.setUint32(264, Number(data.CcMdlReadWait), true);
  // 0x10c: u32
  if (data?.CcMdlReadNoWaitMiss !== undefined) view.setUint32(268, Number(data.CcMdlReadNoWaitMiss), true);
  // 0x110: u32
  if (data?.CcMdlReadWaitMiss !== undefined) view.setUint32(272, Number(data.CcMdlReadWaitMiss), true);
  // 0x114: u32
  if (data?.CcReadAheadIos !== undefined) view.setUint32(276, Number(data.CcReadAheadIos), true);
  // 0x118: u32
  if (data?.CcLazyWriteIos !== undefined) view.setUint32(280, Number(data.CcLazyWriteIos), true);
  // 0x11c: u32
  if (data?.CcLazyWritePages !== undefined) view.setUint32(284, Number(data.CcLazyWritePages), true);
  // 0x120: u32
  if (data?.CcDataFlushes !== undefined) view.setUint32(288, Number(data.CcDataFlushes), true);
  // 0x124: u32
  if (data?.CcDataPages !== undefined) view.setUint32(292, Number(data.CcDataPages), true);
  // 0x128: u32
  if (data?.ContextSwitches !== undefined) view.setUint32(296, Number(data.ContextSwitches), true);
  // 0x12c: u32
  if (data?.FirstLevelTbFills !== undefined) view.setUint32(300, Number(data.FirstLevelTbFills), true);
  // 0x130: u32
  if (data?.SecondLevelTbFills !== undefined) view.setUint32(304, Number(data.SecondLevelTbFills), true);
  // 0x134: u32
  if (data?.SystemCalls !== undefined) view.setUint32(308, Number(data.SystemCalls), true);
  // 0x138: u64
  if (data?.CcTotalDirtyPages !== undefined) view.setBigUint64(312, util.toBigInt(data.CcTotalDirtyPages), true);
  // 0x140: u64
  if (data?.CcDirtyPageThreshold !== undefined) view.setBigUint64(320, util.toBigInt(data.CcDirtyPageThreshold), true);
  // 0x148: i64
  if (data?.ResidentAvailablePages !== undefined) view.setBigInt64(328, util.toBigInt(data.ResidentAvailablePages), true);
  // 0x150: u64
  if (data?.SharedCommittedPages !== undefined) view.setBigUint64(336, util.toBigInt(data.SharedCommittedPages), true);
  return buf;
}

export class MINIDUMP_SYSTEM_PERFORMANCE_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get IdleProcessTime(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get IoReadTransferCount(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get IoWriteTransferCount(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get IoOtherTransferCount(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u32
  get IoReadOperationCount(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get IoWriteOperationCount(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get IoOtherOperationCount(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get AvailablePages(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get CommittedPages(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get CommitLimit(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get PeakCommitment(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get PageFaultCount(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get CopyOnWriteCount(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get TransitionCount(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get CacheTransitionCount(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get DemandZeroCount(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get PageReadCount(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get PageReadIoCount(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get CacheReadCount(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get CacheIoCount(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: u32
  get DirtyPagesWriteCount(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u32
  get DirtyWriteIoCount(): number {
    return this.view.getUint32(100, true);
  }

  // 0x68: u32
  get MappedPagesWriteCount(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: u32
  get MappedWriteIoCount(): number {
    return this.view.getUint32(108, true);
  }

  // 0x70: u32
  get PagedPoolPages(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: u32
  get NonPagedPoolPages(): number {
    return this.view.getUint32(116, true);
  }

  // 0x78: u32
  get PagedPoolAllocs(): number {
    return this.view.getUint32(120, true);
  }

  // 0x7c: u32
  get PagedPoolFrees(): number {
    return this.view.getUint32(124, true);
  }

  // 0x80: u32
  get NonPagedPoolAllocs(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: u32
  get NonPagedPoolFrees(): number {
    return this.view.getUint32(132, true);
  }

  // 0x88: u32
  get FreeSystemPtes(): number {
    return this.view.getUint32(136, true);
  }

  // 0x8c: u32
  get ResidentSystemCodePage(): number {
    return this.view.getUint32(140, true);
  }

  // 0x90: u32
  get TotalSystemDriverPages(): number {
    return this.view.getUint32(144, true);
  }

  // 0x94: u32
  get TotalSystemCodePages(): number {
    return this.view.getUint32(148, true);
  }

  // 0x98: u32
  get NonPagedPoolLookasideHits(): number {
    return this.view.getUint32(152, true);
  }

  // 0x9c: u32
  get PagedPoolLookasideHits(): number {
    return this.view.getUint32(156, true);
  }

  // 0xa0: u32
  get AvailablePagedPoolPages(): number {
    return this.view.getUint32(160, true);
  }

  // 0xa4: u32
  get ResidentSystemCachePage(): number {
    return this.view.getUint32(164, true);
  }

  // 0xa8: u32
  get ResidentPagedPoolPage(): number {
    return this.view.getUint32(168, true);
  }

  // 0xac: u32
  get ResidentSystemDriverPage(): number {
    return this.view.getUint32(172, true);
  }

  // 0xb0: u32
  get CcFastReadNoWait(): number {
    return this.view.getUint32(176, true);
  }

  // 0xb4: u32
  get CcFastReadWait(): number {
    return this.view.getUint32(180, true);
  }

  // 0xb8: u32
  get CcFastReadResourceMiss(): number {
    return this.view.getUint32(184, true);
  }

  // 0xbc: u32
  get CcFastReadNotPossible(): number {
    return this.view.getUint32(188, true);
  }

  // 0xc0: u32
  get CcFastMdlReadNoWait(): number {
    return this.view.getUint32(192, true);
  }

  // 0xc4: u32
  get CcFastMdlReadWait(): number {
    return this.view.getUint32(196, true);
  }

  // 0xc8: u32
  get CcFastMdlReadResourceMiss(): number {
    return this.view.getUint32(200, true);
  }

  // 0xcc: u32
  get CcFastMdlReadNotPossible(): number {
    return this.view.getUint32(204, true);
  }

  // 0xd0: u32
  get CcMapDataNoWait(): number {
    return this.view.getUint32(208, true);
  }

  // 0xd4: u32
  get CcMapDataWait(): number {
    return this.view.getUint32(212, true);
  }

  // 0xd8: u32
  get CcMapDataNoWaitMiss(): number {
    return this.view.getUint32(216, true);
  }

  // 0xdc: u32
  get CcMapDataWaitMiss(): number {
    return this.view.getUint32(220, true);
  }

  // 0xe0: u32
  get CcPinMappedDataCount(): number {
    return this.view.getUint32(224, true);
  }

  // 0xe4: u32
  get CcPinReadNoWait(): number {
    return this.view.getUint32(228, true);
  }

  // 0xe8: u32
  get CcPinReadWait(): number {
    return this.view.getUint32(232, true);
  }

  // 0xec: u32
  get CcPinReadNoWaitMiss(): number {
    return this.view.getUint32(236, true);
  }

  // 0xf0: u32
  get CcPinReadWaitMiss(): number {
    return this.view.getUint32(240, true);
  }

  // 0xf4: u32
  get CcCopyReadNoWait(): number {
    return this.view.getUint32(244, true);
  }

  // 0xf8: u32
  get CcCopyReadWait(): number {
    return this.view.getUint32(248, true);
  }

  // 0xfc: u32
  get CcCopyReadNoWaitMiss(): number {
    return this.view.getUint32(252, true);
  }

  // 0x100: u32
  get CcCopyReadWaitMiss(): number {
    return this.view.getUint32(256, true);
  }

  // 0x104: u32
  get CcMdlReadNoWait(): number {
    return this.view.getUint32(260, true);
  }

  // 0x108: u32
  get CcMdlReadWait(): number {
    return this.view.getUint32(264, true);
  }

  // 0x10c: u32
  get CcMdlReadNoWaitMiss(): number {
    return this.view.getUint32(268, true);
  }

  // 0x110: u32
  get CcMdlReadWaitMiss(): number {
    return this.view.getUint32(272, true);
  }

  // 0x114: u32
  get CcReadAheadIos(): number {
    return this.view.getUint32(276, true);
  }

  // 0x118: u32
  get CcLazyWriteIos(): number {
    return this.view.getUint32(280, true);
  }

  // 0x11c: u32
  get CcLazyWritePages(): number {
    return this.view.getUint32(284, true);
  }

  // 0x120: u32
  get CcDataFlushes(): number {
    return this.view.getUint32(288, true);
  }

  // 0x124: u32
  get CcDataPages(): number {
    return this.view.getUint32(292, true);
  }

  // 0x128: u32
  get ContextSwitches(): number {
    return this.view.getUint32(296, true);
  }

  // 0x12c: u32
  get FirstLevelTbFills(): number {
    return this.view.getUint32(300, true);
  }

  // 0x130: u32
  get SecondLevelTbFills(): number {
    return this.view.getUint32(304, true);
  }

  // 0x134: u32
  get SystemCalls(): number {
    return this.view.getUint32(308, true);
  }

  // 0x138: u64
  get CcTotalDirtyPages(): number | bigint {
    return this.view.getBigUint64(312, true);
  }

  // 0x140: u64
  get CcDirtyPageThreshold(): number | bigint {
    return this.view.getBigUint64(320, true);
  }

  // 0x148: i64
  get ResidentAvailablePages(): number | bigint {
    return this.view.getBigInt64(328, true);
  }

  // 0x150: u64
  get SharedCommittedPages(): number | bigint {
    return this.view.getBigUint64(336, true);
  }

  // 0x00: u64
  set IdleProcessTime(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set IoReadTransferCount(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set IoWriteTransferCount(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set IoOtherTransferCount(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u32
  set IoReadOperationCount(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set IoWriteOperationCount(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set IoOtherOperationCount(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set AvailablePages(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set CommittedPages(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set CommitLimit(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set PeakCommitment(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set PageFaultCount(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set CopyOnWriteCount(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set TransitionCount(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set CacheTransitionCount(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set DemandZeroCount(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set PageReadCount(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set PageReadIoCount(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set CacheReadCount(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set CacheIoCount(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: u32
  set DirtyPagesWriteCount(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u32
  set DirtyWriteIoCount(value: number) {
    this.view.setUint32(100, value, true);
  }

  // 0x68: u32
  set MappedPagesWriteCount(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: u32
  set MappedWriteIoCount(value: number) {
    this.view.setUint32(108, value, true);
  }

  // 0x70: u32
  set PagedPoolPages(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: u32
  set NonPagedPoolPages(value: number) {
    this.view.setUint32(116, value, true);
  }

  // 0x78: u32
  set PagedPoolAllocs(value: number) {
    this.view.setUint32(120, value, true);
  }

  // 0x7c: u32
  set PagedPoolFrees(value: number) {
    this.view.setUint32(124, value, true);
  }

  // 0x80: u32
  set NonPagedPoolAllocs(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: u32
  set NonPagedPoolFrees(value: number) {
    this.view.setUint32(132, value, true);
  }

  // 0x88: u32
  set FreeSystemPtes(value: number) {
    this.view.setUint32(136, value, true);
  }

  // 0x8c: u32
  set ResidentSystemCodePage(value: number) {
    this.view.setUint32(140, value, true);
  }

  // 0x90: u32
  set TotalSystemDriverPages(value: number) {
    this.view.setUint32(144, value, true);
  }

  // 0x94: u32
  set TotalSystemCodePages(value: number) {
    this.view.setUint32(148, value, true);
  }

  // 0x98: u32
  set NonPagedPoolLookasideHits(value: number) {
    this.view.setUint32(152, value, true);
  }

  // 0x9c: u32
  set PagedPoolLookasideHits(value: number) {
    this.view.setUint32(156, value, true);
  }

  // 0xa0: u32
  set AvailablePagedPoolPages(value: number) {
    this.view.setUint32(160, value, true);
  }

  // 0xa4: u32
  set ResidentSystemCachePage(value: number) {
    this.view.setUint32(164, value, true);
  }

  // 0xa8: u32
  set ResidentPagedPoolPage(value: number) {
    this.view.setUint32(168, value, true);
  }

  // 0xac: u32
  set ResidentSystemDriverPage(value: number) {
    this.view.setUint32(172, value, true);
  }

  // 0xb0: u32
  set CcFastReadNoWait(value: number) {
    this.view.setUint32(176, value, true);
  }

  // 0xb4: u32
  set CcFastReadWait(value: number) {
    this.view.setUint32(180, value, true);
  }

  // 0xb8: u32
  set CcFastReadResourceMiss(value: number) {
    this.view.setUint32(184, value, true);
  }

  // 0xbc: u32
  set CcFastReadNotPossible(value: number) {
    this.view.setUint32(188, value, true);
  }

  // 0xc0: u32
  set CcFastMdlReadNoWait(value: number) {
    this.view.setUint32(192, value, true);
  }

  // 0xc4: u32
  set CcFastMdlReadWait(value: number) {
    this.view.setUint32(196, value, true);
  }

  // 0xc8: u32
  set CcFastMdlReadResourceMiss(value: number) {
    this.view.setUint32(200, value, true);
  }

  // 0xcc: u32
  set CcFastMdlReadNotPossible(value: number) {
    this.view.setUint32(204, value, true);
  }

  // 0xd0: u32
  set CcMapDataNoWait(value: number) {
    this.view.setUint32(208, value, true);
  }

  // 0xd4: u32
  set CcMapDataWait(value: number) {
    this.view.setUint32(212, value, true);
  }

  // 0xd8: u32
  set CcMapDataNoWaitMiss(value: number) {
    this.view.setUint32(216, value, true);
  }

  // 0xdc: u32
  set CcMapDataWaitMiss(value: number) {
    this.view.setUint32(220, value, true);
  }

  // 0xe0: u32
  set CcPinMappedDataCount(value: number) {
    this.view.setUint32(224, value, true);
  }

  // 0xe4: u32
  set CcPinReadNoWait(value: number) {
    this.view.setUint32(228, value, true);
  }

  // 0xe8: u32
  set CcPinReadWait(value: number) {
    this.view.setUint32(232, value, true);
  }

  // 0xec: u32
  set CcPinReadNoWaitMiss(value: number) {
    this.view.setUint32(236, value, true);
  }

  // 0xf0: u32
  set CcPinReadWaitMiss(value: number) {
    this.view.setUint32(240, value, true);
  }

  // 0xf4: u32
  set CcCopyReadNoWait(value: number) {
    this.view.setUint32(244, value, true);
  }

  // 0xf8: u32
  set CcCopyReadWait(value: number) {
    this.view.setUint32(248, value, true);
  }

  // 0xfc: u32
  set CcCopyReadNoWaitMiss(value: number) {
    this.view.setUint32(252, value, true);
  }

  // 0x100: u32
  set CcCopyReadWaitMiss(value: number) {
    this.view.setUint32(256, value, true);
  }

  // 0x104: u32
  set CcMdlReadNoWait(value: number) {
    this.view.setUint32(260, value, true);
  }

  // 0x108: u32
  set CcMdlReadWait(value: number) {
    this.view.setUint32(264, value, true);
  }

  // 0x10c: u32
  set CcMdlReadNoWaitMiss(value: number) {
    this.view.setUint32(268, value, true);
  }

  // 0x110: u32
  set CcMdlReadWaitMiss(value: number) {
    this.view.setUint32(272, value, true);
  }

  // 0x114: u32
  set CcReadAheadIos(value: number) {
    this.view.setUint32(276, value, true);
  }

  // 0x118: u32
  set CcLazyWriteIos(value: number) {
    this.view.setUint32(280, value, true);
  }

  // 0x11c: u32
  set CcLazyWritePages(value: number) {
    this.view.setUint32(284, value, true);
  }

  // 0x120: u32
  set CcDataFlushes(value: number) {
    this.view.setUint32(288, value, true);
  }

  // 0x124: u32
  set CcDataPages(value: number) {
    this.view.setUint32(292, value, true);
  }

  // 0x128: u32
  set ContextSwitches(value: number) {
    this.view.setUint32(296, value, true);
  }

  // 0x12c: u32
  set FirstLevelTbFills(value: number) {
    this.view.setUint32(300, value, true);
  }

  // 0x130: u32
  set SecondLevelTbFills(value: number) {
    this.view.setUint32(304, value, true);
  }

  // 0x134: u32
  set SystemCalls(value: number) {
    this.view.setUint32(308, value, true);
  }

  // 0x138: u64
  set CcTotalDirtyPages(value: number | bigint) {
    this.view.setBigUint64(312, util.toBigInt(value), true);
  }

  // 0x140: u64
  set CcDirtyPageThreshold(value: number | bigint) {
    this.view.setBigUint64(320, util.toBigInt(value), true);
  }

  // 0x148: i64
  set ResidentAvailablePages(value: number | bigint) {
    this.view.setBigInt64(328, util.toBigInt(value), true);
  }

  // 0x150: u64
  set SharedCommittedPages(value: number | bigint) {
    this.view.setBigUint64(336, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_SYSTEM_MEMORY_INFO_1 (size: 40)
 */
export interface MINIDUMP_SYSTEM_MEMORY_INFO_1 {
  /** u16 */
  Revision: number;
  /** u16 */
  Flags: number;
  /** Windows.Win32.System.Diagnostics.Debug.MINIDUMP_SYSTEM_BASIC_INFORMATION */
  BasicInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.MINIDUMP_SYSTEM_FILECACHE_INFORMATION */
  FileCacheInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.MINIDUMP_SYSTEM_BASIC_PERFORMANCE_INFORMATION */
  BasicPerfInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.MINIDUMP_SYSTEM_PERFORMANCE_INFORMATION */
  PerfInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMINIDUMP_SYSTEM_MEMORY_INFO_1 = 40;

export function allocMINIDUMP_SYSTEM_MEMORY_INFO_1(data?: Partial<MINIDUMP_SYSTEM_MEMORY_INFO_1>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_SYSTEM_MEMORY_INFO_1);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Revision !== undefined) view.setUint16(0, Number(data.Revision), true);
  // 0x02: u16
  if (data?.Flags !== undefined) view.setUint16(2, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.BasicInfo !== undefined) view.setBigUint64(8, data.BasicInfo === null ? 0n : util.toBigInt(util.toPointer(data.BasicInfo)), true);
  // 0x10: pointer
  if (data?.FileCacheInfo !== undefined) view.setBigUint64(16, data.FileCacheInfo === null ? 0n : util.toBigInt(util.toPointer(data.FileCacheInfo)), true);
  // 0x18: pointer
  if (data?.BasicPerfInfo !== undefined) view.setBigUint64(24, data.BasicPerfInfo === null ? 0n : util.toBigInt(util.toPointer(data.BasicPerfInfo)), true);
  // 0x20: pointer
  if (data?.PerfInfo !== undefined) view.setBigUint64(32, data.PerfInfo === null ? 0n : util.toBigInt(util.toPointer(data.PerfInfo)), true);
  return buf;
}

export class MINIDUMP_SYSTEM_MEMORY_INFO_1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Revision(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Flags(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get BasicInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get FileCacheInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get BasicPerfInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get PerfInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set Revision(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Flags(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set BasicInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set FileCacheInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set BasicPerfInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set PerfInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_PROCESS_VM_COUNTERS_1 (size: 80)
 */
export interface MINIDUMP_PROCESS_VM_COUNTERS_1 {
  /** u16 */
  Revision: number;
  /** u32 */
  PageFaultCount: number;
  /** u64 */
  PeakWorkingSetSize: number | bigint;
  /** u64 */
  WorkingSetSize: number | bigint;
  /** u64 */
  QuotaPeakPagedPoolUsage: number | bigint;
  /** u64 */
  QuotaPagedPoolUsage: number | bigint;
  /** u64 */
  QuotaPeakNonPagedPoolUsage: number | bigint;
  /** u64 */
  QuotaNonPagedPoolUsage: number | bigint;
  /** u64 */
  PagefileUsage: number | bigint;
  /** u64 */
  PeakPagefileUsage: number | bigint;
  /** u64 */
  PrivateUsage: number | bigint;
}

export const sizeofMINIDUMP_PROCESS_VM_COUNTERS_1 = 80;

export function allocMINIDUMP_PROCESS_VM_COUNTERS_1(data?: Partial<MINIDUMP_PROCESS_VM_COUNTERS_1>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_PROCESS_VM_COUNTERS_1);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Revision !== undefined) view.setUint16(0, Number(data.Revision), true);
  // 0x02: u32
  if (data?.PageFaultCount !== undefined) view.setUint32(2, Number(data.PageFaultCount), true);
  // 0x06: pad2
  // 0x08: u64
  if (data?.PeakWorkingSetSize !== undefined) view.setBigUint64(8, util.toBigInt(data.PeakWorkingSetSize), true);
  // 0x10: u64
  if (data?.WorkingSetSize !== undefined) view.setBigUint64(16, util.toBigInt(data.WorkingSetSize), true);
  // 0x18: u64
  if (data?.QuotaPeakPagedPoolUsage !== undefined) view.setBigUint64(24, util.toBigInt(data.QuotaPeakPagedPoolUsage), true);
  // 0x20: u64
  if (data?.QuotaPagedPoolUsage !== undefined) view.setBigUint64(32, util.toBigInt(data.QuotaPagedPoolUsage), true);
  // 0x28: u64
  if (data?.QuotaPeakNonPagedPoolUsage !== undefined) view.setBigUint64(40, util.toBigInt(data.QuotaPeakNonPagedPoolUsage), true);
  // 0x30: u64
  if (data?.QuotaNonPagedPoolUsage !== undefined) view.setBigUint64(48, util.toBigInt(data.QuotaNonPagedPoolUsage), true);
  // 0x38: u64
  if (data?.PagefileUsage !== undefined) view.setBigUint64(56, util.toBigInt(data.PagefileUsage), true);
  // 0x40: u64
  if (data?.PeakPagefileUsage !== undefined) view.setBigUint64(64, util.toBigInt(data.PeakPagefileUsage), true);
  // 0x48: u64
  if (data?.PrivateUsage !== undefined) view.setBigUint64(72, util.toBigInt(data.PrivateUsage), true);
  return buf;
}

export class MINIDUMP_PROCESS_VM_COUNTERS_1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Revision(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u32
  get PageFaultCount(): number {
    return this.view.getUint32(2, true);
  }

  // 0x06: pad2

  // 0x08: u64
  get PeakWorkingSetSize(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get WorkingSetSize(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get QuotaPeakPagedPoolUsage(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u64
  get QuotaPagedPoolUsage(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: u64
  get QuotaPeakNonPagedPoolUsage(): number | bigint {
    return this.view.getBigUint64(40, true);
  }

  // 0x30: u64
  get QuotaNonPagedPoolUsage(): number | bigint {
    return this.view.getBigUint64(48, true);
  }

  // 0x38: u64
  get PagefileUsage(): number | bigint {
    return this.view.getBigUint64(56, true);
  }

  // 0x40: u64
  get PeakPagefileUsage(): number | bigint {
    return this.view.getBigUint64(64, true);
  }

  // 0x48: u64
  get PrivateUsage(): number | bigint {
    return this.view.getBigUint64(72, true);
  }

  // 0x00: u16
  set Revision(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u32
  set PageFaultCount(value: number) {
    this.view.setUint32(2, value, true);
  }

  // 0x06: pad2

  // 0x08: u64
  set PeakWorkingSetSize(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set WorkingSetSize(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set QuotaPeakPagedPoolUsage(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u64
  set QuotaPagedPoolUsage(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: u64
  set QuotaPeakNonPagedPoolUsage(value: number | bigint) {
    this.view.setBigUint64(40, util.toBigInt(value), true);
  }

  // 0x30: u64
  set QuotaNonPagedPoolUsage(value: number | bigint) {
    this.view.setBigUint64(48, util.toBigInt(value), true);
  }

  // 0x38: u64
  set PagefileUsage(value: number | bigint) {
    this.view.setBigUint64(56, util.toBigInt(value), true);
  }

  // 0x40: u64
  set PeakPagefileUsage(value: number | bigint) {
    this.view.setBigUint64(64, util.toBigInt(value), true);
  }

  // 0x48: u64
  set PrivateUsage(value: number | bigint) {
    this.view.setBigUint64(72, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_PROCESS_VM_COUNTERS_2 (size: 152)
 */
export interface MINIDUMP_PROCESS_VM_COUNTERS_2 {
  /** u16 */
  Revision: number;
  /** u16 */
  Flags: number;
  /** u32 */
  PageFaultCount: number;
  /** u64 */
  PeakWorkingSetSize: number | bigint;
  /** u64 */
  WorkingSetSize: number | bigint;
  /** u64 */
  QuotaPeakPagedPoolUsage: number | bigint;
  /** u64 */
  QuotaPagedPoolUsage: number | bigint;
  /** u64 */
  QuotaPeakNonPagedPoolUsage: number | bigint;
  /** u64 */
  QuotaNonPagedPoolUsage: number | bigint;
  /** u64 */
  PagefileUsage: number | bigint;
  /** u64 */
  PeakPagefileUsage: number | bigint;
  /** u64 */
  PeakVirtualSize: number | bigint;
  /** u64 */
  VirtualSize: number | bigint;
  /** u64 */
  PrivateUsage: number | bigint;
  /** u64 */
  PrivateWorkingSetSize: number | bigint;
  /** u64 */
  SharedCommitUsage: number | bigint;
  /** u64 */
  JobSharedCommitUsage: number | bigint;
  /** u64 */
  JobPrivateCommitUsage: number | bigint;
  /** u64 */
  JobPeakPrivateCommitUsage: number | bigint;
  /** u64 */
  JobPrivateCommitLimit: number | bigint;
  /** u64 */
  JobTotalCommitLimit: number | bigint;
}

export const sizeofMINIDUMP_PROCESS_VM_COUNTERS_2 = 152;

export function allocMINIDUMP_PROCESS_VM_COUNTERS_2(data?: Partial<MINIDUMP_PROCESS_VM_COUNTERS_2>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_PROCESS_VM_COUNTERS_2);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Revision !== undefined) view.setUint16(0, Number(data.Revision), true);
  // 0x02: u16
  if (data?.Flags !== undefined) view.setUint16(2, Number(data.Flags), true);
  // 0x04: u32
  if (data?.PageFaultCount !== undefined) view.setUint32(4, Number(data.PageFaultCount), true);
  // 0x08: u64
  if (data?.PeakWorkingSetSize !== undefined) view.setBigUint64(8, util.toBigInt(data.PeakWorkingSetSize), true);
  // 0x10: u64
  if (data?.WorkingSetSize !== undefined) view.setBigUint64(16, util.toBigInt(data.WorkingSetSize), true);
  // 0x18: u64
  if (data?.QuotaPeakPagedPoolUsage !== undefined) view.setBigUint64(24, util.toBigInt(data.QuotaPeakPagedPoolUsage), true);
  // 0x20: u64
  if (data?.QuotaPagedPoolUsage !== undefined) view.setBigUint64(32, util.toBigInt(data.QuotaPagedPoolUsage), true);
  // 0x28: u64
  if (data?.QuotaPeakNonPagedPoolUsage !== undefined) view.setBigUint64(40, util.toBigInt(data.QuotaPeakNonPagedPoolUsage), true);
  // 0x30: u64
  if (data?.QuotaNonPagedPoolUsage !== undefined) view.setBigUint64(48, util.toBigInt(data.QuotaNonPagedPoolUsage), true);
  // 0x38: u64
  if (data?.PagefileUsage !== undefined) view.setBigUint64(56, util.toBigInt(data.PagefileUsage), true);
  // 0x40: u64
  if (data?.PeakPagefileUsage !== undefined) view.setBigUint64(64, util.toBigInt(data.PeakPagefileUsage), true);
  // 0x48: u64
  if (data?.PeakVirtualSize !== undefined) view.setBigUint64(72, util.toBigInt(data.PeakVirtualSize), true);
  // 0x50: u64
  if (data?.VirtualSize !== undefined) view.setBigUint64(80, util.toBigInt(data.VirtualSize), true);
  // 0x58: u64
  if (data?.PrivateUsage !== undefined) view.setBigUint64(88, util.toBigInt(data.PrivateUsage), true);
  // 0x60: u64
  if (data?.PrivateWorkingSetSize !== undefined) view.setBigUint64(96, util.toBigInt(data.PrivateWorkingSetSize), true);
  // 0x68: u64
  if (data?.SharedCommitUsage !== undefined) view.setBigUint64(104, util.toBigInt(data.SharedCommitUsage), true);
  // 0x70: u64
  if (data?.JobSharedCommitUsage !== undefined) view.setBigUint64(112, util.toBigInt(data.JobSharedCommitUsage), true);
  // 0x78: u64
  if (data?.JobPrivateCommitUsage !== undefined) view.setBigUint64(120, util.toBigInt(data.JobPrivateCommitUsage), true);
  // 0x80: u64
  if (data?.JobPeakPrivateCommitUsage !== undefined) view.setBigUint64(128, util.toBigInt(data.JobPeakPrivateCommitUsage), true);
  // 0x88: u64
  if (data?.JobPrivateCommitLimit !== undefined) view.setBigUint64(136, util.toBigInt(data.JobPrivateCommitLimit), true);
  // 0x90: u64
  if (data?.JobTotalCommitLimit !== undefined) view.setBigUint64(144, util.toBigInt(data.JobTotalCommitLimit), true);
  return buf;
}

export class MINIDUMP_PROCESS_VM_COUNTERS_2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Revision(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Flags(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get PageFaultCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get PeakWorkingSetSize(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get WorkingSetSize(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get QuotaPeakPagedPoolUsage(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u64
  get QuotaPagedPoolUsage(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: u64
  get QuotaPeakNonPagedPoolUsage(): number | bigint {
    return this.view.getBigUint64(40, true);
  }

  // 0x30: u64
  get QuotaNonPagedPoolUsage(): number | bigint {
    return this.view.getBigUint64(48, true);
  }

  // 0x38: u64
  get PagefileUsage(): number | bigint {
    return this.view.getBigUint64(56, true);
  }

  // 0x40: u64
  get PeakPagefileUsage(): number | bigint {
    return this.view.getBigUint64(64, true);
  }

  // 0x48: u64
  get PeakVirtualSize(): number | bigint {
    return this.view.getBigUint64(72, true);
  }

  // 0x50: u64
  get VirtualSize(): number | bigint {
    return this.view.getBigUint64(80, true);
  }

  // 0x58: u64
  get PrivateUsage(): number | bigint {
    return this.view.getBigUint64(88, true);
  }

  // 0x60: u64
  get PrivateWorkingSetSize(): number | bigint {
    return this.view.getBigUint64(96, true);
  }

  // 0x68: u64
  get SharedCommitUsage(): number | bigint {
    return this.view.getBigUint64(104, true);
  }

  // 0x70: u64
  get JobSharedCommitUsage(): number | bigint {
    return this.view.getBigUint64(112, true);
  }

  // 0x78: u64
  get JobPrivateCommitUsage(): number | bigint {
    return this.view.getBigUint64(120, true);
  }

  // 0x80: u64
  get JobPeakPrivateCommitUsage(): number | bigint {
    return this.view.getBigUint64(128, true);
  }

  // 0x88: u64
  get JobPrivateCommitLimit(): number | bigint {
    return this.view.getBigUint64(136, true);
  }

  // 0x90: u64
  get JobTotalCommitLimit(): number | bigint {
    return this.view.getBigUint64(144, true);
  }

  // 0x00: u16
  set Revision(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Flags(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set PageFaultCount(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set PeakWorkingSetSize(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set WorkingSetSize(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set QuotaPeakPagedPoolUsage(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u64
  set QuotaPagedPoolUsage(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: u64
  set QuotaPeakNonPagedPoolUsage(value: number | bigint) {
    this.view.setBigUint64(40, util.toBigInt(value), true);
  }

  // 0x30: u64
  set QuotaNonPagedPoolUsage(value: number | bigint) {
    this.view.setBigUint64(48, util.toBigInt(value), true);
  }

  // 0x38: u64
  set PagefileUsage(value: number | bigint) {
    this.view.setBigUint64(56, util.toBigInt(value), true);
  }

  // 0x40: u64
  set PeakPagefileUsage(value: number | bigint) {
    this.view.setBigUint64(64, util.toBigInt(value), true);
  }

  // 0x48: u64
  set PeakVirtualSize(value: number | bigint) {
    this.view.setBigUint64(72, util.toBigInt(value), true);
  }

  // 0x50: u64
  set VirtualSize(value: number | bigint) {
    this.view.setBigUint64(80, util.toBigInt(value), true);
  }

  // 0x58: u64
  set PrivateUsage(value: number | bigint) {
    this.view.setBigUint64(88, util.toBigInt(value), true);
  }

  // 0x60: u64
  set PrivateWorkingSetSize(value: number | bigint) {
    this.view.setBigUint64(96, util.toBigInt(value), true);
  }

  // 0x68: u64
  set SharedCommitUsage(value: number | bigint) {
    this.view.setBigUint64(104, util.toBigInt(value), true);
  }

  // 0x70: u64
  set JobSharedCommitUsage(value: number | bigint) {
    this.view.setBigUint64(112, util.toBigInt(value), true);
  }

  // 0x78: u64
  set JobPrivateCommitUsage(value: number | bigint) {
    this.view.setBigUint64(120, util.toBigInt(value), true);
  }

  // 0x80: u64
  set JobPeakPrivateCommitUsage(value: number | bigint) {
    this.view.setBigUint64(128, util.toBigInt(value), true);
  }

  // 0x88: u64
  set JobPrivateCommitLimit(value: number | bigint) {
    this.view.setBigUint64(136, util.toBigInt(value), true);
  }

  // 0x90: u64
  set JobTotalCommitLimit(value: number | bigint) {
    this.view.setBigUint64(144, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_USER_RECORD (size: 16)
 */
export interface MINIDUMP_USER_RECORD {
  /** u32 */
  Type: number;
  /** Windows.Win32.System.Diagnostics.Debug.MINIDUMP_LOCATION_DESCRIPTOR */
  Memory: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMINIDUMP_USER_RECORD = 16;

export function allocMINIDUMP_USER_RECORD(data?: Partial<MINIDUMP_USER_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_USER_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Type !== undefined) view.setUint32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Memory !== undefined) view.setBigUint64(8, data.Memory === null ? 0n : util.toBigInt(util.toPointer(data.Memory)), true);
  return buf;
}

export class MINIDUMP_USER_RECORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Type(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Memory(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Type(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Memory(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_USER_STREAM (size: 16)
 */
export interface MINIDUMP_USER_STREAM {
  /** u32 */
  Type: number;
  /** u32 */
  BufferSize: number;
  /** ptr */
  Buffer: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMINIDUMP_USER_STREAM = 16;

export function allocMINIDUMP_USER_STREAM(data?: Partial<MINIDUMP_USER_STREAM>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_USER_STREAM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Type !== undefined) view.setUint32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.BufferSize !== undefined) view.setUint32(4, Number(data.BufferSize), true);
  // 0x08: pointer
  if (data?.Buffer !== undefined) view.setBigUint64(8, data.Buffer === null ? 0n : util.toBigInt(util.toPointer(data.Buffer)), true);
  return buf;
}

export class MINIDUMP_USER_STREAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Type(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get BufferSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Buffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Type(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set BufferSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Buffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_USER_STREAM_INFORMATION (size: 16)
 */
export interface MINIDUMP_USER_STREAM_INFORMATION {
  /** u32 */
  UserStreamCount: number;
  /** ptr */
  UserStreamArray: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMINIDUMP_USER_STREAM_INFORMATION = 16;

export function allocMINIDUMP_USER_STREAM_INFORMATION(data?: Partial<MINIDUMP_USER_STREAM_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_USER_STREAM_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UserStreamCount !== undefined) view.setUint32(0, Number(data.UserStreamCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.UserStreamArray !== undefined) view.setBigUint64(8, data.UserStreamArray === null ? 0n : util.toBigInt(util.toPointer(data.UserStreamArray)), true);
  return buf;
}

export class MINIDUMP_USER_STREAM_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get UserStreamCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get UserStreamArray(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set UserStreamCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set UserStreamArray(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_INCLUDE_THREAD_CALLBACK (size: 8)
 */
export interface MINIDUMP_INCLUDE_THREAD_CALLBACK {
  /** u32 */
  ThreadId: number;
}

export const sizeofMINIDUMP_INCLUDE_THREAD_CALLBACK = 8;

export function allocMINIDUMP_INCLUDE_THREAD_CALLBACK(data?: Partial<MINIDUMP_INCLUDE_THREAD_CALLBACK>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_INCLUDE_THREAD_CALLBACK);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ThreadId !== undefined) view.setUint32(0, Number(data.ThreadId), true);
  // 0x04: pad4
  return buf;
}

export class MINIDUMP_INCLUDE_THREAD_CALLBACKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ThreadId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set ThreadId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_MODULE_CALLBACK (size: 72)
 */
export interface MINIDUMP_MODULE_CALLBACK {
  /** Windows.Win32.Foundation.PWSTR */
  FullPath: string | null | Uint8Array | Uint16Array;
  /** u64 */
  BaseOfImage: number | bigint;
  /** u32 */
  SizeOfImage: number;
  /** u32 */
  CheckSum: number;
  /** u32 */
  TimeDateStamp: number;
  /** Windows.Win32.Storage.FileSystem.VS_FIXEDFILEINFO */
  VersionInfo: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  CvRecord: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  SizeOfCvRecord: number;
  /** ptr */
  MiscRecord: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  SizeOfMiscRecord: number;
}

export const sizeofMINIDUMP_MODULE_CALLBACK = 72;

export function allocMINIDUMP_MODULE_CALLBACK(data?: Partial<MINIDUMP_MODULE_CALLBACK>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_MODULE_CALLBACK);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.FullPath !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.FullPath);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u64
  if (data?.BaseOfImage !== undefined) view.setBigUint64(8, util.toBigInt(data.BaseOfImage), true);
  // 0x10: u32
  if (data?.SizeOfImage !== undefined) view.setUint32(16, Number(data.SizeOfImage), true);
  // 0x14: u32
  if (data?.CheckSum !== undefined) view.setUint32(20, Number(data.CheckSum), true);
  // 0x18: u32
  if (data?.TimeDateStamp !== undefined) view.setUint32(24, Number(data.TimeDateStamp), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.VersionInfo !== undefined) view.setBigUint64(32, data.VersionInfo === null ? 0n : util.toBigInt(util.toPointer(data.VersionInfo)), true);
  // 0x28: pointer
  if (data?.CvRecord !== undefined) view.setBigUint64(40, data.CvRecord === null ? 0n : util.toBigInt(util.toPointer(data.CvRecord)), true);
  // 0x30: u32
  if (data?.SizeOfCvRecord !== undefined) view.setUint32(48, Number(data.SizeOfCvRecord), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.MiscRecord !== undefined) view.setBigUint64(56, data.MiscRecord === null ? 0n : util.toBigInt(util.toPointer(data.MiscRecord)), true);
  // 0x40: u32
  if (data?.SizeOfMiscRecord !== undefined) view.setUint32(64, Number(data.SizeOfMiscRecord), true);
  // 0x44: pad4
  return buf;
}

export class MINIDUMP_MODULE_CALLBACKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get FullPath(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u64
  get BaseOfImage(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u32
  get SizeOfImage(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get CheckSum(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get TimeDateStamp(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get VersionInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get CvRecord(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get SizeOfCvRecord(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get MiscRecord(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: u32
  get SizeOfMiscRecord(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x00: buffer
  set FullPath(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u64
  set BaseOfImage(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u32
  set SizeOfImage(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set CheckSum(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set TimeDateStamp(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set VersionInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set CvRecord(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set SizeOfCvRecord(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set MiscRecord(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: u32
  set SizeOfMiscRecord(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_INCLUDE_MODULE_CALLBACK (size: 8)
 */
export interface MINIDUMP_INCLUDE_MODULE_CALLBACK {
  /** u64 */
  BaseOfImage: number | bigint;
}

export const sizeofMINIDUMP_INCLUDE_MODULE_CALLBACK = 8;

export function allocMINIDUMP_INCLUDE_MODULE_CALLBACK(data?: Partial<MINIDUMP_INCLUDE_MODULE_CALLBACK>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_INCLUDE_MODULE_CALLBACK);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.BaseOfImage !== undefined) view.setBigUint64(0, util.toBigInt(data.BaseOfImage), true);
  return buf;
}

export class MINIDUMP_INCLUDE_MODULE_CALLBACKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get BaseOfImage(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x00: u64
  set BaseOfImage(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_IO_CALLBACK (size: 32)
 */
export interface MINIDUMP_IO_CALLBACK {
  /** Windows.Win32.Foundation.HANDLE */
  Handle: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  Offset: number | bigint;
  /** ptr */
  Buffer: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  BufferBytes: number;
}

export const sizeofMINIDUMP_IO_CALLBACK = 32;

export function allocMINIDUMP_IO_CALLBACK(data?: Partial<MINIDUMP_IO_CALLBACK>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_IO_CALLBACK);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Handle !== undefined) view.setBigUint64(0, data.Handle === null ? 0n : util.toBigInt(util.toPointer(data.Handle)), true);
  // 0x08: u64
  if (data?.Offset !== undefined) view.setBigUint64(8, util.toBigInt(data.Offset), true);
  // 0x10: pointer
  if (data?.Buffer !== undefined) view.setBigUint64(16, data.Buffer === null ? 0n : util.toBigInt(util.toPointer(data.Buffer)), true);
  // 0x18: u32
  if (data?.BufferBytes !== undefined) view.setUint32(24, Number(data.BufferBytes), true);
  // 0x1c: pad4
  return buf;
}

export class MINIDUMP_IO_CALLBACKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Handle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u64
  get Offset(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: pointer
  get Buffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get BufferBytes(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set Handle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u64
  set Offset(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: pointer
  set Buffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set BufferBytes(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_READ_MEMORY_FAILURE_CALLBACK (size: 24)
 */
export interface MINIDUMP_READ_MEMORY_FAILURE_CALLBACK {
  /** u64 */
  Offset: number | bigint;
  /** u32 */
  Bytes: number;
  /** Windows.Win32.Foundation.HRESULT */
  FailureStatus: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMINIDUMP_READ_MEMORY_FAILURE_CALLBACK = 24;

export function allocMINIDUMP_READ_MEMORY_FAILURE_CALLBACK(data?: Partial<MINIDUMP_READ_MEMORY_FAILURE_CALLBACK>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_READ_MEMORY_FAILURE_CALLBACK);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Offset !== undefined) view.setBigUint64(0, util.toBigInt(data.Offset), true);
  // 0x08: u32
  if (data?.Bytes !== undefined) view.setUint32(8, Number(data.Bytes), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.FailureStatus !== undefined) view.setBigUint64(16, data.FailureStatus === null ? 0n : util.toBigInt(util.toPointer(data.FailureStatus)), true);
  return buf;
}

export class MINIDUMP_READ_MEMORY_FAILURE_CALLBACKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Offset(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u32
  get Bytes(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get FailureStatus(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u64
  set Offset(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u32
  set Bytes(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set FailureStatus(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_VM_QUERY_CALLBACK (size: 8)
 */
export interface MINIDUMP_VM_QUERY_CALLBACK {
  /** u64 */
  Offset: number | bigint;
}

export const sizeofMINIDUMP_VM_QUERY_CALLBACK = 8;

export function allocMINIDUMP_VM_QUERY_CALLBACK(data?: Partial<MINIDUMP_VM_QUERY_CALLBACK>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_VM_QUERY_CALLBACK);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Offset !== undefined) view.setBigUint64(0, util.toBigInt(data.Offset), true);
  return buf;
}

export class MINIDUMP_VM_QUERY_CALLBACKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Offset(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x00: u64
  set Offset(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_VM_PRE_READ_CALLBACK (size: 24)
 */
export interface MINIDUMP_VM_PRE_READ_CALLBACK {
  /** u64 */
  Offset: number | bigint;
  /** ptr */
  Buffer: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Size: number;
}

export const sizeofMINIDUMP_VM_PRE_READ_CALLBACK = 24;

export function allocMINIDUMP_VM_PRE_READ_CALLBACK(data?: Partial<MINIDUMP_VM_PRE_READ_CALLBACK>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_VM_PRE_READ_CALLBACK);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Offset !== undefined) view.setBigUint64(0, util.toBigInt(data.Offset), true);
  // 0x08: pointer
  if (data?.Buffer !== undefined) view.setBigUint64(8, data.Buffer === null ? 0n : util.toBigInt(util.toPointer(data.Buffer)), true);
  // 0x10: u32
  if (data?.Size !== undefined) view.setUint32(16, Number(data.Size), true);
  // 0x14: pad4
  return buf;
}

export class MINIDUMP_VM_PRE_READ_CALLBACKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Offset(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: pointer
  get Buffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get Size(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u64
  set Offset(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: pointer
  set Buffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set Size(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_VM_POST_READ_CALLBACK (size: 32)
 */
export interface MINIDUMP_VM_POST_READ_CALLBACK {
  /** u64 */
  Offset: number | bigint;
  /** ptr */
  Buffer: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Size: number;
  /** u32 */
  Completed: number;
  /** Windows.Win32.Foundation.HRESULT */
  Status: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMINIDUMP_VM_POST_READ_CALLBACK = 32;

export function allocMINIDUMP_VM_POST_READ_CALLBACK(data?: Partial<MINIDUMP_VM_POST_READ_CALLBACK>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_VM_POST_READ_CALLBACK);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Offset !== undefined) view.setBigUint64(0, util.toBigInt(data.Offset), true);
  // 0x08: pointer
  if (data?.Buffer !== undefined) view.setBigUint64(8, data.Buffer === null ? 0n : util.toBigInt(util.toPointer(data.Buffer)), true);
  // 0x10: u32
  if (data?.Size !== undefined) view.setUint32(16, Number(data.Size), true);
  // 0x14: u32
  if (data?.Completed !== undefined) view.setUint32(20, Number(data.Completed), true);
  // 0x18: pointer
  if (data?.Status !== undefined) view.setBigUint64(24, data.Status === null ? 0n : util.toBigInt(util.toPointer(data.Status)), true);
  return buf;
}

export class MINIDUMP_VM_POST_READ_CALLBACKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Offset(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: pointer
  get Buffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get Size(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Completed(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get Status(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u64
  set Offset(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: pointer
  set Buffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set Size(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Completed(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set Status(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_CALLBACK_INPUT (size: 32)
 */
export interface MINIDUMP_CALLBACK_INPUT {
  /** u32 */
  ProcessId: number;
  /** Windows.Win32.Foundation.HANDLE */
  ProcessHandle: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  CallbackType: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMINIDUMP_CALLBACK_INPUT = 32;

export function allocMINIDUMP_CALLBACK_INPUT(data?: Partial<MINIDUMP_CALLBACK_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_CALLBACK_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ProcessId !== undefined) view.setUint32(0, Number(data.ProcessId), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ProcessHandle !== undefined) view.setBigUint64(8, data.ProcessHandle === null ? 0n : util.toBigInt(util.toPointer(data.ProcessHandle)), true);
  // 0x10: u32
  if (data?.CallbackType !== undefined) view.setUint32(16, Number(data.CallbackType), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(24, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class MINIDUMP_CALLBACK_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ProcessId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ProcessHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get CallbackType(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ProcessId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ProcessHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set CallbackType(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_CALLBACK_OUTPUT (size: 8)
 */
export interface MINIDUMP_CALLBACK_OUTPUT {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMINIDUMP_CALLBACK_OUTPUT = 8;

export function allocMINIDUMP_CALLBACK_OUTPUT(data?: Partial<MINIDUMP_CALLBACK_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_CALLBACK_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class MINIDUMP_CALLBACK_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MINIDUMP_CALLBACK_INFORMATION (size: 16)
 */
export interface MINIDUMP_CALLBACK_INFORMATION {
  /** Windows.Win32.System.Diagnostics.Debug.MINIDUMP_CALLBACK_ROUTINE */
  CallbackRoutine: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  CallbackParam: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMINIDUMP_CALLBACK_INFORMATION = 16;

export function allocMINIDUMP_CALLBACK_INFORMATION(data?: Partial<MINIDUMP_CALLBACK_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofMINIDUMP_CALLBACK_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CallbackRoutine !== undefined) view.setBigUint64(0, data.CallbackRoutine === null ? 0n : util.toBigInt(util.toPointer(data.CallbackRoutine)), true);
  // 0x08: pointer
  if (data?.CallbackParam !== undefined) view.setBigUint64(8, data.CallbackParam === null ? 0n : util.toBigInt(util.toPointer(data.CallbackParam)), true);
  return buf;
}

export class MINIDUMP_CALLBACK_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CallbackRoutine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get CallbackParam(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set CallbackRoutine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set CallbackParam(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

export type BSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.System.Diagnostics.Debug.DebugPropertyInfo (size: 56)
 */
export interface DebugPropertyInfo {
  /** u32 */
  m_dwValidFields: number;
  /** Windows.Win32.Foundation.BSTR */
  m_bstrName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BSTR */
  m_bstrType: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BSTR */
  m_bstrValue: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BSTR */
  m_bstrFullName: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  m_dwAttrib: number;
  /** Windows.Win32.System.Diagnostics.Debug.IDebugProperty */
  m_pDebugProp: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDebugPropertyInfo = 56;

export function allocDebugPropertyInfo(data?: Partial<DebugPropertyInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofDebugPropertyInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.m_dwValidFields !== undefined) view.setUint32(0, Number(data.m_dwValidFields), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.m_bstrName !== undefined) view.setBigUint64(8, data.m_bstrName === null ? 0n : util.toBigInt(util.toPointer(data.m_bstrName)), true);
  // 0x10: pointer
  if (data?.m_bstrType !== undefined) view.setBigUint64(16, data.m_bstrType === null ? 0n : util.toBigInt(util.toPointer(data.m_bstrType)), true);
  // 0x18: pointer
  if (data?.m_bstrValue !== undefined) view.setBigUint64(24, data.m_bstrValue === null ? 0n : util.toBigInt(util.toPointer(data.m_bstrValue)), true);
  // 0x20: pointer
  if (data?.m_bstrFullName !== undefined) view.setBigUint64(32, data.m_bstrFullName === null ? 0n : util.toBigInt(util.toPointer(data.m_bstrFullName)), true);
  // 0x28: u32
  if (data?.m_dwAttrib !== undefined) view.setUint32(40, Number(data.m_dwAttrib), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.m_pDebugProp !== undefined) view.setBigUint64(48, data.m_pDebugProp === null ? 0n : util.toBigInt(util.toPointer(data.m_pDebugProp)), true);
  return buf;
}

export class DebugPropertyInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get m_dwValidFields(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get m_bstrName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get m_bstrType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get m_bstrValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get m_bstrFullName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get m_dwAttrib(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get m_pDebugProp(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set m_dwValidFields(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set m_bstrName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set m_bstrType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set m_bstrValue(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set m_bstrFullName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set m_dwAttrib(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set m_pDebugProp(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Com.VARIANT (size: 8)
 */
export interface VARIANT {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVARIANT = 8;

export function allocVARIANT(data?: Partial<VARIANT>): Uint8Array {
  const buf = new Uint8Array(sizeofVARIANT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class VARIANTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.ExtendedDebugPropertyInfo (size: 88)
 */
export interface ExtendedDebugPropertyInfo {
  /** u32 */
  dwValidFields: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszType: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszValue: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszFullName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwAttrib: number;
  /** Windows.Win32.System.Diagnostics.Debug.IDebugProperty */
  pDebugProp: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  nDISPID: number;
  /** u32 */
  nType: number;
  /** Windows.Win32.System.Com.VARIANT */
  varValue: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.StructuredStorage.ILockBytes */
  plbValue: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.IDebugExtendedProperty */
  pDebugExtProp: Uint8Array | Deno.PointerValue | null;
}

export const sizeofExtendedDebugPropertyInfo = 88;

export function allocExtendedDebugPropertyInfo(data?: Partial<ExtendedDebugPropertyInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofExtendedDebugPropertyInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValidFields !== undefined) view.setUint32(0, Number(data.dwValidFields), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pszType !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszType);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pszValue !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszValue);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pszFullName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszFullName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dwAttrib !== undefined) view.setUint32(40, Number(data.dwAttrib), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pDebugProp !== undefined) view.setBigUint64(48, data.pDebugProp === null ? 0n : util.toBigInt(util.toPointer(data.pDebugProp)), true);
  // 0x38: u32
  if (data?.nDISPID !== undefined) view.setUint32(56, Number(data.nDISPID), true);
  // 0x3c: u32
  if (data?.nType !== undefined) view.setUint32(60, Number(data.nType), true);
  // 0x40: pointer
  if (data?.varValue !== undefined) view.setBigUint64(64, data.varValue === null ? 0n : util.toBigInt(util.toPointer(data.varValue)), true);
  // 0x48: pointer
  if (data?.plbValue !== undefined) view.setBigUint64(72, data.plbValue === null ? 0n : util.toBigInt(util.toPointer(data.plbValue)), true);
  // 0x50: pointer
  if (data?.pDebugExtProp !== undefined) view.setBigUint64(80, data.pDebugExtProp === null ? 0n : util.toBigInt(util.toPointer(data.pDebugExtProp)), true);
  return buf;
}

export class ExtendedDebugPropertyInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwValidFields(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pszName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get pszType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get pszValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: buffer
  get pszFullName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get dwAttrib(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get pDebugProp(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get nDISPID(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get nType(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: pointer
  get varValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get plbValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get pDebugExtProp(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwValidFields(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pszName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set pszType(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, util.toBigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: buffer
  set pszValue(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, util.toBigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: buffer
  set pszFullName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, util.toBigInt(util.toPointer((this.buf as any)._f32)), true);
  }

  // 0x28: u32
  set dwAttrib(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set pDebugProp(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set nDISPID(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set nType(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: pointer
  set varValue(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set plbValue(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set pDebugExtProp(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DebugStackFrameDescriptor (size: 32)
 */
export interface DebugStackFrameDescriptor {
  /** Windows.Win32.System.Diagnostics.Debug.IDebugStackFrame */
  pdsf: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwMin: number;
  /** u32 */
  dwLim: number;
  /** Windows.Win32.Foundation.BOOL */
  fFinal: boolean;
  /** Windows.Win32.System.Com.IUnknown */
  punkFinal: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDebugStackFrameDescriptor = 32;

export function allocDebugStackFrameDescriptor(data?: Partial<DebugStackFrameDescriptor>): Uint8Array {
  const buf = new Uint8Array(sizeofDebugStackFrameDescriptor);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pdsf !== undefined) view.setBigUint64(0, data.pdsf === null ? 0n : util.toBigInt(util.toPointer(data.pdsf)), true);
  // 0x08: u32
  if (data?.dwMin !== undefined) view.setUint32(8, Number(data.dwMin), true);
  // 0x0c: u32
  if (data?.dwLim !== undefined) view.setUint32(12, Number(data.dwLim), true);
  // 0x10: i32
  if (data?.fFinal !== undefined) view.setInt32(16, Number(data.fFinal), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.punkFinal !== undefined) view.setBigUint64(24, data.punkFinal === null ? 0n : util.toBigInt(util.toPointer(data.punkFinal)), true);
  return buf;
}

export class DebugStackFrameDescriptorView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pdsf(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwMin(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwLim(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: i32
  get fFinal(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get punkFinal(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pdsf(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set dwMin(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwLim(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: i32
  set fFinal(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set punkFinal(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DebugStackFrameDescriptor64 (size: 40)
 */
export interface DebugStackFrameDescriptor64 {
  /** Windows.Win32.System.Diagnostics.Debug.IDebugStackFrame */
  pdsf: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  dwMin: number | bigint;
  /** u64 */
  dwLim: number | bigint;
  /** Windows.Win32.Foundation.BOOL */
  fFinal: boolean;
  /** Windows.Win32.System.Com.IUnknown */
  punkFinal: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDebugStackFrameDescriptor64 = 40;

export function allocDebugStackFrameDescriptor64(data?: Partial<DebugStackFrameDescriptor64>): Uint8Array {
  const buf = new Uint8Array(sizeofDebugStackFrameDescriptor64);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pdsf !== undefined) view.setBigUint64(0, data.pdsf === null ? 0n : util.toBigInt(util.toPointer(data.pdsf)), true);
  // 0x08: u64
  if (data?.dwMin !== undefined) view.setBigUint64(8, util.toBigInt(data.dwMin), true);
  // 0x10: u64
  if (data?.dwLim !== undefined) view.setBigUint64(16, util.toBigInt(data.dwLim), true);
  // 0x18: i32
  if (data?.fFinal !== undefined) view.setInt32(24, Number(data.fFinal), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.punkFinal !== undefined) view.setBigUint64(32, data.punkFinal === null ? 0n : util.toBigInt(util.toPointer(data.punkFinal)), true);
  return buf;
}

export class DebugStackFrameDescriptor64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pdsf(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u64
  get dwMin(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get dwLim(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: i32
  get fFinal(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get punkFinal(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pdsf(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u64
  set dwMin(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set dwLim(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: i32
  set fFinal(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set punkFinal(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.PROFILER_HEAP_OBJECT_SCOPE_LIST (size: 16)
 */
export interface PROFILER_HEAP_OBJECT_SCOPE_LIST {
  /** u32 */
  count: number;
  /** array */
  scopes: Deno.PointerValue | null;
}

export const sizeofPROFILER_HEAP_OBJECT_SCOPE_LIST = 16;

export function allocPROFILER_HEAP_OBJECT_SCOPE_LIST(data?: Partial<PROFILER_HEAP_OBJECT_SCOPE_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofPROFILER_HEAP_OBJECT_SCOPE_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.count !== undefined) view.setUint32(0, Number(data.count), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.scopes !== undefined) view.setBigUint64(8, data.scopes === null ? 0n : util.toBigInt(util.toPointer(data.scopes)), true);
  return buf;
}

export class PROFILER_HEAP_OBJECT_SCOPE_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get count(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get scopes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set count(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set scopes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.PROFILER_PROPERTY_TYPE_SUBSTRING_INFO (size: 16)
 */
export interface PROFILER_PROPERTY_TYPE_SUBSTRING_INFO {
  /** u32 */
  length: number;
  /** Windows.Win32.Foundation.PWSTR */
  value: string | null | Uint8Array | Uint16Array;
}

export const sizeofPROFILER_PROPERTY_TYPE_SUBSTRING_INFO = 16;

export function allocPROFILER_PROPERTY_TYPE_SUBSTRING_INFO(data?: Partial<PROFILER_PROPERTY_TYPE_SUBSTRING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPROFILER_PROPERTY_TYPE_SUBSTRING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.length !== undefined) view.setUint32(0, Number(data.length), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.value !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.value);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class PROFILER_PROPERTY_TYPE_SUBSTRING_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get length(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get value(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set length(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set value(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.PROFILER_HEAP_OBJECT_RELATIONSHIP (size: 16)
 */
export interface PROFILER_HEAP_OBJECT_RELATIONSHIP {
  /** u32 */
  relationshipId: number;
  /** Windows.Win32.System.Diagnostics.Debug.PROFILER_RELATIONSHIP_INFO */
  relationshipInfo: PROFILER_RELATIONSHIP_INFO;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPROFILER_HEAP_OBJECT_RELATIONSHIP = 16;

export function allocPROFILER_HEAP_OBJECT_RELATIONSHIP(data?: Partial<PROFILER_HEAP_OBJECT_RELATIONSHIP>): Uint8Array {
  const buf = new Uint8Array(sizeofPROFILER_HEAP_OBJECT_RELATIONSHIP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.relationshipId !== undefined) view.setUint32(0, Number(data.relationshipId), true);
  // 0x04: i32
  if (data?.relationshipInfo !== undefined) view.setInt32(4, Number(data.relationshipInfo), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class PROFILER_HEAP_OBJECT_RELATIONSHIPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get relationshipId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get relationshipInfo(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set relationshipId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set relationshipInfo(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST (size: 16)
 */
export interface PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST {
  /** u32 */
  count: number;
  /** array */
  elements: Deno.PointerValue | null;
}

export const sizeofPROFILER_HEAP_OBJECT_RELATIONSHIP_LIST = 16;

export function allocPROFILER_HEAP_OBJECT_RELATIONSHIP_LIST(data?: Partial<PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofPROFILER_HEAP_OBJECT_RELATIONSHIP_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.count !== undefined) view.setUint32(0, Number(data.count), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.elements !== undefined) view.setBigUint64(8, data.elements === null ? 0n : util.toBigInt(util.toPointer(data.elements)), true);
  return buf;
}

export class PROFILER_HEAP_OBJECT_RELATIONSHIP_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get count(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get elements(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set count(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set elements(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.PROFILER_HEAP_OBJECT_OPTIONAL_INFO (size: 16)
 */
export interface PROFILER_HEAP_OBJECT_OPTIONAL_INFO {
  /** Windows.Win32.System.Diagnostics.Debug.PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE */
  infoType: PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPROFILER_HEAP_OBJECT_OPTIONAL_INFO = 16;

export function allocPROFILER_HEAP_OBJECT_OPTIONAL_INFO(data?: Partial<PROFILER_HEAP_OBJECT_OPTIONAL_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPROFILER_HEAP_OBJECT_OPTIONAL_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.infoType !== undefined) view.setInt32(0, Number(data.infoType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class PROFILER_HEAP_OBJECT_OPTIONAL_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get infoType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set infoType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.PROFILER_HEAP_OBJECT (size: 32)
 */
export interface PROFILER_HEAP_OBJECT {
  /** u32 */
  size: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  typeNameId: number;
  /** u32 */
  flags: number;
  /** u16 */
  unused: number;
  /** u16 */
  optionalInfoCount: number;
}

export const sizeofPROFILER_HEAP_OBJECT = 32;

export function allocPROFILER_HEAP_OBJECT(data?: Partial<PROFILER_HEAP_OBJECT>): Uint8Array {
  const buf = new Uint8Array(sizeofPROFILER_HEAP_OBJECT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.size !== undefined) view.setUint32(0, Number(data.size), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: u32
  if (data?.typeNameId !== undefined) view.setUint32(16, Number(data.typeNameId), true);
  // 0x14: u32
  if (data?.flags !== undefined) view.setUint32(20, Number(data.flags), true);
  // 0x18: u16
  if (data?.unused !== undefined) view.setUint16(24, Number(data.unused), true);
  // 0x1a: u16
  if (data?.optionalInfoCount !== undefined) view.setUint16(26, Number(data.optionalInfoCount), true);
  // 0x1c: pad4
  return buf;
}

export class PROFILER_HEAP_OBJECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get typeNameId(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get flags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u16
  get unused(): number {
    return this.view.getUint16(24, true);
  }

  // 0x1a: u16
  get optionalInfoCount(): number {
    return this.view.getUint16(26, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set typeNameId(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set flags(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u16
  set unused(value: number) {
    this.view.setUint16(24, value, true);
  }

  // 0x1a: u16
  set optionalInfoCount(value: number) {
    this.view.setUint16(26, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.PROFILER_HEAP_SUMMARY (size: 8)
 */
export interface PROFILER_HEAP_SUMMARY {
  /** Windows.Win32.System.Diagnostics.Debug.PROFILER_HEAP_SUMMARY_VERSION */
  version: PROFILER_HEAP_SUMMARY_VERSION;
  /** u32 */
  totalHeapSize: number;
}

export const sizeofPROFILER_HEAP_SUMMARY = 8;

export function allocPROFILER_HEAP_SUMMARY(data?: Partial<PROFILER_HEAP_SUMMARY>): Uint8Array {
  const buf = new Uint8Array(sizeofPROFILER_HEAP_SUMMARY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.version !== undefined) view.setInt32(0, Number(data.version), true);
  // 0x04: u32
  if (data?.totalHeapSize !== undefined) view.setUint32(4, Number(data.totalHeapSize), true);
  return buf;
}

export class PROFILER_HEAP_SUMMARYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get version(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get totalHeapSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set version(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set totalHeapSize(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGE_DEBUG_INFORMATION (size: 200)
 */
export interface IMAGE_DEBUG_INFORMATION {
  /** Windows.Win32.System.Kernel.LIST_ENTRY */
  List: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ReservedSize: number;
  /** ptr */
  ReservedMappedBase: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  ReservedMachine: number;
  /** u16 */
  ReservedCharacteristics: number;
  /** u32 */
  ReservedCheckSum: number;
  /** u32 */
  ImageBase: number;
  /** u32 */
  SizeOfImage: number;
  /** u32 */
  ReservedNumberOfSections: number;
  /** ptr */
  ReservedSections: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ReservedExportedNamesSize: number;
  /** Windows.Win32.Foundation.PSTR */
  ReservedExportedNames: string | null | Uint8Array;
  /** u32 */
  ReservedNumberOfFunctionTableEntries: number;
  /** ptr */
  ReservedFunctionTableEntries: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ReservedLowestFunctionStartingAddress: number;
  /** u32 */
  ReservedHighestFunctionEndingAddress: number;
  /** u32 */
  ReservedNumberOfFpoTableEntries: number;
  /** ptr */
  ReservedFpoTableEntries: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  SizeOfCoffSymbols: number;
  /** ptr */
  CoffSymbols: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ReservedSizeOfCodeViewSymbols: number;
  /** ptr */
  ReservedCodeViewSymbols: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PSTR */
  ImageFilePath: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  ImageFileName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  ReservedDebugFilePath: string | null | Uint8Array;
  /** u32 */
  ReservedTimeDateStamp: number;
  /** Windows.Win32.Foundation.BOOL */
  ReservedRomImage: boolean;
  /** ptr */
  ReservedDebugDirectory: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ReservedNumberOfDebugDirectories: number;
  /** u32 */
  ReservedOriginalFunctionTableBaseAddress: number;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofIMAGE_DEBUG_INFORMATION = 200;

export function allocIMAGE_DEBUG_INFORMATION(data?: Partial<IMAGE_DEBUG_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGE_DEBUG_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.List !== undefined) view.setBigUint64(0, data.List === null ? 0n : util.toBigInt(util.toPointer(data.List)), true);
  // 0x08: u32
  if (data?.ReservedSize !== undefined) view.setUint32(8, Number(data.ReservedSize), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ReservedMappedBase !== undefined) view.setBigUint64(16, data.ReservedMappedBase === null ? 0n : util.toBigInt(util.toPointer(data.ReservedMappedBase)), true);
  // 0x18: u16
  if (data?.ReservedMachine !== undefined) view.setUint16(24, Number(data.ReservedMachine), true);
  // 0x1a: u16
  if (data?.ReservedCharacteristics !== undefined) view.setUint16(26, Number(data.ReservedCharacteristics), true);
  // 0x1c: u32
  if (data?.ReservedCheckSum !== undefined) view.setUint32(28, Number(data.ReservedCheckSum), true);
  // 0x20: u32
  if (data?.ImageBase !== undefined) view.setUint32(32, Number(data.ImageBase), true);
  // 0x24: u32
  if (data?.SizeOfImage !== undefined) view.setUint32(36, Number(data.SizeOfImage), true);
  // 0x28: u32
  if (data?.ReservedNumberOfSections !== undefined) view.setUint32(40, Number(data.ReservedNumberOfSections), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.ReservedSections !== undefined) view.setBigUint64(48, data.ReservedSections === null ? 0n : util.toBigInt(util.toPointer(data.ReservedSections)), true);
  // 0x38: u32
  if (data?.ReservedExportedNamesSize !== undefined) view.setUint32(56, Number(data.ReservedExportedNamesSize), true);
  // 0x3c: pad4
  // 0x40: buffer
  if (data?.ReservedExportedNames !== undefined) {
    (buf as any)._f64 = util.pstrToFfi(data.ReservedExportedNames);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: u32
  if (data?.ReservedNumberOfFunctionTableEntries !== undefined) view.setUint32(72, Number(data.ReservedNumberOfFunctionTableEntries), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.ReservedFunctionTableEntries !== undefined) view.setBigUint64(80, data.ReservedFunctionTableEntries === null ? 0n : util.toBigInt(util.toPointer(data.ReservedFunctionTableEntries)), true);
  // 0x58: u32
  if (data?.ReservedLowestFunctionStartingAddress !== undefined) view.setUint32(88, Number(data.ReservedLowestFunctionStartingAddress), true);
  // 0x5c: u32
  if (data?.ReservedHighestFunctionEndingAddress !== undefined) view.setUint32(92, Number(data.ReservedHighestFunctionEndingAddress), true);
  // 0x60: u32
  if (data?.ReservedNumberOfFpoTableEntries !== undefined) view.setUint32(96, Number(data.ReservedNumberOfFpoTableEntries), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.ReservedFpoTableEntries !== undefined) view.setBigUint64(104, data.ReservedFpoTableEntries === null ? 0n : util.toBigInt(util.toPointer(data.ReservedFpoTableEntries)), true);
  // 0x70: u32
  if (data?.SizeOfCoffSymbols !== undefined) view.setUint32(112, Number(data.SizeOfCoffSymbols), true);
  // 0x74: pad4
  // 0x78: pointer
  if (data?.CoffSymbols !== undefined) view.setBigUint64(120, data.CoffSymbols === null ? 0n : util.toBigInt(util.toPointer(data.CoffSymbols)), true);
  // 0x80: u32
  if (data?.ReservedSizeOfCodeViewSymbols !== undefined) view.setUint32(128, Number(data.ReservedSizeOfCodeViewSymbols), true);
  // 0x84: pad4
  // 0x88: pointer
  if (data?.ReservedCodeViewSymbols !== undefined) view.setBigUint64(136, data.ReservedCodeViewSymbols === null ? 0n : util.toBigInt(util.toPointer(data.ReservedCodeViewSymbols)), true);
  // 0x90: buffer
  if (data?.ImageFilePath !== undefined) {
    (buf as any)._f144 = util.pstrToFfi(data.ImageFilePath);
    view.setBigUint64(144, (buf as any)._f144 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f144)), true);
  }
  // 0x98: buffer
  if (data?.ImageFileName !== undefined) {
    (buf as any)._f152 = util.pstrToFfi(data.ImageFileName);
    view.setBigUint64(152, (buf as any)._f152 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f152)), true);
  }
  // 0xa0: buffer
  if (data?.ReservedDebugFilePath !== undefined) {
    (buf as any)._f160 = util.pstrToFfi(data.ReservedDebugFilePath);
    view.setBigUint64(160, (buf as any)._f160 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f160)), true);
  }
  // 0xa8: u32
  if (data?.ReservedTimeDateStamp !== undefined) view.setUint32(168, Number(data.ReservedTimeDateStamp), true);
  // 0xac: i32
  if (data?.ReservedRomImage !== undefined) view.setInt32(172, Number(data.ReservedRomImage), true);
  // 0xb0: pointer
  if (data?.ReservedDebugDirectory !== undefined) view.setBigUint64(176, data.ReservedDebugDirectory === null ? 0n : util.toBigInt(util.toPointer(data.ReservedDebugDirectory)), true);
  // 0xb8: u32
  if (data?.ReservedNumberOfDebugDirectories !== undefined) view.setUint32(184, Number(data.ReservedNumberOfDebugDirectories), true);
  // 0xbc: u32
  if (data?.ReservedOriginalFunctionTableBaseAddress !== undefined) view.setUint32(188, Number(data.ReservedOriginalFunctionTableBaseAddress), true);
  // 0xc0: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(192, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

export class IMAGE_DEBUG_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get List(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ReservedSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ReservedMappedBase(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u16
  get ReservedMachine(): number {
    return this.view.getUint16(24, true);
  }

  // 0x1a: u16
  get ReservedCharacteristics(): number {
    return this.view.getUint16(26, true);
  }

  // 0x1c: u32
  get ReservedCheckSum(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get ImageBase(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get SizeOfImage(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get ReservedNumberOfSections(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get ReservedSections(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get ReservedExportedNamesSize(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  get ReservedExportedNames(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: u32
  get ReservedNumberOfFunctionTableEntries(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get ReservedFunctionTableEntries(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: u32
  get ReservedLowestFunctionStartingAddress(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get ReservedHighestFunctionEndingAddress(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: u32
  get ReservedNumberOfFpoTableEntries(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  get ReservedFpoTableEntries(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: u32
  get SizeOfCoffSymbols(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: pad4

  // 0x78: pointer
  get CoffSymbols(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(120, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x80: u32
  get ReservedSizeOfCodeViewSymbols(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: pad4

  // 0x88: pointer
  get ReservedCodeViewSymbols(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(136, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x90: buffer
  get ImageFilePath(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(144, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x98: buffer
  get ImageFileName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(152, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xa0: buffer
  get ReservedDebugFilePath(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(160, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xa8: u32
  get ReservedTimeDateStamp(): number {
    return this.view.getUint32(168, true);
  }

  // 0xac: i32
  get ReservedRomImage(): number {
    return this.view.getInt32(172, true);
  }

  // 0xb0: pointer
  get ReservedDebugDirectory(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(176, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xb8: u32
  get ReservedNumberOfDebugDirectories(): number {
    return this.view.getUint32(184, true);
  }

  // 0xbc: u32
  get ReservedOriginalFunctionTableBaseAddress(): number {
    return this.view.getUint32(188, true);
  }

  // 0xc0: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(192, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set List(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ReservedSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ReservedMappedBase(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u16
  set ReservedMachine(value: number) {
    this.view.setUint16(24, value, true);
  }

  // 0x1a: u16
  set ReservedCharacteristics(value: number) {
    this.view.setUint16(26, value, true);
  }

  // 0x1c: u32
  set ReservedCheckSum(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set ImageBase(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set SizeOfImage(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set ReservedNumberOfSections(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set ReservedSections(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set ReservedExportedNamesSize(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  set ReservedExportedNames(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, util.toBigInt(util.toPointer((this.buf as any)._f64)), true);
  }

  // 0x48: u32
  set ReservedNumberOfFunctionTableEntries(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set ReservedFunctionTableEntries(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x58: u32
  set ReservedLowestFunctionStartingAddress(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set ReservedHighestFunctionEndingAddress(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: u32
  set ReservedNumberOfFpoTableEntries(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  set ReservedFpoTableEntries(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x70: u32
  set SizeOfCoffSymbols(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: pad4

  // 0x78: pointer
  set CoffSymbols(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(120, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x80: u32
  set ReservedSizeOfCodeViewSymbols(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: pad4

  // 0x88: pointer
  set ReservedCodeViewSymbols(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(136, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x90: buffer
  set ImageFilePath(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f144 = value;
    this.view.setBigUint64(144, util.toBigInt(util.toPointer((this.buf as any)._f144)), true);
  }

  // 0x98: buffer
  set ImageFileName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f152 = value;
    this.view.setBigUint64(152, util.toBigInt(util.toPointer((this.buf as any)._f152)), true);
  }

  // 0xa0: buffer
  set ReservedDebugFilePath(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f160 = value;
    this.view.setBigUint64(160, util.toBigInt(util.toPointer((this.buf as any)._f160)), true);
  }

  // 0xa8: u32
  set ReservedTimeDateStamp(value: number) {
    this.view.setUint32(168, value, true);
  }

  // 0xac: i32
  set ReservedRomImage(value: number) {
    this.view.setInt32(172, value, true);
  }

  // 0xb0: pointer
  set ReservedDebugDirectory(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(176, util.toBigInt(util.toPointer(value)), true);
  }

  // 0xb8: u32
  set ReservedNumberOfDebugDirectories(value: number) {
    this.view.setUint32(184, value, true);
  }

  // 0xbc: u32
  set ReservedOriginalFunctionTableBaseAddress(value: number) {
    this.view.setUint32(188, value, true);
  }

  // 0xc0: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(192, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MODLOAD_DATA (size: 24)
 */
export interface MODLOAD_DATA {
  /** u32 */
  ssize: number;
  /** Windows.Win32.System.Diagnostics.Debug.MODLOAD_DATA_TYPE */
  ssig: MODLOAD_DATA_TYPE;
  /** ptr */
  data: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  size: number;
  /** u32 */
  flags: number;
}

export const sizeofMODLOAD_DATA = 24;

export function allocMODLOAD_DATA(data?: Partial<MODLOAD_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofMODLOAD_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ssize !== undefined) view.setUint32(0, Number(data.ssize), true);
  // 0x04: u32
  if (data?.ssig !== undefined) view.setUint32(4, Number(data.ssig), true);
  // 0x08: pointer
  if (data?.data !== undefined) view.setBigUint64(8, data.data === null ? 0n : util.toBigInt(util.toPointer(data.data)), true);
  // 0x10: u32
  if (data?.size !== undefined) view.setUint32(16, Number(data.size), true);
  // 0x14: u32
  if (data?.flags !== undefined) view.setUint32(20, Number(data.flags), true);
  return buf;
}

export class MODLOAD_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ssize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ssig(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get data(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get size(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get flags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set ssize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ssig(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set data(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set size(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set flags(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MODLOAD_CVMISC (size: 40)
 */
export interface MODLOAD_CVMISC {
  /** u32 */
  oCV: number;
  /** usize */
  cCV: number | bigint;
  /** u32 */
  oMisc: number;
  /** usize */
  cMisc: number | bigint;
  /** u32 */
  dtImage: number;
  /** u32 */
  cImage: number;
}

export const sizeofMODLOAD_CVMISC = 40;

export function allocMODLOAD_CVMISC(data?: Partial<MODLOAD_CVMISC>): Uint8Array {
  const buf = new Uint8Array(sizeofMODLOAD_CVMISC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.oCV !== undefined) view.setUint32(0, Number(data.oCV), true);
  // 0x04: pad4
  // 0x08: usize
  if (data?.cCV !== undefined) view.setBigUint64(8, util.toBigInt(data.cCV), true);
  // 0x10: u32
  if (data?.oMisc !== undefined) view.setUint32(16, Number(data.oMisc), true);
  // 0x14: pad4
  // 0x18: usize
  if (data?.cMisc !== undefined) view.setBigUint64(24, util.toBigInt(data.cMisc), true);
  // 0x20: u32
  if (data?.dtImage !== undefined) view.setUint32(32, Number(data.dtImage), true);
  // 0x24: u32
  if (data?.cImage !== undefined) view.setUint32(36, Number(data.cImage), true);
  return buf;
}

export class MODLOAD_CVMISCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get oCV(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: usize
  get cCV(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u32
  get oMisc(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: usize
  get cMisc(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u32
  get dtImage(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get cImage(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: u32
  set oCV(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: usize
  set cCV(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u32
  set oMisc(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: usize
  set cMisc(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u32
  set dtImage(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set cImage(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MODLOAD_PDBGUID_PDBAGE (size: 16)
 */
export interface MODLOAD_PDBGUID_PDBAGE {
  /** System.Guid */
  PdbGuid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  PdbAge: number;
}

export const sizeofMODLOAD_PDBGUID_PDBAGE = 16;

export function allocMODLOAD_PDBGUID_PDBAGE(data?: Partial<MODLOAD_PDBGUID_PDBAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofMODLOAD_PDBGUID_PDBAGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PdbGuid !== undefined) view.setBigUint64(0, data.PdbGuid === null ? 0n : util.toBigInt(util.toPointer(data.PdbGuid)), true);
  // 0x08: u32
  if (data?.PdbAge !== undefined) view.setUint32(8, Number(data.PdbAge), true);
  // 0x0c: pad4
  return buf;
}

export class MODLOAD_PDBGUID_PDBAGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PdbGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get PdbAge(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set PdbGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set PdbAge(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.ADDRESS64 (size: 16)
 */
export interface ADDRESS64 {
  /** u64 */
  Offset: number | bigint;
  /** u16 */
  Segment: number;
  /** Windows.Win32.System.Diagnostics.Debug.ADDRESS_MODE */
  Mode: ADDRESS_MODE;
}

export const sizeofADDRESS64 = 16;

export function allocADDRESS64(data?: Partial<ADDRESS64>): Uint8Array {
  const buf = new Uint8Array(sizeofADDRESS64);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Offset !== undefined) view.setBigUint64(0, util.toBigInt(data.Offset), true);
  // 0x08: u16
  if (data?.Segment !== undefined) view.setUint16(8, Number(data.Segment), true);
  // 0x0a: i32
  if (data?.Mode !== undefined) view.setInt32(10, Number(data.Mode), true);
  // 0x0e: pad2
  return buf;
}

export class ADDRESS64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Offset(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u16
  get Segment(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: i32
  get Mode(): number {
    return this.view.getInt32(10, true);
  }

  // 0x0e: pad2

  // 0x00: u64
  set Offset(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u16
  set Segment(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: i32
  set Mode(value: number) {
    this.view.setInt32(10, value, true);
  }

  // 0x0e: pad2
}

/**
 * Windows.Win32.System.Diagnostics.Debug.ADDRESS (size: 16)
 */
export interface ADDRESS {
  /** u32 */
  Offset: number;
  /** u16 */
  Segment: number;
  /** Windows.Win32.System.Diagnostics.Debug.ADDRESS_MODE */
  Mode: ADDRESS_MODE;
}

export const sizeofADDRESS = 16;

export function allocADDRESS(data?: Partial<ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Offset !== undefined) view.setUint32(0, Number(data.Offset), true);
  // 0x04: u16
  if (data?.Segment !== undefined) view.setUint16(4, Number(data.Segment), true);
  // 0x06: i32
  if (data?.Mode !== undefined) view.setInt32(6, Number(data.Mode), true);
  // 0x0a: pad6
  return buf;
}

export class ADDRESSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Offset(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get Segment(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: i32
  get Mode(): number {
    return this.view.getInt32(6, true);
  }

  // 0x0a: pad6

  // 0x00: u32
  set Offset(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set Segment(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: i32
  set Mode(value: number) {
    this.view.setInt32(6, value, true);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Diagnostics.Debug.KDHELP64 (size: 104)
 */
export interface KDHELP64 {
  /** u64 */
  Thread: number | bigint;
  /** u32 */
  ThCallbackStack: number;
  /** u32 */
  ThCallbackBStore: number;
  /** u32 */
  NextCallback: number;
  /** u32 */
  FramePointer: number;
  /** u64 */
  KiCallUserMode: number | bigint;
  /** u64 */
  KeUserCallbackDispatcher: number | bigint;
  /** u64 */
  SystemRangeStart: number | bigint;
  /** u64 */
  KiUserExceptionDispatcher: number | bigint;
  /** u64 */
  StackBase: number | bigint;
  /** u64 */
  StackLimit: number | bigint;
  /** u32 */
  BuildVersion: number;
  /** u32 */
  RetpolineStubFunctionTableSize: number;
  /** u64 */
  RetpolineStubFunctionTable: number | bigint;
  /** u32 */
  RetpolineStubOffset: number;
  /** u32 */
  RetpolineStubSize: number;
  /** array */
  Reserved0: Deno.PointerValue | null;
}

export const sizeofKDHELP64 = 104;

export function allocKDHELP64(data?: Partial<KDHELP64>): Uint8Array {
  const buf = new Uint8Array(sizeofKDHELP64);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Thread !== undefined) view.setBigUint64(0, util.toBigInt(data.Thread), true);
  // 0x08: u32
  if (data?.ThCallbackStack !== undefined) view.setUint32(8, Number(data.ThCallbackStack), true);
  // 0x0c: u32
  if (data?.ThCallbackBStore !== undefined) view.setUint32(12, Number(data.ThCallbackBStore), true);
  // 0x10: u32
  if (data?.NextCallback !== undefined) view.setUint32(16, Number(data.NextCallback), true);
  // 0x14: u32
  if (data?.FramePointer !== undefined) view.setUint32(20, Number(data.FramePointer), true);
  // 0x18: u64
  if (data?.KiCallUserMode !== undefined) view.setBigUint64(24, util.toBigInt(data.KiCallUserMode), true);
  // 0x20: u64
  if (data?.KeUserCallbackDispatcher !== undefined) view.setBigUint64(32, util.toBigInt(data.KeUserCallbackDispatcher), true);
  // 0x28: u64
  if (data?.SystemRangeStart !== undefined) view.setBigUint64(40, util.toBigInt(data.SystemRangeStart), true);
  // 0x30: u64
  if (data?.KiUserExceptionDispatcher !== undefined) view.setBigUint64(48, util.toBigInt(data.KiUserExceptionDispatcher), true);
  // 0x38: u64
  if (data?.StackBase !== undefined) view.setBigUint64(56, util.toBigInt(data.StackBase), true);
  // 0x40: u64
  if (data?.StackLimit !== undefined) view.setBigUint64(64, util.toBigInt(data.StackLimit), true);
  // 0x48: u32
  if (data?.BuildVersion !== undefined) view.setUint32(72, Number(data.BuildVersion), true);
  // 0x4c: u32
  if (data?.RetpolineStubFunctionTableSize !== undefined) view.setUint32(76, Number(data.RetpolineStubFunctionTableSize), true);
  // 0x50: u64
  if (data?.RetpolineStubFunctionTable !== undefined) view.setBigUint64(80, util.toBigInt(data.RetpolineStubFunctionTable), true);
  // 0x58: u32
  if (data?.RetpolineStubOffset !== undefined) view.setUint32(88, Number(data.RetpolineStubOffset), true);
  // 0x5c: u32
  if (data?.RetpolineStubSize !== undefined) view.setUint32(92, Number(data.RetpolineStubSize), true);
  // 0x60: pointer
  if (data?.Reserved0 !== undefined) view.setBigUint64(96, data.Reserved0 === null ? 0n : util.toBigInt(util.toPointer(data.Reserved0)), true);
  return buf;
}

export class KDHELP64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Thread(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u32
  get ThCallbackStack(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ThCallbackBStore(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get NextCallback(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get FramePointer(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u64
  get KiCallUserMode(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u64
  get KeUserCallbackDispatcher(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: u64
  get SystemRangeStart(): number | bigint {
    return this.view.getBigUint64(40, true);
  }

  // 0x30: u64
  get KiUserExceptionDispatcher(): number | bigint {
    return this.view.getBigUint64(48, true);
  }

  // 0x38: u64
  get StackBase(): number | bigint {
    return this.view.getBigUint64(56, true);
  }

  // 0x40: u64
  get StackLimit(): number | bigint {
    return this.view.getBigUint64(64, true);
  }

  // 0x48: u32
  get BuildVersion(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get RetpolineStubFunctionTableSize(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u64
  get RetpolineStubFunctionTable(): number | bigint {
    return this.view.getBigUint64(80, true);
  }

  // 0x58: u32
  get RetpolineStubOffset(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get RetpolineStubSize(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: pointer
  get Reserved0(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u64
  set Thread(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u32
  set ThCallbackStack(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ThCallbackBStore(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set NextCallback(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set FramePointer(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u64
  set KiCallUserMode(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u64
  set KeUserCallbackDispatcher(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: u64
  set SystemRangeStart(value: number | bigint) {
    this.view.setBigUint64(40, util.toBigInt(value), true);
  }

  // 0x30: u64
  set KiUserExceptionDispatcher(value: number | bigint) {
    this.view.setBigUint64(48, util.toBigInt(value), true);
  }

  // 0x38: u64
  set StackBase(value: number | bigint) {
    this.view.setBigUint64(56, util.toBigInt(value), true);
  }

  // 0x40: u64
  set StackLimit(value: number | bigint) {
    this.view.setBigUint64(64, util.toBigInt(value), true);
  }

  // 0x48: u32
  set BuildVersion(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set RetpolineStubFunctionTableSize(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u64
  set RetpolineStubFunctionTable(value: number | bigint) {
    this.view.setBigUint64(80, util.toBigInt(value), true);
  }

  // 0x58: u32
  set RetpolineStubOffset(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set RetpolineStubSize(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: pointer
  set Reserved0(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.KDHELP (size: 56)
 */
export interface KDHELP {
  /** u32 */
  Thread: number;
  /** u32 */
  ThCallbackStack: number;
  /** u32 */
  NextCallback: number;
  /** u32 */
  FramePointer: number;
  /** u32 */
  KiCallUserMode: number;
  /** u32 */
  KeUserCallbackDispatcher: number;
  /** u32 */
  SystemRangeStart: number;
  /** u32 */
  ThCallbackBStore: number;
  /** u32 */
  KiUserExceptionDispatcher: number;
  /** u32 */
  StackBase: number;
  /** u32 */
  StackLimit: number;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofKDHELP = 56;

export function allocKDHELP(data?: Partial<KDHELP>): Uint8Array {
  const buf = new Uint8Array(sizeofKDHELP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Thread !== undefined) view.setUint32(0, Number(data.Thread), true);
  // 0x04: u32
  if (data?.ThCallbackStack !== undefined) view.setUint32(4, Number(data.ThCallbackStack), true);
  // 0x08: u32
  if (data?.NextCallback !== undefined) view.setUint32(8, Number(data.NextCallback), true);
  // 0x0c: u32
  if (data?.FramePointer !== undefined) view.setUint32(12, Number(data.FramePointer), true);
  // 0x10: u32
  if (data?.KiCallUserMode !== undefined) view.setUint32(16, Number(data.KiCallUserMode), true);
  // 0x14: u32
  if (data?.KeUserCallbackDispatcher !== undefined) view.setUint32(20, Number(data.KeUserCallbackDispatcher), true);
  // 0x18: u32
  if (data?.SystemRangeStart !== undefined) view.setUint32(24, Number(data.SystemRangeStart), true);
  // 0x1c: u32
  if (data?.ThCallbackBStore !== undefined) view.setUint32(28, Number(data.ThCallbackBStore), true);
  // 0x20: u32
  if (data?.KiUserExceptionDispatcher !== undefined) view.setUint32(32, Number(data.KiUserExceptionDispatcher), true);
  // 0x24: u32
  if (data?.StackBase !== undefined) view.setUint32(36, Number(data.StackBase), true);
  // 0x28: u32
  if (data?.StackLimit !== undefined) view.setUint32(40, Number(data.StackLimit), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(48, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

export class KDHELPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Thread(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ThCallbackStack(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get NextCallback(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get FramePointer(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get KiCallUserMode(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get KeUserCallbackDispatcher(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get SystemRangeStart(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get ThCallbackBStore(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get KiUserExceptionDispatcher(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get StackBase(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get StackLimit(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Thread(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ThCallbackStack(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set NextCallback(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set FramePointer(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set KiCallUserMode(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set KeUserCallbackDispatcher(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set SystemRangeStart(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set ThCallbackBStore(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set KiUserExceptionDispatcher(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set StackBase(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set StackLimit(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.STACKFRAME64 (size: 80)
 */
export interface STACKFRAME64 {
  /** Windows.Win32.System.Diagnostics.Debug.ADDRESS64 */
  AddrPC: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.ADDRESS64 */
  AddrReturn: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.ADDRESS64 */
  AddrFrame: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.ADDRESS64 */
  AddrStack: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.ADDRESS64 */
  AddrBStore: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  FuncTableEntry: Deno.PointerValue | Uint8Array | null;
  /** array */
  Params: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  Far: boolean;
  /** Windows.Win32.Foundation.BOOL */
  Virtual: boolean;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.KDHELP64 */
  KdHelp: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSTACKFRAME64 = 80;

export function allocSTACKFRAME64(data?: Partial<STACKFRAME64>): Uint8Array {
  const buf = new Uint8Array(sizeofSTACKFRAME64);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AddrPC !== undefined) view.setBigUint64(0, data.AddrPC === null ? 0n : util.toBigInt(util.toPointer(data.AddrPC)), true);
  // 0x08: pointer
  if (data?.AddrReturn !== undefined) view.setBigUint64(8, data.AddrReturn === null ? 0n : util.toBigInt(util.toPointer(data.AddrReturn)), true);
  // 0x10: pointer
  if (data?.AddrFrame !== undefined) view.setBigUint64(16, data.AddrFrame === null ? 0n : util.toBigInt(util.toPointer(data.AddrFrame)), true);
  // 0x18: pointer
  if (data?.AddrStack !== undefined) view.setBigUint64(24, data.AddrStack === null ? 0n : util.toBigInt(util.toPointer(data.AddrStack)), true);
  // 0x20: pointer
  if (data?.AddrBStore !== undefined) view.setBigUint64(32, data.AddrBStore === null ? 0n : util.toBigInt(util.toPointer(data.AddrBStore)), true);
  // 0x28: pointer
  if (data?.FuncTableEntry !== undefined) view.setBigUint64(40, data.FuncTableEntry === null ? 0n : util.toBigInt(util.toPointer(data.FuncTableEntry)), true);
  // 0x30: pointer
  if (data?.Params !== undefined) view.setBigUint64(48, data.Params === null ? 0n : util.toBigInt(util.toPointer(data.Params)), true);
  // 0x38: i32
  if (data?.Far !== undefined) view.setInt32(56, Number(data.Far), true);
  // 0x3c: i32
  if (data?.Virtual !== undefined) view.setInt32(60, Number(data.Virtual), true);
  // 0x40: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(64, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  // 0x48: pointer
  if (data?.KdHelp !== undefined) view.setBigUint64(72, data.KdHelp === null ? 0n : util.toBigInt(util.toPointer(data.KdHelp)), true);
  return buf;
}

export class STACKFRAME64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get AddrPC(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get AddrReturn(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get AddrFrame(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get AddrStack(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get AddrBStore(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get FuncTableEntry(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get Params(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: i32
  get Far(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: i32
  get Virtual(): number {
    return this.view.getInt32(60, true);
  }

  // 0x40: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get KdHelp(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set AddrPC(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set AddrReturn(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set AddrFrame(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set AddrStack(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set AddrBStore(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set FuncTableEntry(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set Params(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: i32
  set Far(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: i32
  set Virtual(value: number) {
    this.view.setInt32(60, value, true);
  }

  // 0x40: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set KdHelp(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.STACKFRAME_EX (size: 88)
 */
export interface STACKFRAME_EX {
  /** Windows.Win32.System.Diagnostics.Debug.ADDRESS64 */
  AddrPC: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.ADDRESS64 */
  AddrReturn: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.ADDRESS64 */
  AddrFrame: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.ADDRESS64 */
  AddrStack: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.ADDRESS64 */
  AddrBStore: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  FuncTableEntry: Deno.PointerValue | Uint8Array | null;
  /** array */
  Params: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  Far: boolean;
  /** Windows.Win32.Foundation.BOOL */
  Virtual: boolean;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.KDHELP64 */
  KdHelp: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  StackFrameSize: number;
  /** u32 */
  InlineFrameContext: number;
}

export const sizeofSTACKFRAME_EX = 88;

export function allocSTACKFRAME_EX(data?: Partial<STACKFRAME_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofSTACKFRAME_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AddrPC !== undefined) view.setBigUint64(0, data.AddrPC === null ? 0n : util.toBigInt(util.toPointer(data.AddrPC)), true);
  // 0x08: pointer
  if (data?.AddrReturn !== undefined) view.setBigUint64(8, data.AddrReturn === null ? 0n : util.toBigInt(util.toPointer(data.AddrReturn)), true);
  // 0x10: pointer
  if (data?.AddrFrame !== undefined) view.setBigUint64(16, data.AddrFrame === null ? 0n : util.toBigInt(util.toPointer(data.AddrFrame)), true);
  // 0x18: pointer
  if (data?.AddrStack !== undefined) view.setBigUint64(24, data.AddrStack === null ? 0n : util.toBigInt(util.toPointer(data.AddrStack)), true);
  // 0x20: pointer
  if (data?.AddrBStore !== undefined) view.setBigUint64(32, data.AddrBStore === null ? 0n : util.toBigInt(util.toPointer(data.AddrBStore)), true);
  // 0x28: pointer
  if (data?.FuncTableEntry !== undefined) view.setBigUint64(40, data.FuncTableEntry === null ? 0n : util.toBigInt(util.toPointer(data.FuncTableEntry)), true);
  // 0x30: pointer
  if (data?.Params !== undefined) view.setBigUint64(48, data.Params === null ? 0n : util.toBigInt(util.toPointer(data.Params)), true);
  // 0x38: i32
  if (data?.Far !== undefined) view.setInt32(56, Number(data.Far), true);
  // 0x3c: i32
  if (data?.Virtual !== undefined) view.setInt32(60, Number(data.Virtual), true);
  // 0x40: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(64, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  // 0x48: pointer
  if (data?.KdHelp !== undefined) view.setBigUint64(72, data.KdHelp === null ? 0n : util.toBigInt(util.toPointer(data.KdHelp)), true);
  // 0x50: u32
  if (data?.StackFrameSize !== undefined) view.setUint32(80, Number(data.StackFrameSize), true);
  // 0x54: u32
  if (data?.InlineFrameContext !== undefined) view.setUint32(84, Number(data.InlineFrameContext), true);
  return buf;
}

export class STACKFRAME_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get AddrPC(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get AddrReturn(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get AddrFrame(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get AddrStack(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get AddrBStore(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get FuncTableEntry(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get Params(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: i32
  get Far(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: i32
  get Virtual(): number {
    return this.view.getInt32(60, true);
  }

  // 0x40: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get KdHelp(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: u32
  get StackFrameSize(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get InlineFrameContext(): number {
    return this.view.getUint32(84, true);
  }

  // 0x00: pointer
  set AddrPC(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set AddrReturn(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set AddrFrame(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set AddrStack(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set AddrBStore(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set FuncTableEntry(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set Params(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: i32
  set Far(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: i32
  set Virtual(value: number) {
    this.view.setInt32(60, value, true);
  }

  // 0x40: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set KdHelp(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x50: u32
  set StackFrameSize(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set InlineFrameContext(value: number) {
    this.view.setUint32(84, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.STACKFRAME (size: 80)
 */
export interface STACKFRAME {
  /** Windows.Win32.System.Diagnostics.Debug.ADDRESS */
  AddrPC: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.ADDRESS */
  AddrReturn: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.ADDRESS */
  AddrFrame: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.ADDRESS */
  AddrStack: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  FuncTableEntry: Deno.PointerValue | Uint8Array | null;
  /** array */
  Params: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  Far: boolean;
  /** Windows.Win32.Foundation.BOOL */
  Virtual: boolean;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.KDHELP */
  KdHelp: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.ADDRESS */
  AddrBStore: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSTACKFRAME = 80;

export function allocSTACKFRAME(data?: Partial<STACKFRAME>): Uint8Array {
  const buf = new Uint8Array(sizeofSTACKFRAME);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AddrPC !== undefined) view.setBigUint64(0, data.AddrPC === null ? 0n : util.toBigInt(util.toPointer(data.AddrPC)), true);
  // 0x08: pointer
  if (data?.AddrReturn !== undefined) view.setBigUint64(8, data.AddrReturn === null ? 0n : util.toBigInt(util.toPointer(data.AddrReturn)), true);
  // 0x10: pointer
  if (data?.AddrFrame !== undefined) view.setBigUint64(16, data.AddrFrame === null ? 0n : util.toBigInt(util.toPointer(data.AddrFrame)), true);
  // 0x18: pointer
  if (data?.AddrStack !== undefined) view.setBigUint64(24, data.AddrStack === null ? 0n : util.toBigInt(util.toPointer(data.AddrStack)), true);
  // 0x20: pointer
  if (data?.FuncTableEntry !== undefined) view.setBigUint64(32, data.FuncTableEntry === null ? 0n : util.toBigInt(util.toPointer(data.FuncTableEntry)), true);
  // 0x28: pointer
  if (data?.Params !== undefined) view.setBigUint64(40, data.Params === null ? 0n : util.toBigInt(util.toPointer(data.Params)), true);
  // 0x30: i32
  if (data?.Far !== undefined) view.setInt32(48, Number(data.Far), true);
  // 0x34: i32
  if (data?.Virtual !== undefined) view.setInt32(52, Number(data.Virtual), true);
  // 0x38: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(56, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  // 0x40: pointer
  if (data?.KdHelp !== undefined) view.setBigUint64(64, data.KdHelp === null ? 0n : util.toBigInt(util.toPointer(data.KdHelp)), true);
  // 0x48: pointer
  if (data?.AddrBStore !== undefined) view.setBigUint64(72, data.AddrBStore === null ? 0n : util.toBigInt(util.toPointer(data.AddrBStore)), true);
  return buf;
}

export class STACKFRAMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get AddrPC(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get AddrReturn(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get AddrFrame(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get AddrStack(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get FuncTableEntry(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get Params(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: i32
  get Far(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: i32
  get Virtual(): number {
    return this.view.getInt32(52, true);
  }

  // 0x38: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get KdHelp(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get AddrBStore(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set AddrPC(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set AddrReturn(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set AddrFrame(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set AddrStack(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set FuncTableEntry(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set Params(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: i32
  set Far(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: i32
  set Virtual(value: number) {
    this.view.setInt32(52, value, true);
  }

  // 0x38: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set KdHelp(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set AddrBStore(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.API_VERSION (size: 8)
 */
export interface API_VERSION {
  /** u16 */
  MajorVersion: number;
  /** u16 */
  MinorVersion: number;
  /** u16 */
  Revision: number;
  /** u16 */
  Reserved: number;
}

export const sizeofAPI_VERSION = 8;

export function allocAPI_VERSION(data?: Partial<API_VERSION>): Uint8Array {
  const buf = new Uint8Array(sizeofAPI_VERSION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.MajorVersion !== undefined) view.setUint16(0, Number(data.MajorVersion), true);
  // 0x02: u16
  if (data?.MinorVersion !== undefined) view.setUint16(2, Number(data.MinorVersion), true);
  // 0x04: u16
  if (data?.Revision !== undefined) view.setUint16(4, Number(data.Revision), true);
  // 0x06: u16
  if (data?.Reserved !== undefined) view.setUint16(6, Number(data.Reserved), true);
  return buf;
}

export class API_VERSIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get MajorVersion(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get MinorVersion(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get Revision(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get Reserved(): number {
    return this.view.getUint16(6, true);
  }

  // 0x00: u16
  set MajorVersion(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set MinorVersion(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set Revision(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set Reserved(value: number) {
    this.view.setUint16(6, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_SYMBOL64 (size: 40)
 */
export interface IMAGEHLP_SYMBOL64 {
  /** u32 */
  SizeOfStruct: number;
  /** u64 */
  Address: number | bigint;
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
  /** u32 */
  MaxNameLength: number;
  /** array */
  Name: Deno.PointerValue | null;
}

export const sizeofIMAGEHLP_SYMBOL64 = 40;

export function allocIMAGEHLP_SYMBOL64(data?: Partial<IMAGEHLP_SYMBOL64>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGEHLP_SYMBOL64);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.Address !== undefined) view.setBigUint64(8, util.toBigInt(data.Address), true);
  // 0x10: u32
  if (data?.Size !== undefined) view.setUint32(16, Number(data.Size), true);
  // 0x14: u32
  if (data?.Flags !== undefined) view.setUint32(20, Number(data.Flags), true);
  // 0x18: u32
  if (data?.MaxNameLength !== undefined) view.setUint32(24, Number(data.MaxNameLength), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Name !== undefined) view.setBigUint64(32, data.Name === null ? 0n : util.toBigInt(util.toPointer(data.Name)), true);
  return buf;
}

export class IMAGEHLP_SYMBOL64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SizeOfStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: u64
  get Address(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u32
  get Size(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Flags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get MaxNameLength(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set SizeOfStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: u64
  set Address(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u32
  set Size(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Flags(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set MaxNameLength(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_SYMBOL64_PACKAGE (size: 16)
 */
export interface IMAGEHLP_SYMBOL64_PACKAGE {
  /** Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_SYMBOL64 */
  sym: Uint8Array | Deno.PointerValue | null;
  /** array */
  name: Deno.PointerValue | null;
}

export const sizeofIMAGEHLP_SYMBOL64_PACKAGE = 16;

export function allocIMAGEHLP_SYMBOL64_PACKAGE(data?: Partial<IMAGEHLP_SYMBOL64_PACKAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGEHLP_SYMBOL64_PACKAGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sym !== undefined) view.setBigUint64(0, data.sym === null ? 0n : util.toBigInt(util.toPointer(data.sym)), true);
  // 0x08: pointer
  if (data?.name !== undefined) view.setBigUint64(8, data.name === null ? 0n : util.toBigInt(util.toPointer(data.name)), true);
  return buf;
}

export class IMAGEHLP_SYMBOL64_PACKAGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sym(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set sym(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set name(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_SYMBOLW64 (size: 40)
 */
export interface IMAGEHLP_SYMBOLW64 {
  /** u32 */
  SizeOfStruct: number;
  /** u64 */
  Address: number | bigint;
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
  /** u32 */
  MaxNameLength: number;
  /** array */
  Name: Deno.PointerValue | null;
}

export const sizeofIMAGEHLP_SYMBOLW64 = 40;

export function allocIMAGEHLP_SYMBOLW64(data?: Partial<IMAGEHLP_SYMBOLW64>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGEHLP_SYMBOLW64);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.Address !== undefined) view.setBigUint64(8, util.toBigInt(data.Address), true);
  // 0x10: u32
  if (data?.Size !== undefined) view.setUint32(16, Number(data.Size), true);
  // 0x14: u32
  if (data?.Flags !== undefined) view.setUint32(20, Number(data.Flags), true);
  // 0x18: u32
  if (data?.MaxNameLength !== undefined) view.setUint32(24, Number(data.MaxNameLength), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Name !== undefined) view.setBigUint64(32, data.Name === null ? 0n : util.toBigInt(util.toPointer(data.Name)), true);
  return buf;
}

export class IMAGEHLP_SYMBOLW64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SizeOfStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: u64
  get Address(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u32
  get Size(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Flags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get MaxNameLength(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set SizeOfStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: u64
  set Address(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u32
  set Size(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Flags(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set MaxNameLength(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_SYMBOLW64_PACKAGE (size: 16)
 */
export interface IMAGEHLP_SYMBOLW64_PACKAGE {
  /** Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_SYMBOLW64 */
  sym: Uint8Array | Deno.PointerValue | null;
  /** array */
  name: Deno.PointerValue | null;
}

export const sizeofIMAGEHLP_SYMBOLW64_PACKAGE = 16;

export function allocIMAGEHLP_SYMBOLW64_PACKAGE(data?: Partial<IMAGEHLP_SYMBOLW64_PACKAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGEHLP_SYMBOLW64_PACKAGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sym !== undefined) view.setBigUint64(0, data.sym === null ? 0n : util.toBigInt(util.toPointer(data.sym)), true);
  // 0x08: pointer
  if (data?.name !== undefined) view.setBigUint64(8, data.name === null ? 0n : util.toBigInt(util.toPointer(data.name)), true);
  return buf;
}

export class IMAGEHLP_SYMBOLW64_PACKAGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sym(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set sym(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set name(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_SYMBOL (size: 32)
 */
export interface IMAGEHLP_SYMBOL {
  /** u32 */
  SizeOfStruct: number;
  /** u32 */
  Address: number;
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
  /** u32 */
  MaxNameLength: number;
  /** array */
  Name: Deno.PointerValue | null;
}

export const sizeofIMAGEHLP_SYMBOL = 32;

export function allocIMAGEHLP_SYMBOL(data?: Partial<IMAGEHLP_SYMBOL>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGEHLP_SYMBOL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: u32
  if (data?.Address !== undefined) view.setUint32(4, Number(data.Address), true);
  // 0x08: u32
  if (data?.Size !== undefined) view.setUint32(8, Number(data.Size), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.MaxNameLength !== undefined) view.setUint32(16, Number(data.MaxNameLength), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Name !== undefined) view.setBigUint64(24, data.Name === null ? 0n : util.toBigInt(util.toPointer(data.Name)), true);
  return buf;
}

export class IMAGEHLP_SYMBOLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SizeOfStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Address(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Size(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Flags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get MaxNameLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set SizeOfStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Address(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Size(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Flags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set MaxNameLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_SYMBOL_PACKAGE (size: 16)
 */
export interface IMAGEHLP_SYMBOL_PACKAGE {
  /** Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_SYMBOL */
  sym: Uint8Array | Deno.PointerValue | null;
  /** array */
  name: Deno.PointerValue | null;
}

export const sizeofIMAGEHLP_SYMBOL_PACKAGE = 16;

export function allocIMAGEHLP_SYMBOL_PACKAGE(data?: Partial<IMAGEHLP_SYMBOL_PACKAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGEHLP_SYMBOL_PACKAGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sym !== undefined) view.setBigUint64(0, data.sym === null ? 0n : util.toBigInt(util.toPointer(data.sym)), true);
  // 0x08: pointer
  if (data?.name !== undefined) view.setBigUint64(8, data.name === null ? 0n : util.toBigInt(util.toPointer(data.name)), true);
  return buf;
}

export class IMAGEHLP_SYMBOL_PACKAGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sym(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set sym(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set name(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_SYMBOLW (size: 32)
 */
export interface IMAGEHLP_SYMBOLW {
  /** u32 */
  SizeOfStruct: number;
  /** u32 */
  Address: number;
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
  /** u32 */
  MaxNameLength: number;
  /** array */
  Name: Deno.PointerValue | null;
}

export const sizeofIMAGEHLP_SYMBOLW = 32;

export function allocIMAGEHLP_SYMBOLW(data?: Partial<IMAGEHLP_SYMBOLW>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGEHLP_SYMBOLW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: u32
  if (data?.Address !== undefined) view.setUint32(4, Number(data.Address), true);
  // 0x08: u32
  if (data?.Size !== undefined) view.setUint32(8, Number(data.Size), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.MaxNameLength !== undefined) view.setUint32(16, Number(data.MaxNameLength), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Name !== undefined) view.setBigUint64(24, data.Name === null ? 0n : util.toBigInt(util.toPointer(data.Name)), true);
  return buf;
}

export class IMAGEHLP_SYMBOLWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SizeOfStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Address(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Size(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Flags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get MaxNameLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set SizeOfStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Address(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Size(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Flags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set MaxNameLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_SYMBOLW_PACKAGE (size: 16)
 */
export interface IMAGEHLP_SYMBOLW_PACKAGE {
  /** Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_SYMBOLW */
  sym: Uint8Array | Deno.PointerValue | null;
  /** array */
  name: Deno.PointerValue | null;
}

export const sizeofIMAGEHLP_SYMBOLW_PACKAGE = 16;

export function allocIMAGEHLP_SYMBOLW_PACKAGE(data?: Partial<IMAGEHLP_SYMBOLW_PACKAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGEHLP_SYMBOLW_PACKAGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sym !== undefined) view.setBigUint64(0, data.sym === null ? 0n : util.toBigInt(util.toPointer(data.sym)), true);
  // 0x08: pointer
  if (data?.name !== undefined) view.setBigUint64(8, data.name === null ? 0n : util.toBigInt(util.toPointer(data.name)), true);
  return buf;
}

export class IMAGEHLP_SYMBOLW_PACKAGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sym(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set sym(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set name(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_MODULE64 (size: 144)
 */
export interface IMAGEHLP_MODULE64 {
  /** u32 */
  SizeOfStruct: number;
  /** u64 */
  BaseOfImage: number | bigint;
  /** u32 */
  ImageSize: number;
  /** u32 */
  TimeDateStamp: number;
  /** u32 */
  CheckSum: number;
  /** u32 */
  NumSyms: number;
  /** Windows.Win32.System.Diagnostics.Debug.SYM_TYPE */
  SymType: SYM_TYPE;
  /** array */
  ModuleName: Deno.PointerValue | null;
  /** array */
  ImageName: Deno.PointerValue | null;
  /** array */
  LoadedImageName: Deno.PointerValue | null;
  /** array */
  LoadedPdbName: Deno.PointerValue | null;
  /** u32 */
  CVSig: number;
  /** array */
  CVData: Deno.PointerValue | null;
  /** u32 */
  PdbSig: number;
  /** System.Guid */
  PdbSig70: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  PdbAge: number;
  /** Windows.Win32.Foundation.BOOL */
  PdbUnmatched: boolean;
  /** Windows.Win32.Foundation.BOOL */
  DbgUnmatched: boolean;
  /** Windows.Win32.Foundation.BOOL */
  LineNumbers: boolean;
  /** Windows.Win32.Foundation.BOOL */
  GlobalSymbols: boolean;
  /** Windows.Win32.Foundation.BOOL */
  TypeInfo: boolean;
  /** Windows.Win32.Foundation.BOOL */
  SourceIndexed: boolean;
  /** Windows.Win32.Foundation.BOOL */
  Publics: boolean;
  /** u32 */
  MachineType: number;
  /** u32 */
  Reserved: number;
}

export const sizeofIMAGEHLP_MODULE64 = 144;

export function allocIMAGEHLP_MODULE64(data?: Partial<IMAGEHLP_MODULE64>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGEHLP_MODULE64);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.BaseOfImage !== undefined) view.setBigUint64(8, util.toBigInt(data.BaseOfImage), true);
  // 0x10: u32
  if (data?.ImageSize !== undefined) view.setUint32(16, Number(data.ImageSize), true);
  // 0x14: u32
  if (data?.TimeDateStamp !== undefined) view.setUint32(20, Number(data.TimeDateStamp), true);
  // 0x18: u32
  if (data?.CheckSum !== undefined) view.setUint32(24, Number(data.CheckSum), true);
  // 0x1c: u32
  if (data?.NumSyms !== undefined) view.setUint32(28, Number(data.NumSyms), true);
  // 0x20: i32
  if (data?.SymType !== undefined) view.setInt32(32, Number(data.SymType), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ModuleName !== undefined) view.setBigUint64(40, data.ModuleName === null ? 0n : util.toBigInt(util.toPointer(data.ModuleName)), true);
  // 0x30: pointer
  if (data?.ImageName !== undefined) view.setBigUint64(48, data.ImageName === null ? 0n : util.toBigInt(util.toPointer(data.ImageName)), true);
  // 0x38: pointer
  if (data?.LoadedImageName !== undefined) view.setBigUint64(56, data.LoadedImageName === null ? 0n : util.toBigInt(util.toPointer(data.LoadedImageName)), true);
  // 0x40: pointer
  if (data?.LoadedPdbName !== undefined) view.setBigUint64(64, data.LoadedPdbName === null ? 0n : util.toBigInt(util.toPointer(data.LoadedPdbName)), true);
  // 0x48: u32
  if (data?.CVSig !== undefined) view.setUint32(72, Number(data.CVSig), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.CVData !== undefined) view.setBigUint64(80, data.CVData === null ? 0n : util.toBigInt(util.toPointer(data.CVData)), true);
  // 0x58: u32
  if (data?.PdbSig !== undefined) view.setUint32(88, Number(data.PdbSig), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.PdbSig70 !== undefined) view.setBigUint64(96, data.PdbSig70 === null ? 0n : util.toBigInt(util.toPointer(data.PdbSig70)), true);
  // 0x68: u32
  if (data?.PdbAge !== undefined) view.setUint32(104, Number(data.PdbAge), true);
  // 0x6c: i32
  if (data?.PdbUnmatched !== undefined) view.setInt32(108, Number(data.PdbUnmatched), true);
  // 0x70: i32
  if (data?.DbgUnmatched !== undefined) view.setInt32(112, Number(data.DbgUnmatched), true);
  // 0x74: i32
  if (data?.LineNumbers !== undefined) view.setInt32(116, Number(data.LineNumbers), true);
  // 0x78: i32
  if (data?.GlobalSymbols !== undefined) view.setInt32(120, Number(data.GlobalSymbols), true);
  // 0x7c: i32
  if (data?.TypeInfo !== undefined) view.setInt32(124, Number(data.TypeInfo), true);
  // 0x80: i32
  if (data?.SourceIndexed !== undefined) view.setInt32(128, Number(data.SourceIndexed), true);
  // 0x84: i32
  if (data?.Publics !== undefined) view.setInt32(132, Number(data.Publics), true);
  // 0x88: u32
  if (data?.MachineType !== undefined) view.setUint32(136, Number(data.MachineType), true);
  // 0x8c: u32
  if (data?.Reserved !== undefined) view.setUint32(140, Number(data.Reserved), true);
  return buf;
}

export class IMAGEHLP_MODULE64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SizeOfStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: u64
  get BaseOfImage(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u32
  get ImageSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get TimeDateStamp(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get CheckSum(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get NumSyms(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: i32
  get SymType(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get ModuleName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get ImageName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get LoadedImageName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get LoadedPdbName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: u32
  get CVSig(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get CVData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: u32
  get PdbSig(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  get PdbSig70(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: u32
  get PdbAge(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: i32
  get PdbUnmatched(): number {
    return this.view.getInt32(108, true);
  }

  // 0x70: i32
  get DbgUnmatched(): number {
    return this.view.getInt32(112, true);
  }

  // 0x74: i32
  get LineNumbers(): number {
    return this.view.getInt32(116, true);
  }

  // 0x78: i32
  get GlobalSymbols(): number {
    return this.view.getInt32(120, true);
  }

  // 0x7c: i32
  get TypeInfo(): number {
    return this.view.getInt32(124, true);
  }

  // 0x80: i32
  get SourceIndexed(): number {
    return this.view.getInt32(128, true);
  }

  // 0x84: i32
  get Publics(): number {
    return this.view.getInt32(132, true);
  }

  // 0x88: u32
  get MachineType(): number {
    return this.view.getUint32(136, true);
  }

  // 0x8c: u32
  get Reserved(): number {
    return this.view.getUint32(140, true);
  }

  // 0x00: u32
  set SizeOfStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: u64
  set BaseOfImage(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u32
  set ImageSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set TimeDateStamp(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set CheckSum(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set NumSyms(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: i32
  set SymType(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set ModuleName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set ImageName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set LoadedImageName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set LoadedPdbName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: u32
  set CVSig(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set CVData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x58: u32
  set PdbSig(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  set PdbSig70(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x68: u32
  set PdbAge(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: i32
  set PdbUnmatched(value: number) {
    this.view.setInt32(108, value, true);
  }

  // 0x70: i32
  set DbgUnmatched(value: number) {
    this.view.setInt32(112, value, true);
  }

  // 0x74: i32
  set LineNumbers(value: number) {
    this.view.setInt32(116, value, true);
  }

  // 0x78: i32
  set GlobalSymbols(value: number) {
    this.view.setInt32(120, value, true);
  }

  // 0x7c: i32
  set TypeInfo(value: number) {
    this.view.setInt32(124, value, true);
  }

  // 0x80: i32
  set SourceIndexed(value: number) {
    this.view.setInt32(128, value, true);
  }

  // 0x84: i32
  set Publics(value: number) {
    this.view.setInt32(132, value, true);
  }

  // 0x88: u32
  set MachineType(value: number) {
    this.view.setUint32(136, value, true);
  }

  // 0x8c: u32
  set Reserved(value: number) {
    this.view.setUint32(140, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_MODULE64_EX (size: 16)
 */
export interface IMAGEHLP_MODULE64_EX {
  /** Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_MODULE64 */
  Module: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  RegionFlags: number;
}

export const sizeofIMAGEHLP_MODULE64_EX = 16;

export function allocIMAGEHLP_MODULE64_EX(data?: Partial<IMAGEHLP_MODULE64_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGEHLP_MODULE64_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Module !== undefined) view.setBigUint64(0, data.Module === null ? 0n : util.toBigInt(util.toPointer(data.Module)), true);
  // 0x08: u32
  if (data?.RegionFlags !== undefined) view.setUint32(8, Number(data.RegionFlags), true);
  // 0x0c: pad4
  return buf;
}

export class IMAGEHLP_MODULE64_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Module(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get RegionFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Module(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set RegionFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_MODULEW64 (size: 144)
 */
export interface IMAGEHLP_MODULEW64 {
  /** u32 */
  SizeOfStruct: number;
  /** u64 */
  BaseOfImage: number | bigint;
  /** u32 */
  ImageSize: number;
  /** u32 */
  TimeDateStamp: number;
  /** u32 */
  CheckSum: number;
  /** u32 */
  NumSyms: number;
  /** Windows.Win32.System.Diagnostics.Debug.SYM_TYPE */
  SymType: SYM_TYPE;
  /** array */
  ModuleName: Deno.PointerValue | null;
  /** array */
  ImageName: Deno.PointerValue | null;
  /** array */
  LoadedImageName: Deno.PointerValue | null;
  /** array */
  LoadedPdbName: Deno.PointerValue | null;
  /** u32 */
  CVSig: number;
  /** array */
  CVData: Deno.PointerValue | null;
  /** u32 */
  PdbSig: number;
  /** System.Guid */
  PdbSig70: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  PdbAge: number;
  /** Windows.Win32.Foundation.BOOL */
  PdbUnmatched: boolean;
  /** Windows.Win32.Foundation.BOOL */
  DbgUnmatched: boolean;
  /** Windows.Win32.Foundation.BOOL */
  LineNumbers: boolean;
  /** Windows.Win32.Foundation.BOOL */
  GlobalSymbols: boolean;
  /** Windows.Win32.Foundation.BOOL */
  TypeInfo: boolean;
  /** Windows.Win32.Foundation.BOOL */
  SourceIndexed: boolean;
  /** Windows.Win32.Foundation.BOOL */
  Publics: boolean;
  /** u32 */
  MachineType: number;
  /** u32 */
  Reserved: number;
}

export const sizeofIMAGEHLP_MODULEW64 = 144;

export function allocIMAGEHLP_MODULEW64(data?: Partial<IMAGEHLP_MODULEW64>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGEHLP_MODULEW64);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.BaseOfImage !== undefined) view.setBigUint64(8, util.toBigInt(data.BaseOfImage), true);
  // 0x10: u32
  if (data?.ImageSize !== undefined) view.setUint32(16, Number(data.ImageSize), true);
  // 0x14: u32
  if (data?.TimeDateStamp !== undefined) view.setUint32(20, Number(data.TimeDateStamp), true);
  // 0x18: u32
  if (data?.CheckSum !== undefined) view.setUint32(24, Number(data.CheckSum), true);
  // 0x1c: u32
  if (data?.NumSyms !== undefined) view.setUint32(28, Number(data.NumSyms), true);
  // 0x20: i32
  if (data?.SymType !== undefined) view.setInt32(32, Number(data.SymType), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ModuleName !== undefined) view.setBigUint64(40, data.ModuleName === null ? 0n : util.toBigInt(util.toPointer(data.ModuleName)), true);
  // 0x30: pointer
  if (data?.ImageName !== undefined) view.setBigUint64(48, data.ImageName === null ? 0n : util.toBigInt(util.toPointer(data.ImageName)), true);
  // 0x38: pointer
  if (data?.LoadedImageName !== undefined) view.setBigUint64(56, data.LoadedImageName === null ? 0n : util.toBigInt(util.toPointer(data.LoadedImageName)), true);
  // 0x40: pointer
  if (data?.LoadedPdbName !== undefined) view.setBigUint64(64, data.LoadedPdbName === null ? 0n : util.toBigInt(util.toPointer(data.LoadedPdbName)), true);
  // 0x48: u32
  if (data?.CVSig !== undefined) view.setUint32(72, Number(data.CVSig), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.CVData !== undefined) view.setBigUint64(80, data.CVData === null ? 0n : util.toBigInt(util.toPointer(data.CVData)), true);
  // 0x58: u32
  if (data?.PdbSig !== undefined) view.setUint32(88, Number(data.PdbSig), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.PdbSig70 !== undefined) view.setBigUint64(96, data.PdbSig70 === null ? 0n : util.toBigInt(util.toPointer(data.PdbSig70)), true);
  // 0x68: u32
  if (data?.PdbAge !== undefined) view.setUint32(104, Number(data.PdbAge), true);
  // 0x6c: i32
  if (data?.PdbUnmatched !== undefined) view.setInt32(108, Number(data.PdbUnmatched), true);
  // 0x70: i32
  if (data?.DbgUnmatched !== undefined) view.setInt32(112, Number(data.DbgUnmatched), true);
  // 0x74: i32
  if (data?.LineNumbers !== undefined) view.setInt32(116, Number(data.LineNumbers), true);
  // 0x78: i32
  if (data?.GlobalSymbols !== undefined) view.setInt32(120, Number(data.GlobalSymbols), true);
  // 0x7c: i32
  if (data?.TypeInfo !== undefined) view.setInt32(124, Number(data.TypeInfo), true);
  // 0x80: i32
  if (data?.SourceIndexed !== undefined) view.setInt32(128, Number(data.SourceIndexed), true);
  // 0x84: i32
  if (data?.Publics !== undefined) view.setInt32(132, Number(data.Publics), true);
  // 0x88: u32
  if (data?.MachineType !== undefined) view.setUint32(136, Number(data.MachineType), true);
  // 0x8c: u32
  if (data?.Reserved !== undefined) view.setUint32(140, Number(data.Reserved), true);
  return buf;
}

export class IMAGEHLP_MODULEW64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SizeOfStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: u64
  get BaseOfImage(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u32
  get ImageSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get TimeDateStamp(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get CheckSum(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get NumSyms(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: i32
  get SymType(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get ModuleName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get ImageName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get LoadedImageName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get LoadedPdbName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: u32
  get CVSig(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get CVData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: u32
  get PdbSig(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  get PdbSig70(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: u32
  get PdbAge(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: i32
  get PdbUnmatched(): number {
    return this.view.getInt32(108, true);
  }

  // 0x70: i32
  get DbgUnmatched(): number {
    return this.view.getInt32(112, true);
  }

  // 0x74: i32
  get LineNumbers(): number {
    return this.view.getInt32(116, true);
  }

  // 0x78: i32
  get GlobalSymbols(): number {
    return this.view.getInt32(120, true);
  }

  // 0x7c: i32
  get TypeInfo(): number {
    return this.view.getInt32(124, true);
  }

  // 0x80: i32
  get SourceIndexed(): number {
    return this.view.getInt32(128, true);
  }

  // 0x84: i32
  get Publics(): number {
    return this.view.getInt32(132, true);
  }

  // 0x88: u32
  get MachineType(): number {
    return this.view.getUint32(136, true);
  }

  // 0x8c: u32
  get Reserved(): number {
    return this.view.getUint32(140, true);
  }

  // 0x00: u32
  set SizeOfStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: u64
  set BaseOfImage(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u32
  set ImageSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set TimeDateStamp(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set CheckSum(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set NumSyms(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: i32
  set SymType(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set ModuleName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set ImageName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set LoadedImageName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set LoadedPdbName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: u32
  set CVSig(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set CVData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x58: u32
  set PdbSig(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  set PdbSig70(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x68: u32
  set PdbAge(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: i32
  set PdbUnmatched(value: number) {
    this.view.setInt32(108, value, true);
  }

  // 0x70: i32
  set DbgUnmatched(value: number) {
    this.view.setInt32(112, value, true);
  }

  // 0x74: i32
  set LineNumbers(value: number) {
    this.view.setInt32(116, value, true);
  }

  // 0x78: i32
  set GlobalSymbols(value: number) {
    this.view.setInt32(120, value, true);
  }

  // 0x7c: i32
  set TypeInfo(value: number) {
    this.view.setInt32(124, value, true);
  }

  // 0x80: i32
  set SourceIndexed(value: number) {
    this.view.setInt32(128, value, true);
  }

  // 0x84: i32
  set Publics(value: number) {
    this.view.setInt32(132, value, true);
  }

  // 0x88: u32
  set MachineType(value: number) {
    this.view.setUint32(136, value, true);
  }

  // 0x8c: u32
  set Reserved(value: number) {
    this.view.setUint32(140, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_MODULEW64_EX (size: 16)
 */
export interface IMAGEHLP_MODULEW64_EX {
  /** Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_MODULEW64 */
  Module: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  RegionFlags: number;
}

export const sizeofIMAGEHLP_MODULEW64_EX = 16;

export function allocIMAGEHLP_MODULEW64_EX(data?: Partial<IMAGEHLP_MODULEW64_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGEHLP_MODULEW64_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Module !== undefined) view.setBigUint64(0, data.Module === null ? 0n : util.toBigInt(util.toPointer(data.Module)), true);
  // 0x08: u32
  if (data?.RegionFlags !== undefined) view.setUint32(8, Number(data.RegionFlags), true);
  // 0x0c: pad4
  return buf;
}

export class IMAGEHLP_MODULEW64_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Module(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get RegionFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Module(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set RegionFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_MODULE (size: 56)
 */
export interface IMAGEHLP_MODULE {
  /** u32 */
  SizeOfStruct: number;
  /** u32 */
  BaseOfImage: number;
  /** u32 */
  ImageSize: number;
  /** u32 */
  TimeDateStamp: number;
  /** u32 */
  CheckSum: number;
  /** u32 */
  NumSyms: number;
  /** Windows.Win32.System.Diagnostics.Debug.SYM_TYPE */
  SymType: SYM_TYPE;
  /** array */
  ModuleName: Deno.PointerValue | null;
  /** array */
  ImageName: Deno.PointerValue | null;
  /** array */
  LoadedImageName: Deno.PointerValue | null;
}

export const sizeofIMAGEHLP_MODULE = 56;

export function allocIMAGEHLP_MODULE(data?: Partial<IMAGEHLP_MODULE>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGEHLP_MODULE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: u32
  if (data?.BaseOfImage !== undefined) view.setUint32(4, Number(data.BaseOfImage), true);
  // 0x08: u32
  if (data?.ImageSize !== undefined) view.setUint32(8, Number(data.ImageSize), true);
  // 0x0c: u32
  if (data?.TimeDateStamp !== undefined) view.setUint32(12, Number(data.TimeDateStamp), true);
  // 0x10: u32
  if (data?.CheckSum !== undefined) view.setUint32(16, Number(data.CheckSum), true);
  // 0x14: u32
  if (data?.NumSyms !== undefined) view.setUint32(20, Number(data.NumSyms), true);
  // 0x18: i32
  if (data?.SymType !== undefined) view.setInt32(24, Number(data.SymType), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ModuleName !== undefined) view.setBigUint64(32, data.ModuleName === null ? 0n : util.toBigInt(util.toPointer(data.ModuleName)), true);
  // 0x28: pointer
  if (data?.ImageName !== undefined) view.setBigUint64(40, data.ImageName === null ? 0n : util.toBigInt(util.toPointer(data.ImageName)), true);
  // 0x30: pointer
  if (data?.LoadedImageName !== undefined) view.setBigUint64(48, data.LoadedImageName === null ? 0n : util.toBigInt(util.toPointer(data.LoadedImageName)), true);
  return buf;
}

export class IMAGEHLP_MODULEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SizeOfStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get BaseOfImage(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ImageSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get TimeDateStamp(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get CheckSum(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get NumSyms(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: i32
  get SymType(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get ModuleName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get ImageName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get LoadedImageName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set SizeOfStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set BaseOfImage(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ImageSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set TimeDateStamp(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set CheckSum(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set NumSyms(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: i32
  set SymType(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set ModuleName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set ImageName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set LoadedImageName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_MODULEW (size: 56)
 */
export interface IMAGEHLP_MODULEW {
  /** u32 */
  SizeOfStruct: number;
  /** u32 */
  BaseOfImage: number;
  /** u32 */
  ImageSize: number;
  /** u32 */
  TimeDateStamp: number;
  /** u32 */
  CheckSum: number;
  /** u32 */
  NumSyms: number;
  /** Windows.Win32.System.Diagnostics.Debug.SYM_TYPE */
  SymType: SYM_TYPE;
  /** array */
  ModuleName: Deno.PointerValue | null;
  /** array */
  ImageName: Deno.PointerValue | null;
  /** array */
  LoadedImageName: Deno.PointerValue | null;
}

export const sizeofIMAGEHLP_MODULEW = 56;

export function allocIMAGEHLP_MODULEW(data?: Partial<IMAGEHLP_MODULEW>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGEHLP_MODULEW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: u32
  if (data?.BaseOfImage !== undefined) view.setUint32(4, Number(data.BaseOfImage), true);
  // 0x08: u32
  if (data?.ImageSize !== undefined) view.setUint32(8, Number(data.ImageSize), true);
  // 0x0c: u32
  if (data?.TimeDateStamp !== undefined) view.setUint32(12, Number(data.TimeDateStamp), true);
  // 0x10: u32
  if (data?.CheckSum !== undefined) view.setUint32(16, Number(data.CheckSum), true);
  // 0x14: u32
  if (data?.NumSyms !== undefined) view.setUint32(20, Number(data.NumSyms), true);
  // 0x18: i32
  if (data?.SymType !== undefined) view.setInt32(24, Number(data.SymType), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ModuleName !== undefined) view.setBigUint64(32, data.ModuleName === null ? 0n : util.toBigInt(util.toPointer(data.ModuleName)), true);
  // 0x28: pointer
  if (data?.ImageName !== undefined) view.setBigUint64(40, data.ImageName === null ? 0n : util.toBigInt(util.toPointer(data.ImageName)), true);
  // 0x30: pointer
  if (data?.LoadedImageName !== undefined) view.setBigUint64(48, data.LoadedImageName === null ? 0n : util.toBigInt(util.toPointer(data.LoadedImageName)), true);
  return buf;
}

export class IMAGEHLP_MODULEWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SizeOfStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get BaseOfImage(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ImageSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get TimeDateStamp(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get CheckSum(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get NumSyms(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: i32
  get SymType(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get ModuleName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get ImageName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get LoadedImageName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set SizeOfStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set BaseOfImage(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ImageSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set TimeDateStamp(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set CheckSum(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set NumSyms(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: i32
  set SymType(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set ModuleName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set ImageName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set LoadedImageName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_LINE64 (size: 40)
 */
export interface IMAGEHLP_LINE64 {
  /** u32 */
  SizeOfStruct: number;
  /** ptr */
  Key: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  LineNumber: number;
  /** Windows.Win32.Foundation.PSTR */
  FileName: string | null | Uint8Array;
  /** u64 */
  Address: number | bigint;
}

export const sizeofIMAGEHLP_LINE64 = 40;

export function allocIMAGEHLP_LINE64(data?: Partial<IMAGEHLP_LINE64>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGEHLP_LINE64);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Key !== undefined) view.setBigUint64(8, data.Key === null ? 0n : util.toBigInt(util.toPointer(data.Key)), true);
  // 0x10: u32
  if (data?.LineNumber !== undefined) view.setUint32(16, Number(data.LineNumber), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.FileName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.FileName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u64
  if (data?.Address !== undefined) view.setBigUint64(32, util.toBigInt(data.Address), true);
  return buf;
}

export class IMAGEHLP_LINE64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SizeOfStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Key(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get LineNumber(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  get FileName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u64
  get Address(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x00: u32
  set SizeOfStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Key(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set LineNumber(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  set FileName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, util.toBigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: u64
  set Address(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_LINEW64 (size: 40)
 */
export interface IMAGEHLP_LINEW64 {
  /** u32 */
  SizeOfStruct: number;
  /** ptr */
  Key: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  LineNumber: number;
  /** Windows.Win32.Foundation.PWSTR */
  FileName: string | null | Uint8Array | Uint16Array;
  /** u64 */
  Address: number | bigint;
}

export const sizeofIMAGEHLP_LINEW64 = 40;

export function allocIMAGEHLP_LINEW64(data?: Partial<IMAGEHLP_LINEW64>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGEHLP_LINEW64);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Key !== undefined) view.setBigUint64(8, data.Key === null ? 0n : util.toBigInt(util.toPointer(data.Key)), true);
  // 0x10: u32
  if (data?.LineNumber !== undefined) view.setUint32(16, Number(data.LineNumber), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.FileName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.FileName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u64
  if (data?.Address !== undefined) view.setBigUint64(32, util.toBigInt(data.Address), true);
  return buf;
}

export class IMAGEHLP_LINEW64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SizeOfStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Key(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get LineNumber(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  get FileName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u64
  get Address(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x00: u32
  set SizeOfStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Key(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set LineNumber(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  set FileName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, util.toBigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: u64
  set Address(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_LINE (size: 40)
 */
export interface IMAGEHLP_LINE {
  /** u32 */
  SizeOfStruct: number;
  /** ptr */
  Key: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  LineNumber: number;
  /** Windows.Win32.Foundation.PSTR */
  FileName: string | null | Uint8Array;
  /** u32 */
  Address: number;
}

export const sizeofIMAGEHLP_LINE = 40;

export function allocIMAGEHLP_LINE(data?: Partial<IMAGEHLP_LINE>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGEHLP_LINE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Key !== undefined) view.setBigUint64(8, data.Key === null ? 0n : util.toBigInt(util.toPointer(data.Key)), true);
  // 0x10: u32
  if (data?.LineNumber !== undefined) view.setUint32(16, Number(data.LineNumber), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.FileName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.FileName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.Address !== undefined) view.setUint32(32, Number(data.Address), true);
  // 0x24: pad4
  return buf;
}

export class IMAGEHLP_LINEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SizeOfStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Key(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get LineNumber(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  get FileName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get Address(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set SizeOfStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Key(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set LineNumber(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  set FileName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, util.toBigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: u32
  set Address(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_LINEW (size: 40)
 */
export interface IMAGEHLP_LINEW {
  /** u32 */
  SizeOfStruct: number;
  /** ptr */
  Key: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  LineNumber: number;
  /** Windows.Win32.Foundation.PSTR */
  FileName: string | null | Uint8Array;
  /** u64 */
  Address: number | bigint;
}

export const sizeofIMAGEHLP_LINEW = 40;

export function allocIMAGEHLP_LINEW(data?: Partial<IMAGEHLP_LINEW>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGEHLP_LINEW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Key !== undefined) view.setBigUint64(8, data.Key === null ? 0n : util.toBigInt(util.toPointer(data.Key)), true);
  // 0x10: u32
  if (data?.LineNumber !== undefined) view.setUint32(16, Number(data.LineNumber), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.FileName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.FileName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u64
  if (data?.Address !== undefined) view.setBigUint64(32, util.toBigInt(data.Address), true);
  return buf;
}

export class IMAGEHLP_LINEWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SizeOfStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Key(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get LineNumber(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  get FileName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u64
  get Address(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x00: u32
  set SizeOfStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Key(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set LineNumber(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  set FileName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, util.toBigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: u64
  set Address(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.SOURCEFILE (size: 16)
 */
export interface SOURCEFILE {
  /** u64 */
  ModBase: number | bigint;
  /** Windows.Win32.Foundation.PSTR */
  FileName: string | null | Uint8Array;
}

export const sizeofSOURCEFILE = 16;

export function allocSOURCEFILE(data?: Partial<SOURCEFILE>): Uint8Array {
  const buf = new Uint8Array(sizeofSOURCEFILE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.ModBase !== undefined) view.setBigUint64(0, util.toBigInt(data.ModBase), true);
  // 0x08: buffer
  if (data?.FileName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.FileName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class SOURCEFILEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get ModBase(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: buffer
  get FileName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u64
  set ModBase(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: buffer
  set FileName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.SOURCEFILEW (size: 16)
 */
export interface SOURCEFILEW {
  /** u64 */
  ModBase: number | bigint;
  /** Windows.Win32.Foundation.PWSTR */
  FileName: string | null | Uint8Array | Uint16Array;
}

export const sizeofSOURCEFILEW = 16;

export function allocSOURCEFILEW(data?: Partial<SOURCEFILEW>): Uint8Array {
  const buf = new Uint8Array(sizeofSOURCEFILEW);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.ModBase !== undefined) view.setBigUint64(0, util.toBigInt(data.ModBase), true);
  // 0x08: buffer
  if (data?.FileName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.FileName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class SOURCEFILEWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get ModBase(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: buffer
  get FileName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u64
  set ModBase(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: buffer
  set FileName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_CBA_READ_MEMORY (size: 32)
 */
export interface IMAGEHLP_CBA_READ_MEMORY {
  /** u64 */
  addr: number | bigint;
  /** ptr */
  buf: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  bytes: number;
  /** ptr */
  bytesread: Deno.PointerValue | Uint8Array | null;
}

export const sizeofIMAGEHLP_CBA_READ_MEMORY = 32;

export function allocIMAGEHLP_CBA_READ_MEMORY(data?: Partial<IMAGEHLP_CBA_READ_MEMORY>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGEHLP_CBA_READ_MEMORY);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.addr !== undefined) view.setBigUint64(0, util.toBigInt(data.addr), true);
  // 0x08: pointer
  if (data?.buf !== undefined) view.setBigUint64(8, data.buf === null ? 0n : util.toBigInt(util.toPointer(data.buf)), true);
  // 0x10: u32
  if (data?.bytes !== undefined) view.setUint32(16, Number(data.bytes), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.bytesread !== undefined) view.setBigUint64(24, data.bytesread === null ? 0n : util.toBigInt(util.toPointer(data.bytesread)), true);
  return buf;
}

export class IMAGEHLP_CBA_READ_MEMORYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get addr(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: pointer
  get buf(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get bytes(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get bytesread(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u64
  set addr(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: pointer
  set buf(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set bytes(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set bytesread(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_CBA_EVENT (size: 24)
 */
export interface IMAGEHLP_CBA_EVENT {
  /** Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_CBA_EVENT_SEVERITY */
  severity: IMAGEHLP_CBA_EVENT_SEVERITY;
  /** u32 */
  code: number;
  /** Windows.Win32.Foundation.PSTR */
  desc: string | null | Uint8Array;
  /** ptr */
  object: Deno.PointerValue | Uint8Array | null;
}

export const sizeofIMAGEHLP_CBA_EVENT = 24;

export function allocIMAGEHLP_CBA_EVENT(data?: Partial<IMAGEHLP_CBA_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGEHLP_CBA_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.severity !== undefined) view.setUint32(0, Number(data.severity), true);
  // 0x04: u32
  if (data?.code !== undefined) view.setUint32(4, Number(data.code), true);
  // 0x08: buffer
  if (data?.desc !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.desc);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.object !== undefined) view.setBigUint64(16, data.object === null ? 0n : util.toBigInt(util.toPointer(data.object)), true);
  return buf;
}

export class IMAGEHLP_CBA_EVENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get severity(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get code(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get desc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get object(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set severity(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set code(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set desc(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: pointer
  set object(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_CBA_EVENTW (size: 24)
 */
export interface IMAGEHLP_CBA_EVENTW {
  /** Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_CBA_EVENT_SEVERITY */
  severity: IMAGEHLP_CBA_EVENT_SEVERITY;
  /** u32 */
  code: number;
  /** Windows.Win32.Foundation.PWSTR */
  desc: string | null | Uint8Array | Uint16Array;
  /** ptr */
  object: Deno.PointerValue | Uint8Array | null;
}

export const sizeofIMAGEHLP_CBA_EVENTW = 24;

export function allocIMAGEHLP_CBA_EVENTW(data?: Partial<IMAGEHLP_CBA_EVENTW>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGEHLP_CBA_EVENTW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.severity !== undefined) view.setUint32(0, Number(data.severity), true);
  // 0x04: u32
  if (data?.code !== undefined) view.setUint32(4, Number(data.code), true);
  // 0x08: buffer
  if (data?.desc !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.desc);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.object !== undefined) view.setBigUint64(16, data.object === null ? 0n : util.toBigInt(util.toPointer(data.object)), true);
  return buf;
}

export class IMAGEHLP_CBA_EVENTWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get severity(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get code(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get desc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get object(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set severity(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set code(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set desc(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: pointer
  set object(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_DEFERRED_SYMBOL_LOAD64 (size: 56)
 */
export interface IMAGEHLP_DEFERRED_SYMBOL_LOAD64 {
  /** u32 */
  SizeOfStruct: number;
  /** u64 */
  BaseOfImage: number | bigint;
  /** u32 */
  CheckSum: number;
  /** u32 */
  TimeDateStamp: number;
  /** array */
  FileName: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  Reparse: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
}

export const sizeofIMAGEHLP_DEFERRED_SYMBOL_LOAD64 = 56;

export function allocIMAGEHLP_DEFERRED_SYMBOL_LOAD64(data?: Partial<IMAGEHLP_DEFERRED_SYMBOL_LOAD64>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGEHLP_DEFERRED_SYMBOL_LOAD64);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.BaseOfImage !== undefined) view.setBigUint64(8, util.toBigInt(data.BaseOfImage), true);
  // 0x10: u32
  if (data?.CheckSum !== undefined) view.setUint32(16, Number(data.CheckSum), true);
  // 0x14: u32
  if (data?.TimeDateStamp !== undefined) view.setUint32(20, Number(data.TimeDateStamp), true);
  // 0x18: pointer
  if (data?.FileName !== undefined) view.setBigUint64(24, data.FileName === null ? 0n : util.toBigInt(util.toPointer(data.FileName)), true);
  // 0x20: pointer
  if (data?.Reparse !== undefined) view.setBigUint64(32, data.Reparse === null ? 0n : util.toBigInt(util.toPointer(data.Reparse)), true);
  // 0x28: pointer
  if (data?.hFile !== undefined) view.setBigUint64(40, data.hFile === null ? 0n : util.toBigInt(util.toPointer(data.hFile)), true);
  // 0x30: u32
  if (data?.Flags !== undefined) view.setUint32(48, Number(data.Flags), true);
  // 0x34: pad4
  return buf;
}

export class IMAGEHLP_DEFERRED_SYMBOL_LOAD64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SizeOfStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: u64
  get BaseOfImage(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u32
  get CheckSum(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get TimeDateStamp(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get FileName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get Reparse(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get hFile(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get Flags(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x00: u32
  set SizeOfStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: u64
  set BaseOfImage(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u32
  set CheckSum(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set TimeDateStamp(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set FileName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set Reparse(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set hFile(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set Flags(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_DEFERRED_SYMBOL_LOADW64 (size: 56)
 */
export interface IMAGEHLP_DEFERRED_SYMBOL_LOADW64 {
  /** u32 */
  SizeOfStruct: number;
  /** u64 */
  BaseOfImage: number | bigint;
  /** u32 */
  CheckSum: number;
  /** u32 */
  TimeDateStamp: number;
  /** array */
  FileName: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  Reparse: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
}

export const sizeofIMAGEHLP_DEFERRED_SYMBOL_LOADW64 = 56;

export function allocIMAGEHLP_DEFERRED_SYMBOL_LOADW64(data?: Partial<IMAGEHLP_DEFERRED_SYMBOL_LOADW64>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGEHLP_DEFERRED_SYMBOL_LOADW64);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.BaseOfImage !== undefined) view.setBigUint64(8, util.toBigInt(data.BaseOfImage), true);
  // 0x10: u32
  if (data?.CheckSum !== undefined) view.setUint32(16, Number(data.CheckSum), true);
  // 0x14: u32
  if (data?.TimeDateStamp !== undefined) view.setUint32(20, Number(data.TimeDateStamp), true);
  // 0x18: pointer
  if (data?.FileName !== undefined) view.setBigUint64(24, data.FileName === null ? 0n : util.toBigInt(util.toPointer(data.FileName)), true);
  // 0x20: pointer
  if (data?.Reparse !== undefined) view.setBigUint64(32, data.Reparse === null ? 0n : util.toBigInt(util.toPointer(data.Reparse)), true);
  // 0x28: pointer
  if (data?.hFile !== undefined) view.setBigUint64(40, data.hFile === null ? 0n : util.toBigInt(util.toPointer(data.hFile)), true);
  // 0x30: u32
  if (data?.Flags !== undefined) view.setUint32(48, Number(data.Flags), true);
  // 0x34: pad4
  return buf;
}

export class IMAGEHLP_DEFERRED_SYMBOL_LOADW64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SizeOfStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: u64
  get BaseOfImage(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u32
  get CheckSum(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get TimeDateStamp(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get FileName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get Reparse(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get hFile(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get Flags(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x00: u32
  set SizeOfStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: u64
  set BaseOfImage(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u32
  set CheckSum(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set TimeDateStamp(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set FileName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set Reparse(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set hFile(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set Flags(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_DEFERRED_SYMBOL_LOAD (size: 40)
 */
export interface IMAGEHLP_DEFERRED_SYMBOL_LOAD {
  /** u32 */
  SizeOfStruct: number;
  /** u32 */
  BaseOfImage: number;
  /** u32 */
  CheckSum: number;
  /** u32 */
  TimeDateStamp: number;
  /** array */
  FileName: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  Reparse: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIMAGEHLP_DEFERRED_SYMBOL_LOAD = 40;

export function allocIMAGEHLP_DEFERRED_SYMBOL_LOAD(data?: Partial<IMAGEHLP_DEFERRED_SYMBOL_LOAD>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGEHLP_DEFERRED_SYMBOL_LOAD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: u32
  if (data?.BaseOfImage !== undefined) view.setUint32(4, Number(data.BaseOfImage), true);
  // 0x08: u32
  if (data?.CheckSum !== undefined) view.setUint32(8, Number(data.CheckSum), true);
  // 0x0c: u32
  if (data?.TimeDateStamp !== undefined) view.setUint32(12, Number(data.TimeDateStamp), true);
  // 0x10: pointer
  if (data?.FileName !== undefined) view.setBigUint64(16, data.FileName === null ? 0n : util.toBigInt(util.toPointer(data.FileName)), true);
  // 0x18: pointer
  if (data?.Reparse !== undefined) view.setBigUint64(24, data.Reparse === null ? 0n : util.toBigInt(util.toPointer(data.Reparse)), true);
  // 0x20: pointer
  if (data?.hFile !== undefined) view.setBigUint64(32, data.hFile === null ? 0n : util.toBigInt(util.toPointer(data.hFile)), true);
  return buf;
}

export class IMAGEHLP_DEFERRED_SYMBOL_LOADView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SizeOfStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get BaseOfImage(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get CheckSum(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get TimeDateStamp(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get FileName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Reparse(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get hFile(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set SizeOfStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set BaseOfImage(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set CheckSum(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set TimeDateStamp(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set FileName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Reparse(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set hFile(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_DUPLICATE_SYMBOL64 (size: 24)
 */
export interface IMAGEHLP_DUPLICATE_SYMBOL64 {
  /** u32 */
  SizeOfStruct: number;
  /** u32 */
  NumberOfDups: number;
  /** ptr */
  Symbol: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  SelectedSymbol: number;
}

export const sizeofIMAGEHLP_DUPLICATE_SYMBOL64 = 24;

export function allocIMAGEHLP_DUPLICATE_SYMBOL64(data?: Partial<IMAGEHLP_DUPLICATE_SYMBOL64>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGEHLP_DUPLICATE_SYMBOL64);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: u32
  if (data?.NumberOfDups !== undefined) view.setUint32(4, Number(data.NumberOfDups), true);
  // 0x08: pointer
  if (data?.Symbol !== undefined) view.setBigUint64(8, data.Symbol === null ? 0n : util.toBigInt(util.toPointer(data.Symbol)), true);
  // 0x10: u32
  if (data?.SelectedSymbol !== undefined) view.setUint32(16, Number(data.SelectedSymbol), true);
  // 0x14: pad4
  return buf;
}

export class IMAGEHLP_DUPLICATE_SYMBOL64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SizeOfStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NumberOfDups(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Symbol(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get SelectedSymbol(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set SizeOfStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NumberOfDups(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Symbol(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set SelectedSymbol(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_DUPLICATE_SYMBOL (size: 24)
 */
export interface IMAGEHLP_DUPLICATE_SYMBOL {
  /** u32 */
  SizeOfStruct: number;
  /** u32 */
  NumberOfDups: number;
  /** ptr */
  Symbol: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  SelectedSymbol: number;
}

export const sizeofIMAGEHLP_DUPLICATE_SYMBOL = 24;

export function allocIMAGEHLP_DUPLICATE_SYMBOL(data?: Partial<IMAGEHLP_DUPLICATE_SYMBOL>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGEHLP_DUPLICATE_SYMBOL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: u32
  if (data?.NumberOfDups !== undefined) view.setUint32(4, Number(data.NumberOfDups), true);
  // 0x08: pointer
  if (data?.Symbol !== undefined) view.setBigUint64(8, data.Symbol === null ? 0n : util.toBigInt(util.toPointer(data.Symbol)), true);
  // 0x10: u32
  if (data?.SelectedSymbol !== undefined) view.setUint32(16, Number(data.SelectedSymbol), true);
  // 0x14: pad4
  return buf;
}

export class IMAGEHLP_DUPLICATE_SYMBOLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SizeOfStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NumberOfDups(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Symbol(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get SelectedSymbol(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set SizeOfStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NumberOfDups(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Symbol(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set SelectedSymbol(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_JIT_SYMBOLMAP (size: 24)
 */
export interface IMAGEHLP_JIT_SYMBOLMAP {
  /** u32 */
  SizeOfStruct: number;
  /** u64 */
  Address: number | bigint;
  /** u64 */
  BaseOfImage: number | bigint;
}

export const sizeofIMAGEHLP_JIT_SYMBOLMAP = 24;

export function allocIMAGEHLP_JIT_SYMBOLMAP(data?: Partial<IMAGEHLP_JIT_SYMBOLMAP>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGEHLP_JIT_SYMBOLMAP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.Address !== undefined) view.setBigUint64(8, util.toBigInt(data.Address), true);
  // 0x10: u64
  if (data?.BaseOfImage !== undefined) view.setBigUint64(16, util.toBigInt(data.BaseOfImage), true);
  return buf;
}

export class IMAGEHLP_JIT_SYMBOLMAPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SizeOfStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: u64
  get Address(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get BaseOfImage(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x00: u32
  set SizeOfStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: u64
  set Address(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set BaseOfImage(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.OMAP (size: 8)
 */
export interface OMAP {
  /** u32 */
  rva: number;
  /** u32 */
  rvaTo: number;
}

export const sizeofOMAP = 8;

export function allocOMAP(data?: Partial<OMAP>): Uint8Array {
  const buf = new Uint8Array(sizeofOMAP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.rva !== undefined) view.setUint32(0, Number(data.rva), true);
  // 0x04: u32
  if (data?.rvaTo !== undefined) view.setUint32(4, Number(data.rvaTo), true);
  return buf;
}

export class OMAPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get rva(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get rvaTo(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set rva(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set rvaTo(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.SRCCODEINFO (size: 56)
 */
export interface SRCCODEINFO {
  /** u32 */
  SizeOfStruct: number;
  /** ptr */
  Key: Deno.PointerValue | Uint8Array | null;
  /** u64 */
  ModBase: number | bigint;
  /** array */
  Obj: Deno.PointerValue | null;
  /** array */
  FileName: Deno.PointerValue | null;
  /** u32 */
  LineNumber: number;
  /** u64 */
  Address: number | bigint;
}

export const sizeofSRCCODEINFO = 56;

export function allocSRCCODEINFO(data?: Partial<SRCCODEINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSRCCODEINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Key !== undefined) view.setBigUint64(8, data.Key === null ? 0n : util.toBigInt(util.toPointer(data.Key)), true);
  // 0x10: u64
  if (data?.ModBase !== undefined) view.setBigUint64(16, util.toBigInt(data.ModBase), true);
  // 0x18: pointer
  if (data?.Obj !== undefined) view.setBigUint64(24, data.Obj === null ? 0n : util.toBigInt(util.toPointer(data.Obj)), true);
  // 0x20: pointer
  if (data?.FileName !== undefined) view.setBigUint64(32, data.FileName === null ? 0n : util.toBigInt(util.toPointer(data.FileName)), true);
  // 0x28: u32
  if (data?.LineNumber !== undefined) view.setUint32(40, Number(data.LineNumber), true);
  // 0x2c: pad4
  // 0x30: u64
  if (data?.Address !== undefined) view.setBigUint64(48, util.toBigInt(data.Address), true);
  return buf;
}

export class SRCCODEINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SizeOfStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Key(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u64
  get ModBase(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: pointer
  get Obj(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get FileName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get LineNumber(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: u64
  get Address(): number | bigint {
    return this.view.getBigUint64(48, true);
  }

  // 0x00: u32
  set SizeOfStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Key(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u64
  set ModBase(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: pointer
  set Obj(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set FileName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set LineNumber(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: u64
  set Address(value: number | bigint) {
    this.view.setBigUint64(48, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.SRCCODEINFOW (size: 56)
 */
export interface SRCCODEINFOW {
  /** u32 */
  SizeOfStruct: number;
  /** ptr */
  Key: Deno.PointerValue | Uint8Array | null;
  /** u64 */
  ModBase: number | bigint;
  /** array */
  Obj: Deno.PointerValue | null;
  /** array */
  FileName: Deno.PointerValue | null;
  /** u32 */
  LineNumber: number;
  /** u64 */
  Address: number | bigint;
}

export const sizeofSRCCODEINFOW = 56;

export function allocSRCCODEINFOW(data?: Partial<SRCCODEINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofSRCCODEINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Key !== undefined) view.setBigUint64(8, data.Key === null ? 0n : util.toBigInt(util.toPointer(data.Key)), true);
  // 0x10: u64
  if (data?.ModBase !== undefined) view.setBigUint64(16, util.toBigInt(data.ModBase), true);
  // 0x18: pointer
  if (data?.Obj !== undefined) view.setBigUint64(24, data.Obj === null ? 0n : util.toBigInt(util.toPointer(data.Obj)), true);
  // 0x20: pointer
  if (data?.FileName !== undefined) view.setBigUint64(32, data.FileName === null ? 0n : util.toBigInt(util.toPointer(data.FileName)), true);
  // 0x28: u32
  if (data?.LineNumber !== undefined) view.setUint32(40, Number(data.LineNumber), true);
  // 0x2c: pad4
  // 0x30: u64
  if (data?.Address !== undefined) view.setBigUint64(48, util.toBigInt(data.Address), true);
  return buf;
}

export class SRCCODEINFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SizeOfStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Key(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u64
  get ModBase(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: pointer
  get Obj(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get FileName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get LineNumber(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: u64
  get Address(): number | bigint {
    return this.view.getBigUint64(48, true);
  }

  // 0x00: u32
  set SizeOfStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Key(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u64
  set ModBase(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: pointer
  set Obj(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set FileName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set LineNumber(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: u64
  set Address(value: number | bigint) {
    this.view.setBigUint64(48, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_SYMBOL_SRC (size: 16)
 */
export interface IMAGEHLP_SYMBOL_SRC {
  /** u32 */
  sizeofstruct: number;
  /** u32 */
  type: number;
  /** array */
  file: Deno.PointerValue | null;
}

export const sizeofIMAGEHLP_SYMBOL_SRC = 16;

export function allocIMAGEHLP_SYMBOL_SRC(data?: Partial<IMAGEHLP_SYMBOL_SRC>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGEHLP_SYMBOL_SRC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sizeofstruct !== undefined) view.setUint32(0, Number(data.sizeofstruct), true);
  // 0x04: u32
  if (data?.type !== undefined) view.setUint32(4, Number(data.type), true);
  // 0x08: pointer
  if (data?.file !== undefined) view.setBigUint64(8, data.file === null ? 0n : util.toBigInt(util.toPointer(data.file)), true);
  return buf;
}

export class IMAGEHLP_SYMBOL_SRCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get sizeofstruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get type(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get file(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set sizeofstruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set type(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set file(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.MODULE_TYPE_INFO (size: 16)
 */
export interface MODULE_TYPE_INFO {
  /** u16 */
  dataLength: number;
  /** u16 */
  leaf: number;
  /** array */
  data: Deno.PointerValue | null;
}

export const sizeofMODULE_TYPE_INFO = 16;

export function allocMODULE_TYPE_INFO(data?: Partial<MODULE_TYPE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMODULE_TYPE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.dataLength !== undefined) view.setUint16(0, Number(data.dataLength), true);
  // 0x02: u16
  if (data?.leaf !== undefined) view.setUint16(2, Number(data.leaf), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.data !== undefined) view.setBigUint64(8, data.data === null ? 0n : util.toBigInt(util.toPointer(data.data)), true);
  return buf;
}

export class MODULE_TYPE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get dataLength(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get leaf(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get data(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set dataLength(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set leaf(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set data(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.SYMBOL_INFO (size: 88)
 */
export interface SYMBOL_INFO {
  /** u32 */
  SizeOfStruct: number;
  /** u32 */
  TypeIndex: number;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** u32 */
  Index: number;
  /** u32 */
  Size: number;
  /** u64 */
  ModBase: number | bigint;
  /** Windows.Win32.System.Diagnostics.Debug.SYMBOL_INFO_FLAGS */
  Flags: SYMBOL_INFO_FLAGS;
  /** u64 */
  Value: number | bigint;
  /** u64 */
  Address: number | bigint;
  /** u32 */
  Register: number;
  /** u32 */
  Scope: number;
  /** u32 */
  Tag: number;
  /** u32 */
  NameLen: number;
  /** u32 */
  MaxNameLen: number;
  /** array */
  Name: Deno.PointerValue | null;
}

export const sizeofSYMBOL_INFO = 88;

export function allocSYMBOL_INFO(data?: Partial<SYMBOL_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSYMBOL_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: u32
  if (data?.TypeIndex !== undefined) view.setUint32(4, Number(data.TypeIndex), true);
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  // 0x10: u32
  if (data?.Index !== undefined) view.setUint32(16, Number(data.Index), true);
  // 0x14: u32
  if (data?.Size !== undefined) view.setUint32(20, Number(data.Size), true);
  // 0x18: u64
  if (data?.ModBase !== undefined) view.setBigUint64(24, util.toBigInt(data.ModBase), true);
  // 0x20: u32
  if (data?.Flags !== undefined) view.setUint32(32, Number(data.Flags), true);
  // 0x24: pad4
  // 0x28: u64
  if (data?.Value !== undefined) view.setBigUint64(40, util.toBigInt(data.Value), true);
  // 0x30: u64
  if (data?.Address !== undefined) view.setBigUint64(48, util.toBigInt(data.Address), true);
  // 0x38: u32
  if (data?.Register !== undefined) view.setUint32(56, Number(data.Register), true);
  // 0x3c: u32
  if (data?.Scope !== undefined) view.setUint32(60, Number(data.Scope), true);
  // 0x40: u32
  if (data?.Tag !== undefined) view.setUint32(64, Number(data.Tag), true);
  // 0x44: u32
  if (data?.NameLen !== undefined) view.setUint32(68, Number(data.NameLen), true);
  // 0x48: u32
  if (data?.MaxNameLen !== undefined) view.setUint32(72, Number(data.MaxNameLen), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.Name !== undefined) view.setBigUint64(80, data.Name === null ? 0n : util.toBigInt(util.toPointer(data.Name)), true);
  return buf;
}

export class SYMBOL_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SizeOfStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get TypeIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get Index(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Size(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u64
  get ModBase(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u32
  get Flags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: u64
  get Value(): number | bigint {
    return this.view.getBigUint64(40, true);
  }

  // 0x30: u64
  get Address(): number | bigint {
    return this.view.getBigUint64(48, true);
  }

  // 0x38: u32
  get Register(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get Scope(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get Tag(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get NameLen(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get MaxNameLen(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set SizeOfStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set TypeIndex(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set Index(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Size(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u64
  set ModBase(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u32
  set Flags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: u64
  set Value(value: number | bigint) {
    this.view.setBigUint64(40, util.toBigInt(value), true);
  }

  // 0x30: u64
  set Address(value: number | bigint) {
    this.view.setBigUint64(48, util.toBigInt(value), true);
  }

  // 0x38: u32
  set Register(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set Scope(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set Tag(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set NameLen(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set MaxNameLen(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.SYMBOL_INFO_PACKAGE (size: 16)
 */
export interface SYMBOL_INFO_PACKAGE {
  /** Windows.Win32.System.Diagnostics.Debug.SYMBOL_INFO */
  si: Uint8Array | Deno.PointerValue | null;
  /** array */
  name: Deno.PointerValue | null;
}

export const sizeofSYMBOL_INFO_PACKAGE = 16;

export function allocSYMBOL_INFO_PACKAGE(data?: Partial<SYMBOL_INFO_PACKAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofSYMBOL_INFO_PACKAGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.si !== undefined) view.setBigUint64(0, data.si === null ? 0n : util.toBigInt(util.toPointer(data.si)), true);
  // 0x08: pointer
  if (data?.name !== undefined) view.setBigUint64(8, data.name === null ? 0n : util.toBigInt(util.toPointer(data.name)), true);
  return buf;
}

export class SYMBOL_INFO_PACKAGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get si(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set si(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set name(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.SYMBOL_INFOW (size: 88)
 */
export interface SYMBOL_INFOW {
  /** u32 */
  SizeOfStruct: number;
  /** u32 */
  TypeIndex: number;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** u32 */
  Index: number;
  /** u32 */
  Size: number;
  /** u64 */
  ModBase: number | bigint;
  /** Windows.Win32.System.Diagnostics.Debug.SYMBOL_INFO_FLAGS */
  Flags: SYMBOL_INFO_FLAGS;
  /** u64 */
  Value: number | bigint;
  /** u64 */
  Address: number | bigint;
  /** u32 */
  Register: number;
  /** u32 */
  Scope: number;
  /** u32 */
  Tag: number;
  /** u32 */
  NameLen: number;
  /** u32 */
  MaxNameLen: number;
  /** array */
  Name: Deno.PointerValue | null;
}

export const sizeofSYMBOL_INFOW = 88;

export function allocSYMBOL_INFOW(data?: Partial<SYMBOL_INFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofSYMBOL_INFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: u32
  if (data?.TypeIndex !== undefined) view.setUint32(4, Number(data.TypeIndex), true);
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  // 0x10: u32
  if (data?.Index !== undefined) view.setUint32(16, Number(data.Index), true);
  // 0x14: u32
  if (data?.Size !== undefined) view.setUint32(20, Number(data.Size), true);
  // 0x18: u64
  if (data?.ModBase !== undefined) view.setBigUint64(24, util.toBigInt(data.ModBase), true);
  // 0x20: u32
  if (data?.Flags !== undefined) view.setUint32(32, Number(data.Flags), true);
  // 0x24: pad4
  // 0x28: u64
  if (data?.Value !== undefined) view.setBigUint64(40, util.toBigInt(data.Value), true);
  // 0x30: u64
  if (data?.Address !== undefined) view.setBigUint64(48, util.toBigInt(data.Address), true);
  // 0x38: u32
  if (data?.Register !== undefined) view.setUint32(56, Number(data.Register), true);
  // 0x3c: u32
  if (data?.Scope !== undefined) view.setUint32(60, Number(data.Scope), true);
  // 0x40: u32
  if (data?.Tag !== undefined) view.setUint32(64, Number(data.Tag), true);
  // 0x44: u32
  if (data?.NameLen !== undefined) view.setUint32(68, Number(data.NameLen), true);
  // 0x48: u32
  if (data?.MaxNameLen !== undefined) view.setUint32(72, Number(data.MaxNameLen), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.Name !== undefined) view.setBigUint64(80, data.Name === null ? 0n : util.toBigInt(util.toPointer(data.Name)), true);
  return buf;
}

export class SYMBOL_INFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SizeOfStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get TypeIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get Index(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Size(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u64
  get ModBase(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u32
  get Flags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: u64
  get Value(): number | bigint {
    return this.view.getBigUint64(40, true);
  }

  // 0x30: u64
  get Address(): number | bigint {
    return this.view.getBigUint64(48, true);
  }

  // 0x38: u32
  get Register(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get Scope(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get Tag(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get NameLen(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get MaxNameLen(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set SizeOfStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set TypeIndex(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set Index(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Size(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u64
  set ModBase(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u32
  set Flags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: u64
  set Value(value: number | bigint) {
    this.view.setBigUint64(40, util.toBigInt(value), true);
  }

  // 0x30: u64
  set Address(value: number | bigint) {
    this.view.setBigUint64(48, util.toBigInt(value), true);
  }

  // 0x38: u32
  set Register(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set Scope(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set Tag(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set NameLen(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set MaxNameLen(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.SYMBOL_INFO_PACKAGEW (size: 16)
 */
export interface SYMBOL_INFO_PACKAGEW {
  /** Windows.Win32.System.Diagnostics.Debug.SYMBOL_INFOW */
  si: Uint8Array | Deno.PointerValue | null;
  /** array */
  name: Deno.PointerValue | null;
}

export const sizeofSYMBOL_INFO_PACKAGEW = 16;

export function allocSYMBOL_INFO_PACKAGEW(data?: Partial<SYMBOL_INFO_PACKAGEW>): Uint8Array {
  const buf = new Uint8Array(sizeofSYMBOL_INFO_PACKAGEW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.si !== undefined) view.setBigUint64(0, data.si === null ? 0n : util.toBigInt(util.toPointer(data.si)), true);
  // 0x08: pointer
  if (data?.name !== undefined) view.setBigUint64(8, data.name === null ? 0n : util.toBigInt(util.toPointer(data.name)), true);
  return buf;
}

export class SYMBOL_INFO_PACKAGEWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get si(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set si(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set name(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_STACK_FRAME (size: 72)
 */
export interface IMAGEHLP_STACK_FRAME {
  /** u64 */
  InstructionOffset: number | bigint;
  /** u64 */
  ReturnOffset: number | bigint;
  /** u64 */
  FrameOffset: number | bigint;
  /** u64 */
  StackOffset: number | bigint;
  /** u64 */
  BackingStoreOffset: number | bigint;
  /** u64 */
  FuncTableEntry: number | bigint;
  /** array */
  Params: Deno.PointerValue | null;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  Virtual: boolean;
  /** u32 */
  Reserved2: number;
}

export const sizeofIMAGEHLP_STACK_FRAME = 72;

export function allocIMAGEHLP_STACK_FRAME(data?: Partial<IMAGEHLP_STACK_FRAME>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGEHLP_STACK_FRAME);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.InstructionOffset !== undefined) view.setBigUint64(0, util.toBigInt(data.InstructionOffset), true);
  // 0x08: u64
  if (data?.ReturnOffset !== undefined) view.setBigUint64(8, util.toBigInt(data.ReturnOffset), true);
  // 0x10: u64
  if (data?.FrameOffset !== undefined) view.setBigUint64(16, util.toBigInt(data.FrameOffset), true);
  // 0x18: u64
  if (data?.StackOffset !== undefined) view.setBigUint64(24, util.toBigInt(data.StackOffset), true);
  // 0x20: u64
  if (data?.BackingStoreOffset !== undefined) view.setBigUint64(32, util.toBigInt(data.BackingStoreOffset), true);
  // 0x28: u64
  if (data?.FuncTableEntry !== undefined) view.setBigUint64(40, util.toBigInt(data.FuncTableEntry), true);
  // 0x30: pointer
  if (data?.Params !== undefined) view.setBigUint64(48, data.Params === null ? 0n : util.toBigInt(util.toPointer(data.Params)), true);
  // 0x38: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(56, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  // 0x40: i32
  if (data?.Virtual !== undefined) view.setInt32(64, Number(data.Virtual), true);
  // 0x44: u32
  if (data?.Reserved2 !== undefined) view.setUint32(68, Number(data.Reserved2), true);
  return buf;
}

export class IMAGEHLP_STACK_FRAMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get InstructionOffset(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get ReturnOffset(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get FrameOffset(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get StackOffset(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u64
  get BackingStoreOffset(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: u64
  get FuncTableEntry(): number | bigint {
    return this.view.getBigUint64(40, true);
  }

  // 0x30: pointer
  get Params(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: i32
  get Virtual(): number {
    return this.view.getInt32(64, true);
  }

  // 0x44: u32
  get Reserved2(): number {
    return this.view.getUint32(68, true);
  }

  // 0x00: u64
  set InstructionOffset(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set ReturnOffset(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set FrameOffset(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set StackOffset(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u64
  set BackingStoreOffset(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: u64
  set FuncTableEntry(value: number | bigint) {
    this.view.setBigUint64(40, util.toBigInt(value), true);
  }

  // 0x30: pointer
  set Params(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: i32
  set Virtual(value: number) {
    this.view.setInt32(64, value, true);
  }

  // 0x44: u32
  set Reserved2(value: number) {
    this.view.setUint32(68, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.TI_FINDCHILDREN_PARAMS (size: 16)
 */
export interface TI_FINDCHILDREN_PARAMS {
  /** u32 */
  Count: number;
  /** u32 */
  Start: number;
  /** array */
  ChildId: Deno.PointerValue | null;
}

export const sizeofTI_FINDCHILDREN_PARAMS = 16;

export function allocTI_FINDCHILDREN_PARAMS(data?: Partial<TI_FINDCHILDREN_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofTI_FINDCHILDREN_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Count !== undefined) view.setUint32(0, Number(data.Count), true);
  // 0x04: u32
  if (data?.Start !== undefined) view.setUint32(4, Number(data.Start), true);
  // 0x08: pointer
  if (data?.ChildId !== undefined) view.setBigUint64(8, data.ChildId === null ? 0n : util.toBigInt(util.toPointer(data.ChildId)), true);
  return buf;
}

export class TI_FINDCHILDREN_PARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Count(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Start(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ChildId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Count(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Start(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ChildId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_GET_TYPE_INFO_PARAMS (size: 128)
 */
export interface IMAGEHLP_GET_TYPE_INFO_PARAMS {
  /** u32 */
  SizeOfStruct: number;
  /** Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_GET_TYPE_INFO_FLAGS */
  Flags: IMAGEHLP_GET_TYPE_INFO_FLAGS;
  /** u32 */
  NumIds: number;
  /** ptr */
  TypeIds: Deno.PointerValue | Uint8Array | null;
  /** u64 */
  TagFilter: number | bigint;
  /** u32 */
  NumReqs: number;
  /** ptr */
  ReqKinds: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ReqOffsets: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ReqSizes: Deno.PointerValue | Uint8Array | null;
  /** usize */
  ReqStride: number | bigint;
  /** usize */
  BufferSize: number | bigint;
  /** ptr */
  Buffer: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  EntriesMatched: number;
  /** u32 */
  EntriesFilled: number;
  /** u64 */
  TagsFound: number | bigint;
  /** u64 */
  AllReqsValid: number | bigint;
  /** u32 */
  NumReqsValid: number;
  /** ptr */
  ReqsValid: Deno.PointerValue | Uint8Array | null;
}

export const sizeofIMAGEHLP_GET_TYPE_INFO_PARAMS = 128;

export function allocIMAGEHLP_GET_TYPE_INFO_PARAMS(data?: Partial<IMAGEHLP_GET_TYPE_INFO_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGEHLP_GET_TYPE_INFO_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.NumIds !== undefined) view.setUint32(8, Number(data.NumIds), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.TypeIds !== undefined) view.setBigUint64(16, data.TypeIds === null ? 0n : util.toBigInt(util.toPointer(data.TypeIds)), true);
  // 0x18: u64
  if (data?.TagFilter !== undefined) view.setBigUint64(24, util.toBigInt(data.TagFilter), true);
  // 0x20: u32
  if (data?.NumReqs !== undefined) view.setUint32(32, Number(data.NumReqs), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ReqKinds !== undefined) view.setBigUint64(40, data.ReqKinds === null ? 0n : util.toBigInt(util.toPointer(data.ReqKinds)), true);
  // 0x30: pointer
  if (data?.ReqOffsets !== undefined) view.setBigUint64(48, data.ReqOffsets === null ? 0n : util.toBigInt(util.toPointer(data.ReqOffsets)), true);
  // 0x38: pointer
  if (data?.ReqSizes !== undefined) view.setBigUint64(56, data.ReqSizes === null ? 0n : util.toBigInt(util.toPointer(data.ReqSizes)), true);
  // 0x40: usize
  if (data?.ReqStride !== undefined) view.setBigUint64(64, util.toBigInt(data.ReqStride), true);
  // 0x48: usize
  if (data?.BufferSize !== undefined) view.setBigUint64(72, util.toBigInt(data.BufferSize), true);
  // 0x50: pointer
  if (data?.Buffer !== undefined) view.setBigUint64(80, data.Buffer === null ? 0n : util.toBigInt(util.toPointer(data.Buffer)), true);
  // 0x58: u32
  if (data?.EntriesMatched !== undefined) view.setUint32(88, Number(data.EntriesMatched), true);
  // 0x5c: u32
  if (data?.EntriesFilled !== undefined) view.setUint32(92, Number(data.EntriesFilled), true);
  // 0x60: u64
  if (data?.TagsFound !== undefined) view.setBigUint64(96, util.toBigInt(data.TagsFound), true);
  // 0x68: u64
  if (data?.AllReqsValid !== undefined) view.setBigUint64(104, util.toBigInt(data.AllReqsValid), true);
  // 0x70: u32
  if (data?.NumReqsValid !== undefined) view.setUint32(112, Number(data.NumReqsValid), true);
  // 0x74: pad4
  // 0x78: pointer
  if (data?.ReqsValid !== undefined) view.setBigUint64(120, data.ReqsValid === null ? 0n : util.toBigInt(util.toPointer(data.ReqsValid)), true);
  return buf;
}

export class IMAGEHLP_GET_TYPE_INFO_PARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SizeOfStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get NumIds(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get TypeIds(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u64
  get TagFilter(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u32
  get NumReqs(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get ReqKinds(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get ReqOffsets(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get ReqSizes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: usize
  get ReqStride(): number | bigint {
    return this.view.getBigUint64(64, true);
  }

  // 0x48: usize
  get BufferSize(): number | bigint {
    return this.view.getBigUint64(72, true);
  }

  // 0x50: pointer
  get Buffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: u32
  get EntriesMatched(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get EntriesFilled(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: u64
  get TagsFound(): number | bigint {
    return this.view.getBigUint64(96, true);
  }

  // 0x68: u64
  get AllReqsValid(): number | bigint {
    return this.view.getBigUint64(104, true);
  }

  // 0x70: u32
  get NumReqsValid(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: pad4

  // 0x78: pointer
  get ReqsValid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(120, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set SizeOfStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set NumIds(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set TypeIds(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u64
  set TagFilter(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u32
  set NumReqs(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set ReqKinds(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set ReqOffsets(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set ReqSizes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: usize
  set ReqStride(value: number | bigint) {
    this.view.setBigUint64(64, util.toBigInt(value), true);
  }

  // 0x48: usize
  set BufferSize(value: number | bigint) {
    this.view.setBigUint64(72, util.toBigInt(value), true);
  }

  // 0x50: pointer
  set Buffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x58: u32
  set EntriesMatched(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set EntriesFilled(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: u64
  set TagsFound(value: number | bigint) {
    this.view.setBigUint64(96, util.toBigInt(value), true);
  }

  // 0x68: u64
  set AllReqsValid(value: number | bigint) {
    this.view.setBigUint64(104, util.toBigInt(value), true);
  }

  // 0x70: u32
  set NumReqsValid(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: pad4

  // 0x78: pointer
  set ReqsValid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(120, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.SYMSRV_INDEX_INFO (size: 64)
 */
export interface SYMSRV_INDEX_INFO {
  /** u32 */
  sizeofstruct: number;
  /** array */
  file: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  stripped: boolean;
  /** u32 */
  timestamp: number;
  /** u32 */
  size: number;
  /** array */
  dbgfile: Deno.PointerValue | null;
  /** array */
  pdbfile: Deno.PointerValue | null;
  /** System.Guid */
  guid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  sig: number;
  /** u32 */
  age: number;
}

export const sizeofSYMSRV_INDEX_INFO = 64;

export function allocSYMSRV_INDEX_INFO(data?: Partial<SYMSRV_INDEX_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSYMSRV_INDEX_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sizeofstruct !== undefined) view.setUint32(0, Number(data.sizeofstruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.file !== undefined) view.setBigUint64(8, data.file === null ? 0n : util.toBigInt(util.toPointer(data.file)), true);
  // 0x10: i32
  if (data?.stripped !== undefined) view.setInt32(16, Number(data.stripped), true);
  // 0x14: u32
  if (data?.timestamp !== undefined) view.setUint32(20, Number(data.timestamp), true);
  // 0x18: u32
  if (data?.size !== undefined) view.setUint32(24, Number(data.size), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.dbgfile !== undefined) view.setBigUint64(32, data.dbgfile === null ? 0n : util.toBigInt(util.toPointer(data.dbgfile)), true);
  // 0x28: pointer
  if (data?.pdbfile !== undefined) view.setBigUint64(40, data.pdbfile === null ? 0n : util.toBigInt(util.toPointer(data.pdbfile)), true);
  // 0x30: pointer
  if (data?.guid !== undefined) view.setBigUint64(48, data.guid === null ? 0n : util.toBigInt(util.toPointer(data.guid)), true);
  // 0x38: u32
  if (data?.sig !== undefined) view.setUint32(56, Number(data.sig), true);
  // 0x3c: u32
  if (data?.age !== undefined) view.setUint32(60, Number(data.age), true);
  return buf;
}

export class SYMSRV_INDEX_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get sizeofstruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get file(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i32
  get stripped(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u32
  get timestamp(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get size(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get dbgfile(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get pdbfile(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get guid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get sig(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get age(): number {
    return this.view.getUint32(60, true);
  }

  // 0x00: u32
  set sizeofstruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set file(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: i32
  set stripped(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u32
  set timestamp(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set size(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set dbgfile(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set pdbfile(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set guid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set sig(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set age(value: number) {
    this.view.setUint32(60, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.SYMSRV_INDEX_INFOW (size: 64)
 */
export interface SYMSRV_INDEX_INFOW {
  /** u32 */
  sizeofstruct: number;
  /** array */
  file: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  stripped: boolean;
  /** u32 */
  timestamp: number;
  /** u32 */
  size: number;
  /** array */
  dbgfile: Deno.PointerValue | null;
  /** array */
  pdbfile: Deno.PointerValue | null;
  /** System.Guid */
  guid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  sig: number;
  /** u32 */
  age: number;
}

export const sizeofSYMSRV_INDEX_INFOW = 64;

export function allocSYMSRV_INDEX_INFOW(data?: Partial<SYMSRV_INDEX_INFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofSYMSRV_INDEX_INFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sizeofstruct !== undefined) view.setUint32(0, Number(data.sizeofstruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.file !== undefined) view.setBigUint64(8, data.file === null ? 0n : util.toBigInt(util.toPointer(data.file)), true);
  // 0x10: i32
  if (data?.stripped !== undefined) view.setInt32(16, Number(data.stripped), true);
  // 0x14: u32
  if (data?.timestamp !== undefined) view.setUint32(20, Number(data.timestamp), true);
  // 0x18: u32
  if (data?.size !== undefined) view.setUint32(24, Number(data.size), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.dbgfile !== undefined) view.setBigUint64(32, data.dbgfile === null ? 0n : util.toBigInt(util.toPointer(data.dbgfile)), true);
  // 0x28: pointer
  if (data?.pdbfile !== undefined) view.setBigUint64(40, data.pdbfile === null ? 0n : util.toBigInt(util.toPointer(data.pdbfile)), true);
  // 0x30: pointer
  if (data?.guid !== undefined) view.setBigUint64(48, data.guid === null ? 0n : util.toBigInt(util.toPointer(data.guid)), true);
  // 0x38: u32
  if (data?.sig !== undefined) view.setUint32(56, Number(data.sig), true);
  // 0x3c: u32
  if (data?.age !== undefined) view.setUint32(60, Number(data.age), true);
  return buf;
}

export class SYMSRV_INDEX_INFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get sizeofstruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get file(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i32
  get stripped(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u32
  get timestamp(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get size(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get dbgfile(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get pdbfile(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get guid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get sig(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get age(): number {
    return this.view.getUint32(60, true);
  }

  // 0x00: u32
  set sizeofstruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set file(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: i32
  set stripped(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u32
  set timestamp(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set size(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set dbgfile(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set pdbfile(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set guid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set sig(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set age(value: number) {
    this.view.setUint32(60, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.SYMSRV_EXTENDED_OUTPUT_DATA (size: 16)
 */
export interface SYMSRV_EXTENDED_OUTPUT_DATA {
  /** u32 */
  sizeOfStruct: number;
  /** u32 */
  version: number;
  /** array */
  filePtrMsg: Deno.PointerValue | null;
}

export const sizeofSYMSRV_EXTENDED_OUTPUT_DATA = 16;

export function allocSYMSRV_EXTENDED_OUTPUT_DATA(data?: Partial<SYMSRV_EXTENDED_OUTPUT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSYMSRV_EXTENDED_OUTPUT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sizeOfStruct !== undefined) view.setUint32(0, Number(data.sizeOfStruct), true);
  // 0x04: u32
  if (data?.version !== undefined) view.setUint32(4, Number(data.version), true);
  // 0x08: pointer
  if (data?.filePtrMsg !== undefined) view.setBigUint64(8, data.filePtrMsg === null ? 0n : util.toBigInt(util.toPointer(data.filePtrMsg)), true);
  return buf;
}

export class SYMSRV_EXTENDED_OUTPUT_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get sizeOfStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get version(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get filePtrMsg(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set sizeOfStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set version(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set filePtrMsg(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DBGHELP_DATA_REPORT_STRUCT (size: 16)
 */
export interface DBGHELP_DATA_REPORT_STRUCT {
  /** Windows.Win32.Foundation.PWSTR */
  pBinPathNonExist: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pSymbolPathNonExist: string | null | Uint8Array | Uint16Array;
}

export const sizeofDBGHELP_DATA_REPORT_STRUCT = 16;

export function allocDBGHELP_DATA_REPORT_STRUCT(data?: Partial<DBGHELP_DATA_REPORT_STRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofDBGHELP_DATA_REPORT_STRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pBinPathNonExist !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pBinPathNonExist);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pSymbolPathNonExist !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pSymbolPathNonExist);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class DBGHELP_DATA_REPORT_STRUCTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pBinPathNonExist(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get pSymbolPathNonExist(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pBinPathNonExist(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set pSymbolPathNonExist(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.TEXT_DOCUMENT_ARRAY (size: 16)
 */
export interface TEXT_DOCUMENT_ARRAY {
  /** u32 */
  dwCount: number;
  /** ptr */
  Members: Deno.PointerValue | Uint8Array | null;
}

export const sizeofTEXT_DOCUMENT_ARRAY = 16;

export function allocTEXT_DOCUMENT_ARRAY(data?: Partial<TEXT_DOCUMENT_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofTEXT_DOCUMENT_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwCount !== undefined) view.setUint32(0, Number(data.dwCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Members !== undefined) view.setBigUint64(8, data.Members === null ? 0n : util.toBigInt(util.toPointer(data.Members)), true);
  return buf;
}

export class TEXT_DOCUMENT_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Members(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Members(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.JsDebugPropertyInfo (size: 40)
 */
export interface JsDebugPropertyInfo {
  /** Windows.Win32.Foundation.BSTR */
  name: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BSTR */
  type: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BSTR */
  value: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BSTR */
  fullName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.JS_PROPERTY_ATTRIBUTES */
  attr: JS_PROPERTY_ATTRIBUTES;
}

export const sizeofJsDebugPropertyInfo = 40;

export function allocJsDebugPropertyInfo(data?: Partial<JsDebugPropertyInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofJsDebugPropertyInfo);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.name !== undefined) view.setBigUint64(0, data.name === null ? 0n : util.toBigInt(util.toPointer(data.name)), true);
  // 0x08: pointer
  if (data?.type !== undefined) view.setBigUint64(8, data.type === null ? 0n : util.toBigInt(util.toPointer(data.type)), true);
  // 0x10: pointer
  if (data?.value !== undefined) view.setBigUint64(16, data.value === null ? 0n : util.toBigInt(util.toPointer(data.value)), true);
  // 0x18: pointer
  if (data?.fullName !== undefined) view.setBigUint64(24, data.fullName === null ? 0n : util.toBigInt(util.toPointer(data.fullName)), true);
  // 0x20: i32
  if (data?.attr !== undefined) view.setInt32(32, Number(data.attr), true);
  // 0x24: pad4
  return buf;
}

export class JsDebugPropertyInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get type(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get value(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get fullName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: i32
  get attr(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x00: pointer
  set name(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set type(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set value(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set fullName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: i32
  set attr(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.JS_NATIVE_FRAME (size: 32)
 */
export interface JS_NATIVE_FRAME {
  /** u64 */
  InstructionOffset: number | bigint;
  /** u64 */
  ReturnOffset: number | bigint;
  /** u64 */
  FrameOffset: number | bigint;
  /** u64 */
  StackOffset: number | bigint;
}

export const sizeofJS_NATIVE_FRAME = 32;

export function allocJS_NATIVE_FRAME(data?: Partial<JS_NATIVE_FRAME>): Uint8Array {
  const buf = new Uint8Array(sizeofJS_NATIVE_FRAME);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.InstructionOffset !== undefined) view.setBigUint64(0, util.toBigInt(data.InstructionOffset), true);
  // 0x08: u64
  if (data?.ReturnOffset !== undefined) view.setBigUint64(8, util.toBigInt(data.ReturnOffset), true);
  // 0x10: u64
  if (data?.FrameOffset !== undefined) view.setBigUint64(16, util.toBigInt(data.FrameOffset), true);
  // 0x18: u64
  if (data?.StackOffset !== undefined) view.setBigUint64(24, util.toBigInt(data.StackOffset), true);
  return buf;
}

export class JS_NATIVE_FRAMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get InstructionOffset(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get ReturnOffset(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get FrameOffset(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get StackOffset(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x00: u64
  set InstructionOffset(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set ReturnOffset(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set FrameOffset(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set StackOffset(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.PHYSICAL_MEMORY_RUN32 (size: 8)
 */
export interface PHYSICAL_MEMORY_RUN32 {
  /** u32 */
  BasePage: number;
  /** u32 */
  PageCount: number;
}

export const sizeofPHYSICAL_MEMORY_RUN32 = 8;

export function allocPHYSICAL_MEMORY_RUN32(data?: Partial<PHYSICAL_MEMORY_RUN32>): Uint8Array {
  const buf = new Uint8Array(sizeofPHYSICAL_MEMORY_RUN32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BasePage !== undefined) view.setUint32(0, Number(data.BasePage), true);
  // 0x04: u32
  if (data?.PageCount !== undefined) view.setUint32(4, Number(data.PageCount), true);
  return buf;
}

export class PHYSICAL_MEMORY_RUN32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get BasePage(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get PageCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set BasePage(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set PageCount(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.PHYSICAL_MEMORY_DESCRIPTOR32 (size: 16)
 */
export interface PHYSICAL_MEMORY_DESCRIPTOR32 {
  /** u32 */
  NumberOfRuns: number;
  /** u32 */
  NumberOfPages: number;
  /** array */
  Run: Deno.PointerValue | null;
}

export const sizeofPHYSICAL_MEMORY_DESCRIPTOR32 = 16;

export function allocPHYSICAL_MEMORY_DESCRIPTOR32(data?: Partial<PHYSICAL_MEMORY_DESCRIPTOR32>): Uint8Array {
  const buf = new Uint8Array(sizeofPHYSICAL_MEMORY_DESCRIPTOR32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumberOfRuns !== undefined) view.setUint32(0, Number(data.NumberOfRuns), true);
  // 0x04: u32
  if (data?.NumberOfPages !== undefined) view.setUint32(4, Number(data.NumberOfPages), true);
  // 0x08: pointer
  if (data?.Run !== undefined) view.setBigUint64(8, data.Run === null ? 0n : util.toBigInt(util.toPointer(data.Run)), true);
  return buf;
}

export class PHYSICAL_MEMORY_DESCRIPTOR32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumberOfRuns(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NumberOfPages(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Run(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set NumberOfRuns(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NumberOfPages(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Run(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.PHYSICAL_MEMORY_RUN64 (size: 16)
 */
export interface PHYSICAL_MEMORY_RUN64 {
  /** u64 */
  BasePage: number | bigint;
  /** u64 */
  PageCount: number | bigint;
}

export const sizeofPHYSICAL_MEMORY_RUN64 = 16;

export function allocPHYSICAL_MEMORY_RUN64(data?: Partial<PHYSICAL_MEMORY_RUN64>): Uint8Array {
  const buf = new Uint8Array(sizeofPHYSICAL_MEMORY_RUN64);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.BasePage !== undefined) view.setBigUint64(0, util.toBigInt(data.BasePage), true);
  // 0x08: u64
  if (data?.PageCount !== undefined) view.setBigUint64(8, util.toBigInt(data.PageCount), true);
  return buf;
}

export class PHYSICAL_MEMORY_RUN64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get BasePage(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get PageCount(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u64
  set BasePage(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set PageCount(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.PHYSICAL_MEMORY_DESCRIPTOR64 (size: 24)
 */
export interface PHYSICAL_MEMORY_DESCRIPTOR64 {
  /** u32 */
  NumberOfRuns: number;
  /** u64 */
  NumberOfPages: number | bigint;
  /** array */
  Run: Deno.PointerValue | null;
}

export const sizeofPHYSICAL_MEMORY_DESCRIPTOR64 = 24;

export function allocPHYSICAL_MEMORY_DESCRIPTOR64(data?: Partial<PHYSICAL_MEMORY_DESCRIPTOR64>): Uint8Array {
  const buf = new Uint8Array(sizeofPHYSICAL_MEMORY_DESCRIPTOR64);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumberOfRuns !== undefined) view.setUint32(0, Number(data.NumberOfRuns), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.NumberOfPages !== undefined) view.setBigUint64(8, util.toBigInt(data.NumberOfPages), true);
  // 0x10: pointer
  if (data?.Run !== undefined) view.setBigUint64(16, data.Run === null ? 0n : util.toBigInt(util.toPointer(data.Run)), true);
  return buf;
}

export class PHYSICAL_MEMORY_DESCRIPTOR64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumberOfRuns(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: u64
  get NumberOfPages(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: pointer
  get Run(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set NumberOfRuns(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: u64
  set NumberOfPages(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: pointer
  set Run(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DUMP_FILE_ATTRIBUTES (size: 16)
 */
export interface DUMP_FILE_ATTRIBUTES {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Attributes: number;
}

export const sizeofDUMP_FILE_ATTRIBUTES = 16;

export function allocDUMP_FILE_ATTRIBUTES(data?: Partial<DUMP_FILE_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofDUMP_FILE_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u32
  if (data?.Attributes !== undefined) view.setUint32(8, Number(data.Attributes), true);
  // 0x0c: pad4
  return buf;
}

export class DUMP_FILE_ATTRIBUTESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Attributes(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set Attributes(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null | Uint8Array | Uint16Array;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class _u_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwValue(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pwszName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwValue(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pwszName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Foundation.LARGE_INTEGER (size: 24)
 */
export interface LARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  QuadPart: number | bigint;
}

export const sizeofLARGE_INTEGER = 24;

export function allocLARGE_INTEGER(data?: Partial<LARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofLARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : util.toBigInt(util.toPointer(data.u)), true);
  // 0x10: i64
  if (data?.QuadPart !== undefined) view.setBigInt64(16, util.toBigInt(data.QuadPart), true);
  return buf;
}

export class LARGE_INTEGERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get u(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i64
  get QuadPart(): number | bigint {
    return this.view.getBigInt64(16, true);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set u(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: i64
  set QuadPart(value: number | bigint) {
    this.view.setBigInt64(16, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DUMP_HEADER32 (size: 216)
 */
export interface DUMP_HEADER32 {
  /** u32 */
  Signature: number;
  /** u32 */
  ValidDump: number;
  /** u32 */
  MajorVersion: number;
  /** u32 */
  MinorVersion: number;
  /** u32 */
  DirectoryTableBase: number;
  /** u32 */
  PfnDataBase: number;
  /** u32 */
  PsLoadedModuleList: number;
  /** u32 */
  PsActiveProcessHead: number;
  /** u32 */
  MachineImageType: number;
  /** u32 */
  NumberProcessors: number;
  /** u32 */
  BugCheckCode: number;
  /** u32 */
  BugCheckParameter1: number;
  /** u32 */
  BugCheckParameter2: number;
  /** u32 */
  BugCheckParameter3: number;
  /** u32 */
  BugCheckParameter4: number;
  /** array */
  VersionUser: Deno.PointerValue | null;
  /** u8 */
  PaeEnabled: number;
  /** u8 */
  KdSecondaryVersion: number;
  /** array */
  Spare3: Deno.PointerValue | null;
  /** u32 */
  KdDebuggerDataBlock: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  ContextRecord: Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD32 */
  Exception: Uint8Array | Deno.PointerValue | null;
  /** array */
  Comment: Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.DUMP_FILE_ATTRIBUTES */
  Attributes: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  BootId: number;
  /** array */
  _reserved0: Deno.PointerValue | null;
  /** u32 */
  DumpType: number;
  /** u32 */
  MiniDumpFields: number;
  /** u32 */
  SecondaryDataState: number;
  /** u32 */
  ProductType: number;
  /** u32 */
  SuiteMask: number;
  /** u32 */
  WriterStatus: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  RequiredDumpSpace: Uint8Array | Deno.PointerValue | null;
  /** array */
  _reserved2: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  SystemUpTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  SystemTime: Uint8Array | Deno.PointerValue | null;
  /** array */
  _reserved3: Deno.PointerValue | null;
}

export const sizeofDUMP_HEADER32 = 216;

export function allocDUMP_HEADER32(data?: Partial<DUMP_HEADER32>): Uint8Array {
  const buf = new Uint8Array(sizeofDUMP_HEADER32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Signature !== undefined) view.setUint32(0, Number(data.Signature), true);
  // 0x04: u32
  if (data?.ValidDump !== undefined) view.setUint32(4, Number(data.ValidDump), true);
  // 0x08: u32
  if (data?.MajorVersion !== undefined) view.setUint32(8, Number(data.MajorVersion), true);
  // 0x0c: u32
  if (data?.MinorVersion !== undefined) view.setUint32(12, Number(data.MinorVersion), true);
  // 0x10: u32
  if (data?.DirectoryTableBase !== undefined) view.setUint32(16, Number(data.DirectoryTableBase), true);
  // 0x14: u32
  if (data?.PfnDataBase !== undefined) view.setUint32(20, Number(data.PfnDataBase), true);
  // 0x18: u32
  if (data?.PsLoadedModuleList !== undefined) view.setUint32(24, Number(data.PsLoadedModuleList), true);
  // 0x1c: u32
  if (data?.PsActiveProcessHead !== undefined) view.setUint32(28, Number(data.PsActiveProcessHead), true);
  // 0x20: u32
  if (data?.MachineImageType !== undefined) view.setUint32(32, Number(data.MachineImageType), true);
  // 0x24: u32
  if (data?.NumberProcessors !== undefined) view.setUint32(36, Number(data.NumberProcessors), true);
  // 0x28: u32
  if (data?.BugCheckCode !== undefined) view.setUint32(40, Number(data.BugCheckCode), true);
  // 0x2c: u32
  if (data?.BugCheckParameter1 !== undefined) view.setUint32(44, Number(data.BugCheckParameter1), true);
  // 0x30: u32
  if (data?.BugCheckParameter2 !== undefined) view.setUint32(48, Number(data.BugCheckParameter2), true);
  // 0x34: u32
  if (data?.BugCheckParameter3 !== undefined) view.setUint32(52, Number(data.BugCheckParameter3), true);
  // 0x38: u32
  if (data?.BugCheckParameter4 !== undefined) view.setUint32(56, Number(data.BugCheckParameter4), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.VersionUser !== undefined) view.setBigUint64(64, data.VersionUser === null ? 0n : util.toBigInt(util.toPointer(data.VersionUser)), true);
  // 0x48: u8
  if (data?.PaeEnabled !== undefined) view.setUint8(72, Number(data.PaeEnabled));
  // 0x49: u8
  if (data?.KdSecondaryVersion !== undefined) view.setUint8(73, Number(data.KdSecondaryVersion));
  // 0x4a: pad6
  // 0x50: pointer
  if (data?.Spare3 !== undefined) view.setBigUint64(80, data.Spare3 === null ? 0n : util.toBigInt(util.toPointer(data.Spare3)), true);
  // 0x58: u32
  if (data?.KdDebuggerDataBlock !== undefined) view.setUint32(88, Number(data.KdDebuggerDataBlock), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(96, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x68: pointer
  if (data?.ContextRecord !== undefined) view.setBigUint64(104, data.ContextRecord === null ? 0n : util.toBigInt(util.toPointer(data.ContextRecord)), true);
  // 0x70: pointer
  if (data?.Exception !== undefined) view.setBigUint64(112, data.Exception === null ? 0n : util.toBigInt(util.toPointer(data.Exception)), true);
  // 0x78: pointer
  if (data?.Comment !== undefined) view.setBigUint64(120, data.Comment === null ? 0n : util.toBigInt(util.toPointer(data.Comment)), true);
  // 0x80: pointer
  if (data?.Attributes !== undefined) view.setBigUint64(128, data.Attributes === null ? 0n : util.toBigInt(util.toPointer(data.Attributes)), true);
  // 0x88: u32
  if (data?.BootId !== undefined) view.setUint32(136, Number(data.BootId), true);
  // 0x8c: pad4
  // 0x90: pointer
  if (data?._reserved0 !== undefined) view.setBigUint64(144, data._reserved0 === null ? 0n : util.toBigInt(util.toPointer(data._reserved0)), true);
  // 0x98: u32
  if (data?.DumpType !== undefined) view.setUint32(152, Number(data.DumpType), true);
  // 0x9c: u32
  if (data?.MiniDumpFields !== undefined) view.setUint32(156, Number(data.MiniDumpFields), true);
  // 0xa0: u32
  if (data?.SecondaryDataState !== undefined) view.setUint32(160, Number(data.SecondaryDataState), true);
  // 0xa4: u32
  if (data?.ProductType !== undefined) view.setUint32(164, Number(data.ProductType), true);
  // 0xa8: u32
  if (data?.SuiteMask !== undefined) view.setUint32(168, Number(data.SuiteMask), true);
  // 0xac: u32
  if (data?.WriterStatus !== undefined) view.setUint32(172, Number(data.WriterStatus), true);
  // 0xb0: pointer
  if (data?.RequiredDumpSpace !== undefined) view.setBigUint64(176, data.RequiredDumpSpace === null ? 0n : util.toBigInt(util.toPointer(data.RequiredDumpSpace)), true);
  // 0xb8: pointer
  if (data?._reserved2 !== undefined) view.setBigUint64(184, data._reserved2 === null ? 0n : util.toBigInt(util.toPointer(data._reserved2)), true);
  // 0xc0: pointer
  if (data?.SystemUpTime !== undefined) view.setBigUint64(192, data.SystemUpTime === null ? 0n : util.toBigInt(util.toPointer(data.SystemUpTime)), true);
  // 0xc8: pointer
  if (data?.SystemTime !== undefined) view.setBigUint64(200, data.SystemTime === null ? 0n : util.toBigInt(util.toPointer(data.SystemTime)), true);
  // 0xd0: pointer
  if (data?._reserved3 !== undefined) view.setBigUint64(208, data._reserved3 === null ? 0n : util.toBigInt(util.toPointer(data._reserved3)), true);
  return buf;
}

export class DUMP_HEADER32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Signature(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ValidDump(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get MajorVersion(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get MinorVersion(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get DirectoryTableBase(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get PfnDataBase(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get PsLoadedModuleList(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get PsActiveProcessHead(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get MachineImageType(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get NumberProcessors(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get BugCheckCode(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get BugCheckParameter1(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get BugCheckParameter2(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get BugCheckParameter3(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get BugCheckParameter4(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get VersionUser(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: u8
  get PaeEnabled(): number {
    return this.view.getUint8(72);
  }

  // 0x49: u8
  get KdSecondaryVersion(): number {
    return this.view.getUint8(73);
  }

  // 0x4a: pad6

  // 0x50: pointer
  get Spare3(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: u32
  get KdDebuggerDataBlock(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: pointer
  get ContextRecord(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: pointer
  get Exception(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(112, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x78: pointer
  get Comment(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(120, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x80: pointer
  get Attributes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(128, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x88: u32
  get BootId(): number {
    return this.view.getUint32(136, true);
  }

  // 0x8c: pad4

  // 0x90: pointer
  get _reserved0(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(144, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x98: u32
  get DumpType(): number {
    return this.view.getUint32(152, true);
  }

  // 0x9c: u32
  get MiniDumpFields(): number {
    return this.view.getUint32(156, true);
  }

  // 0xa0: u32
  get SecondaryDataState(): number {
    return this.view.getUint32(160, true);
  }

  // 0xa4: u32
  get ProductType(): number {
    return this.view.getUint32(164, true);
  }

  // 0xa8: u32
  get SuiteMask(): number {
    return this.view.getUint32(168, true);
  }

  // 0xac: u32
  get WriterStatus(): number {
    return this.view.getUint32(172, true);
  }

  // 0xb0: pointer
  get RequiredDumpSpace(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(176, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xb8: pointer
  get _reserved2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(184, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xc0: pointer
  get SystemUpTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(192, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xc8: pointer
  get SystemTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(200, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xd0: pointer
  get _reserved3(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(208, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Signature(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ValidDump(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set MajorVersion(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set MinorVersion(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set DirectoryTableBase(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set PfnDataBase(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set PsLoadedModuleList(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set PsActiveProcessHead(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set MachineImageType(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set NumberProcessors(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set BugCheckCode(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set BugCheckParameter1(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set BugCheckParameter2(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set BugCheckParameter3(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set BugCheckParameter4(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set VersionUser(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: u8
  set PaeEnabled(value: number) {
    this.view.setUint8(72, value);
  }

  // 0x49: u8
  set KdSecondaryVersion(value: number) {
    this.view.setUint8(73, value);
  }

  // 0x4a: pad6

  // 0x50: pointer
  set Spare3(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x58: u32
  set KdDebuggerDataBlock(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x68: pointer
  set ContextRecord(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x70: pointer
  set Exception(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(112, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x78: pointer
  set Comment(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(120, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x80: pointer
  set Attributes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(128, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x88: u32
  set BootId(value: number) {
    this.view.setUint32(136, value, true);
  }

  // 0x8c: pad4

  // 0x90: pointer
  set _reserved0(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(144, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x98: u32
  set DumpType(value: number) {
    this.view.setUint32(152, value, true);
  }

  // 0x9c: u32
  set MiniDumpFields(value: number) {
    this.view.setUint32(156, value, true);
  }

  // 0xa0: u32
  set SecondaryDataState(value: number) {
    this.view.setUint32(160, value, true);
  }

  // 0xa4: u32
  set ProductType(value: number) {
    this.view.setUint32(164, value, true);
  }

  // 0xa8: u32
  set SuiteMask(value: number) {
    this.view.setUint32(168, value, true);
  }

  // 0xac: u32
  set WriterStatus(value: number) {
    this.view.setUint32(172, value, true);
  }

  // 0xb0: pointer
  set RequiredDumpSpace(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(176, util.toBigInt(util.toPointer(value)), true);
  }

  // 0xb8: pointer
  set _reserved2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(184, util.toBigInt(util.toPointer(value)), true);
  }

  // 0xc0: pointer
  set SystemUpTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(192, util.toBigInt(util.toPointer(value)), true);
  }

  // 0xc8: pointer
  set SystemTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(200, util.toBigInt(util.toPointer(value)), true);
  }

  // 0xd0: pointer
  set _reserved3(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(208, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.DUMP_HEADER64 (size: 232)
 */
export interface DUMP_HEADER64 {
  /** u32 */
  Signature: number;
  /** u32 */
  ValidDump: number;
  /** u32 */
  MajorVersion: number;
  /** u32 */
  MinorVersion: number;
  /** u64 */
  DirectoryTableBase: number | bigint;
  /** u64 */
  PfnDataBase: number | bigint;
  /** u64 */
  PsLoadedModuleList: number | bigint;
  /** u64 */
  PsActiveProcessHead: number | bigint;
  /** u32 */
  MachineImageType: number;
  /** u32 */
  NumberProcessors: number;
  /** u32 */
  BugCheckCode: number;
  /** u64 */
  BugCheckParameter1: number | bigint;
  /** u64 */
  BugCheckParameter2: number | bigint;
  /** u64 */
  BugCheckParameter3: number | bigint;
  /** u64 */
  BugCheckParameter4: number | bigint;
  /** array */
  VersionUser: Deno.PointerValue | null;
  /** u64 */
  KdDebuggerDataBlock: number | bigint;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  ContextRecord: Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD64 */
  Exception: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  DumpType: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  RequiredDumpSpace: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  SystemTime: Uint8Array | Deno.PointerValue | null;
  /** array */
  Comment: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  SystemUpTime: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  MiniDumpFields: number;
  /** u32 */
  SecondaryDataState: number;
  /** u32 */
  ProductType: number;
  /** u32 */
  SuiteMask: number;
  /** u32 */
  WriterStatus: number;
  /** u8 */
  Unused1: number;
  /** u8 */
  KdSecondaryVersion: number;
  /** array */
  Unused: Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.DUMP_FILE_ATTRIBUTES */
  Attributes: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  BootId: number;
  /** array */
  _reserved0: Deno.PointerValue | null;
}

export const sizeofDUMP_HEADER64 = 232;

export function allocDUMP_HEADER64(data?: Partial<DUMP_HEADER64>): Uint8Array {
  const buf = new Uint8Array(sizeofDUMP_HEADER64);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Signature !== undefined) view.setUint32(0, Number(data.Signature), true);
  // 0x04: u32
  if (data?.ValidDump !== undefined) view.setUint32(4, Number(data.ValidDump), true);
  // 0x08: u32
  if (data?.MajorVersion !== undefined) view.setUint32(8, Number(data.MajorVersion), true);
  // 0x0c: u32
  if (data?.MinorVersion !== undefined) view.setUint32(12, Number(data.MinorVersion), true);
  // 0x10: u64
  if (data?.DirectoryTableBase !== undefined) view.setBigUint64(16, util.toBigInt(data.DirectoryTableBase), true);
  // 0x18: u64
  if (data?.PfnDataBase !== undefined) view.setBigUint64(24, util.toBigInt(data.PfnDataBase), true);
  // 0x20: u64
  if (data?.PsLoadedModuleList !== undefined) view.setBigUint64(32, util.toBigInt(data.PsLoadedModuleList), true);
  // 0x28: u64
  if (data?.PsActiveProcessHead !== undefined) view.setBigUint64(40, util.toBigInt(data.PsActiveProcessHead), true);
  // 0x30: u32
  if (data?.MachineImageType !== undefined) view.setUint32(48, Number(data.MachineImageType), true);
  // 0x34: u32
  if (data?.NumberProcessors !== undefined) view.setUint32(52, Number(data.NumberProcessors), true);
  // 0x38: u32
  if (data?.BugCheckCode !== undefined) view.setUint32(56, Number(data.BugCheckCode), true);
  // 0x3c: pad4
  // 0x40: u64
  if (data?.BugCheckParameter1 !== undefined) view.setBigUint64(64, util.toBigInt(data.BugCheckParameter1), true);
  // 0x48: u64
  if (data?.BugCheckParameter2 !== undefined) view.setBigUint64(72, util.toBigInt(data.BugCheckParameter2), true);
  // 0x50: u64
  if (data?.BugCheckParameter3 !== undefined) view.setBigUint64(80, util.toBigInt(data.BugCheckParameter3), true);
  // 0x58: u64
  if (data?.BugCheckParameter4 !== undefined) view.setBigUint64(88, util.toBigInt(data.BugCheckParameter4), true);
  // 0x60: pointer
  if (data?.VersionUser !== undefined) view.setBigUint64(96, data.VersionUser === null ? 0n : util.toBigInt(util.toPointer(data.VersionUser)), true);
  // 0x68: u64
  if (data?.KdDebuggerDataBlock !== undefined) view.setBigUint64(104, util.toBigInt(data.KdDebuggerDataBlock), true);
  // 0x70: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(112, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x78: pointer
  if (data?.ContextRecord !== undefined) view.setBigUint64(120, data.ContextRecord === null ? 0n : util.toBigInt(util.toPointer(data.ContextRecord)), true);
  // 0x80: pointer
  if (data?.Exception !== undefined) view.setBigUint64(128, data.Exception === null ? 0n : util.toBigInt(util.toPointer(data.Exception)), true);
  // 0x88: u32
  if (data?.DumpType !== undefined) view.setUint32(136, Number(data.DumpType), true);
  // 0x8c: pad4
  // 0x90: pointer
  if (data?.RequiredDumpSpace !== undefined) view.setBigUint64(144, data.RequiredDumpSpace === null ? 0n : util.toBigInt(util.toPointer(data.RequiredDumpSpace)), true);
  // 0x98: pointer
  if (data?.SystemTime !== undefined) view.setBigUint64(152, data.SystemTime === null ? 0n : util.toBigInt(util.toPointer(data.SystemTime)), true);
  // 0xa0: pointer
  if (data?.Comment !== undefined) view.setBigUint64(160, data.Comment === null ? 0n : util.toBigInt(util.toPointer(data.Comment)), true);
  // 0xa8: pointer
  if (data?.SystemUpTime !== undefined) view.setBigUint64(168, data.SystemUpTime === null ? 0n : util.toBigInt(util.toPointer(data.SystemUpTime)), true);
  // 0xb0: u32
  if (data?.MiniDumpFields !== undefined) view.setUint32(176, Number(data.MiniDumpFields), true);
  // 0xb4: u32
  if (data?.SecondaryDataState !== undefined) view.setUint32(180, Number(data.SecondaryDataState), true);
  // 0xb8: u32
  if (data?.ProductType !== undefined) view.setUint32(184, Number(data.ProductType), true);
  // 0xbc: u32
  if (data?.SuiteMask !== undefined) view.setUint32(188, Number(data.SuiteMask), true);
  // 0xc0: u32
  if (data?.WriterStatus !== undefined) view.setUint32(192, Number(data.WriterStatus), true);
  // 0xc4: u8
  if (data?.Unused1 !== undefined) view.setUint8(196, Number(data.Unused1));
  // 0xc5: u8
  if (data?.KdSecondaryVersion !== undefined) view.setUint8(197, Number(data.KdSecondaryVersion));
  // 0xc6: pad2
  // 0xc8: pointer
  if (data?.Unused !== undefined) view.setBigUint64(200, data.Unused === null ? 0n : util.toBigInt(util.toPointer(data.Unused)), true);
  // 0xd0: pointer
  if (data?.Attributes !== undefined) view.setBigUint64(208, data.Attributes === null ? 0n : util.toBigInt(util.toPointer(data.Attributes)), true);
  // 0xd8: u32
  if (data?.BootId !== undefined) view.setUint32(216, Number(data.BootId), true);
  // 0xdc: pad4
  // 0xe0: pointer
  if (data?._reserved0 !== undefined) view.setBigUint64(224, data._reserved0 === null ? 0n : util.toBigInt(util.toPointer(data._reserved0)), true);
  return buf;
}

export class DUMP_HEADER64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Signature(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ValidDump(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get MajorVersion(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get MinorVersion(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u64
  get DirectoryTableBase(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get PfnDataBase(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u64
  get PsLoadedModuleList(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: u64
  get PsActiveProcessHead(): number | bigint {
    return this.view.getBigUint64(40, true);
  }

  // 0x30: u32
  get MachineImageType(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get NumberProcessors(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get BugCheckCode(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: u64
  get BugCheckParameter1(): number | bigint {
    return this.view.getBigUint64(64, true);
  }

  // 0x48: u64
  get BugCheckParameter2(): number | bigint {
    return this.view.getBigUint64(72, true);
  }

  // 0x50: u64
  get BugCheckParameter3(): number | bigint {
    return this.view.getBigUint64(80, true);
  }

  // 0x58: u64
  get BugCheckParameter4(): number | bigint {
    return this.view.getBigUint64(88, true);
  }

  // 0x60: pointer
  get VersionUser(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: u64
  get KdDebuggerDataBlock(): number | bigint {
    return this.view.getBigUint64(104, true);
  }

  // 0x70: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(112, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x78: pointer
  get ContextRecord(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(120, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x80: pointer
  get Exception(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(128, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x88: u32
  get DumpType(): number {
    return this.view.getUint32(136, true);
  }

  // 0x8c: pad4

  // 0x90: pointer
  get RequiredDumpSpace(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(144, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x98: pointer
  get SystemTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(152, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xa0: pointer
  get Comment(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(160, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xa8: pointer
  get SystemUpTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(168, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xb0: u32
  get MiniDumpFields(): number {
    return this.view.getUint32(176, true);
  }

  // 0xb4: u32
  get SecondaryDataState(): number {
    return this.view.getUint32(180, true);
  }

  // 0xb8: u32
  get ProductType(): number {
    return this.view.getUint32(184, true);
  }

  // 0xbc: u32
  get SuiteMask(): number {
    return this.view.getUint32(188, true);
  }

  // 0xc0: u32
  get WriterStatus(): number {
    return this.view.getUint32(192, true);
  }

  // 0xc4: u8
  get Unused1(): number {
    return this.view.getUint8(196);
  }

  // 0xc5: u8
  get KdSecondaryVersion(): number {
    return this.view.getUint8(197);
  }

  // 0xc6: pad2

  // 0xc8: pointer
  get Unused(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(200, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xd0: pointer
  get Attributes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(208, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xd8: u32
  get BootId(): number {
    return this.view.getUint32(216, true);
  }

  // 0xdc: pad4

  // 0xe0: pointer
  get _reserved0(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(224, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Signature(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ValidDump(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set MajorVersion(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set MinorVersion(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u64
  set DirectoryTableBase(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set PfnDataBase(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u64
  set PsLoadedModuleList(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: u64
  set PsActiveProcessHead(value: number | bigint) {
    this.view.setBigUint64(40, util.toBigInt(value), true);
  }

  // 0x30: u32
  set MachineImageType(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set NumberProcessors(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set BugCheckCode(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: u64
  set BugCheckParameter1(value: number | bigint) {
    this.view.setBigUint64(64, util.toBigInt(value), true);
  }

  // 0x48: u64
  set BugCheckParameter2(value: number | bigint) {
    this.view.setBigUint64(72, util.toBigInt(value), true);
  }

  // 0x50: u64
  set BugCheckParameter3(value: number | bigint) {
    this.view.setBigUint64(80, util.toBigInt(value), true);
  }

  // 0x58: u64
  set BugCheckParameter4(value: number | bigint) {
    this.view.setBigUint64(88, util.toBigInt(value), true);
  }

  // 0x60: pointer
  set VersionUser(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x68: u64
  set KdDebuggerDataBlock(value: number | bigint) {
    this.view.setBigUint64(104, util.toBigInt(value), true);
  }

  // 0x70: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(112, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x78: pointer
  set ContextRecord(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(120, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x80: pointer
  set Exception(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(128, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x88: u32
  set DumpType(value: number) {
    this.view.setUint32(136, value, true);
  }

  // 0x8c: pad4

  // 0x90: pointer
  set RequiredDumpSpace(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(144, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x98: pointer
  set SystemTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(152, util.toBigInt(util.toPointer(value)), true);
  }

  // 0xa0: pointer
  set Comment(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(160, util.toBigInt(util.toPointer(value)), true);
  }

  // 0xa8: pointer
  set SystemUpTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(168, util.toBigInt(util.toPointer(value)), true);
  }

  // 0xb0: u32
  set MiniDumpFields(value: number) {
    this.view.setUint32(176, value, true);
  }

  // 0xb4: u32
  set SecondaryDataState(value: number) {
    this.view.setUint32(180, value, true);
  }

  // 0xb8: u32
  set ProductType(value: number) {
    this.view.setUint32(184, value, true);
  }

  // 0xbc: u32
  set SuiteMask(value: number) {
    this.view.setUint32(188, value, true);
  }

  // 0xc0: u32
  set WriterStatus(value: number) {
    this.view.setUint32(192, value, true);
  }

  // 0xc4: u8
  set Unused1(value: number) {
    this.view.setUint8(196, value);
  }

  // 0xc5: u8
  set KdSecondaryVersion(value: number) {
    this.view.setUint8(197, value);
  }

  // 0xc6: pad2

  // 0xc8: pointer
  set Unused(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(200, util.toBigInt(util.toPointer(value)), true);
  }

  // 0xd0: pointer
  set Attributes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(208, util.toBigInt(util.toPointer(value)), true);
  }

  // 0xd8: u32
  set BootId(value: number) {
    this.view.setUint32(216, value, true);
  }

  // 0xdc: pad4

  // 0xe0: pointer
  set _reserved0(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(224, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.WHEA_ERROR_SOURCE_CONFIGURATION_DD (size: 24)
 */
export interface WHEA_ERROR_SOURCE_CONFIGURATION_DD {
  /** Windows.Win32.System.Diagnostics.Debug.WHEA_ERROR_SOURCE_INITIALIZE_DEVICE_DRIVER */
  Initialize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.WHEA_ERROR_SOURCE_UNINITIALIZE_DEVICE_DRIVER */
  Uninitialize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.WHEA_ERROR_SOURCE_CORRECT_DEVICE_DRIVER */
  Correct: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWHEA_ERROR_SOURCE_CONFIGURATION_DD = 24;

export function allocWHEA_ERROR_SOURCE_CONFIGURATION_DD(data?: Partial<WHEA_ERROR_SOURCE_CONFIGURATION_DD>): Uint8Array {
  const buf = new Uint8Array(sizeofWHEA_ERROR_SOURCE_CONFIGURATION_DD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Initialize !== undefined) view.setBigUint64(0, data.Initialize === null ? 0n : util.toBigInt(util.toPointer(data.Initialize)), true);
  // 0x08: pointer
  if (data?.Uninitialize !== undefined) view.setBigUint64(8, data.Uninitialize === null ? 0n : util.toBigInt(util.toPointer(data.Uninitialize)), true);
  // 0x10: pointer
  if (data?.Correct !== undefined) view.setBigUint64(16, data.Correct === null ? 0n : util.toBigInt(util.toPointer(data.Correct)), true);
  return buf;
}

export class WHEA_ERROR_SOURCE_CONFIGURATION_DDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Initialize(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Uninitialize(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Correct(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Initialize(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Uninitialize(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Correct(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.WHEA_ERROR_SOURCE_CONFIGURATION_DEVICE_DRIVER_V1 (size: 48)
 */
export interface WHEA_ERROR_SOURCE_CONFIGURATION_DEVICE_DRIVER_V1 {
  /** u32 */
  Version: number;
  /** System.Guid */
  SourceGuid: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  LogTag: number;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.WHEA_ERROR_SOURCE_INITIALIZE_DEVICE_DRIVER */
  Initialize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.WHEA_ERROR_SOURCE_UNINITIALIZE_DEVICE_DRIVER */
  Uninitialize: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWHEA_ERROR_SOURCE_CONFIGURATION_DEVICE_DRIVER_V1 = 48;

export function allocWHEA_ERROR_SOURCE_CONFIGURATION_DEVICE_DRIVER_V1(data?: Partial<WHEA_ERROR_SOURCE_CONFIGURATION_DEVICE_DRIVER_V1>): Uint8Array {
  const buf = new Uint8Array(sizeofWHEA_ERROR_SOURCE_CONFIGURATION_DEVICE_DRIVER_V1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SourceGuid !== undefined) view.setBigUint64(8, data.SourceGuid === null ? 0n : util.toBigInt(util.toPointer(data.SourceGuid)), true);
  // 0x10: u16
  if (data?.LogTag !== undefined) view.setUint16(16, Number(data.LogTag), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(24, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  // 0x20: pointer
  if (data?.Initialize !== undefined) view.setBigUint64(32, data.Initialize === null ? 0n : util.toBigInt(util.toPointer(data.Initialize)), true);
  // 0x28: pointer
  if (data?.Uninitialize !== undefined) view.setBigUint64(40, data.Uninitialize === null ? 0n : util.toBigInt(util.toPointer(data.Uninitialize)), true);
  return buf;
}

export class WHEA_ERROR_SOURCE_CONFIGURATION_DEVICE_DRIVER_V1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get SourceGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u16
  get LogTag(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get Initialize(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get Uninitialize(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set SourceGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u16
  set LogTag(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set Initialize(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set Uninitialize(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.WHEA_ERROR_SOURCE_CONFIGURATION_DEVICE_DRIVER (size: 72)
 */
export interface WHEA_ERROR_SOURCE_CONFIGURATION_DEVICE_DRIVER {
  /** u32 */
  Version: number;
  /** System.Guid */
  SourceGuid: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  LogTag: number;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.WHEA_ERROR_SOURCE_INITIALIZE_DEVICE_DRIVER */
  Initialize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.WHEA_ERROR_SOURCE_UNINITIALIZE_DEVICE_DRIVER */
  Uninitialize: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  MaxSectionDataLength: number;
  /** u32 */
  MaxSectionsPerReport: number;
  /** System.Guid */
  CreatorId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  PartitionId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWHEA_ERROR_SOURCE_CONFIGURATION_DEVICE_DRIVER = 72;

export function allocWHEA_ERROR_SOURCE_CONFIGURATION_DEVICE_DRIVER(data?: Partial<WHEA_ERROR_SOURCE_CONFIGURATION_DEVICE_DRIVER>): Uint8Array {
  const buf = new Uint8Array(sizeofWHEA_ERROR_SOURCE_CONFIGURATION_DEVICE_DRIVER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SourceGuid !== undefined) view.setBigUint64(8, data.SourceGuid === null ? 0n : util.toBigInt(util.toPointer(data.SourceGuid)), true);
  // 0x10: u16
  if (data?.LogTag !== undefined) view.setUint16(16, Number(data.LogTag), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(24, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  // 0x20: pointer
  if (data?.Initialize !== undefined) view.setBigUint64(32, data.Initialize === null ? 0n : util.toBigInt(util.toPointer(data.Initialize)), true);
  // 0x28: pointer
  if (data?.Uninitialize !== undefined) view.setBigUint64(40, data.Uninitialize === null ? 0n : util.toBigInt(util.toPointer(data.Uninitialize)), true);
  // 0x30: u32
  if (data?.MaxSectionDataLength !== undefined) view.setUint32(48, Number(data.MaxSectionDataLength), true);
  // 0x34: u32
  if (data?.MaxSectionsPerReport !== undefined) view.setUint32(52, Number(data.MaxSectionsPerReport), true);
  // 0x38: pointer
  if (data?.CreatorId !== undefined) view.setBigUint64(56, data.CreatorId === null ? 0n : util.toBigInt(util.toPointer(data.CreatorId)), true);
  // 0x40: pointer
  if (data?.PartitionId !== undefined) view.setBigUint64(64, data.PartitionId === null ? 0n : util.toBigInt(util.toPointer(data.PartitionId)), true);
  return buf;
}

export class WHEA_ERROR_SOURCE_CONFIGURATION_DEVICE_DRIVERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get SourceGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u16
  get LogTag(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get Initialize(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get Uninitialize(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get MaxSectionDataLength(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get MaxSectionsPerReport(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: pointer
  get CreatorId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get PartitionId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set SourceGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u16
  set LogTag(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set Initialize(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set Uninitialize(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set MaxSectionDataLength(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set MaxSectionsPerReport(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: pointer
  set CreatorId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set PartitionId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.WHEA_DRIVER_BUFFER_SET (size: 48)
 */
export interface WHEA_DRIVER_BUFFER_SET {
  /** u32 */
  Version: number;
  /** ptr */
  Data: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  DataSize: number;
  /** ptr */
  SectionTypeGuid: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  SectionFriendlyName: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Flags: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWHEA_DRIVER_BUFFER_SET = 48;

export function allocWHEA_DRIVER_BUFFER_SET(data?: Partial<WHEA_DRIVER_BUFFER_SET>): Uint8Array {
  const buf = new Uint8Array(sizeofWHEA_DRIVER_BUFFER_SET);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Data !== undefined) view.setBigUint64(8, data.Data === null ? 0n : util.toBigInt(util.toPointer(data.Data)), true);
  // 0x10: u32
  if (data?.DataSize !== undefined) view.setUint32(16, Number(data.DataSize), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.SectionTypeGuid !== undefined) view.setBigUint64(24, data.SectionTypeGuid === null ? 0n : util.toBigInt(util.toPointer(data.SectionTypeGuid)), true);
  // 0x20: pointer
  if (data?.SectionFriendlyName !== undefined) view.setBigUint64(32, data.SectionFriendlyName === null ? 0n : util.toBigInt(util.toPointer(data.SectionFriendlyName)), true);
  // 0x28: pointer
  if (data?.Flags !== undefined) view.setBigUint64(40, data.Flags === null ? 0n : util.toBigInt(util.toPointer(data.Flags)), true);
  return buf;
}

export class WHEA_DRIVER_BUFFER_SETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Data(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get DataSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get SectionTypeGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get SectionFriendlyName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get Flags(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Data(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set DataSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set SectionTypeGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set SectionFriendlyName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set Flags(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.WHEA_NOTIFICATION_FLAGS (size: 16)
 */
export interface WHEA_NOTIFICATION_FLAGS {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  AsUSHORT: number;
}

export const sizeofWHEA_NOTIFICATION_FLAGS = 16;

export function allocWHEA_NOTIFICATION_FLAGS(data?: Partial<WHEA_NOTIFICATION_FLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofWHEA_NOTIFICATION_FLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u16
  if (data?.AsUSHORT !== undefined) view.setUint16(8, Number(data.AsUSHORT), true);
  // 0x0a: pad6
  return buf;
}

export class WHEA_NOTIFICATION_FLAGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u16
  get AsUSHORT(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u16
  set AsUSHORT(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Diagnostics.Debug.XPF_MC_BANK_FLAGS (size: 16)
 */
export interface XPF_MC_BANK_FLAGS {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  AsUCHAR: number;
}

export const sizeofXPF_MC_BANK_FLAGS = 16;

export function allocXPF_MC_BANK_FLAGS(data?: Partial<XPF_MC_BANK_FLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofXPF_MC_BANK_FLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u8
  if (data?.AsUCHAR !== undefined) view.setUint8(8, Number(data.AsUCHAR));
  // 0x09: pad7
  return buf;
}

export class XPF_MC_BANK_FLAGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u8
  get AsUCHAR(): number {
    return this.view.getUint8(8);
  }

  // 0x09: pad7

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u8
  set AsUCHAR(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: pad7
}

/**
 * Windows.Win32.System.Diagnostics.Debug.XPF_MCE_FLAGS (size: 16)
 */
export interface XPF_MCE_FLAGS {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  AsULONG: number;
}

export const sizeofXPF_MCE_FLAGS = 16;

export function allocXPF_MCE_FLAGS(data?: Partial<XPF_MCE_FLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofXPF_MCE_FLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u32
  if (data?.AsULONG !== undefined) view.setUint32(8, Number(data.AsULONG), true);
  // 0x0c: pad4
  return buf;
}

export class XPF_MCE_FLAGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get AsULONG(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set AsULONG(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.AER_ROOTPORT_DESCRIPTOR_FLAGS (size: 16)
 */
export interface AER_ROOTPORT_DESCRIPTOR_FLAGS {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  AsUSHORT: number;
}

export const sizeofAER_ROOTPORT_DESCRIPTOR_FLAGS = 16;

export function allocAER_ROOTPORT_DESCRIPTOR_FLAGS(data?: Partial<AER_ROOTPORT_DESCRIPTOR_FLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofAER_ROOTPORT_DESCRIPTOR_FLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u16
  if (data?.AsUSHORT !== undefined) view.setUint16(8, Number(data.AsUSHORT), true);
  // 0x0a: pad6
  return buf;
}

export class AER_ROOTPORT_DESCRIPTOR_FLAGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u16
  get AsUSHORT(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u16
  set AsUSHORT(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Diagnostics.Debug.AER_ENDPOINT_DESCRIPTOR_FLAGS (size: 16)
 */
export interface AER_ENDPOINT_DESCRIPTOR_FLAGS {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  AsUSHORT: number;
}

export const sizeofAER_ENDPOINT_DESCRIPTOR_FLAGS = 16;

export function allocAER_ENDPOINT_DESCRIPTOR_FLAGS(data?: Partial<AER_ENDPOINT_DESCRIPTOR_FLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofAER_ENDPOINT_DESCRIPTOR_FLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u16
  if (data?.AsUSHORT !== undefined) view.setUint16(8, Number(data.AsUSHORT), true);
  // 0x0a: pad6
  return buf;
}

export class AER_ENDPOINT_DESCRIPTOR_FLAGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u16
  get AsUSHORT(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u16
  set AsUSHORT(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Diagnostics.Debug.AER_BRIDGE_DESCRIPTOR_FLAGS (size: 16)
 */
export interface AER_BRIDGE_DESCRIPTOR_FLAGS {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  AsUSHORT: number;
}

export const sizeofAER_BRIDGE_DESCRIPTOR_FLAGS = 16;

export function allocAER_BRIDGE_DESCRIPTOR_FLAGS(data?: Partial<AER_BRIDGE_DESCRIPTOR_FLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofAER_BRIDGE_DESCRIPTOR_FLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u16
  if (data?.AsUSHORT !== undefined) view.setUint16(8, Number(data.AsUSHORT), true);
  // 0x0a: pad6
  return buf;
}

export class AER_BRIDGE_DESCRIPTOR_FLAGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u16
  get AsUSHORT(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u16
  set AsUSHORT(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.System.Diagnostics.Debug.WHEA_NOTIFICATION_DESCRIPTOR (size: 24)
 */
export interface WHEA_NOTIFICATION_DESCRIPTOR {
  /** u8 */
  Type: number;
  /** u8 */
  Length: number;
  /** Windows.Win32.System.Diagnostics.Debug.WHEA_NOTIFICATION_FLAGS */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** _u_e__Union */
  u: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWHEA_NOTIFICATION_DESCRIPTOR = 24;

export function allocWHEA_NOTIFICATION_DESCRIPTOR(data?: Partial<WHEA_NOTIFICATION_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofWHEA_NOTIFICATION_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Type !== undefined) view.setUint8(0, Number(data.Type));
  // 0x01: u8
  if (data?.Length !== undefined) view.setUint8(1, Number(data.Length));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Flags !== undefined) view.setBigUint64(8, data.Flags === null ? 0n : util.toBigInt(util.toPointer(data.Flags)), true);
  // 0x10: pointer
  if (data?.u !== undefined) view.setBigUint64(16, data.u === null ? 0n : util.toBigInt(util.toPointer(data.u)), true);
  return buf;
}

export class WHEA_NOTIFICATION_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get Type(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Length(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x08: pointer
  get Flags(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get u(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set Type(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Length(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6

  // 0x08: pointer
  set Flags(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set u(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.WHEA_XPF_MC_BANK_DESCRIPTOR (size: 56)
 */
export interface WHEA_XPF_MC_BANK_DESCRIPTOR {
  /** u8 */
  BankNumber: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  ClearOnInitialization: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  StatusDataFormat: number;
  /** Windows.Win32.System.Diagnostics.Debug.XPF_MC_BANK_FLAGS */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ControlMsr: number;
  /** u32 */
  StatusMsr: number;
  /** u32 */
  AddressMsr: number;
  /** u32 */
  MiscMsr: number;
  /** u64 */
  ControlData: number | bigint;
}

export const sizeofWHEA_XPF_MC_BANK_DESCRIPTOR = 56;

export function allocWHEA_XPF_MC_BANK_DESCRIPTOR(data?: Partial<WHEA_XPF_MC_BANK_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofWHEA_XPF_MC_BANK_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.BankNumber !== undefined) view.setUint8(0, Number(data.BankNumber));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.ClearOnInitialization !== undefined) view.setBigUint64(8, data.ClearOnInitialization === null ? 0n : util.toBigInt(util.toPointer(data.ClearOnInitialization)), true);
  // 0x10: u8
  if (data?.StatusDataFormat !== undefined) view.setUint8(16, Number(data.StatusDataFormat));
  // 0x11: pad7
  // 0x18: pointer
  if (data?.Flags !== undefined) view.setBigUint64(24, data.Flags === null ? 0n : util.toBigInt(util.toPointer(data.Flags)), true);
  // 0x20: u32
  if (data?.ControlMsr !== undefined) view.setUint32(32, Number(data.ControlMsr), true);
  // 0x24: u32
  if (data?.StatusMsr !== undefined) view.setUint32(36, Number(data.StatusMsr), true);
  // 0x28: u32
  if (data?.AddressMsr !== undefined) view.setUint32(40, Number(data.AddressMsr), true);
  // 0x2c: u32
  if (data?.MiscMsr !== undefined) view.setUint32(44, Number(data.MiscMsr), true);
  // 0x30: u64
  if (data?.ControlData !== undefined) view.setBigUint64(48, util.toBigInt(data.ControlData), true);
  return buf;
}

export class WHEA_XPF_MC_BANK_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get BankNumber(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x08: pointer
  get ClearOnInitialization(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u8
  get StatusDataFormat(): number {
    return this.view.getUint8(16);
  }

  // 0x11: pad7

  // 0x18: pointer
  get Flags(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get ControlMsr(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get StatusMsr(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get AddressMsr(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get MiscMsr(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u64
  get ControlData(): number | bigint {
    return this.view.getBigUint64(48, true);
  }

  // 0x00: u8
  set BankNumber(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7

  // 0x08: pointer
  set ClearOnInitialization(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u8
  set StatusDataFormat(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: pad7

  // 0x18: pointer
  set Flags(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set ControlMsr(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set StatusMsr(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set AddressMsr(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set MiscMsr(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u64
  set ControlData(value: number | bigint) {
    this.view.setBigUint64(48, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.WHEA_XPF_MCE_DESCRIPTOR (size: 40)
 */
export interface WHEA_XPF_MCE_DESCRIPTOR {
  /** u16 */
  Type: number;
  /** u8 */
  Enabled: number;
  /** u8 */
  NumberOfBanks: number;
  /** Windows.Win32.System.Diagnostics.Debug.XPF_MCE_FLAGS */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  MCG_Capability: number | bigint;
  /** u64 */
  MCG_GlobalControl: number | bigint;
  /** array */
  Banks: Deno.PointerValue | null;
}

export const sizeofWHEA_XPF_MCE_DESCRIPTOR = 40;

export function allocWHEA_XPF_MCE_DESCRIPTOR(data?: Partial<WHEA_XPF_MCE_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofWHEA_XPF_MCE_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Type !== undefined) view.setUint16(0, Number(data.Type), true);
  // 0x02: u8
  if (data?.Enabled !== undefined) view.setUint8(2, Number(data.Enabled));
  // 0x03: u8
  if (data?.NumberOfBanks !== undefined) view.setUint8(3, Number(data.NumberOfBanks));
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Flags !== undefined) view.setBigUint64(8, data.Flags === null ? 0n : util.toBigInt(util.toPointer(data.Flags)), true);
  // 0x10: u64
  if (data?.MCG_Capability !== undefined) view.setBigUint64(16, util.toBigInt(data.MCG_Capability), true);
  // 0x18: u64
  if (data?.MCG_GlobalControl !== undefined) view.setBigUint64(24, util.toBigInt(data.MCG_GlobalControl), true);
  // 0x20: pointer
  if (data?.Banks !== undefined) view.setBigUint64(32, data.Banks === null ? 0n : util.toBigInt(util.toPointer(data.Banks)), true);
  return buf;
}

export class WHEA_XPF_MCE_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Type(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get Enabled(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get NumberOfBanks(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Flags(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u64
  get MCG_Capability(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get MCG_GlobalControl(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: pointer
  get Banks(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set Type(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set Enabled(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set NumberOfBanks(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Flags(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u64
  set MCG_Capability(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set MCG_GlobalControl(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: pointer
  set Banks(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.WHEA_XPF_CMC_DESCRIPTOR (size: 40)
 */
export interface WHEA_XPF_CMC_DESCRIPTOR {
  /** u16 */
  Type: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  Enabled: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  NumberOfBanks: number;
  /** u32 */
  Reserved: number;
  /** Windows.Win32.System.Diagnostics.Debug.WHEA_NOTIFICATION_DESCRIPTOR */
  Notify: Uint8Array | Deno.PointerValue | null;
  /** array */
  Banks: Deno.PointerValue | null;
}

export const sizeofWHEA_XPF_CMC_DESCRIPTOR = 40;

export function allocWHEA_XPF_CMC_DESCRIPTOR(data?: Partial<WHEA_XPF_CMC_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofWHEA_XPF_CMC_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Type !== undefined) view.setUint16(0, Number(data.Type), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Enabled !== undefined) view.setBigUint64(8, data.Enabled === null ? 0n : util.toBigInt(util.toPointer(data.Enabled)), true);
  // 0x10: u8
  if (data?.NumberOfBanks !== undefined) view.setUint8(16, Number(data.NumberOfBanks));
  // 0x11: u32
  if (data?.Reserved !== undefined) view.setUint32(17, Number(data.Reserved), true);
  // 0x15: pad3
  // 0x18: pointer
  if (data?.Notify !== undefined) view.setBigUint64(24, data.Notify === null ? 0n : util.toBigInt(util.toPointer(data.Notify)), true);
  // 0x20: pointer
  if (data?.Banks !== undefined) view.setBigUint64(32, data.Banks === null ? 0n : util.toBigInt(util.toPointer(data.Banks)), true);
  return buf;
}

export class WHEA_XPF_CMC_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Type(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get Enabled(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u8
  get NumberOfBanks(): number {
    return this.view.getUint8(16);
  }

  // 0x11: u32
  get Reserved(): number {
    return this.view.getUint32(17, true);
  }

  // 0x15: pad3

  // 0x18: pointer
  get Notify(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get Banks(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set Type(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set Enabled(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u8
  set NumberOfBanks(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: u32
  set Reserved(value: number) {
    this.view.setUint32(17, value, true);
  }

  // 0x15: pad3

  // 0x18: pointer
  set Notify(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set Banks(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.WHEA_PCI_SLOT_NUMBER (size: 8)
 */
export interface WHEA_PCI_SLOT_NUMBER {
  /** _u_e__Union */
  u: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWHEA_PCI_SLOT_NUMBER = 8;

export function allocWHEA_PCI_SLOT_NUMBER(data?: Partial<WHEA_PCI_SLOT_NUMBER>): Uint8Array {
  const buf = new Uint8Array(sizeofWHEA_PCI_SLOT_NUMBER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.u !== undefined) view.setBigUint64(0, data.u === null ? 0n : util.toBigInt(util.toPointer(data.u)), true);
  return buf;
}

export class WHEA_PCI_SLOT_NUMBERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get u(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set u(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.WHEA_XPF_NMI_DESCRIPTOR (size: 16)
 */
export interface WHEA_XPF_NMI_DESCRIPTOR {
  /** u16 */
  Type: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  Enabled: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWHEA_XPF_NMI_DESCRIPTOR = 16;

export function allocWHEA_XPF_NMI_DESCRIPTOR(data?: Partial<WHEA_XPF_NMI_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofWHEA_XPF_NMI_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Type !== undefined) view.setUint16(0, Number(data.Type), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Enabled !== undefined) view.setBigUint64(8, data.Enabled === null ? 0n : util.toBigInt(util.toPointer(data.Enabled)), true);
  return buf;
}

export class WHEA_XPF_NMI_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Type(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get Enabled(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set Type(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set Enabled(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.WHEA_AER_ROOTPORT_DESCRIPTOR (size: 72)
 */
export interface WHEA_AER_ROOTPORT_DESCRIPTOR {
  /** u16 */
  Type: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  Enabled: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  Reserved: number;
  /** u32 */
  BusNumber: number;
  /** Windows.Win32.System.Diagnostics.Debug.WHEA_PCI_SLOT_NUMBER */
  Slot: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  DeviceControl: number;
  /** Windows.Win32.System.Diagnostics.Debug.AER_ROOTPORT_DESCRIPTOR_FLAGS */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  UncorrectableErrorMask: number;
  /** u32 */
  UncorrectableErrorSeverity: number;
  /** u32 */
  CorrectableErrorMask: number;
  /** u32 */
  AdvancedCapsAndControl: number;
  /** u32 */
  RootErrorCommand: number;
}

export const sizeofWHEA_AER_ROOTPORT_DESCRIPTOR = 72;

export function allocWHEA_AER_ROOTPORT_DESCRIPTOR(data?: Partial<WHEA_AER_ROOTPORT_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofWHEA_AER_ROOTPORT_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Type !== undefined) view.setUint16(0, Number(data.Type), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Enabled !== undefined) view.setBigUint64(8, data.Enabled === null ? 0n : util.toBigInt(util.toPointer(data.Enabled)), true);
  // 0x10: u8
  if (data?.Reserved !== undefined) view.setUint8(16, Number(data.Reserved));
  // 0x11: u32
  if (data?.BusNumber !== undefined) view.setUint32(17, Number(data.BusNumber), true);
  // 0x15: pad3
  // 0x18: pointer
  if (data?.Slot !== undefined) view.setBigUint64(24, data.Slot === null ? 0n : util.toBigInt(util.toPointer(data.Slot)), true);
  // 0x20: u16
  if (data?.DeviceControl !== undefined) view.setUint16(32, Number(data.DeviceControl), true);
  // 0x22: pad6
  // 0x28: pointer
  if (data?.Flags !== undefined) view.setBigUint64(40, data.Flags === null ? 0n : util.toBigInt(util.toPointer(data.Flags)), true);
  // 0x30: u32
  if (data?.UncorrectableErrorMask !== undefined) view.setUint32(48, Number(data.UncorrectableErrorMask), true);
  // 0x34: u32
  if (data?.UncorrectableErrorSeverity !== undefined) view.setUint32(52, Number(data.UncorrectableErrorSeverity), true);
  // 0x38: u32
  if (data?.CorrectableErrorMask !== undefined) view.setUint32(56, Number(data.CorrectableErrorMask), true);
  // 0x3c: u32
  if (data?.AdvancedCapsAndControl !== undefined) view.setUint32(60, Number(data.AdvancedCapsAndControl), true);
  // 0x40: u32
  if (data?.RootErrorCommand !== undefined) view.setUint32(64, Number(data.RootErrorCommand), true);
  // 0x44: pad4
  return buf;
}

export class WHEA_AER_ROOTPORT_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Type(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get Enabled(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u8
  get Reserved(): number {
    return this.view.getUint8(16);
  }

  // 0x11: u32
  get BusNumber(): number {
    return this.view.getUint32(17, true);
  }

  // 0x15: pad3

  // 0x18: pointer
  get Slot(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u16
  get DeviceControl(): number {
    return this.view.getUint16(32, true);
  }

  // 0x22: pad6

  // 0x28: pointer
  get Flags(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get UncorrectableErrorMask(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get UncorrectableErrorSeverity(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get CorrectableErrorMask(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get AdvancedCapsAndControl(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get RootErrorCommand(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x00: u16
  set Type(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set Enabled(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u8
  set Reserved(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: u32
  set BusNumber(value: number) {
    this.view.setUint32(17, value, true);
  }

  // 0x15: pad3

  // 0x18: pointer
  set Slot(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u16
  set DeviceControl(value: number) {
    this.view.setUint16(32, value, true);
  }

  // 0x22: pad6

  // 0x28: pointer
  set Flags(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set UncorrectableErrorMask(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set UncorrectableErrorSeverity(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set CorrectableErrorMask(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set AdvancedCapsAndControl(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set RootErrorCommand(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.WHEA_AER_ENDPOINT_DESCRIPTOR (size: 64)
 */
export interface WHEA_AER_ENDPOINT_DESCRIPTOR {
  /** u16 */
  Type: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  Enabled: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  Reserved: number;
  /** u32 */
  BusNumber: number;
  /** Windows.Win32.System.Diagnostics.Debug.WHEA_PCI_SLOT_NUMBER */
  Slot: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  DeviceControl: number;
  /** Windows.Win32.System.Diagnostics.Debug.AER_ENDPOINT_DESCRIPTOR_FLAGS */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  UncorrectableErrorMask: number;
  /** u32 */
  UncorrectableErrorSeverity: number;
  /** u32 */
  CorrectableErrorMask: number;
  /** u32 */
  AdvancedCapsAndControl: number;
}

export const sizeofWHEA_AER_ENDPOINT_DESCRIPTOR = 64;

export function allocWHEA_AER_ENDPOINT_DESCRIPTOR(data?: Partial<WHEA_AER_ENDPOINT_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofWHEA_AER_ENDPOINT_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Type !== undefined) view.setUint16(0, Number(data.Type), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Enabled !== undefined) view.setBigUint64(8, data.Enabled === null ? 0n : util.toBigInt(util.toPointer(data.Enabled)), true);
  // 0x10: u8
  if (data?.Reserved !== undefined) view.setUint8(16, Number(data.Reserved));
  // 0x11: u32
  if (data?.BusNumber !== undefined) view.setUint32(17, Number(data.BusNumber), true);
  // 0x15: pad3
  // 0x18: pointer
  if (data?.Slot !== undefined) view.setBigUint64(24, data.Slot === null ? 0n : util.toBigInt(util.toPointer(data.Slot)), true);
  // 0x20: u16
  if (data?.DeviceControl !== undefined) view.setUint16(32, Number(data.DeviceControl), true);
  // 0x22: pad6
  // 0x28: pointer
  if (data?.Flags !== undefined) view.setBigUint64(40, data.Flags === null ? 0n : util.toBigInt(util.toPointer(data.Flags)), true);
  // 0x30: u32
  if (data?.UncorrectableErrorMask !== undefined) view.setUint32(48, Number(data.UncorrectableErrorMask), true);
  // 0x34: u32
  if (data?.UncorrectableErrorSeverity !== undefined) view.setUint32(52, Number(data.UncorrectableErrorSeverity), true);
  // 0x38: u32
  if (data?.CorrectableErrorMask !== undefined) view.setUint32(56, Number(data.CorrectableErrorMask), true);
  // 0x3c: u32
  if (data?.AdvancedCapsAndControl !== undefined) view.setUint32(60, Number(data.AdvancedCapsAndControl), true);
  return buf;
}

export class WHEA_AER_ENDPOINT_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Type(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get Enabled(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u8
  get Reserved(): number {
    return this.view.getUint8(16);
  }

  // 0x11: u32
  get BusNumber(): number {
    return this.view.getUint32(17, true);
  }

  // 0x15: pad3

  // 0x18: pointer
  get Slot(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u16
  get DeviceControl(): number {
    return this.view.getUint16(32, true);
  }

  // 0x22: pad6

  // 0x28: pointer
  get Flags(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get UncorrectableErrorMask(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get UncorrectableErrorSeverity(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get CorrectableErrorMask(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get AdvancedCapsAndControl(): number {
    return this.view.getUint32(60, true);
  }

  // 0x00: u16
  set Type(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set Enabled(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u8
  set Reserved(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: u32
  set BusNumber(value: number) {
    this.view.setUint32(17, value, true);
  }

  // 0x15: pad3

  // 0x18: pointer
  set Slot(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u16
  set DeviceControl(value: number) {
    this.view.setUint16(32, value, true);
  }

  // 0x22: pad6

  // 0x28: pointer
  set Flags(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set UncorrectableErrorMask(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set UncorrectableErrorSeverity(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set CorrectableErrorMask(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set AdvancedCapsAndControl(value: number) {
    this.view.setUint32(60, value, true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.WHEA_AER_BRIDGE_DESCRIPTOR (size: 80)
 */
export interface WHEA_AER_BRIDGE_DESCRIPTOR {
  /** u16 */
  Type: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  Enabled: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  Reserved: number;
  /** u32 */
  BusNumber: number;
  /** Windows.Win32.System.Diagnostics.Debug.WHEA_PCI_SLOT_NUMBER */
  Slot: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  DeviceControl: number;
  /** Windows.Win32.System.Diagnostics.Debug.AER_BRIDGE_DESCRIPTOR_FLAGS */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  UncorrectableErrorMask: number;
  /** u32 */
  UncorrectableErrorSeverity: number;
  /** u32 */
  CorrectableErrorMask: number;
  /** u32 */
  AdvancedCapsAndControl: number;
  /** u32 */
  SecondaryUncorrectableErrorMask: number;
  /** u32 */
  SecondaryUncorrectableErrorSev: number;
  /** u32 */
  SecondaryCapsAndControl: number;
}

export const sizeofWHEA_AER_BRIDGE_DESCRIPTOR = 80;

export function allocWHEA_AER_BRIDGE_DESCRIPTOR(data?: Partial<WHEA_AER_BRIDGE_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofWHEA_AER_BRIDGE_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Type !== undefined) view.setUint16(0, Number(data.Type), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Enabled !== undefined) view.setBigUint64(8, data.Enabled === null ? 0n : util.toBigInt(util.toPointer(data.Enabled)), true);
  // 0x10: u8
  if (data?.Reserved !== undefined) view.setUint8(16, Number(data.Reserved));
  // 0x11: u32
  if (data?.BusNumber !== undefined) view.setUint32(17, Number(data.BusNumber), true);
  // 0x15: pad3
  // 0x18: pointer
  if (data?.Slot !== undefined) view.setBigUint64(24, data.Slot === null ? 0n : util.toBigInt(util.toPointer(data.Slot)), true);
  // 0x20: u16
  if (data?.DeviceControl !== undefined) view.setUint16(32, Number(data.DeviceControl), true);
  // 0x22: pad6
  // 0x28: pointer
  if (data?.Flags !== undefined) view.setBigUint64(40, data.Flags === null ? 0n : util.toBigInt(util.toPointer(data.Flags)), true);
  // 0x30: u32
  if (data?.UncorrectableErrorMask !== undefined) view.setUint32(48, Number(data.UncorrectableErrorMask), true);
  // 0x34: u32
  if (data?.UncorrectableErrorSeverity !== undefined) view.setUint32(52, Number(data.UncorrectableErrorSeverity), true);
  // 0x38: u32
  if (data?.CorrectableErrorMask !== undefined) view.setUint32(56, Number(data.CorrectableErrorMask), true);
  // 0x3c: u32
  if (data?.AdvancedCapsAndControl !== undefined) view.setUint32(60, Number(data.AdvancedCapsAndControl), true);
  // 0x40: u32
  if (data?.SecondaryUncorrectableErrorMask !== undefined) view.setUint32(64, Number(data.SecondaryUncorrectableErrorMask), true);
  // 0x44: u32
  if (data?.SecondaryUncorrectableErrorSev !== undefined) view.setUint32(68, Number(data.SecondaryUncorrectableErrorSev), true);
  // 0x48: u32
  if (data?.SecondaryCapsAndControl !== undefined) view.setUint32(72, Number(data.SecondaryCapsAndControl), true);
  // 0x4c: pad4
  return buf;
}

export class WHEA_AER_BRIDGE_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Type(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get Enabled(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u8
  get Reserved(): number {
    return this.view.getUint8(16);
  }

  // 0x11: u32
  get BusNumber(): number {
    return this.view.getUint32(17, true);
  }

  // 0x15: pad3

  // 0x18: pointer
  get Slot(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u16
  get DeviceControl(): number {
    return this.view.getUint16(32, true);
  }

  // 0x22: pad6

  // 0x28: pointer
  get Flags(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get UncorrectableErrorMask(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get UncorrectableErrorSeverity(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get CorrectableErrorMask(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get AdvancedCapsAndControl(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get SecondaryUncorrectableErrorMask(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get SecondaryUncorrectableErrorSev(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get SecondaryCapsAndControl(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x00: u16
  set Type(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set Enabled(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u8
  set Reserved(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: u32
  set BusNumber(value: number) {
    this.view.setUint32(17, value, true);
  }

  // 0x15: pad3

  // 0x18: pointer
  set Slot(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u16
  set DeviceControl(value: number) {
    this.view.setUint16(32, value, true);
  }

  // 0x22: pad6

  // 0x28: pointer
  set Flags(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set UncorrectableErrorMask(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set UncorrectableErrorSeverity(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set CorrectableErrorMask(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set AdvancedCapsAndControl(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set SecondaryUncorrectableErrorMask(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set SecondaryUncorrectableErrorSev(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set SecondaryCapsAndControl(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.WHEA_GENERIC_ERROR_DESCRIPTOR (size: 32)
 */
export interface WHEA_GENERIC_ERROR_DESCRIPTOR {
  /** u16 */
  Type: number;
  /** u8 */
  Reserved: number;
  /** u8 */
  Enabled: number;
  /** u32 */
  ErrStatusBlockLength: number;
  /** u32 */
  RelatedErrorSourceId: number;
  /** u8 */
  ErrStatusAddressSpaceID: number;
  /** u8 */
  ErrStatusAddressBitWidth: number;
  /** u8 */
  ErrStatusAddressBitOffset: number;
  /** u8 */
  ErrStatusAddressAccessSize: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ErrStatusAddress: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.WHEA_NOTIFICATION_DESCRIPTOR */
  Notify: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWHEA_GENERIC_ERROR_DESCRIPTOR = 32;

export function allocWHEA_GENERIC_ERROR_DESCRIPTOR(data?: Partial<WHEA_GENERIC_ERROR_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofWHEA_GENERIC_ERROR_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Type !== undefined) view.setUint16(0, Number(data.Type), true);
  // 0x02: u8
  if (data?.Reserved !== undefined) view.setUint8(2, Number(data.Reserved));
  // 0x03: u8
  if (data?.Enabled !== undefined) view.setUint8(3, Number(data.Enabled));
  // 0x04: u32
  if (data?.ErrStatusBlockLength !== undefined) view.setUint32(4, Number(data.ErrStatusBlockLength), true);
  // 0x08: u32
  if (data?.RelatedErrorSourceId !== undefined) view.setUint32(8, Number(data.RelatedErrorSourceId), true);
  // 0x0c: u8
  if (data?.ErrStatusAddressSpaceID !== undefined) view.setUint8(12, Number(data.ErrStatusAddressSpaceID));
  // 0x0d: u8
  if (data?.ErrStatusAddressBitWidth !== undefined) view.setUint8(13, Number(data.ErrStatusAddressBitWidth));
  // 0x0e: u8
  if (data?.ErrStatusAddressBitOffset !== undefined) view.setUint8(14, Number(data.ErrStatusAddressBitOffset));
  // 0x0f: u8
  if (data?.ErrStatusAddressAccessSize !== undefined) view.setUint8(15, Number(data.ErrStatusAddressAccessSize));
  // 0x10: pointer
  if (data?.ErrStatusAddress !== undefined) view.setBigUint64(16, data.ErrStatusAddress === null ? 0n : util.toBigInt(util.toPointer(data.ErrStatusAddress)), true);
  // 0x18: pointer
  if (data?.Notify !== undefined) view.setBigUint64(24, data.Notify === null ? 0n : util.toBigInt(util.toPointer(data.Notify)), true);
  return buf;
}

export class WHEA_GENERIC_ERROR_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Type(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get Reserved(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get Enabled(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u32
  get ErrStatusBlockLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get RelatedErrorSourceId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u8
  get ErrStatusAddressSpaceID(): number {
    return this.view.getUint8(12);
  }

  // 0x0d: u8
  get ErrStatusAddressBitWidth(): number {
    return this.view.getUint8(13);
  }

  // 0x0e: u8
  get ErrStatusAddressBitOffset(): number {
    return this.view.getUint8(14);
  }

  // 0x0f: u8
  get ErrStatusAddressAccessSize(): number {
    return this.view.getUint8(15);
  }

  // 0x10: pointer
  get ErrStatusAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Notify(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set Type(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set Reserved(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set Enabled(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u32
  set ErrStatusBlockLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set RelatedErrorSourceId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u8
  set ErrStatusAddressSpaceID(value: number) {
    this.view.setUint8(12, value);
  }

  // 0x0d: u8
  set ErrStatusAddressBitWidth(value: number) {
    this.view.setUint8(13, value);
  }

  // 0x0e: u8
  set ErrStatusAddressBitOffset(value: number) {
    this.view.setUint8(14, value);
  }

  // 0x0f: u8
  set ErrStatusAddressAccessSize(value: number) {
    this.view.setUint8(15, value);
  }

  // 0x10: pointer
  set ErrStatusAddress(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Notify(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.WHEA_GENERIC_ERROR_DESCRIPTOR_V2 (size: 64)
 */
export interface WHEA_GENERIC_ERROR_DESCRIPTOR_V2 {
  /** u16 */
  Type: number;
  /** u8 */
  Reserved: number;
  /** u8 */
  Enabled: number;
  /** u32 */
  ErrStatusBlockLength: number;
  /** u32 */
  RelatedErrorSourceId: number;
  /** u8 */
  ErrStatusAddressSpaceID: number;
  /** u8 */
  ErrStatusAddressBitWidth: number;
  /** u8 */
  ErrStatusAddressBitOffset: number;
  /** u8 */
  ErrStatusAddressAccessSize: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ErrStatusAddress: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.WHEA_NOTIFICATION_DESCRIPTOR */
  Notify: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  ReadAckAddressSpaceID: number;
  /** u8 */
  ReadAckAddressBitWidth: number;
  /** u8 */
  ReadAckAddressBitOffset: number;
  /** u8 */
  ReadAckAddressAccessSize: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ReadAckAddress: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  ReadAckPreserveMask: number | bigint;
  /** u64 */
  ReadAckWriteMask: number | bigint;
}

export const sizeofWHEA_GENERIC_ERROR_DESCRIPTOR_V2 = 64;

export function allocWHEA_GENERIC_ERROR_DESCRIPTOR_V2(data?: Partial<WHEA_GENERIC_ERROR_DESCRIPTOR_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofWHEA_GENERIC_ERROR_DESCRIPTOR_V2);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Type !== undefined) view.setUint16(0, Number(data.Type), true);
  // 0x02: u8
  if (data?.Reserved !== undefined) view.setUint8(2, Number(data.Reserved));
  // 0x03: u8
  if (data?.Enabled !== undefined) view.setUint8(3, Number(data.Enabled));
  // 0x04: u32
  if (data?.ErrStatusBlockLength !== undefined) view.setUint32(4, Number(data.ErrStatusBlockLength), true);
  // 0x08: u32
  if (data?.RelatedErrorSourceId !== undefined) view.setUint32(8, Number(data.RelatedErrorSourceId), true);
  // 0x0c: u8
  if (data?.ErrStatusAddressSpaceID !== undefined) view.setUint8(12, Number(data.ErrStatusAddressSpaceID));
  // 0x0d: u8
  if (data?.ErrStatusAddressBitWidth !== undefined) view.setUint8(13, Number(data.ErrStatusAddressBitWidth));
  // 0x0e: u8
  if (data?.ErrStatusAddressBitOffset !== undefined) view.setUint8(14, Number(data.ErrStatusAddressBitOffset));
  // 0x0f: u8
  if (data?.ErrStatusAddressAccessSize !== undefined) view.setUint8(15, Number(data.ErrStatusAddressAccessSize));
  // 0x10: pointer
  if (data?.ErrStatusAddress !== undefined) view.setBigUint64(16, data.ErrStatusAddress === null ? 0n : util.toBigInt(util.toPointer(data.ErrStatusAddress)), true);
  // 0x18: pointer
  if (data?.Notify !== undefined) view.setBigUint64(24, data.Notify === null ? 0n : util.toBigInt(util.toPointer(data.Notify)), true);
  // 0x20: u8
  if (data?.ReadAckAddressSpaceID !== undefined) view.setUint8(32, Number(data.ReadAckAddressSpaceID));
  // 0x21: u8
  if (data?.ReadAckAddressBitWidth !== undefined) view.setUint8(33, Number(data.ReadAckAddressBitWidth));
  // 0x22: u8
  if (data?.ReadAckAddressBitOffset !== undefined) view.setUint8(34, Number(data.ReadAckAddressBitOffset));
  // 0x23: u8
  if (data?.ReadAckAddressAccessSize !== undefined) view.setUint8(35, Number(data.ReadAckAddressAccessSize));
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ReadAckAddress !== undefined) view.setBigUint64(40, data.ReadAckAddress === null ? 0n : util.toBigInt(util.toPointer(data.ReadAckAddress)), true);
  // 0x30: u64
  if (data?.ReadAckPreserveMask !== undefined) view.setBigUint64(48, util.toBigInt(data.ReadAckPreserveMask), true);
  // 0x38: u64
  if (data?.ReadAckWriteMask !== undefined) view.setBigUint64(56, util.toBigInt(data.ReadAckWriteMask), true);
  return buf;
}

export class WHEA_GENERIC_ERROR_DESCRIPTOR_V2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Type(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get Reserved(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get Enabled(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u32
  get ErrStatusBlockLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get RelatedErrorSourceId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u8
  get ErrStatusAddressSpaceID(): number {
    return this.view.getUint8(12);
  }

  // 0x0d: u8
  get ErrStatusAddressBitWidth(): number {
    return this.view.getUint8(13);
  }

  // 0x0e: u8
  get ErrStatusAddressBitOffset(): number {
    return this.view.getUint8(14);
  }

  // 0x0f: u8
  get ErrStatusAddressAccessSize(): number {
    return this.view.getUint8(15);
  }

  // 0x10: pointer
  get ErrStatusAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Notify(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u8
  get ReadAckAddressSpaceID(): number {
    return this.view.getUint8(32);
  }

  // 0x21: u8
  get ReadAckAddressBitWidth(): number {
    return this.view.getUint8(33);
  }

  // 0x22: u8
  get ReadAckAddressBitOffset(): number {
    return this.view.getUint8(34);
  }

  // 0x23: u8
  get ReadAckAddressAccessSize(): number {
    return this.view.getUint8(35);
  }

  // 0x24: pad4

  // 0x28: pointer
  get ReadAckAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u64
  get ReadAckPreserveMask(): number | bigint {
    return this.view.getBigUint64(48, true);
  }

  // 0x38: u64
  get ReadAckWriteMask(): number | bigint {
    return this.view.getBigUint64(56, true);
  }

  // 0x00: u16
  set Type(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set Reserved(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set Enabled(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u32
  set ErrStatusBlockLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set RelatedErrorSourceId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u8
  set ErrStatusAddressSpaceID(value: number) {
    this.view.setUint8(12, value);
  }

  // 0x0d: u8
  set ErrStatusAddressBitWidth(value: number) {
    this.view.setUint8(13, value);
  }

  // 0x0e: u8
  set ErrStatusAddressBitOffset(value: number) {
    this.view.setUint8(14, value);
  }

  // 0x0f: u8
  set ErrStatusAddressAccessSize(value: number) {
    this.view.setUint8(15, value);
  }

  // 0x10: pointer
  set ErrStatusAddress(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Notify(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u8
  set ReadAckAddressSpaceID(value: number) {
    this.view.setUint8(32, value);
  }

  // 0x21: u8
  set ReadAckAddressBitWidth(value: number) {
    this.view.setUint8(33, value);
  }

  // 0x22: u8
  set ReadAckAddressBitOffset(value: number) {
    this.view.setUint8(34, value);
  }

  // 0x23: u8
  set ReadAckAddressAccessSize(value: number) {
    this.view.setUint8(35, value);
  }

  // 0x24: pad4

  // 0x28: pointer
  set ReadAckAddress(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: u64
  set ReadAckPreserveMask(value: number | bigint) {
    this.view.setBigUint64(48, util.toBigInt(value), true);
  }

  // 0x38: u64
  set ReadAckWriteMask(value: number | bigint) {
    this.view.setBigUint64(56, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.WHEA_DEVICE_DRIVER_DESCRIPTOR (size: 104)
 */
export interface WHEA_DEVICE_DRIVER_DESCRIPTOR {
  /** u16 */
  Type: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  Enabled: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  Reserved: number;
  /** System.Guid */
  SourceGuid: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  LogTag: number;
  /** u16 */
  Reserved2: number;
  /** u32 */
  PacketLength: number;
  /** u32 */
  PacketCount: number;
  /** ptr */
  PacketBuffer: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Diagnostics.Debug.WHEA_ERROR_SOURCE_CONFIGURATION_DD */
  Config: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  CreatorId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  PartitionId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  MaxSectionDataLength: number;
  /** u32 */
  MaxSectionsPerRecord: number;
  /** ptr */
  PacketStateBuffer: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  OpenHandles: number;
}

export const sizeofWHEA_DEVICE_DRIVER_DESCRIPTOR = 104;

export function allocWHEA_DEVICE_DRIVER_DESCRIPTOR(data?: Partial<WHEA_DEVICE_DRIVER_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofWHEA_DEVICE_DRIVER_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Type !== undefined) view.setUint16(0, Number(data.Type), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Enabled !== undefined) view.setBigUint64(8, data.Enabled === null ? 0n : util.toBigInt(util.toPointer(data.Enabled)), true);
  // 0x10: u8
  if (data?.Reserved !== undefined) view.setUint8(16, Number(data.Reserved));
  // 0x11: pad7
  // 0x18: pointer
  if (data?.SourceGuid !== undefined) view.setBigUint64(24, data.SourceGuid === null ? 0n : util.toBigInt(util.toPointer(data.SourceGuid)), true);
  // 0x20: u16
  if (data?.LogTag !== undefined) view.setUint16(32, Number(data.LogTag), true);
  // 0x22: u16
  if (data?.Reserved2 !== undefined) view.setUint16(34, Number(data.Reserved2), true);
  // 0x24: u32
  if (data?.PacketLength !== undefined) view.setUint32(36, Number(data.PacketLength), true);
  // 0x28: u32
  if (data?.PacketCount !== undefined) view.setUint32(40, Number(data.PacketCount), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.PacketBuffer !== undefined) view.setBigUint64(48, data.PacketBuffer === null ? 0n : util.toBigInt(util.toPointer(data.PacketBuffer)), true);
  // 0x38: pointer
  if (data?.Config !== undefined) view.setBigUint64(56, data.Config === null ? 0n : util.toBigInt(util.toPointer(data.Config)), true);
  // 0x40: pointer
  if (data?.CreatorId !== undefined) view.setBigUint64(64, data.CreatorId === null ? 0n : util.toBigInt(util.toPointer(data.CreatorId)), true);
  // 0x48: pointer
  if (data?.PartitionId !== undefined) view.setBigUint64(72, data.PartitionId === null ? 0n : util.toBigInt(util.toPointer(data.PartitionId)), true);
  // 0x50: u32
  if (data?.MaxSectionDataLength !== undefined) view.setUint32(80, Number(data.MaxSectionDataLength), true);
  // 0x54: u32
  if (data?.MaxSectionsPerRecord !== undefined) view.setUint32(84, Number(data.MaxSectionsPerRecord), true);
  // 0x58: pointer
  if (data?.PacketStateBuffer !== undefined) view.setBigUint64(88, data.PacketStateBuffer === null ? 0n : util.toBigInt(util.toPointer(data.PacketStateBuffer)), true);
  // 0x60: i32
  if (data?.OpenHandles !== undefined) view.setInt32(96, Number(data.OpenHandles), true);
  // 0x64: pad4
  return buf;
}

export class WHEA_DEVICE_DRIVER_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Type(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get Enabled(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u8
  get Reserved(): number {
    return this.view.getUint8(16);
  }

  // 0x11: pad7

  // 0x18: pointer
  get SourceGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u16
  get LogTag(): number {
    return this.view.getUint16(32, true);
  }

  // 0x22: u16
  get Reserved2(): number {
    return this.view.getUint16(34, true);
  }

  // 0x24: u32
  get PacketLength(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get PacketCount(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get PacketBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get Config(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get CreatorId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get PartitionId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: u32
  get MaxSectionDataLength(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get MaxSectionsPerRecord(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: pointer
  get PacketStateBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: i32
  get OpenHandles(): number {
    return this.view.getInt32(96, true);
  }

  // 0x64: pad4

  // 0x00: u16
  set Type(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set Enabled(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u8
  set Reserved(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: pad7

  // 0x18: pointer
  set SourceGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u16
  set LogTag(value: number) {
    this.view.setUint16(32, value, true);
  }

  // 0x22: u16
  set Reserved2(value: number) {
    this.view.setUint16(34, value, true);
  }

  // 0x24: u32
  set PacketLength(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set PacketCount(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set PacketBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set Config(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set CreatorId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set PartitionId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x50: u32
  set MaxSectionDataLength(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set MaxSectionsPerRecord(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: pointer
  set PacketStateBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x60: i32
  set OpenHandles(value: number) {
    this.view.setInt32(96, value, true);
  }

  // 0x64: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.WHEA_IPF_MCA_DESCRIPTOR (size: 8)
 */
export interface WHEA_IPF_MCA_DESCRIPTOR {
  /** u16 */
  Type: number;
  /** u8 */
  Enabled: number;
  /** u8 */
  Reserved: number;
}

export const sizeofWHEA_IPF_MCA_DESCRIPTOR = 8;

export function allocWHEA_IPF_MCA_DESCRIPTOR(data?: Partial<WHEA_IPF_MCA_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofWHEA_IPF_MCA_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Type !== undefined) view.setUint16(0, Number(data.Type), true);
  // 0x02: u8
  if (data?.Enabled !== undefined) view.setUint8(2, Number(data.Enabled));
  // 0x03: u8
  if (data?.Reserved !== undefined) view.setUint8(3, Number(data.Reserved));
  // 0x04: pad4
  return buf;
}

export class WHEA_IPF_MCA_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Type(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get Enabled(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get Reserved(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x00: u16
  set Type(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set Enabled(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set Reserved(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.WHEA_IPF_CMC_DESCRIPTOR (size: 8)
 */
export interface WHEA_IPF_CMC_DESCRIPTOR {
  /** u16 */
  Type: number;
  /** u8 */
  Enabled: number;
  /** u8 */
  Reserved: number;
}

export const sizeofWHEA_IPF_CMC_DESCRIPTOR = 8;

export function allocWHEA_IPF_CMC_DESCRIPTOR(data?: Partial<WHEA_IPF_CMC_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofWHEA_IPF_CMC_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Type !== undefined) view.setUint16(0, Number(data.Type), true);
  // 0x02: u8
  if (data?.Enabled !== undefined) view.setUint8(2, Number(data.Enabled));
  // 0x03: u8
  if (data?.Reserved !== undefined) view.setUint8(3, Number(data.Reserved));
  // 0x04: pad4
  return buf;
}

export class WHEA_IPF_CMC_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Type(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get Enabled(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get Reserved(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x00: u16
  set Type(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set Enabled(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set Reserved(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.WHEA_IPF_CPE_DESCRIPTOR (size: 8)
 */
export interface WHEA_IPF_CPE_DESCRIPTOR {
  /** u16 */
  Type: number;
  /** u8 */
  Enabled: number;
  /** u8 */
  Reserved: number;
}

export const sizeofWHEA_IPF_CPE_DESCRIPTOR = 8;

export function allocWHEA_IPF_CPE_DESCRIPTOR(data?: Partial<WHEA_IPF_CPE_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofWHEA_IPF_CPE_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Type !== undefined) view.setUint16(0, Number(data.Type), true);
  // 0x02: u8
  if (data?.Enabled !== undefined) view.setUint8(2, Number(data.Enabled));
  // 0x03: u8
  if (data?.Reserved !== undefined) view.setUint8(3, Number(data.Reserved));
  // 0x04: pad4
  return buf;
}

export class WHEA_IPF_CPE_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Type(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get Enabled(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get Reserved(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x00: u16
  set Type(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set Enabled(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set Reserved(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_DRIVEINFORMATIONA (size: 96)
 */
export interface NTMS_DRIVEINFORMATIONA {
  /** u32 */
  Number: number;
  /** Windows.Win32.Storage.FileSystem.NtmsDriveState */
  State: NtmsDriveState;
  /** System.Guid */
  DriveType: Uint8Array | Deno.PointerValue | null;
  /** array */
  szDeviceName: Deno.PointerValue | null;
  /** array */
  szSerialNumber: Deno.PointerValue | null;
  /** array */
  szRevision: Deno.PointerValue | null;
  /** u16 */
  ScsiPort: number;
  /** u16 */
  ScsiBus: number;
  /** u16 */
  ScsiTarget: number;
  /** u16 */
  ScsiLun: number;
  /** u32 */
  dwMountCount: number;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  LastCleanedTs: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SavedPartitionId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  Library: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  Reserved: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwDeferDismountDelay: number;
}

export const sizeofNTMS_DRIVEINFORMATIONA = 96;

export function allocNTMS_DRIVEINFORMATIONA(data?: Partial<NTMS_DRIVEINFORMATIONA>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_DRIVEINFORMATIONA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Number !== undefined) view.setUint32(0, Number(data.Number), true);
  // 0x04: i32
  if (data?.State !== undefined) view.setInt32(4, Number(data.State), true);
  // 0x08: pointer
  if (data?.DriveType !== undefined) view.setBigUint64(8, data.DriveType === null ? 0n : util.toBigInt(util.toPointer(data.DriveType)), true);
  // 0x10: pointer
  if (data?.szDeviceName !== undefined) view.setBigUint64(16, data.szDeviceName === null ? 0n : util.toBigInt(util.toPointer(data.szDeviceName)), true);
  // 0x18: pointer
  if (data?.szSerialNumber !== undefined) view.setBigUint64(24, data.szSerialNumber === null ? 0n : util.toBigInt(util.toPointer(data.szSerialNumber)), true);
  // 0x20: pointer
  if (data?.szRevision !== undefined) view.setBigUint64(32, data.szRevision === null ? 0n : util.toBigInt(util.toPointer(data.szRevision)), true);
  // 0x28: u16
  if (data?.ScsiPort !== undefined) view.setUint16(40, Number(data.ScsiPort), true);
  // 0x2a: u16
  if (data?.ScsiBus !== undefined) view.setUint16(42, Number(data.ScsiBus), true);
  // 0x2c: u16
  if (data?.ScsiTarget !== undefined) view.setUint16(44, Number(data.ScsiTarget), true);
  // 0x2e: u16
  if (data?.ScsiLun !== undefined) view.setUint16(46, Number(data.ScsiLun), true);
  // 0x30: u32
  if (data?.dwMountCount !== undefined) view.setUint32(48, Number(data.dwMountCount), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.LastCleanedTs !== undefined) view.setBigUint64(56, data.LastCleanedTs === null ? 0n : util.toBigInt(util.toPointer(data.LastCleanedTs)), true);
  // 0x40: pointer
  if (data?.SavedPartitionId !== undefined) view.setBigUint64(64, data.SavedPartitionId === null ? 0n : util.toBigInt(util.toPointer(data.SavedPartitionId)), true);
  // 0x48: pointer
  if (data?.Library !== undefined) view.setBigUint64(72, data.Library === null ? 0n : util.toBigInt(util.toPointer(data.Library)), true);
  // 0x50: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(80, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  // 0x58: u32
  if (data?.dwDeferDismountDelay !== undefined) view.setUint32(88, Number(data.dwDeferDismountDelay), true);
  // 0x5c: pad4
  return buf;
}

export class NTMS_DRIVEINFORMATIONAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Number(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get State(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get DriveType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get szDeviceName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get szSerialNumber(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get szRevision(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u16
  get ScsiPort(): number {
    return this.view.getUint16(40, true);
  }

  // 0x2a: u16
  get ScsiBus(): number {
    return this.view.getUint16(42, true);
  }

  // 0x2c: u16
  get ScsiTarget(): number {
    return this.view.getUint16(44, true);
  }

  // 0x2e: u16
  get ScsiLun(): number {
    return this.view.getUint16(46, true);
  }

  // 0x30: u32
  get dwMountCount(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get LastCleanedTs(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get SavedPartitionId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get Library(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: u32
  get dwDeferDismountDelay(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: pad4

  // 0x00: u32
  set Number(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set State(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set DriveType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set szDeviceName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set szSerialNumber(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set szRevision(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: u16
  set ScsiPort(value: number) {
    this.view.setUint16(40, value, true);
  }

  // 0x2a: u16
  set ScsiBus(value: number) {
    this.view.setUint16(42, value, true);
  }

  // 0x2c: u16
  set ScsiTarget(value: number) {
    this.view.setUint16(44, value, true);
  }

  // 0x2e: u16
  set ScsiLun(value: number) {
    this.view.setUint16(46, value, true);
  }

  // 0x30: u32
  set dwMountCount(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set LastCleanedTs(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set SavedPartitionId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set Library(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x58: u32
  set dwDeferDismountDelay(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: pad4
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_DRIVETYPEINFORMATIONA (size: 24)
 */
export interface NTMS_DRIVETYPEINFORMATIONA {
  /** array */
  szVendor: Deno.PointerValue | null;
  /** array */
  szProduct: Deno.PointerValue | null;
  /** u32 */
  NumberOfHeads: number;
  /** Windows.Win32.Storage.FileSystem.FILE_DEVICE_TYPE */
  DeviceType: FILE_DEVICE_TYPE;
}

export const sizeofNTMS_DRIVETYPEINFORMATIONA = 24;

export function allocNTMS_DRIVETYPEINFORMATIONA(data?: Partial<NTMS_DRIVETYPEINFORMATIONA>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_DRIVETYPEINFORMATIONA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.szVendor !== undefined) view.setBigUint64(0, data.szVendor === null ? 0n : util.toBigInt(util.toPointer(data.szVendor)), true);
  // 0x08: pointer
  if (data?.szProduct !== undefined) view.setBigUint64(8, data.szProduct === null ? 0n : util.toBigInt(util.toPointer(data.szProduct)), true);
  // 0x10: u32
  if (data?.NumberOfHeads !== undefined) view.setUint32(16, Number(data.NumberOfHeads), true);
  // 0x14: u32
  if (data?.DeviceType !== undefined) view.setUint32(20, Number(data.DeviceType), true);
  return buf;
}

export class NTMS_DRIVETYPEINFORMATIONAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get szVendor(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get szProduct(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get NumberOfHeads(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get DeviceType(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: pointer
  set szVendor(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set szProduct(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set NumberOfHeads(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set DeviceType(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_LIBRARYINFORMATION (size: 112)
 */
export interface NTMS_LIBRARYINFORMATION {
  /** Windows.Win32.Storage.FileSystem.NtmsLibraryType */
  LibraryType: NtmsLibraryType;
  /** System.Guid */
  CleanerSlot: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  CleanerSlotDefault: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  LibrarySupportsDriveCleaning: boolean;
  /** Windows.Win32.Foundation.BOOL */
  BarCodeReaderInstalled: boolean;
  /** Windows.Win32.Storage.FileSystem.NtmsInventoryMethod */
  InventoryMethod: NtmsInventoryMethod;
  /** u32 */
  dwCleanerUsesRemaining: number;
  /** u32 */
  FirstDriveNumber: number;
  /** u32 */
  dwNumberOfDrives: number;
  /** u32 */
  FirstSlotNumber: number;
  /** u32 */
  dwNumberOfSlots: number;
  /** u32 */
  FirstDoorNumber: number;
  /** u32 */
  dwNumberOfDoors: number;
  /** u32 */
  FirstPortNumber: number;
  /** u32 */
  dwNumberOfPorts: number;
  /** u32 */
  FirstChangerNumber: number;
  /** u32 */
  dwNumberOfChangers: number;
  /** u32 */
  dwNumberOfMedia: number;
  /** u32 */
  dwNumberOfMediaTypes: number;
  /** u32 */
  dwNumberOfLibRequests: number;
  /** System.Guid */
  Reserved: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  AutoRecovery: boolean;
  /** Windows.Win32.Storage.FileSystem.NtmsLibraryFlags */
  dwFlags: NtmsLibraryFlags;
}

export const sizeofNTMS_LIBRARYINFORMATION = 112;

export function allocNTMS_LIBRARYINFORMATION(data?: Partial<NTMS_LIBRARYINFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_LIBRARYINFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.LibraryType !== undefined) view.setInt32(0, Number(data.LibraryType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.CleanerSlot !== undefined) view.setBigUint64(8, data.CleanerSlot === null ? 0n : util.toBigInt(util.toPointer(data.CleanerSlot)), true);
  // 0x10: pointer
  if (data?.CleanerSlotDefault !== undefined) view.setBigUint64(16, data.CleanerSlotDefault === null ? 0n : util.toBigInt(util.toPointer(data.CleanerSlotDefault)), true);
  // 0x18: i32
  if (data?.LibrarySupportsDriveCleaning !== undefined) view.setInt32(24, Number(data.LibrarySupportsDriveCleaning), true);
  // 0x1c: i32
  if (data?.BarCodeReaderInstalled !== undefined) view.setInt32(28, Number(data.BarCodeReaderInstalled), true);
  // 0x20: i32
  if (data?.InventoryMethod !== undefined) view.setInt32(32, Number(data.InventoryMethod), true);
  // 0x24: u32
  if (data?.dwCleanerUsesRemaining !== undefined) view.setUint32(36, Number(data.dwCleanerUsesRemaining), true);
  // 0x28: u32
  if (data?.FirstDriveNumber !== undefined) view.setUint32(40, Number(data.FirstDriveNumber), true);
  // 0x2c: u32
  if (data?.dwNumberOfDrives !== undefined) view.setUint32(44, Number(data.dwNumberOfDrives), true);
  // 0x30: u32
  if (data?.FirstSlotNumber !== undefined) view.setUint32(48, Number(data.FirstSlotNumber), true);
  // 0x34: u32
  if (data?.dwNumberOfSlots !== undefined) view.setUint32(52, Number(data.dwNumberOfSlots), true);
  // 0x38: u32
  if (data?.FirstDoorNumber !== undefined) view.setUint32(56, Number(data.FirstDoorNumber), true);
  // 0x3c: u32
  if (data?.dwNumberOfDoors !== undefined) view.setUint32(60, Number(data.dwNumberOfDoors), true);
  // 0x40: u32
  if (data?.FirstPortNumber !== undefined) view.setUint32(64, Number(data.FirstPortNumber), true);
  // 0x44: u32
  if (data?.dwNumberOfPorts !== undefined) view.setUint32(68, Number(data.dwNumberOfPorts), true);
  // 0x48: u32
  if (data?.FirstChangerNumber !== undefined) view.setUint32(72, Number(data.FirstChangerNumber), true);
  // 0x4c: u32
  if (data?.dwNumberOfChangers !== undefined) view.setUint32(76, Number(data.dwNumberOfChangers), true);
  // 0x50: u32
  if (data?.dwNumberOfMedia !== undefined) view.setUint32(80, Number(data.dwNumberOfMedia), true);
  // 0x54: u32
  if (data?.dwNumberOfMediaTypes !== undefined) view.setUint32(84, Number(data.dwNumberOfMediaTypes), true);
  // 0x58: u32
  if (data?.dwNumberOfLibRequests !== undefined) view.setUint32(88, Number(data.dwNumberOfLibRequests), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(96, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  // 0x68: i32
  if (data?.AutoRecovery !== undefined) view.setInt32(104, Number(data.AutoRecovery), true);
  // 0x6c: i32
  if (data?.dwFlags !== undefined) view.setInt32(108, Number(data.dwFlags), true);
  return buf;
}

export class NTMS_LIBRARYINFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get LibraryType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get CleanerSlot(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get CleanerSlotDefault(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: i32
  get LibrarySupportsDriveCleaning(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get BarCodeReaderInstalled(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get InventoryMethod(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: u32
  get dwCleanerUsesRemaining(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get FirstDriveNumber(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwNumberOfDrives(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get FirstSlotNumber(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwNumberOfSlots(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get FirstDoorNumber(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwNumberOfDoors(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get FirstPortNumber(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get dwNumberOfPorts(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get FirstChangerNumber(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get dwNumberOfChangers(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get dwNumberOfMedia(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get dwNumberOfMediaTypes(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get dwNumberOfLibRequests(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: i32
  get AutoRecovery(): number {
    return this.view.getInt32(104, true);
  }

  // 0x6c: i32
  get dwFlags(): number {
    return this.view.getInt32(108, true);
  }

  // 0x00: i32
  set LibraryType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set CleanerSlot(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set CleanerSlotDefault(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: i32
  set LibrarySupportsDriveCleaning(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set BarCodeReaderInstalled(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set InventoryMethod(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: u32
  set dwCleanerUsesRemaining(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set FirstDriveNumber(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwNumberOfDrives(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set FirstSlotNumber(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwNumberOfSlots(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set FirstDoorNumber(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwNumberOfDoors(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set FirstPortNumber(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set dwNumberOfPorts(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set FirstChangerNumber(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set dwNumberOfChangers(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set dwNumberOfMedia(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set dwNumberOfMediaTypes(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set dwNumberOfLibRequests(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x68: i32
  set AutoRecovery(value: number) {
    this.view.setInt32(104, value, true);
  }

  // 0x6c: i32
  set dwFlags(value: number) {
    this.view.setInt32(108, value, true);
  }
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_CHANGERINFORMATIONA (size: 56)
 */
export interface NTMS_CHANGERINFORMATIONA {
  /** u32 */
  Number: number;
  /** System.Guid */
  ChangerType: Uint8Array | Deno.PointerValue | null;
  /** array */
  szSerialNumber: Deno.PointerValue | null;
  /** array */
  szRevision: Deno.PointerValue | null;
  /** array */
  szDeviceName: Deno.PointerValue | null;
  /** u16 */
  ScsiPort: number;
  /** u16 */
  ScsiBus: number;
  /** u16 */
  ScsiTarget: number;
  /** u16 */
  ScsiLun: number;
  /** System.Guid */
  Library: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNTMS_CHANGERINFORMATIONA = 56;

export function allocNTMS_CHANGERINFORMATIONA(data?: Partial<NTMS_CHANGERINFORMATIONA>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_CHANGERINFORMATIONA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Number !== undefined) view.setUint32(0, Number(data.Number), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ChangerType !== undefined) view.setBigUint64(8, data.ChangerType === null ? 0n : util.toBigInt(util.toPointer(data.ChangerType)), true);
  // 0x10: pointer
  if (data?.szSerialNumber !== undefined) view.setBigUint64(16, data.szSerialNumber === null ? 0n : util.toBigInt(util.toPointer(data.szSerialNumber)), true);
  // 0x18: pointer
  if (data?.szRevision !== undefined) view.setBigUint64(24, data.szRevision === null ? 0n : util.toBigInt(util.toPointer(data.szRevision)), true);
  // 0x20: pointer
  if (data?.szDeviceName !== undefined) view.setBigUint64(32, data.szDeviceName === null ? 0n : util.toBigInt(util.toPointer(data.szDeviceName)), true);
  // 0x28: u16
  if (data?.ScsiPort !== undefined) view.setUint16(40, Number(data.ScsiPort), true);
  // 0x2a: u16
  if (data?.ScsiBus !== undefined) view.setUint16(42, Number(data.ScsiBus), true);
  // 0x2c: u16
  if (data?.ScsiTarget !== undefined) view.setUint16(44, Number(data.ScsiTarget), true);
  // 0x2e: u16
  if (data?.ScsiLun !== undefined) view.setUint16(46, Number(data.ScsiLun), true);
  // 0x30: pointer
  if (data?.Library !== undefined) view.setBigUint64(48, data.Library === null ? 0n : util.toBigInt(util.toPointer(data.Library)), true);
  return buf;
}

export class NTMS_CHANGERINFORMATIONAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Number(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ChangerType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get szSerialNumber(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get szRevision(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get szDeviceName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u16
  get ScsiPort(): number {
    return this.view.getUint16(40, true);
  }

  // 0x2a: u16
  get ScsiBus(): number {
    return this.view.getUint16(42, true);
  }

  // 0x2c: u16
  get ScsiTarget(): number {
    return this.view.getUint16(44, true);
  }

  // 0x2e: u16
  get ScsiLun(): number {
    return this.view.getUint16(46, true);
  }

  // 0x30: pointer
  get Library(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Number(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ChangerType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set szSerialNumber(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set szRevision(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set szDeviceName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: u16
  set ScsiPort(value: number) {
    this.view.setUint16(40, value, true);
  }

  // 0x2a: u16
  set ScsiBus(value: number) {
    this.view.setUint16(42, value, true);
  }

  // 0x2c: u16
  set ScsiTarget(value: number) {
    this.view.setUint16(44, value, true);
  }

  // 0x2e: u16
  set ScsiLun(value: number) {
    this.view.setUint16(46, value, true);
  }

  // 0x30: pointer
  set Library(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_CHANGERTYPEINFORMATIONA (size: 24)
 */
export interface NTMS_CHANGERTYPEINFORMATIONA {
  /** array */
  szVendor: Deno.PointerValue | null;
  /** array */
  szProduct: Deno.PointerValue | null;
  /** u32 */
  DeviceType: number;
}

export const sizeofNTMS_CHANGERTYPEINFORMATIONA = 24;

export function allocNTMS_CHANGERTYPEINFORMATIONA(data?: Partial<NTMS_CHANGERTYPEINFORMATIONA>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_CHANGERTYPEINFORMATIONA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.szVendor !== undefined) view.setBigUint64(0, data.szVendor === null ? 0n : util.toBigInt(util.toPointer(data.szVendor)), true);
  // 0x08: pointer
  if (data?.szProduct !== undefined) view.setBigUint64(8, data.szProduct === null ? 0n : util.toBigInt(util.toPointer(data.szProduct)), true);
  // 0x10: u32
  if (data?.DeviceType !== undefined) view.setUint32(16, Number(data.DeviceType), true);
  // 0x14: pad4
  return buf;
}

export class NTMS_CHANGERTYPEINFORMATIONAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get szVendor(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get szProduct(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get DeviceType(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set szVendor(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set szProduct(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set DeviceType(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_STORAGESLOTINFORMATION (size: 16)
 */
export interface NTMS_STORAGESLOTINFORMATION {
  /** u32 */
  Number: number;
  /** u32 */
  State: number;
  /** System.Guid */
  Library: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNTMS_STORAGESLOTINFORMATION = 16;

export function allocNTMS_STORAGESLOTINFORMATION(data?: Partial<NTMS_STORAGESLOTINFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_STORAGESLOTINFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Number !== undefined) view.setUint32(0, Number(data.Number), true);
  // 0x04: u32
  if (data?.State !== undefined) view.setUint32(4, Number(data.State), true);
  // 0x08: pointer
  if (data?.Library !== undefined) view.setBigUint64(8, data.Library === null ? 0n : util.toBigInt(util.toPointer(data.Library)), true);
  return buf;
}

export class NTMS_STORAGESLOTINFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Number(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get State(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Library(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Number(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set State(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Library(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_IEDOORINFORMATION (size: 24)
 */
export interface NTMS_IEDOORINFORMATION {
  /** u32 */
  Number: number;
  /** Windows.Win32.Storage.FileSystem.NtmsDoorState */
  State: NtmsDoorState;
  /** u16 */
  MaxOpenSecs: number;
  /** System.Guid */
  Library: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNTMS_IEDOORINFORMATION = 24;

export function allocNTMS_IEDOORINFORMATION(data?: Partial<NTMS_IEDOORINFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_IEDOORINFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Number !== undefined) view.setUint32(0, Number(data.Number), true);
  // 0x04: i32
  if (data?.State !== undefined) view.setInt32(4, Number(data.State), true);
  // 0x08: u16
  if (data?.MaxOpenSecs !== undefined) view.setUint16(8, Number(data.MaxOpenSecs), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.Library !== undefined) view.setBigUint64(16, data.Library === null ? 0n : util.toBigInt(util.toPointer(data.Library)), true);
  return buf;
}

export class NTMS_IEDOORINFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Number(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get State(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u16
  get MaxOpenSecs(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  get Library(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Number(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set State(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u16
  set MaxOpenSecs(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  set Library(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_IEPORTINFORMATION (size: 24)
 */
export interface NTMS_IEPORTINFORMATION {
  /** u32 */
  Number: number;
  /** Windows.Win32.Storage.FileSystem.NtmsPortContent */
  Content: NtmsPortContent;
  /** Windows.Win32.Storage.FileSystem.NtmsPortPosition */
  Position: NtmsPortPosition;
  /** u16 */
  MaxExtendSecs: number;
  /** System.Guid */
  Library: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNTMS_IEPORTINFORMATION = 24;

export function allocNTMS_IEPORTINFORMATION(data?: Partial<NTMS_IEPORTINFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_IEPORTINFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Number !== undefined) view.setUint32(0, Number(data.Number), true);
  // 0x04: i32
  if (data?.Content !== undefined) view.setInt32(4, Number(data.Content), true);
  // 0x08: i32
  if (data?.Position !== undefined) view.setInt32(8, Number(data.Position), true);
  // 0x0c: u16
  if (data?.MaxExtendSecs !== undefined) view.setUint16(12, Number(data.MaxExtendSecs), true);
  // 0x0e: pad2
  // 0x10: pointer
  if (data?.Library !== undefined) view.setBigUint64(16, data.Library === null ? 0n : util.toBigInt(util.toPointer(data.Library)), true);
  return buf;
}

export class NTMS_IEPORTINFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Number(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get Content(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get Position(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u16
  get MaxExtendSecs(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: pad2

  // 0x10: pointer
  get Library(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Number(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set Content(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set Position(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u16
  set MaxExtendSecs(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: pad2

  // 0x10: pointer
  set Library(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_PMIDINFORMATIONA (size: 96)
 */
export interface NTMS_PMIDINFORMATIONA {
  /** System.Guid */
  CurrentLibrary: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  MediaPool: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  Location: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  LocationType: number;
  /** System.Guid */
  MediaType: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  HomeSlot: Uint8Array | Deno.PointerValue | null;
  /** array */
  szBarCode: Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NtmsBarCodeState */
  BarCodeState: NtmsBarCodeState;
  /** array */
  szSequenceNumber: Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NtmsMediaState */
  MediaState: NtmsMediaState;
  /** u32 */
  dwNumberOfPartitions: number;
  /** u32 */
  dwMediaTypeCode: number;
  /** u32 */
  dwDensityCode: number;
  /** System.Guid */
  MountedPartition: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNTMS_PMIDINFORMATIONA = 96;

export function allocNTMS_PMIDINFORMATIONA(data?: Partial<NTMS_PMIDINFORMATIONA>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_PMIDINFORMATIONA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CurrentLibrary !== undefined) view.setBigUint64(0, data.CurrentLibrary === null ? 0n : util.toBigInt(util.toPointer(data.CurrentLibrary)), true);
  // 0x08: pointer
  if (data?.MediaPool !== undefined) view.setBigUint64(8, data.MediaPool === null ? 0n : util.toBigInt(util.toPointer(data.MediaPool)), true);
  // 0x10: pointer
  if (data?.Location !== undefined) view.setBigUint64(16, data.Location === null ? 0n : util.toBigInt(util.toPointer(data.Location)), true);
  // 0x18: u32
  if (data?.LocationType !== undefined) view.setUint32(24, Number(data.LocationType), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.MediaType !== undefined) view.setBigUint64(32, data.MediaType === null ? 0n : util.toBigInt(util.toPointer(data.MediaType)), true);
  // 0x28: pointer
  if (data?.HomeSlot !== undefined) view.setBigUint64(40, data.HomeSlot === null ? 0n : util.toBigInt(util.toPointer(data.HomeSlot)), true);
  // 0x30: pointer
  if (data?.szBarCode !== undefined) view.setBigUint64(48, data.szBarCode === null ? 0n : util.toBigInt(util.toPointer(data.szBarCode)), true);
  // 0x38: i32
  if (data?.BarCodeState !== undefined) view.setInt32(56, Number(data.BarCodeState), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.szSequenceNumber !== undefined) view.setBigUint64(64, data.szSequenceNumber === null ? 0n : util.toBigInt(util.toPointer(data.szSequenceNumber)), true);
  // 0x48: i32
  if (data?.MediaState !== undefined) view.setInt32(72, Number(data.MediaState), true);
  // 0x4c: u32
  if (data?.dwNumberOfPartitions !== undefined) view.setUint32(76, Number(data.dwNumberOfPartitions), true);
  // 0x50: u32
  if (data?.dwMediaTypeCode !== undefined) view.setUint32(80, Number(data.dwMediaTypeCode), true);
  // 0x54: u32
  if (data?.dwDensityCode !== undefined) view.setUint32(84, Number(data.dwDensityCode), true);
  // 0x58: pointer
  if (data?.MountedPartition !== undefined) view.setBigUint64(88, data.MountedPartition === null ? 0n : util.toBigInt(util.toPointer(data.MountedPartition)), true);
  return buf;
}

export class NTMS_PMIDINFORMATIONAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CurrentLibrary(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get MediaPool(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Location(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get LocationType(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get MediaType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get HomeSlot(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get szBarCode(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: i32
  get BarCodeState(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get szSequenceNumber(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: i32
  get MediaState(): number {
    return this.view.getInt32(72, true);
  }

  // 0x4c: u32
  get dwNumberOfPartitions(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get dwMediaTypeCode(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get dwDensityCode(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: pointer
  get MountedPartition(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set CurrentLibrary(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set MediaPool(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Location(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set LocationType(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set MediaType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set HomeSlot(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set szBarCode(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: i32
  set BarCodeState(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set szSequenceNumber(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: i32
  set MediaState(value: number) {
    this.view.setInt32(72, value, true);
  }

  // 0x4c: u32
  set dwNumberOfPartitions(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set dwMediaTypeCode(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set dwDensityCode(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: pointer
  set MountedPartition(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_LMIDINFORMATION (size: 16)
 */
export interface NTMS_LMIDINFORMATION {
  /** System.Guid */
  MediaPool: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwNumberOfPartitions: number;
}

export const sizeofNTMS_LMIDINFORMATION = 16;

export function allocNTMS_LMIDINFORMATION(data?: Partial<NTMS_LMIDINFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_LMIDINFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.MediaPool !== undefined) view.setBigUint64(0, data.MediaPool === null ? 0n : util.toBigInt(util.toPointer(data.MediaPool)), true);
  // 0x08: u32
  if (data?.dwNumberOfPartitions !== undefined) view.setUint32(8, Number(data.dwNumberOfPartitions), true);
  // 0x0c: pad4
  return buf;
}

export class NTMS_LMIDINFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get MediaPool(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwNumberOfPartitions(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set MediaPool(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set dwNumberOfPartitions(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_PARTITIONINFORMATIONA (size: 72)
 */
export interface NTMS_PARTITIONINFORMATIONA {
  /** System.Guid */
  PhysicalMedia: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  LogicalMedia: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NtmsPartitionState */
  State: NtmsPartitionState;
  /** u16 */
  Side: number;
  /** u32 */
  dwOmidLabelIdLength: number;
  /** array */
  OmidLabelId: Deno.PointerValue | null;
  /** array */
  szOmidLabelType: Deno.PointerValue | null;
  /** array */
  szOmidLabelInfo: Deno.PointerValue | null;
  /** u32 */
  dwMountCount: number;
  /** u32 */
  dwAllocateCount: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  Capacity: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNTMS_PARTITIONINFORMATIONA = 72;

export function allocNTMS_PARTITIONINFORMATIONA(data?: Partial<NTMS_PARTITIONINFORMATIONA>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_PARTITIONINFORMATIONA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PhysicalMedia !== undefined) view.setBigUint64(0, data.PhysicalMedia === null ? 0n : util.toBigInt(util.toPointer(data.PhysicalMedia)), true);
  // 0x08: pointer
  if (data?.LogicalMedia !== undefined) view.setBigUint64(8, data.LogicalMedia === null ? 0n : util.toBigInt(util.toPointer(data.LogicalMedia)), true);
  // 0x10: i32
  if (data?.State !== undefined) view.setInt32(16, Number(data.State), true);
  // 0x14: u16
  if (data?.Side !== undefined) view.setUint16(20, Number(data.Side), true);
  // 0x16: u32
  if (data?.dwOmidLabelIdLength !== undefined) view.setUint32(22, Number(data.dwOmidLabelIdLength), true);
  // 0x1a: pad6
  // 0x20: pointer
  if (data?.OmidLabelId !== undefined) view.setBigUint64(32, data.OmidLabelId === null ? 0n : util.toBigInt(util.toPointer(data.OmidLabelId)), true);
  // 0x28: pointer
  if (data?.szOmidLabelType !== undefined) view.setBigUint64(40, data.szOmidLabelType === null ? 0n : util.toBigInt(util.toPointer(data.szOmidLabelType)), true);
  // 0x30: pointer
  if (data?.szOmidLabelInfo !== undefined) view.setBigUint64(48, data.szOmidLabelInfo === null ? 0n : util.toBigInt(util.toPointer(data.szOmidLabelInfo)), true);
  // 0x38: u32
  if (data?.dwMountCount !== undefined) view.setUint32(56, Number(data.dwMountCount), true);
  // 0x3c: u32
  if (data?.dwAllocateCount !== undefined) view.setUint32(60, Number(data.dwAllocateCount), true);
  // 0x40: pointer
  if (data?.Capacity !== undefined) view.setBigUint64(64, data.Capacity === null ? 0n : util.toBigInt(util.toPointer(data.Capacity)), true);
  return buf;
}

export class NTMS_PARTITIONINFORMATIONAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PhysicalMedia(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get LogicalMedia(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i32
  get State(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u16
  get Side(): number {
    return this.view.getUint16(20, true);
  }

  // 0x16: u32
  get dwOmidLabelIdLength(): number {
    return this.view.getUint32(22, true);
  }

  // 0x1a: pad6

  // 0x20: pointer
  get OmidLabelId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get szOmidLabelType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get szOmidLabelInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get dwMountCount(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwAllocateCount(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: pointer
  get Capacity(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set PhysicalMedia(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set LogicalMedia(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: i32
  set State(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u16
  set Side(value: number) {
    this.view.setUint16(20, value, true);
  }

  // 0x16: u32
  set dwOmidLabelIdLength(value: number) {
    this.view.setUint32(22, value, true);
  }

  // 0x1a: pad6

  // 0x20: pointer
  set OmidLabelId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set szOmidLabelType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set szOmidLabelInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set dwMountCount(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwAllocateCount(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: pointer
  set Capacity(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_MEDIAPOOLINFORMATION (size: 48)
 */
export interface NTMS_MEDIAPOOLINFORMATION {
  /** u32 */
  PoolType: number;
  /** System.Guid */
  MediaType: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  Parent: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  AllocationPolicy: number;
  /** u32 */
  DeallocationPolicy: number;
  /** u32 */
  dwMaxAllocates: number;
  /** u32 */
  dwNumberOfPhysicalMedia: number;
  /** u32 */
  dwNumberOfLogicalMedia: number;
  /** u32 */
  dwNumberOfMediaPools: number;
}

export const sizeofNTMS_MEDIAPOOLINFORMATION = 48;

export function allocNTMS_MEDIAPOOLINFORMATION(data?: Partial<NTMS_MEDIAPOOLINFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_MEDIAPOOLINFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PoolType !== undefined) view.setUint32(0, Number(data.PoolType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.MediaType !== undefined) view.setBigUint64(8, data.MediaType === null ? 0n : util.toBigInt(util.toPointer(data.MediaType)), true);
  // 0x10: pointer
  if (data?.Parent !== undefined) view.setBigUint64(16, data.Parent === null ? 0n : util.toBigInt(util.toPointer(data.Parent)), true);
  // 0x18: u32
  if (data?.AllocationPolicy !== undefined) view.setUint32(24, Number(data.AllocationPolicy), true);
  // 0x1c: u32
  if (data?.DeallocationPolicy !== undefined) view.setUint32(28, Number(data.DeallocationPolicy), true);
  // 0x20: u32
  if (data?.dwMaxAllocates !== undefined) view.setUint32(32, Number(data.dwMaxAllocates), true);
  // 0x24: u32
  if (data?.dwNumberOfPhysicalMedia !== undefined) view.setUint32(36, Number(data.dwNumberOfPhysicalMedia), true);
  // 0x28: u32
  if (data?.dwNumberOfLogicalMedia !== undefined) view.setUint32(40, Number(data.dwNumberOfLogicalMedia), true);
  // 0x2c: u32
  if (data?.dwNumberOfMediaPools !== undefined) view.setUint32(44, Number(data.dwNumberOfMediaPools), true);
  return buf;
}

export class NTMS_MEDIAPOOLINFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get PoolType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get MediaType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Parent(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get AllocationPolicy(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get DeallocationPolicy(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwMaxAllocates(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwNumberOfPhysicalMedia(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get dwNumberOfLogicalMedia(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwNumberOfMediaPools(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: u32
  set PoolType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set MediaType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Parent(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set AllocationPolicy(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set DeallocationPolicy(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwMaxAllocates(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwNumberOfPhysicalMedia(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set dwNumberOfLogicalMedia(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwNumberOfMediaPools(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_MEDIATYPEINFORMATION (size: 16)
 */
export interface NTMS_MEDIATYPEINFORMATION {
  /** u32 */
  MediaType: number;
  /** u32 */
  NumberOfSides: number;
  /** Windows.Win32.Storage.FileSystem.NtmsReadWriteCharacteristics */
  ReadWriteCharacteristics: NtmsReadWriteCharacteristics;
  /** Windows.Win32.Storage.FileSystem.FILE_DEVICE_TYPE */
  DeviceType: FILE_DEVICE_TYPE;
}

export const sizeofNTMS_MEDIATYPEINFORMATION = 16;

export function allocNTMS_MEDIATYPEINFORMATION(data?: Partial<NTMS_MEDIATYPEINFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_MEDIATYPEINFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MediaType !== undefined) view.setUint32(0, Number(data.MediaType), true);
  // 0x04: u32
  if (data?.NumberOfSides !== undefined) view.setUint32(4, Number(data.NumberOfSides), true);
  // 0x08: i32
  if (data?.ReadWriteCharacteristics !== undefined) view.setInt32(8, Number(data.ReadWriteCharacteristics), true);
  // 0x0c: u32
  if (data?.DeviceType !== undefined) view.setUint32(12, Number(data.DeviceType), true);
  return buf;
}

export class NTMS_MEDIATYPEINFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MediaType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NumberOfSides(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get ReadWriteCharacteristics(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get DeviceType(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set MediaType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NumberOfSides(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set ReadWriteCharacteristics(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set DeviceType(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_LIBREQUESTINFORMATIONA (size: 120)
 */
export interface NTMS_LIBREQUESTINFORMATIONA {
  /** Windows.Win32.Storage.FileSystem.NtmsLmOperation */
  OperationCode: NtmsLmOperation;
  /** u32 */
  OperationOption: number;
  /** Windows.Win32.Storage.FileSystem.NtmsLmState */
  State: NtmsLmState;
  /** System.Guid */
  PartitionId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  DriveId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  PhysMediaId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  Library: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SlotId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  TimeQueued: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  TimeCompleted: Uint8Array | Deno.PointerValue | null;
  /** array */
  szApplication: Deno.PointerValue | null;
  /** array */
  szUser: Deno.PointerValue | null;
  /** array */
  szComputer: Deno.PointerValue | null;
  /** u32 */
  dwErrorCode: number;
  /** System.Guid */
  WorkItemId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwPriority: number;
}

export const sizeofNTMS_LIBREQUESTINFORMATIONA = 120;

export function allocNTMS_LIBREQUESTINFORMATIONA(data?: Partial<NTMS_LIBREQUESTINFORMATIONA>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_LIBREQUESTINFORMATIONA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.OperationCode !== undefined) view.setInt32(0, Number(data.OperationCode), true);
  // 0x04: u32
  if (data?.OperationOption !== undefined) view.setUint32(4, Number(data.OperationOption), true);
  // 0x08: i32
  if (data?.State !== undefined) view.setInt32(8, Number(data.State), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.PartitionId !== undefined) view.setBigUint64(16, data.PartitionId === null ? 0n : util.toBigInt(util.toPointer(data.PartitionId)), true);
  // 0x18: pointer
  if (data?.DriveId !== undefined) view.setBigUint64(24, data.DriveId === null ? 0n : util.toBigInt(util.toPointer(data.DriveId)), true);
  // 0x20: pointer
  if (data?.PhysMediaId !== undefined) view.setBigUint64(32, data.PhysMediaId === null ? 0n : util.toBigInt(util.toPointer(data.PhysMediaId)), true);
  // 0x28: pointer
  if (data?.Library !== undefined) view.setBigUint64(40, data.Library === null ? 0n : util.toBigInt(util.toPointer(data.Library)), true);
  // 0x30: pointer
  if (data?.SlotId !== undefined) view.setBigUint64(48, data.SlotId === null ? 0n : util.toBigInt(util.toPointer(data.SlotId)), true);
  // 0x38: pointer
  if (data?.TimeQueued !== undefined) view.setBigUint64(56, data.TimeQueued === null ? 0n : util.toBigInt(util.toPointer(data.TimeQueued)), true);
  // 0x40: pointer
  if (data?.TimeCompleted !== undefined) view.setBigUint64(64, data.TimeCompleted === null ? 0n : util.toBigInt(util.toPointer(data.TimeCompleted)), true);
  // 0x48: pointer
  if (data?.szApplication !== undefined) view.setBigUint64(72, data.szApplication === null ? 0n : util.toBigInt(util.toPointer(data.szApplication)), true);
  // 0x50: pointer
  if (data?.szUser !== undefined) view.setBigUint64(80, data.szUser === null ? 0n : util.toBigInt(util.toPointer(data.szUser)), true);
  // 0x58: pointer
  if (data?.szComputer !== undefined) view.setBigUint64(88, data.szComputer === null ? 0n : util.toBigInt(util.toPointer(data.szComputer)), true);
  // 0x60: u32
  if (data?.dwErrorCode !== undefined) view.setUint32(96, Number(data.dwErrorCode), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.WorkItemId !== undefined) view.setBigUint64(104, data.WorkItemId === null ? 0n : util.toBigInt(util.toPointer(data.WorkItemId)), true);
  // 0x70: u32
  if (data?.dwPriority !== undefined) view.setUint32(112, Number(data.dwPriority), true);
  // 0x74: pad4
  return buf;
}

export class NTMS_LIBREQUESTINFORMATIONAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get OperationCode(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get OperationOption(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get State(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get PartitionId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get DriveId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get PhysMediaId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get Library(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get SlotId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get TimeQueued(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get TimeCompleted(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get szApplication(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get szUser(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get szComputer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: u32
  get dwErrorCode(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  get WorkItemId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: u32
  get dwPriority(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: pad4

  // 0x00: i32
  set OperationCode(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set OperationOption(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set State(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set PartitionId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set DriveId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set PhysMediaId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set Library(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set SlotId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set TimeQueued(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set TimeCompleted(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set szApplication(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set szUser(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set szComputer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x60: u32
  set dwErrorCode(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  set WorkItemId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x70: u32
  set dwPriority(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: pad4
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_OPREQUESTINFORMATIONA (size: 88)
 */
export interface NTMS_OPREQUESTINFORMATIONA {
  /** Windows.Win32.Storage.FileSystem.NtmsOpreqCommand */
  Request: NtmsOpreqCommand;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  Submitted: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NtmsOpreqState */
  State: NtmsOpreqState;
  /** array */
  szMessage: Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NtmsObjectsTypes */
  Arg1Type: NtmsObjectsTypes;
  /** System.Guid */
  Arg1: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NtmsObjectsTypes */
  Arg2Type: NtmsObjectsTypes;
  /** System.Guid */
  Arg2: Uint8Array | Deno.PointerValue | null;
  /** array */
  szApplication: Deno.PointerValue | null;
  /** array */
  szUser: Deno.PointerValue | null;
  /** array */
  szComputer: Deno.PointerValue | null;
}

export const sizeofNTMS_OPREQUESTINFORMATIONA = 88;

export function allocNTMS_OPREQUESTINFORMATIONA(data?: Partial<NTMS_OPREQUESTINFORMATIONA>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_OPREQUESTINFORMATIONA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Request !== undefined) view.setInt32(0, Number(data.Request), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Submitted !== undefined) view.setBigUint64(8, data.Submitted === null ? 0n : util.toBigInt(util.toPointer(data.Submitted)), true);
  // 0x10: i32
  if (data?.State !== undefined) view.setInt32(16, Number(data.State), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.szMessage !== undefined) view.setBigUint64(24, data.szMessage === null ? 0n : util.toBigInt(util.toPointer(data.szMessage)), true);
  // 0x20: i32
  if (data?.Arg1Type !== undefined) view.setInt32(32, Number(data.Arg1Type), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.Arg1 !== undefined) view.setBigUint64(40, data.Arg1 === null ? 0n : util.toBigInt(util.toPointer(data.Arg1)), true);
  // 0x30: i32
  if (data?.Arg2Type !== undefined) view.setInt32(48, Number(data.Arg2Type), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.Arg2 !== undefined) view.setBigUint64(56, data.Arg2 === null ? 0n : util.toBigInt(util.toPointer(data.Arg2)), true);
  // 0x40: pointer
  if (data?.szApplication !== undefined) view.setBigUint64(64, data.szApplication === null ? 0n : util.toBigInt(util.toPointer(data.szApplication)), true);
  // 0x48: pointer
  if (data?.szUser !== undefined) view.setBigUint64(72, data.szUser === null ? 0n : util.toBigInt(util.toPointer(data.szUser)), true);
  // 0x50: pointer
  if (data?.szComputer !== undefined) view.setBigUint64(80, data.szComputer === null ? 0n : util.toBigInt(util.toPointer(data.szComputer)), true);
  return buf;
}

export class NTMS_OPREQUESTINFORMATIONAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Request(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Submitted(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i32
  get State(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get szMessage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: i32
  get Arg1Type(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get Arg1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: i32
  get Arg2Type(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get Arg2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get szApplication(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get szUser(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get szComputer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set Request(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Submitted(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: i32
  set State(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set szMessage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: i32
  set Arg1Type(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set Arg1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: i32
  set Arg2Type(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set Arg2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set szApplication(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set szUser(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set szComputer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_COMPUTERINFORMATION (size: 24)
 */
export interface NTMS_COMPUTERINFORMATION {
  /** u32 */
  dwLibRequestPurgeTime: number;
  /** u32 */
  dwOpRequestPurgeTime: number;
  /** u32 */
  dwLibRequestFlags: number;
  /** u32 */
  dwOpRequestFlags: number;
  /** u32 */
  dwMediaPoolPolicy: number;
}

export const sizeofNTMS_COMPUTERINFORMATION = 24;

export function allocNTMS_COMPUTERINFORMATION(data?: Partial<NTMS_COMPUTERINFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_COMPUTERINFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLibRequestPurgeTime !== undefined) view.setUint32(0, Number(data.dwLibRequestPurgeTime), true);
  // 0x04: u32
  if (data?.dwOpRequestPurgeTime !== undefined) view.setUint32(4, Number(data.dwOpRequestPurgeTime), true);
  // 0x08: u32
  if (data?.dwLibRequestFlags !== undefined) view.setUint32(8, Number(data.dwLibRequestFlags), true);
  // 0x0c: u32
  if (data?.dwOpRequestFlags !== undefined) view.setUint32(12, Number(data.dwOpRequestFlags), true);
  // 0x10: u32
  if (data?.dwMediaPoolPolicy !== undefined) view.setUint32(16, Number(data.dwMediaPoolPolicy), true);
  // 0x14: pad4
  return buf;
}

export class NTMS_COMPUTERINFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLibRequestPurgeTime(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwOpRequestPurgeTime(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwLibRequestFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwOpRequestFlags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwMediaPoolPolicy(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set dwLibRequestPurgeTime(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwOpRequestPurgeTime(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwLibRequestFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwOpRequestFlags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwMediaPoolPolicy(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * _Info_e__Union (size: 128)
 */
export interface _Info_e__Union {
  /** Windows.Win32.Storage.FileSystem.NTMS_DRIVEINFORMATIONA */
  Drive: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NTMS_DRIVETYPEINFORMATIONA */
  DriveType: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NTMS_LIBRARYINFORMATION */
  Library: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NTMS_CHANGERINFORMATIONA */
  Changer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NTMS_CHANGERTYPEINFORMATIONA */
  ChangerType: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NTMS_STORAGESLOTINFORMATION */
  StorageSlot: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NTMS_IEDOORINFORMATION */
  IEDoor: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NTMS_IEPORTINFORMATION */
  IEPort: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NTMS_PMIDINFORMATIONA */
  PhysicalMedia: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NTMS_LMIDINFORMATION */
  LogicalMedia: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NTMS_PARTITIONINFORMATIONA */
  Partition: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NTMS_MEDIAPOOLINFORMATION */
  MediaPool: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NTMS_MEDIATYPEINFORMATION */
  MediaType: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NTMS_LIBREQUESTINFORMATIONA */
  LibRequest: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NTMS_OPREQUESTINFORMATIONA */
  OpRequest: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NTMS_COMPUTERINFORMATION */
  Computer: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Info_e__Union = 128;

export function alloc_Info_e__Union(data?: Partial<_Info_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Info_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Drive !== undefined) view.setBigUint64(0, data.Drive === null ? 0n : util.toBigInt(util.toPointer(data.Drive)), true);
  // 0x08: pointer
  if (data?.DriveType !== undefined) view.setBigUint64(8, data.DriveType === null ? 0n : util.toBigInt(util.toPointer(data.DriveType)), true);
  // 0x10: pointer
  if (data?.Library !== undefined) view.setBigUint64(16, data.Library === null ? 0n : util.toBigInt(util.toPointer(data.Library)), true);
  // 0x18: pointer
  if (data?.Changer !== undefined) view.setBigUint64(24, data.Changer === null ? 0n : util.toBigInt(util.toPointer(data.Changer)), true);
  // 0x20: pointer
  if (data?.ChangerType !== undefined) view.setBigUint64(32, data.ChangerType === null ? 0n : util.toBigInt(util.toPointer(data.ChangerType)), true);
  // 0x28: pointer
  if (data?.StorageSlot !== undefined) view.setBigUint64(40, data.StorageSlot === null ? 0n : util.toBigInt(util.toPointer(data.StorageSlot)), true);
  // 0x30: pointer
  if (data?.IEDoor !== undefined) view.setBigUint64(48, data.IEDoor === null ? 0n : util.toBigInt(util.toPointer(data.IEDoor)), true);
  // 0x38: pointer
  if (data?.IEPort !== undefined) view.setBigUint64(56, data.IEPort === null ? 0n : util.toBigInt(util.toPointer(data.IEPort)), true);
  // 0x40: pointer
  if (data?.PhysicalMedia !== undefined) view.setBigUint64(64, data.PhysicalMedia === null ? 0n : util.toBigInt(util.toPointer(data.PhysicalMedia)), true);
  // 0x48: pointer
  if (data?.LogicalMedia !== undefined) view.setBigUint64(72, data.LogicalMedia === null ? 0n : util.toBigInt(util.toPointer(data.LogicalMedia)), true);
  // 0x50: pointer
  if (data?.Partition !== undefined) view.setBigUint64(80, data.Partition === null ? 0n : util.toBigInt(util.toPointer(data.Partition)), true);
  // 0x58: pointer
  if (data?.MediaPool !== undefined) view.setBigUint64(88, data.MediaPool === null ? 0n : util.toBigInt(util.toPointer(data.MediaPool)), true);
  // 0x60: pointer
  if (data?.MediaType !== undefined) view.setBigUint64(96, data.MediaType === null ? 0n : util.toBigInt(util.toPointer(data.MediaType)), true);
  // 0x68: pointer
  if (data?.LibRequest !== undefined) view.setBigUint64(104, data.LibRequest === null ? 0n : util.toBigInt(util.toPointer(data.LibRequest)), true);
  // 0x70: pointer
  if (data?.OpRequest !== undefined) view.setBigUint64(112, data.OpRequest === null ? 0n : util.toBigInt(util.toPointer(data.OpRequest)), true);
  // 0x78: pointer
  if (data?.Computer !== undefined) view.setBigUint64(120, data.Computer === null ? 0n : util.toBigInt(util.toPointer(data.Computer)), true);
  return buf;
}

export class _Info_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Drive(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get DriveType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Library(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Changer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get ChangerType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get StorageSlot(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get IEDoor(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get IEPort(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get PhysicalMedia(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get LogicalMedia(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get Partition(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get MediaPool(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: pointer
  get MediaType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: pointer
  get LibRequest(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: pointer
  get OpRequest(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(112, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x78: pointer
  get Computer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(120, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Drive(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set DriveType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Library(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Changer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set ChangerType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set StorageSlot(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set IEDoor(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set IEPort(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set PhysicalMedia(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set LogicalMedia(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set Partition(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set MediaPool(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x60: pointer
  set MediaType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x68: pointer
  set LibRequest(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x70: pointer
  set OpRequest(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(112, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x78: pointer
  set Computer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(120, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.WHEA_ERROR_SOURCE_DESCRIPTOR (size: 48)
 */
export interface WHEA_ERROR_SOURCE_DESCRIPTOR {
  /** u32 */
  Length: number;
  /** u32 */
  Version: number;
  /** Windows.Win32.System.Diagnostics.Debug.WHEA_ERROR_SOURCE_TYPE */
  Type: WHEA_ERROR_SOURCE_TYPE;
  /** Windows.Win32.System.Diagnostics.Debug.WHEA_ERROR_SOURCE_STATE */
  State: WHEA_ERROR_SOURCE_STATE;
  /** u32 */
  MaxRawDataLength: number;
  /** u32 */
  NumRecordsToPreallocate: number;
  /** u32 */
  MaxSectionsPerRecord: number;
  /** u32 */
  ErrorSourceId: number;
  /** u32 */
  PlatformErrorSourceId: number;
  /** u32 */
  Flags: number;
  /** _Info_e__Union */
  Info: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWHEA_ERROR_SOURCE_DESCRIPTOR = 48;

export function allocWHEA_ERROR_SOURCE_DESCRIPTOR(data?: Partial<WHEA_ERROR_SOURCE_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofWHEA_ERROR_SOURCE_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: i32
  if (data?.Type !== undefined) view.setInt32(8, Number(data.Type), true);
  // 0x0c: i32
  if (data?.State !== undefined) view.setInt32(12, Number(data.State), true);
  // 0x10: u32
  if (data?.MaxRawDataLength !== undefined) view.setUint32(16, Number(data.MaxRawDataLength), true);
  // 0x14: u32
  if (data?.NumRecordsToPreallocate !== undefined) view.setUint32(20, Number(data.NumRecordsToPreallocate), true);
  // 0x18: u32
  if (data?.MaxSectionsPerRecord !== undefined) view.setUint32(24, Number(data.MaxSectionsPerRecord), true);
  // 0x1c: u32
  if (data?.ErrorSourceId !== undefined) view.setUint32(28, Number(data.ErrorSourceId), true);
  // 0x20: u32
  if (data?.PlatformErrorSourceId !== undefined) view.setUint32(32, Number(data.PlatformErrorSourceId), true);
  // 0x24: u32
  if (data?.Flags !== undefined) view.setUint32(36, Number(data.Flags), true);
  // 0x28: pointer
  if (data?.Info !== undefined) view.setBigUint64(40, data.Info === null ? 0n : util.toBigInt(util.toPointer(data.Info)), true);
  return buf;
}

export class WHEA_ERROR_SOURCE_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Length(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Version(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get Type(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get State(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get MaxRawDataLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get NumRecordsToPreallocate(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get MaxSectionsPerRecord(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get ErrorSourceId(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get PlatformErrorSourceId(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get Flags(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get Info(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Length(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Version(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set Type(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set State(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set MaxRawDataLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set NumRecordsToPreallocate(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set MaxSectionsPerRecord(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set ErrorSourceId(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set PlatformErrorSourceId(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set Flags(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set Info(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.IPMI_OS_SEL_RECORD (size: 32)
 */
export interface IPMI_OS_SEL_RECORD {
  /** u32 */
  Signature: number;
  /** u32 */
  Version: number;
  /** u32 */
  Length: number;
  /** Windows.Win32.System.Diagnostics.Debug.IPMI_OS_SEL_RECORD_TYPE */
  RecordType: IPMI_OS_SEL_RECORD_TYPE;
  /** u32 */
  DataLength: number;
  /** array */
  Data: Deno.PointerValue | null;
}

export const sizeofIPMI_OS_SEL_RECORD = 32;

export function allocIPMI_OS_SEL_RECORD(data?: Partial<IPMI_OS_SEL_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofIPMI_OS_SEL_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Signature !== undefined) view.setUint32(0, Number(data.Signature), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u32
  if (data?.Length !== undefined) view.setUint32(8, Number(data.Length), true);
  // 0x0c: i32
  if (data?.RecordType !== undefined) view.setInt32(12, Number(data.RecordType), true);
  // 0x10: u32
  if (data?.DataLength !== undefined) view.setUint32(16, Number(data.DataLength), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Data !== undefined) view.setBigUint64(24, data.Data === null ? 0n : util.toBigInt(util.toPointer(data.Data)), true);
  return buf;
}

export class IPMI_OS_SEL_RECORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Signature(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Version(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Length(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get RecordType(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get DataLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Data(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Signature(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Version(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Length(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set RecordType(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set DataLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Data(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

export type HINSTANCE = number | bigint;

export type HWND = number | bigint;

// Native Libraries

try {
  var libKERNEL32_dll = Deno.dlopen("KERNEL32.dll", {
    RtlAddFunctionTable: {
      parameters: ["pointer", "u32", "u64"],
      result: "pointer",
    },
    RtlDeleteFunctionTable: {
      parameters: ["pointer"],
      result: "pointer",
    },
    RtlInstallFunctionTableCallback: {
      parameters: ["u64", "u64", "u32", "pointer", "pointer", "buffer"],
      result: "pointer",
    },
    RtlLookupFunctionEntry: {
      parameters: ["u64", "pointer", "pointer"],
      result: "pointer",
    },
    RtlVirtualUnwind: {
      parameters: ["u32", "u64", "u64", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    ReadProcessMemory: {
      parameters: ["pointer", "pointer", "pointer", "usize", "pointer"],
      result: "i32",
    },
    WriteProcessMemory: {
      parameters: ["pointer", "pointer", "pointer", "usize", "pointer"],
      result: "i32",
    },
    GetThreadContext: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetThreadContext: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    FlushInstructionCache: {
      parameters: ["pointer", "pointer", "usize"],
      result: "i32",
    },
    Wow64GetThreadContext: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    Wow64SetThreadContext: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    RtlUnwindEx: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    RtlCaptureStackBackTrace: {
      parameters: ["u32", "u32", "pointer", "pointer"],
      result: "u16",
    },
    RtlCaptureContext: {
      parameters: ["pointer"],
      result: "void",
    },
    RtlUnwind: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    RtlRestoreContext: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    RtlRaiseException: {
      parameters: ["pointer"],
      result: "void",
    },
    RtlPcToFileHeader: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    IsDebuggerPresent: {
      parameters: [],
      result: "i32",
    },
    DebugBreak: {
      parameters: [],
      result: "void",
    },
    OutputDebugStringA: {
      parameters: ["buffer"],
      result: "void",
    },
    OutputDebugStringW: {
      parameters: ["buffer"],
      result: "void",
    },
    ContinueDebugEvent: {
      parameters: ["u32", "u32", "u32"],
      result: "i32",
    },
    WaitForDebugEvent: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    DebugActiveProcess: {
      parameters: ["u32"],
      result: "i32",
    },
    DebugActiveProcessStop: {
      parameters: ["u32"],
      result: "i32",
    },
    CheckRemoteDebuggerPresent: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    WaitForDebugEventEx: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    EncodePointer: {
      parameters: ["pointer"],
      result: "pointer",
    },
    DecodePointer: {
      parameters: ["pointer"],
      result: "pointer",
    },
    EncodeSystemPointer: {
      parameters: ["pointer"],
      result: "pointer",
    },
    DecodeSystemPointer: {
      parameters: ["pointer"],
      result: "pointer",
    },
    Beep: {
      parameters: ["u32", "u32"],
      result: "i32",
    },
    RaiseException: {
      parameters: ["u32", "u32", "u32", "pointer"],
      result: "void",
    },
    UnhandledExceptionFilter: {
      parameters: ["pointer"],
      result: "i32",
    },
    SetUnhandledExceptionFilter: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetErrorMode: {
      parameters: [],
      result: "u32",
    },
    SetErrorMode: {
      parameters: ["u32"],
      result: "u32",
    },
    AddVectoredExceptionHandler: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    RemoveVectoredExceptionHandler: {
      parameters: ["pointer"],
      result: "u32",
    },
    AddVectoredContinueHandler: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    RemoveVectoredContinueHandler: {
      parameters: ["pointer"],
      result: "u32",
    },
    RaiseFailFastException: {
      parameters: ["pointer", "pointer", "u32"],
      result: "void",
    },
    FatalAppExitA: {
      parameters: ["u32", "buffer"],
      result: "void",
    },
    FatalAppExitW: {
      parameters: ["u32", "buffer"],
      result: "void",
    },
    GetThreadErrorMode: {
      parameters: [],
      result: "u32",
    },
    SetThreadErrorMode: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    FatalExit: {
      parameters: ["i32"],
      result: "void",
    },
    GetThreadSelectorEntry: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    Wow64GetThreadSelectorEntry: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    DebugSetProcessKillOnExit: {
      parameters: ["i32"],
      result: "i32",
    },
    DebugBreakProcess: {
      parameters: ["pointer"],
      result: "i32",
    },
    FormatMessageA: {
      parameters: ["u32", "pointer", "u32", "u32", "buffer", "u32", "pointer"],
      result: "u32",
    },
    FormatMessageW: {
      parameters: ["u32", "pointer", "u32", "u32", "buffer", "u32", "pointer"],
      result: "u32",
    },
    CopyContext: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    InitializeContext: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    InitializeContext2: {
      parameters: ["pointer", "u32", "pointer", "pointer", "u64"],
      result: "i32",
    },
    GetEnabledXStateFeatures: {
      parameters: [],
      result: "u64",
    },
    GetXStateFeaturesMask: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    LocateXStateFeature: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    SetXStateFeaturesMask: {
      parameters: ["pointer", "u64"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libntdll_dll = Deno.dlopen("ntdll.dll", {
    RtlAddGrowableFunctionTable: {
      parameters: ["pointer", "pointer", "u32", "u32", "usize", "usize"],
      result: "u32",
    },
    RtlGrowFunctionTable: {
      parameters: ["pointer", "u32"],
      result: "void",
    },
    RtlDeleteGrowableFunctionTable: {
      parameters: ["pointer"],
      result: "void",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libdbgeng_dll = Deno.dlopen("dbgeng.dll", {
    DebugConnect: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "pointer",
    },
    DebugConnectWide: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "pointer",
    },
    DebugCreate: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    DebugCreateEx: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libdbgmodel_dll = Deno.dlopen("dbgmodel.dll", {
    CreateDataModelManager: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libimagehlp_dll = Deno.dlopen("imagehlp.dll", {
    CheckSumMappedFile: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    GetImageConfigInformation: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetImageConfigInformation: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    BindImage: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "i32",
    },
    BindImageEx: {
      parameters: ["u32", "buffer", "buffer", "buffer", "pointer"],
      result: "i32",
    },
    ReBaseImage: {
      parameters: ["buffer", "buffer", "i32", "i32", "i32", "u32", "pointer", "pointer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    ReBaseImage64: {
      parameters: ["buffer", "buffer", "i32", "i32", "i32", "u32", "pointer", "pointer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    MapFileAndCheckSumA: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "u32",
    },
    MapFileAndCheckSumW: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "u32",
    },
    GetImageUnusedHeaderBytes: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    ImageGetDigestStream: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    ImageAddCertificate: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    ImageRemoveCertificate: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    ImageEnumerateCertificates: {
      parameters: ["pointer", "u16", "pointer", "pointer", "u32"],
      result: "i32",
    },
    ImageGetCertificateData: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    ImageGetCertificateHeader: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    ImageLoad: {
      parameters: ["buffer", "buffer"],
      result: "pointer",
    },
    ImageUnload: {
      parameters: ["pointer"],
      result: "i32",
    },
    MapAndLoad: {
      parameters: ["buffer", "buffer", "pointer", "i32", "i32"],
      result: "i32",
    },
    UnMapAndLoad: {
      parameters: ["pointer"],
      result: "i32",
    },
    TouchFileTimes: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    UpdateDebugInfoFile: {
      parameters: ["buffer", "buffer", "buffer", "pointer"],
      result: "i32",
    },
    UpdateDebugInfoFileEx: {
      parameters: ["buffer", "buffer", "buffer", "pointer", "u32"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libdbghelp_dll = Deno.dlopen("dbghelp.dll", {
    ImageNtHeader: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ImageRvaToSection: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
    },
    ImageRvaToVa: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    MiniDumpWriteDump: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    MiniDumpReadDumpStream: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SymFindDebugInfoFile: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    SymFindDebugInfoFileW: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    FindDebugInfoFile: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "pointer",
    },
    FindDebugInfoFileEx: {
      parameters: ["buffer", "buffer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    FindDebugInfoFileExW: {
      parameters: ["buffer", "buffer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    SymFindFileInPath: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "u32", "u32", "u32", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    SymFindFileInPathW: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "u32", "u32", "u32", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    SymFindExecutableImage: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    SymFindExecutableImageW: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    FindExecutableImage: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "pointer",
    },
    FindExecutableImageEx: {
      parameters: ["buffer", "buffer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    FindExecutableImageExW: {
      parameters: ["buffer", "buffer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    ImageDirectoryEntryToDataEx: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    ImageDirectoryEntryToData: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    SearchTreeForFile: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "i32",
    },
    SearchTreeForFileW: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "i32",
    },
    EnumDirTree: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    EnumDirTreeW: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    MakeSureDirectoryPathExists: {
      parameters: ["buffer"],
      result: "i32",
    },
    UnDecorateSymbolName: {
      parameters: ["buffer", "buffer", "u32", "u32"],
      result: "u32",
    },
    UnDecorateSymbolNameW: {
      parameters: ["buffer", "buffer", "u32", "u32"],
      result: "u32",
    },
    StackWalk64: {
      parameters: ["u32", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    StackWalkEx: {
      parameters: ["u32", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    StackWalk: {
      parameters: ["u32", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    ImagehlpApiVersion: {
      parameters: [],
      result: "pointer",
    },
    ImagehlpApiVersionEx: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetTimestampForLoadedLibrary: {
      parameters: ["pointer"],
      result: "u32",
    },
    SymSetParentWindow: {
      parameters: ["pointer"],
      result: "i32",
    },
    SymSetHomeDirectory: {
      parameters: ["pointer", "buffer"],
      result: "buffer",
    },
    SymSetHomeDirectoryW: {
      parameters: ["pointer", "buffer"],
      result: "buffer",
    },
    SymGetHomeDirectory: {
      parameters: ["i32", "buffer", "usize"],
      result: "buffer",
    },
    SymGetHomeDirectoryW: {
      parameters: ["i32", "buffer", "usize"],
      result: "buffer",
    },
    SymGetOmaps: {
      parameters: ["pointer", "u64", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SymSetOptions: {
      parameters: ["u32"],
      result: "u32",
    },
    SymGetOptions: {
      parameters: [],
      result: "u32",
    },
    SymCleanup: {
      parameters: ["pointer"],
      result: "i32",
    },
    SymGetExtendedOption: {
      parameters: ["i32"],
      result: "i32",
    },
    SymSetExtendedOption: {
      parameters: ["i32", "i32"],
      result: "i32",
    },
    SymMatchString: {
      parameters: ["buffer", "buffer", "i32"],
      result: "i32",
    },
    SymMatchStringA: {
      parameters: ["buffer", "buffer", "i32"],
      result: "i32",
    },
    SymMatchStringW: {
      parameters: ["buffer", "buffer", "i32"],
      result: "i32",
    },
    SymEnumSourceFiles: {
      parameters: ["pointer", "u64", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    SymEnumSourceFilesW: {
      parameters: ["pointer", "u64", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    SymEnumerateModules64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    SymEnumerateModulesW64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    SymEnumerateModules: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    EnumerateLoadedModulesEx: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    EnumerateLoadedModulesExW: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    EnumerateLoadedModules64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    EnumerateLoadedModulesW64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    EnumerateLoadedModules: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    SymFunctionTableAccess64: {
      parameters: ["pointer", "u64"],
      result: "pointer",
    },
    SymFunctionTableAccess64AccessRoutines: {
      parameters: ["pointer", "u64", "pointer", "pointer"],
      result: "pointer",
    },
    SymFunctionTableAccess: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    SymGetUnwindInfo: {
      parameters: ["pointer", "u64", "pointer", "pointer"],
      result: "i32",
    },
    SymGetModuleInfo64: {
      parameters: ["pointer", "u64", "pointer"],
      result: "i32",
    },
    SymGetModuleInfoW64: {
      parameters: ["pointer", "u64", "pointer"],
      result: "i32",
    },
    SymGetModuleInfo: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    SymGetModuleInfoW: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    SymGetModuleBase64: {
      parameters: ["pointer", "u64"],
      result: "u64",
    },
    SymGetModuleBase: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    SymEnumLines: {
      parameters: ["pointer", "u64", "buffer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    SymEnumLinesW: {
      parameters: ["pointer", "u64", "buffer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    SymGetLineFromAddr64: {
      parameters: ["pointer", "u64", "pointer", "pointer"],
      result: "i32",
    },
    SymGetLineFromAddrW64: {
      parameters: ["pointer", "u64", "pointer", "pointer"],
      result: "i32",
    },
    SymGetLineFromInlineContext: {
      parameters: ["pointer", "u64", "u32", "u64", "pointer", "pointer"],
      result: "i32",
    },
    SymGetLineFromInlineContextW: {
      parameters: ["pointer", "u64", "u32", "u64", "pointer", "pointer"],
      result: "i32",
    },
    SymEnumSourceLines: {
      parameters: ["pointer", "u64", "buffer", "buffer", "u32", "u32", "pointer", "pointer"],
      result: "i32",
    },
    SymEnumSourceLinesW: {
      parameters: ["pointer", "u64", "buffer", "buffer", "u32", "u32", "pointer", "pointer"],
      result: "i32",
    },
    SymAddrIncludeInlineTrace: {
      parameters: ["pointer", "u64"],
      result: "u32",
    },
    SymCompareInlineTrace: {
      parameters: ["pointer", "u64", "u32", "u64", "u64", "u64"],
      result: "u32",
    },
    SymQueryInlineTrace: {
      parameters: ["pointer", "u64", "u32", "u64", "u64", "pointer", "pointer"],
      result: "i32",
    },
    SymGetLineFromAddr: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    SymGetLineFromName64: {
      parameters: ["pointer", "buffer", "buffer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    SymGetLineFromNameW64: {
      parameters: ["pointer", "buffer", "buffer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    SymGetLineFromName: {
      parameters: ["pointer", "buffer", "buffer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    SymGetLineNext64: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SymGetLineNextW64: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SymGetLineNext: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SymGetLinePrev64: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SymGetLinePrevW64: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SymGetLinePrev: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SymGetFileLineOffsets64: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "u32"],
      result: "u32",
    },
    SymMatchFileName: {
      parameters: ["buffer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    SymMatchFileNameW: {
      parameters: ["buffer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    SymGetSourceFile: {
      parameters: ["pointer", "u64", "buffer", "buffer", "buffer", "u32"],
      result: "i32",
    },
    SymGetSourceFileW: {
      parameters: ["pointer", "u64", "buffer", "buffer", "buffer", "u32"],
      result: "i32",
    },
    SymGetSourceFileToken: {
      parameters: ["pointer", "u64", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    SymGetSourceFileTokenByTokenName: {
      parameters: ["pointer", "u64", "buffer", "buffer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    SymGetSourceFileChecksumW: {
      parameters: ["pointer", "u64", "buffer", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    SymGetSourceFileChecksum: {
      parameters: ["pointer", "u64", "buffer", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    SymGetSourceFileTokenW: {
      parameters: ["pointer", "u64", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    SymGetSourceFileTokenByTokenNameW: {
      parameters: ["pointer", "u64", "buffer", "buffer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    SymGetSourceFileFromToken: {
      parameters: ["pointer", "pointer", "buffer", "buffer", "u32"],
      result: "i32",
    },
    SymGetSourceFileFromTokenByTokenName: {
      parameters: ["pointer", "pointer", "buffer", "buffer", "buffer", "u32"],
      result: "i32",
    },
    SymGetSourceFileFromTokenW: {
      parameters: ["pointer", "pointer", "buffer", "buffer", "u32"],
      result: "i32",
    },
    SymGetSourceFileFromTokenByTokenNameW: {
      parameters: ["pointer", "pointer", "buffer", "buffer", "buffer", "u32"],
      result: "i32",
    },
    SymGetSourceVarFromToken: {
      parameters: ["pointer", "pointer", "buffer", "buffer", "buffer", "u32"],
      result: "i32",
    },
    SymGetSourceVarFromTokenW: {
      parameters: ["pointer", "pointer", "buffer", "buffer", "buffer", "u32"],
      result: "i32",
    },
    SymEnumSourceFileTokens: {
      parameters: ["pointer", "u64", "pointer"],
      result: "i32",
    },
    SymInitialize: {
      parameters: ["pointer", "buffer", "i32"],
      result: "i32",
    },
    SymInitializeW: {
      parameters: ["pointer", "buffer", "i32"],
      result: "i32",
    },
    SymGetSearchPath: {
      parameters: ["pointer", "buffer", "u32"],
      result: "i32",
    },
    SymGetSearchPathW: {
      parameters: ["pointer", "buffer", "u32"],
      result: "i32",
    },
    SymSetSearchPath: {
      parameters: ["pointer", "buffer"],
      result: "i32",
    },
    SymSetSearchPathW: {
      parameters: ["pointer", "buffer"],
      result: "i32",
    },
    SymLoadModuleEx: {
      parameters: ["pointer", "pointer", "buffer", "buffer", "u64", "u32", "pointer", "u32"],
      result: "u64",
    },
    SymLoadModuleExW: {
      parameters: ["pointer", "pointer", "buffer", "buffer", "u64", "u32", "pointer", "u32"],
      result: "u64",
    },
    SymUnloadModule64: {
      parameters: ["pointer", "u64"],
      result: "i32",
    },
    SymUnloadModule: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    SymUnDName64: {
      parameters: ["pointer", "buffer", "u32"],
      result: "i32",
    },
    SymUnDName: {
      parameters: ["pointer", "buffer", "u32"],
      result: "i32",
    },
    SymRegisterCallback64: {
      parameters: ["pointer", "pointer", "u64"],
      result: "i32",
    },
    SymRegisterCallbackW64: {
      parameters: ["pointer", "pointer", "u64"],
      result: "i32",
    },
    SymRegisterFunctionEntryCallback64: {
      parameters: ["pointer", "pointer", "u64"],
      result: "i32",
    },
    SymRegisterCallback: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    SymRegisterFunctionEntryCallback: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    SymSetContext: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    SymSetScopeFromAddr: {
      parameters: ["pointer", "u64"],
      result: "i32",
    },
    SymSetScopeFromInlineContext: {
      parameters: ["pointer", "u64", "u32"],
      result: "i32",
    },
    SymSetScopeFromIndex: {
      parameters: ["pointer", "u64", "u32"],
      result: "i32",
    },
    SymEnumProcesses: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SymFromAddr: {
      parameters: ["pointer", "u64", "pointer", "pointer"],
      result: "i32",
    },
    SymFromAddrW: {
      parameters: ["pointer", "u64", "pointer", "pointer"],
      result: "i32",
    },
    SymFromInlineContext: {
      parameters: ["pointer", "u64", "u32", "pointer", "pointer"],
      result: "i32",
    },
    SymFromInlineContextW: {
      parameters: ["pointer", "u64", "u32", "pointer", "pointer"],
      result: "i32",
    },
    SymFromToken: {
      parameters: ["pointer", "u64", "u32", "pointer"],
      result: "i32",
    },
    SymFromTokenW: {
      parameters: ["pointer", "u64", "u32", "pointer"],
      result: "i32",
    },
    SymNext: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SymNextW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SymPrev: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SymPrevW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SymFromName: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "i32",
    },
    SymFromNameW: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "i32",
    },
    SymEnumSymbols: {
      parameters: ["pointer", "u64", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    SymEnumSymbolsEx: {
      parameters: ["pointer", "u64", "buffer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    SymEnumSymbolsW: {
      parameters: ["pointer", "u64", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    SymEnumSymbolsExW: {
      parameters: ["pointer", "u64", "buffer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    SymEnumSymbolsForAddr: {
      parameters: ["pointer", "u64", "pointer", "pointer"],
      result: "i32",
    },
    SymEnumSymbolsForAddrW: {
      parameters: ["pointer", "u64", "pointer", "pointer"],
      result: "i32",
    },
    SymSearch: {
      parameters: ["pointer", "u64", "u32", "u32", "buffer", "u64", "pointer", "pointer", "u32"],
      result: "i32",
    },
    SymSearchW: {
      parameters: ["pointer", "u64", "u32", "u32", "buffer", "u64", "pointer", "pointer", "u32"],
      result: "i32",
    },
    SymGetScope: {
      parameters: ["pointer", "u64", "u32", "pointer"],
      result: "i32",
    },
    SymGetScopeW: {
      parameters: ["pointer", "u64", "u32", "pointer"],
      result: "i32",
    },
    SymFromIndex: {
      parameters: ["pointer", "u64", "u32", "pointer"],
      result: "i32",
    },
    SymFromIndexW: {
      parameters: ["pointer", "u64", "u32", "pointer"],
      result: "i32",
    },
    SymGetTypeInfo: {
      parameters: ["pointer", "u64", "u32", "i32", "pointer"],
      result: "i32",
    },
    SymGetTypeInfoEx: {
      parameters: ["pointer", "u64", "pointer"],
      result: "i32",
    },
    SymEnumTypes: {
      parameters: ["pointer", "u64", "pointer", "pointer"],
      result: "i32",
    },
    SymEnumTypesW: {
      parameters: ["pointer", "u64", "pointer", "pointer"],
      result: "i32",
    },
    SymEnumTypesByName: {
      parameters: ["pointer", "u64", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    SymEnumTypesByNameW: {
      parameters: ["pointer", "u64", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    SymGetTypeFromName: {
      parameters: ["pointer", "u64", "buffer", "pointer"],
      result: "i32",
    },
    SymGetTypeFromNameW: {
      parameters: ["pointer", "u64", "buffer", "pointer"],
      result: "i32",
    },
    SymAddSymbol: {
      parameters: ["pointer", "u64", "buffer", "u64", "u32", "u32"],
      result: "i32",
    },
    SymAddSymbolW: {
      parameters: ["pointer", "u64", "buffer", "u64", "u32", "u32"],
      result: "i32",
    },
    SymDeleteSymbol: {
      parameters: ["pointer", "u64", "buffer", "u64", "u32"],
      result: "i32",
    },
    SymDeleteSymbolW: {
      parameters: ["pointer", "u64", "buffer", "u64", "u32"],
      result: "i32",
    },
    SymRefreshModuleList: {
      parameters: ["pointer"],
      result: "i32",
    },
    SymAddSourceStream: {
      parameters: ["pointer", "u64", "buffer", "pointer", "usize"],
      result: "i32",
    },
    SymAddSourceStreamA: {
      parameters: ["pointer", "u64", "buffer", "pointer", "usize"],
      result: "i32",
    },
    SymAddSourceStreamW: {
      parameters: ["pointer", "u64", "buffer", "pointer", "usize"],
      result: "i32",
    },
    SymSrvIsStoreW: {
      parameters: ["pointer", "buffer"],
      result: "i32",
    },
    SymSrvIsStore: {
      parameters: ["pointer", "buffer"],
      result: "i32",
    },
    SymSrvDeltaName: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "buffer"],
      result: "buffer",
    },
    SymSrvDeltaNameW: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "buffer"],
      result: "buffer",
    },
    SymSrvGetSupplement: {
      parameters: ["pointer", "buffer", "buffer", "buffer"],
      result: "buffer",
    },
    SymSrvGetSupplementW: {
      parameters: ["pointer", "buffer", "buffer", "buffer"],
      result: "buffer",
    },
    SymSrvGetFileIndexes: {
      parameters: ["buffer", "pointer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    SymSrvGetFileIndexesW: {
      parameters: ["buffer", "pointer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    SymSrvGetFileIndexStringW: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "usize", "u32"],
      result: "i32",
    },
    SymSrvGetFileIndexString: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "usize", "u32"],
      result: "i32",
    },
    SymSrvGetFileIndexInfo: {
      parameters: ["buffer", "pointer", "u32"],
      result: "i32",
    },
    SymSrvGetFileIndexInfoW: {
      parameters: ["buffer", "pointer", "u32"],
      result: "i32",
    },
    SymSrvStoreSupplement: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "u32"],
      result: "buffer",
    },
    SymSrvStoreSupplementW: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "u32"],
      result: "buffer",
    },
    SymSrvStoreFile: {
      parameters: ["pointer", "buffer", "buffer", "u32"],
      result: "buffer",
    },
    SymSrvStoreFileW: {
      parameters: ["pointer", "buffer", "buffer", "u32"],
      result: "buffer",
    },
    SymGetSymbolFile: {
      parameters: ["pointer", "buffer", "buffer", "i32", "buffer", "usize", "buffer", "usize"],
      result: "i32",
    },
    SymGetSymbolFileW: {
      parameters: ["pointer", "buffer", "buffer", "i32", "buffer", "usize", "buffer", "usize"],
      result: "i32",
    },
    DbgHelpCreateUserDump: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "i32",
    },
    DbgHelpCreateUserDumpW: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "i32",
    },
    SymGetSymFromAddr64: {
      parameters: ["pointer", "u64", "pointer", "pointer"],
      result: "i32",
    },
    SymGetSymFromAddr: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    SymGetSymFromName64: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "i32",
    },
    SymGetSymFromName: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "i32",
    },
    FindFileInPath: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "u32", "u32", "u32", "buffer"],
      result: "i32",
    },
    FindFileInSearchPath: {
      parameters: ["pointer", "buffer", "buffer", "u32", "u32", "u32", "buffer"],
      result: "i32",
    },
    SymEnumSym: {
      parameters: ["pointer", "u64", "pointer", "pointer"],
      result: "i32",
    },
    SymEnumerateSymbols64: {
      parameters: ["pointer", "u64", "pointer", "pointer"],
      result: "i32",
    },
    SymEnumerateSymbolsW64: {
      parameters: ["pointer", "u64", "pointer", "pointer"],
      result: "i32",
    },
    SymEnumerateSymbols: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    SymEnumerateSymbolsW: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    SymLoadModule64: {
      parameters: ["pointer", "pointer", "buffer", "buffer", "u64", "u32"],
      result: "u64",
    },
    SymLoadModule: {
      parameters: ["pointer", "pointer", "buffer", "buffer", "u32", "u32"],
      result: "u32",
    },
    SymGetSymNext64: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SymGetSymNext: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SymGetSymPrev64: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SymGetSymPrev: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetCheckUserInterruptShared: {
      parameters: ["pointer"],
      result: "void",
    },
    GetSymLoadError: {
      parameters: [],
      result: "u32",
    },
    SetSymLoadError: {
      parameters: ["u32"],
      result: "void",
    },
    ReportSymbolLoadSummary: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "i32",
    },
    RemoveInvalidModuleList: {
      parameters: ["pointer"],
      result: "void",
    },
    RangeMapCreate: {
      parameters: [],
      result: "pointer",
    },
    RangeMapFree: {
      parameters: ["pointer"],
      result: "void",
    },
    RangeMapAddPeImageSections: {
      parameters: ["pointer", "buffer", "pointer", "u32", "u64", "u64", "u32"],
      result: "i32",
    },
    RangeMapRemove: {
      parameters: ["pointer", "u64"],
      result: "i32",
    },
    RangeMapRead: {
      parameters: ["pointer", "u64", "pointer", "u32", "u32", "pointer"],
      result: "i32",
    },
    RangeMapWrite: {
      parameters: ["pointer", "u64", "pointer", "u32", "u32", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_util_l1_1_1_dll = Deno.dlopen("api-ms-win-core-util-l1-1-1.dll", {
    EncodeRemotePointer: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    DecodeRemotePointer: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_errorhandling_l1_1_3_dll = Deno.dlopen("api-ms-win-core-errorhandling-l1-1-3.dll", {
    TerminateProcessOnMemoryExhaustion: {
      parameters: ["usize"],
      result: "void",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libADVAPI32_dll = Deno.dlopen("ADVAPI32.dll", {
    OpenThreadWaitChainSession: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    CloseThreadWaitChainSession: {
      parameters: ["pointer"],
      result: "void",
    },
    GetThreadWaitChain: {
      parameters: ["pointer", "usize", "u32", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RegisterWaitChainCOMCallback: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libUSER32_dll = Deno.dlopen("USER32.dll", {
    MessageBeep: {
      parameters: ["u32"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function RtlAddFunctionTable(
  FunctionTable: Deno.PointerValue | Uint8Array | null /* ptr */,
  EntryCount: number /* u32 */,
  BaseAddress: number | bigint /* u64 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libKERNEL32_dll.RtlAddFunctionTable(util.toPointer(FunctionTable), EntryCount, util.toBigInt(util.toPointer(BaseAddress))));
}

export function RtlDeleteFunctionTable(
  FunctionTable: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libKERNEL32_dll.RtlDeleteFunctionTable(util.toPointer(FunctionTable)));
}

export function RtlInstallFunctionTableCallback(
  TableIdentifier: number | bigint /* u64 */,
  BaseAddress: number | bigint /* u64 */,
  Length: number /* u32 */,
  Callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PGET_RUNTIME_FUNCTION_CALLBACK */,
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
  OutOfProcessCallbackDll: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libKERNEL32_dll.RtlInstallFunctionTableCallback(util.toBigInt(util.toPointer(TableIdentifier)), util.toBigInt(util.toPointer(BaseAddress)), Length, util.toPointer(Callback), util.toPointer(Context), util.pwstrToFfi(OutOfProcessCallbackDll)));
}

export function RtlAddGrowableFunctionTable(
  DynamicTable: Deno.PointerValue | Uint8Array | null /* ptr */,
  FunctionTable: Deno.PointerValue | Uint8Array | null /* ptr */,
  EntryCount: number /* u32 */,
  MaximumEntryCount: number /* u32 */,
  RangeBase: number | bigint /* usize */,
  RangeEnd: number | bigint /* usize */,
): number /* u32 */ {
  return libntdll_dll.RtlAddGrowableFunctionTable(util.toPointer(DynamicTable), util.toPointer(FunctionTable), EntryCount, MaximumEntryCount, util.toBigInt(util.toPointer(RangeBase)), util.toBigInt(util.toPointer(RangeEnd)));
}

export function RtlLookupFunctionEntry(
  ControlPc: number | bigint /* u64 */,
  ImageBase: Deno.PointerValue | Uint8Array | null /* ptr */,
  HistoryTable: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32_dll.RtlLookupFunctionEntry(util.toBigInt(util.toPointer(ControlPc)), util.toPointer(ImageBase), util.toPointer(HistoryTable)));
}

export function RtlVirtualUnwind(
  HandlerType: RTL_VIRTUAL_UNWIND_HANDLER_TYPE /* Windows.Win32.System.Diagnostics.Debug.RTL_VIRTUAL_UNWIND_HANDLER_TYPE */,
  ImageBase: number | bigint /* u64 */,
  ControlPc: number | bigint /* u64 */,
  FunctionEntry: Deno.PointerValue | Uint8Array | null /* ptr */,
  ContextRecord: Deno.PointerValue | Uint8Array | null /* ptr */,
  HandlerData: Deno.PointerValue | Uint8Array | null /* ptr */,
  EstablisherFrame: Deno.PointerValue | Uint8Array | null /* ptr */,
  ContextPointers: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.System.Kernel.EXCEPTION_ROUTINE */ {
  return util.pointerFromFfi(libKERNEL32_dll.RtlVirtualUnwind(HandlerType, util.toBigInt(util.toPointer(ImageBase)), util.toBigInt(util.toPointer(ControlPc)), util.toPointer(FunctionEntry), util.toPointer(ContextRecord), util.toPointer(HandlerData), util.toPointer(EstablisherFrame), util.toPointer(ContextPointers)));
}

export function DebugConnect(
  RemoteOptions: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  InterfaceId: Deno.PointerValue | Uint8Array | null /* ptr */,
  Interface: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libdbgeng_dll.DebugConnect(util.pstrToFfi(RemoteOptions), util.toPointer(InterfaceId), util.toPointer(Interface)));
}

export function DebugConnectWide(
  RemoteOptions: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  InterfaceId: Deno.PointerValue | Uint8Array | null /* ptr */,
  Interface: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libdbgeng_dll.DebugConnectWide(util.pwstrToFfi(RemoteOptions), util.toPointer(InterfaceId), util.toPointer(Interface)));
}

export function DebugCreate(
  InterfaceId: Deno.PointerValue | Uint8Array | null /* ptr */,
  Interface: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libdbgeng_dll.DebugCreate(util.toPointer(InterfaceId), util.toPointer(Interface)));
}

export function DebugCreateEx(
  InterfaceId: Deno.PointerValue | Uint8Array | null /* ptr */,
  DbgEngOptions: number /* u32 */,
  Interface: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libdbgeng_dll.DebugCreateEx(util.toPointer(InterfaceId), DbgEngOptions, util.toPointer(Interface)));
}

export function CreateDataModelManager(
  debugHost: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.IDebugHost */,
  manager: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libdbgmodel_dll.CreateDataModelManager(util.toPointer(debugHost), util.toPointer(manager)));
}

export function ReadProcessMemory(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpBaseAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  nSize: number | bigint /* usize */,
  lpNumberOfBytesRead: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.ReadProcessMemory(util.toPointer(hProcess), util.toPointer(lpBaseAddress), util.toPointer(lpBuffer), util.toBigInt(util.toPointer(nSize)), util.toPointer(lpNumberOfBytesRead)));
}

export function WriteProcessMemory(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpBaseAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  nSize: number | bigint /* usize */,
  lpNumberOfBytesWritten: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.WriteProcessMemory(util.toPointer(hProcess), util.toPointer(lpBaseAddress), util.toPointer(lpBuffer), util.toBigInt(util.toPointer(nSize)), util.toPointer(lpNumberOfBytesWritten)));
}

export function GetThreadContext(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetThreadContext(util.toPointer(hThread), util.toPointer(lpContext)));
}

export function SetThreadContext(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetThreadContext(util.toPointer(hThread), util.toPointer(lpContext)));
}

export function FlushInstructionCache(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpBaseAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSize: number | bigint /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.FlushInstructionCache(util.toPointer(hProcess), util.toPointer(lpBaseAddress), util.toBigInt(util.toPointer(dwSize))));
}

export function Wow64GetThreadContext(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.Wow64GetThreadContext(util.toPointer(hThread), util.toPointer(lpContext)));
}

export function Wow64SetThreadContext(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.Wow64SetThreadContext(util.toPointer(hThread), util.toPointer(lpContext)));
}

export function RtlGrowFunctionTable(
  DynamicTable: Deno.PointerValue | Uint8Array | null /* ptr */,
  NewEntryCount: number /* u32 */,
): void /* void */ {
  return libntdll_dll.RtlGrowFunctionTable(util.toPointer(DynamicTable), NewEntryCount);
}

export function RtlDeleteGrowableFunctionTable(
  DynamicTable: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libntdll_dll.RtlDeleteGrowableFunctionTable(util.toPointer(DynamicTable));
}

export function RtlUnwindEx(
  TargetFrame: Deno.PointerValue | Uint8Array | null /* ptr */,
  TargetIp: Deno.PointerValue | Uint8Array | null /* ptr */,
  ExceptionRecord: Deno.PointerValue | Uint8Array | null /* ptr */,
  ReturnValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  ContextRecord: Deno.PointerValue | Uint8Array | null /* ptr */,
  HistoryTable: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.RtlUnwindEx(util.toPointer(TargetFrame), util.toPointer(TargetIp), util.toPointer(ExceptionRecord), util.toPointer(ReturnValue), util.toPointer(ContextRecord), util.toPointer(HistoryTable));
}

export function CheckSumMappedFile(
  BaseAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  FileLength: number /* u32 */,
  HeaderSum: Deno.PointerValue | Uint8Array | null /* ptr */,
  CheckSum: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libimagehlp_dll.CheckSumMappedFile(util.toPointer(BaseAddress), FileLength, util.toPointer(HeaderSum), util.toPointer(CheckSum)));
}

export function GetImageConfigInformation(
  LoadedImage: Deno.PointerValue | Uint8Array | null /* ptr */,
  ImageConfigInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libimagehlp_dll.GetImageConfigInformation(util.toPointer(LoadedImage), util.toPointer(ImageConfigInformation)));
}

export function SetImageConfigInformation(
  LoadedImage: Deno.PointerValue | Uint8Array | null /* ptr */,
  ImageConfigInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libimagehlp_dll.SetImageConfigInformation(util.toPointer(LoadedImage), util.toPointer(ImageConfigInformation)));
}

export function ImageNtHeader(
  Base: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libdbghelp_dll.ImageNtHeader(util.toPointer(Base)));
}

export function ImageRvaToSection(
  NtHeaders: Deno.PointerValue | Uint8Array | null /* ptr */,
  Base: Deno.PointerValue | Uint8Array | null /* ptr */,
  Rva: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libdbghelp_dll.ImageRvaToSection(util.toPointer(NtHeaders), util.toPointer(Base), Rva));
}

export function ImageRvaToVa(
  NtHeaders: Deno.PointerValue | Uint8Array | null /* ptr */,
  Base: Deno.PointerValue | Uint8Array | null /* ptr */,
  Rva: number /* u32 */,
  LastRvaSection: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libdbghelp_dll.ImageRvaToVa(util.toPointer(NtHeaders), util.toPointer(Base), Rva, util.toPointer(LastRvaSection)));
}

export function RtlCaptureStackBackTrace(
  FramesToSkip: number /* u32 */,
  FramesToCapture: number /* u32 */,
  BackTrace: Deno.PointerValue | Uint8Array | null /* ptr */,
  BackTraceHash: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u16 */ {
  return libKERNEL32_dll.RtlCaptureStackBackTrace(FramesToSkip, FramesToCapture, util.toPointer(BackTrace), util.toPointer(BackTraceHash));
}

export function RtlCaptureContext(
  ContextRecord: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.RtlCaptureContext(util.toPointer(ContextRecord));
}

export function RtlUnwind(
  TargetFrame: Deno.PointerValue | Uint8Array | null /* ptr */,
  TargetIp: Deno.PointerValue | Uint8Array | null /* ptr */,
  ExceptionRecord: Deno.PointerValue | Uint8Array | null /* ptr */,
  ReturnValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.RtlUnwind(util.toPointer(TargetFrame), util.toPointer(TargetIp), util.toPointer(ExceptionRecord), util.toPointer(ReturnValue));
}

export function RtlRestoreContext(
  ContextRecord: Deno.PointerValue | Uint8Array | null /* ptr */,
  ExceptionRecord: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.RtlRestoreContext(util.toPointer(ContextRecord), util.toPointer(ExceptionRecord));
}

export function RtlRaiseException(
  ExceptionRecord: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.RtlRaiseException(util.toPointer(ExceptionRecord));
}

export function RtlPcToFileHeader(
  PcValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  BaseOfImage: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32_dll.RtlPcToFileHeader(util.toPointer(PcValue), util.toPointer(BaseOfImage)));
}

export function IsDebuggerPresent(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.IsDebuggerPresent());
}

export function DebugBreak(): void /* void */ {
  return libKERNEL32_dll.DebugBreak();
}

export function OutputDebugStringA(
  lpOutputString: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): void /* void */ {
  return libKERNEL32_dll.OutputDebugStringA(util.pstrToFfi(lpOutputString));
}

export function OutputDebugStringW(
  lpOutputString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): void /* void */ {
  return libKERNEL32_dll.OutputDebugStringW(util.pwstrToFfi(lpOutputString));
}

export function ContinueDebugEvent(
  dwProcessId: number /* u32 */,
  dwThreadId: number /* u32 */,
  dwContinueStatus: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.ContinueDebugEvent(dwProcessId, dwThreadId, dwContinueStatus));
}

export function WaitForDebugEvent(
  lpDebugEvent: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwMilliseconds: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.WaitForDebugEvent(util.toPointer(lpDebugEvent), dwMilliseconds));
}

export function DebugActiveProcess(
  dwProcessId: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.DebugActiveProcess(dwProcessId));
}

export function DebugActiveProcessStop(
  dwProcessId: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.DebugActiveProcessStop(dwProcessId));
}

export function CheckRemoteDebuggerPresent(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pbDebuggerPresent: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.CheckRemoteDebuggerPresent(util.toPointer(hProcess), util.toPointer(pbDebuggerPresent)));
}

export function WaitForDebugEventEx(
  lpDebugEvent: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwMilliseconds: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.WaitForDebugEventEx(util.toPointer(lpDebugEvent), dwMilliseconds));
}

export function EncodePointer(
  Ptr: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32_dll.EncodePointer(util.toPointer(Ptr)));
}

export function DecodePointer(
  Ptr: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32_dll.DecodePointer(util.toPointer(Ptr)));
}

export function EncodeSystemPointer(
  Ptr: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32_dll.EncodeSystemPointer(util.toPointer(Ptr)));
}

export function DecodeSystemPointer(
  Ptr: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32_dll.DecodeSystemPointer(util.toPointer(Ptr)));
}

export function EncodeRemotePointer(
  ProcessHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Ptr: Deno.PointerValue | Uint8Array | null /* ptr */,
  EncodedPtr: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libapi_ms_win_core_util_l1_1_1_dll.EncodeRemotePointer(util.toPointer(ProcessHandle), util.toPointer(Ptr), util.toPointer(EncodedPtr)));
}

export function DecodeRemotePointer(
  ProcessHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Ptr: Deno.PointerValue | Uint8Array | null /* ptr */,
  DecodedPtr: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libapi_ms_win_core_util_l1_1_1_dll.DecodeRemotePointer(util.toPointer(ProcessHandle), util.toPointer(Ptr), util.toPointer(DecodedPtr)));
}

export function Beep(
  dwFreq: number /* u32 */,
  dwDuration: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.Beep(dwFreq, dwDuration));
}

export function RaiseException(
  dwExceptionCode: number /* u32 */,
  dwExceptionFlags: number /* u32 */,
  nNumberOfArguments: number /* u32 */,
  lpArguments: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libKERNEL32_dll.RaiseException(dwExceptionCode, dwExceptionFlags, nNumberOfArguments, util.toPointer(lpArguments));
}

export function UnhandledExceptionFilter(
  ExceptionInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libKERNEL32_dll.UnhandledExceptionFilter(util.toPointer(ExceptionInfo));
}

export function SetUnhandledExceptionFilter(
  lpTopLevelExceptionFilter: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.LPTOP_LEVEL_EXCEPTION_FILTER */,
): Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.LPTOP_LEVEL_EXCEPTION_FILTER */ {
  return util.pointerFromFfi(libKERNEL32_dll.SetUnhandledExceptionFilter(util.toPointer(lpTopLevelExceptionFilter)));
}

export function GetErrorMode(): number /* u32 */ {
  return libKERNEL32_dll.GetErrorMode();
}

export function SetErrorMode(
  uMode: THREAD_ERROR_MODE /* Windows.Win32.System.Diagnostics.Debug.THREAD_ERROR_MODE */,
): number /* u32 */ {
  return libKERNEL32_dll.SetErrorMode(uMode);
}

export function AddVectoredExceptionHandler(
  First: number /* u32 */,
  Handler: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PVECTORED_EXCEPTION_HANDLER */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32_dll.AddVectoredExceptionHandler(First, util.toPointer(Handler)));
}

export function RemoveVectoredExceptionHandler(
  Handle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libKERNEL32_dll.RemoveVectoredExceptionHandler(util.toPointer(Handle));
}

export function AddVectoredContinueHandler(
  First: number /* u32 */,
  Handler: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PVECTORED_EXCEPTION_HANDLER */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32_dll.AddVectoredContinueHandler(First, util.toPointer(Handler)));
}

export function RemoveVectoredContinueHandler(
  Handle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libKERNEL32_dll.RemoveVectoredContinueHandler(util.toPointer(Handle));
}

export function RaiseFailFastException(
  pExceptionRecord: Deno.PointerValue | Uint8Array | null /* ptr */,
  pContextRecord: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
): void /* void */ {
  return libKERNEL32_dll.RaiseFailFastException(util.toPointer(pExceptionRecord), util.toPointer(pContextRecord), dwFlags);
}

export function FatalAppExitA(
  uAction: number /* u32 */,
  lpMessageText: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): void /* void */ {
  return libKERNEL32_dll.FatalAppExitA(uAction, util.pstrToFfi(lpMessageText));
}

export function FatalAppExitW(
  uAction: number /* u32 */,
  lpMessageText: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): void /* void */ {
  return libKERNEL32_dll.FatalAppExitW(uAction, util.pwstrToFfi(lpMessageText));
}

export function GetThreadErrorMode(): number /* u32 */ {
  return libKERNEL32_dll.GetThreadErrorMode();
}

export function SetThreadErrorMode(
  dwNewMode: THREAD_ERROR_MODE /* Windows.Win32.System.Diagnostics.Debug.THREAD_ERROR_MODE */,
  lpOldMode: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetThreadErrorMode(dwNewMode, util.toPointer(lpOldMode)));
}

export function TerminateProcessOnMemoryExhaustion(
  FailedAllocationSize: number | bigint /* usize */,
): void /* void */ {
  return libapi_ms_win_core_errorhandling_l1_1_3_dll.TerminateProcessOnMemoryExhaustion(util.toBigInt(util.toPointer(FailedAllocationSize)));
}

export function OpenThreadWaitChainSession(
  Flags: OPEN_THREAD_WAIT_CHAIN_SESSION_FLAGS /* Windows.Win32.System.Diagnostics.Debug.OPEN_THREAD_WAIT_CHAIN_SESSION_FLAGS */,
  callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PWAITCHAINCALLBACK */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libADVAPI32_dll.OpenThreadWaitChainSession(Flags, util.toPointer(callback)));
}

export function CloseThreadWaitChainSession(
  WctHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libADVAPI32_dll.CloseThreadWaitChainSession(util.toPointer(WctHandle));
}

export function GetThreadWaitChain(
  WctHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  Context: number | bigint /* usize */,
  Flags: WAIT_CHAIN_THREAD_OPTIONS /* Windows.Win32.System.Diagnostics.Debug.WAIT_CHAIN_THREAD_OPTIONS */,
  ThreadId: number /* u32 */,
  NodeCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  NodeInfoArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  IsCycle: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.GetThreadWaitChain(util.toPointer(WctHandle), util.toBigInt(util.toPointer(Context)), Flags, ThreadId, util.toPointer(NodeCount), util.toPointer(NodeInfoArray), util.toPointer(IsCycle)));
}

export function RegisterWaitChainCOMCallback(
  CallStateCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PCOGETCALLSTATE */,
  ActivationStateCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PCOGETACTIVATIONSTATE */,
): void /* void */ {
  return libADVAPI32_dll.RegisterWaitChainCOMCallback(util.toPointer(CallStateCallback), util.toPointer(ActivationStateCallback));
}

export function MiniDumpWriteDump(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ProcessId: number /* u32 */,
  hFile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  DumpType: MINIDUMP_TYPE /* Windows.Win32.System.Diagnostics.Debug.MINIDUMP_TYPE */,
  ExceptionParam: Deno.PointerValue | Uint8Array | null /* ptr */,
  UserStreamParam: Deno.PointerValue | Uint8Array | null /* ptr */,
  CallbackParam: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.MiniDumpWriteDump(util.toPointer(hProcess), ProcessId, util.toPointer(hFile), DumpType, util.toPointer(ExceptionParam), util.toPointer(UserStreamParam), util.toPointer(CallbackParam)));
}

export function MiniDumpReadDumpStream(
  BaseOfDump: Deno.PointerValue | Uint8Array | null /* ptr */,
  StreamNumber: number /* u32 */,
  Dir: Deno.PointerValue | Uint8Array | null /* ptr */,
  StreamPointer: Deno.PointerValue | Uint8Array | null /* ptr */,
  StreamSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.MiniDumpReadDumpStream(util.toPointer(BaseOfDump), StreamNumber, util.toPointer(Dir), util.toPointer(StreamPointer), util.toPointer(StreamSize)));
}

export function BindImage(
  ImageName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  DllPath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  SymbolPath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libimagehlp_dll.BindImage(util.pstrToFfi(ImageName), util.pstrToFfi(DllPath), util.pstrToFfi(SymbolPath)));
}

export function BindImageEx(
  Flags: number /* u32 */,
  ImageName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  DllPath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  SymbolPath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  StatusRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PIMAGEHLP_STATUS_ROUTINE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libimagehlp_dll.BindImageEx(Flags, util.pstrToFfi(ImageName), util.pstrToFfi(DllPath), util.pstrToFfi(SymbolPath), util.toPointer(StatusRoutine)));
}

export function ReBaseImage(
  CurrentImageName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  SymbolPath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  fReBase: boolean /* Windows.Win32.Foundation.BOOL */,
  fRebaseSysfileOk: boolean /* Windows.Win32.Foundation.BOOL */,
  fGoingDown: boolean /* Windows.Win32.Foundation.BOOL */,
  CheckImageSize: number /* u32 */,
  OldImageSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  OldImageBase: Deno.PointerValue | Uint8Array | null /* ptr */,
  NewImageSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  NewImageBase: Deno.PointerValue | Uint8Array | null /* ptr */,
  TimeStamp: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libimagehlp_dll.ReBaseImage(util.pstrToFfi(CurrentImageName), util.pstrToFfi(SymbolPath), util.boolToFfi(fReBase), util.boolToFfi(fRebaseSysfileOk), util.boolToFfi(fGoingDown), CheckImageSize, util.toPointer(OldImageSize), util.toPointer(OldImageBase), util.toPointer(NewImageSize), util.toPointer(NewImageBase), TimeStamp));
}

export function ReBaseImage64(
  CurrentImageName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  SymbolPath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  fReBase: boolean /* Windows.Win32.Foundation.BOOL */,
  fRebaseSysfileOk: boolean /* Windows.Win32.Foundation.BOOL */,
  fGoingDown: boolean /* Windows.Win32.Foundation.BOOL */,
  CheckImageSize: number /* u32 */,
  OldImageSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  OldImageBase: Deno.PointerValue | Uint8Array | null /* ptr */,
  NewImageSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  NewImageBase: Deno.PointerValue | Uint8Array | null /* ptr */,
  TimeStamp: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libimagehlp_dll.ReBaseImage64(util.pstrToFfi(CurrentImageName), util.pstrToFfi(SymbolPath), util.boolToFfi(fReBase), util.boolToFfi(fRebaseSysfileOk), util.boolToFfi(fGoingDown), CheckImageSize, util.toPointer(OldImageSize), util.toPointer(OldImageBase), util.toPointer(NewImageSize), util.toPointer(NewImageBase), TimeStamp));
}

export function MapFileAndCheckSumA(
  Filename: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  HeaderSum: Deno.PointerValue | Uint8Array | null /* ptr */,
  CheckSum: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libimagehlp_dll.MapFileAndCheckSumA(util.pstrToFfi(Filename), util.toPointer(HeaderSum), util.toPointer(CheckSum));
}

export function MapFileAndCheckSumW(
  Filename: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  HeaderSum: Deno.PointerValue | Uint8Array | null /* ptr */,
  CheckSum: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libimagehlp_dll.MapFileAndCheckSumW(util.pwstrToFfi(Filename), util.toPointer(HeaderSum), util.toPointer(CheckSum));
}

export function GetImageUnusedHeaderBytes(
  LoadedImage: Deno.PointerValue | Uint8Array | null /* ptr */,
  SizeUnusedHeaderBytes: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libimagehlp_dll.GetImageUnusedHeaderBytes(util.toPointer(LoadedImage), util.toPointer(SizeUnusedHeaderBytes));
}

export function ImageGetDigestStream(
  FileHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  DigestLevel: number /* u32 */,
  DigestFunction: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.DIGEST_FUNCTION */,
  DigestHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libimagehlp_dll.ImageGetDigestStream(util.toPointer(FileHandle), DigestLevel, util.toPointer(DigestFunction), util.toPointer(DigestHandle)));
}

export function ImageAddCertificate(
  FileHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Certificate: Deno.PointerValue | Uint8Array | null /* ptr */,
  Index: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libimagehlp_dll.ImageAddCertificate(util.toPointer(FileHandle), util.toPointer(Certificate), util.toPointer(Index)));
}

export function ImageRemoveCertificate(
  FileHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Index: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libimagehlp_dll.ImageRemoveCertificate(util.toPointer(FileHandle), Index));
}

export function ImageEnumerateCertificates(
  FileHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  TypeFilter: number /* u16 */,
  CertificateCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  Indices: Deno.PointerValue | Uint8Array | null /* ptr */,
  IndexCount: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libimagehlp_dll.ImageEnumerateCertificates(util.toPointer(FileHandle), TypeFilter, util.toPointer(CertificateCount), util.toPointer(Indices), IndexCount));
}

export function ImageGetCertificateData(
  FileHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  CertificateIndex: number /* u32 */,
  Certificate: Deno.PointerValue | Uint8Array | null /* ptr */,
  RequiredLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libimagehlp_dll.ImageGetCertificateData(util.toPointer(FileHandle), CertificateIndex, util.toPointer(Certificate), util.toPointer(RequiredLength)));
}

export function ImageGetCertificateHeader(
  FileHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  CertificateIndex: number /* u32 */,
  Certificateheader: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libimagehlp_dll.ImageGetCertificateHeader(util.toPointer(FileHandle), CertificateIndex, util.toPointer(Certificateheader)));
}

export function ImageLoad(
  DllName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  DllPath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libimagehlp_dll.ImageLoad(util.pstrToFfi(DllName), util.pstrToFfi(DllPath)));
}

export function ImageUnload(
  LoadedImage: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libimagehlp_dll.ImageUnload(util.toPointer(LoadedImage)));
}

export function MapAndLoad(
  ImageName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  DllPath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  LoadedImage: Deno.PointerValue | Uint8Array | null /* ptr */,
  DotDll: boolean /* Windows.Win32.Foundation.BOOL */,
  ReadOnly: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libimagehlp_dll.MapAndLoad(util.pstrToFfi(ImageName), util.pstrToFfi(DllPath), util.toPointer(LoadedImage), util.boolToFfi(DotDll), util.boolToFfi(ReadOnly)));
}

export function UnMapAndLoad(
  LoadedImage: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libimagehlp_dll.UnMapAndLoad(util.toPointer(LoadedImage)));
}

export function TouchFileTimes(
  FileHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pSystemTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libimagehlp_dll.TouchFileTimes(util.toPointer(FileHandle), util.toPointer(pSystemTime)));
}

export function UpdateDebugInfoFile(
  ImageFileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  SymbolPath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  DebugFilePath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  NtHeaders: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libimagehlp_dll.UpdateDebugInfoFile(util.pstrToFfi(ImageFileName), util.pstrToFfi(SymbolPath), util.pstrToFfi(DebugFilePath), util.toPointer(NtHeaders)));
}

export function UpdateDebugInfoFileEx(
  ImageFileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  SymbolPath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  DebugFilePath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  NtHeaders: Deno.PointerValue | Uint8Array | null /* ptr */,
  OldCheckSum: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libimagehlp_dll.UpdateDebugInfoFileEx(util.pstrToFfi(ImageFileName), util.pstrToFfi(SymbolPath), util.pstrToFfi(DebugFilePath), util.toPointer(NtHeaders), OldCheckSum));
}

export function SymFindDebugInfoFile(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  FileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  DebugFilePath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PFIND_DEBUG_FILE_CALLBACK */,
  CallerData: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libdbghelp_dll.SymFindDebugInfoFile(util.toPointer(hProcess), util.pstrToFfi(FileName), util.pstrToFfi(DebugFilePath), util.toPointer(Callback), util.toPointer(CallerData)));
}

export function SymFindDebugInfoFileW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  FileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  DebugFilePath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PFIND_DEBUG_FILE_CALLBACKW */,
  CallerData: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libdbghelp_dll.SymFindDebugInfoFileW(util.toPointer(hProcess), util.pwstrToFfi(FileName), util.pwstrToFfi(DebugFilePath), util.toPointer(Callback), util.toPointer(CallerData)));
}

export function FindDebugInfoFile(
  FileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  SymbolPath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  DebugFilePath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libdbghelp_dll.FindDebugInfoFile(util.pstrToFfi(FileName), util.pstrToFfi(SymbolPath), util.pstrToFfi(DebugFilePath)));
}

export function FindDebugInfoFileEx(
  FileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  SymbolPath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  DebugFilePath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PFIND_DEBUG_FILE_CALLBACK */,
  CallerData: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libdbghelp_dll.FindDebugInfoFileEx(util.pstrToFfi(FileName), util.pstrToFfi(SymbolPath), util.pstrToFfi(DebugFilePath), util.toPointer(Callback), util.toPointer(CallerData)));
}

export function FindDebugInfoFileExW(
  FileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SymbolPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  DebugFilePath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PFIND_DEBUG_FILE_CALLBACKW */,
  CallerData: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libdbghelp_dll.FindDebugInfoFileExW(util.pwstrToFfi(FileName), util.pwstrToFfi(SymbolPath), util.pwstrToFfi(DebugFilePath), util.toPointer(Callback), util.toPointer(CallerData)));
}

export function SymFindFileInPath(
  hprocess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  SearchPathA: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  FileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  id: Deno.PointerValue | Uint8Array | null /* ptr */,
  two: number /* u32 */,
  three: number /* u32 */,
  flags: SYM_FIND_ID_OPTION /* Windows.Win32.System.Diagnostics.Debug.SYM_FIND_ID_OPTION */,
  FoundFile: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PFINDFILEINPATHCALLBACK */,
  context: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymFindFileInPath(util.toPointer(hprocess), util.pstrToFfi(SearchPathA), util.pstrToFfi(FileName), util.toPointer(id), two, three, flags, util.pstrToFfi(FoundFile), util.toPointer(callback), util.toPointer(context)));
}

export function SymFindFileInPathW(
  hprocess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  SearchPathA: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  FileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  id: Deno.PointerValue | Uint8Array | null /* ptr */,
  two: number /* u32 */,
  three: number /* u32 */,
  flags: SYM_FIND_ID_OPTION /* Windows.Win32.System.Diagnostics.Debug.SYM_FIND_ID_OPTION */,
  FoundFile: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PFINDFILEINPATHCALLBACKW */,
  context: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymFindFileInPathW(util.toPointer(hprocess), util.pwstrToFfi(SearchPathA), util.pwstrToFfi(FileName), util.toPointer(id), two, three, flags, util.pwstrToFfi(FoundFile), util.toPointer(callback), util.toPointer(context)));
}

export function SymFindExecutableImage(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  FileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ImageFilePath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PFIND_EXE_FILE_CALLBACK */,
  CallerData: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libdbghelp_dll.SymFindExecutableImage(util.toPointer(hProcess), util.pstrToFfi(FileName), util.pstrToFfi(ImageFilePath), util.toPointer(Callback), util.toPointer(CallerData)));
}

export function SymFindExecutableImageW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  FileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ImageFilePath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PFIND_EXE_FILE_CALLBACKW */,
  CallerData: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libdbghelp_dll.SymFindExecutableImageW(util.toPointer(hProcess), util.pwstrToFfi(FileName), util.pwstrToFfi(ImageFilePath), util.toPointer(Callback), util.toPointer(CallerData)));
}

export function FindExecutableImage(
  FileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  SymbolPath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ImageFilePath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libdbghelp_dll.FindExecutableImage(util.pstrToFfi(FileName), util.pstrToFfi(SymbolPath), util.pstrToFfi(ImageFilePath)));
}

export function FindExecutableImageEx(
  FileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  SymbolPath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ImageFilePath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PFIND_EXE_FILE_CALLBACK */,
  CallerData: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libdbghelp_dll.FindExecutableImageEx(util.pstrToFfi(FileName), util.pstrToFfi(SymbolPath), util.pstrToFfi(ImageFilePath), util.toPointer(Callback), util.toPointer(CallerData)));
}

export function FindExecutableImageExW(
  FileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SymbolPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ImageFilePath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PFIND_EXE_FILE_CALLBACKW */,
  CallerData: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libdbghelp_dll.FindExecutableImageExW(util.pwstrToFfi(FileName), util.pwstrToFfi(SymbolPath), util.pwstrToFfi(ImageFilePath), util.toPointer(Callback), util.toPointer(CallerData)));
}

export function ImageDirectoryEntryToDataEx(
  Base: Deno.PointerValue | Uint8Array | null /* ptr */,
  MappedAsImage: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */,
  DirectoryEntry: IMAGE_DIRECTORY_ENTRY /* Windows.Win32.System.Diagnostics.Debug.IMAGE_DIRECTORY_ENTRY */,
  Size: Deno.PointerValue | Uint8Array | null /* ptr */,
  FoundHeader: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libdbghelp_dll.ImageDirectoryEntryToDataEx(util.toPointer(Base), util.toPointer(MappedAsImage), DirectoryEntry, util.toPointer(Size), util.toPointer(FoundHeader)));
}

export function ImageDirectoryEntryToData(
  Base: Deno.PointerValue | Uint8Array | null /* ptr */,
  MappedAsImage: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */,
  DirectoryEntry: IMAGE_DIRECTORY_ENTRY /* Windows.Win32.System.Diagnostics.Debug.IMAGE_DIRECTORY_ENTRY */,
  Size: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libdbghelp_dll.ImageDirectoryEntryToData(util.toPointer(Base), util.toPointer(MappedAsImage), DirectoryEntry, util.toPointer(Size)));
}

export function SearchTreeForFile(
  RootPath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  InputPathName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  OutputPathBuffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SearchTreeForFile(util.pstrToFfi(RootPath), util.pstrToFfi(InputPathName), util.pstrToFfi(OutputPathBuffer)));
}

export function SearchTreeForFileW(
  RootPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  InputPathName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  OutputPathBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SearchTreeForFileW(util.pwstrToFfi(RootPath), util.pwstrToFfi(InputPathName), util.pwstrToFfi(OutputPathBuffer)));
}

export function EnumDirTree(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  RootPath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  InputPathName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  OutputPathBuffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cb: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PENUMDIRTREE_CALLBACK */,
  data: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.EnumDirTree(util.toPointer(hProcess), util.pstrToFfi(RootPath), util.pstrToFfi(InputPathName), util.pstrToFfi(OutputPathBuffer), util.toPointer(cb), util.toPointer(data)));
}

export function EnumDirTreeW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  RootPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  InputPathName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  OutputPathBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cb: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PENUMDIRTREE_CALLBACKW */,
  data: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.EnumDirTreeW(util.toPointer(hProcess), util.pwstrToFfi(RootPath), util.pwstrToFfi(InputPathName), util.pwstrToFfi(OutputPathBuffer), util.toPointer(cb), util.toPointer(data)));
}

export function MakeSureDirectoryPathExists(
  DirPath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.MakeSureDirectoryPathExists(util.pstrToFfi(DirPath)));
}

export function UnDecorateSymbolName(
  name: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  outputString: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  maxStringLength: number /* u32 */,
  flags: number /* u32 */,
): number /* u32 */ {
  return libdbghelp_dll.UnDecorateSymbolName(util.pstrToFfi(name), util.pstrToFfi(outputString), maxStringLength, flags);
}

export function UnDecorateSymbolNameW(
  name: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  outputString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  maxStringLength: number /* u32 */,
  flags: number /* u32 */,
): number /* u32 */ {
  return libdbghelp_dll.UnDecorateSymbolNameW(util.pwstrToFfi(name), util.pwstrToFfi(outputString), maxStringLength, flags);
}

export function StackWalk64(
  MachineType: number /* u32 */,
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  StackFrame: Deno.PointerValue | Uint8Array | null /* ptr */,
  ContextRecord: Deno.PointerValue | Uint8Array | null /* ptr */,
  ReadMemoryRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PREAD_PROCESS_MEMORY_ROUTINE64 */,
  FunctionTableAccessRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PFUNCTION_TABLE_ACCESS_ROUTINE64 */,
  GetModuleBaseRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PGET_MODULE_BASE_ROUTINE64 */,
  TranslateAddress: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PTRANSLATE_ADDRESS_ROUTINE64 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.StackWalk64(MachineType, util.toPointer(hProcess), util.toPointer(hThread), util.toPointer(StackFrame), util.toPointer(ContextRecord), util.toPointer(ReadMemoryRoutine), util.toPointer(FunctionTableAccessRoutine), util.toPointer(GetModuleBaseRoutine), util.toPointer(TranslateAddress)));
}

export function StackWalkEx(
  MachineType: number /* u32 */,
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  StackFrame: Deno.PointerValue | Uint8Array | null /* ptr */,
  ContextRecord: Deno.PointerValue | Uint8Array | null /* ptr */,
  ReadMemoryRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PREAD_PROCESS_MEMORY_ROUTINE64 */,
  FunctionTableAccessRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PFUNCTION_TABLE_ACCESS_ROUTINE64 */,
  GetModuleBaseRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PGET_MODULE_BASE_ROUTINE64 */,
  TranslateAddress: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PTRANSLATE_ADDRESS_ROUTINE64 */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.StackWalkEx(MachineType, util.toPointer(hProcess), util.toPointer(hThread), util.toPointer(StackFrame), util.toPointer(ContextRecord), util.toPointer(ReadMemoryRoutine), util.toPointer(FunctionTableAccessRoutine), util.toPointer(GetModuleBaseRoutine), util.toPointer(TranslateAddress), Flags));
}

export function StackWalk(
  MachineType: number /* u32 */,
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  StackFrame: Deno.PointerValue | Uint8Array | null /* ptr */,
  ContextRecord: Deno.PointerValue | Uint8Array | null /* ptr */,
  ReadMemoryRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PREAD_PROCESS_MEMORY_ROUTINE */,
  FunctionTableAccessRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PFUNCTION_TABLE_ACCESS_ROUTINE */,
  GetModuleBaseRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PGET_MODULE_BASE_ROUTINE */,
  TranslateAddress: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PTRANSLATE_ADDRESS_ROUTINE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.StackWalk(MachineType, util.toPointer(hProcess), util.toPointer(hThread), util.toPointer(StackFrame), util.toPointer(ContextRecord), util.toPointer(ReadMemoryRoutine), util.toPointer(FunctionTableAccessRoutine), util.toPointer(GetModuleBaseRoutine), util.toPointer(TranslateAddress)));
}

export function ImagehlpApiVersion(): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libdbghelp_dll.ImagehlpApiVersion());
}

export function ImagehlpApiVersionEx(
  AppVersion: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libdbghelp_dll.ImagehlpApiVersionEx(util.toPointer(AppVersion)));
}

export function GetTimestampForLoadedLibrary(
  Module: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
): number /* u32 */ {
  return libdbghelp_dll.GetTimestampForLoadedLibrary(util.toPointer(Module));
}

export function SymSetParentWindow(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymSetParentWindow(util.hwndToFfi(hwnd)));
}

export function SymSetHomeDirectory(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dir: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libdbghelp_dll.SymSetHomeDirectory(util.toPointer(hProcess), util.pstrToFfi(dir)));
}

export function SymSetHomeDirectoryW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dir: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libdbghelp_dll.SymSetHomeDirectoryW(util.toPointer(hProcess), util.pwstrToFfi(dir)));
}

export function SymGetHomeDirectory(
  type: IMAGEHLP_HD_TYPE /* Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_HD_TYPE */,
  dir: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  size: number | bigint /* usize */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libdbghelp_dll.SymGetHomeDirectory(type, util.pstrToFfi(dir), util.toBigInt(util.toPointer(size))));
}

export function SymGetHomeDirectoryW(
  type: IMAGEHLP_HD_TYPE /* Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_HD_TYPE */,
  dir: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  size: number | bigint /* usize */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libdbghelp_dll.SymGetHomeDirectoryW(type, util.pwstrToFfi(dir), util.toBigInt(util.toPointer(size))));
}

export function SymGetOmaps(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  BaseOfDll: number | bigint /* u64 */,
  OmapTo: Deno.PointerValue | Uint8Array | null /* ptr */,
  cOmapTo: Deno.PointerValue | Uint8Array | null /* ptr */,
  OmapFrom: Deno.PointerValue | Uint8Array | null /* ptr */,
  cOmapFrom: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetOmaps(util.toPointer(hProcess), util.toBigInt(util.toPointer(BaseOfDll)), util.toPointer(OmapTo), util.toPointer(cOmapTo), util.toPointer(OmapFrom), util.toPointer(cOmapFrom)));
}

export function SymSetOptions(
  SymOptions: number /* u32 */,
): number /* u32 */ {
  return libdbghelp_dll.SymSetOptions(SymOptions);
}

export function SymGetOptions(): number /* u32 */ {
  return libdbghelp_dll.SymGetOptions();
}

export function SymCleanup(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymCleanup(util.toPointer(hProcess)));
}

export function SymGetExtendedOption(
  option: IMAGEHLP_EXTENDED_OPTIONS /* Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_EXTENDED_OPTIONS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetExtendedOption(option));
}

export function SymSetExtendedOption(
  option: IMAGEHLP_EXTENDED_OPTIONS /* Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_EXTENDED_OPTIONS */,
  value: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymSetExtendedOption(option, util.boolToFfi(value)));
}

export function SymMatchString(
  string: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  expression: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  fCase: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymMatchString(util.pstrToFfi(string), util.pstrToFfi(expression), util.boolToFfi(fCase)));
}

export function SymMatchStringA(
  string: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  expression: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  fCase: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymMatchStringA(util.pstrToFfi(string), util.pstrToFfi(expression), util.boolToFfi(fCase)));
}

export function SymMatchStringW(
  string: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  expression: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  fCase: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymMatchStringW(util.pwstrToFfi(string), util.pwstrToFfi(expression), util.boolToFfi(fCase)));
}

export function SymEnumSourceFiles(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ModBase: number | bigint /* u64 */,
  Mask: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cbSrcFiles: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PSYM_ENUMSOURCEFILES_CALLBACK */,
  UserContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymEnumSourceFiles(util.toPointer(hProcess), util.toBigInt(util.toPointer(ModBase)), util.pstrToFfi(Mask), util.toPointer(cbSrcFiles), util.toPointer(UserContext)));
}

export function SymEnumSourceFilesW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ModBase: number | bigint /* u64 */,
  Mask: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cbSrcFiles: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PSYM_ENUMSOURCEFILES_CALLBACKW */,
  UserContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymEnumSourceFilesW(util.toPointer(hProcess), util.toBigInt(util.toPointer(ModBase)), util.pwstrToFfi(Mask), util.toPointer(cbSrcFiles), util.toPointer(UserContext)));
}

export function SymEnumerateModules64(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  EnumModulesCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PSYM_ENUMMODULES_CALLBACK64 */,
  UserContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymEnumerateModules64(util.toPointer(hProcess), util.toPointer(EnumModulesCallback), util.toPointer(UserContext)));
}

export function SymEnumerateModulesW64(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  EnumModulesCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PSYM_ENUMMODULES_CALLBACKW64 */,
  UserContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymEnumerateModulesW64(util.toPointer(hProcess), util.toPointer(EnumModulesCallback), util.toPointer(UserContext)));
}

export function SymEnumerateModules(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  EnumModulesCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PSYM_ENUMMODULES_CALLBACK */,
  UserContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymEnumerateModules(util.toPointer(hProcess), util.toPointer(EnumModulesCallback), util.toPointer(UserContext)));
}

export function EnumerateLoadedModulesEx(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  EnumLoadedModulesCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PENUMLOADED_MODULES_CALLBACK64 */,
  UserContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.EnumerateLoadedModulesEx(util.toPointer(hProcess), util.toPointer(EnumLoadedModulesCallback), util.toPointer(UserContext)));
}

export function EnumerateLoadedModulesExW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  EnumLoadedModulesCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PENUMLOADED_MODULES_CALLBACKW64 */,
  UserContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.EnumerateLoadedModulesExW(util.toPointer(hProcess), util.toPointer(EnumLoadedModulesCallback), util.toPointer(UserContext)));
}

export function EnumerateLoadedModules64(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  EnumLoadedModulesCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PENUMLOADED_MODULES_CALLBACK64 */,
  UserContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.EnumerateLoadedModules64(util.toPointer(hProcess), util.toPointer(EnumLoadedModulesCallback), util.toPointer(UserContext)));
}

export function EnumerateLoadedModulesW64(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  EnumLoadedModulesCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PENUMLOADED_MODULES_CALLBACKW64 */,
  UserContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.EnumerateLoadedModulesW64(util.toPointer(hProcess), util.toPointer(EnumLoadedModulesCallback), util.toPointer(UserContext)));
}

export function EnumerateLoadedModules(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  EnumLoadedModulesCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PENUMLOADED_MODULES_CALLBACK */,
  UserContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.EnumerateLoadedModules(util.toPointer(hProcess), util.toPointer(EnumLoadedModulesCallback), util.toPointer(UserContext)));
}

export function SymFunctionTableAccess64(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  AddrBase: number | bigint /* u64 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libdbghelp_dll.SymFunctionTableAccess64(util.toPointer(hProcess), util.toBigInt(util.toPointer(AddrBase))));
}

export function SymFunctionTableAccess64AccessRoutines(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  AddrBase: number | bigint /* u64 */,
  ReadMemoryRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PREAD_PROCESS_MEMORY_ROUTINE64 */,
  GetModuleBaseRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PGET_MODULE_BASE_ROUTINE64 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libdbghelp_dll.SymFunctionTableAccess64AccessRoutines(util.toPointer(hProcess), util.toBigInt(util.toPointer(AddrBase)), util.toPointer(ReadMemoryRoutine), util.toPointer(GetModuleBaseRoutine)));
}

export function SymFunctionTableAccess(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  AddrBase: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libdbghelp_dll.SymFunctionTableAccess(util.toPointer(hProcess), AddrBase));
}

export function SymGetUnwindInfo(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Address: number | bigint /* u64 */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  Size: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetUnwindInfo(util.toPointer(hProcess), util.toBigInt(util.toPointer(Address)), util.toPointer(Buffer), util.toPointer(Size)));
}

export function SymGetModuleInfo64(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  qwAddr: number | bigint /* u64 */,
  ModuleInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetModuleInfo64(util.toPointer(hProcess), util.toBigInt(util.toPointer(qwAddr)), util.toPointer(ModuleInfo)));
}

export function SymGetModuleInfoW64(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  qwAddr: number | bigint /* u64 */,
  ModuleInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetModuleInfoW64(util.toPointer(hProcess), util.toBigInt(util.toPointer(qwAddr)), util.toPointer(ModuleInfo)));
}

export function SymGetModuleInfo(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwAddr: number /* u32 */,
  ModuleInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetModuleInfo(util.toPointer(hProcess), dwAddr, util.toPointer(ModuleInfo)));
}

export function SymGetModuleInfoW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwAddr: number /* u32 */,
  ModuleInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetModuleInfoW(util.toPointer(hProcess), dwAddr, util.toPointer(ModuleInfo)));
}

export function SymGetModuleBase64(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  qwAddr: number | bigint /* u64 */,
): number | bigint /* u64 */ {
  return libdbghelp_dll.SymGetModuleBase64(util.toPointer(hProcess), util.toBigInt(util.toPointer(qwAddr)));
}

export function SymGetModuleBase(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwAddr: number /* u32 */,
): number /* u32 */ {
  return libdbghelp_dll.SymGetModuleBase(util.toPointer(hProcess), dwAddr);
}

export function SymEnumLines(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Base: number | bigint /* u64 */,
  Obj: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  File: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  EnumLinesCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PSYM_ENUMLINES_CALLBACK */,
  UserContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymEnumLines(util.toPointer(hProcess), util.toBigInt(util.toPointer(Base)), util.pstrToFfi(Obj), util.pstrToFfi(File), util.toPointer(EnumLinesCallback), util.toPointer(UserContext)));
}

export function SymEnumLinesW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Base: number | bigint /* u64 */,
  Obj: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  File: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  EnumLinesCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PSYM_ENUMLINES_CALLBACKW */,
  UserContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymEnumLinesW(util.toPointer(hProcess), util.toBigInt(util.toPointer(Base)), util.pwstrToFfi(Obj), util.pwstrToFfi(File), util.toPointer(EnumLinesCallback), util.toPointer(UserContext)));
}

export function SymGetLineFromAddr64(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  qwAddr: number | bigint /* u64 */,
  pdwDisplacement: Deno.PointerValue | Uint8Array | null /* ptr */,
  Line64: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetLineFromAddr64(util.toPointer(hProcess), util.toBigInt(util.toPointer(qwAddr)), util.toPointer(pdwDisplacement), util.toPointer(Line64)));
}

export function SymGetLineFromAddrW64(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwAddr: number | bigint /* u64 */,
  pdwDisplacement: Deno.PointerValue | Uint8Array | null /* ptr */,
  Line: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetLineFromAddrW64(util.toPointer(hProcess), util.toBigInt(util.toPointer(dwAddr)), util.toPointer(pdwDisplacement), util.toPointer(Line)));
}

export function SymGetLineFromInlineContext(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  qwAddr: number | bigint /* u64 */,
  InlineContext: number /* u32 */,
  qwModuleBaseAddress: number | bigint /* u64 */,
  pdwDisplacement: Deno.PointerValue | Uint8Array | null /* ptr */,
  Line64: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetLineFromInlineContext(util.toPointer(hProcess), util.toBigInt(util.toPointer(qwAddr)), InlineContext, util.toBigInt(util.toPointer(qwModuleBaseAddress)), util.toPointer(pdwDisplacement), util.toPointer(Line64)));
}

export function SymGetLineFromInlineContextW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwAddr: number | bigint /* u64 */,
  InlineContext: number /* u32 */,
  qwModuleBaseAddress: number | bigint /* u64 */,
  pdwDisplacement: Deno.PointerValue | Uint8Array | null /* ptr */,
  Line: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetLineFromInlineContextW(util.toPointer(hProcess), util.toBigInt(util.toPointer(dwAddr)), InlineContext, util.toBigInt(util.toPointer(qwModuleBaseAddress)), util.toPointer(pdwDisplacement), util.toPointer(Line)));
}

export function SymEnumSourceLines(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Base: number | bigint /* u64 */,
  Obj: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  File: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Line: number /* u32 */,
  Flags: number /* u32 */,
  EnumLinesCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PSYM_ENUMLINES_CALLBACK */,
  UserContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymEnumSourceLines(util.toPointer(hProcess), util.toBigInt(util.toPointer(Base)), util.pstrToFfi(Obj), util.pstrToFfi(File), Line, Flags, util.toPointer(EnumLinesCallback), util.toPointer(UserContext)));
}

export function SymEnumSourceLinesW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Base: number | bigint /* u64 */,
  Obj: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  File: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Line: number /* u32 */,
  Flags: number /* u32 */,
  EnumLinesCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PSYM_ENUMLINES_CALLBACKW */,
  UserContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymEnumSourceLinesW(util.toPointer(hProcess), util.toBigInt(util.toPointer(Base)), util.pwstrToFfi(Obj), util.pwstrToFfi(File), Line, Flags, util.toPointer(EnumLinesCallback), util.toPointer(UserContext)));
}

export function SymAddrIncludeInlineTrace(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Address: number | bigint /* u64 */,
): number /* u32 */ {
  return libdbghelp_dll.SymAddrIncludeInlineTrace(util.toPointer(hProcess), util.toBigInt(util.toPointer(Address)));
}

export function SymCompareInlineTrace(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Address1: number | bigint /* u64 */,
  InlineContext1: number /* u32 */,
  RetAddress1: number | bigint /* u64 */,
  Address2: number | bigint /* u64 */,
  RetAddress2: number | bigint /* u64 */,
): number /* u32 */ {
  return libdbghelp_dll.SymCompareInlineTrace(util.toPointer(hProcess), util.toBigInt(util.toPointer(Address1)), InlineContext1, util.toBigInt(util.toPointer(RetAddress1)), util.toBigInt(util.toPointer(Address2)), util.toBigInt(util.toPointer(RetAddress2)));
}

export function SymQueryInlineTrace(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  StartAddress: number | bigint /* u64 */,
  StartContext: number /* u32 */,
  StartRetAddress: number | bigint /* u64 */,
  CurAddress: number | bigint /* u64 */,
  CurContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  CurFrameIndex: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymQueryInlineTrace(util.toPointer(hProcess), util.toBigInt(util.toPointer(StartAddress)), StartContext, util.toBigInt(util.toPointer(StartRetAddress)), util.toBigInt(util.toPointer(CurAddress)), util.toPointer(CurContext), util.toPointer(CurFrameIndex)));
}

export function SymGetLineFromAddr(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwAddr: number /* u32 */,
  pdwDisplacement: Deno.PointerValue | Uint8Array | null /* ptr */,
  Line: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetLineFromAddr(util.toPointer(hProcess), dwAddr, util.toPointer(pdwDisplacement), util.toPointer(Line)));
}

export function SymGetLineFromName64(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ModuleName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  FileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwLineNumber: number /* u32 */,
  plDisplacement: Deno.PointerValue | Uint8Array | null /* ptr */,
  Line: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetLineFromName64(util.toPointer(hProcess), util.pstrToFfi(ModuleName), util.pstrToFfi(FileName), dwLineNumber, util.toPointer(plDisplacement), util.toPointer(Line)));
}

export function SymGetLineFromNameW64(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ModuleName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  FileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwLineNumber: number /* u32 */,
  plDisplacement: Deno.PointerValue | Uint8Array | null /* ptr */,
  Line: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetLineFromNameW64(util.toPointer(hProcess), util.pwstrToFfi(ModuleName), util.pwstrToFfi(FileName), dwLineNumber, util.toPointer(plDisplacement), util.toPointer(Line)));
}

export function SymGetLineFromName(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ModuleName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  FileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwLineNumber: number /* u32 */,
  plDisplacement: Deno.PointerValue | Uint8Array | null /* ptr */,
  Line: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetLineFromName(util.toPointer(hProcess), util.pstrToFfi(ModuleName), util.pstrToFfi(FileName), dwLineNumber, util.toPointer(plDisplacement), util.toPointer(Line)));
}

export function SymGetLineNext64(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Line: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetLineNext64(util.toPointer(hProcess), util.toPointer(Line)));
}

export function SymGetLineNextW64(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Line: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetLineNextW64(util.toPointer(hProcess), util.toPointer(Line)));
}

export function SymGetLineNext(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Line: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetLineNext(util.toPointer(hProcess), util.toPointer(Line)));
}

export function SymGetLinePrev64(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Line: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetLinePrev64(util.toPointer(hProcess), util.toPointer(Line)));
}

export function SymGetLinePrevW64(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Line: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetLinePrevW64(util.toPointer(hProcess), util.toPointer(Line)));
}

export function SymGetLinePrev(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Line: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetLinePrev(util.toPointer(hProcess), util.toPointer(Line)));
}

export function SymGetFileLineOffsets64(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ModuleName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  FileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferLines: number /* u32 */,
): number /* u32 */ {
  return libdbghelp_dll.SymGetFileLineOffsets64(util.toPointer(hProcess), util.pstrToFfi(ModuleName), util.pstrToFfi(FileName), util.toPointer(Buffer), BufferLines);
}

export function SymMatchFileName(
  FileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Match: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  FileNameStop: Deno.PointerValue | Uint8Array | null /* ptr */,
  MatchStop: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymMatchFileName(util.pstrToFfi(FileName), util.pstrToFfi(Match), util.toPointer(FileNameStop), util.toPointer(MatchStop)));
}

export function SymMatchFileNameW(
  FileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Match: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  FileNameStop: Deno.PointerValue | Uint8Array | null /* ptr */,
  MatchStop: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymMatchFileNameW(util.pwstrToFfi(FileName), util.pwstrToFfi(Match), util.toPointer(FileNameStop), util.toPointer(MatchStop)));
}

export function SymGetSourceFile(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Base: number | bigint /* u64 */,
  Params: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  FileSpec: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  FilePath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Size: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetSourceFile(util.toPointer(hProcess), util.toBigInt(util.toPointer(Base)), util.pstrToFfi(Params), util.pstrToFfi(FileSpec), util.pstrToFfi(FilePath), Size));
}

export function SymGetSourceFileW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Base: number | bigint /* u64 */,
  Params: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  FileSpec: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  FilePath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Size: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetSourceFileW(util.toPointer(hProcess), util.toBigInt(util.toPointer(Base)), util.pwstrToFfi(Params), util.pwstrToFfi(FileSpec), util.pwstrToFfi(FilePath), Size));
}

export function SymGetSourceFileToken(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Base: number | bigint /* u64 */,
  FileSpec: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Token: Deno.PointerValue | Uint8Array | null /* ptr */,
  Size: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetSourceFileToken(util.toPointer(hProcess), util.toBigInt(util.toPointer(Base)), util.pstrToFfi(FileSpec), util.toPointer(Token), util.toPointer(Size)));
}

export function SymGetSourceFileTokenByTokenName(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Base: number | bigint /* u64 */,
  FileSpec: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  TokenName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  TokenParameters: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Token: Deno.PointerValue | Uint8Array | null /* ptr */,
  Size: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetSourceFileTokenByTokenName(util.toPointer(hProcess), util.toBigInt(util.toPointer(Base)), util.pstrToFfi(FileSpec), util.pstrToFfi(TokenName), util.pstrToFfi(TokenParameters), util.toPointer(Token), util.toPointer(Size)));
}

export function SymGetSourceFileChecksumW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Base: number | bigint /* u64 */,
  FileSpec: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pCheckSumType: Deno.PointerValue | Uint8Array | null /* ptr */,
  pChecksum: Deno.PointerValue | Uint8Array | null /* ptr */,
  checksumSize: number /* u32 */,
  pActualBytesWritten: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetSourceFileChecksumW(util.toPointer(hProcess), util.toBigInt(util.toPointer(Base)), util.pwstrToFfi(FileSpec), util.toPointer(pCheckSumType), util.toPointer(pChecksum), checksumSize, util.toPointer(pActualBytesWritten)));
}

export function SymGetSourceFileChecksum(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Base: number | bigint /* u64 */,
  FileSpec: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pCheckSumType: Deno.PointerValue | Uint8Array | null /* ptr */,
  pChecksum: Deno.PointerValue | Uint8Array | null /* ptr */,
  checksumSize: number /* u32 */,
  pActualBytesWritten: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetSourceFileChecksum(util.toPointer(hProcess), util.toBigInt(util.toPointer(Base)), util.pstrToFfi(FileSpec), util.toPointer(pCheckSumType), util.toPointer(pChecksum), checksumSize, util.toPointer(pActualBytesWritten)));
}

export function SymGetSourceFileTokenW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Base: number | bigint /* u64 */,
  FileSpec: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Token: Deno.PointerValue | Uint8Array | null /* ptr */,
  Size: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetSourceFileTokenW(util.toPointer(hProcess), util.toBigInt(util.toPointer(Base)), util.pwstrToFfi(FileSpec), util.toPointer(Token), util.toPointer(Size)));
}

export function SymGetSourceFileTokenByTokenNameW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Base: number | bigint /* u64 */,
  FileSpec: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  TokenName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  TokenParameters: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Token: Deno.PointerValue | Uint8Array | null /* ptr */,
  Size: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetSourceFileTokenByTokenNameW(util.toPointer(hProcess), util.toBigInt(util.toPointer(Base)), util.pwstrToFfi(FileSpec), util.pwstrToFfi(TokenName), util.pwstrToFfi(TokenParameters), util.toPointer(Token), util.toPointer(Size)));
}

export function SymGetSourceFileFromToken(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Token: Deno.PointerValue | Uint8Array | null /* ptr */,
  Params: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  FilePath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Size: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetSourceFileFromToken(util.toPointer(hProcess), util.toPointer(Token), util.pstrToFfi(Params), util.pstrToFfi(FilePath), Size));
}

export function SymGetSourceFileFromTokenByTokenName(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Token: Deno.PointerValue | Uint8Array | null /* ptr */,
  TokenName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Params: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  FilePath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Size: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetSourceFileFromTokenByTokenName(util.toPointer(hProcess), util.toPointer(Token), util.pstrToFfi(TokenName), util.pstrToFfi(Params), util.pstrToFfi(FilePath), Size));
}

export function SymGetSourceFileFromTokenW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Token: Deno.PointerValue | Uint8Array | null /* ptr */,
  Params: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  FilePath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Size: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetSourceFileFromTokenW(util.toPointer(hProcess), util.toPointer(Token), util.pwstrToFfi(Params), util.pwstrToFfi(FilePath), Size));
}

export function SymGetSourceFileFromTokenByTokenNameW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Token: Deno.PointerValue | Uint8Array | null /* ptr */,
  TokenName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Params: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  FilePath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Size: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetSourceFileFromTokenByTokenNameW(util.toPointer(hProcess), util.toPointer(Token), util.pwstrToFfi(TokenName), util.pwstrToFfi(Params), util.pwstrToFfi(FilePath), Size));
}

export function SymGetSourceVarFromToken(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Token: Deno.PointerValue | Uint8Array | null /* ptr */,
  Params: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  VarName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Value: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Size: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetSourceVarFromToken(util.toPointer(hProcess), util.toPointer(Token), util.pstrToFfi(Params), util.pstrToFfi(VarName), util.pstrToFfi(Value), Size));
}

export function SymGetSourceVarFromTokenW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Token: Deno.PointerValue | Uint8Array | null /* ptr */,
  Params: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  VarName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Value: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Size: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetSourceVarFromTokenW(util.toPointer(hProcess), util.toPointer(Token), util.pwstrToFfi(Params), util.pwstrToFfi(VarName), util.pwstrToFfi(Value), Size));
}

export function SymEnumSourceFileTokens(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Base: number | bigint /* u64 */,
  Callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PENUMSOURCEFILETOKENSCALLBACK */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymEnumSourceFileTokens(util.toPointer(hProcess), util.toBigInt(util.toPointer(Base)), util.toPointer(Callback)));
}

export function SymInitialize(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  UserSearchPath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  fInvadeProcess: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymInitialize(util.toPointer(hProcess), util.pstrToFfi(UserSearchPath), util.boolToFfi(fInvadeProcess)));
}

export function SymInitializeW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  UserSearchPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  fInvadeProcess: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymInitializeW(util.toPointer(hProcess), util.pwstrToFfi(UserSearchPath), util.boolToFfi(fInvadeProcess)));
}

export function SymGetSearchPath(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  SearchPathA: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  SearchPathLength: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetSearchPath(util.toPointer(hProcess), util.pstrToFfi(SearchPathA), SearchPathLength));
}

export function SymGetSearchPathW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  SearchPathA: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SearchPathLength: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetSearchPathW(util.toPointer(hProcess), util.pwstrToFfi(SearchPathA), SearchPathLength));
}

export function SymSetSearchPath(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  SearchPathA: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymSetSearchPath(util.toPointer(hProcess), util.pstrToFfi(SearchPathA)));
}

export function SymSetSearchPathW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  SearchPathA: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymSetSearchPathW(util.toPointer(hProcess), util.pwstrToFfi(SearchPathA)));
}

export function SymLoadModuleEx(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  hFile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ImageName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ModuleName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  BaseOfDll: number | bigint /* u64 */,
  DllSize: number /* u32 */,
  Data: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: SYM_LOAD_FLAGS /* Windows.Win32.System.Diagnostics.Debug.SYM_LOAD_FLAGS */,
): number | bigint /* u64 */ {
  return libdbghelp_dll.SymLoadModuleEx(util.toPointer(hProcess), util.toPointer(hFile), util.pstrToFfi(ImageName), util.pstrToFfi(ModuleName), util.toBigInt(util.toPointer(BaseOfDll)), DllSize, util.toPointer(Data), Flags);
}

export function SymLoadModuleExW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  hFile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ImageName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ModuleName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  BaseOfDll: number | bigint /* u64 */,
  DllSize: number /* u32 */,
  Data: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: SYM_LOAD_FLAGS /* Windows.Win32.System.Diagnostics.Debug.SYM_LOAD_FLAGS */,
): number | bigint /* u64 */ {
  return libdbghelp_dll.SymLoadModuleExW(util.toPointer(hProcess), util.toPointer(hFile), util.pwstrToFfi(ImageName), util.pwstrToFfi(ModuleName), util.toBigInt(util.toPointer(BaseOfDll)), DllSize, util.toPointer(Data), Flags);
}

export function SymUnloadModule64(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  BaseOfDll: number | bigint /* u64 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymUnloadModule64(util.toPointer(hProcess), util.toBigInt(util.toPointer(BaseOfDll))));
}

export function SymUnloadModule(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  BaseOfDll: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymUnloadModule(util.toPointer(hProcess), BaseOfDll));
}

export function SymUnDName64(
  sym: Deno.PointerValue | Uint8Array | null /* ptr */,
  UnDecName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  UnDecNameLength: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymUnDName64(util.toPointer(sym), util.pstrToFfi(UnDecName), UnDecNameLength));
}

export function SymUnDName(
  sym: Deno.PointerValue | Uint8Array | null /* ptr */,
  UnDecName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  UnDecNameLength: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymUnDName(util.toPointer(sym), util.pstrToFfi(UnDecName), UnDecNameLength));
}

export function SymRegisterCallback64(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  CallbackFunction: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PSYMBOL_REGISTERED_CALLBACK64 */,
  UserContext: number | bigint /* u64 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymRegisterCallback64(util.toPointer(hProcess), util.toPointer(CallbackFunction), util.toBigInt(util.toPointer(UserContext))));
}

export function SymRegisterCallbackW64(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  CallbackFunction: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PSYMBOL_REGISTERED_CALLBACK64 */,
  UserContext: number | bigint /* u64 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymRegisterCallbackW64(util.toPointer(hProcess), util.toPointer(CallbackFunction), util.toBigInt(util.toPointer(UserContext))));
}

export function SymRegisterFunctionEntryCallback64(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  CallbackFunction: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PSYMBOL_FUNCENTRY_CALLBACK64 */,
  UserContext: number | bigint /* u64 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymRegisterFunctionEntryCallback64(util.toPointer(hProcess), util.toPointer(CallbackFunction), util.toBigInt(util.toPointer(UserContext))));
}

export function SymRegisterCallback(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  CallbackFunction: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PSYMBOL_REGISTERED_CALLBACK */,
  UserContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymRegisterCallback(util.toPointer(hProcess), util.toPointer(CallbackFunction), util.toPointer(UserContext)));
}

export function SymRegisterFunctionEntryCallback(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  CallbackFunction: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PSYMBOL_FUNCENTRY_CALLBACK */,
  UserContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymRegisterFunctionEntryCallback(util.toPointer(hProcess), util.toPointer(CallbackFunction), util.toPointer(UserContext)));
}

export function SymSetContext(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  StackFrame: Deno.PointerValue | Uint8Array | null /* ptr */,
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymSetContext(util.toPointer(hProcess), util.toPointer(StackFrame), util.toPointer(Context)));
}

export function SymSetScopeFromAddr(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Address: number | bigint /* u64 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymSetScopeFromAddr(util.toPointer(hProcess), util.toBigInt(util.toPointer(Address))));
}

export function SymSetScopeFromInlineContext(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Address: number | bigint /* u64 */,
  InlineContext: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymSetScopeFromInlineContext(util.toPointer(hProcess), util.toBigInt(util.toPointer(Address)), InlineContext));
}

export function SymSetScopeFromIndex(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  BaseOfDll: number | bigint /* u64 */,
  Index: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymSetScopeFromIndex(util.toPointer(hProcess), util.toBigInt(util.toPointer(BaseOfDll)), Index));
}

export function SymEnumProcesses(
  EnumProcessesCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PSYM_ENUMPROCESSES_CALLBACK */,
  UserContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymEnumProcesses(util.toPointer(EnumProcessesCallback), util.toPointer(UserContext)));
}

export function SymFromAddr(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Address: number | bigint /* u64 */,
  Displacement: Deno.PointerValue | Uint8Array | null /* ptr */,
  Symbol: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymFromAddr(util.toPointer(hProcess), util.toBigInt(util.toPointer(Address)), util.toPointer(Displacement), util.toPointer(Symbol)));
}

export function SymFromAddrW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Address: number | bigint /* u64 */,
  Displacement: Deno.PointerValue | Uint8Array | null /* ptr */,
  Symbol: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymFromAddrW(util.toPointer(hProcess), util.toBigInt(util.toPointer(Address)), util.toPointer(Displacement), util.toPointer(Symbol)));
}

export function SymFromInlineContext(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Address: number | bigint /* u64 */,
  InlineContext: number /* u32 */,
  Displacement: Deno.PointerValue | Uint8Array | null /* ptr */,
  Symbol: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymFromInlineContext(util.toPointer(hProcess), util.toBigInt(util.toPointer(Address)), InlineContext, util.toPointer(Displacement), util.toPointer(Symbol)));
}

export function SymFromInlineContextW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Address: number | bigint /* u64 */,
  InlineContext: number /* u32 */,
  Displacement: Deno.PointerValue | Uint8Array | null /* ptr */,
  Symbol: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymFromInlineContextW(util.toPointer(hProcess), util.toBigInt(util.toPointer(Address)), InlineContext, util.toPointer(Displacement), util.toPointer(Symbol)));
}

export function SymFromToken(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Base: number | bigint /* u64 */,
  Token: number /* u32 */,
  Symbol: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymFromToken(util.toPointer(hProcess), util.toBigInt(util.toPointer(Base)), Token, util.toPointer(Symbol)));
}

export function SymFromTokenW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Base: number | bigint /* u64 */,
  Token: number /* u32 */,
  Symbol: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymFromTokenW(util.toPointer(hProcess), util.toBigInt(util.toPointer(Base)), Token, util.toPointer(Symbol)));
}

export function SymNext(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  si: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymNext(util.toPointer(hProcess), util.toPointer(si)));
}

export function SymNextW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  siw: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymNextW(util.toPointer(hProcess), util.toPointer(siw)));
}

export function SymPrev(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  si: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymPrev(util.toPointer(hProcess), util.toPointer(si)));
}

export function SymPrevW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  siw: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymPrevW(util.toPointer(hProcess), util.toPointer(siw)));
}

export function SymFromName(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Name: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Symbol: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymFromName(util.toPointer(hProcess), util.pstrToFfi(Name), util.toPointer(Symbol)));
}

export function SymFromNameW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Name: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Symbol: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymFromNameW(util.toPointer(hProcess), util.pwstrToFfi(Name), util.toPointer(Symbol)));
}

export function SymEnumSymbols(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  BaseOfDll: number | bigint /* u64 */,
  Mask: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  EnumSymbolsCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PSYM_ENUMERATESYMBOLS_CALLBACK */,
  UserContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymEnumSymbols(util.toPointer(hProcess), util.toBigInt(util.toPointer(BaseOfDll)), util.pstrToFfi(Mask), util.toPointer(EnumSymbolsCallback), util.toPointer(UserContext)));
}

export function SymEnumSymbolsEx(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  BaseOfDll: number | bigint /* u64 */,
  Mask: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  EnumSymbolsCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PSYM_ENUMERATESYMBOLS_CALLBACK */,
  UserContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  Options: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymEnumSymbolsEx(util.toPointer(hProcess), util.toBigInt(util.toPointer(BaseOfDll)), util.pstrToFfi(Mask), util.toPointer(EnumSymbolsCallback), util.toPointer(UserContext), Options));
}

export function SymEnumSymbolsW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  BaseOfDll: number | bigint /* u64 */,
  Mask: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  EnumSymbolsCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PSYM_ENUMERATESYMBOLS_CALLBACKW */,
  UserContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymEnumSymbolsW(util.toPointer(hProcess), util.toBigInt(util.toPointer(BaseOfDll)), util.pwstrToFfi(Mask), util.toPointer(EnumSymbolsCallback), util.toPointer(UserContext)));
}

export function SymEnumSymbolsExW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  BaseOfDll: number | bigint /* u64 */,
  Mask: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  EnumSymbolsCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PSYM_ENUMERATESYMBOLS_CALLBACKW */,
  UserContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  Options: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymEnumSymbolsExW(util.toPointer(hProcess), util.toBigInt(util.toPointer(BaseOfDll)), util.pwstrToFfi(Mask), util.toPointer(EnumSymbolsCallback), util.toPointer(UserContext), Options));
}

export function SymEnumSymbolsForAddr(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Address: number | bigint /* u64 */,
  EnumSymbolsCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PSYM_ENUMERATESYMBOLS_CALLBACK */,
  UserContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymEnumSymbolsForAddr(util.toPointer(hProcess), util.toBigInt(util.toPointer(Address)), util.toPointer(EnumSymbolsCallback), util.toPointer(UserContext)));
}

export function SymEnumSymbolsForAddrW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Address: number | bigint /* u64 */,
  EnumSymbolsCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PSYM_ENUMERATESYMBOLS_CALLBACKW */,
  UserContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymEnumSymbolsForAddrW(util.toPointer(hProcess), util.toBigInt(util.toPointer(Address)), util.toPointer(EnumSymbolsCallback), util.toPointer(UserContext)));
}

export function SymSearch(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  BaseOfDll: number | bigint /* u64 */,
  Index: number /* u32 */,
  SymTag: number /* u32 */,
  Mask: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Address: number | bigint /* u64 */,
  EnumSymbolsCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PSYM_ENUMERATESYMBOLS_CALLBACK */,
  UserContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  Options: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymSearch(util.toPointer(hProcess), util.toBigInt(util.toPointer(BaseOfDll)), Index, SymTag, util.pstrToFfi(Mask), util.toBigInt(util.toPointer(Address)), util.toPointer(EnumSymbolsCallback), util.toPointer(UserContext), Options));
}

export function SymSearchW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  BaseOfDll: number | bigint /* u64 */,
  Index: number /* u32 */,
  SymTag: number /* u32 */,
  Mask: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Address: number | bigint /* u64 */,
  EnumSymbolsCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PSYM_ENUMERATESYMBOLS_CALLBACKW */,
  UserContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  Options: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymSearchW(util.toPointer(hProcess), util.toBigInt(util.toPointer(BaseOfDll)), Index, SymTag, util.pwstrToFfi(Mask), util.toBigInt(util.toPointer(Address)), util.toPointer(EnumSymbolsCallback), util.toPointer(UserContext), Options));
}

export function SymGetScope(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  BaseOfDll: number | bigint /* u64 */,
  Index: number /* u32 */,
  Symbol: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetScope(util.toPointer(hProcess), util.toBigInt(util.toPointer(BaseOfDll)), Index, util.toPointer(Symbol)));
}

export function SymGetScopeW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  BaseOfDll: number | bigint /* u64 */,
  Index: number /* u32 */,
  Symbol: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetScopeW(util.toPointer(hProcess), util.toBigInt(util.toPointer(BaseOfDll)), Index, util.toPointer(Symbol)));
}

export function SymFromIndex(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  BaseOfDll: number | bigint /* u64 */,
  Index: number /* u32 */,
  Symbol: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymFromIndex(util.toPointer(hProcess), util.toBigInt(util.toPointer(BaseOfDll)), Index, util.toPointer(Symbol)));
}

export function SymFromIndexW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  BaseOfDll: number | bigint /* u64 */,
  Index: number /* u32 */,
  Symbol: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymFromIndexW(util.toPointer(hProcess), util.toBigInt(util.toPointer(BaseOfDll)), Index, util.toPointer(Symbol)));
}

export function SymGetTypeInfo(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ModBase: number | bigint /* u64 */,
  TypeId: number /* u32 */,
  GetType: IMAGEHLP_SYMBOL_TYPE_INFO /* Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_SYMBOL_TYPE_INFO */,
  pInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetTypeInfo(util.toPointer(hProcess), util.toBigInt(util.toPointer(ModBase)), TypeId, GetType, util.toPointer(pInfo)));
}

export function SymGetTypeInfoEx(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ModBase: number | bigint /* u64 */,
  Params: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetTypeInfoEx(util.toPointer(hProcess), util.toBigInt(util.toPointer(ModBase)), util.toPointer(Params)));
}

export function SymEnumTypes(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  BaseOfDll: number | bigint /* u64 */,
  EnumSymbolsCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PSYM_ENUMERATESYMBOLS_CALLBACK */,
  UserContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymEnumTypes(util.toPointer(hProcess), util.toBigInt(util.toPointer(BaseOfDll)), util.toPointer(EnumSymbolsCallback), util.toPointer(UserContext)));
}

export function SymEnumTypesW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  BaseOfDll: number | bigint /* u64 */,
  EnumSymbolsCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PSYM_ENUMERATESYMBOLS_CALLBACKW */,
  UserContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymEnumTypesW(util.toPointer(hProcess), util.toBigInt(util.toPointer(BaseOfDll)), util.toPointer(EnumSymbolsCallback), util.toPointer(UserContext)));
}

export function SymEnumTypesByName(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  BaseOfDll: number | bigint /* u64 */,
  mask: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  EnumSymbolsCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PSYM_ENUMERATESYMBOLS_CALLBACK */,
  UserContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymEnumTypesByName(util.toPointer(hProcess), util.toBigInt(util.toPointer(BaseOfDll)), util.pstrToFfi(mask), util.toPointer(EnumSymbolsCallback), util.toPointer(UserContext)));
}

export function SymEnumTypesByNameW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  BaseOfDll: number | bigint /* u64 */,
  mask: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  EnumSymbolsCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PSYM_ENUMERATESYMBOLS_CALLBACKW */,
  UserContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymEnumTypesByNameW(util.toPointer(hProcess), util.toBigInt(util.toPointer(BaseOfDll)), util.pwstrToFfi(mask), util.toPointer(EnumSymbolsCallback), util.toPointer(UserContext)));
}

export function SymGetTypeFromName(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  BaseOfDll: number | bigint /* u64 */,
  Name: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Symbol: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetTypeFromName(util.toPointer(hProcess), util.toBigInt(util.toPointer(BaseOfDll)), util.pstrToFfi(Name), util.toPointer(Symbol)));
}

export function SymGetTypeFromNameW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  BaseOfDll: number | bigint /* u64 */,
  Name: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Symbol: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetTypeFromNameW(util.toPointer(hProcess), util.toBigInt(util.toPointer(BaseOfDll)), util.pwstrToFfi(Name), util.toPointer(Symbol)));
}

export function SymAddSymbol(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  BaseOfDll: number | bigint /* u64 */,
  Name: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Address: number | bigint /* u64 */,
  Size: number /* u32 */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymAddSymbol(util.toPointer(hProcess), util.toBigInt(util.toPointer(BaseOfDll)), util.pstrToFfi(Name), util.toBigInt(util.toPointer(Address)), Size, Flags));
}

export function SymAddSymbolW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  BaseOfDll: number | bigint /* u64 */,
  Name: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Address: number | bigint /* u64 */,
  Size: number /* u32 */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymAddSymbolW(util.toPointer(hProcess), util.toBigInt(util.toPointer(BaseOfDll)), util.pwstrToFfi(Name), util.toBigInt(util.toPointer(Address)), Size, Flags));
}

export function SymDeleteSymbol(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  BaseOfDll: number | bigint /* u64 */,
  Name: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Address: number | bigint /* u64 */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymDeleteSymbol(util.toPointer(hProcess), util.toBigInt(util.toPointer(BaseOfDll)), util.pstrToFfi(Name), util.toBigInt(util.toPointer(Address)), Flags));
}

export function SymDeleteSymbolW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  BaseOfDll: number | bigint /* u64 */,
  Name: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Address: number | bigint /* u64 */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymDeleteSymbolW(util.toPointer(hProcess), util.toBigInt(util.toPointer(BaseOfDll)), util.pwstrToFfi(Name), util.toBigInt(util.toPointer(Address)), Flags));
}

export function SymRefreshModuleList(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymRefreshModuleList(util.toPointer(hProcess)));
}

export function SymAddSourceStream(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Base: number | bigint /* u64 */,
  StreamFile: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  Size: number | bigint /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymAddSourceStream(util.toPointer(hProcess), util.toBigInt(util.toPointer(Base)), util.pstrToFfi(StreamFile), util.toPointer(Buffer), util.toBigInt(util.toPointer(Size))));
}

export function SymAddSourceStreamA(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Base: number | bigint /* u64 */,
  StreamFile: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  Size: number | bigint /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymAddSourceStreamA(util.toPointer(hProcess), util.toBigInt(util.toPointer(Base)), util.pstrToFfi(StreamFile), util.toPointer(Buffer), util.toBigInt(util.toPointer(Size))));
}

export function SymAddSourceStreamW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Base: number | bigint /* u64 */,
  FileSpec: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  Size: number | bigint /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymAddSourceStreamW(util.toPointer(hProcess), util.toBigInt(util.toPointer(Base)), util.pwstrToFfi(FileSpec), util.toPointer(Buffer), util.toBigInt(util.toPointer(Size))));
}

export function SymSrvIsStoreW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  path: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymSrvIsStoreW(util.toPointer(hProcess), util.pwstrToFfi(path)));
}

export function SymSrvIsStore(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  path: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymSrvIsStore(util.toPointer(hProcess), util.pstrToFfi(path)));
}

export function SymSrvDeltaName(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  SymPath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Type: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  File1: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  File2: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libdbghelp_dll.SymSrvDeltaName(util.toPointer(hProcess), util.pstrToFfi(SymPath), util.pstrToFfi(Type), util.pstrToFfi(File1), util.pstrToFfi(File2)));
}

export function SymSrvDeltaNameW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  SymPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Type: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  File1: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  File2: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libdbghelp_dll.SymSrvDeltaNameW(util.toPointer(hProcess), util.pwstrToFfi(SymPath), util.pwstrToFfi(Type), util.pwstrToFfi(File1), util.pwstrToFfi(File2)));
}

export function SymSrvGetSupplement(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  SymPath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Node: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  File: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libdbghelp_dll.SymSrvGetSupplement(util.toPointer(hProcess), util.pstrToFfi(SymPath), util.pstrToFfi(Node), util.pstrToFfi(File)));
}

export function SymSrvGetSupplementW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  SymPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Node: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  File: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libdbghelp_dll.SymSrvGetSupplementW(util.toPointer(hProcess), util.pwstrToFfi(SymPath), util.pwstrToFfi(Node), util.pwstrToFfi(File)));
}

export function SymSrvGetFileIndexes(
  File: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Id: Deno.PointerValue | Uint8Array | null /* ptr */,
  Val1: Deno.PointerValue | Uint8Array | null /* ptr */,
  Val2: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymSrvGetFileIndexes(util.pstrToFfi(File), util.toPointer(Id), util.toPointer(Val1), util.toPointer(Val2), Flags));
}

export function SymSrvGetFileIndexesW(
  File: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Id: Deno.PointerValue | Uint8Array | null /* ptr */,
  Val1: Deno.PointerValue | Uint8Array | null /* ptr */,
  Val2: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymSrvGetFileIndexesW(util.pwstrToFfi(File), util.toPointer(Id), util.toPointer(Val1), util.toPointer(Val2), Flags));
}

export function SymSrvGetFileIndexStringW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  SrvPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  File: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Index: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Size: number | bigint /* usize */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymSrvGetFileIndexStringW(util.toPointer(hProcess), util.pwstrToFfi(SrvPath), util.pwstrToFfi(File), util.pwstrToFfi(Index), util.toBigInt(util.toPointer(Size)), Flags));
}

export function SymSrvGetFileIndexString(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  SrvPath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  File: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Index: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Size: number | bigint /* usize */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymSrvGetFileIndexString(util.toPointer(hProcess), util.pstrToFfi(SrvPath), util.pstrToFfi(File), util.pstrToFfi(Index), util.toBigInt(util.toPointer(Size)), Flags));
}

export function SymSrvGetFileIndexInfo(
  File: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Info: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymSrvGetFileIndexInfo(util.pstrToFfi(File), util.toPointer(Info), Flags));
}

export function SymSrvGetFileIndexInfoW(
  File: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Info: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymSrvGetFileIndexInfoW(util.pwstrToFfi(File), util.toPointer(Info), Flags));
}

export function SymSrvStoreSupplement(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  SrvPath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Node: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  File: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Flags: number /* u32 */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libdbghelp_dll.SymSrvStoreSupplement(util.toPointer(hProcess), util.pstrToFfi(SrvPath), util.pstrToFfi(Node), util.pstrToFfi(File), Flags));
}

export function SymSrvStoreSupplementW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  SymPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Node: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  File: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libdbghelp_dll.SymSrvStoreSupplementW(util.toPointer(hProcess), util.pwstrToFfi(SymPath), util.pwstrToFfi(Node), util.pwstrToFfi(File), Flags));
}

export function SymSrvStoreFile(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  SrvPath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  File: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Flags: SYM_SRV_STORE_FILE_FLAGS /* Windows.Win32.System.Diagnostics.Debug.SYM_SRV_STORE_FILE_FLAGS */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libdbghelp_dll.SymSrvStoreFile(util.toPointer(hProcess), util.pstrToFfi(SrvPath), util.pstrToFfi(File), Flags));
}

export function SymSrvStoreFileW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  SrvPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  File: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: SYM_SRV_STORE_FILE_FLAGS /* Windows.Win32.System.Diagnostics.Debug.SYM_SRV_STORE_FILE_FLAGS */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libdbghelp_dll.SymSrvStoreFileW(util.toPointer(hProcess), util.pwstrToFfi(SrvPath), util.pwstrToFfi(File), Flags));
}

export function SymGetSymbolFile(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  SymPath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ImageFile: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Type: IMAGEHLP_SF_TYPE /* Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_SF_TYPE */,
  SymbolFile: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cSymbolFile: number | bigint /* usize */,
  DbgFile: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cDbgFile: number | bigint /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetSymbolFile(util.toPointer(hProcess), util.pstrToFfi(SymPath), util.pstrToFfi(ImageFile), Type, util.pstrToFfi(SymbolFile), util.toBigInt(util.toPointer(cSymbolFile)), util.pstrToFfi(DbgFile), util.toBigInt(util.toPointer(cDbgFile))));
}

export function SymGetSymbolFileW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  SymPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ImageFile: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Type: IMAGEHLP_SF_TYPE /* Windows.Win32.System.Diagnostics.Debug.IMAGEHLP_SF_TYPE */,
  SymbolFile: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cSymbolFile: number | bigint /* usize */,
  DbgFile: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cDbgFile: number | bigint /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetSymbolFileW(util.toPointer(hProcess), util.pwstrToFfi(SymPath), util.pwstrToFfi(ImageFile), Type, util.pwstrToFfi(SymbolFile), util.toBigInt(util.toPointer(cSymbolFile)), util.pwstrToFfi(DbgFile), util.toBigInt(util.toPointer(cDbgFile))));
}

export function DbgHelpCreateUserDump(
  FileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PDBGHELP_CREATE_USER_DUMP_CALLBACK */,
  UserData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.DbgHelpCreateUserDump(util.pstrToFfi(FileName), util.toPointer(Callback), util.toPointer(UserData)));
}

export function DbgHelpCreateUserDumpW(
  FileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PDBGHELP_CREATE_USER_DUMP_CALLBACK */,
  UserData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.DbgHelpCreateUserDumpW(util.pwstrToFfi(FileName), util.toPointer(Callback), util.toPointer(UserData)));
}

export function SymGetSymFromAddr64(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  qwAddr: number | bigint /* u64 */,
  pdwDisplacement: Deno.PointerValue | Uint8Array | null /* ptr */,
  Symbol: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetSymFromAddr64(util.toPointer(hProcess), util.toBigInt(util.toPointer(qwAddr)), util.toPointer(pdwDisplacement), util.toPointer(Symbol)));
}

export function SymGetSymFromAddr(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwAddr: number /* u32 */,
  pdwDisplacement: Deno.PointerValue | Uint8Array | null /* ptr */,
  Symbol: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetSymFromAddr(util.toPointer(hProcess), dwAddr, util.toPointer(pdwDisplacement), util.toPointer(Symbol)));
}

export function SymGetSymFromName64(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Name: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Symbol: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetSymFromName64(util.toPointer(hProcess), util.pstrToFfi(Name), util.toPointer(Symbol)));
}

export function SymGetSymFromName(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Name: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Symbol: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetSymFromName(util.toPointer(hProcess), util.pstrToFfi(Name), util.toPointer(Symbol)));
}

export function FindFileInPath(
  hprocess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  SearchPathA: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  FileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  id: Deno.PointerValue | Uint8Array | null /* ptr */,
  two: number /* u32 */,
  three: number /* u32 */,
  flags: number /* u32 */,
  FilePath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.FindFileInPath(util.toPointer(hprocess), util.pstrToFfi(SearchPathA), util.pstrToFfi(FileName), util.toPointer(id), two, three, flags, util.pstrToFfi(FilePath)));
}

export function FindFileInSearchPath(
  hprocess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  SearchPathA: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  FileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  one: number /* u32 */,
  two: number /* u32 */,
  three: number /* u32 */,
  FilePath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.FindFileInSearchPath(util.toPointer(hprocess), util.pstrToFfi(SearchPathA), util.pstrToFfi(FileName), one, two, three, util.pstrToFfi(FilePath)));
}

export function SymEnumSym(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  BaseOfDll: number | bigint /* u64 */,
  EnumSymbolsCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PSYM_ENUMERATESYMBOLS_CALLBACK */,
  UserContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymEnumSym(util.toPointer(hProcess), util.toBigInt(util.toPointer(BaseOfDll)), util.toPointer(EnumSymbolsCallback), util.toPointer(UserContext)));
}

export function SymEnumerateSymbols64(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  BaseOfDll: number | bigint /* u64 */,
  EnumSymbolsCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PSYM_ENUMSYMBOLS_CALLBACK64 */,
  UserContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymEnumerateSymbols64(util.toPointer(hProcess), util.toBigInt(util.toPointer(BaseOfDll)), util.toPointer(EnumSymbolsCallback), util.toPointer(UserContext)));
}

export function SymEnumerateSymbolsW64(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  BaseOfDll: number | bigint /* u64 */,
  EnumSymbolsCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PSYM_ENUMSYMBOLS_CALLBACK64W */,
  UserContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymEnumerateSymbolsW64(util.toPointer(hProcess), util.toBigInt(util.toPointer(BaseOfDll)), util.toPointer(EnumSymbolsCallback), util.toPointer(UserContext)));
}

export function SymEnumerateSymbols(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  BaseOfDll: number /* u32 */,
  EnumSymbolsCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PSYM_ENUMSYMBOLS_CALLBACK */,
  UserContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymEnumerateSymbols(util.toPointer(hProcess), BaseOfDll, util.toPointer(EnumSymbolsCallback), util.toPointer(UserContext)));
}

export function SymEnumerateSymbolsW(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  BaseOfDll: number /* u32 */,
  EnumSymbolsCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.PSYM_ENUMSYMBOLS_CALLBACKW */,
  UserContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymEnumerateSymbolsW(util.toPointer(hProcess), BaseOfDll, util.toPointer(EnumSymbolsCallback), util.toPointer(UserContext)));
}

export function SymLoadModule64(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  hFile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ImageName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ModuleName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  BaseOfDll: number | bigint /* u64 */,
  SizeOfDll: number /* u32 */,
): number | bigint /* u64 */ {
  return libdbghelp_dll.SymLoadModule64(util.toPointer(hProcess), util.toPointer(hFile), util.pstrToFfi(ImageName), util.pstrToFfi(ModuleName), util.toBigInt(util.toPointer(BaseOfDll)), SizeOfDll);
}

export function SymLoadModule(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  hFile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ImageName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ModuleName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  BaseOfDll: number /* u32 */,
  SizeOfDll: number /* u32 */,
): number /* u32 */ {
  return libdbghelp_dll.SymLoadModule(util.toPointer(hProcess), util.toPointer(hFile), util.pstrToFfi(ImageName), util.pstrToFfi(ModuleName), BaseOfDll, SizeOfDll);
}

export function SymGetSymNext64(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Symbol: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetSymNext64(util.toPointer(hProcess), util.toPointer(Symbol)));
}

export function SymGetSymNext(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Symbol: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetSymNext(util.toPointer(hProcess), util.toPointer(Symbol)));
}

export function SymGetSymPrev64(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Symbol: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetSymPrev64(util.toPointer(hProcess), util.toPointer(Symbol)));
}

export function SymGetSymPrev(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Symbol: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.SymGetSymPrev(util.toPointer(hProcess), util.toPointer(Symbol)));
}

export function SetCheckUserInterruptShared(
  lpStartAddress: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Debug.LPCALL_BACK_USER_INTERRUPT_ROUTINE */,
): void /* void */ {
  return libdbghelp_dll.SetCheckUserInterruptShared(util.toPointer(lpStartAddress));
}

export function GetSymLoadError(): number /* u32 */ {
  return libdbghelp_dll.GetSymLoadError();
}

export function SetSymLoadError(
  error: number /* u32 */,
): void /* void */ {
  return libdbghelp_dll.SetSymLoadError(error);
}

export function ReportSymbolLoadSummary(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pLoadModule: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pSymbolData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.ReportSymbolLoadSummary(util.toPointer(hProcess), util.pwstrToFfi(pLoadModule), util.toPointer(pSymbolData)));
}

export function RemoveInvalidModuleList(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): void /* void */ {
  return libdbghelp_dll.RemoveInvalidModuleList(util.toPointer(hProcess));
}

export function RangeMapCreate(): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libdbghelp_dll.RangeMapCreate());
}

export function RangeMapFree(
  RmapHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libdbghelp_dll.RangeMapFree(util.toPointer(RmapHandle));
}

export function RangeMapAddPeImageSections(
  RmapHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  ImageName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  MappedImage: Deno.PointerValue | Uint8Array | null /* ptr */,
  MappingBytes: number /* u32 */,
  ImageBase: number | bigint /* u64 */,
  UserTag: number | bigint /* u64 */,
  MappingFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.RangeMapAddPeImageSections(util.toPointer(RmapHandle), util.pwstrToFfi(ImageName), util.toPointer(MappedImage), MappingBytes, util.toBigInt(util.toPointer(ImageBase)), util.toBigInt(util.toPointer(UserTag)), MappingFlags));
}

export function RangeMapRemove(
  RmapHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  UserTag: number | bigint /* u64 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.RangeMapRemove(util.toPointer(RmapHandle), util.toBigInt(util.toPointer(UserTag))));
}

export function RangeMapRead(
  RmapHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  Offset: number | bigint /* u64 */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  RequestBytes: number /* u32 */,
  Flags: number /* u32 */,
  DoneBytes: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.RangeMapRead(util.toPointer(RmapHandle), util.toBigInt(util.toPointer(Offset)), util.toPointer(Buffer), RequestBytes, Flags, util.toPointer(DoneBytes)));
}

export function RangeMapWrite(
  RmapHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  Offset: number | bigint /* u64 */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  RequestBytes: number /* u32 */,
  Flags: number /* u32 */,
  DoneBytes: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdbghelp_dll.RangeMapWrite(util.toPointer(RmapHandle), util.toBigInt(util.toPointer(Offset)), util.toPointer(Buffer), RequestBytes, Flags, util.toPointer(DoneBytes)));
}

export function MessageBeep(
  uType: MESSAGEBOX_STYLE /* Windows.Win32.UI.WindowsAndMessaging.MESSAGEBOX_STYLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.MessageBeep(uType));
}

export function FatalExit(
  ExitCode: number /* i32 */,
): void /* void */ {
  return libKERNEL32_dll.FatalExit(ExitCode);
}

export function GetThreadSelectorEntry(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwSelector: number /* u32 */,
  lpSelectorEntry: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetThreadSelectorEntry(util.toPointer(hThread), dwSelector, util.toPointer(lpSelectorEntry)));
}

export function Wow64GetThreadSelectorEntry(
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwSelector: number /* u32 */,
  lpSelectorEntry: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.Wow64GetThreadSelectorEntry(util.toPointer(hThread), dwSelector, util.toPointer(lpSelectorEntry)));
}

export function DebugSetProcessKillOnExit(
  KillOnExit: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.DebugSetProcessKillOnExit(util.boolToFfi(KillOnExit)));
}

export function DebugBreakProcess(
  Process: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.DebugBreakProcess(util.toPointer(Process)));
}

export function FormatMessageA(
  dwFlags: FORMAT_MESSAGE_OPTIONS /* Windows.Win32.System.Diagnostics.Debug.FORMAT_MESSAGE_OPTIONS */,
  lpSource: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwMessageId: number /* u32 */,
  dwLanguageId: number /* u32 */,
  lpBuffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nSize: number /* u32 */,
  Arguments: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libKERNEL32_dll.FormatMessageA(dwFlags, util.toPointer(lpSource), dwMessageId, dwLanguageId, util.pstrToFfi(lpBuffer), nSize, util.toPointer(Arguments));
}

export function FormatMessageW(
  dwFlags: FORMAT_MESSAGE_OPTIONS /* Windows.Win32.System.Diagnostics.Debug.FORMAT_MESSAGE_OPTIONS */,
  lpSource: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwMessageId: number /* u32 */,
  dwLanguageId: number /* u32 */,
  lpBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nSize: number /* u32 */,
  Arguments: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libKERNEL32_dll.FormatMessageW(dwFlags, util.toPointer(lpSource), dwMessageId, dwLanguageId, util.pwstrToFfi(lpBuffer), nSize, util.toPointer(Arguments));
}

export function CopyContext(
  Destination: Deno.PointerValue | Uint8Array | null /* ptr */,
  ContextFlags: number /* u32 */,
  Source: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.CopyContext(util.toPointer(Destination), ContextFlags, util.toPointer(Source)));
}

export function InitializeContext(
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  ContextFlags: number /* u32 */,
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
  ContextLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.InitializeContext(util.toPointer(Buffer), ContextFlags, util.toPointer(Context), util.toPointer(ContextLength)));
}

export function InitializeContext2(
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  ContextFlags: number /* u32 */,
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
  ContextLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  XStateCompactionMask: number | bigint /* u64 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.InitializeContext2(util.toPointer(Buffer), ContextFlags, util.toPointer(Context), util.toPointer(ContextLength), util.toBigInt(util.toPointer(XStateCompactionMask))));
}

export function GetEnabledXStateFeatures(): number | bigint /* u64 */ {
  return libKERNEL32_dll.GetEnabledXStateFeatures();
}

export function GetXStateFeaturesMask(
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
  FeatureMask: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetXStateFeaturesMask(util.toPointer(Context), util.toPointer(FeatureMask)));
}

export function LocateXStateFeature(
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
  FeatureId: number /* u32 */,
  Length: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libKERNEL32_dll.LocateXStateFeature(util.toPointer(Context), FeatureId, util.toPointer(Length)));
}

export function SetXStateFeaturesMask(
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
  FeatureMask: number | bigint /* u64 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetXStateFeaturesMask(util.toPointer(Context), util.toBigInt(util.toPointer(FeatureMask))));
}

